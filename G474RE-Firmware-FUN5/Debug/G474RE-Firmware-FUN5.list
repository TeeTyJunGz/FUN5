
G474RE-Firmware-FUN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a5a4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016e8  0801a788  0801a788  0001b788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be70  0801be70  0001d890  2**0
                  CONTENTS
  4 .ARM          00000008  0801be70  0801be70  0001ce70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be78  0801be78  0001d890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801be78  0801be78  0001ce78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801be88  0801be88  0001ce88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000890  20000000  0801be8c  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b01c  20000890  0801c71c  0001d890  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b8ac  0801c71c  0001d8ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d890  2**0
                  CONTENTS, READONLY
 12 .debug_info   000270b3  00000000  00000000  0001d8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005578  00000000  00000000  00044973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e70  00000000  00000000  00049ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001782  00000000  00000000  0004bd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de17  00000000  00000000  0004d4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e9e  00000000  00000000  0007b2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116ab2  00000000  00000000  000a3197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b9c49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000900c  00000000  00000000  001b9cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001c2ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000890 	.word	0x20000890
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801a76c 	.word	0x0801a76c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000894 	.word	0x20000894
 800021c:	0801a76c 	.word	0x0801a76c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 b9b5 	b.w	8000f54 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <timer_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	e9c7 2300 	strd	r2, r3, [r7]

	if (timer != NULL) {
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 80b9 	beq.w	80010de <timer_callback+0x186>
		if (is_calib || on_calib){
 8000f6c:	4b62      	ldr	r3, [pc, #392]	@ (80010f8 <timer_callback+0x1a0>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d104      	bne.n	8000f7e <timer_callback+0x26>
 8000f74:	4b61      	ldr	r3, [pc, #388]	@ (80010fc <timer_callback+0x1a4>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80a7 	beq.w	80010cc <timer_callback+0x174>
			MPU6050_Read_All(&hi2c1, &MPU6050);
 8000f7e:	4960      	ldr	r1, [pc, #384]	@ (8001100 <timer_callback+0x1a8>)
 8000f80:	4860      	ldr	r0, [pc, #384]	@ (8001104 <timer_callback+0x1ac>)
 8000f82:	f006 fa5d 	bl	8007440 <MPU6050_Read_All>

			mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8000f86:	f00d fac3 	bl	800e510 <rmw_uros_epoch_millis>
 8000f8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	f7ff fe19 	bl	8000bc8 <__aeabi_ldivmod>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001108 <timer_callback+0x1b0>)
 8000f9c:	601a      	str	r2, [r3, #0]
			mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 8000f9e:	f00d fac5 	bl	800e52c <rmw_uros_epoch_nanos>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4b58      	ldr	r3, [pc, #352]	@ (8001108 <timer_callback+0x1b0>)
 8000fa8:	605a      	str	r2, [r3, #4]

			mpu6050_msg.linear_acceleration.x = (GRAVITY * MPU6050.Ax) - accl_offset.x;
 8000faa:	4b55      	ldr	r3, [pc, #340]	@ (8001100 <timer_callback+0x1a8>)
 8000fac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fb0:	a34d      	add	r3, pc, #308	@ (adr r3, 80010e8 <timer_callback+0x190>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fb57 	bl	8000668 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4b52      	ldr	r3, [pc, #328]	@ (800110c <timer_callback+0x1b4>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff f996 	bl	80002f8 <__aeabi_dsub>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	494d      	ldr	r1, [pc, #308]	@ (8001108 <timer_callback+0x1b0>)
 8000fd2:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
			mpu6050_msg.linear_acceleration.y = (GRAVITY * MPU6050.Ay) - accl_offset.y;
 8000fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001100 <timer_callback+0x1a8>)
 8000fd8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fdc:	a342      	add	r3, pc, #264	@ (adr r3, 80010e8 <timer_callback+0x190>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fb41 	bl	8000668 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	4b47      	ldr	r3, [pc, #284]	@ (800110c <timer_callback+0x1b4>)
 8000ff0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ff4:	f7ff f980 	bl	80002f8 <__aeabi_dsub>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4942      	ldr	r1, [pc, #264]	@ (8001108 <timer_callback+0x1b0>)
 8000ffe:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
			mpu6050_msg.linear_acceleration.z = (GRAVITY * MPU6050.Az) - accl_offset.z;
 8001002:	4b3f      	ldr	r3, [pc, #252]	@ (8001100 <timer_callback+0x1a8>)
 8001004:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001008:	a337      	add	r3, pc, #220	@ (adr r3, 80010e8 <timer_callback+0x190>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fb2b 	bl	8000668 <__aeabi_dmul>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	4b3c      	ldr	r3, [pc, #240]	@ (800110c <timer_callback+0x1b4>)
 800101c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001020:	f7ff f96a 	bl	80002f8 <__aeabi_dsub>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4937      	ldr	r1, [pc, #220]	@ (8001108 <timer_callback+0x1b0>)
 800102a:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

			mpu6050_msg.angular_velocity.x = (DEG_TO_RAD * MPU6050.Gx) - gyro_offset.x;
 800102e:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <timer_callback+0x1a8>)
 8001030:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001034:	a32e      	add	r3, pc, #184	@ (adr r3, 80010f0 <timer_callback+0x198>)
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	f7ff fb15 	bl	8000668 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	4b32      	ldr	r3, [pc, #200]	@ (8001110 <timer_callback+0x1b8>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff f954 	bl	80002f8 <__aeabi_dsub>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	492c      	ldr	r1, [pc, #176]	@ (8001108 <timer_callback+0x1b0>)
 8001056:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
			mpu6050_msg.angular_velocity.y = (DEG_TO_RAD * MPU6050.Gy) - gyro_offset.y;
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <timer_callback+0x1a8>)
 800105c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001060:	a323      	add	r3, pc, #140	@ (adr r3, 80010f0 <timer_callback+0x198>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff faff 	bl	8000668 <__aeabi_dmul>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <timer_callback+0x1b8>)
 8001074:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001078:	f7ff f93e 	bl	80002f8 <__aeabi_dsub>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4921      	ldr	r1, [pc, #132]	@ (8001108 <timer_callback+0x1b0>)
 8001082:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
			mpu6050_msg.angular_velocity.z = (DEG_TO_RAD * MPU6050.Gz) - gyro_offset.z;
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <timer_callback+0x1a8>)
 8001088:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800108c:	a318      	add	r3, pc, #96	@ (adr r3, 80010f0 <timer_callback+0x198>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fae9 	bl	8000668 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <timer_callback+0x1b8>)
 80010a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80010a4:	f7ff f928 	bl	80002f8 <__aeabi_dsub>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4916      	ldr	r1, [pc, #88]	@ (8001108 <timer_callback+0x1b0>)
 80010ae:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

			rcl_ret_t ret = rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL);
 80010b2:	2200      	movs	r2, #0
 80010b4:	4914      	ldr	r1, [pc, #80]	@ (8001108 <timer_callback+0x1b0>)
 80010b6:	4817      	ldr	r0, [pc, #92]	@ (8001114 <timer_callback+0x1bc>)
 80010b8:	f00b fa8e 	bl	800c5d8 <rcl_publish>
 80010bc:	6178      	str	r0, [r7, #20]

			if (ret != RCL_RET_OK)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <timer_callback+0x174>
			{
			  printf("Error publishing (line %d)\n", __LINE__);
 80010c4:	2192      	movs	r1, #146	@ 0x92
 80010c6:	4814      	ldr	r0, [pc, #80]	@ (8001118 <timer_callback+0x1c0>)
 80010c8:	f017 ff54 	bl	8018f74 <iprintf>
			}

		}

	    HAL_IWDG_Refresh(&hiwdg);
 80010cc:	4813      	ldr	r0, [pc, #76]	@ (800111c <timer_callback+0x1c4>)
 80010ce:	f002 ffbb 	bl	8004048 <HAL_IWDG_Refresh>
	    cc++;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <timer_callback+0x1c8>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <timer_callback+0x1c8>)
 80010dc:	801a      	strh	r2, [r3, #0]
	}
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	3a92a305 	.word	0x3a92a305
 80010ec:	40239d01 	.word	0x40239d01
 80010f0:	a2529d39 	.word	0xa2529d39
 80010f4:	3f91df46 	.word	0x3f91df46
 80010f8:	20000bd8 	.word	0x20000bd8
 80010fc:	20000bd9 	.word	0x20000bd9
 8001100:	20000b48 	.word	0x20000b48
 8001104:	20004734 	.word	0x20004734
 8001108:	200008b8 	.word	0x200008b8
 800110c:	20000ba8 	.word	0x20000ba8
 8001110:	20000bc0 	.word	0x20000bc0
 8001114:	200008b4 	.word	0x200008b4
 8001118:	0801a794 	.word	0x0801a794
 800111c:	20004788 	.word	0x20004788
 8001120:	20000ba0 	.word	0x20000ba0

08001124 <imu_calib_service_callback>:

void imu_calib_service_callback(const void * request_msg, void * response_msg){
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  imu_interfaces__srv__ImuCalibration_Request * req_in =
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	617b      	str	r3, [r7, #20]
    (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
  imu_interfaces__srv__ImuCalibration_Response * res_in =
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	613b      	str	r3, [r7, #16]
    (imu_interfaces__srv__ImuCalibration_Response *) response_msg;

  size_t accl_size = sizeof(req_in->imu_calib.linear_acceleration_covariance);
 8001136:	2348      	movs	r3, #72	@ 0x48
 8001138:	60fb      	str	r3, [r7, #12]
  size_t gyro_size = sizeof(req_in->imu_calib.angular_velocity_covariance);
 800113a:	2348      	movs	r3, #72	@ 0x48
 800113c:	60bb      	str	r3, [r7, #8]
  memcpy(mpu6050_msg.linear_acceleration_covariance, req_in->imu_calib.linear_acceleration_covariance, accl_size);
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	33f8      	adds	r3, #248	@ 0xf8
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4619      	mov	r1, r3
 8001146:	481e      	ldr	r0, [pc, #120]	@ (80011c0 <imu_calib_service_callback+0x9c>)
 8001148:	f018 f95d 	bl	8019406 <memcpy>
  memcpy(mpu6050_msg.angular_velocity_covariance, req_in->imu_calib.angular_velocity_covariance, gyro_size);
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3398      	adds	r3, #152	@ 0x98
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	4619      	mov	r1, r3
 8001154:	481b      	ldr	r0, [pc, #108]	@ (80011c4 <imu_calib_service_callback+0xa0>)
 8001156:	f018 f956 	bl	8019406 <memcpy>

  accl_offset.x = req_in->imu_calib.linear_acceleration.x;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8001160:	4919      	ldr	r1, [pc, #100]	@ (80011c8 <imu_calib_service_callback+0xa4>)
 8001162:	e9c1 2300 	strd	r2, r3, [r1]
  accl_offset.y = req_in->imu_calib.linear_acceleration.y;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 800116c:	4916      	ldr	r1, [pc, #88]	@ (80011c8 <imu_calib_service_callback+0xa4>)
 800116e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  accl_offset.z = req_in->imu_calib.linear_acceleration.z;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8001178:	4913      	ldr	r1, [pc, #76]	@ (80011c8 <imu_calib_service_callback+0xa4>)
 800117a:	e9c1 2304 	strd	r2, r3, [r1, #16]

  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001184:	4911      	ldr	r1, [pc, #68]	@ (80011cc <imu_calib_service_callback+0xa8>)
 8001186:	e9c1 2300 	strd	r2, r3, [r1]
  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001190:	490e      	ldr	r1, [pc, #56]	@ (80011cc <imu_calib_service_callback+0xa8>)
 8001192:	e9c1 2302 	strd	r2, r3, [r1, #8]
  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800119c:	490b      	ldr	r1, [pc, #44]	@ (80011cc <imu_calib_service_callback+0xa8>)
 800119e:	e9c1 2304 	strd	r2, r3, [r1, #16]

  is_calib = true;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <imu_calib_service_callback+0xac>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
  res_in->success = true;
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011ae:	2120      	movs	r1, #32
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f002 f89a 	bl	80032ec <HAL_GPIO_TogglePin>

}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200009b0 	.word	0x200009b0
 80011c4:	20000950 	.word	0x20000950
 80011c8:	20000ba8 	.word	0x20000ba8
 80011cc:	20000bc0 	.word	0x20000bc0
 80011d0:	20000bd8 	.word	0x20000bd8

080011d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  while (MPU6050_Init(&hi2c1) == 1);
 80011d8:	bf00      	nop
 80011da:	4808      	ldr	r0, [pc, #32]	@ (80011fc <MX_FREERTOS_Init+0x28>)
 80011dc:	f006 f8d6 	bl	800738c <MPU6050_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d0f9      	beq.n	80011da <MX_FREERTOS_Init+0x6>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011e6:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <MX_FREERTOS_Init+0x2c>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_FREERTOS_Init+0x30>)
 80011ec:	f006 fcf8 	bl	8007be0 <osThreadNew>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a05      	ldr	r2, [pc, #20]	@ (8001208 <MX_FREERTOS_Init+0x34>)
 80011f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20004734 	.word	0x20004734
 8001200:	0801a860 	.word	0x0801a860
 8001204:	0800120d 	.word	0x0800120d
 8001208:	20000bdc 	.word	0x20000bdc

0800120c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800120c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001210:	b0ee      	sub	sp, #440	@ 0x1b8
 8001212:	af02      	add	r7, sp, #8
 8001214:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001218:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800121c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 800121e:	4b83      	ldr	r3, [pc, #524]	@ (800142c <StartDefaultTask+0x220>)
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	4b83      	ldr	r3, [pc, #524]	@ (8001430 <StartDefaultTask+0x224>)
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	4b83      	ldr	r3, [pc, #524]	@ (8001434 <StartDefaultTask+0x228>)
 8001228:	4a83      	ldr	r2, [pc, #524]	@ (8001438 <StartDefaultTask+0x22c>)
 800122a:	4984      	ldr	r1, [pc, #528]	@ (800143c <StartDefaultTask+0x230>)
 800122c:	2001      	movs	r0, #1
 800122e:	f00c fa93 	bl	800d758 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001232:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001236:	4618      	mov	r0, r3
 8001238:	f00c f9aa 	bl	800d590 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 800123c:	4b80      	ldr	r3, [pc, #512]	@ (8001440 <StartDefaultTask+0x234>)
 800123e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001242:	4b80      	ldr	r3, [pc, #512]	@ (8001444 <StartDefaultTask+0x238>)
 8001244:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001248:	4b7f      	ldr	r3, [pc, #508]	@ (8001448 <StartDefaultTask+0x23c>)
 800124a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800124e:	4b7f      	ldr	r3, [pc, #508]	@ (800144c <StartDefaultTask+0x240>)
 8001250:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001254:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001258:	4618      	mov	r0, r3
 800125a:	f00c f9a7 	bl	800d5ac <rcutils_set_default_allocator>
 800125e:	4603      	mov	r3, r0
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <StartDefaultTask+0x66>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800126a:	21ff      	movs	r1, #255	@ 0xff
 800126c:	4878      	ldr	r0, [pc, #480]	@ (8001450 <StartDefaultTask+0x244>)
 800126e:	f017 fe81 	bl	8018f74 <iprintf>
	}

	GPIO_PinState B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001272:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001276:	4877      	ldr	r0, [pc, #476]	@ (8001454 <StartDefaultTask+0x248>)
 8001278:	f002 f808 	bl	800328c <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 31ab 	strb.w	r3, [r7, #427]	@ 0x1ab
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(10);
 8001282:	4b75      	ldr	r3, [pc, #468]	@ (8001458 <StartDefaultTask+0x24c>)
 8001284:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	const int timeout_ms = 1000;
 8001288:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	int executor_num = 1;
 8001290:	2301      	movs	r3, #1
 8001292:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

	// Get message type support
	const rosidl_message_type_support_t * imu_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu);
 8001296:	f00d fddd 	bl	800ee54 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800129a:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

	const rosidl_message_type_support_t * cmd_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist);
 800129e:	f009 f9fb 	bl	800a698 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80012a2:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	const rosidl_service_type_support_t * imu_calib_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration);
 80012a6:	f009 fb33 	bl	800a910 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 80012aa:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194

	allocator = rcl_get_default_allocator();
 80012ae:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80012b2:	f5a3 7482 	sub.w	r4, r3, #260	@ 0x104
 80012b6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80012ba:	4618      	mov	r0, r3
 80012bc:	f00c f994 	bl	800d5e8 <rcutils_get_default_allocator>
 80012c0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80012c4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012c8:	461d      	mov	r5, r3
 80012ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ce:	682b      	ldr	r3, [r5, #0]
 80012d0:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 80012d2:	463b      	mov	r3, r7
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00b fd0d 	bl	800ccf4 <rclc_executor_get_zero_initialized_executor>
 80012da:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80012de:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 80012e2:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80012e6:	4611      	mov	r1, r2
 80012e8:	2288      	movs	r2, #136	@ 0x88
 80012ea:	4618      	mov	r0, r3
 80012ec:	f018 f88b 	bl	8019406 <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 80012f0:	f00a ffa2 	bl	800c238 <rcl_get_zero_initialized_init_options>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80012fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012fe:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8001300:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001304:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001308:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 800130c:	466d      	mov	r5, sp
 800130e:	f103 020c 	add.w	r2, r3, #12
 8001312:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001316:	e885 0003 	stmia.w	r5, {r0, r1}
 800131a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800131c:	4620      	mov	r0, r4
 800131e:	f00a ff8d 	bl	800c23c <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 69));
 8001322:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001326:	2145      	movs	r1, #69	@ 0x45
 8001328:	4618      	mov	r0, r3
 800132a:	f00b f883 	bl	800c434 <rcl_init_options_set_domain_id>

	//create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800132e:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001332:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8001336:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	4613      	mov	r3, r2
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	f00b ffe1 	bl	800d308 <rclc_support_init_with_options>

	//create timer
	rclc_timer_init_default(&mpu6050_timer, &support, timer_period, timer_callback);
 8001346:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800134a:	2200      	movs	r2, #0
 800134c:	4698      	mov	r8, r3
 800134e:	4691      	mov	r9, r2
 8001350:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001354:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 8001358:	4b40      	ldr	r3, [pc, #256]	@ (800145c <StartDefaultTask+0x250>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	4642      	mov	r2, r8
 800135e:	464b      	mov	r3, r9
 8001360:	f00c f8de 	bl	800d520 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "G474RE_MPU6050_node", "", &support);
 8001364:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001368:	4a3d      	ldr	r2, [pc, #244]	@ (8001460 <StartDefaultTask+0x254>)
 800136a:	493e      	ldr	r1, [pc, #248]	@ (8001464 <StartDefaultTask+0x258>)
 800136c:	483e      	ldr	r0, [pc, #248]	@ (8001468 <StartDefaultTask+0x25c>)
 800136e:	f00b ffff 	bl	800d370 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&mpu6050_publisher, &node, imu_type_support, "mpu6050_publisher");
 8001372:	4b3e      	ldr	r3, [pc, #248]	@ (800146c <StartDefaultTask+0x260>)
 8001374:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001378:	493b      	ldr	r1, [pc, #236]	@ (8001468 <StartDefaultTask+0x25c>)
 800137a:	483d      	ldr	r0, [pc, #244]	@ (8001470 <StartDefaultTask+0x264>)
 800137c:	f00c f868 	bl	800d450 <rclc_publisher_init_best_effort>
	rclc_publisher_init_default(&cmd_vel_publisher, &node, cmd_type_support, "cmd_vel");
 8001380:	4b3c      	ldr	r3, [pc, #240]	@ (8001474 <StartDefaultTask+0x268>)
 8001382:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001386:	4938      	ldr	r1, [pc, #224]	@ (8001468 <StartDefaultTask+0x25c>)
 8001388:	483b      	ldr	r0, [pc, #236]	@ (8001478 <StartDefaultTask+0x26c>)
 800138a:	f00c f82d 	bl	800d3e8 <rclc_publisher_init_default>

	//create subscriber


	//create service server
	if (B1 == GPIO_PIN_RESET) {
 800138e:	f897 31ab 	ldrb.w	r3, [r7, #427]	@ 0x1ab
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10c      	bne.n	80013b0 <StartDefaultTask+0x1a4>
		rclc_service_init_default(&imu_calibration_server, &node, imu_calib_type_support, "imu_calibration");
 8001396:	4b39      	ldr	r3, [pc, #228]	@ (800147c <StartDefaultTask+0x270>)
 8001398:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800139c:	4932      	ldr	r1, [pc, #200]	@ (8001468 <StartDefaultTask+0x25c>)
 800139e:	4838      	ldr	r0, [pc, #224]	@ (8001480 <StartDefaultTask+0x274>)
 80013a0:	f00c f88a 	bl	800d4b8 <rclc_service_init_default>
		executor_num++;
 80013a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80013a8:	3301      	adds	r3, #1
 80013aa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80013ae:	e002      	b.n	80013b6 <StartDefaultTask+0x1aa>
	}
	else{
		on_calib = true;
 80013b0:	4b34      	ldr	r3, [pc, #208]	@ (8001484 <StartDefaultTask+0x278>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
	}
	//create service client


	//create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 80013b6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80013ba:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013be:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80013c2:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80013c6:	f00b fc9f 	bl	800cd08 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &mpu6050_timer);
 80013ca:	f507 72be 	add.w	r2, r7, #380	@ 0x17c
 80013ce:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f00b fd07 	bl	800cde8 <rclc_executor_add_timer>
	if (B1 == GPIO_PIN_RESET) rclc_executor_add_service(&executor, &imu_calibration_server, &imu_calibration_request, &imu_calibration_response, imu_calib_service_callback);
 80013da:	f897 31ab 	ldrb.w	r3, [r7, #427]	@ 0x1ab
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d108      	bne.n	80013f4 <StartDefaultTask+0x1e8>
 80013e2:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80013e6:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <StartDefaultTask+0x27c>)
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	4b28      	ldr	r3, [pc, #160]	@ (800148c <StartDefaultTask+0x280>)
 80013ec:	4a28      	ldr	r2, [pc, #160]	@ (8001490 <StartDefaultTask+0x284>)
 80013ee:	4924      	ldr	r1, [pc, #144]	@ (8001480 <StartDefaultTask+0x274>)
 80013f0:	f00b fd24 	bl	800ce3c <rclc_executor_add_service>

	rclc_executor_spin(&executor);
 80013f4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00b ff45 	bl	800d288 <rclc_executor_spin>

	rmw_uros_sync_session(timeout_ms);
 80013fe:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8001402:	f00d f8a1 	bl	800e548 <rmw_uros_sync_session>

	//create message
	mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8001406:	4c23      	ldr	r4, [pc, #140]	@ (8001494 <StartDefaultTask+0x288>)
 8001408:	463b      	mov	r3, r7
 800140a:	4923      	ldr	r1, [pc, #140]	@ (8001498 <StartDefaultTask+0x28c>)
 800140c:	4618      	mov	r0, r3
 800140e:	f009 fb6f 	bl	800aaf0 <micro_ros_string_utilities_init>
 8001412:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001416:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 800141a:	f104 0308 	add.w	r3, r4, #8
 800141e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001420:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for(;;)
	{
		osDelay(10);
 8001424:	200a      	movs	r0, #10
 8001426:	f006 fc6d 	bl	8007d04 <osDelay>
 800142a:	e7fb      	b.n	8001424 <StartDefaultTask+0x218>
 800142c:	080025e5 	.word	0x080025e5
 8001430:	08002581 	.word	0x08002581
 8001434:	08002561 	.word	0x08002561
 8001438:	08002535 	.word	0x08002535
 800143c:	200047f4 	.word	0x200047f4
 8001440:	08001ce5 	.word	0x08001ce5
 8001444:	08001d29 	.word	0x08001d29
 8001448:	08001d61 	.word	0x08001d61
 800144c:	08001dcd 	.word	0x08001dcd
 8001450:	0801a7b0 	.word	0x0801a7b0
 8001454:	48000800 	.word	0x48000800
 8001458:	00989680 	.word	0x00989680
 800145c:	08000f59 	.word	0x08000f59
 8001460:	0801a7d8 	.word	0x0801a7d8
 8001464:	0801a7dc 	.word	0x0801a7dc
 8001468:	200008ac 	.word	0x200008ac
 800146c:	0801a7f0 	.word	0x0801a7f0
 8001470:	200008b4 	.word	0x200008b4
 8001474:	0801a804 	.word	0x0801a804
 8001478:	200009f8 	.word	0x200009f8
 800147c:	0801a80c 	.word	0x0801a80c
 8001480:	200009fc 	.word	0x200009fc
 8001484:	20000bd9 	.word	0x20000bd9
 8001488:	08001125 	.word	0x08001125
 800148c:	20000b40 	.word	0x20000b40
 8001490:	20000a00 	.word	0x20000a00
 8001494:	200008b8 	.word	0x200008b8
 8001498:	0801a81c 	.word	0x0801a81c

0800149c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	@ 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80014a8:	f007 fc6e 	bl	8008d88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80014ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001618 <pvPortMallocMicroROS+0x17c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80014b4:	f000 f986 	bl	80017c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80014b8:	4b58      	ldr	r3, [pc, #352]	@ (800161c <pvPortMallocMicroROS+0x180>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f040 8090 	bne.w	80015e6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01e      	beq.n	800150a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80014cc:	2208      	movs	r2, #8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d015      	beq.n	800150a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f023 0307 	bic.w	r3, r3, #7
 80014e4:	3308      	adds	r3, #8
 80014e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014f6:	f383 8811 	msr	BASEPRI, r3
 80014fa:	f3bf 8f6f 	isb	sy
 80014fe:	f3bf 8f4f 	dsb	sy
 8001502:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	e7fd      	b.n	8001506 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d06a      	beq.n	80015e6 <pvPortMallocMicroROS+0x14a>
 8001510:	4b43      	ldr	r3, [pc, #268]	@ (8001620 <pvPortMallocMicroROS+0x184>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	d865      	bhi.n	80015e6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800151a:	4b42      	ldr	r3, [pc, #264]	@ (8001624 <pvPortMallocMicroROS+0x188>)
 800151c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800151e:	4b41      	ldr	r3, [pc, #260]	@ (8001624 <pvPortMallocMicroROS+0x188>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001524:	e004      	b.n	8001530 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d903      	bls.n	8001542 <pvPortMallocMicroROS+0xa6>
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f1      	bne.n	8001526 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001542:	4b35      	ldr	r3, [pc, #212]	@ (8001618 <pvPortMallocMicroROS+0x17c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001548:	429a      	cmp	r2, r3
 800154a:	d04c      	beq.n	80015e6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2208      	movs	r2, #8
 8001552:	4413      	add	r3, r2
 8001554:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	1ad2      	subs	r2, r2, r3
 8001566:	2308      	movs	r3, #8
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	429a      	cmp	r2, r3
 800156c:	d920      	bls.n	80015b0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800156e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00b      	beq.n	8001598 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001584:	f383 8811 	msr	BASEPRI, r3
 8001588:	f3bf 8f6f 	isb	sy
 800158c:	f3bf 8f4f 	dsb	sy
 8001590:	613b      	str	r3, [r7, #16]
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	1ad2      	subs	r2, r2, r3
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80015aa:	69b8      	ldr	r0, [r7, #24]
 80015ac:	f000 f96c 	bl	8001888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <pvPortMallocMicroROS+0x184>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	4a19      	ldr	r2, [pc, #100]	@ (8001620 <pvPortMallocMicroROS+0x184>)
 80015bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <pvPortMallocMicroROS+0x184>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <pvPortMallocMicroROS+0x18c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d203      	bcs.n	80015d2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <pvPortMallocMicroROS+0x184>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a16      	ldr	r2, [pc, #88]	@ (8001628 <pvPortMallocMicroROS+0x18c>)
 80015d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <pvPortMallocMicroROS+0x180>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	431a      	orrs	r2, r3
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80015e6:	f007 fbdd 	bl	8008da4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00b      	beq.n	800160c <pvPortMallocMicroROS+0x170>
	__asm volatile
 80015f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015f8:	f383 8811 	msr	BASEPRI, r3
 80015fc:	f3bf 8f6f 	isb	sy
 8001600:	f3bf 8f4f 	dsb	sy
 8001604:	60fb      	str	r3, [r7, #12]
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800160c:	69fb      	ldr	r3, [r7, #28]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3728      	adds	r7, #40	@ 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20004724 	.word	0x20004724
 800161c:	20004730 	.word	0x20004730
 8001620:	20004728 	.word	0x20004728
 8001624:	2000471c 	.word	0x2000471c
 8001628:	2000472c 	.word	0x2000472c

0800162c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d04a      	beq.n	80016d4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800163e:	2308      	movs	r3, #8
 8001640:	425b      	negs	r3, r3
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <vPortFreeMicroROS+0xb0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10b      	bne.n	8001672 <vPortFreeMicroROS+0x46>
	__asm volatile
 800165a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800165e:	f383 8811 	msr	BASEPRI, r3
 8001662:	f3bf 8f6f 	isb	sy
 8001666:	f3bf 8f4f 	dsb	sy
 800166a:	60fb      	str	r3, [r7, #12]
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	e7fd      	b.n	800166e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <vPortFreeMicroROS+0x66>
	__asm volatile
 800167a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800167e:	f383 8811 	msr	BASEPRI, r3
 8001682:	f3bf 8f6f 	isb	sy
 8001686:	f3bf 8f4f 	dsb	sy
 800168a:	60bb      	str	r3, [r7, #8]
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	e7fd      	b.n	800168e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <vPortFreeMicroROS+0xb0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d019      	beq.n	80016d4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d115      	bne.n	80016d4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <vPortFreeMicroROS+0xb0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	401a      	ands	r2, r3
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80016b8:	f007 fb66 	bl	8008d88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <vPortFreeMicroROS+0xb4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a06      	ldr	r2, [pc, #24]	@ (80016e0 <vPortFreeMicroROS+0xb4>)
 80016c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016ca:	6938      	ldr	r0, [r7, #16]
 80016cc:	f000 f8dc 	bl	8001888 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80016d0:	f007 fb68 	bl	8008da4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20004730 	.word	0x20004730
 80016e0:	20004728 	.word	0x20004728

080016e4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80016f0:	2308      	movs	r3, #8
 80016f2:	425b      	negs	r3, r3
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	4413      	add	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <getBlockSize+0x38>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	43db      	mvns	r3, r3
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

	return count;
 800170c:	68fb      	ldr	r3, [r7, #12]
}
 800170e:	4618      	mov	r0, r3
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20004730 	.word	0x20004730

08001720 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800172a:	f007 fb2d 	bl	8008d88 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800172e:	6838      	ldr	r0, [r7, #0]
 8001730:	f7ff feb4 	bl	800149c <pvPortMallocMicroROS>
 8001734:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d017      	beq.n	800176c <pvPortReallocMicroROS+0x4c>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d014      	beq.n	800176c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffce 	bl	80016e4 <getBlockSize>
 8001748:	4603      	mov	r3, r0
 800174a:	2208      	movs	r2, #8
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d201      	bcs.n	800175c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	68b8      	ldr	r0, [r7, #8]
 8001762:	f017 fe50 	bl	8019406 <memcpy>

		vPortFreeMicroROS(pv);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff60 	bl	800162c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800176c:	f007 fb1a 	bl	8008da4 <xTaskResumeAll>

	return newmem;
 8001770:	68bb      	ldr	r3, [r7, #8]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001784:	f007 fb00 	bl	8008d88 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff fe82 	bl	800149c <pvPortMallocMicroROS>
 8001798:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800179e:	e004      	b.n	80017aa <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	613a      	str	r2, [r7, #16]
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	1e5a      	subs	r2, r3, #1
 80017ae:	617a      	str	r2, [r7, #20]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f5      	bne.n	80017a0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80017b4:	f007 faf6 	bl	8008da4 <xTaskResumeAll>
  	return mem;
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80017ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80017d0:	4b27      	ldr	r3, [pc, #156]	@ (8001870 <prvHeapInit+0xac>)
 80017d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00c      	beq.n	80017f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3307      	adds	r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f023 0307 	bic.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001870 <prvHeapInit+0xac>)
 80017f4:	4413      	add	r3, r2
 80017f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80017fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001874 <prvHeapInit+0xb0>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001802:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <prvHeapInit+0xb0>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	4413      	add	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001810:	2208      	movs	r2, #8
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f023 0307 	bic.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a15      	ldr	r2, [pc, #84]	@ (8001878 <prvHeapInit+0xb4>)
 8001824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001826:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <prvHeapInit+0xb4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <prvHeapInit+0xb4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	1ad2      	subs	r2, r2, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <prvHeapInit+0xb4>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <prvHeapInit+0xb8>)
 8001852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a09      	ldr	r2, [pc, #36]	@ (8001880 <prvHeapInit+0xbc>)
 800185a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800185c:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <prvHeapInit+0xc0>)
 800185e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001862:	601a      	str	r2, [r3, #0]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	20003b1c 	.word	0x20003b1c
 8001874:	2000471c 	.word	0x2000471c
 8001878:	20004724 	.word	0x20004724
 800187c:	2000472c 	.word	0x2000472c
 8001880:	20004728 	.word	0x20004728
 8001884:	20004730 	.word	0x20004730

08001888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001890:	4b28      	ldr	r3, [pc, #160]	@ (8001934 <prvInsertBlockIntoFreeList+0xac>)
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e002      	b.n	800189c <prvInsertBlockIntoFreeList+0x14>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d8f7      	bhi.n	8001896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	4413      	add	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d108      	bne.n	80018ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	441a      	add	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	441a      	add	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d118      	bne.n	8001910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <prvInsertBlockIntoFreeList+0xb0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d00d      	beq.n	8001906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	441a      	add	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	e008      	b.n	8001918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001906:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <prvInsertBlockIntoFreeList+0xb0>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e003      	b.n	8001918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	d002      	beq.n	8001926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	2000471c 	.word	0x2000471c
 8001938:	20004724 	.word	0x20004724

0800193c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <MX_DMA_Init+0x60>)
 8001944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001946:	4a15      	ldr	r2, [pc, #84]	@ (800199c <MX_DMA_Init+0x60>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6493      	str	r3, [r2, #72]	@ 0x48
 800194e:	4b13      	ldr	r3, [pc, #76]	@ (800199c <MX_DMA_Init+0x60>)
 8001950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <MX_DMA_Init+0x60>)
 800195c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800195e:	4a0f      	ldr	r2, [pc, #60]	@ (800199c <MX_DMA_Init+0x60>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6493      	str	r3, [r2, #72]	@ 0x48
 8001966:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <MX_DMA_Init+0x60>)
 8001968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2105      	movs	r1, #5
 8001976:	200b      	movs	r0, #11
 8001978:	f000 ffa0 	bl	80028bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800197c:	200b      	movs	r0, #11
 800197e:	f000 ffb7 	bl	80028f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2105      	movs	r1, #5
 8001986:	200c      	movs	r0, #12
 8001988:	f000 ff98 	bl	80028bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800198c:	200c      	movs	r0, #12
 800198e:	f000 ffaf 	bl	80028f0 <HAL_NVIC_EnableIRQ>

}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000

080019a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ce:	4b29      	ldr	r3, [pc, #164]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	4a28      	ldr	r2, [pc, #160]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 80019d4:	f043 0320 	orr.w	r3, r3, #32
 80019d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019da:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	4a22      	ldr	r2, [pc, #136]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f2:	4b20      	ldr	r3, [pc, #128]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	4a1c      	ldr	r2, [pc, #112]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <MX_GPIO_Init+0xd4>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2120      	movs	r1, #32
 8001a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1e:	f001 fc4d 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	480f      	ldr	r0, [pc, #60]	@ (8001a78 <MX_GPIO_Init+0xd8>)
 8001a3a:	f001 faa5 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a58:	f001 fa96 	bl	8002f88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2105      	movs	r1, #5
 8001a60:	2028      	movs	r0, #40	@ 0x28
 8001a62:	f000 ff2b 	bl	80028bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a66:	2028      	movs	r0, #40	@ 0x28
 8001a68:	f000 ff42 	bl	80028f0 <HAL_NVIC_EnableIRQ>

}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	@ 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	48000800 	.word	0x48000800

08001a7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001a82:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <MX_I2C1_Init+0x78>)
 8001a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001a88:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <MX_I2C1_Init+0x7c>)
 8001a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a92:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab6:	480e      	ldr	r0, [pc, #56]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001ab8:	f001 fc55 	bl	8003366 <HAL_I2C_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ac2:	f000 f909 	bl	8001cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4809      	ldr	r0, [pc, #36]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001aca:	f002 f9d7 	bl	8003e7c <HAL_I2CEx_ConfigAnalogFilter>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ad4:	f000 f900 	bl	8001cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <MX_I2C1_Init+0x74>)
 8001adc:	f002 fa19 	bl	8003f12 <HAL_I2CEx_ConfigDigitalFilter>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ae6:	f000 f8f7 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20004734 	.word	0x20004734
 8001af4:	40005400 	.word	0x40005400
 8001af8:	40621236 	.word	0x40621236

08001afc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b09e      	sub	sp, #120	@ 0x78
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	2254      	movs	r2, #84	@ 0x54
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f017 fba9 	bl	8019274 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba4 <HAL_I2C_MspInit+0xa8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d136      	bne.n	8001b9a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b2c:	2340      	movs	r3, #64	@ 0x40
 8001b2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 f8a9 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b44:	f000 f8c8 	bl	8001cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	4b17      	ldr	r3, [pc, #92]	@ (8001ba8 <HAL_I2C_MspInit+0xac>)
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4c:	4a16      	ldr	r2, [pc, #88]	@ (8001ba8 <HAL_I2C_MspInit+0xac>)
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b54:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <HAL_I2C_MspInit+0xac>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b66:	2312      	movs	r3, #18
 8001b68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b72:	2304      	movs	r3, #4
 8001b74:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480b      	ldr	r0, [pc, #44]	@ (8001bac <HAL_I2C_MspInit+0xb0>)
 8001b7e:	f001 fa03 	bl	8002f88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_I2C_MspInit+0xac>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b86:	4a08      	ldr	r2, [pc, #32]	@ (8001ba8 <HAL_I2C_MspInit+0xac>)
 8001b88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_I2C_MspInit+0xac>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	3778      	adds	r7, #120	@ 0x78
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40005400 	.word	0x40005400
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48000400 	.word	0x48000400

08001bb0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <MX_IWDG_Init+0x34>)
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8001be8 <MX_IWDG_Init+0x38>)
 8001bb8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <MX_IWDG_Init+0x34>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <MX_IWDG_Init+0x34>)
 8001bc2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001bc6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_IWDG_Init+0x34>)
 8001bca:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001bce:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001bd0:	4804      	ldr	r0, [pc, #16]	@ (8001be4 <MX_IWDG_Init+0x34>)
 8001bd2:	f002 f9ea 	bl	8003faa <HAL_IWDG_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001bdc:	f000 f87c 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20004788 	.word	0x20004788
 8001be8:	40003000 	.word	0x40003000

08001bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf0:	f000 fd75 	bl	80026de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf4:	f000 f812 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf8:	f7ff fed2 	bl	80019a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bfc:	f7ff fe9e 	bl	800193c <MX_DMA_Init>
  MX_I2C1_Init();
 8001c00:	f7ff ff3c 	bl	8001a7c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001c04:	f000 fb8e 	bl	8002324 <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 8001c08:	f7ff ffd2 	bl	8001bb0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c0c:	f005 ff9e 	bl	8007b4c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001c10:	f7ff fae0 	bl	80011d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c14:	f005 ffbe 	bl	8007b94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <main+0x2c>

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	@ 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0318 	add.w	r3, r7, #24
 8001c26:	2238      	movs	r2, #56	@ 0x38
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f017 fb22 	bl	8019274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f002 fa12 	bl	8004068 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001c44:	2309      	movs	r3, #9
 8001c46:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c4c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c52:	2302      	movs	r3, #2
 8001c54:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c56:	2303      	movs	r3, #3
 8001c58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001c5a:	2306      	movs	r3, #6
 8001c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c5e:	2355      	movs	r3, #85	@ 0x55
 8001c60:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c62:	2302      	movs	r3, #2
 8001c64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c66:	2302      	movs	r3, #2
 8001c68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6e:	f107 0318 	add.w	r3, r7, #24
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 faac 	bl	80041d0 <HAL_RCC_OscConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c7e:	f000 f82b 	bl	8001cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c82:	230f      	movs	r3, #15
 8001c84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c86:	2303      	movs	r3, #3
 8001c88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2104      	movs	r1, #4
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 fdaa 	bl	80047f4 <HAL_RCC_ClockConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ca6:	f000 f817 	bl	8001cd8 <Error_Handler>
  }
}
 8001caa:	bf00      	nop
 8001cac:	3750      	adds	r7, #80	@ 0x50
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cc6:	f000 fd23 	bl	8002710 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <Error_Handler+0x8>

08001ce4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001cee:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <microros_allocate+0x3c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <microros_allocate+0x3c>)
 8001cfc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <microros_allocate+0x40>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <microros_allocate+0x40>)
 8001d0c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fbc4 	bl	800149c <pvPortMallocMicroROS>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20004798 	.word	0x20004798
 8001d24:	2000479c 	.word	0x2000479c

08001d28 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00c      	beq.n	8001d52 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fcd3 	bl	80016e4 <getBlockSize>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a06      	ldr	r2, [pc, #24]	@ (8001d5c <microros_deallocate+0x34>)
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <microros_deallocate+0x34>)
 8001d4a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fc6d 	bl	800162c <vPortFreeMicroROS>
  }
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000479c 	.word	0x2000479c

08001d60 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <microros_reallocate+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	4413      	add	r3, r2
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <microros_reallocate+0x64>)
 8001d7a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <microros_reallocate+0x68>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4413      	add	r3, r2
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <microros_reallocate+0x68>)
 8001d8a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d104      	bne.n	8001d9c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001d92:	68b8      	ldr	r0, [r7, #8]
 8001d94:	f7ff fb82 	bl	800149c <pvPortMallocMicroROS>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	e00e      	b.n	8001dba <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff fca1 	bl	80016e4 <getBlockSize>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a08      	ldr	r2, [pc, #32]	@ (8001dc8 <microros_reallocate+0x68>)
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <microros_reallocate+0x68>)
 8001dae:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7ff fcb4 	bl	8001720 <pvPortReallocMicroROS>
 8001db8:	4603      	mov	r3, r0
  }
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20004798 	.word	0x20004798
 8001dc8:	2000479c 	.word	0x2000479c

08001dcc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
 8001de0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e14 <microros_zero_allocate+0x48>)
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <microros_zero_allocate+0x48>)
 8001dea:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	4a08      	ldr	r2, [pc, #32]	@ (8001e18 <microros_zero_allocate+0x4c>)
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <microros_zero_allocate+0x4c>)
 8001dfe:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7ff fcb9 	bl	800177a <pvPortCallocMicroROS>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20004798 	.word	0x20004798
 8001e18:	2000479c 	.word	0x2000479c
 8001e1c:	00000000 	.word	0x00000000

08001e20 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001e20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001e32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e36:	a320      	add	r3, pc, #128	@ (adr r3, 8001eb8 <UTILS_NanosecondsToTimespec+0x98>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fec4 	bl	8000bc8 <__aeabi_ldivmod>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001e4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e4e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001eb8 <UTILS_NanosecondsToTimespec+0x98>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	f7fe feb8 	bl	8000bc8 <__aeabi_ldivmod>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	da20      	bge.n	8001ea6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a11      	ldr	r2, [pc, #68]	@ (8001eb0 <UTILS_NanosecondsToTimespec+0x90>)
 8001e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e6e:	1712      	asrs	r2, r2, #28
 8001e70:	17db      	asrs	r3, r3, #31
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7e:	6979      	ldr	r1, [r7, #20]
 8001e80:	17c8      	asrs	r0, r1, #31
 8001e82:	460c      	mov	r4, r1
 8001e84:	4605      	mov	r5, r0
 8001e86:	ebb2 0804 	subs.w	r8, r2, r4
 8001e8a:	eb63 0905 	sbc.w	r9, r3, r5
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	4906      	ldr	r1, [pc, #24]	@ (8001eb4 <UTILS_NanosecondsToTimespec+0x94>)
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	441a      	add	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
    }
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eb0:	44b82fa1 	.word	0x44b82fa1
 8001eb4:	3b9aca00 	.word	0x3b9aca00
 8001eb8:	3b9aca00 	.word	0x3b9aca00
 8001ebc:	00000000 	.word	0x00000000

08001ec0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ec4:	b08e      	sub	sp, #56	@ 0x38
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6278      	str	r0, [r7, #36]	@ 0x24
 8001eca:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001ecc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001ee2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f007 f9d8 	bl	800929c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eee:	17da      	asrs	r2, r3, #31
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	61fa      	str	r2, [r7, #28]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	69b9      	ldr	r1, [r7, #24]
 8001efe:	000b      	movs	r3, r1
 8001f00:	2200      	movs	r2, #0
 8001f02:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	461c      	mov	r4, r3
 8001f0c:	4615      	mov	r5, r2
 8001f0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f12:	1911      	adds	r1, r2, r4
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	416b      	adcs	r3, r5
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f1e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001f22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	f04f 0400 	mov.w	r4, #0
 8001f2e:	f04f 0500 	mov.w	r5, #0
 8001f32:	015d      	lsls	r5, r3, #5
 8001f34:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001f38:	0154      	lsls	r4, r2, #5
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	462b      	mov	r3, r5
 8001f3e:	ebb2 0800 	subs.w	r8, r2, r0
 8001f42:	eb63 0901 	sbc.w	r9, r3, r1
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001f52:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001f56:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001f5a:	4690      	mov	r8, r2
 8001f5c:	4699      	mov	r9, r3
 8001f5e:	eb18 0a00 	adds.w	sl, r8, r0
 8001f62:	eb49 0b01 	adc.w	fp, r9, r1
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f72:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f76:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f7a:	ebb2 040a 	subs.w	r4, r2, sl
 8001f7e:	603c      	str	r4, [r7, #0]
 8001f80:	eb63 030b 	sbc.w	r3, r3, fp
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	181b      	adds	r3, r3, r0
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	462b      	mov	r3, r5
 8001f92:	eb41 0303 	adc.w	r3, r1, r3
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	6a3a      	ldr	r2, [r7, #32]
 8001f9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f9e:	f7ff ff3f 	bl	8001e20 <UTILS_NanosecondsToTimespec>

    return 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3738      	adds	r7, #56	@ 0x38
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_MspInit+0x50>)
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fba:	4a11      	ldr	r2, [pc, #68]	@ (8002000 <HAL_MspInit+0x50>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <HAL_MspInit+0x50>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <HAL_MspInit+0x50>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8002000 <HAL_MspInit+0x50>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_MspInit+0x50>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	210f      	movs	r1, #15
 8001fea:	f06f 0001 	mvn.w	r0, #1
 8001fee:	f000 fc65 	bl	80028bc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ff2:	f002 f8dd 	bl	80041b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08c      	sub	sp, #48	@ 0x30
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002014:	4b2c      	ldr	r3, [pc, #176]	@ (80020c8 <HAL_InitTick+0xc4>)
 8002016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002018:	4a2b      	ldr	r2, [pc, #172]	@ (80020c8 <HAL_InitTick+0xc4>)
 800201a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800201e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002020:	4b29      	ldr	r3, [pc, #164]	@ (80020c8 <HAL_InitTick+0xc4>)
 8002022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800202c:	f107 020c 	add.w	r2, r7, #12
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f002 fdb2 	bl	8004ba0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800203c:	f002 fd9a 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 8002040:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002044:	4a21      	ldr	r2, [pc, #132]	@ (80020cc <HAL_InitTick+0xc8>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0c9b      	lsrs	r3, r3, #18
 800204c:	3b01      	subs	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002050:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <HAL_InitTick+0xcc>)
 8002052:	4a20      	ldr	r2, [pc, #128]	@ (80020d4 <HAL_InitTick+0xd0>)
 8002054:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002056:	4b1e      	ldr	r3, [pc, #120]	@ (80020d0 <HAL_InitTick+0xcc>)
 8002058:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800205c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800205e:	4a1c      	ldr	r2, [pc, #112]	@ (80020d0 <HAL_InitTick+0xcc>)
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002064:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <HAL_InitTick+0xcc>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_InitTick+0xcc>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002070:	4817      	ldr	r0, [pc, #92]	@ (80020d0 <HAL_InitTick+0xcc>)
 8002072:	f003 f85b 	bl	800512c <HAL_TIM_Base_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800207c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002080:	2b00      	cmp	r3, #0
 8002082:	d11b      	bne.n	80020bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002084:	4812      	ldr	r0, [pc, #72]	@ (80020d0 <HAL_InitTick+0xcc>)
 8002086:	f003 f8b3 	bl	80051f0 <HAL_TIM_Base_Start_IT>
 800208a:	4603      	mov	r3, r0
 800208c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002090:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002094:	2b00      	cmp	r3, #0
 8002096:	d111      	bne.n	80020bc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002098:	2019      	movs	r0, #25
 800209a:	f000 fc29 	bl	80028f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b0f      	cmp	r3, #15
 80020a2:	d808      	bhi.n	80020b6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80020a4:	2200      	movs	r2, #0
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	2019      	movs	r0, #25
 80020aa:	f000 fc07 	bl	80028bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <HAL_InitTick+0xd4>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e002      	b.n	80020bc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80020bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3730      	adds	r7, #48	@ 0x30
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	431bde83 	.word	0x431bde83
 80020d0:	200047a0 	.word	0x200047a0
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	20000008 	.word	0x20000008

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <NMI_Handler+0x4>

080020e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <HardFault_Handler+0x4>

080020ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <MemManage_Handler+0x4>

080020f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <UsageFault_Handler+0x4>

08002104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <DMA1_Channel1_IRQHandler+0x10>)
 800211a:	f000 fdda 	bl	8002cd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20004888 	.word	0x20004888

08002128 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800212c:	4802      	ldr	r0, [pc, #8]	@ (8002138 <DMA1_Channel2_IRQHandler+0x10>)
 800212e:	f000 fdd0 	bl	8002cd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200048e8 	.word	0x200048e8

0800213c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002142:	f003 f8cd 	bl	80052e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200047a0 	.word	0x200047a0

08002150 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002154:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002158:	f001 f8e2 	bl	8003320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002164:	4802      	ldr	r0, [pc, #8]	@ (8002170 <LPUART1_IRQHandler+0x10>)
 8002166:	f003 fcdf 	bl	8005b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200047f4 	.word	0x200047f4

08002174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return 1;
 8002178:	2301      	movs	r3, #1
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_kill>:

int _kill(int pid, int sig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800218e:	f017 f905 	bl	801939c <__errno>
 8002192:	4603      	mov	r3, r0
 8002194:	2216      	movs	r2, #22
 8002196:	601a      	str	r2, [r3, #0]
  return -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_exit>:

void _exit (int status)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ffe7 	bl	8002184 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021b6:	bf00      	nop
 80021b8:	e7fd      	b.n	80021b6 <_exit+0x12>

080021ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e00a      	b.n	80021e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021cc:	f3af 8000 	nop.w
 80021d0:	4601      	mov	r1, r0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	60ba      	str	r2, [r7, #8]
 80021d8:	b2ca      	uxtb	r2, r1
 80021da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	dbf0      	blt.n	80021cc <_read+0x12>
  }

  return len;
 80021ea:	687b      	ldr	r3, [r7, #4]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e009      	b.n	800221a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	60ba      	str	r2, [r7, #8]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3301      	adds	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	429a      	cmp	r2, r3
 8002220:	dbf1      	blt.n	8002206 <_write+0x12>
  }
  return len;
 8002222:	687b      	ldr	r3, [r7, #4]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_close>:

int _close(int file)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002254:	605a      	str	r2, [r3, #4]
  return 0;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_isatty>:

int _isatty(int file)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800226c:	2301      	movs	r3, #1
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800227a:	b480      	push	{r7}
 800227c:	b085      	sub	sp, #20
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	@ (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	@ (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f017 f86a 	bl	801939c <__errno>
 80022c8:	4603      	mov	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	@ (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20020000 	.word	0x20020000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	200047f0 	.word	0x200047f0
 80022fc:	2000b8b0 	.word	0x2000b8b0

08002300 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <SystemInit+0x20>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	4a05      	ldr	r2, [pc, #20]	@ (8002320 <SystemInit+0x20>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002328:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 800232a:	4a21      	ldr	r2, [pc, #132]	@ (80023b0 <MX_LPUART1_UART_Init+0x8c>)
 800232c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800232e:	4b1f      	ldr	r3, [pc, #124]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 8002330:	4a20      	ldr	r2, [pc, #128]	@ (80023b4 <MX_LPUART1_UART_Init+0x90>)
 8002332:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002334:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800233a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002340:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002346:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 8002348:	220c      	movs	r2, #12
 800234a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234c:	4b17      	ldr	r3, [pc, #92]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002352:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002358:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 800235a:	2200      	movs	r2, #0
 800235c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 8002360:	2200      	movs	r2, #0
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002364:	4811      	ldr	r0, [pc, #68]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 8002366:	f003 fa2d 	bl	80057c4 <HAL_UART_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002370:	f7ff fcb2 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002374:	2100      	movs	r1, #0
 8002376:	480d      	ldr	r0, [pc, #52]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 8002378:	f004 ff3d 	bl	80071f6 <HAL_UARTEx_SetTxFifoThreshold>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8002382:	f7ff fca9 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002386:	2100      	movs	r1, #0
 8002388:	4808      	ldr	r0, [pc, #32]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 800238a:	f004 ff72 	bl	8007272 <HAL_UARTEx_SetRxFifoThreshold>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8002394:	f7ff fca0 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002398:	4804      	ldr	r0, [pc, #16]	@ (80023ac <MX_LPUART1_UART_Init+0x88>)
 800239a:	f004 fef3 	bl	8007184 <HAL_UARTEx_DisableFifoMode>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80023a4:	f7ff fc98 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200047f4 	.word	0x200047f4
 80023b0:	40008000 	.word	0x40008000
 80023b4:	001e8480 	.word	0x001e8480

080023b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b09e      	sub	sp, #120	@ 0x78
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	2254      	movs	r2, #84	@ 0x54
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f016 ff4b 	bl	8019274 <memset>
  if(uartHandle->Instance==LPUART1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a4e      	ldr	r2, [pc, #312]	@ (800251c <HAL_UART_MspInit+0x164>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	f040 8094 	bne.w	8002512 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80023ea:	2320      	movs	r3, #32
 80023ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f2:	f107 0310 	add.w	r3, r7, #16
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 fc4a 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002402:	f7ff fc69 	bl	8001cd8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002406:	4b46      	ldr	r3, [pc, #280]	@ (8002520 <HAL_UART_MspInit+0x168>)
 8002408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240a:	4a45      	ldr	r2, [pc, #276]	@ (8002520 <HAL_UART_MspInit+0x168>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002412:	4b43      	ldr	r3, [pc, #268]	@ (8002520 <HAL_UART_MspInit+0x168>)
 8002414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	4b40      	ldr	r3, [pc, #256]	@ (8002520 <HAL_UART_MspInit+0x168>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002422:	4a3f      	ldr	r2, [pc, #252]	@ (8002520 <HAL_UART_MspInit+0x168>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242a:	4b3d      	ldr	r3, [pc, #244]	@ (8002520 <HAL_UART_MspInit+0x168>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002436:	230c      	movs	r3, #12
 8002438:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002446:	230c      	movs	r3, #12
 8002448:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800244e:	4619      	mov	r1, r3
 8002450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002454:	f000 fd98 	bl	8002f88 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002458:	4b32      	ldr	r3, [pc, #200]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 800245a:	4a33      	ldr	r2, [pc, #204]	@ (8002528 <HAL_UART_MspInit+0x170>)
 800245c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800245e:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 8002460:	2222      	movs	r2, #34	@ 0x22
 8002462:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002464:	4b2f      	ldr	r3, [pc, #188]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800246a:	4b2e      	ldr	r3, [pc, #184]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002470:	4b2c      	ldr	r3, [pc, #176]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 8002472:	2280      	movs	r2, #128	@ 0x80
 8002474:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002476:	4b2b      	ldr	r3, [pc, #172]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800247c:	4b29      	ldr	r3, [pc, #164]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002482:	4b28      	ldr	r3, [pc, #160]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 8002484:	2220      	movs	r2, #32
 8002486:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002488:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 800248a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800248e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002490:	4824      	ldr	r0, [pc, #144]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 8002492:	f000 fa3b 	bl	800290c <HAL_DMA_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800249c:	f7ff fc1c 	bl	8001cd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a20      	ldr	r2, [pc, #128]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 80024a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80024a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002524 <HAL_UART_MspInit+0x16c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80024ae:	4b1f      	ldr	r3, [pc, #124]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002530 <HAL_UART_MspInit+0x178>)
 80024b2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80024b4:	4b1d      	ldr	r3, [pc, #116]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024b6:	2223      	movs	r2, #35	@ 0x23
 80024b8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ba:	4b1c      	ldr	r3, [pc, #112]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024bc:	2210      	movs	r2, #16
 80024be:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c0:	4b1a      	ldr	r3, [pc, #104]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024c6:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024c8:	2280      	movs	r2, #128	@ 0x80
 80024ca:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024cc:	4b17      	ldr	r3, [pc, #92]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d2:	4b16      	ldr	r3, [pc, #88]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80024d8:	4b14      	ldr	r3, [pc, #80]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024de:	4b13      	ldr	r3, [pc, #76]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024e0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80024e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80024e6:	4811      	ldr	r0, [pc, #68]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024e8:	f000 fa10 	bl	800290c <HAL_DMA_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80024f2:	f7ff fbf1 	bl	8001cd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a0c      	ldr	r2, [pc, #48]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024fa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80024fc:	4a0b      	ldr	r2, [pc, #44]	@ (800252c <HAL_UART_MspInit+0x174>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2105      	movs	r1, #5
 8002506:	205b      	movs	r0, #91	@ 0x5b
 8002508:	f000 f9d8 	bl	80028bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800250c:	205b      	movs	r0, #91	@ 0x5b
 800250e:	f000 f9ef 	bl	80028f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002512:	bf00      	nop
 8002514:	3778      	adds	r7, #120	@ 0x78
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40008000 	.word	0x40008000
 8002520:	40021000 	.word	0x40021000
 8002524:	20004888 	.word	0x20004888
 8002528:	40020008 	.word	0x40020008
 800252c:	200048e8 	.word	0x200048e8
 8002530:	4002001c 	.word	0x4002001c

08002534 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002542:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002544:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002548:	4904      	ldr	r1, [pc, #16]	@ (800255c <cubemx_transport_open+0x28>)
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f003 fa0a 	bl	8005964 <HAL_UART_Receive_DMA>
    return true;
 8002550:	2301      	movs	r3, #1
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20004948 	.word	0x20004948

08002560 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800256e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f003 fa43 	bl	80059fc <HAL_UART_DMAStop>
    return true;
 8002576:	2301      	movs	r3, #1
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002594:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259c:	2b20      	cmp	r3, #32
 800259e:	d11b      	bne.n	80025d8 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	6978      	ldr	r0, [r7, #20]
 80025aa:	f003 f95b 	bl	8005864 <HAL_UART_Transmit_DMA>
 80025ae:	4603      	mov	r3, r0
 80025b0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80025b2:	e002      	b.n	80025ba <cubemx_transport_write+0x3a>
            osDelay(1);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f005 fba5 	bl	8007d04 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <cubemx_transport_write+0x4a>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d1f4      	bne.n	80025b4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <cubemx_transport_write+0x54>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	e002      	b.n	80025da <cubemx_transport_write+0x5a>
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80025d8:	2300      	movs	r3, #0
    }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80025f8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80025fe:	b672      	cpsid	i
}
 8002600:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <cubemx_transport_read+0x9c>)
 8002612:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002614:	b662      	cpsie	i
}
 8002616:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	3301      	adds	r3, #1
 800261c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800261e:	2001      	movs	r0, #1
 8002620:	f005 fb70 	bl	8007d04 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002624:	4b17      	ldr	r3, [pc, #92]	@ (8002684 <cubemx_transport_read+0xa0>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <cubemx_transport_read+0x9c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d103      	bne.n	8002638 <cubemx_transport_read+0x54>
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	dbe2      	blt.n	80025fe <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800263c:	e011      	b.n	8002662 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <cubemx_transport_read+0xa0>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	440b      	add	r3, r1
 8002648:	490f      	ldr	r1, [pc, #60]	@ (8002688 <cubemx_transport_read+0xa4>)
 800264a:	5c8a      	ldrb	r2, [r1, r2]
 800264c:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800264e:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <cubemx_transport_read+0xa0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002658:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <cubemx_transport_read+0xa0>)
 800265a:	6013      	str	r3, [r2, #0]
        wrote++;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	3301      	adds	r3, #1
 8002660:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002662:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <cubemx_transport_read+0xa0>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <cubemx_transport_read+0x9c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d003      	beq.n	8002676 <cubemx_transport_read+0x92>
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	429a      	cmp	r2, r3
 8002674:	d3e3      	bcc.n	800263e <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8002676:	69bb      	ldr	r3, [r7, #24]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	2000514c 	.word	0x2000514c
 8002684:	20005148 	.word	0x20005148
 8002688:	20004948 	.word	0x20004948

0800268c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800268c:	480d      	ldr	r0, [pc, #52]	@ (80026c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800268e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002690:	f7ff fe36 	bl	8002300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002694:	480c      	ldr	r0, [pc, #48]	@ (80026c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002696:	490d      	ldr	r1, [pc, #52]	@ (80026cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002698:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <LoopForever+0xe>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800269c:	e002      	b.n	80026a4 <LoopCopyDataInit>

0800269e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a2:	3304      	adds	r3, #4

080026a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a8:	d3f9      	bcc.n	800269e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026aa:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026ac:	4c0a      	ldr	r4, [pc, #40]	@ (80026d8 <LoopForever+0x16>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b0:	e001      	b.n	80026b6 <LoopFillZerobss>

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b4:	3204      	adds	r2, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ba:	f016 fe75 	bl	80193a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026be:	f7ff fa95 	bl	8001bec <main>

080026c2 <LoopForever>:

LoopForever:
    b LoopForever
 80026c2:	e7fe      	b.n	80026c2 <LoopForever>
  ldr   r0, =_estack
 80026c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026cc:	20000890 	.word	0x20000890
  ldr r2, =_sidata
 80026d0:	0801be8c 	.word	0x0801be8c
  ldr r2, =_sbss
 80026d4:	20000890 	.word	0x20000890
  ldr r4, =_ebss
 80026d8:	2000b8ac 	.word	0x2000b8ac

080026dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026dc:	e7fe      	b.n	80026dc <ADC1_2_IRQHandler>

080026de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f000 f8dc 	bl	80028a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ee:	200f      	movs	r0, #15
 80026f0:	f7ff fc88 	bl	8002004 <HAL_InitTick>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	71fb      	strb	r3, [r7, #7]
 80026fe:	e001      	b.n	8002704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002700:	f7ff fc56 	bl	8001fb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002704:	79fb      	ldrb	r3, [r7, #7]

}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002714:	4b05      	ldr	r3, [pc, #20]	@ (800272c <HAL_IncTick+0x1c>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <HAL_IncTick+0x20>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4413      	add	r3, r2
 800271e:	4a03      	ldr	r2, [pc, #12]	@ (800272c <HAL_IncTick+0x1c>)
 8002720:	6013      	str	r3, [r2, #0]
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	20005150 	.word	0x20005150
 8002730:	2000000c 	.word	0x2000000c

08002734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return uwTick;
 8002738:	4b03      	ldr	r3, [pc, #12]	@ (8002748 <HAL_GetTick+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20005150 	.word	0x20005150

0800274c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002768:	4013      	ands	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002774:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800277c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277e:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	60d3      	str	r3, [r2, #12]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002798:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <__NVIC_GetPriorityGrouping+0x18>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 0307 	and.w	r3, r3, #7
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	db0b      	blt.n	80027da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	f003 021f 	and.w	r2, r3, #31
 80027c8:	4907      	ldr	r1, [pc, #28]	@ (80027e8 <__NVIC_EnableIRQ+0x38>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2001      	movs	r0, #1
 80027d2:	fa00 f202 	lsl.w	r2, r0, r2
 80027d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000e100 	.word	0xe000e100

080027ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	db0a      	blt.n	8002816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	490c      	ldr	r1, [pc, #48]	@ (8002838 <__NVIC_SetPriority+0x4c>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	0112      	lsls	r2, r2, #4
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	440b      	add	r3, r1
 8002810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002814:	e00a      	b.n	800282c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4908      	ldr	r1, [pc, #32]	@ (800283c <__NVIC_SetPriority+0x50>)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	3b04      	subs	r3, #4
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	440b      	add	r3, r1
 800282a:	761a      	strb	r2, [r3, #24]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000e100 	.word	0xe000e100
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	@ 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f1c3 0307 	rsb	r3, r3, #7
 800285a:	2b04      	cmp	r3, #4
 800285c:	bf28      	it	cs
 800285e:	2304      	movcs	r3, #4
 8002860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3304      	adds	r3, #4
 8002866:	2b06      	cmp	r3, #6
 8002868:	d902      	bls.n	8002870 <NVIC_EncodePriority+0x30>
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3b03      	subs	r3, #3
 800286e:	e000      	b.n	8002872 <NVIC_EncodePriority+0x32>
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43da      	mvns	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	401a      	ands	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002888:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	43d9      	mvns	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	4313      	orrs	r3, r2
         );
}
 800289a:	4618      	mov	r0, r3
 800289c:	3724      	adds	r7, #36	@ 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ff4c 	bl	800274c <__NVIC_SetPriorityGrouping>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028ca:	f7ff ff63 	bl	8002794 <__NVIC_GetPriorityGrouping>
 80028ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	6978      	ldr	r0, [r7, #20]
 80028d6:	f7ff ffb3 	bl	8002840 <NVIC_EncodePriority>
 80028da:	4602      	mov	r2, r0
 80028dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ff82 	bl	80027ec <__NVIC_SetPriority>
}
 80028e8:	bf00      	nop
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff56 	bl	80027b0 <__NVIC_EnableIRQ>
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e08d      	b.n	8002a3a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	4b47      	ldr	r3, [pc, #284]	@ (8002a44 <HAL_DMA_Init+0x138>)
 8002926:	429a      	cmp	r2, r3
 8002928:	d80f      	bhi.n	800294a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	4b45      	ldr	r3, [pc, #276]	@ (8002a48 <HAL_DMA_Init+0x13c>)
 8002932:	4413      	add	r3, r2
 8002934:	4a45      	ldr	r2, [pc, #276]	@ (8002a4c <HAL_DMA_Init+0x140>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	009a      	lsls	r2, r3, #2
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a42      	ldr	r2, [pc, #264]	@ (8002a50 <HAL_DMA_Init+0x144>)
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40
 8002948:	e00e      	b.n	8002968 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	4b40      	ldr	r3, [pc, #256]	@ (8002a54 <HAL_DMA_Init+0x148>)
 8002952:	4413      	add	r3, r2
 8002954:	4a3d      	ldr	r2, [pc, #244]	@ (8002a4c <HAL_DMA_Init+0x140>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	009a      	lsls	r2, r3, #2
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a3c      	ldr	r2, [pc, #240]	@ (8002a58 <HAL_DMA_Init+0x14c>)
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800297e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002982:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800298c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fa82 	bl	8002ec4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029c8:	d102      	bne.n	80029d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d010      	beq.n	8002a10 <HAL_DMA_Init+0x104>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d80c      	bhi.n	8002a10 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 faa2 	bl	8002f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	e008      	b.n	8002a22 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40020407 	.word	0x40020407
 8002a48:	bffdfff8 	.word	0xbffdfff8
 8002a4c:	cccccccd 	.word	0xcccccccd
 8002a50:	40020000 	.word	0x40020000
 8002a54:	bffdfbf8 	.word	0xbffdfbf8
 8002a58:	40020400 	.word	0x40020400

08002a5c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_DMA_Start_IT+0x20>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e066      	b.n	8002b4a <HAL_DMA_Start_IT+0xee>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d155      	bne.n	8002b3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f9c7 	bl	8002e48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 020e 	orr.w	r2, r2, #14
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e00f      	b.n	8002af4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0204 	bic.w	r2, r2, #4
 8002ae2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 020a 	orr.w	r2, r2, #10
 8002af2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b10:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b28:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e005      	b.n	8002b48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
 8002b46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d005      	beq.n	8002b76 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e037      	b.n	8002be6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 020e 	bic.w	r2, r2, #14
 8002b84:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b94:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	f003 021f 	and.w	r2, r3, #31
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bc2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00c      	beq.n	8002be6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bda:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002be4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d00d      	beq.n	8002c38 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2204      	movs	r2, #4
 8002c20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	e047      	b.n	8002cc8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 020e 	bic.w	r2, r2, #14
 8002c46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c84:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ca6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
    }
  }
  return status;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d026      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x7a>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d021      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d107      	bne.n	8002d26 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0204 	bic.w	r2, r2, #4
 8002d24:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f003 021f 	and.w	r2, r3, #31
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	2104      	movs	r1, #4
 8002d34:	fa01 f202 	lsl.w	r2, r1, r2
 8002d38:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d071      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d4a:	e06c      	b.n	8002e26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2202      	movs	r2, #2
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d02e      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d029      	beq.n	8002dbe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10b      	bne.n	8002d90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 020a 	bic.w	r2, r2, #10
 8002d86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d94:	f003 021f 	and.w	r2, r3, #31
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002da2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d038      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002dbc:	e033      	b.n	8002e26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d02a      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d025      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 020e 	bic.w	r2, r2, #14
 8002dea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df0:	f003 021f 	and.w	r2, r3, #31
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	2101      	movs	r1, #1
 8002dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
}
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e70:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	f003 021f 	and.w	r2, r3, #31
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	2101      	movs	r1, #1
 8002e80:	fa01 f202 	lsl.w	r2, r1, r2
 8002e84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d108      	bne.n	8002ea8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ea6:	e007      	b.n	8002eb8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	60da      	str	r2, [r3, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b16      	ldr	r3, [pc, #88]	@ (8002f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d802      	bhi.n	8002ede <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002ed8:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	e001      	b.n	8002ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002ede:	4b15      	ldr	r3, [pc, #84]	@ (8002f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ee0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	3b08      	subs	r3, #8
 8002eee:	4a12      	ldr	r2, [pc, #72]	@ (8002f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	009a      	lsls	r2, r3, #2
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4413      	add	r3, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002f0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2201      	movs	r2, #1
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40020407 	.word	0x40020407
 8002f30:	40020800 	.word	0x40020800
 8002f34:	40020820 	.word	0x40020820
 8002f38:	cccccccd 	.word	0xcccccccd
 8002f3c:	40020880 	.word	0x40020880

08002f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a08      	ldr	r2, [pc, #32]	@ (8002f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f62:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	1000823f 	.word	0x1000823f
 8002f84:	40020940 	.word	0x40020940

08002f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f96:	e15a      	b.n	800324e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 814c 	beq.w	8003248 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d005      	beq.n	8002fc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d130      	bne.n	800302a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ffe:	2201      	movs	r2, #1
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 0201 	and.w	r2, r3, #1
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b03      	cmp	r3, #3
 8003034:	d017      	beq.n	8003066 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	2203      	movs	r2, #3
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d123      	bne.n	80030ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	08da      	lsrs	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3208      	adds	r2, #8
 800307a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	08da      	lsrs	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	6939      	ldr	r1, [r7, #16]
 80030b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	2203      	movs	r2, #3
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0203 	and.w	r2, r3, #3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80a6 	beq.w	8003248 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fc:	4b5b      	ldr	r3, [pc, #364]	@ (800326c <HAL_GPIO_Init+0x2e4>)
 80030fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003100:	4a5a      	ldr	r2, [pc, #360]	@ (800326c <HAL_GPIO_Init+0x2e4>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6613      	str	r3, [r2, #96]	@ 0x60
 8003108:	4b58      	ldr	r3, [pc, #352]	@ (800326c <HAL_GPIO_Init+0x2e4>)
 800310a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003114:	4a56      	ldr	r2, [pc, #344]	@ (8003270 <HAL_GPIO_Init+0x2e8>)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	3302      	adds	r3, #2
 800311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800313e:	d01f      	beq.n	8003180 <HAL_GPIO_Init+0x1f8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a4c      	ldr	r2, [pc, #304]	@ (8003274 <HAL_GPIO_Init+0x2ec>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d019      	beq.n	800317c <HAL_GPIO_Init+0x1f4>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a4b      	ldr	r2, [pc, #300]	@ (8003278 <HAL_GPIO_Init+0x2f0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <HAL_GPIO_Init+0x1f0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a4a      	ldr	r2, [pc, #296]	@ (800327c <HAL_GPIO_Init+0x2f4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00d      	beq.n	8003174 <HAL_GPIO_Init+0x1ec>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a49      	ldr	r2, [pc, #292]	@ (8003280 <HAL_GPIO_Init+0x2f8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <HAL_GPIO_Init+0x1e8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a48      	ldr	r2, [pc, #288]	@ (8003284 <HAL_GPIO_Init+0x2fc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d101      	bne.n	800316c <HAL_GPIO_Init+0x1e4>
 8003168:	2305      	movs	r3, #5
 800316a:	e00a      	b.n	8003182 <HAL_GPIO_Init+0x1fa>
 800316c:	2306      	movs	r3, #6
 800316e:	e008      	b.n	8003182 <HAL_GPIO_Init+0x1fa>
 8003170:	2304      	movs	r3, #4
 8003172:	e006      	b.n	8003182 <HAL_GPIO_Init+0x1fa>
 8003174:	2303      	movs	r3, #3
 8003176:	e004      	b.n	8003182 <HAL_GPIO_Init+0x1fa>
 8003178:	2302      	movs	r3, #2
 800317a:	e002      	b.n	8003182 <HAL_GPIO_Init+0x1fa>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_GPIO_Init+0x1fa>
 8003180:	2300      	movs	r3, #0
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	f002 0203 	and.w	r2, r2, #3
 8003188:	0092      	lsls	r2, r2, #2
 800318a:	4093      	lsls	r3, r2
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003192:	4937      	ldr	r1, [pc, #220]	@ (8003270 <HAL_GPIO_Init+0x2e8>)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a0:	4b39      	ldr	r3, [pc, #228]	@ (8003288 <HAL_GPIO_Init+0x300>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031c4:	4a30      	ldr	r2, [pc, #192]	@ (8003288 <HAL_GPIO_Init+0x300>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003288 <HAL_GPIO_Init+0x300>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ee:	4a26      	ldr	r2, [pc, #152]	@ (8003288 <HAL_GPIO_Init+0x300>)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031f4:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <HAL_GPIO_Init+0x300>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003218:	4a1b      	ldr	r2, [pc, #108]	@ (8003288 <HAL_GPIO_Init+0x300>)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800321e:	4b1a      	ldr	r3, [pc, #104]	@ (8003288 <HAL_GPIO_Init+0x300>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003242:	4a11      	ldr	r2, [pc, #68]	@ (8003288 <HAL_GPIO_Init+0x300>)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	3301      	adds	r3, #1
 800324c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	f47f ae9d 	bne.w	8002f98 <HAL_GPIO_Init+0x10>
  }
}
 800325e:	bf00      	nop
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40021000 	.word	0x40021000
 8003270:	40010000 	.word	0x40010000
 8003274:	48000400 	.word	0x48000400
 8003278:	48000800 	.word	0x48000800
 800327c:	48000c00 	.word	0x48000c00
 8003280:	48001000 	.word	0x48001000
 8003284:	48001400 	.word	0x48001400
 8003288:	40010400 	.word	0x40010400

0800328c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	e001      	b.n	80032ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]
 80032c8:	4613      	mov	r3, r2
 80032ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032cc:	787b      	ldrb	r3, [r7, #1]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032d8:	e002      	b.n	80032e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4013      	ands	r3, r2
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43d9      	mvns	r1, r3
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	400b      	ands	r3, r1
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	619a      	str	r2, [r3, #24]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800332a:	4b08      	ldr	r3, [pc, #32]	@ (800334c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003336:	4a05      	ldr	r2, [pc, #20]	@ (800334c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f806 	bl	8003350 <HAL_GPIO_EXTI_Callback>
  }
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40010400 	.word	0x40010400

08003350 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e08d      	b.n	8003494 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d106      	bne.n	8003392 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fe fbb5 	bl	8001afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2224      	movs	r2, #36	@ 0x24
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d107      	bne.n	80033e0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	e006      	b.n	80033ee <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d108      	bne.n	8003408 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	e007      	b.n	8003418 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003416:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800342a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800343a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69d9      	ldr	r1, [r3, #28]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1a      	ldr	r2, [r3, #32]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	4608      	mov	r0, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	461a      	mov	r2, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	817b      	strh	r3, [r7, #10]
 80034ae:	460b      	mov	r3, r1
 80034b0:	813b      	strh	r3, [r7, #8]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b20      	cmp	r3, #32
 80034c0:	f040 80f9 	bne.w	80036b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_I2C_Mem_Write+0x34>
 80034ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0ed      	b.n	80036b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_I2C_Mem_Write+0x4e>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e0e6      	b.n	80036b8 <HAL_I2C_Mem_Write+0x21c>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034f2:	f7ff f91f 	bl	8002734 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2319      	movs	r3, #25
 80034fe:	2201      	movs	r2, #1
 8003500:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fac3 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0d1      	b.n	80036b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2221      	movs	r2, #33	@ 0x21
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2240      	movs	r2, #64	@ 0x40
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a3a      	ldr	r2, [r7, #32]
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800353c:	88f8      	ldrh	r0, [r7, #6]
 800353e:	893a      	ldrh	r2, [r7, #8]
 8003540:	8979      	ldrh	r1, [r7, #10]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	4603      	mov	r3, r0
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f9d3 	bl	80038f8 <I2C_RequestMemoryWrite>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0a9      	b.n	80036b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2bff      	cmp	r3, #255	@ 0xff
 800356c:	d90e      	bls.n	800358c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	22ff      	movs	r2, #255	@ 0xff
 8003572:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003578:	b2da      	uxtb	r2, r3
 800357a:	8979      	ldrh	r1, [r7, #10]
 800357c:	2300      	movs	r3, #0
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fc47 	bl	8003e18 <I2C_TransferConfig>
 800358a:	e00f      	b.n	80035ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	b2da      	uxtb	r2, r3
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	2300      	movs	r3, #0
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fc36 	bl	8003e18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fac6 	bl	8003b42 <I2C_WaitOnTXISFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e07b      	b.n	80036b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d034      	beq.n	8003664 <HAL_I2C_Mem_Write+0x1c8>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d130      	bne.n	8003664 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003608:	2200      	movs	r2, #0
 800360a:	2180      	movs	r1, #128	@ 0x80
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fa3f 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e04d      	b.n	80036b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	2bff      	cmp	r3, #255	@ 0xff
 8003624:	d90e      	bls.n	8003644 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	22ff      	movs	r2, #255	@ 0xff
 800362a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003630:	b2da      	uxtb	r2, r3
 8003632:	8979      	ldrh	r1, [r7, #10]
 8003634:	2300      	movs	r3, #0
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 fbeb 	bl	8003e18 <I2C_TransferConfig>
 8003642:	e00f      	b.n	8003664 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003652:	b2da      	uxtb	r2, r3
 8003654:	8979      	ldrh	r1, [r7, #10]
 8003656:	2300      	movs	r3, #0
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 fbda 	bl	8003e18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d19e      	bne.n	80035ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 faac 	bl	8003bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e01a      	b.n	80036b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2220      	movs	r2, #32
 8003688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <HAL_I2C_Mem_Write+0x224>)
 8003696:	400b      	ands	r3, r1
 8003698:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
  }
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	fe00e800 	.word	0xfe00e800

080036c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	4608      	mov	r0, r1
 80036ce:	4611      	mov	r1, r2
 80036d0:	461a      	mov	r2, r3
 80036d2:	4603      	mov	r3, r0
 80036d4:	817b      	strh	r3, [r7, #10]
 80036d6:	460b      	mov	r3, r1
 80036d8:	813b      	strh	r3, [r7, #8]
 80036da:	4613      	mov	r3, r2
 80036dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	f040 80fd 	bne.w	80038e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_I2C_Mem_Read+0x34>
 80036f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d105      	bne.n	8003704 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0f1      	b.n	80038e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_I2C_Mem_Read+0x4e>
 800370e:	2302      	movs	r3, #2
 8003710:	e0ea      	b.n	80038e8 <HAL_I2C_Mem_Read+0x224>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800371a:	f7ff f80b 	bl	8002734 <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	2319      	movs	r3, #25
 8003726:	2201      	movs	r2, #1
 8003728:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f9af 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0d5      	b.n	80038e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2222      	movs	r2, #34	@ 0x22
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2240      	movs	r2, #64	@ 0x40
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a3a      	ldr	r2, [r7, #32]
 8003756:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800375c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003764:	88f8      	ldrh	r0, [r7, #6]
 8003766:	893a      	ldrh	r2, [r7, #8]
 8003768:	8979      	ldrh	r1, [r7, #10]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	4603      	mov	r3, r0
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f913 	bl	80039a0 <I2C_RequestMemoryRead>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0ad      	b.n	80038e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	2bff      	cmp	r3, #255	@ 0xff
 8003794:	d90e      	bls.n	80037b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	22ff      	movs	r2, #255	@ 0xff
 800379a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	8979      	ldrh	r1, [r7, #10]
 80037a4:	4b52      	ldr	r3, [pc, #328]	@ (80038f0 <HAL_I2C_Mem_Read+0x22c>)
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fb33 	bl	8003e18 <I2C_TransferConfig>
 80037b2:	e00f      	b.n	80037d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	8979      	ldrh	r1, [r7, #10]
 80037c6:	4b4a      	ldr	r3, [pc, #296]	@ (80038f0 <HAL_I2C_Mem_Read+0x22c>)
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fb22 	bl	8003e18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037da:	2200      	movs	r2, #0
 80037dc:	2104      	movs	r1, #4
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f956 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07c      	b.n	80038e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d034      	beq.n	8003894 <HAL_I2C_Mem_Read+0x1d0>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	2b00      	cmp	r3, #0
 8003830:	d130      	bne.n	8003894 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003838:	2200      	movs	r2, #0
 800383a:	2180      	movs	r1, #128	@ 0x80
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f927 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e04d      	b.n	80038e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2bff      	cmp	r3, #255	@ 0xff
 8003854:	d90e      	bls.n	8003874 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	22ff      	movs	r2, #255	@ 0xff
 800385a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003860:	b2da      	uxtb	r2, r3
 8003862:	8979      	ldrh	r1, [r7, #10]
 8003864:	2300      	movs	r3, #0
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fad3 	bl	8003e18 <I2C_TransferConfig>
 8003872:	e00f      	b.n	8003894 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003882:	b2da      	uxtb	r2, r3
 8003884:	8979      	ldrh	r1, [r7, #10]
 8003886:	2300      	movs	r3, #0
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fac2 	bl	8003e18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d19a      	bne.n	80037d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f994 	bl	8003bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e01a      	b.n	80038e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2220      	movs	r2, #32
 80038b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <HAL_I2C_Mem_Read+0x230>)
 80038c6:	400b      	ands	r3, r1
 80038c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	80002400 	.word	0x80002400
 80038f4:	fe00e800 	.word	0xfe00e800

080038f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4603      	mov	r3, r0
 8003908:	817b      	strh	r3, [r7, #10]
 800390a:	460b      	mov	r3, r1
 800390c:	813b      	strh	r3, [r7, #8]
 800390e:	4613      	mov	r3, r2
 8003910:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	8979      	ldrh	r1, [r7, #10]
 8003918:	4b20      	ldr	r3, [pc, #128]	@ (800399c <I2C_RequestMemoryWrite+0xa4>)
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fa79 	bl	8003e18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	69b9      	ldr	r1, [r7, #24]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f909 	bl	8003b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e02c      	b.n	8003994 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003940:	893b      	ldrh	r3, [r7, #8]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	629a      	str	r2, [r3, #40]	@ 0x28
 800394a:	e015      	b.n	8003978 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800394c:	893b      	ldrh	r3, [r7, #8]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	b29b      	uxth	r3, r3
 8003952:	b2da      	uxtb	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f8ef 	bl	8003b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e012      	b.n	8003994 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800396e:	893b      	ldrh	r3, [r7, #8]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2200      	movs	r2, #0
 8003980:	2180      	movs	r1, #128	@ 0x80
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f884 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	80002000 	.word	0x80002000

080039a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	460b      	mov	r3, r1
 80039b4:	813b      	strh	r3, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	8979      	ldrh	r1, [r7, #10]
 80039c0:	4b20      	ldr	r3, [pc, #128]	@ (8003a44 <I2C_RequestMemoryRead+0xa4>)
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fa26 	bl	8003e18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	69b9      	ldr	r1, [r7, #24]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f8b6 	bl	8003b42 <I2C_WaitOnTXISFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e02c      	b.n	8003a3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d105      	bne.n	80039f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039e6:	893b      	ldrh	r3, [r7, #8]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80039f0:	e015      	b.n	8003a1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039f2:	893b      	ldrh	r3, [r7, #8]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	69b9      	ldr	r1, [r7, #24]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f89c 	bl	8003b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e012      	b.n	8003a3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a14:	893b      	ldrh	r3, [r7, #8]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2200      	movs	r2, #0
 8003a26:	2140      	movs	r1, #64	@ 0x40
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f831 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	80002000 	.word	0x80002000

08003a48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d103      	bne.n	8003a66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2200      	movs	r2, #0
 8003a64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d007      	beq.n	8003a84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	619a      	str	r2, [r3, #24]
  }
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa0:	e03b      	b.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f8d6 	bl	8003c58 <I2C_IsErrorOccurred>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e041      	b.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003abc:	d02d      	beq.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003abe:	f7fe fe39 	bl	8002734 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d302      	bcc.n	8003ad4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d122      	bne.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d113      	bne.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e00f      	b.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4013      	ands	r3, r2
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d0b4      	beq.n	8003aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b4e:	e033      	b.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f87f 	bl	8003c58 <I2C_IsErrorOccurred>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e031      	b.n	8003bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b6a:	d025      	beq.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6c:	f7fe fde2 	bl	8002734 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d302      	bcc.n	8003b82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d11a      	bne.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d013      	beq.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b94:	f043 0220 	orr.w	r2, r3, #32
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d1c4      	bne.n	8003b50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bdc:	e02f      	b.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f838 	bl	8003c58 <I2C_IsErrorOccurred>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e02d      	b.n	8003c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fe fd9f 	bl	8002734 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d11a      	bne.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d013      	beq.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1a:	f043 0220 	orr.w	r2, r3, #32
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e007      	b.n	8003c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d1c8      	bne.n	8003bde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	@ 0x28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d068      	beq.n	8003d56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c8c:	e049      	b.n	8003d22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c94:	d045      	beq.n	8003d22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c96:	f7fe fd4d 	bl	8002734 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d302      	bcc.n	8003cac <I2C_IsErrorOccurred+0x54>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d13a      	bne.n	8003d22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cce:	d121      	bne.n	8003d14 <I2C_IsErrorOccurred+0xbc>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cd6:	d01d      	beq.n	8003d14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d01a      	beq.n	8003d14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cee:	f7fe fd21 	bl	8002734 <HAL_GetTick>
 8003cf2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf4:	e00e      	b.n	8003d14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cf6:	f7fe fd1d 	bl	8002734 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b19      	cmp	r3, #25
 8003d02:	d907      	bls.n	8003d14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	f043 0320 	orr.w	r3, r3, #32
 8003d0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003d12:	e006      	b.n	8003d22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d1e9      	bne.n	8003cf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d003      	beq.n	8003d38 <I2C_IsErrorOccurred+0xe0>
 8003d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0aa      	beq.n	8003c8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d103      	bne.n	8003d48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2220      	movs	r2, #32
 8003d46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00b      	beq.n	8003da2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	f043 0308 	orr.w	r3, r3, #8
 8003d90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f043 0302 	orr.w	r3, r3, #2
 8003db2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01c      	beq.n	8003e06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff fe3b 	bl	8003a48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e14 <I2C_IsErrorOccurred+0x1bc>)
 8003dde:	400b      	ands	r3, r1
 8003de0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003e06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3728      	adds	r7, #40	@ 0x28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	fe00e800 	.word	0xfe00e800

08003e18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	817b      	strh	r3, [r7, #10]
 8003e26:	4613      	mov	r3, r2
 8003e28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e2a:	897b      	ldrh	r3, [r7, #10]
 8003e2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e30:	7a7b      	ldrb	r3, [r7, #9]
 8003e32:	041b      	lsls	r3, r3, #16
 8003e34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	0d5b      	lsrs	r3, r3, #21
 8003e52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e56:	4b08      	ldr	r3, [pc, #32]	@ (8003e78 <I2C_TransferConfig+0x60>)
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	ea02 0103 	and.w	r1, r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	03ff63ff 	.word	0x03ff63ff

08003e7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d138      	bne.n	8003f04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e032      	b.n	8003f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2224      	movs	r2, #36	@ 0x24
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ece:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6819      	ldr	r1, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d139      	bne.n	8003f9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e033      	b.n	8003f9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2224      	movs	r2, #36	@ 0x24
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f9c:	2302      	movs	r3, #2
  }
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e041      	b.n	8004040 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8003fc4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f245 5255 	movw	r2, #21845	@ 0x5555
 8003fce:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6852      	ldr	r2, [r2, #4]
 8003fd8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6892      	ldr	r2, [r2, #8]
 8003fe2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003fe4:	f7fe fba6 	bl	8002734 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003fea:	e00f      	b.n	800400c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003fec:	f7fe fba2 	bl	8002734 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b31      	cmp	r3, #49	@ 0x31
 8003ff8:	d908      	bls.n	800400c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e019      	b.n	8004040 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e8      	bne.n	8003fec <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	429a      	cmp	r2, r3
 8004026:	d005      	beq.n	8004034 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	68d2      	ldr	r2, [r2, #12]
 8004030:	611a      	str	r2, [r3, #16]
 8004032:	e004      	b.n	800403e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004058:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d141      	bne.n	80040fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004076:	4b4b      	ldr	r3, [pc, #300]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800407e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004082:	d131      	bne.n	80040e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004084:	4b47      	ldr	r3, [pc, #284]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800408a:	4a46      	ldr	r2, [pc, #280]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004090:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004094:	4b43      	ldr	r3, [pc, #268]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800409c:	4a41      	ldr	r2, [pc, #260]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040a4:	4b40      	ldr	r3, [pc, #256]	@ (80041a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2232      	movs	r2, #50	@ 0x32
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	4a3f      	ldr	r2, [pc, #252]	@ (80041ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	0c9b      	lsrs	r3, r3, #18
 80040b6:	3301      	adds	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ba:	e002      	b.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3b01      	subs	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c2:	4b38      	ldr	r3, [pc, #224]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ce:	d102      	bne.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f2      	bne.n	80040bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040d6:	4b33      	ldr	r3, [pc, #204]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e2:	d158      	bne.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e057      	b.n	8004198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040e8:	4b2e      	ldr	r3, [pc, #184]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ee:	4a2d      	ldr	r2, [pc, #180]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040f8:	e04d      	b.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004100:	d141      	bne.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004102:	4b28      	ldr	r3, [pc, #160]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800410e:	d131      	bne.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004110:	4b24      	ldr	r3, [pc, #144]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004116:	4a23      	ldr	r2, [pc, #140]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800411c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004120:	4b20      	ldr	r3, [pc, #128]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004128:	4a1e      	ldr	r2, [pc, #120]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800412e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004130:	4b1d      	ldr	r3, [pc, #116]	@ (80041a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2232      	movs	r2, #50	@ 0x32
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	4a1c      	ldr	r2, [pc, #112]	@ (80041ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	0c9b      	lsrs	r3, r3, #18
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004146:	e002      	b.n	800414e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3b01      	subs	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800414e:	4b15      	ldr	r3, [pc, #84]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415a:	d102      	bne.n	8004162 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f2      	bne.n	8004148 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004162:	4b10      	ldr	r3, [pc, #64]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416e:	d112      	bne.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e011      	b.n	8004198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004174:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800417a:	4a0a      	ldr	r2, [pc, #40]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004184:	e007      	b.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004186:	4b07      	ldr	r3, [pc, #28]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800418e:	4a05      	ldr	r2, [pc, #20]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004190:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004194:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40007000 	.word	0x40007000
 80041a8:	20000004 	.word	0x20000004
 80041ac:	431bde83 	.word	0x431bde83

080041b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041b4:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4a04      	ldr	r2, [pc, #16]	@ (80041cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041be:	6093      	str	r3, [r2, #8]
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40007000 	.word	0x40007000

080041d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e2fe      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d075      	beq.n	80042da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ee:	4b97      	ldr	r3, [pc, #604]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041f8:	4b94      	ldr	r3, [pc, #592]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b0c      	cmp	r3, #12
 8004206:	d102      	bne.n	800420e <HAL_RCC_OscConfig+0x3e>
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d002      	beq.n	8004214 <HAL_RCC_OscConfig+0x44>
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d10b      	bne.n	800422c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004214:	4b8d      	ldr	r3, [pc, #564]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d05b      	beq.n	80042d8 <HAL_RCC_OscConfig+0x108>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d157      	bne.n	80042d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e2d9      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004234:	d106      	bne.n	8004244 <HAL_RCC_OscConfig+0x74>
 8004236:	4b85      	ldr	r3, [pc, #532]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a84      	ldr	r2, [pc, #528]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e01d      	b.n	8004280 <HAL_RCC_OscConfig+0xb0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x98>
 800424e:	4b7f      	ldr	r3, [pc, #508]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a7e      	ldr	r2, [pc, #504]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b7c      	ldr	r3, [pc, #496]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a7b      	ldr	r2, [pc, #492]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e00b      	b.n	8004280 <HAL_RCC_OscConfig+0xb0>
 8004268:	4b78      	ldr	r3, [pc, #480]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a77      	ldr	r2, [pc, #476]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 800426e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	4b75      	ldr	r3, [pc, #468]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a74      	ldr	r2, [pc, #464]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 800427a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800427e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d013      	beq.n	80042b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fe fa54 	bl	8002734 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004290:	f7fe fa50 	bl	8002734 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	@ 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e29e      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042a2:	4b6a      	ldr	r3, [pc, #424]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0xc0>
 80042ae:	e014      	b.n	80042da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fe fa40 	bl	8002734 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b8:	f7fe fa3c 	bl	8002734 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b64      	cmp	r3, #100	@ 0x64
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e28a      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ca:	4b60      	ldr	r3, [pc, #384]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0xe8>
 80042d6:	e000      	b.n	80042da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d075      	beq.n	80043d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e6:	4b59      	ldr	r3, [pc, #356]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042f0:	4b56      	ldr	r3, [pc, #344]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b0c      	cmp	r3, #12
 80042fe:	d102      	bne.n	8004306 <HAL_RCC_OscConfig+0x136>
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d002      	beq.n	800430c <HAL_RCC_OscConfig+0x13c>
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b04      	cmp	r3, #4
 800430a:	d11f      	bne.n	800434c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800430c:	4b4f      	ldr	r3, [pc, #316]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_OscConfig+0x154>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e25d      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	4b49      	ldr	r3, [pc, #292]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	4946      	ldr	r1, [pc, #280]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004334:	4313      	orrs	r3, r2
 8004336:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004338:	4b45      	ldr	r3, [pc, #276]	@ (8004450 <HAL_RCC_OscConfig+0x280>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fd fe61 	bl	8002004 <HAL_InitTick>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d043      	beq.n	80043d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e249      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d023      	beq.n	800439c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004354:	4b3d      	ldr	r3, [pc, #244]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a3c      	ldr	r2, [pc, #240]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 800435a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800435e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fe f9e8 	bl	8002734 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004368:	f7fe f9e4 	bl	8002734 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e232      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800437a:	4b34      	ldr	r3, [pc, #208]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004386:	4b31      	ldr	r3, [pc, #196]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	061b      	lsls	r3, r3, #24
 8004394:	492d      	ldr	r1, [pc, #180]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004396:	4313      	orrs	r3, r2
 8004398:	604b      	str	r3, [r1, #4]
 800439a:	e01a      	b.n	80043d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439c:	4b2b      	ldr	r3, [pc, #172]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2a      	ldr	r2, [pc, #168]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 80043a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fe f9c4 	bl	8002734 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b0:	f7fe f9c0 	bl	8002734 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e20e      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043c2:	4b22      	ldr	r3, [pc, #136]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x1e0>
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d041      	beq.n	8004462 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01c      	beq.n	8004420 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043e6:	4b19      	ldr	r3, [pc, #100]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 80043e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ec:	4a17      	ldr	r2, [pc, #92]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f6:	f7fe f99d 	bl	8002734 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fe:	f7fe f999 	bl	8002734 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e1e7      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004410:	4b0e      	ldr	r3, [pc, #56]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0ef      	beq.n	80043fe <HAL_RCC_OscConfig+0x22e>
 800441e:	e020      	b.n	8004462 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004420:	4b0a      	ldr	r3, [pc, #40]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004426:	4a09      	ldr	r2, [pc, #36]	@ (800444c <HAL_RCC_OscConfig+0x27c>)
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fe f980 	bl	8002734 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004436:	e00d      	b.n	8004454 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004438:	f7fe f97c 	bl	8002734 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d906      	bls.n	8004454 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e1ca      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000
 8004450:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004454:	4b8c      	ldr	r3, [pc, #560]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1ea      	bne.n	8004438 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80a6 	beq.w	80045bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004470:	2300      	movs	r3, #0
 8004472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004474:	4b84      	ldr	r3, [pc, #528]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_RCC_OscConfig+0x2b4>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x2b6>
 8004484:	2300      	movs	r3, #0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800448a:	4b7f      	ldr	r3, [pc, #508]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448e:	4a7e      	ldr	r2, [pc, #504]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004494:	6593      	str	r3, [r2, #88]	@ 0x58
 8004496:	4b7c      	ldr	r3, [pc, #496]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044a2:	2301      	movs	r3, #1
 80044a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a6:	4b79      	ldr	r3, [pc, #484]	@ (800468c <HAL_RCC_OscConfig+0x4bc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d118      	bne.n	80044e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044b2:	4b76      	ldr	r3, [pc, #472]	@ (800468c <HAL_RCC_OscConfig+0x4bc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a75      	ldr	r2, [pc, #468]	@ (800468c <HAL_RCC_OscConfig+0x4bc>)
 80044b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044be:	f7fe f939 	bl	8002734 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c6:	f7fe f935 	bl	8002734 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e183      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d8:	4b6c      	ldr	r3, [pc, #432]	@ (800468c <HAL_RCC_OscConfig+0x4bc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d108      	bne.n	80044fe <HAL_RCC_OscConfig+0x32e>
 80044ec:	4b66      	ldr	r3, [pc, #408]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f2:	4a65      	ldr	r2, [pc, #404]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044fc:	e024      	b.n	8004548 <HAL_RCC_OscConfig+0x378>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b05      	cmp	r3, #5
 8004504:	d110      	bne.n	8004528 <HAL_RCC_OscConfig+0x358>
 8004506:	4b60      	ldr	r3, [pc, #384]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450c:	4a5e      	ldr	r2, [pc, #376]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 800450e:	f043 0304 	orr.w	r3, r3, #4
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004516:	4b5c      	ldr	r3, [pc, #368]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451c:	4a5a      	ldr	r2, [pc, #360]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004526:	e00f      	b.n	8004548 <HAL_RCC_OscConfig+0x378>
 8004528:	4b57      	ldr	r3, [pc, #348]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452e:	4a56      	ldr	r2, [pc, #344]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004538:	4b53      	ldr	r3, [pc, #332]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453e:	4a52      	ldr	r2, [pc, #328]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004540:	f023 0304 	bic.w	r3, r3, #4
 8004544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d016      	beq.n	800457e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fe f8f0 	bl	8002734 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004556:	e00a      	b.n	800456e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004558:	f7fe f8ec 	bl	8002734 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e138      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800456e:	4b46      	ldr	r3, [pc, #280]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ed      	beq.n	8004558 <HAL_RCC_OscConfig+0x388>
 800457c:	e015      	b.n	80045aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457e:	f7fe f8d9 	bl	8002734 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004584:	e00a      	b.n	800459c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fe f8d5 	bl	8002734 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e121      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800459c:	4b3a      	ldr	r3, [pc, #232]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ed      	bne.n	8004586 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045aa:	7ffb      	ldrb	r3, [r7, #31]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d105      	bne.n	80045bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b0:	4b35      	ldr	r3, [pc, #212]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 80045b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b4:	4a34      	ldr	r2, [pc, #208]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 80045b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d03c      	beq.n	8004642 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01c      	beq.n	800460a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 80045d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fe f8a8 	bl	8002734 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045e8:	f7fe f8a4 	bl	8002734 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0f2      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045fa:	4b23      	ldr	r3, [pc, #140]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 80045fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ef      	beq.n	80045e8 <HAL_RCC_OscConfig+0x418>
 8004608:	e01b      	b.n	8004642 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800460a:	4b1f      	ldr	r3, [pc, #124]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 800460c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004610:	4a1d      	ldr	r2, [pc, #116]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461a:	f7fe f88b 	bl	8002734 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004622:	f7fe f887 	bl	8002734 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e0d5      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004634:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004636:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ef      	bne.n	8004622 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80c9 	beq.w	80047de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800464c:	4b0e      	ldr	r3, [pc, #56]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b0c      	cmp	r3, #12
 8004656:	f000 8083 	beq.w	8004760 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d15e      	bne.n	8004720 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004662:	4b09      	ldr	r3, [pc, #36]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a08      	ldr	r2, [pc, #32]	@ (8004688 <HAL_RCC_OscConfig+0x4b8>)
 8004668:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800466c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fe f861 	bl	8002734 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004674:	e00c      	b.n	8004690 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004676:	f7fe f85d 	bl	8002734 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d905      	bls.n	8004690 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e0ab      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
 8004688:	40021000 	.word	0x40021000
 800468c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004690:	4b55      	ldr	r3, [pc, #340]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1ec      	bne.n	8004676 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800469c:	4b52      	ldr	r3, [pc, #328]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	4b52      	ldr	r3, [pc, #328]	@ (80047ec <HAL_RCC_OscConfig+0x61c>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6a11      	ldr	r1, [r2, #32]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046ac:	3a01      	subs	r2, #1
 80046ae:	0112      	lsls	r2, r2, #4
 80046b0:	4311      	orrs	r1, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046b6:	0212      	lsls	r2, r2, #8
 80046b8:	4311      	orrs	r1, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046be:	0852      	lsrs	r2, r2, #1
 80046c0:	3a01      	subs	r2, #1
 80046c2:	0552      	lsls	r2, r2, #21
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046ca:	0852      	lsrs	r2, r2, #1
 80046cc:	3a01      	subs	r2, #1
 80046ce:	0652      	lsls	r2, r2, #25
 80046d0:	4311      	orrs	r1, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046d6:	06d2      	lsls	r2, r2, #27
 80046d8:	430a      	orrs	r2, r1
 80046da:	4943      	ldr	r1, [pc, #268]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e0:	4b41      	ldr	r3, [pc, #260]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a40      	ldr	r2, [pc, #256]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 80046e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046ec:	4b3e      	ldr	r3, [pc, #248]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4a3d      	ldr	r2, [pc, #244]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 80046f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fe f81c 	bl	8002734 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004700:	f7fe f818 	bl	8002734 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e066      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004712:	4b35      	ldr	r3, [pc, #212]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x530>
 800471e:	e05e      	b.n	80047de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004720:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a30      	ldr	r2, [pc, #192]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 8004726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800472a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fe f802 	bl	8002734 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004734:	f7fd fffe 	bl	8002734 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e04c      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004746:	4b28      	ldr	r3, [pc, #160]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004752:	4b25      	ldr	r3, [pc, #148]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	4924      	ldr	r1, [pc, #144]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 8004758:	4b25      	ldr	r3, [pc, #148]	@ (80047f0 <HAL_RCC_OscConfig+0x620>)
 800475a:	4013      	ands	r3, r2
 800475c:	60cb      	str	r3, [r1, #12]
 800475e:	e03e      	b.n	80047de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e039      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800476c:	4b1e      	ldr	r3, [pc, #120]	@ (80047e8 <HAL_RCC_OscConfig+0x618>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 0203 	and.w	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	429a      	cmp	r2, r3
 800477e:	d12c      	bne.n	80047da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	3b01      	subs	r3, #1
 800478c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d123      	bne.n	80047da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d11b      	bne.n	80047da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d113      	bne.n	80047da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	3b01      	subs	r3, #1
 80047c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d109      	bne.n	80047da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	3b01      	subs	r3, #1
 80047d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d001      	beq.n	80047de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40021000 	.word	0x40021000
 80047ec:	019f800c 	.word	0x019f800c
 80047f0:	feeefffc 	.word	0xfeeefffc

080047f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e11e      	b.n	8004a4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b91      	ldr	r3, [pc, #580]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d910      	bls.n	800483c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b8e      	ldr	r3, [pc, #568]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 020f 	bic.w	r2, r3, #15
 8004822:	498c      	ldr	r1, [pc, #560]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b8a      	ldr	r3, [pc, #552]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e106      	b.n	8004a4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d073      	beq.n	8004930 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d129      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004850:	4b81      	ldr	r3, [pc, #516]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0f4      	b.n	8004a4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004860:	f000 f9d0 	bl	8004c04 <RCC_GetSysClockFreqFromPLLSource>
 8004864:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4a7c      	ldr	r2, [pc, #496]	@ (8004a5c <HAL_RCC_ClockConfig+0x268>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d93f      	bls.n	80048ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800486e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004882:	2b00      	cmp	r3, #0
 8004884:	d033      	beq.n	80048ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800488a:	2b00      	cmp	r3, #0
 800488c:	d12f      	bne.n	80048ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800488e:	4b72      	ldr	r3, [pc, #456]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004896:	4a70      	ldr	r2, [pc, #448]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 8004898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800489e:	2380      	movs	r3, #128	@ 0x80
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e024      	b.n	80048ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d107      	bne.n	80048bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0c6      	b.n	8004a4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048bc:	4b66      	ldr	r3, [pc, #408]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0be      	b.n	8004a4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048cc:	f000 f8ce 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4a61      	ldr	r2, [pc, #388]	@ (8004a5c <HAL_RCC_ClockConfig+0x268>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d909      	bls.n	80048ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048da:	4b5f      	ldr	r3, [pc, #380]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 80048e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048ea:	2380      	movs	r3, #128	@ 0x80
 80048ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ee:	4b5a      	ldr	r3, [pc, #360]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 0203 	bic.w	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4957      	ldr	r1, [pc, #348]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004900:	f7fd ff18 	bl	8002734 <HAL_GetTick>
 8004904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	e00a      	b.n	800491e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004908:	f7fd ff14 	bl	8002734 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e095      	b.n	8004a4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 020c 	and.w	r2, r3, #12
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	429a      	cmp	r2, r3
 800492e:	d1eb      	bne.n	8004908 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d023      	beq.n	8004984 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004948:	4b43      	ldr	r3, [pc, #268]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4a42      	ldr	r2, [pc, #264]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 800494e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004952:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004960:	4b3d      	ldr	r3, [pc, #244]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004968:	4a3b      	ldr	r2, [pc, #236]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 800496a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800496e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004970:	4b39      	ldr	r3, [pc, #228]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4936      	ldr	r1, [pc, #216]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
 8004982:	e008      	b.n	8004996 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b80      	cmp	r3, #128	@ 0x80
 8004988:	d105      	bne.n	8004996 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800498a:	4b33      	ldr	r3, [pc, #204]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	4a32      	ldr	r2, [pc, #200]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 8004990:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004994:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004996:	4b2f      	ldr	r3, [pc, #188]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d21d      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 020f 	bic.w	r2, r3, #15
 80049ac:	4929      	ldr	r1, [pc, #164]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049b4:	f7fd febe 	bl	8002734 <HAL_GetTick>
 80049b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049bc:	f7fd feba 	bl	8002734 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e03b      	b.n	8004a4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b20      	ldr	r3, [pc, #128]	@ (8004a54 <HAL_RCC_ClockConfig+0x260>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d1ed      	bne.n	80049bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4917      	ldr	r1, [pc, #92]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a0a:	4b13      	ldr	r3, [pc, #76]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	490f      	ldr	r1, [pc, #60]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a1e:	f000 f825 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <HAL_RCC_ClockConfig+0x264>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	490c      	ldr	r1, [pc, #48]	@ (8004a60 <HAL_RCC_ClockConfig+0x26c>)
 8004a30:	5ccb      	ldrb	r3, [r1, r3]
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a64 <HAL_RCC_ClockConfig+0x270>)
 8004a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a68 <HAL_RCC_ClockConfig+0x274>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd fade 	bl	8002004 <HAL_InitTick>
 8004a48:	4603      	mov	r3, r0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40022000 	.word	0x40022000
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	04c4b400 	.word	0x04c4b400
 8004a60:	0801a884 	.word	0x0801a884
 8004a64:	20000004 	.word	0x20000004
 8004a68:	20000008 	.word	0x20000008

08004a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a72:	4b2c      	ldr	r3, [pc, #176]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d102      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	e047      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a84:	4b27      	ldr	r3, [pc, #156]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 030c 	and.w	r3, r3, #12
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a90:	4b26      	ldr	r3, [pc, #152]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	e03e      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a96:	4b23      	ldr	r3, [pc, #140]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	2b0c      	cmp	r3, #12
 8004aa0:	d136      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aa2:	4b20      	ldr	r3, [pc, #128]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aac:	4b1d      	ldr	r3, [pc, #116]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d10c      	bne.n	8004ada <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	4a16      	ldr	r2, [pc, #88]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aca:	68d2      	ldr	r2, [r2, #12]
 8004acc:	0a12      	lsrs	r2, r2, #8
 8004ace:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	617b      	str	r3, [r7, #20]
      break;
 8004ad8:	e00c      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ada:	4a13      	ldr	r2, [pc, #76]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	4a10      	ldr	r2, [pc, #64]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae4:	68d2      	ldr	r2, [r2, #12]
 8004ae6:	0a12      	lsrs	r2, r2, #8
 8004ae8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004aec:	fb02 f303 	mul.w	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]
      break;
 8004af2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004af4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	0e5b      	lsrs	r3, r3, #25
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	3301      	adds	r3, #1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	e001      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b14:	693b      	ldr	r3, [r7, #16]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000
 8004b28:	00f42400 	.word	0x00f42400
 8004b2c:	016e3600 	.word	0x016e3600

08004b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b34:	4b03      	ldr	r3, [pc, #12]	@ (8004b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000004 	.word	0x20000004

08004b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b4c:	f7ff fff0 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	0a1b      	lsrs	r3, r3, #8
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4904      	ldr	r1, [pc, #16]	@ (8004b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	0801a894 	.word	0x0801a894

08004b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b78:	f7ff ffda 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	0adb      	lsrs	r3, r3, #11
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	4904      	ldr	r1, [pc, #16]	@ (8004b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b8a:	5ccb      	ldrb	r3, [r1, r3]
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	0801a894 	.word	0x0801a894

08004ba0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	220f      	movs	r2, #15
 8004bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004bb0:	4b12      	ldr	r3, [pc, #72]	@ (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0203 	and.w	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004bd4:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004be2:	4b07      	ldr	r3, [pc, #28]	@ (8004c00 <HAL_RCC_GetClockConfig+0x60>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 020f 	and.w	r2, r3, #15
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	601a      	str	r2, [r3, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40022000 	.word	0x40022000

08004c04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c14:	4b1b      	ldr	r3, [pc, #108]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d10c      	bne.n	8004c42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c28:	4a17      	ldr	r2, [pc, #92]	@ (8004c88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	4a14      	ldr	r2, [pc, #80]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c32:	68d2      	ldr	r2, [r2, #12]
 8004c34:	0a12      	lsrs	r2, r2, #8
 8004c36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	617b      	str	r3, [r7, #20]
    break;
 8004c40:	e00c      	b.n	8004c5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c42:	4a12      	ldr	r2, [pc, #72]	@ (8004c8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c4c:	68d2      	ldr	r2, [r2, #12]
 8004c4e:	0a12      	lsrs	r2, r2, #8
 8004c50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c54:	fb02 f303 	mul.w	r3, r2, r3
 8004c58:	617b      	str	r3, [r7, #20]
    break;
 8004c5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c5c:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	0e5b      	lsrs	r3, r3, #25
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	3301      	adds	r3, #1
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c76:	687b      	ldr	r3, [r7, #4]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40021000 	.word	0x40021000
 8004c88:	016e3600 	.word	0x016e3600
 8004c8c:	00f42400 	.word	0x00f42400

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c98:	2300      	movs	r3, #0
 8004c9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8098 	beq.w	8004dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb2:	4b43      	ldr	r3, [pc, #268]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10d      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbe:	4b40      	ldr	r3, [pc, #256]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc2:	4a3f      	ldr	r2, [pc, #252]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cca:	4b3d      	ldr	r3, [pc, #244]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cda:	4b3a      	ldr	r3, [pc, #232]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a39      	ldr	r2, [pc, #228]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ce6:	f7fd fd25 	bl	8002734 <HAL_GetTick>
 8004cea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cec:	e009      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cee:	f7fd fd21 	bl	8002734 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d902      	bls.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	74fb      	strb	r3, [r7, #19]
        break;
 8004d00:	e005      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d02:	4b30      	ldr	r3, [pc, #192]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0ef      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d0e:	7cfb      	ldrb	r3, [r7, #19]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d159      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d14:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01e      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d019      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d30:	4b23      	ldr	r3, [pc, #140]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d3c:	4b20      	ldr	r3, [pc, #128]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d52:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d5c:	4a18      	ldr	r2, [pc, #96]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d016      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7fd fce1 	bl	8002734 <HAL_GetTick>
 8004d72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d74:	e00b      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d76:	f7fd fcdd 	bl	8002734 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d902      	bls.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	74fb      	strb	r3, [r7, #19]
            break;
 8004d8c:	e006      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ec      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004da2:	4b07      	ldr	r3, [pc, #28]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db0:	4903      	ldr	r1, [pc, #12]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004db8:	e008      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dba:	7cfb      	ldrb	r3, [r7, #19]
 8004dbc:	74bb      	strb	r3, [r7, #18]
 8004dbe:	e005      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dcc:	7c7b      	ldrb	r3, [r7, #17]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d105      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd2:	4ba7      	ldr	r3, [pc, #668]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd6:	4aa6      	ldr	r2, [pc, #664]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dea:	4ba1      	ldr	r3, [pc, #644]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df0:	f023 0203 	bic.w	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	499d      	ldr	r1, [pc, #628]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e0c:	4b98      	ldr	r3, [pc, #608]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e12:	f023 020c 	bic.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	4995      	ldr	r1, [pc, #596]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e2e:	4b90      	ldr	r3, [pc, #576]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	498c      	ldr	r1, [pc, #560]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e50:	4b87      	ldr	r3, [pc, #540]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	4984      	ldr	r1, [pc, #528]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e72:	4b7f      	ldr	r3, [pc, #508]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	497b      	ldr	r1, [pc, #492]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e94:	4b76      	ldr	r3, [pc, #472]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	4973      	ldr	r1, [pc, #460]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	496a      	ldr	r1, [pc, #424]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ed8:	4b65      	ldr	r3, [pc, #404]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ede:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	4962      	ldr	r1, [pc, #392]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004efa:	4b5d      	ldr	r3, [pc, #372]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	4959      	ldr	r1, [pc, #356]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f1c:	4b54      	ldr	r3, [pc, #336]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f22:	f023 0203 	bic.w	r2, r3, #3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2a:	4951      	ldr	r1, [pc, #324]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	4948      	ldr	r1, [pc, #288]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d015      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f60:	4b43      	ldr	r3, [pc, #268]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	4940      	ldr	r1, [pc, #256]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f80:	4b3b      	ldr	r3, [pc, #236]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4a3a      	ldr	r2, [pc, #232]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f8a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d015      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f98:	4b35      	ldr	r3, [pc, #212]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa6:	4932      	ldr	r1, [pc, #200]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fb6:	d105      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fc2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d015      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fd0:	4b27      	ldr	r3, [pc, #156]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fde:	4924      	ldr	r1, [pc, #144]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fee:	d105      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ffa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d015      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005008:	4b19      	ldr	r3, [pc, #100]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005016:	4916      	ldr	r1, [pc, #88]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005022:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005026:	d105      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005028:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a10      	ldr	r2, [pc, #64]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005032:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d019      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005040:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005046:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	4908      	ldr	r1, [pc, #32]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800505e:	d109      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005060:	4b03      	ldr	r3, [pc, #12]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4a02      	ldr	r2, [pc, #8]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800506a:	60d3      	str	r3, [r2, #12]
 800506c:	e002      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d015      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005080:	4b29      	ldr	r3, [pc, #164]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005086:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508e:	4926      	ldr	r1, [pc, #152]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800509e:	d105      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050a0:	4b21      	ldr	r3, [pc, #132]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4a20      	ldr	r2, [pc, #128]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050aa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80050b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050be:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c6:	4918      	ldr	r1, [pc, #96]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d6:	d105      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050d8:	4b13      	ldr	r3, [pc, #76]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4a12      	ldr	r2, [pc, #72]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d015      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fe:	490a      	ldr	r1, [pc, #40]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800510a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800510e:	d105      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005110:	4b05      	ldr	r3, [pc, #20]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a04      	ldr	r2, [pc, #16]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800511a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800511c:	7cbb      	ldrb	r3, [r7, #18]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000

0800512c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e049      	b.n	80051d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f841 	bl	80051da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3304      	adds	r3, #4
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f000 fa30 	bl	80055d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d001      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e054      	b.n	80052b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a26      	ldr	r2, [pc, #152]	@ (80052c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d022      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x80>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005232:	d01d      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x80>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a22      	ldr	r2, [pc, #136]	@ (80052c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d018      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x80>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a21      	ldr	r2, [pc, #132]	@ (80052c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d013      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x80>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1f      	ldr	r2, [pc, #124]	@ (80052cc <HAL_TIM_Base_Start_IT+0xdc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00e      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x80>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1e      	ldr	r2, [pc, #120]	@ (80052d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d009      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1c      	ldr	r2, [pc, #112]	@ (80052d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x80>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1b      	ldr	r2, [pc, #108]	@ (80052d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d115      	bne.n	800529c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	4b19      	ldr	r3, [pc, #100]	@ (80052dc <HAL_TIM_Base_Start_IT+0xec>)
 8005278:	4013      	ands	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b06      	cmp	r3, #6
 8005280:	d015      	beq.n	80052ae <HAL_TIM_Base_Start_IT+0xbe>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005288:	d011      	beq.n	80052ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0201 	orr.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529a:	e008      	b.n	80052ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	e000      	b.n	80052b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40013400 	.word	0x40013400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40015000 	.word	0x40015000
 80052dc:	00010007 	.word	0x00010007

080052e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d020      	beq.n	8005344 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0202 	mvn.w	r2, #2
 8005314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f931 	bl	8005592 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f923 	bl	800557e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f934 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d020      	beq.n	8005390 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01b      	beq.n	8005390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0204 	mvn.w	r2, #4
 8005360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f90b 	bl	8005592 <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8fd 	bl	800557e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f90e 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d020      	beq.n	80053dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01b      	beq.n	80053dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0208 	mvn.w	r2, #8
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2204      	movs	r2, #4
 80053b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f8e5 	bl	8005592 <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8d7 	bl	800557e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f8e8 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d020      	beq.n	8005428 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01b      	beq.n	8005428 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0210 	mvn.w	r2, #16
 80053f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2208      	movs	r2, #8
 80053fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f8bf 	bl	8005592 <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8b1 	bl	800557e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8c2 	bl	80055a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00c      	beq.n	800544c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0201 	mvn.w	r2, #1
 8005444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fc fc34 	bl	8001cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00c      	beq.n	800547a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f969 	bl	800574c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00c      	beq.n	800549e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f961 	bl	8005760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00c      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f87c 	bl	80055ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00c      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d007      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f06f 0220 	mvn.w	r2, #32
 80054de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f929 	bl	8005738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00c      	beq.n	800550a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f935 	bl	8005774 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00c      	beq.n	800552e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f92d 	bl	8005788 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00c      	beq.n	8005552 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800554a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f925 	bl	800579c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00c      	beq.n	8005576 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800556e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f91d 	bl	80057b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a4c      	ldr	r2, [pc, #304]	@ (8005714 <TIM_Base_SetConfig+0x144>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d017      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ee:	d013      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a49      	ldr	r2, [pc, #292]	@ (8005718 <TIM_Base_SetConfig+0x148>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00f      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a48      	ldr	r2, [pc, #288]	@ (800571c <TIM_Base_SetConfig+0x14c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00b      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a47      	ldr	r2, [pc, #284]	@ (8005720 <TIM_Base_SetConfig+0x150>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a46      	ldr	r2, [pc, #280]	@ (8005724 <TIM_Base_SetConfig+0x154>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a45      	ldr	r2, [pc, #276]	@ (8005728 <TIM_Base_SetConfig+0x158>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d108      	bne.n	800562a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a39      	ldr	r2, [pc, #228]	@ (8005714 <TIM_Base_SetConfig+0x144>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d023      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005638:	d01f      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a36      	ldr	r2, [pc, #216]	@ (8005718 <TIM_Base_SetConfig+0x148>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d01b      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a35      	ldr	r2, [pc, #212]	@ (800571c <TIM_Base_SetConfig+0x14c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d017      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a34      	ldr	r2, [pc, #208]	@ (8005720 <TIM_Base_SetConfig+0x150>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a33      	ldr	r2, [pc, #204]	@ (8005724 <TIM_Base_SetConfig+0x154>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00f      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a33      	ldr	r2, [pc, #204]	@ (800572c <TIM_Base_SetConfig+0x15c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a32      	ldr	r2, [pc, #200]	@ (8005730 <TIM_Base_SetConfig+0x160>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a31      	ldr	r2, [pc, #196]	@ (8005734 <TIM_Base_SetConfig+0x164>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a2c      	ldr	r2, [pc, #176]	@ (8005728 <TIM_Base_SetConfig+0x158>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d108      	bne.n	800568c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a18      	ldr	r2, [pc, #96]	@ (8005714 <TIM_Base_SetConfig+0x144>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <TIM_Base_SetConfig+0x110>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005724 <TIM_Base_SetConfig+0x154>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00f      	beq.n	80056e0 <TIM_Base_SetConfig+0x110>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a1a      	ldr	r2, [pc, #104]	@ (800572c <TIM_Base_SetConfig+0x15c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <TIM_Base_SetConfig+0x110>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a19      	ldr	r2, [pc, #100]	@ (8005730 <TIM_Base_SetConfig+0x160>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_Base_SetConfig+0x110>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a18      	ldr	r2, [pc, #96]	@ (8005734 <TIM_Base_SetConfig+0x164>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_Base_SetConfig+0x110>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a13      	ldr	r2, [pc, #76]	@ (8005728 <TIM_Base_SetConfig+0x158>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d103      	bne.n	80056e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d105      	bne.n	8005706 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	611a      	str	r2, [r3, #16]
  }
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800
 8005720:	40000c00 	.word	0x40000c00
 8005724:	40013400 	.word	0x40013400
 8005728:	40015000 	.word	0x40015000
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800

08005738 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e042      	b.n	800585c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7fc fde5 	bl	80023b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2224      	movs	r2, #36	@ 0x24
 80057f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f001 f806 	bl	8006820 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fd07 	bl	8006228 <UART_SetConfig>
 800581a:	4603      	mov	r3, r0
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e01b      	b.n	800585c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 f885 	bl	8006964 <UART_CheckIdleState>
 800585a:	4603      	mov	r3, r0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	@ 0x28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005878:	2b20      	cmp	r3, #32
 800587a:	d167      	bne.n	800594c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_UART_Transmit_DMA+0x24>
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e060      	b.n	800594e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	88fa      	ldrh	r2, [r7, #6]
 8005896:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2221      	movs	r2, #33	@ 0x21
 80058ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d028      	beq.n	800590c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058be:	4a26      	ldr	r2, [pc, #152]	@ (8005958 <HAL_UART_Transmit_DMA+0xf4>)
 80058c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058c6:	4a25      	ldr	r2, [pc, #148]	@ (800595c <HAL_UART_Transmit_DMA+0xf8>)
 80058c8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058ce:	4a24      	ldr	r2, [pc, #144]	@ (8005960 <HAL_UART_Transmit_DMA+0xfc>)
 80058d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058d6:	2200      	movs	r2, #0
 80058d8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e2:	4619      	mov	r1, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3328      	adds	r3, #40	@ 0x28
 80058ea:	461a      	mov	r2, r3
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	f7fd f8b5 	bl	8002a5c <HAL_DMA_Start_IT>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d009      	beq.n	800590c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2210      	movs	r2, #16
 80058fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e020      	b.n	800594e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2240      	movs	r2, #64	@ 0x40
 8005912:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3308      	adds	r3, #8
 800591a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	613b      	str	r3, [r7, #16]
   return(result);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3308      	adds	r3, #8
 8005932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005934:	623a      	str	r2, [r7, #32]
 8005936:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	69f9      	ldr	r1, [r7, #28]
 800593a:	6a3a      	ldr	r2, [r7, #32]
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	61bb      	str	r3, [r7, #24]
   return(result);
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e5      	bne.n	8005914 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	e000      	b.n	800594e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800594c:	2302      	movs	r3, #2
  }
}
 800594e:	4618      	mov	r0, r3
 8005950:	3728      	adds	r7, #40	@ 0x28
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	08006e2f 	.word	0x08006e2f
 800595c:	08006ec9 	.word	0x08006ec9
 8005960:	0800704f 	.word	0x0800704f

08005964 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	@ 0x28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005978:	2b20      	cmp	r3, #32
 800597a:	d137      	bne.n	80059ec <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <HAL_UART_Receive_DMA+0x24>
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e030      	b.n	80059ee <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a18      	ldr	r2, [pc, #96]	@ (80059f8 <HAL_UART_Receive_DMA+0x94>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d01f      	beq.n	80059dc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d018      	beq.n	80059dc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	613b      	str	r3, [r7, #16]
   return(result);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	623b      	str	r3, [r7, #32]
 80059ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	69f9      	ldr	r1, [r7, #28]
 80059ce:	6a3a      	ldr	r2, [r7, #32]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e6      	bne.n	80059aa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	461a      	mov	r2, r3
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f001 f8d6 	bl	8006b94 <UART_Start_Receive_DMA>
 80059e8:	4603      	mov	r3, r0
 80059ea:	e000      	b.n	80059ee <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
  }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3728      	adds	r7, #40	@ 0x28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40008000 	.word	0x40008000

080059fc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b090      	sub	sp, #64	@ 0x40
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1e:	2b80      	cmp	r3, #128	@ 0x80
 8005a20:	d139      	bne.n	8005a96 <HAL_UART_DMAStop+0x9a>
 8005a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a24:	2b21      	cmp	r3, #33	@ 0x21
 8005a26:	d136      	bne.n	8005a96 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e5      	bne.n	8005a28 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d015      	beq.n	8005a90 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fd f872 	bl	8002b52 <HAL_DMA_Abort>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00d      	beq.n	8005a90 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fd f9d9 	bl	8002e30 <HAL_DMA_GetError>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d105      	bne.n	8005a90 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2210      	movs	r2, #16
 8005a88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e047      	b.n	8005b20 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 f925 	bl	8006ce0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa0:	2b40      	cmp	r3, #64	@ 0x40
 8005aa2:	d13c      	bne.n	8005b1e <HAL_UART_DMAStop+0x122>
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa6:	2b22      	cmp	r3, #34	@ 0x22
 8005aa8:	d139      	bne.n	8005b1e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aca:	61ba      	str	r2, [r7, #24]
 8005acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6979      	ldr	r1, [r7, #20]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e5      	bne.n	8005aaa <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d017      	beq.n	8005b18 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fd f82f 	bl	8002b52 <HAL_DMA_Abort>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00e      	beq.n	8005b18 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fd f995 	bl	8002e30 <HAL_DMA_GetError>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d105      	bne.n	8005b18 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2210      	movs	r2, #16
 8005b10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e003      	b.n	8005b20 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 f922 	bl	8006d62 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3740      	adds	r7, #64	@ 0x40
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b0ba      	sub	sp, #232	@ 0xe8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b52:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b56:	4013      	ands	r3, r2
 8005b58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d11b      	bne.n	8005b9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d015      	beq.n	8005b9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d009      	beq.n	8005b9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8300 	beq.w	8006192 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
      }
      return;
 8005b9a:	e2fa      	b.n	8006192 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8123 	beq.w	8005dec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ba6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005baa:	4b8d      	ldr	r3, [pc, #564]	@ (8005de0 <HAL_UART_IRQHandler+0x2b8>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005bb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005bb6:	4b8b      	ldr	r3, [pc, #556]	@ (8005de4 <HAL_UART_IRQHandler+0x2bc>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 8116 	beq.w	8005dec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d011      	beq.n	8005bf0 <HAL_UART_IRQHandler+0xc8>
 8005bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be6:	f043 0201 	orr.w	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d011      	beq.n	8005c20 <HAL_UART_IRQHandler+0xf8>
 8005bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00b      	beq.n	8005c20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c16:	f043 0204 	orr.w	r2, r3, #4
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d011      	beq.n	8005c50 <HAL_UART_IRQHandler+0x128>
 8005c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00b      	beq.n	8005c50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c46:	f043 0202 	orr.w	r2, r3, #2
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d017      	beq.n	8005c8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8005de0 <HAL_UART_IRQHandler+0x2b8>)
 8005c6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2208      	movs	r2, #8
 8005c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c82:	f043 0208 	orr.w	r2, r3, #8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d012      	beq.n	8005cbe <HAL_UART_IRQHandler+0x196>
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00c      	beq.n	8005cbe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 8266 	beq.w	8006196 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d013      	beq.n	8005cfe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d12:	2b40      	cmp	r3, #64	@ 0x40
 8005d14:	d005      	beq.n	8005d22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d054      	beq.n	8005dcc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f001 f81d 	bl	8006d62 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d32:	2b40      	cmp	r3, #64	@ 0x40
 8005d34:	d146      	bne.n	8005dc4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1d9      	bne.n	8005d36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d017      	beq.n	8005dbc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d92:	4a15      	ldr	r2, [pc, #84]	@ (8005de8 <HAL_UART_IRQHandler+0x2c0>)
 8005d94:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fc ff31 	bl	8002c04 <HAL_DMA_Abort_IT>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d019      	beq.n	8005ddc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005db6:	4610      	mov	r0, r2
 8005db8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dba:	e00f      	b.n	8005ddc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fa1d 	bl	80061fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc2:	e00b      	b.n	8005ddc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fa19 	bl	80061fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dca:	e007      	b.n	8005ddc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fa15 	bl	80061fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005dda:	e1dc      	b.n	8006196 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	bf00      	nop
    return;
 8005dde:	e1da      	b.n	8006196 <HAL_UART_IRQHandler+0x66e>
 8005de0:	10000001 	.word	0x10000001
 8005de4:	04000120 	.word	0x04000120
 8005de8:	080070cf 	.word	0x080070cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	f040 8170 	bne.w	80060d6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dfa:	f003 0310 	and.w	r3, r3, #16
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8169 	beq.w	80060d6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8162 	beq.w	80060d6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2210      	movs	r2, #16
 8005e18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e24:	2b40      	cmp	r3, #64	@ 0x40
 8005e26:	f040 80d8 	bne.w	8005fda <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80af 	beq.w	8005fa0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	f080 80a7 	bcs.w	8005fa0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f040 8087 	bne.w	8005f7e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1da      	bne.n	8005e70 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005eca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ecc:	f023 0301 	bic.w	r3, r3, #1
 8005ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ede:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ee2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e1      	bne.n	8005eba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3308      	adds	r3, #8
 8005efc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e3      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f4c:	f023 0310 	bic.w	r3, r3, #16
 8005f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e4      	bne.n	8005f3c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fc fdea 	bl	8002b52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f939 	bl	8006210 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005f9e:	e0fc      	b.n	800619a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005faa:	429a      	cmp	r2, r3
 8005fac:	f040 80f5 	bne.w	800619a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	f040 80eb 	bne.w	800619a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f91c 	bl	8006210 <HAL_UARTEx_RxEventCallback>
      return;
 8005fd8:	e0df      	b.n	800619a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 80d1 	beq.w	800619e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80cc 	beq.w	800619e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800601a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006028:	647b      	str	r3, [r7, #68]	@ 0x44
 800602a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800602e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e4      	bne.n	8006006 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3308      	adds	r3, #8
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	623b      	str	r3, [r7, #32]
   return(result);
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006064:	633a      	str	r2, [r7, #48]	@ 0x30
 8006066:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800606a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e1      	bne.n	800603c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	60fb      	str	r3, [r7, #12]
   return(result);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f023 0310 	bic.w	r3, r3, #16
 80060a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	69b9      	ldr	r1, [r7, #24]
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	617b      	str	r3, [r7, #20]
   return(result);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e4      	bne.n	800608c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2202      	movs	r2, #2
 80060c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f89e 	bl	8006210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060d4:	e063      	b.n	800619e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00e      	beq.n	8006100 <HAL_UART_IRQHandler+0x5d8>
 80060e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80060f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 f825 	bl	8007148 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060fe:	e051      	b.n	80061a4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006108:	2b00      	cmp	r3, #0
 800610a:	d014      	beq.n	8006136 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800610c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006114:	2b00      	cmp	r3, #0
 8006116:	d105      	bne.n	8006124 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800611c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006128:	2b00      	cmp	r3, #0
 800612a:	d03a      	beq.n	80061a2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
    }
    return;
 8006134:	e035      	b.n	80061a2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <HAL_UART_IRQHandler+0x62e>
 8006142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 ffcf 	bl	80070f2 <UART_EndTransmit_IT>
    return;
 8006154:	e026      	b.n	80061a4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800615a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <HAL_UART_IRQHandler+0x64e>
 8006162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006166:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fffe 	bl	8007170 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006174:	e016      	b.n	80061a4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d010      	beq.n	80061a4 <HAL_UART_IRQHandler+0x67c>
 8006182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006186:	2b00      	cmp	r3, #0
 8006188:	da0c      	bge.n	80061a4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 ffe6 	bl	800715c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006190:	e008      	b.n	80061a4 <HAL_UART_IRQHandler+0x67c>
      return;
 8006192:	bf00      	nop
 8006194:	e006      	b.n	80061a4 <HAL_UART_IRQHandler+0x67c>
    return;
 8006196:	bf00      	nop
 8006198:	e004      	b.n	80061a4 <HAL_UART_IRQHandler+0x67c>
      return;
 800619a:	bf00      	nop
 800619c:	e002      	b.n	80061a4 <HAL_UART_IRQHandler+0x67c>
      return;
 800619e:	bf00      	nop
 80061a0:	e000      	b.n	80061a4 <HAL_UART_IRQHandler+0x67c>
    return;
 80061a2:	bf00      	nop
  }
}
 80061a4:	37e8      	adds	r7, #232	@ 0xe8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop

080061ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800622c:	b08c      	sub	sp, #48	@ 0x30
 800622e:	af00      	add	r7, sp, #0
 8006230:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	431a      	orrs	r2, r3
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	431a      	orrs	r2, r3
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	4313      	orrs	r3, r2
 800624e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	4baa      	ldr	r3, [pc, #680]	@ (8006500 <UART_SetConfig+0x2d8>)
 8006258:	4013      	ands	r3, r2
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	6812      	ldr	r2, [r2, #0]
 800625e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006260:	430b      	orrs	r3, r1
 8006262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a9f      	ldr	r2, [pc, #636]	@ (8006504 <UART_SetConfig+0x2dc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006290:	4313      	orrs	r3, r2
 8006292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800629e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	f023 010f 	bic.w	r1, r3, #15
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a90      	ldr	r2, [pc, #576]	@ (8006508 <UART_SetConfig+0x2e0>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d125      	bne.n	8006318 <UART_SetConfig+0xf0>
 80062cc:	4b8f      	ldr	r3, [pc, #572]	@ (800650c <UART_SetConfig+0x2e4>)
 80062ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d81a      	bhi.n	8006310 <UART_SetConfig+0xe8>
 80062da:	a201      	add	r2, pc, #4	@ (adr r2, 80062e0 <UART_SetConfig+0xb8>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	080062f1 	.word	0x080062f1
 80062e4:	08006301 	.word	0x08006301
 80062e8:	080062f9 	.word	0x080062f9
 80062ec:	08006309 	.word	0x08006309
 80062f0:	2301      	movs	r3, #1
 80062f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062f6:	e116      	b.n	8006526 <UART_SetConfig+0x2fe>
 80062f8:	2302      	movs	r3, #2
 80062fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062fe:	e112      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006300:	2304      	movs	r3, #4
 8006302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006306:	e10e      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006308:	2308      	movs	r3, #8
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630e:	e10a      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006310:	2310      	movs	r3, #16
 8006312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006316:	e106      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a7c      	ldr	r2, [pc, #496]	@ (8006510 <UART_SetConfig+0x2e8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d138      	bne.n	8006394 <UART_SetConfig+0x16c>
 8006322:	4b7a      	ldr	r3, [pc, #488]	@ (800650c <UART_SetConfig+0x2e4>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006328:	f003 030c 	and.w	r3, r3, #12
 800632c:	2b0c      	cmp	r3, #12
 800632e:	d82d      	bhi.n	800638c <UART_SetConfig+0x164>
 8006330:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <UART_SetConfig+0x110>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	0800636d 	.word	0x0800636d
 800633c:	0800638d 	.word	0x0800638d
 8006340:	0800638d 	.word	0x0800638d
 8006344:	0800638d 	.word	0x0800638d
 8006348:	0800637d 	.word	0x0800637d
 800634c:	0800638d 	.word	0x0800638d
 8006350:	0800638d 	.word	0x0800638d
 8006354:	0800638d 	.word	0x0800638d
 8006358:	08006375 	.word	0x08006375
 800635c:	0800638d 	.word	0x0800638d
 8006360:	0800638d 	.word	0x0800638d
 8006364:	0800638d 	.word	0x0800638d
 8006368:	08006385 	.word	0x08006385
 800636c:	2300      	movs	r3, #0
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006372:	e0d8      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006374:	2302      	movs	r3, #2
 8006376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800637a:	e0d4      	b.n	8006526 <UART_SetConfig+0x2fe>
 800637c:	2304      	movs	r3, #4
 800637e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006382:	e0d0      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006384:	2308      	movs	r3, #8
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800638a:	e0cc      	b.n	8006526 <UART_SetConfig+0x2fe>
 800638c:	2310      	movs	r3, #16
 800638e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006392:	e0c8      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a5e      	ldr	r2, [pc, #376]	@ (8006514 <UART_SetConfig+0x2ec>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d125      	bne.n	80063ea <UART_SetConfig+0x1c2>
 800639e:	4b5b      	ldr	r3, [pc, #364]	@ (800650c <UART_SetConfig+0x2e4>)
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063a8:	2b30      	cmp	r3, #48	@ 0x30
 80063aa:	d016      	beq.n	80063da <UART_SetConfig+0x1b2>
 80063ac:	2b30      	cmp	r3, #48	@ 0x30
 80063ae:	d818      	bhi.n	80063e2 <UART_SetConfig+0x1ba>
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d00a      	beq.n	80063ca <UART_SetConfig+0x1a2>
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d814      	bhi.n	80063e2 <UART_SetConfig+0x1ba>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <UART_SetConfig+0x19a>
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d008      	beq.n	80063d2 <UART_SetConfig+0x1aa>
 80063c0:	e00f      	b.n	80063e2 <UART_SetConfig+0x1ba>
 80063c2:	2300      	movs	r3, #0
 80063c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c8:	e0ad      	b.n	8006526 <UART_SetConfig+0x2fe>
 80063ca:	2302      	movs	r3, #2
 80063cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063d0:	e0a9      	b.n	8006526 <UART_SetConfig+0x2fe>
 80063d2:	2304      	movs	r3, #4
 80063d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063d8:	e0a5      	b.n	8006526 <UART_SetConfig+0x2fe>
 80063da:	2308      	movs	r3, #8
 80063dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063e0:	e0a1      	b.n	8006526 <UART_SetConfig+0x2fe>
 80063e2:	2310      	movs	r3, #16
 80063e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063e8:	e09d      	b.n	8006526 <UART_SetConfig+0x2fe>
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a4a      	ldr	r2, [pc, #296]	@ (8006518 <UART_SetConfig+0x2f0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d125      	bne.n	8006440 <UART_SetConfig+0x218>
 80063f4:	4b45      	ldr	r3, [pc, #276]	@ (800650c <UART_SetConfig+0x2e4>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006400:	d016      	beq.n	8006430 <UART_SetConfig+0x208>
 8006402:	2bc0      	cmp	r3, #192	@ 0xc0
 8006404:	d818      	bhi.n	8006438 <UART_SetConfig+0x210>
 8006406:	2b80      	cmp	r3, #128	@ 0x80
 8006408:	d00a      	beq.n	8006420 <UART_SetConfig+0x1f8>
 800640a:	2b80      	cmp	r3, #128	@ 0x80
 800640c:	d814      	bhi.n	8006438 <UART_SetConfig+0x210>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <UART_SetConfig+0x1f0>
 8006412:	2b40      	cmp	r3, #64	@ 0x40
 8006414:	d008      	beq.n	8006428 <UART_SetConfig+0x200>
 8006416:	e00f      	b.n	8006438 <UART_SetConfig+0x210>
 8006418:	2300      	movs	r3, #0
 800641a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800641e:	e082      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006420:	2302      	movs	r3, #2
 8006422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006426:	e07e      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006428:	2304      	movs	r3, #4
 800642a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800642e:	e07a      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006430:	2308      	movs	r3, #8
 8006432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006436:	e076      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006438:	2310      	movs	r3, #16
 800643a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800643e:	e072      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a35      	ldr	r2, [pc, #212]	@ (800651c <UART_SetConfig+0x2f4>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d12a      	bne.n	80064a0 <UART_SetConfig+0x278>
 800644a:	4b30      	ldr	r3, [pc, #192]	@ (800650c <UART_SetConfig+0x2e4>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006454:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006458:	d01a      	beq.n	8006490 <UART_SetConfig+0x268>
 800645a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800645e:	d81b      	bhi.n	8006498 <UART_SetConfig+0x270>
 8006460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006464:	d00c      	beq.n	8006480 <UART_SetConfig+0x258>
 8006466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800646a:	d815      	bhi.n	8006498 <UART_SetConfig+0x270>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <UART_SetConfig+0x250>
 8006470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006474:	d008      	beq.n	8006488 <UART_SetConfig+0x260>
 8006476:	e00f      	b.n	8006498 <UART_SetConfig+0x270>
 8006478:	2300      	movs	r3, #0
 800647a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800647e:	e052      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006480:	2302      	movs	r3, #2
 8006482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006486:	e04e      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006488:	2304      	movs	r3, #4
 800648a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800648e:	e04a      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006490:	2308      	movs	r3, #8
 8006492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006496:	e046      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006498:	2310      	movs	r3, #16
 800649a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800649e:	e042      	b.n	8006526 <UART_SetConfig+0x2fe>
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a17      	ldr	r2, [pc, #92]	@ (8006504 <UART_SetConfig+0x2dc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d13a      	bne.n	8006520 <UART_SetConfig+0x2f8>
 80064aa:	4b18      	ldr	r3, [pc, #96]	@ (800650c <UART_SetConfig+0x2e4>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80064b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064b8:	d01a      	beq.n	80064f0 <UART_SetConfig+0x2c8>
 80064ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064be:	d81b      	bhi.n	80064f8 <UART_SetConfig+0x2d0>
 80064c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064c4:	d00c      	beq.n	80064e0 <UART_SetConfig+0x2b8>
 80064c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ca:	d815      	bhi.n	80064f8 <UART_SetConfig+0x2d0>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <UART_SetConfig+0x2b0>
 80064d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d4:	d008      	beq.n	80064e8 <UART_SetConfig+0x2c0>
 80064d6:	e00f      	b.n	80064f8 <UART_SetConfig+0x2d0>
 80064d8:	2300      	movs	r3, #0
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064de:	e022      	b.n	8006526 <UART_SetConfig+0x2fe>
 80064e0:	2302      	movs	r3, #2
 80064e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064e6:	e01e      	b.n	8006526 <UART_SetConfig+0x2fe>
 80064e8:	2304      	movs	r3, #4
 80064ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ee:	e01a      	b.n	8006526 <UART_SetConfig+0x2fe>
 80064f0:	2308      	movs	r3, #8
 80064f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064f6:	e016      	b.n	8006526 <UART_SetConfig+0x2fe>
 80064f8:	2310      	movs	r3, #16
 80064fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064fe:	e012      	b.n	8006526 <UART_SetConfig+0x2fe>
 8006500:	cfff69f3 	.word	0xcfff69f3
 8006504:	40008000 	.word	0x40008000
 8006508:	40013800 	.word	0x40013800
 800650c:	40021000 	.word	0x40021000
 8006510:	40004400 	.word	0x40004400
 8006514:	40004800 	.word	0x40004800
 8006518:	40004c00 	.word	0x40004c00
 800651c:	40005000 	.word	0x40005000
 8006520:	2310      	movs	r3, #16
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4aae      	ldr	r2, [pc, #696]	@ (80067e4 <UART_SetConfig+0x5bc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	f040 8097 	bne.w	8006660 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006532:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006536:	2b08      	cmp	r3, #8
 8006538:	d823      	bhi.n	8006582 <UART_SetConfig+0x35a>
 800653a:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <UART_SetConfig+0x318>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	08006565 	.word	0x08006565
 8006544:	08006583 	.word	0x08006583
 8006548:	0800656d 	.word	0x0800656d
 800654c:	08006583 	.word	0x08006583
 8006550:	08006573 	.word	0x08006573
 8006554:	08006583 	.word	0x08006583
 8006558:	08006583 	.word	0x08006583
 800655c:	08006583 	.word	0x08006583
 8006560:	0800657b 	.word	0x0800657b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006564:	f7fe faf0 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8006568:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800656a:	e010      	b.n	800658e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800656c:	4b9e      	ldr	r3, [pc, #632]	@ (80067e8 <UART_SetConfig+0x5c0>)
 800656e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006570:	e00d      	b.n	800658e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006572:	f7fe fa7b 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8006576:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006578:	e009      	b.n	800658e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800657e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006580:	e005      	b.n	800658e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800658c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 8130 	beq.w	80067f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659a:	4a94      	ldr	r2, [pc, #592]	@ (80067ec <UART_SetConfig+0x5c4>)
 800659c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	4413      	add	r3, r2
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d305      	bcc.n	80065c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d903      	bls.n	80065ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065cc:	e113      	b.n	80067f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	2200      	movs	r2, #0
 80065d2:	60bb      	str	r3, [r7, #8]
 80065d4:	60fa      	str	r2, [r7, #12]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065da:	4a84      	ldr	r2, [pc, #528]	@ (80067ec <UART_SetConfig+0x5c4>)
 80065dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2200      	movs	r2, #0
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065f0:	f7fa fb3a 	bl	8000c68 <__aeabi_uldivmod>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4610      	mov	r0, r2
 80065fa:	4619      	mov	r1, r3
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	f04f 0300 	mov.w	r3, #0
 8006604:	020b      	lsls	r3, r1, #8
 8006606:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800660a:	0202      	lsls	r2, r0, #8
 800660c:	6979      	ldr	r1, [r7, #20]
 800660e:	6849      	ldr	r1, [r1, #4]
 8006610:	0849      	lsrs	r1, r1, #1
 8006612:	2000      	movs	r0, #0
 8006614:	460c      	mov	r4, r1
 8006616:	4605      	mov	r5, r0
 8006618:	eb12 0804 	adds.w	r8, r2, r4
 800661c:	eb43 0905 	adc.w	r9, r3, r5
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	469a      	mov	sl, r3
 8006628:	4693      	mov	fp, r2
 800662a:	4652      	mov	r2, sl
 800662c:	465b      	mov	r3, fp
 800662e:	4640      	mov	r0, r8
 8006630:	4649      	mov	r1, r9
 8006632:	f7fa fb19 	bl	8000c68 <__aeabi_uldivmod>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	4613      	mov	r3, r2
 800663c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006644:	d308      	bcc.n	8006658 <UART_SetConfig+0x430>
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800664c:	d204      	bcs.n	8006658 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	60da      	str	r2, [r3, #12]
 8006656:	e0ce      	b.n	80067f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800665e:	e0ca      	b.n	80067f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006668:	d166      	bne.n	8006738 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800666a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800666e:	2b08      	cmp	r3, #8
 8006670:	d827      	bhi.n	80066c2 <UART_SetConfig+0x49a>
 8006672:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <UART_SetConfig+0x450>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	0800669d 	.word	0x0800669d
 800667c:	080066a5 	.word	0x080066a5
 8006680:	080066ad 	.word	0x080066ad
 8006684:	080066c3 	.word	0x080066c3
 8006688:	080066b3 	.word	0x080066b3
 800668c:	080066c3 	.word	0x080066c3
 8006690:	080066c3 	.word	0x080066c3
 8006694:	080066c3 	.word	0x080066c3
 8006698:	080066bb 	.word	0x080066bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800669c:	f7fe fa54 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 80066a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066a2:	e014      	b.n	80066ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066a4:	f7fe fa66 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 80066a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066aa:	e010      	b.n	80066ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ac:	4b4e      	ldr	r3, [pc, #312]	@ (80067e8 <UART_SetConfig+0x5c0>)
 80066ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066b0:	e00d      	b.n	80066ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b2:	f7fe f9db 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 80066b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066b8:	e009      	b.n	80066ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066c0:	e005      	b.n	80066ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8090 	beq.w	80067f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066da:	4a44      	ldr	r2, [pc, #272]	@ (80067ec <UART_SetConfig+0x5c4>)
 80066dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066e0:	461a      	mov	r2, r3
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80066e8:	005a      	lsls	r2, r3, #1
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	441a      	add	r2, r3
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	2b0f      	cmp	r3, #15
 8006700:	d916      	bls.n	8006730 <UART_SetConfig+0x508>
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006708:	d212      	bcs.n	8006730 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f023 030f 	bic.w	r3, r3, #15
 8006712:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	085b      	lsrs	r3, r3, #1
 8006718:	b29b      	uxth	r3, r3
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	b29a      	uxth	r2, r3
 8006720:	8bfb      	ldrh	r3, [r7, #30]
 8006722:	4313      	orrs	r3, r2
 8006724:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	8bfa      	ldrh	r2, [r7, #30]
 800672c:	60da      	str	r2, [r3, #12]
 800672e:	e062      	b.n	80067f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006736:	e05e      	b.n	80067f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006738:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800673c:	2b08      	cmp	r3, #8
 800673e:	d828      	bhi.n	8006792 <UART_SetConfig+0x56a>
 8006740:	a201      	add	r2, pc, #4	@ (adr r2, 8006748 <UART_SetConfig+0x520>)
 8006742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	0800676d 	.word	0x0800676d
 800674c:	08006775 	.word	0x08006775
 8006750:	0800677d 	.word	0x0800677d
 8006754:	08006793 	.word	0x08006793
 8006758:	08006783 	.word	0x08006783
 800675c:	08006793 	.word	0x08006793
 8006760:	08006793 	.word	0x08006793
 8006764:	08006793 	.word	0x08006793
 8006768:	0800678b 	.word	0x0800678b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800676c:	f7fe f9ec 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8006770:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006772:	e014      	b.n	800679e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006774:	f7fe f9fe 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 8006778:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800677a:	e010      	b.n	800679e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800677c:	4b1a      	ldr	r3, [pc, #104]	@ (80067e8 <UART_SetConfig+0x5c0>)
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006780:	e00d      	b.n	800679e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006782:	f7fe f973 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8006786:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006788:	e009      	b.n	800679e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800678a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006790:	e005      	b.n	800679e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800679c:	bf00      	nop
    }

    if (pclk != 0U)
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d028      	beq.n	80067f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a8:	4a10      	ldr	r2, [pc, #64]	@ (80067ec <UART_SetConfig+0x5c4>)
 80067aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ae:	461a      	mov	r2, r3
 80067b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	441a      	add	r2, r3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	2b0f      	cmp	r3, #15
 80067cc:	d910      	bls.n	80067f0 <UART_SetConfig+0x5c8>
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d4:	d20c      	bcs.n	80067f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	b29a      	uxth	r2, r3
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60da      	str	r2, [r3, #12]
 80067e0:	e009      	b.n	80067f6 <UART_SetConfig+0x5ce>
 80067e2:	bf00      	nop
 80067e4:	40008000 	.word	0x40008000
 80067e8:	00f42400 	.word	0x00f42400
 80067ec:	0801a89c 	.word	0x0801a89c
      }
      else
      {
        ret = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2201      	movs	r2, #1
 8006802:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2200      	movs	r2, #0
 800680a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2200      	movs	r2, #0
 8006810:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006812:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006816:	4618      	mov	r0, r3
 8006818:	3730      	adds	r7, #48	@ 0x30
 800681a:	46bd      	mov	sp, r7
 800681c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01a      	beq.n	8006936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800691e:	d10a      	bne.n	8006936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	605a      	str	r2, [r3, #4]
  }
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b098      	sub	sp, #96	@ 0x60
 8006968:	af02      	add	r7, sp, #8
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006974:	f7fb fede 	bl	8002734 <HAL_GetTick>
 8006978:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b08      	cmp	r3, #8
 8006986:	d12f      	bne.n	80069e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006988:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006990:	2200      	movs	r2, #0
 8006992:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f88e 	bl	8006ab8 <UART_WaitOnFlagUntilTimeout>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d022      	beq.n	80069e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e6      	bne.n	80069a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e063      	b.n	8006ab0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d149      	bne.n	8006a8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069fe:	2200      	movs	r2, #0
 8006a00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f857 	bl	8006ab8 <UART_WaitOnFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d03c      	beq.n	8006a8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a30:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e6      	bne.n	8006a10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f023 0301 	bic.w	r3, r3, #1
 8006a58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3308      	adds	r3, #8
 8006a60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a62:	61fa      	str	r2, [r7, #28]
 8006a64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	69b9      	ldr	r1, [r7, #24]
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e5      	bne.n	8006a42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e012      	b.n	8006ab0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3758      	adds	r7, #88	@ 0x58
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac8:	e04f      	b.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ad0:	d04b      	beq.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad2:	f7fb fe2f 	bl	8002734 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d302      	bcc.n	8006ae8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e04e      	b.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0304 	and.w	r3, r3, #4
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d037      	beq.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b80      	cmp	r3, #128	@ 0x80
 8006afe:	d034      	beq.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b40      	cmp	r3, #64	@ 0x40
 8006b04:	d031      	beq.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d110      	bne.n	8006b36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2208      	movs	r2, #8
 8006b1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f920 	bl	8006d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2208      	movs	r2, #8
 8006b26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e029      	b.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b44:	d111      	bne.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 f906 	bl	8006d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e00f      	b.n	8006b8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4013      	ands	r3, r2
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	bf0c      	ite	eq
 8006b7a:	2301      	moveq	r3, #1
 8006b7c:	2300      	movne	r3, #0
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	79fb      	ldrb	r3, [r7, #7]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d0a0      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b096      	sub	sp, #88	@ 0x58
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	88fa      	ldrh	r2, [r7, #6]
 8006bac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2222      	movs	r2, #34	@ 0x22
 8006bbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d02d      	beq.n	8006c26 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bd0:	4a40      	ldr	r2, [pc, #256]	@ (8006cd4 <UART_Start_Receive_DMA+0x140>)
 8006bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bda:	4a3f      	ldr	r2, [pc, #252]	@ (8006cd8 <UART_Start_Receive_DMA+0x144>)
 8006bdc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006be4:	4a3d      	ldr	r2, [pc, #244]	@ (8006cdc <UART_Start_Receive_DMA+0x148>)
 8006be6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bee:	2200      	movs	r2, #0
 8006bf0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3324      	adds	r3, #36	@ 0x24
 8006bfe:	4619      	mov	r1, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c04:	461a      	mov	r2, r3
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	f7fb ff28 	bl	8002a5c <HAL_DMA_Start_IT>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2210      	movs	r2, #16
 8006c16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e051      	b.n	8006cca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d018      	beq.n	8006c60 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c42:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c4e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e6      	bne.n	8006c2e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3308      	adds	r3, #8
 8006c66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c80:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e5      	bne.n	8006c60 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cb4:	623a      	str	r2, [r7, #32]
 8006cb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	69f9      	ldr	r1, [r7, #28]
 8006cba:	6a3a      	ldr	r2, [r7, #32]
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e5      	bne.n	8006c94 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3758      	adds	r7, #88	@ 0x58
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	08006ee5 	.word	0x08006ee5
 8006cd8:	08007011 	.word	0x08007011
 8006cdc:	0800704f 	.word	0x0800704f

08006ce0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b08f      	sub	sp, #60	@ 0x3c
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d08:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e6      	bne.n	8006ce8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3308      	adds	r3, #8
 8006d20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3308      	adds	r3, #8
 8006d38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d3a:	61ba      	str	r2, [r7, #24]
 8006d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	6979      	ldr	r1, [r7, #20]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	613b      	str	r3, [r7, #16]
   return(result);
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e5      	bne.n	8006d1a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006d56:	bf00      	nop
 8006d58:	373c      	adds	r7, #60	@ 0x3c
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b095      	sub	sp, #84	@ 0x54
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d88:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e6      	bne.n	8006d6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3308      	adds	r3, #8
 8006da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006dc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e3      	bne.n	8006d9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d118      	bne.n	8006e0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f023 0310 	bic.w	r3, r3, #16
 8006df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6979      	ldr	r1, [r7, #20]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	613b      	str	r3, [r7, #16]
   return(result);
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e6      	bne.n	8006ddc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e22:	bf00      	nop
 8006e24:	3754      	adds	r7, #84	@ 0x54
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b090      	sub	sp, #64	@ 0x40
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d137      	bne.n	8006eba <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	623b      	str	r3, [r7, #32]
   return(result);
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e72:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e5      	bne.n	8006e52 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea4:	61fb      	str	r3, [r7, #28]
 8006ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	69b9      	ldr	r1, [r7, #24]
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e6      	bne.n	8006e86 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006eb8:	e002      	b.n	8006ec0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006eba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006ebc:	f7ff f976 	bl	80061ac <HAL_UART_TxCpltCallback>
}
 8006ec0:	bf00      	nop
 8006ec2:	3740      	adds	r7, #64	@ 0x40
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff f972 	bl	80061c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b09c      	sub	sp, #112	@ 0x70
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d171      	bne.n	8006fe4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e6      	bne.n	8006f08 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3308      	adds	r3, #8
 8006f40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f44:	e853 3f00 	ldrex	r3, [r3]
 8006f48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4c:	f023 0301 	bic.w	r3, r3, #1
 8006f50:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3308      	adds	r3, #8
 8006f58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f62:	e841 2300 	strex	r3, r2, [r1]
 8006f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1e5      	bne.n	8006f3a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3308      	adds	r3, #8
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f84:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e5      	bne.n	8006f6e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d118      	bne.n	8006fe4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0310 	bic.w	r3, r3, #16
 8006fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	69b9      	ldr	r1, [r7, #24]
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e6      	bne.n	8006fb2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d107      	bne.n	8007002 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ff4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ffc:	f7ff f908 	bl	8006210 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007000:	e002      	b.n	8007008 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007002:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007004:	f7ff f8e6 	bl	80061d4 <HAL_UART_RxCpltCallback>
}
 8007008:	bf00      	nop
 800700a:	3770      	adds	r7, #112	@ 0x70
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007028:	2b01      	cmp	r3, #1
 800702a:	d109      	bne.n	8007040 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	b29b      	uxth	r3, r3
 8007036:	4619      	mov	r1, r3
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f7ff f8e9 	bl	8006210 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800703e:	e002      	b.n	8007046 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f7ff f8d1 	bl	80061e8 <HAL_UART_RxHalfCpltCallback>
}
 8007046:	bf00      	nop
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b086      	sub	sp, #24
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007062:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800706a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007076:	2b80      	cmp	r3, #128	@ 0x80
 8007078:	d109      	bne.n	800708e <UART_DMAError+0x40>
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2b21      	cmp	r3, #33	@ 0x21
 800707e:	d106      	bne.n	800708e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2200      	movs	r2, #0
 8007084:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007088:	6978      	ldr	r0, [r7, #20]
 800708a:	f7ff fe29 	bl	8006ce0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007098:	2b40      	cmp	r3, #64	@ 0x40
 800709a:	d109      	bne.n	80070b0 <UART_DMAError+0x62>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b22      	cmp	r3, #34	@ 0x22
 80070a0:	d106      	bne.n	80070b0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80070aa:	6978      	ldr	r0, [r7, #20]
 80070ac:	f7ff fe59 	bl	8006d62 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b6:	f043 0210 	orr.w	r2, r3, #16
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070c0:	6978      	ldr	r0, [r7, #20]
 80070c2:	f7ff f89b 	bl	80061fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070c6:	bf00      	nop
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff f889 	bl	80061fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b088      	sub	sp, #32
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	60bb      	str	r3, [r7, #8]
   return(result);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800710e:	61fb      	str	r3, [r7, #28]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6979      	ldr	r1, [r7, #20]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	613b      	str	r3, [r7, #16]
   return(result);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e6      	bne.n	80070fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff f836 	bl	80061ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007140:	bf00      	nop
 8007142:	3720      	adds	r7, #32
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_UARTEx_DisableFifoMode+0x16>
 8007196:	2302      	movs	r3, #2
 8007198:	e027      	b.n	80071ea <HAL_UARTEx_DisableFifoMode+0x66>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2224      	movs	r2, #36	@ 0x24
 80071a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800720a:	2302      	movs	r3, #2
 800720c:	e02d      	b.n	800726a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2224      	movs	r2, #36	@ 0x24
 800721a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0201 	bic.w	r2, r2, #1
 8007234:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f850 	bl	80072f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007282:	2b01      	cmp	r3, #1
 8007284:	d101      	bne.n	800728a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007286:	2302      	movs	r3, #2
 8007288:	e02d      	b.n	80072e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2224      	movs	r2, #36	@ 0x24
 8007296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0201 	bic.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f812 	bl	80072f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d108      	bne.n	8007312 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007310:	e031      	b.n	8007376 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007312:	2308      	movs	r3, #8
 8007314:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007316:	2308      	movs	r3, #8
 8007318:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	0e5b      	lsrs	r3, r3, #25
 8007322:	b2db      	uxtb	r3, r3
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	0f5b      	lsrs	r3, r3, #29
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f003 0307 	and.w	r3, r3, #7
 8007338:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	7b3a      	ldrb	r2, [r7, #12]
 800733e:	4911      	ldr	r1, [pc, #68]	@ (8007384 <UARTEx_SetNbDataToProcess+0x94>)
 8007340:	5c8a      	ldrb	r2, [r1, r2]
 8007342:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007346:	7b3a      	ldrb	r2, [r7, #12]
 8007348:	490f      	ldr	r1, [pc, #60]	@ (8007388 <UARTEx_SetNbDataToProcess+0x98>)
 800734a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800734c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007350:	b29a      	uxth	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	7b7a      	ldrb	r2, [r7, #13]
 800735c:	4909      	ldr	r1, [pc, #36]	@ (8007384 <UARTEx_SetNbDataToProcess+0x94>)
 800735e:	5c8a      	ldrb	r2, [r1, r2]
 8007360:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007364:	7b7a      	ldrb	r2, [r7, #13]
 8007366:	4908      	ldr	r1, [pc, #32]	@ (8007388 <UARTEx_SetNbDataToProcess+0x98>)
 8007368:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800736a:	fb93 f3f2 	sdiv	r3, r3, r2
 800736e:	b29a      	uxth	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007376:	bf00      	nop
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	0801a8b4 	.word	0x0801a8b4
 8007388:	0801a8bc 	.word	0x0801a8bc

0800738c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af04      	add	r7, sp, #16
 8007392:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8007394:	2364      	movs	r3, #100	@ 0x64
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	2301      	movs	r3, #1
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	f107 030f 	add.w	r3, r7, #15
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	2301      	movs	r3, #1
 80073a4:	2275      	movs	r2, #117	@ 0x75
 80073a6:	21d0      	movs	r1, #208	@ 0xd0
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7fc f98b 	bl	80036c4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	2b68      	cmp	r3, #104	@ 0x68
 80073b2:	d13d      	bne.n	8007430 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80073b8:	2364      	movs	r3, #100	@ 0x64
 80073ba:	9302      	str	r3, [sp, #8]
 80073bc:	2301      	movs	r3, #1
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	f107 030e 	add.w	r3, r7, #14
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	2301      	movs	r3, #1
 80073c8:	226b      	movs	r2, #107	@ 0x6b
 80073ca:	21d0      	movs	r1, #208	@ 0xd0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7fc f865 	bl	800349c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80073d2:	2307      	movs	r3, #7
 80073d4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80073d6:	2364      	movs	r3, #100	@ 0x64
 80073d8:	9302      	str	r3, [sp, #8]
 80073da:	2301      	movs	r3, #1
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	f107 030e 	add.w	r3, r7, #14
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	2301      	movs	r3, #1
 80073e6:	2219      	movs	r2, #25
 80073e8:	21d0      	movs	r1, #208	@ 0xd0
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fc f856 	bl	800349c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80073f4:	2364      	movs	r3, #100	@ 0x64
 80073f6:	9302      	str	r3, [sp, #8]
 80073f8:	2301      	movs	r3, #1
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	f107 030e 	add.w	r3, r7, #14
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	2301      	movs	r3, #1
 8007404:	221c      	movs	r2, #28
 8007406:	21d0      	movs	r1, #208	@ 0xd0
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7fc f847 	bl	800349c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800740e:	2300      	movs	r3, #0
 8007410:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8007412:	2364      	movs	r3, #100	@ 0x64
 8007414:	9302      	str	r3, [sp, #8]
 8007416:	2301      	movs	r3, #1
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	f107 030e 	add.w	r3, r7, #14
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	2301      	movs	r3, #1
 8007422:	221b      	movs	r2, #27
 8007424:	21d0      	movs	r1, #208	@ 0xd0
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fc f838 	bl	800349c <HAL_I2C_Mem_Write>
        return 0;
 800742c:	2300      	movs	r3, #0
 800742e:	e000      	b.n	8007432 <MPU6050_Init+0xa6>
    }
    return 1;
 8007430:	2301      	movs	r3, #1
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	0000      	movs	r0, r0
 800743c:	0000      	movs	r0, r0
	...

08007440 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8007440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007444:	b094      	sub	sp, #80	@ 0x50
 8007446:	af04      	add	r7, sp, #16
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800744c:	2364      	movs	r3, #100	@ 0x64
 800744e:	9302      	str	r3, [sp, #8]
 8007450:	230e      	movs	r3, #14
 8007452:	9301      	str	r3, [sp, #4]
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	2301      	movs	r3, #1
 800745c:	223b      	movs	r2, #59	@ 0x3b
 800745e:	21d0      	movs	r1, #208	@ 0xd0
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7fc f92f 	bl	80036c4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8007466:	7a3b      	ldrb	r3, [r7, #8]
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	b21a      	sxth	r2, r3
 800746c:	7a7b      	ldrb	r3, [r7, #9]
 800746e:	b21b      	sxth	r3, r3
 8007470:	4313      	orrs	r3, r2
 8007472:	b21a      	sxth	r2, r3
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8007478:	7abb      	ldrb	r3, [r7, #10]
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	b21a      	sxth	r2, r3
 800747e:	7afb      	ldrb	r3, [r7, #11]
 8007480:	b21b      	sxth	r3, r3
 8007482:	4313      	orrs	r3, r2
 8007484:	b21a      	sxth	r2, r3
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800748a:	7b3b      	ldrb	r3, [r7, #12]
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	b21a      	sxth	r2, r3
 8007490:	7b7b      	ldrb	r3, [r7, #13]
 8007492:	b21b      	sxth	r3, r3
 8007494:	4313      	orrs	r3, r2
 8007496:	b21a      	sxth	r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	b21a      	sxth	r2, r3
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	b21b      	sxth	r3, r3
 80074a6:	4313      	orrs	r3, r2
 80074a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80074aa:	7c3b      	ldrb	r3, [r7, #16]
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	b21a      	sxth	r2, r3
 80074b0:	7c7b      	ldrb	r3, [r7, #17]
 80074b2:	b21b      	sxth	r3, r3
 80074b4:	4313      	orrs	r3, r2
 80074b6:	b21a      	sxth	r2, r3
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80074bc:	7cbb      	ldrb	r3, [r7, #18]
 80074be:	021b      	lsls	r3, r3, #8
 80074c0:	b21a      	sxth	r2, r3
 80074c2:	7cfb      	ldrb	r3, [r7, #19]
 80074c4:	b21b      	sxth	r3, r3
 80074c6:	4313      	orrs	r3, r2
 80074c8:	b21a      	sxth	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80074ce:	7d3b      	ldrb	r3, [r7, #20]
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	b21a      	sxth	r2, r3
 80074d4:	7d7b      	ldrb	r3, [r7, #21]
 80074d6:	b21b      	sxth	r3, r3
 80074d8:	4313      	orrs	r3, r2
 80074da:	b21a      	sxth	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7f9 f854 	bl	8000594 <__aeabi_i2d>
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	4bbd      	ldr	r3, [pc, #756]	@ (80077e8 <MPU6050_Read_All+0x3a8>)
 80074f2:	f7f9 f9e3 	bl	80008bc <__aeabi_ddiv>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007506:	4618      	mov	r0, r3
 8007508:	f7f9 f844 	bl	8000594 <__aeabi_i2d>
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	4bb5      	ldr	r3, [pc, #724]	@ (80077e8 <MPU6050_Read_All+0x3a8>)
 8007512:	f7f9 f9d3 	bl	80008bc <__aeabi_ddiv>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007526:	4618      	mov	r0, r3
 8007528:	f7f9 f834 	bl	8000594 <__aeabi_i2d>
 800752c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80077d0 <MPU6050_Read_All+0x390>)
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	f7f9 f9c3 	bl	80008bc <__aeabi_ddiv>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8007540:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007544:	ee07 3a90 	vmov	s15, r3
 8007548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800754c:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80077ec <MPU6050_Read_All+0x3ac>
 8007550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007554:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80077f0 <MPU6050_Read_All+0x3b0>
 8007558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007568:	4618      	mov	r0, r3
 800756a:	f7f9 f813 	bl	8000594 <__aeabi_i2d>
 800756e:	a39a      	add	r3, pc, #616	@ (adr r3, 80077d8 <MPU6050_Read_All+0x398>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f7f9 f9a2 	bl	80008bc <__aeabi_ddiv>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8007588:	4618      	mov	r0, r3
 800758a:	f7f9 f803 	bl	8000594 <__aeabi_i2d>
 800758e:	a392      	add	r3, pc, #584	@ (adr r3, 80077d8 <MPU6050_Read_All+0x398>)
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	f7f9 f992 	bl	80008bc <__aeabi_ddiv>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7f8 fff3 	bl	8000594 <__aeabi_i2d>
 80075ae:	a38a      	add	r3, pc, #552	@ (adr r3, 80077d8 <MPU6050_Read_All+0x398>)
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	f7f9 f982 	bl	80008bc <__aeabi_ddiv>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80075c2:	f7fb f8b7 	bl	8002734 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	4b8a      	ldr	r3, [pc, #552]	@ (80077f4 <MPU6050_Read_All+0x3b4>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7f8 ffd0 	bl	8000574 <__aeabi_ui2d>
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	4b87      	ldr	r3, [pc, #540]	@ (80077f8 <MPU6050_Read_All+0x3b8>)
 80075da:	f7f9 f96f 	bl	80008bc <__aeabi_ddiv>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80075e6:	f7fb f8a5 	bl	8002734 <HAL_GetTick>
 80075ea:	4603      	mov	r3, r0
 80075ec:	4a81      	ldr	r2, [pc, #516]	@ (80077f4 <MPU6050_Read_All+0x3b4>)
 80075ee:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075f6:	461a      	mov	r2, r3
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075fe:	fb03 f202 	mul.w	r2, r3, r2
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007608:	4619      	mov	r1, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007610:	fb01 f303 	mul.w	r3, r1, r3
 8007614:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8007616:	4618      	mov	r0, r3
 8007618:	f7f8 ffbc 	bl	8000594 <__aeabi_i2d>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	ec43 2b10 	vmov	d0, r2, r3
 8007624:	f012 fd32 	bl	801a08c <sqrt>
 8007628:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 800762c:	f04f 0200 	mov.w	r2, #0
 8007630:	f04f 0300 	mov.w	r3, #0
 8007634:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007638:	f7f9 fa7e 	bl	8000b38 <__aeabi_dcmpeq>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d11f      	bne.n	8007682 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007648:	4618      	mov	r0, r3
 800764a:	f7f8 ffa3 	bl	8000594 <__aeabi_i2d>
 800764e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007652:	f7f9 f933 	bl	80008bc <__aeabi_ddiv>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	ec43 2b17 	vmov	d7, r2, r3
 800765e:	eeb0 0a47 	vmov.f32	s0, s14
 8007662:	eef0 0a67 	vmov.f32	s1, s15
 8007666:	f012 fd3f 	bl	801a0e8 <atan>
 800766a:	ec51 0b10 	vmov	r0, r1, d0
 800766e:	a35c      	add	r3, pc, #368	@ (adr r3, 80077e0 <MPU6050_Read_All+0x3a0>)
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	f7f8 fff8 	bl	8000668 <__aeabi_dmul>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8007680:	e005      	b.n	800768e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007694:	425b      	negs	r3, r3
 8007696:	4618      	mov	r0, r3
 8007698:	f7f8 ff7c 	bl	8000594 <__aeabi_i2d>
 800769c:	4682      	mov	sl, r0
 800769e:	468b      	mov	fp, r1
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7f8 ff74 	bl	8000594 <__aeabi_i2d>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	ec43 2b11 	vmov	d1, r2, r3
 80076b4:	ec4b ab10 	vmov	d0, sl, fp
 80076b8:	f012 fce6 	bl	801a088 <atan2>
 80076bc:	ec51 0b10 	vmov	r0, r1, d0
 80076c0:	a347      	add	r3, pc, #284	@ (adr r3, 80077e0 <MPU6050_Read_All+0x3a0>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f7f8 ffcf 	bl	8000668 <__aeabi_dmul>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80076d2:	f04f 0200 	mov.w	r2, #0
 80076d6:	4b49      	ldr	r3, [pc, #292]	@ (80077fc <MPU6050_Read_All+0x3bc>)
 80076d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80076dc:	f7f9 fa36 	bl	8000b4c <__aeabi_dcmplt>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <MPU6050_Read_All+0x2bc>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80076ec:	f04f 0200 	mov.w	r2, #0
 80076f0:	4b43      	ldr	r3, [pc, #268]	@ (8007800 <MPU6050_Read_All+0x3c0>)
 80076f2:	f7f9 fa49 	bl	8000b88 <__aeabi_dcmpgt>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d114      	bne.n	8007726 <MPU6050_Read_All+0x2e6>
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	4b3f      	ldr	r3, [pc, #252]	@ (8007800 <MPU6050_Read_All+0x3c0>)
 8007702:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007706:	f7f9 fa3f 	bl	8000b88 <__aeabi_dcmpgt>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d015      	beq.n	800773c <MPU6050_Read_All+0x2fc>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	4b38      	ldr	r3, [pc, #224]	@ (80077fc <MPU6050_Read_All+0x3bc>)
 800771c:	f7f9 fa16 	bl	8000b4c <__aeabi_dcmplt>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8007726:	4937      	ldr	r1, [pc, #220]	@ (8007804 <MPU6050_Read_All+0x3c4>)
 8007728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800772c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007736:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800773a:	e014      	b.n	8007766 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8007742:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8007746:	eeb0 1a47 	vmov.f32	s2, s14
 800774a:	eef0 1a67 	vmov.f32	s3, s15
 800774e:	ed97 0b06 	vldr	d0, [r7, #24]
 8007752:	482c      	ldr	r0, [pc, #176]	@ (8007804 <MPU6050_Read_All+0x3c4>)
 8007754:	f000 f85a 	bl	800780c <Kalman_getAngle>
 8007758:	eeb0 7a40 	vmov.f32	s14, s0
 800775c:	eef0 7a60 	vmov.f32	s15, s1
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800776c:	4690      	mov	r8, r2
 800776e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8007772:	f04f 0200 	mov.w	r2, #0
 8007776:	4b22      	ldr	r3, [pc, #136]	@ (8007800 <MPU6050_Read_All+0x3c0>)
 8007778:	4640      	mov	r0, r8
 800777a:	4649      	mov	r1, r9
 800777c:	f7f9 fa04 	bl	8000b88 <__aeabi_dcmpgt>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d008      	beq.n	8007798 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800778c:	4614      	mov	r4, r2
 800778e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800779e:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80077a2:	eeb0 1a47 	vmov.f32	s2, s14
 80077a6:	eef0 1a67 	vmov.f32	s3, s15
 80077aa:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80077ae:	4816      	ldr	r0, [pc, #88]	@ (8007808 <MPU6050_Read_All+0x3c8>)
 80077b0:	f000 f82c 	bl	800780c <Kalman_getAngle>
 80077b4:	eeb0 7a40 	vmov.f32	s14, s0
 80077b8:	eef0 7a60 	vmov.f32	s15, s1
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 80077c2:	bf00      	nop
 80077c4:	3740      	adds	r7, #64	@ 0x40
 80077c6:	46bd      	mov	sp, r7
 80077c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077cc:	f3af 8000 	nop.w
 80077d0:	00000000 	.word	0x00000000
 80077d4:	40cc2900 	.word	0x40cc2900
 80077d8:	00000000 	.word	0x00000000
 80077dc:	40606000 	.word	0x40606000
 80077e0:	1a63c1f8 	.word	0x1a63c1f8
 80077e4:	404ca5dc 	.word	0x404ca5dc
 80077e8:	40d00000 	.word	0x40d00000
 80077ec:	43aa0000 	.word	0x43aa0000
 80077f0:	42121eb8 	.word	0x42121eb8
 80077f4:	20005154 	.word	0x20005154
 80077f8:	408f4000 	.word	0x408f4000
 80077fc:	c0568000 	.word	0xc0568000
 8007800:	40568000 	.word	0x40568000
 8007804:	20000058 	.word	0x20000058
 8007808:	20000010 	.word	0x20000010

0800780c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800780c:	b5b0      	push	{r4, r5, r7, lr}
 800780e:	b096      	sub	sp, #88	@ 0x58
 8007810:	af00      	add	r7, sp, #0
 8007812:	61f8      	str	r0, [r7, #28]
 8007814:	ed87 0b04 	vstr	d0, [r7, #16]
 8007818:	ed87 1b02 	vstr	d1, [r7, #8]
 800781c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800782a:	f7f8 fd65 	bl	80002f8 <__aeabi_dsub>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800783c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007844:	f7f8 ff10 	bl	8000668 <__aeabi_dmul>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	4620      	mov	r0, r4
 800784e:	4629      	mov	r1, r5
 8007850:	f7f8 fd54 	bl	80002fc <__adddf3>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	69f9      	ldr	r1, [r7, #28]
 800785a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800786a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800786e:	f7f8 fefb 	bl	8000668 <__aeabi_dmul>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4610      	mov	r0, r2
 8007878:	4619      	mov	r1, r3
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007880:	f7f8 fd3a 	bl	80002f8 <__aeabi_dsub>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	4610      	mov	r0, r2
 800788a:	4619      	mov	r1, r3
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007892:	f7f8 fd31 	bl	80002f8 <__aeabi_dsub>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4610      	mov	r0, r2
 800789c:	4619      	mov	r1, r3
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f7f8 fd2a 	bl	80002fc <__adddf3>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4610      	mov	r0, r2
 80078ae:	4619      	mov	r1, r3
 80078b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078b4:	f7f8 fed8 	bl	8000668 <__aeabi_dmul>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4620      	mov	r0, r4
 80078be:	4629      	mov	r1, r5
 80078c0:	f7f8 fd1c 	bl	80002fc <__adddf3>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	69f9      	ldr	r1, [r7, #28]
 80078ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80078da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078de:	f7f8 fec3 	bl	8000668 <__aeabi_dmul>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	4620      	mov	r0, r4
 80078e8:	4629      	mov	r1, r5
 80078ea:	f7f8 fd05 	bl	80002f8 <__aeabi_dsub>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	69f9      	ldr	r1, [r7, #28]
 80078f4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007908:	f7f8 feae 	bl	8000668 <__aeabi_dmul>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4620      	mov	r0, r4
 8007912:	4629      	mov	r1, r5
 8007914:	f7f8 fcf0 	bl	80002f8 <__aeabi_dsub>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	69f9      	ldr	r1, [r7, #28]
 800791e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800792e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007932:	f7f8 fe99 	bl	8000668 <__aeabi_dmul>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4620      	mov	r0, r4
 800793c:	4629      	mov	r1, r5
 800793e:	f7f8 fcdd 	bl	80002fc <__adddf3>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	69f9      	ldr	r1, [r7, #28]
 8007948:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007958:	f7f8 fcd0 	bl	80002fc <__adddf3>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800796a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800796e:	f7f8 ffa5 	bl	80008bc <__aeabi_ddiv>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007980:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007984:	f7f8 ff9a 	bl	80008bc <__aeabi_ddiv>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007996:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800799a:	f7f8 fcad 	bl	80002f8 <__aeabi_dsub>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80079ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80079b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079b4:	f7f8 fe58 	bl	8000668 <__aeabi_dmul>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4620      	mov	r0, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	f7f8 fc9c 	bl	80002fc <__adddf3>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	69f9      	ldr	r1, [r7, #28]
 80079ca:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80079d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80079d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079dc:	f7f8 fe44 	bl	8000668 <__aeabi_dmul>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4620      	mov	r0, r4
 80079e6:	4629      	mov	r1, r5
 80079e8:	f7f8 fc88 	bl	80002fc <__adddf3>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	69f9      	ldr	r1, [r7, #28]
 80079f2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80079fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007a06:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007a10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007a14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a18:	f7f8 fe26 	bl	8000668 <__aeabi_dmul>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4620      	mov	r0, r4
 8007a22:	4629      	mov	r1, r5
 8007a24:	f7f8 fc68 	bl	80002f8 <__aeabi_dsub>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	69f9      	ldr	r1, [r7, #28]
 8007a2e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8007a38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007a3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007a40:	f7f8 fe12 	bl	8000668 <__aeabi_dmul>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4620      	mov	r0, r4
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	f7f8 fc54 	bl	80002f8 <__aeabi_dsub>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	69f9      	ldr	r1, [r7, #28]
 8007a56:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8007a60:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a68:	f7f8 fdfe 	bl	8000668 <__aeabi_dmul>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4620      	mov	r0, r4
 8007a72:	4629      	mov	r1, r5
 8007a74:	f7f8 fc40 	bl	80002f8 <__aeabi_dsub>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	69f9      	ldr	r1, [r7, #28]
 8007a7e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007a88:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007a8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007a90:	f7f8 fdea 	bl	8000668 <__aeabi_dmul>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4620      	mov	r0, r4
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	f7f8 fc2c 	bl	80002f8 <__aeabi_dsub>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	69f9      	ldr	r1, [r7, #28]
 8007aa6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007ab0:	ec43 2b17 	vmov	d7, r2, r3
};
 8007ab4:	eeb0 0a47 	vmov.f32	s0, s14
 8007ab8:	eef0 0a67 	vmov.f32	s1, s15
 8007abc:	3758      	adds	r7, #88	@ 0x58
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007ac4 <__NVIC_SetPriority>:
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	6039      	str	r1, [r7, #0]
 8007ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	db0a      	blt.n	8007aee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	490c      	ldr	r1, [pc, #48]	@ (8007b10 <__NVIC_SetPriority+0x4c>)
 8007ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae2:	0112      	lsls	r2, r2, #4
 8007ae4:	b2d2      	uxtb	r2, r2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007aec:	e00a      	b.n	8007b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	4908      	ldr	r1, [pc, #32]	@ (8007b14 <__NVIC_SetPriority+0x50>)
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	f003 030f 	and.w	r3, r3, #15
 8007afa:	3b04      	subs	r3, #4
 8007afc:	0112      	lsls	r2, r2, #4
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	440b      	add	r3, r1
 8007b02:	761a      	strb	r2, [r3, #24]
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	e000e100 	.word	0xe000e100
 8007b14:	e000ed00 	.word	0xe000ed00

08007b18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b1c:	4b05      	ldr	r3, [pc, #20]	@ (8007b34 <SysTick_Handler+0x1c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b20:	f001 fd40 	bl	80095a4 <xTaskGetSchedulerState>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d001      	beq.n	8007b2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b2a:	f002 fb35 	bl	800a198 <xPortSysTickHandler>
  }
}
 8007b2e:	bf00      	nop
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	e000e010 	.word	0xe000e010

08007b38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	f06f 0004 	mvn.w	r0, #4
 8007b42:	f7ff ffbf 	bl	8007ac4 <__NVIC_SetPriority>
#endif
}
 8007b46:	bf00      	nop
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b52:	f3ef 8305 	mrs	r3, IPSR
 8007b56:	603b      	str	r3, [r7, #0]
  return(result);
 8007b58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b5e:	f06f 0305 	mvn.w	r3, #5
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	e00c      	b.n	8007b80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b66:	4b0a      	ldr	r3, [pc, #40]	@ (8007b90 <osKernelInitialize+0x44>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d105      	bne.n	8007b7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b6e:	4b08      	ldr	r3, [pc, #32]	@ (8007b90 <osKernelInitialize+0x44>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	607b      	str	r3, [r7, #4]
 8007b78:	e002      	b.n	8007b80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b80:	687b      	ldr	r3, [r7, #4]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	20005158 	.word	0x20005158

08007b94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b9a:	f3ef 8305 	mrs	r3, IPSR
 8007b9e:	603b      	str	r3, [r7, #0]
  return(result);
 8007ba0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <osKernelStart+0x1a>
    stat = osErrorISR;
 8007ba6:	f06f 0305 	mvn.w	r3, #5
 8007baa:	607b      	str	r3, [r7, #4]
 8007bac:	e010      	b.n	8007bd0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007bae:	4b0b      	ldr	r3, [pc, #44]	@ (8007bdc <osKernelStart+0x48>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d109      	bne.n	8007bca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007bb6:	f7ff ffbf 	bl	8007b38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bba:	4b08      	ldr	r3, [pc, #32]	@ (8007bdc <osKernelStart+0x48>)
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bc0:	f001 f87a 	bl	8008cb8 <vTaskStartScheduler>
      stat = osOK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	607b      	str	r3, [r7, #4]
 8007bc8:	e002      	b.n	8007bd0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007bca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bd0:	687b      	ldr	r3, [r7, #4]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20005158 	.word	0x20005158

08007be0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08e      	sub	sp, #56	@ 0x38
 8007be4:	af04      	add	r7, sp, #16
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007bec:	2300      	movs	r3, #0
 8007bee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bf0:	f3ef 8305 	mrs	r3, IPSR
 8007bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8007bf6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d17e      	bne.n	8007cfa <osThreadNew+0x11a>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d07b      	beq.n	8007cfa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c02:	2380      	movs	r3, #128	@ 0x80
 8007c04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c06:	2318      	movs	r3, #24
 8007c08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d045      	beq.n	8007ca6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <osThreadNew+0x48>
        name = attr->name;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d008      	beq.n	8007c4e <osThreadNew+0x6e>
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	2b38      	cmp	r3, #56	@ 0x38
 8007c40:	d805      	bhi.n	8007c4e <osThreadNew+0x6e>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <osThreadNew+0x72>
        return (NULL);
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e054      	b.n	8007cfc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	089b      	lsrs	r3, r3, #2
 8007c60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00e      	beq.n	8007c88 <osThreadNew+0xa8>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007c70:	d90a      	bls.n	8007c88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d006      	beq.n	8007c88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <osThreadNew+0xa8>
        mem = 1;
 8007c82:	2301      	movs	r3, #1
 8007c84:	61bb      	str	r3, [r7, #24]
 8007c86:	e010      	b.n	8007caa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10c      	bne.n	8007caa <osThreadNew+0xca>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d108      	bne.n	8007caa <osThreadNew+0xca>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d104      	bne.n	8007caa <osThreadNew+0xca>
          mem = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61bb      	str	r3, [r7, #24]
 8007ca4:	e001      	b.n	8007caa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d110      	bne.n	8007cd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cb8:	9202      	str	r2, [sp, #8]
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6a3a      	ldr	r2, [r7, #32]
 8007cc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fe1a 	bl	8008900 <xTaskCreateStatic>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	613b      	str	r3, [r7, #16]
 8007cd0:	e013      	b.n	8007cfa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d110      	bne.n	8007cfa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	f107 0310 	add.w	r3, r7, #16
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 fe68 	bl	80089c0 <xTaskCreate>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d001      	beq.n	8007cfa <osThreadNew+0x11a>
            hTask = NULL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007cfa:	693b      	ldr	r3, [r7, #16]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3728      	adds	r7, #40	@ 0x28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d0c:	f3ef 8305 	mrs	r3, IPSR
 8007d10:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <osDelay+0x1c>
    stat = osErrorISR;
 8007d18:	f06f 0305 	mvn.w	r3, #5
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	e007      	b.n	8007d30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 ff8e 	bl	8008c4c <vTaskDelay>
    }
  }

  return (stat);
 8007d30:	68fb      	ldr	r3, [r7, #12]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4a07      	ldr	r2, [pc, #28]	@ (8007d68 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	4a06      	ldr	r2, [pc, #24]	@ (8007d6c <vApplicationGetIdleTaskMemory+0x30>)
 8007d52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2280      	movs	r2, #128	@ 0x80
 8007d58:	601a      	str	r2, [r3, #0]
}
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	2000515c 	.word	0x2000515c
 8007d6c:	200051b8 	.word	0x200051b8

08007d70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4a07      	ldr	r2, [pc, #28]	@ (8007d9c <vApplicationGetTimerTaskMemory+0x2c>)
 8007d80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	4a06      	ldr	r2, [pc, #24]	@ (8007da0 <vApplicationGetTimerTaskMemory+0x30>)
 8007d86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d8e:	601a      	str	r2, [r3, #0]
}
 8007d90:	bf00      	nop
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	200053b8 	.word	0x200053b8
 8007da0:	20005414 	.word	0x20005414

08007da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f103 0208 	add.w	r2, r3, #8
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f103 0208 	add.w	r2, r3, #8
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f103 0208 	add.w	r2, r3, #8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	601a      	str	r2, [r3, #0]
}
 8007e3a:	bf00      	nop
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e5c:	d103      	bne.n	8007e66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e00c      	b.n	8007e80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3308      	adds	r3, #8
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	e002      	b.n	8007e74 <vListInsert+0x2e>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d2f6      	bcs.n	8007e6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	601a      	str	r2, [r3, #0]
}
 8007eac:	bf00      	nop
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	6892      	ldr	r2, [r2, #8]
 8007ece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	6852      	ldr	r2, [r2, #4]
 8007ed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d103      	bne.n	8007eec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	1e5a      	subs	r2, r3, #1
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <xQueueGenericReset+0x2c>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60bb      	str	r3, [r7, #8]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f38:	f002 f89e 	bl	800a078 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f44:	68f9      	ldr	r1, [r7, #12]
 8007f46:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f48:	fb01 f303 	mul.w	r3, r1, r3
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	68f9      	ldr	r1, [r7, #12]
 8007f6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f6e:	fb01 f303 	mul.w	r3, r1, r3
 8007f72:	441a      	add	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	22ff      	movs	r2, #255	@ 0xff
 8007f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	22ff      	movs	r2, #255	@ 0xff
 8007f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d114      	bne.n	8007fb8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d01a      	beq.n	8007fcc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3310      	adds	r3, #16
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 f91a 	bl	80091d4 <xTaskRemoveFromEventList>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d012      	beq.n	8007fcc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fdc <xQueueGenericReset+0xd0>)
 8007fa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	e009      	b.n	8007fcc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3310      	adds	r3, #16
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff fef1 	bl	8007da4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3324      	adds	r3, #36	@ 0x24
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff feec 	bl	8007da4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fcc:	f002 f886 	bl	800a0dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fd0:	2301      	movs	r3, #1
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	e000ed04 	.word	0xe000ed04

08007fe0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08e      	sub	sp, #56	@ 0x38
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10b      	bne.n	800800c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	e7fd      	b.n	8008008 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10b      	bne.n	800802a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop
 8008028:	e7fd      	b.n	8008026 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <xQueueGenericCreateStatic+0x56>
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <xQueueGenericCreateStatic+0x5a>
 8008036:	2301      	movs	r3, #1
 8008038:	e000      	b.n	800803c <xQueueGenericCreateStatic+0x5c>
 800803a:	2300      	movs	r3, #0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10b      	bne.n	8008058 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	623b      	str	r3, [r7, #32]
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d102      	bne.n	8008064 <xQueueGenericCreateStatic+0x84>
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <xQueueGenericCreateStatic+0x88>
 8008064:	2301      	movs	r3, #1
 8008066:	e000      	b.n	800806a <xQueueGenericCreateStatic+0x8a>
 8008068:	2300      	movs	r3, #0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10b      	bne.n	8008086 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	61fb      	str	r3, [r7, #28]
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	e7fd      	b.n	8008082 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008086:	2350      	movs	r3, #80	@ 0x50
 8008088:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b50      	cmp	r3, #80	@ 0x50
 800808e:	d00b      	beq.n	80080a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	61bb      	str	r3, [r7, #24]
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80080ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00d      	beq.n	80080d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80080c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	4613      	mov	r3, r2
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	68b9      	ldr	r1, [r7, #8]
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f805 	bl	80080da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3730      	adds	r7, #48	@ 0x30
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d103      	bne.n	80080f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	e002      	b.n	80080fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008108:	2101      	movs	r1, #1
 800810a:	69b8      	ldr	r0, [r7, #24]
 800810c:	f7ff fefe 	bl	8007f0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008118:	bf00      	nop
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08e      	sub	sp, #56	@ 0x38
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800812e:	2300      	movs	r3, #0
 8008130:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10b      	bne.n	8008154 <xQueueGenericSend+0x34>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800814e:	bf00      	nop
 8008150:	bf00      	nop
 8008152:	e7fd      	b.n	8008150 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d103      	bne.n	8008162 <xQueueGenericSend+0x42>
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <xQueueGenericSend+0x46>
 8008162:	2301      	movs	r3, #1
 8008164:	e000      	b.n	8008168 <xQueueGenericSend+0x48>
 8008166:	2300      	movs	r3, #0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10b      	bne.n	8008184 <xQueueGenericSend+0x64>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800817e:	bf00      	nop
 8008180:	bf00      	nop
 8008182:	e7fd      	b.n	8008180 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b02      	cmp	r3, #2
 8008188:	d103      	bne.n	8008192 <xQueueGenericSend+0x72>
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <xQueueGenericSend+0x76>
 8008192:	2301      	movs	r3, #1
 8008194:	e000      	b.n	8008198 <xQueueGenericSend+0x78>
 8008196:	2300      	movs	r3, #0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10b      	bne.n	80081b4 <xQueueGenericSend+0x94>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	623b      	str	r3, [r7, #32]
}
 80081ae:	bf00      	nop
 80081b0:	bf00      	nop
 80081b2:	e7fd      	b.n	80081b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081b4:	f001 f9f6 	bl	80095a4 <xTaskGetSchedulerState>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d102      	bne.n	80081c4 <xQueueGenericSend+0xa4>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <xQueueGenericSend+0xa8>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e000      	b.n	80081ca <xQueueGenericSend+0xaa>
 80081c8:	2300      	movs	r3, #0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10b      	bne.n	80081e6 <xQueueGenericSend+0xc6>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	61fb      	str	r3, [r7, #28]
}
 80081e0:	bf00      	nop
 80081e2:	bf00      	nop
 80081e4:	e7fd      	b.n	80081e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081e6:	f001 ff47 	bl	800a078 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d302      	bcc.n	80081fc <xQueueGenericSend+0xdc>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d129      	bne.n	8008250 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	68b9      	ldr	r1, [r7, #8]
 8008200:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008202:	f000 fa0f 	bl	8008624 <prvCopyDataToQueue>
 8008206:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820c:	2b00      	cmp	r3, #0
 800820e:	d010      	beq.n	8008232 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	3324      	adds	r3, #36	@ 0x24
 8008214:	4618      	mov	r0, r3
 8008216:	f000 ffdd 	bl	80091d4 <xTaskRemoveFromEventList>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d013      	beq.n	8008248 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008220:	4b3f      	ldr	r3, [pc, #252]	@ (8008320 <xQueueGenericSend+0x200>)
 8008222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	e00a      	b.n	8008248 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008238:	4b39      	ldr	r3, [pc, #228]	@ (8008320 <xQueueGenericSend+0x200>)
 800823a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008248:	f001 ff48 	bl	800a0dc <vPortExitCritical>
				return pdPASS;
 800824c:	2301      	movs	r3, #1
 800824e:	e063      	b.n	8008318 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d103      	bne.n	800825e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008256:	f001 ff41 	bl	800a0dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800825a:	2300      	movs	r3, #0
 800825c:	e05c      	b.n	8008318 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800825e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008260:	2b00      	cmp	r3, #0
 8008262:	d106      	bne.n	8008272 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008264:	f107 0314 	add.w	r3, r7, #20
 8008268:	4618      	mov	r0, r3
 800826a:	f001 f83f 	bl	80092ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800826e:	2301      	movs	r3, #1
 8008270:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008272:	f001 ff33 	bl	800a0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008276:	f000 fd87 	bl	8008d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800827a:	f001 fefd 	bl	800a078 <vPortEnterCritical>
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008284:	b25b      	sxtb	r3, r3
 8008286:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800828a:	d103      	bne.n	8008294 <xQueueGenericSend+0x174>
 800828c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800829a:	b25b      	sxtb	r3, r3
 800829c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082a0:	d103      	bne.n	80082aa <xQueueGenericSend+0x18a>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082aa:	f001 ff17 	bl	800a0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082ae:	1d3a      	adds	r2, r7, #4
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	4611      	mov	r1, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 f82e 	bl	8009318 <xTaskCheckForTimeOut>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d124      	bne.n	800830c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082c4:	f000 faa6 	bl	8008814 <prvIsQueueFull>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d018      	beq.n	8008300 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d0:	3310      	adds	r3, #16
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 ff2a 	bl	8009130 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082de:	f000 fa31 	bl	8008744 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082e2:	f000 fd5f 	bl	8008da4 <xTaskResumeAll>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f47f af7c 	bne.w	80081e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80082ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008320 <xQueueGenericSend+0x200>)
 80082f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	e772      	b.n	80081e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008302:	f000 fa1f 	bl	8008744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008306:	f000 fd4d 	bl	8008da4 <xTaskResumeAll>
 800830a:	e76c      	b.n	80081e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800830c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800830e:	f000 fa19 	bl	8008744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008312:	f000 fd47 	bl	8008da4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008316:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008318:	4618      	mov	r0, r3
 800831a:	3738      	adds	r7, #56	@ 0x38
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	e000ed04 	.word	0xe000ed04

08008324 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b090      	sub	sp, #64	@ 0x40
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d103      	bne.n	8008362 <xQueueGenericSendFromISR+0x3e>
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <xQueueGenericSendFromISR+0x42>
 8008362:	2301      	movs	r3, #1
 8008364:	e000      	b.n	8008368 <xQueueGenericSendFromISR+0x44>
 8008366:	2300      	movs	r3, #0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10b      	bne.n	8008384 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800837e:	bf00      	nop
 8008380:	bf00      	nop
 8008382:	e7fd      	b.n	8008380 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d103      	bne.n	8008392 <xQueueGenericSendFromISR+0x6e>
 800838a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838e:	2b01      	cmp	r3, #1
 8008390:	d101      	bne.n	8008396 <xQueueGenericSendFromISR+0x72>
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <xQueueGenericSendFromISR+0x74>
 8008396:	2300      	movs	r3, #0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10b      	bne.n	80083b4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	623b      	str	r3, [r7, #32]
}
 80083ae:	bf00      	nop
 80083b0:	bf00      	nop
 80083b2:	e7fd      	b.n	80083b0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083b4:	f001 ff40 	bl	800a238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083b8:	f3ef 8211 	mrs	r2, BASEPRI
 80083bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	61fa      	str	r2, [r7, #28]
 80083ce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083dc:	429a      	cmp	r2, r3
 80083de:	d302      	bcc.n	80083e6 <xQueueGenericSendFromISR+0xc2>
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d12f      	bne.n	8008446 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083fc:	f000 f912 	bl	8008624 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008400:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008408:	d112      	bne.n	8008430 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800840a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840e:	2b00      	cmp	r3, #0
 8008410:	d016      	beq.n	8008440 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008414:	3324      	adds	r3, #36	@ 0x24
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fedc 	bl	80091d4 <xTaskRemoveFromEventList>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00e      	beq.n	8008440 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	e007      	b.n	8008440 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008430:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008434:	3301      	adds	r3, #1
 8008436:	b2db      	uxtb	r3, r3
 8008438:	b25a      	sxtb	r2, r3
 800843a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008440:	2301      	movs	r3, #1
 8008442:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008444:	e001      	b.n	800844a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008446:	2300      	movs	r3, #0
 8008448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800844a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008454:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008458:	4618      	mov	r0, r3
 800845a:	3740      	adds	r7, #64	@ 0x40
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08c      	sub	sp, #48	@ 0x30
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800846c:	2300      	movs	r3, #0
 800846e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10b      	bne.n	8008492 <xQueueReceive+0x32>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	623b      	str	r3, [r7, #32]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <xQueueReceive+0x40>
 8008498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <xQueueReceive+0x44>
 80084a0:	2301      	movs	r3, #1
 80084a2:	e000      	b.n	80084a6 <xQueueReceive+0x46>
 80084a4:	2300      	movs	r3, #0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10b      	bne.n	80084c2 <xQueueReceive+0x62>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	61fb      	str	r3, [r7, #28]
}
 80084bc:	bf00      	nop
 80084be:	bf00      	nop
 80084c0:	e7fd      	b.n	80084be <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084c2:	f001 f86f 	bl	80095a4 <xTaskGetSchedulerState>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d102      	bne.n	80084d2 <xQueueReceive+0x72>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <xQueueReceive+0x76>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <xQueueReceive+0x78>
 80084d6:	2300      	movs	r3, #0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <xQueueReceive+0x94>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	61bb      	str	r3, [r7, #24]
}
 80084ee:	bf00      	nop
 80084f0:	bf00      	nop
 80084f2:	e7fd      	b.n	80084f0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084f4:	f001 fdc0 	bl	800a078 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01f      	beq.n	8008544 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008508:	f000 f8f6 	bl	80086f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800850c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850e:	1e5a      	subs	r2, r3, #1
 8008510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008512:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00f      	beq.n	800853c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800851c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851e:	3310      	adds	r3, #16
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fe57 	bl	80091d4 <xTaskRemoveFromEventList>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d007      	beq.n	800853c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800852c:	4b3c      	ldr	r3, [pc, #240]	@ (8008620 <xQueueReceive+0x1c0>)
 800852e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800853c:	f001 fdce 	bl	800a0dc <vPortExitCritical>
				return pdPASS;
 8008540:	2301      	movs	r3, #1
 8008542:	e069      	b.n	8008618 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d103      	bne.n	8008552 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800854a:	f001 fdc7 	bl	800a0dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800854e:	2300      	movs	r3, #0
 8008550:	e062      	b.n	8008618 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008554:	2b00      	cmp	r3, #0
 8008556:	d106      	bne.n	8008566 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008558:	f107 0310 	add.w	r3, r7, #16
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fec5 	bl	80092ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008562:	2301      	movs	r3, #1
 8008564:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008566:	f001 fdb9 	bl	800a0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800856a:	f000 fc0d 	bl	8008d88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800856e:	f001 fd83 	bl	800a078 <vPortEnterCritical>
 8008572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008574:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008578:	b25b      	sxtb	r3, r3
 800857a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800857e:	d103      	bne.n	8008588 <xQueueReceive+0x128>
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800858e:	b25b      	sxtb	r3, r3
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008594:	d103      	bne.n	800859e <xQueueReceive+0x13e>
 8008596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800859e:	f001 fd9d 	bl	800a0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085a2:	1d3a      	adds	r2, r7, #4
 80085a4:	f107 0310 	add.w	r3, r7, #16
 80085a8:	4611      	mov	r1, r2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 feb4 	bl	8009318 <xTaskCheckForTimeOut>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d123      	bne.n	80085fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085b8:	f000 f916 	bl	80087e8 <prvIsQueueEmpty>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d017      	beq.n	80085f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c4:	3324      	adds	r3, #36	@ 0x24
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 fdb0 	bl	8009130 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d2:	f000 f8b7 	bl	8008744 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085d6:	f000 fbe5 	bl	8008da4 <xTaskResumeAll>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d189      	bne.n	80084f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80085e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008620 <xQueueReceive+0x1c0>)
 80085e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	e780      	b.n	80084f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085f4:	f000 f8a6 	bl	8008744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085f8:	f000 fbd4 	bl	8008da4 <xTaskResumeAll>
 80085fc:	e77a      	b.n	80084f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008600:	f000 f8a0 	bl	8008744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008604:	f000 fbce 	bl	8008da4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008608:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800860a:	f000 f8ed 	bl	80087e8 <prvIsQueueEmpty>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	f43f af6f 	beq.w	80084f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008616:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008618:	4618      	mov	r0, r3
 800861a:	3730      	adds	r7, #48	@ 0x30
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008638:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10d      	bne.n	800865e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d14d      	bne.n	80086e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 ffc6 	bl	80095e0 <xTaskPriorityDisinherit>
 8008654:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	609a      	str	r2, [r3, #8]
 800865c:	e043      	b.n	80086e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d119      	bne.n	8008698 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6858      	ldr	r0, [r3, #4]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866c:	461a      	mov	r2, r3
 800866e:	68b9      	ldr	r1, [r7, #8]
 8008670:	f010 fec9 	bl	8019406 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867c:	441a      	add	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	429a      	cmp	r2, r3
 800868c:	d32b      	bcc.n	80086e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	605a      	str	r2, [r3, #4]
 8008696:	e026      	b.n	80086e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	68d8      	ldr	r0, [r3, #12]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a0:	461a      	mov	r2, r3
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	f010 feaf 	bl	8019406 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b0:	425b      	negs	r3, r3
 80086b2:	441a      	add	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d207      	bcs.n	80086d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086cc:	425b      	negs	r3, r3
 80086ce:	441a      	add	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d105      	bne.n	80086e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80086ee:	697b      	ldr	r3, [r7, #20]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d018      	beq.n	800873c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008712:	441a      	add	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	429a      	cmp	r2, r3
 8008722:	d303      	bcc.n	800872c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68d9      	ldr	r1, [r3, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008734:	461a      	mov	r2, r3
 8008736:	6838      	ldr	r0, [r7, #0]
 8008738:	f010 fe65 	bl	8019406 <memcpy>
	}
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800874c:	f001 fc94 	bl	800a078 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008756:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008758:	e011      	b.n	800877e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800875e:	2b00      	cmp	r3, #0
 8008760:	d012      	beq.n	8008788 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3324      	adds	r3, #36	@ 0x24
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fd34 	bl	80091d4 <xTaskRemoveFromEventList>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008772:	f000 fe35 	bl	80093e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	3b01      	subs	r3, #1
 800877a:	b2db      	uxtb	r3, r3
 800877c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800877e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008782:	2b00      	cmp	r3, #0
 8008784:	dce9      	bgt.n	800875a <prvUnlockQueue+0x16>
 8008786:	e000      	b.n	800878a <prvUnlockQueue+0x46>
					break;
 8008788:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	22ff      	movs	r2, #255	@ 0xff
 800878e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008792:	f001 fca3 	bl	800a0dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008796:	f001 fc6f 	bl	800a078 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087a2:	e011      	b.n	80087c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d012      	beq.n	80087d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3310      	adds	r3, #16
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 fd0f 	bl	80091d4 <xTaskRemoveFromEventList>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087bc:	f000 fe10 	bl	80093e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dce9      	bgt.n	80087a4 <prvUnlockQueue+0x60>
 80087d0:	e000      	b.n	80087d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	22ff      	movs	r2, #255	@ 0xff
 80087d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087dc:	f001 fc7e 	bl	800a0dc <vPortExitCritical>
}
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087f0:	f001 fc42 	bl	800a078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d102      	bne.n	8008802 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087fc:	2301      	movs	r3, #1
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	e001      	b.n	8008806 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008806:	f001 fc69 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 800880a:	68fb      	ldr	r3, [r7, #12]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800881c:	f001 fc2c 	bl	800a078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008828:	429a      	cmp	r2, r3
 800882a:	d102      	bne.n	8008832 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800882c:	2301      	movs	r3, #1
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	e001      	b.n	8008836 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008836:	f001 fc51 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 800883a:	68fb      	ldr	r3, [r7, #12]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	e014      	b.n	800887e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008854:	4a0f      	ldr	r2, [pc, #60]	@ (8008894 <vQueueAddToRegistry+0x50>)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10b      	bne.n	8008878 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008860:	490c      	ldr	r1, [pc, #48]	@ (8008894 <vQueueAddToRegistry+0x50>)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800886a:	4a0a      	ldr	r2, [pc, #40]	@ (8008894 <vQueueAddToRegistry+0x50>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	4413      	add	r3, r2
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008876:	e006      	b.n	8008886 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3301      	adds	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b07      	cmp	r3, #7
 8008882:	d9e7      	bls.n	8008854 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	20005814 	.word	0x20005814

08008898 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088a8:	f001 fbe6 	bl	800a078 <vPortEnterCritical>
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088b2:	b25b      	sxtb	r3, r3
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088b8:	d103      	bne.n	80088c2 <vQueueWaitForMessageRestricted+0x2a>
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088c8:	b25b      	sxtb	r3, r3
 80088ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088ce:	d103      	bne.n	80088d8 <vQueueWaitForMessageRestricted+0x40>
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088d8:	f001 fc00 	bl	800a0dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d106      	bne.n	80088f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	3324      	adds	r3, #36	@ 0x24
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	68b9      	ldr	r1, [r7, #8]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fc45 	bl	800917c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088f2:	6978      	ldr	r0, [r7, #20]
 80088f4:	f7ff ff26 	bl	8008744 <prvUnlockQueue>
	}
 80088f8:	bf00      	nop
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08e      	sub	sp, #56	@ 0x38
 8008904:	af04      	add	r7, sp, #16
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800890e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10b      	bne.n	800892c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	623b      	str	r3, [r7, #32]
}
 8008926:	bf00      	nop
 8008928:	bf00      	nop
 800892a:	e7fd      	b.n	8008928 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800892c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	61fb      	str	r3, [r7, #28]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800894a:	235c      	movs	r3, #92	@ 0x5c
 800894c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b5c      	cmp	r3, #92	@ 0x5c
 8008952:	d00b      	beq.n	800896c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	61bb      	str	r3, [r7, #24]
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	e7fd      	b.n	8008968 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800896c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800896e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01e      	beq.n	80089b2 <xTaskCreateStatic+0xb2>
 8008974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01b      	beq.n	80089b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800897a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800897e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008980:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008982:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	2202      	movs	r2, #2
 8008988:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800898c:	2300      	movs	r3, #0
 800898e:	9303      	str	r3, [sp, #12]
 8008990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008992:	9302      	str	r3, [sp, #8]
 8008994:	f107 0314 	add.w	r3, r7, #20
 8008998:	9301      	str	r3, [sp, #4]
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f850 	bl	8008a4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089ac:	f000 f8de 	bl	8008b6c <prvAddNewTaskToReadyList>
 80089b0:	e001      	b.n	80089b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089b6:	697b      	ldr	r3, [r7, #20]
	}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3728      	adds	r7, #40	@ 0x28
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08c      	sub	sp, #48	@ 0x30
 80089c4:	af04      	add	r7, sp, #16
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	4613      	mov	r3, r2
 80089ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089d0:	88fb      	ldrh	r3, [r7, #6]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 fc71 	bl	800a2bc <pvPortMalloc>
 80089da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00e      	beq.n	8008a00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089e2:	205c      	movs	r0, #92	@ 0x5c
 80089e4:	f001 fc6a 	bl	800a2bc <pvPortMalloc>
 80089e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d003      	beq.n	80089f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80089f6:	e005      	b.n	8008a04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089f8:	6978      	ldr	r0, [r7, #20]
 80089fa:	f001 fd2d 	bl	800a458 <vPortFree>
 80089fe:	e001      	b.n	8008a04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d017      	beq.n	8008a3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a12:	88fa      	ldrh	r2, [r7, #6]
 8008a14:	2300      	movs	r3, #0
 8008a16:	9303      	str	r3, [sp, #12]
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	9302      	str	r3, [sp, #8]
 8008a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1e:	9301      	str	r3, [sp, #4]
 8008a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	68b9      	ldr	r1, [r7, #8]
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 f80e 	bl	8008a4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a2e:	69f8      	ldr	r0, [r7, #28]
 8008a30:	f000 f89c 	bl	8008b6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a34:	2301      	movs	r3, #1
 8008a36:	61bb      	str	r3, [r7, #24]
 8008a38:	e002      	b.n	8008a40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a40:	69bb      	ldr	r3, [r7, #24]
	}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3720      	adds	r7, #32
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b088      	sub	sp, #32
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	607a      	str	r2, [r7, #4]
 8008a56:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	461a      	mov	r2, r3
 8008a62:	21a5      	movs	r1, #165	@ 0xa5
 8008a64:	f010 fc06 	bl	8019274 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a72:	3b01      	subs	r3, #1
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	f023 0307 	bic.w	r3, r3, #7
 8008a80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	f003 0307 	and.w	r3, r3, #7
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	617b      	str	r3, [r7, #20]
}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	e7fd      	b.n	8008aa0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d01f      	beq.n	8008aea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aaa:	2300      	movs	r3, #0
 8008aac:	61fb      	str	r3, [r7, #28]
 8008aae:	e012      	b.n	8008ad6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	7819      	ldrb	r1, [r3, #0]
 8008ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	4413      	add	r3, r2
 8008abe:	3334      	adds	r3, #52	@ 0x34
 8008ac0:	460a      	mov	r2, r1
 8008ac2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	4413      	add	r3, r2
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d006      	beq.n	8008ade <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	61fb      	str	r3, [r7, #28]
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	2b0f      	cmp	r3, #15
 8008ada:	d9e9      	bls.n	8008ab0 <prvInitialiseNewTask+0x66>
 8008adc:	e000      	b.n	8008ae0 <prvInitialiseNewTask+0x96>
			{
				break;
 8008ade:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ae8:	e003      	b.n	8008af2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af4:	2b37      	cmp	r3, #55	@ 0x37
 8008af6:	d901      	bls.n	8008afc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008af8:	2337      	movs	r3, #55	@ 0x37
 8008afa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b00:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b06:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b10:	3304      	adds	r3, #4
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff f966 	bl	8007de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1a:	3318      	adds	r3, #24
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff f961 	bl	8007de4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b36:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	68f9      	ldr	r1, [r7, #12]
 8008b4a:	69b8      	ldr	r0, [r7, #24]
 8008b4c:	f001 f966 	bl	8009e1c <pxPortInitialiseStack>
 8008b50:	4602      	mov	r2, r0
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b62:	bf00      	nop
 8008b64:	3720      	adds	r7, #32
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b74:	f001 fa80 	bl	800a078 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b78:	4b2d      	ldr	r3, [pc, #180]	@ (8008c30 <prvAddNewTaskToReadyList+0xc4>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8008c30 <prvAddNewTaskToReadyList+0xc4>)
 8008b80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b82:	4b2c      	ldr	r3, [pc, #176]	@ (8008c34 <prvAddNewTaskToReadyList+0xc8>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d109      	bne.n	8008b9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008c34 <prvAddNewTaskToReadyList+0xc8>)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b90:	4b27      	ldr	r3, [pc, #156]	@ (8008c30 <prvAddNewTaskToReadyList+0xc4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d110      	bne.n	8008bba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b98:	f000 fc46 	bl	8009428 <prvInitialiseTaskLists>
 8008b9c:	e00d      	b.n	8008bba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b9e:	4b26      	ldr	r3, [pc, #152]	@ (8008c38 <prvAddNewTaskToReadyList+0xcc>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d109      	bne.n	8008bba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ba6:	4b23      	ldr	r3, [pc, #140]	@ (8008c34 <prvAddNewTaskToReadyList+0xc8>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d802      	bhi.n	8008bba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8008c34 <prvAddNewTaskToReadyList+0xc8>)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bba:	4b20      	ldr	r3, [pc, #128]	@ (8008c3c <prvAddNewTaskToReadyList+0xd0>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8008c3c <prvAddNewTaskToReadyList+0xd0>)
 8008bc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c3c <prvAddNewTaskToReadyList+0xd0>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8008c40 <prvAddNewTaskToReadyList+0xd4>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d903      	bls.n	8008be0 <prvAddNewTaskToReadyList+0x74>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bdc:	4a18      	ldr	r2, [pc, #96]	@ (8008c40 <prvAddNewTaskToReadyList+0xd4>)
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4a15      	ldr	r2, [pc, #84]	@ (8008c44 <prvAddNewTaskToReadyList+0xd8>)
 8008bee:	441a      	add	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f7ff f901 	bl	8007dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bfc:	f001 fa6e 	bl	800a0dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c00:	4b0d      	ldr	r3, [pc, #52]	@ (8008c38 <prvAddNewTaskToReadyList+0xcc>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00e      	beq.n	8008c26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c08:	4b0a      	ldr	r3, [pc, #40]	@ (8008c34 <prvAddNewTaskToReadyList+0xc8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d207      	bcs.n	8008c26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c16:	4b0c      	ldr	r3, [pc, #48]	@ (8008c48 <prvAddNewTaskToReadyList+0xdc>)
 8008c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c1c:	601a      	str	r2, [r3, #0]
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20005d28 	.word	0x20005d28
 8008c34:	20005854 	.word	0x20005854
 8008c38:	20005d34 	.word	0x20005d34
 8008c3c:	20005d44 	.word	0x20005d44
 8008c40:	20005d30 	.word	0x20005d30
 8008c44:	20005858 	.word	0x20005858
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d018      	beq.n	8008c90 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c5e:	4b14      	ldr	r3, [pc, #80]	@ (8008cb0 <vTaskDelay+0x64>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00b      	beq.n	8008c7e <vTaskDelay+0x32>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	60bb      	str	r3, [r7, #8]
}
 8008c78:	bf00      	nop
 8008c7a:	bf00      	nop
 8008c7c:	e7fd      	b.n	8008c7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c7e:	f000 f883 	bl	8008d88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c82:	2100      	movs	r1, #0
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fd1b 	bl	80096c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c8a:	f000 f88b 	bl	8008da4 <xTaskResumeAll>
 8008c8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d107      	bne.n	8008ca6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008c96:	4b07      	ldr	r3, [pc, #28]	@ (8008cb4 <vTaskDelay+0x68>)
 8008c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ca6:	bf00      	nop
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20005d50 	.word	0x20005d50
 8008cb4:	e000ed04 	.word	0xe000ed04

08008cb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	@ 0x28
 8008cbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cc6:	463a      	mov	r2, r7
 8008cc8:	1d39      	adds	r1, r7, #4
 8008cca:	f107 0308 	add.w	r3, r7, #8
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff f834 	bl	8007d3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	9202      	str	r2, [sp, #8]
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	460a      	mov	r2, r1
 8008ce6:	4922      	ldr	r1, [pc, #136]	@ (8008d70 <vTaskStartScheduler+0xb8>)
 8008ce8:	4822      	ldr	r0, [pc, #136]	@ (8008d74 <vTaskStartScheduler+0xbc>)
 8008cea:	f7ff fe09 	bl	8008900 <xTaskCreateStatic>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	4a21      	ldr	r2, [pc, #132]	@ (8008d78 <vTaskStartScheduler+0xc0>)
 8008cf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cf4:	4b20      	ldr	r3, [pc, #128]	@ (8008d78 <vTaskStartScheduler+0xc0>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	e001      	b.n	8008d06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d102      	bne.n	8008d12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d0c:	f000 fd2c 	bl	8009768 <xTimerCreateTimerTask>
 8008d10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d116      	bne.n	8008d46 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	613b      	str	r3, [r7, #16]
}
 8008d2a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d2c:	4b13      	ldr	r3, [pc, #76]	@ (8008d7c <vTaskStartScheduler+0xc4>)
 8008d2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d34:	4b12      	ldr	r3, [pc, #72]	@ (8008d80 <vTaskStartScheduler+0xc8>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d3a:	4b12      	ldr	r3, [pc, #72]	@ (8008d84 <vTaskStartScheduler+0xcc>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d40:	f001 f8f6 	bl	8009f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d44:	e00f      	b.n	8008d66 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d4c:	d10b      	bne.n	8008d66 <vTaskStartScheduler+0xae>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	60fb      	str	r3, [r7, #12]
}
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
 8008d64:	e7fd      	b.n	8008d62 <vTaskStartScheduler+0xaa>
}
 8008d66:	bf00      	nop
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	0801a828 	.word	0x0801a828
 8008d74:	080093f9 	.word	0x080093f9
 8008d78:	20005d4c 	.word	0x20005d4c
 8008d7c:	20005d48 	.word	0x20005d48
 8008d80:	20005d34 	.word	0x20005d34
 8008d84:	20005d2c 	.word	0x20005d2c

08008d88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d8c:	4b04      	ldr	r3, [pc, #16]	@ (8008da0 <vTaskSuspendAll+0x18>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	3301      	adds	r3, #1
 8008d92:	4a03      	ldr	r2, [pc, #12]	@ (8008da0 <vTaskSuspendAll+0x18>)
 8008d94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d96:	bf00      	nop
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20005d50 	.word	0x20005d50

08008da4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008db2:	4b42      	ldr	r3, [pc, #264]	@ (8008ebc <xTaskResumeAll+0x118>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10b      	bne.n	8008dd2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	603b      	str	r3, [r7, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	e7fd      	b.n	8008dce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dd2:	f001 f951 	bl	800a078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dd6:	4b39      	ldr	r3, [pc, #228]	@ (8008ebc <xTaskResumeAll+0x118>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	4a37      	ldr	r2, [pc, #220]	@ (8008ebc <xTaskResumeAll+0x118>)
 8008dde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008de0:	4b36      	ldr	r3, [pc, #216]	@ (8008ebc <xTaskResumeAll+0x118>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d162      	bne.n	8008eae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008de8:	4b35      	ldr	r3, [pc, #212]	@ (8008ec0 <xTaskResumeAll+0x11c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d05e      	beq.n	8008eae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008df0:	e02f      	b.n	8008e52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008df2:	4b34      	ldr	r3, [pc, #208]	@ (8008ec4 <xTaskResumeAll+0x120>)
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3318      	adds	r3, #24
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff f85a 	bl	8007eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3304      	adds	r3, #4
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff f855 	bl	8007eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e12:	4b2d      	ldr	r3, [pc, #180]	@ (8008ec8 <xTaskResumeAll+0x124>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d903      	bls.n	8008e22 <xTaskResumeAll+0x7e>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8008ec8 <xTaskResumeAll+0x124>)
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e26:	4613      	mov	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4a27      	ldr	r2, [pc, #156]	@ (8008ecc <xTaskResumeAll+0x128>)
 8008e30:	441a      	add	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3304      	adds	r3, #4
 8008e36:	4619      	mov	r1, r3
 8008e38:	4610      	mov	r0, r2
 8008e3a:	f7fe ffe0 	bl	8007dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e42:	4b23      	ldr	r3, [pc, #140]	@ (8008ed0 <xTaskResumeAll+0x12c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d302      	bcc.n	8008e52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008e4c:	4b21      	ldr	r3, [pc, #132]	@ (8008ed4 <xTaskResumeAll+0x130>)
 8008e4e:	2201      	movs	r2, #1
 8008e50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e52:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec4 <xTaskResumeAll+0x120>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1cb      	bne.n	8008df2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e60:	f000 fb80 	bl	8009564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e64:	4b1c      	ldr	r3, [pc, #112]	@ (8008ed8 <xTaskResumeAll+0x134>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d010      	beq.n	8008e92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e70:	f000 f846 	bl	8008f00 <xTaskIncrementTick>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d002      	beq.n	8008e80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008e7a:	4b16      	ldr	r3, [pc, #88]	@ (8008ed4 <xTaskResumeAll+0x130>)
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3b01      	subs	r3, #1
 8008e84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1f1      	bne.n	8008e70 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008e8c:	4b12      	ldr	r3, [pc, #72]	@ (8008ed8 <xTaskResumeAll+0x134>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e92:	4b10      	ldr	r3, [pc, #64]	@ (8008ed4 <xTaskResumeAll+0x130>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d009      	beq.n	8008eae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008edc <xTaskResumeAll+0x138>)
 8008ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008eae:	f001 f915 	bl	800a0dc <vPortExitCritical>

	return xAlreadyYielded;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20005d50 	.word	0x20005d50
 8008ec0:	20005d28 	.word	0x20005d28
 8008ec4:	20005ce8 	.word	0x20005ce8
 8008ec8:	20005d30 	.word	0x20005d30
 8008ecc:	20005858 	.word	0x20005858
 8008ed0:	20005854 	.word	0x20005854
 8008ed4:	20005d3c 	.word	0x20005d3c
 8008ed8:	20005d38 	.word	0x20005d38
 8008edc:	e000ed04 	.word	0xe000ed04

08008ee0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ee6:	4b05      	ldr	r3, [pc, #20]	@ (8008efc <xTaskGetTickCount+0x1c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008eec:	687b      	ldr	r3, [r7, #4]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20005d2c 	.word	0x20005d2c

08008f00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8009048 <xTaskIncrementTick+0x148>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f040 8090 	bne.w	8009034 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f14:	4b4d      	ldr	r3, [pc, #308]	@ (800904c <xTaskIncrementTick+0x14c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800904c <xTaskIncrementTick+0x14c>)
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d121      	bne.n	8008f6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f28:	4b49      	ldr	r3, [pc, #292]	@ (8009050 <xTaskIncrementTick+0x150>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00b      	beq.n	8008f4a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	603b      	str	r3, [r7, #0]
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	e7fd      	b.n	8008f46 <xTaskIncrementTick+0x46>
 8008f4a:	4b41      	ldr	r3, [pc, #260]	@ (8009050 <xTaskIncrementTick+0x150>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]
 8008f50:	4b40      	ldr	r3, [pc, #256]	@ (8009054 <xTaskIncrementTick+0x154>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a3e      	ldr	r2, [pc, #248]	@ (8009050 <xTaskIncrementTick+0x150>)
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	4a3e      	ldr	r2, [pc, #248]	@ (8009054 <xTaskIncrementTick+0x154>)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8009058 <xTaskIncrementTick+0x158>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3301      	adds	r3, #1
 8008f64:	4a3c      	ldr	r2, [pc, #240]	@ (8009058 <xTaskIncrementTick+0x158>)
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	f000 fafc 	bl	8009564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800905c <xTaskIncrementTick+0x15c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d349      	bcc.n	800900a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f76:	4b36      	ldr	r3, [pc, #216]	@ (8009050 <xTaskIncrementTick+0x150>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d104      	bne.n	8008f8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f80:	4b36      	ldr	r3, [pc, #216]	@ (800905c <xTaskIncrementTick+0x15c>)
 8008f82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f86:	601a      	str	r2, [r3, #0]
					break;
 8008f88:	e03f      	b.n	800900a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f8a:	4b31      	ldr	r3, [pc, #196]	@ (8009050 <xTaskIncrementTick+0x150>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d203      	bcs.n	8008faa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800905c <xTaskIncrementTick+0x15c>)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fa8:	e02f      	b.n	800900a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	3304      	adds	r3, #4
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe ff82 	bl	8007eb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d004      	beq.n	8008fc6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	3318      	adds	r3, #24
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe ff79 	bl	8007eb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fca:	4b25      	ldr	r3, [pc, #148]	@ (8009060 <xTaskIncrementTick+0x160>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d903      	bls.n	8008fda <xTaskIncrementTick+0xda>
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd6:	4a22      	ldr	r2, [pc, #136]	@ (8009060 <xTaskIncrementTick+0x160>)
 8008fd8:	6013      	str	r3, [r2, #0]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fde:	4613      	mov	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8009064 <xTaskIncrementTick+0x164>)
 8008fe8:	441a      	add	r2, r3
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	3304      	adds	r3, #4
 8008fee:	4619      	mov	r1, r3
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	f7fe ff04 	bl	8007dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8009068 <xTaskIncrementTick+0x168>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009000:	429a      	cmp	r2, r3
 8009002:	d3b8      	bcc.n	8008f76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009004:	2301      	movs	r3, #1
 8009006:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009008:	e7b5      	b.n	8008f76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800900a:	4b17      	ldr	r3, [pc, #92]	@ (8009068 <xTaskIncrementTick+0x168>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009010:	4914      	ldr	r1, [pc, #80]	@ (8009064 <xTaskIncrementTick+0x164>)
 8009012:	4613      	mov	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	440b      	add	r3, r1
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d901      	bls.n	8009026 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009022:	2301      	movs	r3, #1
 8009024:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009026:	4b11      	ldr	r3, [pc, #68]	@ (800906c <xTaskIncrementTick+0x16c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d007      	beq.n	800903e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800902e:	2301      	movs	r3, #1
 8009030:	617b      	str	r3, [r7, #20]
 8009032:	e004      	b.n	800903e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009034:	4b0e      	ldr	r3, [pc, #56]	@ (8009070 <xTaskIncrementTick+0x170>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3301      	adds	r3, #1
 800903a:	4a0d      	ldr	r2, [pc, #52]	@ (8009070 <xTaskIncrementTick+0x170>)
 800903c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800903e:	697b      	ldr	r3, [r7, #20]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20005d50 	.word	0x20005d50
 800904c:	20005d2c 	.word	0x20005d2c
 8009050:	20005ce0 	.word	0x20005ce0
 8009054:	20005ce4 	.word	0x20005ce4
 8009058:	20005d40 	.word	0x20005d40
 800905c:	20005d48 	.word	0x20005d48
 8009060:	20005d30 	.word	0x20005d30
 8009064:	20005858 	.word	0x20005858
 8009068:	20005854 	.word	0x20005854
 800906c:	20005d3c 	.word	0x20005d3c
 8009070:	20005d38 	.word	0x20005d38

08009074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800907a:	4b28      	ldr	r3, [pc, #160]	@ (800911c <vTaskSwitchContext+0xa8>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009082:	4b27      	ldr	r3, [pc, #156]	@ (8009120 <vTaskSwitchContext+0xac>)
 8009084:	2201      	movs	r2, #1
 8009086:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009088:	e042      	b.n	8009110 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800908a:	4b25      	ldr	r3, [pc, #148]	@ (8009120 <vTaskSwitchContext+0xac>)
 800908c:	2200      	movs	r2, #0
 800908e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009090:	4b24      	ldr	r3, [pc, #144]	@ (8009124 <vTaskSwitchContext+0xb0>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	e011      	b.n	80090bc <vTaskSwitchContext+0x48>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10b      	bne.n	80090b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	607b      	str	r3, [r7, #4]
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	e7fd      	b.n	80090b2 <vTaskSwitchContext+0x3e>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	491a      	ldr	r1, [pc, #104]	@ (8009128 <vTaskSwitchContext+0xb4>)
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	4613      	mov	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4413      	add	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	440b      	add	r3, r1
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0e3      	beq.n	8009098 <vTaskSwitchContext+0x24>
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4613      	mov	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4a13      	ldr	r2, [pc, #76]	@ (8009128 <vTaskSwitchContext+0xb4>)
 80090dc:	4413      	add	r3, r2
 80090de:	60bb      	str	r3, [r7, #8]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	605a      	str	r2, [r3, #4]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	3308      	adds	r3, #8
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d104      	bne.n	8009100 <vTaskSwitchContext+0x8c>
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	605a      	str	r2, [r3, #4]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	4a09      	ldr	r2, [pc, #36]	@ (800912c <vTaskSwitchContext+0xb8>)
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	4a06      	ldr	r2, [pc, #24]	@ (8009124 <vTaskSwitchContext+0xb0>)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6013      	str	r3, [r2, #0]
}
 8009110:	bf00      	nop
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	20005d50 	.word	0x20005d50
 8009120:	20005d3c 	.word	0x20005d3c
 8009124:	20005d30 	.word	0x20005d30
 8009128:	20005858 	.word	0x20005858
 800912c:	20005854 	.word	0x20005854

08009130 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10b      	bne.n	8009158 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	60fb      	str	r3, [r7, #12]
}
 8009152:	bf00      	nop
 8009154:	bf00      	nop
 8009156:	e7fd      	b.n	8009154 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009158:	4b07      	ldr	r3, [pc, #28]	@ (8009178 <vTaskPlaceOnEventList+0x48>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3318      	adds	r3, #24
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7fe fe70 	bl	8007e46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009166:	2101      	movs	r1, #1
 8009168:	6838      	ldr	r0, [r7, #0]
 800916a:	f000 faa9 	bl	80096c0 <prvAddCurrentTaskToDelayedList>
}
 800916e:	bf00      	nop
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20005854 	.word	0x20005854

0800917c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10b      	bne.n	80091a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	617b      	str	r3, [r7, #20]
}
 80091a0:	bf00      	nop
 80091a2:	bf00      	nop
 80091a4:	e7fd      	b.n	80091a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091a6:	4b0a      	ldr	r3, [pc, #40]	@ (80091d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3318      	adds	r3, #24
 80091ac:	4619      	mov	r1, r3
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7fe fe25 	bl	8007dfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d002      	beq.n	80091c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80091ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	68b8      	ldr	r0, [r7, #8]
 80091c4:	f000 fa7c 	bl	80096c0 <prvAddCurrentTaskToDelayedList>
	}
 80091c8:	bf00      	nop
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	20005854 	.word	0x20005854

080091d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10b      	bne.n	8009202 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	60fb      	str	r3, [r7, #12]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	3318      	adds	r3, #24
 8009206:	4618      	mov	r0, r3
 8009208:	f7fe fe56 	bl	8007eb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800920c:	4b1d      	ldr	r3, [pc, #116]	@ (8009284 <xTaskRemoveFromEventList+0xb0>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d11d      	bne.n	8009250 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	3304      	adds	r3, #4
 8009218:	4618      	mov	r0, r3
 800921a:	f7fe fe4d 	bl	8007eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009222:	4b19      	ldr	r3, [pc, #100]	@ (8009288 <xTaskRemoveFromEventList+0xb4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	429a      	cmp	r2, r3
 8009228:	d903      	bls.n	8009232 <xTaskRemoveFromEventList+0x5e>
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922e:	4a16      	ldr	r2, [pc, #88]	@ (8009288 <xTaskRemoveFromEventList+0xb4>)
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009236:	4613      	mov	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4a13      	ldr	r2, [pc, #76]	@ (800928c <xTaskRemoveFromEventList+0xb8>)
 8009240:	441a      	add	r2, r3
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	3304      	adds	r3, #4
 8009246:	4619      	mov	r1, r3
 8009248:	4610      	mov	r0, r2
 800924a:	f7fe fdd8 	bl	8007dfe <vListInsertEnd>
 800924e:	e005      	b.n	800925c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	3318      	adds	r3, #24
 8009254:	4619      	mov	r1, r3
 8009256:	480e      	ldr	r0, [pc, #56]	@ (8009290 <xTaskRemoveFromEventList+0xbc>)
 8009258:	f7fe fdd1 	bl	8007dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009260:	4b0c      	ldr	r3, [pc, #48]	@ (8009294 <xTaskRemoveFromEventList+0xc0>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009266:	429a      	cmp	r2, r3
 8009268:	d905      	bls.n	8009276 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800926a:	2301      	movs	r3, #1
 800926c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800926e:	4b0a      	ldr	r3, [pc, #40]	@ (8009298 <xTaskRemoveFromEventList+0xc4>)
 8009270:	2201      	movs	r2, #1
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	e001      	b.n	800927a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009276:	2300      	movs	r3, #0
 8009278:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800927a:	697b      	ldr	r3, [r7, #20]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20005d50 	.word	0x20005d50
 8009288:	20005d30 	.word	0x20005d30
 800928c:	20005858 	.word	0x20005858
 8009290:	20005ce8 	.word	0x20005ce8
 8009294:	20005854 	.word	0x20005854
 8009298:	20005d3c 	.word	0x20005d3c

0800929c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10b      	bne.n	80092c2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	60fb      	str	r3, [r7, #12]
}
 80092bc:	bf00      	nop
 80092be:	bf00      	nop
 80092c0:	e7fd      	b.n	80092be <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80092c2:	f000 fed9 	bl	800a078 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092c6:	4b07      	ldr	r3, [pc, #28]	@ (80092e4 <vTaskSetTimeOutState+0x48>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80092ce:	4b06      	ldr	r3, [pc, #24]	@ (80092e8 <vTaskSetTimeOutState+0x4c>)
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80092d6:	f000 ff01 	bl	800a0dc <vPortExitCritical>
}
 80092da:	bf00      	nop
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20005d40 	.word	0x20005d40
 80092e8:	20005d2c 	.word	0x20005d2c

080092ec <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092f4:	4b06      	ldr	r3, [pc, #24]	@ (8009310 <vTaskInternalSetTimeOutState+0x24>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092fc:	4b05      	ldr	r3, [pc, #20]	@ (8009314 <vTaskInternalSetTimeOutState+0x28>)
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	605a      	str	r2, [r3, #4]
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	20005d40 	.word	0x20005d40
 8009314:	20005d2c 	.word	0x20005d2c

08009318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10b      	bne.n	8009340 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	613b      	str	r3, [r7, #16]
}
 800933a:	bf00      	nop
 800933c:	bf00      	nop
 800933e:	e7fd      	b.n	800933c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10b      	bne.n	800935e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	60fb      	str	r3, [r7, #12]
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	e7fd      	b.n	800935a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800935e:	f000 fe8b 	bl	800a078 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009362:	4b1d      	ldr	r3, [pc, #116]	@ (80093d8 <xTaskCheckForTimeOut+0xc0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800937a:	d102      	bne.n	8009382 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800937c:	2300      	movs	r3, #0
 800937e:	61fb      	str	r3, [r7, #28]
 8009380:	e023      	b.n	80093ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	4b15      	ldr	r3, [pc, #84]	@ (80093dc <xTaskCheckForTimeOut+0xc4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	429a      	cmp	r2, r3
 800938c:	d007      	beq.n	800939e <xTaskCheckForTimeOut+0x86>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	429a      	cmp	r2, r3
 8009396:	d302      	bcc.n	800939e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	61fb      	str	r3, [r7, #28]
 800939c:	e015      	b.n	80093ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d20b      	bcs.n	80093c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	1ad2      	subs	r2, r2, r3
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7ff ff99 	bl	80092ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093ba:	2300      	movs	r3, #0
 80093bc:	61fb      	str	r3, [r7, #28]
 80093be:	e004      	b.n	80093ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093c6:	2301      	movs	r3, #1
 80093c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093ca:	f000 fe87 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 80093ce:	69fb      	ldr	r3, [r7, #28]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3720      	adds	r7, #32
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	20005d2c 	.word	0x20005d2c
 80093dc:	20005d40 	.word	0x20005d40

080093e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093e4:	4b03      	ldr	r3, [pc, #12]	@ (80093f4 <vTaskMissedYield+0x14>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	601a      	str	r2, [r3, #0]
}
 80093ea:	bf00      	nop
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	20005d3c 	.word	0x20005d3c

080093f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009400:	f000 f852 	bl	80094a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009404:	4b06      	ldr	r3, [pc, #24]	@ (8009420 <prvIdleTask+0x28>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d9f9      	bls.n	8009400 <prvIdleTask+0x8>
			{
				taskYIELD();
 800940c:	4b05      	ldr	r3, [pc, #20]	@ (8009424 <prvIdleTask+0x2c>)
 800940e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800941c:	e7f0      	b.n	8009400 <prvIdleTask+0x8>
 800941e:	bf00      	nop
 8009420:	20005858 	.word	0x20005858
 8009424:	e000ed04 	.word	0xe000ed04

08009428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800942e:	2300      	movs	r3, #0
 8009430:	607b      	str	r3, [r7, #4]
 8009432:	e00c      	b.n	800944e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4a12      	ldr	r2, [pc, #72]	@ (8009488 <prvInitialiseTaskLists+0x60>)
 8009440:	4413      	add	r3, r2
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe fcae 	bl	8007da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3301      	adds	r3, #1
 800944c:	607b      	str	r3, [r7, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b37      	cmp	r3, #55	@ 0x37
 8009452:	d9ef      	bls.n	8009434 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009454:	480d      	ldr	r0, [pc, #52]	@ (800948c <prvInitialiseTaskLists+0x64>)
 8009456:	f7fe fca5 	bl	8007da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800945a:	480d      	ldr	r0, [pc, #52]	@ (8009490 <prvInitialiseTaskLists+0x68>)
 800945c:	f7fe fca2 	bl	8007da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009460:	480c      	ldr	r0, [pc, #48]	@ (8009494 <prvInitialiseTaskLists+0x6c>)
 8009462:	f7fe fc9f 	bl	8007da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009466:	480c      	ldr	r0, [pc, #48]	@ (8009498 <prvInitialiseTaskLists+0x70>)
 8009468:	f7fe fc9c 	bl	8007da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800946c:	480b      	ldr	r0, [pc, #44]	@ (800949c <prvInitialiseTaskLists+0x74>)
 800946e:	f7fe fc99 	bl	8007da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009472:	4b0b      	ldr	r3, [pc, #44]	@ (80094a0 <prvInitialiseTaskLists+0x78>)
 8009474:	4a05      	ldr	r2, [pc, #20]	@ (800948c <prvInitialiseTaskLists+0x64>)
 8009476:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009478:	4b0a      	ldr	r3, [pc, #40]	@ (80094a4 <prvInitialiseTaskLists+0x7c>)
 800947a:	4a05      	ldr	r2, [pc, #20]	@ (8009490 <prvInitialiseTaskLists+0x68>)
 800947c:	601a      	str	r2, [r3, #0]
}
 800947e:	bf00      	nop
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20005858 	.word	0x20005858
 800948c:	20005cb8 	.word	0x20005cb8
 8009490:	20005ccc 	.word	0x20005ccc
 8009494:	20005ce8 	.word	0x20005ce8
 8009498:	20005cfc 	.word	0x20005cfc
 800949c:	20005d14 	.word	0x20005d14
 80094a0:	20005ce0 	.word	0x20005ce0
 80094a4:	20005ce4 	.word	0x20005ce4

080094a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094ae:	e019      	b.n	80094e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094b0:	f000 fde2 	bl	800a078 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b4:	4b10      	ldr	r3, [pc, #64]	@ (80094f8 <prvCheckTasksWaitingTermination+0x50>)
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3304      	adds	r3, #4
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fe fcf9 	bl	8007eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094c6:	4b0d      	ldr	r3, [pc, #52]	@ (80094fc <prvCheckTasksWaitingTermination+0x54>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	4a0b      	ldr	r2, [pc, #44]	@ (80094fc <prvCheckTasksWaitingTermination+0x54>)
 80094ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009500 <prvCheckTasksWaitingTermination+0x58>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009500 <prvCheckTasksWaitingTermination+0x58>)
 80094d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094da:	f000 fdff 	bl	800a0dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f810 	bl	8009504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094e4:	4b06      	ldr	r3, [pc, #24]	@ (8009500 <prvCheckTasksWaitingTermination+0x58>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1e1      	bne.n	80094b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094ec:	bf00      	nop
 80094ee:	bf00      	nop
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20005cfc 	.word	0x20005cfc
 80094fc:	20005d28 	.word	0x20005d28
 8009500:	20005d10 	.word	0x20005d10

08009504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009512:	2b00      	cmp	r3, #0
 8009514:	d108      	bne.n	8009528 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800951a:	4618      	mov	r0, r3
 800951c:	f000 ff9c 	bl	800a458 <vPortFree>
				vPortFree( pxTCB );
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 ff99 	bl	800a458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009526:	e019      	b.n	800955c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800952e:	2b01      	cmp	r3, #1
 8009530:	d103      	bne.n	800953a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 ff90 	bl	800a458 <vPortFree>
	}
 8009538:	e010      	b.n	800955c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009540:	2b02      	cmp	r3, #2
 8009542:	d00b      	beq.n	800955c <prvDeleteTCB+0x58>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	60fb      	str	r3, [r7, #12]
}
 8009556:	bf00      	nop
 8009558:	bf00      	nop
 800955a:	e7fd      	b.n	8009558 <prvDeleteTCB+0x54>
	}
 800955c:	bf00      	nop
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800956a:	4b0c      	ldr	r3, [pc, #48]	@ (800959c <prvResetNextTaskUnblockTime+0x38>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d104      	bne.n	800957e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009574:	4b0a      	ldr	r3, [pc, #40]	@ (80095a0 <prvResetNextTaskUnblockTime+0x3c>)
 8009576:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800957a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800957c:	e008      	b.n	8009590 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800957e:	4b07      	ldr	r3, [pc, #28]	@ (800959c <prvResetNextTaskUnblockTime+0x38>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	4a04      	ldr	r2, [pc, #16]	@ (80095a0 <prvResetNextTaskUnblockTime+0x3c>)
 800958e:	6013      	str	r3, [r2, #0]
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	20005ce0 	.word	0x20005ce0
 80095a0:	20005d48 	.word	0x20005d48

080095a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095aa:	4b0b      	ldr	r3, [pc, #44]	@ (80095d8 <xTaskGetSchedulerState+0x34>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d102      	bne.n	80095b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095b2:	2301      	movs	r3, #1
 80095b4:	607b      	str	r3, [r7, #4]
 80095b6:	e008      	b.n	80095ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b8:	4b08      	ldr	r3, [pc, #32]	@ (80095dc <xTaskGetSchedulerState+0x38>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095c0:	2302      	movs	r3, #2
 80095c2:	607b      	str	r3, [r7, #4]
 80095c4:	e001      	b.n	80095ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095c6:	2300      	movs	r3, #0
 80095c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095ca:	687b      	ldr	r3, [r7, #4]
	}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	20005d34 	.word	0x20005d34
 80095dc:	20005d50 	.word	0x20005d50

080095e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095ec:	2300      	movs	r3, #0
 80095ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d058      	beq.n	80096a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095f6:	4b2f      	ldr	r3, [pc, #188]	@ (80096b4 <xTaskPriorityDisinherit+0xd4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d00b      	beq.n	8009618 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	60fb      	str	r3, [r7, #12]
}
 8009612:	bf00      	nop
 8009614:	bf00      	nop
 8009616:	e7fd      	b.n	8009614 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	60bb      	str	r3, [r7, #8]
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	e7fd      	b.n	8009634 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800963c:	1e5a      	subs	r2, r3, #1
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800964a:	429a      	cmp	r2, r3
 800964c:	d02c      	beq.n	80096a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009652:	2b00      	cmp	r3, #0
 8009654:	d128      	bne.n	80096a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	3304      	adds	r3, #4
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fc2c 	bl	8007eb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009678:	4b0f      	ldr	r3, [pc, #60]	@ (80096b8 <xTaskPriorityDisinherit+0xd8>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	429a      	cmp	r2, r3
 800967e:	d903      	bls.n	8009688 <xTaskPriorityDisinherit+0xa8>
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009684:	4a0c      	ldr	r2, [pc, #48]	@ (80096b8 <xTaskPriorityDisinherit+0xd8>)
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800968c:	4613      	mov	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4a09      	ldr	r2, [pc, #36]	@ (80096bc <xTaskPriorityDisinherit+0xdc>)
 8009696:	441a      	add	r2, r3
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	3304      	adds	r3, #4
 800969c:	4619      	mov	r1, r3
 800969e:	4610      	mov	r0, r2
 80096a0:	f7fe fbad 	bl	8007dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096a4:	2301      	movs	r3, #1
 80096a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096a8:	697b      	ldr	r3, [r7, #20]
	}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3718      	adds	r7, #24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20005854 	.word	0x20005854
 80096b8:	20005d30 	.word	0x20005d30
 80096bc:	20005858 	.word	0x20005858

080096c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096ca:	4b21      	ldr	r3, [pc, #132]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x90>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096d0:	4b20      	ldr	r3, [pc, #128]	@ (8009754 <prvAddCurrentTaskToDelayedList+0x94>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3304      	adds	r3, #4
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe fbee 	bl	8007eb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096e2:	d10a      	bne.n	80096fa <prvAddCurrentTaskToDelayedList+0x3a>
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d007      	beq.n	80096fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009754 <prvAddCurrentTaskToDelayedList+0x94>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3304      	adds	r3, #4
 80096f0:	4619      	mov	r1, r3
 80096f2:	4819      	ldr	r0, [pc, #100]	@ (8009758 <prvAddCurrentTaskToDelayedList+0x98>)
 80096f4:	f7fe fb83 	bl	8007dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096f8:	e026      	b.n	8009748 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4413      	add	r3, r2
 8009700:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009702:	4b14      	ldr	r3, [pc, #80]	@ (8009754 <prvAddCurrentTaskToDelayedList+0x94>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	429a      	cmp	r2, r3
 8009710:	d209      	bcs.n	8009726 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009712:	4b12      	ldr	r3, [pc, #72]	@ (800975c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	4b0f      	ldr	r3, [pc, #60]	@ (8009754 <prvAddCurrentTaskToDelayedList+0x94>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3304      	adds	r3, #4
 800971c:	4619      	mov	r1, r3
 800971e:	4610      	mov	r0, r2
 8009720:	f7fe fb91 	bl	8007e46 <vListInsert>
}
 8009724:	e010      	b.n	8009748 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009726:	4b0e      	ldr	r3, [pc, #56]	@ (8009760 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	4b0a      	ldr	r3, [pc, #40]	@ (8009754 <prvAddCurrentTaskToDelayedList+0x94>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3304      	adds	r3, #4
 8009730:	4619      	mov	r1, r3
 8009732:	4610      	mov	r0, r2
 8009734:	f7fe fb87 	bl	8007e46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009738:	4b0a      	ldr	r3, [pc, #40]	@ (8009764 <prvAddCurrentTaskToDelayedList+0xa4>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	429a      	cmp	r2, r3
 8009740:	d202      	bcs.n	8009748 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009742:	4a08      	ldr	r2, [pc, #32]	@ (8009764 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	6013      	str	r3, [r2, #0]
}
 8009748:	bf00      	nop
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20005d2c 	.word	0x20005d2c
 8009754:	20005854 	.word	0x20005854
 8009758:	20005d14 	.word	0x20005d14
 800975c:	20005ce4 	.word	0x20005ce4
 8009760:	20005ce0 	.word	0x20005ce0
 8009764:	20005d48 	.word	0x20005d48

08009768 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08a      	sub	sp, #40	@ 0x28
 800976c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009772:	f000 fb13 	bl	8009d9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009776:	4b1d      	ldr	r3, [pc, #116]	@ (80097ec <xTimerCreateTimerTask+0x84>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d021      	beq.n	80097c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800977e:	2300      	movs	r3, #0
 8009780:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009786:	1d3a      	adds	r2, r7, #4
 8009788:	f107 0108 	add.w	r1, r7, #8
 800978c:	f107 030c 	add.w	r3, r7, #12
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe faed 	bl	8007d70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	9202      	str	r2, [sp, #8]
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	2302      	movs	r3, #2
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	2300      	movs	r3, #0
 80097a6:	460a      	mov	r2, r1
 80097a8:	4911      	ldr	r1, [pc, #68]	@ (80097f0 <xTimerCreateTimerTask+0x88>)
 80097aa:	4812      	ldr	r0, [pc, #72]	@ (80097f4 <xTimerCreateTimerTask+0x8c>)
 80097ac:	f7ff f8a8 	bl	8008900 <xTaskCreateStatic>
 80097b0:	4603      	mov	r3, r0
 80097b2:	4a11      	ldr	r2, [pc, #68]	@ (80097f8 <xTimerCreateTimerTask+0x90>)
 80097b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097b6:	4b10      	ldr	r3, [pc, #64]	@ (80097f8 <xTimerCreateTimerTask+0x90>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097be:	2301      	movs	r3, #1
 80097c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10b      	bne.n	80097e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	613b      	str	r3, [r7, #16]
}
 80097da:	bf00      	nop
 80097dc:	bf00      	nop
 80097de:	e7fd      	b.n	80097dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097e0:	697b      	ldr	r3, [r7, #20]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20005d84 	.word	0x20005d84
 80097f0:	0801a830 	.word	0x0801a830
 80097f4:	08009935 	.word	0x08009935
 80097f8:	20005d88 	.word	0x20005d88

080097fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08a      	sub	sp, #40	@ 0x28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800980a:	2300      	movs	r3, #0
 800980c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10b      	bne.n	800982c <xTimerGenericCommand+0x30>
	__asm volatile
 8009814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	623b      	str	r3, [r7, #32]
}
 8009826:	bf00      	nop
 8009828:	bf00      	nop
 800982a:	e7fd      	b.n	8009828 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800982c:	4b19      	ldr	r3, [pc, #100]	@ (8009894 <xTimerGenericCommand+0x98>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d02a      	beq.n	800988a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2b05      	cmp	r3, #5
 8009844:	dc18      	bgt.n	8009878 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009846:	f7ff fead 	bl	80095a4 <xTaskGetSchedulerState>
 800984a:	4603      	mov	r3, r0
 800984c:	2b02      	cmp	r3, #2
 800984e:	d109      	bne.n	8009864 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009850:	4b10      	ldr	r3, [pc, #64]	@ (8009894 <xTimerGenericCommand+0x98>)
 8009852:	6818      	ldr	r0, [r3, #0]
 8009854:	f107 0110 	add.w	r1, r7, #16
 8009858:	2300      	movs	r3, #0
 800985a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800985c:	f7fe fc60 	bl	8008120 <xQueueGenericSend>
 8009860:	6278      	str	r0, [r7, #36]	@ 0x24
 8009862:	e012      	b.n	800988a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009864:	4b0b      	ldr	r3, [pc, #44]	@ (8009894 <xTimerGenericCommand+0x98>)
 8009866:	6818      	ldr	r0, [r3, #0]
 8009868:	f107 0110 	add.w	r1, r7, #16
 800986c:	2300      	movs	r3, #0
 800986e:	2200      	movs	r2, #0
 8009870:	f7fe fc56 	bl	8008120 <xQueueGenericSend>
 8009874:	6278      	str	r0, [r7, #36]	@ 0x24
 8009876:	e008      	b.n	800988a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009878:	4b06      	ldr	r3, [pc, #24]	@ (8009894 <xTimerGenericCommand+0x98>)
 800987a:	6818      	ldr	r0, [r3, #0]
 800987c:	f107 0110 	add.w	r1, r7, #16
 8009880:	2300      	movs	r3, #0
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	f7fe fd4e 	bl	8008324 <xQueueGenericSendFromISR>
 8009888:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800988a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800988c:	4618      	mov	r0, r3
 800988e:	3728      	adds	r7, #40	@ 0x28
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20005d84 	.word	0x20005d84

08009898 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af02      	add	r7, sp, #8
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098a2:	4b23      	ldr	r3, [pc, #140]	@ (8009930 <prvProcessExpiredTimer+0x98>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	3304      	adds	r3, #4
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fe fb01 	bl	8007eb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098bc:	f003 0304 	and.w	r3, r3, #4
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d023      	beq.n	800990c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	699a      	ldr	r2, [r3, #24]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	18d1      	adds	r1, r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	6978      	ldr	r0, [r7, #20]
 80098d2:	f000 f8d5 	bl	8009a80 <prvInsertTimerInActiveList>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d020      	beq.n	800991e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098dc:	2300      	movs	r3, #0
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	2300      	movs	r3, #0
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	2100      	movs	r1, #0
 80098e6:	6978      	ldr	r0, [r7, #20]
 80098e8:	f7ff ff88 	bl	80097fc <xTimerGenericCommand>
 80098ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d114      	bne.n	800991e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	60fb      	str	r3, [r7, #12]
}
 8009906:	bf00      	nop
 8009908:	bf00      	nop
 800990a:	e7fd      	b.n	8009908 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009912:	f023 0301 	bic.w	r3, r3, #1
 8009916:	b2da      	uxtb	r2, r3
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	6978      	ldr	r0, [r7, #20]
 8009924:	4798      	blx	r3
}
 8009926:	bf00      	nop
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	20005d7c 	.word	0x20005d7c

08009934 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800993c:	f107 0308 	add.w	r3, r7, #8
 8009940:	4618      	mov	r0, r3
 8009942:	f000 f859 	bl	80099f8 <prvGetNextExpireTime>
 8009946:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	4619      	mov	r1, r3
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 f805 	bl	800995c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009952:	f000 f8d7 	bl	8009b04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009956:	bf00      	nop
 8009958:	e7f0      	b.n	800993c <prvTimerTask+0x8>
	...

0800995c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009966:	f7ff fa0f 	bl	8008d88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800996a:	f107 0308 	add.w	r3, r7, #8
 800996e:	4618      	mov	r0, r3
 8009970:	f000 f866 	bl	8009a40 <prvSampleTimeNow>
 8009974:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d130      	bne.n	80099de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10a      	bne.n	8009998 <prvProcessTimerOrBlockTask+0x3c>
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	429a      	cmp	r2, r3
 8009988:	d806      	bhi.n	8009998 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800998a:	f7ff fa0b 	bl	8008da4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800998e:	68f9      	ldr	r1, [r7, #12]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7ff ff81 	bl	8009898 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009996:	e024      	b.n	80099e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d008      	beq.n	80099b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800999e:	4b13      	ldr	r3, [pc, #76]	@ (80099ec <prvProcessTimerOrBlockTask+0x90>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <prvProcessTimerOrBlockTask+0x50>
 80099a8:	2301      	movs	r3, #1
 80099aa:	e000      	b.n	80099ae <prvProcessTimerOrBlockTask+0x52>
 80099ac:	2300      	movs	r3, #0
 80099ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099b0:	4b0f      	ldr	r3, [pc, #60]	@ (80099f0 <prvProcessTimerOrBlockTask+0x94>)
 80099b2:	6818      	ldr	r0, [r3, #0]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	4619      	mov	r1, r3
 80099be:	f7fe ff6b 	bl	8008898 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099c2:	f7ff f9ef 	bl	8008da4 <xTaskResumeAll>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10a      	bne.n	80099e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099cc:	4b09      	ldr	r3, [pc, #36]	@ (80099f4 <prvProcessTimerOrBlockTask+0x98>)
 80099ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	f3bf 8f6f 	isb	sy
}
 80099dc:	e001      	b.n	80099e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099de:	f7ff f9e1 	bl	8008da4 <xTaskResumeAll>
}
 80099e2:	bf00      	nop
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20005d80 	.word	0x20005d80
 80099f0:	20005d84 	.word	0x20005d84
 80099f4:	e000ed04 	.word	0xe000ed04

080099f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a00:	4b0e      	ldr	r3, [pc, #56]	@ (8009a3c <prvGetNextExpireTime+0x44>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <prvGetNextExpireTime+0x16>
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	e000      	b.n	8009a10 <prvGetNextExpireTime+0x18>
 8009a0e:	2200      	movs	r2, #0
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d105      	bne.n	8009a28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a1c:	4b07      	ldr	r3, [pc, #28]	@ (8009a3c <prvGetNextExpireTime+0x44>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	e001      	b.n	8009a2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	20005d7c 	.word	0x20005d7c

08009a40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a48:	f7ff fa4a 	bl	8008ee0 <xTaskGetTickCount>
 8009a4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009a7c <prvSampleTimeNow+0x3c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d205      	bcs.n	8009a64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a58:	f000 f93a 	bl	8009cd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	e002      	b.n	8009a6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a6a:	4a04      	ldr	r2, [pc, #16]	@ (8009a7c <prvSampleTimeNow+0x3c>)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a70:	68fb      	ldr	r3, [r7, #12]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20005d8c 	.word	0x20005d8c

08009a80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d812      	bhi.n	8009acc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	1ad2      	subs	r2, r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d302      	bcc.n	8009aba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	e01b      	b.n	8009af2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009aba:	4b10      	ldr	r3, [pc, #64]	@ (8009afc <prvInsertTimerInActiveList+0x7c>)
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	f7fe f9be 	bl	8007e46 <vListInsert>
 8009aca:	e012      	b.n	8009af2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d206      	bcs.n	8009ae2 <prvInsertTimerInActiveList+0x62>
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d302      	bcc.n	8009ae2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009adc:	2301      	movs	r3, #1
 8009ade:	617b      	str	r3, [r7, #20]
 8009ae0:	e007      	b.n	8009af2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ae2:	4b07      	ldr	r3, [pc, #28]	@ (8009b00 <prvInsertTimerInActiveList+0x80>)
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	4619      	mov	r1, r3
 8009aec:	4610      	mov	r0, r2
 8009aee:	f7fe f9aa 	bl	8007e46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009af2:	697b      	ldr	r3, [r7, #20]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	20005d80 	.word	0x20005d80
 8009b00:	20005d7c 	.word	0x20005d7c

08009b04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08e      	sub	sp, #56	@ 0x38
 8009b08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b0a:	e0ce      	b.n	8009caa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	da19      	bge.n	8009b46 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b12:	1d3b      	adds	r3, r7, #4
 8009b14:	3304      	adds	r3, #4
 8009b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10b      	bne.n	8009b36 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	61fb      	str	r3, [r7, #28]
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	e7fd      	b.n	8009b32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b3c:	6850      	ldr	r0, [r2, #4]
 8009b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b40:	6892      	ldr	r2, [r2, #8]
 8009b42:	4611      	mov	r1, r2
 8009b44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f2c0 80ae 	blt.w	8009caa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d004      	beq.n	8009b64 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe f9aa 	bl	8007eb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b64:	463b      	mov	r3, r7
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7ff ff6a 	bl	8009a40 <prvSampleTimeNow>
 8009b6c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b09      	cmp	r3, #9
 8009b72:	f200 8097 	bhi.w	8009ca4 <prvProcessReceivedCommands+0x1a0>
 8009b76:	a201      	add	r2, pc, #4	@ (adr r2, 8009b7c <prvProcessReceivedCommands+0x78>)
 8009b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7c:	08009ba5 	.word	0x08009ba5
 8009b80:	08009ba5 	.word	0x08009ba5
 8009b84:	08009ba5 	.word	0x08009ba5
 8009b88:	08009c1b 	.word	0x08009c1b
 8009b8c:	08009c2f 	.word	0x08009c2f
 8009b90:	08009c7b 	.word	0x08009c7b
 8009b94:	08009ba5 	.word	0x08009ba5
 8009b98:	08009ba5 	.word	0x08009ba5
 8009b9c:	08009c1b 	.word	0x08009c1b
 8009ba0:	08009c2f 	.word	0x08009c2f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009baa:	f043 0301 	orr.w	r3, r3, #1
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	18d1      	adds	r1, r2, r3
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bc4:	f7ff ff5c 	bl	8009a80 <prvInsertTimerInActiveList>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d06c      	beq.n	8009ca8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bdc:	f003 0304 	and.w	r3, r3, #4
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d061      	beq.n	8009ca8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	441a      	add	r2, r3
 8009bec:	2300      	movs	r3, #0
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bf6:	f7ff fe01 	bl	80097fc <xTimerGenericCommand>
 8009bfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d152      	bne.n	8009ca8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	61bb      	str	r3, [r7, #24]
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	e7fd      	b.n	8009c16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c20:	f023 0301 	bic.w	r3, r3, #1
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c2c:	e03d      	b.n	8009caa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c34:	f043 0301 	orr.w	r3, r3, #1
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c44:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10b      	bne.n	8009c66 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	617b      	str	r3, [r7, #20]
}
 8009c60:	bf00      	nop
 8009c62:	bf00      	nop
 8009c64:	e7fd      	b.n	8009c62 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c68:	699a      	ldr	r2, [r3, #24]
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6c:	18d1      	adds	r1, r2, r3
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c74:	f7ff ff04 	bl	8009a80 <prvInsertTimerInActiveList>
					break;
 8009c78:	e017      	b.n	8009caa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d103      	bne.n	8009c90 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c8a:	f000 fbe5 	bl	800a458 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c8e:	e00c      	b.n	8009caa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c96:	f023 0301 	bic.w	r3, r3, #1
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009ca2:	e002      	b.n	8009caa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009ca4:	bf00      	nop
 8009ca6:	e000      	b.n	8009caa <prvProcessReceivedCommands+0x1a6>
					break;
 8009ca8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009caa:	4b08      	ldr	r3, [pc, #32]	@ (8009ccc <prvProcessReceivedCommands+0x1c8>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	1d39      	adds	r1, r7, #4
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fe fbd4 	bl	8008460 <xQueueReceive>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f47f af26 	bne.w	8009b0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009cc0:	bf00      	nop
 8009cc2:	bf00      	nop
 8009cc4:	3730      	adds	r7, #48	@ 0x30
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20005d84 	.word	0x20005d84

08009cd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cd6:	e049      	b.n	8009d6c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8009d94 <prvSwitchTimerLists+0xc4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8009d94 <prvSwitchTimerLists+0xc4>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe f8e1 	bl	8007eb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d04:	f003 0304 	and.w	r3, r3, #4
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d02f      	beq.n	8009d6c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	4413      	add	r3, r2
 8009d14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d90e      	bls.n	8009d3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8009d94 <prvSwitchTimerLists+0xc4>)
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3304      	adds	r3, #4
 8009d32:	4619      	mov	r1, r3
 8009d34:	4610      	mov	r0, r2
 8009d36:	f7fe f886 	bl	8007e46 <vListInsert>
 8009d3a:	e017      	b.n	8009d6c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	2300      	movs	r3, #0
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	2100      	movs	r1, #0
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f7ff fd58 	bl	80097fc <xTimerGenericCommand>
 8009d4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10b      	bne.n	8009d6c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	603b      	str	r3, [r7, #0]
}
 8009d66:	bf00      	nop
 8009d68:	bf00      	nop
 8009d6a:	e7fd      	b.n	8009d68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d6c:	4b09      	ldr	r3, [pc, #36]	@ (8009d94 <prvSwitchTimerLists+0xc4>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1b0      	bne.n	8009cd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d76:	4b07      	ldr	r3, [pc, #28]	@ (8009d94 <prvSwitchTimerLists+0xc4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d7c:	4b06      	ldr	r3, [pc, #24]	@ (8009d98 <prvSwitchTimerLists+0xc8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a04      	ldr	r2, [pc, #16]	@ (8009d94 <prvSwitchTimerLists+0xc4>)
 8009d82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d84:	4a04      	ldr	r2, [pc, #16]	@ (8009d98 <prvSwitchTimerLists+0xc8>)
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	6013      	str	r3, [r2, #0]
}
 8009d8a:	bf00      	nop
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20005d7c 	.word	0x20005d7c
 8009d98:	20005d80 	.word	0x20005d80

08009d9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009da2:	f000 f969 	bl	800a078 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009da6:	4b15      	ldr	r3, [pc, #84]	@ (8009dfc <prvCheckForValidListAndQueue+0x60>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d120      	bne.n	8009df0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009dae:	4814      	ldr	r0, [pc, #80]	@ (8009e00 <prvCheckForValidListAndQueue+0x64>)
 8009db0:	f7fd fff8 	bl	8007da4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009db4:	4813      	ldr	r0, [pc, #76]	@ (8009e04 <prvCheckForValidListAndQueue+0x68>)
 8009db6:	f7fd fff5 	bl	8007da4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009dba:	4b13      	ldr	r3, [pc, #76]	@ (8009e08 <prvCheckForValidListAndQueue+0x6c>)
 8009dbc:	4a10      	ldr	r2, [pc, #64]	@ (8009e00 <prvCheckForValidListAndQueue+0x64>)
 8009dbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009dc0:	4b12      	ldr	r3, [pc, #72]	@ (8009e0c <prvCheckForValidListAndQueue+0x70>)
 8009dc2:	4a10      	ldr	r2, [pc, #64]	@ (8009e04 <prvCheckForValidListAndQueue+0x68>)
 8009dc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	4b11      	ldr	r3, [pc, #68]	@ (8009e10 <prvCheckForValidListAndQueue+0x74>)
 8009dcc:	4a11      	ldr	r2, [pc, #68]	@ (8009e14 <prvCheckForValidListAndQueue+0x78>)
 8009dce:	2110      	movs	r1, #16
 8009dd0:	200a      	movs	r0, #10
 8009dd2:	f7fe f905 	bl	8007fe0 <xQueueGenericCreateStatic>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4a08      	ldr	r2, [pc, #32]	@ (8009dfc <prvCheckForValidListAndQueue+0x60>)
 8009dda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ddc:	4b07      	ldr	r3, [pc, #28]	@ (8009dfc <prvCheckForValidListAndQueue+0x60>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d005      	beq.n	8009df0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009de4:	4b05      	ldr	r3, [pc, #20]	@ (8009dfc <prvCheckForValidListAndQueue+0x60>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	490b      	ldr	r1, [pc, #44]	@ (8009e18 <prvCheckForValidListAndQueue+0x7c>)
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe fd2a 	bl	8008844 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009df0:	f000 f974 	bl	800a0dc <vPortExitCritical>
}
 8009df4:	bf00      	nop
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20005d84 	.word	0x20005d84
 8009e00:	20005d54 	.word	0x20005d54
 8009e04:	20005d68 	.word	0x20005d68
 8009e08:	20005d7c 	.word	0x20005d7c
 8009e0c:	20005d80 	.word	0x20005d80
 8009e10:	20005e30 	.word	0x20005e30
 8009e14:	20005d90 	.word	0x20005d90
 8009e18:	0801a838 	.word	0x0801a838

08009e1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3b04      	subs	r3, #4
 8009e2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3b04      	subs	r3, #4
 8009e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	f023 0201 	bic.w	r2, r3, #1
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3b04      	subs	r3, #4
 8009e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8009e80 <pxPortInitialiseStack+0x64>)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3b14      	subs	r3, #20
 8009e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3b04      	subs	r3, #4
 8009e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f06f 0202 	mvn.w	r2, #2
 8009e6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3b20      	subs	r3, #32
 8009e70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e72:	68fb      	ldr	r3, [r7, #12]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	08009e85 	.word	0x08009e85

08009e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e8e:	4b13      	ldr	r3, [pc, #76]	@ (8009edc <prvTaskExitError+0x58>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e96:	d00b      	beq.n	8009eb0 <prvTaskExitError+0x2c>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	60fb      	str	r3, [r7, #12]
}
 8009eaa:	bf00      	nop
 8009eac:	bf00      	nop
 8009eae:	e7fd      	b.n	8009eac <prvTaskExitError+0x28>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	60bb      	str	r3, [r7, #8]
}
 8009ec2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ec4:	bf00      	nop
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d0fc      	beq.n	8009ec6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ecc:	bf00      	nop
 8009ece:	bf00      	nop
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	200000a0 	.word	0x200000a0

08009ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ee0:	4b07      	ldr	r3, [pc, #28]	@ (8009f00 <pxCurrentTCBConst2>)
 8009ee2:	6819      	ldr	r1, [r3, #0]
 8009ee4:	6808      	ldr	r0, [r1, #0]
 8009ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	f380 8809 	msr	PSP, r0
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f04f 0000 	mov.w	r0, #0
 8009ef6:	f380 8811 	msr	BASEPRI, r0
 8009efa:	4770      	bx	lr
 8009efc:	f3af 8000 	nop.w

08009f00 <pxCurrentTCBConst2>:
 8009f00:	20005854 	.word	0x20005854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop

08009f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f08:	4808      	ldr	r0, [pc, #32]	@ (8009f2c <prvPortStartFirstTask+0x24>)
 8009f0a:	6800      	ldr	r0, [r0, #0]
 8009f0c:	6800      	ldr	r0, [r0, #0]
 8009f0e:	f380 8808 	msr	MSP, r0
 8009f12:	f04f 0000 	mov.w	r0, #0
 8009f16:	f380 8814 	msr	CONTROL, r0
 8009f1a:	b662      	cpsie	i
 8009f1c:	b661      	cpsie	f
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	df00      	svc	0
 8009f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f2a:	bf00      	nop
 8009f2c:	e000ed08 	.word	0xe000ed08

08009f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f36:	4b47      	ldr	r3, [pc, #284]	@ (800a054 <xPortStartScheduler+0x124>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a47      	ldr	r2, [pc, #284]	@ (800a058 <xPortStartScheduler+0x128>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d10b      	bne.n	8009f58 <xPortStartScheduler+0x28>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	613b      	str	r3, [r7, #16]
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	e7fd      	b.n	8009f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f58:	4b3e      	ldr	r3, [pc, #248]	@ (800a054 <xPortStartScheduler+0x124>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a3f      	ldr	r2, [pc, #252]	@ (800a05c <xPortStartScheduler+0x12c>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d10b      	bne.n	8009f7a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	60fb      	str	r3, [r7, #12]
}
 8009f74:	bf00      	nop
 8009f76:	bf00      	nop
 8009f78:	e7fd      	b.n	8009f76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f7a:	4b39      	ldr	r3, [pc, #228]	@ (800a060 <xPortStartScheduler+0x130>)
 8009f7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	22ff      	movs	r2, #255	@ 0xff
 8009f8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	4b31      	ldr	r3, [pc, #196]	@ (800a064 <xPortStartScheduler+0x134>)
 8009fa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fa2:	4b31      	ldr	r3, [pc, #196]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fa4:	2207      	movs	r2, #7
 8009fa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fa8:	e009      	b.n	8009fbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009faa:	4b2f      	ldr	r3, [pc, #188]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	4a2d      	ldr	r2, [pc, #180]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc6:	2b80      	cmp	r3, #128	@ 0x80
 8009fc8:	d0ef      	beq.n	8009faa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fca:	4b27      	ldr	r3, [pc, #156]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f1c3 0307 	rsb	r3, r3, #7
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d00b      	beq.n	8009fee <xPortStartScheduler+0xbe>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	60bb      	str	r3, [r7, #8]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fee:	4b1e      	ldr	r3, [pc, #120]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	021b      	lsls	r3, r3, #8
 8009ff4:	4a1c      	ldr	r2, [pc, #112]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ff8:	4b1b      	ldr	r3, [pc, #108]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a000:	4a19      	ldr	r2, [pc, #100]	@ (800a068 <xPortStartScheduler+0x138>)
 800a002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	b2da      	uxtb	r2, r3
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a00c:	4b17      	ldr	r3, [pc, #92]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a16      	ldr	r2, [pc, #88]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a012:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a018:	4b14      	ldr	r3, [pc, #80]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a13      	ldr	r2, [pc, #76]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a01e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a024:	f000 f8da 	bl	800a1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a028:	4b11      	ldr	r3, [pc, #68]	@ (800a070 <xPortStartScheduler+0x140>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a02e:	f000 f8f9 	bl	800a224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a032:	4b10      	ldr	r3, [pc, #64]	@ (800a074 <xPortStartScheduler+0x144>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a0f      	ldr	r2, [pc, #60]	@ (800a074 <xPortStartScheduler+0x144>)
 800a038:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a03c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a03e:	f7ff ff63 	bl	8009f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a042:	f7ff f817 	bl	8009074 <vTaskSwitchContext>
	prvTaskExitError();
 800a046:	f7ff ff1d 	bl	8009e84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	e000ed00 	.word	0xe000ed00
 800a058:	410fc271 	.word	0x410fc271
 800a05c:	410fc270 	.word	0x410fc270
 800a060:	e000e400 	.word	0xe000e400
 800a064:	20005e80 	.word	0x20005e80
 800a068:	20005e84 	.word	0x20005e84
 800a06c:	e000ed20 	.word	0xe000ed20
 800a070:	200000a0 	.word	0x200000a0
 800a074:	e000ef34 	.word	0xe000ef34

0800a078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	607b      	str	r3, [r7, #4]
}
 800a090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a092:	4b10      	ldr	r3, [pc, #64]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3301      	adds	r3, #1
 800a098:	4a0e      	ldr	r2, [pc, #56]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a09a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a09c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d110      	bne.n	800a0c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d8 <vPortEnterCritical+0x60>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00b      	beq.n	800a0c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	603b      	str	r3, [r7, #0]
}
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	e7fd      	b.n	800a0c2 <vPortEnterCritical+0x4a>
	}
}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	200000a0 	.word	0x200000a0
 800a0d8:	e000ed04 	.word	0xe000ed04

0800a0dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0e2:	4b12      	ldr	r3, [pc, #72]	@ (800a12c <vPortExitCritical+0x50>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10b      	bne.n	800a102 <vPortExitCritical+0x26>
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	607b      	str	r3, [r7, #4]
}
 800a0fc:	bf00      	nop
 800a0fe:	bf00      	nop
 800a100:	e7fd      	b.n	800a0fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a102:	4b0a      	ldr	r3, [pc, #40]	@ (800a12c <vPortExitCritical+0x50>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3b01      	subs	r3, #1
 800a108:	4a08      	ldr	r2, [pc, #32]	@ (800a12c <vPortExitCritical+0x50>)
 800a10a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a10c:	4b07      	ldr	r3, [pc, #28]	@ (800a12c <vPortExitCritical+0x50>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d105      	bne.n	800a120 <vPortExitCritical+0x44>
 800a114:	2300      	movs	r3, #0
 800a116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	f383 8811 	msr	BASEPRI, r3
}
 800a11e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	200000a0 	.word	0x200000a0

0800a130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a130:	f3ef 8009 	mrs	r0, PSP
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	4b15      	ldr	r3, [pc, #84]	@ (800a190 <pxCurrentTCBConst>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	f01e 0f10 	tst.w	lr, #16
 800a140:	bf08      	it	eq
 800a142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	6010      	str	r0, [r2, #0]
 800a14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a154:	f380 8811 	msr	BASEPRI, r0
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f7fe ff88 	bl	8009074 <vTaskSwitchContext>
 800a164:	f04f 0000 	mov.w	r0, #0
 800a168:	f380 8811 	msr	BASEPRI, r0
 800a16c:	bc09      	pop	{r0, r3}
 800a16e:	6819      	ldr	r1, [r3, #0]
 800a170:	6808      	ldr	r0, [r1, #0]
 800a172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a176:	f01e 0f10 	tst.w	lr, #16
 800a17a:	bf08      	it	eq
 800a17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a180:	f380 8809 	msr	PSP, r0
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w

0800a190 <pxCurrentTCBConst>:
 800a190:	20005854 	.word	0x20005854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1b2:	f7fe fea5 	bl	8008f00 <xTaskIncrementTick>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1bc:	4b06      	ldr	r3, [pc, #24]	@ (800a1d8 <xPortSysTickHandler+0x40>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f383 8811 	msr	BASEPRI, r3
}
 800a1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <vPortSetupTimerInterrupt+0x38>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a218 <vPortSetupTimerInterrupt+0x3c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a0a      	ldr	r2, [pc, #40]	@ (800a21c <vPortSetupTimerInterrupt+0x40>)
 800a1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f6:	099b      	lsrs	r3, r3, #6
 800a1f8:	4a09      	ldr	r2, [pc, #36]	@ (800a220 <vPortSetupTimerInterrupt+0x44>)
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1fe:	4b04      	ldr	r3, [pc, #16]	@ (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a200:	2207      	movs	r2, #7
 800a202:	601a      	str	r2, [r3, #0]
}
 800a204:	bf00      	nop
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	e000e010 	.word	0xe000e010
 800a214:	e000e018 	.word	0xe000e018
 800a218:	20000004 	.word	0x20000004
 800a21c:	10624dd3 	.word	0x10624dd3
 800a220:	e000e014 	.word	0xe000e014

0800a224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a224:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a234 <vPortEnableVFP+0x10>
 800a228:	6801      	ldr	r1, [r0, #0]
 800a22a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a22e:	6001      	str	r1, [r0, #0]
 800a230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a232:	bf00      	nop
 800a234:	e000ed88 	.word	0xe000ed88

0800a238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a23e:	f3ef 8305 	mrs	r3, IPSR
 800a242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b0f      	cmp	r3, #15
 800a248:	d915      	bls.n	800a276 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a24a:	4a18      	ldr	r2, [pc, #96]	@ (800a2ac <vPortValidateInterruptPriority+0x74>)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4413      	add	r3, r2
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a254:	4b16      	ldr	r3, [pc, #88]	@ (800a2b0 <vPortValidateInterruptPriority+0x78>)
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	7afa      	ldrb	r2, [r7, #11]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d20b      	bcs.n	800a276 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	607b      	str	r3, [r7, #4]
}
 800a270:	bf00      	nop
 800a272:	bf00      	nop
 800a274:	e7fd      	b.n	800a272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a276:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b4 <vPortValidateInterruptPriority+0x7c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a27e:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b8 <vPortValidateInterruptPriority+0x80>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d90b      	bls.n	800a29e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	603b      	str	r3, [r7, #0]
}
 800a298:	bf00      	nop
 800a29a:	bf00      	nop
 800a29c:	e7fd      	b.n	800a29a <vPortValidateInterruptPriority+0x62>
	}
 800a29e:	bf00      	nop
 800a2a0:	3714      	adds	r7, #20
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	e000e3f0 	.word	0xe000e3f0
 800a2b0:	20005e80 	.word	0x20005e80
 800a2b4:	e000ed0c 	.word	0xe000ed0c
 800a2b8:	20005e84 	.word	0x20005e84

0800a2bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08a      	sub	sp, #40	@ 0x28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2c8:	f7fe fd5e 	bl	8008d88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2cc:	4b5c      	ldr	r3, [pc, #368]	@ (800a440 <pvPortMalloc+0x184>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2d4:	f000 f924 	bl	800a520 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2d8:	4b5a      	ldr	r3, [pc, #360]	@ (800a444 <pvPortMalloc+0x188>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4013      	ands	r3, r2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f040 8095 	bne.w	800a410 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d01e      	beq.n	800a32a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a2ec:	2208      	movs	r2, #8
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d015      	beq.n	800a32a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f023 0307 	bic.w	r3, r3, #7
 800a304:	3308      	adds	r3, #8
 800a306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f003 0307 	and.w	r3, r3, #7
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00b      	beq.n	800a32a <pvPortMalloc+0x6e>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	617b      	str	r3, [r7, #20]
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop
 800a328:	e7fd      	b.n	800a326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d06f      	beq.n	800a410 <pvPortMalloc+0x154>
 800a330:	4b45      	ldr	r3, [pc, #276]	@ (800a448 <pvPortMalloc+0x18c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	429a      	cmp	r2, r3
 800a338:	d86a      	bhi.n	800a410 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a33a:	4b44      	ldr	r3, [pc, #272]	@ (800a44c <pvPortMalloc+0x190>)
 800a33c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a33e:	4b43      	ldr	r3, [pc, #268]	@ (800a44c <pvPortMalloc+0x190>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a344:	e004      	b.n	800a350 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	429a      	cmp	r2, r3
 800a358:	d903      	bls.n	800a362 <pvPortMalloc+0xa6>
 800a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1f1      	bne.n	800a346 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a362:	4b37      	ldr	r3, [pc, #220]	@ (800a440 <pvPortMalloc+0x184>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a368:	429a      	cmp	r2, r3
 800a36a:	d051      	beq.n	800a410 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2208      	movs	r2, #8
 800a372:	4413      	add	r3, r2
 800a374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	1ad2      	subs	r2, r2, r3
 800a386:	2308      	movs	r3, #8
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d920      	bls.n	800a3d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4413      	add	r3, r2
 800a394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	f003 0307 	and.w	r3, r3, #7
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00b      	beq.n	800a3b8 <pvPortMalloc+0xfc>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	613b      	str	r3, [r7, #16]
}
 800a3b2:	bf00      	nop
 800a3b4:	bf00      	nop
 800a3b6:	e7fd      	b.n	800a3b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	1ad2      	subs	r2, r2, r3
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3ca:	69b8      	ldr	r0, [r7, #24]
 800a3cc:	f000 f90a 	bl	800a5e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	4a1b      	ldr	r2, [pc, #108]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3de:	4b1a      	ldr	r3, [pc, #104]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a450 <pvPortMalloc+0x194>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d203      	bcs.n	800a3f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3ea:	4b17      	ldr	r3, [pc, #92]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a18      	ldr	r2, [pc, #96]	@ (800a450 <pvPortMalloc+0x194>)
 800a3f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	4b13      	ldr	r3, [pc, #76]	@ (800a444 <pvPortMalloc+0x188>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a406:	4b13      	ldr	r3, [pc, #76]	@ (800a454 <pvPortMalloc+0x198>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3301      	adds	r3, #1
 800a40c:	4a11      	ldr	r2, [pc, #68]	@ (800a454 <pvPortMalloc+0x198>)
 800a40e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a410:	f7fe fcc8 	bl	8008da4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00b      	beq.n	800a436 <pvPortMalloc+0x17a>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	60fb      	str	r3, [r7, #12]
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	e7fd      	b.n	800a432 <pvPortMalloc+0x176>
	return pvReturn;
 800a436:	69fb      	ldr	r3, [r7, #28]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3728      	adds	r7, #40	@ 0x28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20006a90 	.word	0x20006a90
 800a444:	20006aa4 	.word	0x20006aa4
 800a448:	20006a94 	.word	0x20006a94
 800a44c:	20006a88 	.word	0x20006a88
 800a450:	20006a98 	.word	0x20006a98
 800a454:	20006a9c 	.word	0x20006a9c

0800a458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d04f      	beq.n	800a50a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a46a:	2308      	movs	r3, #8
 800a46c:	425b      	negs	r3, r3
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	4413      	add	r3, r2
 800a472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	4b25      	ldr	r3, [pc, #148]	@ (800a514 <vPortFree+0xbc>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4013      	ands	r3, r2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10b      	bne.n	800a49e <vPortFree+0x46>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	60fb      	str	r3, [r7, #12]
}
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	e7fd      	b.n	800a49a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00b      	beq.n	800a4be <vPortFree+0x66>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	60bb      	str	r3, [r7, #8]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	4b14      	ldr	r3, [pc, #80]	@ (800a514 <vPortFree+0xbc>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d01e      	beq.n	800a50a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d11a      	bne.n	800a50a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a514 <vPortFree+0xbc>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	43db      	mvns	r3, r3
 800a4de:	401a      	ands	r2, r3
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4e4:	f7fe fc50 	bl	8008d88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a518 <vPortFree+0xc0>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	4a09      	ldr	r2, [pc, #36]	@ (800a518 <vPortFree+0xc0>)
 800a4f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4f6:	6938      	ldr	r0, [r7, #16]
 800a4f8:	f000 f874 	bl	800a5e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4fc:	4b07      	ldr	r3, [pc, #28]	@ (800a51c <vPortFree+0xc4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3301      	adds	r3, #1
 800a502:	4a06      	ldr	r2, [pc, #24]	@ (800a51c <vPortFree+0xc4>)
 800a504:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a506:	f7fe fc4d 	bl	8008da4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a50a:	bf00      	nop
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20006aa4 	.word	0x20006aa4
 800a518:	20006a94 	.word	0x20006a94
 800a51c:	20006aa0 	.word	0x20006aa0

0800a520 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a526:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a52a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a52c:	4b27      	ldr	r3, [pc, #156]	@ (800a5cc <prvHeapInit+0xac>)
 800a52e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00c      	beq.n	800a554 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3307      	adds	r3, #7
 800a53e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f023 0307 	bic.w	r3, r3, #7
 800a546:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	4a1f      	ldr	r2, [pc, #124]	@ (800a5cc <prvHeapInit+0xac>)
 800a550:	4413      	add	r3, r2
 800a552:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a558:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d0 <prvHeapInit+0xb0>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a55e:	4b1c      	ldr	r3, [pc, #112]	@ (800a5d0 <prvHeapInit+0xb0>)
 800a560:	2200      	movs	r2, #0
 800a562:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	4413      	add	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a56c:	2208      	movs	r2, #8
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1a9b      	subs	r3, r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0307 	bic.w	r3, r3, #7
 800a57a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4a15      	ldr	r2, [pc, #84]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a580:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a582:	4b14      	ldr	r3, [pc, #80]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2200      	movs	r2, #0
 800a588:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a58a:	4b12      	ldr	r3, [pc, #72]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2200      	movs	r2, #0
 800a590:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	1ad2      	subs	r2, r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800a5d8 <prvHeapInit+0xb8>)
 800a5ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	4a09      	ldr	r2, [pc, #36]	@ (800a5dc <prvHeapInit+0xbc>)
 800a5b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5b8:	4b09      	ldr	r3, [pc, #36]	@ (800a5e0 <prvHeapInit+0xc0>)
 800a5ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a5be:	601a      	str	r2, [r3, #0]
}
 800a5c0:	bf00      	nop
 800a5c2:	3714      	adds	r7, #20
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	20005e88 	.word	0x20005e88
 800a5d0:	20006a88 	.word	0x20006a88
 800a5d4:	20006a90 	.word	0x20006a90
 800a5d8:	20006a98 	.word	0x20006a98
 800a5dc:	20006a94 	.word	0x20006a94
 800a5e0:	20006aa4 	.word	0x20006aa4

0800a5e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5ec:	4b28      	ldr	r3, [pc, #160]	@ (800a690 <prvInsertBlockIntoFreeList+0xac>)
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e002      	b.n	800a5f8 <prvInsertBlockIntoFreeList+0x14>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d8f7      	bhi.n	800a5f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	4413      	add	r3, r2
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	429a      	cmp	r2, r3
 800a612:	d108      	bne.n	800a626 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	441a      	add	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	441a      	add	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d118      	bne.n	800a66c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b15      	ldr	r3, [pc, #84]	@ (800a694 <prvInsertBlockIntoFreeList+0xb0>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d00d      	beq.n	800a662 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	441a      	add	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	e008      	b.n	800a674 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a662:	4b0c      	ldr	r3, [pc, #48]	@ (800a694 <prvInsertBlockIntoFreeList+0xb0>)
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e003      	b.n	800a674 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d002      	beq.n	800a682 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a682:	bf00      	nop
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	20006a88 	.word	0x20006a88
 800a694:	20006a90 	.word	0x20006a90

0800a698 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a698:	4b04      	ldr	r3, [pc, #16]	@ (800a6ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	b10a      	cbz	r2, 800a6a2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a69e:	4803      	ldr	r0, [pc, #12]	@ (800a6ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a6a0:	4770      	bx	lr
 800a6a2:	4a03      	ldr	r2, [pc, #12]	@ (800a6b0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a6a4:	4801      	ldr	r0, [pc, #4]	@ (800a6ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a6a6:	6812      	ldr	r2, [r2, #0]
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	4770      	bx	lr
 800a6ac:	200000ac 	.word	0x200000ac
 800a6b0:	200003b4 	.word	0x200003b4

0800a6b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a6b4:	4a02      	ldr	r2, [pc, #8]	@ (800a6c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a6b6:	4b03      	ldr	r3, [pc, #12]	@ (800a6c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a6b8:	6812      	ldr	r2, [r2, #0]
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	200003b4 	.word	0x200003b4
 800a6c4:	200000ac 	.word	0x200000ac

0800a6c8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a6c8:	f004 be64 	b.w	800f394 <geometry_msgs__msg__Twist__init>

0800a6cc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a6cc:	f004 be86 	b.w	800f3dc <geometry_msgs__msg__Twist__fini>

0800a6d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	f000 f819 	bl	800a708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a6d6:	4c07      	ldr	r4, [pc, #28]	@ (800a6f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a6d8:	60e0      	str	r0, [r4, #12]
 800a6da:	f000 f815 	bl	800a708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a6de:	4b06      	ldr	r3, [pc, #24]	@ (800a6f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a6e0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	b10a      	cbz	r2, 800a6ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a6e6:	4804      	ldr	r0, [pc, #16]	@ (800a6f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a6e8:	bd10      	pop	{r4, pc}
 800a6ea:	4a04      	ldr	r2, [pc, #16]	@ (800a6fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a6ec:	4802      	ldr	r0, [pc, #8]	@ (800a6f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a6ee:	6812      	ldr	r2, [r2, #0]
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	bd10      	pop	{r4, pc}
 800a6f4:	200000b8 	.word	0x200000b8
 800a6f8:	20000130 	.word	0x20000130
 800a6fc:	200003b8 	.word	0x200003b8

0800a700 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a700:	f004 be78 	b.w	800f3f4 <geometry_msgs__msg__Vector3__init>

0800a704 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a704:	f004 be7a 	b.w	800f3fc <geometry_msgs__msg__Vector3__fini>

0800a708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a708:	4b04      	ldr	r3, [pc, #16]	@ (800a71c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	b10a      	cbz	r2, 800a712 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a70e:	4803      	ldr	r0, [pc, #12]	@ (800a71c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a710:	4770      	bx	lr
 800a712:	4a03      	ldr	r2, [pc, #12]	@ (800a720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a714:	4801      	ldr	r0, [pc, #4]	@ (800a71c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a716:	6812      	ldr	r2, [r2, #0]
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	4770      	bx	lr
 800a71c:	200001f0 	.word	0x200001f0
 800a720:	200003b8 	.word	0x200003b8

0800a724 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	4604      	mov	r4, r0
 800a728:	b148      	cbz	r0, 800a73e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a72a:	460d      	mov	r5, r1
 800a72c:	f000 f860 	bl	800a7f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a730:	4606      	mov	r6, r0
 800a732:	1829      	adds	r1, r5, r0
 800a734:	f104 0018 	add.w	r0, r4, #24
 800a738:	f000 f85a 	bl	800a7f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a73c:	4430      	add	r0, r6
 800a73e:	bd70      	pop	{r4, r5, r6, pc}

0800a740 <_Twist__cdr_deserialize>:
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	460c      	mov	r4, r1
 800a744:	b189      	cbz	r1, 800a76a <_Twist__cdr_deserialize+0x2a>
 800a746:	4605      	mov	r5, r0
 800a748:	f000 f8de 	bl	800a908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a74c:	6843      	ldr	r3, [r0, #4]
 800a74e:	4621      	mov	r1, r4
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	4628      	mov	r0, r5
 800a754:	4798      	blx	r3
 800a756:	f000 f8d7 	bl	800a908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a75a:	6843      	ldr	r3, [r0, #4]
 800a75c:	f104 0118 	add.w	r1, r4, #24
 800a760:	4628      	mov	r0, r5
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a768:	4718      	bx	r3
 800a76a:	4608      	mov	r0, r1
 800a76c:	bd70      	pop	{r4, r5, r6, pc}
 800a76e:	bf00      	nop

0800a770 <_Twist__cdr_serialize>:
 800a770:	b510      	push	{r4, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	9101      	str	r1, [sp, #4]
 800a776:	b190      	cbz	r0, 800a79e <_Twist__cdr_serialize+0x2e>
 800a778:	4604      	mov	r4, r0
 800a77a:	f000 f8c5 	bl	800a908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a77e:	6843      	ldr	r3, [r0, #4]
 800a780:	9901      	ldr	r1, [sp, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	4620      	mov	r0, r4
 800a786:	4798      	blx	r3
 800a788:	f000 f8be 	bl	800a908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a78c:	6843      	ldr	r3, [r0, #4]
 800a78e:	9901      	ldr	r1, [sp, #4]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	f104 0018 	add.w	r0, r4, #24
 800a796:	b002      	add	sp, #8
 800a798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a79c:	4718      	bx	r3
 800a79e:	b002      	add	sp, #8
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	bf00      	nop

0800a7a4 <_Twist__get_serialized_size>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	b148      	cbz	r0, 800a7be <_Twist__get_serialized_size+0x1a>
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	f000 f820 	bl	800a7f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	f104 0018 	add.w	r0, r4, #24
 800a7b8:	f000 f81a 	bl	800a7f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a7bc:	4428      	add	r0, r5
 800a7be:	bd38      	pop	{r3, r4, r5, pc}

0800a7c0 <_Twist__max_serialized_size>:
 800a7c0:	b510      	push	{r4, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	f10d 0007 	add.w	r0, sp, #7
 800a7cc:	f88d 3007 	strb.w	r3, [sp, #7]
 800a7d0:	f000 f87e 	bl	800a8d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	f10d 0007 	add.w	r0, sp, #7
 800a7dc:	f000 f878 	bl	800a8d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a7e0:	4420      	add	r0, r4
 800a7e2:	b002      	add	sp, #8
 800a7e4:	bd10      	pop	{r4, pc}
 800a7e6:	bf00      	nop

0800a7e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a7e8:	4800      	ldr	r0, [pc, #0]	@ (800a7ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a7ea:	4770      	bx	lr
 800a7ec:	200001fc 	.word	0x200001fc

0800a7f0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a7f0:	b1b8      	cbz	r0, 800a822 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a7f2:	b538      	push	{r3, r4, r5, lr}
 800a7f4:	460d      	mov	r5, r1
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	2108      	movs	r1, #8
 800a7fa:	f001 fcb1 	bl	800c160 <ucdr_alignment>
 800a7fe:	f105 0308 	add.w	r3, r5, #8
 800a802:	181c      	adds	r4, r3, r0
 800a804:	2108      	movs	r1, #8
 800a806:	4620      	mov	r0, r4
 800a808:	f001 fcaa 	bl	800c160 <ucdr_alignment>
 800a80c:	3008      	adds	r0, #8
 800a80e:	4404      	add	r4, r0
 800a810:	2108      	movs	r1, #8
 800a812:	4620      	mov	r0, r4
 800a814:	f001 fca4 	bl	800c160 <ucdr_alignment>
 800a818:	f1c5 0508 	rsb	r5, r5, #8
 800a81c:	4428      	add	r0, r5
 800a81e:	4420      	add	r0, r4
 800a820:	bd38      	pop	{r3, r4, r5, pc}
 800a822:	4770      	bx	lr

0800a824 <_Vector3__cdr_deserialize>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	460c      	mov	r4, r1
 800a828:	b171      	cbz	r1, 800a848 <_Vector3__cdr_deserialize+0x24>
 800a82a:	4605      	mov	r5, r0
 800a82c:	f001 faac 	bl	800bd88 <ucdr_deserialize_double>
 800a830:	f104 0108 	add.w	r1, r4, #8
 800a834:	4628      	mov	r0, r5
 800a836:	f001 faa7 	bl	800bd88 <ucdr_deserialize_double>
 800a83a:	f104 0110 	add.w	r1, r4, #16
 800a83e:	4628      	mov	r0, r5
 800a840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a844:	f001 baa0 	b.w	800bd88 <ucdr_deserialize_double>
 800a848:	4608      	mov	r0, r1
 800a84a:	bd38      	pop	{r3, r4, r5, pc}

0800a84c <_Vector3__cdr_serialize>:
 800a84c:	b198      	cbz	r0, 800a876 <_Vector3__cdr_serialize+0x2a>
 800a84e:	b538      	push	{r3, r4, r5, lr}
 800a850:	ed90 0b00 	vldr	d0, [r0]
 800a854:	460d      	mov	r5, r1
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	f001 f8f3 	bl	800ba44 <ucdr_serialize_double>
 800a85e:	ed94 0b02 	vldr	d0, [r4, #8]
 800a862:	4628      	mov	r0, r5
 800a864:	f001 f8ee 	bl	800ba44 <ucdr_serialize_double>
 800a868:	ed94 0b04 	vldr	d0, [r4, #16]
 800a86c:	4628      	mov	r0, r5
 800a86e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a872:	f001 b8e7 	b.w	800ba44 <ucdr_serialize_double>
 800a876:	4770      	bx	lr

0800a878 <_Vector3__get_serialized_size>:
 800a878:	b198      	cbz	r0, 800a8a2 <_Vector3__get_serialized_size+0x2a>
 800a87a:	b510      	push	{r4, lr}
 800a87c:	2108      	movs	r1, #8
 800a87e:	2000      	movs	r0, #0
 800a880:	f001 fc6e 	bl	800c160 <ucdr_alignment>
 800a884:	f100 0408 	add.w	r4, r0, #8
 800a888:	2108      	movs	r1, #8
 800a88a:	4620      	mov	r0, r4
 800a88c:	f001 fc68 	bl	800c160 <ucdr_alignment>
 800a890:	3008      	adds	r0, #8
 800a892:	4404      	add	r4, r0
 800a894:	2108      	movs	r1, #8
 800a896:	4620      	mov	r0, r4
 800a898:	f001 fc62 	bl	800c160 <ucdr_alignment>
 800a89c:	3008      	adds	r0, #8
 800a89e:	4420      	add	r0, r4
 800a8a0:	bd10      	pop	{r4, pc}
 800a8a2:	4770      	bx	lr

0800a8a4 <_Vector3__max_serialized_size>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	2108      	movs	r1, #8
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	f001 fc59 	bl	800c160 <ucdr_alignment>
 800a8ae:	f100 0508 	add.w	r5, r0, #8
 800a8b2:	2108      	movs	r1, #8
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f001 fc53 	bl	800c160 <ucdr_alignment>
 800a8ba:	f100 0408 	add.w	r4, r0, #8
 800a8be:	442c      	add	r4, r5
 800a8c0:	2108      	movs	r1, #8
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f001 fc4c 	bl	800c160 <ucdr_alignment>
 800a8c8:	3008      	adds	r0, #8
 800a8ca:	4420      	add	r0, r4
 800a8cc:	bd38      	pop	{r3, r4, r5, pc}
 800a8ce:	bf00      	nop

0800a8d0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	7003      	strb	r3, [r0, #0]
 800a8d8:	2108      	movs	r1, #8
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f001 fc40 	bl	800c160 <ucdr_alignment>
 800a8e0:	f104 0508 	add.w	r5, r4, #8
 800a8e4:	1946      	adds	r6, r0, r5
 800a8e6:	2108      	movs	r1, #8
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f001 fc39 	bl	800c160 <ucdr_alignment>
 800a8ee:	f100 0508 	add.w	r5, r0, #8
 800a8f2:	4435      	add	r5, r6
 800a8f4:	2108      	movs	r1, #8
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f001 fc32 	bl	800c160 <ucdr_alignment>
 800a8fc:	f1c4 0408 	rsb	r4, r4, #8
 800a900:	4420      	add	r0, r4
 800a902:	4428      	add	r0, r5
 800a904:	bd70      	pop	{r4, r5, r6, pc}
 800a906:	bf00      	nop

0800a908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a908:	4800      	ldr	r0, [pc, #0]	@ (800a90c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a90a:	4770      	bx	lr
 800a90c:	20000224 	.word	0x20000224

0800a910 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800a910:	4b04      	ldr	r3, [pc, #16]	@ (800a924 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	b10a      	cbz	r2, 800a91a <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800a916:	4803      	ldr	r0, [pc, #12]	@ (800a924 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800a918:	4770      	bx	lr
 800a91a:	4a03      	ldr	r2, [pc, #12]	@ (800a928 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800a91c:	4801      	ldr	r0, [pc, #4]	@ (800a924 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800a91e:	6812      	ldr	r2, [r2, #0]
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	4770      	bx	lr
 800a924:	20000254 	.word	0x20000254
 800a928:	200003b4 	.word	0x200003b4

0800a92c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800a92c:	4b04      	ldr	r3, [pc, #16]	@ (800a940 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800a92e:	4805      	ldr	r0, [pc, #20]	@ (800a944 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800a930:	4905      	ldr	r1, [pc, #20]	@ (800a948 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800a932:	4a06      	ldr	r2, [pc, #24]	@ (800a94c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6003      	str	r3, [r0, #0]
 800a938:	600b      	str	r3, [r1, #0]
 800a93a:	6013      	str	r3, [r2, #0]
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	200003b4 	.word	0x200003b4
 800a944:	20000270 	.word	0x20000270
 800a948:	2000027c 	.word	0x2000027c
 800a94c:	20000254 	.word	0x20000254

0800a950 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800a950:	f004 be20 	b.w	800f594 <imu_interfaces__srv__ImuCalibration_Request__init>

0800a954 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800a954:	f004 be30 	b.w	800f5b8 <imu_interfaces__srv__ImuCalibration_Request__fini>

0800a958 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800a958:	f004 be32 	b.w	800f5c0 <imu_interfaces__srv__ImuCalibration_Response__init>

0800a95c <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800a95c:	f004 be34 	b.w	800f5c8 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800a960 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800a960:	b508      	push	{r3, lr}
 800a962:	f004 fae1 	bl	800ef28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800a966:	4b06      	ldr	r3, [pc, #24]	@ (800a980 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a968:	4906      	ldr	r1, [pc, #24]	@ (800a984 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	60c8      	str	r0, [r1, #12]
 800a96e:	b10a      	cbz	r2, 800a974 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800a970:	4803      	ldr	r0, [pc, #12]	@ (800a980 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a972:	bd08      	pop	{r3, pc}
 800a974:	4a04      	ldr	r2, [pc, #16]	@ (800a988 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800a976:	4802      	ldr	r0, [pc, #8]	@ (800a980 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a978:	6812      	ldr	r2, [r2, #0]
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	bd08      	pop	{r3, pc}
 800a97e:	bf00      	nop
 800a980:	200002c4 	.word	0x200002c4
 800a984:	20000288 	.word	0x20000288
 800a988:	200003b8 	.word	0x200003b8

0800a98c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800a98c:	4b04      	ldr	r3, [pc, #16]	@ (800a9a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	b10a      	cbz	r2, 800a996 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800a992:	4803      	ldr	r0, [pc, #12]	@ (800a9a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800a994:	4770      	bx	lr
 800a996:	4a03      	ldr	r2, [pc, #12]	@ (800a9a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800a998:	4801      	ldr	r0, [pc, #4]	@ (800a9a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800a99a:	6812      	ldr	r2, [r2, #0]
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	4770      	bx	lr
 800a9a0:	2000030c 	.word	0x2000030c
 800a9a4:	200003b8 	.word	0x200003b8

0800a9a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800a9a8:	4b16      	ldr	r3, [pc, #88]	@ (800aa04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	b132      	cbz	r2, 800a9be <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800a9b0:	685c      	ldr	r4, [r3, #4]
 800a9b2:	68a3      	ldr	r3, [r4, #8]
 800a9b4:	b153      	cbz	r3, 800a9cc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800a9b6:	68e3      	ldr	r3, [r4, #12]
 800a9b8:	b1a3      	cbz	r3, 800a9e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800a9ba:	4812      	ldr	r0, [pc, #72]	@ (800aa04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800a9bc:	bd10      	pop	{r4, pc}
 800a9be:	4a12      	ldr	r2, [pc, #72]	@ (800aa08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800a9c0:	685c      	ldr	r4, [r3, #4]
 800a9c2:	6812      	ldr	r2, [r2, #0]
 800a9c4:	601a      	str	r2, [r3, #0]
 800a9c6:	68a3      	ldr	r3, [r4, #8]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1f4      	bne.n	800a9b6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800a9cc:	f004 faac 	bl	800ef28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800a9d0:	4b0e      	ldr	r3, [pc, #56]	@ (800aa0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800a9d2:	490f      	ldr	r1, [pc, #60]	@ (800aa10 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	60c8      	str	r0, [r1, #12]
 800a9d8:	b17a      	cbz	r2, 800a9fa <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	60a3      	str	r3, [r4, #8]
 800a9de:	68e3      	ldr	r3, [r4, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1ea      	bne.n	800a9ba <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800a9e4:	4b0b      	ldr	r3, [pc, #44]	@ (800aa14 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	b11a      	cbz	r2, 800a9f2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	4805      	ldr	r0, [pc, #20]	@ (800aa04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800a9ee:	60e3      	str	r3, [r4, #12]
 800a9f0:	bd10      	pop	{r4, pc}
 800a9f2:	4a05      	ldr	r2, [pc, #20]	@ (800aa08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800a9f4:	6812      	ldr	r2, [r2, #0]
 800a9f6:	601a      	str	r2, [r3, #0]
 800a9f8:	e7f7      	b.n	800a9ea <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800a9fa:	4a03      	ldr	r2, [pc, #12]	@ (800aa08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800a9fc:	6812      	ldr	r2, [r2, #0]
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	e7eb      	b.n	800a9da <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800aa02:	bf00      	nop
 800aa04:	20000328 	.word	0x20000328
 800aa08:	200003b8 	.word	0x200003b8
 800aa0c:	200002c4 	.word	0x200002c4
 800aa10:	20000288 	.word	0x20000288
 800aa14:	2000030c 	.word	0x2000030c

0800aa18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800aa18:	4800      	ldr	r0, [pc, #0]	@ (800aa1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800aa1a:	4770      	bx	lr
 800aa1c:	20000350 	.word	0x20000350

0800aa20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800aa20:	4800      	ldr	r0, [pc, #0]	@ (800aa24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800aa22:	4770      	bx	lr
 800aa24:	2000035c 	.word	0x2000035c

0800aa28 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800aa28:	b108      	cbz	r0, 800aa2e <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800aa2a:	f004 bacf 	b.w	800efcc <get_serialized_size_sensor_msgs__msg__Imu>
 800aa2e:	4770      	bx	lr

0800aa30 <_ImuCalibration_Request__max_serialized_size>:
 800aa30:	b500      	push	{lr}
 800aa32:	b083      	sub	sp, #12
 800aa34:	2301      	movs	r3, #1
 800aa36:	2100      	movs	r1, #0
 800aa38:	f10d 0007 	add.w	r0, sp, #7
 800aa3c:	f88d 3007 	strb.w	r3, [sp, #7]
 800aa40:	f004 fb42 	bl	800f0c8 <max_serialized_size_sensor_msgs__msg__Imu>
 800aa44:	b003      	add	sp, #12
 800aa46:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa4a:	bf00      	nop

0800aa4c <_ImuCalibration_Response__max_serialized_size>:
 800aa4c:	b508      	push	{r3, lr}
 800aa4e:	2101      	movs	r1, #1
 800aa50:	2000      	movs	r0, #0
 800aa52:	f001 fb85 	bl	800c160 <ucdr_alignment>
 800aa56:	3001      	adds	r0, #1
 800aa58:	bd08      	pop	{r3, pc}
 800aa5a:	bf00      	nop

0800aa5c <_ImuCalibration_Response__cdr_deserialize>:
 800aa5c:	b109      	cbz	r1, 800aa62 <_ImuCalibration_Response__cdr_deserialize+0x6>
 800aa5e:	f000 b881 	b.w	800ab64 <ucdr_deserialize_bool>
 800aa62:	4608      	mov	r0, r1
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop

0800aa68 <_ImuCalibration_Request__get_serialized_size>:
 800aa68:	b110      	cbz	r0, 800aa70 <_ImuCalibration_Request__get_serialized_size+0x8>
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	f004 baae 	b.w	800efcc <get_serialized_size_sensor_msgs__msg__Imu>
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop

0800aa74 <_ImuCalibration_Request__cdr_deserialize>:
 800aa74:	b570      	push	{r4, r5, r6, lr}
 800aa76:	460c      	mov	r4, r1
 800aa78:	b149      	cbz	r1, 800aa8e <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	f004 fb5e 	bl	800f13c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800aa80:	6843      	ldr	r3, [r0, #4]
 800aa82:	4621      	mov	r1, r4
 800aa84:	4628      	mov	r0, r5
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa8c:	4718      	bx	r3
 800aa8e:	4608      	mov	r0, r1
 800aa90:	bd70      	pop	{r4, r5, r6, pc}
 800aa92:	bf00      	nop

0800aa94 <_ImuCalibration_Request__cdr_serialize>:
 800aa94:	b158      	cbz	r0, 800aaae <_ImuCalibration_Request__cdr_serialize+0x1a>
 800aa96:	b570      	push	{r4, r5, r6, lr}
 800aa98:	460d      	mov	r5, r1
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	f004 fb4e 	bl	800f13c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800aaa0:	6843      	ldr	r3, [r0, #4]
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aaac:	4718      	bx	r3
 800aaae:	4770      	bx	lr

0800aab0 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800aab0:	b138      	cbz	r0, 800aac2 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800aab2:	b508      	push	{r3, lr}
 800aab4:	460b      	mov	r3, r1
 800aab6:	4618      	mov	r0, r3
 800aab8:	2101      	movs	r1, #1
 800aaba:	f001 fb51 	bl	800c160 <ucdr_alignment>
 800aabe:	3001      	adds	r0, #1
 800aac0:	bd08      	pop	{r3, pc}
 800aac2:	4770      	bx	lr

0800aac4 <_ImuCalibration_Response__cdr_serialize>:
 800aac4:	460a      	mov	r2, r1
 800aac6:	b118      	cbz	r0, 800aad0 <_ImuCalibration_Response__cdr_serialize+0xc>
 800aac8:	7801      	ldrb	r1, [r0, #0]
 800aaca:	4610      	mov	r0, r2
 800aacc:	f000 b834 	b.w	800ab38 <ucdr_serialize_bool>
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop

0800aad4 <_ImuCalibration_Response__get_serialized_size>:
 800aad4:	b130      	cbz	r0, 800aae4 <_ImuCalibration_Response__get_serialized_size+0x10>
 800aad6:	b508      	push	{r3, lr}
 800aad8:	2101      	movs	r1, #1
 800aada:	2000      	movs	r0, #0
 800aadc:	f001 fb40 	bl	800c160 <ucdr_alignment>
 800aae0:	3001      	adds	r0, #1
 800aae2:	bd08      	pop	{r3, pc}
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop

0800aae8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800aae8:	4800      	ldr	r0, [pc, #0]	@ (800aaec <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800aaea:	4770      	bx	lr
 800aaec:	20000344 	.word	0x20000344

0800aaf0 <micro_ros_string_utilities_init>:
 800aaf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf4:	b086      	sub	sp, #24
 800aaf6:	460f      	mov	r7, r1
 800aaf8:	4604      	mov	r4, r0
 800aafa:	a801      	add	r0, sp, #4
 800aafc:	f002 fd74 	bl	800d5e8 <rcutils_get_default_allocator>
 800ab00:	4638      	mov	r0, r7
 800ab02:	f7f5 fb97 	bl	8000234 <strlen>
 800ab06:	f100 0801 	add.w	r8, r0, #1
 800ab0a:	9b01      	ldr	r3, [sp, #4]
 800ab0c:	9905      	ldr	r1, [sp, #20]
 800ab0e:	4605      	mov	r5, r0
 800ab10:	4640      	mov	r0, r8
 800ab12:	4798      	blx	r3
 800ab14:	4642      	mov	r2, r8
 800ab16:	4606      	mov	r6, r0
 800ab18:	2100      	movs	r1, #0
 800ab1a:	f00e fbab 	bl	8019274 <memset>
 800ab1e:	462a      	mov	r2, r5
 800ab20:	4639      	mov	r1, r7
 800ab22:	4630      	mov	r0, r6
 800ab24:	f00e fc6f 	bl	8019406 <memcpy>
 800ab28:	4620      	mov	r0, r4
 800ab2a:	e9c4 6500 	strd	r6, r5, [r4]
 800ab2e:	f8c4 8008 	str.w	r8, [r4, #8]
 800ab32:	b006      	add	sp, #24
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ab38 <ucdr_serialize_bool>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	460d      	mov	r5, r1
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	4604      	mov	r4, r0
 800ab40:	f001 fac2 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800ab44:	b148      	cbz	r0, 800ab5a <ucdr_serialize_bool+0x22>
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	701d      	strb	r5, [r3, #0]
 800ab4a:	68a2      	ldr	r2, [r4, #8]
 800ab4c:	6923      	ldr	r3, [r4, #16]
 800ab4e:	2101      	movs	r1, #1
 800ab50:	440a      	add	r2, r1
 800ab52:	440b      	add	r3, r1
 800ab54:	60a2      	str	r2, [r4, #8]
 800ab56:	6123      	str	r3, [r4, #16]
 800ab58:	7561      	strb	r1, [r4, #21]
 800ab5a:	7da0      	ldrb	r0, [r4, #22]
 800ab5c:	f080 0001 	eor.w	r0, r0, #1
 800ab60:	bd38      	pop	{r3, r4, r5, pc}
 800ab62:	bf00      	nop

0800ab64 <ucdr_deserialize_bool>:
 800ab64:	b538      	push	{r3, r4, r5, lr}
 800ab66:	460d      	mov	r5, r1
 800ab68:	2101      	movs	r1, #1
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	f001 faac 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800ab70:	b160      	cbz	r0, 800ab8c <ucdr_deserialize_bool+0x28>
 800ab72:	68a2      	ldr	r2, [r4, #8]
 800ab74:	6923      	ldr	r3, [r4, #16]
 800ab76:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ab7a:	3900      	subs	r1, #0
 800ab7c:	bf18      	it	ne
 800ab7e:	2101      	movne	r1, #1
 800ab80:	7029      	strb	r1, [r5, #0]
 800ab82:	3301      	adds	r3, #1
 800ab84:	2101      	movs	r1, #1
 800ab86:	60a2      	str	r2, [r4, #8]
 800ab88:	6123      	str	r3, [r4, #16]
 800ab8a:	7561      	strb	r1, [r4, #21]
 800ab8c:	7da0      	ldrb	r0, [r4, #22]
 800ab8e:	f080 0001 	eor.w	r0, r0, #1
 800ab92:	bd38      	pop	{r3, r4, r5, pc}

0800ab94 <ucdr_serialize_uint8_t>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	460d      	mov	r5, r1
 800ab98:	2101      	movs	r1, #1
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	f001 fa94 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800aba0:	b148      	cbz	r0, 800abb6 <ucdr_serialize_uint8_t+0x22>
 800aba2:	68a3      	ldr	r3, [r4, #8]
 800aba4:	701d      	strb	r5, [r3, #0]
 800aba6:	68a2      	ldr	r2, [r4, #8]
 800aba8:	6923      	ldr	r3, [r4, #16]
 800abaa:	2101      	movs	r1, #1
 800abac:	440a      	add	r2, r1
 800abae:	440b      	add	r3, r1
 800abb0:	60a2      	str	r2, [r4, #8]
 800abb2:	6123      	str	r3, [r4, #16]
 800abb4:	7561      	strb	r1, [r4, #21]
 800abb6:	7da0      	ldrb	r0, [r4, #22]
 800abb8:	f080 0001 	eor.w	r0, r0, #1
 800abbc:	bd38      	pop	{r3, r4, r5, pc}
 800abbe:	bf00      	nop

0800abc0 <ucdr_deserialize_uint8_t>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	460d      	mov	r5, r1
 800abc4:	2101      	movs	r1, #1
 800abc6:	4604      	mov	r4, r0
 800abc8:	f001 fa7e 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800abcc:	b150      	cbz	r0, 800abe4 <ucdr_deserialize_uint8_t+0x24>
 800abce:	68a3      	ldr	r3, [r4, #8]
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	702b      	strb	r3, [r5, #0]
 800abd4:	68a2      	ldr	r2, [r4, #8]
 800abd6:	6923      	ldr	r3, [r4, #16]
 800abd8:	2101      	movs	r1, #1
 800abda:	440a      	add	r2, r1
 800abdc:	440b      	add	r3, r1
 800abde:	60a2      	str	r2, [r4, #8]
 800abe0:	6123      	str	r3, [r4, #16]
 800abe2:	7561      	strb	r1, [r4, #21]
 800abe4:	7da0      	ldrb	r0, [r4, #22]
 800abe6:	f080 0001 	eor.w	r0, r0, #1
 800abea:	bd38      	pop	{r3, r4, r5, pc}

0800abec <ucdr_serialize_uint16_t>:
 800abec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf0:	b082      	sub	sp, #8
 800abf2:	460b      	mov	r3, r1
 800abf4:	2102      	movs	r1, #2
 800abf6:	4604      	mov	r4, r0
 800abf8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800abfc:	f001 fab8 	bl	800c170 <ucdr_buffer_alignment>
 800ac00:	4601      	mov	r1, r0
 800ac02:	4620      	mov	r0, r4
 800ac04:	7d67      	ldrb	r7, [r4, #21]
 800ac06:	f001 faf7 	bl	800c1f8 <ucdr_advance_buffer>
 800ac0a:	2102      	movs	r1, #2
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f001 fa4f 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800ac12:	bb78      	cbnz	r0, 800ac74 <ucdr_serialize_uint16_t+0x88>
 800ac14:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ac18:	42ab      	cmp	r3, r5
 800ac1a:	d926      	bls.n	800ac6a <ucdr_serialize_uint16_t+0x7e>
 800ac1c:	1b5e      	subs	r6, r3, r5
 800ac1e:	60a3      	str	r3, [r4, #8]
 800ac20:	6923      	ldr	r3, [r4, #16]
 800ac22:	f1c6 0802 	rsb	r8, r6, #2
 800ac26:	4433      	add	r3, r6
 800ac28:	6123      	str	r3, [r4, #16]
 800ac2a:	4641      	mov	r1, r8
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f001 fa4b 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d03b      	beq.n	800acae <ucdr_serialize_uint16_t+0xc2>
 800ac36:	7d23      	ldrb	r3, [r4, #20]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d04a      	beq.n	800acd2 <ucdr_serialize_uint16_t+0xe6>
 800ac3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ac40:	702b      	strb	r3, [r5, #0]
 800ac42:	2e00      	cmp	r6, #0
 800ac44:	d040      	beq.n	800acc8 <ucdr_serialize_uint16_t+0xdc>
 800ac46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ac4a:	706b      	strb	r3, [r5, #1]
 800ac4c:	6923      	ldr	r3, [r4, #16]
 800ac4e:	68a2      	ldr	r2, [r4, #8]
 800ac50:	7da0      	ldrb	r0, [r4, #22]
 800ac52:	3302      	adds	r3, #2
 800ac54:	1b9e      	subs	r6, r3, r6
 800ac56:	4442      	add	r2, r8
 800ac58:	2302      	movs	r3, #2
 800ac5a:	f080 0001 	eor.w	r0, r0, #1
 800ac5e:	60a2      	str	r2, [r4, #8]
 800ac60:	6126      	str	r6, [r4, #16]
 800ac62:	7563      	strb	r3, [r4, #21]
 800ac64:	b002      	add	sp, #8
 800ac66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac6a:	2102      	movs	r1, #2
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f001 fa2b 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800ac72:	b190      	cbz	r0, 800ac9a <ucdr_serialize_uint16_t+0xae>
 800ac74:	7d23      	ldrb	r3, [r4, #20]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	68a3      	ldr	r3, [r4, #8]
 800ac7a:	d014      	beq.n	800aca6 <ucdr_serialize_uint16_t+0xba>
 800ac7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ac80:	701a      	strb	r2, [r3, #0]
 800ac82:	68a3      	ldr	r3, [r4, #8]
 800ac84:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac88:	705a      	strb	r2, [r3, #1]
 800ac8a:	68a2      	ldr	r2, [r4, #8]
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	3202      	adds	r2, #2
 800ac90:	3302      	adds	r3, #2
 800ac92:	2102      	movs	r1, #2
 800ac94:	60a2      	str	r2, [r4, #8]
 800ac96:	6123      	str	r3, [r4, #16]
 800ac98:	7561      	strb	r1, [r4, #21]
 800ac9a:	7da0      	ldrb	r0, [r4, #22]
 800ac9c:	f080 0001 	eor.w	r0, r0, #1
 800aca0:	b002      	add	sp, #8
 800aca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800acaa:	801a      	strh	r2, [r3, #0]
 800acac:	e7ed      	b.n	800ac8a <ucdr_serialize_uint16_t+0x9e>
 800acae:	68a2      	ldr	r2, [r4, #8]
 800acb0:	6923      	ldr	r3, [r4, #16]
 800acb2:	7da0      	ldrb	r0, [r4, #22]
 800acb4:	7567      	strb	r7, [r4, #21]
 800acb6:	1b92      	subs	r2, r2, r6
 800acb8:	1b9b      	subs	r3, r3, r6
 800acba:	f080 0001 	eor.w	r0, r0, #1
 800acbe:	60a2      	str	r2, [r4, #8]
 800acc0:	6123      	str	r3, [r4, #16]
 800acc2:	b002      	add	sp, #8
 800acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc8:	68a3      	ldr	r3, [r4, #8]
 800acca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800acce:	701a      	strb	r2, [r3, #0]
 800acd0:	e7bc      	b.n	800ac4c <ucdr_serialize_uint16_t+0x60>
 800acd2:	4628      	mov	r0, r5
 800acd4:	f10d 0506 	add.w	r5, sp, #6
 800acd8:	4629      	mov	r1, r5
 800acda:	4632      	mov	r2, r6
 800acdc:	f00e fb93 	bl	8019406 <memcpy>
 800ace0:	68a0      	ldr	r0, [r4, #8]
 800ace2:	4642      	mov	r2, r8
 800ace4:	19a9      	adds	r1, r5, r6
 800ace6:	f00e fb8e 	bl	8019406 <memcpy>
 800acea:	e7af      	b.n	800ac4c <ucdr_serialize_uint16_t+0x60>

0800acec <ucdr_serialize_endian_uint16_t>:
 800acec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acf0:	b083      	sub	sp, #12
 800acf2:	460d      	mov	r5, r1
 800acf4:	2102      	movs	r1, #2
 800acf6:	4604      	mov	r4, r0
 800acf8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800acfc:	f001 fa38 	bl	800c170 <ucdr_buffer_alignment>
 800ad00:	4601      	mov	r1, r0
 800ad02:	4620      	mov	r0, r4
 800ad04:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ad08:	f001 fa76 	bl	800c1f8 <ucdr_advance_buffer>
 800ad0c:	2102      	movs	r1, #2
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f001 f9ce 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800ad14:	bb70      	cbnz	r0, 800ad74 <ucdr_serialize_endian_uint16_t+0x88>
 800ad16:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ad1a:	42be      	cmp	r6, r7
 800ad1c:	d925      	bls.n	800ad6a <ucdr_serialize_endian_uint16_t+0x7e>
 800ad1e:	6923      	ldr	r3, [r4, #16]
 800ad20:	60a6      	str	r6, [r4, #8]
 800ad22:	1bf6      	subs	r6, r6, r7
 800ad24:	4433      	add	r3, r6
 800ad26:	f1c6 0902 	rsb	r9, r6, #2
 800ad2a:	6123      	str	r3, [r4, #16]
 800ad2c:	4649      	mov	r1, r9
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f001 f9ca 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d039      	beq.n	800adac <ucdr_serialize_endian_uint16_t+0xc0>
 800ad38:	2d01      	cmp	r5, #1
 800ad3a:	d04a      	beq.n	800add2 <ucdr_serialize_endian_uint16_t+0xe6>
 800ad3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ad40:	703b      	strb	r3, [r7, #0]
 800ad42:	2e00      	cmp	r6, #0
 800ad44:	d040      	beq.n	800adc8 <ucdr_serialize_endian_uint16_t+0xdc>
 800ad46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ad4a:	707b      	strb	r3, [r7, #1]
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	68a2      	ldr	r2, [r4, #8]
 800ad50:	7da0      	ldrb	r0, [r4, #22]
 800ad52:	3302      	adds	r3, #2
 800ad54:	444a      	add	r2, r9
 800ad56:	1b9b      	subs	r3, r3, r6
 800ad58:	2102      	movs	r1, #2
 800ad5a:	f080 0001 	eor.w	r0, r0, #1
 800ad5e:	60a2      	str	r2, [r4, #8]
 800ad60:	6123      	str	r3, [r4, #16]
 800ad62:	7561      	strb	r1, [r4, #21]
 800ad64:	b003      	add	sp, #12
 800ad66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad6a:	2102      	movs	r1, #2
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f001 f9ab 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800ad72:	b188      	cbz	r0, 800ad98 <ucdr_serialize_endian_uint16_t+0xac>
 800ad74:	2d01      	cmp	r5, #1
 800ad76:	68a3      	ldr	r3, [r4, #8]
 800ad78:	d014      	beq.n	800ada4 <ucdr_serialize_endian_uint16_t+0xb8>
 800ad7a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ad7e:	701a      	strb	r2, [r3, #0]
 800ad80:	68a3      	ldr	r3, [r4, #8]
 800ad82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad86:	705a      	strb	r2, [r3, #1]
 800ad88:	68a2      	ldr	r2, [r4, #8]
 800ad8a:	6923      	ldr	r3, [r4, #16]
 800ad8c:	3202      	adds	r2, #2
 800ad8e:	3302      	adds	r3, #2
 800ad90:	2102      	movs	r1, #2
 800ad92:	60a2      	str	r2, [r4, #8]
 800ad94:	6123      	str	r3, [r4, #16]
 800ad96:	7561      	strb	r1, [r4, #21]
 800ad98:	7da0      	ldrb	r0, [r4, #22]
 800ad9a:	f080 0001 	eor.w	r0, r0, #1
 800ad9e:	b003      	add	sp, #12
 800ada0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ada4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ada8:	801a      	strh	r2, [r3, #0]
 800adaa:	e7ed      	b.n	800ad88 <ucdr_serialize_endian_uint16_t+0x9c>
 800adac:	68a2      	ldr	r2, [r4, #8]
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	7da0      	ldrb	r0, [r4, #22]
 800adb2:	f884 8015 	strb.w	r8, [r4, #21]
 800adb6:	1b92      	subs	r2, r2, r6
 800adb8:	1b9b      	subs	r3, r3, r6
 800adba:	f080 0001 	eor.w	r0, r0, #1
 800adbe:	60a2      	str	r2, [r4, #8]
 800adc0:	6123      	str	r3, [r4, #16]
 800adc2:	b003      	add	sp, #12
 800adc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adc8:	68a3      	ldr	r3, [r4, #8]
 800adca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800adce:	701a      	strb	r2, [r3, #0]
 800add0:	e7bc      	b.n	800ad4c <ucdr_serialize_endian_uint16_t+0x60>
 800add2:	f10d 0506 	add.w	r5, sp, #6
 800add6:	4629      	mov	r1, r5
 800add8:	4632      	mov	r2, r6
 800adda:	4638      	mov	r0, r7
 800addc:	f00e fb13 	bl	8019406 <memcpy>
 800ade0:	68a0      	ldr	r0, [r4, #8]
 800ade2:	464a      	mov	r2, r9
 800ade4:	19a9      	adds	r1, r5, r6
 800ade6:	f00e fb0e 	bl	8019406 <memcpy>
 800adea:	e7af      	b.n	800ad4c <ucdr_serialize_endian_uint16_t+0x60>

0800adec <ucdr_deserialize_uint16_t>:
 800adec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf0:	460d      	mov	r5, r1
 800adf2:	2102      	movs	r1, #2
 800adf4:	4604      	mov	r4, r0
 800adf6:	f001 f9bb 	bl	800c170 <ucdr_buffer_alignment>
 800adfa:	4601      	mov	r1, r0
 800adfc:	4620      	mov	r0, r4
 800adfe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ae02:	f001 f9f9 	bl	800c1f8 <ucdr_advance_buffer>
 800ae06:	2102      	movs	r1, #2
 800ae08:	4620      	mov	r0, r4
 800ae0a:	f001 f951 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800ae0e:	bb60      	cbnz	r0, 800ae6a <ucdr_deserialize_uint16_t+0x7e>
 800ae10:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ae14:	42be      	cmp	r6, r7
 800ae16:	d923      	bls.n	800ae60 <ucdr_deserialize_uint16_t+0x74>
 800ae18:	6923      	ldr	r3, [r4, #16]
 800ae1a:	60a6      	str	r6, [r4, #8]
 800ae1c:	1bf6      	subs	r6, r6, r7
 800ae1e:	4433      	add	r3, r6
 800ae20:	f1c6 0902 	rsb	r9, r6, #2
 800ae24:	6123      	str	r3, [r4, #16]
 800ae26:	4649      	mov	r1, r9
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f001 f94d 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	d034      	beq.n	800ae9c <ucdr_deserialize_uint16_t+0xb0>
 800ae32:	7d23      	ldrb	r3, [r4, #20]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d042      	beq.n	800aebe <ucdr_deserialize_uint16_t+0xd2>
 800ae38:	787b      	ldrb	r3, [r7, #1]
 800ae3a:	702b      	strb	r3, [r5, #0]
 800ae3c:	2e00      	cmp	r6, #0
 800ae3e:	d03a      	beq.n	800aeb6 <ucdr_deserialize_uint16_t+0xca>
 800ae40:	783b      	ldrb	r3, [r7, #0]
 800ae42:	706b      	strb	r3, [r5, #1]
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	68a2      	ldr	r2, [r4, #8]
 800ae48:	7da0      	ldrb	r0, [r4, #22]
 800ae4a:	2102      	movs	r1, #2
 800ae4c:	3302      	adds	r3, #2
 800ae4e:	444a      	add	r2, r9
 800ae50:	1b9b      	subs	r3, r3, r6
 800ae52:	7561      	strb	r1, [r4, #21]
 800ae54:	60a2      	str	r2, [r4, #8]
 800ae56:	6123      	str	r3, [r4, #16]
 800ae58:	f080 0001 	eor.w	r0, r0, #1
 800ae5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae60:	2102      	movs	r1, #2
 800ae62:	4620      	mov	r0, r4
 800ae64:	f001 f930 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800ae68:	b180      	cbz	r0, 800ae8c <ucdr_deserialize_uint16_t+0xa0>
 800ae6a:	7d23      	ldrb	r3, [r4, #20]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	68a3      	ldr	r3, [r4, #8]
 800ae70:	d011      	beq.n	800ae96 <ucdr_deserialize_uint16_t+0xaa>
 800ae72:	785b      	ldrb	r3, [r3, #1]
 800ae74:	702b      	strb	r3, [r5, #0]
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	706b      	strb	r3, [r5, #1]
 800ae7c:	68a2      	ldr	r2, [r4, #8]
 800ae7e:	6923      	ldr	r3, [r4, #16]
 800ae80:	3202      	adds	r2, #2
 800ae82:	3302      	adds	r3, #2
 800ae84:	2102      	movs	r1, #2
 800ae86:	60a2      	str	r2, [r4, #8]
 800ae88:	6123      	str	r3, [r4, #16]
 800ae8a:	7561      	strb	r1, [r4, #21]
 800ae8c:	7da0      	ldrb	r0, [r4, #22]
 800ae8e:	f080 0001 	eor.w	r0, r0, #1
 800ae92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	802b      	strh	r3, [r5, #0]
 800ae9a:	e7ef      	b.n	800ae7c <ucdr_deserialize_uint16_t+0x90>
 800ae9c:	68a2      	ldr	r2, [r4, #8]
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	7da0      	ldrb	r0, [r4, #22]
 800aea2:	f884 8015 	strb.w	r8, [r4, #21]
 800aea6:	1b92      	subs	r2, r2, r6
 800aea8:	1b9b      	subs	r3, r3, r6
 800aeaa:	60a2      	str	r2, [r4, #8]
 800aeac:	6123      	str	r3, [r4, #16]
 800aeae:	f080 0001 	eor.w	r0, r0, #1
 800aeb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeb6:	68a3      	ldr	r3, [r4, #8]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	706b      	strb	r3, [r5, #1]
 800aebc:	e7c2      	b.n	800ae44 <ucdr_deserialize_uint16_t+0x58>
 800aebe:	4639      	mov	r1, r7
 800aec0:	4632      	mov	r2, r6
 800aec2:	4628      	mov	r0, r5
 800aec4:	f00e fa9f 	bl	8019406 <memcpy>
 800aec8:	68a1      	ldr	r1, [r4, #8]
 800aeca:	464a      	mov	r2, r9
 800aecc:	19a8      	adds	r0, r5, r6
 800aece:	f00e fa9a 	bl	8019406 <memcpy>
 800aed2:	e7b7      	b.n	800ae44 <ucdr_deserialize_uint16_t+0x58>

0800aed4 <ucdr_deserialize_endian_uint16_t>:
 800aed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed8:	460e      	mov	r6, r1
 800aeda:	2102      	movs	r1, #2
 800aedc:	4604      	mov	r4, r0
 800aede:	4615      	mov	r5, r2
 800aee0:	f001 f946 	bl	800c170 <ucdr_buffer_alignment>
 800aee4:	4601      	mov	r1, r0
 800aee6:	4620      	mov	r0, r4
 800aee8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800aeec:	f001 f984 	bl	800c1f8 <ucdr_advance_buffer>
 800aef0:	2102      	movs	r1, #2
 800aef2:	4620      	mov	r0, r4
 800aef4:	f001 f8dc 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800aef8:	bb70      	cbnz	r0, 800af58 <ucdr_deserialize_endian_uint16_t+0x84>
 800aefa:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800aefe:	4547      	cmp	r7, r8
 800af00:	d925      	bls.n	800af4e <ucdr_deserialize_endian_uint16_t+0x7a>
 800af02:	6923      	ldr	r3, [r4, #16]
 800af04:	60a7      	str	r7, [r4, #8]
 800af06:	eba7 0708 	sub.w	r7, r7, r8
 800af0a:	443b      	add	r3, r7
 800af0c:	f1c7 0a02 	rsb	sl, r7, #2
 800af10:	6123      	str	r3, [r4, #16]
 800af12:	4651      	mov	r1, sl
 800af14:	4620      	mov	r0, r4
 800af16:	f001 f8d7 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d034      	beq.n	800af88 <ucdr_deserialize_endian_uint16_t+0xb4>
 800af1e:	2e01      	cmp	r6, #1
 800af20:	d043      	beq.n	800afaa <ucdr_deserialize_endian_uint16_t+0xd6>
 800af22:	f898 3001 	ldrb.w	r3, [r8, #1]
 800af26:	702b      	strb	r3, [r5, #0]
 800af28:	2f00      	cmp	r7, #0
 800af2a:	d03a      	beq.n	800afa2 <ucdr_deserialize_endian_uint16_t+0xce>
 800af2c:	f898 3000 	ldrb.w	r3, [r8]
 800af30:	706b      	strb	r3, [r5, #1]
 800af32:	6923      	ldr	r3, [r4, #16]
 800af34:	68a2      	ldr	r2, [r4, #8]
 800af36:	7da0      	ldrb	r0, [r4, #22]
 800af38:	2102      	movs	r1, #2
 800af3a:	3302      	adds	r3, #2
 800af3c:	4452      	add	r2, sl
 800af3e:	1bdb      	subs	r3, r3, r7
 800af40:	7561      	strb	r1, [r4, #21]
 800af42:	60a2      	str	r2, [r4, #8]
 800af44:	6123      	str	r3, [r4, #16]
 800af46:	f080 0001 	eor.w	r0, r0, #1
 800af4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af4e:	2102      	movs	r1, #2
 800af50:	4620      	mov	r0, r4
 800af52:	f001 f8b9 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800af56:	b178      	cbz	r0, 800af78 <ucdr_deserialize_endian_uint16_t+0xa4>
 800af58:	2e01      	cmp	r6, #1
 800af5a:	68a3      	ldr	r3, [r4, #8]
 800af5c:	d011      	beq.n	800af82 <ucdr_deserialize_endian_uint16_t+0xae>
 800af5e:	785b      	ldrb	r3, [r3, #1]
 800af60:	702b      	strb	r3, [r5, #0]
 800af62:	68a3      	ldr	r3, [r4, #8]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	706b      	strb	r3, [r5, #1]
 800af68:	68a2      	ldr	r2, [r4, #8]
 800af6a:	6923      	ldr	r3, [r4, #16]
 800af6c:	3202      	adds	r2, #2
 800af6e:	3302      	adds	r3, #2
 800af70:	2102      	movs	r1, #2
 800af72:	60a2      	str	r2, [r4, #8]
 800af74:	6123      	str	r3, [r4, #16]
 800af76:	7561      	strb	r1, [r4, #21]
 800af78:	7da0      	ldrb	r0, [r4, #22]
 800af7a:	f080 0001 	eor.w	r0, r0, #1
 800af7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	802b      	strh	r3, [r5, #0]
 800af86:	e7ef      	b.n	800af68 <ucdr_deserialize_endian_uint16_t+0x94>
 800af88:	68a2      	ldr	r2, [r4, #8]
 800af8a:	6923      	ldr	r3, [r4, #16]
 800af8c:	7da0      	ldrb	r0, [r4, #22]
 800af8e:	f884 9015 	strb.w	r9, [r4, #21]
 800af92:	1bd2      	subs	r2, r2, r7
 800af94:	1bdb      	subs	r3, r3, r7
 800af96:	60a2      	str	r2, [r4, #8]
 800af98:	6123      	str	r3, [r4, #16]
 800af9a:	f080 0001 	eor.w	r0, r0, #1
 800af9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	706b      	strb	r3, [r5, #1]
 800afa8:	e7c3      	b.n	800af32 <ucdr_deserialize_endian_uint16_t+0x5e>
 800afaa:	4641      	mov	r1, r8
 800afac:	463a      	mov	r2, r7
 800afae:	4628      	mov	r0, r5
 800afb0:	f00e fa29 	bl	8019406 <memcpy>
 800afb4:	68a1      	ldr	r1, [r4, #8]
 800afb6:	4652      	mov	r2, sl
 800afb8:	19e8      	adds	r0, r5, r7
 800afba:	f00e fa24 	bl	8019406 <memcpy>
 800afbe:	e7b8      	b.n	800af32 <ucdr_deserialize_endian_uint16_t+0x5e>

0800afc0 <ucdr_serialize_uint32_t>:
 800afc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc4:	b082      	sub	sp, #8
 800afc6:	4604      	mov	r4, r0
 800afc8:	9101      	str	r1, [sp, #4]
 800afca:	2104      	movs	r1, #4
 800afcc:	f001 f8d0 	bl	800c170 <ucdr_buffer_alignment>
 800afd0:	4601      	mov	r1, r0
 800afd2:	4620      	mov	r0, r4
 800afd4:	7d67      	ldrb	r7, [r4, #21]
 800afd6:	f001 f90f 	bl	800c1f8 <ucdr_advance_buffer>
 800afda:	2104      	movs	r1, #4
 800afdc:	4620      	mov	r0, r4
 800afde:	f001 f867 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d139      	bne.n	800b05a <ucdr_serialize_uint32_t+0x9a>
 800afe6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800afea:	42ab      	cmp	r3, r5
 800afec:	d930      	bls.n	800b050 <ucdr_serialize_uint32_t+0x90>
 800afee:	1b5e      	subs	r6, r3, r5
 800aff0:	60a3      	str	r3, [r4, #8]
 800aff2:	6923      	ldr	r3, [r4, #16]
 800aff4:	f1c6 0804 	rsb	r8, r6, #4
 800aff8:	4433      	add	r3, r6
 800affa:	6123      	str	r3, [r4, #16]
 800affc:	4641      	mov	r1, r8
 800affe:	4620      	mov	r0, r4
 800b000:	f001 f862 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b004:	2800      	cmp	r0, #0
 800b006:	d04c      	beq.n	800b0a2 <ucdr_serialize_uint32_t+0xe2>
 800b008:	7d23      	ldrb	r3, [r4, #20]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d063      	beq.n	800b0d6 <ucdr_serialize_uint32_t+0x116>
 800b00e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b012:	702b      	strb	r3, [r5, #0]
 800b014:	2e00      	cmp	r6, #0
 800b016:	d051      	beq.n	800b0bc <ucdr_serialize_uint32_t+0xfc>
 800b018:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b01c:	706b      	strb	r3, [r5, #1]
 800b01e:	2e01      	cmp	r6, #1
 800b020:	d050      	beq.n	800b0c4 <ucdr_serialize_uint32_t+0x104>
 800b022:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b026:	70ab      	strb	r3, [r5, #2]
 800b028:	2e02      	cmp	r6, #2
 800b02a:	d04f      	beq.n	800b0cc <ucdr_serialize_uint32_t+0x10c>
 800b02c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b030:	70eb      	strb	r3, [r5, #3]
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	68a2      	ldr	r2, [r4, #8]
 800b036:	7da0      	ldrb	r0, [r4, #22]
 800b038:	3304      	adds	r3, #4
 800b03a:	1b9e      	subs	r6, r3, r6
 800b03c:	4442      	add	r2, r8
 800b03e:	2304      	movs	r3, #4
 800b040:	f080 0001 	eor.w	r0, r0, #1
 800b044:	60a2      	str	r2, [r4, #8]
 800b046:	6126      	str	r6, [r4, #16]
 800b048:	7563      	strb	r3, [r4, #21]
 800b04a:	b002      	add	sp, #8
 800b04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b050:	2104      	movs	r1, #4
 800b052:	4620      	mov	r0, r4
 800b054:	f001 f838 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b058:	b1d0      	cbz	r0, 800b090 <ucdr_serialize_uint32_t+0xd0>
 800b05a:	7d23      	ldrb	r3, [r4, #20]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	68a3      	ldr	r3, [r4, #8]
 800b060:	d01c      	beq.n	800b09c <ucdr_serialize_uint32_t+0xdc>
 800b062:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b066:	701a      	strb	r2, [r3, #0]
 800b068:	68a3      	ldr	r3, [r4, #8]
 800b06a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b06e:	705a      	strb	r2, [r3, #1]
 800b070:	68a3      	ldr	r3, [r4, #8]
 800b072:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b076:	709a      	strb	r2, [r3, #2]
 800b078:	68a3      	ldr	r3, [r4, #8]
 800b07a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b07e:	70da      	strb	r2, [r3, #3]
 800b080:	68a2      	ldr	r2, [r4, #8]
 800b082:	6923      	ldr	r3, [r4, #16]
 800b084:	3204      	adds	r2, #4
 800b086:	3304      	adds	r3, #4
 800b088:	2104      	movs	r1, #4
 800b08a:	60a2      	str	r2, [r4, #8]
 800b08c:	6123      	str	r3, [r4, #16]
 800b08e:	7561      	strb	r1, [r4, #21]
 800b090:	7da0      	ldrb	r0, [r4, #22]
 800b092:	f080 0001 	eor.w	r0, r0, #1
 800b096:	b002      	add	sp, #8
 800b098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b09c:	9a01      	ldr	r2, [sp, #4]
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	e7ee      	b.n	800b080 <ucdr_serialize_uint32_t+0xc0>
 800b0a2:	68a2      	ldr	r2, [r4, #8]
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	7da0      	ldrb	r0, [r4, #22]
 800b0a8:	7567      	strb	r7, [r4, #21]
 800b0aa:	1b92      	subs	r2, r2, r6
 800b0ac:	1b9b      	subs	r3, r3, r6
 800b0ae:	f080 0001 	eor.w	r0, r0, #1
 800b0b2:	60a2      	str	r2, [r4, #8]
 800b0b4:	6123      	str	r3, [r4, #16]
 800b0b6:	b002      	add	sp, #8
 800b0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0bc:	68a3      	ldr	r3, [r4, #8]
 800b0be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0c2:	701a      	strb	r2, [r3, #0]
 800b0c4:	68a3      	ldr	r3, [r4, #8]
 800b0c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b0ca:	701a      	strb	r2, [r3, #0]
 800b0cc:	68a3      	ldr	r3, [r4, #8]
 800b0ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b0d2:	701a      	strb	r2, [r3, #0]
 800b0d4:	e7ad      	b.n	800b032 <ucdr_serialize_uint32_t+0x72>
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	ad01      	add	r5, sp, #4
 800b0da:	4629      	mov	r1, r5
 800b0dc:	4632      	mov	r2, r6
 800b0de:	f00e f992 	bl	8019406 <memcpy>
 800b0e2:	68a0      	ldr	r0, [r4, #8]
 800b0e4:	4642      	mov	r2, r8
 800b0e6:	19a9      	adds	r1, r5, r6
 800b0e8:	f00e f98d 	bl	8019406 <memcpy>
 800b0ec:	e7a1      	b.n	800b032 <ucdr_serialize_uint32_t+0x72>
 800b0ee:	bf00      	nop

0800b0f0 <ucdr_serialize_endian_uint32_t>:
 800b0f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	460d      	mov	r5, r1
 800b0f8:	2104      	movs	r1, #4
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	9201      	str	r2, [sp, #4]
 800b0fe:	f001 f837 	bl	800c170 <ucdr_buffer_alignment>
 800b102:	4601      	mov	r1, r0
 800b104:	4620      	mov	r0, r4
 800b106:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b10a:	f001 f875 	bl	800c1f8 <ucdr_advance_buffer>
 800b10e:	2104      	movs	r1, #4
 800b110:	4620      	mov	r0, r4
 800b112:	f000 ffcd 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800b116:	2800      	cmp	r0, #0
 800b118:	d138      	bne.n	800b18c <ucdr_serialize_endian_uint32_t+0x9c>
 800b11a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b11e:	42b7      	cmp	r7, r6
 800b120:	d92f      	bls.n	800b182 <ucdr_serialize_endian_uint32_t+0x92>
 800b122:	6923      	ldr	r3, [r4, #16]
 800b124:	60a7      	str	r7, [r4, #8]
 800b126:	1bbf      	subs	r7, r7, r6
 800b128:	443b      	add	r3, r7
 800b12a:	f1c7 0904 	rsb	r9, r7, #4
 800b12e:	6123      	str	r3, [r4, #16]
 800b130:	4649      	mov	r1, r9
 800b132:	4620      	mov	r0, r4
 800b134:	f000 ffc8 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b138:	2800      	cmp	r0, #0
 800b13a:	d04a      	beq.n	800b1d2 <ucdr_serialize_endian_uint32_t+0xe2>
 800b13c:	2d01      	cmp	r5, #1
 800b13e:	d063      	beq.n	800b208 <ucdr_serialize_endian_uint32_t+0x118>
 800b140:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b144:	7033      	strb	r3, [r6, #0]
 800b146:	2f00      	cmp	r7, #0
 800b148:	d051      	beq.n	800b1ee <ucdr_serialize_endian_uint32_t+0xfe>
 800b14a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b14e:	7073      	strb	r3, [r6, #1]
 800b150:	2f01      	cmp	r7, #1
 800b152:	d050      	beq.n	800b1f6 <ucdr_serialize_endian_uint32_t+0x106>
 800b154:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b158:	70b3      	strb	r3, [r6, #2]
 800b15a:	2f02      	cmp	r7, #2
 800b15c:	d04f      	beq.n	800b1fe <ucdr_serialize_endian_uint32_t+0x10e>
 800b15e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b162:	70f3      	strb	r3, [r6, #3]
 800b164:	6923      	ldr	r3, [r4, #16]
 800b166:	68a2      	ldr	r2, [r4, #8]
 800b168:	7da0      	ldrb	r0, [r4, #22]
 800b16a:	3304      	adds	r3, #4
 800b16c:	444a      	add	r2, r9
 800b16e:	1bdb      	subs	r3, r3, r7
 800b170:	2104      	movs	r1, #4
 800b172:	f080 0001 	eor.w	r0, r0, #1
 800b176:	60a2      	str	r2, [r4, #8]
 800b178:	6123      	str	r3, [r4, #16]
 800b17a:	7561      	strb	r1, [r4, #21]
 800b17c:	b003      	add	sp, #12
 800b17e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b182:	2104      	movs	r1, #4
 800b184:	4620      	mov	r0, r4
 800b186:	f000 ff9f 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b18a:	b1c8      	cbz	r0, 800b1c0 <ucdr_serialize_endian_uint32_t+0xd0>
 800b18c:	2d01      	cmp	r5, #1
 800b18e:	68a3      	ldr	r3, [r4, #8]
 800b190:	d01c      	beq.n	800b1cc <ucdr_serialize_endian_uint32_t+0xdc>
 800b192:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b196:	701a      	strb	r2, [r3, #0]
 800b198:	68a3      	ldr	r3, [r4, #8]
 800b19a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b19e:	705a      	strb	r2, [r3, #1]
 800b1a0:	68a3      	ldr	r3, [r4, #8]
 800b1a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b1a6:	709a      	strb	r2, [r3, #2]
 800b1a8:	68a3      	ldr	r3, [r4, #8]
 800b1aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b1ae:	70da      	strb	r2, [r3, #3]
 800b1b0:	68a2      	ldr	r2, [r4, #8]
 800b1b2:	6923      	ldr	r3, [r4, #16]
 800b1b4:	3204      	adds	r2, #4
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	2104      	movs	r1, #4
 800b1ba:	60a2      	str	r2, [r4, #8]
 800b1bc:	6123      	str	r3, [r4, #16]
 800b1be:	7561      	strb	r1, [r4, #21]
 800b1c0:	7da0      	ldrb	r0, [r4, #22]
 800b1c2:	f080 0001 	eor.w	r0, r0, #1
 800b1c6:	b003      	add	sp, #12
 800b1c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1cc:	9a01      	ldr	r2, [sp, #4]
 800b1ce:	601a      	str	r2, [r3, #0]
 800b1d0:	e7ee      	b.n	800b1b0 <ucdr_serialize_endian_uint32_t+0xc0>
 800b1d2:	68a2      	ldr	r2, [r4, #8]
 800b1d4:	6923      	ldr	r3, [r4, #16]
 800b1d6:	7da0      	ldrb	r0, [r4, #22]
 800b1d8:	f884 8015 	strb.w	r8, [r4, #21]
 800b1dc:	1bd2      	subs	r2, r2, r7
 800b1de:	1bdb      	subs	r3, r3, r7
 800b1e0:	f080 0001 	eor.w	r0, r0, #1
 800b1e4:	60a2      	str	r2, [r4, #8]
 800b1e6:	6123      	str	r3, [r4, #16]
 800b1e8:	b003      	add	sp, #12
 800b1ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ee:	68a3      	ldr	r3, [r4, #8]
 800b1f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b1f4:	701a      	strb	r2, [r3, #0]
 800b1f6:	68a3      	ldr	r3, [r4, #8]
 800b1f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b1fc:	701a      	strb	r2, [r3, #0]
 800b1fe:	68a3      	ldr	r3, [r4, #8]
 800b200:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b204:	701a      	strb	r2, [r3, #0]
 800b206:	e7ad      	b.n	800b164 <ucdr_serialize_endian_uint32_t+0x74>
 800b208:	ad01      	add	r5, sp, #4
 800b20a:	4629      	mov	r1, r5
 800b20c:	463a      	mov	r2, r7
 800b20e:	4630      	mov	r0, r6
 800b210:	f00e f8f9 	bl	8019406 <memcpy>
 800b214:	68a0      	ldr	r0, [r4, #8]
 800b216:	464a      	mov	r2, r9
 800b218:	19e9      	adds	r1, r5, r7
 800b21a:	f00e f8f4 	bl	8019406 <memcpy>
 800b21e:	e7a1      	b.n	800b164 <ucdr_serialize_endian_uint32_t+0x74>

0800b220 <ucdr_deserialize_uint32_t>:
 800b220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b224:	460d      	mov	r5, r1
 800b226:	2104      	movs	r1, #4
 800b228:	4604      	mov	r4, r0
 800b22a:	f000 ffa1 	bl	800c170 <ucdr_buffer_alignment>
 800b22e:	4601      	mov	r1, r0
 800b230:	4620      	mov	r0, r4
 800b232:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b236:	f000 ffdf 	bl	800c1f8 <ucdr_advance_buffer>
 800b23a:	2104      	movs	r1, #4
 800b23c:	4620      	mov	r0, r4
 800b23e:	f000 ff37 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800b242:	2800      	cmp	r0, #0
 800b244:	d138      	bne.n	800b2b8 <ucdr_deserialize_uint32_t+0x98>
 800b246:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b24a:	42b7      	cmp	r7, r6
 800b24c:	d92f      	bls.n	800b2ae <ucdr_deserialize_uint32_t+0x8e>
 800b24e:	6923      	ldr	r3, [r4, #16]
 800b250:	60a7      	str	r7, [r4, #8]
 800b252:	1bbf      	subs	r7, r7, r6
 800b254:	443b      	add	r3, r7
 800b256:	f1c7 0904 	rsb	r9, r7, #4
 800b25a:	6123      	str	r3, [r4, #16]
 800b25c:	4649      	mov	r1, r9
 800b25e:	4620      	mov	r0, r4
 800b260:	f000 ff32 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b264:	2800      	cmp	r0, #0
 800b266:	d046      	beq.n	800b2f6 <ucdr_deserialize_uint32_t+0xd6>
 800b268:	7d23      	ldrb	r3, [r4, #20]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d05c      	beq.n	800b328 <ucdr_deserialize_uint32_t+0x108>
 800b26e:	78f3      	ldrb	r3, [r6, #3]
 800b270:	702b      	strb	r3, [r5, #0]
 800b272:	2f00      	cmp	r7, #0
 800b274:	d04c      	beq.n	800b310 <ucdr_deserialize_uint32_t+0xf0>
 800b276:	78b3      	ldrb	r3, [r6, #2]
 800b278:	706b      	strb	r3, [r5, #1]
 800b27a:	2f01      	cmp	r7, #1
 800b27c:	f105 0302 	add.w	r3, r5, #2
 800b280:	d04a      	beq.n	800b318 <ucdr_deserialize_uint32_t+0xf8>
 800b282:	7873      	ldrb	r3, [r6, #1]
 800b284:	70ab      	strb	r3, [r5, #2]
 800b286:	2f02      	cmp	r7, #2
 800b288:	f105 0303 	add.w	r3, r5, #3
 800b28c:	d048      	beq.n	800b320 <ucdr_deserialize_uint32_t+0x100>
 800b28e:	7833      	ldrb	r3, [r6, #0]
 800b290:	70eb      	strb	r3, [r5, #3]
 800b292:	6923      	ldr	r3, [r4, #16]
 800b294:	68a2      	ldr	r2, [r4, #8]
 800b296:	7da0      	ldrb	r0, [r4, #22]
 800b298:	2104      	movs	r1, #4
 800b29a:	3304      	adds	r3, #4
 800b29c:	444a      	add	r2, r9
 800b29e:	1bdb      	subs	r3, r3, r7
 800b2a0:	7561      	strb	r1, [r4, #21]
 800b2a2:	60a2      	str	r2, [r4, #8]
 800b2a4:	6123      	str	r3, [r4, #16]
 800b2a6:	f080 0001 	eor.w	r0, r0, #1
 800b2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ae:	2104      	movs	r1, #4
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 ff09 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b2b6:	b1b0      	cbz	r0, 800b2e6 <ucdr_deserialize_uint32_t+0xc6>
 800b2b8:	7d23      	ldrb	r3, [r4, #20]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	68a3      	ldr	r3, [r4, #8]
 800b2be:	d017      	beq.n	800b2f0 <ucdr_deserialize_uint32_t+0xd0>
 800b2c0:	78db      	ldrb	r3, [r3, #3]
 800b2c2:	702b      	strb	r3, [r5, #0]
 800b2c4:	68a3      	ldr	r3, [r4, #8]
 800b2c6:	789b      	ldrb	r3, [r3, #2]
 800b2c8:	706b      	strb	r3, [r5, #1]
 800b2ca:	68a3      	ldr	r3, [r4, #8]
 800b2cc:	785b      	ldrb	r3, [r3, #1]
 800b2ce:	70ab      	strb	r3, [r5, #2]
 800b2d0:	68a3      	ldr	r3, [r4, #8]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	70eb      	strb	r3, [r5, #3]
 800b2d6:	68a2      	ldr	r2, [r4, #8]
 800b2d8:	6923      	ldr	r3, [r4, #16]
 800b2da:	3204      	adds	r2, #4
 800b2dc:	3304      	adds	r3, #4
 800b2de:	2104      	movs	r1, #4
 800b2e0:	60a2      	str	r2, [r4, #8]
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	7561      	strb	r1, [r4, #21]
 800b2e6:	7da0      	ldrb	r0, [r4, #22]
 800b2e8:	f080 0001 	eor.w	r0, r0, #1
 800b2ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	602b      	str	r3, [r5, #0]
 800b2f4:	e7ef      	b.n	800b2d6 <ucdr_deserialize_uint32_t+0xb6>
 800b2f6:	68a2      	ldr	r2, [r4, #8]
 800b2f8:	6923      	ldr	r3, [r4, #16]
 800b2fa:	7da0      	ldrb	r0, [r4, #22]
 800b2fc:	f884 8015 	strb.w	r8, [r4, #21]
 800b300:	1bd2      	subs	r2, r2, r7
 800b302:	1bdb      	subs	r3, r3, r7
 800b304:	60a2      	str	r2, [r4, #8]
 800b306:	6123      	str	r3, [r4, #16]
 800b308:	f080 0001 	eor.w	r0, r0, #1
 800b30c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b310:	68a3      	ldr	r3, [r4, #8]
 800b312:	789b      	ldrb	r3, [r3, #2]
 800b314:	706b      	strb	r3, [r5, #1]
 800b316:	1cab      	adds	r3, r5, #2
 800b318:	68a2      	ldr	r2, [r4, #8]
 800b31a:	7852      	ldrb	r2, [r2, #1]
 800b31c:	f803 2b01 	strb.w	r2, [r3], #1
 800b320:	68a2      	ldr	r2, [r4, #8]
 800b322:	7812      	ldrb	r2, [r2, #0]
 800b324:	701a      	strb	r2, [r3, #0]
 800b326:	e7b4      	b.n	800b292 <ucdr_deserialize_uint32_t+0x72>
 800b328:	4631      	mov	r1, r6
 800b32a:	463a      	mov	r2, r7
 800b32c:	4628      	mov	r0, r5
 800b32e:	f00e f86a 	bl	8019406 <memcpy>
 800b332:	68a1      	ldr	r1, [r4, #8]
 800b334:	464a      	mov	r2, r9
 800b336:	19e8      	adds	r0, r5, r7
 800b338:	f00e f865 	bl	8019406 <memcpy>
 800b33c:	e7a9      	b.n	800b292 <ucdr_deserialize_uint32_t+0x72>
 800b33e:	bf00      	nop

0800b340 <ucdr_deserialize_endian_uint32_t>:
 800b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	460e      	mov	r6, r1
 800b346:	2104      	movs	r1, #4
 800b348:	4604      	mov	r4, r0
 800b34a:	4615      	mov	r5, r2
 800b34c:	f000 ff10 	bl	800c170 <ucdr_buffer_alignment>
 800b350:	4601      	mov	r1, r0
 800b352:	4620      	mov	r0, r4
 800b354:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b358:	f000 ff4e 	bl	800c1f8 <ucdr_advance_buffer>
 800b35c:	2104      	movs	r1, #4
 800b35e:	4620      	mov	r0, r4
 800b360:	f000 fea6 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800b364:	2800      	cmp	r0, #0
 800b366:	d13c      	bne.n	800b3e2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800b368:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b36c:	42bb      	cmp	r3, r7
 800b36e:	d933      	bls.n	800b3d8 <ucdr_deserialize_endian_uint32_t+0x98>
 800b370:	eba3 0807 	sub.w	r8, r3, r7
 800b374:	60a3      	str	r3, [r4, #8]
 800b376:	6923      	ldr	r3, [r4, #16]
 800b378:	f1c8 0a04 	rsb	sl, r8, #4
 800b37c:	4443      	add	r3, r8
 800b37e:	6123      	str	r3, [r4, #16]
 800b380:	4651      	mov	r1, sl
 800b382:	4620      	mov	r0, r4
 800b384:	f000 fea0 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d048      	beq.n	800b41e <ucdr_deserialize_endian_uint32_t+0xde>
 800b38c:	2e01      	cmp	r6, #1
 800b38e:	d061      	beq.n	800b454 <ucdr_deserialize_endian_uint32_t+0x114>
 800b390:	78fb      	ldrb	r3, [r7, #3]
 800b392:	702b      	strb	r3, [r5, #0]
 800b394:	f1b8 0f00 	cmp.w	r8, #0
 800b398:	d050      	beq.n	800b43c <ucdr_deserialize_endian_uint32_t+0xfc>
 800b39a:	78bb      	ldrb	r3, [r7, #2]
 800b39c:	706b      	strb	r3, [r5, #1]
 800b39e:	f1b8 0f01 	cmp.w	r8, #1
 800b3a2:	f105 0302 	add.w	r3, r5, #2
 800b3a6:	d04d      	beq.n	800b444 <ucdr_deserialize_endian_uint32_t+0x104>
 800b3a8:	787b      	ldrb	r3, [r7, #1]
 800b3aa:	70ab      	strb	r3, [r5, #2]
 800b3ac:	f1b8 0f02 	cmp.w	r8, #2
 800b3b0:	f105 0303 	add.w	r3, r5, #3
 800b3b4:	d04a      	beq.n	800b44c <ucdr_deserialize_endian_uint32_t+0x10c>
 800b3b6:	783b      	ldrb	r3, [r7, #0]
 800b3b8:	70eb      	strb	r3, [r5, #3]
 800b3ba:	6923      	ldr	r3, [r4, #16]
 800b3bc:	68a2      	ldr	r2, [r4, #8]
 800b3be:	7da0      	ldrb	r0, [r4, #22]
 800b3c0:	2104      	movs	r1, #4
 800b3c2:	3304      	adds	r3, #4
 800b3c4:	4452      	add	r2, sl
 800b3c6:	eba3 0308 	sub.w	r3, r3, r8
 800b3ca:	7561      	strb	r1, [r4, #21]
 800b3cc:	60a2      	str	r2, [r4, #8]
 800b3ce:	6123      	str	r3, [r4, #16]
 800b3d0:	f080 0001 	eor.w	r0, r0, #1
 800b3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d8:	2104      	movs	r1, #4
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f000 fe74 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b3e0:	b1a8      	cbz	r0, 800b40e <ucdr_deserialize_endian_uint32_t+0xce>
 800b3e2:	2e01      	cmp	r6, #1
 800b3e4:	68a3      	ldr	r3, [r4, #8]
 800b3e6:	d017      	beq.n	800b418 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b3e8:	78db      	ldrb	r3, [r3, #3]
 800b3ea:	702b      	strb	r3, [r5, #0]
 800b3ec:	68a3      	ldr	r3, [r4, #8]
 800b3ee:	789b      	ldrb	r3, [r3, #2]
 800b3f0:	706b      	strb	r3, [r5, #1]
 800b3f2:	68a3      	ldr	r3, [r4, #8]
 800b3f4:	785b      	ldrb	r3, [r3, #1]
 800b3f6:	70ab      	strb	r3, [r5, #2]
 800b3f8:	68a3      	ldr	r3, [r4, #8]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	70eb      	strb	r3, [r5, #3]
 800b3fe:	68a2      	ldr	r2, [r4, #8]
 800b400:	6923      	ldr	r3, [r4, #16]
 800b402:	3204      	adds	r2, #4
 800b404:	3304      	adds	r3, #4
 800b406:	2104      	movs	r1, #4
 800b408:	60a2      	str	r2, [r4, #8]
 800b40a:	6123      	str	r3, [r4, #16]
 800b40c:	7561      	strb	r1, [r4, #21]
 800b40e:	7da0      	ldrb	r0, [r4, #22]
 800b410:	f080 0001 	eor.w	r0, r0, #1
 800b414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	602b      	str	r3, [r5, #0]
 800b41c:	e7ef      	b.n	800b3fe <ucdr_deserialize_endian_uint32_t+0xbe>
 800b41e:	68a2      	ldr	r2, [r4, #8]
 800b420:	6923      	ldr	r3, [r4, #16]
 800b422:	7da0      	ldrb	r0, [r4, #22]
 800b424:	f884 9015 	strb.w	r9, [r4, #21]
 800b428:	eba2 0208 	sub.w	r2, r2, r8
 800b42c:	eba3 0308 	sub.w	r3, r3, r8
 800b430:	60a2      	str	r2, [r4, #8]
 800b432:	6123      	str	r3, [r4, #16]
 800b434:	f080 0001 	eor.w	r0, r0, #1
 800b438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43c:	68a3      	ldr	r3, [r4, #8]
 800b43e:	789b      	ldrb	r3, [r3, #2]
 800b440:	706b      	strb	r3, [r5, #1]
 800b442:	1cab      	adds	r3, r5, #2
 800b444:	68a2      	ldr	r2, [r4, #8]
 800b446:	7852      	ldrb	r2, [r2, #1]
 800b448:	f803 2b01 	strb.w	r2, [r3], #1
 800b44c:	68a2      	ldr	r2, [r4, #8]
 800b44e:	7812      	ldrb	r2, [r2, #0]
 800b450:	701a      	strb	r2, [r3, #0]
 800b452:	e7b2      	b.n	800b3ba <ucdr_deserialize_endian_uint32_t+0x7a>
 800b454:	4639      	mov	r1, r7
 800b456:	4642      	mov	r2, r8
 800b458:	4628      	mov	r0, r5
 800b45a:	f00d ffd4 	bl	8019406 <memcpy>
 800b45e:	68a1      	ldr	r1, [r4, #8]
 800b460:	4652      	mov	r2, sl
 800b462:	eb05 0008 	add.w	r0, r5, r8
 800b466:	f00d ffce 	bl	8019406 <memcpy>
 800b46a:	e7a6      	b.n	800b3ba <ucdr_deserialize_endian_uint32_t+0x7a>

0800b46c <ucdr_serialize_uint64_t>:
 800b46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b470:	2108      	movs	r1, #8
 800b472:	b082      	sub	sp, #8
 800b474:	4604      	mov	r4, r0
 800b476:	e9cd 2300 	strd	r2, r3, [sp]
 800b47a:	f000 fe79 	bl	800c170 <ucdr_buffer_alignment>
 800b47e:	4601      	mov	r1, r0
 800b480:	4620      	mov	r0, r4
 800b482:	7d67      	ldrb	r7, [r4, #21]
 800b484:	f000 feb8 	bl	800c1f8 <ucdr_advance_buffer>
 800b488:	2108      	movs	r1, #8
 800b48a:	4620      	mov	r0, r4
 800b48c:	f000 fe10 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800b490:	2800      	cmp	r0, #0
 800b492:	d14e      	bne.n	800b532 <ucdr_serialize_uint64_t+0xc6>
 800b494:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b498:	42ab      	cmp	r3, r5
 800b49a:	d945      	bls.n	800b528 <ucdr_serialize_uint64_t+0xbc>
 800b49c:	1b5e      	subs	r6, r3, r5
 800b49e:	60a3      	str	r3, [r4, #8]
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	f1c6 0808 	rsb	r8, r6, #8
 800b4a6:	4433      	add	r3, r6
 800b4a8:	6123      	str	r3, [r4, #16]
 800b4aa:	4641      	mov	r1, r8
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 fe0b 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d074      	beq.n	800b5a0 <ucdr_serialize_uint64_t+0x134>
 800b4b6:	7d23      	ldrb	r3, [r4, #20]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	f000 809b 	beq.w	800b5f4 <ucdr_serialize_uint64_t+0x188>
 800b4be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b4c2:	702b      	strb	r3, [r5, #0]
 800b4c4:	2e00      	cmp	r6, #0
 800b4c6:	d078      	beq.n	800b5ba <ucdr_serialize_uint64_t+0x14e>
 800b4c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b4cc:	706b      	strb	r3, [r5, #1]
 800b4ce:	2e01      	cmp	r6, #1
 800b4d0:	d077      	beq.n	800b5c2 <ucdr_serialize_uint64_t+0x156>
 800b4d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b4d6:	70ab      	strb	r3, [r5, #2]
 800b4d8:	2e02      	cmp	r6, #2
 800b4da:	d076      	beq.n	800b5ca <ucdr_serialize_uint64_t+0x15e>
 800b4dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b4e0:	70eb      	strb	r3, [r5, #3]
 800b4e2:	2e03      	cmp	r6, #3
 800b4e4:	d075      	beq.n	800b5d2 <ucdr_serialize_uint64_t+0x166>
 800b4e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b4ea:	712b      	strb	r3, [r5, #4]
 800b4ec:	2e04      	cmp	r6, #4
 800b4ee:	d074      	beq.n	800b5da <ucdr_serialize_uint64_t+0x16e>
 800b4f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b4f4:	716b      	strb	r3, [r5, #5]
 800b4f6:	2e05      	cmp	r6, #5
 800b4f8:	d073      	beq.n	800b5e2 <ucdr_serialize_uint64_t+0x176>
 800b4fa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b4fe:	71ab      	strb	r3, [r5, #6]
 800b500:	2e06      	cmp	r6, #6
 800b502:	d072      	beq.n	800b5ea <ucdr_serialize_uint64_t+0x17e>
 800b504:	f89d 3000 	ldrb.w	r3, [sp]
 800b508:	71eb      	strb	r3, [r5, #7]
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	68a2      	ldr	r2, [r4, #8]
 800b50e:	7da0      	ldrb	r0, [r4, #22]
 800b510:	3308      	adds	r3, #8
 800b512:	1b9e      	subs	r6, r3, r6
 800b514:	4442      	add	r2, r8
 800b516:	2308      	movs	r3, #8
 800b518:	f080 0001 	eor.w	r0, r0, #1
 800b51c:	60a2      	str	r2, [r4, #8]
 800b51e:	6126      	str	r6, [r4, #16]
 800b520:	7563      	strb	r3, [r4, #21]
 800b522:	b002      	add	sp, #8
 800b524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b528:	2108      	movs	r1, #8
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 fdcc 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b530:	b350      	cbz	r0, 800b588 <ucdr_serialize_uint64_t+0x11c>
 800b532:	7d23      	ldrb	r3, [r4, #20]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d02d      	beq.n	800b594 <ucdr_serialize_uint64_t+0x128>
 800b538:	68a3      	ldr	r3, [r4, #8]
 800b53a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b53e:	701a      	strb	r2, [r3, #0]
 800b540:	68a3      	ldr	r3, [r4, #8]
 800b542:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b546:	705a      	strb	r2, [r3, #1]
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b54e:	709a      	strb	r2, [r3, #2]
 800b550:	68a3      	ldr	r3, [r4, #8]
 800b552:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b556:	70da      	strb	r2, [r3, #3]
 800b558:	68a3      	ldr	r3, [r4, #8]
 800b55a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b55e:	711a      	strb	r2, [r3, #4]
 800b560:	68a3      	ldr	r3, [r4, #8]
 800b562:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b566:	715a      	strb	r2, [r3, #5]
 800b568:	68a3      	ldr	r3, [r4, #8]
 800b56a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b56e:	719a      	strb	r2, [r3, #6]
 800b570:	68a3      	ldr	r3, [r4, #8]
 800b572:	f89d 2000 	ldrb.w	r2, [sp]
 800b576:	71da      	strb	r2, [r3, #7]
 800b578:	68a2      	ldr	r2, [r4, #8]
 800b57a:	6923      	ldr	r3, [r4, #16]
 800b57c:	3208      	adds	r2, #8
 800b57e:	3308      	adds	r3, #8
 800b580:	2108      	movs	r1, #8
 800b582:	60a2      	str	r2, [r4, #8]
 800b584:	6123      	str	r3, [r4, #16]
 800b586:	7561      	strb	r1, [r4, #21]
 800b588:	7da0      	ldrb	r0, [r4, #22]
 800b58a:	f080 0001 	eor.w	r0, r0, #1
 800b58e:	b002      	add	sp, #8
 800b590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b594:	466b      	mov	r3, sp
 800b596:	cb03      	ldmia	r3!, {r0, r1}
 800b598:	68a3      	ldr	r3, [r4, #8]
 800b59a:	6018      	str	r0, [r3, #0]
 800b59c:	6059      	str	r1, [r3, #4]
 800b59e:	e7eb      	b.n	800b578 <ucdr_serialize_uint64_t+0x10c>
 800b5a0:	68a2      	ldr	r2, [r4, #8]
 800b5a2:	6923      	ldr	r3, [r4, #16]
 800b5a4:	7da0      	ldrb	r0, [r4, #22]
 800b5a6:	7567      	strb	r7, [r4, #21]
 800b5a8:	1b92      	subs	r2, r2, r6
 800b5aa:	1b9b      	subs	r3, r3, r6
 800b5ac:	f080 0001 	eor.w	r0, r0, #1
 800b5b0:	60a2      	str	r2, [r4, #8]
 800b5b2:	6123      	str	r3, [r4, #16]
 800b5b4:	b002      	add	sp, #8
 800b5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ba:	68a3      	ldr	r3, [r4, #8]
 800b5bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	68a3      	ldr	r3, [r4, #8]
 800b5c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b5c8:	701a      	strb	r2, [r3, #0]
 800b5ca:	68a3      	ldr	r3, [r4, #8]
 800b5cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	68a3      	ldr	r3, [r4, #8]
 800b5d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b5d8:	701a      	strb	r2, [r3, #0]
 800b5da:	68a3      	ldr	r3, [r4, #8]
 800b5dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b5e0:	701a      	strb	r2, [r3, #0]
 800b5e2:	68a3      	ldr	r3, [r4, #8]
 800b5e4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b5e8:	701a      	strb	r2, [r3, #0]
 800b5ea:	68a3      	ldr	r3, [r4, #8]
 800b5ec:	f89d 2000 	ldrb.w	r2, [sp]
 800b5f0:	701a      	strb	r2, [r3, #0]
 800b5f2:	e78a      	b.n	800b50a <ucdr_serialize_uint64_t+0x9e>
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	466d      	mov	r5, sp
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	4632      	mov	r2, r6
 800b5fc:	f00d ff03 	bl	8019406 <memcpy>
 800b600:	68a0      	ldr	r0, [r4, #8]
 800b602:	4642      	mov	r2, r8
 800b604:	19a9      	adds	r1, r5, r6
 800b606:	f00d fefe 	bl	8019406 <memcpy>
 800b60a:	e77e      	b.n	800b50a <ucdr_serialize_uint64_t+0x9e>

0800b60c <ucdr_serialize_int16_t>:
 800b60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b610:	b082      	sub	sp, #8
 800b612:	460b      	mov	r3, r1
 800b614:	2102      	movs	r1, #2
 800b616:	4604      	mov	r4, r0
 800b618:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b61c:	f000 fda8 	bl	800c170 <ucdr_buffer_alignment>
 800b620:	4601      	mov	r1, r0
 800b622:	4620      	mov	r0, r4
 800b624:	7d67      	ldrb	r7, [r4, #21]
 800b626:	f000 fde7 	bl	800c1f8 <ucdr_advance_buffer>
 800b62a:	2102      	movs	r1, #2
 800b62c:	4620      	mov	r0, r4
 800b62e:	f000 fd3f 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800b632:	bb78      	cbnz	r0, 800b694 <ucdr_serialize_int16_t+0x88>
 800b634:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b638:	42ab      	cmp	r3, r5
 800b63a:	d926      	bls.n	800b68a <ucdr_serialize_int16_t+0x7e>
 800b63c:	1b5e      	subs	r6, r3, r5
 800b63e:	60a3      	str	r3, [r4, #8]
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	f1c6 0802 	rsb	r8, r6, #2
 800b646:	4433      	add	r3, r6
 800b648:	6123      	str	r3, [r4, #16]
 800b64a:	4641      	mov	r1, r8
 800b64c:	4620      	mov	r0, r4
 800b64e:	f000 fd3b 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b652:	2800      	cmp	r0, #0
 800b654:	d03b      	beq.n	800b6ce <ucdr_serialize_int16_t+0xc2>
 800b656:	7d23      	ldrb	r3, [r4, #20]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d04a      	beq.n	800b6f2 <ucdr_serialize_int16_t+0xe6>
 800b65c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b660:	702b      	strb	r3, [r5, #0]
 800b662:	2e00      	cmp	r6, #0
 800b664:	d040      	beq.n	800b6e8 <ucdr_serialize_int16_t+0xdc>
 800b666:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b66a:	706b      	strb	r3, [r5, #1]
 800b66c:	6923      	ldr	r3, [r4, #16]
 800b66e:	68a2      	ldr	r2, [r4, #8]
 800b670:	7da0      	ldrb	r0, [r4, #22]
 800b672:	3302      	adds	r3, #2
 800b674:	1b9e      	subs	r6, r3, r6
 800b676:	4442      	add	r2, r8
 800b678:	2302      	movs	r3, #2
 800b67a:	f080 0001 	eor.w	r0, r0, #1
 800b67e:	60a2      	str	r2, [r4, #8]
 800b680:	6126      	str	r6, [r4, #16]
 800b682:	7563      	strb	r3, [r4, #21]
 800b684:	b002      	add	sp, #8
 800b686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b68a:	2102      	movs	r1, #2
 800b68c:	4620      	mov	r0, r4
 800b68e:	f000 fd1b 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b692:	b190      	cbz	r0, 800b6ba <ucdr_serialize_int16_t+0xae>
 800b694:	7d23      	ldrb	r3, [r4, #20]
 800b696:	2b01      	cmp	r3, #1
 800b698:	68a3      	ldr	r3, [r4, #8]
 800b69a:	d014      	beq.n	800b6c6 <ucdr_serialize_int16_t+0xba>
 800b69c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b6a0:	701a      	strb	r2, [r3, #0]
 800b6a2:	68a3      	ldr	r3, [r4, #8]
 800b6a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6a8:	705a      	strb	r2, [r3, #1]
 800b6aa:	68a2      	ldr	r2, [r4, #8]
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	3202      	adds	r2, #2
 800b6b0:	3302      	adds	r3, #2
 800b6b2:	2102      	movs	r1, #2
 800b6b4:	60a2      	str	r2, [r4, #8]
 800b6b6:	6123      	str	r3, [r4, #16]
 800b6b8:	7561      	strb	r1, [r4, #21]
 800b6ba:	7da0      	ldrb	r0, [r4, #22]
 800b6bc:	f080 0001 	eor.w	r0, r0, #1
 800b6c0:	b002      	add	sp, #8
 800b6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b6ca:	801a      	strh	r2, [r3, #0]
 800b6cc:	e7ed      	b.n	800b6aa <ucdr_serialize_int16_t+0x9e>
 800b6ce:	68a2      	ldr	r2, [r4, #8]
 800b6d0:	6923      	ldr	r3, [r4, #16]
 800b6d2:	7da0      	ldrb	r0, [r4, #22]
 800b6d4:	7567      	strb	r7, [r4, #21]
 800b6d6:	1b92      	subs	r2, r2, r6
 800b6d8:	1b9b      	subs	r3, r3, r6
 800b6da:	f080 0001 	eor.w	r0, r0, #1
 800b6de:	60a2      	str	r2, [r4, #8]
 800b6e0:	6123      	str	r3, [r4, #16]
 800b6e2:	b002      	add	sp, #8
 800b6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e8:	68a3      	ldr	r3, [r4, #8]
 800b6ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6ee:	701a      	strb	r2, [r3, #0]
 800b6f0:	e7bc      	b.n	800b66c <ucdr_serialize_int16_t+0x60>
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	f10d 0506 	add.w	r5, sp, #6
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	4632      	mov	r2, r6
 800b6fc:	f00d fe83 	bl	8019406 <memcpy>
 800b700:	68a0      	ldr	r0, [r4, #8]
 800b702:	4642      	mov	r2, r8
 800b704:	19a9      	adds	r1, r5, r6
 800b706:	f00d fe7e 	bl	8019406 <memcpy>
 800b70a:	e7af      	b.n	800b66c <ucdr_serialize_int16_t+0x60>

0800b70c <ucdr_deserialize_int16_t>:
 800b70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b710:	460d      	mov	r5, r1
 800b712:	2102      	movs	r1, #2
 800b714:	4604      	mov	r4, r0
 800b716:	f000 fd2b 	bl	800c170 <ucdr_buffer_alignment>
 800b71a:	4601      	mov	r1, r0
 800b71c:	4620      	mov	r0, r4
 800b71e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b722:	f000 fd69 	bl	800c1f8 <ucdr_advance_buffer>
 800b726:	2102      	movs	r1, #2
 800b728:	4620      	mov	r0, r4
 800b72a:	f000 fcc1 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800b72e:	bb60      	cbnz	r0, 800b78a <ucdr_deserialize_int16_t+0x7e>
 800b730:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b734:	42be      	cmp	r6, r7
 800b736:	d923      	bls.n	800b780 <ucdr_deserialize_int16_t+0x74>
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	60a6      	str	r6, [r4, #8]
 800b73c:	1bf6      	subs	r6, r6, r7
 800b73e:	4433      	add	r3, r6
 800b740:	f1c6 0902 	rsb	r9, r6, #2
 800b744:	6123      	str	r3, [r4, #16]
 800b746:	4649      	mov	r1, r9
 800b748:	4620      	mov	r0, r4
 800b74a:	f000 fcbd 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b74e:	2800      	cmp	r0, #0
 800b750:	d034      	beq.n	800b7bc <ucdr_deserialize_int16_t+0xb0>
 800b752:	7d23      	ldrb	r3, [r4, #20]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d042      	beq.n	800b7de <ucdr_deserialize_int16_t+0xd2>
 800b758:	787b      	ldrb	r3, [r7, #1]
 800b75a:	702b      	strb	r3, [r5, #0]
 800b75c:	2e00      	cmp	r6, #0
 800b75e:	d03a      	beq.n	800b7d6 <ucdr_deserialize_int16_t+0xca>
 800b760:	783b      	ldrb	r3, [r7, #0]
 800b762:	706b      	strb	r3, [r5, #1]
 800b764:	6923      	ldr	r3, [r4, #16]
 800b766:	68a2      	ldr	r2, [r4, #8]
 800b768:	7da0      	ldrb	r0, [r4, #22]
 800b76a:	2102      	movs	r1, #2
 800b76c:	3302      	adds	r3, #2
 800b76e:	444a      	add	r2, r9
 800b770:	1b9b      	subs	r3, r3, r6
 800b772:	7561      	strb	r1, [r4, #21]
 800b774:	60a2      	str	r2, [r4, #8]
 800b776:	6123      	str	r3, [r4, #16]
 800b778:	f080 0001 	eor.w	r0, r0, #1
 800b77c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b780:	2102      	movs	r1, #2
 800b782:	4620      	mov	r0, r4
 800b784:	f000 fca0 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b788:	b180      	cbz	r0, 800b7ac <ucdr_deserialize_int16_t+0xa0>
 800b78a:	7d23      	ldrb	r3, [r4, #20]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	68a3      	ldr	r3, [r4, #8]
 800b790:	d011      	beq.n	800b7b6 <ucdr_deserialize_int16_t+0xaa>
 800b792:	785b      	ldrb	r3, [r3, #1]
 800b794:	702b      	strb	r3, [r5, #0]
 800b796:	68a3      	ldr	r3, [r4, #8]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	706b      	strb	r3, [r5, #1]
 800b79c:	68a2      	ldr	r2, [r4, #8]
 800b79e:	6923      	ldr	r3, [r4, #16]
 800b7a0:	3202      	adds	r2, #2
 800b7a2:	3302      	adds	r3, #2
 800b7a4:	2102      	movs	r1, #2
 800b7a6:	60a2      	str	r2, [r4, #8]
 800b7a8:	6123      	str	r3, [r4, #16]
 800b7aa:	7561      	strb	r1, [r4, #21]
 800b7ac:	7da0      	ldrb	r0, [r4, #22]
 800b7ae:	f080 0001 	eor.w	r0, r0, #1
 800b7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b6:	881b      	ldrh	r3, [r3, #0]
 800b7b8:	802b      	strh	r3, [r5, #0]
 800b7ba:	e7ef      	b.n	800b79c <ucdr_deserialize_int16_t+0x90>
 800b7bc:	68a2      	ldr	r2, [r4, #8]
 800b7be:	6923      	ldr	r3, [r4, #16]
 800b7c0:	7da0      	ldrb	r0, [r4, #22]
 800b7c2:	f884 8015 	strb.w	r8, [r4, #21]
 800b7c6:	1b92      	subs	r2, r2, r6
 800b7c8:	1b9b      	subs	r3, r3, r6
 800b7ca:	60a2      	str	r2, [r4, #8]
 800b7cc:	6123      	str	r3, [r4, #16]
 800b7ce:	f080 0001 	eor.w	r0, r0, #1
 800b7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7d6:	68a3      	ldr	r3, [r4, #8]
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	706b      	strb	r3, [r5, #1]
 800b7dc:	e7c2      	b.n	800b764 <ucdr_deserialize_int16_t+0x58>
 800b7de:	4639      	mov	r1, r7
 800b7e0:	4632      	mov	r2, r6
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	f00d fe0f 	bl	8019406 <memcpy>
 800b7e8:	68a1      	ldr	r1, [r4, #8]
 800b7ea:	464a      	mov	r2, r9
 800b7ec:	19a8      	adds	r0, r5, r6
 800b7ee:	f00d fe0a 	bl	8019406 <memcpy>
 800b7f2:	e7b7      	b.n	800b764 <ucdr_deserialize_int16_t+0x58>

0800b7f4 <ucdr_serialize_int32_t>:
 800b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f8:	b082      	sub	sp, #8
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	9101      	str	r1, [sp, #4]
 800b7fe:	2104      	movs	r1, #4
 800b800:	f000 fcb6 	bl	800c170 <ucdr_buffer_alignment>
 800b804:	4601      	mov	r1, r0
 800b806:	4620      	mov	r0, r4
 800b808:	7d67      	ldrb	r7, [r4, #21]
 800b80a:	f000 fcf5 	bl	800c1f8 <ucdr_advance_buffer>
 800b80e:	2104      	movs	r1, #4
 800b810:	4620      	mov	r0, r4
 800b812:	f000 fc4d 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800b816:	2800      	cmp	r0, #0
 800b818:	d139      	bne.n	800b88e <ucdr_serialize_int32_t+0x9a>
 800b81a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b81e:	42ab      	cmp	r3, r5
 800b820:	d930      	bls.n	800b884 <ucdr_serialize_int32_t+0x90>
 800b822:	1b5e      	subs	r6, r3, r5
 800b824:	60a3      	str	r3, [r4, #8]
 800b826:	6923      	ldr	r3, [r4, #16]
 800b828:	f1c6 0804 	rsb	r8, r6, #4
 800b82c:	4433      	add	r3, r6
 800b82e:	6123      	str	r3, [r4, #16]
 800b830:	4641      	mov	r1, r8
 800b832:	4620      	mov	r0, r4
 800b834:	f000 fc48 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b838:	2800      	cmp	r0, #0
 800b83a:	d04c      	beq.n	800b8d6 <ucdr_serialize_int32_t+0xe2>
 800b83c:	7d23      	ldrb	r3, [r4, #20]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d063      	beq.n	800b90a <ucdr_serialize_int32_t+0x116>
 800b842:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b846:	702b      	strb	r3, [r5, #0]
 800b848:	2e00      	cmp	r6, #0
 800b84a:	d051      	beq.n	800b8f0 <ucdr_serialize_int32_t+0xfc>
 800b84c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b850:	706b      	strb	r3, [r5, #1]
 800b852:	2e01      	cmp	r6, #1
 800b854:	d050      	beq.n	800b8f8 <ucdr_serialize_int32_t+0x104>
 800b856:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b85a:	70ab      	strb	r3, [r5, #2]
 800b85c:	2e02      	cmp	r6, #2
 800b85e:	d04f      	beq.n	800b900 <ucdr_serialize_int32_t+0x10c>
 800b860:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b864:	70eb      	strb	r3, [r5, #3]
 800b866:	6923      	ldr	r3, [r4, #16]
 800b868:	68a2      	ldr	r2, [r4, #8]
 800b86a:	7da0      	ldrb	r0, [r4, #22]
 800b86c:	3304      	adds	r3, #4
 800b86e:	1b9e      	subs	r6, r3, r6
 800b870:	4442      	add	r2, r8
 800b872:	2304      	movs	r3, #4
 800b874:	f080 0001 	eor.w	r0, r0, #1
 800b878:	60a2      	str	r2, [r4, #8]
 800b87a:	6126      	str	r6, [r4, #16]
 800b87c:	7563      	strb	r3, [r4, #21]
 800b87e:	b002      	add	sp, #8
 800b880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b884:	2104      	movs	r1, #4
 800b886:	4620      	mov	r0, r4
 800b888:	f000 fc1e 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b88c:	b1d0      	cbz	r0, 800b8c4 <ucdr_serialize_int32_t+0xd0>
 800b88e:	7d23      	ldrb	r3, [r4, #20]
 800b890:	2b01      	cmp	r3, #1
 800b892:	68a3      	ldr	r3, [r4, #8]
 800b894:	d01c      	beq.n	800b8d0 <ucdr_serialize_int32_t+0xdc>
 800b896:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b89a:	701a      	strb	r2, [r3, #0]
 800b89c:	68a3      	ldr	r3, [r4, #8]
 800b89e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8a2:	705a      	strb	r2, [r3, #1]
 800b8a4:	68a3      	ldr	r3, [r4, #8]
 800b8a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8aa:	709a      	strb	r2, [r3, #2]
 800b8ac:	68a3      	ldr	r3, [r4, #8]
 800b8ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8b2:	70da      	strb	r2, [r3, #3]
 800b8b4:	68a2      	ldr	r2, [r4, #8]
 800b8b6:	6923      	ldr	r3, [r4, #16]
 800b8b8:	3204      	adds	r2, #4
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	2104      	movs	r1, #4
 800b8be:	60a2      	str	r2, [r4, #8]
 800b8c0:	6123      	str	r3, [r4, #16]
 800b8c2:	7561      	strb	r1, [r4, #21]
 800b8c4:	7da0      	ldrb	r0, [r4, #22]
 800b8c6:	f080 0001 	eor.w	r0, r0, #1
 800b8ca:	b002      	add	sp, #8
 800b8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d0:	9a01      	ldr	r2, [sp, #4]
 800b8d2:	601a      	str	r2, [r3, #0]
 800b8d4:	e7ee      	b.n	800b8b4 <ucdr_serialize_int32_t+0xc0>
 800b8d6:	68a2      	ldr	r2, [r4, #8]
 800b8d8:	6923      	ldr	r3, [r4, #16]
 800b8da:	7da0      	ldrb	r0, [r4, #22]
 800b8dc:	7567      	strb	r7, [r4, #21]
 800b8de:	1b92      	subs	r2, r2, r6
 800b8e0:	1b9b      	subs	r3, r3, r6
 800b8e2:	f080 0001 	eor.w	r0, r0, #1
 800b8e6:	60a2      	str	r2, [r4, #8]
 800b8e8:	6123      	str	r3, [r4, #16]
 800b8ea:	b002      	add	sp, #8
 800b8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f0:	68a3      	ldr	r3, [r4, #8]
 800b8f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8f6:	701a      	strb	r2, [r3, #0]
 800b8f8:	68a3      	ldr	r3, [r4, #8]
 800b8fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8fe:	701a      	strb	r2, [r3, #0]
 800b900:	68a3      	ldr	r3, [r4, #8]
 800b902:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b906:	701a      	strb	r2, [r3, #0]
 800b908:	e7ad      	b.n	800b866 <ucdr_serialize_int32_t+0x72>
 800b90a:	4628      	mov	r0, r5
 800b90c:	ad01      	add	r5, sp, #4
 800b90e:	4629      	mov	r1, r5
 800b910:	4632      	mov	r2, r6
 800b912:	f00d fd78 	bl	8019406 <memcpy>
 800b916:	68a0      	ldr	r0, [r4, #8]
 800b918:	4642      	mov	r2, r8
 800b91a:	19a9      	adds	r1, r5, r6
 800b91c:	f00d fd73 	bl	8019406 <memcpy>
 800b920:	e7a1      	b.n	800b866 <ucdr_serialize_int32_t+0x72>
 800b922:	bf00      	nop

0800b924 <ucdr_deserialize_int32_t>:
 800b924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b928:	460d      	mov	r5, r1
 800b92a:	2104      	movs	r1, #4
 800b92c:	4604      	mov	r4, r0
 800b92e:	f000 fc1f 	bl	800c170 <ucdr_buffer_alignment>
 800b932:	4601      	mov	r1, r0
 800b934:	4620      	mov	r0, r4
 800b936:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b93a:	f000 fc5d 	bl	800c1f8 <ucdr_advance_buffer>
 800b93e:	2104      	movs	r1, #4
 800b940:	4620      	mov	r0, r4
 800b942:	f000 fbb5 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800b946:	2800      	cmp	r0, #0
 800b948:	d138      	bne.n	800b9bc <ucdr_deserialize_int32_t+0x98>
 800b94a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b94e:	42b7      	cmp	r7, r6
 800b950:	d92f      	bls.n	800b9b2 <ucdr_deserialize_int32_t+0x8e>
 800b952:	6923      	ldr	r3, [r4, #16]
 800b954:	60a7      	str	r7, [r4, #8]
 800b956:	1bbf      	subs	r7, r7, r6
 800b958:	443b      	add	r3, r7
 800b95a:	f1c7 0904 	rsb	r9, r7, #4
 800b95e:	6123      	str	r3, [r4, #16]
 800b960:	4649      	mov	r1, r9
 800b962:	4620      	mov	r0, r4
 800b964:	f000 fbb0 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d046      	beq.n	800b9fa <ucdr_deserialize_int32_t+0xd6>
 800b96c:	7d23      	ldrb	r3, [r4, #20]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d05c      	beq.n	800ba2c <ucdr_deserialize_int32_t+0x108>
 800b972:	78f3      	ldrb	r3, [r6, #3]
 800b974:	702b      	strb	r3, [r5, #0]
 800b976:	2f00      	cmp	r7, #0
 800b978:	d04c      	beq.n	800ba14 <ucdr_deserialize_int32_t+0xf0>
 800b97a:	78b3      	ldrb	r3, [r6, #2]
 800b97c:	706b      	strb	r3, [r5, #1]
 800b97e:	2f01      	cmp	r7, #1
 800b980:	f105 0302 	add.w	r3, r5, #2
 800b984:	d04a      	beq.n	800ba1c <ucdr_deserialize_int32_t+0xf8>
 800b986:	7873      	ldrb	r3, [r6, #1]
 800b988:	70ab      	strb	r3, [r5, #2]
 800b98a:	2f02      	cmp	r7, #2
 800b98c:	f105 0303 	add.w	r3, r5, #3
 800b990:	d048      	beq.n	800ba24 <ucdr_deserialize_int32_t+0x100>
 800b992:	7833      	ldrb	r3, [r6, #0]
 800b994:	70eb      	strb	r3, [r5, #3]
 800b996:	6923      	ldr	r3, [r4, #16]
 800b998:	68a2      	ldr	r2, [r4, #8]
 800b99a:	7da0      	ldrb	r0, [r4, #22]
 800b99c:	2104      	movs	r1, #4
 800b99e:	3304      	adds	r3, #4
 800b9a0:	444a      	add	r2, r9
 800b9a2:	1bdb      	subs	r3, r3, r7
 800b9a4:	7561      	strb	r1, [r4, #21]
 800b9a6:	60a2      	str	r2, [r4, #8]
 800b9a8:	6123      	str	r3, [r4, #16]
 800b9aa:	f080 0001 	eor.w	r0, r0, #1
 800b9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b2:	2104      	movs	r1, #4
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 fb87 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800b9ba:	b1b0      	cbz	r0, 800b9ea <ucdr_deserialize_int32_t+0xc6>
 800b9bc:	7d23      	ldrb	r3, [r4, #20]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	68a3      	ldr	r3, [r4, #8]
 800b9c2:	d017      	beq.n	800b9f4 <ucdr_deserialize_int32_t+0xd0>
 800b9c4:	78db      	ldrb	r3, [r3, #3]
 800b9c6:	702b      	strb	r3, [r5, #0]
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	789b      	ldrb	r3, [r3, #2]
 800b9cc:	706b      	strb	r3, [r5, #1]
 800b9ce:	68a3      	ldr	r3, [r4, #8]
 800b9d0:	785b      	ldrb	r3, [r3, #1]
 800b9d2:	70ab      	strb	r3, [r5, #2]
 800b9d4:	68a3      	ldr	r3, [r4, #8]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	70eb      	strb	r3, [r5, #3]
 800b9da:	68a2      	ldr	r2, [r4, #8]
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	3204      	adds	r2, #4
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	2104      	movs	r1, #4
 800b9e4:	60a2      	str	r2, [r4, #8]
 800b9e6:	6123      	str	r3, [r4, #16]
 800b9e8:	7561      	strb	r1, [r4, #21]
 800b9ea:	7da0      	ldrb	r0, [r4, #22]
 800b9ec:	f080 0001 	eor.w	r0, r0, #1
 800b9f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	602b      	str	r3, [r5, #0]
 800b9f8:	e7ef      	b.n	800b9da <ucdr_deserialize_int32_t+0xb6>
 800b9fa:	68a2      	ldr	r2, [r4, #8]
 800b9fc:	6923      	ldr	r3, [r4, #16]
 800b9fe:	7da0      	ldrb	r0, [r4, #22]
 800ba00:	f884 8015 	strb.w	r8, [r4, #21]
 800ba04:	1bd2      	subs	r2, r2, r7
 800ba06:	1bdb      	subs	r3, r3, r7
 800ba08:	60a2      	str	r2, [r4, #8]
 800ba0a:	6123      	str	r3, [r4, #16]
 800ba0c:	f080 0001 	eor.w	r0, r0, #1
 800ba10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba14:	68a3      	ldr	r3, [r4, #8]
 800ba16:	789b      	ldrb	r3, [r3, #2]
 800ba18:	706b      	strb	r3, [r5, #1]
 800ba1a:	1cab      	adds	r3, r5, #2
 800ba1c:	68a2      	ldr	r2, [r4, #8]
 800ba1e:	7852      	ldrb	r2, [r2, #1]
 800ba20:	f803 2b01 	strb.w	r2, [r3], #1
 800ba24:	68a2      	ldr	r2, [r4, #8]
 800ba26:	7812      	ldrb	r2, [r2, #0]
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	e7b4      	b.n	800b996 <ucdr_deserialize_int32_t+0x72>
 800ba2c:	4631      	mov	r1, r6
 800ba2e:	463a      	mov	r2, r7
 800ba30:	4628      	mov	r0, r5
 800ba32:	f00d fce8 	bl	8019406 <memcpy>
 800ba36:	68a1      	ldr	r1, [r4, #8]
 800ba38:	464a      	mov	r2, r9
 800ba3a:	19e8      	adds	r0, r5, r7
 800ba3c:	f00d fce3 	bl	8019406 <memcpy>
 800ba40:	e7a9      	b.n	800b996 <ucdr_deserialize_int32_t+0x72>
 800ba42:	bf00      	nop

0800ba44 <ucdr_serialize_double>:
 800ba44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba48:	2108      	movs	r1, #8
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	ed8d 0b00 	vstr	d0, [sp]
 800ba52:	f000 fb8d 	bl	800c170 <ucdr_buffer_alignment>
 800ba56:	4601      	mov	r1, r0
 800ba58:	4620      	mov	r0, r4
 800ba5a:	7d67      	ldrb	r7, [r4, #21]
 800ba5c:	f000 fbcc 	bl	800c1f8 <ucdr_advance_buffer>
 800ba60:	2108      	movs	r1, #8
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 fb24 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	d14e      	bne.n	800bb0a <ucdr_serialize_double+0xc6>
 800ba6c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ba70:	42ab      	cmp	r3, r5
 800ba72:	d945      	bls.n	800bb00 <ucdr_serialize_double+0xbc>
 800ba74:	1b5e      	subs	r6, r3, r5
 800ba76:	60a3      	str	r3, [r4, #8]
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	f1c6 0808 	rsb	r8, r6, #8
 800ba7e:	4433      	add	r3, r6
 800ba80:	6123      	str	r3, [r4, #16]
 800ba82:	4641      	mov	r1, r8
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 fb1f 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d074      	beq.n	800bb78 <ucdr_serialize_double+0x134>
 800ba8e:	7d23      	ldrb	r3, [r4, #20]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	f000 809b 	beq.w	800bbcc <ucdr_serialize_double+0x188>
 800ba96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba9a:	702b      	strb	r3, [r5, #0]
 800ba9c:	2e00      	cmp	r6, #0
 800ba9e:	d078      	beq.n	800bb92 <ucdr_serialize_double+0x14e>
 800baa0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800baa4:	706b      	strb	r3, [r5, #1]
 800baa6:	2e01      	cmp	r6, #1
 800baa8:	d077      	beq.n	800bb9a <ucdr_serialize_double+0x156>
 800baaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800baae:	70ab      	strb	r3, [r5, #2]
 800bab0:	2e02      	cmp	r6, #2
 800bab2:	d076      	beq.n	800bba2 <ucdr_serialize_double+0x15e>
 800bab4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bab8:	70eb      	strb	r3, [r5, #3]
 800baba:	2e03      	cmp	r6, #3
 800babc:	d075      	beq.n	800bbaa <ucdr_serialize_double+0x166>
 800babe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bac2:	712b      	strb	r3, [r5, #4]
 800bac4:	2e04      	cmp	r6, #4
 800bac6:	d074      	beq.n	800bbb2 <ucdr_serialize_double+0x16e>
 800bac8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bacc:	716b      	strb	r3, [r5, #5]
 800bace:	2e05      	cmp	r6, #5
 800bad0:	d073      	beq.n	800bbba <ucdr_serialize_double+0x176>
 800bad2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bad6:	71ab      	strb	r3, [r5, #6]
 800bad8:	2e06      	cmp	r6, #6
 800bada:	d072      	beq.n	800bbc2 <ucdr_serialize_double+0x17e>
 800badc:	f89d 3000 	ldrb.w	r3, [sp]
 800bae0:	71eb      	strb	r3, [r5, #7]
 800bae2:	6923      	ldr	r3, [r4, #16]
 800bae4:	68a2      	ldr	r2, [r4, #8]
 800bae6:	7da0      	ldrb	r0, [r4, #22]
 800bae8:	3308      	adds	r3, #8
 800baea:	1b9e      	subs	r6, r3, r6
 800baec:	4442      	add	r2, r8
 800baee:	2308      	movs	r3, #8
 800baf0:	f080 0001 	eor.w	r0, r0, #1
 800baf4:	60a2      	str	r2, [r4, #8]
 800baf6:	6126      	str	r6, [r4, #16]
 800baf8:	7563      	strb	r3, [r4, #21]
 800bafa:	b002      	add	sp, #8
 800bafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb00:	2108      	movs	r1, #8
 800bb02:	4620      	mov	r0, r4
 800bb04:	f000 fae0 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800bb08:	b350      	cbz	r0, 800bb60 <ucdr_serialize_double+0x11c>
 800bb0a:	7d23      	ldrb	r3, [r4, #20]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d02d      	beq.n	800bb6c <ucdr_serialize_double+0x128>
 800bb10:	68a3      	ldr	r3, [r4, #8]
 800bb12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bb16:	701a      	strb	r2, [r3, #0]
 800bb18:	68a3      	ldr	r3, [r4, #8]
 800bb1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb1e:	705a      	strb	r2, [r3, #1]
 800bb20:	68a3      	ldr	r3, [r4, #8]
 800bb22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bb26:	709a      	strb	r2, [r3, #2]
 800bb28:	68a3      	ldr	r3, [r4, #8]
 800bb2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb2e:	70da      	strb	r2, [r3, #3]
 800bb30:	68a3      	ldr	r3, [r4, #8]
 800bb32:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bb36:	711a      	strb	r2, [r3, #4]
 800bb38:	68a3      	ldr	r3, [r4, #8]
 800bb3a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bb3e:	715a      	strb	r2, [r3, #5]
 800bb40:	68a3      	ldr	r3, [r4, #8]
 800bb42:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bb46:	719a      	strb	r2, [r3, #6]
 800bb48:	68a3      	ldr	r3, [r4, #8]
 800bb4a:	f89d 2000 	ldrb.w	r2, [sp]
 800bb4e:	71da      	strb	r2, [r3, #7]
 800bb50:	68a2      	ldr	r2, [r4, #8]
 800bb52:	6923      	ldr	r3, [r4, #16]
 800bb54:	3208      	adds	r2, #8
 800bb56:	3308      	adds	r3, #8
 800bb58:	2108      	movs	r1, #8
 800bb5a:	60a2      	str	r2, [r4, #8]
 800bb5c:	6123      	str	r3, [r4, #16]
 800bb5e:	7561      	strb	r1, [r4, #21]
 800bb60:	7da0      	ldrb	r0, [r4, #22]
 800bb62:	f080 0001 	eor.w	r0, r0, #1
 800bb66:	b002      	add	sp, #8
 800bb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb6c:	466b      	mov	r3, sp
 800bb6e:	cb03      	ldmia	r3!, {r0, r1}
 800bb70:	68a3      	ldr	r3, [r4, #8]
 800bb72:	6018      	str	r0, [r3, #0]
 800bb74:	6059      	str	r1, [r3, #4]
 800bb76:	e7eb      	b.n	800bb50 <ucdr_serialize_double+0x10c>
 800bb78:	68a2      	ldr	r2, [r4, #8]
 800bb7a:	6923      	ldr	r3, [r4, #16]
 800bb7c:	7da0      	ldrb	r0, [r4, #22]
 800bb7e:	7567      	strb	r7, [r4, #21]
 800bb80:	1b92      	subs	r2, r2, r6
 800bb82:	1b9b      	subs	r3, r3, r6
 800bb84:	f080 0001 	eor.w	r0, r0, #1
 800bb88:	60a2      	str	r2, [r4, #8]
 800bb8a:	6123      	str	r3, [r4, #16]
 800bb8c:	b002      	add	sp, #8
 800bb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb92:	68a3      	ldr	r3, [r4, #8]
 800bb94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb98:	701a      	strb	r2, [r3, #0]
 800bb9a:	68a3      	ldr	r3, [r4, #8]
 800bb9c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bba0:	701a      	strb	r2, [r3, #0]
 800bba2:	68a3      	ldr	r3, [r4, #8]
 800bba4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bba8:	701a      	strb	r2, [r3, #0]
 800bbaa:	68a3      	ldr	r3, [r4, #8]
 800bbac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bbb0:	701a      	strb	r2, [r3, #0]
 800bbb2:	68a3      	ldr	r3, [r4, #8]
 800bbb4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bbb8:	701a      	strb	r2, [r3, #0]
 800bbba:	68a3      	ldr	r3, [r4, #8]
 800bbbc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bbc0:	701a      	strb	r2, [r3, #0]
 800bbc2:	68a3      	ldr	r3, [r4, #8]
 800bbc4:	f89d 2000 	ldrb.w	r2, [sp]
 800bbc8:	701a      	strb	r2, [r3, #0]
 800bbca:	e78a      	b.n	800bae2 <ucdr_serialize_double+0x9e>
 800bbcc:	4628      	mov	r0, r5
 800bbce:	466d      	mov	r5, sp
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	4632      	mov	r2, r6
 800bbd4:	f00d fc17 	bl	8019406 <memcpy>
 800bbd8:	68a0      	ldr	r0, [r4, #8]
 800bbda:	4642      	mov	r2, r8
 800bbdc:	19a9      	adds	r1, r5, r6
 800bbde:	f00d fc12 	bl	8019406 <memcpy>
 800bbe2:	e77e      	b.n	800bae2 <ucdr_serialize_double+0x9e>

0800bbe4 <ucdr_serialize_endian_double>:
 800bbe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbe8:	460e      	mov	r6, r1
 800bbea:	b083      	sub	sp, #12
 800bbec:	2108      	movs	r1, #8
 800bbee:	4604      	mov	r4, r0
 800bbf0:	ed8d 0b00 	vstr	d0, [sp]
 800bbf4:	f000 fabc 	bl	800c170 <ucdr_buffer_alignment>
 800bbf8:	4601      	mov	r1, r0
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bc00:	f000 fafa 	bl	800c1f8 <ucdr_advance_buffer>
 800bc04:	2108      	movs	r1, #8
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fa52 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d14d      	bne.n	800bcac <ucdr_serialize_endian_double+0xc8>
 800bc10:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800bc14:	42bd      	cmp	r5, r7
 800bc16:	d944      	bls.n	800bca2 <ucdr_serialize_endian_double+0xbe>
 800bc18:	6923      	ldr	r3, [r4, #16]
 800bc1a:	60a5      	str	r5, [r4, #8]
 800bc1c:	1bed      	subs	r5, r5, r7
 800bc1e:	442b      	add	r3, r5
 800bc20:	f1c5 0908 	rsb	r9, r5, #8
 800bc24:	6123      	str	r3, [r4, #16]
 800bc26:	4649      	mov	r1, r9
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 fa4d 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d072      	beq.n	800bd18 <ucdr_serialize_endian_double+0x134>
 800bc32:	2e01      	cmp	r6, #1
 800bc34:	f000 809b 	beq.w	800bd6e <ucdr_serialize_endian_double+0x18a>
 800bc38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc3c:	703b      	strb	r3, [r7, #0]
 800bc3e:	2d00      	cmp	r5, #0
 800bc40:	d078      	beq.n	800bd34 <ucdr_serialize_endian_double+0x150>
 800bc42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bc46:	707b      	strb	r3, [r7, #1]
 800bc48:	2d01      	cmp	r5, #1
 800bc4a:	d077      	beq.n	800bd3c <ucdr_serialize_endian_double+0x158>
 800bc4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bc50:	70bb      	strb	r3, [r7, #2]
 800bc52:	2d02      	cmp	r5, #2
 800bc54:	d076      	beq.n	800bd44 <ucdr_serialize_endian_double+0x160>
 800bc56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bc5a:	70fb      	strb	r3, [r7, #3]
 800bc5c:	2d03      	cmp	r5, #3
 800bc5e:	d075      	beq.n	800bd4c <ucdr_serialize_endian_double+0x168>
 800bc60:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bc64:	713b      	strb	r3, [r7, #4]
 800bc66:	2d04      	cmp	r5, #4
 800bc68:	d074      	beq.n	800bd54 <ucdr_serialize_endian_double+0x170>
 800bc6a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bc6e:	717b      	strb	r3, [r7, #5]
 800bc70:	2d05      	cmp	r5, #5
 800bc72:	d073      	beq.n	800bd5c <ucdr_serialize_endian_double+0x178>
 800bc74:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bc78:	71bb      	strb	r3, [r7, #6]
 800bc7a:	2d06      	cmp	r5, #6
 800bc7c:	d072      	beq.n	800bd64 <ucdr_serialize_endian_double+0x180>
 800bc7e:	f89d 3000 	ldrb.w	r3, [sp]
 800bc82:	71fb      	strb	r3, [r7, #7]
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	68a2      	ldr	r2, [r4, #8]
 800bc88:	7da0      	ldrb	r0, [r4, #22]
 800bc8a:	3308      	adds	r3, #8
 800bc8c:	1b5d      	subs	r5, r3, r5
 800bc8e:	444a      	add	r2, r9
 800bc90:	2308      	movs	r3, #8
 800bc92:	f080 0001 	eor.w	r0, r0, #1
 800bc96:	60a2      	str	r2, [r4, #8]
 800bc98:	6125      	str	r5, [r4, #16]
 800bc9a:	7563      	strb	r3, [r4, #21]
 800bc9c:	b003      	add	sp, #12
 800bc9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bca2:	2108      	movs	r1, #8
 800bca4:	4620      	mov	r0, r4
 800bca6:	f000 fa0f 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800bcaa:	b348      	cbz	r0, 800bd00 <ucdr_serialize_endian_double+0x11c>
 800bcac:	2e01      	cmp	r6, #1
 800bcae:	d02d      	beq.n	800bd0c <ucdr_serialize_endian_double+0x128>
 800bcb0:	68a3      	ldr	r3, [r4, #8]
 800bcb2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bcb6:	701a      	strb	r2, [r3, #0]
 800bcb8:	68a3      	ldr	r3, [r4, #8]
 800bcba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bcbe:	705a      	strb	r2, [r3, #1]
 800bcc0:	68a3      	ldr	r3, [r4, #8]
 800bcc2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bcc6:	709a      	strb	r2, [r3, #2]
 800bcc8:	68a3      	ldr	r3, [r4, #8]
 800bcca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bcce:	70da      	strb	r2, [r3, #3]
 800bcd0:	68a3      	ldr	r3, [r4, #8]
 800bcd2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bcd6:	711a      	strb	r2, [r3, #4]
 800bcd8:	68a3      	ldr	r3, [r4, #8]
 800bcda:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bcde:	715a      	strb	r2, [r3, #5]
 800bce0:	68a3      	ldr	r3, [r4, #8]
 800bce2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bce6:	719a      	strb	r2, [r3, #6]
 800bce8:	68a3      	ldr	r3, [r4, #8]
 800bcea:	f89d 2000 	ldrb.w	r2, [sp]
 800bcee:	71da      	strb	r2, [r3, #7]
 800bcf0:	68a2      	ldr	r2, [r4, #8]
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	3208      	adds	r2, #8
 800bcf6:	3308      	adds	r3, #8
 800bcf8:	2108      	movs	r1, #8
 800bcfa:	60a2      	str	r2, [r4, #8]
 800bcfc:	6123      	str	r3, [r4, #16]
 800bcfe:	7561      	strb	r1, [r4, #21]
 800bd00:	7da0      	ldrb	r0, [r4, #22]
 800bd02:	f080 0001 	eor.w	r0, r0, #1
 800bd06:	b003      	add	sp, #12
 800bd08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd0c:	466b      	mov	r3, sp
 800bd0e:	cb03      	ldmia	r3!, {r0, r1}
 800bd10:	68a3      	ldr	r3, [r4, #8]
 800bd12:	6018      	str	r0, [r3, #0]
 800bd14:	6059      	str	r1, [r3, #4]
 800bd16:	e7eb      	b.n	800bcf0 <ucdr_serialize_endian_double+0x10c>
 800bd18:	68a2      	ldr	r2, [r4, #8]
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	7da0      	ldrb	r0, [r4, #22]
 800bd1e:	f884 8015 	strb.w	r8, [r4, #21]
 800bd22:	1b52      	subs	r2, r2, r5
 800bd24:	1b5b      	subs	r3, r3, r5
 800bd26:	f080 0001 	eor.w	r0, r0, #1
 800bd2a:	60a2      	str	r2, [r4, #8]
 800bd2c:	6123      	str	r3, [r4, #16]
 800bd2e:	b003      	add	sp, #12
 800bd30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd34:	68a3      	ldr	r3, [r4, #8]
 800bd36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd3a:	701a      	strb	r2, [r3, #0]
 800bd3c:	68a3      	ldr	r3, [r4, #8]
 800bd3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd42:	701a      	strb	r2, [r3, #0]
 800bd44:	68a3      	ldr	r3, [r4, #8]
 800bd46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd4a:	701a      	strb	r2, [r3, #0]
 800bd4c:	68a3      	ldr	r3, [r4, #8]
 800bd4e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bd52:	701a      	strb	r2, [r3, #0]
 800bd54:	68a3      	ldr	r3, [r4, #8]
 800bd56:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bd5a:	701a      	strb	r2, [r3, #0]
 800bd5c:	68a3      	ldr	r3, [r4, #8]
 800bd5e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bd62:	701a      	strb	r2, [r3, #0]
 800bd64:	68a3      	ldr	r3, [r4, #8]
 800bd66:	f89d 2000 	ldrb.w	r2, [sp]
 800bd6a:	701a      	strb	r2, [r3, #0]
 800bd6c:	e78a      	b.n	800bc84 <ucdr_serialize_endian_double+0xa0>
 800bd6e:	466e      	mov	r6, sp
 800bd70:	4631      	mov	r1, r6
 800bd72:	462a      	mov	r2, r5
 800bd74:	4638      	mov	r0, r7
 800bd76:	f00d fb46 	bl	8019406 <memcpy>
 800bd7a:	68a0      	ldr	r0, [r4, #8]
 800bd7c:	464a      	mov	r2, r9
 800bd7e:	1971      	adds	r1, r6, r5
 800bd80:	f00d fb41 	bl	8019406 <memcpy>
 800bd84:	e77e      	b.n	800bc84 <ucdr_serialize_endian_double+0xa0>
 800bd86:	bf00      	nop

0800bd88 <ucdr_deserialize_double>:
 800bd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd8c:	460d      	mov	r5, r1
 800bd8e:	2108      	movs	r1, #8
 800bd90:	4604      	mov	r4, r0
 800bd92:	f000 f9ed 	bl	800c170 <ucdr_buffer_alignment>
 800bd96:	4601      	mov	r1, r0
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bd9e:	f000 fa2b 	bl	800c1f8 <ucdr_advance_buffer>
 800bda2:	2108      	movs	r1, #8
 800bda4:	4620      	mov	r0, r4
 800bda6:	f000 f983 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d151      	bne.n	800be52 <ucdr_deserialize_double+0xca>
 800bdae:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bdb2:	42be      	cmp	r6, r7
 800bdb4:	d948      	bls.n	800be48 <ucdr_deserialize_double+0xc0>
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	60a6      	str	r6, [r4, #8]
 800bdba:	1bf6      	subs	r6, r6, r7
 800bdbc:	4433      	add	r3, r6
 800bdbe:	f1c6 0808 	rsb	r8, r6, #8
 800bdc2:	6123      	str	r3, [r4, #16]
 800bdc4:	4641      	mov	r1, r8
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f000 f97e 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d06d      	beq.n	800beac <ucdr_deserialize_double+0x124>
 800bdd0:	7d23      	ldrb	r3, [r4, #20]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	f000 8093 	beq.w	800befe <ucdr_deserialize_double+0x176>
 800bdd8:	79fb      	ldrb	r3, [r7, #7]
 800bdda:	702b      	strb	r3, [r5, #0]
 800bddc:	2e00      	cmp	r6, #0
 800bdde:	d072      	beq.n	800bec6 <ucdr_deserialize_double+0x13e>
 800bde0:	79bb      	ldrb	r3, [r7, #6]
 800bde2:	706b      	strb	r3, [r5, #1]
 800bde4:	2e01      	cmp	r6, #1
 800bde6:	f105 0302 	add.w	r3, r5, #2
 800bdea:	d070      	beq.n	800bece <ucdr_deserialize_double+0x146>
 800bdec:	797b      	ldrb	r3, [r7, #5]
 800bdee:	70ab      	strb	r3, [r5, #2]
 800bdf0:	2e02      	cmp	r6, #2
 800bdf2:	f105 0303 	add.w	r3, r5, #3
 800bdf6:	d06e      	beq.n	800bed6 <ucdr_deserialize_double+0x14e>
 800bdf8:	793b      	ldrb	r3, [r7, #4]
 800bdfa:	70eb      	strb	r3, [r5, #3]
 800bdfc:	2e03      	cmp	r6, #3
 800bdfe:	f105 0304 	add.w	r3, r5, #4
 800be02:	d06c      	beq.n	800bede <ucdr_deserialize_double+0x156>
 800be04:	78fb      	ldrb	r3, [r7, #3]
 800be06:	712b      	strb	r3, [r5, #4]
 800be08:	2e04      	cmp	r6, #4
 800be0a:	f105 0305 	add.w	r3, r5, #5
 800be0e:	d06a      	beq.n	800bee6 <ucdr_deserialize_double+0x15e>
 800be10:	78bb      	ldrb	r3, [r7, #2]
 800be12:	716b      	strb	r3, [r5, #5]
 800be14:	2e05      	cmp	r6, #5
 800be16:	f105 0306 	add.w	r3, r5, #6
 800be1a:	d068      	beq.n	800beee <ucdr_deserialize_double+0x166>
 800be1c:	787b      	ldrb	r3, [r7, #1]
 800be1e:	71ab      	strb	r3, [r5, #6]
 800be20:	2e06      	cmp	r6, #6
 800be22:	f105 0307 	add.w	r3, r5, #7
 800be26:	d066      	beq.n	800bef6 <ucdr_deserialize_double+0x16e>
 800be28:	783b      	ldrb	r3, [r7, #0]
 800be2a:	71eb      	strb	r3, [r5, #7]
 800be2c:	6923      	ldr	r3, [r4, #16]
 800be2e:	68a2      	ldr	r2, [r4, #8]
 800be30:	7da0      	ldrb	r0, [r4, #22]
 800be32:	3308      	adds	r3, #8
 800be34:	1b9e      	subs	r6, r3, r6
 800be36:	2308      	movs	r3, #8
 800be38:	4442      	add	r2, r8
 800be3a:	7563      	strb	r3, [r4, #21]
 800be3c:	60a2      	str	r2, [r4, #8]
 800be3e:	6126      	str	r6, [r4, #16]
 800be40:	f080 0001 	eor.w	r0, r0, #1
 800be44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be48:	2108      	movs	r1, #8
 800be4a:	4620      	mov	r0, r4
 800be4c:	f000 f93c 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800be50:	b310      	cbz	r0, 800be98 <ucdr_deserialize_double+0x110>
 800be52:	7d23      	ldrb	r3, [r4, #20]
 800be54:	2b01      	cmp	r3, #1
 800be56:	68a3      	ldr	r3, [r4, #8]
 800be58:	d023      	beq.n	800bea2 <ucdr_deserialize_double+0x11a>
 800be5a:	79db      	ldrb	r3, [r3, #7]
 800be5c:	702b      	strb	r3, [r5, #0]
 800be5e:	68a3      	ldr	r3, [r4, #8]
 800be60:	799b      	ldrb	r3, [r3, #6]
 800be62:	706b      	strb	r3, [r5, #1]
 800be64:	68a3      	ldr	r3, [r4, #8]
 800be66:	795b      	ldrb	r3, [r3, #5]
 800be68:	70ab      	strb	r3, [r5, #2]
 800be6a:	68a3      	ldr	r3, [r4, #8]
 800be6c:	791b      	ldrb	r3, [r3, #4]
 800be6e:	70eb      	strb	r3, [r5, #3]
 800be70:	68a3      	ldr	r3, [r4, #8]
 800be72:	78db      	ldrb	r3, [r3, #3]
 800be74:	712b      	strb	r3, [r5, #4]
 800be76:	68a3      	ldr	r3, [r4, #8]
 800be78:	789b      	ldrb	r3, [r3, #2]
 800be7a:	716b      	strb	r3, [r5, #5]
 800be7c:	68a3      	ldr	r3, [r4, #8]
 800be7e:	785b      	ldrb	r3, [r3, #1]
 800be80:	71ab      	strb	r3, [r5, #6]
 800be82:	68a3      	ldr	r3, [r4, #8]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	71eb      	strb	r3, [r5, #7]
 800be88:	68a2      	ldr	r2, [r4, #8]
 800be8a:	6923      	ldr	r3, [r4, #16]
 800be8c:	3208      	adds	r2, #8
 800be8e:	3308      	adds	r3, #8
 800be90:	2108      	movs	r1, #8
 800be92:	60a2      	str	r2, [r4, #8]
 800be94:	6123      	str	r3, [r4, #16]
 800be96:	7561      	strb	r1, [r4, #21]
 800be98:	7da0      	ldrb	r0, [r4, #22]
 800be9a:	f080 0001 	eor.w	r0, r0, #1
 800be9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	606b      	str	r3, [r5, #4]
 800bea8:	602a      	str	r2, [r5, #0]
 800beaa:	e7ed      	b.n	800be88 <ucdr_deserialize_double+0x100>
 800beac:	68a2      	ldr	r2, [r4, #8]
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	7da0      	ldrb	r0, [r4, #22]
 800beb2:	f884 9015 	strb.w	r9, [r4, #21]
 800beb6:	1b92      	subs	r2, r2, r6
 800beb8:	1b9b      	subs	r3, r3, r6
 800beba:	60a2      	str	r2, [r4, #8]
 800bebc:	6123      	str	r3, [r4, #16]
 800bebe:	f080 0001 	eor.w	r0, r0, #1
 800bec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bec6:	68a3      	ldr	r3, [r4, #8]
 800bec8:	799b      	ldrb	r3, [r3, #6]
 800beca:	706b      	strb	r3, [r5, #1]
 800becc:	1cab      	adds	r3, r5, #2
 800bece:	68a2      	ldr	r2, [r4, #8]
 800bed0:	7952      	ldrb	r2, [r2, #5]
 800bed2:	f803 2b01 	strb.w	r2, [r3], #1
 800bed6:	68a2      	ldr	r2, [r4, #8]
 800bed8:	7912      	ldrb	r2, [r2, #4]
 800beda:	f803 2b01 	strb.w	r2, [r3], #1
 800bede:	68a2      	ldr	r2, [r4, #8]
 800bee0:	78d2      	ldrb	r2, [r2, #3]
 800bee2:	f803 2b01 	strb.w	r2, [r3], #1
 800bee6:	68a2      	ldr	r2, [r4, #8]
 800bee8:	7892      	ldrb	r2, [r2, #2]
 800beea:	f803 2b01 	strb.w	r2, [r3], #1
 800beee:	68a2      	ldr	r2, [r4, #8]
 800bef0:	7852      	ldrb	r2, [r2, #1]
 800bef2:	f803 2b01 	strb.w	r2, [r3], #1
 800bef6:	68a2      	ldr	r2, [r4, #8]
 800bef8:	7812      	ldrb	r2, [r2, #0]
 800befa:	701a      	strb	r2, [r3, #0]
 800befc:	e796      	b.n	800be2c <ucdr_deserialize_double+0xa4>
 800befe:	4639      	mov	r1, r7
 800bf00:	4632      	mov	r2, r6
 800bf02:	4628      	mov	r0, r5
 800bf04:	f00d fa7f 	bl	8019406 <memcpy>
 800bf08:	68a1      	ldr	r1, [r4, #8]
 800bf0a:	4642      	mov	r2, r8
 800bf0c:	19a8      	adds	r0, r5, r6
 800bf0e:	f00d fa7a 	bl	8019406 <memcpy>
 800bf12:	e78b      	b.n	800be2c <ucdr_deserialize_double+0xa4>

0800bf14 <ucdr_deserialize_endian_double>:
 800bf14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf18:	460f      	mov	r7, r1
 800bf1a:	2108      	movs	r1, #8
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	4615      	mov	r5, r2
 800bf20:	f000 f926 	bl	800c170 <ucdr_buffer_alignment>
 800bf24:	4601      	mov	r1, r0
 800bf26:	4620      	mov	r0, r4
 800bf28:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bf2c:	f000 f964 	bl	800c1f8 <ucdr_advance_buffer>
 800bf30:	2108      	movs	r1, #8
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 f8bc 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d159      	bne.n	800bff0 <ucdr_deserialize_endian_double+0xdc>
 800bf3c:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800bf40:	4546      	cmp	r6, r8
 800bf42:	d950      	bls.n	800bfe6 <ucdr_deserialize_endian_double+0xd2>
 800bf44:	6923      	ldr	r3, [r4, #16]
 800bf46:	60a6      	str	r6, [r4, #8]
 800bf48:	eba6 0608 	sub.w	r6, r6, r8
 800bf4c:	4433      	add	r3, r6
 800bf4e:	f1c6 0a08 	rsb	sl, r6, #8
 800bf52:	6123      	str	r3, [r4, #16]
 800bf54:	4651      	mov	r1, sl
 800bf56:	4620      	mov	r0, r4
 800bf58:	f000 f8b6 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d073      	beq.n	800c048 <ucdr_deserialize_endian_double+0x134>
 800bf60:	2f01      	cmp	r7, #1
 800bf62:	f000 809a 	beq.w	800c09a <ucdr_deserialize_endian_double+0x186>
 800bf66:	f898 3007 	ldrb.w	r3, [r8, #7]
 800bf6a:	702b      	strb	r3, [r5, #0]
 800bf6c:	2e00      	cmp	r6, #0
 800bf6e:	d078      	beq.n	800c062 <ucdr_deserialize_endian_double+0x14e>
 800bf70:	f898 3006 	ldrb.w	r3, [r8, #6]
 800bf74:	706b      	strb	r3, [r5, #1]
 800bf76:	2e01      	cmp	r6, #1
 800bf78:	f105 0302 	add.w	r3, r5, #2
 800bf7c:	d075      	beq.n	800c06a <ucdr_deserialize_endian_double+0x156>
 800bf7e:	f898 3005 	ldrb.w	r3, [r8, #5]
 800bf82:	70ab      	strb	r3, [r5, #2]
 800bf84:	2e02      	cmp	r6, #2
 800bf86:	f105 0303 	add.w	r3, r5, #3
 800bf8a:	d072      	beq.n	800c072 <ucdr_deserialize_endian_double+0x15e>
 800bf8c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800bf90:	70eb      	strb	r3, [r5, #3]
 800bf92:	2e03      	cmp	r6, #3
 800bf94:	f105 0304 	add.w	r3, r5, #4
 800bf98:	d06f      	beq.n	800c07a <ucdr_deserialize_endian_double+0x166>
 800bf9a:	f898 3003 	ldrb.w	r3, [r8, #3]
 800bf9e:	712b      	strb	r3, [r5, #4]
 800bfa0:	2e04      	cmp	r6, #4
 800bfa2:	f105 0305 	add.w	r3, r5, #5
 800bfa6:	d06c      	beq.n	800c082 <ucdr_deserialize_endian_double+0x16e>
 800bfa8:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bfac:	716b      	strb	r3, [r5, #5]
 800bfae:	2e05      	cmp	r6, #5
 800bfb0:	f105 0306 	add.w	r3, r5, #6
 800bfb4:	d069      	beq.n	800c08a <ucdr_deserialize_endian_double+0x176>
 800bfb6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bfba:	71ab      	strb	r3, [r5, #6]
 800bfbc:	2e06      	cmp	r6, #6
 800bfbe:	f105 0307 	add.w	r3, r5, #7
 800bfc2:	d066      	beq.n	800c092 <ucdr_deserialize_endian_double+0x17e>
 800bfc4:	f898 3000 	ldrb.w	r3, [r8]
 800bfc8:	71eb      	strb	r3, [r5, #7]
 800bfca:	6923      	ldr	r3, [r4, #16]
 800bfcc:	68a2      	ldr	r2, [r4, #8]
 800bfce:	7da0      	ldrb	r0, [r4, #22]
 800bfd0:	3308      	adds	r3, #8
 800bfd2:	1b9e      	subs	r6, r3, r6
 800bfd4:	2308      	movs	r3, #8
 800bfd6:	4452      	add	r2, sl
 800bfd8:	7563      	strb	r3, [r4, #21]
 800bfda:	60a2      	str	r2, [r4, #8]
 800bfdc:	6126      	str	r6, [r4, #16]
 800bfde:	f080 0001 	eor.w	r0, r0, #1
 800bfe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe6:	2108      	movs	r1, #8
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f000 f86d 	bl	800c0c8 <ucdr_check_final_buffer_behavior>
 800bfee:	b308      	cbz	r0, 800c034 <ucdr_deserialize_endian_double+0x120>
 800bff0:	2f01      	cmp	r7, #1
 800bff2:	68a3      	ldr	r3, [r4, #8]
 800bff4:	d023      	beq.n	800c03e <ucdr_deserialize_endian_double+0x12a>
 800bff6:	79db      	ldrb	r3, [r3, #7]
 800bff8:	702b      	strb	r3, [r5, #0]
 800bffa:	68a3      	ldr	r3, [r4, #8]
 800bffc:	799b      	ldrb	r3, [r3, #6]
 800bffe:	706b      	strb	r3, [r5, #1]
 800c000:	68a3      	ldr	r3, [r4, #8]
 800c002:	795b      	ldrb	r3, [r3, #5]
 800c004:	70ab      	strb	r3, [r5, #2]
 800c006:	68a3      	ldr	r3, [r4, #8]
 800c008:	791b      	ldrb	r3, [r3, #4]
 800c00a:	70eb      	strb	r3, [r5, #3]
 800c00c:	68a3      	ldr	r3, [r4, #8]
 800c00e:	78db      	ldrb	r3, [r3, #3]
 800c010:	712b      	strb	r3, [r5, #4]
 800c012:	68a3      	ldr	r3, [r4, #8]
 800c014:	789b      	ldrb	r3, [r3, #2]
 800c016:	716b      	strb	r3, [r5, #5]
 800c018:	68a3      	ldr	r3, [r4, #8]
 800c01a:	785b      	ldrb	r3, [r3, #1]
 800c01c:	71ab      	strb	r3, [r5, #6]
 800c01e:	68a3      	ldr	r3, [r4, #8]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	71eb      	strb	r3, [r5, #7]
 800c024:	68a2      	ldr	r2, [r4, #8]
 800c026:	6923      	ldr	r3, [r4, #16]
 800c028:	3208      	adds	r2, #8
 800c02a:	3308      	adds	r3, #8
 800c02c:	2108      	movs	r1, #8
 800c02e:	60a2      	str	r2, [r4, #8]
 800c030:	6123      	str	r3, [r4, #16]
 800c032:	7561      	strb	r1, [r4, #21]
 800c034:	7da0      	ldrb	r0, [r4, #22]
 800c036:	f080 0001 	eor.w	r0, r0, #1
 800c03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	606b      	str	r3, [r5, #4]
 800c044:	602a      	str	r2, [r5, #0]
 800c046:	e7ed      	b.n	800c024 <ucdr_deserialize_endian_double+0x110>
 800c048:	68a2      	ldr	r2, [r4, #8]
 800c04a:	6923      	ldr	r3, [r4, #16]
 800c04c:	7da0      	ldrb	r0, [r4, #22]
 800c04e:	f884 9015 	strb.w	r9, [r4, #21]
 800c052:	1b92      	subs	r2, r2, r6
 800c054:	1b9b      	subs	r3, r3, r6
 800c056:	60a2      	str	r2, [r4, #8]
 800c058:	6123      	str	r3, [r4, #16]
 800c05a:	f080 0001 	eor.w	r0, r0, #1
 800c05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c062:	68a3      	ldr	r3, [r4, #8]
 800c064:	799b      	ldrb	r3, [r3, #6]
 800c066:	706b      	strb	r3, [r5, #1]
 800c068:	1cab      	adds	r3, r5, #2
 800c06a:	68a2      	ldr	r2, [r4, #8]
 800c06c:	7952      	ldrb	r2, [r2, #5]
 800c06e:	f803 2b01 	strb.w	r2, [r3], #1
 800c072:	68a2      	ldr	r2, [r4, #8]
 800c074:	7912      	ldrb	r2, [r2, #4]
 800c076:	f803 2b01 	strb.w	r2, [r3], #1
 800c07a:	68a2      	ldr	r2, [r4, #8]
 800c07c:	78d2      	ldrb	r2, [r2, #3]
 800c07e:	f803 2b01 	strb.w	r2, [r3], #1
 800c082:	68a2      	ldr	r2, [r4, #8]
 800c084:	7892      	ldrb	r2, [r2, #2]
 800c086:	f803 2b01 	strb.w	r2, [r3], #1
 800c08a:	68a2      	ldr	r2, [r4, #8]
 800c08c:	7852      	ldrb	r2, [r2, #1]
 800c08e:	f803 2b01 	strb.w	r2, [r3], #1
 800c092:	68a2      	ldr	r2, [r4, #8]
 800c094:	7812      	ldrb	r2, [r2, #0]
 800c096:	701a      	strb	r2, [r3, #0]
 800c098:	e797      	b.n	800bfca <ucdr_deserialize_endian_double+0xb6>
 800c09a:	4641      	mov	r1, r8
 800c09c:	4632      	mov	r2, r6
 800c09e:	4628      	mov	r0, r5
 800c0a0:	f00d f9b1 	bl	8019406 <memcpy>
 800c0a4:	68a1      	ldr	r1, [r4, #8]
 800c0a6:	4652      	mov	r2, sl
 800c0a8:	19a8      	adds	r0, r5, r6
 800c0aa:	f00d f9ac 	bl	8019406 <memcpy>
 800c0ae:	e78c      	b.n	800bfca <ucdr_deserialize_endian_double+0xb6>

0800c0b0 <ucdr_check_buffer_available_for>:
 800c0b0:	7d83      	ldrb	r3, [r0, #22]
 800c0b2:	b93b      	cbnz	r3, 800c0c4 <ucdr_check_buffer_available_for+0x14>
 800c0b4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c0b8:	4419      	add	r1, r3
 800c0ba:	4288      	cmp	r0, r1
 800c0bc:	bf34      	ite	cc
 800c0be:	2000      	movcc	r0, #0
 800c0c0:	2001      	movcs	r0, #1
 800c0c2:	4770      	bx	lr
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	4770      	bx	lr

0800c0c8 <ucdr_check_final_buffer_behavior>:
 800c0c8:	7d83      	ldrb	r3, [r0, #22]
 800c0ca:	b943      	cbnz	r3, 800c0de <ucdr_check_final_buffer_behavior+0x16>
 800c0cc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c0d0:	4291      	cmp	r1, r2
 800c0d2:	b510      	push	{r4, lr}
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	d205      	bcs.n	800c0e4 <ucdr_check_final_buffer_behavior+0x1c>
 800c0d8:	2301      	movs	r3, #1
 800c0da:	4618      	mov	r0, r3
 800c0dc:	bd10      	pop	{r4, pc}
 800c0de:	2300      	movs	r3, #0
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	4770      	bx	lr
 800c0e4:	6982      	ldr	r2, [r0, #24]
 800c0e6:	b13a      	cbz	r2, 800c0f8 <ucdr_check_final_buffer_behavior+0x30>
 800c0e8:	69c1      	ldr	r1, [r0, #28]
 800c0ea:	4790      	blx	r2
 800c0ec:	f080 0301 	eor.w	r3, r0, #1
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	75a0      	strb	r0, [r4, #22]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	bd10      	pop	{r4, pc}
 800c0f8:	2001      	movs	r0, #1
 800c0fa:	75a0      	strb	r0, [r4, #22]
 800c0fc:	e7fa      	b.n	800c0f4 <ucdr_check_final_buffer_behavior+0x2c>
 800c0fe:	bf00      	nop

0800c100 <ucdr_set_on_full_buffer_callback>:
 800c100:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop

0800c108 <ucdr_init_buffer_origin_offset_endian>:
 800c108:	b410      	push	{r4}
 800c10a:	9c01      	ldr	r4, [sp, #4]
 800c10c:	6001      	str	r1, [r0, #0]
 800c10e:	440a      	add	r2, r1
 800c110:	6042      	str	r2, [r0, #4]
 800c112:	190a      	adds	r2, r1, r4
 800c114:	441c      	add	r4, r3
 800c116:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c11a:	6082      	str	r2, [r0, #8]
 800c11c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c120:	7503      	strb	r3, [r0, #20]
 800c122:	2200      	movs	r2, #0
 800c124:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c12c:	7542      	strb	r2, [r0, #21]
 800c12e:	7582      	strb	r2, [r0, #22]
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop

0800c134 <ucdr_init_buffer_origin_offset>:
 800c134:	b510      	push	{r4, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	9c04      	ldr	r4, [sp, #16]
 800c13a:	9400      	str	r4, [sp, #0]
 800c13c:	2401      	movs	r4, #1
 800c13e:	9401      	str	r4, [sp, #4]
 800c140:	f7ff ffe2 	bl	800c108 <ucdr_init_buffer_origin_offset_endian>
 800c144:	b002      	add	sp, #8
 800c146:	bd10      	pop	{r4, pc}

0800c148 <ucdr_init_buffer_origin>:
 800c148:	b510      	push	{r4, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	2400      	movs	r4, #0
 800c14e:	9400      	str	r4, [sp, #0]
 800c150:	f7ff fff0 	bl	800c134 <ucdr_init_buffer_origin_offset>
 800c154:	b002      	add	sp, #8
 800c156:	bd10      	pop	{r4, pc}

0800c158 <ucdr_init_buffer>:
 800c158:	2300      	movs	r3, #0
 800c15a:	f7ff bff5 	b.w	800c148 <ucdr_init_buffer_origin>
 800c15e:	bf00      	nop

0800c160 <ucdr_alignment>:
 800c160:	fbb0 f3f1 	udiv	r3, r0, r1
 800c164:	fb03 0011 	mls	r0, r3, r1, r0
 800c168:	1a08      	subs	r0, r1, r0
 800c16a:	3901      	subs	r1, #1
 800c16c:	4008      	ands	r0, r1
 800c16e:	4770      	bx	lr

0800c170 <ucdr_buffer_alignment>:
 800c170:	7d43      	ldrb	r3, [r0, #21]
 800c172:	428b      	cmp	r3, r1
 800c174:	d208      	bcs.n	800c188 <ucdr_buffer_alignment+0x18>
 800c176:	6900      	ldr	r0, [r0, #16]
 800c178:	fbb0 f3f1 	udiv	r3, r0, r1
 800c17c:	fb01 0013 	mls	r0, r1, r3, r0
 800c180:	1a08      	subs	r0, r1, r0
 800c182:	3901      	subs	r1, #1
 800c184:	4008      	ands	r0, r1
 800c186:	4770      	bx	lr
 800c188:	2000      	movs	r0, #0
 800c18a:	4770      	bx	lr

0800c18c <ucdr_align_to>:
 800c18c:	b538      	push	{r3, r4, r5, lr}
 800c18e:	4604      	mov	r4, r0
 800c190:	460d      	mov	r5, r1
 800c192:	f7ff ffed 	bl	800c170 <ucdr_buffer_alignment>
 800c196:	68a3      	ldr	r3, [r4, #8]
 800c198:	6921      	ldr	r1, [r4, #16]
 800c19a:	7565      	strb	r5, [r4, #21]
 800c19c:	181a      	adds	r2, r3, r0
 800c19e:	6863      	ldr	r3, [r4, #4]
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	4408      	add	r0, r1
 800c1a4:	bf28      	it	cs
 800c1a6:	4613      	movcs	r3, r2
 800c1a8:	6120      	str	r0, [r4, #16]
 800c1aa:	60a3      	str	r3, [r4, #8]
 800c1ac:	bd38      	pop	{r3, r4, r5, pc}
 800c1ae:	bf00      	nop

0800c1b0 <ucdr_buffer_length>:
 800c1b0:	6882      	ldr	r2, [r0, #8]
 800c1b2:	6800      	ldr	r0, [r0, #0]
 800c1b4:	1a10      	subs	r0, r2, r0
 800c1b6:	4770      	bx	lr

0800c1b8 <ucdr_buffer_remaining>:
 800c1b8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c1bc:	1a10      	subs	r0, r2, r0
 800c1be:	4770      	bx	lr

0800c1c0 <ucdr_check_final_buffer_behavior_array>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	7d83      	ldrb	r3, [r0, #22]
 800c1c4:	b963      	cbnz	r3, 800c1e0 <ucdr_check_final_buffer_behavior_array+0x20>
 800c1c6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	460d      	mov	r5, r1
 800c1d0:	d308      	bcc.n	800c1e4 <ucdr_check_final_buffer_behavior_array+0x24>
 800c1d2:	b139      	cbz	r1, 800c1e4 <ucdr_check_final_buffer_behavior_array+0x24>
 800c1d4:	6983      	ldr	r3, [r0, #24]
 800c1d6:	b163      	cbz	r3, 800c1f2 <ucdr_check_final_buffer_behavior_array+0x32>
 800c1d8:	69c1      	ldr	r1, [r0, #28]
 800c1da:	4798      	blx	r3
 800c1dc:	75a0      	strb	r0, [r4, #22]
 800c1de:	b108      	cbz	r0, 800c1e4 <ucdr_check_final_buffer_behavior_array+0x24>
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f7ff ffe7 	bl	800c1b8 <ucdr_buffer_remaining>
 800c1ea:	42a8      	cmp	r0, r5
 800c1ec:	bf28      	it	cs
 800c1ee:	4628      	movcs	r0, r5
 800c1f0:	bd38      	pop	{r3, r4, r5, pc}
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	7583      	strb	r3, [r0, #22]
 800c1f6:	e7f3      	b.n	800c1e0 <ucdr_check_final_buffer_behavior_array+0x20>

0800c1f8 <ucdr_advance_buffer>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	460d      	mov	r5, r1
 800c1fe:	f7ff ff57 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800c202:	b178      	cbz	r0, 800c224 <ucdr_advance_buffer+0x2c>
 800c204:	6923      	ldr	r3, [r4, #16]
 800c206:	68a2      	ldr	r2, [r4, #8]
 800c208:	442b      	add	r3, r5
 800c20a:	6123      	str	r3, [r4, #16]
 800c20c:	2301      	movs	r3, #1
 800c20e:	442a      	add	r2, r5
 800c210:	7563      	strb	r3, [r4, #21]
 800c212:	60a2      	str	r2, [r4, #8]
 800c214:	bd38      	pop	{r3, r4, r5, pc}
 800c216:	68a2      	ldr	r2, [r4, #8]
 800c218:	6923      	ldr	r3, [r4, #16]
 800c21a:	4402      	add	r2, r0
 800c21c:	4403      	add	r3, r0
 800c21e:	1a2d      	subs	r5, r5, r0
 800c220:	60a2      	str	r2, [r4, #8]
 800c222:	6123      	str	r3, [r4, #16]
 800c224:	4629      	mov	r1, r5
 800c226:	2201      	movs	r2, #1
 800c228:	4620      	mov	r0, r4
 800c22a:	f7ff ffc9 	bl	800c1c0 <ucdr_check_final_buffer_behavior_array>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d1f1      	bne.n	800c216 <ucdr_advance_buffer+0x1e>
 800c232:	2301      	movs	r3, #1
 800c234:	7563      	strb	r3, [r4, #21]
 800c236:	bd38      	pop	{r3, r4, r5, pc}

0800c238 <rcl_get_zero_initialized_init_options>:
 800c238:	2000      	movs	r0, #0
 800c23a:	4770      	bx	lr

0800c23c <rcl_init_options_init>:
 800c23c:	b084      	sub	sp, #16
 800c23e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c240:	b097      	sub	sp, #92	@ 0x5c
 800c242:	ae1d      	add	r6, sp, #116	@ 0x74
 800c244:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c248:	2800      	cmp	r0, #0
 800c24a:	d058      	beq.n	800c2fe <rcl_init_options_init+0xc2>
 800c24c:	6803      	ldr	r3, [r0, #0]
 800c24e:	4605      	mov	r5, r0
 800c250:	b133      	cbz	r3, 800c260 <rcl_init_options_init+0x24>
 800c252:	2464      	movs	r4, #100	@ 0x64
 800c254:	4620      	mov	r0, r4
 800c256:	b017      	add	sp, #92	@ 0x5c
 800c258:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c25c:	b004      	add	sp, #16
 800c25e:	4770      	bx	lr
 800c260:	4630      	mov	r0, r6
 800c262:	f001 f9cf 	bl	800d604 <rcutils_allocator_is_valid>
 800c266:	2800      	cmp	r0, #0
 800c268:	d049      	beq.n	800c2fe <rcl_init_options_init+0xc2>
 800c26a:	46b4      	mov	ip, r6
 800c26c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c270:	ac11      	add	r4, sp, #68	@ 0x44
 800c272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c274:	f8dc 3000 	ldr.w	r3, [ip]
 800c278:	6023      	str	r3, [r4, #0]
 800c27a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c27c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c27e:	2050      	movs	r0, #80	@ 0x50
 800c280:	4798      	blx	r3
 800c282:	4604      	mov	r4, r0
 800c284:	6028      	str	r0, [r5, #0]
 800c286:	2800      	cmp	r0, #0
 800c288:	d03b      	beq.n	800c302 <rcl_init_options_init+0xc6>
 800c28a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c28e:	4686      	mov	lr, r0
 800c290:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c294:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c298:	f8dc 3000 	ldr.w	r3, [ip]
 800c29c:	f8ce 3000 	str.w	r3, [lr]
 800c2a0:	a802      	add	r0, sp, #8
 800c2a2:	f001 fa41 	bl	800d728 <rmw_get_zero_initialized_init_options>
 800c2a6:	f10d 0e08 	add.w	lr, sp, #8
 800c2aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c2ae:	f104 0c18 	add.w	ip, r4, #24
 800c2b2:	682f      	ldr	r7, [r5, #0]
 800c2b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c2bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c2c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c2cc:	ac20      	add	r4, sp, #128	@ 0x80
 800c2ce:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c2d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c2d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c2da:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c2de:	f107 0018 	add.w	r0, r7, #24
 800c2e2:	f001 fa4f 	bl	800d784 <rmw_init_options_init>
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d0b3      	beq.n	800c254 <rcl_init_options_init+0x18>
 800c2ec:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c2ee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c2f0:	6828      	ldr	r0, [r5, #0]
 800c2f2:	4798      	blx	r3
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f007 f87d 	bl	80133f4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	e7aa      	b.n	800c254 <rcl_init_options_init+0x18>
 800c2fe:	240b      	movs	r4, #11
 800c300:	e7a8      	b.n	800c254 <rcl_init_options_init+0x18>
 800c302:	240a      	movs	r4, #10
 800c304:	e7a6      	b.n	800c254 <rcl_init_options_init+0x18>
 800c306:	bf00      	nop

0800c308 <rcl_init_options_fini>:
 800c308:	b530      	push	{r4, r5, lr}
 800c30a:	b087      	sub	sp, #28
 800c30c:	b1f0      	cbz	r0, 800c34c <rcl_init_options_fini+0x44>
 800c30e:	6803      	ldr	r3, [r0, #0]
 800c310:	4604      	mov	r4, r0
 800c312:	b1db      	cbz	r3, 800c34c <rcl_init_options_fini+0x44>
 800c314:	469c      	mov	ip, r3
 800c316:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c31a:	f10d 0e04 	add.w	lr, sp, #4
 800c31e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c322:	f8dc 3000 	ldr.w	r3, [ip]
 800c326:	f8ce 3000 	str.w	r3, [lr]
 800c32a:	a801      	add	r0, sp, #4
 800c32c:	f001 f96a 	bl	800d604 <rcutils_allocator_is_valid>
 800c330:	b160      	cbz	r0, 800c34c <rcl_init_options_fini+0x44>
 800c332:	6820      	ldr	r0, [r4, #0]
 800c334:	3018      	adds	r0, #24
 800c336:	f001 fad5 	bl	800d8e4 <rmw_init_options_fini>
 800c33a:	4605      	mov	r5, r0
 800c33c:	b950      	cbnz	r0, 800c354 <rcl_init_options_fini+0x4c>
 800c33e:	6820      	ldr	r0, [r4, #0]
 800c340:	9b02      	ldr	r3, [sp, #8]
 800c342:	9905      	ldr	r1, [sp, #20]
 800c344:	4798      	blx	r3
 800c346:	4628      	mov	r0, r5
 800c348:	b007      	add	sp, #28
 800c34a:	bd30      	pop	{r4, r5, pc}
 800c34c:	250b      	movs	r5, #11
 800c34e:	4628      	mov	r0, r5
 800c350:	b007      	add	sp, #28
 800c352:	bd30      	pop	{r4, r5, pc}
 800c354:	f007 f84e 	bl	80133f4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c358:	4605      	mov	r5, r0
 800c35a:	e7f8      	b.n	800c34e <rcl_init_options_fini+0x46>

0800c35c <rcl_init_options_copy>:
 800c35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c360:	b094      	sub	sp, #80	@ 0x50
 800c362:	2800      	cmp	r0, #0
 800c364:	d058      	beq.n	800c418 <rcl_init_options_copy+0xbc>
 800c366:	4604      	mov	r4, r0
 800c368:	6800      	ldr	r0, [r0, #0]
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d054      	beq.n	800c418 <rcl_init_options_copy+0xbc>
 800c36e:	460e      	mov	r6, r1
 800c370:	f001 f948 	bl	800d604 <rcutils_allocator_is_valid>
 800c374:	2800      	cmp	r0, #0
 800c376:	d04f      	beq.n	800c418 <rcl_init_options_copy+0xbc>
 800c378:	2e00      	cmp	r6, #0
 800c37a:	d04d      	beq.n	800c418 <rcl_init_options_copy+0xbc>
 800c37c:	6833      	ldr	r3, [r6, #0]
 800c37e:	b123      	cbz	r3, 800c38a <rcl_init_options_copy+0x2e>
 800c380:	2464      	movs	r4, #100	@ 0x64
 800c382:	4620      	mov	r0, r4
 800c384:	b014      	add	sp, #80	@ 0x50
 800c386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c38a:	6827      	ldr	r7, [r4, #0]
 800c38c:	46bc      	mov	ip, r7
 800c38e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c392:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c396:	f8dc 3000 	ldr.w	r3, [ip]
 800c39a:	f8d7 8000 	ldr.w	r8, [r7]
 800c39e:	602b      	str	r3, [r5, #0]
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	2050      	movs	r0, #80	@ 0x50
 800c3a4:	47c0      	blx	r8
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	6030      	str	r0, [r6, #0]
 800c3aa:	b3d0      	cbz	r0, 800c422 <rcl_init_options_copy+0xc6>
 800c3ac:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c3b0:	4686      	mov	lr, r0
 800c3b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c3b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c3ba:	f8dc 3000 	ldr.w	r3, [ip]
 800c3be:	f8ce 3000 	str.w	r3, [lr]
 800c3c2:	4668      	mov	r0, sp
 800c3c4:	f001 f9b0 	bl	800d728 <rmw_get_zero_initialized_init_options>
 800c3c8:	46ee      	mov	lr, sp
 800c3ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c3ce:	f105 0c18 	add.w	ip, r5, #24
 800c3d2:	6824      	ldr	r4, [r4, #0]
 800c3d4:	6835      	ldr	r5, [r6, #0]
 800c3d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c3de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c3e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3ea:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c3ee:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c3f2:	f104 0018 	add.w	r0, r4, #24
 800c3f6:	f105 0118 	add.w	r1, r5, #24
 800c3fa:	f001 fa2b 	bl	800d854 <rmw_init_options_copy>
 800c3fe:	4604      	mov	r4, r0
 800c400:	2800      	cmp	r0, #0
 800c402:	d0be      	beq.n	800c382 <rcl_init_options_copy+0x26>
 800c404:	f001 f90c 	bl	800d620 <rcutils_get_error_string>
 800c408:	f001 f922 	bl	800d650 <rcutils_reset_error>
 800c40c:	4630      	mov	r0, r6
 800c40e:	f7ff ff7b 	bl	800c308 <rcl_init_options_fini>
 800c412:	b140      	cbz	r0, 800c426 <rcl_init_options_copy+0xca>
 800c414:	4604      	mov	r4, r0
 800c416:	e7b4      	b.n	800c382 <rcl_init_options_copy+0x26>
 800c418:	240b      	movs	r4, #11
 800c41a:	4620      	mov	r0, r4
 800c41c:	b014      	add	sp, #80	@ 0x50
 800c41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c422:	240a      	movs	r4, #10
 800c424:	e7ad      	b.n	800c382 <rcl_init_options_copy+0x26>
 800c426:	4620      	mov	r0, r4
 800c428:	b014      	add	sp, #80	@ 0x50
 800c42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c42e:	f006 bfe1 	b.w	80133f4 <rcl_convert_rmw_ret_to_rcl_ret>
 800c432:	bf00      	nop

0800c434 <rcl_init_options_set_domain_id>:
 800c434:	b120      	cbz	r0, 800c440 <rcl_init_options_set_domain_id+0xc>
 800c436:	6803      	ldr	r3, [r0, #0]
 800c438:	b113      	cbz	r3, 800c440 <rcl_init_options_set_domain_id+0xc>
 800c43a:	6259      	str	r1, [r3, #36]	@ 0x24
 800c43c:	2000      	movs	r0, #0
 800c43e:	4770      	bx	lr
 800c440:	200b      	movs	r0, #11
 800c442:	4770      	bx	lr

0800c444 <rcl_get_zero_initialized_publisher>:
 800c444:	4b01      	ldr	r3, [pc, #4]	@ (800c44c <rcl_get_zero_initialized_publisher+0x8>)
 800c446:	6818      	ldr	r0, [r3, #0]
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	0801ae54 	.word	0x0801ae54

0800c450 <rcl_publisher_init>:
 800c450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c454:	b088      	sub	sp, #32
 800c456:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c458:	2d00      	cmp	r5, #0
 800c45a:	d069      	beq.n	800c530 <rcl_publisher_init+0xe0>
 800c45c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c460:	4604      	mov	r4, r0
 800c462:	4648      	mov	r0, r9
 800c464:	460e      	mov	r6, r1
 800c466:	4690      	mov	r8, r2
 800c468:	461f      	mov	r7, r3
 800c46a:	f001 f8cb 	bl	800d604 <rcutils_allocator_is_valid>
 800c46e:	2800      	cmp	r0, #0
 800c470:	d05e      	beq.n	800c530 <rcl_publisher_init+0xe0>
 800c472:	2c00      	cmp	r4, #0
 800c474:	d05c      	beq.n	800c530 <rcl_publisher_init+0xe0>
 800c476:	f8d4 a000 	ldr.w	sl, [r4]
 800c47a:	f1ba 0f00 	cmp.w	sl, #0
 800c47e:	d004      	beq.n	800c48a <rcl_publisher_init+0x3a>
 800c480:	2764      	movs	r7, #100	@ 0x64
 800c482:	4638      	mov	r0, r7
 800c484:	b008      	add	sp, #32
 800c486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c48a:	4630      	mov	r0, r6
 800c48c:	f007 faac 	bl	80139e8 <rcl_node_is_valid>
 800c490:	2800      	cmp	r0, #0
 800c492:	d052      	beq.n	800c53a <rcl_publisher_init+0xea>
 800c494:	f1b8 0f00 	cmp.w	r8, #0
 800c498:	d04a      	beq.n	800c530 <rcl_publisher_init+0xe0>
 800c49a:	2f00      	cmp	r7, #0
 800c49c:	d048      	beq.n	800c530 <rcl_publisher_init+0xe0>
 800c49e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c4a2:	aa07      	add	r2, sp, #28
 800c4a4:	9205      	str	r2, [sp, #20]
 800c4a6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c4aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c4b2:	f8cd a01c 	str.w	sl, [sp, #28]
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c4bc:	4630      	mov	r0, r6
 800c4be:	f007 fae7 	bl	8013a90 <rcl_node_resolve_name>
 800c4c2:	4607      	mov	r7, r0
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d14f      	bne.n	800c568 <rcl_publisher_init+0x118>
 800c4c8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c4ca:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c4cc:	20c8      	movs	r0, #200	@ 0xc8
 800c4ce:	4798      	blx	r3
 800c4d0:	6020      	str	r0, [r4, #0]
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d04e      	beq.n	800c574 <rcl_publisher_init+0x124>
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	f007 faa8 	bl	8013a2c <rcl_node_get_rmw_handle>
 800c4dc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	9a07      	ldr	r2, [sp, #28]
 800c4e4:	6827      	ldr	r7, [r4, #0]
 800c4e6:	462b      	mov	r3, r5
 800c4e8:	4641      	mov	r1, r8
 800c4ea:	f001 fd23 	bl	800df34 <rmw_create_publisher>
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c4f4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c4f8:	b370      	cbz	r0, 800c558 <rcl_publisher_init+0x108>
 800c4fa:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c4fe:	f001 fdf7 	bl	800e0f0 <rmw_publisher_get_actual_qos>
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	4607      	mov	r7, r0
 800c506:	b9d0      	cbnz	r0, 800c53e <rcl_publisher_init+0xee>
 800c508:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c50c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c510:	4629      	mov	r1, r5
 800c512:	2270      	movs	r2, #112	@ 0x70
 800c514:	4618      	mov	r0, r3
 800c516:	f00c ff76 	bl	8019406 <memcpy>
 800c51a:	6832      	ldr	r2, [r6, #0]
 800c51c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c520:	9807      	ldr	r0, [sp, #28]
 800c522:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c524:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c526:	4798      	blx	r3
 800c528:	4638      	mov	r0, r7
 800c52a:	b008      	add	sp, #32
 800c52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c530:	270b      	movs	r7, #11
 800c532:	4638      	mov	r0, r7
 800c534:	b008      	add	sp, #32
 800c536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53a:	27c8      	movs	r7, #200	@ 0xc8
 800c53c:	e7a1      	b.n	800c482 <rcl_publisher_init+0x32>
 800c53e:	b18b      	cbz	r3, 800c564 <rcl_publisher_init+0x114>
 800c540:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c544:	b142      	cbz	r2, 800c558 <rcl_publisher_init+0x108>
 800c546:	4630      	mov	r0, r6
 800c548:	f007 fa70 	bl	8013a2c <rcl_node_get_rmw_handle>
 800c54c:	6823      	ldr	r3, [r4, #0]
 800c54e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c552:	f001 fddd 	bl	800e110 <rmw_destroy_publisher>
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c55a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c55c:	4618      	mov	r0, r3
 800c55e:	4790      	blx	r2
 800c560:	2300      	movs	r3, #0
 800c562:	6023      	str	r3, [r4, #0]
 800c564:	2701      	movs	r7, #1
 800c566:	e7db      	b.n	800c520 <rcl_publisher_init+0xd0>
 800c568:	2867      	cmp	r0, #103	@ 0x67
 800c56a:	d0d9      	beq.n	800c520 <rcl_publisher_init+0xd0>
 800c56c:	2869      	cmp	r0, #105	@ 0x69
 800c56e:	d003      	beq.n	800c578 <rcl_publisher_init+0x128>
 800c570:	280a      	cmp	r0, #10
 800c572:	d1f7      	bne.n	800c564 <rcl_publisher_init+0x114>
 800c574:	270a      	movs	r7, #10
 800c576:	e7d3      	b.n	800c520 <rcl_publisher_init+0xd0>
 800c578:	2767      	movs	r7, #103	@ 0x67
 800c57a:	e7d1      	b.n	800c520 <rcl_publisher_init+0xd0>

0800c57c <rcl_publisher_get_default_options>:
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	4d14      	ldr	r5, [pc, #80]	@ (800c5d0 <rcl_publisher_get_default_options+0x54>)
 800c580:	4914      	ldr	r1, [pc, #80]	@ (800c5d4 <rcl_publisher_get_default_options+0x58>)
 800c582:	b088      	sub	sp, #32
 800c584:	4604      	mov	r4, r0
 800c586:	2250      	movs	r2, #80	@ 0x50
 800c588:	4628      	mov	r0, r5
 800c58a:	f00c ff3c 	bl	8019406 <memcpy>
 800c58e:	a802      	add	r0, sp, #8
 800c590:	f001 f82a 	bl	800d5e8 <rcutils_get_default_allocator>
 800c594:	f10d 0c08 	add.w	ip, sp, #8
 800c598:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c59c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c5a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c5a4:	466e      	mov	r6, sp
 800c5a6:	f8dc 3000 	ldr.w	r3, [ip]
 800c5aa:	f8ce 3000 	str.w	r3, [lr]
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f001 f8ca 	bl	800d748 <rmw_get_default_publisher_options>
 800c5b4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c5b8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c5bc:	e883 0003 	stmia.w	r3, {r0, r1}
 800c5c0:	2270      	movs	r2, #112	@ 0x70
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f00c ff1e 	bl	8019406 <memcpy>
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	b008      	add	sp, #32
 800c5ce:	bd70      	pop	{r4, r5, r6, pc}
 800c5d0:	20006aa8 	.word	0x20006aa8
 800c5d4:	0801ae58 	.word	0x0801ae58

0800c5d8 <rcl_publish>:
 800c5d8:	b1f8      	cbz	r0, 800c61a <rcl_publish+0x42>
 800c5da:	6803      	ldr	r3, [r0, #0]
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	4604      	mov	r4, r0
 800c5e0:	b1b3      	cbz	r3, 800c610 <rcl_publish+0x38>
 800c5e2:	4616      	mov	r6, r2
 800c5e4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c5e8:	b192      	cbz	r2, 800c610 <rcl_publish+0x38>
 800c5ea:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c5ee:	460d      	mov	r5, r1
 800c5f0:	f006 ff1e 	bl	8013430 <rcl_context_is_valid>
 800c5f4:	b160      	cbz	r0, 800c610 <rcl_publish+0x38>
 800c5f6:	6823      	ldr	r3, [r4, #0]
 800c5f8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c5fc:	b140      	cbz	r0, 800c610 <rcl_publish+0x38>
 800c5fe:	b155      	cbz	r5, 800c616 <rcl_publish+0x3e>
 800c600:	4632      	mov	r2, r6
 800c602:	4629      	mov	r1, r5
 800c604:	f001 fc36 	bl	800de74 <rmw_publish>
 800c608:	3800      	subs	r0, #0
 800c60a:	bf18      	it	ne
 800c60c:	2001      	movne	r0, #1
 800c60e:	bd70      	pop	{r4, r5, r6, pc}
 800c610:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c614:	bd70      	pop	{r4, r5, r6, pc}
 800c616:	200b      	movs	r0, #11
 800c618:	bd70      	pop	{r4, r5, r6, pc}
 800c61a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c61e:	4770      	bx	lr

0800c620 <rcl_publisher_is_valid>:
 800c620:	b1a0      	cbz	r0, 800c64c <rcl_publisher_is_valid+0x2c>
 800c622:	6803      	ldr	r3, [r0, #0]
 800c624:	b510      	push	{r4, lr}
 800c626:	4604      	mov	r4, r0
 800c628:	b173      	cbz	r3, 800c648 <rcl_publisher_is_valid+0x28>
 800c62a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c62e:	b15a      	cbz	r2, 800c648 <rcl_publisher_is_valid+0x28>
 800c630:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c634:	f006 fefc 	bl	8013430 <rcl_context_is_valid>
 800c638:	b130      	cbz	r0, 800c648 <rcl_publisher_is_valid+0x28>
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c640:	3800      	subs	r0, #0
 800c642:	bf18      	it	ne
 800c644:	2001      	movne	r0, #1
 800c646:	bd10      	pop	{r4, pc}
 800c648:	2000      	movs	r0, #0
 800c64a:	bd10      	pop	{r4, pc}
 800c64c:	2000      	movs	r0, #0
 800c64e:	4770      	bx	lr

0800c650 <rcl_publisher_is_valid_except_context>:
 800c650:	b130      	cbz	r0, 800c660 <rcl_publisher_is_valid_except_context+0x10>
 800c652:	6800      	ldr	r0, [r0, #0]
 800c654:	b120      	cbz	r0, 800c660 <rcl_publisher_is_valid_except_context+0x10>
 800c656:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c65a:	3800      	subs	r0, #0
 800c65c:	bf18      	it	ne
 800c65e:	2001      	movne	r0, #1
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop

0800c664 <_rclc_check_for_new_data>:
 800c664:	2800      	cmp	r0, #0
 800c666:	d046      	beq.n	800c6f6 <_rclc_check_for_new_data+0x92>
 800c668:	b510      	push	{r4, lr}
 800c66a:	7802      	ldrb	r2, [r0, #0]
 800c66c:	b084      	sub	sp, #16
 800c66e:	4603      	mov	r3, r0
 800c670:	2a0a      	cmp	r2, #10
 800c672:	d842      	bhi.n	800c6fa <_rclc_check_for_new_data+0x96>
 800c674:	e8df f002 	tbb	[pc, r2]
 800c678:	14181212 	.word	0x14181212
 800c67c:	06060614 	.word	0x06060614
 800c680:	2e1a      	.short	0x2e1a
 800c682:	16          	.byte	0x16
 800c683:	00          	.byte	0x00
 800c684:	6a0a      	ldr	r2, [r1, #32]
 800c686:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c688:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c68c:	2000      	movs	r0, #0
 800c68e:	1a12      	subs	r2, r2, r0
 800c690:	bf18      	it	ne
 800c692:	2201      	movne	r2, #1
 800c694:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c698:	b004      	add	sp, #16
 800c69a:	bd10      	pop	{r4, pc}
 800c69c:	680a      	ldr	r2, [r1, #0]
 800c69e:	e7f2      	b.n	800c686 <_rclc_check_for_new_data+0x22>
 800c6a0:	698a      	ldr	r2, [r1, #24]
 800c6a2:	e7f0      	b.n	800c686 <_rclc_check_for_new_data+0x22>
 800c6a4:	688a      	ldr	r2, [r1, #8]
 800c6a6:	e7ee      	b.n	800c686 <_rclc_check_for_new_data+0x22>
 800c6a8:	690a      	ldr	r2, [r1, #16]
 800c6aa:	e7ec      	b.n	800c686 <_rclc_check_for_new_data+0x22>
 800c6ac:	685c      	ldr	r4, [r3, #4]
 800c6ae:	4608      	mov	r0, r1
 800c6b0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c6b4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c6b8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c6bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c6c6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c6ca:	f104 0110 	add.w	r1, r4, #16
 800c6ce:	f009 f88f 	bl	80157f0 <rcl_action_client_wait_set_get_entities_ready>
 800c6d2:	e7e1      	b.n	800c698 <_rclc_check_for_new_data+0x34>
 800c6d4:	685c      	ldr	r4, [r3, #4]
 800c6d6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c6da:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c6de:	e9cd 3200 	strd	r3, r2, [sp]
 800c6e2:	4608      	mov	r0, r1
 800c6e4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c6e8:	f104 0220 	add.w	r2, r4, #32
 800c6ec:	f104 0110 	add.w	r1, r4, #16
 800c6f0:	f009 fa96 	bl	8015c20 <rcl_action_server_wait_set_get_entities_ready>
 800c6f4:	e7d0      	b.n	800c698 <_rclc_check_for_new_data+0x34>
 800c6f6:	200b      	movs	r0, #11
 800c6f8:	4770      	bx	lr
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	e7cc      	b.n	800c698 <_rclc_check_for_new_data+0x34>
 800c6fe:	bf00      	nop

0800c700 <_rclc_take_new_data>:
 800c700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c702:	b09b      	sub	sp, #108	@ 0x6c
 800c704:	2800      	cmp	r0, #0
 800c706:	f000 8088 	beq.w	800c81a <_rclc_take_new_data+0x11a>
 800c70a:	7803      	ldrb	r3, [r0, #0]
 800c70c:	4604      	mov	r4, r0
 800c70e:	2b0a      	cmp	r3, #10
 800c710:	f200 8167 	bhi.w	800c9e2 <_rclc_take_new_data+0x2e2>
 800c714:	e8df f003 	tbb	[pc, r3]
 800c718:	44152d2d 	.word	0x44152d2d
 800c71c:	19191944 	.word	0x19191944
 800c720:	065a      	.short	0x065a
 800c722:	15          	.byte	0x15
 800c723:	00          	.byte	0x00
 800c724:	6840      	ldr	r0, [r0, #4]
 800c726:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f040 80b2 	bne.w	800c894 <_rclc_take_new_data+0x194>
 800c730:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c734:	2b00      	cmp	r3, #0
 800c736:	f040 80e4 	bne.w	800c902 <_rclc_take_new_data+0x202>
 800c73a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d16f      	bne.n	800c822 <_rclc_take_new_data+0x122>
 800c742:	2500      	movs	r5, #0
 800c744:	4628      	mov	r0, r5
 800c746:	b01b      	add	sp, #108	@ 0x6c
 800c748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c74a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c74c:	6a0b      	ldr	r3, [r1, #32]
 800c74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d0f5      	beq.n	800c742 <_rclc_take_new_data+0x42>
 800c756:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c75a:	f104 0110 	add.w	r1, r4, #16
 800c75e:	f007 fbf3 	bl	8013f48 <rcl_take_request>
 800c762:	4605      	mov	r5, r0
 800c764:	2800      	cmp	r0, #0
 800c766:	d0ec      	beq.n	800c742 <_rclc_take_new_data+0x42>
 800c768:	f240 2359 	movw	r3, #601	@ 0x259
 800c76c:	4298      	cmp	r0, r3
 800c76e:	d013      	beq.n	800c798 <_rclc_take_new_data+0x98>
 800c770:	e029      	b.n	800c7c6 <_rclc_take_new_data+0xc6>
 800c772:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c774:	680b      	ldr	r3, [r1, #0]
 800c776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0e1      	beq.n	800c742 <_rclc_take_new_data+0x42>
 800c77e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c782:	2300      	movs	r3, #0
 800c784:	aa0a      	add	r2, sp, #40	@ 0x28
 800c786:	f007 fc41 	bl	801400c <rcl_take>
 800c78a:	4605      	mov	r5, r0
 800c78c:	2800      	cmp	r0, #0
 800c78e:	d0d9      	beq.n	800c744 <_rclc_take_new_data+0x44>
 800c790:	f240 1391 	movw	r3, #401	@ 0x191
 800c794:	4298      	cmp	r0, r3
 800c796:	d116      	bne.n	800c7c6 <_rclc_take_new_data+0xc6>
 800c798:	2300      	movs	r3, #0
 800c79a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c79e:	e7d1      	b.n	800c744 <_rclc_take_new_data+0x44>
 800c7a0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c7a2:	698b      	ldr	r3, [r1, #24]
 800c7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d0ca      	beq.n	800c742 <_rclc_take_new_data+0x42>
 800c7ac:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c7b0:	f104 0110 	add.w	r1, r4, #16
 800c7b4:	f006 fdcc 	bl	8013350 <rcl_take_response>
 800c7b8:	4605      	mov	r5, r0
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d0c1      	beq.n	800c742 <_rclc_take_new_data+0x42>
 800c7be:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c7c2:	4298      	cmp	r0, r3
 800c7c4:	d0be      	beq.n	800c744 <_rclc_take_new_data+0x44>
 800c7c6:	f000 ff43 	bl	800d650 <rcutils_reset_error>
 800c7ca:	e7bb      	b.n	800c744 <_rclc_take_new_data+0x44>
 800c7cc:	6840      	ldr	r0, [r0, #4]
 800c7ce:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d17d      	bne.n	800c8d2 <_rclc_take_new_data+0x1d2>
 800c7d6:	69c3      	ldr	r3, [r0, #28]
 800c7d8:	b11b      	cbz	r3, 800c7e2 <_rclc_take_new_data+0xe2>
 800c7da:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d144      	bne.n	800c86c <_rclc_take_new_data+0x16c>
 800c7e2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f040 80ac 	bne.w	800c944 <_rclc_take_new_data+0x244>
 800c7ec:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d0a6      	beq.n	800c742 <_rclc_take_new_data+0x42>
 800c7f4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c7f6:	a90a      	add	r1, sp, #40	@ 0x28
 800c7f8:	3010      	adds	r0, #16
 800c7fa:	f008 fed1 	bl	80155a0 <rcl_action_take_result_response>
 800c7fe:	4605      	mov	r5, r0
 800c800:	2800      	cmp	r0, #0
 800c802:	d1e0      	bne.n	800c7c6 <_rclc_take_new_data+0xc6>
 800c804:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c808:	6860      	ldr	r0, [r4, #4]
 800c80a:	f009 fb2d 	bl	8015e68 <rclc_action_find_handle_by_result_request_sequence_number>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d098      	beq.n	800c744 <_rclc_take_new_data+0x44>
 800c812:	2301      	movs	r3, #1
 800c814:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c818:	e794      	b.n	800c744 <_rclc_take_new_data+0x44>
 800c81a:	250b      	movs	r5, #11
 800c81c:	4628      	mov	r0, r5
 800c81e:	b01b      	add	sp, #108	@ 0x6c
 800c820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c822:	ae04      	add	r6, sp, #16
 800c824:	aa0a      	add	r2, sp, #40	@ 0x28
 800c826:	3010      	adds	r0, #16
 800c828:	4631      	mov	r1, r6
 800c82a:	f009 f92d 	bl	8015a88 <rcl_action_take_cancel_request>
 800c82e:	4605      	mov	r5, r0
 800c830:	2800      	cmp	r0, #0
 800c832:	d1c8      	bne.n	800c7c6 <_rclc_take_new_data+0xc6>
 800c834:	6860      	ldr	r0, [r4, #4]
 800c836:	a90a      	add	r1, sp, #40	@ 0x28
 800c838:	f009 fad4 	bl	8015de4 <rclc_action_find_goal_handle_by_uuid>
 800c83c:	4607      	mov	r7, r0
 800c83e:	2800      	cmp	r0, #0
 800c840:	f000 80bb 	beq.w	800c9ba <_rclc_take_new_data+0x2ba>
 800c844:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c848:	2101      	movs	r1, #1
 800c84a:	f009 fa55 	bl	8015cf8 <rcl_action_transition_goal_state>
 800c84e:	2803      	cmp	r0, #3
 800c850:	4684      	mov	ip, r0
 800c852:	f040 80a7 	bne.w	800c9a4 <_rclc_take_new_data+0x2a4>
 800c856:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c858:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c85c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c85e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c862:	e884 0003 	stmia.w	r4, {r0, r1}
 800c866:	f887 c008 	strb.w	ip, [r7, #8]
 800c86a:	e76b      	b.n	800c744 <_rclc_take_new_data+0x44>
 800c86c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c86e:	3010      	adds	r0, #16
 800c870:	f008 ff16 	bl	80156a0 <rcl_action_take_feedback>
 800c874:	4605      	mov	r5, r0
 800c876:	2800      	cmp	r0, #0
 800c878:	d1a5      	bne.n	800c7c6 <_rclc_take_new_data+0xc6>
 800c87a:	6860      	ldr	r0, [r4, #4]
 800c87c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c87e:	f009 fab1 	bl	8015de4 <rclc_action_find_goal_handle_by_uuid>
 800c882:	4603      	mov	r3, r0
 800c884:	2800      	cmp	r0, #0
 800c886:	f000 80a3 	beq.w	800c9d0 <_rclc_take_new_data+0x2d0>
 800c88a:	2201      	movs	r2, #1
 800c88c:	6860      	ldr	r0, [r4, #4]
 800c88e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c892:	e7a6      	b.n	800c7e2 <_rclc_take_new_data+0xe2>
 800c894:	f009 fa80 	bl	8015d98 <rclc_action_take_goal_handle>
 800c898:	4606      	mov	r6, r0
 800c89a:	6860      	ldr	r0, [r4, #4]
 800c89c:	2e00      	cmp	r6, #0
 800c89e:	f43f af47 	beq.w	800c730 <_rclc_take_new_data+0x30>
 800c8a2:	6070      	str	r0, [r6, #4]
 800c8a4:	69f2      	ldr	r2, [r6, #28]
 800c8a6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c8aa:	3010      	adds	r0, #16
 800c8ac:	f009 f834 	bl	8015918 <rcl_action_take_goal_request>
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	f040 808e 	bne.w	800c9d4 <_rclc_take_new_data+0x2d4>
 800c8b8:	69f7      	ldr	r7, [r6, #28]
 800c8ba:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c8bc:	7235      	strb	r5, [r6, #8]
 800c8be:	f8c6 0009 	str.w	r0, [r6, #9]
 800c8c2:	f8c6 100d 	str.w	r1, [r6, #13]
 800c8c6:	6860      	ldr	r0, [r4, #4]
 800c8c8:	f8c6 2011 	str.w	r2, [r6, #17]
 800c8cc:	f8c6 3015 	str.w	r3, [r6, #21]
 800c8d0:	e72e      	b.n	800c730 <_rclc_take_new_data+0x30>
 800c8d2:	aa04      	add	r2, sp, #16
 800c8d4:	a90a      	add	r1, sp, #40	@ 0x28
 800c8d6:	3010      	adds	r0, #16
 800c8d8:	f008 fdea 	bl	80154b0 <rcl_action_take_goal_response>
 800c8dc:	4605      	mov	r5, r0
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	f47f af71 	bne.w	800c7c6 <_rclc_take_new_data+0xc6>
 800c8e4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c8e8:	6860      	ldr	r0, [r4, #4]
 800c8ea:	f009 faab 	bl	8015e44 <rclc_action_find_handle_by_goal_request_sequence_number>
 800c8ee:	b130      	cbz	r0, 800c8fe <_rclc_take_new_data+0x1fe>
 800c8f0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c8f4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f880 2020 	strb.w	r2, [r0, #32]
 800c8fe:	6860      	ldr	r0, [r4, #4]
 800c900:	e769      	b.n	800c7d6 <_rclc_take_new_data+0xd6>
 800c902:	aa04      	add	r2, sp, #16
 800c904:	3010      	adds	r0, #16
 800c906:	a90a      	add	r1, sp, #40	@ 0x28
 800c908:	f009 f87e 	bl	8015a08 <rcl_action_take_result_request>
 800c90c:	4605      	mov	r5, r0
 800c90e:	2800      	cmp	r0, #0
 800c910:	f47f af59 	bne.w	800c7c6 <_rclc_take_new_data+0xc6>
 800c914:	6860      	ldr	r0, [r4, #4]
 800c916:	a904      	add	r1, sp, #16
 800c918:	f009 fa64 	bl	8015de4 <rclc_action_find_goal_handle_by_uuid>
 800c91c:	4607      	mov	r7, r0
 800c91e:	b160      	cbz	r0, 800c93a <_rclc_take_new_data+0x23a>
 800c920:	ad0a      	add	r5, sp, #40	@ 0x28
 800c922:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c928:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c92a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c92e:	f04f 0c02 	mov.w	ip, #2
 800c932:	e886 0003 	stmia.w	r6, {r0, r1}
 800c936:	f887 c008 	strb.w	ip, [r7, #8]
 800c93a:	6860      	ldr	r0, [r4, #4]
 800c93c:	2300      	movs	r3, #0
 800c93e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c942:	e6fa      	b.n	800c73a <_rclc_take_new_data+0x3a>
 800c944:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c948:	a90a      	add	r1, sp, #40	@ 0x28
 800c94a:	3010      	adds	r0, #16
 800c94c:	f008 fe68 	bl	8015620 <rcl_action_take_cancel_response>
 800c950:	4605      	mov	r5, r0
 800c952:	2800      	cmp	r0, #0
 800c954:	f47f af37 	bne.w	800c7c6 <_rclc_take_new_data+0xc6>
 800c958:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c95c:	6860      	ldr	r0, [r4, #4]
 800c95e:	f009 fa95 	bl	8015e8c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c962:	4606      	mov	r6, r0
 800c964:	6860      	ldr	r0, [r4, #4]
 800c966:	2e00      	cmp	r6, #0
 800c968:	f43f af40 	beq.w	800c7ec <_rclc_take_new_data+0xec>
 800c96c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c96e:	2701      	movs	r7, #1
 800c970:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c972:	2b00      	cmp	r3, #0
 800c974:	f43f af3a 	beq.w	800c7ec <_rclc_take_new_data+0xec>
 800c978:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c97a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c97e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c982:	f009 fa2f 	bl	8015de4 <rclc_action_find_goal_handle_by_uuid>
 800c986:	b138      	cbz	r0, 800c998 <_rclc_take_new_data+0x298>
 800c988:	6860      	ldr	r0, [r4, #4]
 800c98a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c98c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c990:	3501      	adds	r5, #1
 800c992:	42ab      	cmp	r3, r5
 800c994:	d8f0      	bhi.n	800c978 <_rclc_take_new_data+0x278>
 800c996:	e729      	b.n	800c7ec <_rclc_take_new_data+0xec>
 800c998:	6860      	ldr	r0, [r4, #4]
 800c99a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c99c:	3501      	adds	r5, #1
 800c99e:	42ab      	cmp	r3, r5
 800c9a0:	d8ea      	bhi.n	800c978 <_rclc_take_new_data+0x278>
 800c9a2:	e723      	b.n	800c7ec <_rclc_take_new_data+0xec>
 800c9a4:	ab06      	add	r3, sp, #24
 800c9a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9a8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c9ac:	2103      	movs	r1, #3
 800c9ae:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c9b2:	6860      	ldr	r0, [r4, #4]
 800c9b4:	f009 fae0 	bl	8015f78 <rclc_action_server_goal_cancel_reject>
 800c9b8:	e6c4      	b.n	800c744 <_rclc_take_new_data+0x44>
 800c9ba:	ab06      	add	r3, sp, #24
 800c9bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9be:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c9c2:	2102      	movs	r1, #2
 800c9c4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c9c8:	6860      	ldr	r0, [r4, #4]
 800c9ca:	f009 fad5 	bl	8015f78 <rclc_action_server_goal_cancel_reject>
 800c9ce:	e6b9      	b.n	800c744 <_rclc_take_new_data+0x44>
 800c9d0:	6860      	ldr	r0, [r4, #4]
 800c9d2:	e706      	b.n	800c7e2 <_rclc_take_new_data+0xe2>
 800c9d4:	6860      	ldr	r0, [r4, #4]
 800c9d6:	4631      	mov	r1, r6
 800c9d8:	f009 f9ee 	bl	8015db8 <rclc_action_remove_used_goal_handle>
 800c9dc:	f000 fe38 	bl	800d650 <rcutils_reset_error>
 800c9e0:	e6b0      	b.n	800c744 <_rclc_take_new_data+0x44>
 800c9e2:	2501      	movs	r5, #1
 800c9e4:	e6ae      	b.n	800c744 <_rclc_take_new_data+0x44>
 800c9e6:	bf00      	nop

0800c9e8 <_rclc_execute.part.0>:
 800c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ea:	7803      	ldrb	r3, [r0, #0]
 800c9ec:	b087      	sub	sp, #28
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	2b0a      	cmp	r3, #10
 800c9f2:	f200 8136 	bhi.w	800cc62 <_rclc_execute.part.0+0x27a>
 800c9f6:	e8df f003 	tbb	[pc, r3]
 800c9fa:	435e      	.short	0x435e
 800c9fc:	06a1664f 	.word	0x06a1664f
 800ca00:	6c1e0606 	.word	0x6c1e0606
 800ca04:	59          	.byte	0x59
 800ca05:	00          	.byte	0x00
 800ca06:	2b06      	cmp	r3, #6
 800ca08:	f000 8122 	beq.w	800cc50 <_rclc_execute.part.0+0x268>
 800ca0c:	2b07      	cmp	r3, #7
 800ca0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ca10:	f040 8118 	bne.w	800cc44 <_rclc_execute.part.0+0x25c>
 800ca14:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ca18:	6880      	ldr	r0, [r0, #8]
 800ca1a:	4798      	blx	r3
 800ca1c:	f104 0110 	add.w	r1, r4, #16
 800ca20:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ca22:	6860      	ldr	r0, [r4, #4]
 800ca24:	f007 fad0 	bl	8013fc8 <rcl_send_response>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d033      	beq.n	800ca94 <_rclc_execute.part.0+0xac>
 800ca2c:	9005      	str	r0, [sp, #20]
 800ca2e:	f000 fe0f 	bl	800d650 <rcutils_reset_error>
 800ca32:	9805      	ldr	r0, [sp, #20]
 800ca34:	e02e      	b.n	800ca94 <_rclc_execute.part.0+0xac>
 800ca36:	6840      	ldr	r0, [r0, #4]
 800ca38:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 8086 	beq.w	800cb4e <_rclc_execute.part.0+0x166>
 800ca42:	2600      	movs	r6, #0
 800ca44:	2701      	movs	r7, #1
 800ca46:	e004      	b.n	800ca52 <_rclc_execute.part.0+0x6a>
 800ca48:	f009 f980 	bl	8015d4c <rclc_action_send_result_request>
 800ca4c:	b998      	cbnz	r0, 800ca76 <_rclc_execute.part.0+0x8e>
 800ca4e:	722f      	strb	r7, [r5, #8]
 800ca50:	6860      	ldr	r0, [r4, #4]
 800ca52:	f009 fa2d 	bl	8015eb0 <rclc_action_find_first_handle_with_goal_response>
 800ca56:	4605      	mov	r5, r0
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d077      	beq.n	800cb4c <_rclc_execute.part.0+0x164>
 800ca5c:	6863      	ldr	r3, [r4, #4]
 800ca5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ca66:	f885 6020 	strb.w	r6, [r5, #32]
 800ca6a:	4798      	blx	r3
 800ca6c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ca70:	4628      	mov	r0, r5
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1e8      	bne.n	800ca48 <_rclc_execute.part.0+0x60>
 800ca76:	6860      	ldr	r0, [r4, #4]
 800ca78:	4629      	mov	r1, r5
 800ca7a:	f009 f99d 	bl	8015db8 <rclc_action_remove_used_goal_handle>
 800ca7e:	e7e7      	b.n	800ca50 <_rclc_execute.part.0+0x68>
 800ca80:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ca84:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800ca88:	2d00      	cmp	r5, #0
 800ca8a:	f000 80c9 	beq.w	800cc20 <_rclc_execute.part.0+0x238>
 800ca8e:	6880      	ldr	r0, [r0, #8]
 800ca90:	4798      	blx	r3
 800ca92:	2000      	movs	r0, #0
 800ca94:	b007      	add	sp, #28
 800ca96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca98:	6840      	ldr	r0, [r0, #4]
 800ca9a:	f007 fdc7 	bl	801462c <rcl_timer_call>
 800ca9e:	f240 3321 	movw	r3, #801	@ 0x321
 800caa2:	4298      	cmp	r0, r3
 800caa4:	d004      	beq.n	800cab0 <_rclc_execute.part.0+0xc8>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d0f4      	beq.n	800ca94 <_rclc_execute.part.0+0xac>
 800caaa:	e7bf      	b.n	800ca2c <_rclc_execute.part.0+0x44>
 800caac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800caae:	4798      	blx	r3
 800cab0:	2000      	movs	r0, #0
 800cab2:	b007      	add	sp, #28
 800cab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cab6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800caba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cabc:	b925      	cbnz	r5, 800cac8 <_rclc_execute.part.0+0xe0>
 800cabe:	4628      	mov	r0, r5
 800cac0:	4798      	blx	r3
 800cac2:	4628      	mov	r0, r5
 800cac4:	e7e6      	b.n	800ca94 <_rclc_execute.part.0+0xac>
 800cac6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cac8:	68a0      	ldr	r0, [r4, #8]
 800caca:	4798      	blx	r3
 800cacc:	2000      	movs	r0, #0
 800cace:	b007      	add	sp, #28
 800cad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cad2:	6840      	ldr	r0, [r0, #4]
 800cad4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800cad8:	bb3b      	cbnz	r3, 800cb2a <_rclc_execute.part.0+0x142>
 800cada:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d07b      	beq.n	800cbda <_rclc_execute.part.0+0x1f2>
 800cae2:	f640 0634 	movw	r6, #2100	@ 0x834
 800cae6:	2701      	movs	r7, #1
 800cae8:	e007      	b.n	800cafa <_rclc_execute.part.0+0x112>
 800caea:	4628      	mov	r0, r5
 800caec:	f009 f9f8 	bl	8015ee0 <rclc_action_server_response_goal_request>
 800caf0:	6860      	ldr	r0, [r4, #4]
 800caf2:	4629      	mov	r1, r5
 800caf4:	f009 f960 	bl	8015db8 <rclc_action_remove_used_goal_handle>
 800caf8:	6860      	ldr	r0, [r4, #4]
 800cafa:	2100      	movs	r1, #0
 800cafc:	f009 f98a 	bl	8015e14 <rclc_action_find_first_handle_by_status>
 800cb00:	4605      	mov	r5, r0
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d066      	beq.n	800cbd4 <_rclc_execute.part.0+0x1ec>
 800cb06:	6863      	ldr	r3, [r4, #4]
 800cb08:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	4798      	blx	r3
 800cb0e:	42b0      	cmp	r0, r6
 800cb10:	f04f 0100 	mov.w	r1, #0
 800cb14:	d1e9      	bne.n	800caea <_rclc_execute.part.0+0x102>
 800cb16:	2101      	movs	r1, #1
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f009 f9e1 	bl	8015ee0 <rclc_action_server_response_goal_request>
 800cb1e:	722f      	strb	r7, [r5, #8]
 800cb20:	e7ea      	b.n	800caf8 <_rclc_execute.part.0+0x110>
 800cb22:	6848      	ldr	r0, [r1, #4]
 800cb24:	f009 f948 	bl	8015db8 <rclc_action_remove_used_goal_handle>
 800cb28:	6860      	ldr	r0, [r4, #4]
 800cb2a:	f009 f97f 	bl	8015e2c <rclc_action_find_first_terminated_handle>
 800cb2e:	4601      	mov	r1, r0
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d1f6      	bne.n	800cb22 <_rclc_execute.part.0+0x13a>
 800cb34:	6860      	ldr	r0, [r4, #4]
 800cb36:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800cb3a:	e7ce      	b.n	800cada <_rclc_execute.part.0+0xf2>
 800cb3c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cb3e:	6880      	ldr	r0, [r0, #8]
 800cb40:	f104 0110 	add.w	r1, r4, #16
 800cb44:	4798      	blx	r3
 800cb46:	2000      	movs	r0, #0
 800cb48:	b007      	add	sp, #28
 800cb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb4c:	6860      	ldr	r0, [r4, #4]
 800cb4e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cb52:	b18b      	cbz	r3, 800cb78 <_rclc_execute.part.0+0x190>
 800cb54:	68c5      	ldr	r5, [r0, #12]
 800cb56:	b32d      	cbz	r5, 800cba4 <_rclc_execute.part.0+0x1bc>
 800cb58:	2600      	movs	r6, #0
 800cb5a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800cb5e:	b143      	cbz	r3, 800cb72 <_rclc_execute.part.0+0x18a>
 800cb60:	69c3      	ldr	r3, [r0, #28]
 800cb62:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800cb66:	b123      	cbz	r3, 800cb72 <_rclc_execute.part.0+0x18a>
 800cb68:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cb6a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	4798      	blx	r3
 800cb70:	6860      	ldr	r0, [r4, #4]
 800cb72:	682d      	ldr	r5, [r5, #0]
 800cb74:	2d00      	cmp	r5, #0
 800cb76:	d1f0      	bne.n	800cb5a <_rclc_execute.part.0+0x172>
 800cb78:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800cb7c:	b193      	cbz	r3, 800cba4 <_rclc_execute.part.0+0x1bc>
 800cb7e:	68c5      	ldr	r5, [r0, #12]
 800cb80:	b185      	cbz	r5, 800cba4 <_rclc_execute.part.0+0x1bc>
 800cb82:	2600      	movs	r6, #0
 800cb84:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800cb88:	b14b      	cbz	r3, 800cb9e <_rclc_execute.part.0+0x1b6>
 800cb8a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cb8c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800cb90:	b12b      	cbz	r3, 800cb9e <_rclc_execute.part.0+0x1b6>
 800cb92:	4628      	mov	r0, r5
 800cb94:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800cb98:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cb9a:	4798      	blx	r3
 800cb9c:	6860      	ldr	r0, [r4, #4]
 800cb9e:	682d      	ldr	r5, [r5, #0]
 800cba0:	2d00      	cmp	r5, #0
 800cba2:	d1ef      	bne.n	800cb84 <_rclc_execute.part.0+0x19c>
 800cba4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d081      	beq.n	800cab0 <_rclc_execute.part.0+0xc8>
 800cbac:	2700      	movs	r7, #0
 800cbae:	e00b      	b.n	800cbc8 <_rclc_execute.part.0+0x1e0>
 800cbb0:	6863      	ldr	r3, [r4, #4]
 800cbb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cbb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cbb6:	6a1e      	ldr	r6, [r3, #32]
 800cbb8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800cbbc:	47b0      	blx	r6
 800cbbe:	6860      	ldr	r0, [r4, #4]
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	f009 f8f9 	bl	8015db8 <rclc_action_remove_used_goal_handle>
 800cbc6:	6860      	ldr	r0, [r4, #4]
 800cbc8:	f009 f97e 	bl	8015ec8 <rclc_action_find_first_handle_with_result_response>
 800cbcc:	4605      	mov	r5, r0
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d1ee      	bne.n	800cbb0 <_rclc_execute.part.0+0x1c8>
 800cbd2:	e76d      	b.n	800cab0 <_rclc_execute.part.0+0xc8>
 800cbd4:	6860      	ldr	r0, [r4, #4]
 800cbd6:	f880 5020 	strb.w	r5, [r0, #32]
 800cbda:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f43f af66 	beq.w	800cab0 <_rclc_execute.part.0+0xc8>
 800cbe4:	68c5      	ldr	r5, [r0, #12]
 800cbe6:	b1b5      	cbz	r5, 800cc16 <_rclc_execute.part.0+0x22e>
 800cbe8:	2602      	movs	r6, #2
 800cbea:	e001      	b.n	800cbf0 <_rclc_execute.part.0+0x208>
 800cbec:	682d      	ldr	r5, [r5, #0]
 800cbee:	b195      	cbz	r5, 800cc16 <_rclc_execute.part.0+0x22e>
 800cbf0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800cbf4:	2b03      	cmp	r3, #3
 800cbf6:	d1f9      	bne.n	800cbec <_rclc_execute.part.0+0x204>
 800cbf8:	69c3      	ldr	r3, [r0, #28]
 800cbfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	4798      	blx	r3
 800cc00:	4603      	mov	r3, r0
 800cc02:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800cc06:	4628      	mov	r0, r5
 800cc08:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800cc0c:	b163      	cbz	r3, 800cc28 <_rclc_execute.part.0+0x240>
 800cc0e:	f009 f987 	bl	8015f20 <rclc_action_server_goal_cancel_accept>
 800cc12:	6860      	ldr	r0, [r4, #4]
 800cc14:	e7ea      	b.n	800cbec <_rclc_execute.part.0+0x204>
 800cc16:	2300      	movs	r3, #0
 800cc18:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	e739      	b.n	800ca94 <_rclc_execute.part.0+0xac>
 800cc20:	4628      	mov	r0, r5
 800cc22:	4798      	blx	r3
 800cc24:	4628      	mov	r0, r5
 800cc26:	e735      	b.n	800ca94 <_rclc_execute.part.0+0xac>
 800cc28:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800cc2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cc2e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800cc32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc36:	6860      	ldr	r0, [r4, #4]
 800cc38:	2101      	movs	r1, #1
 800cc3a:	f009 f99d 	bl	8015f78 <rclc_action_server_goal_cancel_reject>
 800cc3e:	722e      	strb	r6, [r5, #8]
 800cc40:	6860      	ldr	r0, [r4, #4]
 800cc42:	e7d3      	b.n	800cbec <_rclc_execute.part.0+0x204>
 800cc44:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cc46:	6880      	ldr	r0, [r0, #8]
 800cc48:	4798      	blx	r3
 800cc4a:	f104 0110 	add.w	r1, r4, #16
 800cc4e:	e6e7      	b.n	800ca20 <_rclc_execute.part.0+0x38>
 800cc50:	f100 0110 	add.w	r1, r0, #16
 800cc54:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cc56:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800cc58:	6880      	ldr	r0, [r0, #8]
 800cc5a:	9105      	str	r1, [sp, #20]
 800cc5c:	4798      	blx	r3
 800cc5e:	9905      	ldr	r1, [sp, #20]
 800cc60:	e6de      	b.n	800ca20 <_rclc_execute.part.0+0x38>
 800cc62:	2001      	movs	r0, #1
 800cc64:	e716      	b.n	800ca94 <_rclc_execute.part.0+0xac>
 800cc66:	bf00      	nop

0800cc68 <rclc_executor_trigger_any>:
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d03f      	beq.n	800ccec <rclc_executor_trigger_any+0x84>
 800cc6c:	2900      	cmp	r1, #0
 800cc6e:	d03e      	beq.n	800ccee <rclc_executor_trigger_any+0x86>
 800cc70:	4603      	mov	r3, r0
 800cc72:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800cc76:	2200      	movs	r2, #0
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d037      	beq.n	800ccec <rclc_executor_trigger_any+0x84>
 800cc7c:	b430      	push	{r4, r5}
 800cc7e:	f893 c000 	ldrb.w	ip, [r3]
 800cc82:	f1bc 0f08 	cmp.w	ip, #8
 800cc86:	d11e      	bne.n	800ccc6 <rclc_executor_trigger_any+0x5e>
 800cc88:	685c      	ldr	r4, [r3, #4]
 800cc8a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800cc8c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800cc90:	d105      	bne.n	800cc9e <rclc_executor_trigger_any+0x36>
 800cc92:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800cc96:	b910      	cbnz	r0, 800cc9e <rclc_executor_trigger_any+0x36>
 800cc98:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800cc9c:	b128      	cbz	r0, 800ccaa <rclc_executor_trigger_any+0x42>
 800cc9e:	bc30      	pop	{r4, r5}
 800cca0:	4770      	bx	lr
 800cca2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d1f9      	bne.n	800cc9e <rclc_executor_trigger_any+0x36>
 800ccaa:	3201      	adds	r2, #1
 800ccac:	4291      	cmp	r1, r2
 800ccae:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ccb2:	d018      	beq.n	800cce6 <rclc_executor_trigger_any+0x7e>
 800ccb4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d0f0      	beq.n	800cc9e <rclc_executor_trigger_any+0x36>
 800ccbc:	f893 c000 	ldrb.w	ip, [r3]
 800ccc0:	f1bc 0f08 	cmp.w	ip, #8
 800ccc4:	d0e0      	beq.n	800cc88 <rclc_executor_trigger_any+0x20>
 800ccc6:	f1bc 0f09 	cmp.w	ip, #9
 800ccca:	d1ea      	bne.n	800cca2 <rclc_executor_trigger_any+0x3a>
 800cccc:	685c      	ldr	r4, [r3, #4]
 800ccce:	6a25      	ldr	r5, [r4, #32]
 800ccd0:	2d00      	cmp	r5, #0
 800ccd2:	d1e4      	bne.n	800cc9e <rclc_executor_trigger_any+0x36>
 800ccd4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d1e0      	bne.n	800cc9e <rclc_executor_trigger_any+0x36>
 800ccdc:	3201      	adds	r2, #1
 800ccde:	4291      	cmp	r1, r2
 800cce0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cce4:	d1e6      	bne.n	800ccb4 <rclc_executor_trigger_any+0x4c>
 800cce6:	2000      	movs	r0, #0
 800cce8:	bc30      	pop	{r4, r5}
 800ccea:	4770      	bx	lr
 800ccec:	4770      	bx	lr
 800ccee:	4608      	mov	r0, r1
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop

0800ccf4 <rclc_executor_get_zero_initialized_executor>:
 800ccf4:	b510      	push	{r4, lr}
 800ccf6:	4903      	ldr	r1, [pc, #12]	@ (800cd04 <rclc_executor_get_zero_initialized_executor+0x10>)
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	2288      	movs	r2, #136	@ 0x88
 800ccfc:	f00c fb83 	bl	8019406 <memcpy>
 800cd00:	4620      	mov	r0, r4
 800cd02:	bd10      	pop	{r4, pc}
 800cd04:	0801aea8 	.word	0x0801aea8

0800cd08 <rclc_executor_init>:
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d05f      	beq.n	800cdcc <rclc_executor_init+0xc4>
 800cd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd10:	460c      	mov	r4, r1
 800cd12:	b0b0      	sub	sp, #192	@ 0xc0
 800cd14:	2900      	cmp	r1, #0
 800cd16:	d051      	beq.n	800cdbc <rclc_executor_init+0xb4>
 800cd18:	4605      	mov	r5, r0
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	4616      	mov	r6, r2
 800cd1e:	461f      	mov	r7, r3
 800cd20:	f000 fc70 	bl	800d604 <rcutils_allocator_is_valid>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d049      	beq.n	800cdbc <rclc_executor_init+0xb4>
 800cd28:	2e00      	cmp	r6, #0
 800cd2a:	d047      	beq.n	800cdbc <rclc_executor_init+0xb4>
 800cd2c:	492c      	ldr	r1, [pc, #176]	@ (800cde0 <rclc_executor_init+0xd8>)
 800cd2e:	2288      	movs	r2, #136	@ 0x88
 800cd30:	a80e      	add	r0, sp, #56	@ 0x38
 800cd32:	f00c fb68 	bl	8019406 <memcpy>
 800cd36:	a90e      	add	r1, sp, #56	@ 0x38
 800cd38:	2288      	movs	r2, #136	@ 0x88
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f00c fb63 	bl	8019406 <memcpy>
 800cd40:	602c      	str	r4, [r5, #0]
 800cd42:	4668      	mov	r0, sp
 800cd44:	60ae      	str	r6, [r5, #8]
 800cd46:	466c      	mov	r4, sp
 800cd48:	f007 fde2 	bl	8014910 <rcl_get_zero_initialized_wait_set>
 800cd4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd4e:	f105 0c14 	add.w	ip, r5, #20
 800cd52:	f8d7 8000 	ldr.w	r8, [r7]
 800cd56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd66:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800cdd8 <rclc_executor_init+0xd0>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	f8cc 3000 	str.w	r3, [ip]
 800cd70:	6939      	ldr	r1, [r7, #16]
 800cd72:	612f      	str	r7, [r5, #16]
 800cd74:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800cd78:	01b0      	lsls	r0, r6, #6
 800cd7a:	47c0      	blx	r8
 800cd7c:	6068      	str	r0, [r5, #4]
 800cd7e:	b338      	cbz	r0, 800cdd0 <rclc_executor_init+0xc8>
 800cd80:	2400      	movs	r4, #0
 800cd82:	e000      	b.n	800cd86 <rclc_executor_init+0x7e>
 800cd84:	6868      	ldr	r0, [r5, #4]
 800cd86:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800cd8a:	4631      	mov	r1, r6
 800cd8c:	3401      	adds	r4, #1
 800cd8e:	f000 faa3 	bl	800d2d8 <rclc_executor_handle_init>
 800cd92:	42a6      	cmp	r6, r4
 800cd94:	d1f6      	bne.n	800cd84 <rclc_executor_init+0x7c>
 800cd96:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800cd9a:	f000 fa93 	bl	800d2c4 <rclc_executor_handle_counters_zero_init>
 800cd9e:	4a11      	ldr	r2, [pc, #68]	@ (800cde4 <rclc_executor_init+0xdc>)
 800cda0:	686b      	ldr	r3, [r5, #4]
 800cda2:	2000      	movs	r0, #0
 800cda4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800cda8:	b163      	cbz	r3, 800cdc4 <rclc_executor_init+0xbc>
 800cdaa:	692b      	ldr	r3, [r5, #16]
 800cdac:	b153      	cbz	r3, 800cdc4 <rclc_executor_init+0xbc>
 800cdae:	68ab      	ldr	r3, [r5, #8]
 800cdb0:	b143      	cbz	r3, 800cdc4 <rclc_executor_init+0xbc>
 800cdb2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800cdb6:	b030      	add	sp, #192	@ 0xc0
 800cdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdbc:	200b      	movs	r0, #11
 800cdbe:	b030      	add	sp, #192	@ 0xc0
 800cdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	b030      	add	sp, #192	@ 0xc0
 800cdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdcc:	200b      	movs	r0, #11
 800cdce:	4770      	bx	lr
 800cdd0:	200a      	movs	r0, #10
 800cdd2:	e7f4      	b.n	800cdbe <rclc_executor_init+0xb6>
 800cdd4:	f3af 8000 	nop.w
 800cdd8:	3b9aca00 	.word	0x3b9aca00
 800cddc:	00000000 	.word	0x00000000
 800cde0:	0801aea8 	.word	0x0801aea8
 800cde4:	0800cc69 	.word	0x0800cc69

0800cde8 <rclc_executor_add_timer>:
 800cde8:	b300      	cbz	r0, 800ce2c <rclc_executor_add_timer+0x44>
 800cdea:	b1f9      	cbz	r1, 800ce2c <rclc_executor_add_timer+0x44>
 800cdec:	b538      	push	{r3, r4, r5, lr}
 800cdee:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	d301      	bcc.n	800cdfc <rclc_executor_add_timer+0x14>
 800cdf8:	2001      	movs	r0, #1
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}
 800cdfc:	6840      	ldr	r0, [r0, #4]
 800cdfe:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ce02:	019d      	lsls	r5, r3, #6
 800ce04:	6051      	str	r1, [r2, #4]
 800ce06:	2102      	movs	r1, #2
 800ce08:	5341      	strh	r1, [r0, r5]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	2101      	movs	r1, #1
 800ce10:	f104 0514 	add.w	r5, r4, #20
 800ce14:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800ce16:	8711      	strh	r1, [r2, #56]	@ 0x38
 800ce18:	4628      	mov	r0, r5
 800ce1a:	60e3      	str	r3, [r4, #12]
 800ce1c:	f007 fd8c 	bl	8014938 <rcl_wait_set_is_valid>
 800ce20:	b930      	cbnz	r0, 800ce30 <rclc_executor_add_timer+0x48>
 800ce22:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ce24:	3301      	adds	r3, #1
 800ce26:	2000      	movs	r0, #0
 800ce28:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800ce2a:	bd38      	pop	{r3, r4, r5, pc}
 800ce2c:	200b      	movs	r0, #11
 800ce2e:	4770      	bx	lr
 800ce30:	4628      	mov	r0, r5
 800ce32:	f007 fd87 	bl	8014944 <rcl_wait_set_fini>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d0f3      	beq.n	800ce22 <rclc_executor_add_timer+0x3a>
 800ce3a:	bd38      	pop	{r3, r4, r5, pc}

0800ce3c <rclc_executor_add_service>:
 800ce3c:	b370      	cbz	r0, 800ce9c <rclc_executor_add_service+0x60>
 800ce3e:	b369      	cbz	r1, 800ce9c <rclc_executor_add_service+0x60>
 800ce40:	b362      	cbz	r2, 800ce9c <rclc_executor_add_service+0x60>
 800ce42:	b35b      	cbz	r3, 800ce9c <rclc_executor_add_service+0x60>
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	4604      	mov	r4, r0
 800ce48:	9804      	ldr	r0, [sp, #16]
 800ce4a:	b378      	cbz	r0, 800ceac <rclc_executor_add_service+0x70>
 800ce4c:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800ce50:	42a8      	cmp	r0, r5
 800ce52:	d301      	bcc.n	800ce58 <rclc_executor_add_service+0x1c>
 800ce54:	2001      	movs	r0, #1
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	6865      	ldr	r5, [r4, #4]
 800ce5a:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800ce5e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800ce62:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800ce66:	9b04      	ldr	r3, [sp, #16]
 800ce68:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800ce6c:	2305      	movs	r3, #5
 800ce6e:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800ce72:	3001      	adds	r0, #1
 800ce74:	f825 300e 	strh.w	r3, [r5, lr]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	f104 0514 	add.w	r5, r4, #20
 800ce80:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800ce84:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800ce88:	60e0      	str	r0, [r4, #12]
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	f007 fd54 	bl	8014938 <rcl_wait_set_is_valid>
 800ce90:	b930      	cbnz	r0, 800cea0 <rclc_executor_add_service+0x64>
 800ce92:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ce94:	3301      	adds	r3, #1
 800ce96:	2000      	movs	r0, #0
 800ce98:	6563      	str	r3, [r4, #84]	@ 0x54
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
 800ce9c:	200b      	movs	r0, #11
 800ce9e:	4770      	bx	lr
 800cea0:	4628      	mov	r0, r5
 800cea2:	f007 fd4f 	bl	8014944 <rcl_wait_set_fini>
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d0f3      	beq.n	800ce92 <rclc_executor_add_service+0x56>
 800ceaa:	e7d4      	b.n	800ce56 <rclc_executor_add_service+0x1a>
 800ceac:	200b      	movs	r0, #11
 800ceae:	bd38      	pop	{r3, r4, r5, pc}

0800ceb0 <rclc_executor_prepare>:
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d044      	beq.n	800cf3e <rclc_executor_prepare+0x8e>
 800ceb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceb6:	f100 0514 	add.w	r5, r0, #20
 800ceba:	b09b      	sub	sp, #108	@ 0x6c
 800cebc:	4604      	mov	r4, r0
 800cebe:	4628      	mov	r0, r5
 800cec0:	f007 fd3a 	bl	8014938 <rcl_wait_set_is_valid>
 800cec4:	b110      	cbz	r0, 800cecc <rclc_executor_prepare+0x1c>
 800cec6:	2000      	movs	r0, #0
 800cec8:	b01b      	add	sp, #108	@ 0x6c
 800ceca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cecc:	4628      	mov	r0, r5
 800cece:	f007 fd39 	bl	8014944 <rcl_wait_set_fini>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d130      	bne.n	800cf38 <rclc_executor_prepare+0x88>
 800ced6:	a80c      	add	r0, sp, #48	@ 0x30
 800ced8:	f007 fd1a 	bl	8014910 <rcl_get_zero_initialized_wait_set>
 800cedc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800cee0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cee4:	46ae      	mov	lr, r5
 800cee6:	6927      	ldr	r7, [r4, #16]
 800cee8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ceec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cef0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cef4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cef8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cefc:	f8dc 3000 	ldr.w	r3, [ip]
 800cf00:	f8ce 3000 	str.w	r3, [lr]
 800cf04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cf06:	ae04      	add	r6, sp, #16
 800cf08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	6822      	ldr	r2, [r4, #0]
 800cf0e:	6033      	str	r3, [r6, #0]
 800cf10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf12:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800cf14:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800cf18:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800cf1c:	e9cd 2100 	strd	r2, r1, [sp]
 800cf20:	4628      	mov	r0, r5
 800cf22:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800cf24:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cf26:	f008 f80b 	bl	8014f40 <rcl_wait_set_init>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	d0cc      	beq.n	800cec8 <rclc_executor_prepare+0x18>
 800cf2e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cf30:	f000 fb8e 	bl	800d650 <rcutils_reset_error>
 800cf34:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cf36:	e7c7      	b.n	800cec8 <rclc_executor_prepare+0x18>
 800cf38:	f000 fb8a 	bl	800d650 <rcutils_reset_error>
 800cf3c:	e7cb      	b.n	800ced6 <rclc_executor_prepare+0x26>
 800cf3e:	200b      	movs	r0, #11
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop

0800cf44 <rclc_executor_spin_some.part.0>:
 800cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf48:	f100 0614 	add.w	r6, r0, #20
 800cf4c:	b083      	sub	sp, #12
 800cf4e:	4691      	mov	r9, r2
 800cf50:	4698      	mov	r8, r3
 800cf52:	4605      	mov	r5, r0
 800cf54:	f7ff ffac 	bl	800ceb0 <rclc_executor_prepare>
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f007 fdbf 	bl	8014adc <rcl_wait_set_clear>
 800cf5e:	4607      	mov	r7, r0
 800cf60:	2800      	cmp	r0, #0
 800cf62:	f040 80ed 	bne.w	800d140 <rclc_executor_spin_some.part.0+0x1fc>
 800cf66:	68ab      	ldr	r3, [r5, #8]
 800cf68:	4604      	mov	r4, r0
 800cf6a:	b303      	cbz	r3, 800cfae <rclc_executor_spin_some.part.0+0x6a>
 800cf6c:	6869      	ldr	r1, [r5, #4]
 800cf6e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800cf72:	01a2      	lsls	r2, r4, #6
 800cf74:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cf78:	b1cb      	cbz	r3, 800cfae <rclc_executor_spin_some.part.0+0x6a>
 800cf7a:	5c8b      	ldrb	r3, [r1, r2]
 800cf7c:	2b0a      	cmp	r3, #10
 800cf7e:	f200 80d8 	bhi.w	800d132 <rclc_executor_spin_some.part.0+0x1ee>
 800cf82:	e8df f003 	tbb	[pc, r3]
 800cf86:	9c9c      	.short	0x9c9c
 800cf88:	068c8ca7 	.word	0x068c8ca7
 800cf8c:	bdc90606 	.word	0xbdc90606
 800cf90:	b2          	.byte	0xb2
 800cf91:	00          	.byte	0x00
 800cf92:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cf96:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	f008 f8e6 	bl	801516c <rcl_wait_set_add_service>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	f040 8086 	bne.w	800d0b2 <rclc_executor_spin_some.part.0+0x16e>
 800cfa6:	68ab      	ldr	r3, [r5, #8]
 800cfa8:	3401      	adds	r4, #1
 800cfaa:	429c      	cmp	r4, r3
 800cfac:	d3de      	bcc.n	800cf6c <rclc_executor_spin_some.part.0+0x28>
 800cfae:	4643      	mov	r3, r8
 800cfb0:	464a      	mov	r2, r9
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	f008 f908 	bl	80151c8 <rcl_wait>
 800cfb8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f000 80c7 	beq.w	800d150 <rclc_executor_spin_some.part.0+0x20c>
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	f040 80b5 	bne.w	800d132 <rclc_executor_spin_some.part.0+0x1ee>
 800cfc8:	68ab      	ldr	r3, [r5, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f000 8159 	beq.w	800d282 <rclc_executor_spin_some.part.0+0x33e>
 800cfd0:	2400      	movs	r4, #0
 800cfd2:	46a0      	mov	r8, r4
 800cfd4:	f240 1991 	movw	r9, #401	@ 0x191
 800cfd8:	e00a      	b.n	800cff0 <rclc_executor_spin_some.part.0+0xac>
 800cfda:	f7ff fb43 	bl	800c664 <_rclc_check_for_new_data>
 800cfde:	4604      	mov	r4, r0
 800cfe0:	b110      	cbz	r0, 800cfe8 <rclc_executor_spin_some.part.0+0xa4>
 800cfe2:	4548      	cmp	r0, r9
 800cfe4:	f040 80b2 	bne.w	800d14c <rclc_executor_spin_some.part.0+0x208>
 800cfe8:	68ab      	ldr	r3, [r5, #8]
 800cfea:	4598      	cmp	r8, r3
 800cfec:	f080 8126 	bcs.w	800d23c <rclc_executor_spin_some.part.0+0x2f8>
 800cff0:	686a      	ldr	r2, [r5, #4]
 800cff2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cff6:	4631      	mov	r1, r6
 800cff8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cffc:	f108 0801 	add.w	r8, r8, #1
 800d000:	f1bc 0f00 	cmp.w	ip, #0
 800d004:	d1e9      	bne.n	800cfda <rclc_executor_spin_some.part.0+0x96>
 800d006:	4619      	mov	r1, r3
 800d008:	4610      	mov	r0, r2
 800d00a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d00e:	4798      	blx	r3
 800d010:	2800      	cmp	r0, #0
 800d012:	f000 809b 	beq.w	800d14c <rclc_executor_spin_some.part.0+0x208>
 800d016:	68ab      	ldr	r3, [r5, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 8097 	beq.w	800d14c <rclc_executor_spin_some.part.0+0x208>
 800d01e:	f04f 0800 	mov.w	r8, #0
 800d022:	f240 1991 	movw	r9, #401	@ 0x191
 800d026:	e009      	b.n	800d03c <rclc_executor_spin_some.part.0+0xf8>
 800d028:	f7ff fb6a 	bl	800c700 <_rclc_take_new_data>
 800d02c:	4604      	mov	r4, r0
 800d02e:	b110      	cbz	r0, 800d036 <rclc_executor_spin_some.part.0+0xf2>
 800d030:	4548      	cmp	r0, r9
 800d032:	f040 808b 	bne.w	800d14c <rclc_executor_spin_some.part.0+0x208>
 800d036:	68ab      	ldr	r3, [r5, #8]
 800d038:	4598      	cmp	r8, r3
 800d03a:	d209      	bcs.n	800d050 <rclc_executor_spin_some.part.0+0x10c>
 800d03c:	6868      	ldr	r0, [r5, #4]
 800d03e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d042:	4631      	mov	r1, r6
 800d044:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d048:	f108 0801 	add.w	r8, r8, #1
 800d04c:	2a00      	cmp	r2, #0
 800d04e:	d1eb      	bne.n	800d028 <rclc_executor_spin_some.part.0+0xe4>
 800d050:	2600      	movs	r6, #0
 800d052:	b97b      	cbnz	r3, 800d074 <rclc_executor_spin_some.part.0+0x130>
 800d054:	e07a      	b.n	800d14c <rclc_executor_spin_some.part.0+0x208>
 800d056:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d05a:	2a08      	cmp	r2, #8
 800d05c:	f000 80fd 	beq.w	800d25a <rclc_executor_spin_some.part.0+0x316>
 800d060:	2a09      	cmp	r2, #9
 800d062:	f000 80ef 	beq.w	800d244 <rclc_executor_spin_some.part.0+0x300>
 800d066:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d06a:	b98a      	cbnz	r2, 800d090 <rclc_executor_spin_some.part.0+0x14c>
 800d06c:	3601      	adds	r6, #1
 800d06e:	429e      	cmp	r6, r3
 800d070:	d262      	bcs.n	800d138 <rclc_executor_spin_some.part.0+0x1f4>
 800d072:	2400      	movs	r4, #0
 800d074:	686a      	ldr	r2, [r5, #4]
 800d076:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d07a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d07e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d082:	2900      	cmp	r1, #0
 800d084:	d062      	beq.n	800d14c <rclc_executor_spin_some.part.0+0x208>
 800d086:	7841      	ldrb	r1, [r0, #1]
 800d088:	2900      	cmp	r1, #0
 800d08a:	d0e4      	beq.n	800d056 <rclc_executor_spin_some.part.0+0x112>
 800d08c:	2901      	cmp	r1, #1
 800d08e:	d1ed      	bne.n	800d06c <rclc_executor_spin_some.part.0+0x128>
 800d090:	f7ff fcaa 	bl	800c9e8 <_rclc_execute.part.0>
 800d094:	2800      	cmp	r0, #0
 800d096:	f040 80b6 	bne.w	800d206 <rclc_executor_spin_some.part.0+0x2c2>
 800d09a:	68ab      	ldr	r3, [r5, #8]
 800d09c:	e7e6      	b.n	800d06c <rclc_executor_spin_some.part.0+0x128>
 800d09e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d0a2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	f008 f834 	bl	8015114 <rcl_wait_set_add_client>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	f43f af7a 	beq.w	800cfa6 <rclc_executor_spin_some.part.0+0x62>
 800d0b2:	9001      	str	r0, [sp, #4]
 800d0b4:	f000 facc 	bl	800d650 <rcutils_reset_error>
 800d0b8:	9801      	ldr	r0, [sp, #4]
 800d0ba:	4607      	mov	r7, r0
 800d0bc:	e03c      	b.n	800d138 <rclc_executor_spin_some.part.0+0x1f4>
 800d0be:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d0c2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	f007 fcdc 	bl	8014a84 <rcl_wait_set_add_subscription>
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	f43f af6a 	beq.w	800cfa6 <rclc_executor_spin_some.part.0+0x62>
 800d0d2:	e7ee      	b.n	800d0b2 <rclc_executor_spin_some.part.0+0x16e>
 800d0d4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d0d8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f007 ffe9 	bl	80150b4 <rcl_wait_set_add_timer>
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	f43f af5f 	beq.w	800cfa6 <rclc_executor_spin_some.part.0+0x62>
 800d0e8:	e7e3      	b.n	800d0b2 <rclc_executor_spin_some.part.0+0x16e>
 800d0ea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d0ee:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f007 ffb2 	bl	801505c <rcl_wait_set_add_guard_condition>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	f43f af54 	beq.w	800cfa6 <rclc_executor_spin_some.part.0+0x62>
 800d0fe:	e7d8      	b.n	800d0b2 <rclc_executor_spin_some.part.0+0x16e>
 800d100:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d104:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d108:	3110      	adds	r1, #16
 800d10a:	4630      	mov	r0, r6
 800d10c:	f008 fd34 	bl	8015b78 <rcl_action_wait_set_add_action_server>
 800d110:	2800      	cmp	r0, #0
 800d112:	f43f af48 	beq.w	800cfa6 <rclc_executor_spin_some.part.0+0x62>
 800d116:	e7cc      	b.n	800d0b2 <rclc_executor_spin_some.part.0+0x16e>
 800d118:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d11c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d120:	3110      	adds	r1, #16
 800d122:	2300      	movs	r3, #0
 800d124:	4630      	mov	r0, r6
 800d126:	f008 faff 	bl	8015728 <rcl_action_wait_set_add_action_client>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	f43f af3b 	beq.w	800cfa6 <rclc_executor_spin_some.part.0+0x62>
 800d130:	e7bf      	b.n	800d0b2 <rclc_executor_spin_some.part.0+0x16e>
 800d132:	f000 fa8d 	bl	800d650 <rcutils_reset_error>
 800d136:	2701      	movs	r7, #1
 800d138:	4638      	mov	r0, r7
 800d13a:	b003      	add	sp, #12
 800d13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d140:	f000 fa86 	bl	800d650 <rcutils_reset_error>
 800d144:	4638      	mov	r0, r7
 800d146:	b003      	add	sp, #12
 800d148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d14c:	4627      	mov	r7, r4
 800d14e:	e7f3      	b.n	800d138 <rclc_executor_spin_some.part.0+0x1f4>
 800d150:	68ab      	ldr	r3, [r5, #8]
 800d152:	2b00      	cmp	r3, #0
 800d154:	f000 8092 	beq.w	800d27c <rclc_executor_spin_some.part.0+0x338>
 800d158:	2400      	movs	r4, #0
 800d15a:	46a0      	mov	r8, r4
 800d15c:	f240 1991 	movw	r9, #401	@ 0x191
 800d160:	e008      	b.n	800d174 <rclc_executor_spin_some.part.0+0x230>
 800d162:	f7ff fa7f 	bl	800c664 <_rclc_check_for_new_data>
 800d166:	4604      	mov	r4, r0
 800d168:	b108      	cbz	r0, 800d16e <rclc_executor_spin_some.part.0+0x22a>
 800d16a:	4548      	cmp	r0, r9
 800d16c:	d1ee      	bne.n	800d14c <rclc_executor_spin_some.part.0+0x208>
 800d16e:	68ab      	ldr	r3, [r5, #8]
 800d170:	4598      	cmp	r8, r3
 800d172:	d265      	bcs.n	800d240 <rclc_executor_spin_some.part.0+0x2fc>
 800d174:	686a      	ldr	r2, [r5, #4]
 800d176:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d17a:	4631      	mov	r1, r6
 800d17c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d180:	f108 0801 	add.w	r8, r8, #1
 800d184:	f1bc 0f00 	cmp.w	ip, #0
 800d188:	d1eb      	bne.n	800d162 <rclc_executor_spin_some.part.0+0x21e>
 800d18a:	4619      	mov	r1, r3
 800d18c:	4610      	mov	r0, r2
 800d18e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d192:	4798      	blx	r3
 800d194:	2800      	cmp	r0, #0
 800d196:	d0d9      	beq.n	800d14c <rclc_executor_spin_some.part.0+0x208>
 800d198:	68ab      	ldr	r3, [r5, #8]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0d6      	beq.n	800d14c <rclc_executor_spin_some.part.0+0x208>
 800d19e:	f04f 0800 	mov.w	r8, #0
 800d1a2:	f240 1991 	movw	r9, #401	@ 0x191
 800d1a6:	f240 2a59 	movw	sl, #601	@ 0x259
 800d1aa:	e00e      	b.n	800d1ca <rclc_executor_spin_some.part.0+0x286>
 800d1ac:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d1b0:	2b08      	cmp	r3, #8
 800d1b2:	d033      	beq.n	800d21c <rclc_executor_spin_some.part.0+0x2d8>
 800d1b4:	2b09      	cmp	r3, #9
 800d1b6:	d028      	beq.n	800d20a <rclc_executor_spin_some.part.0+0x2c6>
 800d1b8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d1bc:	b9fb      	cbnz	r3, 800d1fe <rclc_executor_spin_some.part.0+0x2ba>
 800d1be:	68ab      	ldr	r3, [r5, #8]
 800d1c0:	f108 0801 	add.w	r8, r8, #1
 800d1c4:	4598      	cmp	r8, r3
 800d1c6:	d2b7      	bcs.n	800d138 <rclc_executor_spin_some.part.0+0x1f4>
 800d1c8:	2400      	movs	r4, #0
 800d1ca:	6868      	ldr	r0, [r5, #4]
 800d1cc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d1d0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800d1d4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d0b7      	beq.n	800d14c <rclc_executor_spin_some.part.0+0x208>
 800d1dc:	4631      	mov	r1, r6
 800d1de:	f7ff fa8f 	bl	800c700 <_rclc_take_new_data>
 800d1e2:	b118      	cbz	r0, 800d1ec <rclc_executor_spin_some.part.0+0x2a8>
 800d1e4:	4548      	cmp	r0, r9
 800d1e6:	d001      	beq.n	800d1ec <rclc_executor_spin_some.part.0+0x2a8>
 800d1e8:	4550      	cmp	r0, sl
 800d1ea:	d10c      	bne.n	800d206 <rclc_executor_spin_some.part.0+0x2c2>
 800d1ec:	686b      	ldr	r3, [r5, #4]
 800d1ee:	eb13 000b 	adds.w	r0, r3, fp
 800d1f2:	d021      	beq.n	800d238 <rclc_executor_spin_some.part.0+0x2f4>
 800d1f4:	7842      	ldrb	r2, [r0, #1]
 800d1f6:	2a00      	cmp	r2, #0
 800d1f8:	d0d8      	beq.n	800d1ac <rclc_executor_spin_some.part.0+0x268>
 800d1fa:	2a01      	cmp	r2, #1
 800d1fc:	d1df      	bne.n	800d1be <rclc_executor_spin_some.part.0+0x27a>
 800d1fe:	f7ff fbf3 	bl	800c9e8 <_rclc_execute.part.0>
 800d202:	2800      	cmp	r0, #0
 800d204:	d0db      	beq.n	800d1be <rclc_executor_spin_some.part.0+0x27a>
 800d206:	4607      	mov	r7, r0
 800d208:	e796      	b.n	800d138 <rclc_executor_spin_some.part.0+0x1f4>
 800d20a:	6843      	ldr	r3, [r0, #4]
 800d20c:	6a1a      	ldr	r2, [r3, #32]
 800d20e:	2a00      	cmp	r2, #0
 800d210:	d1f5      	bne.n	800d1fe <rclc_executor_spin_some.part.0+0x2ba>
 800d212:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d216:	2b00      	cmp	r3, #0
 800d218:	d0d1      	beq.n	800d1be <rclc_executor_spin_some.part.0+0x27a>
 800d21a:	e7f0      	b.n	800d1fe <rclc_executor_spin_some.part.0+0x2ba>
 800d21c:	6843      	ldr	r3, [r0, #4]
 800d21e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d220:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800d224:	d1eb      	bne.n	800d1fe <rclc_executor_spin_some.part.0+0x2ba>
 800d226:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d22a:	2a00      	cmp	r2, #0
 800d22c:	d1e7      	bne.n	800d1fe <rclc_executor_spin_some.part.0+0x2ba>
 800d22e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d232:	2b00      	cmp	r3, #0
 800d234:	d0c3      	beq.n	800d1be <rclc_executor_spin_some.part.0+0x27a>
 800d236:	e7e2      	b.n	800d1fe <rclc_executor_spin_some.part.0+0x2ba>
 800d238:	270b      	movs	r7, #11
 800d23a:	e77d      	b.n	800d138 <rclc_executor_spin_some.part.0+0x1f4>
 800d23c:	686a      	ldr	r2, [r5, #4]
 800d23e:	e6e2      	b.n	800d006 <rclc_executor_spin_some.part.0+0xc2>
 800d240:	686a      	ldr	r2, [r5, #4]
 800d242:	e7a2      	b.n	800d18a <rclc_executor_spin_some.part.0+0x246>
 800d244:	6842      	ldr	r2, [r0, #4]
 800d246:	6a11      	ldr	r1, [r2, #32]
 800d248:	2900      	cmp	r1, #0
 800d24a:	f47f af21 	bne.w	800d090 <rclc_executor_spin_some.part.0+0x14c>
 800d24e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d252:	2a00      	cmp	r2, #0
 800d254:	f43f af0a 	beq.w	800d06c <rclc_executor_spin_some.part.0+0x128>
 800d258:	e71a      	b.n	800d090 <rclc_executor_spin_some.part.0+0x14c>
 800d25a:	6842      	ldr	r2, [r0, #4]
 800d25c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800d25e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800d262:	f47f af15 	bne.w	800d090 <rclc_executor_spin_some.part.0+0x14c>
 800d266:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800d26a:	2900      	cmp	r1, #0
 800d26c:	f47f af10 	bne.w	800d090 <rclc_executor_spin_some.part.0+0x14c>
 800d270:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800d274:	2a00      	cmp	r2, #0
 800d276:	f43f aef9 	beq.w	800d06c <rclc_executor_spin_some.part.0+0x128>
 800d27a:	e709      	b.n	800d090 <rclc_executor_spin_some.part.0+0x14c>
 800d27c:	686a      	ldr	r2, [r5, #4]
 800d27e:	461c      	mov	r4, r3
 800d280:	e783      	b.n	800d18a <rclc_executor_spin_some.part.0+0x246>
 800d282:	686a      	ldr	r2, [r5, #4]
 800d284:	461c      	mov	r4, r3
 800d286:	e6be      	b.n	800d006 <rclc_executor_spin_some.part.0+0xc2>

0800d288 <rclc_executor_spin>:
 800d288:	b1d0      	cbz	r0, 800d2c0 <rclc_executor_spin+0x38>
 800d28a:	b510      	push	{r4, lr}
 800d28c:	4604      	mov	r4, r0
 800d28e:	b082      	sub	sp, #8
 800d290:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800d294:	6820      	ldr	r0, [r4, #0]
 800d296:	e9cd 2300 	strd	r2, r3, [sp]
 800d29a:	f006 f8c9 	bl	8013430 <rcl_context_is_valid>
 800d29e:	4601      	mov	r1, r0
 800d2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	b131      	cbz	r1, 800d2b6 <rclc_executor_spin+0x2e>
 800d2a8:	f7ff fe4c 	bl	800cf44 <rclc_executor_spin_some.part.0>
 800d2ac:	f030 0302 	bics.w	r3, r0, #2
 800d2b0:	d0ee      	beq.n	800d290 <rclc_executor_spin+0x8>
 800d2b2:	b002      	add	sp, #8
 800d2b4:	bd10      	pop	{r4, pc}
 800d2b6:	f000 f9cb 	bl	800d650 <rcutils_reset_error>
 800d2ba:	2001      	movs	r0, #1
 800d2bc:	b002      	add	sp, #8
 800d2be:	bd10      	pop	{r4, pc}
 800d2c0:	200b      	movs	r0, #11
 800d2c2:	4770      	bx	lr

0800d2c4 <rclc_executor_handle_counters_zero_init>:
 800d2c4:	b130      	cbz	r0, 800d2d4 <rclc_executor_handle_counters_zero_init+0x10>
 800d2c6:	b508      	push	{r3, lr}
 800d2c8:	2220      	movs	r2, #32
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	f00b ffd2 	bl	8019274 <memset>
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	bd08      	pop	{r3, pc}
 800d2d4:	200b      	movs	r0, #11
 800d2d6:	4770      	bx	lr

0800d2d8 <rclc_executor_handle_init>:
 800d2d8:	b168      	cbz	r0, 800d2f6 <rclc_executor_handle_init+0x1e>
 800d2da:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d300 <rclc_executor_handle_init+0x28>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	220b      	movs	r2, #11
 800d2e2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800d2e6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d2ea:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d2ee:	8002      	strh	r2, [r0, #0]
 800d2f0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	4770      	bx	lr
 800d2f6:	200b      	movs	r0, #11
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	f3af 8000 	nop.w
	...

0800d308 <rclc_support_init_with_options>:
 800d308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d30c:	b083      	sub	sp, #12
 800d30e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d310:	b340      	cbz	r0, 800d364 <rclc_support_init_with_options+0x5c>
 800d312:	461d      	mov	r5, r3
 800d314:	b333      	cbz	r3, 800d364 <rclc_support_init_with_options+0x5c>
 800d316:	b32e      	cbz	r6, 800d364 <rclc_support_init_with_options+0x5c>
 800d318:	46e9      	mov	r9, sp
 800d31a:	4604      	mov	r4, r0
 800d31c:	4648      	mov	r0, r9
 800d31e:	460f      	mov	r7, r1
 800d320:	4690      	mov	r8, r2
 800d322:	f006 f87b 	bl	801341c <rcl_get_zero_initialized_context>
 800d326:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d32a:	462a      	mov	r2, r5
 800d32c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d330:	4623      	mov	r3, r4
 800d332:	4641      	mov	r1, r8
 800d334:	4638      	mov	r0, r7
 800d336:	f006 f8e1 	bl	80134fc <rcl_init>
 800d33a:	4605      	mov	r5, r0
 800d33c:	b960      	cbnz	r0, 800d358 <rclc_support_init_with_options+0x50>
 800d33e:	60a6      	str	r6, [r4, #8]
 800d340:	4632      	mov	r2, r6
 800d342:	f104 010c 	add.w	r1, r4, #12
 800d346:	2003      	movs	r0, #3
 800d348:	f006 fee0 	bl	801410c <rcl_clock_init>
 800d34c:	4605      	mov	r5, r0
 800d34e:	b918      	cbnz	r0, 800d358 <rclc_support_init_with_options+0x50>
 800d350:	4628      	mov	r0, r5
 800d352:	b003      	add	sp, #12
 800d354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d358:	f000 f97a 	bl	800d650 <rcutils_reset_error>
 800d35c:	4628      	mov	r0, r5
 800d35e:	b003      	add	sp, #12
 800d360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d364:	250b      	movs	r5, #11
 800d366:	4628      	mov	r0, r5
 800d368:	b003      	add	sp, #12
 800d36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d36e:	bf00      	nop

0800d370 <rclc_node_init_default>:
 800d370:	b3b8      	cbz	r0, 800d3e2 <rclc_node_init_default+0x72>
 800d372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d376:	460d      	mov	r5, r1
 800d378:	b0a1      	sub	sp, #132	@ 0x84
 800d37a:	b329      	cbz	r1, 800d3c8 <rclc_node_init_default+0x58>
 800d37c:	4616      	mov	r6, r2
 800d37e:	b31a      	cbz	r2, 800d3c8 <rclc_node_init_default+0x58>
 800d380:	461f      	mov	r7, r3
 800d382:	b30b      	cbz	r3, 800d3c8 <rclc_node_init_default+0x58>
 800d384:	f10d 0810 	add.w	r8, sp, #16
 800d388:	4604      	mov	r4, r0
 800d38a:	4640      	mov	r0, r8
 800d38c:	f006 f9dc 	bl	8013748 <rcl_get_zero_initialized_node>
 800d390:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d394:	f10d 0918 	add.w	r9, sp, #24
 800d398:	e884 0003 	stmia.w	r4, {r0, r1}
 800d39c:	4648      	mov	r0, r9
 800d39e:	f006 fb4b 	bl	8013a38 <rcl_node_get_default_options>
 800d3a2:	4640      	mov	r0, r8
 800d3a4:	f006 f9d0 	bl	8013748 <rcl_get_zero_initialized_node>
 800d3a8:	f8cd 9000 	str.w	r9, [sp]
 800d3ac:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d3b0:	463b      	mov	r3, r7
 800d3b2:	e884 0003 	stmia.w	r4, {r0, r1}
 800d3b6:	4632      	mov	r2, r6
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f006 f9ce 	bl	801375c <rcl_node_init>
 800d3c0:	b930      	cbnz	r0, 800d3d0 <rclc_node_init_default+0x60>
 800d3c2:	b021      	add	sp, #132	@ 0x84
 800d3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3c8:	200b      	movs	r0, #11
 800d3ca:	b021      	add	sp, #132	@ 0x84
 800d3cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3d0:	9003      	str	r0, [sp, #12]
 800d3d2:	f000 f93d 	bl	800d650 <rcutils_reset_error>
 800d3d6:	f000 f93b 	bl	800d650 <rcutils_reset_error>
 800d3da:	9803      	ldr	r0, [sp, #12]
 800d3dc:	b021      	add	sp, #132	@ 0x84
 800d3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3e2:	200b      	movs	r0, #11
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop

0800d3e8 <rclc_publisher_init_default>:
 800d3e8:	b368      	cbz	r0, 800d446 <rclc_publisher_init_default+0x5e>
 800d3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ee:	460d      	mov	r5, r1
 800d3f0:	b0a0      	sub	sp, #128	@ 0x80
 800d3f2:	b321      	cbz	r1, 800d43e <rclc_publisher_init_default+0x56>
 800d3f4:	4616      	mov	r6, r2
 800d3f6:	b312      	cbz	r2, 800d43e <rclc_publisher_init_default+0x56>
 800d3f8:	461f      	mov	r7, r3
 800d3fa:	b303      	cbz	r3, 800d43e <rclc_publisher_init_default+0x56>
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	f7ff f821 	bl	800c444 <rcl_get_zero_initialized_publisher>
 800d402:	f10d 0810 	add.w	r8, sp, #16
 800d406:	6020      	str	r0, [r4, #0]
 800d408:	4640      	mov	r0, r8
 800d40a:	f7ff f8b7 	bl	800c57c <rcl_publisher_get_default_options>
 800d40e:	490f      	ldr	r1, [pc, #60]	@ (800d44c <rclc_publisher_init_default+0x64>)
 800d410:	2250      	movs	r2, #80	@ 0x50
 800d412:	4640      	mov	r0, r8
 800d414:	f00b fff7 	bl	8019406 <memcpy>
 800d418:	f8cd 8000 	str.w	r8, [sp]
 800d41c:	463b      	mov	r3, r7
 800d41e:	4632      	mov	r2, r6
 800d420:	4629      	mov	r1, r5
 800d422:	4620      	mov	r0, r4
 800d424:	f7ff f814 	bl	800c450 <rcl_publisher_init>
 800d428:	b910      	cbnz	r0, 800d430 <rclc_publisher_init_default+0x48>
 800d42a:	b020      	add	sp, #128	@ 0x80
 800d42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d430:	9003      	str	r0, [sp, #12]
 800d432:	f000 f90d 	bl	800d650 <rcutils_reset_error>
 800d436:	9803      	ldr	r0, [sp, #12]
 800d438:	b020      	add	sp, #128	@ 0x80
 800d43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d43e:	200b      	movs	r0, #11
 800d440:	b020      	add	sp, #128	@ 0x80
 800d442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d446:	200b      	movs	r0, #11
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	0801af30 	.word	0x0801af30

0800d450 <rclc_publisher_init_best_effort>:
 800d450:	b368      	cbz	r0, 800d4ae <rclc_publisher_init_best_effort+0x5e>
 800d452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d456:	460d      	mov	r5, r1
 800d458:	b0a0      	sub	sp, #128	@ 0x80
 800d45a:	b321      	cbz	r1, 800d4a6 <rclc_publisher_init_best_effort+0x56>
 800d45c:	4616      	mov	r6, r2
 800d45e:	b312      	cbz	r2, 800d4a6 <rclc_publisher_init_best_effort+0x56>
 800d460:	461f      	mov	r7, r3
 800d462:	b303      	cbz	r3, 800d4a6 <rclc_publisher_init_best_effort+0x56>
 800d464:	4604      	mov	r4, r0
 800d466:	f7fe ffed 	bl	800c444 <rcl_get_zero_initialized_publisher>
 800d46a:	f10d 0810 	add.w	r8, sp, #16
 800d46e:	6020      	str	r0, [r4, #0]
 800d470:	4640      	mov	r0, r8
 800d472:	f7ff f883 	bl	800c57c <rcl_publisher_get_default_options>
 800d476:	490f      	ldr	r1, [pc, #60]	@ (800d4b4 <rclc_publisher_init_best_effort+0x64>)
 800d478:	2250      	movs	r2, #80	@ 0x50
 800d47a:	4640      	mov	r0, r8
 800d47c:	f00b ffc3 	bl	8019406 <memcpy>
 800d480:	f8cd 8000 	str.w	r8, [sp]
 800d484:	463b      	mov	r3, r7
 800d486:	4632      	mov	r2, r6
 800d488:	4629      	mov	r1, r5
 800d48a:	4620      	mov	r0, r4
 800d48c:	f7fe ffe0 	bl	800c450 <rcl_publisher_init>
 800d490:	b910      	cbnz	r0, 800d498 <rclc_publisher_init_best_effort+0x48>
 800d492:	b020      	add	sp, #128	@ 0x80
 800d494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d498:	9003      	str	r0, [sp, #12]
 800d49a:	f000 f8d9 	bl	800d650 <rcutils_reset_error>
 800d49e:	9803      	ldr	r0, [sp, #12]
 800d4a0:	b020      	add	sp, #128	@ 0x80
 800d4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4a6:	200b      	movs	r0, #11
 800d4a8:	b020      	add	sp, #128	@ 0x80
 800d4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ae:	200b      	movs	r0, #11
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	0801af80 	.word	0x0801af80

0800d4b8 <rclc_service_init_default>:
 800d4b8:	b368      	cbz	r0, 800d516 <rclc_service_init_default+0x5e>
 800d4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4be:	460d      	mov	r5, r1
 800d4c0:	b09e      	sub	sp, #120	@ 0x78
 800d4c2:	b321      	cbz	r1, 800d50e <rclc_service_init_default+0x56>
 800d4c4:	4616      	mov	r6, r2
 800d4c6:	b312      	cbz	r2, 800d50e <rclc_service_init_default+0x56>
 800d4c8:	461f      	mov	r7, r3
 800d4ca:	b303      	cbz	r3, 800d50e <rclc_service_init_default+0x56>
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	f006 fc83 	bl	8013dd8 <rcl_get_zero_initialized_service>
 800d4d2:	f10d 0810 	add.w	r8, sp, #16
 800d4d6:	6020      	str	r0, [r4, #0]
 800d4d8:	4640      	mov	r0, r8
 800d4da:	f006 fd0b 	bl	8013ef4 <rcl_service_get_default_options>
 800d4de:	490f      	ldr	r1, [pc, #60]	@ (800d51c <rclc_service_init_default+0x64>)
 800d4e0:	2250      	movs	r2, #80	@ 0x50
 800d4e2:	4640      	mov	r0, r8
 800d4e4:	f00b ff8f 	bl	8019406 <memcpy>
 800d4e8:	f8cd 8000 	str.w	r8, [sp]
 800d4ec:	463b      	mov	r3, r7
 800d4ee:	4632      	mov	r2, r6
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f006 fc76 	bl	8013de4 <rcl_service_init>
 800d4f8:	b910      	cbnz	r0, 800d500 <rclc_service_init_default+0x48>
 800d4fa:	b01e      	add	sp, #120	@ 0x78
 800d4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d500:	9003      	str	r0, [sp, #12]
 800d502:	f000 f8a5 	bl	800d650 <rcutils_reset_error>
 800d506:	9803      	ldr	r0, [sp, #12]
 800d508:	b01e      	add	sp, #120	@ 0x78
 800d50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d50e:	200b      	movs	r0, #11
 800d510:	b01e      	add	sp, #120	@ 0x78
 800d512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d516:	200b      	movs	r0, #11
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	0801afd0 	.word	0x0801afd0

0800d520 <rclc_timer_init_default>:
 800d520:	b360      	cbz	r0, 800d57c <rclc_timer_init_default+0x5c>
 800d522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d526:	460e      	mov	r6, r1
 800d528:	b08a      	sub	sp, #40	@ 0x28
 800d52a:	b319      	cbz	r1, 800d574 <rclc_timer_init_default+0x54>
 800d52c:	4690      	mov	r8, r2
 800d52e:	461f      	mov	r7, r3
 800d530:	4605      	mov	r5, r0
 800d532:	f006 ffc9 	bl	80144c8 <rcl_get_zero_initialized_timer>
 800d536:	68b4      	ldr	r4, [r6, #8]
 800d538:	6028      	str	r0, [r5, #0]
 800d53a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d53c:	f10d 0c0c 	add.w	ip, sp, #12
 800d540:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d544:	6823      	ldr	r3, [r4, #0]
 800d546:	f8cc 3000 	str.w	r3, [ip]
 800d54a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d54c:	9302      	str	r3, [sp, #8]
 800d54e:	e9cd 8700 	strd	r8, r7, [sp]
 800d552:	4628      	mov	r0, r5
 800d554:	4632      	mov	r2, r6
 800d556:	f106 010c 	add.w	r1, r6, #12
 800d55a:	f006 ffbd 	bl	80144d8 <rcl_timer_init>
 800d55e:	b910      	cbnz	r0, 800d566 <rclc_timer_init_default+0x46>
 800d560:	b00a      	add	sp, #40	@ 0x28
 800d562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d566:	9009      	str	r0, [sp, #36]	@ 0x24
 800d568:	f000 f872 	bl	800d650 <rcutils_reset_error>
 800d56c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d56e:	b00a      	add	sp, #40	@ 0x28
 800d570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d574:	200b      	movs	r0, #11
 800d576:	b00a      	add	sp, #40	@ 0x28
 800d578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d57c:	200b      	movs	r0, #11
 800d57e:	4770      	bx	lr

0800d580 <__default_zero_allocate>:
 800d580:	f00b b98e 	b.w	80188a0 <calloc>

0800d584 <__default_reallocate>:
 800d584:	f00b bb2c 	b.w	8018be0 <realloc>

0800d588 <__default_deallocate>:
 800d588:	f00b ba08 	b.w	801899c <free>

0800d58c <__default_allocate>:
 800d58c:	f00b b9fe 	b.w	801898c <malloc>

0800d590 <rcutils_get_zero_initialized_allocator>:
 800d590:	b510      	push	{r4, lr}
 800d592:	4c05      	ldr	r4, [pc, #20]	@ (800d5a8 <rcutils_get_zero_initialized_allocator+0x18>)
 800d594:	4686      	mov	lr, r0
 800d596:	4684      	mov	ip, r0
 800d598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d59a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	f8cc 3000 	str.w	r3, [ip]
 800d5a4:	4670      	mov	r0, lr
 800d5a6:	bd10      	pop	{r4, pc}
 800d5a8:	0801b020 	.word	0x0801b020

0800d5ac <rcutils_set_default_allocator>:
 800d5ac:	b1a8      	cbz	r0, 800d5da <rcutils_set_default_allocator+0x2e>
 800d5ae:	6802      	ldr	r2, [r0, #0]
 800d5b0:	b1a2      	cbz	r2, 800d5dc <rcutils_set_default_allocator+0x30>
 800d5b2:	6841      	ldr	r1, [r0, #4]
 800d5b4:	b1a1      	cbz	r1, 800d5e0 <rcutils_set_default_allocator+0x34>
 800d5b6:	b410      	push	{r4}
 800d5b8:	68c4      	ldr	r4, [r0, #12]
 800d5ba:	b164      	cbz	r4, 800d5d6 <rcutils_set_default_allocator+0x2a>
 800d5bc:	6880      	ldr	r0, [r0, #8]
 800d5be:	b138      	cbz	r0, 800d5d0 <rcutils_set_default_allocator+0x24>
 800d5c0:	4b08      	ldr	r3, [pc, #32]	@ (800d5e4 <rcutils_set_default_allocator+0x38>)
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d5ca:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d5ce:	2001      	movs	r0, #1
 800d5d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	e7fa      	b.n	800d5d0 <rcutils_set_default_allocator+0x24>
 800d5da:	4770      	bx	lr
 800d5dc:	4610      	mov	r0, r2
 800d5de:	4770      	bx	lr
 800d5e0:	4608      	mov	r0, r1
 800d5e2:	4770      	bx	lr
 800d5e4:	200003a0 	.word	0x200003a0

0800d5e8 <rcutils_get_default_allocator>:
 800d5e8:	b510      	push	{r4, lr}
 800d5ea:	4c05      	ldr	r4, [pc, #20]	@ (800d600 <rcutils_get_default_allocator+0x18>)
 800d5ec:	4686      	mov	lr, r0
 800d5ee:	4684      	mov	ip, r0
 800d5f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	f8cc 3000 	str.w	r3, [ip]
 800d5fc:	4670      	mov	r0, lr
 800d5fe:	bd10      	pop	{r4, pc}
 800d600:	200003a0 	.word	0x200003a0

0800d604 <rcutils_allocator_is_valid>:
 800d604:	b158      	cbz	r0, 800d61e <rcutils_allocator_is_valid+0x1a>
 800d606:	6803      	ldr	r3, [r0, #0]
 800d608:	b143      	cbz	r3, 800d61c <rcutils_allocator_is_valid+0x18>
 800d60a:	6843      	ldr	r3, [r0, #4]
 800d60c:	b133      	cbz	r3, 800d61c <rcutils_allocator_is_valid+0x18>
 800d60e:	68c3      	ldr	r3, [r0, #12]
 800d610:	b123      	cbz	r3, 800d61c <rcutils_allocator_is_valid+0x18>
 800d612:	6880      	ldr	r0, [r0, #8]
 800d614:	3800      	subs	r0, #0
 800d616:	bf18      	it	ne
 800d618:	2001      	movne	r0, #1
 800d61a:	4770      	bx	lr
 800d61c:	4618      	mov	r0, r3
 800d61e:	4770      	bx	lr

0800d620 <rcutils_get_error_string>:
 800d620:	4b06      	ldr	r3, [pc, #24]	@ (800d63c <rcutils_get_error_string+0x1c>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	b13b      	cbz	r3, 800d636 <rcutils_get_error_string+0x16>
 800d626:	4b06      	ldr	r3, [pc, #24]	@ (800d640 <rcutils_get_error_string+0x20>)
 800d628:	781a      	ldrb	r2, [r3, #0]
 800d62a:	b90a      	cbnz	r2, 800d630 <rcutils_get_error_string+0x10>
 800d62c:	2201      	movs	r2, #1
 800d62e:	701a      	strb	r2, [r3, #0]
 800d630:	4b04      	ldr	r3, [pc, #16]	@ (800d644 <rcutils_get_error_string+0x24>)
 800d632:	7818      	ldrb	r0, [r3, #0]
 800d634:	4770      	bx	lr
 800d636:	4b04      	ldr	r3, [pc, #16]	@ (800d648 <rcutils_get_error_string+0x28>)
 800d638:	7818      	ldrb	r0, [r3, #0]
 800d63a:	4770      	bx	lr
 800d63c:	20006b18 	.word	0x20006b18
 800d640:	20006b31 	.word	0x20006b31
 800d644:	20006b30 	.word	0x20006b30
 800d648:	0801abd8 	.word	0x0801abd8
 800d64c:	00000000 	.word	0x00000000

0800d650 <rcutils_reset_error>:
 800d650:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d670 <rcutils_reset_error+0x20>
 800d654:	4a08      	ldr	r2, [pc, #32]	@ (800d678 <rcutils_reset_error+0x28>)
 800d656:	4809      	ldr	r0, [pc, #36]	@ (800d67c <rcutils_reset_error+0x2c>)
 800d658:	4909      	ldr	r1, [pc, #36]	@ (800d680 <rcutils_reset_error+0x30>)
 800d65a:	2300      	movs	r3, #0
 800d65c:	8013      	strh	r3, [r2, #0]
 800d65e:	ed82 7b02 	vstr	d7, [r2, #8]
 800d662:	4a08      	ldr	r2, [pc, #32]	@ (800d684 <rcutils_reset_error+0x34>)
 800d664:	7003      	strb	r3, [r0, #0]
 800d666:	700b      	strb	r3, [r1, #0]
 800d668:	7013      	strb	r3, [r2, #0]
 800d66a:	4770      	bx	lr
 800d66c:	f3af 8000 	nop.w
	...
 800d678:	20006b20 	.word	0x20006b20
 800d67c:	20006b31 	.word	0x20006b31
 800d680:	20006b30 	.word	0x20006b30
 800d684:	20006b18 	.word	0x20006b18

0800d688 <rcutils_system_time_now>:
 800d688:	b308      	cbz	r0, 800d6ce <rcutils_system_time_now+0x46>
 800d68a:	b570      	push	{r4, r5, r6, lr}
 800d68c:	b084      	sub	sp, #16
 800d68e:	4604      	mov	r4, r0
 800d690:	4669      	mov	r1, sp
 800d692:	2001      	movs	r0, #1
 800d694:	f7f4 fc14 	bl	8001ec0 <clock_gettime>
 800d698:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d69c:	2d00      	cmp	r5, #0
 800d69e:	db13      	blt.n	800d6c8 <rcutils_system_time_now+0x40>
 800d6a0:	9902      	ldr	r1, [sp, #8]
 800d6a2:	2900      	cmp	r1, #0
 800d6a4:	db0d      	blt.n	800d6c2 <rcutils_system_time_now+0x3a>
 800d6a6:	4e0b      	ldr	r6, [pc, #44]	@ (800d6d4 <rcutils_system_time_now+0x4c>)
 800d6a8:	fba3 3206 	umull	r3, r2, r3, r6
 800d6ac:	185b      	adds	r3, r3, r1
 800d6ae:	fb06 2205 	mla	r2, r6, r5, r2
 800d6b2:	f04f 0000 	mov.w	r0, #0
 800d6b6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d6ba:	e9c4 3200 	strd	r3, r2, [r4]
 800d6be:	b004      	add	sp, #16
 800d6c0:	bd70      	pop	{r4, r5, r6, pc}
 800d6c2:	ea53 0205 	orrs.w	r2, r3, r5
 800d6c6:	d1ee      	bne.n	800d6a6 <rcutils_system_time_now+0x1e>
 800d6c8:	2002      	movs	r0, #2
 800d6ca:	b004      	add	sp, #16
 800d6cc:	bd70      	pop	{r4, r5, r6, pc}
 800d6ce:	200b      	movs	r0, #11
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	3b9aca00 	.word	0x3b9aca00

0800d6d8 <rcutils_steady_time_now>:
 800d6d8:	b308      	cbz	r0, 800d71e <rcutils_steady_time_now+0x46>
 800d6da:	b570      	push	{r4, r5, r6, lr}
 800d6dc:	b084      	sub	sp, #16
 800d6de:	4604      	mov	r4, r0
 800d6e0:	4669      	mov	r1, sp
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	f7f4 fbec 	bl	8001ec0 <clock_gettime>
 800d6e8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d6ec:	2d00      	cmp	r5, #0
 800d6ee:	db13      	blt.n	800d718 <rcutils_steady_time_now+0x40>
 800d6f0:	9902      	ldr	r1, [sp, #8]
 800d6f2:	2900      	cmp	r1, #0
 800d6f4:	db0d      	blt.n	800d712 <rcutils_steady_time_now+0x3a>
 800d6f6:	4e0b      	ldr	r6, [pc, #44]	@ (800d724 <rcutils_steady_time_now+0x4c>)
 800d6f8:	fba3 3206 	umull	r3, r2, r3, r6
 800d6fc:	185b      	adds	r3, r3, r1
 800d6fe:	fb06 2205 	mla	r2, r6, r5, r2
 800d702:	f04f 0000 	mov.w	r0, #0
 800d706:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d70a:	e9c4 3200 	strd	r3, r2, [r4]
 800d70e:	b004      	add	sp, #16
 800d710:	bd70      	pop	{r4, r5, r6, pc}
 800d712:	ea53 0205 	orrs.w	r2, r3, r5
 800d716:	d1ee      	bne.n	800d6f6 <rcutils_steady_time_now+0x1e>
 800d718:	2002      	movs	r0, #2
 800d71a:	b004      	add	sp, #16
 800d71c:	bd70      	pop	{r4, r5, r6, pc}
 800d71e:	200b      	movs	r0, #11
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	3b9aca00 	.word	0x3b9aca00

0800d728 <rmw_get_zero_initialized_init_options>:
 800d728:	b510      	push	{r4, lr}
 800d72a:	2238      	movs	r2, #56	@ 0x38
 800d72c:	4604      	mov	r4, r0
 800d72e:	2100      	movs	r1, #0
 800d730:	f00b fda0 	bl	8019274 <memset>
 800d734:	f104 0010 	add.w	r0, r4, #16
 800d738:	f000 f80a 	bl	800d750 <rmw_get_default_security_options>
 800d73c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d740:	60e3      	str	r3, [r4, #12]
 800d742:	4620      	mov	r0, r4
 800d744:	bd10      	pop	{r4, pc}
 800d746:	bf00      	nop

0800d748 <rmw_get_default_publisher_options>:
 800d748:	2200      	movs	r2, #0
 800d74a:	6002      	str	r2, [r0, #0]
 800d74c:	7102      	strb	r2, [r0, #4]
 800d74e:	4770      	bx	lr

0800d750 <rmw_get_default_security_options>:
 800d750:	2200      	movs	r2, #0
 800d752:	7002      	strb	r2, [r0, #0]
 800d754:	6042      	str	r2, [r0, #4]
 800d756:	4770      	bx	lr

0800d758 <rmw_uros_set_custom_transport>:
 800d758:	b470      	push	{r4, r5, r6}
 800d75a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d75e:	b162      	cbz	r2, 800d77a <rmw_uros_set_custom_transport+0x22>
 800d760:	b15b      	cbz	r3, 800d77a <rmw_uros_set_custom_transport+0x22>
 800d762:	b155      	cbz	r5, 800d77a <rmw_uros_set_custom_transport+0x22>
 800d764:	b14e      	cbz	r6, 800d77a <rmw_uros_set_custom_transport+0x22>
 800d766:	4c06      	ldr	r4, [pc, #24]	@ (800d780 <rmw_uros_set_custom_transport+0x28>)
 800d768:	7020      	strb	r0, [r4, #0]
 800d76a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d76e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d772:	6166      	str	r6, [r4, #20]
 800d774:	2000      	movs	r0, #0
 800d776:	bc70      	pop	{r4, r5, r6}
 800d778:	4770      	bx	lr
 800d77a:	200b      	movs	r0, #11
 800d77c:	bc70      	pop	{r4, r5, r6}
 800d77e:	4770      	bx	lr
 800d780:	20006b34 	.word	0x20006b34

0800d784 <rmw_init_options_init>:
 800d784:	b084      	sub	sp, #16
 800d786:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d788:	b083      	sub	sp, #12
 800d78a:	ad09      	add	r5, sp, #36	@ 0x24
 800d78c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d790:	b130      	cbz	r0, 800d7a0 <rmw_init_options_init+0x1c>
 800d792:	4604      	mov	r4, r0
 800d794:	4628      	mov	r0, r5
 800d796:	f7ff ff35 	bl	800d604 <rcutils_allocator_is_valid>
 800d79a:	b108      	cbz	r0, 800d7a0 <rmw_init_options_init+0x1c>
 800d79c:	68a6      	ldr	r6, [r4, #8]
 800d79e:	b12e      	cbz	r6, 800d7ac <rmw_init_options_init+0x28>
 800d7a0:	200b      	movs	r0, #11
 800d7a2:	b003      	add	sp, #12
 800d7a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d7a8:	b004      	add	sp, #16
 800d7aa:	4770      	bx	lr
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	e9c4 2300 	strd	r2, r3, [r4]
 800d7b4:	4b22      	ldr	r3, [pc, #136]	@ (800d840 <rmw_init_options_init+0xbc>)
 800d7b6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800d850 <rmw_init_options_init+0xcc>
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	60a3      	str	r3, [r4, #8]
 800d7be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7c0:	f104 0c20 	add.w	ip, r4, #32
 800d7c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d7c8:	466f      	mov	r7, sp
 800d7ca:	682b      	ldr	r3, [r5, #0]
 800d7cc:	f8cc 3000 	str.w	r3, [ip]
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	f8c4 e01c 	str.w	lr, [r4, #28]
 800d7d6:	60e6      	str	r6, [r4, #12]
 800d7d8:	f7ff ffba 	bl	800d750 <rmw_get_default_security_options>
 800d7dc:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d7e0:	f104 0310 	add.w	r3, r4, #16
 800d7e4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d7e8:	2203      	movs	r2, #3
 800d7ea:	4816      	ldr	r0, [pc, #88]	@ (800d844 <rmw_init_options_init+0xc0>)
 800d7ec:	4916      	ldr	r1, [pc, #88]	@ (800d848 <rmw_init_options_init+0xc4>)
 800d7ee:	7626      	strb	r6, [r4, #24]
 800d7f0:	f000 ffbc 	bl	800e76c <rmw_uxrce_init_init_options_impl_memory>
 800d7f4:	4813      	ldr	r0, [pc, #76]	@ (800d844 <rmw_init_options_init+0xc0>)
 800d7f6:	f009 f9f3 	bl	8016be0 <get_memory>
 800d7fa:	b1f0      	cbz	r0, 800d83a <rmw_init_options_init+0xb6>
 800d7fc:	4a13      	ldr	r2, [pc, #76]	@ (800d84c <rmw_init_options_init+0xc8>)
 800d7fe:	6883      	ldr	r3, [r0, #8]
 800d800:	6851      	ldr	r1, [r2, #4]
 800d802:	7810      	ldrb	r0, [r2, #0]
 800d804:	6363      	str	r3, [r4, #52]	@ 0x34
 800d806:	7418      	strb	r0, [r3, #16]
 800d808:	6159      	str	r1, [r3, #20]
 800d80a:	68d1      	ldr	r1, [r2, #12]
 800d80c:	61d9      	str	r1, [r3, #28]
 800d80e:	6911      	ldr	r1, [r2, #16]
 800d810:	6219      	str	r1, [r3, #32]
 800d812:	6951      	ldr	r1, [r2, #20]
 800d814:	6892      	ldr	r2, [r2, #8]
 800d816:	619a      	str	r2, [r3, #24]
 800d818:	6259      	str	r1, [r3, #36]	@ 0x24
 800d81a:	f004 fbdf 	bl	8011fdc <uxr_nanos>
 800d81e:	f00b f973 	bl	8018b08 <srand>
 800d822:	f00b f99f 	bl	8018b64 <rand>
 800d826:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d828:	6298      	str	r0, [r3, #40]	@ 0x28
 800d82a:	2800      	cmp	r0, #0
 800d82c:	d0f9      	beq.n	800d822 <rmw_init_options_init+0x9e>
 800d82e:	2000      	movs	r0, #0
 800d830:	b003      	add	sp, #12
 800d832:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d836:	b004      	add	sp, #16
 800d838:	4770      	bx	lr
 800d83a:	2001      	movs	r0, #1
 800d83c:	e7b1      	b.n	800d7a2 <rmw_init_options_init+0x1e>
 800d83e:	bf00      	nop
 800d840:	0801bae8 	.word	0x0801bae8
 800d844:	2000b58c 	.word	0x2000b58c
 800d848:	20006e28 	.word	0x20006e28
 800d84c:	20006b34 	.word	0x20006b34
 800d850:	0801b034 	.word	0x0801b034

0800d854 <rmw_init_options_copy>:
 800d854:	b570      	push	{r4, r5, r6, lr}
 800d856:	b158      	cbz	r0, 800d870 <rmw_init_options_copy+0x1c>
 800d858:	460d      	mov	r5, r1
 800d85a:	b149      	cbz	r1, 800d870 <rmw_init_options_copy+0x1c>
 800d85c:	4604      	mov	r4, r0
 800d85e:	6880      	ldr	r0, [r0, #8]
 800d860:	b120      	cbz	r0, 800d86c <rmw_init_options_copy+0x18>
 800d862:	4b1e      	ldr	r3, [pc, #120]	@ (800d8dc <rmw_init_options_copy+0x88>)
 800d864:	6819      	ldr	r1, [r3, #0]
 800d866:	f7f2 fcdb 	bl	8000220 <strcmp>
 800d86a:	bb90      	cbnz	r0, 800d8d2 <rmw_init_options_copy+0x7e>
 800d86c:	68ab      	ldr	r3, [r5, #8]
 800d86e:	b113      	cbz	r3, 800d876 <rmw_init_options_copy+0x22>
 800d870:	250b      	movs	r5, #11
 800d872:	4628      	mov	r0, r5
 800d874:	bd70      	pop	{r4, r5, r6, pc}
 800d876:	4623      	mov	r3, r4
 800d878:	462a      	mov	r2, r5
 800d87a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d87e:	f8d3 c000 	ldr.w	ip, [r3]
 800d882:	6858      	ldr	r0, [r3, #4]
 800d884:	6899      	ldr	r1, [r3, #8]
 800d886:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d88a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d88e:	3310      	adds	r3, #16
 800d890:	42b3      	cmp	r3, r6
 800d892:	f8c2 c000 	str.w	ip, [r2]
 800d896:	6050      	str	r0, [r2, #4]
 800d898:	6091      	str	r1, [r2, #8]
 800d89a:	f102 0210 	add.w	r2, r2, #16
 800d89e:	d1ee      	bne.n	800d87e <rmw_init_options_copy+0x2a>
 800d8a0:	6819      	ldr	r1, [r3, #0]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	480e      	ldr	r0, [pc, #56]	@ (800d8e0 <rmw_init_options_copy+0x8c>)
 800d8a6:	6053      	str	r3, [r2, #4]
 800d8a8:	6011      	str	r1, [r2, #0]
 800d8aa:	f009 f999 	bl	8016be0 <get_memory>
 800d8ae:	b198      	cbz	r0, 800d8d8 <rmw_init_options_copy+0x84>
 800d8b0:	6883      	ldr	r3, [r0, #8]
 800d8b2:	636b      	str	r3, [r5, #52]	@ 0x34
 800d8b4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d8b6:	f102 0c10 	add.w	ip, r2, #16
 800d8ba:	f103 0410 	add.w	r4, r3, #16
 800d8be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d8c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8c4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d8c8:	2500      	movs	r5, #0
 800d8ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	bd70      	pop	{r4, r5, r6, pc}
 800d8d2:	250c      	movs	r5, #12
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}
 800d8d8:	2501      	movs	r5, #1
 800d8da:	e7ca      	b.n	800d872 <rmw_init_options_copy+0x1e>
 800d8dc:	0801bae8 	.word	0x0801bae8
 800d8e0:	2000b58c 	.word	0x2000b58c

0800d8e4 <rmw_init_options_fini>:
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d03d      	beq.n	800d964 <rmw_init_options_fini+0x80>
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	b08e      	sub	sp, #56	@ 0x38
 800d8ee:	3020      	adds	r0, #32
 800d8f0:	f7ff fe88 	bl	800d604 <rcutils_allocator_is_valid>
 800d8f4:	b360      	cbz	r0, 800d950 <rmw_init_options_fini+0x6c>
 800d8f6:	68a0      	ldr	r0, [r4, #8]
 800d8f8:	b120      	cbz	r0, 800d904 <rmw_init_options_fini+0x20>
 800d8fa:	4b1c      	ldr	r3, [pc, #112]	@ (800d96c <rmw_init_options_fini+0x88>)
 800d8fc:	6819      	ldr	r1, [r3, #0]
 800d8fe:	f7f2 fc8f 	bl	8000220 <strcmp>
 800d902:	bb68      	cbnz	r0, 800d960 <rmw_init_options_fini+0x7c>
 800d904:	4b1a      	ldr	r3, [pc, #104]	@ (800d970 <rmw_init_options_fini+0x8c>)
 800d906:	6819      	ldr	r1, [r3, #0]
 800d908:	b331      	cbz	r1, 800d958 <rmw_init_options_fini+0x74>
 800d90a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d90c:	e001      	b.n	800d912 <rmw_init_options_fini+0x2e>
 800d90e:	6849      	ldr	r1, [r1, #4]
 800d910:	b311      	cbz	r1, 800d958 <rmw_init_options_fini+0x74>
 800d912:	688b      	ldr	r3, [r1, #8]
 800d914:	429a      	cmp	r2, r3
 800d916:	d1fa      	bne.n	800d90e <rmw_init_options_fini+0x2a>
 800d918:	4815      	ldr	r0, [pc, #84]	@ (800d970 <rmw_init_options_fini+0x8c>)
 800d91a:	f009 f971 	bl	8016c00 <put_memory>
 800d91e:	4668      	mov	r0, sp
 800d920:	f7ff ff02 	bl	800d728 <rmw_get_zero_initialized_init_options>
 800d924:	46ee      	mov	lr, sp
 800d926:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d92a:	46a4      	mov	ip, r4
 800d92c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d930:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d934:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d938:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d93c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d940:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d944:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d948:	2300      	movs	r3, #0
 800d94a:	4618      	mov	r0, r3
 800d94c:	b00e      	add	sp, #56	@ 0x38
 800d94e:	bd10      	pop	{r4, pc}
 800d950:	230b      	movs	r3, #11
 800d952:	4618      	mov	r0, r3
 800d954:	b00e      	add	sp, #56	@ 0x38
 800d956:	bd10      	pop	{r4, pc}
 800d958:	2301      	movs	r3, #1
 800d95a:	4618      	mov	r0, r3
 800d95c:	b00e      	add	sp, #56	@ 0x38
 800d95e:	bd10      	pop	{r4, pc}
 800d960:	230c      	movs	r3, #12
 800d962:	e7f2      	b.n	800d94a <rmw_init_options_fini+0x66>
 800d964:	230b      	movs	r3, #11
 800d966:	4618      	mov	r0, r3
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	0801bae8 	.word	0x0801bae8
 800d970:	2000b58c 	.word	0x2000b58c

0800d974 <rmw_init>:
 800d974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d978:	b083      	sub	sp, #12
 800d97a:	2800      	cmp	r0, #0
 800d97c:	f000 80d3 	beq.w	800db26 <rmw_init+0x1b2>
 800d980:	460e      	mov	r6, r1
 800d982:	2900      	cmp	r1, #0
 800d984:	f000 80cf 	beq.w	800db26 <rmw_init+0x1b2>
 800d988:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d98a:	4605      	mov	r5, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f000 80ca 	beq.w	800db26 <rmw_init+0x1b2>
 800d992:	4b78      	ldr	r3, [pc, #480]	@ (800db74 <rmw_init+0x200>)
 800d994:	6880      	ldr	r0, [r0, #8]
 800d996:	681f      	ldr	r7, [r3, #0]
 800d998:	b128      	cbz	r0, 800d9a6 <rmw_init+0x32>
 800d99a:	4639      	mov	r1, r7
 800d99c:	f7f2 fc40 	bl	8000220 <strcmp>
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	f040 80ca 	bne.w	800db3a <rmw_init+0x1c6>
 800d9a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9aa:	4c73      	ldr	r4, [pc, #460]	@ (800db78 <rmw_init+0x204>)
 800d9ac:	4973      	ldr	r1, [pc, #460]	@ (800db7c <rmw_init+0x208>)
 800d9ae:	4874      	ldr	r0, [pc, #464]	@ (800db80 <rmw_init+0x20c>)
 800d9b0:	60b7      	str	r7, [r6, #8]
 800d9b2:	e9c6 2300 	strd	r2, r3, [r6]
 800d9b6:	68eb      	ldr	r3, [r5, #12]
 800d9b8:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f000 fe76 	bl	800e6ac <rmw_uxrce_init_session_memory>
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	4970      	ldr	r1, [pc, #448]	@ (800db84 <rmw_init+0x210>)
 800d9c4:	2204      	movs	r2, #4
 800d9c6:	f000 feb1 	bl	800e72c <rmw_uxrce_init_static_input_buffer_memory>
 800d9ca:	f04f 0800 	mov.w	r8, #0
 800d9ce:	486c      	ldr	r0, [pc, #432]	@ (800db80 <rmw_init+0x20c>)
 800d9d0:	f884 800d 	strb.w	r8, [r4, #13]
 800d9d4:	f009 f904 	bl	8016be0 <get_memory>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	f000 80a9 	beq.w	800db30 <rmw_init+0x1bc>
 800d9de:	6884      	ldr	r4, [r0, #8]
 800d9e0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d9e2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d9e4:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d9e8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d9ec:	9101      	str	r1, [sp, #4]
 800d9ee:	6a00      	ldr	r0, [r0, #32]
 800d9f0:	9000      	str	r0, [sp, #0]
 800d9f2:	f104 0910 	add.w	r9, r4, #16
 800d9f6:	4661      	mov	r1, ip
 800d9f8:	4648      	mov	r0, r9
 800d9fa:	f002 fa25 	bl	800fe48 <uxr_set_custom_transport_callbacks>
 800d9fe:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800da02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800da06:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800da0a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800da0e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800da12:	495d      	ldr	r1, [pc, #372]	@ (800db88 <rmw_init+0x214>)
 800da14:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800da18:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800da1c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800da20:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800da24:	4859      	ldr	r0, [pc, #356]	@ (800db8c <rmw_init+0x218>)
 800da26:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800da2a:	2201      	movs	r2, #1
 800da2c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800da2e:	f000 fe1d 	bl	800e66c <rmw_uxrce_init_node_memory>
 800da32:	4957      	ldr	r1, [pc, #348]	@ (800db90 <rmw_init+0x21c>)
 800da34:	4857      	ldr	r0, [pc, #348]	@ (800db94 <rmw_init+0x220>)
 800da36:	2205      	movs	r2, #5
 800da38:	f000 fdf8 	bl	800e62c <rmw_uxrce_init_subscription_memory>
 800da3c:	4956      	ldr	r1, [pc, #344]	@ (800db98 <rmw_init+0x224>)
 800da3e:	4857      	ldr	r0, [pc, #348]	@ (800db9c <rmw_init+0x228>)
 800da40:	220a      	movs	r2, #10
 800da42:	f000 fdd3 	bl	800e5ec <rmw_uxrce_init_publisher_memory>
 800da46:	4956      	ldr	r1, [pc, #344]	@ (800dba0 <rmw_init+0x22c>)
 800da48:	4856      	ldr	r0, [pc, #344]	@ (800dba4 <rmw_init+0x230>)
 800da4a:	2201      	movs	r2, #1
 800da4c:	f000 fd8e 	bl	800e56c <rmw_uxrce_init_service_memory>
 800da50:	4955      	ldr	r1, [pc, #340]	@ (800dba8 <rmw_init+0x234>)
 800da52:	4856      	ldr	r0, [pc, #344]	@ (800dbac <rmw_init+0x238>)
 800da54:	2201      	movs	r2, #1
 800da56:	f000 fda9 	bl	800e5ac <rmw_uxrce_init_client_memory>
 800da5a:	4955      	ldr	r1, [pc, #340]	@ (800dbb0 <rmw_init+0x23c>)
 800da5c:	4855      	ldr	r0, [pc, #340]	@ (800dbb4 <rmw_init+0x240>)
 800da5e:	220f      	movs	r2, #15
 800da60:	f000 fe44 	bl	800e6ec <rmw_uxrce_init_topic_memory>
 800da64:	4954      	ldr	r1, [pc, #336]	@ (800dbb8 <rmw_init+0x244>)
 800da66:	4855      	ldr	r0, [pc, #340]	@ (800dbbc <rmw_init+0x248>)
 800da68:	2203      	movs	r2, #3
 800da6a:	f000 fe7f 	bl	800e76c <rmw_uxrce_init_init_options_impl_memory>
 800da6e:	4954      	ldr	r1, [pc, #336]	@ (800dbc0 <rmw_init+0x24c>)
 800da70:	4854      	ldr	r0, [pc, #336]	@ (800dbc4 <rmw_init+0x250>)
 800da72:	2204      	movs	r2, #4
 800da74:	f000 fe9a 	bl	800e7ac <rmw_uxrce_init_wait_set_memory>
 800da78:	4953      	ldr	r1, [pc, #332]	@ (800dbc8 <rmw_init+0x254>)
 800da7a:	4854      	ldr	r0, [pc, #336]	@ (800dbcc <rmw_init+0x258>)
 800da7c:	2204      	movs	r2, #4
 800da7e:	f000 feb5 	bl	800e7ec <rmw_uxrce_init_guard_condition_memory>
 800da82:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800da84:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800da86:	4642      	mov	r2, r8
 800da88:	f000 fd2a 	bl	800e4e0 <rmw_uxrce_transport_init>
 800da8c:	4607      	mov	r7, r0
 800da8e:	2800      	cmp	r0, #0
 800da90:	d158      	bne.n	800db44 <rmw_init+0x1d0>
 800da92:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800da94:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800da98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800da9a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800da9e:	4628      	mov	r0, r5
 800daa0:	f002 fc06 	bl	80102b0 <uxr_init_session>
 800daa4:	494a      	ldr	r1, [pc, #296]	@ (800dbd0 <rmw_init+0x25c>)
 800daa6:	4622      	mov	r2, r4
 800daa8:	4628      	mov	r0, r5
 800daaa:	f002 fc25 	bl	80102f8 <uxr_set_topic_callback>
 800daae:	4949      	ldr	r1, [pc, #292]	@ (800dbd4 <rmw_init+0x260>)
 800dab0:	463a      	mov	r2, r7
 800dab2:	4628      	mov	r0, r5
 800dab4:	f002 fc1c 	bl	80102f0 <uxr_set_status_callback>
 800dab8:	4947      	ldr	r1, [pc, #284]	@ (800dbd8 <rmw_init+0x264>)
 800daba:	463a      	mov	r2, r7
 800dabc:	4628      	mov	r0, r5
 800dabe:	f002 fc1f 	bl	8010300 <uxr_set_request_callback>
 800dac2:	4946      	ldr	r1, [pc, #280]	@ (800dbdc <rmw_init+0x268>)
 800dac4:	463a      	mov	r2, r7
 800dac6:	4628      	mov	r0, r5
 800dac8:	f002 fc1e 	bl	8010308 <uxr_set_reply_callback>
 800dacc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800dad0:	2304      	movs	r3, #4
 800dad2:	0092      	lsls	r2, r2, #2
 800dad4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800dad8:	4628      	mov	r0, r5
 800dada:	f002 fc53 	bl	8010384 <uxr_create_input_reliable_stream>
 800dade:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800dae2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800dae6:	0092      	lsls	r2, r2, #2
 800dae8:	2304      	movs	r3, #4
 800daea:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800daee:	4628      	mov	r0, r5
 800daf0:	f002 fc20 	bl	8010334 <uxr_create_output_reliable_stream>
 800daf4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800daf8:	4628      	mov	r0, r5
 800dafa:	f002 fc3d 	bl	8010378 <uxr_create_input_best_effort_stream>
 800dafe:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800db02:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800db06:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800db0a:	3114      	adds	r1, #20
 800db0c:	4628      	mov	r0, r5
 800db0e:	f002 fbff 	bl	8010310 <uxr_create_output_best_effort_stream>
 800db12:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800db16:	4628      	mov	r0, r5
 800db18:	f003 f9f2 	bl	8010f00 <uxr_create_session>
 800db1c:	b1f8      	cbz	r0, 800db5e <rmw_init+0x1ea>
 800db1e:	4638      	mov	r0, r7
 800db20:	b003      	add	sp, #12
 800db22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db26:	270b      	movs	r7, #11
 800db28:	4638      	mov	r0, r7
 800db2a:	b003      	add	sp, #12
 800db2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db30:	2701      	movs	r7, #1
 800db32:	4638      	mov	r0, r7
 800db34:	b003      	add	sp, #12
 800db36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db3a:	270c      	movs	r7, #12
 800db3c:	4638      	mov	r0, r7
 800db3e:	b003      	add	sp, #12
 800db40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db44:	4648      	mov	r0, r9
 800db46:	f002 f9c1 	bl	800fecc <uxr_close_custom_transport>
 800db4a:	480d      	ldr	r0, [pc, #52]	@ (800db80 <rmw_init+0x20c>)
 800db4c:	4621      	mov	r1, r4
 800db4e:	f009 f857 	bl	8016c00 <put_memory>
 800db52:	4638      	mov	r0, r7
 800db54:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800db58:	b003      	add	sp, #12
 800db5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db5e:	4648      	mov	r0, r9
 800db60:	f002 f9b4 	bl	800fecc <uxr_close_custom_transport>
 800db64:	4806      	ldr	r0, [pc, #24]	@ (800db80 <rmw_init+0x20c>)
 800db66:	4621      	mov	r1, r4
 800db68:	f009 f84a 	bl	8016c00 <put_memory>
 800db6c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800db6e:	2701      	movs	r7, #1
 800db70:	e7d5      	b.n	800db1e <rmw_init+0x1aa>
 800db72:	bf00      	nop
 800db74:	0801bae8 	.word	0x0801bae8
 800db78:	2000b5dc 	.word	0x2000b5dc
 800db7c:	20007888 	.word	0x20007888
 800db80:	2000b5cc 	.word	0x2000b5cc
 800db84:	20008e30 	.word	0x20008e30
 800db88:	20006eac 	.word	0x20006eac
 800db8c:	2000b59c 	.word	0x2000b59c
 800db90:	2000af30 	.word	0x2000af30
 800db94:	2000b5ec 	.word	0x2000b5ec
 800db98:	20006f50 	.word	0x20006f50
 800db9c:	2000b5ac 	.word	0x2000b5ac
 800dba0:	200077c0 	.word	0x200077c0
 800dba4:	2000b5bc 	.word	0x2000b5bc
 800dba8:	20006ce0 	.word	0x20006ce0
 800dbac:	20006ccc 	.word	0x20006ccc
 800dbb0:	2000b368 	.word	0x2000b368
 800dbb4:	2000b5fc 	.word	0x2000b5fc
 800dbb8:	20006e28 	.word	0x20006e28
 800dbbc:	2000b58c 	.word	0x2000b58c
 800dbc0:	2000b50c 	.word	0x2000b50c
 800dbc4:	2000b60c 	.word	0x2000b60c
 800dbc8:	20006da8 	.word	0x20006da8
 800dbcc:	2000b57c 	.word	0x2000b57c
 800dbd0:	08016a19 	.word	0x08016a19
 800dbd4:	08016a11 	.word	0x08016a11
 800dbd8:	08016ab1 	.word	0x08016ab1
 800dbdc:	08016b4d 	.word	0x08016b4d

0800dbe0 <rmw_context_fini>:
 800dbe0:	4b17      	ldr	r3, [pc, #92]	@ (800dc40 <rmw_context_fini+0x60>)
 800dbe2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800dbe4:	b570      	push	{r4, r5, r6, lr}
 800dbe6:	681c      	ldr	r4, [r3, #0]
 800dbe8:	4605      	mov	r5, r0
 800dbea:	b334      	cbz	r4, 800dc3a <rmw_context_fini+0x5a>
 800dbec:	2600      	movs	r6, #0
 800dbee:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800dbf2:	6902      	ldr	r2, [r0, #16]
 800dbf4:	428a      	cmp	r2, r1
 800dbf6:	d018      	beq.n	800dc2a <rmw_context_fini+0x4a>
 800dbf8:	2c00      	cmp	r4, #0
 800dbfa:	d1f8      	bne.n	800dbee <rmw_context_fini+0xe>
 800dbfc:	b189      	cbz	r1, 800dc22 <rmw_context_fini+0x42>
 800dbfe:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800dc02:	789b      	ldrb	r3, [r3, #2]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800dc0a:	bf14      	ite	ne
 800dc0c:	210a      	movne	r1, #10
 800dc0e:	2100      	moveq	r1, #0
 800dc10:	f003 f94e 	bl	8010eb0 <uxr_delete_session_retries>
 800dc14:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800dc16:	f000 fe09 	bl	800e82c <rmw_uxrce_fini_session_memory>
 800dc1a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800dc1c:	3010      	adds	r0, #16
 800dc1e:	f002 f955 	bl	800fecc <uxr_close_custom_transport>
 800dc22:	2300      	movs	r3, #0
 800dc24:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800dc26:	4630      	mov	r0, r6
 800dc28:	bd70      	pop	{r4, r5, r6, pc}
 800dc2a:	3018      	adds	r0, #24
 800dc2c:	f000 f89c 	bl	800dd68 <rmw_destroy_node>
 800dc30:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800dc32:	4606      	mov	r6, r0
 800dc34:	2c00      	cmp	r4, #0
 800dc36:	d1da      	bne.n	800dbee <rmw_context_fini+0xe>
 800dc38:	e7e0      	b.n	800dbfc <rmw_context_fini+0x1c>
 800dc3a:	4626      	mov	r6, r4
 800dc3c:	e7de      	b.n	800dbfc <rmw_context_fini+0x1c>
 800dc3e:	bf00      	nop
 800dc40:	2000b59c 	.word	0x2000b59c

0800dc44 <create_node>:
 800dc44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc48:	b083      	sub	sp, #12
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d05f      	beq.n	800dd0e <create_node+0xca>
 800dc4e:	4606      	mov	r6, r0
 800dc50:	4835      	ldr	r0, [pc, #212]	@ (800dd28 <create_node+0xe4>)
 800dc52:	460f      	mov	r7, r1
 800dc54:	4690      	mov	r8, r2
 800dc56:	461d      	mov	r5, r3
 800dc58:	f008 ffc2 	bl	8016be0 <get_memory>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d056      	beq.n	800dd0e <create_node+0xca>
 800dc60:	6884      	ldr	r4, [r0, #8]
 800dc62:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800dc64:	6123      	str	r3, [r4, #16]
 800dc66:	f009 f823 	bl	8016cb0 <rmw_get_implementation_identifier>
 800dc6a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800dc6e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800dc72:	f8c4 9020 	str.w	r9, [r4, #32]
 800dc76:	4630      	mov	r0, r6
 800dc78:	f7f2 fadc 	bl	8000234 <strlen>
 800dc7c:	1c42      	adds	r2, r0, #1
 800dc7e:	2a3c      	cmp	r2, #60	@ 0x3c
 800dc80:	f104 0518 	add.w	r5, r4, #24
 800dc84:	d840      	bhi.n	800dd08 <create_node+0xc4>
 800dc86:	4648      	mov	r0, r9
 800dc88:	4631      	mov	r1, r6
 800dc8a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800dc8e:	f00b fbba 	bl	8019406 <memcpy>
 800dc92:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800dc96:	4638      	mov	r0, r7
 800dc98:	f7f2 facc 	bl	8000234 <strlen>
 800dc9c:	1c42      	adds	r2, r0, #1
 800dc9e:	2a3c      	cmp	r2, #60	@ 0x3c
 800dca0:	d832      	bhi.n	800dd08 <create_node+0xc4>
 800dca2:	4639      	mov	r1, r7
 800dca4:	4648      	mov	r0, r9
 800dca6:	f00b fbae 	bl	8019406 <memcpy>
 800dcaa:	6923      	ldr	r3, [r4, #16]
 800dcac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800dcb6:	1842      	adds	r2, r0, r1
 800dcb8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800dcbc:	f002 f90a 	bl	800fed4 <uxr_object_id>
 800dcc0:	6160      	str	r0, [r4, #20]
 800dcc2:	783b      	ldrb	r3, [r7, #0]
 800dcc4:	2b2f      	cmp	r3, #47	@ 0x2f
 800dcc6:	d127      	bne.n	800dd18 <create_node+0xd4>
 800dcc8:	787b      	ldrb	r3, [r7, #1]
 800dcca:	bb2b      	cbnz	r3, 800dd18 <create_node+0xd4>
 800dccc:	4a17      	ldr	r2, [pc, #92]	@ (800dd2c <create_node+0xe8>)
 800dcce:	4818      	ldr	r0, [pc, #96]	@ (800dd30 <create_node+0xec>)
 800dcd0:	4633      	mov	r3, r6
 800dcd2:	213c      	movs	r1, #60	@ 0x3c
 800dcd4:	f00b f960 	bl	8018f98 <sniprintf>
 800dcd8:	6920      	ldr	r0, [r4, #16]
 800dcda:	4915      	ldr	r1, [pc, #84]	@ (800dd30 <create_node+0xec>)
 800dcdc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800dce0:	9100      	str	r1, [sp, #0]
 800dce2:	2106      	movs	r1, #6
 800dce4:	9101      	str	r1, [sp, #4]
 800dce6:	6811      	ldr	r1, [r2, #0]
 800dce8:	6962      	ldr	r2, [r4, #20]
 800dcea:	fa1f f388 	uxth.w	r3, r8
 800dcee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dcf2:	f001 fee5 	bl	800fac0 <uxr_buffer_create_participant_bin>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	6920      	ldr	r0, [r4, #16]
 800dcfa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dcfe:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dd02:	f000 ff0b 	bl	800eb1c <run_xrce_session>
 800dd06:	b918      	cbnz	r0, 800dd10 <create_node+0xcc>
 800dd08:	4628      	mov	r0, r5
 800dd0a:	f000 fd95 	bl	800e838 <rmw_uxrce_fini_node_memory>
 800dd0e:	2500      	movs	r5, #0
 800dd10:	4628      	mov	r0, r5
 800dd12:	b003      	add	sp, #12
 800dd14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd18:	4a06      	ldr	r2, [pc, #24]	@ (800dd34 <create_node+0xf0>)
 800dd1a:	9600      	str	r6, [sp, #0]
 800dd1c:	463b      	mov	r3, r7
 800dd1e:	213c      	movs	r1, #60	@ 0x3c
 800dd20:	4803      	ldr	r0, [pc, #12]	@ (800dd30 <create_node+0xec>)
 800dd22:	f00b f939 	bl	8018f98 <sniprintf>
 800dd26:	e7d7      	b.n	800dcd8 <create_node+0x94>
 800dd28:	2000b59c 	.word	0x2000b59c
 800dd2c:	0801b050 	.word	0x0801b050
 800dd30:	20006b50 	.word	0x20006b50
 800dd34:	0801b038 	.word	0x0801b038

0800dd38 <rmw_create_node>:
 800dd38:	b199      	cbz	r1, 800dd62 <rmw_create_node+0x2a>
 800dd3a:	780b      	ldrb	r3, [r1, #0]
 800dd3c:	468c      	mov	ip, r1
 800dd3e:	b183      	cbz	r3, 800dd62 <rmw_create_node+0x2a>
 800dd40:	b410      	push	{r4}
 800dd42:	4614      	mov	r4, r2
 800dd44:	b14a      	cbz	r2, 800dd5a <rmw_create_node+0x22>
 800dd46:	7813      	ldrb	r3, [r2, #0]
 800dd48:	b13b      	cbz	r3, 800dd5a <rmw_create_node+0x22>
 800dd4a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	4621      	mov	r1, r4
 800dd50:	4660      	mov	r0, ip
 800dd52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd56:	f7ff bf75 	b.w	800dc44 <create_node>
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	2000      	movs	r0, #0
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop

0800dd68 <rmw_destroy_node>:
 800dd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6a:	b328      	cbz	r0, 800ddb8 <rmw_destroy_node+0x50>
 800dd6c:	4607      	mov	r7, r0
 800dd6e:	6800      	ldr	r0, [r0, #0]
 800dd70:	b120      	cbz	r0, 800dd7c <rmw_destroy_node+0x14>
 800dd72:	4b36      	ldr	r3, [pc, #216]	@ (800de4c <rmw_destroy_node+0xe4>)
 800dd74:	6819      	ldr	r1, [r3, #0]
 800dd76:	f7f2 fa53 	bl	8000220 <strcmp>
 800dd7a:	b9e8      	cbnz	r0, 800ddb8 <rmw_destroy_node+0x50>
 800dd7c:	687d      	ldr	r5, [r7, #4]
 800dd7e:	b1dd      	cbz	r5, 800ddb8 <rmw_destroy_node+0x50>
 800dd80:	4b33      	ldr	r3, [pc, #204]	@ (800de50 <rmw_destroy_node+0xe8>)
 800dd82:	681c      	ldr	r4, [r3, #0]
 800dd84:	2c00      	cmp	r4, #0
 800dd86:	d05f      	beq.n	800de48 <rmw_destroy_node+0xe0>
 800dd88:	2600      	movs	r6, #0
 800dd8a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dd8e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800dd92:	429d      	cmp	r5, r3
 800dd94:	d013      	beq.n	800ddbe <rmw_destroy_node+0x56>
 800dd96:	2c00      	cmp	r4, #0
 800dd98:	d1f7      	bne.n	800dd8a <rmw_destroy_node+0x22>
 800dd9a:	4b2e      	ldr	r3, [pc, #184]	@ (800de54 <rmw_destroy_node+0xec>)
 800dd9c:	681c      	ldr	r4, [r3, #0]
 800dd9e:	b1c4      	cbz	r4, 800ddd2 <rmw_destroy_node+0x6a>
 800dda0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dda4:	6a0b      	ldr	r3, [r1, #32]
 800dda6:	429d      	cmp	r5, r3
 800dda8:	d1f9      	bne.n	800dd9e <rmw_destroy_node+0x36>
 800ddaa:	317c      	adds	r1, #124	@ 0x7c
 800ddac:	4638      	mov	r0, r7
 800ddae:	f000 fb37 	bl	800e420 <rmw_destroy_subscription>
 800ddb2:	2801      	cmp	r0, #1
 800ddb4:	4606      	mov	r6, r0
 800ddb6:	d1f2      	bne.n	800dd9e <rmw_destroy_node+0x36>
 800ddb8:	2601      	movs	r6, #1
 800ddba:	4630      	mov	r0, r6
 800ddbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddbe:	3184      	adds	r1, #132	@ 0x84
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	f000 f9a5 	bl	800e110 <rmw_destroy_publisher>
 800ddc6:	2801      	cmp	r0, #1
 800ddc8:	4606      	mov	r6, r0
 800ddca:	d0f5      	beq.n	800ddb8 <rmw_destroy_node+0x50>
 800ddcc:	2c00      	cmp	r4, #0
 800ddce:	d1dc      	bne.n	800dd8a <rmw_destroy_node+0x22>
 800ddd0:	e7e3      	b.n	800dd9a <rmw_destroy_node+0x32>
 800ddd2:	4b21      	ldr	r3, [pc, #132]	@ (800de58 <rmw_destroy_node+0xf0>)
 800ddd4:	681c      	ldr	r4, [r3, #0]
 800ddd6:	b16c      	cbz	r4, 800ddf4 <rmw_destroy_node+0x8c>
 800ddd8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dddc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800ddde:	429d      	cmp	r5, r3
 800dde0:	d1f9      	bne.n	800ddd6 <rmw_destroy_node+0x6e>
 800dde2:	317c      	adds	r1, #124	@ 0x7c
 800dde4:	4638      	mov	r0, r7
 800dde6:	f000 fab7 	bl	800e358 <rmw_destroy_service>
 800ddea:	2801      	cmp	r0, #1
 800ddec:	4606      	mov	r6, r0
 800ddee:	d0e3      	beq.n	800ddb8 <rmw_destroy_node+0x50>
 800ddf0:	2c00      	cmp	r4, #0
 800ddf2:	d1f1      	bne.n	800ddd8 <rmw_destroy_node+0x70>
 800ddf4:	4b19      	ldr	r3, [pc, #100]	@ (800de5c <rmw_destroy_node+0xf4>)
 800ddf6:	681c      	ldr	r4, [r3, #0]
 800ddf8:	b16c      	cbz	r4, 800de16 <rmw_destroy_node+0xae>
 800ddfa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ddfe:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800de00:	429d      	cmp	r5, r3
 800de02:	d1f9      	bne.n	800ddf8 <rmw_destroy_node+0x90>
 800de04:	317c      	adds	r1, #124	@ 0x7c
 800de06:	4638      	mov	r0, r7
 800de08:	f008 ff0e 	bl	8016c28 <rmw_destroy_client>
 800de0c:	2801      	cmp	r0, #1
 800de0e:	4606      	mov	r6, r0
 800de10:	d0d2      	beq.n	800ddb8 <rmw_destroy_node+0x50>
 800de12:	2c00      	cmp	r4, #0
 800de14:	d1f1      	bne.n	800ddfa <rmw_destroy_node+0x92>
 800de16:	6928      	ldr	r0, [r5, #16]
 800de18:	696a      	ldr	r2, [r5, #20]
 800de1a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800de1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de22:	6819      	ldr	r1, [r3, #0]
 800de24:	f001 fe00 	bl	800fa28 <uxr_buffer_delete_entity>
 800de28:	4602      	mov	r2, r0
 800de2a:	6928      	ldr	r0, [r5, #16]
 800de2c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800de30:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800de34:	f000 fe72 	bl	800eb1c <run_xrce_session>
 800de38:	2800      	cmp	r0, #0
 800de3a:	bf08      	it	eq
 800de3c:	2602      	moveq	r6, #2
 800de3e:	4638      	mov	r0, r7
 800de40:	f000 fcfa 	bl	800e838 <rmw_uxrce_fini_node_memory>
 800de44:	4630      	mov	r0, r6
 800de46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de48:	4626      	mov	r6, r4
 800de4a:	e7a6      	b.n	800dd9a <rmw_destroy_node+0x32>
 800de4c:	0801bae8 	.word	0x0801bae8
 800de50:	2000b5ac 	.word	0x2000b5ac
 800de54:	2000b5ec 	.word	0x2000b5ec
 800de58:	2000b5bc 	.word	0x2000b5bc
 800de5c:	20006ccc 	.word	0x20006ccc

0800de60 <rmw_node_get_graph_guard_condition>:
 800de60:	6843      	ldr	r3, [r0, #4]
 800de62:	6918      	ldr	r0, [r3, #16]
 800de64:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800de68:	4770      	bx	lr
 800de6a:	bf00      	nop

0800de6c <flush_session>:
 800de6c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800de6e:	f002 be81 	b.w	8010b74 <uxr_run_session_until_confirm_delivery>
 800de72:	bf00      	nop

0800de74 <rmw_publish>:
 800de74:	2800      	cmp	r0, #0
 800de76:	d053      	beq.n	800df20 <rmw_publish+0xac>
 800de78:	b570      	push	{r4, r5, r6, lr}
 800de7a:	460d      	mov	r5, r1
 800de7c:	b08e      	sub	sp, #56	@ 0x38
 800de7e:	2900      	cmp	r1, #0
 800de80:	d04b      	beq.n	800df1a <rmw_publish+0xa6>
 800de82:	4604      	mov	r4, r0
 800de84:	6800      	ldr	r0, [r0, #0]
 800de86:	f000 ff63 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d045      	beq.n	800df1a <rmw_publish+0xa6>
 800de8e:	6866      	ldr	r6, [r4, #4]
 800de90:	2e00      	cmp	r6, #0
 800de92:	d042      	beq.n	800df1a <rmw_publish+0xa6>
 800de94:	69b4      	ldr	r4, [r6, #24]
 800de96:	4628      	mov	r0, r5
 800de98:	6923      	ldr	r3, [r4, #16]
 800de9a:	4798      	blx	r3
 800de9c:	69f3      	ldr	r3, [r6, #28]
 800de9e:	9005      	str	r0, [sp, #20]
 800dea0:	b113      	cbz	r3, 800dea8 <rmw_publish+0x34>
 800dea2:	a805      	add	r0, sp, #20
 800dea4:	4798      	blx	r3
 800dea6:	9805      	ldr	r0, [sp, #20]
 800dea8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800deac:	691b      	ldr	r3, [r3, #16]
 800deae:	9000      	str	r0, [sp, #0]
 800deb0:	6972      	ldr	r2, [r6, #20]
 800deb2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800deb4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800deb8:	ab06      	add	r3, sp, #24
 800deba:	f004 f92f 	bl	801211c <uxr_prepare_output_stream>
 800debe:	b1d8      	cbz	r0, 800def8 <rmw_publish+0x84>
 800dec0:	68a3      	ldr	r3, [r4, #8]
 800dec2:	a906      	add	r1, sp, #24
 800dec4:	4628      	mov	r0, r5
 800dec6:	4798      	blx	r3
 800dec8:	6a33      	ldr	r3, [r6, #32]
 800deca:	4604      	mov	r4, r0
 800decc:	b10b      	cbz	r3, 800ded2 <rmw_publish+0x5e>
 800dece:	a806      	add	r0, sp, #24
 800ded0:	4798      	blx	r3
 800ded2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dedc:	d022      	beq.n	800df24 <rmw_publish+0xb0>
 800dede:	6918      	ldr	r0, [r3, #16]
 800dee0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800dee2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dee6:	f002 fe45 	bl	8010b74 <uxr_run_session_until_confirm_delivery>
 800deea:	4020      	ands	r0, r4
 800deec:	b2c4      	uxtb	r4, r0
 800deee:	f084 0001 	eor.w	r0, r4, #1
 800def2:	b2c0      	uxtb	r0, r0
 800def4:	b00e      	add	sp, #56	@ 0x38
 800def6:	bd70      	pop	{r4, r5, r6, pc}
 800def8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800defc:	6918      	ldr	r0, [r3, #16]
 800defe:	9b05      	ldr	r3, [sp, #20]
 800df00:	9300      	str	r3, [sp, #0]
 800df02:	4b0b      	ldr	r3, [pc, #44]	@ (800df30 <rmw_publish+0xbc>)
 800df04:	9301      	str	r3, [sp, #4]
 800df06:	9602      	str	r6, [sp, #8]
 800df08:	6972      	ldr	r2, [r6, #20]
 800df0a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800df0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df10:	ab06      	add	r3, sp, #24
 800df12:	f004 f933 	bl	801217c <uxr_prepare_output_stream_fragmented>
 800df16:	2800      	cmp	r0, #0
 800df18:	d1d2      	bne.n	800dec0 <rmw_publish+0x4c>
 800df1a:	2001      	movs	r0, #1
 800df1c:	b00e      	add	sp, #56	@ 0x38
 800df1e:	bd70      	pop	{r4, r5, r6, pc}
 800df20:	2001      	movs	r0, #1
 800df22:	4770      	bx	lr
 800df24:	6918      	ldr	r0, [r3, #16]
 800df26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df2a:	f002 fa63 	bl	80103f4 <uxr_flash_output_streams>
 800df2e:	e7de      	b.n	800deee <rmw_publish+0x7a>
 800df30:	0800de6d 	.word	0x0800de6d

0800df34 <rmw_create_publisher>:
 800df34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df38:	b087      	sub	sp, #28
 800df3a:	2800      	cmp	r0, #0
 800df3c:	f000 80cc 	beq.w	800e0d8 <rmw_create_publisher+0x1a4>
 800df40:	460e      	mov	r6, r1
 800df42:	2900      	cmp	r1, #0
 800df44:	f000 80c8 	beq.w	800e0d8 <rmw_create_publisher+0x1a4>
 800df48:	4604      	mov	r4, r0
 800df4a:	6800      	ldr	r0, [r0, #0]
 800df4c:	4615      	mov	r5, r2
 800df4e:	4698      	mov	r8, r3
 800df50:	f000 fefe 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 800df54:	2800      	cmp	r0, #0
 800df56:	f000 80bf 	beq.w	800e0d8 <rmw_create_publisher+0x1a4>
 800df5a:	2d00      	cmp	r5, #0
 800df5c:	f000 80bc 	beq.w	800e0d8 <rmw_create_publisher+0x1a4>
 800df60:	782b      	ldrb	r3, [r5, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	f000 80b8 	beq.w	800e0d8 <rmw_create_publisher+0x1a4>
 800df68:	f1b8 0f00 	cmp.w	r8, #0
 800df6c:	f000 80b4 	beq.w	800e0d8 <rmw_create_publisher+0x1a4>
 800df70:	485c      	ldr	r0, [pc, #368]	@ (800e0e4 <rmw_create_publisher+0x1b0>)
 800df72:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800df76:	f008 fe33 	bl	8016be0 <get_memory>
 800df7a:	2800      	cmp	r0, #0
 800df7c:	f000 80ac 	beq.w	800e0d8 <rmw_create_publisher+0x1a4>
 800df80:	6884      	ldr	r4, [r0, #8]
 800df82:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800df86:	f008 fe93 	bl	8016cb0 <rmw_get_implementation_identifier>
 800df8a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800df8e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800df92:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800df96:	4628      	mov	r0, r5
 800df98:	f7f2 f94c 	bl	8000234 <strlen>
 800df9c:	3001      	adds	r0, #1
 800df9e:	283c      	cmp	r0, #60	@ 0x3c
 800dfa0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800dfa4:	f200 8091 	bhi.w	800e0ca <rmw_create_publisher+0x196>
 800dfa8:	4a4f      	ldr	r2, [pc, #316]	@ (800e0e8 <rmw_create_publisher+0x1b4>)
 800dfaa:	462b      	mov	r3, r5
 800dfac:	213c      	movs	r1, #60	@ 0x3c
 800dfae:	4650      	mov	r0, sl
 800dfb0:	f00a fff2 	bl	8018f98 <sniprintf>
 800dfb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dfb8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800dfba:	4641      	mov	r1, r8
 800dfbc:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800dfc0:	2250      	movs	r2, #80	@ 0x50
 800dfc2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800dfc6:	f00b fa1e 	bl	8019406 <memcpy>
 800dfca:	f898 3008 	ldrb.w	r3, [r8, #8]
 800dfce:	4947      	ldr	r1, [pc, #284]	@ (800e0ec <rmw_create_publisher+0x1b8>)
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfd6:	bf0c      	ite	eq
 800dfd8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800dfdc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800dfe0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f000 febf 	bl	800ed6c <get_message_typesupport_handle>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d06b      	beq.n	800e0ca <rmw_create_publisher+0x196>
 800dff2:	6842      	ldr	r2, [r0, #4]
 800dff4:	61a2      	str	r2, [r4, #24]
 800dff6:	2a00      	cmp	r2, #0
 800dff8:	d067      	beq.n	800e0ca <rmw_create_publisher+0x196>
 800dffa:	4629      	mov	r1, r5
 800dffc:	4643      	mov	r3, r8
 800dffe:	4648      	mov	r0, r9
 800e000:	f008 fe5c 	bl	8016cbc <create_topic>
 800e004:	6260      	str	r0, [r4, #36]	@ 0x24
 800e006:	2800      	cmp	r0, #0
 800e008:	d063      	beq.n	800e0d2 <rmw_create_publisher+0x19e>
 800e00a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e00e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e012:	2103      	movs	r1, #3
 800e014:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e018:	1c42      	adds	r2, r0, #1
 800e01a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e01e:	f001 ff59 	bl	800fed4 <uxr_object_id>
 800e022:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e026:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e02a:	6120      	str	r0, [r4, #16]
 800e02c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e030:	6910      	ldr	r0, [r2, #16]
 800e032:	2506      	movs	r5, #6
 800e034:	9500      	str	r5, [sp, #0]
 800e036:	6819      	ldr	r1, [r3, #0]
 800e038:	6922      	ldr	r2, [r4, #16]
 800e03a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e03e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e042:	f001 fda5 	bl	800fb90 <uxr_buffer_create_publisher_bin>
 800e046:	4602      	mov	r2, r0
 800e048:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e04c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e050:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e054:	f000 fd62 	bl	800eb1c <run_xrce_session>
 800e058:	b3b8      	cbz	r0, 800e0ca <rmw_create_publisher+0x196>
 800e05a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e05e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e062:	2105      	movs	r1, #5
 800e064:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e068:	1c42      	adds	r2, r0, #1
 800e06a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e06e:	f001 ff31 	bl	800fed4 <uxr_object_id>
 800e072:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e076:	6160      	str	r0, [r4, #20]
 800e078:	691e      	ldr	r6, [r3, #16]
 800e07a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e07e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e082:	f10d 0a10 	add.w	sl, sp, #16
 800e086:	4641      	mov	r1, r8
 800e088:	4650      	mov	r0, sl
 800e08a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e08e:	f000 fd61 	bl	800eb54 <convert_qos_profile>
 800e092:	9503      	str	r5, [sp, #12]
 800e094:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e098:	9001      	str	r0, [sp, #4]
 800e09a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e09e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e0a2:	9300      	str	r3, [sp, #0]
 800e0a4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e0a8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e0ac:	f8d8 1000 	ldr.w	r1, [r8]
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f001 fd9d 	bl	800fbf0 <uxr_buffer_create_datawriter_bin>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e0bc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e0c0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e0c4:	f000 fd2a 	bl	800eb1c <run_xrce_session>
 800e0c8:	b938      	cbnz	r0, 800e0da <rmw_create_publisher+0x1a6>
 800e0ca:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e0cc:	b108      	cbz	r0, 800e0d2 <rmw_create_publisher+0x19e>
 800e0ce:	f000 fc23 	bl	800e918 <rmw_uxrce_fini_topic_memory>
 800e0d2:	4638      	mov	r0, r7
 800e0d4:	f000 fbc8 	bl	800e868 <rmw_uxrce_fini_publisher_memory>
 800e0d8:	2700      	movs	r7, #0
 800e0da:	4638      	mov	r0, r7
 800e0dc:	b007      	add	sp, #28
 800e0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e2:	bf00      	nop
 800e0e4:	2000b5ac 	.word	0x2000b5ac
 800e0e8:	0801b050 	.word	0x0801b050
 800e0ec:	0801a9b8 	.word	0x0801a9b8

0800e0f0 <rmw_publisher_get_actual_qos>:
 800e0f0:	b150      	cbz	r0, 800e108 <rmw_publisher_get_actual_qos+0x18>
 800e0f2:	b508      	push	{r3, lr}
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	b149      	cbz	r1, 800e10c <rmw_publisher_get_actual_qos+0x1c>
 800e0f8:	6841      	ldr	r1, [r0, #4]
 800e0fa:	2250      	movs	r2, #80	@ 0x50
 800e0fc:	3128      	adds	r1, #40	@ 0x28
 800e0fe:	4618      	mov	r0, r3
 800e100:	f00b f981 	bl	8019406 <memcpy>
 800e104:	2000      	movs	r0, #0
 800e106:	bd08      	pop	{r3, pc}
 800e108:	200b      	movs	r0, #11
 800e10a:	4770      	bx	lr
 800e10c:	200b      	movs	r0, #11
 800e10e:	bd08      	pop	{r3, pc}

0800e110 <rmw_destroy_publisher>:
 800e110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e112:	b128      	cbz	r0, 800e120 <rmw_destroy_publisher+0x10>
 800e114:	4604      	mov	r4, r0
 800e116:	6800      	ldr	r0, [r0, #0]
 800e118:	460d      	mov	r5, r1
 800e11a:	f000 fe19 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 800e11e:	b910      	cbnz	r0, 800e126 <rmw_destroy_publisher+0x16>
 800e120:	2401      	movs	r4, #1
 800e122:	4620      	mov	r0, r4
 800e124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e126:	6863      	ldr	r3, [r4, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d0f9      	beq.n	800e120 <rmw_destroy_publisher+0x10>
 800e12c:	2d00      	cmp	r5, #0
 800e12e:	d0f7      	beq.n	800e120 <rmw_destroy_publisher+0x10>
 800e130:	6828      	ldr	r0, [r5, #0]
 800e132:	f000 fe0d 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 800e136:	2800      	cmp	r0, #0
 800e138:	d0f2      	beq.n	800e120 <rmw_destroy_publisher+0x10>
 800e13a:	686c      	ldr	r4, [r5, #4]
 800e13c:	2c00      	cmp	r4, #0
 800e13e:	d0ef      	beq.n	800e120 <rmw_destroy_publisher+0x10>
 800e140:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e142:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e146:	f008 fe09 	bl	8016d5c <destroy_topic>
 800e14a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e14e:	6962      	ldr	r2, [r4, #20]
 800e150:	6918      	ldr	r0, [r3, #16]
 800e152:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e156:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e15a:	6819      	ldr	r1, [r3, #0]
 800e15c:	f001 fc64 	bl	800fa28 <uxr_buffer_delete_entity>
 800e160:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e164:	6922      	ldr	r2, [r4, #16]
 800e166:	691b      	ldr	r3, [r3, #16]
 800e168:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e16c:	4604      	mov	r4, r0
 800e16e:	6809      	ldr	r1, [r1, #0]
 800e170:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e174:	f001 fc58 	bl	800fa28 <uxr_buffer_delete_entity>
 800e178:	693e      	ldr	r6, [r7, #16]
 800e17a:	4622      	mov	r2, r4
 800e17c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e180:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e184:	4604      	mov	r4, r0
 800e186:	4630      	mov	r0, r6
 800e188:	f000 fcc8 	bl	800eb1c <run_xrce_session>
 800e18c:	693e      	ldr	r6, [r7, #16]
 800e18e:	4622      	mov	r2, r4
 800e190:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e194:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e198:	4604      	mov	r4, r0
 800e19a:	4630      	mov	r0, r6
 800e19c:	f000 fcbe 	bl	800eb1c <run_xrce_session>
 800e1a0:	b12c      	cbz	r4, 800e1ae <rmw_destroy_publisher+0x9e>
 800e1a2:	b120      	cbz	r0, 800e1ae <rmw_destroy_publisher+0x9e>
 800e1a4:	2400      	movs	r4, #0
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f000 fb5e 	bl	800e868 <rmw_uxrce_fini_publisher_memory>
 800e1ac:	e7b9      	b.n	800e122 <rmw_destroy_publisher+0x12>
 800e1ae:	2402      	movs	r4, #2
 800e1b0:	e7f9      	b.n	800e1a6 <rmw_destroy_publisher+0x96>
 800e1b2:	bf00      	nop

0800e1b4 <rmw_create_service>:
 800e1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b8:	b091      	sub	sp, #68	@ 0x44
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	f000 80ba 	beq.w	800e334 <rmw_create_service+0x180>
 800e1c0:	4689      	mov	r9, r1
 800e1c2:	2900      	cmp	r1, #0
 800e1c4:	f000 80b6 	beq.w	800e334 <rmw_create_service+0x180>
 800e1c8:	4606      	mov	r6, r0
 800e1ca:	6800      	ldr	r0, [r0, #0]
 800e1cc:	4614      	mov	r4, r2
 800e1ce:	461d      	mov	r5, r3
 800e1d0:	f000 fdbe 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	f000 80ad 	beq.w	800e334 <rmw_create_service+0x180>
 800e1da:	2c00      	cmp	r4, #0
 800e1dc:	f000 80aa 	beq.w	800e334 <rmw_create_service+0x180>
 800e1e0:	7823      	ldrb	r3, [r4, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	f000 80a6 	beq.w	800e334 <rmw_create_service+0x180>
 800e1e8:	2d00      	cmp	r5, #0
 800e1ea:	f000 80a3 	beq.w	800e334 <rmw_create_service+0x180>
 800e1ee:	4854      	ldr	r0, [pc, #336]	@ (800e340 <rmw_create_service+0x18c>)
 800e1f0:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800e1f4:	f008 fcf4 	bl	8016be0 <get_memory>
 800e1f8:	4606      	mov	r6, r0
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	f000 809b 	beq.w	800e336 <rmw_create_service+0x182>
 800e200:	6887      	ldr	r7, [r0, #8]
 800e202:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800e206:	f008 fd53 	bl	8016cb0 <rmw_get_implementation_identifier>
 800e20a:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800e20e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800e210:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800e214:	4620      	mov	r0, r4
 800e216:	f7f2 f80d 	bl	8000234 <strlen>
 800e21a:	1c42      	adds	r2, r0, #1
 800e21c:	2a3c      	cmp	r2, #60	@ 0x3c
 800e21e:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800e222:	f200 8084 	bhi.w	800e32e <rmw_create_service+0x17a>
 800e226:	4621      	mov	r1, r4
 800e228:	4650      	mov	r0, sl
 800e22a:	f00b f8ec 	bl	8019406 <memcpy>
 800e22e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e232:	4629      	mov	r1, r5
 800e234:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800e238:	677b      	str	r3, [r7, #116]	@ 0x74
 800e23a:	2250      	movs	r2, #80	@ 0x50
 800e23c:	f107 0020 	add.w	r0, r7, #32
 800e240:	f00b f8e1 	bl	8019406 <memcpy>
 800e244:	493f      	ldr	r1, [pc, #252]	@ (800e344 <rmw_create_service+0x190>)
 800e246:	4648      	mov	r0, r9
 800e248:	f000 fd9c 	bl	800ed84 <get_service_typesupport_handle>
 800e24c:	2800      	cmp	r0, #0
 800e24e:	d06e      	beq.n	800e32e <rmw_create_service+0x17a>
 800e250:	6843      	ldr	r3, [r0, #4]
 800e252:	617b      	str	r3, [r7, #20]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d06a      	beq.n	800e32e <rmw_create_service+0x17a>
 800e258:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e25c:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800e34c <rmw_create_service+0x198>
 800e260:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800e350 <rmw_create_service+0x19c>
 800e264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e268:	2108      	movs	r1, #8
 800e26a:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 800e26e:	1c42      	adds	r2, r0, #1
 800e270:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 800e274:	f001 fe2e 	bl	800fed4 <uxr_object_id>
 800e278:	2364      	movs	r3, #100	@ 0x64
 800e27a:	6138      	str	r0, [r7, #16]
 800e27c:	4652      	mov	r2, sl
 800e27e:	6978      	ldr	r0, [r7, #20]
 800e280:	4649      	mov	r1, r9
 800e282:	f000 fcb3 	bl	800ebec <generate_service_types>
 800e286:	2800      	cmp	r0, #0
 800e288:	d051      	beq.n	800e32e <rmw_create_service+0x17a>
 800e28a:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800e354 <rmw_create_service+0x1a0>
 800e28e:	4a2e      	ldr	r2, [pc, #184]	@ (800e348 <rmw_create_service+0x194>)
 800e290:	233c      	movs	r3, #60	@ 0x3c
 800e292:	4659      	mov	r1, fp
 800e294:	4620      	mov	r0, r4
 800e296:	f000 fc77 	bl	800eb88 <generate_service_topics>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	d047      	beq.n	800e32e <rmw_create_service+0x17a>
 800e29e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e2a2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800e2a6:	a80c      	add	r0, sp, #48	@ 0x30
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e2ae:	f000 fc51 	bl	800eb54 <convert_qos_profile>
 800e2b2:	4a25      	ldr	r2, [pc, #148]	@ (800e348 <rmw_create_service+0x194>)
 800e2b4:	9400      	str	r4, [sp, #0]
 800e2b6:	e9cd b203 	strd	fp, r2, [sp, #12]
 800e2ba:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800e2be:	a80c      	add	r0, sp, #48	@ 0x30
 800e2c0:	c803      	ldmia	r0, {r0, r1}
 800e2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2c4:	9005      	str	r0, [sp, #20]
 800e2c6:	9a08      	ldr	r2, [sp, #32]
 800e2c8:	f8ad 1018 	strh.w	r1, [sp, #24]
 800e2cc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e2d0:	2306      	movs	r3, #6
 800e2d2:	9307      	str	r3, [sp, #28]
 800e2d4:	6811      	ldr	r1, [r2, #0]
 800e2d6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e2da:	693a      	ldr	r2, [r7, #16]
 800e2dc:	f001 fcfe 	bl	800fcdc <uxr_buffer_create_replier_bin>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e2e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e2ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e2ee:	f000 fc15 	bl	800eb1c <run_xrce_session>
 800e2f2:	b1e0      	cbz	r0, 800e32e <rmw_create_service+0x17a>
 800e2f4:	7a2b      	ldrb	r3, [r5, #8]
 800e2f6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e302:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800e306:	bf0c      	ite	eq
 800e308:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800e30c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800e310:	673a      	str	r2, [r7, #112]	@ 0x70
 800e312:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e314:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e318:	ab0e      	add	r3, sp, #56	@ 0x38
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	6811      	ldr	r1, [r2, #0]
 800e31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e320:	693a      	ldr	r2, [r7, #16]
 800e322:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e326:	f001 fe05 	bl	800ff34 <uxr_buffer_request_data>
 800e32a:	8338      	strh	r0, [r7, #24]
 800e32c:	e003      	b.n	800e336 <rmw_create_service+0x182>
 800e32e:	4630      	mov	r0, r6
 800e330:	f000 fac6 	bl	800e8c0 <rmw_uxrce_fini_service_memory>
 800e334:	2600      	movs	r6, #0
 800e336:	4630      	mov	r0, r6
 800e338:	b011      	add	sp, #68	@ 0x44
 800e33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e33e:	bf00      	nop
 800e340:	2000b5bc 	.word	0x2000b5bc
 800e344:	0801a9b8 	.word	0x0801a9b8
 800e348:	20006c2c 	.word	0x20006c2c
 800e34c:	20006c68 	.word	0x20006c68
 800e350:	20006bc8 	.word	0x20006bc8
 800e354:	20006b8c 	.word	0x20006b8c

0800e358 <rmw_destroy_service>:
 800e358:	b570      	push	{r4, r5, r6, lr}
 800e35a:	b128      	cbz	r0, 800e368 <rmw_destroy_service+0x10>
 800e35c:	4604      	mov	r4, r0
 800e35e:	6800      	ldr	r0, [r0, #0]
 800e360:	460d      	mov	r5, r1
 800e362:	f000 fcf5 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 800e366:	b910      	cbnz	r0, 800e36e <rmw_destroy_service+0x16>
 800e368:	2401      	movs	r4, #1
 800e36a:	4620      	mov	r0, r4
 800e36c:	bd70      	pop	{r4, r5, r6, pc}
 800e36e:	6863      	ldr	r3, [r4, #4]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d0f9      	beq.n	800e368 <rmw_destroy_service+0x10>
 800e374:	2d00      	cmp	r5, #0
 800e376:	d0f7      	beq.n	800e368 <rmw_destroy_service+0x10>
 800e378:	6828      	ldr	r0, [r5, #0]
 800e37a:	f000 fce9 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 800e37e:	2800      	cmp	r0, #0
 800e380:	d0f2      	beq.n	800e368 <rmw_destroy_service+0x10>
 800e382:	686e      	ldr	r6, [r5, #4]
 800e384:	2e00      	cmp	r6, #0
 800e386:	d0ef      	beq.n	800e368 <rmw_destroy_service+0x10>
 800e388:	6864      	ldr	r4, [r4, #4]
 800e38a:	6932      	ldr	r2, [r6, #16]
 800e38c:	6920      	ldr	r0, [r4, #16]
 800e38e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e392:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e396:	6819      	ldr	r1, [r3, #0]
 800e398:	f001 fe06 	bl	800ffa8 <uxr_buffer_cancel_data>
 800e39c:	4602      	mov	r2, r0
 800e39e:	6920      	ldr	r0, [r4, #16]
 800e3a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e3a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e3a8:	f000 fbb8 	bl	800eb1c <run_xrce_session>
 800e3ac:	6920      	ldr	r0, [r4, #16]
 800e3ae:	6932      	ldr	r2, [r6, #16]
 800e3b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e3b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e3b8:	6819      	ldr	r1, [r3, #0]
 800e3ba:	f001 fb35 	bl	800fa28 <uxr_buffer_delete_entity>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	6920      	ldr	r0, [r4, #16]
 800e3c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e3c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e3ca:	f000 fba7 	bl	800eb1c <run_xrce_session>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	bf14      	ite	ne
 800e3d4:	2400      	movne	r4, #0
 800e3d6:	2402      	moveq	r4, #2
 800e3d8:	f000 fa72 	bl	800e8c0 <rmw_uxrce_fini_service_memory>
 800e3dc:	e7c5      	b.n	800e36a <rmw_destroy_service+0x12>
 800e3de:	bf00      	nop

0800e3e0 <rmw_service_response_publisher_get_actual_qos>:
 800e3e0:	b150      	cbz	r0, 800e3f8 <rmw_service_response_publisher_get_actual_qos+0x18>
 800e3e2:	b508      	push	{r3, lr}
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	b149      	cbz	r1, 800e3fc <rmw_service_response_publisher_get_actual_qos+0x1c>
 800e3e8:	6841      	ldr	r1, [r0, #4]
 800e3ea:	2250      	movs	r2, #80	@ 0x50
 800e3ec:	3120      	adds	r1, #32
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f00b f809 	bl	8019406 <memcpy>
 800e3f4:	2000      	movs	r0, #0
 800e3f6:	bd08      	pop	{r3, pc}
 800e3f8:	200b      	movs	r0, #11
 800e3fa:	4770      	bx	lr
 800e3fc:	200b      	movs	r0, #11
 800e3fe:	bd08      	pop	{r3, pc}

0800e400 <rmw_service_request_subscription_get_actual_qos>:
 800e400:	b150      	cbz	r0, 800e418 <rmw_service_request_subscription_get_actual_qos+0x18>
 800e402:	b508      	push	{r3, lr}
 800e404:	460b      	mov	r3, r1
 800e406:	b149      	cbz	r1, 800e41c <rmw_service_request_subscription_get_actual_qos+0x1c>
 800e408:	6841      	ldr	r1, [r0, #4]
 800e40a:	2250      	movs	r2, #80	@ 0x50
 800e40c:	3120      	adds	r1, #32
 800e40e:	4618      	mov	r0, r3
 800e410:	f00a fff9 	bl	8019406 <memcpy>
 800e414:	2000      	movs	r0, #0
 800e416:	bd08      	pop	{r3, pc}
 800e418:	200b      	movs	r0, #11
 800e41a:	4770      	bx	lr
 800e41c:	200b      	movs	r0, #11
 800e41e:	bd08      	pop	{r3, pc}

0800e420 <rmw_destroy_subscription>:
 800e420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e422:	b128      	cbz	r0, 800e430 <rmw_destroy_subscription+0x10>
 800e424:	4604      	mov	r4, r0
 800e426:	6800      	ldr	r0, [r0, #0]
 800e428:	460d      	mov	r5, r1
 800e42a:	f000 fc91 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 800e42e:	b910      	cbnz	r0, 800e436 <rmw_destroy_subscription+0x16>
 800e430:	2401      	movs	r4, #1
 800e432:	4620      	mov	r0, r4
 800e434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e436:	6863      	ldr	r3, [r4, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d0f9      	beq.n	800e430 <rmw_destroy_subscription+0x10>
 800e43c:	2d00      	cmp	r5, #0
 800e43e:	d0f7      	beq.n	800e430 <rmw_destroy_subscription+0x10>
 800e440:	6828      	ldr	r0, [r5, #0]
 800e442:	f000 fc85 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 800e446:	2800      	cmp	r0, #0
 800e448:	d0f2      	beq.n	800e430 <rmw_destroy_subscription+0x10>
 800e44a:	686c      	ldr	r4, [r5, #4]
 800e44c:	2c00      	cmp	r4, #0
 800e44e:	d0ef      	beq.n	800e430 <rmw_destroy_subscription+0x10>
 800e450:	6a26      	ldr	r6, [r4, #32]
 800e452:	6962      	ldr	r2, [r4, #20]
 800e454:	6930      	ldr	r0, [r6, #16]
 800e456:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e45a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e45e:	6819      	ldr	r1, [r3, #0]
 800e460:	f001 fda2 	bl	800ffa8 <uxr_buffer_cancel_data>
 800e464:	4602      	mov	r2, r0
 800e466:	6930      	ldr	r0, [r6, #16]
 800e468:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e46c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e470:	f000 fb54 	bl	800eb1c <run_xrce_session>
 800e474:	69e0      	ldr	r0, [r4, #28]
 800e476:	f008 fc71 	bl	8016d5c <destroy_topic>
 800e47a:	6a23      	ldr	r3, [r4, #32]
 800e47c:	6962      	ldr	r2, [r4, #20]
 800e47e:	6918      	ldr	r0, [r3, #16]
 800e480:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e484:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e488:	6819      	ldr	r1, [r3, #0]
 800e48a:	f001 facd 	bl	800fa28 <uxr_buffer_delete_entity>
 800e48e:	6a23      	ldr	r3, [r4, #32]
 800e490:	6922      	ldr	r2, [r4, #16]
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e498:	4604      	mov	r4, r0
 800e49a:	6809      	ldr	r1, [r1, #0]
 800e49c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e4a0:	f001 fac2 	bl	800fa28 <uxr_buffer_delete_entity>
 800e4a4:	6937      	ldr	r7, [r6, #16]
 800e4a6:	4622      	mov	r2, r4
 800e4a8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e4ac:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	f000 fb32 	bl	800eb1c <run_xrce_session>
 800e4b8:	6936      	ldr	r6, [r6, #16]
 800e4ba:	4622      	mov	r2, r4
 800e4bc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e4c0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	f000 fb28 	bl	800eb1c <run_xrce_session>
 800e4cc:	b12c      	cbz	r4, 800e4da <rmw_destroy_subscription+0xba>
 800e4ce:	b120      	cbz	r0, 800e4da <rmw_destroy_subscription+0xba>
 800e4d0:	2400      	movs	r4, #0
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	f000 f9de 	bl	800e894 <rmw_uxrce_fini_subscription_memory>
 800e4d8:	e7ab      	b.n	800e432 <rmw_destroy_subscription+0x12>
 800e4da:	2402      	movs	r4, #2
 800e4dc:	e7f9      	b.n	800e4d2 <rmw_destroy_subscription+0xb2>
 800e4de:	bf00      	nop

0800e4e0 <rmw_uxrce_transport_init>:
 800e4e0:	b508      	push	{r3, lr}
 800e4e2:	b108      	cbz	r0, 800e4e8 <rmw_uxrce_transport_init+0x8>
 800e4e4:	f100 0210 	add.w	r2, r0, #16
 800e4e8:	b139      	cbz	r1, 800e4fa <rmw_uxrce_transport_init+0x1a>
 800e4ea:	6949      	ldr	r1, [r1, #20]
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	f001 fcb9 	bl	800fe64 <uxr_init_custom_transport>
 800e4f2:	f080 0001 	eor.w	r0, r0, #1
 800e4f6:	b2c0      	uxtb	r0, r0
 800e4f8:	bd08      	pop	{r3, pc}
 800e4fa:	4b04      	ldr	r3, [pc, #16]	@ (800e50c <rmw_uxrce_transport_init+0x2c>)
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	6859      	ldr	r1, [r3, #4]
 800e500:	f001 fcb0 	bl	800fe64 <uxr_init_custom_transport>
 800e504:	f080 0001 	eor.w	r0, r0, #1
 800e508:	b2c0      	uxtb	r0, r0
 800e50a:	bd08      	pop	{r3, pc}
 800e50c:	20006b34 	.word	0x20006b34

0800e510 <rmw_uros_epoch_millis>:
 800e510:	4b05      	ldr	r3, [pc, #20]	@ (800e528 <rmw_uros_epoch_millis+0x18>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	b123      	cbz	r3, 800e520 <rmw_uros_epoch_millis+0x10>
 800e516:	6898      	ldr	r0, [r3, #8]
 800e518:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e51c:	f001 bf4e 	b.w	80103bc <uxr_epoch_millis>
 800e520:	2000      	movs	r0, #0
 800e522:	2100      	movs	r1, #0
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop
 800e528:	2000b5cc 	.word	0x2000b5cc

0800e52c <rmw_uros_epoch_nanos>:
 800e52c:	4b05      	ldr	r3, [pc, #20]	@ (800e544 <rmw_uros_epoch_nanos+0x18>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	b123      	cbz	r3, 800e53c <rmw_uros_epoch_nanos+0x10>
 800e532:	6898      	ldr	r0, [r3, #8]
 800e534:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e538:	f001 bf52 	b.w	80103e0 <uxr_epoch_nanos>
 800e53c:	2000      	movs	r0, #0
 800e53e:	2100      	movs	r1, #0
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop
 800e544:	2000b5cc 	.word	0x2000b5cc

0800e548 <rmw_uros_sync_session>:
 800e548:	b508      	push	{r3, lr}
 800e54a:	4b07      	ldr	r3, [pc, #28]	@ (800e568 <rmw_uros_sync_session+0x20>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	b14b      	cbz	r3, 800e564 <rmw_uros_sync_session+0x1c>
 800e550:	4601      	mov	r1, r0
 800e552:	6898      	ldr	r0, [r3, #8]
 800e554:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e558:	f002 fb86 	bl	8010c68 <uxr_sync_session>
 800e55c:	f080 0001 	eor.w	r0, r0, #1
 800e560:	b2c0      	uxtb	r0, r0
 800e562:	bd08      	pop	{r3, pc}
 800e564:	2001      	movs	r0, #1
 800e566:	bd08      	pop	{r3, pc}
 800e568:	2000b5cc 	.word	0x2000b5cc

0800e56c <rmw_uxrce_init_service_memory>:
 800e56c:	b1e2      	cbz	r2, 800e5a8 <rmw_uxrce_init_service_memory+0x3c>
 800e56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e572:	7b05      	ldrb	r5, [r0, #12]
 800e574:	4606      	mov	r6, r0
 800e576:	b9ad      	cbnz	r5, 800e5a4 <rmw_uxrce_init_service_memory+0x38>
 800e578:	23c8      	movs	r3, #200	@ 0xc8
 800e57a:	e9c0 5500 	strd	r5, r5, [r0]
 800e57e:	6083      	str	r3, [r0, #8]
 800e580:	f240 1301 	movw	r3, #257	@ 0x101
 800e584:	4617      	mov	r7, r2
 800e586:	8183      	strh	r3, [r0, #12]
 800e588:	460c      	mov	r4, r1
 800e58a:	46a8      	mov	r8, r5
 800e58c:	4621      	mov	r1, r4
 800e58e:	4630      	mov	r0, r6
 800e590:	3501      	adds	r5, #1
 800e592:	f008 fb35 	bl	8016c00 <put_memory>
 800e596:	42af      	cmp	r7, r5
 800e598:	60a4      	str	r4, [r4, #8]
 800e59a:	f884 800c 	strb.w	r8, [r4, #12]
 800e59e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e5a2:	d1f3      	bne.n	800e58c <rmw_uxrce_init_service_memory+0x20>
 800e5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop

0800e5ac <rmw_uxrce_init_client_memory>:
 800e5ac:	b1e2      	cbz	r2, 800e5e8 <rmw_uxrce_init_client_memory+0x3c>
 800e5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b2:	7b05      	ldrb	r5, [r0, #12]
 800e5b4:	4606      	mov	r6, r0
 800e5b6:	b9ad      	cbnz	r5, 800e5e4 <rmw_uxrce_init_client_memory+0x38>
 800e5b8:	23c8      	movs	r3, #200	@ 0xc8
 800e5ba:	e9c0 5500 	strd	r5, r5, [r0]
 800e5be:	6083      	str	r3, [r0, #8]
 800e5c0:	f240 1301 	movw	r3, #257	@ 0x101
 800e5c4:	4617      	mov	r7, r2
 800e5c6:	8183      	strh	r3, [r0, #12]
 800e5c8:	460c      	mov	r4, r1
 800e5ca:	46a8      	mov	r8, r5
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	3501      	adds	r5, #1
 800e5d2:	f008 fb15 	bl	8016c00 <put_memory>
 800e5d6:	42af      	cmp	r7, r5
 800e5d8:	60a4      	str	r4, [r4, #8]
 800e5da:	f884 800c 	strb.w	r8, [r4, #12]
 800e5de:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e5e2:	d1f3      	bne.n	800e5cc <rmw_uxrce_init_client_memory+0x20>
 800e5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop

0800e5ec <rmw_uxrce_init_publisher_memory>:
 800e5ec:	b1e2      	cbz	r2, 800e628 <rmw_uxrce_init_publisher_memory+0x3c>
 800e5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f2:	7b05      	ldrb	r5, [r0, #12]
 800e5f4:	4606      	mov	r6, r0
 800e5f6:	b9ad      	cbnz	r5, 800e624 <rmw_uxrce_init_publisher_memory+0x38>
 800e5f8:	23d8      	movs	r3, #216	@ 0xd8
 800e5fa:	e9c0 5500 	strd	r5, r5, [r0]
 800e5fe:	6083      	str	r3, [r0, #8]
 800e600:	f240 1301 	movw	r3, #257	@ 0x101
 800e604:	4617      	mov	r7, r2
 800e606:	8183      	strh	r3, [r0, #12]
 800e608:	460c      	mov	r4, r1
 800e60a:	46a8      	mov	r8, r5
 800e60c:	4621      	mov	r1, r4
 800e60e:	4630      	mov	r0, r6
 800e610:	3501      	adds	r5, #1
 800e612:	f008 faf5 	bl	8016c00 <put_memory>
 800e616:	42af      	cmp	r7, r5
 800e618:	60a4      	str	r4, [r4, #8]
 800e61a:	f884 800c 	strb.w	r8, [r4, #12]
 800e61e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e622:	d1f3      	bne.n	800e60c <rmw_uxrce_init_publisher_memory+0x20>
 800e624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop

0800e62c <rmw_uxrce_init_subscription_memory>:
 800e62c:	b1e2      	cbz	r2, 800e668 <rmw_uxrce_init_subscription_memory+0x3c>
 800e62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e632:	7b05      	ldrb	r5, [r0, #12]
 800e634:	4606      	mov	r6, r0
 800e636:	b9ad      	cbnz	r5, 800e664 <rmw_uxrce_init_subscription_memory+0x38>
 800e638:	23d8      	movs	r3, #216	@ 0xd8
 800e63a:	e9c0 5500 	strd	r5, r5, [r0]
 800e63e:	6083      	str	r3, [r0, #8]
 800e640:	f240 1301 	movw	r3, #257	@ 0x101
 800e644:	4617      	mov	r7, r2
 800e646:	8183      	strh	r3, [r0, #12]
 800e648:	460c      	mov	r4, r1
 800e64a:	46a8      	mov	r8, r5
 800e64c:	4621      	mov	r1, r4
 800e64e:	4630      	mov	r0, r6
 800e650:	3501      	adds	r5, #1
 800e652:	f008 fad5 	bl	8016c00 <put_memory>
 800e656:	42af      	cmp	r7, r5
 800e658:	60a4      	str	r4, [r4, #8]
 800e65a:	f884 800c 	strb.w	r8, [r4, #12]
 800e65e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e662:	d1f3      	bne.n	800e64c <rmw_uxrce_init_subscription_memory+0x20>
 800e664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop

0800e66c <rmw_uxrce_init_node_memory>:
 800e66c:	b1e2      	cbz	r2, 800e6a8 <rmw_uxrce_init_node_memory+0x3c>
 800e66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e672:	7b05      	ldrb	r5, [r0, #12]
 800e674:	4606      	mov	r6, r0
 800e676:	b9ad      	cbnz	r5, 800e6a4 <rmw_uxrce_init_node_memory+0x38>
 800e678:	23a4      	movs	r3, #164	@ 0xa4
 800e67a:	e9c0 5500 	strd	r5, r5, [r0]
 800e67e:	6083      	str	r3, [r0, #8]
 800e680:	f240 1301 	movw	r3, #257	@ 0x101
 800e684:	4617      	mov	r7, r2
 800e686:	8183      	strh	r3, [r0, #12]
 800e688:	460c      	mov	r4, r1
 800e68a:	46a8      	mov	r8, r5
 800e68c:	4621      	mov	r1, r4
 800e68e:	4630      	mov	r0, r6
 800e690:	3501      	adds	r5, #1
 800e692:	f008 fab5 	bl	8016c00 <put_memory>
 800e696:	42af      	cmp	r7, r5
 800e698:	60a4      	str	r4, [r4, #8]
 800e69a:	f884 800c 	strb.w	r8, [r4, #12]
 800e69e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e6a2:	d1f3      	bne.n	800e68c <rmw_uxrce_init_node_memory+0x20>
 800e6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a8:	4770      	bx	lr
 800e6aa:	bf00      	nop

0800e6ac <rmw_uxrce_init_session_memory>:
 800e6ac:	b1ea      	cbz	r2, 800e6ea <rmw_uxrce_init_session_memory+0x3e>
 800e6ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6b2:	7b05      	ldrb	r5, [r0, #12]
 800e6b4:	4606      	mov	r6, r0
 800e6b6:	b9b5      	cbnz	r5, 800e6e6 <rmw_uxrce_init_session_memory+0x3a>
 800e6b8:	e9c0 5500 	strd	r5, r5, [r0]
 800e6bc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e6c0:	f240 1301 	movw	r3, #257	@ 0x101
 800e6c4:	4617      	mov	r7, r2
 800e6c6:	f8c0 8008 	str.w	r8, [r0, #8]
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	8183      	strh	r3, [r0, #12]
 800e6ce:	46a9      	mov	r9, r5
 800e6d0:	4621      	mov	r1, r4
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	3501      	adds	r5, #1
 800e6d6:	f008 fa93 	bl	8016c00 <put_memory>
 800e6da:	42af      	cmp	r7, r5
 800e6dc:	60a4      	str	r4, [r4, #8]
 800e6de:	f884 900c 	strb.w	r9, [r4, #12]
 800e6e2:	4444      	add	r4, r8
 800e6e4:	d1f4      	bne.n	800e6d0 <rmw_uxrce_init_session_memory+0x24>
 800e6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6ea:	4770      	bx	lr

0800e6ec <rmw_uxrce_init_topic_memory>:
 800e6ec:	b1e2      	cbz	r2, 800e728 <rmw_uxrce_init_topic_memory+0x3c>
 800e6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f2:	7b05      	ldrb	r5, [r0, #12]
 800e6f4:	4606      	mov	r6, r0
 800e6f6:	b9ad      	cbnz	r5, 800e724 <rmw_uxrce_init_topic_memory+0x38>
 800e6f8:	231c      	movs	r3, #28
 800e6fa:	e9c0 5500 	strd	r5, r5, [r0]
 800e6fe:	6083      	str	r3, [r0, #8]
 800e700:	f240 1301 	movw	r3, #257	@ 0x101
 800e704:	4617      	mov	r7, r2
 800e706:	8183      	strh	r3, [r0, #12]
 800e708:	460c      	mov	r4, r1
 800e70a:	46a8      	mov	r8, r5
 800e70c:	4621      	mov	r1, r4
 800e70e:	4630      	mov	r0, r6
 800e710:	3501      	adds	r5, #1
 800e712:	f008 fa75 	bl	8016c00 <put_memory>
 800e716:	42af      	cmp	r7, r5
 800e718:	60a4      	str	r4, [r4, #8]
 800e71a:	f884 800c 	strb.w	r8, [r4, #12]
 800e71e:	f104 041c 	add.w	r4, r4, #28
 800e722:	d1f3      	bne.n	800e70c <rmw_uxrce_init_topic_memory+0x20>
 800e724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop

0800e72c <rmw_uxrce_init_static_input_buffer_memory>:
 800e72c:	b1ea      	cbz	r2, 800e76a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e732:	7b05      	ldrb	r5, [r0, #12]
 800e734:	4606      	mov	r6, r0
 800e736:	b9b5      	cbnz	r5, 800e766 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e738:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e73c:	e9c0 5500 	strd	r5, r5, [r0]
 800e740:	6083      	str	r3, [r0, #8]
 800e742:	f240 1301 	movw	r3, #257	@ 0x101
 800e746:	4617      	mov	r7, r2
 800e748:	8183      	strh	r3, [r0, #12]
 800e74a:	460c      	mov	r4, r1
 800e74c:	46a8      	mov	r8, r5
 800e74e:	4621      	mov	r1, r4
 800e750:	4630      	mov	r0, r6
 800e752:	3501      	adds	r5, #1
 800e754:	f008 fa54 	bl	8016c00 <put_memory>
 800e758:	42af      	cmp	r7, r5
 800e75a:	60a4      	str	r4, [r4, #8]
 800e75c:	f884 800c 	strb.w	r8, [r4, #12]
 800e760:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e764:	d1f3      	bne.n	800e74e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e76a:	4770      	bx	lr

0800e76c <rmw_uxrce_init_init_options_impl_memory>:
 800e76c:	b1e2      	cbz	r2, 800e7a8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e772:	7b05      	ldrb	r5, [r0, #12]
 800e774:	4606      	mov	r6, r0
 800e776:	b9ad      	cbnz	r5, 800e7a4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e778:	232c      	movs	r3, #44	@ 0x2c
 800e77a:	e9c0 5500 	strd	r5, r5, [r0]
 800e77e:	6083      	str	r3, [r0, #8]
 800e780:	f240 1301 	movw	r3, #257	@ 0x101
 800e784:	4617      	mov	r7, r2
 800e786:	8183      	strh	r3, [r0, #12]
 800e788:	460c      	mov	r4, r1
 800e78a:	46a8      	mov	r8, r5
 800e78c:	4621      	mov	r1, r4
 800e78e:	4630      	mov	r0, r6
 800e790:	3501      	adds	r5, #1
 800e792:	f008 fa35 	bl	8016c00 <put_memory>
 800e796:	42af      	cmp	r7, r5
 800e798:	60a4      	str	r4, [r4, #8]
 800e79a:	f884 800c 	strb.w	r8, [r4, #12]
 800e79e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e7a2:	d1f3      	bne.n	800e78c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop

0800e7ac <rmw_uxrce_init_wait_set_memory>:
 800e7ac:	b1e2      	cbz	r2, 800e7e8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b2:	7b05      	ldrb	r5, [r0, #12]
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	b9ad      	cbnz	r5, 800e7e4 <rmw_uxrce_init_wait_set_memory+0x38>
 800e7b8:	231c      	movs	r3, #28
 800e7ba:	e9c0 5500 	strd	r5, r5, [r0]
 800e7be:	6083      	str	r3, [r0, #8]
 800e7c0:	f240 1301 	movw	r3, #257	@ 0x101
 800e7c4:	4617      	mov	r7, r2
 800e7c6:	8183      	strh	r3, [r0, #12]
 800e7c8:	460c      	mov	r4, r1
 800e7ca:	46a8      	mov	r8, r5
 800e7cc:	4621      	mov	r1, r4
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	3501      	adds	r5, #1
 800e7d2:	f008 fa15 	bl	8016c00 <put_memory>
 800e7d6:	42af      	cmp	r7, r5
 800e7d8:	60a4      	str	r4, [r4, #8]
 800e7da:	f884 800c 	strb.w	r8, [r4, #12]
 800e7de:	f104 041c 	add.w	r4, r4, #28
 800e7e2:	d1f3      	bne.n	800e7cc <rmw_uxrce_init_wait_set_memory+0x20>
 800e7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop

0800e7ec <rmw_uxrce_init_guard_condition_memory>:
 800e7ec:	b1e2      	cbz	r2, 800e828 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f2:	7b05      	ldrb	r5, [r0, #12]
 800e7f4:	4606      	mov	r6, r0
 800e7f6:	b9ad      	cbnz	r5, 800e824 <rmw_uxrce_init_guard_condition_memory+0x38>
 800e7f8:	2320      	movs	r3, #32
 800e7fa:	e9c0 5500 	strd	r5, r5, [r0]
 800e7fe:	6083      	str	r3, [r0, #8]
 800e800:	f240 1301 	movw	r3, #257	@ 0x101
 800e804:	4617      	mov	r7, r2
 800e806:	8183      	strh	r3, [r0, #12]
 800e808:	460c      	mov	r4, r1
 800e80a:	46a8      	mov	r8, r5
 800e80c:	4621      	mov	r1, r4
 800e80e:	4630      	mov	r0, r6
 800e810:	3501      	adds	r5, #1
 800e812:	f008 f9f5 	bl	8016c00 <put_memory>
 800e816:	42af      	cmp	r7, r5
 800e818:	60a4      	str	r4, [r4, #8]
 800e81a:	f884 800c 	strb.w	r8, [r4, #12]
 800e81e:	f104 0420 	add.w	r4, r4, #32
 800e822:	d1f3      	bne.n	800e80c <rmw_uxrce_init_guard_condition_memory+0x20>
 800e824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop

0800e82c <rmw_uxrce_fini_session_memory>:
 800e82c:	4601      	mov	r1, r0
 800e82e:	4801      	ldr	r0, [pc, #4]	@ (800e834 <rmw_uxrce_fini_session_memory+0x8>)
 800e830:	f008 b9e6 	b.w	8016c00 <put_memory>
 800e834:	2000b5cc 	.word	0x2000b5cc

0800e838 <rmw_uxrce_fini_node_memory>:
 800e838:	b538      	push	{r3, r4, r5, lr}
 800e83a:	4604      	mov	r4, r0
 800e83c:	6800      	ldr	r0, [r0, #0]
 800e83e:	b128      	cbz	r0, 800e84c <rmw_uxrce_fini_node_memory+0x14>
 800e840:	4b07      	ldr	r3, [pc, #28]	@ (800e860 <rmw_uxrce_fini_node_memory+0x28>)
 800e842:	6819      	ldr	r1, [r3, #0]
 800e844:	f7f1 fcec 	bl	8000220 <strcmp>
 800e848:	b940      	cbnz	r0, 800e85c <rmw_uxrce_fini_node_memory+0x24>
 800e84a:	6020      	str	r0, [r4, #0]
 800e84c:	6861      	ldr	r1, [r4, #4]
 800e84e:	b129      	cbz	r1, 800e85c <rmw_uxrce_fini_node_memory+0x24>
 800e850:	2500      	movs	r5, #0
 800e852:	4804      	ldr	r0, [pc, #16]	@ (800e864 <rmw_uxrce_fini_node_memory+0x2c>)
 800e854:	610d      	str	r5, [r1, #16]
 800e856:	f008 f9d3 	bl	8016c00 <put_memory>
 800e85a:	6065      	str	r5, [r4, #4]
 800e85c:	bd38      	pop	{r3, r4, r5, pc}
 800e85e:	bf00      	nop
 800e860:	0801bae8 	.word	0x0801bae8
 800e864:	2000b59c 	.word	0x2000b59c

0800e868 <rmw_uxrce_fini_publisher_memory>:
 800e868:	b510      	push	{r4, lr}
 800e86a:	4604      	mov	r4, r0
 800e86c:	6800      	ldr	r0, [r0, #0]
 800e86e:	b128      	cbz	r0, 800e87c <rmw_uxrce_fini_publisher_memory+0x14>
 800e870:	4b06      	ldr	r3, [pc, #24]	@ (800e88c <rmw_uxrce_fini_publisher_memory+0x24>)
 800e872:	6819      	ldr	r1, [r3, #0]
 800e874:	f7f1 fcd4 	bl	8000220 <strcmp>
 800e878:	b938      	cbnz	r0, 800e88a <rmw_uxrce_fini_publisher_memory+0x22>
 800e87a:	6020      	str	r0, [r4, #0]
 800e87c:	6861      	ldr	r1, [r4, #4]
 800e87e:	b121      	cbz	r1, 800e88a <rmw_uxrce_fini_publisher_memory+0x22>
 800e880:	4803      	ldr	r0, [pc, #12]	@ (800e890 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e882:	f008 f9bd 	bl	8016c00 <put_memory>
 800e886:	2300      	movs	r3, #0
 800e888:	6063      	str	r3, [r4, #4]
 800e88a:	bd10      	pop	{r4, pc}
 800e88c:	0801bae8 	.word	0x0801bae8
 800e890:	2000b5ac 	.word	0x2000b5ac

0800e894 <rmw_uxrce_fini_subscription_memory>:
 800e894:	b510      	push	{r4, lr}
 800e896:	4604      	mov	r4, r0
 800e898:	6800      	ldr	r0, [r0, #0]
 800e89a:	b128      	cbz	r0, 800e8a8 <rmw_uxrce_fini_subscription_memory+0x14>
 800e89c:	4b06      	ldr	r3, [pc, #24]	@ (800e8b8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e89e:	6819      	ldr	r1, [r3, #0]
 800e8a0:	f7f1 fcbe 	bl	8000220 <strcmp>
 800e8a4:	b938      	cbnz	r0, 800e8b6 <rmw_uxrce_fini_subscription_memory+0x22>
 800e8a6:	6020      	str	r0, [r4, #0]
 800e8a8:	6861      	ldr	r1, [r4, #4]
 800e8aa:	b121      	cbz	r1, 800e8b6 <rmw_uxrce_fini_subscription_memory+0x22>
 800e8ac:	4803      	ldr	r0, [pc, #12]	@ (800e8bc <rmw_uxrce_fini_subscription_memory+0x28>)
 800e8ae:	f008 f9a7 	bl	8016c00 <put_memory>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	6063      	str	r3, [r4, #4]
 800e8b6:	bd10      	pop	{r4, pc}
 800e8b8:	0801bae8 	.word	0x0801bae8
 800e8bc:	2000b5ec 	.word	0x2000b5ec

0800e8c0 <rmw_uxrce_fini_service_memory>:
 800e8c0:	b510      	push	{r4, lr}
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	6800      	ldr	r0, [r0, #0]
 800e8c6:	b128      	cbz	r0, 800e8d4 <rmw_uxrce_fini_service_memory+0x14>
 800e8c8:	4b06      	ldr	r3, [pc, #24]	@ (800e8e4 <rmw_uxrce_fini_service_memory+0x24>)
 800e8ca:	6819      	ldr	r1, [r3, #0]
 800e8cc:	f7f1 fca8 	bl	8000220 <strcmp>
 800e8d0:	b938      	cbnz	r0, 800e8e2 <rmw_uxrce_fini_service_memory+0x22>
 800e8d2:	6020      	str	r0, [r4, #0]
 800e8d4:	6861      	ldr	r1, [r4, #4]
 800e8d6:	b121      	cbz	r1, 800e8e2 <rmw_uxrce_fini_service_memory+0x22>
 800e8d8:	4803      	ldr	r0, [pc, #12]	@ (800e8e8 <rmw_uxrce_fini_service_memory+0x28>)
 800e8da:	f008 f991 	bl	8016c00 <put_memory>
 800e8de:	2300      	movs	r3, #0
 800e8e0:	6063      	str	r3, [r4, #4]
 800e8e2:	bd10      	pop	{r4, pc}
 800e8e4:	0801bae8 	.word	0x0801bae8
 800e8e8:	2000b5bc 	.word	0x2000b5bc

0800e8ec <rmw_uxrce_fini_client_memory>:
 800e8ec:	b510      	push	{r4, lr}
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	6800      	ldr	r0, [r0, #0]
 800e8f2:	b128      	cbz	r0, 800e900 <rmw_uxrce_fini_client_memory+0x14>
 800e8f4:	4b06      	ldr	r3, [pc, #24]	@ (800e910 <rmw_uxrce_fini_client_memory+0x24>)
 800e8f6:	6819      	ldr	r1, [r3, #0]
 800e8f8:	f7f1 fc92 	bl	8000220 <strcmp>
 800e8fc:	b938      	cbnz	r0, 800e90e <rmw_uxrce_fini_client_memory+0x22>
 800e8fe:	6020      	str	r0, [r4, #0]
 800e900:	6861      	ldr	r1, [r4, #4]
 800e902:	b121      	cbz	r1, 800e90e <rmw_uxrce_fini_client_memory+0x22>
 800e904:	4803      	ldr	r0, [pc, #12]	@ (800e914 <rmw_uxrce_fini_client_memory+0x28>)
 800e906:	f008 f97b 	bl	8016c00 <put_memory>
 800e90a:	2300      	movs	r3, #0
 800e90c:	6063      	str	r3, [r4, #4]
 800e90e:	bd10      	pop	{r4, pc}
 800e910:	0801bae8 	.word	0x0801bae8
 800e914:	20006ccc 	.word	0x20006ccc

0800e918 <rmw_uxrce_fini_topic_memory>:
 800e918:	b510      	push	{r4, lr}
 800e91a:	4604      	mov	r4, r0
 800e91c:	4621      	mov	r1, r4
 800e91e:	4803      	ldr	r0, [pc, #12]	@ (800e92c <rmw_uxrce_fini_topic_memory+0x14>)
 800e920:	f008 f96e 	bl	8016c00 <put_memory>
 800e924:	2300      	movs	r3, #0
 800e926:	61a3      	str	r3, [r4, #24]
 800e928:	bd10      	pop	{r4, pc}
 800e92a:	bf00      	nop
 800e92c:	2000b5fc 	.word	0x2000b5fc

0800e930 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e930:	b082      	sub	sp, #8
 800e932:	b530      	push	{r4, r5, lr}
 800e934:	4925      	ldr	r1, [pc, #148]	@ (800e9cc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e936:	680d      	ldr	r5, [r1, #0]
 800e938:	ac03      	add	r4, sp, #12
 800e93a:	e884 000c 	stmia.w	r4, {r2, r3}
 800e93e:	461c      	mov	r4, r3
 800e940:	2d00      	cmp	r5, #0
 800e942:	d041      	beq.n	800e9c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e944:	462b      	mov	r3, r5
 800e946:	2100      	movs	r1, #0
 800e948:	689a      	ldr	r2, [r3, #8]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e950:	4290      	cmp	r0, r2
 800e952:	bf08      	it	eq
 800e954:	3101      	addeq	r1, #1
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1f6      	bne.n	800e948 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e95a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e95e:	2b02      	cmp	r3, #2
 800e960:	d029      	beq.n	800e9b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e962:	d907      	bls.n	800e974 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e964:	2b03      	cmp	r3, #3
 800e966:	d005      	beq.n	800e974 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e968:	2100      	movs	r1, #0
 800e96a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e96e:	4608      	mov	r0, r1
 800e970:	b002      	add	sp, #8
 800e972:	4770      	bx	lr
 800e974:	b314      	cbz	r4, 800e9bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e976:	428c      	cmp	r4, r1
 800e978:	d820      	bhi.n	800e9bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e97a:	2d00      	cmp	r5, #0
 800e97c:	d0f4      	beq.n	800e968 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e97e:	2100      	movs	r1, #0
 800e980:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e984:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e988:	e002      	b.n	800e990 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e98a:	686d      	ldr	r5, [r5, #4]
 800e98c:	2d00      	cmp	r5, #0
 800e98e:	d0ec      	beq.n	800e96a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e990:	68ab      	ldr	r3, [r5, #8]
 800e992:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e996:	4290      	cmp	r0, r2
 800e998:	d1f7      	bne.n	800e98a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e99a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e99e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e9a2:	4562      	cmp	r2, ip
 800e9a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e9a8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e9ac:	daed      	bge.n	800e98a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e9ae:	4694      	mov	ip, r2
 800e9b0:	461c      	mov	r4, r3
 800e9b2:	4629      	mov	r1, r5
 800e9b4:	e7e9      	b.n	800e98a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e9b6:	b10c      	cbz	r4, 800e9bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e9b8:	428c      	cmp	r4, r1
 800e9ba:	d9d5      	bls.n	800e968 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e9bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9c0:	4802      	ldr	r0, [pc, #8]	@ (800e9cc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e9c2:	b002      	add	sp, #8
 800e9c4:	f008 b90c 	b.w	8016be0 <get_memory>
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	e7c6      	b.n	800e95a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e9cc:	2000b5dc 	.word	0x2000b5dc

0800e9d0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e9d0:	4b11      	ldr	r3, [pc, #68]	@ (800ea18 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	b530      	push	{r4, r5, lr}
 800e9d6:	b1e3      	cbz	r3, 800ea12 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e9d8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e9dc:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e9e0:	2400      	movs	r4, #0
 800e9e2:	e001      	b.n	800e9e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	b193      	cbz	r3, 800ea0e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e9e8:	689a      	ldr	r2, [r3, #8]
 800e9ea:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e9ee:	4288      	cmp	r0, r1
 800e9f0:	d1f8      	bne.n	800e9e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e9f2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e9f6:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e9fa:	4571      	cmp	r1, lr
 800e9fc:	eb72 050c 	sbcs.w	r5, r2, ip
 800ea00:	daf0      	bge.n	800e9e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ea02:	461c      	mov	r4, r3
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	468e      	mov	lr, r1
 800ea08:	4694      	mov	ip, r2
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1ec      	bne.n	800e9e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ea0e:	4620      	mov	r0, r4
 800ea10:	bd30      	pop	{r4, r5, pc}
 800ea12:	461c      	mov	r4, r3
 800ea14:	4620      	mov	r0, r4
 800ea16:	bd30      	pop	{r4, r5, pc}
 800ea18:	2000b5dc 	.word	0x2000b5dc
 800ea1c:	00000000 	.word	0x00000000

0800ea20 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ea20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea24:	4b3c      	ldr	r3, [pc, #240]	@ (800eb18 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ea26:	ed2d 8b06 	vpush	{d8-d10}
 800ea2a:	681f      	ldr	r7, [r3, #0]
 800ea2c:	b08d      	sub	sp, #52	@ 0x34
 800ea2e:	f7ff fd7d 	bl	800e52c <rmw_uros_epoch_nanos>
 800ea32:	2f00      	cmp	r7, #0
 800ea34:	d05d      	beq.n	800eaf2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ea36:	46b8      	mov	r8, r7
 800ea38:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800eb00 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ea3c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ea40:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ea44:	2b04      	cmp	r3, #4
 800ea46:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800eb08 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ea4a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800eb10 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ea4e:	4681      	mov	r9, r0
 800ea50:	468a      	mov	sl, r1
 800ea52:	ac04      	add	r4, sp, #16
 800ea54:	d03f      	beq.n	800ead6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ea56:	2b05      	cmp	r3, #5
 800ea58:	d044      	beq.n	800eae4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ea5a:	2b03      	cmp	r3, #3
 800ea5c:	d03b      	beq.n	800ead6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ea5e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ea62:	ed8d ab06 	vstr	d10, [sp, #24]
 800ea66:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ea6a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ea6e:	ab08      	add	r3, sp, #32
 800ea70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ea72:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ea76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ea7a:	f007 fdfd 	bl	8016678 <rmw_time_equal>
 800ea7e:	b118      	cbz	r0, 800ea88 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ea80:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ea84:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ea88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ea8c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800ea90:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800ea94:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ea98:	f007 fe42 	bl	8016720 <rmw_time_total_nsec>
 800ea9c:	1830      	adds	r0, r6, r0
 800ea9e:	eb47 0101 	adc.w	r1, r7, r1
 800eaa2:	4548      	cmp	r0, r9
 800eaa4:	eb71 030a 	sbcs.w	r3, r1, sl
 800eaa8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800eaac:	db05      	blt.n	800eaba <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800eaae:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800eab2:	4591      	cmp	r9, r2
 800eab4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800eab8:	da03      	bge.n	800eac2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800eaba:	4817      	ldr	r0, [pc, #92]	@ (800eb18 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800eabc:	4641      	mov	r1, r8
 800eabe:	f008 f89f 	bl	8016c00 <put_memory>
 800eac2:	f1bb 0f00 	cmp.w	fp, #0
 800eac6:	d014      	beq.n	800eaf2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800eac8:	46d8      	mov	r8, fp
 800eaca:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800eace:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ead2:	2b04      	cmp	r3, #4
 800ead4:	d1bf      	bne.n	800ea56 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800ead6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800eada:	3340      	adds	r3, #64	@ 0x40
 800eadc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eade:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eae2:	e7c0      	b.n	800ea66 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800eae4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800eae8:	3348      	adds	r3, #72	@ 0x48
 800eaea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eaec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eaf0:	e7b9      	b.n	800ea66 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800eaf2:	b00d      	add	sp, #52	@ 0x34
 800eaf4:	ecbd 8b06 	vpop	{d8-d10}
 800eaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eafc:	f3af 8000 	nop.w
	...
 800eb08:	00000001 	.word	0x00000001
 800eb0c:	00000000 	.word	0x00000000
 800eb10:	0000001e 	.word	0x0000001e
 800eb14:	00000000 	.word	0x00000000
 800eb18:	2000b5dc 	.word	0x2000b5dc

0800eb1c <run_xrce_session>:
 800eb1c:	b510      	push	{r4, lr}
 800eb1e:	788c      	ldrb	r4, [r1, #2]
 800eb20:	b086      	sub	sp, #24
 800eb22:	2c01      	cmp	r4, #1
 800eb24:	f8ad 200e 	strh.w	r2, [sp, #14]
 800eb28:	d00c      	beq.n	800eb44 <run_xrce_session+0x28>
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	f10d 020e 	add.w	r2, sp, #14
 800eb34:	f10d 0317 	add.w	r3, sp, #23
 800eb38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb3c:	f002 f840 	bl	8010bc0 <uxr_run_session_until_all_status>
 800eb40:	b006      	add	sp, #24
 800eb42:	bd10      	pop	{r4, pc}
 800eb44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb48:	f001 fc54 	bl	80103f4 <uxr_flash_output_streams>
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	b006      	add	sp, #24
 800eb50:	bd10      	pop	{r4, pc}
 800eb52:	bf00      	nop

0800eb54 <convert_qos_profile>:
 800eb54:	7a4a      	ldrb	r2, [r1, #9]
 800eb56:	f891 c008 	ldrb.w	ip, [r1, #8]
 800eb5a:	2a02      	cmp	r2, #2
 800eb5c:	bf18      	it	ne
 800eb5e:	2200      	movne	r2, #0
 800eb60:	7002      	strb	r2, [r0, #0]
 800eb62:	780a      	ldrb	r2, [r1, #0]
 800eb64:	8889      	ldrh	r1, [r1, #4]
 800eb66:	8081      	strh	r1, [r0, #4]
 800eb68:	f1ac 0c02 	sub.w	ip, ip, #2
 800eb6c:	f1a2 0202 	sub.w	r2, r2, #2
 800eb70:	fabc fc8c 	clz	ip, ip
 800eb74:	fab2 f282 	clz	r2, r2
 800eb78:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800eb7c:	0952      	lsrs	r2, r2, #5
 800eb7e:	f880 c001 	strb.w	ip, [r0, #1]
 800eb82:	7082      	strb	r2, [r0, #2]
 800eb84:	4770      	bx	lr
 800eb86:	bf00      	nop

0800eb88 <generate_service_topics>:
 800eb88:	b570      	push	{r4, r5, r6, lr}
 800eb8a:	b082      	sub	sp, #8
 800eb8c:	461c      	mov	r4, r3
 800eb8e:	4b12      	ldr	r3, [pc, #72]	@ (800ebd8 <generate_service_topics+0x50>)
 800eb90:	9301      	str	r3, [sp, #4]
 800eb92:	4605      	mov	r5, r0
 800eb94:	4b11      	ldr	r3, [pc, #68]	@ (800ebdc <generate_service_topics+0x54>)
 800eb96:	9000      	str	r0, [sp, #0]
 800eb98:	4616      	mov	r6, r2
 800eb9a:	4608      	mov	r0, r1
 800eb9c:	4a10      	ldr	r2, [pc, #64]	@ (800ebe0 <generate_service_topics+0x58>)
 800eb9e:	4621      	mov	r1, r4
 800eba0:	f00a f9fa 	bl	8018f98 <sniprintf>
 800eba4:	4b0f      	ldr	r3, [pc, #60]	@ (800ebe4 <generate_service_topics+0x5c>)
 800eba6:	9301      	str	r3, [sp, #4]
 800eba8:	4601      	mov	r1, r0
 800ebaa:	9500      	str	r5, [sp, #0]
 800ebac:	4b0e      	ldr	r3, [pc, #56]	@ (800ebe8 <generate_service_topics+0x60>)
 800ebae:	4a0c      	ldr	r2, [pc, #48]	@ (800ebe0 <generate_service_topics+0x58>)
 800ebb0:	460d      	mov	r5, r1
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	4621      	mov	r1, r4
 800ebb6:	f00a f9ef 	bl	8018f98 <sniprintf>
 800ebba:	2d00      	cmp	r5, #0
 800ebbc:	db01      	blt.n	800ebc2 <generate_service_topics+0x3a>
 800ebbe:	42ac      	cmp	r4, r5
 800ebc0:	dc02      	bgt.n	800ebc8 <generate_service_topics+0x40>
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	b002      	add	sp, #8
 800ebc6:	bd70      	pop	{r4, r5, r6, pc}
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	dbfa      	blt.n	800ebc2 <generate_service_topics+0x3a>
 800ebcc:	4284      	cmp	r4, r0
 800ebce:	bfd4      	ite	le
 800ebd0:	2000      	movle	r0, #0
 800ebd2:	2001      	movgt	r0, #1
 800ebd4:	b002      	add	sp, #8
 800ebd6:	bd70      	pop	{r4, r5, r6, pc}
 800ebd8:	0801b074 	.word	0x0801b074
 800ebdc:	0801b070 	.word	0x0801b070
 800ebe0:	0801b04c 	.word	0x0801b04c
 800ebe4:	0801b068 	.word	0x0801b068
 800ebe8:	0801b064 	.word	0x0801b064

0800ebec <generate_service_types>:
 800ebec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	6880      	ldr	r0, [r0, #8]
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	4617      	mov	r7, r2
 800ebfa:	461e      	mov	r6, r3
 800ebfc:	4780      	blx	r0
 800ebfe:	68eb      	ldr	r3, [r5, #12]
 800ec00:	4680      	mov	r8, r0
 800ec02:	4798      	blx	r3
 800ec04:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ec08:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	7023      	strb	r3, [r4, #0]
 800ec10:	6813      	ldr	r3, [r2, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d042      	beq.n	800ec9c <generate_service_types+0xb0>
 800ec16:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800ecb0 <generate_service_types+0xc4>
 800ec1a:	4641      	mov	r1, r8
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	4c22      	ldr	r4, [pc, #136]	@ (800eca8 <generate_service_types+0xbc>)
 800ec20:	9405      	str	r4, [sp, #20]
 800ec22:	6852      	ldr	r2, [r2, #4]
 800ec24:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800ecb8 <generate_service_types+0xcc>
 800ec28:	9204      	str	r2, [sp, #16]
 800ec2a:	9100      	str	r1, [sp, #0]
 800ec2c:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800ec30:	4a1e      	ldr	r2, [pc, #120]	@ (800ecac <generate_service_types+0xc0>)
 800ec32:	f8cd a004 	str.w	sl, [sp, #4]
 800ec36:	4631      	mov	r1, r6
 800ec38:	f00a f9ae 	bl	8018f98 <sniprintf>
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	db1f      	blt.n	800ec80 <generate_service_types+0x94>
 800ec40:	2300      	movs	r3, #0
 800ec42:	703b      	strb	r3, [r7, #0]
 800ec44:	f8d9 3000 	ldr.w	r3, [r9]
 800ec48:	42b0      	cmp	r0, r6
 800ec4a:	bfac      	ite	ge
 800ec4c:	2500      	movge	r5, #0
 800ec4e:	2501      	movlt	r5, #1
 800ec50:	b1eb      	cbz	r3, 800ec8e <generate_service_types+0xa2>
 800ec52:	4a17      	ldr	r2, [pc, #92]	@ (800ecb0 <generate_service_types+0xc4>)
 800ec54:	9405      	str	r4, [sp, #20]
 800ec56:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ec5a:	9200      	str	r2, [sp, #0]
 800ec5c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800ec60:	e9cd a401 	strd	sl, r4, [sp, #4]
 800ec64:	4a11      	ldr	r2, [pc, #68]	@ (800ecac <generate_service_types+0xc0>)
 800ec66:	4638      	mov	r0, r7
 800ec68:	4631      	mov	r1, r6
 800ec6a:	f00a f995 	bl	8018f98 <sniprintf>
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	db10      	blt.n	800ec94 <generate_service_types+0xa8>
 800ec72:	42b0      	cmp	r0, r6
 800ec74:	bfb4      	ite	lt
 800ec76:	4628      	movlt	r0, r5
 800ec78:	2000      	movge	r0, #0
 800ec7a:	b006      	add	sp, #24
 800ec7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec80:	2300      	movs	r3, #0
 800ec82:	703b      	strb	r3, [r7, #0]
 800ec84:	f8d9 3000 	ldr.w	r3, [r9]
 800ec88:	2500      	movs	r5, #0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1e1      	bne.n	800ec52 <generate_service_types+0x66>
 800ec8e:	4b09      	ldr	r3, [pc, #36]	@ (800ecb4 <generate_service_types+0xc8>)
 800ec90:	461a      	mov	r2, r3
 800ec92:	e7df      	b.n	800ec54 <generate_service_types+0x68>
 800ec94:	2000      	movs	r0, #0
 800ec96:	b006      	add	sp, #24
 800ec98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec9c:	4b05      	ldr	r3, [pc, #20]	@ (800ecb4 <generate_service_types+0xc8>)
 800ec9e:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800ecb0 <generate_service_types+0xc4>
 800eca2:	4619      	mov	r1, r3
 800eca4:	e7ba      	b.n	800ec1c <generate_service_types+0x30>
 800eca6:	bf00      	nop
 800eca8:	0801b054 	.word	0x0801b054
 800ecac:	0801b044 	.word	0x0801b044
 800ecb0:	0801b040 	.word	0x0801b040
 800ecb4:	0801bb74 	.word	0x0801bb74
 800ecb8:	0801b058 	.word	0x0801b058

0800ecbc <generate_type_name>:
 800ecbc:	b530      	push	{r4, r5, lr}
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	700b      	strb	r3, [r1, #0]
 800ecc2:	6803      	ldr	r3, [r0, #0]
 800ecc4:	b087      	sub	sp, #28
 800ecc6:	4614      	mov	r4, r2
 800ecc8:	b1d3      	cbz	r3, 800ed00 <generate_type_name+0x44>
 800ecca:	4a0f      	ldr	r2, [pc, #60]	@ (800ed08 <generate_type_name+0x4c>)
 800eccc:	4615      	mov	r5, r2
 800ecce:	9203      	str	r2, [sp, #12]
 800ecd0:	9500      	str	r5, [sp, #0]
 800ecd2:	6842      	ldr	r2, [r0, #4]
 800ecd4:	480d      	ldr	r0, [pc, #52]	@ (800ed0c <generate_type_name+0x50>)
 800ecd6:	9001      	str	r0, [sp, #4]
 800ecd8:	4608      	mov	r0, r1
 800ecda:	490d      	ldr	r1, [pc, #52]	@ (800ed10 <generate_type_name+0x54>)
 800ecdc:	9204      	str	r2, [sp, #16]
 800ecde:	9105      	str	r1, [sp, #20]
 800ece0:	9102      	str	r1, [sp, #8]
 800ece2:	4a0c      	ldr	r2, [pc, #48]	@ (800ed14 <generate_type_name+0x58>)
 800ece4:	4621      	mov	r1, r4
 800ece6:	f00a f957 	bl	8018f98 <sniprintf>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	db05      	blt.n	800ecfa <generate_type_name+0x3e>
 800ecee:	4284      	cmp	r4, r0
 800ecf0:	bfd4      	ite	le
 800ecf2:	2000      	movle	r0, #0
 800ecf4:	2001      	movgt	r0, #1
 800ecf6:	b007      	add	sp, #28
 800ecf8:	bd30      	pop	{r4, r5, pc}
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	b007      	add	sp, #28
 800ecfe:	bd30      	pop	{r4, r5, pc}
 800ed00:	4b05      	ldr	r3, [pc, #20]	@ (800ed18 <generate_type_name+0x5c>)
 800ed02:	4a01      	ldr	r2, [pc, #4]	@ (800ed08 <generate_type_name+0x4c>)
 800ed04:	461d      	mov	r5, r3
 800ed06:	e7e2      	b.n	800ecce <generate_type_name+0x12>
 800ed08:	0801b040 	.word	0x0801b040
 800ed0c:	0801b058 	.word	0x0801b058
 800ed10:	0801b054 	.word	0x0801b054
 800ed14:	0801b044 	.word	0x0801b044
 800ed18:	0801bb74 	.word	0x0801bb74

0800ed1c <generate_topic_name>:
 800ed1c:	b510      	push	{r4, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	4614      	mov	r4, r2
 800ed22:	9000      	str	r0, [sp, #0]
 800ed24:	4b08      	ldr	r3, [pc, #32]	@ (800ed48 <generate_topic_name+0x2c>)
 800ed26:	4a09      	ldr	r2, [pc, #36]	@ (800ed4c <generate_topic_name+0x30>)
 800ed28:	4608      	mov	r0, r1
 800ed2a:	4621      	mov	r1, r4
 800ed2c:	f00a f934 	bl	8018f98 <sniprintf>
 800ed30:	2800      	cmp	r0, #0
 800ed32:	db05      	blt.n	800ed40 <generate_topic_name+0x24>
 800ed34:	4284      	cmp	r4, r0
 800ed36:	bfd4      	ite	le
 800ed38:	2000      	movle	r0, #0
 800ed3a:	2001      	movgt	r0, #1
 800ed3c:	b002      	add	sp, #8
 800ed3e:	bd10      	pop	{r4, pc}
 800ed40:	2000      	movs	r0, #0
 800ed42:	b002      	add	sp, #8
 800ed44:	bd10      	pop	{r4, pc}
 800ed46:	bf00      	nop
 800ed48:	0801b07c 	.word	0x0801b07c
 800ed4c:	0801b05c 	.word	0x0801b05c

0800ed50 <is_uxrce_rmw_identifier_valid>:
 800ed50:	b510      	push	{r4, lr}
 800ed52:	4604      	mov	r4, r0
 800ed54:	b140      	cbz	r0, 800ed68 <is_uxrce_rmw_identifier_valid+0x18>
 800ed56:	f007 ffab 	bl	8016cb0 <rmw_get_implementation_identifier>
 800ed5a:	4601      	mov	r1, r0
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	f7f1 fa5f 	bl	8000220 <strcmp>
 800ed62:	fab0 f080 	clz	r0, r0
 800ed66:	0940      	lsrs	r0, r0, #5
 800ed68:	bd10      	pop	{r4, pc}
 800ed6a:	bf00      	nop

0800ed6c <get_message_typesupport_handle>:
 800ed6c:	6883      	ldr	r3, [r0, #8]
 800ed6e:	4718      	bx	r3

0800ed70 <get_message_typesupport_handle_function>:
 800ed70:	b510      	push	{r4, lr}
 800ed72:	4604      	mov	r4, r0
 800ed74:	6800      	ldr	r0, [r0, #0]
 800ed76:	f7f1 fa53 	bl	8000220 <strcmp>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	bf0c      	ite	eq
 800ed7e:	4620      	moveq	r0, r4
 800ed80:	2000      	movne	r0, #0
 800ed82:	bd10      	pop	{r4, pc}

0800ed84 <get_service_typesupport_handle>:
 800ed84:	6883      	ldr	r3, [r0, #8]
 800ed86:	4718      	bx	r3

0800ed88 <get_service_typesupport_handle_function>:
 800ed88:	b510      	push	{r4, lr}
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	6800      	ldr	r0, [r0, #0]
 800ed8e:	f7f1 fa47 	bl	8000220 <strcmp>
 800ed92:	2800      	cmp	r0, #0
 800ed94:	bf0c      	ite	eq
 800ed96:	4620      	moveq	r0, r4
 800ed98:	2000      	movne	r0, #0
 800ed9a:	bd10      	pop	{r4, pc}

0800ed9c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800ed9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eda0:	6805      	ldr	r5, [r0, #0]
 800eda2:	4604      	mov	r4, r0
 800eda4:	4628      	mov	r0, r5
 800eda6:	460e      	mov	r6, r1
 800eda8:	f7f1 fa3a 	bl	8000220 <strcmp>
 800edac:	b1c8      	cbz	r0, 800ede2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800edae:	4b11      	ldr	r3, [pc, #68]	@ (800edf4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	429d      	cmp	r5, r3
 800edb4:	d112      	bne.n	800eddc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800edb6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800edba:	f8d8 4000 	ldr.w	r4, [r8]
 800edbe:	b16c      	cbz	r4, 800eddc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800edc0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800edc4:	2700      	movs	r7, #0
 800edc6:	3d04      	subs	r5, #4
 800edc8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800edcc:	4631      	mov	r1, r6
 800edce:	f7f1 fa27 	bl	8000220 <strcmp>
 800edd2:	00bb      	lsls	r3, r7, #2
 800edd4:	b140      	cbz	r0, 800ede8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800edd6:	3701      	adds	r7, #1
 800edd8:	42bc      	cmp	r4, r7
 800edda:	d1f5      	bne.n	800edc8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800eddc:	2000      	movs	r0, #0
 800edde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede2:	4620      	mov	r0, r4
 800ede4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800edec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edf0:	58d3      	ldr	r3, [r2, r3]
 800edf2:	4718      	bx	r3
 800edf4:	200003b4 	.word	0x200003b4

0800edf8 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800edf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edfc:	6805      	ldr	r5, [r0, #0]
 800edfe:	4604      	mov	r4, r0
 800ee00:	4628      	mov	r0, r5
 800ee02:	460e      	mov	r6, r1
 800ee04:	f7f1 fa0c 	bl	8000220 <strcmp>
 800ee08:	b1c8      	cbz	r0, 800ee3e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800ee0a:	4b11      	ldr	r3, [pc, #68]	@ (800ee50 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	429d      	cmp	r5, r3
 800ee10:	d112      	bne.n	800ee38 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800ee12:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ee16:	f8d8 4000 	ldr.w	r4, [r8]
 800ee1a:	b16c      	cbz	r4, 800ee38 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800ee1c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ee20:	2700      	movs	r7, #0
 800ee22:	3d04      	subs	r5, #4
 800ee24:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800ee28:	4631      	mov	r1, r6
 800ee2a:	f7f1 f9f9 	bl	8000220 <strcmp>
 800ee2e:	00bb      	lsls	r3, r7, #2
 800ee30:	b140      	cbz	r0, 800ee44 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800ee32:	3701      	adds	r7, #1
 800ee34:	42bc      	cmp	r4, r7
 800ee36:	d1f5      	bne.n	800ee24 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800ee38:	2000      	movs	r0, #0
 800ee3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee3e:	4620      	mov	r0, r4
 800ee40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ee48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4c:	58d3      	ldr	r3, [r2, r3]
 800ee4e:	4718      	bx	r3
 800ee50:	200003b4 	.word	0x200003b4

0800ee54 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ee54:	4b04      	ldr	r3, [pc, #16]	@ (800ee68 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	b10a      	cbz	r2, 800ee5e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800ee5a:	4803      	ldr	r0, [pc, #12]	@ (800ee68 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800ee5c:	4770      	bx	lr
 800ee5e:	4a03      	ldr	r2, [pc, #12]	@ (800ee6c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800ee60:	4801      	ldr	r0, [pc, #4]	@ (800ee68 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800ee62:	6812      	ldr	r2, [r2, #0]
 800ee64:	601a      	str	r2, [r3, #0]
 800ee66:	4770      	bx	lr
 800ee68:	200003c4 	.word	0x200003c4
 800ee6c:	200003b4 	.word	0x200003b4

0800ee70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ee70:	4a02      	ldr	r2, [pc, #8]	@ (800ee7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800ee72:	4b03      	ldr	r3, [pc, #12]	@ (800ee80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800ee74:	6812      	ldr	r2, [r2, #0]
 800ee76:	601a      	str	r2, [r3, #0]
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	200003b4 	.word	0x200003b4
 800ee80:	200003c4 	.word	0x200003c4

0800ee84 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800ee84:	2009      	movs	r0, #9
 800ee86:	4770      	bx	lr

0800ee88 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800ee88:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop

0800ee90 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800ee90:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ee94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee98:	e9c2 0100 	strd	r0, r1, [r2]
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop

0800eea0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800eea0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800eea4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800eea8:	e9c1 2300 	strd	r2, r3, [r1]
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop

0800eeb0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800eeb0:	f008 bab2 	b.w	8017418 <sensor_msgs__msg__Imu__init>

0800eeb4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800eeb4:	f008 bb06 	b.w	80174c4 <sensor_msgs__msg__Imu__fini>

0800eeb8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800eeb8:	2009      	movs	r0, #9
 800eeba:	4770      	bx	lr

0800eebc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800eebc:	2009      	movs	r0, #9
 800eebe:	4770      	bx	lr

0800eec0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800eec0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop

0800eec8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800eec8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop

0800eed0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800eed0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop

0800eed8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800eed8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop

0800eee0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800eee0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop

0800eee8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800eee8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800eeec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eef0:	e9c2 0100 	strd	r0, r1, [r2]
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop

0800eef8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800eef8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800eefc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ef00:	e9c1 2300 	strd	r2, r3, [r1]
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop

0800ef08 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800ef08:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ef0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef10:	e9c2 0100 	strd	r0, r1, [r2]
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop

0800ef18 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800ef18:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ef1c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ef20:	e9c1 2300 	strd	r2, r3, [r1]
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop

0800ef28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ef28:	b510      	push	{r4, lr}
 800ef2a:	f000 f90f 	bl	800f14c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ef2e:	4c0b      	ldr	r4, [pc, #44]	@ (800ef5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800ef30:	60e0      	str	r0, [r4, #12]
 800ef32:	f000 fa69 	bl	800f408 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800ef36:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ef38:	f7fb fbe6 	bl	800a708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ef3c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800ef40:	f7fb fbe2 	bl	800a708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ef44:	4b06      	ldr	r3, [pc, #24]	@ (800ef60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ef46:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	b10a      	cbz	r2, 800ef52 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800ef4e:	4804      	ldr	r0, [pc, #16]	@ (800ef60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ef50:	bd10      	pop	{r4, pc}
 800ef52:	4a04      	ldr	r2, [pc, #16]	@ (800ef64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800ef54:	4802      	ldr	r0, [pc, #8]	@ (800ef60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ef56:	6812      	ldr	r2, [r2, #0]
 800ef58:	601a      	str	r2, [r3, #0]
 800ef5a:	bd10      	pop	{r4, pc}
 800ef5c:	200003d0 	.word	0x200003d0
 800ef60:	20000574 	.word	0x20000574
 800ef64:	200003b8 	.word	0x200003b8

0800ef68 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800ef68:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800ef6c:	4680      	mov	r8, r0
 800ef6e:	460f      	mov	r7, r1
 800ef70:	f000 f910 	bl	800f194 <get_serialized_size_std_msgs__msg__Header>
 800ef74:	183c      	adds	r4, r7, r0
 800ef76:	4621      	mov	r1, r4
 800ef78:	f108 0018 	add.w	r0, r8, #24
 800ef7c:	f000 fa52 	bl	800f424 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800ef80:	4404      	add	r4, r0
 800ef82:	2108      	movs	r1, #8
 800ef84:	4620      	mov	r0, r4
 800ef86:	f7fd f8eb 	bl	800c160 <ucdr_alignment>
 800ef8a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800ef8e:	4425      	add	r5, r4
 800ef90:	4629      	mov	r1, r5
 800ef92:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800ef96:	f7fb fc2b 	bl	800a7f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ef9a:	4405      	add	r5, r0
 800ef9c:	2108      	movs	r1, #8
 800ef9e:	4628      	mov	r0, r5
 800efa0:	f7fd f8de 	bl	800c160 <ucdr_alignment>
 800efa4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800efa8:	4425      	add	r5, r4
 800efaa:	4629      	mov	r1, r5
 800efac:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800efb0:	f7fb fc1e 	bl	800a7f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800efb4:	4405      	add	r5, r0
 800efb6:	2108      	movs	r1, #8
 800efb8:	4628      	mov	r0, r5
 800efba:	f7fd f8d1 	bl	800c160 <ucdr_alignment>
 800efbe:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800efc2:	4438      	add	r0, r7
 800efc4:	4428      	add	r0, r5
 800efc6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800efca:	bf00      	nop

0800efcc <get_serialized_size_sensor_msgs__msg__Imu>:
 800efcc:	b108      	cbz	r0, 800efd2 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800efce:	f7ff bfcb 	b.w	800ef68 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800efd2:	4770      	bx	lr

0800efd4 <_Imu__get_serialized_size>:
 800efd4:	b110      	cbz	r0, 800efdc <_Imu__get_serialized_size+0x8>
 800efd6:	2100      	movs	r1, #0
 800efd8:	f7ff bfc6 	b.w	800ef68 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop

0800efe0 <_Imu__cdr_deserialize>:
 800efe0:	b538      	push	{r3, r4, r5, lr}
 800efe2:	460c      	mov	r4, r1
 800efe4:	b399      	cbz	r1, 800f04e <_Imu__cdr_deserialize+0x6e>
 800efe6:	4605      	mov	r5, r0
 800efe8:	f000 f956 	bl	800f298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800efec:	6843      	ldr	r3, [r0, #4]
 800efee:	4621      	mov	r1, r4
 800eff0:	68db      	ldr	r3, [r3, #12]
 800eff2:	4628      	mov	r0, r5
 800eff4:	4798      	blx	r3
 800eff6:	f000 fac9 	bl	800f58c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800effa:	6843      	ldr	r3, [r0, #4]
 800effc:	f104 0118 	add.w	r1, r4, #24
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	4628      	mov	r0, r5
 800f004:	4798      	blx	r3
 800f006:	2209      	movs	r2, #9
 800f008:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f00c:	4628      	mov	r0, r5
 800f00e:	f000 fc5d 	bl	800f8cc <ucdr_deserialize_array_double>
 800f012:	f7fb fc79 	bl	800a908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f016:	6843      	ldr	r3, [r0, #4]
 800f018:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	4628      	mov	r0, r5
 800f020:	4798      	blx	r3
 800f022:	2209      	movs	r2, #9
 800f024:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800f028:	4628      	mov	r0, r5
 800f02a:	f000 fc4f 	bl	800f8cc <ucdr_deserialize_array_double>
 800f02e:	f7fb fc6b 	bl	800a908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f032:	6843      	ldr	r3, [r0, #4]
 800f034:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	4628      	mov	r0, r5
 800f03c:	4798      	blx	r3
 800f03e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800f042:	4628      	mov	r0, r5
 800f044:	2209      	movs	r2, #9
 800f046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f04a:	f000 bc3f 	b.w	800f8cc <ucdr_deserialize_array_double>
 800f04e:	4608      	mov	r0, r1
 800f050:	bd38      	pop	{r3, r4, r5, pc}
 800f052:	bf00      	nop

0800f054 <_Imu__cdr_serialize>:
 800f054:	2800      	cmp	r0, #0
 800f056:	d035      	beq.n	800f0c4 <_Imu__cdr_serialize+0x70>
 800f058:	b538      	push	{r3, r4, r5, lr}
 800f05a:	460d      	mov	r5, r1
 800f05c:	4604      	mov	r4, r0
 800f05e:	f000 f91b 	bl	800f298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f062:	6843      	ldr	r3, [r0, #4]
 800f064:	4629      	mov	r1, r5
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	4620      	mov	r0, r4
 800f06a:	4798      	blx	r3
 800f06c:	f000 fa8e 	bl	800f58c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f070:	6843      	ldr	r3, [r0, #4]
 800f072:	4629      	mov	r1, r5
 800f074:	689b      	ldr	r3, [r3, #8]
 800f076:	f104 0018 	add.w	r0, r4, #24
 800f07a:	4798      	blx	r3
 800f07c:	2209      	movs	r2, #9
 800f07e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f082:	4628      	mov	r0, r5
 800f084:	f000 fbce 	bl	800f824 <ucdr_serialize_array_double>
 800f088:	f7fb fc3e 	bl	800a908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f08c:	6843      	ldr	r3, [r0, #4]
 800f08e:	4629      	mov	r1, r5
 800f090:	689b      	ldr	r3, [r3, #8]
 800f092:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800f096:	4798      	blx	r3
 800f098:	2209      	movs	r2, #9
 800f09a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800f09e:	4628      	mov	r0, r5
 800f0a0:	f000 fbc0 	bl	800f824 <ucdr_serialize_array_double>
 800f0a4:	f7fb fc30 	bl	800a908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f0a8:	6843      	ldr	r3, [r0, #4]
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	689b      	ldr	r3, [r3, #8]
 800f0ae:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800f0b2:	4798      	blx	r3
 800f0b4:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	2209      	movs	r2, #9
 800f0bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0c0:	f000 bbb0 	b.w	800f824 <ucdr_serialize_array_double>
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop

0800f0c8 <max_serialized_size_sensor_msgs__msg__Imu>:
 800f0c8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	7003      	strb	r3, [r0, #0]
 800f0d0:	4680      	mov	r8, r0
 800f0d2:	460f      	mov	r7, r1
 800f0d4:	f000 f8d6 	bl	800f284 <max_serialized_size_std_msgs__msg__Header>
 800f0d8:	183c      	adds	r4, r7, r0
 800f0da:	4621      	mov	r1, r4
 800f0dc:	4640      	mov	r0, r8
 800f0de:	f000 fa33 	bl	800f548 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800f0e2:	4404      	add	r4, r0
 800f0e4:	2108      	movs	r1, #8
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f7fd f83a 	bl	800c160 <ucdr_alignment>
 800f0ec:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800f0f0:	4425      	add	r5, r4
 800f0f2:	4629      	mov	r1, r5
 800f0f4:	4640      	mov	r0, r8
 800f0f6:	f7fb fbeb 	bl	800a8d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800f0fa:	4405      	add	r5, r0
 800f0fc:	2108      	movs	r1, #8
 800f0fe:	4628      	mov	r0, r5
 800f100:	f7fd f82e 	bl	800c160 <ucdr_alignment>
 800f104:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800f108:	4425      	add	r5, r4
 800f10a:	4629      	mov	r1, r5
 800f10c:	4640      	mov	r0, r8
 800f10e:	f7fb fbdf 	bl	800a8d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800f112:	4405      	add	r5, r0
 800f114:	2108      	movs	r1, #8
 800f116:	4628      	mov	r0, r5
 800f118:	f7fd f822 	bl	800c160 <ucdr_alignment>
 800f11c:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800f120:	4438      	add	r0, r7
 800f122:	4428      	add	r0, r5
 800f124:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800f128 <_Imu__max_serialized_size>:
 800f128:	b500      	push	{lr}
 800f12a:	b083      	sub	sp, #12
 800f12c:	2100      	movs	r1, #0
 800f12e:	f10d 0007 	add.w	r0, sp, #7
 800f132:	f7ff ffc9 	bl	800f0c8 <max_serialized_size_sensor_msgs__msg__Imu>
 800f136:	b003      	add	sp, #12
 800f138:	f85d fb04 	ldr.w	pc, [sp], #4

0800f13c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f13c:	4800      	ldr	r0, [pc, #0]	@ (800f140 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800f13e:	4770      	bx	lr
 800f140:	20000580 	.word	0x20000580

0800f144 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800f144:	f008 b9d2 	b.w	80174ec <std_msgs__msg__Header__init>

0800f148 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800f148:	f008 b9f4 	b.w	8017534 <std_msgs__msg__Header__fini>

0800f14c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f14c:	b508      	push	{r3, lr}
 800f14e:	f000 f8ab 	bl	800f2a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f152:	4b06      	ldr	r3, [pc, #24]	@ (800f16c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f154:	4906      	ldr	r1, [pc, #24]	@ (800f170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	60c8      	str	r0, [r1, #12]
 800f15a:	b10a      	cbz	r2, 800f160 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800f15c:	4803      	ldr	r0, [pc, #12]	@ (800f16c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f15e:	bd08      	pop	{r3, pc}
 800f160:	4a04      	ldr	r2, [pc, #16]	@ (800f174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800f162:	4802      	ldr	r0, [pc, #8]	@ (800f16c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f164:	6812      	ldr	r2, [r2, #0]
 800f166:	601a      	str	r2, [r3, #0]
 800f168:	bd08      	pop	{r3, pc}
 800f16a:	bf00      	nop
 800f16c:	20000620 	.word	0x20000620
 800f170:	200005a8 	.word	0x200005a8
 800f174:	200003b8 	.word	0x200003b8

0800f178 <_Header__max_serialized_size>:
 800f178:	b500      	push	{lr}
 800f17a:	b083      	sub	sp, #12
 800f17c:	2301      	movs	r3, #1
 800f17e:	2100      	movs	r1, #0
 800f180:	f10d 0007 	add.w	r0, sp, #7
 800f184:	f88d 3007 	strb.w	r3, [sp, #7]
 800f188:	f000 f8ec 	bl	800f364 <max_serialized_size_builtin_interfaces__msg__Time>
 800f18c:	b003      	add	sp, #12
 800f18e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f192:	bf00      	nop

0800f194 <get_serialized_size_std_msgs__msg__Header>:
 800f194:	b570      	push	{r4, r5, r6, lr}
 800f196:	4605      	mov	r5, r0
 800f198:	b168      	cbz	r0, 800f1b6 <get_serialized_size_std_msgs__msg__Header+0x22>
 800f19a:	460c      	mov	r4, r1
 800f19c:	f000 f892 	bl	800f2c4 <get_serialized_size_builtin_interfaces__msg__Time>
 800f1a0:	1826      	adds	r6, r4, r0
 800f1a2:	2104      	movs	r1, #4
 800f1a4:	4630      	mov	r0, r6
 800f1a6:	f7fc ffdb 	bl	800c160 <ucdr_alignment>
 800f1aa:	68e9      	ldr	r1, [r5, #12]
 800f1ac:	f1c4 0405 	rsb	r4, r4, #5
 800f1b0:	440c      	add	r4, r1
 800f1b2:	4404      	add	r4, r0
 800f1b4:	19a0      	adds	r0, r4, r6
 800f1b6:	bd70      	pop	{r4, r5, r6, pc}

0800f1b8 <_Header__cdr_deserialize>:
 800f1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ba:	460c      	mov	r4, r1
 800f1bc:	b083      	sub	sp, #12
 800f1be:	b1e1      	cbz	r1, 800f1fa <_Header__cdr_deserialize+0x42>
 800f1c0:	4606      	mov	r6, r0
 800f1c2:	f000 f8e3 	bl	800f38c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f1c6:	6843      	ldr	r3, [r0, #4]
 800f1c8:	4621      	mov	r1, r4
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	4798      	blx	r3
 800f1d0:	6927      	ldr	r7, [r4, #16]
 800f1d2:	68a1      	ldr	r1, [r4, #8]
 800f1d4:	ab01      	add	r3, sp, #4
 800f1d6:	463a      	mov	r2, r7
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f000 fbdf 	bl	800f99c <ucdr_deserialize_sequence_char>
 800f1de:	9b01      	ldr	r3, [sp, #4]
 800f1e0:	4605      	mov	r5, r0
 800f1e2:	b920      	cbnz	r0, 800f1ee <_Header__cdr_deserialize+0x36>
 800f1e4:	429f      	cmp	r7, r3
 800f1e6:	d30c      	bcc.n	800f202 <_Header__cdr_deserialize+0x4a>
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	b003      	add	sp, #12
 800f1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1ee:	b103      	cbz	r3, 800f1f2 <_Header__cdr_deserialize+0x3a>
 800f1f0:	3b01      	subs	r3, #1
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	60e3      	str	r3, [r4, #12]
 800f1f6:	b003      	add	sp, #12
 800f1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1fa:	460d      	mov	r5, r1
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	b003      	add	sp, #12
 800f200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f202:	2101      	movs	r1, #1
 800f204:	75b0      	strb	r0, [r6, #22]
 800f206:	7571      	strb	r1, [r6, #21]
 800f208:	4630      	mov	r0, r6
 800f20a:	60e5      	str	r5, [r4, #12]
 800f20c:	f7fc ffbe 	bl	800c18c <ucdr_align_to>
 800f210:	4630      	mov	r0, r6
 800f212:	9901      	ldr	r1, [sp, #4]
 800f214:	f7fc fff0 	bl	800c1f8 <ucdr_advance_buffer>
 800f218:	4628      	mov	r0, r5
 800f21a:	b003      	add	sp, #12
 800f21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f21e:	bf00      	nop

0800f220 <_Header__cdr_serialize>:
 800f220:	b1f8      	cbz	r0, 800f262 <_Header__cdr_serialize+0x42>
 800f222:	b570      	push	{r4, r5, r6, lr}
 800f224:	4604      	mov	r4, r0
 800f226:	460d      	mov	r5, r1
 800f228:	f000 f8b0 	bl	800f38c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f22c:	6843      	ldr	r3, [r0, #4]
 800f22e:	4629      	mov	r1, r5
 800f230:	689b      	ldr	r3, [r3, #8]
 800f232:	4620      	mov	r0, r4
 800f234:	4798      	blx	r3
 800f236:	68a6      	ldr	r6, [r4, #8]
 800f238:	b156      	cbz	r6, 800f250 <_Header__cdr_serialize+0x30>
 800f23a:	4630      	mov	r0, r6
 800f23c:	f7f0 fffa 	bl	8000234 <strlen>
 800f240:	4631      	mov	r1, r6
 800f242:	60e0      	str	r0, [r4, #12]
 800f244:	1c42      	adds	r2, r0, #1
 800f246:	4628      	mov	r0, r5
 800f248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f24c:	f000 bb94 	b.w	800f978 <ucdr_serialize_sequence_char>
 800f250:	4630      	mov	r0, r6
 800f252:	60e0      	str	r0, [r4, #12]
 800f254:	4632      	mov	r2, r6
 800f256:	4631      	mov	r1, r6
 800f258:	4628      	mov	r0, r5
 800f25a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f25e:	f000 bb8b 	b.w	800f978 <ucdr_serialize_sequence_char>
 800f262:	4770      	bx	lr

0800f264 <_Header__get_serialized_size>:
 800f264:	b538      	push	{r3, r4, r5, lr}
 800f266:	4604      	mov	r4, r0
 800f268:	b150      	cbz	r0, 800f280 <_Header__get_serialized_size+0x1c>
 800f26a:	2100      	movs	r1, #0
 800f26c:	f000 f82a 	bl	800f2c4 <get_serialized_size_builtin_interfaces__msg__Time>
 800f270:	2104      	movs	r1, #4
 800f272:	4605      	mov	r5, r0
 800f274:	f7fc ff74 	bl	800c160 <ucdr_alignment>
 800f278:	68e2      	ldr	r2, [r4, #12]
 800f27a:	3205      	adds	r2, #5
 800f27c:	1953      	adds	r3, r2, r5
 800f27e:	4418      	add	r0, r3
 800f280:	bd38      	pop	{r3, r4, r5, pc}
 800f282:	bf00      	nop

0800f284 <max_serialized_size_std_msgs__msg__Header>:
 800f284:	b510      	push	{r4, lr}
 800f286:	2301      	movs	r3, #1
 800f288:	4604      	mov	r4, r0
 800f28a:	7003      	strb	r3, [r0, #0]
 800f28c:	f000 f86a 	bl	800f364 <max_serialized_size_builtin_interfaces__msg__Time>
 800f290:	2300      	movs	r3, #0
 800f292:	7023      	strb	r3, [r4, #0]
 800f294:	bd10      	pop	{r4, pc}
 800f296:	bf00      	nop

0800f298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f298:	4800      	ldr	r0, [pc, #0]	@ (800f29c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800f29a:	4770      	bx	lr
 800f29c:	2000062c 	.word	0x2000062c

0800f2a0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800f2a0:	f008 b954 	b.w	801754c <builtin_interfaces__msg__Time__init>

0800f2a4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800f2a4:	f008 b956 	b.w	8017554 <builtin_interfaces__msg__Time__fini>

0800f2a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f2a8:	4b04      	ldr	r3, [pc, #16]	@ (800f2bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	b10a      	cbz	r2, 800f2b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800f2ae:	4803      	ldr	r0, [pc, #12]	@ (800f2bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f2b0:	4770      	bx	lr
 800f2b2:	4a03      	ldr	r2, [pc, #12]	@ (800f2c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800f2b4:	4801      	ldr	r0, [pc, #4]	@ (800f2bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f2b6:	6812      	ldr	r2, [r2, #0]
 800f2b8:	601a      	str	r2, [r3, #0]
 800f2ba:	4770      	bx	lr
 800f2bc:	200006cc 	.word	0x200006cc
 800f2c0:	200003b8 	.word	0x200003b8

0800f2c4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800f2c4:	b180      	cbz	r0, 800f2e8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800f2c6:	b538      	push	{r3, r4, r5, lr}
 800f2c8:	460d      	mov	r5, r1
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	2104      	movs	r1, #4
 800f2ce:	f7fc ff47 	bl	800c160 <ucdr_alignment>
 800f2d2:	1d2b      	adds	r3, r5, #4
 800f2d4:	181c      	adds	r4, r3, r0
 800f2d6:	2104      	movs	r1, #4
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f7fc ff41 	bl	800c160 <ucdr_alignment>
 800f2de:	f1c5 0504 	rsb	r5, r5, #4
 800f2e2:	4428      	add	r0, r5
 800f2e4:	4420      	add	r0, r4
 800f2e6:	bd38      	pop	{r3, r4, r5, pc}
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop

0800f2ec <_Time__cdr_deserialize>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	460c      	mov	r4, r1
 800f2f0:	b141      	cbz	r1, 800f304 <_Time__cdr_deserialize+0x18>
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	f7fc fb16 	bl	800b924 <ucdr_deserialize_int32_t>
 800f2f8:	1d21      	adds	r1, r4, #4
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f300:	f7fb bf8e 	b.w	800b220 <ucdr_deserialize_uint32_t>
 800f304:	4608      	mov	r0, r1
 800f306:	bd38      	pop	{r3, r4, r5, pc}

0800f308 <_Time__cdr_serialize>:
 800f308:	b160      	cbz	r0, 800f324 <_Time__cdr_serialize+0x1c>
 800f30a:	b538      	push	{r3, r4, r5, lr}
 800f30c:	460d      	mov	r5, r1
 800f30e:	4604      	mov	r4, r0
 800f310:	6801      	ldr	r1, [r0, #0]
 800f312:	4628      	mov	r0, r5
 800f314:	f7fc fa6e 	bl	800b7f4 <ucdr_serialize_int32_t>
 800f318:	6861      	ldr	r1, [r4, #4]
 800f31a:	4628      	mov	r0, r5
 800f31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f320:	f7fb be4e 	b.w	800afc0 <ucdr_serialize_uint32_t>
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop

0800f328 <_Time__get_serialized_size>:
 800f328:	b160      	cbz	r0, 800f344 <_Time__get_serialized_size+0x1c>
 800f32a:	b510      	push	{r4, lr}
 800f32c:	2104      	movs	r1, #4
 800f32e:	2000      	movs	r0, #0
 800f330:	f7fc ff16 	bl	800c160 <ucdr_alignment>
 800f334:	1d04      	adds	r4, r0, #4
 800f336:	2104      	movs	r1, #4
 800f338:	4620      	mov	r0, r4
 800f33a:	f7fc ff11 	bl	800c160 <ucdr_alignment>
 800f33e:	3004      	adds	r0, #4
 800f340:	4420      	add	r0, r4
 800f342:	bd10      	pop	{r4, pc}
 800f344:	4770      	bx	lr
 800f346:	bf00      	nop

0800f348 <_Time__max_serialized_size>:
 800f348:	b510      	push	{r4, lr}
 800f34a:	2104      	movs	r1, #4
 800f34c:	2000      	movs	r0, #0
 800f34e:	f7fc ff07 	bl	800c160 <ucdr_alignment>
 800f352:	1d04      	adds	r4, r0, #4
 800f354:	2104      	movs	r1, #4
 800f356:	4620      	mov	r0, r4
 800f358:	f7fc ff02 	bl	800c160 <ucdr_alignment>
 800f35c:	3004      	adds	r0, #4
 800f35e:	4420      	add	r0, r4
 800f360:	bd10      	pop	{r4, pc}
 800f362:	bf00      	nop

0800f364 <max_serialized_size_builtin_interfaces__msg__Time>:
 800f364:	b538      	push	{r3, r4, r5, lr}
 800f366:	460c      	mov	r4, r1
 800f368:	2301      	movs	r3, #1
 800f36a:	7003      	strb	r3, [r0, #0]
 800f36c:	2104      	movs	r1, #4
 800f36e:	4620      	mov	r0, r4
 800f370:	f7fc fef6 	bl	800c160 <ucdr_alignment>
 800f374:	1d25      	adds	r5, r4, #4
 800f376:	4405      	add	r5, r0
 800f378:	2104      	movs	r1, #4
 800f37a:	4628      	mov	r0, r5
 800f37c:	f7fc fef0 	bl	800c160 <ucdr_alignment>
 800f380:	f1c4 0404 	rsb	r4, r4, #4
 800f384:	4420      	add	r0, r4
 800f386:	4428      	add	r0, r5
 800f388:	bd38      	pop	{r3, r4, r5, pc}
 800f38a:	bf00      	nop

0800f38c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f38c:	4800      	ldr	r0, [pc, #0]	@ (800f390 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800f38e:	4770      	bx	lr
 800f390:	200006d8 	.word	0x200006d8

0800f394 <geometry_msgs__msg__Twist__init>:
 800f394:	b570      	push	{r4, r5, r6, lr}
 800f396:	4605      	mov	r5, r0
 800f398:	b1a8      	cbz	r0, 800f3c6 <geometry_msgs__msg__Twist__init+0x32>
 800f39a:	f000 f82b 	bl	800f3f4 <geometry_msgs__msg__Vector3__init>
 800f39e:	4604      	mov	r4, r0
 800f3a0:	b140      	cbz	r0, 800f3b4 <geometry_msgs__msg__Twist__init+0x20>
 800f3a2:	f105 0618 	add.w	r6, r5, #24
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	f000 f824 	bl	800f3f4 <geometry_msgs__msg__Vector3__init>
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	b168      	cbz	r0, 800f3cc <geometry_msgs__msg__Twist__init+0x38>
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	bd70      	pop	{r4, r5, r6, pc}
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	f000 f821 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 800f3ba:	f105 0018 	add.w	r0, r5, #24
 800f3be:	f000 f81d 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	bd70      	pop	{r4, r5, r6, pc}
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	bd70      	pop	{r4, r5, r6, pc}
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	f000 f815 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 800f3d2:	4630      	mov	r0, r6
 800f3d4:	f000 f812 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 800f3d8:	e7ea      	b.n	800f3b0 <geometry_msgs__msg__Twist__init+0x1c>
 800f3da:	bf00      	nop

0800f3dc <geometry_msgs__msg__Twist__fini>:
 800f3dc:	b148      	cbz	r0, 800f3f2 <geometry_msgs__msg__Twist__fini+0x16>
 800f3de:	b510      	push	{r4, lr}
 800f3e0:	4604      	mov	r4, r0
 800f3e2:	f000 f80b 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 800f3e6:	f104 0018 	add.w	r0, r4, #24
 800f3ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3ee:	f000 b805 	b.w	800f3fc <geometry_msgs__msg__Vector3__fini>
 800f3f2:	4770      	bx	lr

0800f3f4 <geometry_msgs__msg__Vector3__init>:
 800f3f4:	3800      	subs	r0, #0
 800f3f6:	bf18      	it	ne
 800f3f8:	2001      	movne	r0, #1
 800f3fa:	4770      	bx	lr

0800f3fc <geometry_msgs__msg__Vector3__fini>:
 800f3fc:	4770      	bx	lr
 800f3fe:	bf00      	nop

0800f400 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800f400:	f008 b8aa 	b.w	8017558 <geometry_msgs__msg__Quaternion__init>

0800f404 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800f404:	f008 b8bc 	b.w	8017580 <geometry_msgs__msg__Quaternion__fini>

0800f408 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800f408:	4b04      	ldr	r3, [pc, #16]	@ (800f41c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	b10a      	cbz	r2, 800f412 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800f40e:	4803      	ldr	r0, [pc, #12]	@ (800f41c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800f410:	4770      	bx	lr
 800f412:	4a03      	ldr	r2, [pc, #12]	@ (800f420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800f414:	4801      	ldr	r0, [pc, #4]	@ (800f41c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800f416:	6812      	ldr	r2, [r2, #0]
 800f418:	601a      	str	r2, [r3, #0]
 800f41a:	4770      	bx	lr
 800f41c:	200007f0 	.word	0x200007f0
 800f420:	200003b8 	.word	0x200003b8

0800f424 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800f424:	b1f0      	cbz	r0, 800f464 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800f426:	b570      	push	{r4, r5, r6, lr}
 800f428:	460d      	mov	r5, r1
 800f42a:	4628      	mov	r0, r5
 800f42c:	2108      	movs	r1, #8
 800f42e:	f7fc fe97 	bl	800c160 <ucdr_alignment>
 800f432:	f105 0308 	add.w	r3, r5, #8
 800f436:	181e      	adds	r6, r3, r0
 800f438:	2108      	movs	r1, #8
 800f43a:	4630      	mov	r0, r6
 800f43c:	f7fc fe90 	bl	800c160 <ucdr_alignment>
 800f440:	f100 0408 	add.w	r4, r0, #8
 800f444:	4434      	add	r4, r6
 800f446:	2108      	movs	r1, #8
 800f448:	4620      	mov	r0, r4
 800f44a:	f7fc fe89 	bl	800c160 <ucdr_alignment>
 800f44e:	3008      	adds	r0, #8
 800f450:	4404      	add	r4, r0
 800f452:	2108      	movs	r1, #8
 800f454:	4620      	mov	r0, r4
 800f456:	f7fc fe83 	bl	800c160 <ucdr_alignment>
 800f45a:	f1c5 0508 	rsb	r5, r5, #8
 800f45e:	4428      	add	r0, r5
 800f460:	4420      	add	r0, r4
 800f462:	bd70      	pop	{r4, r5, r6, pc}
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop

0800f468 <_Quaternion__cdr_deserialize>:
 800f468:	b538      	push	{r3, r4, r5, lr}
 800f46a:	460c      	mov	r4, r1
 800f46c:	b199      	cbz	r1, 800f496 <_Quaternion__cdr_deserialize+0x2e>
 800f46e:	4605      	mov	r5, r0
 800f470:	f7fc fc8a 	bl	800bd88 <ucdr_deserialize_double>
 800f474:	f104 0108 	add.w	r1, r4, #8
 800f478:	4628      	mov	r0, r5
 800f47a:	f7fc fc85 	bl	800bd88 <ucdr_deserialize_double>
 800f47e:	f104 0110 	add.w	r1, r4, #16
 800f482:	4628      	mov	r0, r5
 800f484:	f7fc fc80 	bl	800bd88 <ucdr_deserialize_double>
 800f488:	f104 0118 	add.w	r1, r4, #24
 800f48c:	4628      	mov	r0, r5
 800f48e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f492:	f7fc bc79 	b.w	800bd88 <ucdr_deserialize_double>
 800f496:	4608      	mov	r0, r1
 800f498:	bd38      	pop	{r3, r4, r5, pc}
 800f49a:	bf00      	nop

0800f49c <_Quaternion__cdr_serialize>:
 800f49c:	b1c0      	cbz	r0, 800f4d0 <_Quaternion__cdr_serialize+0x34>
 800f49e:	b538      	push	{r3, r4, r5, lr}
 800f4a0:	ed90 0b00 	vldr	d0, [r0]
 800f4a4:	460d      	mov	r5, r1
 800f4a6:	4604      	mov	r4, r0
 800f4a8:	4608      	mov	r0, r1
 800f4aa:	f7fc facb 	bl	800ba44 <ucdr_serialize_double>
 800f4ae:	ed94 0b02 	vldr	d0, [r4, #8]
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f7fc fac6 	bl	800ba44 <ucdr_serialize_double>
 800f4b8:	ed94 0b04 	vldr	d0, [r4, #16]
 800f4bc:	4628      	mov	r0, r5
 800f4be:	f7fc fac1 	bl	800ba44 <ucdr_serialize_double>
 800f4c2:	ed94 0b06 	vldr	d0, [r4, #24]
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4cc:	f7fc baba 	b.w	800ba44 <ucdr_serialize_double>
 800f4d0:	4770      	bx	lr
 800f4d2:	bf00      	nop

0800f4d4 <_Quaternion__get_serialized_size>:
 800f4d4:	b1d0      	cbz	r0, 800f50c <_Quaternion__get_serialized_size+0x38>
 800f4d6:	b538      	push	{r3, r4, r5, lr}
 800f4d8:	2108      	movs	r1, #8
 800f4da:	2000      	movs	r0, #0
 800f4dc:	f7fc fe40 	bl	800c160 <ucdr_alignment>
 800f4e0:	f100 0508 	add.w	r5, r0, #8
 800f4e4:	2108      	movs	r1, #8
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	f7fc fe3a 	bl	800c160 <ucdr_alignment>
 800f4ec:	f100 0408 	add.w	r4, r0, #8
 800f4f0:	442c      	add	r4, r5
 800f4f2:	2108      	movs	r1, #8
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f7fc fe33 	bl	800c160 <ucdr_alignment>
 800f4fa:	3008      	adds	r0, #8
 800f4fc:	4404      	add	r4, r0
 800f4fe:	2108      	movs	r1, #8
 800f500:	4620      	mov	r0, r4
 800f502:	f7fc fe2d 	bl	800c160 <ucdr_alignment>
 800f506:	3008      	adds	r0, #8
 800f508:	4420      	add	r0, r4
 800f50a:	bd38      	pop	{r3, r4, r5, pc}
 800f50c:	4770      	bx	lr
 800f50e:	bf00      	nop

0800f510 <_Quaternion__max_serialized_size>:
 800f510:	b538      	push	{r3, r4, r5, lr}
 800f512:	2108      	movs	r1, #8
 800f514:	2000      	movs	r0, #0
 800f516:	f7fc fe23 	bl	800c160 <ucdr_alignment>
 800f51a:	f100 0508 	add.w	r5, r0, #8
 800f51e:	2108      	movs	r1, #8
 800f520:	4628      	mov	r0, r5
 800f522:	f7fc fe1d 	bl	800c160 <ucdr_alignment>
 800f526:	f100 0408 	add.w	r4, r0, #8
 800f52a:	442c      	add	r4, r5
 800f52c:	2108      	movs	r1, #8
 800f52e:	4620      	mov	r0, r4
 800f530:	f7fc fe16 	bl	800c160 <ucdr_alignment>
 800f534:	3008      	adds	r0, #8
 800f536:	4404      	add	r4, r0
 800f538:	2108      	movs	r1, #8
 800f53a:	4620      	mov	r0, r4
 800f53c:	f7fc fe10 	bl	800c160 <ucdr_alignment>
 800f540:	3008      	adds	r0, #8
 800f542:	4420      	add	r0, r4
 800f544:	bd38      	pop	{r3, r4, r5, pc}
 800f546:	bf00      	nop

0800f548 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800f548:	b570      	push	{r4, r5, r6, lr}
 800f54a:	2301      	movs	r3, #1
 800f54c:	460c      	mov	r4, r1
 800f54e:	7003      	strb	r3, [r0, #0]
 800f550:	2108      	movs	r1, #8
 800f552:	4620      	mov	r0, r4
 800f554:	f7fc fe04 	bl	800c160 <ucdr_alignment>
 800f558:	f104 0508 	add.w	r5, r4, #8
 800f55c:	1946      	adds	r6, r0, r5
 800f55e:	2108      	movs	r1, #8
 800f560:	4630      	mov	r0, r6
 800f562:	f7fc fdfd 	bl	800c160 <ucdr_alignment>
 800f566:	f100 0508 	add.w	r5, r0, #8
 800f56a:	4435      	add	r5, r6
 800f56c:	2108      	movs	r1, #8
 800f56e:	4628      	mov	r0, r5
 800f570:	f7fc fdf6 	bl	800c160 <ucdr_alignment>
 800f574:	3008      	adds	r0, #8
 800f576:	4405      	add	r5, r0
 800f578:	2108      	movs	r1, #8
 800f57a:	4628      	mov	r0, r5
 800f57c:	f7fc fdf0 	bl	800c160 <ucdr_alignment>
 800f580:	f1c4 0408 	rsb	r4, r4, #8
 800f584:	4420      	add	r0, r4
 800f586:	4428      	add	r0, r5
 800f588:	bd70      	pop	{r4, r5, r6, pc}
 800f58a:	bf00      	nop

0800f58c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800f58c:	4800      	ldr	r0, [pc, #0]	@ (800f590 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800f58e:	4770      	bx	lr
 800f590:	200007fc 	.word	0x200007fc

0800f594 <imu_interfaces__srv__ImuCalibration_Request__init>:
 800f594:	b538      	push	{r3, r4, r5, lr}
 800f596:	4604      	mov	r4, r0
 800f598:	b128      	cbz	r0, 800f5a6 <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 800f59a:	f007 ff3d 	bl	8017418 <sensor_msgs__msg__Imu__init>
 800f59e:	4605      	mov	r5, r0
 800f5a0:	b120      	cbz	r0, 800f5ac <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	bd38      	pop	{r3, r4, r5, pc}
 800f5a6:	4605      	mov	r5, r0
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	bd38      	pop	{r3, r4, r5, pc}
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f007 ff89 	bl	80174c4 <sensor_msgs__msg__Imu__fini>
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	bd38      	pop	{r3, r4, r5, pc}
 800f5b6:	bf00      	nop

0800f5b8 <imu_interfaces__srv__ImuCalibration_Request__fini>:
 800f5b8:	b108      	cbz	r0, 800f5be <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 800f5ba:	f007 bf83 	b.w	80174c4 <sensor_msgs__msg__Imu__fini>
 800f5be:	4770      	bx	lr

0800f5c0 <imu_interfaces__srv__ImuCalibration_Response__init>:
 800f5c0:	3800      	subs	r0, #0
 800f5c2:	bf18      	it	ne
 800f5c4:	2001      	movne	r0, #1
 800f5c6:	4770      	bx	lr

0800f5c8 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop

0800f5cc <ucdr_serialize_endian_array_char>:
 800f5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	461f      	mov	r7, r3
 800f5d4:	4605      	mov	r5, r0
 800f5d6:	4690      	mov	r8, r2
 800f5d8:	f7fc fd6a 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800f5dc:	b9e0      	cbnz	r0, 800f618 <ucdr_serialize_endian_array_char+0x4c>
 800f5de:	463e      	mov	r6, r7
 800f5e0:	e009      	b.n	800f5f6 <ucdr_serialize_endian_array_char+0x2a>
 800f5e2:	68a8      	ldr	r0, [r5, #8]
 800f5e4:	f009 ff0f 	bl	8019406 <memcpy>
 800f5e8:	68ab      	ldr	r3, [r5, #8]
 800f5ea:	6928      	ldr	r0, [r5, #16]
 800f5ec:	4423      	add	r3, r4
 800f5ee:	4420      	add	r0, r4
 800f5f0:	1b36      	subs	r6, r6, r4
 800f5f2:	60ab      	str	r3, [r5, #8]
 800f5f4:	6128      	str	r0, [r5, #16]
 800f5f6:	4631      	mov	r1, r6
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	f7fc fde0 	bl	800c1c0 <ucdr_check_final_buffer_behavior_array>
 800f600:	1bb9      	subs	r1, r7, r6
 800f602:	4441      	add	r1, r8
 800f604:	4604      	mov	r4, r0
 800f606:	4602      	mov	r2, r0
 800f608:	2800      	cmp	r0, #0
 800f60a:	d1ea      	bne.n	800f5e2 <ucdr_serialize_endian_array_char+0x16>
 800f60c:	2301      	movs	r3, #1
 800f60e:	7da8      	ldrb	r0, [r5, #22]
 800f610:	756b      	strb	r3, [r5, #21]
 800f612:	4058      	eors	r0, r3
 800f614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f618:	463a      	mov	r2, r7
 800f61a:	68a8      	ldr	r0, [r5, #8]
 800f61c:	4641      	mov	r1, r8
 800f61e:	f009 fef2 	bl	8019406 <memcpy>
 800f622:	68aa      	ldr	r2, [r5, #8]
 800f624:	692b      	ldr	r3, [r5, #16]
 800f626:	443a      	add	r2, r7
 800f628:	443b      	add	r3, r7
 800f62a:	60aa      	str	r2, [r5, #8]
 800f62c:	612b      	str	r3, [r5, #16]
 800f62e:	e7ed      	b.n	800f60c <ucdr_serialize_endian_array_char+0x40>

0800f630 <ucdr_deserialize_endian_array_char>:
 800f630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f634:	4619      	mov	r1, r3
 800f636:	461f      	mov	r7, r3
 800f638:	4605      	mov	r5, r0
 800f63a:	4690      	mov	r8, r2
 800f63c:	f7fc fd38 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800f640:	b9e0      	cbnz	r0, 800f67c <ucdr_deserialize_endian_array_char+0x4c>
 800f642:	463e      	mov	r6, r7
 800f644:	e009      	b.n	800f65a <ucdr_deserialize_endian_array_char+0x2a>
 800f646:	68a9      	ldr	r1, [r5, #8]
 800f648:	f009 fedd 	bl	8019406 <memcpy>
 800f64c:	68ab      	ldr	r3, [r5, #8]
 800f64e:	6928      	ldr	r0, [r5, #16]
 800f650:	4423      	add	r3, r4
 800f652:	4420      	add	r0, r4
 800f654:	1b36      	subs	r6, r6, r4
 800f656:	60ab      	str	r3, [r5, #8]
 800f658:	6128      	str	r0, [r5, #16]
 800f65a:	2201      	movs	r2, #1
 800f65c:	4631      	mov	r1, r6
 800f65e:	4628      	mov	r0, r5
 800f660:	f7fc fdae 	bl	800c1c0 <ucdr_check_final_buffer_behavior_array>
 800f664:	4604      	mov	r4, r0
 800f666:	1bb8      	subs	r0, r7, r6
 800f668:	4440      	add	r0, r8
 800f66a:	4622      	mov	r2, r4
 800f66c:	2c00      	cmp	r4, #0
 800f66e:	d1ea      	bne.n	800f646 <ucdr_deserialize_endian_array_char+0x16>
 800f670:	2301      	movs	r3, #1
 800f672:	7da8      	ldrb	r0, [r5, #22]
 800f674:	756b      	strb	r3, [r5, #21]
 800f676:	4058      	eors	r0, r3
 800f678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f67c:	463a      	mov	r2, r7
 800f67e:	68a9      	ldr	r1, [r5, #8]
 800f680:	4640      	mov	r0, r8
 800f682:	f009 fec0 	bl	8019406 <memcpy>
 800f686:	68aa      	ldr	r2, [r5, #8]
 800f688:	692b      	ldr	r3, [r5, #16]
 800f68a:	443a      	add	r2, r7
 800f68c:	443b      	add	r3, r7
 800f68e:	60aa      	str	r2, [r5, #8]
 800f690:	612b      	str	r3, [r5, #16]
 800f692:	e7ed      	b.n	800f670 <ucdr_deserialize_endian_array_char+0x40>

0800f694 <ucdr_serialize_array_uint8_t>:
 800f694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f698:	4688      	mov	r8, r1
 800f69a:	4611      	mov	r1, r2
 800f69c:	4617      	mov	r7, r2
 800f69e:	4605      	mov	r5, r0
 800f6a0:	f7fc fd06 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800f6a4:	b9e0      	cbnz	r0, 800f6e0 <ucdr_serialize_array_uint8_t+0x4c>
 800f6a6:	463e      	mov	r6, r7
 800f6a8:	e009      	b.n	800f6be <ucdr_serialize_array_uint8_t+0x2a>
 800f6aa:	68a8      	ldr	r0, [r5, #8]
 800f6ac:	f009 feab 	bl	8019406 <memcpy>
 800f6b0:	68aa      	ldr	r2, [r5, #8]
 800f6b2:	692b      	ldr	r3, [r5, #16]
 800f6b4:	4422      	add	r2, r4
 800f6b6:	4423      	add	r3, r4
 800f6b8:	1b36      	subs	r6, r6, r4
 800f6ba:	60aa      	str	r2, [r5, #8]
 800f6bc:	612b      	str	r3, [r5, #16]
 800f6be:	4631      	mov	r1, r6
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	f7fc fd7c 	bl	800c1c0 <ucdr_check_final_buffer_behavior_array>
 800f6c8:	1bb9      	subs	r1, r7, r6
 800f6ca:	4441      	add	r1, r8
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	d1ea      	bne.n	800f6aa <ucdr_serialize_array_uint8_t+0x16>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	7da8      	ldrb	r0, [r5, #22]
 800f6d8:	756b      	strb	r3, [r5, #21]
 800f6da:	4058      	eors	r0, r3
 800f6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6e0:	463a      	mov	r2, r7
 800f6e2:	68a8      	ldr	r0, [r5, #8]
 800f6e4:	4641      	mov	r1, r8
 800f6e6:	f009 fe8e 	bl	8019406 <memcpy>
 800f6ea:	68aa      	ldr	r2, [r5, #8]
 800f6ec:	692b      	ldr	r3, [r5, #16]
 800f6ee:	443a      	add	r2, r7
 800f6f0:	443b      	add	r3, r7
 800f6f2:	60aa      	str	r2, [r5, #8]
 800f6f4:	612b      	str	r3, [r5, #16]
 800f6f6:	e7ed      	b.n	800f6d4 <ucdr_serialize_array_uint8_t+0x40>

0800f6f8 <ucdr_serialize_endian_array_uint8_t>:
 800f6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	461f      	mov	r7, r3
 800f700:	4605      	mov	r5, r0
 800f702:	4690      	mov	r8, r2
 800f704:	f7fc fcd4 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800f708:	b9e0      	cbnz	r0, 800f744 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f70a:	463e      	mov	r6, r7
 800f70c:	e009      	b.n	800f722 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800f70e:	68a8      	ldr	r0, [r5, #8]
 800f710:	f009 fe79 	bl	8019406 <memcpy>
 800f714:	68ab      	ldr	r3, [r5, #8]
 800f716:	6928      	ldr	r0, [r5, #16]
 800f718:	4423      	add	r3, r4
 800f71a:	4420      	add	r0, r4
 800f71c:	1b36      	subs	r6, r6, r4
 800f71e:	60ab      	str	r3, [r5, #8]
 800f720:	6128      	str	r0, [r5, #16]
 800f722:	4631      	mov	r1, r6
 800f724:	2201      	movs	r2, #1
 800f726:	4628      	mov	r0, r5
 800f728:	f7fc fd4a 	bl	800c1c0 <ucdr_check_final_buffer_behavior_array>
 800f72c:	1bb9      	subs	r1, r7, r6
 800f72e:	4441      	add	r1, r8
 800f730:	4604      	mov	r4, r0
 800f732:	4602      	mov	r2, r0
 800f734:	2800      	cmp	r0, #0
 800f736:	d1ea      	bne.n	800f70e <ucdr_serialize_endian_array_uint8_t+0x16>
 800f738:	2301      	movs	r3, #1
 800f73a:	7da8      	ldrb	r0, [r5, #22]
 800f73c:	756b      	strb	r3, [r5, #21]
 800f73e:	4058      	eors	r0, r3
 800f740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f744:	463a      	mov	r2, r7
 800f746:	68a8      	ldr	r0, [r5, #8]
 800f748:	4641      	mov	r1, r8
 800f74a:	f009 fe5c 	bl	8019406 <memcpy>
 800f74e:	68aa      	ldr	r2, [r5, #8]
 800f750:	692b      	ldr	r3, [r5, #16]
 800f752:	443a      	add	r2, r7
 800f754:	443b      	add	r3, r7
 800f756:	60aa      	str	r2, [r5, #8]
 800f758:	612b      	str	r3, [r5, #16]
 800f75a:	e7ed      	b.n	800f738 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f75c <ucdr_deserialize_array_uint8_t>:
 800f75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f760:	4688      	mov	r8, r1
 800f762:	4611      	mov	r1, r2
 800f764:	4617      	mov	r7, r2
 800f766:	4605      	mov	r5, r0
 800f768:	f7fc fca2 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800f76c:	b9e0      	cbnz	r0, 800f7a8 <ucdr_deserialize_array_uint8_t+0x4c>
 800f76e:	463e      	mov	r6, r7
 800f770:	e009      	b.n	800f786 <ucdr_deserialize_array_uint8_t+0x2a>
 800f772:	68a9      	ldr	r1, [r5, #8]
 800f774:	f009 fe47 	bl	8019406 <memcpy>
 800f778:	68aa      	ldr	r2, [r5, #8]
 800f77a:	692b      	ldr	r3, [r5, #16]
 800f77c:	4422      	add	r2, r4
 800f77e:	4423      	add	r3, r4
 800f780:	1b36      	subs	r6, r6, r4
 800f782:	60aa      	str	r2, [r5, #8]
 800f784:	612b      	str	r3, [r5, #16]
 800f786:	2201      	movs	r2, #1
 800f788:	4631      	mov	r1, r6
 800f78a:	4628      	mov	r0, r5
 800f78c:	f7fc fd18 	bl	800c1c0 <ucdr_check_final_buffer_behavior_array>
 800f790:	4604      	mov	r4, r0
 800f792:	1bb8      	subs	r0, r7, r6
 800f794:	4440      	add	r0, r8
 800f796:	4622      	mov	r2, r4
 800f798:	2c00      	cmp	r4, #0
 800f79a:	d1ea      	bne.n	800f772 <ucdr_deserialize_array_uint8_t+0x16>
 800f79c:	2301      	movs	r3, #1
 800f79e:	7da8      	ldrb	r0, [r5, #22]
 800f7a0:	756b      	strb	r3, [r5, #21]
 800f7a2:	4058      	eors	r0, r3
 800f7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a8:	463a      	mov	r2, r7
 800f7aa:	68a9      	ldr	r1, [r5, #8]
 800f7ac:	4640      	mov	r0, r8
 800f7ae:	f009 fe2a 	bl	8019406 <memcpy>
 800f7b2:	68aa      	ldr	r2, [r5, #8]
 800f7b4:	692b      	ldr	r3, [r5, #16]
 800f7b6:	443a      	add	r2, r7
 800f7b8:	443b      	add	r3, r7
 800f7ba:	60aa      	str	r2, [r5, #8]
 800f7bc:	612b      	str	r3, [r5, #16]
 800f7be:	e7ed      	b.n	800f79c <ucdr_deserialize_array_uint8_t+0x40>

0800f7c0 <ucdr_deserialize_endian_array_uint8_t>:
 800f7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	461f      	mov	r7, r3
 800f7c8:	4605      	mov	r5, r0
 800f7ca:	4690      	mov	r8, r2
 800f7cc:	f7fc fc70 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800f7d0:	b9e0      	cbnz	r0, 800f80c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800f7d2:	463e      	mov	r6, r7
 800f7d4:	e009      	b.n	800f7ea <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800f7d6:	68a9      	ldr	r1, [r5, #8]
 800f7d8:	f009 fe15 	bl	8019406 <memcpy>
 800f7dc:	68ab      	ldr	r3, [r5, #8]
 800f7de:	6928      	ldr	r0, [r5, #16]
 800f7e0:	4423      	add	r3, r4
 800f7e2:	4420      	add	r0, r4
 800f7e4:	1b36      	subs	r6, r6, r4
 800f7e6:	60ab      	str	r3, [r5, #8]
 800f7e8:	6128      	str	r0, [r5, #16]
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	4631      	mov	r1, r6
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f7fc fce6 	bl	800c1c0 <ucdr_check_final_buffer_behavior_array>
 800f7f4:	4604      	mov	r4, r0
 800f7f6:	1bb8      	subs	r0, r7, r6
 800f7f8:	4440      	add	r0, r8
 800f7fa:	4622      	mov	r2, r4
 800f7fc:	2c00      	cmp	r4, #0
 800f7fe:	d1ea      	bne.n	800f7d6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f800:	2301      	movs	r3, #1
 800f802:	7da8      	ldrb	r0, [r5, #22]
 800f804:	756b      	strb	r3, [r5, #21]
 800f806:	4058      	eors	r0, r3
 800f808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f80c:	463a      	mov	r2, r7
 800f80e:	68a9      	ldr	r1, [r5, #8]
 800f810:	4640      	mov	r0, r8
 800f812:	f009 fdf8 	bl	8019406 <memcpy>
 800f816:	68aa      	ldr	r2, [r5, #8]
 800f818:	692b      	ldr	r3, [r5, #16]
 800f81a:	443a      	add	r2, r7
 800f81c:	443b      	add	r3, r7
 800f81e:	60aa      	str	r2, [r5, #8]
 800f820:	612b      	str	r3, [r5, #16]
 800f822:	e7ed      	b.n	800f800 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800f824 <ucdr_serialize_array_double>:
 800f824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f828:	460e      	mov	r6, r1
 800f82a:	2108      	movs	r1, #8
 800f82c:	4604      	mov	r4, r0
 800f82e:	4617      	mov	r7, r2
 800f830:	f7fc fc9e 	bl	800c170 <ucdr_buffer_alignment>
 800f834:	4601      	mov	r1, r0
 800f836:	4620      	mov	r0, r4
 800f838:	7d65      	ldrb	r5, [r4, #21]
 800f83a:	f7fc fcdd 	bl	800c1f8 <ucdr_advance_buffer>
 800f83e:	7d21      	ldrb	r1, [r4, #20]
 800f840:	7565      	strb	r5, [r4, #21]
 800f842:	2901      	cmp	r1, #1
 800f844:	d010      	beq.n	800f868 <ucdr_serialize_array_double+0x44>
 800f846:	b157      	cbz	r7, 800f85e <ucdr_serialize_array_double+0x3a>
 800f848:	2500      	movs	r5, #0
 800f84a:	e000      	b.n	800f84e <ucdr_serialize_array_double+0x2a>
 800f84c:	7d21      	ldrb	r1, [r4, #20]
 800f84e:	ecb6 0b02 	vldmia	r6!, {d0}
 800f852:	4620      	mov	r0, r4
 800f854:	3501      	adds	r5, #1
 800f856:	f7fc f9c5 	bl	800bbe4 <ucdr_serialize_endian_double>
 800f85a:	42af      	cmp	r7, r5
 800f85c:	d1f6      	bne.n	800f84c <ucdr_serialize_array_double+0x28>
 800f85e:	7da0      	ldrb	r0, [r4, #22]
 800f860:	f080 0001 	eor.w	r0, r0, #1
 800f864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f868:	00ff      	lsls	r7, r7, #3
 800f86a:	4639      	mov	r1, r7
 800f86c:	4620      	mov	r0, r4
 800f86e:	f7fc fc1f 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800f872:	b9f8      	cbnz	r0, 800f8b4 <ucdr_serialize_array_double+0x90>
 800f874:	46b8      	mov	r8, r7
 800f876:	e00a      	b.n	800f88e <ucdr_serialize_array_double+0x6a>
 800f878:	68a0      	ldr	r0, [r4, #8]
 800f87a:	f009 fdc4 	bl	8019406 <memcpy>
 800f87e:	68a2      	ldr	r2, [r4, #8]
 800f880:	6923      	ldr	r3, [r4, #16]
 800f882:	442a      	add	r2, r5
 800f884:	442b      	add	r3, r5
 800f886:	eba8 0805 	sub.w	r8, r8, r5
 800f88a:	60a2      	str	r2, [r4, #8]
 800f88c:	6123      	str	r3, [r4, #16]
 800f88e:	4641      	mov	r1, r8
 800f890:	2208      	movs	r2, #8
 800f892:	4620      	mov	r0, r4
 800f894:	f7fc fc94 	bl	800c1c0 <ucdr_check_final_buffer_behavior_array>
 800f898:	eba7 0108 	sub.w	r1, r7, r8
 800f89c:	4431      	add	r1, r6
 800f89e:	4605      	mov	r5, r0
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	d1e8      	bne.n	800f878 <ucdr_serialize_array_double+0x54>
 800f8a6:	7da0      	ldrb	r0, [r4, #22]
 800f8a8:	2308      	movs	r3, #8
 800f8aa:	7563      	strb	r3, [r4, #21]
 800f8ac:	f080 0001 	eor.w	r0, r0, #1
 800f8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b4:	463a      	mov	r2, r7
 800f8b6:	68a0      	ldr	r0, [r4, #8]
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	f009 fda4 	bl	8019406 <memcpy>
 800f8be:	68a2      	ldr	r2, [r4, #8]
 800f8c0:	6923      	ldr	r3, [r4, #16]
 800f8c2:	443a      	add	r2, r7
 800f8c4:	441f      	add	r7, r3
 800f8c6:	60a2      	str	r2, [r4, #8]
 800f8c8:	6127      	str	r7, [r4, #16]
 800f8ca:	e7ec      	b.n	800f8a6 <ucdr_serialize_array_double+0x82>

0800f8cc <ucdr_deserialize_array_double>:
 800f8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d0:	460e      	mov	r6, r1
 800f8d2:	2108      	movs	r1, #8
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	4617      	mov	r7, r2
 800f8d8:	f7fc fc4a 	bl	800c170 <ucdr_buffer_alignment>
 800f8dc:	4601      	mov	r1, r0
 800f8de:	4620      	mov	r0, r4
 800f8e0:	7d65      	ldrb	r5, [r4, #21]
 800f8e2:	f7fc fc89 	bl	800c1f8 <ucdr_advance_buffer>
 800f8e6:	7d21      	ldrb	r1, [r4, #20]
 800f8e8:	7565      	strb	r5, [r4, #21]
 800f8ea:	2901      	cmp	r1, #1
 800f8ec:	d011      	beq.n	800f912 <ucdr_deserialize_array_double+0x46>
 800f8ee:	b15f      	cbz	r7, 800f908 <ucdr_deserialize_array_double+0x3c>
 800f8f0:	2500      	movs	r5, #0
 800f8f2:	e000      	b.n	800f8f6 <ucdr_deserialize_array_double+0x2a>
 800f8f4:	7d21      	ldrb	r1, [r4, #20]
 800f8f6:	4632      	mov	r2, r6
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	3501      	adds	r5, #1
 800f8fc:	f7fc fb0a 	bl	800bf14 <ucdr_deserialize_endian_double>
 800f900:	42af      	cmp	r7, r5
 800f902:	f106 0608 	add.w	r6, r6, #8
 800f906:	d1f5      	bne.n	800f8f4 <ucdr_deserialize_array_double+0x28>
 800f908:	7da0      	ldrb	r0, [r4, #22]
 800f90a:	f080 0001 	eor.w	r0, r0, #1
 800f90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f912:	00ff      	lsls	r7, r7, #3
 800f914:	4639      	mov	r1, r7
 800f916:	4620      	mov	r0, r4
 800f918:	f7fc fbca 	bl	800c0b0 <ucdr_check_buffer_available_for>
 800f91c:	b9f8      	cbnz	r0, 800f95e <ucdr_deserialize_array_double+0x92>
 800f91e:	46b8      	mov	r8, r7
 800f920:	e00a      	b.n	800f938 <ucdr_deserialize_array_double+0x6c>
 800f922:	68a1      	ldr	r1, [r4, #8]
 800f924:	f009 fd6f 	bl	8019406 <memcpy>
 800f928:	68a2      	ldr	r2, [r4, #8]
 800f92a:	6923      	ldr	r3, [r4, #16]
 800f92c:	442a      	add	r2, r5
 800f92e:	442b      	add	r3, r5
 800f930:	eba8 0805 	sub.w	r8, r8, r5
 800f934:	60a2      	str	r2, [r4, #8]
 800f936:	6123      	str	r3, [r4, #16]
 800f938:	2208      	movs	r2, #8
 800f93a:	4641      	mov	r1, r8
 800f93c:	4620      	mov	r0, r4
 800f93e:	f7fc fc3f 	bl	800c1c0 <ucdr_check_final_buffer_behavior_array>
 800f942:	4605      	mov	r5, r0
 800f944:	eba7 0008 	sub.w	r0, r7, r8
 800f948:	4430      	add	r0, r6
 800f94a:	462a      	mov	r2, r5
 800f94c:	2d00      	cmp	r5, #0
 800f94e:	d1e8      	bne.n	800f922 <ucdr_deserialize_array_double+0x56>
 800f950:	7da0      	ldrb	r0, [r4, #22]
 800f952:	2308      	movs	r3, #8
 800f954:	7563      	strb	r3, [r4, #21]
 800f956:	f080 0001 	eor.w	r0, r0, #1
 800f95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f95e:	463a      	mov	r2, r7
 800f960:	68a1      	ldr	r1, [r4, #8]
 800f962:	4630      	mov	r0, r6
 800f964:	f009 fd4f 	bl	8019406 <memcpy>
 800f968:	68a2      	ldr	r2, [r4, #8]
 800f96a:	6923      	ldr	r3, [r4, #16]
 800f96c:	443a      	add	r2, r7
 800f96e:	441f      	add	r7, r3
 800f970:	60a2      	str	r2, [r4, #8]
 800f972:	6127      	str	r7, [r4, #16]
 800f974:	e7ec      	b.n	800f950 <ucdr_deserialize_array_double+0x84>
 800f976:	bf00      	nop

0800f978 <ucdr_serialize_sequence_char>:
 800f978:	b570      	push	{r4, r5, r6, lr}
 800f97a:	4615      	mov	r5, r2
 800f97c:	460e      	mov	r6, r1
 800f97e:	7d01      	ldrb	r1, [r0, #20]
 800f980:	4604      	mov	r4, r0
 800f982:	f7fb fbb5 	bl	800b0f0 <ucdr_serialize_endian_uint32_t>
 800f986:	b90d      	cbnz	r5, 800f98c <ucdr_serialize_sequence_char+0x14>
 800f988:	2001      	movs	r0, #1
 800f98a:	bd70      	pop	{r4, r5, r6, pc}
 800f98c:	7d21      	ldrb	r1, [r4, #20]
 800f98e:	462b      	mov	r3, r5
 800f990:	4632      	mov	r2, r6
 800f992:	4620      	mov	r0, r4
 800f994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f998:	f7ff be18 	b.w	800f5cc <ucdr_serialize_endian_array_char>

0800f99c <ucdr_deserialize_sequence_char>:
 800f99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a0:	461d      	mov	r5, r3
 800f9a2:	4616      	mov	r6, r2
 800f9a4:	460f      	mov	r7, r1
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	7d01      	ldrb	r1, [r0, #20]
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	f7fb fcc8 	bl	800b340 <ucdr_deserialize_endian_uint32_t>
 800f9b0:	682b      	ldr	r3, [r5, #0]
 800f9b2:	429e      	cmp	r6, r3
 800f9b4:	bf3c      	itt	cc
 800f9b6:	2201      	movcc	r2, #1
 800f9b8:	75a2      	strbcc	r2, [r4, #22]
 800f9ba:	b913      	cbnz	r3, 800f9c2 <ucdr_deserialize_sequence_char+0x26>
 800f9bc:	2001      	movs	r0, #1
 800f9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c2:	7d21      	ldrb	r1, [r4, #20]
 800f9c4:	463a      	mov	r2, r7
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9cc:	f7ff be30 	b.w	800f630 <ucdr_deserialize_endian_array_char>

0800f9d0 <ucdr_serialize_sequence_uint8_t>:
 800f9d0:	b570      	push	{r4, r5, r6, lr}
 800f9d2:	4615      	mov	r5, r2
 800f9d4:	460e      	mov	r6, r1
 800f9d6:	7d01      	ldrb	r1, [r0, #20]
 800f9d8:	4604      	mov	r4, r0
 800f9da:	f7fb fb89 	bl	800b0f0 <ucdr_serialize_endian_uint32_t>
 800f9de:	b90d      	cbnz	r5, 800f9e4 <ucdr_serialize_sequence_uint8_t+0x14>
 800f9e0:	2001      	movs	r0, #1
 800f9e2:	bd70      	pop	{r4, r5, r6, pc}
 800f9e4:	7d21      	ldrb	r1, [r4, #20]
 800f9e6:	462b      	mov	r3, r5
 800f9e8:	4632      	mov	r2, r6
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9f0:	f7ff be82 	b.w	800f6f8 <ucdr_serialize_endian_array_uint8_t>

0800f9f4 <ucdr_deserialize_sequence_uint8_t>:
 800f9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f8:	461d      	mov	r5, r3
 800f9fa:	4616      	mov	r6, r2
 800f9fc:	460f      	mov	r7, r1
 800f9fe:	461a      	mov	r2, r3
 800fa00:	7d01      	ldrb	r1, [r0, #20]
 800fa02:	4604      	mov	r4, r0
 800fa04:	f7fb fc9c 	bl	800b340 <ucdr_deserialize_endian_uint32_t>
 800fa08:	682b      	ldr	r3, [r5, #0]
 800fa0a:	429e      	cmp	r6, r3
 800fa0c:	bf3c      	itt	cc
 800fa0e:	2201      	movcc	r2, #1
 800fa10:	75a2      	strbcc	r2, [r4, #22]
 800fa12:	b913      	cbnz	r3, 800fa1a <ucdr_deserialize_sequence_uint8_t+0x26>
 800fa14:	2001      	movs	r0, #1
 800fa16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa1a:	7d21      	ldrb	r1, [r4, #20]
 800fa1c:	463a      	mov	r2, r7
 800fa1e:	4620      	mov	r0, r4
 800fa20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa24:	f7ff becc 	b.w	800f7c0 <ucdr_deserialize_endian_array_uint8_t>

0800fa28 <uxr_buffer_delete_entity>:
 800fa28:	b510      	push	{r4, lr}
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	b08e      	sub	sp, #56	@ 0x38
 800fa2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fa32:	2303      	movs	r3, #3
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	2204      	movs	r2, #4
 800fa38:	ab06      	add	r3, sp, #24
 800fa3a:	4604      	mov	r4, r0
 800fa3c:	9103      	str	r1, [sp, #12]
 800fa3e:	f001 fb3d 	bl	80110bc <uxr_prepare_stream_to_write_submessage>
 800fa42:	b918      	cbnz	r0, 800fa4c <uxr_buffer_delete_entity+0x24>
 800fa44:	4604      	mov	r4, r0
 800fa46:	4620      	mov	r0, r4
 800fa48:	b00e      	add	sp, #56	@ 0x38
 800fa4a:	bd10      	pop	{r4, pc}
 800fa4c:	9902      	ldr	r1, [sp, #8]
 800fa4e:	aa05      	add	r2, sp, #20
 800fa50:	4620      	mov	r0, r4
 800fa52:	f001 fc69 	bl	8011328 <uxr_init_base_object_request>
 800fa56:	a905      	add	r1, sp, #20
 800fa58:	4604      	mov	r4, r0
 800fa5a:	a806      	add	r0, sp, #24
 800fa5c:	f003 fa94 	bl	8012f88 <uxr_serialize_DELETE_Payload>
 800fa60:	4620      	mov	r0, r4
 800fa62:	b00e      	add	sp, #56	@ 0x38
 800fa64:	bd10      	pop	{r4, pc}
 800fa66:	bf00      	nop

0800fa68 <uxr_common_create_entity>:
 800fa68:	b510      	push	{r4, lr}
 800fa6a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fa6e:	b08c      	sub	sp, #48	@ 0x30
 800fa70:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fa74:	f1bc 0f01 	cmp.w	ip, #1
 800fa78:	bf0c      	ite	eq
 800fa7a:	f003 0201 	andeq.w	r2, r3, #1
 800fa7e:	2200      	movne	r2, #0
 800fa80:	330e      	adds	r3, #14
 800fa82:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800fa86:	9101      	str	r1, [sp, #4]
 800fa88:	441a      	add	r2, r3
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	9300      	str	r3, [sp, #0]
 800fa8e:	9903      	ldr	r1, [sp, #12]
 800fa90:	ab04      	add	r3, sp, #16
 800fa92:	b292      	uxth	r2, r2
 800fa94:	4604      	mov	r4, r0
 800fa96:	f001 fb11 	bl	80110bc <uxr_prepare_stream_to_write_submessage>
 800fa9a:	b918      	cbnz	r0, 800faa4 <uxr_common_create_entity+0x3c>
 800fa9c:	4604      	mov	r4, r0
 800fa9e:	4620      	mov	r0, r4
 800faa0:	b00c      	add	sp, #48	@ 0x30
 800faa2:	bd10      	pop	{r4, pc}
 800faa4:	9902      	ldr	r1, [sp, #8]
 800faa6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800faa8:	4620      	mov	r0, r4
 800faaa:	f001 fc3d 	bl	8011328 <uxr_init_base_object_request>
 800faae:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fab0:	4604      	mov	r4, r0
 800fab2:	a804      	add	r0, sp, #16
 800fab4:	f003 f9c4 	bl	8012e40 <uxr_serialize_CREATE_Payload>
 800fab8:	4620      	mov	r0, r4
 800faba:	b00c      	add	sp, #48	@ 0x30
 800fabc:	bd10      	pop	{r4, pc}
 800fabe:	bf00      	nop

0800fac0 <uxr_buffer_create_participant_bin>:
 800fac0:	b570      	push	{r4, r5, r6, lr}
 800fac2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800fac6:	ac11      	add	r4, sp, #68	@ 0x44
 800fac8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800facc:	2303      	movs	r3, #3
 800face:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fad2:	7223      	strb	r3, [r4, #8]
 800fad4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800fad6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800fada:	2201      	movs	r2, #1
 800fadc:	2100      	movs	r1, #0
 800fade:	4605      	mov	r5, r0
 800fae0:	7122      	strb	r2, [r4, #4]
 800fae2:	f88d 1014 	strb.w	r1, [sp, #20]
 800fae6:	b1cb      	cbz	r3, 800fb1c <uxr_buffer_create_participant_bin+0x5c>
 800fae8:	f88d 201c 	strb.w	r2, [sp, #28]
 800faec:	9308      	str	r3, [sp, #32]
 800faee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800faf2:	a915      	add	r1, sp, #84	@ 0x54
 800faf4:	a809      	add	r0, sp, #36	@ 0x24
 800faf6:	f7fc fb2f 	bl	800c158 <ucdr_init_buffer>
 800fafa:	a905      	add	r1, sp, #20
 800fafc:	a809      	add	r0, sp, #36	@ 0x24
 800fafe:	f002 fe39 	bl	8012774 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fb02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb04:	9600      	str	r6, [sp, #0]
 800fb06:	9401      	str	r4, [sp, #4]
 800fb08:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fb0c:	60e3      	str	r3, [r4, #12]
 800fb0e:	4628      	mov	r0, r5
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	f7ff ffa9 	bl	800fa68 <uxr_common_create_entity>
 800fb16:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800fb1a:	bd70      	pop	{r4, r5, r6, pc}
 800fb1c:	f88d 301c 	strb.w	r3, [sp, #28]
 800fb20:	e7e5      	b.n	800faee <uxr_buffer_create_participant_bin+0x2e>
 800fb22:	bf00      	nop

0800fb24 <uxr_buffer_create_topic_bin>:
 800fb24:	b570      	push	{r4, r5, r6, lr}
 800fb26:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800fb2a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fb2e:	9105      	str	r1, [sp, #20]
 800fb30:	4605      	mov	r5, r0
 800fb32:	a997      	add	r1, sp, #604	@ 0x25c
 800fb34:	4618      	mov	r0, r3
 800fb36:	2302      	movs	r3, #2
 800fb38:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800fb3c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800fb40:	f000 f9ea 	bl	800ff18 <uxr_object_id_to_raw>
 800fb44:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800fb46:	9306      	str	r3, [sp, #24]
 800fb48:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800fb4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb4c:	2303      	movs	r3, #3
 800fb4e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fb52:	2301      	movs	r3, #1
 800fb54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb58:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fb5c:	a917      	add	r1, sp, #92	@ 0x5c
 800fb5e:	2300      	movs	r3, #0
 800fb60:	a80b      	add	r0, sp, #44	@ 0x2c
 800fb62:	f88d 301c 	strb.w	r3, [sp, #28]
 800fb66:	f7fc faf7 	bl	800c158 <ucdr_init_buffer>
 800fb6a:	a906      	add	r1, sp, #24
 800fb6c:	a80b      	add	r0, sp, #44	@ 0x2c
 800fb6e:	f002 fe23 	bl	80127b8 <uxr_serialize_OBJK_Topic_Binary>
 800fb72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb74:	9316      	str	r3, [sp, #88]	@ 0x58
 800fb76:	ac13      	add	r4, sp, #76	@ 0x4c
 800fb78:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb7c:	9600      	str	r6, [sp, #0]
 800fb7e:	9401      	str	r4, [sp, #4]
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	4628      	mov	r0, r5
 800fb84:	f7ff ff70 	bl	800fa68 <uxr_common_create_entity>
 800fb88:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800fb8c:	bd70      	pop	{r4, r5, r6, pc}
 800fb8e:	bf00      	nop

0800fb90 <uxr_buffer_create_publisher_bin>:
 800fb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb92:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800fb96:	4605      	mov	r5, r0
 800fb98:	9105      	str	r1, [sp, #20]
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	2603      	movs	r6, #3
 800fb9e:	a992      	add	r1, sp, #584	@ 0x248
 800fba0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fba4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800fba8:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800fbac:	f000 f9b4 	bl	800ff18 <uxr_object_id_to_raw>
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbb6:	a912      	add	r1, sp, #72	@ 0x48
 800fbb8:	a806      	add	r0, sp, #24
 800fbba:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fbbe:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fbc2:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800fbc6:	f7fc fac7 	bl	800c158 <ucdr_init_buffer>
 800fbca:	a993      	add	r1, sp, #588	@ 0x24c
 800fbcc:	a806      	add	r0, sp, #24
 800fbce:	f002 fea7 	bl	8012920 <uxr_serialize_OBJK_Publisher_Binary>
 800fbd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbd4:	9311      	str	r3, [sp, #68]	@ 0x44
 800fbd6:	ac0e      	add	r4, sp, #56	@ 0x38
 800fbd8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fbdc:	9700      	str	r7, [sp, #0]
 800fbde:	9401      	str	r4, [sp, #4]
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	f7ff ff40 	bl	800fa68 <uxr_common_create_entity>
 800fbe8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800fbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbee:	bf00      	nop

0800fbf0 <uxr_buffer_create_datawriter_bin>:
 800fbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800fbf8:	ac1d      	add	r4, sp, #116	@ 0x74
 800fbfa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fbfe:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800fc02:	9105      	str	r1, [sp, #20]
 800fc04:	4606      	mov	r6, r0
 800fc06:	a9a1      	add	r1, sp, #644	@ 0x284
 800fc08:	4618      	mov	r0, r3
 800fc0a:	2305      	movs	r3, #5
 800fc0c:	7123      	strb	r3, [r4, #4]
 800fc0e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800fc12:	2703      	movs	r7, #3
 800fc14:	f000 f980 	bl	800ff18 <uxr_object_id_to_raw>
 800fc18:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800fc1a:	7227      	strb	r7, [r4, #8]
 800fc1c:	a90e      	add	r1, sp, #56	@ 0x38
 800fc1e:	f000 f97b 	bl	800ff18 <uxr_object_id_to_raw>
 800fc22:	2300      	movs	r3, #0
 800fc24:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800fc28:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800fc2c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fc30:	3d00      	subs	r5, #0
 800fc32:	bf18      	it	ne
 800fc34:	2501      	movne	r5, #1
 800fc36:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800fc3a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800fc3e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fc42:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fc46:	2301      	movs	r3, #1
 800fc48:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800fc4c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800fc50:	bb8a      	cbnz	r2, 800fcb6 <uxr_buffer_create_datawriter_bin+0xc6>
 800fc52:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fc56:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800fc5a:	f04f 0c13 	mov.w	ip, #19
 800fc5e:	250b      	movs	r5, #11
 800fc60:	2221      	movs	r2, #33	@ 0x21
 800fc62:	2111      	movs	r1, #17
 800fc64:	2009      	movs	r0, #9
 800fc66:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800fc6a:	b923      	cbnz	r3, 800fc76 <uxr_buffer_create_datawriter_bin+0x86>
 800fc6c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800fc70:	4672      	mov	r2, lr
 800fc72:	4661      	mov	r1, ip
 800fc74:	4628      	mov	r0, r5
 800fc76:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d025      	beq.n	800fcca <uxr_buffer_create_datawriter_bin+0xda>
 800fc7e:	2b03      	cmp	r3, #3
 800fc80:	d029      	beq.n	800fcd6 <uxr_buffer_create_datawriter_bin+0xe6>
 800fc82:	b32b      	cbz	r3, 800fcd0 <uxr_buffer_create_datawriter_bin+0xe0>
 800fc84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc88:	a921      	add	r1, sp, #132	@ 0x84
 800fc8a:	a806      	add	r0, sp, #24
 800fc8c:	f7fc fa64 	bl	800c158 <ucdr_init_buffer>
 800fc90:	a90e      	add	r1, sp, #56	@ 0x38
 800fc92:	a806      	add	r0, sp, #24
 800fc94:	f002 feba 	bl	8012a0c <uxr_serialize_OBJK_DataWriter_Binary>
 800fc98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc9a:	f8cd 8000 	str.w	r8, [sp]
 800fc9e:	9401      	str	r4, [sp, #4]
 800fca0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fca4:	60e3      	str	r3, [r4, #12]
 800fca6:	4630      	mov	r0, r6
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	f7ff fedd 	bl	800fa68 <uxr_common_create_entity>
 800fcae:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcb6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800fcba:	f04f 0c12 	mov.w	ip, #18
 800fcbe:	250a      	movs	r5, #10
 800fcc0:	2220      	movs	r2, #32
 800fcc2:	2110      	movs	r1, #16
 800fcc4:	2008      	movs	r0, #8
 800fcc6:	2702      	movs	r7, #2
 800fcc8:	e7cd      	b.n	800fc66 <uxr_buffer_create_datawriter_bin+0x76>
 800fcca:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800fcce:	e7d9      	b.n	800fc84 <uxr_buffer_create_datawriter_bin+0x94>
 800fcd0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800fcd4:	e7d6      	b.n	800fc84 <uxr_buffer_create_datawriter_bin+0x94>
 800fcd6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800fcda:	e7d3      	b.n	800fc84 <uxr_buffer_create_datawriter_bin+0x94>

0800fcdc <uxr_buffer_create_replier_bin>:
 800fcdc:	b570      	push	{r4, r5, r6, lr}
 800fcde:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800fce2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fce6:	9105      	str	r1, [sp, #20]
 800fce8:	4605      	mov	r5, r0
 800fcea:	a999      	add	r1, sp, #612	@ 0x264
 800fcec:	4618      	mov	r0, r3
 800fcee:	2308      	movs	r3, #8
 800fcf0:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 800fcf4:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 800fcf8:	f000 f90e 	bl	800ff18 <uxr_object_id_to_raw>
 800fcfc:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 800fcfe:	9306      	str	r3, [sp, #24]
 800fd00:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 800fd02:	9307      	str	r3, [sp, #28]
 800fd04:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 800fd06:	9308      	str	r3, [sp, #32]
 800fd08:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800fd0a:	930c      	str	r3, [sp, #48]	@ 0x30
 800fd0c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fd0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd10:	2301      	movs	r3, #1
 800fd12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd16:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800fd1a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fd1e:	a919      	add	r1, sp, #100	@ 0x64
 800fd20:	2303      	movs	r3, #3
 800fd22:	a80d      	add	r0, sp, #52	@ 0x34
 800fd24:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 800fd28:	f7fc fa16 	bl	800c158 <ucdr_init_buffer>
 800fd2c:	a906      	add	r1, sp, #24
 800fd2e:	a80d      	add	r0, sp, #52	@ 0x34
 800fd30:	f002 fe98 	bl	8012a64 <uxr_serialize_OBJK_Replier_Binary>
 800fd34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fd36:	9318      	str	r3, [sp, #96]	@ 0x60
 800fd38:	ac15      	add	r4, sp, #84	@ 0x54
 800fd3a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd3e:	9600      	str	r6, [sp, #0]
 800fd40:	9401      	str	r4, [sp, #4]
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	4628      	mov	r0, r5
 800fd46:	f7ff fe8f 	bl	800fa68 <uxr_common_create_entity>
 800fd4a:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 800fd4e:	bd70      	pop	{r4, r5, r6, pc}

0800fd50 <get_custom_error>:
 800fd50:	4b01      	ldr	r3, [pc, #4]	@ (800fd58 <get_custom_error+0x8>)
 800fd52:	7818      	ldrb	r0, [r3, #0]
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop
 800fd58:	2000b61c 	.word	0x2000b61c

0800fd5c <recv_custom_msg>:
 800fd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd60:	4693      	mov	fp, r2
 800fd62:	b089      	sub	sp, #36	@ 0x24
 800fd64:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800fd68:	9305      	str	r3, [sp, #20]
 800fd6a:	468a      	mov	sl, r1
 800fd6c:	2100      	movs	r1, #0
 800fd6e:	4604      	mov	r4, r0
 800fd70:	f88d 101e 	strb.w	r1, [sp, #30]
 800fd74:	b322      	cbz	r2, 800fdc0 <recv_custom_msg+0x64>
 800fd76:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800fd7a:	f10d 081f 	add.w	r8, sp, #31
 800fd7e:	af05      	add	r7, sp, #20
 800fd80:	f10d 061e 	add.w	r6, sp, #30
 800fd84:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800fd88:	e002      	b.n	800fd90 <recv_custom_msg+0x34>
 800fd8a:	9b05      	ldr	r3, [sp, #20]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	dd0f      	ble.n	800fdb0 <recv_custom_msg+0x54>
 800fd90:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800fd94:	4623      	mov	r3, r4
 800fd96:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800fd9a:	e9cd 5600 	strd	r5, r6, [sp]
 800fd9e:	4622      	mov	r2, r4
 800fda0:	4648      	mov	r0, r9
 800fda2:	f001 fcef 	bl	8011784 <uxr_read_framed_msg>
 800fda6:	2800      	cmp	r0, #0
 800fda8:	d0ef      	beq.n	800fd8a <recv_custom_msg+0x2e>
 800fdaa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fdae:	b1b3      	cbz	r3, 800fdde <recv_custom_msg+0x82>
 800fdb0:	4b0f      	ldr	r3, [pc, #60]	@ (800fdf0 <recv_custom_msg+0x94>)
 800fdb2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800fdb6:	701a      	strb	r2, [r3, #0]
 800fdb8:	2000      	movs	r0, #0
 800fdba:	b009      	add	sp, #36	@ 0x24
 800fdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdc0:	f10d 021f 	add.w	r2, sp, #31
 800fdc4:	9200      	str	r2, [sp, #0]
 800fdc6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800fdca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdce:	4601      	mov	r1, r0
 800fdd0:	47a8      	blx	r5
 800fdd2:	2800      	cmp	r0, #0
 800fdd4:	d0ec      	beq.n	800fdb0 <recv_custom_msg+0x54>
 800fdd6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d1e8      	bne.n	800fdb0 <recv_custom_msg+0x54>
 800fdde:	f8cb 0000 	str.w	r0, [fp]
 800fde2:	2001      	movs	r0, #1
 800fde4:	f8ca 4000 	str.w	r4, [sl]
 800fde8:	b009      	add	sp, #36	@ 0x24
 800fdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdee:	bf00      	nop
 800fdf0:	2000b61c 	.word	0x2000b61c

0800fdf4 <send_custom_msg>:
 800fdf4:	b530      	push	{r4, r5, lr}
 800fdf6:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800fdfa:	b087      	sub	sp, #28
 800fdfc:	4615      	mov	r5, r2
 800fdfe:	b974      	cbnz	r4, 800fe1e <send_custom_msg+0x2a>
 800fe00:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800fe04:	f10d 0317 	add.w	r3, sp, #23
 800fe08:	47a0      	blx	r4
 800fe0a:	b108      	cbz	r0, 800fe10 <send_custom_msg+0x1c>
 800fe0c:	42a8      	cmp	r0, r5
 800fe0e:	d015      	beq.n	800fe3c <send_custom_msg+0x48>
 800fe10:	4b0c      	ldr	r3, [pc, #48]	@ (800fe44 <send_custom_msg+0x50>)
 800fe12:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800fe16:	701a      	strb	r2, [r3, #0]
 800fe18:	2000      	movs	r0, #0
 800fe1a:	b007      	add	sp, #28
 800fe1c:	bd30      	pop	{r4, r5, pc}
 800fe1e:	460b      	mov	r3, r1
 800fe20:	2200      	movs	r2, #0
 800fe22:	f10d 0117 	add.w	r1, sp, #23
 800fe26:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800fe30:	9500      	str	r5, [sp, #0]
 800fe32:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800fe36:	f001 faad 	bl	8011394 <uxr_write_framed_msg>
 800fe3a:	e7e6      	b.n	800fe0a <send_custom_msg+0x16>
 800fe3c:	2001      	movs	r0, #1
 800fe3e:	b007      	add	sp, #28
 800fe40:	bd30      	pop	{r4, r5, pc}
 800fe42:	bf00      	nop
 800fe44:	2000b61c 	.word	0x2000b61c

0800fe48 <uxr_set_custom_transport_callbacks>:
 800fe48:	b410      	push	{r4}
 800fe4a:	9c01      	ldr	r4, [sp, #4]
 800fe4c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800fe50:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800fe54:	9b02      	ldr	r3, [sp, #8]
 800fe56:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800fe5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe5e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800fe62:	4770      	bx	lr

0800fe64 <uxr_init_custom_transport>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800fe6a:	b303      	cbz	r3, 800feae <uxr_init_custom_transport+0x4a>
 800fe6c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800fe70:	4604      	mov	r4, r0
 800fe72:	b1e2      	cbz	r2, 800feae <uxr_init_custom_transport+0x4a>
 800fe74:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800fe78:	b1ca      	cbz	r2, 800feae <uxr_init_custom_transport+0x4a>
 800fe7a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800fe7e:	b1b2      	cbz	r2, 800feae <uxr_init_custom_transport+0x4a>
 800fe80:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800fe84:	4798      	blx	r3
 800fe86:	4605      	mov	r5, r0
 800fe88:	b188      	cbz	r0, 800feae <uxr_init_custom_transport+0x4a>
 800fe8a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800fe8e:	b98b      	cbnz	r3, 800feb4 <uxr_init_custom_transport+0x50>
 800fe90:	490b      	ldr	r1, [pc, #44]	@ (800fec0 <uxr_init_custom_transport+0x5c>)
 800fe92:	4b0c      	ldr	r3, [pc, #48]	@ (800fec4 <uxr_init_custom_transport+0x60>)
 800fe94:	4a0c      	ldr	r2, [pc, #48]	@ (800fec8 <uxr_init_custom_transport+0x64>)
 800fe96:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800fe9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe9e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800fea2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800fea6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800feaa:	4628      	mov	r0, r5
 800feac:	bd38      	pop	{r3, r4, r5, pc}
 800feae:	2500      	movs	r5, #0
 800feb0:	4628      	mov	r0, r5
 800feb2:	bd38      	pop	{r3, r4, r5, pc}
 800feb4:	2100      	movs	r1, #0
 800feb6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800feba:	f001 fa65 	bl	8011388 <uxr_init_framing_io>
 800febe:	e7e7      	b.n	800fe90 <uxr_init_custom_transport+0x2c>
 800fec0:	0800fdf5 	.word	0x0800fdf5
 800fec4:	0800fd5d 	.word	0x0800fd5d
 800fec8:	0800fd51 	.word	0x0800fd51

0800fecc <uxr_close_custom_transport>:
 800fecc:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800fed0:	4718      	bx	r3
 800fed2:	bf00      	nop

0800fed4 <uxr_object_id>:
 800fed4:	b082      	sub	sp, #8
 800fed6:	2300      	movs	r3, #0
 800fed8:	f88d 1006 	strb.w	r1, [sp, #6]
 800fedc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fee0:	f360 030f 	bfi	r3, r0, #0, #16
 800fee4:	f362 431f 	bfi	r3, r2, #16, #16
 800fee8:	4618      	mov	r0, r3
 800feea:	b002      	add	sp, #8
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop

0800fef0 <uxr_object_id_from_raw>:
 800fef0:	7843      	ldrb	r3, [r0, #1]
 800fef2:	7801      	ldrb	r1, [r0, #0]
 800fef4:	b082      	sub	sp, #8
 800fef6:	f003 020f 	and.w	r2, r3, #15
 800fefa:	f88d 2006 	strb.w	r2, [sp, #6]
 800fefe:	091b      	lsrs	r3, r3, #4
 800ff00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff04:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ff08:	2000      	movs	r0, #0
 800ff0a:	f363 000f 	bfi	r0, r3, #0, #16
 800ff0e:	f362 401f 	bfi	r0, r2, #16, #16
 800ff12:	b002      	add	sp, #8
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop

0800ff18 <uxr_object_id_to_raw>:
 800ff18:	4602      	mov	r2, r0
 800ff1a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ff1e:	b082      	sub	sp, #8
 800ff20:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ff24:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ff28:	f881 c000 	strb.w	ip, [r1]
 800ff2c:	7048      	strb	r0, [r1, #1]
 800ff2e:	b002      	add	sp, #8
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop

0800ff34 <uxr_buffer_request_data>:
 800ff34:	b530      	push	{r4, r5, lr}
 800ff36:	b095      	sub	sp, #84	@ 0x54
 800ff38:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ff3c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800ff3e:	9303      	str	r3, [sp, #12]
 800ff40:	2200      	movs	r2, #0
 800ff42:	2d00      	cmp	r5, #0
 800ff44:	bf14      	ite	ne
 800ff46:	2101      	movne	r1, #1
 800ff48:	4611      	moveq	r1, r2
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	f88d 301c 	strb.w	r3, [sp, #28]
 800ff50:	f88d 201d 	strb.w	r2, [sp, #29]
 800ff54:	f88d 201e 	strb.w	r2, [sp, #30]
 800ff58:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800ff5c:	d021      	beq.n	800ffa2 <uxr_buffer_request_data+0x6e>
 800ff5e:	682a      	ldr	r2, [r5, #0]
 800ff60:	686b      	ldr	r3, [r5, #4]
 800ff62:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800ff66:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800ff6a:	2210      	movs	r2, #16
 800ff6c:	2308      	movs	r3, #8
 800ff6e:	2100      	movs	r1, #0
 800ff70:	e9cd 3100 	strd	r3, r1, [sp]
 800ff74:	4620      	mov	r0, r4
 800ff76:	9905      	ldr	r1, [sp, #20]
 800ff78:	ab0c      	add	r3, sp, #48	@ 0x30
 800ff7a:	f001 f89f 	bl	80110bc <uxr_prepare_stream_to_write_submessage>
 800ff7e:	b918      	cbnz	r0, 800ff88 <uxr_buffer_request_data+0x54>
 800ff80:	4604      	mov	r4, r0
 800ff82:	4620      	mov	r0, r4
 800ff84:	b015      	add	sp, #84	@ 0x54
 800ff86:	bd30      	pop	{r4, r5, pc}
 800ff88:	9904      	ldr	r1, [sp, #16]
 800ff8a:	aa06      	add	r2, sp, #24
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f001 f9cb 	bl	8011328 <uxr_init_base_object_request>
 800ff92:	a906      	add	r1, sp, #24
 800ff94:	4604      	mov	r4, r0
 800ff96:	a80c      	add	r0, sp, #48	@ 0x30
 800ff98:	f003 f8a0 	bl	80130dc <uxr_serialize_READ_DATA_Payload>
 800ff9c:	4620      	mov	r0, r4
 800ff9e:	b015      	add	sp, #84	@ 0x54
 800ffa0:	bd30      	pop	{r4, r5, pc}
 800ffa2:	2208      	movs	r2, #8
 800ffa4:	e7e2      	b.n	800ff6c <uxr_buffer_request_data+0x38>
 800ffa6:	bf00      	nop

0800ffa8 <uxr_buffer_cancel_data>:
 800ffa8:	b510      	push	{r4, lr}
 800ffaa:	b094      	sub	sp, #80	@ 0x50
 800ffac:	2300      	movs	r3, #0
 800ffae:	9202      	str	r2, [sp, #8]
 800ffb0:	9205      	str	r2, [sp, #20]
 800ffb2:	9301      	str	r3, [sp, #4]
 800ffb4:	2201      	movs	r2, #1
 800ffb6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ffba:	f88d 301e 	strb.w	r3, [sp, #30]
 800ffbe:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800ffc2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800ffc6:	2308      	movs	r3, #8
 800ffc8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800ffcc:	9300      	str	r3, [sp, #0]
 800ffce:	2210      	movs	r2, #16
 800ffd0:	ab0c      	add	r3, sp, #48	@ 0x30
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	9103      	str	r1, [sp, #12]
 800ffd6:	f001 f871 	bl	80110bc <uxr_prepare_stream_to_write_submessage>
 800ffda:	b918      	cbnz	r0, 800ffe4 <uxr_buffer_cancel_data+0x3c>
 800ffdc:	4604      	mov	r4, r0
 800ffde:	4620      	mov	r0, r4
 800ffe0:	b014      	add	sp, #80	@ 0x50
 800ffe2:	bd10      	pop	{r4, pc}
 800ffe4:	9905      	ldr	r1, [sp, #20]
 800ffe6:	aa06      	add	r2, sp, #24
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f001 f99d 	bl	8011328 <uxr_init_base_object_request>
 800ffee:	a906      	add	r1, sp, #24
 800fff0:	4604      	mov	r4, r0
 800fff2:	a80c      	add	r0, sp, #48	@ 0x30
 800fff4:	f003 f872 	bl	80130dc <uxr_serialize_READ_DATA_Payload>
 800fff8:	4620      	mov	r0, r4
 800fffa:	b014      	add	sp, #80	@ 0x50
 800fffc:	bd10      	pop	{r4, pc}
 800fffe:	bf00      	nop

08010000 <read_submessage_format>:
 8010000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010004:	b095      	sub	sp, #84	@ 0x54
 8010006:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801000a:	b113      	cbz	r3, 8010012 <read_submessage_format+0x12>
 801000c:	b015      	add	sp, #84	@ 0x54
 801000e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010012:	460c      	mov	r4, r1
 8010014:	4615      	mov	r5, r2
 8010016:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801001a:	4607      	mov	r7, r0
 801001c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801001e:	9004      	str	r0, [sp, #16]
 8010020:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8010022:	9005      	str	r0, [sp, #20]
 8010024:	1a52      	subs	r2, r2, r1
 8010026:	a80c      	add	r0, sp, #48	@ 0x30
 8010028:	4699      	mov	r9, r3
 801002a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801002e:	f7fc f893 	bl	800c158 <ucdr_init_buffer>
 8010032:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010036:	a80c      	add	r0, sp, #48	@ 0x30
 8010038:	f7fc f862 	bl	800c100 <ucdr_set_on_full_buffer_callback>
 801003c:	69e2      	ldr	r2, [r4, #28]
 801003e:	b19a      	cbz	r2, 8010068 <read_submessage_format+0x68>
 8010040:	f1b8 0f07 	cmp.w	r8, #7
 8010044:	f882 9014 	strb.w	r9, [r2, #20]
 8010048:	d040      	beq.n	80100cc <read_submessage_format+0xcc>
 801004a:	f1b8 0f08 	cmp.w	r8, #8
 801004e:	d02e      	beq.n	80100ae <read_submessage_format+0xae>
 8010050:	f1b8 0f06 	cmp.w	r8, #6
 8010054:	d011      	beq.n	801007a <read_submessage_format+0x7a>
 8010056:	2301      	movs	r3, #1
 8010058:	7513      	strb	r3, [r2, #20]
 801005a:	4629      	mov	r1, r5
 801005c:	4620      	mov	r0, r4
 801005e:	f7fc f8cb 	bl	800c1f8 <ucdr_advance_buffer>
 8010062:	b015      	add	sp, #84	@ 0x54
 8010064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010068:	f1b8 0f07 	cmp.w	r8, #7
 801006c:	d02e      	beq.n	80100cc <read_submessage_format+0xcc>
 801006e:	f1b8 0f08 	cmp.w	r8, #8
 8010072:	d01c      	beq.n	80100ae <read_submessage_format+0xae>
 8010074:	f1b8 0f06 	cmp.w	r8, #6
 8010078:	d1ef      	bne.n	801005a <read_submessage_format+0x5a>
 801007a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801007e:	f1b8 0f00 	cmp.w	r8, #0
 8010082:	d011      	beq.n	80100a8 <read_submessage_format+0xa8>
 8010084:	ab0c      	add	r3, sp, #48	@ 0x30
 8010086:	e9cd 3500 	strd	r3, r5, [sp]
 801008a:	2306      	movs	r3, #6
 801008c:	f88d 3016 	strb.w	r3, [sp, #22]
 8010090:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010094:	9302      	str	r3, [sp, #8]
 8010096:	4632      	mov	r2, r6
 8010098:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801009c:	4638      	mov	r0, r7
 801009e:	47c0      	blx	r8
 80100a0:	2301      	movs	r3, #1
 80100a2:	69e2      	ldr	r2, [r4, #28]
 80100a4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80100a8:	2a00      	cmp	r2, #0
 80100aa:	d1d4      	bne.n	8010056 <read_submessage_format+0x56>
 80100ac:	e7d5      	b.n	801005a <read_submessage_format+0x5a>
 80100ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d0f8      	beq.n	80100a8 <read_submessage_format+0xa8>
 80100b6:	a906      	add	r1, sp, #24
 80100b8:	a80c      	add	r0, sp, #48	@ 0x30
 80100ba:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80100be:	f003 f8e1 	bl	8013284 <uxr_deserialize_SampleIdentity>
 80100c2:	b9a0      	cbnz	r0, 80100ee <read_submessage_format+0xee>
 80100c4:	69e2      	ldr	r2, [r4, #28]
 80100c6:	2a00      	cmp	r2, #0
 80100c8:	d1c5      	bne.n	8010056 <read_submessage_format+0x56>
 80100ca:	e7c6      	b.n	801005a <read_submessage_format+0x5a>
 80100cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80100d0:	b13b      	cbz	r3, 80100e2 <read_submessage_format+0xe2>
 80100d2:	a906      	add	r1, sp, #24
 80100d4:	a80c      	add	r0, sp, #48	@ 0x30
 80100d6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80100da:	f002 fd99 	bl	8012c10 <uxr_deserialize_BaseObjectRequest>
 80100de:	bb60      	cbnz	r0, 801013a <read_submessage_format+0x13a>
 80100e0:	69e2      	ldr	r2, [r4, #28]
 80100e2:	68a3      	ldr	r3, [r4, #8]
 80100e4:	442b      	add	r3, r5
 80100e6:	60a3      	str	r3, [r4, #8]
 80100e8:	2a00      	cmp	r2, #0
 80100ea:	d1b4      	bne.n	8010056 <read_submessage_format+0x56>
 80100ec:	e7b5      	b.n	801005a <read_submessage_format+0x5a>
 80100ee:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80100f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80100f4:	1a52      	subs	r2, r2, r1
 80100f6:	eba8 0803 	sub.w	r8, r8, r3
 80100fa:	a80c      	add	r0, sp, #48	@ 0x30
 80100fc:	f7fc f82c 	bl	800c158 <ucdr_init_buffer>
 8010100:	44a8      	add	r8, r5
 8010102:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010106:	a80c      	add	r0, sp, #48	@ 0x30
 8010108:	f7fb fffa 	bl	800c100 <ucdr_set_on_full_buffer_callback>
 801010c:	fa1f f888 	uxth.w	r8, r8
 8010110:	ab0c      	add	r3, sp, #48	@ 0x30
 8010112:	9300      	str	r3, [sp, #0]
 8010114:	f8cd 8004 	str.w	r8, [sp, #4]
 8010118:	2108      	movs	r1, #8
 801011a:	f88d 1016 	strb.w	r1, [sp, #22]
 801011e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8010122:	9102      	str	r1, [sp, #8]
 8010124:	ab06      	add	r3, sp, #24
 8010126:	4632      	mov	r2, r6
 8010128:	9905      	ldr	r1, [sp, #20]
 801012a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801012e:	4638      	mov	r0, r7
 8010130:	47b0      	blx	r6
 8010132:	2301      	movs	r3, #1
 8010134:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010138:	e7c4      	b.n	80100c4 <read_submessage_format+0xc4>
 801013a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801013e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010140:	1a52      	subs	r2, r2, r1
 8010142:	a80c      	add	r0, sp, #48	@ 0x30
 8010144:	eba8 0803 	sub.w	r8, r8, r3
 8010148:	f7fc f806 	bl	800c158 <ucdr_init_buffer>
 801014c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010150:	a80c      	add	r0, sp, #48	@ 0x30
 8010152:	f7fb ffd5 	bl	800c100 <ucdr_set_on_full_buffer_callback>
 8010156:	ab0c      	add	r3, sp, #48	@ 0x30
 8010158:	9300      	str	r3, [sp, #0]
 801015a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801015e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010162:	44a8      	add	r8, r5
 8010164:	fa1f f888 	uxth.w	r8, r8
 8010168:	f8cd 8004 	str.w	r8, [sp, #4]
 801016c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010170:	2107      	movs	r1, #7
 8010172:	f88d 1016 	strb.w	r1, [sp, #22]
 8010176:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801017a:	9102      	str	r1, [sp, #8]
 801017c:	4632      	mov	r2, r6
 801017e:	b29b      	uxth	r3, r3
 8010180:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010184:	9905      	ldr	r1, [sp, #20]
 8010186:	4638      	mov	r0, r7
 8010188:	47b0      	blx	r6
 801018a:	2301      	movs	r3, #1
 801018c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010190:	e7a6      	b.n	80100e0 <read_submessage_format+0xe0>
 8010192:	bf00      	nop

08010194 <on_get_fragmentation_info>:
 8010194:	b500      	push	{lr}
 8010196:	b08b      	sub	sp, #44	@ 0x2c
 8010198:	4601      	mov	r1, r0
 801019a:	2204      	movs	r2, #4
 801019c:	a802      	add	r0, sp, #8
 801019e:	f7fb ffdb 	bl	800c158 <ucdr_init_buffer>
 80101a2:	f10d 0305 	add.w	r3, sp, #5
 80101a6:	f10d 0206 	add.w	r2, sp, #6
 80101aa:	a901      	add	r1, sp, #4
 80101ac:	a802      	add	r0, sp, #8
 80101ae:	f001 fecf 	bl	8011f50 <uxr_read_submessage_header>
 80101b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80101b6:	2b0d      	cmp	r3, #13
 80101b8:	d003      	beq.n	80101c2 <on_get_fragmentation_info+0x2e>
 80101ba:	2000      	movs	r0, #0
 80101bc:	b00b      	add	sp, #44	@ 0x2c
 80101be:	f85d fb04 	ldr.w	pc, [sp], #4
 80101c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80101c6:	f013 0f02 	tst.w	r3, #2
 80101ca:	bf14      	ite	ne
 80101cc:	2002      	movne	r0, #2
 80101ce:	2001      	moveq	r0, #1
 80101d0:	b00b      	add	sp, #44	@ 0x2c
 80101d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80101d6:	bf00      	nop

080101d8 <read_submessage_get_info>:
 80101d8:	b570      	push	{r4, r5, r6, lr}
 80101da:	2500      	movs	r5, #0
 80101dc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80101e0:	4604      	mov	r4, r0
 80101e2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80101e6:	460e      	mov	r6, r1
 80101e8:	a810      	add	r0, sp, #64	@ 0x40
 80101ea:	4629      	mov	r1, r5
 80101ec:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80101f0:	f009 f840 	bl	8019274 <memset>
 80101f4:	a903      	add	r1, sp, #12
 80101f6:	4630      	mov	r0, r6
 80101f8:	f002 feb2 	bl	8012f60 <uxr_deserialize_GET_INFO_Payload>
 80101fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010200:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010204:	4620      	mov	r0, r4
 8010206:	f001 f887 	bl	8011318 <uxr_session_header_offset>
 801020a:	462b      	mov	r3, r5
 801020c:	9000      	str	r0, [sp, #0]
 801020e:	220c      	movs	r2, #12
 8010210:	a905      	add	r1, sp, #20
 8010212:	a808      	add	r0, sp, #32
 8010214:	f7fb ff8e 	bl	800c134 <ucdr_init_buffer_origin_offset>
 8010218:	a910      	add	r1, sp, #64	@ 0x40
 801021a:	a808      	add	r0, sp, #32
 801021c:	f002 ff12 	bl	8013044 <uxr_serialize_INFO_Payload>
 8010220:	9b08      	ldr	r3, [sp, #32]
 8010222:	462a      	mov	r2, r5
 8010224:	4629      	mov	r1, r5
 8010226:	4620      	mov	r0, r4
 8010228:	f001 f820 	bl	801126c <uxr_stamp_session_header>
 801022c:	a808      	add	r0, sp, #32
 801022e:	f7fb ffbf 	bl	800c1b0 <ucdr_buffer_length>
 8010232:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010234:	4602      	mov	r2, r0
 8010236:	a905      	add	r1, sp, #20
 8010238:	e9d3 0400 	ldrd	r0, r4, [r3]
 801023c:	47a0      	blx	r4
 801023e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010242:	bd70      	pop	{r4, r5, r6, pc}

08010244 <write_submessage_acknack.isra.0>:
 8010244:	b570      	push	{r4, r5, r6, lr}
 8010246:	b092      	sub	sp, #72	@ 0x48
 8010248:	4605      	mov	r5, r0
 801024a:	460e      	mov	r6, r1
 801024c:	4614      	mov	r4, r2
 801024e:	f001 f863 	bl	8011318 <uxr_session_header_offset>
 8010252:	a905      	add	r1, sp, #20
 8010254:	9000      	str	r0, [sp, #0]
 8010256:	2300      	movs	r3, #0
 8010258:	a80a      	add	r0, sp, #40	@ 0x28
 801025a:	2211      	movs	r2, #17
 801025c:	f7fb ff6a 	bl	800c134 <ucdr_init_buffer_origin_offset>
 8010260:	2218      	movs	r2, #24
 8010262:	fb02 5404 	mla	r4, r2, r4, r5
 8010266:	2300      	movs	r3, #0
 8010268:	2205      	movs	r2, #5
 801026a:	3450      	adds	r4, #80	@ 0x50
 801026c:	210a      	movs	r1, #10
 801026e:	a80a      	add	r0, sp, #40	@ 0x28
 8010270:	f001 fe54 	bl	8011f1c <uxr_buffer_submessage_header>
 8010274:	a903      	add	r1, sp, #12
 8010276:	4620      	mov	r0, r4
 8010278:	f007 fb3e 	bl	80178f8 <uxr_compute_acknack>
 801027c:	ba40      	rev16	r0, r0
 801027e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010282:	a903      	add	r1, sp, #12
 8010284:	a80a      	add	r0, sp, #40	@ 0x28
 8010286:	f88d 6010 	strb.w	r6, [sp, #16]
 801028a:	f002 ff4b 	bl	8013124 <uxr_serialize_ACKNACK_Payload>
 801028e:	2200      	movs	r2, #0
 8010290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010292:	4611      	mov	r1, r2
 8010294:	4628      	mov	r0, r5
 8010296:	f000 ffe9 	bl	801126c <uxr_stamp_session_header>
 801029a:	a80a      	add	r0, sp, #40	@ 0x28
 801029c:	f7fb ff88 	bl	800c1b0 <ucdr_buffer_length>
 80102a0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80102a2:	4602      	mov	r2, r0
 80102a4:	a905      	add	r1, sp, #20
 80102a6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80102aa:	47a0      	blx	r4
 80102ac:	b012      	add	sp, #72	@ 0x48
 80102ae:	bd70      	pop	{r4, r5, r6, pc}

080102b0 <uxr_init_session>:
 80102b0:	b510      	push	{r4, lr}
 80102b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80102e8 <uxr_init_session+0x38>
 80102b6:	2300      	movs	r3, #0
 80102b8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80102bc:	4604      	mov	r4, r0
 80102be:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80102c2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80102c6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80102ca:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80102ce:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80102d2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80102d6:	2181      	movs	r1, #129	@ 0x81
 80102d8:	f000 ff34 	bl	8011144 <uxr_init_session_info>
 80102dc:	f104 0008 	add.w	r0, r4, #8
 80102e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102e4:	f001 bd36 	b.w	8011d54 <uxr_init_stream_storage>
	...

080102f0 <uxr_set_status_callback>:
 80102f0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop

080102f8 <uxr_set_topic_callback>:
 80102f8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop

08010300 <uxr_set_request_callback>:
 8010300:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop

08010308 <uxr_set_reply_callback>:
 8010308:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801030c:	4770      	bx	lr
 801030e:	bf00      	nop

08010310 <uxr_create_output_best_effort_stream>:
 8010310:	b510      	push	{r4, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	e9cd 2100 	strd	r2, r1, [sp]
 8010318:	4604      	mov	r4, r0
 801031a:	f000 fffd 	bl	8011318 <uxr_session_header_offset>
 801031e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010322:	4603      	mov	r3, r0
 8010324:	f104 0008 	add.w	r0, r4, #8
 8010328:	b004      	add	sp, #16
 801032a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801032e:	f001 bd5b 	b.w	8011de8 <uxr_add_output_best_effort_buffer>
 8010332:	bf00      	nop

08010334 <uxr_create_output_reliable_stream>:
 8010334:	b510      	push	{r4, lr}
 8010336:	b088      	sub	sp, #32
 8010338:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801033c:	4604      	mov	r4, r0
 801033e:	9303      	str	r3, [sp, #12]
 8010340:	f000 ffea 	bl	8011318 <uxr_session_header_offset>
 8010344:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010348:	9000      	str	r0, [sp, #0]
 801034a:	9905      	ldr	r1, [sp, #20]
 801034c:	f104 0008 	add.w	r0, r4, #8
 8010350:	f001 fd5e 	bl	8011e10 <uxr_add_output_reliable_buffer>
 8010354:	2200      	movs	r2, #0
 8010356:	b2c3      	uxtb	r3, r0
 8010358:	f363 0207 	bfi	r2, r3, #0, #8
 801035c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010360:	f363 220f 	bfi	r2, r3, #8, #8
 8010364:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010368:	f363 4217 	bfi	r2, r3, #16, #8
 801036c:	0e03      	lsrs	r3, r0, #24
 801036e:	f363 621f 	bfi	r2, r3, #24, #8
 8010372:	4610      	mov	r0, r2
 8010374:	b008      	add	sp, #32
 8010376:	bd10      	pop	{r4, pc}

08010378 <uxr_create_input_best_effort_stream>:
 8010378:	b082      	sub	sp, #8
 801037a:	3008      	adds	r0, #8
 801037c:	b002      	add	sp, #8
 801037e:	f001 bd61 	b.w	8011e44 <uxr_add_input_best_effort_buffer>
 8010382:	bf00      	nop

08010384 <uxr_create_input_reliable_stream>:
 8010384:	b510      	push	{r4, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	4c0b      	ldr	r4, [pc, #44]	@ (80103b8 <uxr_create_input_reliable_stream+0x34>)
 801038a:	9400      	str	r4, [sp, #0]
 801038c:	3008      	adds	r0, #8
 801038e:	f001 fd6f 	bl	8011e70 <uxr_add_input_reliable_buffer>
 8010392:	2200      	movs	r2, #0
 8010394:	b2c3      	uxtb	r3, r0
 8010396:	f363 0207 	bfi	r2, r3, #0, #8
 801039a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801039e:	f363 220f 	bfi	r2, r3, #8, #8
 80103a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80103a6:	f363 4217 	bfi	r2, r3, #16, #8
 80103aa:	0e03      	lsrs	r3, r0, #24
 80103ac:	f363 621f 	bfi	r2, r3, #24, #8
 80103b0:	4610      	mov	r0, r2
 80103b2:	b004      	add	sp, #16
 80103b4:	bd10      	pop	{r4, pc}
 80103b6:	bf00      	nop
 80103b8:	08010195 	.word	0x08010195

080103bc <uxr_epoch_millis>:
 80103bc:	b510      	push	{r4, lr}
 80103be:	4604      	mov	r4, r0
 80103c0:	f001 fe0c 	bl	8011fdc <uxr_nanos>
 80103c4:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 80103c8:	1ac0      	subs	r0, r0, r3
 80103ca:	4a04      	ldr	r2, [pc, #16]	@ (80103dc <uxr_epoch_millis+0x20>)
 80103cc:	f04f 0300 	mov.w	r3, #0
 80103d0:	eb61 0104 	sbc.w	r1, r1, r4
 80103d4:	f7f0 fbf8 	bl	8000bc8 <__aeabi_ldivmod>
 80103d8:	bd10      	pop	{r4, pc}
 80103da:	bf00      	nop
 80103dc:	000f4240 	.word	0x000f4240

080103e0 <uxr_epoch_nanos>:
 80103e0:	b510      	push	{r4, lr}
 80103e2:	4604      	mov	r4, r0
 80103e4:	f001 fdfa 	bl	8011fdc <uxr_nanos>
 80103e8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80103ec:	1ac0      	subs	r0, r0, r3
 80103ee:	eb61 0102 	sbc.w	r1, r1, r2
 80103f2:	bd10      	pop	{r4, pc}

080103f4 <uxr_flash_output_streams>:
 80103f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103f8:	7e03      	ldrb	r3, [r0, #24]
 80103fa:	b084      	sub	sp, #16
 80103fc:	4604      	mov	r4, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d035      	beq.n	801046e <uxr_flash_output_streams+0x7a>
 8010402:	f04f 0900 	mov.w	r9, #0
 8010406:	4648      	mov	r0, r9
 8010408:	f10d 0802 	add.w	r8, sp, #2
 801040c:	af03      	add	r7, sp, #12
 801040e:	ae02      	add	r6, sp, #8
 8010410:	e006      	b.n	8010420 <uxr_flash_output_streams+0x2c>
 8010412:	7e23      	ldrb	r3, [r4, #24]
 8010414:	f109 0901 	add.w	r9, r9, #1
 8010418:	fa5f f089 	uxtb.w	r0, r9
 801041c:	4283      	cmp	r3, r0
 801041e:	d926      	bls.n	801046e <uxr_flash_output_streams+0x7a>
 8010420:	2201      	movs	r2, #1
 8010422:	4611      	mov	r1, r2
 8010424:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010428:	f001 fc40 	bl	8011cac <uxr_stream_id>
 801042c:	3508      	adds	r5, #8
 801042e:	4684      	mov	ip, r0
 8010430:	4643      	mov	r3, r8
 8010432:	463a      	mov	r2, r7
 8010434:	4631      	mov	r1, r6
 8010436:	4628      	mov	r0, r5
 8010438:	f8cd c004 	str.w	ip, [sp, #4]
 801043c:	f007 fae2 	bl	8017a04 <uxr_prepare_best_effort_buffer_to_send>
 8010440:	2800      	cmp	r0, #0
 8010442:	d0e6      	beq.n	8010412 <uxr_flash_output_streams+0x1e>
 8010444:	9b02      	ldr	r3, [sp, #8]
 8010446:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801044a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801044e:	4620      	mov	r0, r4
 8010450:	f000 ff0c 	bl	801126c <uxr_stamp_session_header>
 8010454:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010456:	9a03      	ldr	r2, [sp, #12]
 8010458:	685d      	ldr	r5, [r3, #4]
 801045a:	6818      	ldr	r0, [r3, #0]
 801045c:	9902      	ldr	r1, [sp, #8]
 801045e:	47a8      	blx	r5
 8010460:	f109 0901 	add.w	r9, r9, #1
 8010464:	7e23      	ldrb	r3, [r4, #24]
 8010466:	fa5f f089 	uxtb.w	r0, r9
 801046a:	4283      	cmp	r3, r0
 801046c:	d8d8      	bhi.n	8010420 <uxr_flash_output_streams+0x2c>
 801046e:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010472:	b38b      	cbz	r3, 80104d8 <uxr_flash_output_streams+0xe4>
 8010474:	f04f 0900 	mov.w	r9, #0
 8010478:	f10d 0802 	add.w	r8, sp, #2
 801047c:	af03      	add	r7, sp, #12
 801047e:	ae02      	add	r6, sp, #8
 8010480:	4648      	mov	r0, r9
 8010482:	2201      	movs	r2, #1
 8010484:	2102      	movs	r1, #2
 8010486:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801048a:	f001 fc0f 	bl	8011cac <uxr_stream_id>
 801048e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010492:	3520      	adds	r5, #32
 8010494:	9001      	str	r0, [sp, #4]
 8010496:	e00d      	b.n	80104b4 <uxr_flash_output_streams+0xc0>
 8010498:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801049c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80104a0:	9b02      	ldr	r3, [sp, #8]
 80104a2:	f000 fee3 	bl	801126c <uxr_stamp_session_header>
 80104a6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80104a8:	9a03      	ldr	r2, [sp, #12]
 80104aa:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80104ae:	9902      	ldr	r1, [sp, #8]
 80104b0:	6818      	ldr	r0, [r3, #0]
 80104b2:	47d0      	blx	sl
 80104b4:	4643      	mov	r3, r8
 80104b6:	463a      	mov	r2, r7
 80104b8:	4631      	mov	r1, r6
 80104ba:	4628      	mov	r0, r5
 80104bc:	f007 fcc0 	bl	8017e40 <uxr_prepare_next_reliable_buffer_to_send>
 80104c0:	4603      	mov	r3, r0
 80104c2:	4620      	mov	r0, r4
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d1e7      	bne.n	8010498 <uxr_flash_output_streams+0xa4>
 80104c8:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80104cc:	f109 0901 	add.w	r9, r9, #1
 80104d0:	fa5f f089 	uxtb.w	r0, r9
 80104d4:	4283      	cmp	r3, r0
 80104d6:	d8d4      	bhi.n	8010482 <uxr_flash_output_streams+0x8e>
 80104d8:	b004      	add	sp, #16
 80104da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104de:	bf00      	nop

080104e0 <read_submessage_info>:
 80104e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e4:	460d      	mov	r5, r1
 80104e6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80104ea:	4669      	mov	r1, sp
 80104ec:	4607      	mov	r7, r0
 80104ee:	4628      	mov	r0, r5
 80104f0:	f002 fc44 	bl	8012d7c <uxr_deserialize_BaseObjectReply>
 80104f4:	a902      	add	r1, sp, #8
 80104f6:	4604      	mov	r4, r0
 80104f8:	4628      	mov	r0, r5
 80104fa:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80104fe:	f7fa fb31 	bl	800ab64 <ucdr_deserialize_bool>
 8010502:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010506:	4004      	ands	r4, r0
 8010508:	b2e4      	uxtb	r4, r4
 801050a:	b95b      	cbnz	r3, 8010524 <read_submessage_info+0x44>
 801050c:	a987      	add	r1, sp, #540	@ 0x21c
 801050e:	4628      	mov	r0, r5
 8010510:	f7fa fb28 	bl	800ab64 <ucdr_deserialize_bool>
 8010514:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010518:	4606      	mov	r6, r0
 801051a:	b94b      	cbnz	r3, 8010530 <read_submessage_info+0x50>
 801051c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010524:	a903      	add	r1, sp, #12
 8010526:	4628      	mov	r0, r5
 8010528:	f002 fad0 	bl	8012acc <uxr_deserialize_ObjectVariant>
 801052c:	4004      	ands	r4, r0
 801052e:	e7ed      	b.n	801050c <read_submessage_info+0x2c>
 8010530:	a988      	add	r1, sp, #544	@ 0x220
 8010532:	4628      	mov	r0, r5
 8010534:	f7fa fb44 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8010538:	4234      	tst	r4, r6
 801053a:	d0ef      	beq.n	801051c <read_submessage_info+0x3c>
 801053c:	2800      	cmp	r0, #0
 801053e:	d0ed      	beq.n	801051c <read_submessage_info+0x3c>
 8010540:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010544:	2b0d      	cmp	r3, #13
 8010546:	d1e9      	bne.n	801051c <read_submessage_info+0x3c>
 8010548:	a98a      	add	r1, sp, #552	@ 0x228
 801054a:	4628      	mov	r0, r5
 801054c:	f7fb f8de 	bl	800b70c <ucdr_deserialize_int16_t>
 8010550:	b140      	cbz	r0, 8010564 <read_submessage_info+0x84>
 8010552:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010556:	2b00      	cmp	r3, #0
 8010558:	dd07      	ble.n	801056a <read_submessage_info+0x8a>
 801055a:	f1b8 0f00 	cmp.w	r8, #0
 801055e:	bf14      	ite	ne
 8010560:	2001      	movne	r0, #1
 8010562:	2002      	moveq	r0, #2
 8010564:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010568:	e7d8      	b.n	801051c <read_submessage_info+0x3c>
 801056a:	2000      	movs	r0, #0
 801056c:	e7fa      	b.n	8010564 <read_submessage_info+0x84>
 801056e:	bf00      	nop

08010570 <read_submessage_list>:
 8010570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010574:	b097      	sub	sp, #92	@ 0x5c
 8010576:	4ec1      	ldr	r6, [pc, #772]	@ (801087c <read_submessage_list+0x30c>)
 8010578:	9209      	str	r2, [sp, #36]	@ 0x24
 801057a:	4604      	mov	r4, r0
 801057c:	460d      	mov	r5, r1
 801057e:	f04f 0801 	mov.w	r8, #1
 8010582:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010586:	aa0c      	add	r2, sp, #48	@ 0x30
 8010588:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801058c:	4628      	mov	r0, r5
 801058e:	f001 fcdf 	bl	8011f50 <uxr_read_submessage_header>
 8010592:	2800      	cmp	r0, #0
 8010594:	f000 813e 	beq.w	8010814 <read_submessage_list+0x2a4>
 8010598:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801059c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80105a0:	3b02      	subs	r3, #2
 80105a2:	2b0d      	cmp	r3, #13
 80105a4:	d8ed      	bhi.n	8010582 <read_submessage_list+0x12>
 80105a6:	a101      	add	r1, pc, #4	@ (adr r1, 80105ac <read_submessage_list+0x3c>)
 80105a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105ac:	0801080b 	.word	0x0801080b
 80105b0:	08010583 	.word	0x08010583
 80105b4:	080107fb 	.word	0x080107fb
 80105b8:	08010799 	.word	0x08010799
 80105bc:	0801078f 	.word	0x0801078f
 80105c0:	08010583 	.word	0x08010583
 80105c4:	08010583 	.word	0x08010583
 80105c8:	080106ef 	.word	0x080106ef
 80105cc:	0801067f 	.word	0x0801067f
 80105d0:	0801063f 	.word	0x0801063f
 80105d4:	08010583 	.word	0x08010583
 80105d8:	08010583 	.word	0x08010583
 80105dc:	08010583 	.word	0x08010583
 80105e0:	080105e5 	.word	0x080105e5
 80105e4:	a910      	add	r1, sp, #64	@ 0x40
 80105e6:	4628      	mov	r0, r5
 80105e8:	f002 fdfa 	bl	80131e0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80105ec:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80105f0:	f1b9 0f00 	cmp.w	r9, #0
 80105f4:	f000 8116 	beq.w	8010824 <read_submessage_list+0x2b4>
 80105f8:	f001 fcf0 	bl	8011fdc <uxr_nanos>
 80105fc:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80105fe:	4602      	mov	r2, r0
 8010600:	460b      	mov	r3, r1
 8010602:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010604:	2100      	movs	r1, #0
 8010606:	468c      	mov	ip, r1
 8010608:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801060c:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010610:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010612:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010614:	468c      	mov	ip, r1
 8010616:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801061a:	46e2      	mov	sl, ip
 801061c:	46bc      	mov	ip, r7
 801061e:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8010622:	fbc0 7106 	smlal	r7, r1, r0, r6
 8010626:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801062a:	e9cd 7100 	strd	r7, r1, [sp]
 801062e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010632:	9106      	str	r1, [sp, #24]
 8010634:	4620      	mov	r0, r4
 8010636:	47c8      	blx	r9
 8010638:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 801063c:	e7a1      	b.n	8010582 <read_submessage_list+0x12>
 801063e:	a910      	add	r1, sp, #64	@ 0x40
 8010640:	4628      	mov	r0, r5
 8010642:	f002 fdad 	bl	80131a0 <uxr_deserialize_HEARTBEAT_Payload>
 8010646:	2100      	movs	r1, #0
 8010648:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801064c:	f001 fb58 	bl	8011d00 <uxr_stream_id_from_raw>
 8010650:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010654:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010656:	4639      	mov	r1, r7
 8010658:	f104 0008 	add.w	r0, r4, #8
 801065c:	f001 fc3e 	bl	8011edc <uxr_get_input_reliable_stream>
 8010660:	2800      	cmp	r0, #0
 8010662:	d08e      	beq.n	8010582 <read_submessage_list+0x12>
 8010664:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010668:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801066c:	f007 f938 	bl	80178e0 <uxr_process_heartbeat>
 8010670:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010674:	463a      	mov	r2, r7
 8010676:	4620      	mov	r0, r4
 8010678:	f7ff fde4 	bl	8010244 <write_submessage_acknack.isra.0>
 801067c:	e781      	b.n	8010582 <read_submessage_list+0x12>
 801067e:	a910      	add	r1, sp, #64	@ 0x40
 8010680:	4628      	mov	r0, r5
 8010682:	f002 fd65 	bl	8013150 <uxr_deserialize_ACKNACK_Payload>
 8010686:	2100      	movs	r1, #0
 8010688:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801068c:	f001 fb38 	bl	8011d00 <uxr_stream_id_from_raw>
 8010690:	900d      	str	r0, [sp, #52]	@ 0x34
 8010692:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010696:	f104 0008 	add.w	r0, r4, #8
 801069a:	f001 fc0b 	bl	8011eb4 <uxr_get_output_reliable_stream>
 801069e:	4607      	mov	r7, r0
 80106a0:	2800      	cmp	r0, #0
 80106a2:	f43f af6e 	beq.w	8010582 <read_submessage_list+0x12>
 80106a6:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80106aa:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80106ae:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80106b2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80106b6:	b289      	uxth	r1, r1
 80106b8:	f007 fc6c 	bl	8017f94 <uxr_process_acknack>
 80106bc:	4638      	mov	r0, r7
 80106be:	f007 fc29 	bl	8017f14 <uxr_begin_output_nack_buffer_it>
 80106c2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80106c6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80106ca:	e006      	b.n	80106da <read_submessage_list+0x16a>
 80106cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80106ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80106d0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80106d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80106d6:	6818      	ldr	r0, [r3, #0]
 80106d8:	47c8      	blx	r9
 80106da:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80106de:	aa0f      	add	r2, sp, #60	@ 0x3c
 80106e0:	4651      	mov	r1, sl
 80106e2:	4638      	mov	r0, r7
 80106e4:	f007 fc18 	bl	8017f18 <uxr_next_reliable_nack_buffer_to_send>
 80106e8:	2800      	cmp	r0, #0
 80106ea:	d1ef      	bne.n	80106cc <read_submessage_list+0x15c>
 80106ec:	e749      	b.n	8010582 <read_submessage_list+0x12>
 80106ee:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80106f2:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80106f6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80106fa:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80106fe:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8010702:	4651      	mov	r1, sl
 8010704:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010708:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 801070c:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8010710:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010714:	4628      	mov	r0, r5
 8010716:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801071a:	f002 fa79 	bl	8012c10 <uxr_deserialize_BaseObjectRequest>
 801071e:	4650      	mov	r0, sl
 8010720:	a90f      	add	r1, sp, #60	@ 0x3c
 8010722:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010726:	f000 fe1d 	bl	8011364 <uxr_parse_base_object_request>
 801072a:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801072e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010730:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010734:	9110      	str	r1, [sp, #64]	@ 0x40
 8010736:	3f04      	subs	r7, #4
 8010738:	f009 090e 	and.w	r9, r9, #14
 801073c:	b2bf      	uxth	r7, r7
 801073e:	f1bb 0f00 	cmp.w	fp, #0
 8010742:	d006      	beq.n	8010752 <read_submessage_list+0x1e2>
 8010744:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	4652      	mov	r2, sl
 801074c:	2300      	movs	r3, #0
 801074e:	4620      	mov	r0, r4
 8010750:	47d8      	blx	fp
 8010752:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010754:	b16a      	cbz	r2, 8010772 <read_submessage_list+0x202>
 8010756:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010758:	2100      	movs	r1, #0
 801075a:	3802      	subs	r0, #2
 801075c:	e002      	b.n	8010764 <read_submessage_list+0x1f4>
 801075e:	3101      	adds	r1, #1
 8010760:	4291      	cmp	r1, r2
 8010762:	d006      	beq.n	8010772 <read_submessage_list+0x202>
 8010764:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010768:	4553      	cmp	r3, sl
 801076a:	d1f8      	bne.n	801075e <read_submessage_list+0x1ee>
 801076c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801076e:	2200      	movs	r2, #0
 8010770:	545a      	strb	r2, [r3, r1]
 8010772:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010776:	9102      	str	r1, [sp, #8]
 8010778:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801077a:	9101      	str	r1, [sp, #4]
 801077c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801077e:	9100      	str	r1, [sp, #0]
 8010780:	464b      	mov	r3, r9
 8010782:	463a      	mov	r2, r7
 8010784:	4629      	mov	r1, r5
 8010786:	4620      	mov	r0, r4
 8010788:	f7ff fc3a 	bl	8010000 <read_submessage_format>
 801078c:	e6f9      	b.n	8010582 <read_submessage_list+0x12>
 801078e:	4629      	mov	r1, r5
 8010790:	4620      	mov	r0, r4
 8010792:	f7ff fea5 	bl	80104e0 <read_submessage_info>
 8010796:	e6f4      	b.n	8010582 <read_submessage_list+0x12>
 8010798:	2a00      	cmp	r2, #0
 801079a:	d03e      	beq.n	801081a <read_submessage_list+0x2aa>
 801079c:	a910      	add	r1, sp, #64	@ 0x40
 801079e:	4628      	mov	r0, r5
 80107a0:	f002 fc32 	bl	8013008 <uxr_deserialize_STATUS_Payload>
 80107a4:	a90e      	add	r1, sp, #56	@ 0x38
 80107a6:	aa0d      	add	r2, sp, #52	@ 0x34
 80107a8:	a810      	add	r0, sp, #64	@ 0x40
 80107aa:	f000 fddb 	bl	8011364 <uxr_parse_base_object_request>
 80107ae:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80107b2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80107b4:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80107b8:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 80107bc:	910f      	str	r1, [sp, #60]	@ 0x3c
 80107be:	f1ba 0f00 	cmp.w	sl, #0
 80107c2:	d006      	beq.n	80107d2 <read_submessage_list+0x262>
 80107c4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80107c8:	9300      	str	r3, [sp, #0]
 80107ca:	463a      	mov	r2, r7
 80107cc:	464b      	mov	r3, r9
 80107ce:	4620      	mov	r0, r4
 80107d0:	47d0      	blx	sl
 80107d2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80107d4:	2a00      	cmp	r2, #0
 80107d6:	f43f aed4 	beq.w	8010582 <read_submessage_list+0x12>
 80107da:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80107dc:	2100      	movs	r1, #0
 80107de:	3802      	subs	r0, #2
 80107e0:	e003      	b.n	80107ea <read_submessage_list+0x27a>
 80107e2:	3101      	adds	r1, #1
 80107e4:	4291      	cmp	r1, r2
 80107e6:	f43f aecc 	beq.w	8010582 <read_submessage_list+0x12>
 80107ea:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80107ee:	42bb      	cmp	r3, r7
 80107f0:	d1f7      	bne.n	80107e2 <read_submessage_list+0x272>
 80107f2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80107f4:	f803 9001 	strb.w	r9, [r3, r1]
 80107f8:	e6c3      	b.n	8010582 <read_submessage_list+0x12>
 80107fa:	2a00      	cmp	r2, #0
 80107fc:	f47f aec1 	bne.w	8010582 <read_submessage_list+0x12>
 8010800:	4629      	mov	r1, r5
 8010802:	4620      	mov	r0, r4
 8010804:	f000 fcf4 	bl	80111f0 <uxr_read_create_session_status>
 8010808:	e6bb      	b.n	8010582 <read_submessage_list+0x12>
 801080a:	4629      	mov	r1, r5
 801080c:	4620      	mov	r0, r4
 801080e:	f7ff fce3 	bl	80101d8 <read_submessage_get_info>
 8010812:	e6b6      	b.n	8010582 <read_submessage_list+0x12>
 8010814:	b017      	add	sp, #92	@ 0x5c
 8010816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801081a:	4629      	mov	r1, r5
 801081c:	4620      	mov	r0, r4
 801081e:	f000 fcf3 	bl	8011208 <uxr_read_delete_session_status>
 8010822:	e6ae      	b.n	8010582 <read_submessage_list+0x12>
 8010824:	f001 fbda 	bl	8011fdc <uxr_nanos>
 8010828:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801082a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801082c:	464f      	mov	r7, r9
 801082e:	fbc3 2706 	smlal	r2, r7, r3, r6
 8010832:	1812      	adds	r2, r2, r0
 8010834:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010836:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010838:	eb47 0101 	adc.w	r1, r7, r1
 801083c:	464f      	mov	r7, r9
 801083e:	fbc3 0706 	smlal	r0, r7, r3, r6
 8010842:	463b      	mov	r3, r7
 8010844:	4684      	mov	ip, r0
 8010846:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801084a:	fbc7 0906 	smlal	r0, r9, r7, r6
 801084e:	eb1c 0c00 	adds.w	ip, ip, r0
 8010852:	464f      	mov	r7, r9
 8010854:	eb43 0307 	adc.w	r3, r3, r7
 8010858:	ebb2 0c0c 	subs.w	ip, r2, ip
 801085c:	eb61 0303 	sbc.w	r3, r1, r3
 8010860:	0fda      	lsrs	r2, r3, #31
 8010862:	eb12 020c 	adds.w	r2, r2, ip
 8010866:	f143 0300 	adc.w	r3, r3, #0
 801086a:	0852      	lsrs	r2, r2, #1
 801086c:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010870:	105b      	asrs	r3, r3, #1
 8010872:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8010876:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801087a:	e6dd      	b.n	8010638 <read_submessage_list+0xc8>
 801087c:	3b9aca00 	.word	0x3b9aca00

08010880 <listen_message_reliably>:
 8010880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010884:	1e0b      	subs	r3, r1, #0
 8010886:	b09d      	sub	sp, #116	@ 0x74
 8010888:	bfb8      	it	lt
 801088a:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801088e:	4680      	mov	r8, r0
 8010890:	9305      	str	r3, [sp, #20]
 8010892:	f001 fb89 	bl	8011fa8 <uxr_millis>
 8010896:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801089a:	4681      	mov	r9, r0
 801089c:	2a00      	cmp	r2, #0
 801089e:	f000 80a1 	beq.w	80109e4 <listen_message_reliably+0x164>
 80108a2:	2600      	movs	r6, #0
 80108a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80108a8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80108ac:	9303      	str	r3, [sp, #12]
 80108ae:	4630      	mov	r0, r6
 80108b0:	460f      	mov	r7, r1
 80108b2:	e00f      	b.n	80108d4 <listen_message_reliably+0x54>
 80108b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80108b8:	9903      	ldr	r1, [sp, #12]
 80108ba:	455a      	cmp	r2, fp
 80108bc:	f106 0601 	add.w	r6, r6, #1
 80108c0:	eb73 0101 	sbcs.w	r1, r3, r1
 80108c4:	b2f0      	uxtb	r0, r6
 80108c6:	da01      	bge.n	80108cc <listen_message_reliably+0x4c>
 80108c8:	4693      	mov	fp, r2
 80108ca:	9303      	str	r3, [sp, #12]
 80108cc:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80108d0:	4283      	cmp	r3, r0
 80108d2:	d960      	bls.n	8010996 <listen_message_reliably+0x116>
 80108d4:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80108d8:	2102      	movs	r1, #2
 80108da:	2201      	movs	r2, #1
 80108dc:	f001 f9e6 	bl	8011cac <uxr_stream_id>
 80108e0:	00e4      	lsls	r4, r4, #3
 80108e2:	f104 0520 	add.w	r5, r4, #32
 80108e6:	4445      	add	r5, r8
 80108e8:	4601      	mov	r1, r0
 80108ea:	463b      	mov	r3, r7
 80108ec:	464a      	mov	r2, r9
 80108ee:	4628      	mov	r0, r5
 80108f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80108f2:	f007 fae5 	bl	8017ec0 <uxr_update_output_stream_heartbeat_timestamp>
 80108f6:	eb08 0304 	add.w	r3, r8, r4
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d0da      	beq.n	80108b4 <listen_message_reliably+0x34>
 80108fe:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010902:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010906:	9304      	str	r3, [sp, #16]
 8010908:	4640      	mov	r0, r8
 801090a:	f000 fd05 	bl	8011318 <uxr_session_header_offset>
 801090e:	3501      	adds	r5, #1
 8010910:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010914:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010918:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801091c:	2300      	movs	r3, #0
 801091e:	2211      	movs	r2, #17
 8010920:	9000      	str	r0, [sp, #0]
 8010922:	a90c      	add	r1, sp, #48	@ 0x30
 8010924:	4650      	mov	r0, sl
 8010926:	f7fb fc05 	bl	800c134 <ucdr_init_buffer_origin_offset>
 801092a:	2300      	movs	r3, #0
 801092c:	2205      	movs	r2, #5
 801092e:	210b      	movs	r1, #11
 8010930:	4650      	mov	r0, sl
 8010932:	f001 faf3 	bl	8011f1c <uxr_buffer_submessage_header>
 8010936:	8968      	ldrh	r0, [r5, #10]
 8010938:	2101      	movs	r1, #1
 801093a:	f007 fb83 	bl	8018044 <uxr_seq_num_add>
 801093e:	892b      	ldrh	r3, [r5, #8]
 8010940:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010944:	4602      	mov	r2, r0
 8010946:	9b04      	ldr	r3, [sp, #16]
 8010948:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801094c:	a90a      	add	r1, sp, #40	@ 0x28
 801094e:	4650      	mov	r0, sl
 8010950:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010954:	f002 fc10 	bl	8013178 <uxr_serialize_HEARTBEAT_Payload>
 8010958:	2200      	movs	r2, #0
 801095a:	4611      	mov	r1, r2
 801095c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801095e:	4640      	mov	r0, r8
 8010960:	f000 fc84 	bl	801126c <uxr_stamp_session_header>
 8010964:	4650      	mov	r0, sl
 8010966:	f7fb fc23 	bl	800c1b0 <ucdr_buffer_length>
 801096a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801096e:	4602      	mov	r2, r0
 8010970:	a90c      	add	r1, sp, #48	@ 0x30
 8010972:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010976:	4444      	add	r4, r8
 8010978:	47a8      	blx	r5
 801097a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801097e:	9903      	ldr	r1, [sp, #12]
 8010980:	455a      	cmp	r2, fp
 8010982:	f106 0601 	add.w	r6, r6, #1
 8010986:	eb73 0101 	sbcs.w	r1, r3, r1
 801098a:	b2f0      	uxtb	r0, r6
 801098c:	db9c      	blt.n	80108c8 <listen_message_reliably+0x48>
 801098e:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010992:	4283      	cmp	r3, r0
 8010994:	d89e      	bhi.n	80108d4 <listen_message_reliably+0x54>
 8010996:	9a03      	ldr	r2, [sp, #12]
 8010998:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801099c:	429a      	cmp	r2, r3
 801099e:	bf08      	it	eq
 80109a0:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80109a4:	d01e      	beq.n	80109e4 <listen_message_reliably+0x164>
 80109a6:	ebab 0309 	sub.w	r3, fp, r9
 80109aa:	9905      	ldr	r1, [sp, #20]
 80109ac:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	bf08      	it	eq
 80109b4:	2301      	moveq	r3, #1
 80109b6:	4299      	cmp	r1, r3
 80109b8:	bfa8      	it	ge
 80109ba:	4619      	movge	r1, r3
 80109bc:	6894      	ldr	r4, [r2, #8]
 80109be:	6810      	ldr	r0, [r2, #0]
 80109c0:	4689      	mov	r9, r1
 80109c2:	460b      	mov	r3, r1
 80109c4:	aa08      	add	r2, sp, #32
 80109c6:	a907      	add	r1, sp, #28
 80109c8:	47a0      	blx	r4
 80109ca:	b968      	cbnz	r0, 80109e8 <listen_message_reliably+0x168>
 80109cc:	9b05      	ldr	r3, [sp, #20]
 80109ce:	eba3 0309 	sub.w	r3, r3, r9
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	9305      	str	r3, [sp, #20]
 80109d6:	f73f af5c 	bgt.w	8010892 <listen_message_reliably+0x12>
 80109da:	4604      	mov	r4, r0
 80109dc:	4620      	mov	r0, r4
 80109de:	b01d      	add	sp, #116	@ 0x74
 80109e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109e4:	9b05      	ldr	r3, [sp, #20]
 80109e6:	e7e0      	b.n	80109aa <listen_message_reliably+0x12a>
 80109e8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80109ec:	4604      	mov	r4, r0
 80109ee:	a80c      	add	r0, sp, #48	@ 0x30
 80109f0:	f7fb fbb2 	bl	800c158 <ucdr_init_buffer>
 80109f4:	2500      	movs	r5, #0
 80109f6:	f10d 031a 	add.w	r3, sp, #26
 80109fa:	aa06      	add	r2, sp, #24
 80109fc:	a90c      	add	r1, sp, #48	@ 0x30
 80109fe:	4640      	mov	r0, r8
 8010a00:	f88d 5018 	strb.w	r5, [sp, #24]
 8010a04:	f000 fc46 	bl	8011294 <uxr_read_session_header>
 8010a08:	b918      	cbnz	r0, 8010a12 <listen_message_reliably+0x192>
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	b01d      	add	sp, #116	@ 0x74
 8010a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a12:	4629      	mov	r1, r5
 8010a14:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010a18:	f001 f972 	bl	8011d00 <uxr_stream_id_from_raw>
 8010a1c:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8010a20:	2d01      	cmp	r5, #1
 8010a22:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010a26:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010a2a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010a2e:	d04b      	beq.n	8010ac8 <listen_message_reliably+0x248>
 8010a30:	2d02      	cmp	r5, #2
 8010a32:	d00f      	beq.n	8010a54 <listen_message_reliably+0x1d4>
 8010a34:	2d00      	cmp	r5, #0
 8010a36:	d1e8      	bne.n	8010a0a <listen_message_reliably+0x18a>
 8010a38:	4629      	mov	r1, r5
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	f001 f960 	bl	8011d00 <uxr_stream_id_from_raw>
 8010a40:	a90c      	add	r1, sp, #48	@ 0x30
 8010a42:	4602      	mov	r2, r0
 8010a44:	4640      	mov	r0, r8
 8010a46:	920a      	str	r2, [sp, #40]	@ 0x28
 8010a48:	f7ff fd92 	bl	8010570 <read_submessage_list>
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	b01d      	add	sp, #116	@ 0x74
 8010a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a54:	4631      	mov	r1, r6
 8010a56:	f108 0008 	add.w	r0, r8, #8
 8010a5a:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010a5e:	f001 fa3d 	bl	8011edc <uxr_get_input_reliable_stream>
 8010a62:	4607      	mov	r7, r0
 8010a64:	b338      	cbz	r0, 8010ab6 <listen_message_reliably+0x236>
 8010a66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a68:	9203      	str	r2, [sp, #12]
 8010a6a:	a80c      	add	r0, sp, #48	@ 0x30
 8010a6c:	f7fb fba4 	bl	800c1b8 <ucdr_buffer_remaining>
 8010a70:	4603      	mov	r3, r0
 8010a72:	f10d 0019 	add.w	r0, sp, #25
 8010a76:	9000      	str	r0, [sp, #0]
 8010a78:	9a03      	ldr	r2, [sp, #12]
 8010a7a:	4651      	mov	r1, sl
 8010a7c:	4638      	mov	r0, r7
 8010a7e:	f006 fe35 	bl	80176ec <uxr_receive_reliable_message>
 8010a82:	b1c0      	cbz	r0, 8010ab6 <listen_message_reliably+0x236>
 8010a84:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010a88:	b393      	cbz	r3, 8010af0 <listen_message_reliably+0x270>
 8010a8a:	ad14      	add	r5, sp, #80	@ 0x50
 8010a8c:	f04f 0a02 	mov.w	sl, #2
 8010a90:	e00a      	b.n	8010aa8 <listen_message_reliably+0x228>
 8010a92:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8010a96:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010a9a:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010a9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010aa0:	4629      	mov	r1, r5
 8010aa2:	4640      	mov	r0, r8
 8010aa4:	f7ff fd64 	bl	8010570 <read_submessage_list>
 8010aa8:	2204      	movs	r2, #4
 8010aaa:	4629      	mov	r1, r5
 8010aac:	4638      	mov	r0, r7
 8010aae:	f006 fe9d 	bl	80177ec <uxr_next_input_reliable_buffer_available>
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	d1ed      	bne.n	8010a92 <listen_message_reliably+0x212>
 8010ab6:	4640      	mov	r0, r8
 8010ab8:	4632      	mov	r2, r6
 8010aba:	4649      	mov	r1, r9
 8010abc:	f7ff fbc2 	bl	8010244 <write_submessage_acknack.isra.0>
 8010ac0:	4620      	mov	r0, r4
 8010ac2:	b01d      	add	sp, #116	@ 0x74
 8010ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac8:	4631      	mov	r1, r6
 8010aca:	f108 0008 	add.w	r0, r8, #8
 8010ace:	f001 f9fb 	bl	8011ec8 <uxr_get_input_best_effort_stream>
 8010ad2:	2800      	cmp	r0, #0
 8010ad4:	d099      	beq.n	8010a0a <listen_message_reliably+0x18a>
 8010ad6:	4651      	mov	r1, sl
 8010ad8:	f006 fd74 	bl	80175c4 <uxr_receive_best_effort_message>
 8010adc:	2800      	cmp	r0, #0
 8010ade:	d094      	beq.n	8010a0a <listen_message_reliably+0x18a>
 8010ae0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010ae4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010ae6:	a90c      	add	r1, sp, #48	@ 0x30
 8010ae8:	4640      	mov	r0, r8
 8010aea:	f7ff fd41 	bl	8010570 <read_submessage_list>
 8010aee:	e78c      	b.n	8010a0a <listen_message_reliably+0x18a>
 8010af0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010af4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010af6:	a90c      	add	r1, sp, #48	@ 0x30
 8010af8:	4640      	mov	r0, r8
 8010afa:	f7ff fd39 	bl	8010570 <read_submessage_list>
 8010afe:	e7c4      	b.n	8010a8a <listen_message_reliably+0x20a>

08010b00 <uxr_run_session_timeout>:
 8010b00:	b570      	push	{r4, r5, r6, lr}
 8010b02:	4604      	mov	r4, r0
 8010b04:	460d      	mov	r5, r1
 8010b06:	f001 fa4f 	bl	8011fa8 <uxr_millis>
 8010b0a:	4606      	mov	r6, r0
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f7ff fc71 	bl	80103f4 <uxr_flash_output_streams>
 8010b12:	4629      	mov	r1, r5
 8010b14:	4620      	mov	r0, r4
 8010b16:	f7ff feb3 	bl	8010880 <listen_message_reliably>
 8010b1a:	f001 fa45 	bl	8011fa8 <uxr_millis>
 8010b1e:	1b83      	subs	r3, r0, r6
 8010b20:	1ae9      	subs	r1, r5, r3
 8010b22:	2900      	cmp	r1, #0
 8010b24:	dcf6      	bgt.n	8010b14 <uxr_run_session_timeout+0x14>
 8010b26:	f104 0008 	add.w	r0, r4, #8
 8010b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b2e:	f001 b9df 	b.w	8011ef0 <uxr_output_streams_confirmed>
 8010b32:	bf00      	nop

08010b34 <uxr_run_session_until_data>:
 8010b34:	b570      	push	{r4, r5, r6, lr}
 8010b36:	4604      	mov	r4, r0
 8010b38:	460d      	mov	r5, r1
 8010b3a:	f001 fa35 	bl	8011fa8 <uxr_millis>
 8010b3e:	4606      	mov	r6, r0
 8010b40:	4620      	mov	r0, r4
 8010b42:	f7ff fc57 	bl	80103f4 <uxr_flash_output_streams>
 8010b46:	2300      	movs	r3, #0
 8010b48:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010b4c:	4629      	mov	r1, r5
 8010b4e:	e005      	b.n	8010b5c <uxr_run_session_until_data+0x28>
 8010b50:	f001 fa2a 	bl	8011fa8 <uxr_millis>
 8010b54:	1b83      	subs	r3, r0, r6
 8010b56:	1ae9      	subs	r1, r5, r3
 8010b58:	2900      	cmp	r1, #0
 8010b5a:	dd07      	ble.n	8010b6c <uxr_run_session_until_data+0x38>
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	f7ff fe8f 	bl	8010880 <listen_message_reliably>
 8010b62:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d0f2      	beq.n	8010b50 <uxr_run_session_until_data+0x1c>
 8010b6a:	bd70      	pop	{r4, r5, r6, pc}
 8010b6c:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010b70:	bd70      	pop	{r4, r5, r6, pc}
 8010b72:	bf00      	nop

08010b74 <uxr_run_session_until_confirm_delivery>:
 8010b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b78:	4606      	mov	r6, r0
 8010b7a:	460d      	mov	r5, r1
 8010b7c:	f001 fa14 	bl	8011fa8 <uxr_millis>
 8010b80:	4607      	mov	r7, r0
 8010b82:	4630      	mov	r0, r6
 8010b84:	f7ff fc36 	bl	80103f4 <uxr_flash_output_streams>
 8010b88:	2d00      	cmp	r5, #0
 8010b8a:	f106 0808 	add.w	r8, r6, #8
 8010b8e:	bfa8      	it	ge
 8010b90:	462c      	movge	r4, r5
 8010b92:	da07      	bge.n	8010ba4 <uxr_run_session_until_confirm_delivery+0x30>
 8010b94:	e00e      	b.n	8010bb4 <uxr_run_session_until_confirm_delivery+0x40>
 8010b96:	f7ff fe73 	bl	8010880 <listen_message_reliably>
 8010b9a:	f001 fa05 	bl	8011fa8 <uxr_millis>
 8010b9e:	1bc3      	subs	r3, r0, r7
 8010ba0:	1aec      	subs	r4, r5, r3
 8010ba2:	d407      	bmi.n	8010bb4 <uxr_run_session_until_confirm_delivery+0x40>
 8010ba4:	4640      	mov	r0, r8
 8010ba6:	f001 f9a3 	bl	8011ef0 <uxr_output_streams_confirmed>
 8010baa:	4603      	mov	r3, r0
 8010bac:	4621      	mov	r1, r4
 8010bae:	4630      	mov	r0, r6
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d0f0      	beq.n	8010b96 <uxr_run_session_until_confirm_delivery+0x22>
 8010bb4:	4640      	mov	r0, r8
 8010bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bba:	f001 b999 	b.w	8011ef0 <uxr_output_streams_confirmed>
 8010bbe:	bf00      	nop

08010bc0 <uxr_run_session_until_all_status>:
 8010bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bc4:	9c08      	ldr	r4, [sp, #32]
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	460f      	mov	r7, r1
 8010bca:	4691      	mov	r9, r2
 8010bcc:	461d      	mov	r5, r3
 8010bce:	f7ff fc11 	bl	80103f4 <uxr_flash_output_streams>
 8010bd2:	b124      	cbz	r4, 8010bde <uxr_run_session_until_all_status+0x1e>
 8010bd4:	4622      	mov	r2, r4
 8010bd6:	21ff      	movs	r1, #255	@ 0xff
 8010bd8:	4628      	mov	r0, r5
 8010bda:	f008 fb4b 	bl	8019274 <memset>
 8010bde:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8010be2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010be4:	f001 f9e0 	bl	8011fa8 <uxr_millis>
 8010be8:	3d01      	subs	r5, #1
 8010bea:	f1a9 0902 	sub.w	r9, r9, #2
 8010bee:	4680      	mov	r8, r0
 8010bf0:	4639      	mov	r1, r7
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f7ff fe44 	bl	8010880 <listen_message_reliably>
 8010bf8:	f001 f9d6 	bl	8011fa8 <uxr_millis>
 8010bfc:	eba0 0008 	sub.w	r0, r0, r8
 8010c00:	1a39      	subs	r1, r7, r0
 8010c02:	b344      	cbz	r4, 8010c56 <uxr_run_session_until_all_status+0x96>
 8010c04:	4628      	mov	r0, r5
 8010c06:	46ac      	mov	ip, r5
 8010c08:	2301      	movs	r3, #1
 8010c0a:	e002      	b.n	8010c12 <uxr_run_session_until_all_status+0x52>
 8010c0c:	42a3      	cmp	r3, r4
 8010c0e:	d20d      	bcs.n	8010c2c <uxr_run_session_until_all_status+0x6c>
 8010c10:	3301      	adds	r3, #1
 8010c12:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8010c16:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8010c1a:	d1f7      	bne.n	8010c0c <uxr_run_session_until_all_status+0x4c>
 8010c1c:	42a3      	cmp	r3, r4
 8010c1e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8010c22:	d213      	bcs.n	8010c4c <uxr_run_session_until_all_status+0x8c>
 8010c24:	2a00      	cmp	r2, #0
 8010c26:	d0f3      	beq.n	8010c10 <uxr_run_session_until_all_status+0x50>
 8010c28:	2900      	cmp	r1, #0
 8010c2a:	dce2      	bgt.n	8010bf2 <uxr_run_session_until_all_status+0x32>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010c30:	442c      	add	r4, r5
 8010c32:	e001      	b.n	8010c38 <uxr_run_session_until_all_status+0x78>
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d812      	bhi.n	8010c5e <uxr_run_session_until_all_status+0x9e>
 8010c38:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010c3c:	4284      	cmp	r4, r0
 8010c3e:	d1f9      	bne.n	8010c34 <uxr_run_session_until_all_status+0x74>
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	bf8c      	ite	hi
 8010c44:	2000      	movhi	r0, #0
 8010c46:	2001      	movls	r0, #1
 8010c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c4c:	2900      	cmp	r1, #0
 8010c4e:	dded      	ble.n	8010c2c <uxr_run_session_until_all_status+0x6c>
 8010c50:	2a00      	cmp	r2, #0
 8010c52:	d1ce      	bne.n	8010bf2 <uxr_run_session_until_all_status+0x32>
 8010c54:	e7ea      	b.n	8010c2c <uxr_run_session_until_all_status+0x6c>
 8010c56:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010c58:	2001      	movs	r0, #1
 8010c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c5e:	2000      	movs	r0, #0
 8010c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c64:	0000      	movs	r0, r0
	...

08010c68 <uxr_sync_session>:
 8010c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c6a:	b093      	sub	sp, #76	@ 0x4c
 8010c6c:	4604      	mov	r4, r0
 8010c6e:	460d      	mov	r5, r1
 8010c70:	f000 fb52 	bl	8011318 <uxr_session_header_offset>
 8010c74:	2214      	movs	r2, #20
 8010c76:	eb0d 0102 	add.w	r1, sp, r2
 8010c7a:	9000      	str	r0, [sp, #0]
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	a80a      	add	r0, sp, #40	@ 0x28
 8010c80:	f7fb fa58 	bl	800c134 <ucdr_init_buffer_origin_offset>
 8010c84:	2300      	movs	r3, #0
 8010c86:	2208      	movs	r2, #8
 8010c88:	210e      	movs	r1, #14
 8010c8a:	a80a      	add	r0, sp, #40	@ 0x28
 8010c8c:	f001 f946 	bl	8011f1c <uxr_buffer_submessage_header>
 8010c90:	f001 f9a4 	bl	8011fdc <uxr_nanos>
 8010c94:	a31c      	add	r3, pc, #112	@ (adr r3, 8010d08 <uxr_sync_session+0xa0>)
 8010c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9a:	460e      	mov	r6, r1
 8010c9c:	4607      	mov	r7, r0
 8010c9e:	f7ef ff93 	bl	8000bc8 <__aeabi_ldivmod>
 8010ca2:	4631      	mov	r1, r6
 8010ca4:	9003      	str	r0, [sp, #12]
 8010ca6:	a318      	add	r3, pc, #96	@ (adr r3, 8010d08 <uxr_sync_session+0xa0>)
 8010ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cac:	4638      	mov	r0, r7
 8010cae:	f7ef ff8b 	bl	8000bc8 <__aeabi_ldivmod>
 8010cb2:	a903      	add	r1, sp, #12
 8010cb4:	a80a      	add	r0, sp, #40	@ 0x28
 8010cb6:	9204      	str	r2, [sp, #16]
 8010cb8:	f002 fa84 	bl	80131c4 <uxr_serialize_TIMESTAMP_Payload>
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	4611      	mov	r1, r2
 8010cc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f000 fad2 	bl	801126c <uxr_stamp_session_header>
 8010cc8:	a80a      	add	r0, sp, #40	@ 0x28
 8010cca:	f7fb fa71 	bl	800c1b0 <ucdr_buffer_length>
 8010cce:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	a905      	add	r1, sp, #20
 8010cd4:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010cd8:	47b0      	blx	r6
 8010cda:	f001 f965 	bl	8011fa8 <uxr_millis>
 8010cde:	2300      	movs	r3, #0
 8010ce0:	4606      	mov	r6, r0
 8010ce2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010ce6:	4629      	mov	r1, r5
 8010ce8:	e000      	b.n	8010cec <uxr_sync_session+0x84>
 8010cea:	b950      	cbnz	r0, 8010d02 <uxr_sync_session+0x9a>
 8010cec:	4620      	mov	r0, r4
 8010cee:	f7ff fdc7 	bl	8010880 <listen_message_reliably>
 8010cf2:	f001 f959 	bl	8011fa8 <uxr_millis>
 8010cf6:	1b83      	subs	r3, r0, r6
 8010cf8:	1ae9      	subs	r1, r5, r3
 8010cfa:	2900      	cmp	r1, #0
 8010cfc:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8010d00:	dcf3      	bgt.n	8010cea <uxr_sync_session+0x82>
 8010d02:	b013      	add	sp, #76	@ 0x4c
 8010d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d06:	bf00      	nop
 8010d08:	3b9aca00 	.word	0x3b9aca00
 8010d0c:	00000000 	.word	0x00000000

08010d10 <wait_session_status>:
 8010d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d14:	4604      	mov	r4, r0
 8010d16:	b09d      	sub	sp, #116	@ 0x74
 8010d18:	20ff      	movs	r0, #255	@ 0xff
 8010d1a:	7160      	strb	r0, [r4, #5]
 8010d1c:	9303      	str	r3, [sp, #12]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f000 80b6 	beq.w	8010e90 <wait_session_status+0x180>
 8010d24:	468a      	mov	sl, r1
 8010d26:	4691      	mov	r9, r2
 8010d28:	f04f 0b00 	mov.w	fp, #0
 8010d2c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d2e:	464a      	mov	r2, r9
 8010d30:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010d34:	4651      	mov	r1, sl
 8010d36:	47a8      	blx	r5
 8010d38:	f001 f936 	bl	8011fa8 <uxr_millis>
 8010d3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010d40:	4605      	mov	r5, r0
 8010d42:	e009      	b.n	8010d58 <wait_session_status+0x48>
 8010d44:	f001 f930 	bl	8011fa8 <uxr_millis>
 8010d48:	1b40      	subs	r0, r0, r5
 8010d4a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	dd40      	ble.n	8010dd4 <wait_session_status+0xc4>
 8010d52:	7960      	ldrb	r0, [r4, #5]
 8010d54:	28ff      	cmp	r0, #255	@ 0xff
 8010d56:	d145      	bne.n	8010de4 <wait_session_status+0xd4>
 8010d58:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010d5a:	a908      	add	r1, sp, #32
 8010d5c:	6896      	ldr	r6, [r2, #8]
 8010d5e:	6810      	ldr	r0, [r2, #0]
 8010d60:	aa09      	add	r2, sp, #36	@ 0x24
 8010d62:	47b0      	blx	r6
 8010d64:	2800      	cmp	r0, #0
 8010d66:	d0ed      	beq.n	8010d44 <wait_session_status+0x34>
 8010d68:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010d6c:	a80c      	add	r0, sp, #48	@ 0x30
 8010d6e:	f7fb f9f3 	bl	800c158 <ucdr_init_buffer>
 8010d72:	2600      	movs	r6, #0
 8010d74:	f10d 031e 	add.w	r3, sp, #30
 8010d78:	aa07      	add	r2, sp, #28
 8010d7a:	a90c      	add	r1, sp, #48	@ 0x30
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	f88d 601c 	strb.w	r6, [sp, #28]
 8010d82:	f000 fa87 	bl	8011294 <uxr_read_session_header>
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d0dc      	beq.n	8010d44 <wait_session_status+0x34>
 8010d8a:	4631      	mov	r1, r6
 8010d8c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010d90:	f000 ffb6 	bl	8011d00 <uxr_stream_id_from_raw>
 8010d94:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010d98:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010d9c:	9302      	str	r3, [sp, #8]
 8010d9e:	2f01      	cmp	r7, #1
 8010da0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8010da4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010da8:	d05c      	beq.n	8010e64 <wait_session_status+0x154>
 8010daa:	2f02      	cmp	r7, #2
 8010dac:	d020      	beq.n	8010df0 <wait_session_status+0xe0>
 8010dae:	2f00      	cmp	r7, #0
 8010db0:	d1c8      	bne.n	8010d44 <wait_session_status+0x34>
 8010db2:	4639      	mov	r1, r7
 8010db4:	4638      	mov	r0, r7
 8010db6:	f000 ffa3 	bl	8011d00 <uxr_stream_id_from_raw>
 8010dba:	a90c      	add	r1, sp, #48	@ 0x30
 8010dbc:	4602      	mov	r2, r0
 8010dbe:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f7ff fbd5 	bl	8010570 <read_submessage_list>
 8010dc6:	f001 f8ef 	bl	8011fa8 <uxr_millis>
 8010dca:	1b40      	subs	r0, r0, r5
 8010dcc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	dcbe      	bgt.n	8010d52 <wait_session_status+0x42>
 8010dd4:	9b03      	ldr	r3, [sp, #12]
 8010dd6:	7960      	ldrb	r0, [r4, #5]
 8010dd8:	f10b 0b01 	add.w	fp, fp, #1
 8010ddc:	455b      	cmp	r3, fp
 8010dde:	d001      	beq.n	8010de4 <wait_session_status+0xd4>
 8010de0:	28ff      	cmp	r0, #255	@ 0xff
 8010de2:	d0a3      	beq.n	8010d2c <wait_session_status+0x1c>
 8010de4:	38ff      	subs	r0, #255	@ 0xff
 8010de6:	bf18      	it	ne
 8010de8:	2001      	movne	r0, #1
 8010dea:	b01d      	add	sp, #116	@ 0x74
 8010dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8010df4:	9304      	str	r3, [sp, #16]
 8010df6:	4631      	mov	r1, r6
 8010df8:	f104 0008 	add.w	r0, r4, #8
 8010dfc:	f001 f86e 	bl	8011edc <uxr_get_input_reliable_stream>
 8010e00:	4680      	mov	r8, r0
 8010e02:	b348      	cbz	r0, 8010e58 <wait_session_status+0x148>
 8010e04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e06:	9205      	str	r2, [sp, #20]
 8010e08:	a80c      	add	r0, sp, #48	@ 0x30
 8010e0a:	f7fb f9d5 	bl	800c1b8 <ucdr_buffer_remaining>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	f10d 001d 	add.w	r0, sp, #29
 8010e14:	9000      	str	r0, [sp, #0]
 8010e16:	9a05      	ldr	r2, [sp, #20]
 8010e18:	9902      	ldr	r1, [sp, #8]
 8010e1a:	4640      	mov	r0, r8
 8010e1c:	f006 fc66 	bl	80176ec <uxr_receive_reliable_message>
 8010e20:	b1d0      	cbz	r0, 8010e58 <wait_session_status+0x148>
 8010e22:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d03a      	beq.n	8010ea0 <wait_session_status+0x190>
 8010e2a:	9f04      	ldr	r7, [sp, #16]
 8010e2c:	e00a      	b.n	8010e44 <wait_session_status+0x134>
 8010e2e:	f04f 0302 	mov.w	r3, #2
 8010e32:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8010e36:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010e3a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010e3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010e40:	f7ff fb96 	bl	8010570 <read_submessage_list>
 8010e44:	a914      	add	r1, sp, #80	@ 0x50
 8010e46:	2204      	movs	r2, #4
 8010e48:	4640      	mov	r0, r8
 8010e4a:	f006 fccf 	bl	80177ec <uxr_next_input_reliable_buffer_available>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	a914      	add	r1, sp, #80	@ 0x50
 8010e52:	4620      	mov	r0, r4
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d1ea      	bne.n	8010e2e <wait_session_status+0x11e>
 8010e58:	9904      	ldr	r1, [sp, #16]
 8010e5a:	4632      	mov	r2, r6
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f7ff f9f1 	bl	8010244 <write_submessage_acknack.isra.0>
 8010e62:	e76f      	b.n	8010d44 <wait_session_status+0x34>
 8010e64:	4631      	mov	r1, r6
 8010e66:	f104 0008 	add.w	r0, r4, #8
 8010e6a:	f001 f82d 	bl	8011ec8 <uxr_get_input_best_effort_stream>
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	f43f af68 	beq.w	8010d44 <wait_session_status+0x34>
 8010e74:	9902      	ldr	r1, [sp, #8]
 8010e76:	f006 fba5 	bl	80175c4 <uxr_receive_best_effort_message>
 8010e7a:	2800      	cmp	r0, #0
 8010e7c:	f43f af62 	beq.w	8010d44 <wait_session_status+0x34>
 8010e80:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010e84:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010e86:	a90c      	add	r1, sp, #48	@ 0x30
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f7ff fb71 	bl	8010570 <read_submessage_list>
 8010e8e:	e759      	b.n	8010d44 <wait_session_status+0x34>
 8010e90:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010e92:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010e96:	47a0      	blx	r4
 8010e98:	2001      	movs	r0, #1
 8010e9a:	b01d      	add	sp, #116	@ 0x74
 8010e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010ea4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010ea6:	a90c      	add	r1, sp, #48	@ 0x30
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f7ff fb61 	bl	8010570 <read_submessage_list>
 8010eae:	e7bc      	b.n	8010e2a <wait_session_status+0x11a>

08010eb0 <uxr_delete_session_retries>:
 8010eb0:	b530      	push	{r4, r5, lr}
 8010eb2:	b08f      	sub	sp, #60	@ 0x3c
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	460d      	mov	r5, r1
 8010eb8:	f000 fa2e 	bl	8011318 <uxr_session_header_offset>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	2210      	movs	r2, #16
 8010ec0:	9000      	str	r0, [sp, #0]
 8010ec2:	a902      	add	r1, sp, #8
 8010ec4:	a806      	add	r0, sp, #24
 8010ec6:	f7fb f935 	bl	800c134 <ucdr_init_buffer_origin_offset>
 8010eca:	a906      	add	r1, sp, #24
 8010ecc:	4620      	mov	r0, r4
 8010ece:	f000 f973 	bl	80111b8 <uxr_buffer_delete_session>
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	4611      	mov	r1, r2
 8010ed6:	9b06      	ldr	r3, [sp, #24]
 8010ed8:	4620      	mov	r0, r4
 8010eda:	f000 f9c7 	bl	801126c <uxr_stamp_session_header>
 8010ede:	a806      	add	r0, sp, #24
 8010ee0:	f7fb f966 	bl	800c1b0 <ucdr_buffer_length>
 8010ee4:	462b      	mov	r3, r5
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	a902      	add	r1, sp, #8
 8010eea:	4620      	mov	r0, r4
 8010eec:	f7ff ff10 	bl	8010d10 <wait_session_status>
 8010ef0:	b118      	cbz	r0, 8010efa <uxr_delete_session_retries+0x4a>
 8010ef2:	7960      	ldrb	r0, [r4, #5]
 8010ef4:	fab0 f080 	clz	r0, r0
 8010ef8:	0940      	lsrs	r0, r0, #5
 8010efa:	b00f      	add	sp, #60	@ 0x3c
 8010efc:	bd30      	pop	{r4, r5, pc}
 8010efe:	bf00      	nop

08010f00 <uxr_create_session>:
 8010f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f04:	f100 0b08 	add.w	fp, r0, #8
 8010f08:	b0ab      	sub	sp, #172	@ 0xac
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	4658      	mov	r0, fp
 8010f0e:	f000 ff2b 	bl	8011d68 <uxr_reset_stream_storage>
 8010f12:	4620      	mov	r0, r4
 8010f14:	f000 fa00 	bl	8011318 <uxr_session_header_offset>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	9000      	str	r0, [sp, #0]
 8010f1c:	221c      	movs	r2, #28
 8010f1e:	a90b      	add	r1, sp, #44	@ 0x2c
 8010f20:	a812      	add	r0, sp, #72	@ 0x48
 8010f22:	f7fb f907 	bl	800c134 <ucdr_init_buffer_origin_offset>
 8010f26:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f28:	8a1a      	ldrh	r2, [r3, #16]
 8010f2a:	3a04      	subs	r2, #4
 8010f2c:	b292      	uxth	r2, r2
 8010f2e:	a912      	add	r1, sp, #72	@ 0x48
 8010f30:	4620      	mov	r0, r4
 8010f32:	f000 f917 	bl	8011164 <uxr_buffer_create_session>
 8010f36:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010f38:	4620      	mov	r0, r4
 8010f3a:	f000 f983 	bl	8011244 <uxr_stamp_create_session_header>
 8010f3e:	a812      	add	r0, sp, #72	@ 0x48
 8010f40:	f7fb f936 	bl	800c1b0 <ucdr_buffer_length>
 8010f44:	23ff      	movs	r3, #255	@ 0xff
 8010f46:	7163      	strb	r3, [r4, #5]
 8010f48:	230a      	movs	r3, #10
 8010f4a:	46da      	mov	sl, fp
 8010f4c:	9303      	str	r3, [sp, #12]
 8010f4e:	4683      	mov	fp, r0
 8010f50:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f52:	465a      	mov	r2, fp
 8010f54:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010f58:	a90b      	add	r1, sp, #44	@ 0x2c
 8010f5a:	47a8      	blx	r5
 8010f5c:	f001 f824 	bl	8011fa8 <uxr_millis>
 8010f60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f64:	4605      	mov	r5, r0
 8010f66:	e009      	b.n	8010f7c <uxr_create_session+0x7c>
 8010f68:	f001 f81e 	bl	8011fa8 <uxr_millis>
 8010f6c:	1b40      	subs	r0, r0, r5
 8010f6e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	7962      	ldrb	r2, [r4, #5]
 8010f76:	dd38      	ble.n	8010fea <uxr_create_session+0xea>
 8010f78:	2aff      	cmp	r2, #255	@ 0xff
 8010f7a:	d13c      	bne.n	8010ff6 <uxr_create_session+0xf6>
 8010f7c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010f7e:	a907      	add	r1, sp, #28
 8010f80:	6896      	ldr	r6, [r2, #8]
 8010f82:	6810      	ldr	r0, [r2, #0]
 8010f84:	aa08      	add	r2, sp, #32
 8010f86:	47b0      	blx	r6
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d0ed      	beq.n	8010f68 <uxr_create_session+0x68>
 8010f8c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010f90:	a81a      	add	r0, sp, #104	@ 0x68
 8010f92:	f7fb f8e1 	bl	800c158 <ucdr_init_buffer>
 8010f96:	2600      	movs	r6, #0
 8010f98:	f10d 031a 	add.w	r3, sp, #26
 8010f9c:	aa06      	add	r2, sp, #24
 8010f9e:	a91a      	add	r1, sp, #104	@ 0x68
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f88d 6018 	strb.w	r6, [sp, #24]
 8010fa6:	f000 f975 	bl	8011294 <uxr_read_session_header>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	d0dc      	beq.n	8010f68 <uxr_create_session+0x68>
 8010fae:	4631      	mov	r1, r6
 8010fb0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010fb4:	f000 fea4 	bl	8011d00 <uxr_stream_id_from_raw>
 8010fb8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010fbc:	2e01      	cmp	r6, #1
 8010fbe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010fc2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8010fc6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010fca:	d053      	beq.n	8011074 <uxr_create_session+0x174>
 8010fcc:	2e02      	cmp	r6, #2
 8010fce:	d018      	beq.n	8011002 <uxr_create_session+0x102>
 8010fd0:	2e00      	cmp	r6, #0
 8010fd2:	d1c9      	bne.n	8010f68 <uxr_create_session+0x68>
 8010fd4:	4631      	mov	r1, r6
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	f000 fe92 	bl	8011d00 <uxr_stream_id_from_raw>
 8010fdc:	a91a      	add	r1, sp, #104	@ 0x68
 8010fde:	4602      	mov	r2, r0
 8010fe0:	900a      	str	r0, [sp, #40]	@ 0x28
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	f7ff fac4 	bl	8010570 <read_submessage_list>
 8010fe8:	e7be      	b.n	8010f68 <uxr_create_session+0x68>
 8010fea:	9b03      	ldr	r3, [sp, #12]
 8010fec:	3b01      	subs	r3, #1
 8010fee:	9303      	str	r3, [sp, #12]
 8010ff0:	d001      	beq.n	8010ff6 <uxr_create_session+0xf6>
 8010ff2:	2aff      	cmp	r2, #255	@ 0xff
 8010ff4:	d0ac      	beq.n	8010f50 <uxr_create_session+0x50>
 8010ff6:	2a00      	cmp	r2, #0
 8010ff8:	d051      	beq.n	801109e <uxr_create_session+0x19e>
 8010ffa:	2000      	movs	r0, #0
 8010ffc:	b02b      	add	sp, #172	@ 0xac
 8010ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011002:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011006:	9304      	str	r3, [sp, #16]
 8011008:	4639      	mov	r1, r7
 801100a:	4650      	mov	r0, sl
 801100c:	f000 ff66 	bl	8011edc <uxr_get_input_reliable_stream>
 8011010:	4680      	mov	r8, r0
 8011012:	b348      	cbz	r0, 8011068 <uxr_create_session+0x168>
 8011014:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011016:	9205      	str	r2, [sp, #20]
 8011018:	a81a      	add	r0, sp, #104	@ 0x68
 801101a:	f7fb f8cd 	bl	800c1b8 <ucdr_buffer_remaining>
 801101e:	4603      	mov	r3, r0
 8011020:	f10d 0019 	add.w	r0, sp, #25
 8011024:	9000      	str	r0, [sp, #0]
 8011026:	9a05      	ldr	r2, [sp, #20]
 8011028:	4649      	mov	r1, r9
 801102a:	4640      	mov	r0, r8
 801102c:	f006 fb5e 	bl	80176ec <uxr_receive_reliable_message>
 8011030:	b1d0      	cbz	r0, 8011068 <uxr_create_session+0x168>
 8011032:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d038      	beq.n	80110ac <uxr_create_session+0x1ac>
 801103a:	9e04      	ldr	r6, [sp, #16]
 801103c:	e00a      	b.n	8011054 <uxr_create_session+0x154>
 801103e:	f04f 0302 	mov.w	r3, #2
 8011042:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8011046:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 801104a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801104e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011050:	f7ff fa8e 	bl	8010570 <read_submessage_list>
 8011054:	a922      	add	r1, sp, #136	@ 0x88
 8011056:	2204      	movs	r2, #4
 8011058:	4640      	mov	r0, r8
 801105a:	f006 fbc7 	bl	80177ec <uxr_next_input_reliable_buffer_available>
 801105e:	4603      	mov	r3, r0
 8011060:	a922      	add	r1, sp, #136	@ 0x88
 8011062:	4620      	mov	r0, r4
 8011064:	2b00      	cmp	r3, #0
 8011066:	d1ea      	bne.n	801103e <uxr_create_session+0x13e>
 8011068:	9904      	ldr	r1, [sp, #16]
 801106a:	463a      	mov	r2, r7
 801106c:	4620      	mov	r0, r4
 801106e:	f7ff f8e9 	bl	8010244 <write_submessage_acknack.isra.0>
 8011072:	e779      	b.n	8010f68 <uxr_create_session+0x68>
 8011074:	4639      	mov	r1, r7
 8011076:	4650      	mov	r0, sl
 8011078:	f000 ff26 	bl	8011ec8 <uxr_get_input_best_effort_stream>
 801107c:	2800      	cmp	r0, #0
 801107e:	f43f af73 	beq.w	8010f68 <uxr_create_session+0x68>
 8011082:	4649      	mov	r1, r9
 8011084:	f006 fa9e 	bl	80175c4 <uxr_receive_best_effort_message>
 8011088:	2800      	cmp	r0, #0
 801108a:	f43f af6d 	beq.w	8010f68 <uxr_create_session+0x68>
 801108e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011092:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011094:	a91a      	add	r1, sp, #104	@ 0x68
 8011096:	4620      	mov	r0, r4
 8011098:	f7ff fa6a 	bl	8010570 <read_submessage_list>
 801109c:	e764      	b.n	8010f68 <uxr_create_session+0x68>
 801109e:	4650      	mov	r0, sl
 80110a0:	f000 fe62 	bl	8011d68 <uxr_reset_stream_storage>
 80110a4:	2001      	movs	r0, #1
 80110a6:	b02b      	add	sp, #172	@ 0xac
 80110a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ac:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80110b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110b2:	a91a      	add	r1, sp, #104	@ 0x68
 80110b4:	4620      	mov	r0, r4
 80110b6:	f7ff fa5b 	bl	8010570 <read_submessage_list>
 80110ba:	e7be      	b.n	801103a <uxr_create_session+0x13a>

080110bc <uxr_prepare_stream_to_write_submessage>:
 80110bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110c0:	b082      	sub	sp, #8
 80110c2:	4682      	mov	sl, r0
 80110c4:	4610      	mov	r0, r2
 80110c6:	4615      	mov	r5, r2
 80110c8:	461e      	mov	r6, r3
 80110ca:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80110ce:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80110d2:	9101      	str	r1, [sp, #4]
 80110d4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80110d8:	f000 ff60 	bl	8011f9c <uxr_submessage_padding>
 80110dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80110e0:	f105 0904 	add.w	r9, r5, #4
 80110e4:	2b01      	cmp	r3, #1
 80110e6:	4481      	add	r9, r0
 80110e8:	d01d      	beq.n	8011126 <uxr_prepare_stream_to_write_submessage+0x6a>
 80110ea:	2b02      	cmp	r3, #2
 80110ec:	d116      	bne.n	801111c <uxr_prepare_stream_to_write_submessage+0x60>
 80110ee:	4621      	mov	r1, r4
 80110f0:	f10a 0008 	add.w	r0, sl, #8
 80110f4:	f000 fede 	bl	8011eb4 <uxr_get_output_reliable_stream>
 80110f8:	4604      	mov	r4, r0
 80110fa:	b158      	cbz	r0, 8011114 <uxr_prepare_stream_to_write_submessage+0x58>
 80110fc:	4649      	mov	r1, r9
 80110fe:	4632      	mov	r2, r6
 8011100:	f006 fd30 	bl	8017b64 <uxr_prepare_reliable_buffer_to_write>
 8011104:	4604      	mov	r4, r0
 8011106:	b12c      	cbz	r4, 8011114 <uxr_prepare_stream_to_write_submessage+0x58>
 8011108:	4643      	mov	r3, r8
 801110a:	b2aa      	uxth	r2, r5
 801110c:	4639      	mov	r1, r7
 801110e:	4630      	mov	r0, r6
 8011110:	f000 ff04 	bl	8011f1c <uxr_buffer_submessage_header>
 8011114:	4620      	mov	r0, r4
 8011116:	b002      	add	sp, #8
 8011118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801111c:	2400      	movs	r4, #0
 801111e:	4620      	mov	r0, r4
 8011120:	b002      	add	sp, #8
 8011122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011126:	4621      	mov	r1, r4
 8011128:	f10a 0008 	add.w	r0, sl, #8
 801112c:	f000 feba 	bl	8011ea4 <uxr_get_output_best_effort_stream>
 8011130:	4604      	mov	r4, r0
 8011132:	2800      	cmp	r0, #0
 8011134:	d0ee      	beq.n	8011114 <uxr_prepare_stream_to_write_submessage+0x58>
 8011136:	4649      	mov	r1, r9
 8011138:	4632      	mov	r2, r6
 801113a:	f006 fc43 	bl	80179c4 <uxr_prepare_best_effort_buffer_to_write>
 801113e:	4604      	mov	r4, r0
 8011140:	e7e1      	b.n	8011106 <uxr_prepare_stream_to_write_submessage+0x4a>
 8011142:	bf00      	nop

08011144 <uxr_init_session_info>:
 8011144:	0e13      	lsrs	r3, r2, #24
 8011146:	7043      	strb	r3, [r0, #1]
 8011148:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801114c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011150:	7001      	strb	r1, [r0, #0]
 8011152:	70c3      	strb	r3, [r0, #3]
 8011154:	2109      	movs	r1, #9
 8011156:	23ff      	movs	r3, #255	@ 0xff
 8011158:	f880 c002 	strb.w	ip, [r0, #2]
 801115c:	7102      	strb	r2, [r0, #4]
 801115e:	80c1      	strh	r1, [r0, #6]
 8011160:	7143      	strb	r3, [r0, #5]
 8011162:	4770      	bx	lr

08011164 <uxr_buffer_create_session>:
 8011164:	b530      	push	{r4, r5, lr}
 8011166:	b089      	sub	sp, #36	@ 0x24
 8011168:	2300      	movs	r3, #0
 801116a:	4d12      	ldr	r5, [pc, #72]	@ (80111b4 <uxr_buffer_create_session+0x50>)
 801116c:	9307      	str	r3, [sp, #28]
 801116e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011172:	2201      	movs	r2, #1
 8011174:	9301      	str	r3, [sp, #4]
 8011176:	80c2      	strh	r2, [r0, #6]
 8011178:	f88d 2004 	strb.w	r2, [sp, #4]
 801117c:	682a      	ldr	r2, [r5, #0]
 801117e:	9200      	str	r2, [sp, #0]
 8011180:	88aa      	ldrh	r2, [r5, #4]
 8011182:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011186:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801118a:	9202      	str	r2, [sp, #8]
 801118c:	460c      	mov	r4, r1
 801118e:	7802      	ldrb	r2, [r0, #0]
 8011190:	9303      	str	r3, [sp, #12]
 8011192:	4619      	mov	r1, r3
 8011194:	f88d 200c 	strb.w	r2, [sp, #12]
 8011198:	4620      	mov	r0, r4
 801119a:	2210      	movs	r2, #16
 801119c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80111a0:	9306      	str	r3, [sp, #24]
 80111a2:	f000 febb 	bl	8011f1c <uxr_buffer_submessage_header>
 80111a6:	4669      	mov	r1, sp
 80111a8:	4620      	mov	r0, r4
 80111aa:	f001 fe47 	bl	8012e3c <uxr_serialize_CREATE_CLIENT_Payload>
 80111ae:	b009      	add	sp, #36	@ 0x24
 80111b0:	bd30      	pop	{r4, r5, pc}
 80111b2:	bf00      	nop
 80111b4:	0801a840 	.word	0x0801a840

080111b8 <uxr_buffer_delete_session>:
 80111b8:	b510      	push	{r4, lr}
 80111ba:	4b0c      	ldr	r3, [pc, #48]	@ (80111ec <uxr_buffer_delete_session+0x34>)
 80111bc:	b082      	sub	sp, #8
 80111be:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80111c2:	f8ad c006 	strh.w	ip, [sp, #6]
 80111c6:	460c      	mov	r4, r1
 80111c8:	2202      	movs	r2, #2
 80111ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80111ce:	80c2      	strh	r2, [r0, #6]
 80111d0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80111d4:	2204      	movs	r2, #4
 80111d6:	2300      	movs	r3, #0
 80111d8:	2103      	movs	r1, #3
 80111da:	4620      	mov	r0, r4
 80111dc:	f000 fe9e 	bl	8011f1c <uxr_buffer_submessage_header>
 80111e0:	a901      	add	r1, sp, #4
 80111e2:	4620      	mov	r0, r4
 80111e4:	f001 fed0 	bl	8012f88 <uxr_serialize_DELETE_Payload>
 80111e8:	b002      	add	sp, #8
 80111ea:	bd10      	pop	{r4, pc}
 80111ec:	0801a840 	.word	0x0801a840

080111f0 <uxr_read_create_session_status>:
 80111f0:	b510      	push	{r4, lr}
 80111f2:	b088      	sub	sp, #32
 80111f4:	4604      	mov	r4, r0
 80111f6:	4608      	mov	r0, r1
 80111f8:	a901      	add	r1, sp, #4
 80111fa:	f001 fed5 	bl	8012fa8 <uxr_deserialize_STATUS_AGENT_Payload>
 80111fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011202:	7163      	strb	r3, [r4, #5]
 8011204:	b008      	add	sp, #32
 8011206:	bd10      	pop	{r4, pc}

08011208 <uxr_read_delete_session_status>:
 8011208:	b510      	push	{r4, lr}
 801120a:	4604      	mov	r4, r0
 801120c:	b084      	sub	sp, #16
 801120e:	4608      	mov	r0, r1
 8011210:	a902      	add	r1, sp, #8
 8011212:	f001 fef9 	bl	8013008 <uxr_deserialize_STATUS_Payload>
 8011216:	88e3      	ldrh	r3, [r4, #6]
 8011218:	2b02      	cmp	r3, #2
 801121a:	d001      	beq.n	8011220 <uxr_read_delete_session_status+0x18>
 801121c:	b004      	add	sp, #16
 801121e:	bd10      	pop	{r4, pc}
 8011220:	f10d 000a 	add.w	r0, sp, #10
 8011224:	f7fe fe64 	bl	800fef0 <uxr_object_id_from_raw>
 8011228:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801122c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011230:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011234:	b29b      	uxth	r3, r3
 8011236:	2b02      	cmp	r3, #2
 8011238:	bf04      	itt	eq
 801123a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801123e:	7163      	strbeq	r3, [r4, #5]
 8011240:	b004      	add	sp, #16
 8011242:	bd10      	pop	{r4, pc}

08011244 <uxr_stamp_create_session_header>:
 8011244:	b510      	push	{r4, lr}
 8011246:	2208      	movs	r2, #8
 8011248:	b08a      	sub	sp, #40	@ 0x28
 801124a:	4604      	mov	r4, r0
 801124c:	eb0d 0002 	add.w	r0, sp, r2
 8011250:	f7fa ff82 	bl	800c158 <ucdr_init_buffer>
 8011254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011258:	9400      	str	r4, [sp, #0]
 801125a:	2300      	movs	r3, #0
 801125c:	461a      	mov	r2, r3
 801125e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011262:	a802      	add	r0, sp, #8
 8011264:	f001 f854 	bl	8012310 <uxr_serialize_message_header>
 8011268:	b00a      	add	sp, #40	@ 0x28
 801126a:	bd10      	pop	{r4, pc}

0801126c <uxr_stamp_session_header>:
 801126c:	b530      	push	{r4, r5, lr}
 801126e:	b08d      	sub	sp, #52	@ 0x34
 8011270:	4604      	mov	r4, r0
 8011272:	460d      	mov	r5, r1
 8011274:	9203      	str	r2, [sp, #12]
 8011276:	4619      	mov	r1, r3
 8011278:	a804      	add	r0, sp, #16
 801127a:	2208      	movs	r2, #8
 801127c:	f7fa ff6c 	bl	800c158 <ucdr_init_buffer>
 8011280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011284:	9b03      	ldr	r3, [sp, #12]
 8011286:	9400      	str	r4, [sp, #0]
 8011288:	462a      	mov	r2, r5
 801128a:	a804      	add	r0, sp, #16
 801128c:	f001 f840 	bl	8012310 <uxr_serialize_message_header>
 8011290:	b00d      	add	sp, #52	@ 0x34
 8011292:	bd30      	pop	{r4, r5, pc}

08011294 <uxr_read_session_header>:
 8011294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011298:	4607      	mov	r7, r0
 801129a:	b084      	sub	sp, #16
 801129c:	4608      	mov	r0, r1
 801129e:	460c      	mov	r4, r1
 80112a0:	4615      	mov	r5, r2
 80112a2:	461e      	mov	r6, r3
 80112a4:	f7fa ff88 	bl	800c1b8 <ucdr_buffer_remaining>
 80112a8:	2808      	cmp	r0, #8
 80112aa:	d803      	bhi.n	80112b4 <uxr_read_session_header+0x20>
 80112ac:	2000      	movs	r0, #0
 80112ae:	b004      	add	sp, #16
 80112b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112b4:	f10d 080c 	add.w	r8, sp, #12
 80112b8:	4633      	mov	r3, r6
 80112ba:	462a      	mov	r2, r5
 80112bc:	f8cd 8000 	str.w	r8, [sp]
 80112c0:	4620      	mov	r0, r4
 80112c2:	f10d 010b 	add.w	r1, sp, #11
 80112c6:	f001 f841 	bl	801234c <uxr_deserialize_message_header>
 80112ca:	783a      	ldrb	r2, [r7, #0]
 80112cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80112d0:	4293      	cmp	r3, r2
 80112d2:	d1eb      	bne.n	80112ac <uxr_read_session_header+0x18>
 80112d4:	061b      	lsls	r3, r3, #24
 80112d6:	d41c      	bmi.n	8011312 <uxr_read_session_header+0x7e>
 80112d8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80112dc:	787b      	ldrb	r3, [r7, #1]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d003      	beq.n	80112ea <uxr_read_session_header+0x56>
 80112e2:	2001      	movs	r0, #1
 80112e4:	f080 0001 	eor.w	r0, r0, #1
 80112e8:	e7e1      	b.n	80112ae <uxr_read_session_header+0x1a>
 80112ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80112ee:	78bb      	ldrb	r3, [r7, #2]
 80112f0:	429a      	cmp	r2, r3
 80112f2:	f107 0102 	add.w	r1, r7, #2
 80112f6:	d1f4      	bne.n	80112e2 <uxr_read_session_header+0x4e>
 80112f8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80112fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011300:	429a      	cmp	r2, r3
 8011302:	d1ee      	bne.n	80112e2 <uxr_read_session_header+0x4e>
 8011304:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011308:	784b      	ldrb	r3, [r1, #1]
 801130a:	429a      	cmp	r2, r3
 801130c:	d1e9      	bne.n	80112e2 <uxr_read_session_header+0x4e>
 801130e:	2000      	movs	r0, #0
 8011310:	e7e8      	b.n	80112e4 <uxr_read_session_header+0x50>
 8011312:	2001      	movs	r0, #1
 8011314:	e7cb      	b.n	80112ae <uxr_read_session_header+0x1a>
 8011316:	bf00      	nop

08011318 <uxr_session_header_offset>:
 8011318:	f990 3000 	ldrsb.w	r3, [r0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	bfac      	ite	ge
 8011320:	2008      	movge	r0, #8
 8011322:	2004      	movlt	r0, #4
 8011324:	4770      	bx	lr
 8011326:	bf00      	nop

08011328 <uxr_init_base_object_request>:
 8011328:	b510      	push	{r4, lr}
 801132a:	88c3      	ldrh	r3, [r0, #6]
 801132c:	b082      	sub	sp, #8
 801132e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011332:	9101      	str	r1, [sp, #4]
 8011334:	f1a3 010a 	sub.w	r1, r3, #10
 8011338:	b289      	uxth	r1, r1
 801133a:	42a1      	cmp	r1, r4
 801133c:	d80e      	bhi.n	801135c <uxr_init_base_object_request+0x34>
 801133e:	3301      	adds	r3, #1
 8011340:	b29c      	uxth	r4, r3
 8011342:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011346:	b2db      	uxtb	r3, r3
 8011348:	80c4      	strh	r4, [r0, #6]
 801134a:	9801      	ldr	r0, [sp, #4]
 801134c:	7011      	strb	r1, [r2, #0]
 801134e:	7053      	strb	r3, [r2, #1]
 8011350:	1c91      	adds	r1, r2, #2
 8011352:	f7fe fde1 	bl	800ff18 <uxr_object_id_to_raw>
 8011356:	4620      	mov	r0, r4
 8011358:	b002      	add	sp, #8
 801135a:	bd10      	pop	{r4, pc}
 801135c:	230a      	movs	r3, #10
 801135e:	2100      	movs	r1, #0
 8011360:	461c      	mov	r4, r3
 8011362:	e7f1      	b.n	8011348 <uxr_init_base_object_request+0x20>

08011364 <uxr_parse_base_object_request>:
 8011364:	b570      	push	{r4, r5, r6, lr}
 8011366:	4604      	mov	r4, r0
 8011368:	3002      	adds	r0, #2
 801136a:	460d      	mov	r5, r1
 801136c:	4616      	mov	r6, r2
 801136e:	f7fe fdbf 	bl	800fef0 <uxr_object_id_from_raw>
 8011372:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011376:	8028      	strh	r0, [r5, #0]
 8011378:	806b      	strh	r3, [r5, #2]
 801137a:	7822      	ldrb	r2, [r4, #0]
 801137c:	7863      	ldrb	r3, [r4, #1]
 801137e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011382:	8033      	strh	r3, [r6, #0]
 8011384:	bd70      	pop	{r4, r5, r6, pc}
 8011386:	bf00      	nop

08011388 <uxr_init_framing_io>:
 8011388:	2300      	movs	r3, #0
 801138a:	7041      	strb	r1, [r0, #1]
 801138c:	7003      	strb	r3, [r0, #0]
 801138e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011390:	4770      	bx	lr
 8011392:	bf00      	nop

08011394 <uxr_write_framed_msg>:
 8011394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011398:	4617      	mov	r7, r2
 801139a:	7842      	ldrb	r2, [r0, #1]
 801139c:	b083      	sub	sp, #12
 801139e:	460e      	mov	r6, r1
 80113a0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80113a4:	469a      	mov	sl, r3
 80113a6:	2901      	cmp	r1, #1
 80113a8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80113ac:	4604      	mov	r4, r0
 80113ae:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80113b2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80113b6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80113ba:	f240 8137 	bls.w	801162c <uxr_write_framed_msg+0x298>
 80113be:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80113c2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80113c6:	2901      	cmp	r1, #1
 80113c8:	f04f 0202 	mov.w	r2, #2
 80113cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80113d0:	f240 808f 	bls.w	80114f2 <uxr_write_framed_msg+0x15e>
 80113d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113d6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80113da:	b2dd      	uxtb	r5, r3
 80113dc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80113e0:	2203      	movs	r2, #3
 80113e2:	2901      	cmp	r1, #1
 80113e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80113e8:	f240 809a 	bls.w	8011520 <uxr_write_framed_msg+0x18c>
 80113ec:	18a1      	adds	r1, r4, r2
 80113ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113f0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80113f4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80113f8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80113fc:	3201      	adds	r2, #1
 80113fe:	2801      	cmp	r0, #1
 8011400:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011404:	f240 80a0 	bls.w	8011548 <uxr_write_framed_msg+0x1b4>
 8011408:	18a0      	adds	r0, r4, r2
 801140a:	3201      	adds	r2, #1
 801140c:	b2d2      	uxtb	r2, r2
 801140e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011412:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011416:	2b00      	cmp	r3, #0
 8011418:	f000 80a9 	beq.w	801156e <uxr_write_framed_msg+0x1da>
 801141c:	f04f 0900 	mov.w	r9, #0
 8011420:	46c8      	mov	r8, r9
 8011422:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011426:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801142a:	2901      	cmp	r1, #1
 801142c:	f240 80c3 	bls.w	80115b6 <uxr_write_framed_msg+0x222>
 8011430:	2a29      	cmp	r2, #41	@ 0x29
 8011432:	f200 809f 	bhi.w	8011574 <uxr_write_framed_msg+0x1e0>
 8011436:	18a1      	adds	r1, r4, r2
 8011438:	3201      	adds	r2, #1
 801143a:	b2d2      	uxtb	r2, r2
 801143c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011440:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011444:	ea89 0303 	eor.w	r3, r9, r3
 8011448:	498c      	ldr	r1, [pc, #560]	@ (801167c <uxr_write_framed_msg+0x2e8>)
 801144a:	b2db      	uxtb	r3, r3
 801144c:	f108 0801 	add.w	r8, r8, #1
 8011450:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011454:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801145a:	4543      	cmp	r3, r8
 801145c:	d8e1      	bhi.n	8011422 <uxr_write_framed_msg+0x8e>
 801145e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011462:	fa5f f889 	uxtb.w	r8, r9
 8011466:	9301      	str	r3, [sp, #4]
 8011468:	f04f 0900 	mov.w	r9, #0
 801146c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011470:	fa5f f18a 	uxtb.w	r1, sl
 8011474:	2901      	cmp	r1, #1
 8011476:	d921      	bls.n	80114bc <uxr_write_framed_msg+0x128>
 8011478:	2a29      	cmp	r2, #41	@ 0x29
 801147a:	f240 80af 	bls.w	80115dc <uxr_write_framed_msg+0x248>
 801147e:	2500      	movs	r5, #0
 8011480:	e000      	b.n	8011484 <uxr_write_framed_msg+0xf0>
 8011482:	b160      	cbz	r0, 801149e <uxr_write_framed_msg+0x10a>
 8011484:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011488:	1b52      	subs	r2, r2, r5
 801148a:	465b      	mov	r3, fp
 801148c:	4421      	add	r1, r4
 801148e:	4638      	mov	r0, r7
 8011490:	47b0      	blx	r6
 8011492:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011496:	4405      	add	r5, r0
 8011498:	4295      	cmp	r5, r2
 801149a:	d3f2      	bcc.n	8011482 <uxr_write_framed_msg+0xee>
 801149c:	d003      	beq.n	80114a6 <uxr_write_framed_msg+0x112>
 801149e:	2000      	movs	r0, #0
 80114a0:	b003      	add	sp, #12
 80114a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a6:	fa5f f18a 	uxtb.w	r1, sl
 80114aa:	f04f 0300 	mov.w	r3, #0
 80114ae:	2901      	cmp	r1, #1
 80114b0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80114b4:	f04f 0200 	mov.w	r2, #0
 80114b8:	f200 8090 	bhi.w	80115dc <uxr_write_framed_msg+0x248>
 80114bc:	1c51      	adds	r1, r2, #1
 80114be:	b2c9      	uxtb	r1, r1
 80114c0:	2929      	cmp	r1, #41	@ 0x29
 80114c2:	d8dc      	bhi.n	801147e <uxr_write_framed_msg+0xea>
 80114c4:	18a5      	adds	r5, r4, r2
 80114c6:	4421      	add	r1, r4
 80114c8:	3202      	adds	r2, #2
 80114ca:	f088 0820 	eor.w	r8, r8, #32
 80114ce:	4648      	mov	r0, r9
 80114d0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80114d4:	b2d2      	uxtb	r2, r2
 80114d6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80114da:	f04f 0901 	mov.w	r9, #1
 80114de:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80114e2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80114e6:	2800      	cmp	r0, #0
 80114e8:	f040 8085 	bne.w	80115f6 <uxr_write_framed_msg+0x262>
 80114ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80114f0:	e7bc      	b.n	801146c <uxr_write_framed_msg+0xd8>
 80114f2:	4611      	mov	r1, r2
 80114f4:	f04f 0c03 	mov.w	ip, #3
 80114f8:	2204      	movs	r2, #4
 80114fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114fc:	4421      	add	r1, r4
 80114fe:	b2dd      	uxtb	r5, r3
 8011500:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011504:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011508:	44a4      	add	ip, r4
 801150a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801150e:	f080 0020 	eor.w	r0, r0, #32
 8011512:	2901      	cmp	r1, #1
 8011514:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011518:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801151c:	f63f af66 	bhi.w	80113ec <uxr_write_framed_msg+0x58>
 8011520:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011522:	18a0      	adds	r0, r4, r2
 8011524:	f085 0520 	eor.w	r5, r5, #32
 8011528:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801152c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011530:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8011534:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8011538:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801153c:	3202      	adds	r2, #2
 801153e:	2801      	cmp	r0, #1
 8011540:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011544:	f63f af60 	bhi.w	8011408 <uxr_write_framed_msg+0x74>
 8011548:	1c50      	adds	r0, r2, #1
 801154a:	18a5      	adds	r5, r4, r2
 801154c:	fa54 f080 	uxtab	r0, r4, r0
 8011550:	3202      	adds	r2, #2
 8011552:	f081 0120 	eor.w	r1, r1, #32
 8011556:	b2d2      	uxtb	r2, r2
 8011558:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801155c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8011560:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011564:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011568:	2b00      	cmp	r3, #0
 801156a:	f47f af57 	bne.w	801141c <uxr_write_framed_msg+0x88>
 801156e:	9301      	str	r3, [sp, #4]
 8011570:	4698      	mov	r8, r3
 8011572:	e779      	b.n	8011468 <uxr_write_framed_msg+0xd4>
 8011574:	2500      	movs	r5, #0
 8011576:	e001      	b.n	801157c <uxr_write_framed_msg+0x1e8>
 8011578:	2800      	cmp	r0, #0
 801157a:	d090      	beq.n	801149e <uxr_write_framed_msg+0x10a>
 801157c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011580:	1b52      	subs	r2, r2, r5
 8011582:	465b      	mov	r3, fp
 8011584:	4421      	add	r1, r4
 8011586:	4638      	mov	r0, r7
 8011588:	47b0      	blx	r6
 801158a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801158e:	4405      	add	r5, r0
 8011590:	4295      	cmp	r5, r2
 8011592:	d3f1      	bcc.n	8011578 <uxr_write_framed_msg+0x1e4>
 8011594:	d183      	bne.n	801149e <uxr_write_framed_msg+0x10a>
 8011596:	f04f 0300 	mov.w	r3, #0
 801159a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801159e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115a0:	4543      	cmp	r3, r8
 80115a2:	d964      	bls.n	801166e <uxr_write_framed_msg+0x2da>
 80115a4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80115a8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80115ac:	2901      	cmp	r1, #1
 80115ae:	f04f 0200 	mov.w	r2, #0
 80115b2:	f63f af3d 	bhi.w	8011430 <uxr_write_framed_msg+0x9c>
 80115b6:	1c51      	adds	r1, r2, #1
 80115b8:	b2c9      	uxtb	r1, r1
 80115ba:	2929      	cmp	r1, #41	@ 0x29
 80115bc:	d8da      	bhi.n	8011574 <uxr_write_framed_msg+0x1e0>
 80115be:	18a0      	adds	r0, r4, r2
 80115c0:	4421      	add	r1, r4
 80115c2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80115c6:	3202      	adds	r2, #2
 80115c8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80115cc:	b2d2      	uxtb	r2, r2
 80115ce:	f083 0020 	eor.w	r0, r3, #32
 80115d2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80115d6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80115da:	e733      	b.n	8011444 <uxr_write_framed_msg+0xb0>
 80115dc:	18a1      	adds	r1, r4, r2
 80115de:	3201      	adds	r2, #1
 80115e0:	4648      	mov	r0, r9
 80115e2:	b2d2      	uxtb	r2, r2
 80115e4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80115e8:	f04f 0901 	mov.w	r9, #1
 80115ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80115f0:	2800      	cmp	r0, #0
 80115f2:	f43f af7b 	beq.w	80114ec <uxr_write_framed_msg+0x158>
 80115f6:	2500      	movs	r5, #0
 80115f8:	e002      	b.n	8011600 <uxr_write_framed_msg+0x26c>
 80115fa:	2800      	cmp	r0, #0
 80115fc:	f43f af4f 	beq.w	801149e <uxr_write_framed_msg+0x10a>
 8011600:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011604:	1b52      	subs	r2, r2, r5
 8011606:	465b      	mov	r3, fp
 8011608:	4421      	add	r1, r4
 801160a:	4638      	mov	r0, r7
 801160c:	47b0      	blx	r6
 801160e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011612:	4405      	add	r5, r0
 8011614:	4295      	cmp	r5, r2
 8011616:	d3f0      	bcc.n	80115fa <uxr_write_framed_msg+0x266>
 8011618:	f47f af41 	bne.w	801149e <uxr_write_framed_msg+0x10a>
 801161c:	2300      	movs	r3, #0
 801161e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011622:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011624:	b298      	uxth	r0, r3
 8011626:	b003      	add	sp, #12
 8011628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801162c:	217d      	movs	r1, #125	@ 0x7d
 801162e:	f082 0220 	eor.w	r2, r2, #32
 8011632:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8011636:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801163a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801163e:	2901      	cmp	r1, #1
 8011640:	f04f 0203 	mov.w	r2, #3
 8011644:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011648:	d804      	bhi.n	8011654 <uxr_write_framed_msg+0x2c0>
 801164a:	4611      	mov	r1, r2
 801164c:	f04f 0c04 	mov.w	ip, #4
 8011650:	2205      	movs	r2, #5
 8011652:	e752      	b.n	80114fa <uxr_write_framed_msg+0x166>
 8011654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011656:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801165a:	b2dd      	uxtb	r5, r3
 801165c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011660:	2204      	movs	r2, #4
 8011662:	2901      	cmp	r1, #1
 8011664:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011668:	f63f aec0 	bhi.w	80113ec <uxr_write_framed_msg+0x58>
 801166c:	e758      	b.n	8011520 <uxr_write_framed_msg+0x18c>
 801166e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011672:	fa5f f889 	uxtb.w	r8, r9
 8011676:	9301      	str	r3, [sp, #4]
 8011678:	2200      	movs	r2, #0
 801167a:	e6f5      	b.n	8011468 <uxr_write_framed_msg+0xd4>
 801167c:	0801b338 	.word	0x0801b338

08011680 <uxr_framing_read_transport>:
 8011680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011684:	4604      	mov	r4, r0
 8011686:	b083      	sub	sp, #12
 8011688:	461f      	mov	r7, r3
 801168a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801168e:	4689      	mov	r9, r1
 8011690:	4692      	mov	sl, r2
 8011692:	f000 fc89 	bl	8011fa8 <uxr_millis>
 8011696:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801169a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801169e:	42b3      	cmp	r3, r6
 80116a0:	4680      	mov	r8, r0
 80116a2:	d061      	beq.n	8011768 <uxr_framing_read_transport+0xe8>
 80116a4:	d81c      	bhi.n	80116e0 <uxr_framing_read_transport+0x60>
 80116a6:	1e75      	subs	r5, r6, #1
 80116a8:	1aed      	subs	r5, r5, r3
 80116aa:	b2ed      	uxtb	r5, r5
 80116ac:	2600      	movs	r6, #0
 80116ae:	455d      	cmp	r5, fp
 80116b0:	d81f      	bhi.n	80116f2 <uxr_framing_read_transport+0x72>
 80116b2:	19ab      	adds	r3, r5, r6
 80116b4:	455b      	cmp	r3, fp
 80116b6:	bf84      	itt	hi
 80116b8:	ebab 0605 	subhi.w	r6, fp, r5
 80116bc:	b2f6      	uxtbhi	r6, r6
 80116be:	b9ed      	cbnz	r5, 80116fc <uxr_framing_read_transport+0x7c>
 80116c0:	f04f 0b00 	mov.w	fp, #0
 80116c4:	f000 fc70 	bl	8011fa8 <uxr_millis>
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	eba0 0808 	sub.w	r8, r0, r8
 80116ce:	eba3 0308 	sub.w	r3, r3, r8
 80116d2:	4658      	mov	r0, fp
 80116d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80116d8:	603b      	str	r3, [r7, #0]
 80116da:	b003      	add	sp, #12
 80116dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e0:	2e00      	cmp	r6, #0
 80116e2:	d049      	beq.n	8011778 <uxr_framing_read_transport+0xf8>
 80116e4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80116e8:	b2ed      	uxtb	r5, r5
 80116ea:	3e01      	subs	r6, #1
 80116ec:	455d      	cmp	r5, fp
 80116ee:	b2f6      	uxtb	r6, r6
 80116f0:	d9df      	bls.n	80116b2 <uxr_framing_read_transport+0x32>
 80116f2:	fa5f f58b 	uxtb.w	r5, fp
 80116f6:	2600      	movs	r6, #0
 80116f8:	2d00      	cmp	r5, #0
 80116fa:	d0e1      	beq.n	80116c0 <uxr_framing_read_transport+0x40>
 80116fc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011700:	3102      	adds	r1, #2
 8011702:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011704:	9300      	str	r3, [sp, #0]
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	4421      	add	r1, r4
 801170a:	462a      	mov	r2, r5
 801170c:	4650      	mov	r0, sl
 801170e:	47c8      	blx	r9
 8011710:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011714:	4a1a      	ldr	r2, [pc, #104]	@ (8011780 <uxr_framing_read_transport+0x100>)
 8011716:	4403      	add	r3, r0
 8011718:	0859      	lsrs	r1, r3, #1
 801171a:	fba2 2101 	umull	r2, r1, r2, r1
 801171e:	0889      	lsrs	r1, r1, #2
 8011720:	222a      	movs	r2, #42	@ 0x2a
 8011722:	fb02 3111 	mls	r1, r2, r1, r3
 8011726:	4683      	mov	fp, r0
 8011728:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801172c:	2800      	cmp	r0, #0
 801172e:	d0c7      	beq.n	80116c0 <uxr_framing_read_transport+0x40>
 8011730:	42a8      	cmp	r0, r5
 8011732:	d1c7      	bne.n	80116c4 <uxr_framing_read_transport+0x44>
 8011734:	2e00      	cmp	r6, #0
 8011736:	d0c5      	beq.n	80116c4 <uxr_framing_read_transport+0x44>
 8011738:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801173a:	9300      	str	r3, [sp, #0]
 801173c:	3102      	adds	r1, #2
 801173e:	4632      	mov	r2, r6
 8011740:	4421      	add	r1, r4
 8011742:	2300      	movs	r3, #0
 8011744:	4650      	mov	r0, sl
 8011746:	47c8      	blx	r9
 8011748:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801174c:	4a0c      	ldr	r2, [pc, #48]	@ (8011780 <uxr_framing_read_transport+0x100>)
 801174e:	180b      	adds	r3, r1, r0
 8011750:	0859      	lsrs	r1, r3, #1
 8011752:	fba2 1201 	umull	r1, r2, r2, r1
 8011756:	0892      	lsrs	r2, r2, #2
 8011758:	212a      	movs	r1, #42	@ 0x2a
 801175a:	fb01 3312 	mls	r3, r1, r2, r3
 801175e:	eb00 0b05 	add.w	fp, r0, r5
 8011762:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011766:	e7ad      	b.n	80116c4 <uxr_framing_read_transport+0x44>
 8011768:	2600      	movs	r6, #0
 801176a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801176e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011770:	d9bf      	bls.n	80116f2 <uxr_framing_read_transport+0x72>
 8011772:	2102      	movs	r1, #2
 8011774:	2529      	movs	r5, #41	@ 0x29
 8011776:	e7c4      	b.n	8011702 <uxr_framing_read_transport+0x82>
 8011778:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801177c:	b2ed      	uxtb	r5, r5
 801177e:	e796      	b.n	80116ae <uxr_framing_read_transport+0x2e>
 8011780:	30c30c31 	.word	0x30c30c31

08011784 <uxr_read_framed_msg>:
 8011784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011788:	461e      	mov	r6, r3
 801178a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801178e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011792:	429d      	cmp	r5, r3
 8011794:	b083      	sub	sp, #12
 8011796:	4604      	mov	r4, r0
 8011798:	4688      	mov	r8, r1
 801179a:	4691      	mov	r9, r2
 801179c:	f000 8188 	beq.w	8011ab0 <uxr_read_framed_msg+0x32c>
 80117a0:	7823      	ldrb	r3, [r4, #0]
 80117a2:	4dc1      	ldr	r5, [pc, #772]	@ (8011aa8 <uxr_read_framed_msg+0x324>)
 80117a4:	4fc1      	ldr	r7, [pc, #772]	@ (8011aac <uxr_read_framed_msg+0x328>)
 80117a6:	2b07      	cmp	r3, #7
 80117a8:	d8fd      	bhi.n	80117a6 <uxr_read_framed_msg+0x22>
 80117aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80117ae:	0115      	.short	0x0115
 80117b0:	00d600f6 	.word	0x00d600f6
 80117b4:	009000b9 	.word	0x009000b9
 80117b8:	0030004d 	.word	0x0030004d
 80117bc:	0008      	.short	0x0008
 80117be:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80117c2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80117c6:	4299      	cmp	r1, r3
 80117c8:	f000 814a 	beq.w	8011a60 <uxr_read_framed_msg+0x2dc>
 80117cc:	18e2      	adds	r2, r4, r3
 80117ce:	7892      	ldrb	r2, [r2, #2]
 80117d0:	2a7d      	cmp	r2, #125	@ 0x7d
 80117d2:	f000 8199 	beq.w	8011b08 <uxr_read_framed_msg+0x384>
 80117d6:	3301      	adds	r3, #1
 80117d8:	0858      	lsrs	r0, r3, #1
 80117da:	fba5 1000 	umull	r1, r0, r5, r0
 80117de:	0880      	lsrs	r0, r0, #2
 80117e0:	212a      	movs	r1, #42	@ 0x2a
 80117e2:	fb01 3310 	mls	r3, r1, r0, r3
 80117e6:	2a7e      	cmp	r2, #126	@ 0x7e
 80117e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80117ec:	f000 8252 	beq.w	8011c94 <uxr_read_framed_msg+0x510>
 80117f0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80117f2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80117f4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	2200      	movs	r2, #0
 80117fc:	4299      	cmp	r1, r3
 80117fe:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8011800:	7022      	strb	r2, [r4, #0]
 8011802:	f000 8179 	beq.w	8011af8 <uxr_read_framed_msg+0x374>
 8011806:	2000      	movs	r0, #0
 8011808:	b003      	add	sp, #12
 801180a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801180e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011812:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011816:	4299      	cmp	r1, r3
 8011818:	f000 8131 	beq.w	8011a7e <uxr_read_framed_msg+0x2fa>
 801181c:	18e2      	adds	r2, r4, r3
 801181e:	7890      	ldrb	r0, [r2, #2]
 8011820:	287d      	cmp	r0, #125	@ 0x7d
 8011822:	f000 8190 	beq.w	8011b46 <uxr_read_framed_msg+0x3c2>
 8011826:	3301      	adds	r3, #1
 8011828:	085a      	lsrs	r2, r3, #1
 801182a:	fba5 1202 	umull	r1, r2, r5, r2
 801182e:	0892      	lsrs	r2, r2, #2
 8011830:	212a      	movs	r1, #42	@ 0x2a
 8011832:	fb01 3312 	mls	r3, r1, r2, r3
 8011836:	287e      	cmp	r0, #126	@ 0x7e
 8011838:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801183c:	f000 821a 	beq.w	8011c74 <uxr_read_framed_msg+0x4f0>
 8011840:	2307      	movs	r3, #7
 8011842:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8011844:	7023      	strb	r3, [r4, #0]
 8011846:	e7ae      	b.n	80117a6 <uxr_read_framed_msg+0x22>
 8011848:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801184a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801184e:	459e      	cmp	lr, r3
 8011850:	d938      	bls.n	80118c4 <uxr_read_framed_msg+0x140>
 8011852:	ee07 8a90 	vmov	s15, r8
 8011856:	212a      	movs	r1, #42	@ 0x2a
 8011858:	e020      	b.n	801189c <uxr_read_framed_msg+0x118>
 801185a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801185e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8011862:	f000 80d4 	beq.w	8011a0e <uxr_read_framed_msg+0x28a>
 8011866:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801186a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801186e:	f000 8219 	beq.w	8011ca4 <uxr_read_framed_msg+0x520>
 8011872:	f806 c003 	strb.w	ip, [r6, r3]
 8011876:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801187a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801187c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011880:	ea8a 000c 	eor.w	r0, sl, ip
 8011884:	b2c0      	uxtb	r0, r0
 8011886:	3301      	adds	r3, #1
 8011888:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801188c:	b29b      	uxth	r3, r3
 801188e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8011892:	4573      	cmp	r3, lr
 8011894:	8663      	strh	r3, [r4, #50]	@ 0x32
 8011896:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011898:	f080 8120 	bcs.w	8011adc <uxr_read_framed_msg+0x358>
 801189c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80118a0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80118a4:	f100 0c01 	add.w	ip, r0, #1
 80118a8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80118ac:	fba5 8202 	umull	r8, r2, r5, r2
 80118b0:	0892      	lsrs	r2, r2, #2
 80118b2:	4582      	cmp	sl, r0
 80118b4:	eb04 0b00 	add.w	fp, r4, r0
 80118b8:	fb01 c212 	mls	r2, r1, r2, ip
 80118bc:	d1cd      	bne.n	801185a <uxr_read_framed_msg+0xd6>
 80118be:	ee17 8a90 	vmov	r8, s15
 80118c2:	459e      	cmp	lr, r3
 80118c4:	f040 8111 	bne.w	8011aea <uxr_read_framed_msg+0x366>
 80118c8:	2306      	movs	r3, #6
 80118ca:	7023      	strb	r3, [r4, #0]
 80118cc:	e76b      	b.n	80117a6 <uxr_read_framed_msg+0x22>
 80118ce:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80118d2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80118d6:	4298      	cmp	r0, r3
 80118d8:	f000 80c2 	beq.w	8011a60 <uxr_read_framed_msg+0x2dc>
 80118dc:	18e2      	adds	r2, r4, r3
 80118de:	7891      	ldrb	r1, [r2, #2]
 80118e0:	297d      	cmp	r1, #125	@ 0x7d
 80118e2:	f000 814c 	beq.w	8011b7e <uxr_read_framed_msg+0x3fa>
 80118e6:	3301      	adds	r3, #1
 80118e8:	085a      	lsrs	r2, r3, #1
 80118ea:	fba5 0202 	umull	r0, r2, r5, r2
 80118ee:	0892      	lsrs	r2, r2, #2
 80118f0:	202a      	movs	r0, #42	@ 0x2a
 80118f2:	fb00 3312 	mls	r3, r0, r2, r3
 80118f6:	297e      	cmp	r1, #126	@ 0x7e
 80118f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80118fc:	f000 81ca 	beq.w	8011c94 <uxr_read_framed_msg+0x510>
 8011900:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8011902:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011906:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011908:	b29b      	uxth	r3, r3
 801190a:	2000      	movs	r0, #0
 801190c:	428b      	cmp	r3, r1
 801190e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8011910:	8660      	strh	r0, [r4, #50]	@ 0x32
 8011912:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8011914:	f240 80df 	bls.w	8011ad6 <uxr_read_framed_msg+0x352>
 8011918:	7020      	strb	r0, [r4, #0]
 801191a:	b003      	add	sp, #12
 801191c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011920:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011924:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011928:	4299      	cmp	r1, r3
 801192a:	f000 80a8 	beq.w	8011a7e <uxr_read_framed_msg+0x2fa>
 801192e:	18e2      	adds	r2, r4, r3
 8011930:	7890      	ldrb	r0, [r2, #2]
 8011932:	287d      	cmp	r0, #125	@ 0x7d
 8011934:	f000 8164 	beq.w	8011c00 <uxr_read_framed_msg+0x47c>
 8011938:	3301      	adds	r3, #1
 801193a:	085a      	lsrs	r2, r3, #1
 801193c:	fba5 1202 	umull	r1, r2, r5, r2
 8011940:	0892      	lsrs	r2, r2, #2
 8011942:	212a      	movs	r1, #42	@ 0x2a
 8011944:	fb01 3312 	mls	r3, r1, r2, r3
 8011948:	287e      	cmp	r0, #126	@ 0x7e
 801194a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801194e:	f000 8191 	beq.w	8011c74 <uxr_read_framed_msg+0x4f0>
 8011952:	2304      	movs	r3, #4
 8011954:	8620      	strh	r0, [r4, #48]	@ 0x30
 8011956:	7023      	strb	r3, [r4, #0]
 8011958:	e725      	b.n	80117a6 <uxr_read_framed_msg+0x22>
 801195a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801195e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011962:	4290      	cmp	r0, r2
 8011964:	f000 80b3 	beq.w	8011ace <uxr_read_framed_msg+0x34a>
 8011968:	18a3      	adds	r3, r4, r2
 801196a:	7899      	ldrb	r1, [r3, #2]
 801196c:	297d      	cmp	r1, #125	@ 0x7d
 801196e:	f000 8164 	beq.w	8011c3a <uxr_read_framed_msg+0x4b6>
 8011972:	3201      	adds	r2, #1
 8011974:	0850      	lsrs	r0, r2, #1
 8011976:	fba5 3000 	umull	r3, r0, r5, r0
 801197a:	0880      	lsrs	r0, r0, #2
 801197c:	232a      	movs	r3, #42	@ 0x2a
 801197e:	fb03 2210 	mls	r2, r3, r0, r2
 8011982:	297e      	cmp	r1, #126	@ 0x7e
 8011984:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011988:	f000 8188 	beq.w	8011c9c <uxr_read_framed_msg+0x518>
 801198c:	7863      	ldrb	r3, [r4, #1]
 801198e:	428b      	cmp	r3, r1
 8011990:	bf0c      	ite	eq
 8011992:	2303      	moveq	r3, #3
 8011994:	2300      	movne	r3, #0
 8011996:	7023      	strb	r3, [r4, #0]
 8011998:	e705      	b.n	80117a6 <uxr_read_framed_msg+0x22>
 801199a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801199e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80119a2:	2200      	movs	r2, #0
 80119a4:	4299      	cmp	r1, r3
 80119a6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80119aa:	d06c      	beq.n	8011a86 <uxr_read_framed_msg+0x302>
 80119ac:	18e2      	adds	r2, r4, r3
 80119ae:	7890      	ldrb	r0, [r2, #2]
 80119b0:	287d      	cmp	r0, #125	@ 0x7d
 80119b2:	f000 8101 	beq.w	8011bb8 <uxr_read_framed_msg+0x434>
 80119b6:	3301      	adds	r3, #1
 80119b8:	085a      	lsrs	r2, r3, #1
 80119ba:	fba5 1202 	umull	r1, r2, r5, r2
 80119be:	0892      	lsrs	r2, r2, #2
 80119c0:	212a      	movs	r1, #42	@ 0x2a
 80119c2:	fb01 3312 	mls	r3, r1, r2, r3
 80119c6:	287e      	cmp	r0, #126	@ 0x7e
 80119c8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80119cc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80119d0:	d059      	beq.n	8011a86 <uxr_read_framed_msg+0x302>
 80119d2:	2302      	movs	r3, #2
 80119d4:	7023      	strb	r3, [r4, #0]
 80119d6:	e6e6      	b.n	80117a6 <uxr_read_framed_msg+0x22>
 80119d8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80119dc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80119e0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80119e4:	1c51      	adds	r1, r2, #1
 80119e6:	084b      	lsrs	r3, r1, #1
 80119e8:	fba5 c303 	umull	ip, r3, r5, r3
 80119ec:	089b      	lsrs	r3, r3, #2
 80119ee:	fb0e 1313 	mls	r3, lr, r3, r1
 80119f2:	4592      	cmp	sl, r2
 80119f4:	eb04 0002 	add.w	r0, r4, r2
 80119f8:	b2da      	uxtb	r2, r3
 80119fa:	f43f af04 	beq.w	8011806 <uxr_read_framed_msg+0x82>
 80119fe:	7883      	ldrb	r3, [r0, #2]
 8011a00:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011a04:	2b7e      	cmp	r3, #126	@ 0x7e
 8011a06:	d1ed      	bne.n	80119e4 <uxr_read_framed_msg+0x260>
 8011a08:	2301      	movs	r3, #1
 8011a0a:	7023      	strb	r3, [r4, #0]
 8011a0c:	e6cb      	b.n	80117a6 <uxr_read_framed_msg+0x22>
 8011a0e:	f100 0c01 	add.w	ip, r0, #1
 8011a12:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011a16:	fba5 8202 	umull	r8, r2, r5, r2
 8011a1a:	0892      	lsrs	r2, r2, #2
 8011a1c:	fb01 c212 	mls	r2, r1, r2, ip
 8011a20:	eb04 0c02 	add.w	ip, r4, r2
 8011a24:	b2d2      	uxtb	r2, r2
 8011a26:	4592      	cmp	sl, r2
 8011a28:	f100 0002 	add.w	r0, r0, #2
 8011a2c:	f43f af47 	beq.w	80118be <uxr_read_framed_msg+0x13a>
 8011a30:	0842      	lsrs	r2, r0, #1
 8011a32:	f89c a002 	ldrb.w	sl, [ip, #2]
 8011a36:	fba5 8202 	umull	r8, r2, r5, r2
 8011a3a:	0892      	lsrs	r2, r2, #2
 8011a3c:	fb01 0012 	mls	r0, r1, r2, r0
 8011a40:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8011a44:	f08a 0c20 	eor.w	ip, sl, #32
 8011a48:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011a4c:	f47f af11 	bne.w	8011872 <uxr_read_framed_msg+0xee>
 8011a50:	459e      	cmp	lr, r3
 8011a52:	ee17 8a90 	vmov	r8, s15
 8011a56:	f43f af37 	beq.w	80118c8 <uxr_read_framed_msg+0x144>
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	7023      	strb	r3, [r4, #0]
 8011a5e:	e6a2      	b.n	80117a6 <uxr_read_framed_msg+0x22>
 8011a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a62:	9300      	str	r3, [sp, #0]
 8011a64:	2301      	movs	r3, #1
 8011a66:	9301      	str	r3, [sp, #4]
 8011a68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a6a:	464a      	mov	r2, r9
 8011a6c:	4641      	mov	r1, r8
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f7ff fe06 	bl	8011680 <uxr_framing_read_transport>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	f43f aec6 	beq.w	8011806 <uxr_read_framed_msg+0x82>
 8011a7a:	7823      	ldrb	r3, [r4, #0]
 8011a7c:	e693      	b.n	80117a6 <uxr_read_framed_msg+0x22>
 8011a7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a80:	9300      	str	r3, [sp, #0]
 8011a82:	2302      	movs	r3, #2
 8011a84:	e7ef      	b.n	8011a66 <uxr_read_framed_msg+0x2e2>
 8011a86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a88:	9300      	str	r3, [sp, #0]
 8011a8a:	2304      	movs	r3, #4
 8011a8c:	9301      	str	r3, [sp, #4]
 8011a8e:	464a      	mov	r2, r9
 8011a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a92:	4641      	mov	r1, r8
 8011a94:	4620      	mov	r0, r4
 8011a96:	f7ff fdf3 	bl	8011680 <uxr_framing_read_transport>
 8011a9a:	2800      	cmp	r0, #0
 8011a9c:	d1ed      	bne.n	8011a7a <uxr_read_framed_msg+0x2f6>
 8011a9e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011aa2:	2b7e      	cmp	r3, #126	@ 0x7e
 8011aa4:	d0e9      	beq.n	8011a7a <uxr_read_framed_msg+0x2f6>
 8011aa6:	e6ae      	b.n	8011806 <uxr_read_framed_msg+0x82>
 8011aa8:	30c30c31 	.word	0x30c30c31
 8011aac:	0801b338 	.word	0x0801b338
 8011ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	2305      	movs	r3, #5
 8011ab6:	9301      	str	r3, [sp, #4]
 8011ab8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011aba:	f7ff fde1 	bl	8011680 <uxr_framing_read_transport>
 8011abe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011ac2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	f43f ae9d 	beq.w	8011806 <uxr_read_framed_msg+0x82>
 8011acc:	e668      	b.n	80117a0 <uxr_read_framed_msg+0x1c>
 8011ace:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ad0:	9300      	str	r3, [sp, #0]
 8011ad2:	2303      	movs	r3, #3
 8011ad4:	e7c7      	b.n	8011a66 <uxr_read_framed_msg+0x2e2>
 8011ad6:	2305      	movs	r3, #5
 8011ad8:	7023      	strb	r3, [r4, #0]
 8011ada:	e664      	b.n	80117a6 <uxr_read_framed_msg+0x22>
 8011adc:	ee17 8a90 	vmov	r8, s15
 8011ae0:	f43f aef2 	beq.w	80118c8 <uxr_read_framed_msg+0x144>
 8011ae4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011ae8:	d08e      	beq.n	8011a08 <uxr_read_framed_msg+0x284>
 8011aea:	ebae 0303 	sub.w	r3, lr, r3
 8011aee:	3302      	adds	r3, #2
 8011af0:	9301      	str	r3, [sp, #4]
 8011af2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011af4:	9300      	str	r3, [sp, #0]
 8011af6:	e7b7      	b.n	8011a68 <uxr_read_framed_msg+0x2e4>
 8011af8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011afa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011afe:	7013      	strb	r3, [r2, #0]
 8011b00:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8011b02:	b003      	add	sp, #12
 8011b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b08:	f103 0c01 	add.w	ip, r3, #1
 8011b0c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011b10:	fba5 0202 	umull	r0, r2, r5, r2
 8011b14:	0892      	lsrs	r2, r2, #2
 8011b16:	202a      	movs	r0, #42	@ 0x2a
 8011b18:	fb00 c212 	mls	r2, r0, r2, ip
 8011b1c:	fa5f fc82 	uxtb.w	ip, r2
 8011b20:	4561      	cmp	r1, ip
 8011b22:	d09d      	beq.n	8011a60 <uxr_read_framed_msg+0x2dc>
 8011b24:	3302      	adds	r3, #2
 8011b26:	4422      	add	r2, r4
 8011b28:	0859      	lsrs	r1, r3, #1
 8011b2a:	7892      	ldrb	r2, [r2, #2]
 8011b2c:	fba5 c101 	umull	ip, r1, r5, r1
 8011b30:	0889      	lsrs	r1, r1, #2
 8011b32:	fb00 3311 	mls	r3, r0, r1, r3
 8011b36:	2a7e      	cmp	r2, #126	@ 0x7e
 8011b38:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011b3c:	f000 80aa 	beq.w	8011c94 <uxr_read_framed_msg+0x510>
 8011b40:	f082 0220 	eor.w	r2, r2, #32
 8011b44:	e654      	b.n	80117f0 <uxr_read_framed_msg+0x6c>
 8011b46:	1c58      	adds	r0, r3, #1
 8011b48:	0842      	lsrs	r2, r0, #1
 8011b4a:	fba5 c202 	umull	ip, r2, r5, r2
 8011b4e:	0892      	lsrs	r2, r2, #2
 8011b50:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011b54:	fb0c 0212 	mls	r2, ip, r2, r0
 8011b58:	b2d0      	uxtb	r0, r2
 8011b5a:	4281      	cmp	r1, r0
 8011b5c:	d08f      	beq.n	8011a7e <uxr_read_framed_msg+0x2fa>
 8011b5e:	4422      	add	r2, r4
 8011b60:	3302      	adds	r3, #2
 8011b62:	7890      	ldrb	r0, [r2, #2]
 8011b64:	085a      	lsrs	r2, r3, #1
 8011b66:	fba5 1202 	umull	r1, r2, r5, r2
 8011b6a:	0892      	lsrs	r2, r2, #2
 8011b6c:	fb0c 3312 	mls	r3, ip, r2, r3
 8011b70:	287e      	cmp	r0, #126	@ 0x7e
 8011b72:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011b76:	d07d      	beq.n	8011c74 <uxr_read_framed_msg+0x4f0>
 8011b78:	f080 0020 	eor.w	r0, r0, #32
 8011b7c:	e660      	b.n	8011840 <uxr_read_framed_msg+0xbc>
 8011b7e:	1c59      	adds	r1, r3, #1
 8011b80:	084a      	lsrs	r2, r1, #1
 8011b82:	fba5 c202 	umull	ip, r2, r5, r2
 8011b86:	0892      	lsrs	r2, r2, #2
 8011b88:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011b8c:	fb0c 1212 	mls	r2, ip, r2, r1
 8011b90:	b2d1      	uxtb	r1, r2
 8011b92:	4288      	cmp	r0, r1
 8011b94:	f43f af64 	beq.w	8011a60 <uxr_read_framed_msg+0x2dc>
 8011b98:	4422      	add	r2, r4
 8011b9a:	3302      	adds	r3, #2
 8011b9c:	7891      	ldrb	r1, [r2, #2]
 8011b9e:	085a      	lsrs	r2, r3, #1
 8011ba0:	fba5 0202 	umull	r0, r2, r5, r2
 8011ba4:	0892      	lsrs	r2, r2, #2
 8011ba6:	fb0c 3312 	mls	r3, ip, r2, r3
 8011baa:	297e      	cmp	r1, #126	@ 0x7e
 8011bac:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011bb0:	d070      	beq.n	8011c94 <uxr_read_framed_msg+0x510>
 8011bb2:	f081 0120 	eor.w	r1, r1, #32
 8011bb6:	e6a3      	b.n	8011900 <uxr_read_framed_msg+0x17c>
 8011bb8:	f103 0c01 	add.w	ip, r3, #1
 8011bbc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011bc0:	fba5 0202 	umull	r0, r2, r5, r2
 8011bc4:	0892      	lsrs	r2, r2, #2
 8011bc6:	202a      	movs	r0, #42	@ 0x2a
 8011bc8:	fb00 c212 	mls	r2, r0, r2, ip
 8011bcc:	fa5f fc82 	uxtb.w	ip, r2
 8011bd0:	4561      	cmp	r1, ip
 8011bd2:	f43f af58 	beq.w	8011a86 <uxr_read_framed_msg+0x302>
 8011bd6:	4422      	add	r2, r4
 8011bd8:	3302      	adds	r3, #2
 8011bda:	7891      	ldrb	r1, [r2, #2]
 8011bdc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011be0:	085a      	lsrs	r2, r3, #1
 8011be2:	fba5 c202 	umull	ip, r2, r5, r2
 8011be6:	0892      	lsrs	r2, r2, #2
 8011be8:	fb00 3312 	mls	r3, r0, r2, r3
 8011bec:	297e      	cmp	r1, #126	@ 0x7e
 8011bee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011bf2:	f43f af48 	beq.w	8011a86 <uxr_read_framed_msg+0x302>
 8011bf6:	f081 0120 	eor.w	r1, r1, #32
 8011bfa:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011bfe:	e6e8      	b.n	80119d2 <uxr_read_framed_msg+0x24e>
 8011c00:	1c58      	adds	r0, r3, #1
 8011c02:	0842      	lsrs	r2, r0, #1
 8011c04:	fba5 c202 	umull	ip, r2, r5, r2
 8011c08:	0892      	lsrs	r2, r2, #2
 8011c0a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011c0e:	fb0c 0212 	mls	r2, ip, r2, r0
 8011c12:	b2d0      	uxtb	r0, r2
 8011c14:	4281      	cmp	r1, r0
 8011c16:	f43f af32 	beq.w	8011a7e <uxr_read_framed_msg+0x2fa>
 8011c1a:	4422      	add	r2, r4
 8011c1c:	3302      	adds	r3, #2
 8011c1e:	7890      	ldrb	r0, [r2, #2]
 8011c20:	085a      	lsrs	r2, r3, #1
 8011c22:	fba5 1202 	umull	r1, r2, r5, r2
 8011c26:	0892      	lsrs	r2, r2, #2
 8011c28:	fb0c 3312 	mls	r3, ip, r2, r3
 8011c2c:	287e      	cmp	r0, #126	@ 0x7e
 8011c2e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011c32:	d01f      	beq.n	8011c74 <uxr_read_framed_msg+0x4f0>
 8011c34:	f080 0020 	eor.w	r0, r0, #32
 8011c38:	e68b      	b.n	8011952 <uxr_read_framed_msg+0x1ce>
 8011c3a:	1c51      	adds	r1, r2, #1
 8011c3c:	084b      	lsrs	r3, r1, #1
 8011c3e:	fba5 c303 	umull	ip, r3, r5, r3
 8011c42:	089b      	lsrs	r3, r3, #2
 8011c44:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011c48:	fb0c 1313 	mls	r3, ip, r3, r1
 8011c4c:	b2d9      	uxtb	r1, r3
 8011c4e:	4288      	cmp	r0, r1
 8011c50:	f43f af3d 	beq.w	8011ace <uxr_read_framed_msg+0x34a>
 8011c54:	3202      	adds	r2, #2
 8011c56:	4423      	add	r3, r4
 8011c58:	0850      	lsrs	r0, r2, #1
 8011c5a:	789b      	ldrb	r3, [r3, #2]
 8011c5c:	fba5 1000 	umull	r1, r0, r5, r0
 8011c60:	0880      	lsrs	r0, r0, #2
 8011c62:	fb0c 2210 	mls	r2, ip, r0, r2
 8011c66:	2b7e      	cmp	r3, #126	@ 0x7e
 8011c68:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011c6c:	d016      	beq.n	8011c9c <uxr_read_framed_msg+0x518>
 8011c6e:	f083 0120 	eor.w	r1, r3, #32
 8011c72:	e68b      	b.n	801198c <uxr_read_framed_msg+0x208>
 8011c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	2302      	movs	r3, #2
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	464a      	mov	r2, r9
 8011c7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c80:	4641      	mov	r1, r8
 8011c82:	4620      	mov	r0, r4
 8011c84:	f7ff fcfc 	bl	8011680 <uxr_framing_read_transport>
 8011c88:	2800      	cmp	r0, #0
 8011c8a:	f47f aef6 	bne.w	8011a7a <uxr_read_framed_msg+0x2f6>
 8011c8e:	2301      	movs	r3, #1
 8011c90:	7023      	strb	r3, [r4, #0]
 8011c92:	e588      	b.n	80117a6 <uxr_read_framed_msg+0x22>
 8011c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c96:	9300      	str	r3, [sp, #0]
 8011c98:	2301      	movs	r3, #1
 8011c9a:	e7ee      	b.n	8011c7a <uxr_read_framed_msg+0x4f6>
 8011c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c9e:	9300      	str	r3, [sp, #0]
 8011ca0:	2303      	movs	r3, #3
 8011ca2:	e7ea      	b.n	8011c7a <uxr_read_framed_msg+0x4f6>
 8011ca4:	ee17 8a90 	vmov	r8, s15
 8011ca8:	e6ae      	b.n	8011a08 <uxr_read_framed_msg+0x284>
 8011caa:	bf00      	nop

08011cac <uxr_stream_id>:
 8011cac:	2901      	cmp	r1, #1
 8011cae:	b082      	sub	sp, #8
 8011cb0:	d01d      	beq.n	8011cee <uxr_stream_id+0x42>
 8011cb2:	2902      	cmp	r1, #2
 8011cb4:	f04f 0c00 	mov.w	ip, #0
 8011cb8:	d01e      	beq.n	8011cf8 <uxr_stream_id+0x4c>
 8011cba:	2300      	movs	r3, #0
 8011cbc:	f36c 0307 	bfi	r3, ip, #0, #8
 8011cc0:	f360 230f 	bfi	r3, r0, #8, #8
 8011cc4:	f361 4317 	bfi	r3, r1, #16, #8
 8011cc8:	f362 631f 	bfi	r3, r2, #24, #8
 8011ccc:	b2da      	uxtb	r2, r3
 8011cce:	2000      	movs	r0, #0
 8011cd0:	f362 0007 	bfi	r0, r2, #0, #8
 8011cd4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011cd8:	f362 200f 	bfi	r0, r2, #8, #8
 8011cdc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011ce0:	f362 4017 	bfi	r0, r2, #16, #8
 8011ce4:	0e1b      	lsrs	r3, r3, #24
 8011ce6:	f363 601f 	bfi	r0, r3, #24, #8
 8011cea:	b002      	add	sp, #8
 8011cec:	4770      	bx	lr
 8011cee:	f100 0c01 	add.w	ip, r0, #1
 8011cf2:	fa5f fc8c 	uxtb.w	ip, ip
 8011cf6:	e7e0      	b.n	8011cba <uxr_stream_id+0xe>
 8011cf8:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011cfc:	e7dd      	b.n	8011cba <uxr_stream_id+0xe>
 8011cfe:	bf00      	nop

08011d00 <uxr_stream_id_from_raw>:
 8011d00:	b082      	sub	sp, #8
 8011d02:	b130      	cbz	r0, 8011d12 <uxr_stream_id_from_raw+0x12>
 8011d04:	0603      	lsls	r3, r0, #24
 8011d06:	d420      	bmi.n	8011d4a <uxr_stream_id_from_raw+0x4a>
 8011d08:	1e42      	subs	r2, r0, #1
 8011d0a:	b2d2      	uxtb	r2, r2
 8011d0c:	f04f 0c01 	mov.w	ip, #1
 8011d10:	e001      	b.n	8011d16 <uxr_stream_id_from_raw+0x16>
 8011d12:	4684      	mov	ip, r0
 8011d14:	4602      	mov	r2, r0
 8011d16:	2300      	movs	r3, #0
 8011d18:	f360 0307 	bfi	r3, r0, #0, #8
 8011d1c:	f362 230f 	bfi	r3, r2, #8, #8
 8011d20:	f36c 4317 	bfi	r3, ip, #16, #8
 8011d24:	f361 631f 	bfi	r3, r1, #24, #8
 8011d28:	b2da      	uxtb	r2, r3
 8011d2a:	2000      	movs	r0, #0
 8011d2c:	f362 0007 	bfi	r0, r2, #0, #8
 8011d30:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011d34:	f362 200f 	bfi	r0, r2, #8, #8
 8011d38:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011d3c:	f362 4017 	bfi	r0, r2, #16, #8
 8011d40:	0e1b      	lsrs	r3, r3, #24
 8011d42:	f363 601f 	bfi	r0, r3, #24, #8
 8011d46:	b002      	add	sp, #8
 8011d48:	4770      	bx	lr
 8011d4a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011d4e:	f04f 0c02 	mov.w	ip, #2
 8011d52:	e7e0      	b.n	8011d16 <uxr_stream_id_from_raw+0x16>

08011d54 <uxr_init_stream_storage>:
 8011d54:	2300      	movs	r3, #0
 8011d56:	7403      	strb	r3, [r0, #16]
 8011d58:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011d5c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011d60:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011d64:	4770      	bx	lr
 8011d66:	bf00      	nop

08011d68 <uxr_reset_stream_storage>:
 8011d68:	b570      	push	{r4, r5, r6, lr}
 8011d6a:	7c03      	ldrb	r3, [r0, #16]
 8011d6c:	4604      	mov	r4, r0
 8011d6e:	b153      	cbz	r3, 8011d86 <uxr_reset_stream_storage+0x1e>
 8011d70:	4606      	mov	r6, r0
 8011d72:	2500      	movs	r5, #0
 8011d74:	4630      	mov	r0, r6
 8011d76:	f005 fe1f 	bl	80179b8 <uxr_reset_output_best_effort_stream>
 8011d7a:	7c23      	ldrb	r3, [r4, #16]
 8011d7c:	3501      	adds	r5, #1
 8011d7e:	42ab      	cmp	r3, r5
 8011d80:	f106 0610 	add.w	r6, r6, #16
 8011d84:	d8f6      	bhi.n	8011d74 <uxr_reset_stream_storage+0xc>
 8011d86:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011d8a:	b163      	cbz	r3, 8011da6 <uxr_reset_stream_storage+0x3e>
 8011d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011d90:	2500      	movs	r5, #0
 8011d92:	4630      	mov	r0, r6
 8011d94:	f005 fc12 	bl	80175bc <uxr_reset_input_best_effort_stream>
 8011d98:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011d9c:	3501      	adds	r5, #1
 8011d9e:	42ab      	cmp	r3, r5
 8011da0:	f106 0602 	add.w	r6, r6, #2
 8011da4:	d8f5      	bhi.n	8011d92 <uxr_reset_stream_storage+0x2a>
 8011da6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011daa:	b163      	cbz	r3, 8011dc6 <uxr_reset_stream_storage+0x5e>
 8011dac:	f104 0618 	add.w	r6, r4, #24
 8011db0:	2500      	movs	r5, #0
 8011db2:	4630      	mov	r0, r6
 8011db4:	f005 feac 	bl	8017b10 <uxr_reset_output_reliable_stream>
 8011db8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011dbc:	3501      	adds	r5, #1
 8011dbe:	42ab      	cmp	r3, r5
 8011dc0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011dc4:	d8f5      	bhi.n	8011db2 <uxr_reset_stream_storage+0x4a>
 8011dc6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011dca:	b163      	cbz	r3, 8011de6 <uxr_reset_stream_storage+0x7e>
 8011dcc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011dd0:	2500      	movs	r5, #0
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	f005 fc66 	bl	80176a4 <uxr_reset_input_reliable_stream>
 8011dd8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011ddc:	3501      	adds	r5, #1
 8011dde:	42ab      	cmp	r3, r5
 8011de0:	f106 0618 	add.w	r6, r6, #24
 8011de4:	d8f5      	bhi.n	8011dd2 <uxr_reset_stream_storage+0x6a>
 8011de6:	bd70      	pop	{r4, r5, r6, pc}

08011de8 <uxr_add_output_best_effort_buffer>:
 8011de8:	b510      	push	{r4, lr}
 8011dea:	7c04      	ldrb	r4, [r0, #16]
 8011dec:	f104 0c01 	add.w	ip, r4, #1
 8011df0:	b082      	sub	sp, #8
 8011df2:	f880 c010 	strb.w	ip, [r0, #16]
 8011df6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011dfa:	f005 fdd3 	bl	80179a4 <uxr_init_output_best_effort_stream>
 8011dfe:	2201      	movs	r2, #1
 8011e00:	4611      	mov	r1, r2
 8011e02:	4620      	mov	r0, r4
 8011e04:	b002      	add	sp, #8
 8011e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e0a:	f7ff bf4f 	b.w	8011cac <uxr_stream_id>
 8011e0e:	bf00      	nop

08011e10 <uxr_add_output_reliable_buffer>:
 8011e10:	b510      	push	{r4, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	4684      	mov	ip, r0
 8011e16:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011e1a:	9000      	str	r0, [sp, #0]
 8011e1c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011e20:	2028      	movs	r0, #40	@ 0x28
 8011e22:	fb00 c004 	mla	r0, r0, r4, ip
 8011e26:	f104 0e01 	add.w	lr, r4, #1
 8011e2a:	3018      	adds	r0, #24
 8011e2c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011e30:	f005 fe36 	bl	8017aa0 <uxr_init_output_reliable_stream>
 8011e34:	2201      	movs	r2, #1
 8011e36:	2102      	movs	r1, #2
 8011e38:	4620      	mov	r0, r4
 8011e3a:	b004      	add	sp, #16
 8011e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e40:	f7ff bf34 	b.w	8011cac <uxr_stream_id>

08011e44 <uxr_add_input_best_effort_buffer>:
 8011e44:	b510      	push	{r4, lr}
 8011e46:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	1c62      	adds	r2, r4, #1
 8011e4e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8011e52:	b082      	sub	sp, #8
 8011e54:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011e5c:	f005 fbaa 	bl	80175b4 <uxr_init_input_best_effort_stream>
 8011e60:	2200      	movs	r2, #0
 8011e62:	2101      	movs	r1, #1
 8011e64:	4620      	mov	r0, r4
 8011e66:	b002      	add	sp, #8
 8011e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e6c:	f7ff bf1e 	b.w	8011cac <uxr_stream_id>

08011e70 <uxr_add_input_reliable_buffer>:
 8011e70:	b510      	push	{r4, lr}
 8011e72:	b084      	sub	sp, #16
 8011e74:	4684      	mov	ip, r0
 8011e76:	9806      	ldr	r0, [sp, #24]
 8011e78:	9000      	str	r0, [sp, #0]
 8011e7a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011e7e:	2018      	movs	r0, #24
 8011e80:	fb00 c004 	mla	r0, r0, r4, ip
 8011e84:	f104 0e01 	add.w	lr, r4, #1
 8011e88:	3048      	adds	r0, #72	@ 0x48
 8011e8a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011e8e:	f005 fbdd 	bl	801764c <uxr_init_input_reliable_stream>
 8011e92:	2200      	movs	r2, #0
 8011e94:	2102      	movs	r1, #2
 8011e96:	4620      	mov	r0, r4
 8011e98:	b004      	add	sp, #16
 8011e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e9e:	f7ff bf05 	b.w	8011cac <uxr_stream_id>
 8011ea2:	bf00      	nop

08011ea4 <uxr_get_output_best_effort_stream>:
 8011ea4:	7c03      	ldrb	r3, [r0, #16]
 8011ea6:	428b      	cmp	r3, r1
 8011ea8:	bf8c      	ite	hi
 8011eaa:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011eae:	2000      	movls	r0, #0
 8011eb0:	4770      	bx	lr
 8011eb2:	bf00      	nop

08011eb4 <uxr_get_output_reliable_stream>:
 8011eb4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011eb8:	428b      	cmp	r3, r1
 8011eba:	bf83      	ittte	hi
 8011ebc:	2328      	movhi	r3, #40	@ 0x28
 8011ebe:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011ec2:	3018      	addhi	r0, #24
 8011ec4:	2000      	movls	r0, #0
 8011ec6:	4770      	bx	lr

08011ec8 <uxr_get_input_best_effort_stream>:
 8011ec8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011ecc:	428b      	cmp	r3, r1
 8011ece:	bf86      	itte	hi
 8011ed0:	3121      	addhi	r1, #33	@ 0x21
 8011ed2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011ed6:	2000      	movls	r0, #0
 8011ed8:	4770      	bx	lr
 8011eda:	bf00      	nop

08011edc <uxr_get_input_reliable_stream>:
 8011edc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011ee0:	428b      	cmp	r3, r1
 8011ee2:	bf83      	ittte	hi
 8011ee4:	2318      	movhi	r3, #24
 8011ee6:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011eea:	3048      	addhi	r0, #72	@ 0x48
 8011eec:	2000      	movls	r0, #0
 8011eee:	4770      	bx	lr

08011ef0 <uxr_output_streams_confirmed>:
 8011ef0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011ef4:	b183      	cbz	r3, 8011f18 <uxr_output_streams_confirmed+0x28>
 8011ef6:	b570      	push	{r4, r5, r6, lr}
 8011ef8:	4606      	mov	r6, r0
 8011efa:	f100 0518 	add.w	r5, r0, #24
 8011efe:	2400      	movs	r4, #0
 8011f00:	e001      	b.n	8011f06 <uxr_output_streams_confirmed+0x16>
 8011f02:	3528      	adds	r5, #40	@ 0x28
 8011f04:	b138      	cbz	r0, 8011f16 <uxr_output_streams_confirmed+0x26>
 8011f06:	4628      	mov	r0, r5
 8011f08:	f006 f872 	bl	8017ff0 <uxr_is_output_up_to_date>
 8011f0c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011f10:	3401      	adds	r4, #1
 8011f12:	42a3      	cmp	r3, r4
 8011f14:	d8f5      	bhi.n	8011f02 <uxr_output_streams_confirmed+0x12>
 8011f16:	bd70      	pop	{r4, r5, r6, pc}
 8011f18:	2001      	movs	r0, #1
 8011f1a:	4770      	bx	lr

08011f1c <uxr_buffer_submessage_header>:
 8011f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f1e:	4604      	mov	r4, r0
 8011f20:	460e      	mov	r6, r1
 8011f22:	2104      	movs	r1, #4
 8011f24:	4615      	mov	r5, r2
 8011f26:	461f      	mov	r7, r3
 8011f28:	f7fa f930 	bl	800c18c <ucdr_align_to>
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	ea47 0203 	orr.w	r2, r7, r3
 8011f32:	4631      	mov	r1, r6
 8011f34:	7523      	strb	r3, [r4, #20]
 8011f36:	4620      	mov	r0, r4
 8011f38:	462b      	mov	r3, r5
 8011f3a:	f000 fa27 	bl	801238c <uxr_serialize_submessage_header>
 8011f3e:	4620      	mov	r0, r4
 8011f40:	f7fa f93a 	bl	800c1b8 <ucdr_buffer_remaining>
 8011f44:	42a8      	cmp	r0, r5
 8011f46:	bf34      	ite	cc
 8011f48:	2000      	movcc	r0, #0
 8011f4a:	2001      	movcs	r0, #1
 8011f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f4e:	bf00      	nop

08011f50 <uxr_read_submessage_header>:
 8011f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f54:	4604      	mov	r4, r0
 8011f56:	460d      	mov	r5, r1
 8011f58:	2104      	movs	r1, #4
 8011f5a:	4616      	mov	r6, r2
 8011f5c:	4698      	mov	r8, r3
 8011f5e:	f7fa f915 	bl	800c18c <ucdr_align_to>
 8011f62:	4620      	mov	r0, r4
 8011f64:	f7fa f928 	bl	800c1b8 <ucdr_buffer_remaining>
 8011f68:	2803      	cmp	r0, #3
 8011f6a:	bf8c      	ite	hi
 8011f6c:	2701      	movhi	r7, #1
 8011f6e:	2700      	movls	r7, #0
 8011f70:	d802      	bhi.n	8011f78 <uxr_read_submessage_header+0x28>
 8011f72:	4638      	mov	r0, r7
 8011f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f78:	4633      	mov	r3, r6
 8011f7a:	4642      	mov	r2, r8
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	4629      	mov	r1, r5
 8011f80:	f000 fa18 	bl	80123b4 <uxr_deserialize_submessage_header>
 8011f84:	f898 3000 	ldrb.w	r3, [r8]
 8011f88:	f003 0201 	and.w	r2, r3, #1
 8011f8c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011f90:	f888 3000 	strb.w	r3, [r8]
 8011f94:	7522      	strb	r2, [r4, #20]
 8011f96:	4638      	mov	r0, r7
 8011f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011f9c <uxr_submessage_padding>:
 8011f9c:	f010 0003 	ands.w	r0, r0, #3
 8011fa0:	bf18      	it	ne
 8011fa2:	f1c0 0004 	rsbne	r0, r0, #4
 8011fa6:	4770      	bx	lr

08011fa8 <uxr_millis>:
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	4669      	mov	r1, sp
 8011fae:	2001      	movs	r0, #1
 8011fb0:	f7ef ff86 	bl	8001ec0 <clock_gettime>
 8011fb4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8011fb8:	4906      	ldr	r1, [pc, #24]	@ (8011fd4 <uxr_millis+0x2c>)
 8011fba:	fba0 0301 	umull	r0, r3, r0, r1
 8011fbe:	1900      	adds	r0, r0, r4
 8011fc0:	fb01 3102 	mla	r1, r1, r2, r3
 8011fc4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8011fc8:	4a03      	ldr	r2, [pc, #12]	@ (8011fd8 <uxr_millis+0x30>)
 8011fca:	2300      	movs	r3, #0
 8011fcc:	f7ee fdfc 	bl	8000bc8 <__aeabi_ldivmod>
 8011fd0:	b004      	add	sp, #16
 8011fd2:	bd10      	pop	{r4, pc}
 8011fd4:	3b9aca00 	.word	0x3b9aca00
 8011fd8:	000f4240 	.word	0x000f4240

08011fdc <uxr_nanos>:
 8011fdc:	b510      	push	{r4, lr}
 8011fde:	b084      	sub	sp, #16
 8011fe0:	4669      	mov	r1, sp
 8011fe2:	2001      	movs	r0, #1
 8011fe4:	f7ef ff6c 	bl	8001ec0 <clock_gettime>
 8011fe8:	4a06      	ldr	r2, [pc, #24]	@ (8012004 <uxr_nanos+0x28>)
 8011fea:	9800      	ldr	r0, [sp, #0]
 8011fec:	9902      	ldr	r1, [sp, #8]
 8011fee:	9c01      	ldr	r4, [sp, #4]
 8011ff0:	fba0 0302 	umull	r0, r3, r0, r2
 8011ff4:	1840      	adds	r0, r0, r1
 8011ff6:	fb02 3304 	mla	r3, r2, r4, r3
 8011ffa:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011ffe:	b004      	add	sp, #16
 8012000:	bd10      	pop	{r4, pc}
 8012002:	bf00      	nop
 8012004:	3b9aca00 	.word	0x3b9aca00

08012008 <on_full_output_buffer_fragmented>:
 8012008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801200c:	460c      	mov	r4, r1
 801200e:	b08a      	sub	sp, #40	@ 0x28
 8012010:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012014:	4606      	mov	r6, r0
 8012016:	f104 0008 	add.w	r0, r4, #8
 801201a:	f7ff ff4b 	bl	8011eb4 <uxr_get_output_reliable_stream>
 801201e:	4605      	mov	r5, r0
 8012020:	f005 fff0 	bl	8018004 <get_available_free_slots>
 8012024:	b968      	cbnz	r0, 8012042 <on_full_output_buffer_fragmented+0x3a>
 8012026:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801202a:	4620      	mov	r0, r4
 801202c:	4798      	blx	r3
 801202e:	b918      	cbnz	r0, 8012038 <on_full_output_buffer_fragmented+0x30>
 8012030:	2001      	movs	r0, #1
 8012032:	b00a      	add	sp, #40	@ 0x28
 8012034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012038:	4628      	mov	r0, r5
 801203a:	f005 ffe3 	bl	8018004 <get_available_free_slots>
 801203e:	2800      	cmp	r0, #0
 8012040:	d0f6      	beq.n	8012030 <on_full_output_buffer_fragmented+0x28>
 8012042:	8929      	ldrh	r1, [r5, #8]
 8012044:	89eb      	ldrh	r3, [r5, #14]
 8012046:	7b28      	ldrb	r0, [r5, #12]
 8012048:	686a      	ldr	r2, [r5, #4]
 801204a:	fbb2 f8f1 	udiv	r8, r2, r1
 801204e:	fbb3 f2f1 	udiv	r2, r3, r1
 8012052:	fb01 3112 	mls	r1, r1, r2, r3
 8012056:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801205a:	b289      	uxth	r1, r1
 801205c:	fb08 f101 	mul.w	r1, r8, r1
 8012060:	30fc      	adds	r0, #252	@ 0xfc
 8012062:	f1a8 0804 	sub.w	r8, r8, #4
 8012066:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801206a:	4440      	add	r0, r8
 801206c:	b287      	uxth	r7, r0
 801206e:	1bdb      	subs	r3, r3, r7
 8012070:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012074:	682b      	ldr	r3, [r5, #0]
 8012076:	3104      	adds	r1, #4
 8012078:	4419      	add	r1, r3
 801207a:	4642      	mov	r2, r8
 801207c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012080:	9300      	str	r3, [sp, #0]
 8012082:	a802      	add	r0, sp, #8
 8012084:	2300      	movs	r3, #0
 8012086:	f7fa f855 	bl	800c134 <ucdr_init_buffer_origin_offset>
 801208a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801208e:	f102 0308 	add.w	r3, r2, #8
 8012092:	4543      	cmp	r3, r8
 8012094:	d928      	bls.n	80120e8 <on_full_output_buffer_fragmented+0xe0>
 8012096:	463a      	mov	r2, r7
 8012098:	2300      	movs	r3, #0
 801209a:	210d      	movs	r1, #13
 801209c:	a802      	add	r0, sp, #8
 801209e:	f7ff ff3d 	bl	8011f1c <uxr_buffer_submessage_header>
 80120a2:	8929      	ldrh	r1, [r5, #8]
 80120a4:	89eb      	ldrh	r3, [r5, #14]
 80120a6:	fbb3 f2f1 	udiv	r2, r3, r1
 80120aa:	fb01 3312 	mls	r3, r1, r2, r3
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	686a      	ldr	r2, [r5, #4]
 80120b2:	fbb2 f2f1 	udiv	r2, r2, r1
 80120b6:	fb02 f303 	mul.w	r3, r2, r3
 80120ba:	682a      	ldr	r2, [r5, #0]
 80120bc:	f842 8003 	str.w	r8, [r2, r3]
 80120c0:	89e8      	ldrh	r0, [r5, #14]
 80120c2:	2101      	movs	r1, #1
 80120c4:	f005 ffbe 	bl	8018044 <uxr_seq_num_add>
 80120c8:	9904      	ldr	r1, [sp, #16]
 80120ca:	9a03      	ldr	r2, [sp, #12]
 80120cc:	81e8      	strh	r0, [r5, #14]
 80120ce:	1a52      	subs	r2, r2, r1
 80120d0:	4630      	mov	r0, r6
 80120d2:	f7fa f841 	bl	800c158 <ucdr_init_buffer>
 80120d6:	4630      	mov	r0, r6
 80120d8:	490f      	ldr	r1, [pc, #60]	@ (8012118 <on_full_output_buffer_fragmented+0x110>)
 80120da:	4622      	mov	r2, r4
 80120dc:	f7fa f810 	bl	800c100 <ucdr_set_on_full_buffer_callback>
 80120e0:	2000      	movs	r0, #0
 80120e2:	b00a      	add	sp, #40	@ 0x28
 80120e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120e8:	b292      	uxth	r2, r2
 80120ea:	2302      	movs	r3, #2
 80120ec:	210d      	movs	r1, #13
 80120ee:	a802      	add	r0, sp, #8
 80120f0:	f7ff ff14 	bl	8011f1c <uxr_buffer_submessage_header>
 80120f4:	8928      	ldrh	r0, [r5, #8]
 80120f6:	89eb      	ldrh	r3, [r5, #14]
 80120f8:	fbb3 f1f0 	udiv	r1, r3, r0
 80120fc:	fb00 3311 	mls	r3, r0, r1, r3
 8012100:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012104:	6869      	ldr	r1, [r5, #4]
 8012106:	fbb1 f1f0 	udiv	r1, r1, r0
 801210a:	b29b      	uxth	r3, r3
 801210c:	fb01 f303 	mul.w	r3, r1, r3
 8012110:	6829      	ldr	r1, [r5, #0]
 8012112:	3208      	adds	r2, #8
 8012114:	50ca      	str	r2, [r1, r3]
 8012116:	e7d3      	b.n	80120c0 <on_full_output_buffer_fragmented+0xb8>
 8012118:	08012009 	.word	0x08012009

0801211c <uxr_prepare_output_stream>:
 801211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801211e:	b087      	sub	sp, #28
 8012120:	2707      	movs	r7, #7
 8012122:	9202      	str	r2, [sp, #8]
 8012124:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012126:	9103      	str	r1, [sp, #12]
 8012128:	2500      	movs	r5, #0
 801212a:	3204      	adds	r2, #4
 801212c:	e9cd 7500 	strd	r7, r5, [sp]
 8012130:	461c      	mov	r4, r3
 8012132:	4606      	mov	r6, r0
 8012134:	f7fe ffc2 	bl	80110bc <uxr_prepare_stream_to_write_submessage>
 8012138:	f080 0201 	eor.w	r2, r0, #1
 801213c:	b2d2      	uxtb	r2, r2
 801213e:	75a2      	strb	r2, [r4, #22]
 8012140:	b112      	cbz	r2, 8012148 <uxr_prepare_output_stream+0x2c>
 8012142:	4628      	mov	r0, r5
 8012144:	b007      	add	sp, #28
 8012146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012148:	aa05      	add	r2, sp, #20
 801214a:	9902      	ldr	r1, [sp, #8]
 801214c:	4630      	mov	r0, r6
 801214e:	f7ff f8eb 	bl	8011328 <uxr_init_base_object_request>
 8012152:	a905      	add	r1, sp, #20
 8012154:	4605      	mov	r5, r0
 8012156:	4620      	mov	r0, r4
 8012158:	f000 ffd4 	bl	8013104 <uxr_serialize_WRITE_DATA_Payload_Data>
 801215c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012160:	69a6      	ldr	r6, [r4, #24]
 8012162:	69e7      	ldr	r7, [r4, #28]
 8012164:	1a52      	subs	r2, r2, r1
 8012166:	4620      	mov	r0, r4
 8012168:	f7f9 fff6 	bl	800c158 <ucdr_init_buffer>
 801216c:	4620      	mov	r0, r4
 801216e:	463a      	mov	r2, r7
 8012170:	4631      	mov	r1, r6
 8012172:	f7f9 ffc5 	bl	800c100 <ucdr_set_on_full_buffer_callback>
 8012176:	4628      	mov	r0, r5
 8012178:	b007      	add	sp, #28
 801217a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801217c <uxr_prepare_output_stream_fragmented>:
 801217c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012180:	b091      	sub	sp, #68	@ 0x44
 8012182:	4605      	mov	r5, r0
 8012184:	9105      	str	r1, [sp, #20]
 8012186:	3008      	adds	r0, #8
 8012188:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801218c:	461e      	mov	r6, r3
 801218e:	9204      	str	r2, [sp, #16]
 8012190:	f7ff fe90 	bl	8011eb4 <uxr_get_output_reliable_stream>
 8012194:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012198:	2b01      	cmp	r3, #1
 801219a:	f000 8091 	beq.w	80122c0 <uxr_prepare_output_stream_fragmented+0x144>
 801219e:	4604      	mov	r4, r0
 80121a0:	2800      	cmp	r0, #0
 80121a2:	f000 808d 	beq.w	80122c0 <uxr_prepare_output_stream_fragmented+0x144>
 80121a6:	f005 ff2d 	bl	8018004 <get_available_free_slots>
 80121aa:	2800      	cmp	r0, #0
 80121ac:	f000 8083 	beq.w	80122b6 <uxr_prepare_output_stream_fragmented+0x13a>
 80121b0:	8922      	ldrh	r2, [r4, #8]
 80121b2:	89e7      	ldrh	r7, [r4, #14]
 80121b4:	fbb7 f9f2 	udiv	r9, r7, r2
 80121b8:	fb02 7919 	mls	r9, r2, r9, r7
 80121bc:	fa1f f989 	uxth.w	r9, r9
 80121c0:	6863      	ldr	r3, [r4, #4]
 80121c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80121c6:	6823      	ldr	r3, [r4, #0]
 80121c8:	9203      	str	r2, [sp, #12]
 80121ca:	fb02 f909 	mul.w	r9, r2, r9
 80121ce:	f109 0904 	add.w	r9, r9, #4
 80121d2:	4499      	add	r9, r3
 80121d4:	7b23      	ldrb	r3, [r4, #12]
 80121d6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80121da:	4543      	cmp	r3, r8
 80121dc:	f1a2 0b04 	sub.w	fp, r2, #4
 80121e0:	d37a      	bcc.n	80122d8 <uxr_prepare_output_stream_fragmented+0x15c>
 80121e2:	f1ab 0a04 	sub.w	sl, fp, #4
 80121e6:	ebaa 0a03 	sub.w	sl, sl, r3
 80121ea:	465a      	mov	r2, fp
 80121ec:	2300      	movs	r3, #0
 80121ee:	4649      	mov	r1, r9
 80121f0:	a808      	add	r0, sp, #32
 80121f2:	f8cd 8000 	str.w	r8, [sp]
 80121f6:	f7f9 ff9d 	bl	800c134 <ucdr_init_buffer_origin_offset>
 80121fa:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80121fc:	fa1f fa8a 	uxth.w	sl, sl
 8012200:	4652      	mov	r2, sl
 8012202:	f103 0a08 	add.w	sl, r3, #8
 8012206:	45da      	cmp	sl, fp
 8012208:	bf34      	ite	cc
 801220a:	2302      	movcc	r3, #2
 801220c:	2300      	movcs	r3, #0
 801220e:	210d      	movs	r1, #13
 8012210:	a808      	add	r0, sp, #32
 8012212:	f7ff fe83 	bl	8011f1c <uxr_buffer_submessage_header>
 8012216:	8921      	ldrh	r1, [r4, #8]
 8012218:	fbb7 f2f1 	udiv	r2, r7, r1
 801221c:	fb01 7212 	mls	r2, r1, r2, r7
 8012220:	b292      	uxth	r2, r2
 8012222:	6863      	ldr	r3, [r4, #4]
 8012224:	fbb3 f3f1 	udiv	r3, r3, r1
 8012228:	fb02 f303 	mul.w	r3, r2, r3
 801222c:	6822      	ldr	r2, [r4, #0]
 801222e:	4638      	mov	r0, r7
 8012230:	f842 b003 	str.w	fp, [r2, r3]
 8012234:	2101      	movs	r1, #1
 8012236:	f005 ff05 	bl	8018044 <uxr_seq_num_add>
 801223a:	9b03      	ldr	r3, [sp, #12]
 801223c:	f108 0104 	add.w	r1, r8, #4
 8012240:	f1a3 0208 	sub.w	r2, r3, #8
 8012244:	eba2 0208 	sub.w	r2, r2, r8
 8012248:	4449      	add	r1, r9
 801224a:	4607      	mov	r7, r0
 801224c:	4630      	mov	r0, r6
 801224e:	f7f9 ff83 	bl	800c158 <ucdr_init_buffer>
 8012252:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012254:	81e7      	strh	r7, [r4, #14]
 8012256:	1d1a      	adds	r2, r3, #4
 8012258:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801225c:	bf28      	it	cs
 801225e:	2200      	movcs	r2, #0
 8012260:	2300      	movs	r3, #0
 8012262:	b292      	uxth	r2, r2
 8012264:	2107      	movs	r1, #7
 8012266:	4630      	mov	r0, r6
 8012268:	f7ff fe58 	bl	8011f1c <uxr_buffer_submessage_header>
 801226c:	9904      	ldr	r1, [sp, #16]
 801226e:	aa07      	add	r2, sp, #28
 8012270:	4628      	mov	r0, r5
 8012272:	f7ff f859 	bl	8011328 <uxr_init_base_object_request>
 8012276:	4604      	mov	r4, r0
 8012278:	b318      	cbz	r0, 80122c2 <uxr_prepare_output_stream_fragmented+0x146>
 801227a:	a907      	add	r1, sp, #28
 801227c:	4630      	mov	r0, r6
 801227e:	f000 ff41 	bl	8013104 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012282:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012286:	4630      	mov	r0, r6
 8012288:	1a52      	subs	r2, r2, r1
 801228a:	f7f9 ff65 	bl	800c158 <ucdr_init_buffer>
 801228e:	9b05      	ldr	r3, [sp, #20]
 8012290:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012294:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012296:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801229a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801229c:	491b      	ldr	r1, [pc, #108]	@ (801230c <uxr_prepare_output_stream_fragmented+0x190>)
 801229e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80122a2:	4630      	mov	r0, r6
 80122a4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80122a8:	462a      	mov	r2, r5
 80122aa:	f7f9 ff29 	bl	800c100 <ucdr_set_on_full_buffer_callback>
 80122ae:	4620      	mov	r0, r4
 80122b0:	b011      	add	sp, #68	@ 0x44
 80122b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80122b8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80122ba:	4628      	mov	r0, r5
 80122bc:	4798      	blx	r3
 80122be:	b920      	cbnz	r0, 80122ca <uxr_prepare_output_stream_fragmented+0x14e>
 80122c0:	2400      	movs	r4, #0
 80122c2:	4620      	mov	r0, r4
 80122c4:	b011      	add	sp, #68	@ 0x44
 80122c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ca:	4620      	mov	r0, r4
 80122cc:	f005 fe9a 	bl	8018004 <get_available_free_slots>
 80122d0:	2800      	cmp	r0, #0
 80122d2:	f47f af6d 	bne.w	80121b0 <uxr_prepare_output_stream_fragmented+0x34>
 80122d6:	e7f3      	b.n	80122c0 <uxr_prepare_output_stream_fragmented+0x144>
 80122d8:	4638      	mov	r0, r7
 80122da:	2101      	movs	r1, #1
 80122dc:	f005 feb2 	bl	8018044 <uxr_seq_num_add>
 80122e0:	8921      	ldrh	r1, [r4, #8]
 80122e2:	fbb0 f2f1 	udiv	r2, r0, r1
 80122e6:	fb01 0912 	mls	r9, r1, r2, r0
 80122ea:	fa1f f289 	uxth.w	r2, r9
 80122ee:	6863      	ldr	r3, [r4, #4]
 80122f0:	fbb3 f9f1 	udiv	r9, r3, r1
 80122f4:	6823      	ldr	r3, [r4, #0]
 80122f6:	fb02 f909 	mul.w	r9, r2, r9
 80122fa:	f109 0904 	add.w	r9, r9, #4
 80122fe:	4499      	add	r9, r3
 8012300:	4607      	mov	r7, r0
 8012302:	7b23      	ldrb	r3, [r4, #12]
 8012304:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012308:	e76b      	b.n	80121e2 <uxr_prepare_output_stream_fragmented+0x66>
 801230a:	bf00      	nop
 801230c:	08012009 	.word	0x08012009

08012310 <uxr_serialize_message_header>:
 8012310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012312:	b083      	sub	sp, #12
 8012314:	4616      	mov	r6, r2
 8012316:	4604      	mov	r4, r0
 8012318:	9301      	str	r3, [sp, #4]
 801231a:	460d      	mov	r5, r1
 801231c:	9f08      	ldr	r7, [sp, #32]
 801231e:	f7f8 fc39 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012322:	4631      	mov	r1, r6
 8012324:	4620      	mov	r0, r4
 8012326:	f7f8 fc35 	bl	800ab94 <ucdr_serialize_uint8_t>
 801232a:	9a01      	ldr	r2, [sp, #4]
 801232c:	2101      	movs	r1, #1
 801232e:	4620      	mov	r0, r4
 8012330:	f7f8 fcdc 	bl	800acec <ucdr_serialize_endian_uint16_t>
 8012334:	062b      	lsls	r3, r5, #24
 8012336:	d501      	bpl.n	801233c <uxr_serialize_message_header+0x2c>
 8012338:	b003      	add	sp, #12
 801233a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801233c:	2204      	movs	r2, #4
 801233e:	4639      	mov	r1, r7
 8012340:	4620      	mov	r0, r4
 8012342:	b003      	add	sp, #12
 8012344:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012348:	f7fd b9a4 	b.w	800f694 <ucdr_serialize_array_uint8_t>

0801234c <uxr_deserialize_message_header>:
 801234c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801234e:	b083      	sub	sp, #12
 8012350:	4616      	mov	r6, r2
 8012352:	4604      	mov	r4, r0
 8012354:	9301      	str	r3, [sp, #4]
 8012356:	460d      	mov	r5, r1
 8012358:	9f08      	ldr	r7, [sp, #32]
 801235a:	f7f8 fc31 	bl	800abc0 <ucdr_deserialize_uint8_t>
 801235e:	4631      	mov	r1, r6
 8012360:	4620      	mov	r0, r4
 8012362:	f7f8 fc2d 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8012366:	9a01      	ldr	r2, [sp, #4]
 8012368:	2101      	movs	r1, #1
 801236a:	4620      	mov	r0, r4
 801236c:	f7f8 fdb2 	bl	800aed4 <ucdr_deserialize_endian_uint16_t>
 8012370:	f995 3000 	ldrsb.w	r3, [r5]
 8012374:	2b00      	cmp	r3, #0
 8012376:	da01      	bge.n	801237c <uxr_deserialize_message_header+0x30>
 8012378:	b003      	add	sp, #12
 801237a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801237c:	2204      	movs	r2, #4
 801237e:	4639      	mov	r1, r7
 8012380:	4620      	mov	r0, r4
 8012382:	b003      	add	sp, #12
 8012384:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012388:	f7fd b9e8 	b.w	800f75c <ucdr_deserialize_array_uint8_t>

0801238c <uxr_serialize_submessage_header>:
 801238c:	b530      	push	{r4, r5, lr}
 801238e:	b083      	sub	sp, #12
 8012390:	4615      	mov	r5, r2
 8012392:	4604      	mov	r4, r0
 8012394:	9301      	str	r3, [sp, #4]
 8012396:	f7f8 fbfd 	bl	800ab94 <ucdr_serialize_uint8_t>
 801239a:	4629      	mov	r1, r5
 801239c:	4620      	mov	r0, r4
 801239e:	f7f8 fbf9 	bl	800ab94 <ucdr_serialize_uint8_t>
 80123a2:	9a01      	ldr	r2, [sp, #4]
 80123a4:	2101      	movs	r1, #1
 80123a6:	4620      	mov	r0, r4
 80123a8:	b003      	add	sp, #12
 80123aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123ae:	f7f8 bc9d 	b.w	800acec <ucdr_serialize_endian_uint16_t>
 80123b2:	bf00      	nop

080123b4 <uxr_deserialize_submessage_header>:
 80123b4:	b530      	push	{r4, r5, lr}
 80123b6:	b083      	sub	sp, #12
 80123b8:	4615      	mov	r5, r2
 80123ba:	4604      	mov	r4, r0
 80123bc:	9301      	str	r3, [sp, #4]
 80123be:	f7f8 fbff 	bl	800abc0 <ucdr_deserialize_uint8_t>
 80123c2:	4629      	mov	r1, r5
 80123c4:	4620      	mov	r0, r4
 80123c6:	f7f8 fbfb 	bl	800abc0 <ucdr_deserialize_uint8_t>
 80123ca:	9a01      	ldr	r2, [sp, #4]
 80123cc:	2101      	movs	r1, #1
 80123ce:	4620      	mov	r0, r4
 80123d0:	b003      	add	sp, #12
 80123d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123d6:	f7f8 bd7d 	b.w	800aed4 <ucdr_deserialize_endian_uint16_t>
 80123da:	bf00      	nop

080123dc <uxr_serialize_CLIENT_Representation>:
 80123dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123e0:	2204      	movs	r2, #4
 80123e2:	460e      	mov	r6, r1
 80123e4:	4605      	mov	r5, r0
 80123e6:	f7fd f955 	bl	800f694 <ucdr_serialize_array_uint8_t>
 80123ea:	2202      	movs	r2, #2
 80123ec:	4607      	mov	r7, r0
 80123ee:	1d31      	adds	r1, r6, #4
 80123f0:	4628      	mov	r0, r5
 80123f2:	f7fd f94f 	bl	800f694 <ucdr_serialize_array_uint8_t>
 80123f6:	4038      	ands	r0, r7
 80123f8:	2202      	movs	r2, #2
 80123fa:	1db1      	adds	r1, r6, #6
 80123fc:	b2c7      	uxtb	r7, r0
 80123fe:	4628      	mov	r0, r5
 8012400:	f7fd f948 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012404:	2204      	movs	r2, #4
 8012406:	4007      	ands	r7, r0
 8012408:	f106 0108 	add.w	r1, r6, #8
 801240c:	4628      	mov	r0, r5
 801240e:	f7fd f941 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012412:	7b31      	ldrb	r1, [r6, #12]
 8012414:	4007      	ands	r7, r0
 8012416:	4628      	mov	r0, r5
 8012418:	f7f8 fbbc 	bl	800ab94 <ucdr_serialize_uint8_t>
 801241c:	7b71      	ldrb	r1, [r6, #13]
 801241e:	4007      	ands	r7, r0
 8012420:	4628      	mov	r0, r5
 8012422:	f7f8 fb89 	bl	800ab38 <ucdr_serialize_bool>
 8012426:	7b73      	ldrb	r3, [r6, #13]
 8012428:	ea07 0800 	and.w	r8, r7, r0
 801242c:	b93b      	cbnz	r3, 801243e <uxr_serialize_CLIENT_Representation+0x62>
 801242e:	8bb1      	ldrh	r1, [r6, #28]
 8012430:	4628      	mov	r0, r5
 8012432:	f7f8 fbdb 	bl	800abec <ucdr_serialize_uint16_t>
 8012436:	ea08 0000 	and.w	r0, r8, r0
 801243a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801243e:	6931      	ldr	r1, [r6, #16]
 8012440:	4628      	mov	r0, r5
 8012442:	f7f8 fdbd 	bl	800afc0 <ucdr_serialize_uint32_t>
 8012446:	6933      	ldr	r3, [r6, #16]
 8012448:	b1e3      	cbz	r3, 8012484 <uxr_serialize_CLIENT_Representation+0xa8>
 801244a:	b1c0      	cbz	r0, 801247e <uxr_serialize_CLIENT_Representation+0xa2>
 801244c:	4637      	mov	r7, r6
 801244e:	f04f 0900 	mov.w	r9, #0
 8012452:	e001      	b.n	8012458 <uxr_serialize_CLIENT_Representation+0x7c>
 8012454:	3708      	adds	r7, #8
 8012456:	b194      	cbz	r4, 801247e <uxr_serialize_CLIENT_Representation+0xa2>
 8012458:	6979      	ldr	r1, [r7, #20]
 801245a:	4628      	mov	r0, r5
 801245c:	f005 f892 	bl	8017584 <ucdr_serialize_string>
 8012460:	69b9      	ldr	r1, [r7, #24]
 8012462:	4604      	mov	r4, r0
 8012464:	4628      	mov	r0, r5
 8012466:	f005 f88d 	bl	8017584 <ucdr_serialize_string>
 801246a:	6933      	ldr	r3, [r6, #16]
 801246c:	f109 0901 	add.w	r9, r9, #1
 8012470:	4004      	ands	r4, r0
 8012472:	4599      	cmp	r9, r3
 8012474:	b2e4      	uxtb	r4, r4
 8012476:	d3ed      	bcc.n	8012454 <uxr_serialize_CLIENT_Representation+0x78>
 8012478:	ea08 0804 	and.w	r8, r8, r4
 801247c:	e7d7      	b.n	801242e <uxr_serialize_CLIENT_Representation+0x52>
 801247e:	f04f 0800 	mov.w	r8, #0
 8012482:	e7d4      	b.n	801242e <uxr_serialize_CLIENT_Representation+0x52>
 8012484:	ea08 0800 	and.w	r8, r8, r0
 8012488:	e7d1      	b.n	801242e <uxr_serialize_CLIENT_Representation+0x52>
 801248a:	bf00      	nop

0801248c <uxr_deserialize_CLIENT_Representation>:
 801248c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012490:	2204      	movs	r2, #4
 8012492:	460c      	mov	r4, r1
 8012494:	4605      	mov	r5, r0
 8012496:	f7fd f961 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 801249a:	2202      	movs	r2, #2
 801249c:	4607      	mov	r7, r0
 801249e:	1d21      	adds	r1, r4, #4
 80124a0:	4628      	mov	r0, r5
 80124a2:	f7fd f95b 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 80124a6:	4038      	ands	r0, r7
 80124a8:	2202      	movs	r2, #2
 80124aa:	1da1      	adds	r1, r4, #6
 80124ac:	b2c6      	uxtb	r6, r0
 80124ae:	4628      	mov	r0, r5
 80124b0:	f7fd f954 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 80124b4:	2204      	movs	r2, #4
 80124b6:	4006      	ands	r6, r0
 80124b8:	f104 0108 	add.w	r1, r4, #8
 80124bc:	4628      	mov	r0, r5
 80124be:	f7fd f94d 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 80124c2:	f104 010c 	add.w	r1, r4, #12
 80124c6:	4006      	ands	r6, r0
 80124c8:	4628      	mov	r0, r5
 80124ca:	f7f8 fb79 	bl	800abc0 <ucdr_deserialize_uint8_t>
 80124ce:	f104 010d 	add.w	r1, r4, #13
 80124d2:	ea06 0700 	and.w	r7, r6, r0
 80124d6:	4628      	mov	r0, r5
 80124d8:	f7f8 fb44 	bl	800ab64 <ucdr_deserialize_bool>
 80124dc:	7b63      	ldrb	r3, [r4, #13]
 80124de:	4007      	ands	r7, r0
 80124e0:	b93b      	cbnz	r3, 80124f2 <uxr_deserialize_CLIENT_Representation+0x66>
 80124e2:	f104 011c 	add.w	r1, r4, #28
 80124e6:	4628      	mov	r0, r5
 80124e8:	f7f8 fc80 	bl	800adec <ucdr_deserialize_uint16_t>
 80124ec:	4038      	ands	r0, r7
 80124ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124f2:	f104 0110 	add.w	r1, r4, #16
 80124f6:	4628      	mov	r0, r5
 80124f8:	f7f8 fe92 	bl	800b220 <ucdr_deserialize_uint32_t>
 80124fc:	6923      	ldr	r3, [r4, #16]
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d903      	bls.n	801250a <uxr_deserialize_CLIENT_Representation+0x7e>
 8012502:	2301      	movs	r3, #1
 8012504:	75ab      	strb	r3, [r5, #22]
 8012506:	2700      	movs	r7, #0
 8012508:	e7eb      	b.n	80124e2 <uxr_deserialize_CLIENT_Representation+0x56>
 801250a:	b30b      	cbz	r3, 8012550 <uxr_deserialize_CLIENT_Representation+0xc4>
 801250c:	2800      	cmp	r0, #0
 801250e:	d0fa      	beq.n	8012506 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012510:	46a0      	mov	r8, r4
 8012512:	f04f 0900 	mov.w	r9, #0
 8012516:	e001      	b.n	801251c <uxr_deserialize_CLIENT_Representation+0x90>
 8012518:	2e00      	cmp	r6, #0
 801251a:	d0f4      	beq.n	8012506 <uxr_deserialize_CLIENT_Representation+0x7a>
 801251c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012524:	4628      	mov	r0, r5
 8012526:	f005 f83d 	bl	80175a4 <ucdr_deserialize_string>
 801252a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801252e:	4606      	mov	r6, r0
 8012530:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012534:	4628      	mov	r0, r5
 8012536:	f005 f835 	bl	80175a4 <ucdr_deserialize_string>
 801253a:	6923      	ldr	r3, [r4, #16]
 801253c:	f109 0901 	add.w	r9, r9, #1
 8012540:	4006      	ands	r6, r0
 8012542:	4599      	cmp	r9, r3
 8012544:	f108 0808 	add.w	r8, r8, #8
 8012548:	b2f6      	uxtb	r6, r6
 801254a:	d3e5      	bcc.n	8012518 <uxr_deserialize_CLIENT_Representation+0x8c>
 801254c:	4037      	ands	r7, r6
 801254e:	e7c8      	b.n	80124e2 <uxr_deserialize_CLIENT_Representation+0x56>
 8012550:	4007      	ands	r7, r0
 8012552:	e7c6      	b.n	80124e2 <uxr_deserialize_CLIENT_Representation+0x56>

08012554 <uxr_serialize_AGENT_Representation>:
 8012554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012558:	2204      	movs	r2, #4
 801255a:	460f      	mov	r7, r1
 801255c:	4605      	mov	r5, r0
 801255e:	f7fd f899 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012562:	2202      	movs	r2, #2
 8012564:	4604      	mov	r4, r0
 8012566:	1d39      	adds	r1, r7, #4
 8012568:	4628      	mov	r0, r5
 801256a:	f7fd f893 	bl	800f694 <ucdr_serialize_array_uint8_t>
 801256e:	4020      	ands	r0, r4
 8012570:	2202      	movs	r2, #2
 8012572:	1db9      	adds	r1, r7, #6
 8012574:	b2c4      	uxtb	r4, r0
 8012576:	4628      	mov	r0, r5
 8012578:	f7fd f88c 	bl	800f694 <ucdr_serialize_array_uint8_t>
 801257c:	7a39      	ldrb	r1, [r7, #8]
 801257e:	4004      	ands	r4, r0
 8012580:	4628      	mov	r0, r5
 8012582:	f7f8 fad9 	bl	800ab38 <ucdr_serialize_bool>
 8012586:	7a3b      	ldrb	r3, [r7, #8]
 8012588:	ea00 0804 	and.w	r8, r0, r4
 801258c:	b913      	cbnz	r3, 8012594 <uxr_serialize_AGENT_Representation+0x40>
 801258e:	4640      	mov	r0, r8
 8012590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012594:	68f9      	ldr	r1, [r7, #12]
 8012596:	4628      	mov	r0, r5
 8012598:	f7f8 fd12 	bl	800afc0 <ucdr_serialize_uint32_t>
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	b303      	cbz	r3, 80125e2 <uxr_serialize_AGENT_Representation+0x8e>
 80125a0:	b1d0      	cbz	r0, 80125d8 <uxr_serialize_AGENT_Representation+0x84>
 80125a2:	463e      	mov	r6, r7
 80125a4:	f04f 0900 	mov.w	r9, #0
 80125a8:	e001      	b.n	80125ae <uxr_serialize_AGENT_Representation+0x5a>
 80125aa:	3608      	adds	r6, #8
 80125ac:	b1a4      	cbz	r4, 80125d8 <uxr_serialize_AGENT_Representation+0x84>
 80125ae:	6931      	ldr	r1, [r6, #16]
 80125b0:	4628      	mov	r0, r5
 80125b2:	f004 ffe7 	bl	8017584 <ucdr_serialize_string>
 80125b6:	6971      	ldr	r1, [r6, #20]
 80125b8:	4604      	mov	r4, r0
 80125ba:	4628      	mov	r0, r5
 80125bc:	f004 ffe2 	bl	8017584 <ucdr_serialize_string>
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	f109 0901 	add.w	r9, r9, #1
 80125c6:	4004      	ands	r4, r0
 80125c8:	4599      	cmp	r9, r3
 80125ca:	b2e4      	uxtb	r4, r4
 80125cc:	d3ed      	bcc.n	80125aa <uxr_serialize_AGENT_Representation+0x56>
 80125ce:	ea08 0804 	and.w	r8, r8, r4
 80125d2:	4640      	mov	r0, r8
 80125d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125d8:	f04f 0800 	mov.w	r8, #0
 80125dc:	4640      	mov	r0, r8
 80125de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125e2:	ea08 0800 	and.w	r8, r8, r0
 80125e6:	e7d2      	b.n	801258e <uxr_serialize_AGENT_Representation+0x3a>

080125e8 <uxr_serialize_DATAWRITER_Representation>:
 80125e8:	b570      	push	{r4, r5, r6, lr}
 80125ea:	460d      	mov	r5, r1
 80125ec:	7809      	ldrb	r1, [r1, #0]
 80125ee:	4606      	mov	r6, r0
 80125f0:	f7f8 fad0 	bl	800ab94 <ucdr_serialize_uint8_t>
 80125f4:	4604      	mov	r4, r0
 80125f6:	b130      	cbz	r0, 8012606 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80125f8:	782b      	ldrb	r3, [r5, #0]
 80125fa:	2b02      	cmp	r3, #2
 80125fc:	d00c      	beq.n	8012618 <uxr_serialize_DATAWRITER_Representation+0x30>
 80125fe:	2b03      	cmp	r3, #3
 8012600:	d010      	beq.n	8012624 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012602:	2b01      	cmp	r3, #1
 8012604:	d008      	beq.n	8012618 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012606:	2202      	movs	r2, #2
 8012608:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801260c:	4630      	mov	r0, r6
 801260e:	f7fd f841 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012612:	4020      	ands	r0, r4
 8012614:	b2c0      	uxtb	r0, r0
 8012616:	bd70      	pop	{r4, r5, r6, pc}
 8012618:	6869      	ldr	r1, [r5, #4]
 801261a:	4630      	mov	r0, r6
 801261c:	f004 ffb2 	bl	8017584 <ucdr_serialize_string>
 8012620:	4604      	mov	r4, r0
 8012622:	e7f0      	b.n	8012606 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012624:	4629      	mov	r1, r5
 8012626:	4630      	mov	r0, r6
 8012628:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801262c:	3104      	adds	r1, #4
 801262e:	f7fd f9cf 	bl	800f9d0 <ucdr_serialize_sequence_uint8_t>
 8012632:	4604      	mov	r4, r0
 8012634:	e7e7      	b.n	8012606 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012636:	bf00      	nop

08012638 <uxr_serialize_ObjectVariant.part.0>:
 8012638:	b570      	push	{r4, r5, r6, lr}
 801263a:	780b      	ldrb	r3, [r1, #0]
 801263c:	3b01      	subs	r3, #1
 801263e:	460c      	mov	r4, r1
 8012640:	4605      	mov	r5, r0
 8012642:	2b0d      	cmp	r3, #13
 8012644:	d854      	bhi.n	80126f0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012646:	e8df f003 	tbb	[pc, r3]
 801264a:	0730      	.short	0x0730
 801264c:	07071b1b 	.word	0x07071b1b
 8012650:	0c530707 	.word	0x0c530707
 8012654:	494e0c0c 	.word	0x494e0c0c
 8012658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801265c:	3104      	adds	r1, #4
 801265e:	f7ff bfc3 	b.w	80125e8 <uxr_serialize_DATAWRITER_Representation>
 8012662:	7909      	ldrb	r1, [r1, #4]
 8012664:	f7f8 fa96 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012668:	b1e8      	cbz	r0, 80126a6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801266a:	7923      	ldrb	r3, [r4, #4]
 801266c:	2b01      	cmp	r3, #1
 801266e:	d001      	beq.n	8012674 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012670:	2b02      	cmp	r3, #2
 8012672:	d13d      	bne.n	80126f0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012674:	68a1      	ldr	r1, [r4, #8]
 8012676:	4628      	mov	r0, r5
 8012678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801267c:	f004 bf82 	b.w	8017584 <ucdr_serialize_string>
 8012680:	7909      	ldrb	r1, [r1, #4]
 8012682:	f7f8 fa87 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012686:	4606      	mov	r6, r0
 8012688:	b120      	cbz	r0, 8012694 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801268a:	7923      	ldrb	r3, [r4, #4]
 801268c:	2b02      	cmp	r3, #2
 801268e:	d039      	beq.n	8012704 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012690:	2b03      	cmp	r3, #3
 8012692:	d02f      	beq.n	80126f4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012694:	2202      	movs	r2, #2
 8012696:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801269a:	4628      	mov	r0, r5
 801269c:	f7fc fffa 	bl	800f694 <ucdr_serialize_array_uint8_t>
 80126a0:	4030      	ands	r0, r6
 80126a2:	b2c0      	uxtb	r0, r0
 80126a4:	bd70      	pop	{r4, r5, r6, pc}
 80126a6:	2000      	movs	r0, #0
 80126a8:	bd70      	pop	{r4, r5, r6, pc}
 80126aa:	7909      	ldrb	r1, [r1, #4]
 80126ac:	f7f8 fa72 	bl	800ab94 <ucdr_serialize_uint8_t>
 80126b0:	4606      	mov	r6, r0
 80126b2:	b158      	cbz	r0, 80126cc <uxr_serialize_ObjectVariant.part.0+0x94>
 80126b4:	7923      	ldrb	r3, [r4, #4]
 80126b6:	2b02      	cmp	r3, #2
 80126b8:	d003      	beq.n	80126c2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80126ba:	2b03      	cmp	r3, #3
 80126bc:	d028      	beq.n	8012710 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80126be:	2b01      	cmp	r3, #1
 80126c0:	d104      	bne.n	80126cc <uxr_serialize_ObjectVariant.part.0+0x94>
 80126c2:	68a1      	ldr	r1, [r4, #8]
 80126c4:	4628      	mov	r0, r5
 80126c6:	f004 ff5d 	bl	8017584 <ucdr_serialize_string>
 80126ca:	4606      	mov	r6, r0
 80126cc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80126d0:	4628      	mov	r0, r5
 80126d2:	f7f8 ff9b 	bl	800b60c <ucdr_serialize_int16_t>
 80126d6:	4030      	ands	r0, r6
 80126d8:	b2c0      	uxtb	r0, r0
 80126da:	bd70      	pop	{r4, r5, r6, pc}
 80126dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126e0:	3104      	adds	r1, #4
 80126e2:	f7ff be7b 	b.w	80123dc <uxr_serialize_CLIENT_Representation>
 80126e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126ea:	3104      	adds	r1, #4
 80126ec:	f7ff bf32 	b.w	8012554 <uxr_serialize_AGENT_Representation>
 80126f0:	2001      	movs	r0, #1
 80126f2:	bd70      	pop	{r4, r5, r6, pc}
 80126f4:	68a2      	ldr	r2, [r4, #8]
 80126f6:	f104 010c 	add.w	r1, r4, #12
 80126fa:	4628      	mov	r0, r5
 80126fc:	f7fd f968 	bl	800f9d0 <ucdr_serialize_sequence_uint8_t>
 8012700:	4606      	mov	r6, r0
 8012702:	e7c7      	b.n	8012694 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012704:	68a1      	ldr	r1, [r4, #8]
 8012706:	4628      	mov	r0, r5
 8012708:	f004 ff3c 	bl	8017584 <ucdr_serialize_string>
 801270c:	4606      	mov	r6, r0
 801270e:	e7c1      	b.n	8012694 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012710:	68a2      	ldr	r2, [r4, #8]
 8012712:	f104 010c 	add.w	r1, r4, #12
 8012716:	4628      	mov	r0, r5
 8012718:	f7fd f95a 	bl	800f9d0 <ucdr_serialize_sequence_uint8_t>
 801271c:	4606      	mov	r6, r0
 801271e:	e7d5      	b.n	80126cc <uxr_serialize_ObjectVariant.part.0+0x94>

08012720 <uxr_deserialize_DATAWRITER_Representation>:
 8012720:	b570      	push	{r4, r5, r6, lr}
 8012722:	4606      	mov	r6, r0
 8012724:	460d      	mov	r5, r1
 8012726:	f7f8 fa4b 	bl	800abc0 <ucdr_deserialize_uint8_t>
 801272a:	4604      	mov	r4, r0
 801272c:	b130      	cbz	r0, 801273c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801272e:	782b      	ldrb	r3, [r5, #0]
 8012730:	2b02      	cmp	r3, #2
 8012732:	d00c      	beq.n	801274e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012734:	2b03      	cmp	r3, #3
 8012736:	d012      	beq.n	801275e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012738:	2b01      	cmp	r3, #1
 801273a:	d008      	beq.n	801274e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801273c:	2202      	movs	r2, #2
 801273e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012742:	4630      	mov	r0, r6
 8012744:	f7fd f80a 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012748:	4020      	ands	r0, r4
 801274a:	b2c0      	uxtb	r0, r0
 801274c:	bd70      	pop	{r4, r5, r6, pc}
 801274e:	6869      	ldr	r1, [r5, #4]
 8012750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012754:	4630      	mov	r0, r6
 8012756:	f004 ff25 	bl	80175a4 <ucdr_deserialize_string>
 801275a:	4604      	mov	r4, r0
 801275c:	e7ee      	b.n	801273c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801275e:	1d2b      	adds	r3, r5, #4
 8012760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012764:	f105 0108 	add.w	r1, r5, #8
 8012768:	4630      	mov	r0, r6
 801276a:	f7fd f943 	bl	800f9f4 <ucdr_deserialize_sequence_uint8_t>
 801276e:	4604      	mov	r4, r0
 8012770:	e7e4      	b.n	801273c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012772:	bf00      	nop

08012774 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012774:	b570      	push	{r4, r5, r6, lr}
 8012776:	460d      	mov	r5, r1
 8012778:	7809      	ldrb	r1, [r1, #0]
 801277a:	4606      	mov	r6, r0
 801277c:	f7f8 f9dc 	bl	800ab38 <ucdr_serialize_bool>
 8012780:	782b      	ldrb	r3, [r5, #0]
 8012782:	4604      	mov	r4, r0
 8012784:	b94b      	cbnz	r3, 801279a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012786:	7a29      	ldrb	r1, [r5, #8]
 8012788:	4630      	mov	r0, r6
 801278a:	f7f8 f9d5 	bl	800ab38 <ucdr_serialize_bool>
 801278e:	7a2b      	ldrb	r3, [r5, #8]
 8012790:	4004      	ands	r4, r0
 8012792:	b2e4      	uxtb	r4, r4
 8012794:	b943      	cbnz	r3, 80127a8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012796:	4620      	mov	r0, r4
 8012798:	bd70      	pop	{r4, r5, r6, pc}
 801279a:	6869      	ldr	r1, [r5, #4]
 801279c:	4630      	mov	r0, r6
 801279e:	f004 fef1 	bl	8017584 <ucdr_serialize_string>
 80127a2:	4004      	ands	r4, r0
 80127a4:	b2e4      	uxtb	r4, r4
 80127a6:	e7ee      	b.n	8012786 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80127a8:	68e9      	ldr	r1, [r5, #12]
 80127aa:	4630      	mov	r0, r6
 80127ac:	f004 feea 	bl	8017584 <ucdr_serialize_string>
 80127b0:	4004      	ands	r4, r0
 80127b2:	4620      	mov	r0, r4
 80127b4:	bd70      	pop	{r4, r5, r6, pc}
 80127b6:	bf00      	nop

080127b8 <uxr_serialize_OBJK_Topic_Binary>:
 80127b8:	b570      	push	{r4, r5, r6, lr}
 80127ba:	460d      	mov	r5, r1
 80127bc:	6809      	ldr	r1, [r1, #0]
 80127be:	4606      	mov	r6, r0
 80127c0:	f004 fee0 	bl	8017584 <ucdr_serialize_string>
 80127c4:	7929      	ldrb	r1, [r5, #4]
 80127c6:	4604      	mov	r4, r0
 80127c8:	4630      	mov	r0, r6
 80127ca:	f7f8 f9b5 	bl	800ab38 <ucdr_serialize_bool>
 80127ce:	792b      	ldrb	r3, [r5, #4]
 80127d0:	4004      	ands	r4, r0
 80127d2:	b2e4      	uxtb	r4, r4
 80127d4:	b943      	cbnz	r3, 80127e8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80127d6:	7b29      	ldrb	r1, [r5, #12]
 80127d8:	4630      	mov	r0, r6
 80127da:	f7f8 f9ad 	bl	800ab38 <ucdr_serialize_bool>
 80127de:	7b2b      	ldrb	r3, [r5, #12]
 80127e0:	4004      	ands	r4, r0
 80127e2:	b93b      	cbnz	r3, 80127f4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80127e4:	4620      	mov	r0, r4
 80127e6:	bd70      	pop	{r4, r5, r6, pc}
 80127e8:	68a9      	ldr	r1, [r5, #8]
 80127ea:	4630      	mov	r0, r6
 80127ec:	f004 feca 	bl	8017584 <ucdr_serialize_string>
 80127f0:	4004      	ands	r4, r0
 80127f2:	e7f0      	b.n	80127d6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80127f4:	6929      	ldr	r1, [r5, #16]
 80127f6:	4630      	mov	r0, r6
 80127f8:	f004 fec4 	bl	8017584 <ucdr_serialize_string>
 80127fc:	4004      	ands	r4, r0
 80127fe:	b2e4      	uxtb	r4, r4
 8012800:	4620      	mov	r0, r4
 8012802:	bd70      	pop	{r4, r5, r6, pc}

08012804 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012808:	460c      	mov	r4, r1
 801280a:	7809      	ldrb	r1, [r1, #0]
 801280c:	4606      	mov	r6, r0
 801280e:	f7f8 f993 	bl	800ab38 <ucdr_serialize_bool>
 8012812:	7823      	ldrb	r3, [r4, #0]
 8012814:	4605      	mov	r5, r0
 8012816:	b96b      	cbnz	r3, 8012834 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012818:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801281c:	4630      	mov	r0, r6
 801281e:	f7f8 f98b 	bl	800ab38 <ucdr_serialize_bool>
 8012822:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012826:	4005      	ands	r5, r0
 8012828:	b2ed      	uxtb	r5, r5
 801282a:	2b00      	cmp	r3, #0
 801282c:	d169      	bne.n	8012902 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801282e:	4628      	mov	r0, r5
 8012830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012834:	6861      	ldr	r1, [r4, #4]
 8012836:	4630      	mov	r0, r6
 8012838:	f7f8 fbc2 	bl	800afc0 <ucdr_serialize_uint32_t>
 801283c:	6863      	ldr	r3, [r4, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d06b      	beq.n	801291a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012842:	2800      	cmp	r0, #0
 8012844:	d067      	beq.n	8012916 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012846:	68a1      	ldr	r1, [r4, #8]
 8012848:	4630      	mov	r0, r6
 801284a:	f004 fe9b 	bl	8017584 <ucdr_serialize_string>
 801284e:	6863      	ldr	r3, [r4, #4]
 8012850:	2b01      	cmp	r3, #1
 8012852:	d953      	bls.n	80128fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012854:	2800      	cmp	r0, #0
 8012856:	d05e      	beq.n	8012916 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012858:	68e1      	ldr	r1, [r4, #12]
 801285a:	4630      	mov	r0, r6
 801285c:	f004 fe92 	bl	8017584 <ucdr_serialize_string>
 8012860:	6863      	ldr	r3, [r4, #4]
 8012862:	2b02      	cmp	r3, #2
 8012864:	d94a      	bls.n	80128fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012866:	2800      	cmp	r0, #0
 8012868:	d055      	beq.n	8012916 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801286a:	6921      	ldr	r1, [r4, #16]
 801286c:	4630      	mov	r0, r6
 801286e:	f004 fe89 	bl	8017584 <ucdr_serialize_string>
 8012872:	6863      	ldr	r3, [r4, #4]
 8012874:	2b03      	cmp	r3, #3
 8012876:	d941      	bls.n	80128fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012878:	2800      	cmp	r0, #0
 801287a:	d04c      	beq.n	8012916 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801287c:	6961      	ldr	r1, [r4, #20]
 801287e:	4630      	mov	r0, r6
 8012880:	f004 fe80 	bl	8017584 <ucdr_serialize_string>
 8012884:	6863      	ldr	r3, [r4, #4]
 8012886:	2b04      	cmp	r3, #4
 8012888:	d938      	bls.n	80128fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801288a:	2800      	cmp	r0, #0
 801288c:	d043      	beq.n	8012916 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801288e:	69a1      	ldr	r1, [r4, #24]
 8012890:	4630      	mov	r0, r6
 8012892:	f004 fe77 	bl	8017584 <ucdr_serialize_string>
 8012896:	6863      	ldr	r3, [r4, #4]
 8012898:	2b05      	cmp	r3, #5
 801289a:	d92f      	bls.n	80128fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801289c:	2800      	cmp	r0, #0
 801289e:	d03a      	beq.n	8012916 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128a0:	69e1      	ldr	r1, [r4, #28]
 80128a2:	4630      	mov	r0, r6
 80128a4:	f004 fe6e 	bl	8017584 <ucdr_serialize_string>
 80128a8:	6863      	ldr	r3, [r4, #4]
 80128aa:	2b06      	cmp	r3, #6
 80128ac:	d926      	bls.n	80128fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128ae:	b390      	cbz	r0, 8012916 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128b0:	6a21      	ldr	r1, [r4, #32]
 80128b2:	4630      	mov	r0, r6
 80128b4:	f004 fe66 	bl	8017584 <ucdr_serialize_string>
 80128b8:	6863      	ldr	r3, [r4, #4]
 80128ba:	2b07      	cmp	r3, #7
 80128bc:	d91e      	bls.n	80128fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128be:	b350      	cbz	r0, 8012916 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128c0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80128c2:	4630      	mov	r0, r6
 80128c4:	f004 fe5e 	bl	8017584 <ucdr_serialize_string>
 80128c8:	6863      	ldr	r3, [r4, #4]
 80128ca:	2b08      	cmp	r3, #8
 80128cc:	d916      	bls.n	80128fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128ce:	b310      	cbz	r0, 8012916 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128d0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80128d2:	4630      	mov	r0, r6
 80128d4:	f004 fe56 	bl	8017584 <ucdr_serialize_string>
 80128d8:	6863      	ldr	r3, [r4, #4]
 80128da:	2b09      	cmp	r3, #9
 80128dc:	d90e      	bls.n	80128fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128de:	b1d0      	cbz	r0, 8012916 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128e0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80128e4:	2709      	movs	r7, #9
 80128e6:	e000      	b.n	80128ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80128e8:	b1a8      	cbz	r0, 8012916 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128ea:	f858 1b04 	ldr.w	r1, [r8], #4
 80128ee:	4630      	mov	r0, r6
 80128f0:	f004 fe48 	bl	8017584 <ucdr_serialize_string>
 80128f4:	6862      	ldr	r2, [r4, #4]
 80128f6:	3701      	adds	r7, #1
 80128f8:	4297      	cmp	r7, r2
 80128fa:	d3f5      	bcc.n	80128e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80128fc:	4005      	ands	r5, r0
 80128fe:	b2ed      	uxtb	r5, r5
 8012900:	e78a      	b.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012902:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012904:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012908:	4630      	mov	r0, r6
 801290a:	f7fd f861 	bl	800f9d0 <ucdr_serialize_sequence_uint8_t>
 801290e:	4005      	ands	r5, r0
 8012910:	4628      	mov	r0, r5
 8012912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012916:	2500      	movs	r5, #0
 8012918:	e77e      	b.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801291a:	4028      	ands	r0, r5
 801291c:	b2c5      	uxtb	r5, r0
 801291e:	e77b      	b.n	8012818 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012920 <uxr_serialize_OBJK_Publisher_Binary>:
 8012920:	b570      	push	{r4, r5, r6, lr}
 8012922:	460d      	mov	r5, r1
 8012924:	7809      	ldrb	r1, [r1, #0]
 8012926:	4606      	mov	r6, r0
 8012928:	f7f8 f906 	bl	800ab38 <ucdr_serialize_bool>
 801292c:	782b      	ldrb	r3, [r5, #0]
 801292e:	4604      	mov	r4, r0
 8012930:	b94b      	cbnz	r3, 8012946 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012932:	7a29      	ldrb	r1, [r5, #8]
 8012934:	4630      	mov	r0, r6
 8012936:	f7f8 f8ff 	bl	800ab38 <ucdr_serialize_bool>
 801293a:	7a2b      	ldrb	r3, [r5, #8]
 801293c:	4004      	ands	r4, r0
 801293e:	b2e4      	uxtb	r4, r4
 8012940:	b943      	cbnz	r3, 8012954 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012942:	4620      	mov	r0, r4
 8012944:	bd70      	pop	{r4, r5, r6, pc}
 8012946:	6869      	ldr	r1, [r5, #4]
 8012948:	4630      	mov	r0, r6
 801294a:	f004 fe1b 	bl	8017584 <ucdr_serialize_string>
 801294e:	4004      	ands	r4, r0
 8012950:	b2e4      	uxtb	r4, r4
 8012952:	e7ee      	b.n	8012932 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012954:	f105 010c 	add.w	r1, r5, #12
 8012958:	4630      	mov	r0, r6
 801295a:	f7ff ff53 	bl	8012804 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801295e:	4004      	ands	r4, r0
 8012960:	4620      	mov	r0, r4
 8012962:	bd70      	pop	{r4, r5, r6, pc}

08012964 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012964:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012968:	4688      	mov	r8, r1
 801296a:	8809      	ldrh	r1, [r1, #0]
 801296c:	4681      	mov	r9, r0
 801296e:	f7f8 f93d 	bl	800abec <ucdr_serialize_uint16_t>
 8012972:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012976:	4606      	mov	r6, r0
 8012978:	4648      	mov	r0, r9
 801297a:	f7f8 f8dd 	bl	800ab38 <ucdr_serialize_bool>
 801297e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012982:	4006      	ands	r6, r0
 8012984:	b2f5      	uxtb	r5, r6
 8012986:	b9eb      	cbnz	r3, 80129c4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012988:	f898 1006 	ldrb.w	r1, [r8, #6]
 801298c:	4648      	mov	r0, r9
 801298e:	f7f8 f8d3 	bl	800ab38 <ucdr_serialize_bool>
 8012992:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012996:	4005      	ands	r5, r0
 8012998:	bb7b      	cbnz	r3, 80129fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801299a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801299e:	4648      	mov	r0, r9
 80129a0:	f7f8 f8ca 	bl	800ab38 <ucdr_serialize_bool>
 80129a4:	f898 300c 	ldrb.w	r3, [r8, #12]
 80129a8:	4005      	ands	r5, r0
 80129aa:	b9f3      	cbnz	r3, 80129ea <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80129ac:	f898 1014 	ldrb.w	r1, [r8, #20]
 80129b0:	4648      	mov	r0, r9
 80129b2:	f7f8 f8c1 	bl	800ab38 <ucdr_serialize_bool>
 80129b6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80129ba:	4005      	ands	r5, r0
 80129bc:	b94b      	cbnz	r3, 80129d2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80129be:	4628      	mov	r0, r5
 80129c0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80129c4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80129c8:	4648      	mov	r0, r9
 80129ca:	f7f8 f90f 	bl	800abec <ucdr_serialize_uint16_t>
 80129ce:	4005      	ands	r5, r0
 80129d0:	e7da      	b.n	8012988 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80129d2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80129d6:	f108 011c 	add.w	r1, r8, #28
 80129da:	4648      	mov	r0, r9
 80129dc:	f7fc fff8 	bl	800f9d0 <ucdr_serialize_sequence_uint8_t>
 80129e0:	4028      	ands	r0, r5
 80129e2:	b2c5      	uxtb	r5, r0
 80129e4:	4628      	mov	r0, r5
 80129e6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80129ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80129ee:	4648      	mov	r0, r9
 80129f0:	f7f8 fae6 	bl	800afc0 <ucdr_serialize_uint32_t>
 80129f4:	4028      	ands	r0, r5
 80129f6:	b2c5      	uxtb	r5, r0
 80129f8:	e7d8      	b.n	80129ac <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80129fa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80129fe:	4648      	mov	r0, r9
 8012a00:	f7f8 fade 	bl	800afc0 <ucdr_serialize_uint32_t>
 8012a04:	4028      	ands	r0, r5
 8012a06:	b2c5      	uxtb	r5, r0
 8012a08:	e7c7      	b.n	801299a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012a0a:	bf00      	nop

08012a0c <uxr_serialize_OBJK_DataWriter_Binary>:
 8012a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a0e:	2202      	movs	r2, #2
 8012a10:	460d      	mov	r5, r1
 8012a12:	4606      	mov	r6, r0
 8012a14:	f7fc fe3e 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012a18:	78a9      	ldrb	r1, [r5, #2]
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	f7f8 f88b 	bl	800ab38 <ucdr_serialize_bool>
 8012a22:	78ab      	ldrb	r3, [r5, #2]
 8012a24:	4004      	ands	r4, r0
 8012a26:	b2e4      	uxtb	r4, r4
 8012a28:	b90b      	cbnz	r3, 8012a2e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a2e:	f105 0108 	add.w	r1, r5, #8
 8012a32:	4630      	mov	r0, r6
 8012a34:	f7ff ff96 	bl	8012964 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012a38:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012a3c:	4607      	mov	r7, r0
 8012a3e:	4630      	mov	r0, r6
 8012a40:	f7f8 f87a 	bl	800ab38 <ucdr_serialize_bool>
 8012a44:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012a48:	4038      	ands	r0, r7
 8012a4a:	b2c7      	uxtb	r7, r0
 8012a4c:	b913      	cbnz	r3, 8012a54 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012a4e:	403c      	ands	r4, r7
 8012a50:	4620      	mov	r0, r4
 8012a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a54:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012a58:	4630      	mov	r0, r6
 8012a5a:	f7f8 fd07 	bl	800b46c <ucdr_serialize_uint64_t>
 8012a5e:	4007      	ands	r7, r0
 8012a60:	e7f5      	b.n	8012a4e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012a62:	bf00      	nop

08012a64 <uxr_serialize_OBJK_Replier_Binary>:
 8012a64:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8012a68:	460f      	mov	r7, r1
 8012a6a:	6809      	ldr	r1, [r1, #0]
 8012a6c:	4680      	mov	r8, r0
 8012a6e:	f004 fd89 	bl	8017584 <ucdr_serialize_string>
 8012a72:	6879      	ldr	r1, [r7, #4]
 8012a74:	4605      	mov	r5, r0
 8012a76:	4640      	mov	r0, r8
 8012a78:	f004 fd84 	bl	8017584 <ucdr_serialize_string>
 8012a7c:	68b9      	ldr	r1, [r7, #8]
 8012a7e:	4005      	ands	r5, r0
 8012a80:	4640      	mov	r0, r8
 8012a82:	f004 fd7f 	bl	8017584 <ucdr_serialize_string>
 8012a86:	b2ec      	uxtb	r4, r5
 8012a88:	4004      	ands	r4, r0
 8012a8a:	7b39      	ldrb	r1, [r7, #12]
 8012a8c:	4640      	mov	r0, r8
 8012a8e:	f7f8 f853 	bl	800ab38 <ucdr_serialize_bool>
 8012a92:	7b3b      	ldrb	r3, [r7, #12]
 8012a94:	4004      	ands	r4, r0
 8012a96:	b94b      	cbnz	r3, 8012aac <uxr_serialize_OBJK_Replier_Binary+0x48>
 8012a98:	7d39      	ldrb	r1, [r7, #20]
 8012a9a:	4640      	mov	r0, r8
 8012a9c:	f7f8 f84c 	bl	800ab38 <ucdr_serialize_bool>
 8012aa0:	7d3b      	ldrb	r3, [r7, #20]
 8012aa2:	4004      	ands	r4, r0
 8012aa4:	b943      	cbnz	r3, 8012ab8 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8012aa6:	4620      	mov	r0, r4
 8012aa8:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012aac:	6939      	ldr	r1, [r7, #16]
 8012aae:	4640      	mov	r0, r8
 8012ab0:	f004 fd68 	bl	8017584 <ucdr_serialize_string>
 8012ab4:	4004      	ands	r4, r0
 8012ab6:	e7ef      	b.n	8012a98 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8012ab8:	69b9      	ldr	r1, [r7, #24]
 8012aba:	4640      	mov	r0, r8
 8012abc:	f004 fd62 	bl	8017584 <ucdr_serialize_string>
 8012ac0:	4004      	ands	r4, r0
 8012ac2:	b2e4      	uxtb	r4, r4
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012aca:	bf00      	nop

08012acc <uxr_deserialize_ObjectVariant>:
 8012acc:	b570      	push	{r4, r5, r6, lr}
 8012ace:	4605      	mov	r5, r0
 8012ad0:	460e      	mov	r6, r1
 8012ad2:	f7f8 f875 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8012ad6:	b168      	cbz	r0, 8012af4 <uxr_deserialize_ObjectVariant+0x28>
 8012ad8:	7833      	ldrb	r3, [r6, #0]
 8012ada:	3b01      	subs	r3, #1
 8012adc:	4604      	mov	r4, r0
 8012ade:	2b0d      	cmp	r3, #13
 8012ae0:	d809      	bhi.n	8012af6 <uxr_deserialize_ObjectVariant+0x2a>
 8012ae2:	e8df f003 	tbb	[pc, r3]
 8012ae6:	0a41      	.short	0x0a41
 8012ae8:	0a0a2323 	.word	0x0a0a2323
 8012aec:	10080a0a 	.word	0x10080a0a
 8012af0:	565c1010 	.word	0x565c1010
 8012af4:	2400      	movs	r4, #0
 8012af6:	4620      	mov	r0, r4
 8012af8:	bd70      	pop	{r4, r5, r6, pc}
 8012afa:	1d31      	adds	r1, r6, #4
 8012afc:	4628      	mov	r0, r5
 8012afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b02:	f7ff be0d 	b.w	8012720 <uxr_deserialize_DATAWRITER_Representation>
 8012b06:	1d31      	adds	r1, r6, #4
 8012b08:	4628      	mov	r0, r5
 8012b0a:	f7f8 f859 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8012b0e:	2800      	cmp	r0, #0
 8012b10:	d0f0      	beq.n	8012af4 <uxr_deserialize_ObjectVariant+0x28>
 8012b12:	7933      	ldrb	r3, [r6, #4]
 8012b14:	2b01      	cmp	r3, #1
 8012b16:	d001      	beq.n	8012b1c <uxr_deserialize_ObjectVariant+0x50>
 8012b18:	2b02      	cmp	r3, #2
 8012b1a:	d1ec      	bne.n	8012af6 <uxr_deserialize_ObjectVariant+0x2a>
 8012b1c:	68b1      	ldr	r1, [r6, #8]
 8012b1e:	4628      	mov	r0, r5
 8012b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b28:	f004 bd3c 	b.w	80175a4 <ucdr_deserialize_string>
 8012b2c:	1d31      	adds	r1, r6, #4
 8012b2e:	4628      	mov	r0, r5
 8012b30:	f7f8 f846 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8012b34:	4604      	mov	r4, r0
 8012b36:	b170      	cbz	r0, 8012b56 <uxr_deserialize_ObjectVariant+0x8a>
 8012b38:	7933      	ldrb	r3, [r6, #4]
 8012b3a:	2b02      	cmp	r3, #2
 8012b3c:	d04c      	beq.n	8012bd8 <uxr_deserialize_ObjectVariant+0x10c>
 8012b3e:	2b03      	cmp	r3, #3
 8012b40:	d109      	bne.n	8012b56 <uxr_deserialize_ObjectVariant+0x8a>
 8012b42:	f106 0308 	add.w	r3, r6, #8
 8012b46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b4a:	f106 010c 	add.w	r1, r6, #12
 8012b4e:	4628      	mov	r0, r5
 8012b50:	f7fc ff50 	bl	800f9f4 <ucdr_deserialize_sequence_uint8_t>
 8012b54:	4604      	mov	r4, r0
 8012b56:	2202      	movs	r2, #2
 8012b58:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	f7fc fdfd 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012b62:	4020      	ands	r0, r4
 8012b64:	b2c4      	uxtb	r4, r0
 8012b66:	e7c6      	b.n	8012af6 <uxr_deserialize_ObjectVariant+0x2a>
 8012b68:	1d31      	adds	r1, r6, #4
 8012b6a:	4628      	mov	r0, r5
 8012b6c:	f7f8 f828 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8012b70:	4604      	mov	r4, r0
 8012b72:	b130      	cbz	r0, 8012b82 <uxr_deserialize_ObjectVariant+0xb6>
 8012b74:	7933      	ldrb	r3, [r6, #4]
 8012b76:	2b02      	cmp	r3, #2
 8012b78:	d036      	beq.n	8012be8 <uxr_deserialize_ObjectVariant+0x11c>
 8012b7a:	2b03      	cmp	r3, #3
 8012b7c:	d03c      	beq.n	8012bf8 <uxr_deserialize_ObjectVariant+0x12c>
 8012b7e:	2b01      	cmp	r3, #1
 8012b80:	d032      	beq.n	8012be8 <uxr_deserialize_ObjectVariant+0x11c>
 8012b82:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012b86:	4628      	mov	r0, r5
 8012b88:	f7f8 fdc0 	bl	800b70c <ucdr_deserialize_int16_t>
 8012b8c:	4020      	ands	r0, r4
 8012b8e:	b2c4      	uxtb	r4, r0
 8012b90:	e7b1      	b.n	8012af6 <uxr_deserialize_ObjectVariant+0x2a>
 8012b92:	1d31      	adds	r1, r6, #4
 8012b94:	4628      	mov	r0, r5
 8012b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b9a:	f7ff bc77 	b.w	801248c <uxr_deserialize_CLIENT_Representation>
 8012b9e:	2204      	movs	r2, #4
 8012ba0:	18b1      	adds	r1, r6, r2
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	f7fc fdda 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012ba8:	2202      	movs	r2, #2
 8012baa:	f106 0108 	add.w	r1, r6, #8
 8012bae:	4604      	mov	r4, r0
 8012bb0:	4628      	mov	r0, r5
 8012bb2:	f7fc fdd3 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012bb6:	2202      	movs	r2, #2
 8012bb8:	4004      	ands	r4, r0
 8012bba:	f106 010a 	add.w	r1, r6, #10
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	f7fc fdcc 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012bc4:	b2e4      	uxtb	r4, r4
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	f106 010c 	add.w	r1, r6, #12
 8012bcc:	4628      	mov	r0, r5
 8012bce:	401c      	ands	r4, r3
 8012bd0:	f7f7 ffc8 	bl	800ab64 <ucdr_deserialize_bool>
 8012bd4:	4004      	ands	r4, r0
 8012bd6:	e78e      	b.n	8012af6 <uxr_deserialize_ObjectVariant+0x2a>
 8012bd8:	68b1      	ldr	r1, [r6, #8]
 8012bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012bde:	4628      	mov	r0, r5
 8012be0:	f004 fce0 	bl	80175a4 <ucdr_deserialize_string>
 8012be4:	4604      	mov	r4, r0
 8012be6:	e7b6      	b.n	8012b56 <uxr_deserialize_ObjectVariant+0x8a>
 8012be8:	68b1      	ldr	r1, [r6, #8]
 8012bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012bee:	4628      	mov	r0, r5
 8012bf0:	f004 fcd8 	bl	80175a4 <ucdr_deserialize_string>
 8012bf4:	4604      	mov	r4, r0
 8012bf6:	e7c4      	b.n	8012b82 <uxr_deserialize_ObjectVariant+0xb6>
 8012bf8:	f106 0308 	add.w	r3, r6, #8
 8012bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012c00:	f106 010c 	add.w	r1, r6, #12
 8012c04:	4628      	mov	r0, r5
 8012c06:	f7fc fef5 	bl	800f9f4 <ucdr_deserialize_sequence_uint8_t>
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	e7b9      	b.n	8012b82 <uxr_deserialize_ObjectVariant+0xb6>
 8012c0e:	bf00      	nop

08012c10 <uxr_deserialize_BaseObjectRequest>:
 8012c10:	b570      	push	{r4, r5, r6, lr}
 8012c12:	2202      	movs	r2, #2
 8012c14:	4605      	mov	r5, r0
 8012c16:	460e      	mov	r6, r1
 8012c18:	f7fc fda0 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012c1c:	2202      	movs	r2, #2
 8012c1e:	4604      	mov	r4, r0
 8012c20:	18b1      	adds	r1, r6, r2
 8012c22:	4628      	mov	r0, r5
 8012c24:	f7fc fd9a 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012c28:	4020      	ands	r0, r4
 8012c2a:	b2c0      	uxtb	r0, r0
 8012c2c:	bd70      	pop	{r4, r5, r6, pc}
 8012c2e:	bf00      	nop

08012c30 <uxr_serialize_ActivityInfoVariant>:
 8012c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c34:	460d      	mov	r5, r1
 8012c36:	7809      	ldrb	r1, [r1, #0]
 8012c38:	4607      	mov	r7, r0
 8012c3a:	f7f7 ffab 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012c3e:	4681      	mov	r9, r0
 8012c40:	b138      	cbz	r0, 8012c52 <uxr_serialize_ActivityInfoVariant+0x22>
 8012c42:	782b      	ldrb	r3, [r5, #0]
 8012c44:	2b06      	cmp	r3, #6
 8012c46:	f000 8082 	beq.w	8012d4e <uxr_serialize_ActivityInfoVariant+0x11e>
 8012c4a:	2b0d      	cmp	r3, #13
 8012c4c:	d016      	beq.n	8012c7c <uxr_serialize_ActivityInfoVariant+0x4c>
 8012c4e:	2b05      	cmp	r3, #5
 8012c50:	d002      	beq.n	8012c58 <uxr_serialize_ActivityInfoVariant+0x28>
 8012c52:	4648      	mov	r0, r9
 8012c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c58:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012c5c:	4638      	mov	r0, r7
 8012c5e:	f7f8 fcd5 	bl	800b60c <ucdr_serialize_int16_t>
 8012c62:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012c66:	4681      	mov	r9, r0
 8012c68:	4638      	mov	r0, r7
 8012c6a:	f7f8 fbff 	bl	800b46c <ucdr_serialize_uint64_t>
 8012c6e:	ea09 0000 	and.w	r0, r9, r0
 8012c72:	fa5f f980 	uxtb.w	r9, r0
 8012c76:	4648      	mov	r0, r9
 8012c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c7c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012c80:	4638      	mov	r0, r7
 8012c82:	f7f8 fcc3 	bl	800b60c <ucdr_serialize_int16_t>
 8012c86:	68e9      	ldr	r1, [r5, #12]
 8012c88:	4681      	mov	r9, r0
 8012c8a:	4638      	mov	r0, r7
 8012c8c:	f7f8 f998 	bl	800afc0 <ucdr_serialize_uint32_t>
 8012c90:	68eb      	ldr	r3, [r5, #12]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d0eb      	beq.n	8012c6e <uxr_serialize_ActivityInfoVariant+0x3e>
 8012c96:	b320      	cbz	r0, 8012ce2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012c98:	f105 080c 	add.w	r8, r5, #12
 8012c9c:	2600      	movs	r6, #0
 8012c9e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012ca2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8012ca6:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8012caa:	4638      	mov	r0, r7
 8012cac:	f7f7 ff72 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d053      	beq.n	8012d5c <uxr_serialize_ActivityInfoVariant+0x12c>
 8012cb4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8012cb8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012cbc:	0074      	lsls	r4, r6, #1
 8012cbe:	00c9      	lsls	r1, r1, #3
 8012cc0:	2b03      	cmp	r3, #3
 8012cc2:	d854      	bhi.n	8012d6e <uxr_serialize_ActivityInfoVariant+0x13e>
 8012cc4:	e8df f003 	tbb	[pc, r3]
 8012cc8:	02102132 	.word	0x02102132
 8012ccc:	4441      	add	r1, r8
 8012cce:	4638      	mov	r0, r7
 8012cd0:	6889      	ldr	r1, [r1, #8]
 8012cd2:	f004 fc57 	bl	8017584 <ucdr_serialize_string>
 8012cd6:	68ea      	ldr	r2, [r5, #12]
 8012cd8:	3601      	adds	r6, #1
 8012cda:	4296      	cmp	r6, r2
 8012cdc:	d242      	bcs.n	8012d64 <uxr_serialize_ActivityInfoVariant+0x134>
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	d1dd      	bne.n	8012c9e <uxr_serialize_ActivityInfoVariant+0x6e>
 8012ce2:	f04f 0900 	mov.w	r9, #0
 8012ce6:	e7b4      	b.n	8012c52 <uxr_serialize_ActivityInfoVariant+0x22>
 8012ce8:	3108      	adds	r1, #8
 8012cea:	4441      	add	r1, r8
 8012cec:	2210      	movs	r2, #16
 8012cee:	4638      	mov	r0, r7
 8012cf0:	f7fc fcd0 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012cf4:	4434      	add	r4, r6
 8012cf6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012cfa:	4604      	mov	r4, r0
 8012cfc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012cfe:	4638      	mov	r0, r7
 8012d00:	f7f8 f95e 	bl	800afc0 <ucdr_serialize_uint32_t>
 8012d04:	4020      	ands	r0, r4
 8012d06:	b2c0      	uxtb	r0, r0
 8012d08:	e7e5      	b.n	8012cd6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012d0a:	3108      	adds	r1, #8
 8012d0c:	4441      	add	r1, r8
 8012d0e:	2204      	movs	r2, #4
 8012d10:	4638      	mov	r0, r7
 8012d12:	f7fc fcbf 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012d16:	4434      	add	r4, r6
 8012d18:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	8b19      	ldrh	r1, [r3, #24]
 8012d20:	4638      	mov	r0, r7
 8012d22:	f7f7 ff63 	bl	800abec <ucdr_serialize_uint16_t>
 8012d26:	4020      	ands	r0, r4
 8012d28:	b2c0      	uxtb	r0, r0
 8012d2a:	e7d4      	b.n	8012cd6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012d2c:	3108      	adds	r1, #8
 8012d2e:	4441      	add	r1, r8
 8012d30:	2202      	movs	r2, #2
 8012d32:	4638      	mov	r0, r7
 8012d34:	f7fc fcae 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012d38:	4434      	add	r4, r6
 8012d3a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012d3e:	4604      	mov	r4, r0
 8012d40:	7d99      	ldrb	r1, [r3, #22]
 8012d42:	4638      	mov	r0, r7
 8012d44:	f7f7 ff26 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012d48:	4020      	ands	r0, r4
 8012d4a:	b2c0      	uxtb	r0, r0
 8012d4c:	e7c3      	b.n	8012cd6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012d4e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012d52:	4638      	mov	r0, r7
 8012d54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d58:	f7f8 bc58 	b.w	800b60c <ucdr_serialize_int16_t>
 8012d5c:	68ea      	ldr	r2, [r5, #12]
 8012d5e:	3601      	adds	r6, #1
 8012d60:	42b2      	cmp	r2, r6
 8012d62:	d8be      	bhi.n	8012ce2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012d64:	ea09 0900 	and.w	r9, r9, r0
 8012d68:	fa5f f989 	uxtb.w	r9, r9
 8012d6c:	e771      	b.n	8012c52 <uxr_serialize_ActivityInfoVariant+0x22>
 8012d6e:	68eb      	ldr	r3, [r5, #12]
 8012d70:	3601      	adds	r6, #1
 8012d72:	429e      	cmp	r6, r3
 8012d74:	f10a 0a18 	add.w	sl, sl, #24
 8012d78:	d395      	bcc.n	8012ca6 <uxr_serialize_ActivityInfoVariant+0x76>
 8012d7a:	e76a      	b.n	8012c52 <uxr_serialize_ActivityInfoVariant+0x22>

08012d7c <uxr_deserialize_BaseObjectReply>:
 8012d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d80:	2202      	movs	r2, #2
 8012d82:	4606      	mov	r6, r0
 8012d84:	460f      	mov	r7, r1
 8012d86:	f7fc fce9 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012d8a:	2202      	movs	r2, #2
 8012d8c:	18b9      	adds	r1, r7, r2
 8012d8e:	4605      	mov	r5, r0
 8012d90:	4630      	mov	r0, r6
 8012d92:	f7fc fce3 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012d96:	1d39      	adds	r1, r7, #4
 8012d98:	4680      	mov	r8, r0
 8012d9a:	4630      	mov	r0, r6
 8012d9c:	f7f7 ff10 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8012da0:	1d79      	adds	r1, r7, #5
 8012da2:	4604      	mov	r4, r0
 8012da4:	4630      	mov	r0, r6
 8012da6:	f7f7 ff0b 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8012daa:	ea05 0508 	and.w	r5, r5, r8
 8012dae:	402c      	ands	r4, r5
 8012db0:	4020      	ands	r0, r4
 8012db2:	b2c0      	uxtb	r0, r0
 8012db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012db8 <uxr_serialize_ReadSpecification>:
 8012db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dbc:	460e      	mov	r6, r1
 8012dbe:	7809      	ldrb	r1, [r1, #0]
 8012dc0:	4607      	mov	r7, r0
 8012dc2:	f7f7 fee7 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012dc6:	7871      	ldrb	r1, [r6, #1]
 8012dc8:	4604      	mov	r4, r0
 8012dca:	4638      	mov	r0, r7
 8012dcc:	f7f7 fee2 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012dd0:	78b1      	ldrb	r1, [r6, #2]
 8012dd2:	4004      	ands	r4, r0
 8012dd4:	4638      	mov	r0, r7
 8012dd6:	f7f7 feaf 	bl	800ab38 <ucdr_serialize_bool>
 8012dda:	78b3      	ldrb	r3, [r6, #2]
 8012ddc:	b2e4      	uxtb	r4, r4
 8012dde:	4004      	ands	r4, r0
 8012de0:	b94b      	cbnz	r3, 8012df6 <uxr_serialize_ReadSpecification+0x3e>
 8012de2:	7a31      	ldrb	r1, [r6, #8]
 8012de4:	4638      	mov	r0, r7
 8012de6:	f7f7 fea7 	bl	800ab38 <ucdr_serialize_bool>
 8012dea:	7a33      	ldrb	r3, [r6, #8]
 8012dec:	4004      	ands	r4, r0
 8012dee:	b943      	cbnz	r3, 8012e02 <uxr_serialize_ReadSpecification+0x4a>
 8012df0:	4620      	mov	r0, r4
 8012df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df6:	6871      	ldr	r1, [r6, #4]
 8012df8:	4638      	mov	r0, r7
 8012dfa:	f004 fbc3 	bl	8017584 <ucdr_serialize_string>
 8012dfe:	4004      	ands	r4, r0
 8012e00:	e7ef      	b.n	8012de2 <uxr_serialize_ReadSpecification+0x2a>
 8012e02:	8971      	ldrh	r1, [r6, #10]
 8012e04:	4638      	mov	r0, r7
 8012e06:	f7f7 fef1 	bl	800abec <ucdr_serialize_uint16_t>
 8012e0a:	89b1      	ldrh	r1, [r6, #12]
 8012e0c:	4605      	mov	r5, r0
 8012e0e:	4638      	mov	r0, r7
 8012e10:	f7f7 feec 	bl	800abec <ucdr_serialize_uint16_t>
 8012e14:	89f1      	ldrh	r1, [r6, #14]
 8012e16:	4005      	ands	r5, r0
 8012e18:	4638      	mov	r0, r7
 8012e1a:	f7f7 fee7 	bl	800abec <ucdr_serialize_uint16_t>
 8012e1e:	8a31      	ldrh	r1, [r6, #16]
 8012e20:	4680      	mov	r8, r0
 8012e22:	4638      	mov	r0, r7
 8012e24:	f7f7 fee2 	bl	800abec <ucdr_serialize_uint16_t>
 8012e28:	b2ed      	uxtb	r5, r5
 8012e2a:	4025      	ands	r5, r4
 8012e2c:	ea08 0505 	and.w	r5, r8, r5
 8012e30:	ea00 0405 	and.w	r4, r0, r5
 8012e34:	4620      	mov	r0, r4
 8012e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e3a:	bf00      	nop

08012e3c <uxr_serialize_CREATE_CLIENT_Payload>:
 8012e3c:	f7ff bace 	b.w	80123dc <uxr_serialize_CLIENT_Representation>

08012e40 <uxr_serialize_CREATE_Payload>:
 8012e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e42:	2202      	movs	r2, #2
 8012e44:	4607      	mov	r7, r0
 8012e46:	460e      	mov	r6, r1
 8012e48:	f7fc fc24 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012e4c:	2202      	movs	r2, #2
 8012e4e:	18b1      	adds	r1, r6, r2
 8012e50:	4605      	mov	r5, r0
 8012e52:	4638      	mov	r0, r7
 8012e54:	f7fc fc1e 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012e58:	7931      	ldrb	r1, [r6, #4]
 8012e5a:	4604      	mov	r4, r0
 8012e5c:	4638      	mov	r0, r7
 8012e5e:	f7f7 fe99 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012e62:	b170      	cbz	r0, 8012e82 <uxr_serialize_CREATE_Payload+0x42>
 8012e64:	7933      	ldrb	r3, [r6, #4]
 8012e66:	402c      	ands	r4, r5
 8012e68:	3b01      	subs	r3, #1
 8012e6a:	b2e4      	uxtb	r4, r4
 8012e6c:	2b0d      	cmp	r3, #13
 8012e6e:	d809      	bhi.n	8012e84 <uxr_serialize_CREATE_Payload+0x44>
 8012e70:	e8df f003 	tbb	[pc, r3]
 8012e74:	23230a4c 	.word	0x23230a4c
 8012e78:	0a0a0a0a 	.word	0x0a0a0a0a
 8012e7c:	12121208 	.word	0x12121208
 8012e80:	3e45      	.short	0x3e45
 8012e82:	2400      	movs	r4, #0
 8012e84:	4620      	mov	r0, r4
 8012e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e88:	f106 0108 	add.w	r1, r6, #8
 8012e8c:	4638      	mov	r0, r7
 8012e8e:	f7ff fbab 	bl	80125e8 <uxr_serialize_DATAWRITER_Representation>
 8012e92:	4004      	ands	r4, r0
 8012e94:	4620      	mov	r0, r4
 8012e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e98:	7a31      	ldrb	r1, [r6, #8]
 8012e9a:	4638      	mov	r0, r7
 8012e9c:	f7f7 fe7a 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	d0ee      	beq.n	8012e82 <uxr_serialize_CREATE_Payload+0x42>
 8012ea4:	7a33      	ldrb	r3, [r6, #8]
 8012ea6:	2b01      	cmp	r3, #1
 8012ea8:	d001      	beq.n	8012eae <uxr_serialize_CREATE_Payload+0x6e>
 8012eaa:	2b02      	cmp	r3, #2
 8012eac:	d1ea      	bne.n	8012e84 <uxr_serialize_CREATE_Payload+0x44>
 8012eae:	68f1      	ldr	r1, [r6, #12]
 8012eb0:	4638      	mov	r0, r7
 8012eb2:	f004 fb67 	bl	8017584 <ucdr_serialize_string>
 8012eb6:	4004      	ands	r4, r0
 8012eb8:	e7e4      	b.n	8012e84 <uxr_serialize_CREATE_Payload+0x44>
 8012eba:	7a31      	ldrb	r1, [r6, #8]
 8012ebc:	4638      	mov	r0, r7
 8012ebe:	f7f7 fe69 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012ec2:	4605      	mov	r5, r0
 8012ec4:	b158      	cbz	r0, 8012ede <uxr_serialize_CREATE_Payload+0x9e>
 8012ec6:	7a33      	ldrb	r3, [r6, #8]
 8012ec8:	2b02      	cmp	r3, #2
 8012eca:	d034      	beq.n	8012f36 <uxr_serialize_CREATE_Payload+0xf6>
 8012ecc:	2b03      	cmp	r3, #3
 8012ece:	d106      	bne.n	8012ede <uxr_serialize_CREATE_Payload+0x9e>
 8012ed0:	68f2      	ldr	r2, [r6, #12]
 8012ed2:	f106 0110 	add.w	r1, r6, #16
 8012ed6:	4638      	mov	r0, r7
 8012ed8:	f7fc fd7a 	bl	800f9d0 <ucdr_serialize_sequence_uint8_t>
 8012edc:	4605      	mov	r5, r0
 8012ede:	2202      	movs	r2, #2
 8012ee0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8012ee4:	4638      	mov	r0, r7
 8012ee6:	f7fc fbd5 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012eea:	4028      	ands	r0, r5
 8012eec:	4004      	ands	r4, r0
 8012eee:	e7c9      	b.n	8012e84 <uxr_serialize_CREATE_Payload+0x44>
 8012ef0:	f106 0108 	add.w	r1, r6, #8
 8012ef4:	4638      	mov	r0, r7
 8012ef6:	f7ff fa71 	bl	80123dc <uxr_serialize_CLIENT_Representation>
 8012efa:	4004      	ands	r4, r0
 8012efc:	e7c2      	b.n	8012e84 <uxr_serialize_CREATE_Payload+0x44>
 8012efe:	f106 0108 	add.w	r1, r6, #8
 8012f02:	4638      	mov	r0, r7
 8012f04:	f7ff fb26 	bl	8012554 <uxr_serialize_AGENT_Representation>
 8012f08:	4004      	ands	r4, r0
 8012f0a:	e7bb      	b.n	8012e84 <uxr_serialize_CREATE_Payload+0x44>
 8012f0c:	7a31      	ldrb	r1, [r6, #8]
 8012f0e:	4638      	mov	r0, r7
 8012f10:	f7f7 fe40 	bl	800ab94 <ucdr_serialize_uint8_t>
 8012f14:	4605      	mov	r5, r0
 8012f16:	b130      	cbz	r0, 8012f26 <uxr_serialize_CREATE_Payload+0xe6>
 8012f18:	7a33      	ldrb	r3, [r6, #8]
 8012f1a:	2b02      	cmp	r3, #2
 8012f1c:	d011      	beq.n	8012f42 <uxr_serialize_CREATE_Payload+0x102>
 8012f1e:	2b03      	cmp	r3, #3
 8012f20:	d015      	beq.n	8012f4e <uxr_serialize_CREATE_Payload+0x10e>
 8012f22:	2b01      	cmp	r3, #1
 8012f24:	d00d      	beq.n	8012f42 <uxr_serialize_CREATE_Payload+0x102>
 8012f26:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8012f2a:	4638      	mov	r0, r7
 8012f2c:	f7f8 fb6e 	bl	800b60c <ucdr_serialize_int16_t>
 8012f30:	4028      	ands	r0, r5
 8012f32:	4004      	ands	r4, r0
 8012f34:	e7a6      	b.n	8012e84 <uxr_serialize_CREATE_Payload+0x44>
 8012f36:	68f1      	ldr	r1, [r6, #12]
 8012f38:	4638      	mov	r0, r7
 8012f3a:	f004 fb23 	bl	8017584 <ucdr_serialize_string>
 8012f3e:	4605      	mov	r5, r0
 8012f40:	e7cd      	b.n	8012ede <uxr_serialize_CREATE_Payload+0x9e>
 8012f42:	68f1      	ldr	r1, [r6, #12]
 8012f44:	4638      	mov	r0, r7
 8012f46:	f004 fb1d 	bl	8017584 <ucdr_serialize_string>
 8012f4a:	4605      	mov	r5, r0
 8012f4c:	e7eb      	b.n	8012f26 <uxr_serialize_CREATE_Payload+0xe6>
 8012f4e:	68f2      	ldr	r2, [r6, #12]
 8012f50:	f106 0110 	add.w	r1, r6, #16
 8012f54:	4638      	mov	r0, r7
 8012f56:	f7fc fd3b 	bl	800f9d0 <ucdr_serialize_sequence_uint8_t>
 8012f5a:	4605      	mov	r5, r0
 8012f5c:	e7e3      	b.n	8012f26 <uxr_serialize_CREATE_Payload+0xe6>
 8012f5e:	bf00      	nop

08012f60 <uxr_deserialize_GET_INFO_Payload>:
 8012f60:	b570      	push	{r4, r5, r6, lr}
 8012f62:	2202      	movs	r2, #2
 8012f64:	4605      	mov	r5, r0
 8012f66:	460e      	mov	r6, r1
 8012f68:	f7fc fbf8 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012f6c:	2202      	movs	r2, #2
 8012f6e:	18b1      	adds	r1, r6, r2
 8012f70:	4604      	mov	r4, r0
 8012f72:	4628      	mov	r0, r5
 8012f74:	f7fc fbf2 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012f78:	1d31      	adds	r1, r6, #4
 8012f7a:	4004      	ands	r4, r0
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f7f8 f94f 	bl	800b220 <ucdr_deserialize_uint32_t>
 8012f82:	b2e4      	uxtb	r4, r4
 8012f84:	4020      	ands	r0, r4
 8012f86:	bd70      	pop	{r4, r5, r6, pc}

08012f88 <uxr_serialize_DELETE_Payload>:
 8012f88:	b570      	push	{r4, r5, r6, lr}
 8012f8a:	2202      	movs	r2, #2
 8012f8c:	4605      	mov	r5, r0
 8012f8e:	460e      	mov	r6, r1
 8012f90:	f7fc fb80 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012f94:	2202      	movs	r2, #2
 8012f96:	4604      	mov	r4, r0
 8012f98:	18b1      	adds	r1, r6, r2
 8012f9a:	4628      	mov	r0, r5
 8012f9c:	f7fc fb7a 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8012fa0:	4020      	ands	r0, r4
 8012fa2:	b2c0      	uxtb	r0, r0
 8012fa4:	bd70      	pop	{r4, r5, r6, pc}
 8012fa6:	bf00      	nop

08012fa8 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fac:	4605      	mov	r5, r0
 8012fae:	460e      	mov	r6, r1
 8012fb0:	f7f7 fe06 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8012fb4:	1c71      	adds	r1, r6, #1
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	4628      	mov	r0, r5
 8012fba:	f7f7 fe01 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8012fbe:	2204      	movs	r2, #4
 8012fc0:	18b1      	adds	r1, r6, r2
 8012fc2:	4680      	mov	r8, r0
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	f7fc fbc9 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012fca:	f106 0108 	add.w	r1, r6, #8
 8012fce:	4607      	mov	r7, r0
 8012fd0:	2202      	movs	r2, #2
 8012fd2:	4628      	mov	r0, r5
 8012fd4:	f7fc fbc2 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012fd8:	ea04 0308 	and.w	r3, r4, r8
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	ea03 0407 	and.w	r4, r3, r7
 8012fe2:	2202      	movs	r2, #2
 8012fe4:	4607      	mov	r7, r0
 8012fe6:	f106 010a 	add.w	r1, r6, #10
 8012fea:	4628      	mov	r0, r5
 8012fec:	f7fc fbb6 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8012ff0:	f106 010c 	add.w	r1, r6, #12
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	461d      	mov	r5, r3
 8012ffa:	f7f7 fdb3 	bl	800ab64 <ucdr_deserialize_bool>
 8012ffe:	403c      	ands	r4, r7
 8013000:	4025      	ands	r5, r4
 8013002:	4028      	ands	r0, r5
 8013004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013008 <uxr_deserialize_STATUS_Payload>:
 8013008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801300c:	2202      	movs	r2, #2
 801300e:	4606      	mov	r6, r0
 8013010:	460f      	mov	r7, r1
 8013012:	f7fc fba3 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8013016:	2202      	movs	r2, #2
 8013018:	18b9      	adds	r1, r7, r2
 801301a:	4605      	mov	r5, r0
 801301c:	4630      	mov	r0, r6
 801301e:	f7fc fb9d 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8013022:	1d39      	adds	r1, r7, #4
 8013024:	4680      	mov	r8, r0
 8013026:	4630      	mov	r0, r6
 8013028:	f7f7 fdca 	bl	800abc0 <ucdr_deserialize_uint8_t>
 801302c:	1d79      	adds	r1, r7, #5
 801302e:	4604      	mov	r4, r0
 8013030:	4630      	mov	r0, r6
 8013032:	f7f7 fdc5 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8013036:	ea05 0508 	and.w	r5, r5, r8
 801303a:	402c      	ands	r4, r5
 801303c:	4020      	ands	r0, r4
 801303e:	b2c0      	uxtb	r0, r0
 8013040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013044 <uxr_serialize_INFO_Payload>:
 8013044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013048:	2202      	movs	r2, #2
 801304a:	460c      	mov	r4, r1
 801304c:	4605      	mov	r5, r0
 801304e:	f7fc fb21 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8013052:	2202      	movs	r2, #2
 8013054:	18a1      	adds	r1, r4, r2
 8013056:	4680      	mov	r8, r0
 8013058:	4628      	mov	r0, r5
 801305a:	f7fc fb1b 	bl	800f694 <ucdr_serialize_array_uint8_t>
 801305e:	7921      	ldrb	r1, [r4, #4]
 8013060:	4607      	mov	r7, r0
 8013062:	4628      	mov	r0, r5
 8013064:	f7f7 fd96 	bl	800ab94 <ucdr_serialize_uint8_t>
 8013068:	7961      	ldrb	r1, [r4, #5]
 801306a:	4606      	mov	r6, r0
 801306c:	4628      	mov	r0, r5
 801306e:	f7f7 fd91 	bl	800ab94 <ucdr_serialize_uint8_t>
 8013072:	ea08 0807 	and.w	r8, r8, r7
 8013076:	ea06 0608 	and.w	r6, r6, r8
 801307a:	4006      	ands	r6, r0
 801307c:	7a21      	ldrb	r1, [r4, #8]
 801307e:	4628      	mov	r0, r5
 8013080:	f7f7 fd5a 	bl	800ab38 <ucdr_serialize_bool>
 8013084:	7a23      	ldrb	r3, [r4, #8]
 8013086:	b2f7      	uxtb	r7, r6
 8013088:	4606      	mov	r6, r0
 801308a:	b96b      	cbnz	r3, 80130a8 <uxr_serialize_INFO_Payload+0x64>
 801308c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013090:	4628      	mov	r0, r5
 8013092:	f7f7 fd51 	bl	800ab38 <ucdr_serialize_bool>
 8013096:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801309a:	4030      	ands	r0, r6
 801309c:	b2c6      	uxtb	r6, r0
 801309e:	b983      	cbnz	r3, 80130c2 <uxr_serialize_INFO_Payload+0x7e>
 80130a0:	ea06 0007 	and.w	r0, r6, r7
 80130a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130a8:	7b21      	ldrb	r1, [r4, #12]
 80130aa:	4628      	mov	r0, r5
 80130ac:	f7f7 fd72 	bl	800ab94 <ucdr_serialize_uint8_t>
 80130b0:	b188      	cbz	r0, 80130d6 <uxr_serialize_INFO_Payload+0x92>
 80130b2:	f104 010c 	add.w	r1, r4, #12
 80130b6:	4628      	mov	r0, r5
 80130b8:	f7ff fabe 	bl	8012638 <uxr_serialize_ObjectVariant.part.0>
 80130bc:	4030      	ands	r0, r6
 80130be:	b2c6      	uxtb	r6, r0
 80130c0:	e7e4      	b.n	801308c <uxr_serialize_INFO_Payload+0x48>
 80130c2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80130c6:	4628      	mov	r0, r5
 80130c8:	f7ff fdb2 	bl	8012c30 <uxr_serialize_ActivityInfoVariant>
 80130cc:	4006      	ands	r6, r0
 80130ce:	ea06 0007 	and.w	r0, r6, r7
 80130d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130d6:	4606      	mov	r6, r0
 80130d8:	e7d8      	b.n	801308c <uxr_serialize_INFO_Payload+0x48>
 80130da:	bf00      	nop

080130dc <uxr_serialize_READ_DATA_Payload>:
 80130dc:	b570      	push	{r4, r5, r6, lr}
 80130de:	2202      	movs	r2, #2
 80130e0:	4605      	mov	r5, r0
 80130e2:	460e      	mov	r6, r1
 80130e4:	f7fc fad6 	bl	800f694 <ucdr_serialize_array_uint8_t>
 80130e8:	2202      	movs	r2, #2
 80130ea:	18b1      	adds	r1, r6, r2
 80130ec:	4604      	mov	r4, r0
 80130ee:	4628      	mov	r0, r5
 80130f0:	f7fc fad0 	bl	800f694 <ucdr_serialize_array_uint8_t>
 80130f4:	1d31      	adds	r1, r6, #4
 80130f6:	4004      	ands	r4, r0
 80130f8:	4628      	mov	r0, r5
 80130fa:	f7ff fe5d 	bl	8012db8 <uxr_serialize_ReadSpecification>
 80130fe:	b2e4      	uxtb	r4, r4
 8013100:	4020      	ands	r0, r4
 8013102:	bd70      	pop	{r4, r5, r6, pc}

08013104 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013104:	b570      	push	{r4, r5, r6, lr}
 8013106:	2202      	movs	r2, #2
 8013108:	4605      	mov	r5, r0
 801310a:	460e      	mov	r6, r1
 801310c:	f7fc fac2 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8013110:	2202      	movs	r2, #2
 8013112:	4604      	mov	r4, r0
 8013114:	18b1      	adds	r1, r6, r2
 8013116:	4628      	mov	r0, r5
 8013118:	f7fc fabc 	bl	800f694 <ucdr_serialize_array_uint8_t>
 801311c:	4020      	ands	r0, r4
 801311e:	b2c0      	uxtb	r0, r0
 8013120:	bd70      	pop	{r4, r5, r6, pc}
 8013122:	bf00      	nop

08013124 <uxr_serialize_ACKNACK_Payload>:
 8013124:	b570      	push	{r4, r5, r6, lr}
 8013126:	460c      	mov	r4, r1
 8013128:	460e      	mov	r6, r1
 801312a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801312e:	4605      	mov	r5, r0
 8013130:	f7f7 fd5c 	bl	800abec <ucdr_serialize_uint16_t>
 8013134:	2202      	movs	r2, #2
 8013136:	4621      	mov	r1, r4
 8013138:	4604      	mov	r4, r0
 801313a:	4628      	mov	r0, r5
 801313c:	f7fc faaa 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8013140:	7931      	ldrb	r1, [r6, #4]
 8013142:	4004      	ands	r4, r0
 8013144:	4628      	mov	r0, r5
 8013146:	f7f7 fd25 	bl	800ab94 <ucdr_serialize_uint8_t>
 801314a:	b2e4      	uxtb	r4, r4
 801314c:	4020      	ands	r0, r4
 801314e:	bd70      	pop	{r4, r5, r6, pc}

08013150 <uxr_deserialize_ACKNACK_Payload>:
 8013150:	b570      	push	{r4, r5, r6, lr}
 8013152:	4605      	mov	r5, r0
 8013154:	460e      	mov	r6, r1
 8013156:	f7f7 fe49 	bl	800adec <ucdr_deserialize_uint16_t>
 801315a:	2202      	movs	r2, #2
 801315c:	18b1      	adds	r1, r6, r2
 801315e:	4604      	mov	r4, r0
 8013160:	4628      	mov	r0, r5
 8013162:	f7fc fafb 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8013166:	1d31      	adds	r1, r6, #4
 8013168:	4004      	ands	r4, r0
 801316a:	4628      	mov	r0, r5
 801316c:	f7f7 fd28 	bl	800abc0 <ucdr_deserialize_uint8_t>
 8013170:	b2e4      	uxtb	r4, r4
 8013172:	4020      	ands	r0, r4
 8013174:	bd70      	pop	{r4, r5, r6, pc}
 8013176:	bf00      	nop

08013178 <uxr_serialize_HEARTBEAT_Payload>:
 8013178:	b570      	push	{r4, r5, r6, lr}
 801317a:	460d      	mov	r5, r1
 801317c:	8809      	ldrh	r1, [r1, #0]
 801317e:	4606      	mov	r6, r0
 8013180:	f7f7 fd34 	bl	800abec <ucdr_serialize_uint16_t>
 8013184:	8869      	ldrh	r1, [r5, #2]
 8013186:	4604      	mov	r4, r0
 8013188:	4630      	mov	r0, r6
 801318a:	f7f7 fd2f 	bl	800abec <ucdr_serialize_uint16_t>
 801318e:	7929      	ldrb	r1, [r5, #4]
 8013190:	4004      	ands	r4, r0
 8013192:	4630      	mov	r0, r6
 8013194:	f7f7 fcfe 	bl	800ab94 <ucdr_serialize_uint8_t>
 8013198:	b2e4      	uxtb	r4, r4
 801319a:	4020      	ands	r0, r4
 801319c:	bd70      	pop	{r4, r5, r6, pc}
 801319e:	bf00      	nop

080131a0 <uxr_deserialize_HEARTBEAT_Payload>:
 80131a0:	b570      	push	{r4, r5, r6, lr}
 80131a2:	4605      	mov	r5, r0
 80131a4:	460e      	mov	r6, r1
 80131a6:	f7f7 fe21 	bl	800adec <ucdr_deserialize_uint16_t>
 80131aa:	1cb1      	adds	r1, r6, #2
 80131ac:	4604      	mov	r4, r0
 80131ae:	4628      	mov	r0, r5
 80131b0:	f7f7 fe1c 	bl	800adec <ucdr_deserialize_uint16_t>
 80131b4:	1d31      	adds	r1, r6, #4
 80131b6:	4004      	ands	r4, r0
 80131b8:	4628      	mov	r0, r5
 80131ba:	f7f7 fd01 	bl	800abc0 <ucdr_deserialize_uint8_t>
 80131be:	b2e4      	uxtb	r4, r4
 80131c0:	4020      	ands	r0, r4
 80131c2:	bd70      	pop	{r4, r5, r6, pc}

080131c4 <uxr_serialize_TIMESTAMP_Payload>:
 80131c4:	b570      	push	{r4, r5, r6, lr}
 80131c6:	460d      	mov	r5, r1
 80131c8:	6809      	ldr	r1, [r1, #0]
 80131ca:	4606      	mov	r6, r0
 80131cc:	f7f8 fb12 	bl	800b7f4 <ucdr_serialize_int32_t>
 80131d0:	6869      	ldr	r1, [r5, #4]
 80131d2:	4604      	mov	r4, r0
 80131d4:	4630      	mov	r0, r6
 80131d6:	f7f7 fef3 	bl	800afc0 <ucdr_serialize_uint32_t>
 80131da:	4020      	ands	r0, r4
 80131dc:	b2c0      	uxtb	r0, r0
 80131de:	bd70      	pop	{r4, r5, r6, pc}

080131e0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80131e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131e4:	4605      	mov	r5, r0
 80131e6:	460e      	mov	r6, r1
 80131e8:	f7f8 fb9c 	bl	800b924 <ucdr_deserialize_int32_t>
 80131ec:	1d31      	adds	r1, r6, #4
 80131ee:	4607      	mov	r7, r0
 80131f0:	4628      	mov	r0, r5
 80131f2:	f7f8 f815 	bl	800b220 <ucdr_deserialize_uint32_t>
 80131f6:	f106 0108 	add.w	r1, r6, #8
 80131fa:	4680      	mov	r8, r0
 80131fc:	4628      	mov	r0, r5
 80131fe:	f7f8 fb91 	bl	800b924 <ucdr_deserialize_int32_t>
 8013202:	f106 010c 	add.w	r1, r6, #12
 8013206:	4604      	mov	r4, r0
 8013208:	4628      	mov	r0, r5
 801320a:	f7f8 f809 	bl	800b220 <ucdr_deserialize_uint32_t>
 801320e:	ea07 0708 	and.w	r7, r7, r8
 8013212:	403c      	ands	r4, r7
 8013214:	f106 0110 	add.w	r1, r6, #16
 8013218:	4004      	ands	r4, r0
 801321a:	4628      	mov	r0, r5
 801321c:	f7f8 fb82 	bl	800b924 <ucdr_deserialize_int32_t>
 8013220:	f106 0114 	add.w	r1, r6, #20
 8013224:	4607      	mov	r7, r0
 8013226:	4628      	mov	r0, r5
 8013228:	f7f7 fffa 	bl	800b220 <ucdr_deserialize_uint32_t>
 801322c:	b2e4      	uxtb	r4, r4
 801322e:	403c      	ands	r4, r7
 8013230:	4020      	ands	r0, r4
 8013232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013236:	bf00      	nop

08013238 <uxr_serialize_SampleIdentity>:
 8013238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801323c:	220c      	movs	r2, #12
 801323e:	4604      	mov	r4, r0
 8013240:	460d      	mov	r5, r1
 8013242:	f7fc fa27 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8013246:	2203      	movs	r2, #3
 8013248:	f105 010c 	add.w	r1, r5, #12
 801324c:	4607      	mov	r7, r0
 801324e:	4620      	mov	r0, r4
 8013250:	f7fc fa20 	bl	800f694 <ucdr_serialize_array_uint8_t>
 8013254:	7be9      	ldrb	r1, [r5, #15]
 8013256:	4680      	mov	r8, r0
 8013258:	4620      	mov	r0, r4
 801325a:	f7f7 fc9b 	bl	800ab94 <ucdr_serialize_uint8_t>
 801325e:	6929      	ldr	r1, [r5, #16]
 8013260:	4606      	mov	r6, r0
 8013262:	4620      	mov	r0, r4
 8013264:	f7f8 fac6 	bl	800b7f4 <ucdr_serialize_int32_t>
 8013268:	6969      	ldr	r1, [r5, #20]
 801326a:	4603      	mov	r3, r0
 801326c:	4620      	mov	r0, r4
 801326e:	ea07 0708 	and.w	r7, r7, r8
 8013272:	461c      	mov	r4, r3
 8013274:	f7f7 fea4 	bl	800afc0 <ucdr_serialize_uint32_t>
 8013278:	403e      	ands	r6, r7
 801327a:	4034      	ands	r4, r6
 801327c:	4020      	ands	r0, r4
 801327e:	b2c0      	uxtb	r0, r0
 8013280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013284 <uxr_deserialize_SampleIdentity>:
 8013284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013288:	220c      	movs	r2, #12
 801328a:	4604      	mov	r4, r0
 801328c:	460d      	mov	r5, r1
 801328e:	f7fc fa65 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8013292:	2203      	movs	r2, #3
 8013294:	f105 010c 	add.w	r1, r5, #12
 8013298:	4607      	mov	r7, r0
 801329a:	4620      	mov	r0, r4
 801329c:	f7fc fa5e 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 80132a0:	f105 010f 	add.w	r1, r5, #15
 80132a4:	4680      	mov	r8, r0
 80132a6:	4620      	mov	r0, r4
 80132a8:	f7f7 fc8a 	bl	800abc0 <ucdr_deserialize_uint8_t>
 80132ac:	f105 0110 	add.w	r1, r5, #16
 80132b0:	4606      	mov	r6, r0
 80132b2:	4620      	mov	r0, r4
 80132b4:	f7f8 fb36 	bl	800b924 <ucdr_deserialize_int32_t>
 80132b8:	f105 0114 	add.w	r1, r5, #20
 80132bc:	4603      	mov	r3, r0
 80132be:	4620      	mov	r0, r4
 80132c0:	ea07 0708 	and.w	r7, r7, r8
 80132c4:	461c      	mov	r4, r3
 80132c6:	f7f7 ffab 	bl	800b220 <ucdr_deserialize_uint32_t>
 80132ca:	403e      	ands	r6, r7
 80132cc:	4034      	ands	r4, r6
 80132ce:	4020      	ands	r0, r4
 80132d0:	b2c0      	uxtb	r0, r0
 80132d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d6:	bf00      	nop

080132d8 <rcl_client_get_rmw_handle>:
 80132d8:	b118      	cbz	r0, 80132e2 <rcl_client_get_rmw_handle+0xa>
 80132da:	6800      	ldr	r0, [r0, #0]
 80132dc:	b108      	cbz	r0, 80132e2 <rcl_client_get_rmw_handle+0xa>
 80132de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80132e2:	4770      	bx	lr

080132e4 <rcl_send_request>:
 80132e4:	b570      	push	{r4, r5, r6, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	b1e8      	cbz	r0, 8013326 <rcl_send_request+0x42>
 80132ea:	4604      	mov	r4, r0
 80132ec:	6800      	ldr	r0, [r0, #0]
 80132ee:	b1d0      	cbz	r0, 8013326 <rcl_send_request+0x42>
 80132f0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80132f4:	b1bb      	cbz	r3, 8013326 <rcl_send_request+0x42>
 80132f6:	460e      	mov	r6, r1
 80132f8:	b1d1      	cbz	r1, 8013330 <rcl_send_request+0x4c>
 80132fa:	4615      	mov	r5, r2
 80132fc:	b1c2      	cbz	r2, 8013330 <rcl_send_request+0x4c>
 80132fe:	2105      	movs	r1, #5
 8013300:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013304:	f002 fe58 	bl	8015fb8 <__atomic_load_8>
 8013308:	6823      	ldr	r3, [r4, #0]
 801330a:	e9c5 0100 	strd	r0, r1, [r5]
 801330e:	462a      	mov	r2, r5
 8013310:	4631      	mov	r1, r6
 8013312:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013316:	f003 fd43 	bl	8016da0 <rmw_send_request>
 801331a:	4606      	mov	r6, r0
 801331c:	b160      	cbz	r0, 8013338 <rcl_send_request+0x54>
 801331e:	2601      	movs	r6, #1
 8013320:	4630      	mov	r0, r6
 8013322:	b002      	add	sp, #8
 8013324:	bd70      	pop	{r4, r5, r6, pc}
 8013326:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801332a:	4630      	mov	r0, r6
 801332c:	b002      	add	sp, #8
 801332e:	bd70      	pop	{r4, r5, r6, pc}
 8013330:	260b      	movs	r6, #11
 8013332:	4630      	mov	r0, r6
 8013334:	b002      	add	sp, #8
 8013336:	bd70      	pop	{r4, r5, r6, pc}
 8013338:	6820      	ldr	r0, [r4, #0]
 801333a:	2105      	movs	r1, #5
 801333c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013340:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013344:	9100      	str	r1, [sp, #0]
 8013346:	f002 fea3 	bl	8016090 <__atomic_exchange_8>
 801334a:	4630      	mov	r0, r6
 801334c:	b002      	add	sp, #8
 801334e:	bd70      	pop	{r4, r5, r6, pc}

08013350 <rcl_take_response>:
 8013350:	b570      	push	{r4, r5, r6, lr}
 8013352:	468e      	mov	lr, r1
 8013354:	460c      	mov	r4, r1
 8013356:	4616      	mov	r6, r2
 8013358:	4605      	mov	r5, r0
 801335a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801335e:	b08c      	sub	sp, #48	@ 0x30
 8013360:	f10d 0c18 	add.w	ip, sp, #24
 8013364:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013368:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801336c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013370:	b35d      	cbz	r5, 80133ca <rcl_take_response+0x7a>
 8013372:	682b      	ldr	r3, [r5, #0]
 8013374:	b34b      	cbz	r3, 80133ca <rcl_take_response+0x7a>
 8013376:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801337a:	b330      	cbz	r0, 80133ca <rcl_take_response+0x7a>
 801337c:	b346      	cbz	r6, 80133d0 <rcl_take_response+0x80>
 801337e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80133d8 <rcl_take_response+0x88>
 8013382:	2300      	movs	r3, #0
 8013384:	f88d 3007 	strb.w	r3, [sp, #7]
 8013388:	4632      	mov	r2, r6
 801338a:	f10d 0307 	add.w	r3, sp, #7
 801338e:	a902      	add	r1, sp, #8
 8013390:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013394:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013398:	f003 fe0a 	bl	8016fb0 <rmw_take_response>
 801339c:	4605      	mov	r5, r0
 801339e:	b9c8      	cbnz	r0, 80133d4 <rcl_take_response+0x84>
 80133a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80133a4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80133a8:	2a00      	cmp	r2, #0
 80133aa:	bf08      	it	eq
 80133ac:	461d      	moveq	r5, r3
 80133ae:	f10d 0e18 	add.w	lr, sp, #24
 80133b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80133b6:	46a4      	mov	ip, r4
 80133b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80133bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80133c0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80133c4:	4628      	mov	r0, r5
 80133c6:	b00c      	add	sp, #48	@ 0x30
 80133c8:	bd70      	pop	{r4, r5, r6, pc}
 80133ca:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80133ce:	e7ee      	b.n	80133ae <rcl_take_response+0x5e>
 80133d0:	250b      	movs	r5, #11
 80133d2:	e7ec      	b.n	80133ae <rcl_take_response+0x5e>
 80133d4:	2501      	movs	r5, #1
 80133d6:	e7ea      	b.n	80133ae <rcl_take_response+0x5e>
	...

080133e0 <rcl_client_is_valid>:
 80133e0:	b130      	cbz	r0, 80133f0 <rcl_client_is_valid+0x10>
 80133e2:	6800      	ldr	r0, [r0, #0]
 80133e4:	b120      	cbz	r0, 80133f0 <rcl_client_is_valid+0x10>
 80133e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80133ea:	3800      	subs	r0, #0
 80133ec:	bf18      	it	ne
 80133ee:	2001      	movne	r0, #1
 80133f0:	4770      	bx	lr
 80133f2:	bf00      	nop

080133f4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80133f4:	280b      	cmp	r0, #11
 80133f6:	dc0d      	bgt.n	8013414 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	db09      	blt.n	8013410 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80133fc:	280b      	cmp	r0, #11
 80133fe:	d807      	bhi.n	8013410 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013400:	e8df f000 	tbb	[pc, r0]
 8013404:	07060607 	.word	0x07060607
 8013408:	06060606 	.word	0x06060606
 801340c:	07070606 	.word	0x07070606
 8013410:	2001      	movs	r0, #1
 8013412:	4770      	bx	lr
 8013414:	28cb      	cmp	r0, #203	@ 0xcb
 8013416:	bf18      	it	ne
 8013418:	2001      	movne	r0, #1
 801341a:	4770      	bx	lr

0801341c <rcl_get_zero_initialized_context>:
 801341c:	4a03      	ldr	r2, [pc, #12]	@ (801342c <rcl_get_zero_initialized_context+0x10>)
 801341e:	4603      	mov	r3, r0
 8013420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013424:	e883 0003 	stmia.w	r3, {r0, r1}
 8013428:	4618      	mov	r0, r3
 801342a:	4770      	bx	lr
 801342c:	0801b538 	.word	0x0801b538

08013430 <rcl_context_is_valid>:
 8013430:	b118      	cbz	r0, 801343a <rcl_context_is_valid+0xa>
 8013432:	6840      	ldr	r0, [r0, #4]
 8013434:	3800      	subs	r0, #0
 8013436:	bf18      	it	ne
 8013438:	2001      	movne	r0, #1
 801343a:	4770      	bx	lr

0801343c <__cleanup_context>:
 801343c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013440:	4606      	mov	r6, r0
 8013442:	6800      	ldr	r0, [r0, #0]
 8013444:	2300      	movs	r3, #0
 8013446:	6073      	str	r3, [r6, #4]
 8013448:	2800      	cmp	r0, #0
 801344a:	d049      	beq.n	80134e0 <__cleanup_context+0xa4>
 801344c:	6947      	ldr	r7, [r0, #20]
 801344e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013452:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8013456:	b137      	cbz	r7, 8013466 <__cleanup_context+0x2a>
 8013458:	3014      	adds	r0, #20
 801345a:	f7f8 ff55 	bl	800c308 <rcl_init_options_fini>
 801345e:	4607      	mov	r7, r0
 8013460:	2800      	cmp	r0, #0
 8013462:	d144      	bne.n	80134ee <__cleanup_context+0xb2>
 8013464:	6830      	ldr	r0, [r6, #0]
 8013466:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013468:	b143      	cbz	r3, 801347c <__cleanup_context+0x40>
 801346a:	3028      	adds	r0, #40	@ 0x28
 801346c:	f7fa fbb8 	bl	800dbe0 <rmw_context_fini>
 8013470:	b118      	cbz	r0, 801347a <__cleanup_context+0x3e>
 8013472:	2f00      	cmp	r7, #0
 8013474:	d03e      	beq.n	80134f4 <__cleanup_context+0xb8>
 8013476:	f7fa f8eb 	bl	800d650 <rcutils_reset_error>
 801347a:	6830      	ldr	r0, [r6, #0]
 801347c:	6a03      	ldr	r3, [r0, #32]
 801347e:	b1db      	cbz	r3, 80134b8 <__cleanup_context+0x7c>
 8013480:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013484:	2a01      	cmp	r2, #1
 8013486:	f17c 0100 	sbcs.w	r1, ip, #0
 801348a:	db11      	blt.n	80134b0 <__cleanup_context+0x74>
 801348c:	2400      	movs	r4, #0
 801348e:	4625      	mov	r5, r4
 8013490:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013494:	4649      	mov	r1, r9
 8013496:	b1b8      	cbz	r0, 80134c8 <__cleanup_context+0x8c>
 8013498:	47c0      	blx	r8
 801349a:	6833      	ldr	r3, [r6, #0]
 801349c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80134a0:	3401      	adds	r4, #1
 80134a2:	f145 0500 	adc.w	r5, r5, #0
 80134a6:	4294      	cmp	r4, r2
 80134a8:	eb75 010c 	sbcs.w	r1, r5, ip
 80134ac:	6a1b      	ldr	r3, [r3, #32]
 80134ae:	dbef      	blt.n	8013490 <__cleanup_context+0x54>
 80134b0:	4618      	mov	r0, r3
 80134b2:	4649      	mov	r1, r9
 80134b4:	47c0      	blx	r8
 80134b6:	6830      	ldr	r0, [r6, #0]
 80134b8:	4649      	mov	r1, r9
 80134ba:	47c0      	blx	r8
 80134bc:	2300      	movs	r3, #0
 80134be:	e9c6 3300 	strd	r3, r3, [r6]
 80134c2:	4638      	mov	r0, r7
 80134c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134c8:	3401      	adds	r4, #1
 80134ca:	f145 0500 	adc.w	r5, r5, #0
 80134ce:	4294      	cmp	r4, r2
 80134d0:	eb75 010c 	sbcs.w	r1, r5, ip
 80134d4:	dbdc      	blt.n	8013490 <__cleanup_context+0x54>
 80134d6:	4618      	mov	r0, r3
 80134d8:	4649      	mov	r1, r9
 80134da:	47c0      	blx	r8
 80134dc:	6830      	ldr	r0, [r6, #0]
 80134de:	e7eb      	b.n	80134b8 <__cleanup_context+0x7c>
 80134e0:	4607      	mov	r7, r0
 80134e2:	2300      	movs	r3, #0
 80134e4:	e9c6 3300 	strd	r3, r3, [r6]
 80134e8:	4638      	mov	r0, r7
 80134ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ee:	f7fa f8af 	bl	800d650 <rcutils_reset_error>
 80134f2:	e7b7      	b.n	8013464 <__cleanup_context+0x28>
 80134f4:	f7ff ff7e 	bl	80133f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80134f8:	4607      	mov	r7, r0
 80134fa:	e7bc      	b.n	8013476 <__cleanup_context+0x3a>

080134fc <rcl_init>:
 80134fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013500:	1e05      	subs	r5, r0, #0
 8013502:	b09e      	sub	sp, #120	@ 0x78
 8013504:	460e      	mov	r6, r1
 8013506:	4690      	mov	r8, r2
 8013508:	461f      	mov	r7, r3
 801350a:	f340 809c 	ble.w	8013646 <rcl_init+0x14a>
 801350e:	2900      	cmp	r1, #0
 8013510:	f000 809c 	beq.w	801364c <rcl_init+0x150>
 8013514:	f1a1 0e04 	sub.w	lr, r1, #4
 8013518:	f04f 0c00 	mov.w	ip, #0
 801351c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013520:	f10c 0c01 	add.w	ip, ip, #1
 8013524:	2c00      	cmp	r4, #0
 8013526:	f000 8091 	beq.w	801364c <rcl_init+0x150>
 801352a:	4565      	cmp	r5, ip
 801352c:	d1f6      	bne.n	801351c <rcl_init+0x20>
 801352e:	f1b8 0f00 	cmp.w	r8, #0
 8013532:	f000 808b 	beq.w	801364c <rcl_init+0x150>
 8013536:	f8d8 4000 	ldr.w	r4, [r8]
 801353a:	2c00      	cmp	r4, #0
 801353c:	f000 8086 	beq.w	801364c <rcl_init+0x150>
 8013540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013542:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8013546:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801354a:	6823      	ldr	r3, [r4, #0]
 801354c:	f8cc 3000 	str.w	r3, [ip]
 8013550:	a819      	add	r0, sp, #100	@ 0x64
 8013552:	f7fa f857 	bl	800d604 <rcutils_allocator_is_valid>
 8013556:	2800      	cmp	r0, #0
 8013558:	d078      	beq.n	801364c <rcl_init+0x150>
 801355a:	2f00      	cmp	r7, #0
 801355c:	d076      	beq.n	801364c <rcl_init+0x150>
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d178      	bne.n	8013656 <rcl_init+0x15a>
 8013564:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013568:	2178      	movs	r1, #120	@ 0x78
 801356a:	2001      	movs	r0, #1
 801356c:	4798      	blx	r3
 801356e:	4604      	mov	r4, r0
 8013570:	6038      	str	r0, [r7, #0]
 8013572:	2800      	cmp	r0, #0
 8013574:	f000 80b6 	beq.w	80136e4 <rcl_init+0x1e8>
 8013578:	a802      	add	r0, sp, #8
 801357a:	f003 f86d 	bl	8016658 <rmw_get_zero_initialized_context>
 801357e:	a902      	add	r1, sp, #8
 8013580:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013584:	2250      	movs	r2, #80	@ 0x50
 8013586:	ac19      	add	r4, sp, #100	@ 0x64
 8013588:	f005 ff3d 	bl	8019406 <memcpy>
 801358c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801358e:	f8d7 e000 	ldr.w	lr, [r7]
 8013592:	46f4      	mov	ip, lr
 8013594:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013598:	6823      	ldr	r3, [r4, #0]
 801359a:	f8cc 3000 	str.w	r3, [ip]
 801359e:	f10e 0114 	add.w	r1, lr, #20
 80135a2:	4640      	mov	r0, r8
 80135a4:	f7f8 feda 	bl	800c35c <rcl_init_options_copy>
 80135a8:	4604      	mov	r4, r0
 80135aa:	2800      	cmp	r0, #0
 80135ac:	d144      	bne.n	8013638 <rcl_init+0x13c>
 80135ae:	f8d7 9000 	ldr.w	r9, [r7]
 80135b2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80135b6:	f8c9 0020 	str.w	r0, [r9, #32]
 80135ba:	f8c9 5018 	str.w	r5, [r9, #24]
 80135be:	f8c9 801c 	str.w	r8, [r9, #28]
 80135c2:	2d00      	cmp	r5, #0
 80135c4:	d04e      	beq.n	8013664 <rcl_init+0x168>
 80135c6:	2e00      	cmp	r6, #0
 80135c8:	d04c      	beq.n	8013664 <rcl_init+0x168>
 80135ca:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80135ce:	2104      	movs	r1, #4
 80135d0:	4628      	mov	r0, r5
 80135d2:	4798      	blx	r3
 80135d4:	f8c9 0020 	str.w	r0, [r9, #32]
 80135d8:	f8d7 9000 	ldr.w	r9, [r7]
 80135dc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80135e0:	46ca      	mov	sl, r9
 80135e2:	b343      	cbz	r3, 8013636 <rcl_init+0x13a>
 80135e4:	2d01      	cmp	r5, #1
 80135e6:	f178 0300 	sbcs.w	r3, r8, #0
 80135ea:	db3b      	blt.n	8013664 <rcl_init+0x168>
 80135ec:	2400      	movs	r4, #0
 80135ee:	3e04      	subs	r6, #4
 80135f0:	46a1      	mov	r9, r4
 80135f2:	e00b      	b.n	801360c <rcl_init+0x110>
 80135f4:	6831      	ldr	r1, [r6, #0]
 80135f6:	f005 ff06 	bl	8019406 <memcpy>
 80135fa:	3401      	adds	r4, #1
 80135fc:	f149 0900 	adc.w	r9, r9, #0
 8013600:	45c8      	cmp	r8, r9
 8013602:	bf08      	it	eq
 8013604:	42a5      	cmpeq	r5, r4
 8013606:	d02b      	beq.n	8013660 <rcl_init+0x164>
 8013608:	f8d7 a000 	ldr.w	sl, [r7]
 801360c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013610:	f7ec fe10 	bl	8000234 <strlen>
 8013614:	1c42      	adds	r2, r0, #1
 8013616:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013618:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801361a:	f8da a020 	ldr.w	sl, [sl, #32]
 801361e:	9201      	str	r2, [sp, #4]
 8013620:	4610      	mov	r0, r2
 8013622:	4798      	blx	r3
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801362a:	6a1b      	ldr	r3, [r3, #32]
 801362c:	9a01      	ldr	r2, [sp, #4]
 801362e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013632:	2800      	cmp	r0, #0
 8013634:	d1de      	bne.n	80135f4 <rcl_init+0xf8>
 8013636:	240a      	movs	r4, #10
 8013638:	4638      	mov	r0, r7
 801363a:	f7ff feff 	bl	801343c <__cleanup_context>
 801363e:	4620      	mov	r0, r4
 8013640:	b01e      	add	sp, #120	@ 0x78
 8013642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013646:	2900      	cmp	r1, #0
 8013648:	f43f af71 	beq.w	801352e <rcl_init+0x32>
 801364c:	240b      	movs	r4, #11
 801364e:	4620      	mov	r0, r4
 8013650:	b01e      	add	sp, #120	@ 0x78
 8013652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013656:	2464      	movs	r4, #100	@ 0x64
 8013658:	4620      	mov	r0, r4
 801365a:	b01e      	add	sp, #120	@ 0x78
 801365c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013660:	f8d7 9000 	ldr.w	r9, [r7]
 8013664:	4926      	ldr	r1, [pc, #152]	@ (8013700 <rcl_init+0x204>)
 8013666:	680b      	ldr	r3, [r1, #0]
 8013668:	3301      	adds	r3, #1
 801366a:	d036      	beq.n	80136da <rcl_init+0x1de>
 801366c:	600b      	str	r3, [r1, #0]
 801366e:	461a      	mov	r2, r3
 8013670:	2400      	movs	r4, #0
 8013672:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013676:	607b      	str	r3, [r7, #4]
 8013678:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801367a:	3301      	adds	r3, #1
 801367c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8013680:	d034      	beq.n	80136ec <rcl_init+0x1f0>
 8013682:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8013686:	b93b      	cbnz	r3, 8013698 <rcl_init+0x19c>
 8013688:	3030      	adds	r0, #48	@ 0x30
 801368a:	f000 f83b 	bl	8013704 <rcl_get_localhost_only>
 801368e:	4604      	mov	r4, r0
 8013690:	2800      	cmp	r0, #0
 8013692:	d1d1      	bne.n	8013638 <rcl_init+0x13c>
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	6958      	ldr	r0, [r3, #20]
 8013698:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801369a:	aa18      	add	r2, sp, #96	@ 0x60
 801369c:	a917      	add	r1, sp, #92	@ 0x5c
 801369e:	f001 f925 	bl	80148ec <rcl_validate_enclave_name>
 80136a2:	4604      	mov	r4, r0
 80136a4:	2800      	cmp	r0, #0
 80136a6:	d1c7      	bne.n	8013638 <rcl_init+0x13c>
 80136a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80136aa:	b9eb      	cbnz	r3, 80136e8 <rcl_init+0x1ec>
 80136ac:	6839      	ldr	r1, [r7, #0]
 80136ae:	694b      	ldr	r3, [r1, #20]
 80136b0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80136b2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80136b6:	f000 fb3f 	bl	8013d38 <rcl_get_security_options_from_environment>
 80136ba:	4604      	mov	r4, r0
 80136bc:	2800      	cmp	r0, #0
 80136be:	d1bb      	bne.n	8013638 <rcl_init+0x13c>
 80136c0:	6839      	ldr	r1, [r7, #0]
 80136c2:	6948      	ldr	r0, [r1, #20]
 80136c4:	3128      	adds	r1, #40	@ 0x28
 80136c6:	3018      	adds	r0, #24
 80136c8:	f7fa f954 	bl	800d974 <rmw_init>
 80136cc:	4604      	mov	r4, r0
 80136ce:	2800      	cmp	r0, #0
 80136d0:	d0bd      	beq.n	801364e <rcl_init+0x152>
 80136d2:	f7ff fe8f 	bl	80133f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80136d6:	4604      	mov	r4, r0
 80136d8:	e7ae      	b.n	8013638 <rcl_init+0x13c>
 80136da:	2201      	movs	r2, #1
 80136dc:	461c      	mov	r4, r3
 80136de:	600a      	str	r2, [r1, #0]
 80136e0:	4613      	mov	r3, r2
 80136e2:	e7c6      	b.n	8013672 <rcl_init+0x176>
 80136e4:	240a      	movs	r4, #10
 80136e6:	e7b2      	b.n	801364e <rcl_init+0x152>
 80136e8:	2401      	movs	r4, #1
 80136ea:	e7a5      	b.n	8013638 <rcl_init+0x13c>
 80136ec:	3024      	adds	r0, #36	@ 0x24
 80136ee:	f004 fcc9 	bl	8018084 <rcl_get_default_domain_id>
 80136f2:	4604      	mov	r4, r0
 80136f4:	2800      	cmp	r0, #0
 80136f6:	d19f      	bne.n	8013638 <rcl_init+0x13c>
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	6958      	ldr	r0, [r3, #20]
 80136fc:	e7c1      	b.n	8013682 <rcl_init+0x186>
 80136fe:	bf00      	nop
 8013700:	2000b620 	.word	0x2000b620

08013704 <rcl_get_localhost_only>:
 8013704:	b510      	push	{r4, lr}
 8013706:	b082      	sub	sp, #8
 8013708:	2300      	movs	r3, #0
 801370a:	9301      	str	r3, [sp, #4]
 801370c:	b1b8      	cbz	r0, 801373e <rcl_get_localhost_only+0x3a>
 801370e:	4604      	mov	r4, r0
 8013710:	a901      	add	r1, sp, #4
 8013712:	480c      	ldr	r0, [pc, #48]	@ (8013744 <rcl_get_localhost_only+0x40>)
 8013714:	f002 fcf4 	bl	8016100 <rcutils_get_env>
 8013718:	b110      	cbz	r0, 8013720 <rcl_get_localhost_only+0x1c>
 801371a:	2001      	movs	r0, #1
 801371c:	b002      	add	sp, #8
 801371e:	bd10      	pop	{r4, pc}
 8013720:	9b01      	ldr	r3, [sp, #4]
 8013722:	b113      	cbz	r3, 801372a <rcl_get_localhost_only+0x26>
 8013724:	781a      	ldrb	r2, [r3, #0]
 8013726:	2a31      	cmp	r2, #49	@ 0x31
 8013728:	d004      	beq.n	8013734 <rcl_get_localhost_only+0x30>
 801372a:	2302      	movs	r3, #2
 801372c:	2000      	movs	r0, #0
 801372e:	7023      	strb	r3, [r4, #0]
 8013730:	b002      	add	sp, #8
 8013732:	bd10      	pop	{r4, pc}
 8013734:	785b      	ldrb	r3, [r3, #1]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d1f7      	bne.n	801372a <rcl_get_localhost_only+0x26>
 801373a:	2301      	movs	r3, #1
 801373c:	e7f6      	b.n	801372c <rcl_get_localhost_only+0x28>
 801373e:	200b      	movs	r0, #11
 8013740:	b002      	add	sp, #8
 8013742:	bd10      	pop	{r4, pc}
 8013744:	0801b540 	.word	0x0801b540

08013748 <rcl_get_zero_initialized_node>:
 8013748:	4a03      	ldr	r2, [pc, #12]	@ (8013758 <rcl_get_zero_initialized_node+0x10>)
 801374a:	4603      	mov	r3, r0
 801374c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013750:	e883 0003 	stmia.w	r3, {r0, r1}
 8013754:	4618      	mov	r0, r3
 8013756:	4770      	bx	lr
 8013758:	0801b55c 	.word	0x0801b55c

0801375c <rcl_node_init>:
 801375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013760:	b0a9      	sub	sp, #164	@ 0xa4
 8013762:	4604      	mov	r4, r0
 8013764:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8013768:	a823      	add	r0, sp, #140	@ 0x8c
 801376a:	460e      	mov	r6, r1
 801376c:	4615      	mov	r5, r2
 801376e:	461f      	mov	r7, r3
 8013770:	f004 fefc 	bl	801856c <rcl_guard_condition_get_default_options>
 8013774:	f1b8 0f00 	cmp.w	r8, #0
 8013778:	f000 80e6 	beq.w	8013948 <rcl_node_init+0x1ec>
 801377c:	4640      	mov	r0, r8
 801377e:	f7f9 ff41 	bl	800d604 <rcutils_allocator_is_valid>
 8013782:	2800      	cmp	r0, #0
 8013784:	f000 80e0 	beq.w	8013948 <rcl_node_init+0x1ec>
 8013788:	2e00      	cmp	r6, #0
 801378a:	f000 80dd 	beq.w	8013948 <rcl_node_init+0x1ec>
 801378e:	2d00      	cmp	r5, #0
 8013790:	f000 80da 	beq.w	8013948 <rcl_node_init+0x1ec>
 8013794:	2c00      	cmp	r4, #0
 8013796:	f000 80d7 	beq.w	8013948 <rcl_node_init+0x1ec>
 801379a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801379e:	f1b9 0f00 	cmp.w	r9, #0
 80137a2:	f040 80fd 	bne.w	80139a0 <rcl_node_init+0x244>
 80137a6:	2f00      	cmp	r7, #0
 80137a8:	f000 80ce 	beq.w	8013948 <rcl_node_init+0x1ec>
 80137ac:	4638      	mov	r0, r7
 80137ae:	f7ff fe3f 	bl	8013430 <rcl_context_is_valid>
 80137b2:	4682      	mov	sl, r0
 80137b4:	2800      	cmp	r0, #0
 80137b6:	f000 80cd 	beq.w	8013954 <rcl_node_init+0x1f8>
 80137ba:	464a      	mov	r2, r9
 80137bc:	a922      	add	r1, sp, #136	@ 0x88
 80137be:	4630      	mov	r0, r6
 80137c0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80137c4:	f003 f8c6 	bl	8016954 <rmw_validate_node_name>
 80137c8:	4681      	mov	r9, r0
 80137ca:	2800      	cmp	r0, #0
 80137cc:	f040 80be 	bne.w	801394c <rcl_node_init+0x1f0>
 80137d0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80137d2:	2800      	cmp	r0, #0
 80137d4:	f040 80f0 	bne.w	80139b8 <rcl_node_init+0x25c>
 80137d8:	4628      	mov	r0, r5
 80137da:	f7ec fd2b 	bl	8000234 <strlen>
 80137de:	2800      	cmp	r0, #0
 80137e0:	f040 80bb 	bne.w	801395a <rcl_node_init+0x1fe>
 80137e4:	4d7c      	ldr	r5, [pc, #496]	@ (80139d8 <rcl_node_init+0x27c>)
 80137e6:	a922      	add	r1, sp, #136	@ 0x88
 80137e8:	2200      	movs	r2, #0
 80137ea:	4628      	mov	r0, r5
 80137ec:	f003 f894 	bl	8016918 <rmw_validate_namespace>
 80137f0:	4681      	mov	r9, r0
 80137f2:	2800      	cmp	r0, #0
 80137f4:	f040 80aa 	bne.w	801394c <rcl_node_init+0x1f0>
 80137f8:	4682      	mov	sl, r0
 80137fa:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80137fc:	2800      	cmp	r0, #0
 80137fe:	f040 80e0 	bne.w	80139c2 <rcl_node_init+0x266>
 8013802:	f8d8 3000 	ldr.w	r3, [r8]
 8013806:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801380a:	2078      	movs	r0, #120	@ 0x78
 801380c:	4798      	blx	r3
 801380e:	4681      	mov	r9, r0
 8013810:	6060      	str	r0, [r4, #4]
 8013812:	2800      	cmp	r0, #0
 8013814:	f000 80ca 	beq.w	80139ac <rcl_node_init+0x250>
 8013818:	2200      	movs	r2, #0
 801381a:	2300      	movs	r3, #0
 801381c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8013820:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8013824:	a808      	add	r0, sp, #32
 8013826:	f000 f907 	bl	8013a38 <rcl_node_get_default_options>
 801382a:	a908      	add	r1, sp, #32
 801382c:	4648      	mov	r0, r9
 801382e:	2268      	movs	r2, #104	@ 0x68
 8013830:	f005 fde9 	bl	8019406 <memcpy>
 8013834:	6861      	ldr	r1, [r4, #4]
 8013836:	6027      	str	r7, [r4, #0]
 8013838:	4640      	mov	r0, r8
 801383a:	f000 f90b 	bl	8013a54 <rcl_node_options_copy>
 801383e:	2800      	cmp	r0, #0
 8013840:	d158      	bne.n	80138f4 <rcl_node_init+0x198>
 8013842:	4628      	mov	r0, r5
 8013844:	f7ec fcf6 	bl	8000234 <strlen>
 8013848:	4428      	add	r0, r5
 801384a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801384e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013852:	2b2f      	cmp	r3, #47	@ 0x2f
 8013854:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013858:	9300      	str	r3, [sp, #0]
 801385a:	bf0c      	ite	eq
 801385c:	4b5f      	ldreq	r3, [pc, #380]	@ (80139dc <rcl_node_init+0x280>)
 801385e:	4b60      	ldrne	r3, [pc, #384]	@ (80139e0 <rcl_node_init+0x284>)
 8013860:	9302      	str	r3, [sp, #8]
 8013862:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013866:	9301      	str	r3, [sp, #4]
 8013868:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801386c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013870:	f002 fc6e 	bl	8016150 <rcutils_format_string_limit>
 8013874:	6823      	ldr	r3, [r4, #0]
 8013876:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801387a:	6818      	ldr	r0, [r3, #0]
 801387c:	4631      	mov	r1, r6
 801387e:	3028      	adds	r0, #40	@ 0x28
 8013880:	462a      	mov	r2, r5
 8013882:	6866      	ldr	r6, [r4, #4]
 8013884:	f7fa fa58 	bl	800dd38 <rmw_create_node>
 8013888:	6863      	ldr	r3, [r4, #4]
 801388a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801388c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801388e:	2800      	cmp	r0, #0
 8013890:	d032      	beq.n	80138f8 <rcl_node_init+0x19c>
 8013892:	f7fa fae5 	bl	800de60 <rmw_node_get_graph_guard_condition>
 8013896:	4681      	mov	r9, r0
 8013898:	b360      	cbz	r0, 80138f4 <rcl_node_init+0x198>
 801389a:	f8d8 3000 	ldr.w	r3, [r8]
 801389e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80138a2:	6866      	ldr	r6, [r4, #4]
 80138a4:	2008      	movs	r0, #8
 80138a6:	4798      	blx	r3
 80138a8:	6863      	ldr	r3, [r4, #4]
 80138aa:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80138ac:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80138b0:	f1bb 0f00 	cmp.w	fp, #0
 80138b4:	d020      	beq.n	80138f8 <rcl_node_init+0x19c>
 80138b6:	a806      	add	r0, sp, #24
 80138b8:	f004 fd7c 	bl	80183b4 <rcl_get_zero_initialized_guard_condition>
 80138bc:	a806      	add	r0, sp, #24
 80138be:	c803      	ldmia	r0, {r0, r1}
 80138c0:	6863      	ldr	r3, [r4, #4]
 80138c2:	46c4      	mov	ip, r8
 80138c4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80138c8:	e88b 0003 	stmia.w	fp, {r0, r1}
 80138cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80138d0:	ae23      	add	r6, sp, #140	@ 0x8c
 80138d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80138d4:	f8dc 3000 	ldr.w	r3, [ip]
 80138d8:	6033      	str	r3, [r6, #0]
 80138da:	ab28      	add	r3, sp, #160	@ 0xa0
 80138dc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80138e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80138e4:	4649      	mov	r1, r9
 80138e6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80138e8:	463a      	mov	r2, r7
 80138ea:	4670      	mov	r0, lr
 80138ec:	f004 fdb8 	bl	8018460 <rcl_guard_condition_init_from_rmw>
 80138f0:	4681      	mov	r9, r0
 80138f2:	b328      	cbz	r0, 8013940 <rcl_node_init+0x1e4>
 80138f4:	6863      	ldr	r3, [r4, #4]
 80138f6:	b1f3      	cbz	r3, 8013936 <rcl_node_init+0x1da>
 80138f8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80138fa:	b128      	cbz	r0, 8013908 <rcl_node_init+0x1ac>
 80138fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013900:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013904:	4798      	blx	r3
 8013906:	6863      	ldr	r3, [r4, #4]
 8013908:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801390a:	b110      	cbz	r0, 8013912 <rcl_node_init+0x1b6>
 801390c:	f7fa fa2c 	bl	800dd68 <rmw_destroy_node>
 8013910:	6863      	ldr	r3, [r4, #4]
 8013912:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013914:	b148      	cbz	r0, 801392a <rcl_node_init+0x1ce>
 8013916:	f004 fe03 	bl	8018520 <rcl_guard_condition_fini>
 801391a:	6863      	ldr	r3, [r4, #4]
 801391c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013920:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013922:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013926:	4798      	blx	r3
 8013928:	6863      	ldr	r3, [r4, #4]
 801392a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801392e:	4618      	mov	r0, r3
 8013930:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013934:	4798      	blx	r3
 8013936:	2300      	movs	r3, #0
 8013938:	e9c4 3300 	strd	r3, r3, [r4]
 801393c:	f04f 0901 	mov.w	r9, #1
 8013940:	f1ba 0f00 	cmp.w	sl, #0
 8013944:	d125      	bne.n	8013992 <rcl_node_init+0x236>
 8013946:	e001      	b.n	801394c <rcl_node_init+0x1f0>
 8013948:	f04f 090b 	mov.w	r9, #11
 801394c:	4648      	mov	r0, r9
 801394e:	b029      	add	sp, #164	@ 0xa4
 8013950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013954:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8013958:	e7f8      	b.n	801394c <rcl_node_init+0x1f0>
 801395a:	782b      	ldrb	r3, [r5, #0]
 801395c:	2b2f      	cmp	r3, #47	@ 0x2f
 801395e:	f43f af42 	beq.w	80137e6 <rcl_node_init+0x8a>
 8013962:	9503      	str	r5, [sp, #12]
 8013964:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013968:	9300      	str	r3, [sp, #0]
 801396a:	4b1e      	ldr	r3, [pc, #120]	@ (80139e4 <rcl_node_init+0x288>)
 801396c:	9302      	str	r3, [sp, #8]
 801396e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013972:	9301      	str	r3, [sp, #4]
 8013974:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013978:	f002 fbea 	bl	8016150 <rcutils_format_string_limit>
 801397c:	4605      	mov	r5, r0
 801397e:	b340      	cbz	r0, 80139d2 <rcl_node_init+0x276>
 8013980:	2200      	movs	r2, #0
 8013982:	a922      	add	r1, sp, #136	@ 0x88
 8013984:	9222      	str	r2, [sp, #136]	@ 0x88
 8013986:	f002 ffc7 	bl	8016918 <rmw_validate_namespace>
 801398a:	4681      	mov	r9, r0
 801398c:	2800      	cmp	r0, #0
 801398e:	f43f af34 	beq.w	80137fa <rcl_node_init+0x9e>
 8013992:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013996:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801399a:	4628      	mov	r0, r5
 801399c:	4798      	blx	r3
 801399e:	e7d5      	b.n	801394c <rcl_node_init+0x1f0>
 80139a0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80139a4:	4648      	mov	r0, r9
 80139a6:	b029      	add	sp, #164	@ 0xa4
 80139a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ac:	f04f 090a 	mov.w	r9, #10
 80139b0:	f1ba 0f00 	cmp.w	sl, #0
 80139b4:	d1ed      	bne.n	8013992 <rcl_node_init+0x236>
 80139b6:	e7c9      	b.n	801394c <rcl_node_init+0x1f0>
 80139b8:	f003 f81e 	bl	80169f8 <rmw_node_name_validation_result_string>
 80139bc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80139c0:	e7c4      	b.n	801394c <rcl_node_init+0x1f0>
 80139c2:	f002 ffbb 	bl	801693c <rmw_namespace_validation_result_string>
 80139c6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80139ca:	f1ba 0f00 	cmp.w	sl, #0
 80139ce:	d1e0      	bne.n	8013992 <rcl_node_init+0x236>
 80139d0:	e7bc      	b.n	801394c <rcl_node_init+0x1f0>
 80139d2:	f04f 090a 	mov.w	r9, #10
 80139d6:	e7b9      	b.n	801394c <rcl_node_init+0x1f0>
 80139d8:	0801b034 	.word	0x0801b034
 80139dc:	0801b05c 	.word	0x0801b05c
 80139e0:	0801b038 	.word	0x0801b038
 80139e4:	0801b558 	.word	0x0801b558

080139e8 <rcl_node_is_valid>:
 80139e8:	b130      	cbz	r0, 80139f8 <rcl_node_is_valid+0x10>
 80139ea:	6843      	ldr	r3, [r0, #4]
 80139ec:	b123      	cbz	r3, 80139f8 <rcl_node_is_valid+0x10>
 80139ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80139f0:	b113      	cbz	r3, 80139f8 <rcl_node_is_valid+0x10>
 80139f2:	6800      	ldr	r0, [r0, #0]
 80139f4:	f7ff bd1c 	b.w	8013430 <rcl_context_is_valid>
 80139f8:	2000      	movs	r0, #0
 80139fa:	4770      	bx	lr

080139fc <rcl_node_get_name>:
 80139fc:	b120      	cbz	r0, 8013a08 <rcl_node_get_name+0xc>
 80139fe:	6840      	ldr	r0, [r0, #4]
 8013a00:	b110      	cbz	r0, 8013a08 <rcl_node_get_name+0xc>
 8013a02:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013a04:	b100      	cbz	r0, 8013a08 <rcl_node_get_name+0xc>
 8013a06:	6880      	ldr	r0, [r0, #8]
 8013a08:	4770      	bx	lr
 8013a0a:	bf00      	nop

08013a0c <rcl_node_get_namespace>:
 8013a0c:	b120      	cbz	r0, 8013a18 <rcl_node_get_namespace+0xc>
 8013a0e:	6840      	ldr	r0, [r0, #4]
 8013a10:	b110      	cbz	r0, 8013a18 <rcl_node_get_namespace+0xc>
 8013a12:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013a14:	b100      	cbz	r0, 8013a18 <rcl_node_get_namespace+0xc>
 8013a16:	68c0      	ldr	r0, [r0, #12]
 8013a18:	4770      	bx	lr
 8013a1a:	bf00      	nop

08013a1c <rcl_node_get_options>:
 8013a1c:	b128      	cbz	r0, 8013a2a <rcl_node_get_options+0xe>
 8013a1e:	6840      	ldr	r0, [r0, #4]
 8013a20:	b118      	cbz	r0, 8013a2a <rcl_node_get_options+0xe>
 8013a22:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	bf08      	it	eq
 8013a28:	2000      	moveq	r0, #0
 8013a2a:	4770      	bx	lr

08013a2c <rcl_node_get_rmw_handle>:
 8013a2c:	b110      	cbz	r0, 8013a34 <rcl_node_get_rmw_handle+0x8>
 8013a2e:	6840      	ldr	r0, [r0, #4]
 8013a30:	b100      	cbz	r0, 8013a34 <rcl_node_get_rmw_handle+0x8>
 8013a32:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop

08013a38 <rcl_node_get_default_options>:
 8013a38:	b510      	push	{r4, lr}
 8013a3a:	2268      	movs	r2, #104	@ 0x68
 8013a3c:	4604      	mov	r4, r0
 8013a3e:	2100      	movs	r1, #0
 8013a40:	f005 fc18 	bl	8019274 <memset>
 8013a44:	4620      	mov	r0, r4
 8013a46:	f7f9 fdcf 	bl	800d5e8 <rcutils_get_default_allocator>
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	7523      	strb	r3, [r4, #20]
 8013a4e:	4620      	mov	r0, r4
 8013a50:	bd10      	pop	{r4, pc}
 8013a52:	bf00      	nop

08013a54 <rcl_node_options_copy>:
 8013a54:	b1d0      	cbz	r0, 8013a8c <rcl_node_options_copy+0x38>
 8013a56:	b570      	push	{r4, r5, r6, lr}
 8013a58:	460c      	mov	r4, r1
 8013a5a:	b1a9      	cbz	r1, 8013a88 <rcl_node_options_copy+0x34>
 8013a5c:	4288      	cmp	r0, r1
 8013a5e:	4684      	mov	ip, r0
 8013a60:	d012      	beq.n	8013a88 <rcl_node_options_copy+0x34>
 8013a62:	4605      	mov	r5, r0
 8013a64:	8a86      	ldrh	r6, [r0, #20]
 8013a66:	468e      	mov	lr, r1
 8013a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a6e:	682b      	ldr	r3, [r5, #0]
 8013a70:	f8ce 3000 	str.w	r3, [lr]
 8013a74:	f10c 0118 	add.w	r1, ip, #24
 8013a78:	2250      	movs	r2, #80	@ 0x50
 8013a7a:	82a6      	strh	r6, [r4, #20]
 8013a7c:	f104 0018 	add.w	r0, r4, #24
 8013a80:	f005 fcc1 	bl	8019406 <memcpy>
 8013a84:	2000      	movs	r0, #0
 8013a86:	bd70      	pop	{r4, r5, r6, pc}
 8013a88:	200b      	movs	r0, #11
 8013a8a:	bd70      	pop	{r4, r5, r6, pc}
 8013a8c:	200b      	movs	r0, #11
 8013a8e:	4770      	bx	lr

08013a90 <rcl_node_resolve_name>:
 8013a90:	b082      	sub	sp, #8
 8013a92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a96:	b091      	sub	sp, #68	@ 0x44
 8013a98:	ac1a      	add	r4, sp, #104	@ 0x68
 8013a9a:	e884 000c 	stmia.w	r4, {r2, r3}
 8013a9e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013aa2:	2800      	cmp	r0, #0
 8013aa4:	d03b      	beq.n	8013b1e <rcl_node_resolve_name+0x8e>
 8013aa6:	460c      	mov	r4, r1
 8013aa8:	4605      	mov	r5, r0
 8013aaa:	f7ff ffb7 	bl	8013a1c <rcl_node_get_options>
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d037      	beq.n	8013b22 <rcl_node_resolve_name+0x92>
 8013ab2:	4628      	mov	r0, r5
 8013ab4:	f7ff ffa2 	bl	80139fc <rcl_node_get_name>
 8013ab8:	4606      	mov	r6, r0
 8013aba:	4628      	mov	r0, r5
 8013abc:	f7ff ffa6 	bl	8013a0c <rcl_node_get_namespace>
 8013ac0:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013ac4:	4681      	mov	r9, r0
 8013ac6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013aca:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013acc:	46ac      	mov	ip, r5
 8013ace:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ad2:	f8de 3000 	ldr.w	r3, [lr]
 8013ad6:	f8cc 3000 	str.w	r3, [ip]
 8013ada:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013adc:	b1fb      	cbz	r3, 8013b1e <rcl_node_resolve_name+0x8e>
 8013ade:	468a      	mov	sl, r1
 8013ae0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013ae4:	f002 fc8c 	bl	8016400 <rcutils_get_zero_initialized_string_map>
 8013ae8:	ab10      	add	r3, sp, #64	@ 0x40
 8013aea:	9008      	str	r0, [sp, #32]
 8013aec:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013af0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013af4:	2100      	movs	r1, #0
 8013af6:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013afa:	a808      	add	r0, sp, #32
 8013afc:	f002 fcf8 	bl	80164f0 <rcutils_string_map_init>
 8013b00:	4607      	mov	r7, r0
 8013b02:	b180      	cbz	r0, 8013b26 <rcl_node_resolve_name+0x96>
 8013b04:	f7f9 fd8c 	bl	800d620 <rcutils_get_error_string>
 8013b08:	f7f9 fda2 	bl	800d650 <rcutils_reset_error>
 8013b0c:	2f0a      	cmp	r7, #10
 8013b0e:	bf18      	it	ne
 8013b10:	2701      	movne	r7, #1
 8013b12:	4638      	mov	r0, r7
 8013b14:	b011      	add	sp, #68	@ 0x44
 8013b16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b1a:	b002      	add	sp, #8
 8013b1c:	4770      	bx	lr
 8013b1e:	270b      	movs	r7, #11
 8013b20:	e7f7      	b.n	8013b12 <rcl_node_resolve_name+0x82>
 8013b22:	2701      	movs	r7, #1
 8013b24:	e7f5      	b.n	8013b12 <rcl_node_resolve_name+0x82>
 8013b26:	9009      	str	r0, [sp, #36]	@ 0x24
 8013b28:	9007      	str	r0, [sp, #28]
 8013b2a:	a808      	add	r0, sp, #32
 8013b2c:	f004 fc3c 	bl	80183a8 <rcl_get_default_topic_name_substitutions>
 8013b30:	4607      	mov	r7, r0
 8013b32:	b1a8      	cbz	r0, 8013b60 <rcl_node_resolve_name+0xd0>
 8013b34:	280a      	cmp	r0, #10
 8013b36:	9c07      	ldr	r4, [sp, #28]
 8013b38:	d000      	beq.n	8013b3c <rcl_node_resolve_name+0xac>
 8013b3a:	2701      	movs	r7, #1
 8013b3c:	a808      	add	r0, sp, #32
 8013b3e:	f002 fd17 	bl	8016570 <rcutils_string_map_fini>
 8013b42:	2800      	cmp	r0, #0
 8013b44:	d13d      	bne.n	8013bc2 <rcl_node_resolve_name+0x132>
 8013b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b48:	4659      	mov	r1, fp
 8013b4a:	47d0      	blx	sl
 8013b4c:	4659      	mov	r1, fp
 8013b4e:	4620      	mov	r0, r4
 8013b50:	47d0      	blx	sl
 8013b52:	f1b8 0f00 	cmp.w	r8, #0
 8013b56:	d0dc      	beq.n	8013b12 <rcl_node_resolve_name+0x82>
 8013b58:	2f67      	cmp	r7, #103	@ 0x67
 8013b5a:	bf08      	it	eq
 8013b5c:	2768      	moveq	r7, #104	@ 0x68
 8013b5e:	e7d8      	b.n	8013b12 <rcl_node_resolve_name+0x82>
 8013b60:	ab09      	add	r3, sp, #36	@ 0x24
 8013b62:	9305      	str	r3, [sp, #20]
 8013b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b66:	46ec      	mov	ip, sp
 8013b68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b6c:	682b      	ldr	r3, [r5, #0]
 8013b6e:	f8cc 3000 	str.w	r3, [ip]
 8013b72:	464a      	mov	r2, r9
 8013b74:	4631      	mov	r1, r6
 8013b76:	4620      	mov	r0, r4
 8013b78:	ab08      	add	r3, sp, #32
 8013b7a:	f004 fab7 	bl	80180ec <rcl_expand_topic_name>
 8013b7e:	4607      	mov	r7, r0
 8013b80:	b9b8      	cbnz	r0, 8013bb2 <rcl_node_resolve_name+0x122>
 8013b82:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013b84:	9009      	str	r0, [sp, #36]	@ 0x24
 8013b86:	4602      	mov	r2, r0
 8013b88:	a90a      	add	r1, sp, #40	@ 0x28
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	f002 fe00 	bl	8016790 <rmw_validate_full_topic_name>
 8013b90:	b988      	cbnz	r0, 8013bb6 <rcl_node_resolve_name+0x126>
 8013b92:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013b94:	b9d5      	cbnz	r5, 8013bcc <rcl_node_resolve_name+0x13c>
 8013b96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013b98:	a808      	add	r0, sp, #32
 8013b9a:	601c      	str	r4, [r3, #0]
 8013b9c:	f002 fce8 	bl	8016570 <rcutils_string_map_fini>
 8013ba0:	4607      	mov	r7, r0
 8013ba2:	b1a8      	cbz	r0, 8013bd0 <rcl_node_resolve_name+0x140>
 8013ba4:	f7f9 fd3c 	bl	800d620 <rcutils_get_error_string>
 8013ba8:	462c      	mov	r4, r5
 8013baa:	f7f9 fd51 	bl	800d650 <rcutils_reset_error>
 8013bae:	2701      	movs	r7, #1
 8013bb0:	e7c9      	b.n	8013b46 <rcl_node_resolve_name+0xb6>
 8013bb2:	9c07      	ldr	r4, [sp, #28]
 8013bb4:	e7c2      	b.n	8013b3c <rcl_node_resolve_name+0xac>
 8013bb6:	f7f9 fd33 	bl	800d620 <rcutils_get_error_string>
 8013bba:	2701      	movs	r7, #1
 8013bbc:	f7f9 fd48 	bl	800d650 <rcutils_reset_error>
 8013bc0:	e7bc      	b.n	8013b3c <rcl_node_resolve_name+0xac>
 8013bc2:	f7f9 fd2d 	bl	800d620 <rcutils_get_error_string>
 8013bc6:	f7f9 fd43 	bl	800d650 <rcutils_reset_error>
 8013bca:	e7bc      	b.n	8013b46 <rcl_node_resolve_name+0xb6>
 8013bcc:	2767      	movs	r7, #103	@ 0x67
 8013bce:	e7b5      	b.n	8013b3c <rcl_node_resolve_name+0xac>
 8013bd0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013bd2:	4659      	mov	r1, fp
 8013bd4:	47d0      	blx	sl
 8013bd6:	4659      	mov	r1, fp
 8013bd8:	4638      	mov	r0, r7
 8013bda:	47d0      	blx	sl
 8013bdc:	e799      	b.n	8013b12 <rcl_node_resolve_name+0x82>
 8013bde:	bf00      	nop

08013be0 <exact_match_lookup>:
 8013be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013be2:	f102 0708 	add.w	r7, r2, #8
 8013be6:	460b      	mov	r3, r1
 8013be8:	4614      	mov	r4, r2
 8013bea:	4606      	mov	r6, r0
 8013bec:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013bf0:	b085      	sub	sp, #20
 8013bf2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	4919      	ldr	r1, [pc, #100]	@ (8013c60 <exact_match_lookup+0x80>)
 8013bfa:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013bfe:	f002 fa99 	bl	8016134 <rcutils_join_path>
 8013c02:	7833      	ldrb	r3, [r6, #0]
 8013c04:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c06:	4605      	mov	r5, r0
 8013c08:	d023      	beq.n	8013c52 <exact_match_lookup+0x72>
 8013c0a:	f104 030c 	add.w	r3, r4, #12
 8013c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013c12:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013c16:	1c70      	adds	r0, r6, #1
 8013c18:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013c1c:	f002 fa90 	bl	8016140 <rcutils_to_native_path>
 8013c20:	4606      	mov	r6, r0
 8013c22:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013c26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013c2a:	4631      	mov	r1, r6
 8013c2c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013c30:	4628      	mov	r0, r5
 8013c32:	f002 fa7f 	bl	8016134 <rcutils_join_path>
 8013c36:	6862      	ldr	r2, [r4, #4]
 8013c38:	6921      	ldr	r1, [r4, #16]
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	4630      	mov	r0, r6
 8013c3e:	461e      	mov	r6, r3
 8013c40:	4790      	blx	r2
 8013c42:	4628      	mov	r0, r5
 8013c44:	6863      	ldr	r3, [r4, #4]
 8013c46:	6921      	ldr	r1, [r4, #16]
 8013c48:	4798      	blx	r3
 8013c4a:	4635      	mov	r5, r6
 8013c4c:	4628      	mov	r0, r5
 8013c4e:	b005      	add	sp, #20
 8013c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c52:	7873      	ldrb	r3, [r6, #1]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d1d8      	bne.n	8013c0a <exact_match_lookup+0x2a>
 8013c58:	4628      	mov	r0, r5
 8013c5a:	b005      	add	sp, #20
 8013c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c5e:	bf00      	nop
 8013c60:	0801b5a0 	.word	0x0801b5a0

08013c64 <rcl_get_secure_root>:
 8013c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c68:	b085      	sub	sp, #20
 8013c6a:	b168      	cbz	r0, 8013c88 <rcl_get_secure_root+0x24>
 8013c6c:	4607      	mov	r7, r0
 8013c6e:	4608      	mov	r0, r1
 8013c70:	460c      	mov	r4, r1
 8013c72:	f7f9 fcc7 	bl	800d604 <rcutils_allocator_is_valid>
 8013c76:	b138      	cbz	r0, 8013c88 <rcl_get_secure_root+0x24>
 8013c78:	2300      	movs	r3, #0
 8013c7a:	482d      	ldr	r0, [pc, #180]	@ (8013d30 <rcl_get_secure_root+0xcc>)
 8013c7c:	9303      	str	r3, [sp, #12]
 8013c7e:	a903      	add	r1, sp, #12
 8013c80:	f002 fa3e 	bl	8016100 <rcutils_get_env>
 8013c84:	4605      	mov	r5, r0
 8013c86:	b120      	cbz	r0, 8013c92 <rcl_get_secure_root+0x2e>
 8013c88:	2500      	movs	r5, #0
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	b005      	add	sp, #20
 8013c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c92:	9b03      	ldr	r3, [sp, #12]
 8013c94:	781a      	ldrb	r2, [r3, #0]
 8013c96:	2a00      	cmp	r2, #0
 8013c98:	d0f6      	beq.n	8013c88 <rcl_get_secure_root+0x24>
 8013c9a:	f104 090c 	add.w	r9, r4, #12
 8013c9e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013ca2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013cac:	f002 fb6a 	bl	8016384 <rcutils_strdup>
 8013cb0:	4680      	mov	r8, r0
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	d0e8      	beq.n	8013c88 <rcl_get_secure_root+0x24>
 8013cb6:	481f      	ldr	r0, [pc, #124]	@ (8013d34 <rcl_get_secure_root+0xd0>)
 8013cb8:	9503      	str	r5, [sp, #12]
 8013cba:	a903      	add	r1, sp, #12
 8013cbc:	f002 fa20 	bl	8016100 <rcutils_get_env>
 8013cc0:	b160      	cbz	r0, 8013cdc <rcl_get_secure_root+0x78>
 8013cc2:	2600      	movs	r6, #0
 8013cc4:	6863      	ldr	r3, [r4, #4]
 8013cc6:	6921      	ldr	r1, [r4, #16]
 8013cc8:	4630      	mov	r0, r6
 8013cca:	4798      	blx	r3
 8013ccc:	4640      	mov	r0, r8
 8013cce:	6863      	ldr	r3, [r4, #4]
 8013cd0:	6921      	ldr	r1, [r4, #16]
 8013cd2:	4798      	blx	r3
 8013cd4:	4628      	mov	r0, r5
 8013cd6:	b005      	add	sp, #20
 8013cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cdc:	9b03      	ldr	r3, [sp, #12]
 8013cde:	781e      	ldrb	r6, [r3, #0]
 8013ce0:	b1f6      	cbz	r6, 8013d20 <rcl_get_secure_root+0xbc>
 8013ce2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013ce6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013cea:	4618      	mov	r0, r3
 8013cec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013cf0:	f002 fb48 	bl	8016384 <rcutils_strdup>
 8013cf4:	4606      	mov	r6, r0
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	d0e3      	beq.n	8013cc2 <rcl_get_secure_root+0x5e>
 8013cfa:	4622      	mov	r2, r4
 8013cfc:	4641      	mov	r1, r8
 8013cfe:	f7ff ff6f 	bl	8013be0 <exact_match_lookup>
 8013d02:	4605      	mov	r5, r0
 8013d04:	2d00      	cmp	r5, #0
 8013d06:	d0dd      	beq.n	8013cc4 <rcl_get_secure_root+0x60>
 8013d08:	4628      	mov	r0, r5
 8013d0a:	f002 fa11 	bl	8016130 <rcutils_is_directory>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	2800      	cmp	r0, #0
 8013d12:	d1d7      	bne.n	8013cc4 <rcl_get_secure_root+0x60>
 8013d14:	4628      	mov	r0, r5
 8013d16:	6921      	ldr	r1, [r4, #16]
 8013d18:	461d      	mov	r5, r3
 8013d1a:	6863      	ldr	r3, [r4, #4]
 8013d1c:	4798      	blx	r3
 8013d1e:	e7d1      	b.n	8013cc4 <rcl_get_secure_root+0x60>
 8013d20:	4622      	mov	r2, r4
 8013d22:	4638      	mov	r0, r7
 8013d24:	4641      	mov	r1, r8
 8013d26:	f7ff ff5b 	bl	8013be0 <exact_match_lookup>
 8013d2a:	4605      	mov	r5, r0
 8013d2c:	e7ea      	b.n	8013d04 <rcl_get_secure_root+0xa0>
 8013d2e:	bf00      	nop
 8013d30:	0801b5ac 	.word	0x0801b5ac
 8013d34:	0801b5c4 	.word	0x0801b5c4

08013d38 <rcl_get_security_options_from_environment>:
 8013d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d3c:	b082      	sub	sp, #8
 8013d3e:	2300      	movs	r3, #0
 8013d40:	4606      	mov	r6, r0
 8013d42:	460f      	mov	r7, r1
 8013d44:	4820      	ldr	r0, [pc, #128]	@ (8013dc8 <rcl_get_security_options_from_environment+0x90>)
 8013d46:	9301      	str	r3, [sp, #4]
 8013d48:	a901      	add	r1, sp, #4
 8013d4a:	4690      	mov	r8, r2
 8013d4c:	f002 f9d8 	bl	8016100 <rcutils_get_env>
 8013d50:	b120      	cbz	r0, 8013d5c <rcl_get_security_options_from_environment+0x24>
 8013d52:	2501      	movs	r5, #1
 8013d54:	4628      	mov	r0, r5
 8013d56:	b002      	add	sp, #8
 8013d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d5c:	491b      	ldr	r1, [pc, #108]	@ (8013dcc <rcl_get_security_options_from_environment+0x94>)
 8013d5e:	4604      	mov	r4, r0
 8013d60:	9801      	ldr	r0, [sp, #4]
 8013d62:	f7ec fa5d 	bl	8000220 <strcmp>
 8013d66:	4605      	mov	r5, r0
 8013d68:	b9e8      	cbnz	r0, 8013da6 <rcl_get_security_options_from_environment+0x6e>
 8013d6a:	9001      	str	r0, [sp, #4]
 8013d6c:	f1b8 0f00 	cmp.w	r8, #0
 8013d70:	d020      	beq.n	8013db4 <rcl_get_security_options_from_environment+0x7c>
 8013d72:	4817      	ldr	r0, [pc, #92]	@ (8013dd0 <rcl_get_security_options_from_environment+0x98>)
 8013d74:	a901      	add	r1, sp, #4
 8013d76:	f002 f9c3 	bl	8016100 <rcutils_get_env>
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	d1e9      	bne.n	8013d52 <rcl_get_security_options_from_environment+0x1a>
 8013d7e:	4915      	ldr	r1, [pc, #84]	@ (8013dd4 <rcl_get_security_options_from_environment+0x9c>)
 8013d80:	9801      	ldr	r0, [sp, #4]
 8013d82:	f7ec fa4d 	bl	8000220 <strcmp>
 8013d86:	fab0 f080 	clz	r0, r0
 8013d8a:	0940      	lsrs	r0, r0, #5
 8013d8c:	f888 0000 	strb.w	r0, [r8]
 8013d90:	4639      	mov	r1, r7
 8013d92:	4630      	mov	r0, r6
 8013d94:	f7ff ff66 	bl	8013c64 <rcl_get_secure_root>
 8013d98:	b170      	cbz	r0, 8013db8 <rcl_get_security_options_from_environment+0x80>
 8013d9a:	f8c8 0004 	str.w	r0, [r8, #4]
 8013d9e:	4628      	mov	r0, r5
 8013da0:	b002      	add	sp, #8
 8013da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013da6:	4625      	mov	r5, r4
 8013da8:	4628      	mov	r0, r5
 8013daa:	f888 4000 	strb.w	r4, [r8]
 8013dae:	b002      	add	sp, #8
 8013db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013db4:	250b      	movs	r5, #11
 8013db6:	e7cd      	b.n	8013d54 <rcl_get_security_options_from_environment+0x1c>
 8013db8:	f898 5000 	ldrb.w	r5, [r8]
 8013dbc:	f1a5 0501 	sub.w	r5, r5, #1
 8013dc0:	fab5 f585 	clz	r5, r5
 8013dc4:	096d      	lsrs	r5, r5, #5
 8013dc6:	e7c5      	b.n	8013d54 <rcl_get_security_options_from_environment+0x1c>
 8013dc8:	0801b564 	.word	0x0801b564
 8013dcc:	0801b578 	.word	0x0801b578
 8013dd0:	0801b580 	.word	0x0801b580
 8013dd4:	0801b598 	.word	0x0801b598

08013dd8 <rcl_get_zero_initialized_service>:
 8013dd8:	4b01      	ldr	r3, [pc, #4]	@ (8013de0 <rcl_get_zero_initialized_service+0x8>)
 8013dda:	6818      	ldr	r0, [r3, #0]
 8013ddc:	4770      	bx	lr
 8013dde:	bf00      	nop
 8013de0:	0801b5e4 	.word	0x0801b5e4

08013de4 <rcl_service_init>:
 8013de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013de8:	b089      	sub	sp, #36	@ 0x24
 8013dea:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8013dec:	b1c5      	cbz	r5, 8013e20 <rcl_service_init+0x3c>
 8013dee:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8013df2:	4604      	mov	r4, r0
 8013df4:	4648      	mov	r0, r9
 8013df6:	4688      	mov	r8, r1
 8013df8:	4617      	mov	r7, r2
 8013dfa:	461e      	mov	r6, r3
 8013dfc:	f7f9 fc02 	bl	800d604 <rcutils_allocator_is_valid>
 8013e00:	b170      	cbz	r0, 8013e20 <rcl_service_init+0x3c>
 8013e02:	b16c      	cbz	r4, 8013e20 <rcl_service_init+0x3c>
 8013e04:	4640      	mov	r0, r8
 8013e06:	f7ff fdef 	bl	80139e8 <rcl_node_is_valid>
 8013e0a:	2800      	cmp	r0, #0
 8013e0c:	d058      	beq.n	8013ec0 <rcl_service_init+0xdc>
 8013e0e:	b13f      	cbz	r7, 8013e20 <rcl_service_init+0x3c>
 8013e10:	b136      	cbz	r6, 8013e20 <rcl_service_init+0x3c>
 8013e12:	6823      	ldr	r3, [r4, #0]
 8013e14:	b14b      	cbz	r3, 8013e2a <rcl_service_init+0x46>
 8013e16:	2664      	movs	r6, #100	@ 0x64
 8013e18:	4630      	mov	r0, r6
 8013e1a:	b009      	add	sp, #36	@ 0x24
 8013e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e20:	260b      	movs	r6, #11
 8013e22:	4630      	mov	r0, r6
 8013e24:	b009      	add	sp, #36	@ 0x24
 8013e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e2a:	aa07      	add	r2, sp, #28
 8013e2c:	9205      	str	r2, [sp, #20]
 8013e2e:	2201      	movs	r2, #1
 8013e30:	9304      	str	r3, [sp, #16]
 8013e32:	9203      	str	r2, [sp, #12]
 8013e34:	9307      	str	r3, [sp, #28]
 8013e36:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8013e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013e3e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013e42:	4631      	mov	r1, r6
 8013e44:	e899 000c 	ldmia.w	r9, {r2, r3}
 8013e48:	4640      	mov	r0, r8
 8013e4a:	f7ff fe21 	bl	8013a90 <rcl_node_resolve_name>
 8013e4e:	2800      	cmp	r0, #0
 8013e50:	d145      	bne.n	8013ede <rcl_service_init+0xfa>
 8013e52:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8013e54:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013e56:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8013e5a:	4798      	blx	r3
 8013e5c:	6020      	str	r0, [r4, #0]
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	d043      	beq.n	8013eea <rcl_service_init+0x106>
 8013e62:	4640      	mov	r0, r8
 8013e64:	f7ff fde2 	bl	8013a2c <rcl_node_get_rmw_handle>
 8013e68:	462b      	mov	r3, r5
 8013e6a:	9a07      	ldr	r2, [sp, #28]
 8013e6c:	6826      	ldr	r6, [r4, #0]
 8013e6e:	4639      	mov	r1, r7
 8013e70:	f7fa f9a0 	bl	800e1b4 <rmw_create_service>
 8013e74:	6823      	ldr	r3, [r4, #0]
 8013e76:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8013e7a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013e7e:	b330      	cbz	r0, 8013ece <rcl_service_init+0xea>
 8013e80:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8013e84:	f7fa fabc 	bl	800e400 <rmw_service_request_subscription_get_actual_qos>
 8013e88:	b9f8      	cbnz	r0, 8013eca <rcl_service_init+0xe6>
 8013e8a:	6821      	ldr	r1, [r4, #0]
 8013e8c:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8013e90:	31b8      	adds	r1, #184	@ 0xb8
 8013e92:	f7fa faa5 	bl	800e3e0 <rmw_service_response_publisher_get_actual_qos>
 8013e96:	4606      	mov	r6, r0
 8013e98:	b9b8      	cbnz	r0, 8013eca <rcl_service_init+0xe6>
 8013e9a:	6820      	ldr	r0, [r4, #0]
 8013e9c:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8013ea0:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8013ea4:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8013ea8:	2268      	movs	r2, #104	@ 0x68
 8013eaa:	4629      	mov	r1, r5
 8013eac:	f005 faab 	bl	8019406 <memcpy>
 8013eb0:	9807      	ldr	r0, [sp, #28]
 8013eb2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8013eb4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013eb6:	4798      	blx	r3
 8013eb8:	4630      	mov	r0, r6
 8013eba:	b009      	add	sp, #36	@ 0x24
 8013ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ec0:	26c8      	movs	r6, #200	@ 0xc8
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	b009      	add	sp, #36	@ 0x24
 8013ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013eca:	6823      	ldr	r3, [r4, #0]
 8013ecc:	b12b      	cbz	r3, 8013eda <rcl_service_init+0xf6>
 8013ece:	4618      	mov	r0, r3
 8013ed0:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8013ed2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013ed4:	4790      	blx	r2
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	6023      	str	r3, [r4, #0]
 8013eda:	2601      	movs	r6, #1
 8013edc:	e7e8      	b.n	8013eb0 <rcl_service_init+0xcc>
 8013ede:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8013ee2:	2b01      	cmp	r3, #1
 8013ee4:	d903      	bls.n	8013eee <rcl_service_init+0x10a>
 8013ee6:	280a      	cmp	r0, #10
 8013ee8:	d1f7      	bne.n	8013eda <rcl_service_init+0xf6>
 8013eea:	260a      	movs	r6, #10
 8013eec:	e7e0      	b.n	8013eb0 <rcl_service_init+0xcc>
 8013eee:	2668      	movs	r6, #104	@ 0x68
 8013ef0:	e7de      	b.n	8013eb0 <rcl_service_init+0xcc>
 8013ef2:	bf00      	nop

08013ef4 <rcl_service_get_default_options>:
 8013ef4:	b530      	push	{r4, r5, lr}
 8013ef6:	4d0f      	ldr	r5, [pc, #60]	@ (8013f34 <rcl_service_get_default_options+0x40>)
 8013ef8:	490f      	ldr	r1, [pc, #60]	@ (8013f38 <rcl_service_get_default_options+0x44>)
 8013efa:	b087      	sub	sp, #28
 8013efc:	4604      	mov	r4, r0
 8013efe:	2250      	movs	r2, #80	@ 0x50
 8013f00:	4628      	mov	r0, r5
 8013f02:	f005 fa80 	bl	8019406 <memcpy>
 8013f06:	4668      	mov	r0, sp
 8013f08:	f7f9 fb6e 	bl	800d5e8 <rcutils_get_default_allocator>
 8013f0c:	46ec      	mov	ip, sp
 8013f0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f12:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8013f16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f1a:	2268      	movs	r2, #104	@ 0x68
 8013f1c:	f8dc 3000 	ldr.w	r3, [ip]
 8013f20:	f8ce 3000 	str.w	r3, [lr]
 8013f24:	4629      	mov	r1, r5
 8013f26:	4620      	mov	r0, r4
 8013f28:	f005 fa6d 	bl	8019406 <memcpy>
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	b007      	add	sp, #28
 8013f30:	bd30      	pop	{r4, r5, pc}
 8013f32:	bf00      	nop
 8013f34:	2000b628 	.word	0x2000b628
 8013f38:	0801b5e8 	.word	0x0801b5e8

08013f3c <rcl_service_get_rmw_handle>:
 8013f3c:	b118      	cbz	r0, 8013f46 <rcl_service_get_rmw_handle+0xa>
 8013f3e:	6800      	ldr	r0, [r0, #0]
 8013f40:	b108      	cbz	r0, 8013f46 <rcl_service_get_rmw_handle+0xa>
 8013f42:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013f46:	4770      	bx	lr

08013f48 <rcl_take_request>:
 8013f48:	b570      	push	{r4, r5, r6, lr}
 8013f4a:	468e      	mov	lr, r1
 8013f4c:	460c      	mov	r4, r1
 8013f4e:	4616      	mov	r6, r2
 8013f50:	4605      	mov	r5, r0
 8013f52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f56:	b08c      	sub	sp, #48	@ 0x30
 8013f58:	f10d 0c18 	add.w	ip, sp, #24
 8013f5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f60:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013f64:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013f68:	b30d      	cbz	r5, 8013fae <rcl_take_request+0x66>
 8013f6a:	682b      	ldr	r3, [r5, #0]
 8013f6c:	b1fb      	cbz	r3, 8013fae <rcl_take_request+0x66>
 8013f6e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013f72:	b1e0      	cbz	r0, 8013fae <rcl_take_request+0x66>
 8013f74:	b336      	cbz	r6, 8013fc4 <rcl_take_request+0x7c>
 8013f76:	2300      	movs	r3, #0
 8013f78:	f88d 3007 	strb.w	r3, [sp, #7]
 8013f7c:	4632      	mov	r2, r6
 8013f7e:	f10d 0307 	add.w	r3, sp, #7
 8013f82:	a902      	add	r1, sp, #8
 8013f84:	f002 ff5a 	bl	8016e3c <rmw_take_request>
 8013f88:	4605      	mov	r5, r0
 8013f8a:	b198      	cbz	r0, 8013fb4 <rcl_take_request+0x6c>
 8013f8c:	280a      	cmp	r0, #10
 8013f8e:	bf18      	it	ne
 8013f90:	2501      	movne	r5, #1
 8013f92:	f10d 0e18 	add.w	lr, sp, #24
 8013f96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f9a:	46a4      	mov	ip, r4
 8013f9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fa0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013fa4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013fa8:	4628      	mov	r0, r5
 8013faa:	b00c      	add	sp, #48	@ 0x30
 8013fac:	bd70      	pop	{r4, r5, r6, pc}
 8013fae:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8013fb2:	e7ee      	b.n	8013f92 <rcl_take_request+0x4a>
 8013fb4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013fb8:	f240 2359 	movw	r3, #601	@ 0x259
 8013fbc:	2a00      	cmp	r2, #0
 8013fbe:	bf08      	it	eq
 8013fc0:	461d      	moveq	r5, r3
 8013fc2:	e7e6      	b.n	8013f92 <rcl_take_request+0x4a>
 8013fc4:	250b      	movs	r5, #11
 8013fc6:	e7e4      	b.n	8013f92 <rcl_take_request+0x4a>

08013fc8 <rcl_send_response>:
 8013fc8:	b170      	cbz	r0, 8013fe8 <rcl_send_response+0x20>
 8013fca:	6800      	ldr	r0, [r0, #0]
 8013fcc:	b160      	cbz	r0, 8013fe8 <rcl_send_response+0x20>
 8013fce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013fd2:	b148      	cbz	r0, 8013fe8 <rcl_send_response+0x20>
 8013fd4:	b159      	cbz	r1, 8013fee <rcl_send_response+0x26>
 8013fd6:	b510      	push	{r4, lr}
 8013fd8:	b15a      	cbz	r2, 8013ff2 <rcl_send_response+0x2a>
 8013fda:	f002 ff8d 	bl	8016ef8 <rmw_send_response>
 8013fde:	b110      	cbz	r0, 8013fe6 <rcl_send_response+0x1e>
 8013fe0:	2802      	cmp	r0, #2
 8013fe2:	bf18      	it	ne
 8013fe4:	2001      	movne	r0, #1
 8013fe6:	bd10      	pop	{r4, pc}
 8013fe8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013fec:	4770      	bx	lr
 8013fee:	200b      	movs	r0, #11
 8013ff0:	4770      	bx	lr
 8013ff2:	200b      	movs	r0, #11
 8013ff4:	bd10      	pop	{r4, pc}
 8013ff6:	bf00      	nop

08013ff8 <rcl_service_is_valid>:
 8013ff8:	b130      	cbz	r0, 8014008 <rcl_service_is_valid+0x10>
 8013ffa:	6800      	ldr	r0, [r0, #0]
 8013ffc:	b120      	cbz	r0, 8014008 <rcl_service_is_valid+0x10>
 8013ffe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014002:	3800      	subs	r0, #0
 8014004:	bf18      	it	ne
 8014006:	2001      	movne	r0, #1
 8014008:	4770      	bx	lr
 801400a:	bf00      	nop

0801400c <rcl_take>:
 801400c:	2800      	cmp	r0, #0
 801400e:	d04a      	beq.n	80140a6 <rcl_take+0x9a>
 8014010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014014:	4604      	mov	r4, r0
 8014016:	6800      	ldr	r0, [r0, #0]
 8014018:	b0a4      	sub	sp, #144	@ 0x90
 801401a:	2800      	cmp	r0, #0
 801401c:	d03b      	beq.n	8014096 <rcl_take+0x8a>
 801401e:	461f      	mov	r7, r3
 8014020:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8014024:	2b00      	cmp	r3, #0
 8014026:	d036      	beq.n	8014096 <rcl_take+0x8a>
 8014028:	460e      	mov	r6, r1
 801402a:	2900      	cmp	r1, #0
 801402c:	d039      	beq.n	80140a2 <rcl_take+0x96>
 801402e:	4615      	mov	r5, r2
 8014030:	2a00      	cmp	r2, #0
 8014032:	d03c      	beq.n	80140ae <rcl_take+0xa2>
 8014034:	a802      	add	r0, sp, #8
 8014036:	f002 fba3 	bl	8016780 <rmw_get_zero_initialized_message_info>
 801403a:	f10d 0c08 	add.w	ip, sp, #8
 801403e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014042:	46ae      	mov	lr, r5
 8014044:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014048:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801404c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014050:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014054:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014058:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801405c:	f04f 0800 	mov.w	r8, #0
 8014060:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8014064:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8014068:	6822      	ldr	r2, [r4, #0]
 801406a:	462b      	mov	r3, r5
 801406c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8014070:	9700      	str	r7, [sp, #0]
 8014072:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8014076:	4631      	mov	r1, r6
 8014078:	f002 ffe4 	bl	8017044 <rmw_take_with_info>
 801407c:	4603      	mov	r3, r0
 801407e:	b9c0      	cbnz	r0, 80140b2 <rcl_take+0xa6>
 8014080:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8014084:	f240 1291 	movw	r2, #401	@ 0x191
 8014088:	2900      	cmp	r1, #0
 801408a:	bf08      	it	eq
 801408c:	4613      	moveq	r3, r2
 801408e:	4618      	mov	r0, r3
 8014090:	b024      	add	sp, #144	@ 0x90
 8014092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014096:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801409a:	4618      	mov	r0, r3
 801409c:	b024      	add	sp, #144	@ 0x90
 801409e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140a2:	230b      	movs	r3, #11
 80140a4:	e7f3      	b.n	801408e <rcl_take+0x82>
 80140a6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80140aa:	4618      	mov	r0, r3
 80140ac:	4770      	bx	lr
 80140ae:	ad14      	add	r5, sp, #80	@ 0x50
 80140b0:	e7c0      	b.n	8014034 <rcl_take+0x28>
 80140b2:	f7ff f99f 	bl	80133f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80140b6:	4603      	mov	r3, r0
 80140b8:	e7e9      	b.n	801408e <rcl_take+0x82>
 80140ba:	bf00      	nop

080140bc <rcl_subscription_get_rmw_handle>:
 80140bc:	b118      	cbz	r0, 80140c6 <rcl_subscription_get_rmw_handle+0xa>
 80140be:	6800      	ldr	r0, [r0, #0]
 80140c0:	b108      	cbz	r0, 80140c6 <rcl_subscription_get_rmw_handle+0xa>
 80140c2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80140c6:	4770      	bx	lr

080140c8 <rcl_subscription_is_valid>:
 80140c8:	b130      	cbz	r0, 80140d8 <rcl_subscription_is_valid+0x10>
 80140ca:	6800      	ldr	r0, [r0, #0]
 80140cc:	b120      	cbz	r0, 80140d8 <rcl_subscription_is_valid+0x10>
 80140ce:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80140d2:	3800      	subs	r0, #0
 80140d4:	bf18      	it	ne
 80140d6:	2001      	movne	r0, #1
 80140d8:	4770      	bx	lr
 80140da:	bf00      	nop

080140dc <rcl_get_system_time>:
 80140dc:	4608      	mov	r0, r1
 80140de:	f7f9 bad3 	b.w	800d688 <rcutils_system_time_now>
 80140e2:	bf00      	nop

080140e4 <rcl_get_steady_time>:
 80140e4:	4608      	mov	r0, r1
 80140e6:	f7f9 baf7 	b.w	800d6d8 <rcutils_steady_time_now>
 80140ea:	bf00      	nop

080140ec <rcl_get_ros_time>:
 80140ec:	7a03      	ldrb	r3, [r0, #8]
 80140ee:	b510      	push	{r4, lr}
 80140f0:	460c      	mov	r4, r1
 80140f2:	b133      	cbz	r3, 8014102 <rcl_get_ros_time+0x16>
 80140f4:	2105      	movs	r1, #5
 80140f6:	f001 ff5f 	bl	8015fb8 <__atomic_load_8>
 80140fa:	e9c4 0100 	strd	r0, r1, [r4]
 80140fe:	2000      	movs	r0, #0
 8014100:	bd10      	pop	{r4, pc}
 8014102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014106:	4608      	mov	r0, r1
 8014108:	f7f9 babe 	b.w	800d688 <rcutils_system_time_now>

0801410c <rcl_clock_init>:
 801410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801410e:	4605      	mov	r5, r0
 8014110:	4610      	mov	r0, r2
 8014112:	4614      	mov	r4, r2
 8014114:	460e      	mov	r6, r1
 8014116:	f7f9 fa75 	bl	800d604 <rcutils_allocator_is_valid>
 801411a:	b128      	cbz	r0, 8014128 <rcl_clock_init+0x1c>
 801411c:	2d03      	cmp	r5, #3
 801411e:	d803      	bhi.n	8014128 <rcl_clock_init+0x1c>
 8014120:	e8df f005 	tbb	[pc, r5]
 8014124:	06532e1d 	.word	0x06532e1d
 8014128:	f04f 0c0b 	mov.w	ip, #11
 801412c:	4660      	mov	r0, ip
 801412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014130:	2e00      	cmp	r6, #0
 8014132:	d0f9      	beq.n	8014128 <rcl_clock_init+0x1c>
 8014134:	2c00      	cmp	r4, #0
 8014136:	d0f7      	beq.n	8014128 <rcl_clock_init+0x1c>
 8014138:	2300      	movs	r3, #0
 801413a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801413e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80141f4 <rcl_clock_init+0xe8>
 8014142:	6133      	str	r3, [r6, #16]
 8014144:	f106 0514 	add.w	r5, r6, #20
 8014148:	469c      	mov	ip, r3
 801414a:	2703      	movs	r7, #3
 801414c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801414e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014150:	6823      	ldr	r3, [r4, #0]
 8014152:	602b      	str	r3, [r5, #0]
 8014154:	7037      	strb	r7, [r6, #0]
 8014156:	f8c6 e00c 	str.w	lr, [r6, #12]
 801415a:	4660      	mov	r0, ip
 801415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801415e:	2e00      	cmp	r6, #0
 8014160:	d0e2      	beq.n	8014128 <rcl_clock_init+0x1c>
 8014162:	2300      	movs	r3, #0
 8014164:	7033      	strb	r3, [r6, #0]
 8014166:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801416a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801416e:	469c      	mov	ip, r3
 8014170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014172:	f106 0514 	add.w	r5, r6, #20
 8014176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014178:	6823      	ldr	r3, [r4, #0]
 801417a:	602b      	str	r3, [r5, #0]
 801417c:	4660      	mov	r0, ip
 801417e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014180:	2e00      	cmp	r6, #0
 8014182:	d0d1      	beq.n	8014128 <rcl_clock_init+0x1c>
 8014184:	2c00      	cmp	r4, #0
 8014186:	d0cf      	beq.n	8014128 <rcl_clock_init+0x1c>
 8014188:	2700      	movs	r7, #0
 801418a:	7037      	strb	r7, [r6, #0]
 801418c:	46a4      	mov	ip, r4
 801418e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014192:	f106 0514 	add.w	r5, r6, #20
 8014196:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801419a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801419e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80141a0:	f8dc 3000 	ldr.w	r3, [ip]
 80141a4:	602b      	str	r3, [r5, #0]
 80141a6:	6921      	ldr	r1, [r4, #16]
 80141a8:	6823      	ldr	r3, [r4, #0]
 80141aa:	2010      	movs	r0, #16
 80141ac:	4798      	blx	r3
 80141ae:	6130      	str	r0, [r6, #16]
 80141b0:	b1d0      	cbz	r0, 80141e8 <rcl_clock_init+0xdc>
 80141b2:	2200      	movs	r2, #0
 80141b4:	2300      	movs	r3, #0
 80141b6:	e9c0 2300 	strd	r2, r3, [r0]
 80141ba:	2301      	movs	r3, #1
 80141bc:	7207      	strb	r7, [r0, #8]
 80141be:	4a0c      	ldr	r2, [pc, #48]	@ (80141f0 <rcl_clock_init+0xe4>)
 80141c0:	7033      	strb	r3, [r6, #0]
 80141c2:	46bc      	mov	ip, r7
 80141c4:	60f2      	str	r2, [r6, #12]
 80141c6:	4660      	mov	r0, ip
 80141c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141ca:	2e00      	cmp	r6, #0
 80141cc:	d0ac      	beq.n	8014128 <rcl_clock_init+0x1c>
 80141ce:	2c00      	cmp	r4, #0
 80141d0:	d0aa      	beq.n	8014128 <rcl_clock_init+0x1c>
 80141d2:	2300      	movs	r3, #0
 80141d4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80141d8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80141f8 <rcl_clock_init+0xec>
 80141dc:	6133      	str	r3, [r6, #16]
 80141de:	f106 0514 	add.w	r5, r6, #20
 80141e2:	469c      	mov	ip, r3
 80141e4:	2702      	movs	r7, #2
 80141e6:	e7b1      	b.n	801414c <rcl_clock_init+0x40>
 80141e8:	f04f 0c0a 	mov.w	ip, #10
 80141ec:	e79e      	b.n	801412c <rcl_clock_init+0x20>
 80141ee:	bf00      	nop
 80141f0:	080140ed 	.word	0x080140ed
 80141f4:	080140e5 	.word	0x080140e5
 80141f8:	080140dd 	.word	0x080140dd

080141fc <rcl_clock_get_now>:
 80141fc:	b140      	cbz	r0, 8014210 <rcl_clock_get_now+0x14>
 80141fe:	b139      	cbz	r1, 8014210 <rcl_clock_get_now+0x14>
 8014200:	7803      	ldrb	r3, [r0, #0]
 8014202:	b11b      	cbz	r3, 801420c <rcl_clock_get_now+0x10>
 8014204:	68c3      	ldr	r3, [r0, #12]
 8014206:	b10b      	cbz	r3, 801420c <rcl_clock_get_now+0x10>
 8014208:	6900      	ldr	r0, [r0, #16]
 801420a:	4718      	bx	r3
 801420c:	2001      	movs	r0, #1
 801420e:	4770      	bx	lr
 8014210:	200b      	movs	r0, #11
 8014212:	4770      	bx	lr

08014214 <rcl_clock_add_jump_callback>:
 8014214:	b082      	sub	sp, #8
 8014216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801421a:	a906      	add	r1, sp, #24
 801421c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014220:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8014224:	b320      	cbz	r0, 8014270 <rcl_clock_add_jump_callback+0x5c>
 8014226:	4604      	mov	r4, r0
 8014228:	3014      	adds	r0, #20
 801422a:	f7f9 f9eb 	bl	800d604 <rcutils_allocator_is_valid>
 801422e:	b1f8      	cbz	r0, 8014270 <rcl_clock_add_jump_callback+0x5c>
 8014230:	b1f6      	cbz	r6, 8014270 <rcl_clock_add_jump_callback+0x5c>
 8014232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014234:	2b00      	cmp	r3, #0
 8014236:	db1b      	blt.n	8014270 <rcl_clock_add_jump_callback+0x5c>
 8014238:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801423c:	2a01      	cmp	r2, #1
 801423e:	f173 0300 	sbcs.w	r3, r3, #0
 8014242:	da15      	bge.n	8014270 <rcl_clock_add_jump_callback+0x5c>
 8014244:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014248:	2f00      	cmp	r7, #0
 801424a:	d042      	beq.n	80142d2 <rcl_clock_add_jump_callback+0xbe>
 801424c:	2300      	movs	r3, #0
 801424e:	4602      	mov	r2, r0
 8014250:	e003      	b.n	801425a <rcl_clock_add_jump_callback+0x46>
 8014252:	42bb      	cmp	r3, r7
 8014254:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8014258:	d011      	beq.n	801427e <rcl_clock_add_jump_callback+0x6a>
 801425a:	6811      	ldr	r1, [r2, #0]
 801425c:	42b1      	cmp	r1, r6
 801425e:	f103 0301 	add.w	r3, r3, #1
 8014262:	d1f6      	bne.n	8014252 <rcl_clock_add_jump_callback+0x3e>
 8014264:	6a11      	ldr	r1, [r2, #32]
 8014266:	42a9      	cmp	r1, r5
 8014268:	d1f3      	bne.n	8014252 <rcl_clock_add_jump_callback+0x3e>
 801426a:	f04f 0e01 	mov.w	lr, #1
 801426e:	e001      	b.n	8014274 <rcl_clock_add_jump_callback+0x60>
 8014270:	f04f 0e0b 	mov.w	lr, #11
 8014274:	4670      	mov	r0, lr
 8014276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801427a:	b002      	add	sp, #8
 801427c:	4770      	bx	lr
 801427e:	3301      	adds	r3, #1
 8014280:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014284:	00d9      	lsls	r1, r3, #3
 8014286:	69e3      	ldr	r3, [r4, #28]
 8014288:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801428a:	4798      	blx	r3
 801428c:	b1f0      	cbz	r0, 80142cc <rcl_clock_add_jump_callback+0xb8>
 801428e:	68a3      	ldr	r3, [r4, #8]
 8014290:	6060      	str	r0, [r4, #4]
 8014292:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014296:	f10d 0c18 	add.w	ip, sp, #24
 801429a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801429e:	f103 0801 	add.w	r8, r3, #1
 80142a2:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80142a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80142aa:	f106 0708 	add.w	r7, r6, #8
 80142ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80142b0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80142b4:	f04f 0e00 	mov.w	lr, #0
 80142b8:	e887 0003 	stmia.w	r7, {r0, r1}
 80142bc:	6235      	str	r5, [r6, #32]
 80142be:	4670      	mov	r0, lr
 80142c0:	f8c4 8008 	str.w	r8, [r4, #8]
 80142c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142c8:	b002      	add	sp, #8
 80142ca:	4770      	bx	lr
 80142cc:	f04f 0e0a 	mov.w	lr, #10
 80142d0:	e7d0      	b.n	8014274 <rcl_clock_add_jump_callback+0x60>
 80142d2:	2128      	movs	r1, #40	@ 0x28
 80142d4:	e7d7      	b.n	8014286 <rcl_clock_add_jump_callback+0x72>
 80142d6:	bf00      	nop

080142d8 <rcl_clock_remove_jump_callback>:
 80142d8:	2800      	cmp	r0, #0
 80142da:	d057      	beq.n	801438c <rcl_clock_remove_jump_callback+0xb4>
 80142dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142e0:	4605      	mov	r5, r0
 80142e2:	3014      	adds	r0, #20
 80142e4:	4688      	mov	r8, r1
 80142e6:	4692      	mov	sl, r2
 80142e8:	f7f9 f98c 	bl	800d604 <rcutils_allocator_is_valid>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d03b      	beq.n	8014368 <rcl_clock_remove_jump_callback+0x90>
 80142f0:	f1b8 0f00 	cmp.w	r8, #0
 80142f4:	d038      	beq.n	8014368 <rcl_clock_remove_jump_callback+0x90>
 80142f6:	68ae      	ldr	r6, [r5, #8]
 80142f8:	b166      	cbz	r6, 8014314 <rcl_clock_remove_jump_callback+0x3c>
 80142fa:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80142fe:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8014302:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8014306:	464c      	mov	r4, r9
 8014308:	6823      	ldr	r3, [r4, #0]
 801430a:	4543      	cmp	r3, r8
 801430c:	d005      	beq.n	801431a <rcl_clock_remove_jump_callback+0x42>
 801430e:	3428      	adds	r4, #40	@ 0x28
 8014310:	42a7      	cmp	r7, r4
 8014312:	d1f9      	bne.n	8014308 <rcl_clock_remove_jump_callback+0x30>
 8014314:	2001      	movs	r0, #1
 8014316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801431a:	6a23      	ldr	r3, [r4, #32]
 801431c:	3428      	adds	r4, #40	@ 0x28
 801431e:	42bc      	cmp	r4, r7
 8014320:	d02d      	beq.n	801437e <rcl_clock_remove_jump_callback+0xa6>
 8014322:	4553      	cmp	r3, sl
 8014324:	d1f0      	bne.n	8014308 <rcl_clock_remove_jump_callback+0x30>
 8014326:	46a6      	mov	lr, r4
 8014328:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801432c:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014330:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014334:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014338:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801433c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014340:	3428      	adds	r4, #40	@ 0x28
 8014342:	42a7      	cmp	r7, r4
 8014344:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014348:	d1ed      	bne.n	8014326 <rcl_clock_remove_jump_callback+0x4e>
 801434a:	3e01      	subs	r6, #1
 801434c:	60ae      	str	r6, [r5, #8]
 801434e:	b176      	cbz	r6, 801436e <rcl_clock_remove_jump_callback+0x96>
 8014350:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8014354:	69eb      	ldr	r3, [r5, #28]
 8014356:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014358:	00f1      	lsls	r1, r6, #3
 801435a:	4648      	mov	r0, r9
 801435c:	4798      	blx	r3
 801435e:	b1b8      	cbz	r0, 8014390 <rcl_clock_remove_jump_callback+0xb8>
 8014360:	6068      	str	r0, [r5, #4]
 8014362:	2000      	movs	r0, #0
 8014364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014368:	200b      	movs	r0, #11
 801436a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801436e:	4648      	mov	r0, r9
 8014370:	69ab      	ldr	r3, [r5, #24]
 8014372:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8014374:	4798      	blx	r3
 8014376:	606e      	str	r6, [r5, #4]
 8014378:	4630      	mov	r0, r6
 801437a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801437e:	4553      	cmp	r3, sl
 8014380:	d1c8      	bne.n	8014314 <rcl_clock_remove_jump_callback+0x3c>
 8014382:	3e01      	subs	r6, #1
 8014384:	60ae      	str	r6, [r5, #8]
 8014386:	2e00      	cmp	r6, #0
 8014388:	d1e2      	bne.n	8014350 <rcl_clock_remove_jump_callback+0x78>
 801438a:	e7f0      	b.n	801436e <rcl_clock_remove_jump_callback+0x96>
 801438c:	200b      	movs	r0, #11
 801438e:	4770      	bx	lr
 8014390:	200a      	movs	r0, #10
 8014392:	e7ea      	b.n	801436a <rcl_clock_remove_jump_callback+0x92>

08014394 <_rcl_timer_time_jump>:
 8014394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014398:	4605      	mov	r5, r0
 801439a:	b084      	sub	sp, #16
 801439c:	4614      	mov	r4, r2
 801439e:	b131      	cbz	r1, 80143ae <_rcl_timer_time_jump+0x1a>
 80143a0:	7803      	ldrb	r3, [r0, #0]
 80143a2:	3b02      	subs	r3, #2
 80143a4:	2b01      	cmp	r3, #1
 80143a6:	d93f      	bls.n	8014428 <_rcl_timer_time_jump+0x94>
 80143a8:	b004      	add	sp, #16
 80143aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143ae:	6813      	ldr	r3, [r2, #0]
 80143b0:	a902      	add	r1, sp, #8
 80143b2:	6818      	ldr	r0, [r3, #0]
 80143b4:	f7ff ff22 	bl	80141fc <rcl_clock_get_now>
 80143b8:	2800      	cmp	r0, #0
 80143ba:	d1f5      	bne.n	80143a8 <_rcl_timer_time_jump+0x14>
 80143bc:	6820      	ldr	r0, [r4, #0]
 80143be:	2105      	movs	r1, #5
 80143c0:	3020      	adds	r0, #32
 80143c2:	f001 fdf9 	bl	8015fb8 <__atomic_load_8>
 80143c6:	6823      	ldr	r3, [r4, #0]
 80143c8:	4681      	mov	r9, r0
 80143ca:	4688      	mov	r8, r1
 80143cc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80143d0:	2105      	movs	r1, #5
 80143d2:	f001 fdf1 	bl	8015fb8 <__atomic_load_8>
 80143d6:	4607      	mov	r7, r0
 80143d8:	6820      	ldr	r0, [r4, #0]
 80143da:	460e      	mov	r6, r1
 80143dc:	3018      	adds	r0, #24
 80143de:	2105      	movs	r1, #5
 80143e0:	f001 fdea 	bl	8015fb8 <__atomic_load_8>
 80143e4:	782b      	ldrb	r3, [r5, #0]
 80143e6:	9a02      	ldr	r2, [sp, #8]
 80143e8:	3b02      	subs	r3, #2
 80143ea:	2b01      	cmp	r3, #1
 80143ec:	460d      	mov	r5, r1
 80143ee:	9b03      	ldr	r3, [sp, #12]
 80143f0:	4682      	mov	sl, r0
 80143f2:	d937      	bls.n	8014464 <_rcl_timer_time_jump+0xd0>
 80143f4:	42ba      	cmp	r2, r7
 80143f6:	eb73 0106 	sbcs.w	r1, r3, r6
 80143fa:	da5f      	bge.n	80144bc <_rcl_timer_time_jump+0x128>
 80143fc:	454a      	cmp	r2, r9
 80143fe:	eb73 0108 	sbcs.w	r1, r3, r8
 8014402:	dad1      	bge.n	80143a8 <_rcl_timer_time_jump+0x14>
 8014404:	6820      	ldr	r0, [r4, #0]
 8014406:	eb1a 0202 	adds.w	r2, sl, r2
 801440a:	eb43 0305 	adc.w	r3, r3, r5
 801440e:	2505      	movs	r5, #5
 8014410:	3028      	adds	r0, #40	@ 0x28
 8014412:	9500      	str	r5, [sp, #0]
 8014414:	f001 fe06 	bl	8016024 <__atomic_store_8>
 8014418:	6820      	ldr	r0, [r4, #0]
 801441a:	9500      	str	r5, [sp, #0]
 801441c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014420:	3020      	adds	r0, #32
 8014422:	f001 fdff 	bl	8016024 <__atomic_store_8>
 8014426:	e7bf      	b.n	80143a8 <_rcl_timer_time_jump+0x14>
 8014428:	6813      	ldr	r3, [r2, #0]
 801442a:	a902      	add	r1, sp, #8
 801442c:	6818      	ldr	r0, [r3, #0]
 801442e:	f7ff fee5 	bl	80141fc <rcl_clock_get_now>
 8014432:	2800      	cmp	r0, #0
 8014434:	d1b8      	bne.n	80143a8 <_rcl_timer_time_jump+0x14>
 8014436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801443a:	4313      	orrs	r3, r2
 801443c:	d0b4      	beq.n	80143a8 <_rcl_timer_time_jump+0x14>
 801443e:	6820      	ldr	r0, [r4, #0]
 8014440:	2105      	movs	r1, #5
 8014442:	3028      	adds	r0, #40	@ 0x28
 8014444:	f001 fdb8 	bl	8015fb8 <__atomic_load_8>
 8014448:	9d02      	ldr	r5, [sp, #8]
 801444a:	9b03      	ldr	r3, [sp, #12]
 801444c:	4602      	mov	r2, r0
 801444e:	6820      	ldr	r0, [r4, #0]
 8014450:	1b52      	subs	r2, r2, r5
 8014452:	f04f 0405 	mov.w	r4, #5
 8014456:	9400      	str	r4, [sp, #0]
 8014458:	eb61 0303 	sbc.w	r3, r1, r3
 801445c:	3030      	adds	r0, #48	@ 0x30
 801445e:	f001 fde1 	bl	8016024 <__atomic_store_8>
 8014462:	e7a1      	b.n	80143a8 <_rcl_timer_time_jump+0x14>
 8014464:	4313      	orrs	r3, r2
 8014466:	d09f      	beq.n	80143a8 <_rcl_timer_time_jump+0x14>
 8014468:	6820      	ldr	r0, [r4, #0]
 801446a:	f04f 0805 	mov.w	r8, #5
 801446e:	2300      	movs	r3, #0
 8014470:	f8cd 8000 	str.w	r8, [sp]
 8014474:	3030      	adds	r0, #48	@ 0x30
 8014476:	2200      	movs	r2, #0
 8014478:	f001 fe0a 	bl	8016090 <__atomic_exchange_8>
 801447c:	ea51 0300 	orrs.w	r3, r1, r0
 8014480:	4606      	mov	r6, r0
 8014482:	460f      	mov	r7, r1
 8014484:	d090      	beq.n	80143a8 <_rcl_timer_time_jump+0x14>
 8014486:	9a02      	ldr	r2, [sp, #8]
 8014488:	9b03      	ldr	r3, [sp, #12]
 801448a:	f8cd 8000 	str.w	r8, [sp]
 801448e:	1a12      	subs	r2, r2, r0
 8014490:	6820      	ldr	r0, [r4, #0]
 8014492:	eb63 0301 	sbc.w	r3, r3, r1
 8014496:	eb12 020a 	adds.w	r2, r2, sl
 801449a:	eb43 0305 	adc.w	r3, r3, r5
 801449e:	3028      	adds	r0, #40	@ 0x28
 80144a0:	f001 fdc0 	bl	8016024 <__atomic_store_8>
 80144a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144a8:	f8cd 8000 	str.w	r8, [sp]
 80144ac:	6820      	ldr	r0, [r4, #0]
 80144ae:	1b92      	subs	r2, r2, r6
 80144b0:	eb63 0307 	sbc.w	r3, r3, r7
 80144b4:	3020      	adds	r0, #32
 80144b6:	f001 fdb5 	bl	8016024 <__atomic_store_8>
 80144ba:	e775      	b.n	80143a8 <_rcl_timer_time_jump+0x14>
 80144bc:	6820      	ldr	r0, [r4, #0]
 80144be:	3008      	adds	r0, #8
 80144c0:	f004 f870 	bl	80185a4 <rcl_trigger_guard_condition>
 80144c4:	e770      	b.n	80143a8 <_rcl_timer_time_jump+0x14>
 80144c6:	bf00      	nop

080144c8 <rcl_get_zero_initialized_timer>:
 80144c8:	4b01      	ldr	r3, [pc, #4]	@ (80144d0 <rcl_get_zero_initialized_timer+0x8>)
 80144ca:	6818      	ldr	r0, [r3, #0]
 80144cc:	4770      	bx	lr
 80144ce:	bf00      	nop
 80144d0:	0801b638 	.word	0x0801b638
 80144d4:	00000000 	.word	0x00000000

080144d8 <rcl_timer_init>:
 80144d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144dc:	b0aa      	sub	sp, #168	@ 0xa8
 80144de:	4604      	mov	r4, r0
 80144e0:	a835      	add	r0, sp, #212	@ 0xd4
 80144e2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80144e6:	460d      	mov	r5, r1
 80144e8:	4692      	mov	sl, r2
 80144ea:	f7f9 f88b 	bl	800d604 <rcutils_allocator_is_valid>
 80144ee:	2800      	cmp	r0, #0
 80144f0:	d064      	beq.n	80145bc <rcl_timer_init+0xe4>
 80144f2:	2c00      	cmp	r4, #0
 80144f4:	d062      	beq.n	80145bc <rcl_timer_init+0xe4>
 80144f6:	2d00      	cmp	r5, #0
 80144f8:	d060      	beq.n	80145bc <rcl_timer_init+0xe4>
 80144fa:	2f00      	cmp	r7, #0
 80144fc:	db5e      	blt.n	80145bc <rcl_timer_init+0xe4>
 80144fe:	6823      	ldr	r3, [r4, #0]
 8014500:	b123      	cbz	r3, 801450c <rcl_timer_init+0x34>
 8014502:	2664      	movs	r6, #100	@ 0x64
 8014504:	4630      	mov	r0, r6
 8014506:	b02a      	add	sp, #168	@ 0xa8
 8014508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801450c:	a908      	add	r1, sp, #32
 801450e:	4628      	mov	r0, r5
 8014510:	f7ff fe74 	bl	80141fc <rcl_clock_get_now>
 8014514:	4606      	mov	r6, r0
 8014516:	2800      	cmp	r0, #0
 8014518:	d1f4      	bne.n	8014504 <rcl_timer_init+0x2c>
 801451a:	ae06      	add	r6, sp, #24
 801451c:	4630      	mov	r0, r6
 801451e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8014522:	f003 ff47 	bl	80183b4 <rcl_get_zero_initialized_guard_condition>
 8014526:	e896 0003 	ldmia.w	r6, {r0, r1}
 801452a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801452e:	ae0b      	add	r6, sp, #44	@ 0x2c
 8014530:	e889 0003 	stmia.w	r9, {r0, r1}
 8014534:	4630      	mov	r0, r6
 8014536:	f004 f819 	bl	801856c <rcl_guard_condition_get_default_options>
 801453a:	ab0d      	add	r3, sp, #52	@ 0x34
 801453c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014540:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014544:	4651      	mov	r1, sl
 8014546:	e896 000c 	ldmia.w	r6, {r2, r3}
 801454a:	4648      	mov	r0, r9
 801454c:	f003 ff3c 	bl	80183c8 <rcl_guard_condition_init>
 8014550:	4606      	mov	r6, r0
 8014552:	2800      	cmp	r0, #0
 8014554:	d1d6      	bne.n	8014504 <rcl_timer_init+0x2c>
 8014556:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	2b01      	cmp	r3, #1
 801455c:	d033      	beq.n	80145c6 <rcl_timer_init+0xee>
 801455e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8014560:	911a      	str	r1, [sp, #104]	@ 0x68
 8014562:	4642      	mov	r2, r8
 8014564:	463b      	mov	r3, r7
 8014566:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801456a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801456e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8014620 <rcl_timer_init+0x148>
 8014572:	eb12 0008 	adds.w	r0, r2, r8
 8014576:	eb47 0103 	adc.w	r1, r7, r3
 801457a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 801457e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8014582:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8014586:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801458a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801458e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8014592:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014596:	f8de 3000 	ldr.w	r3, [lr]
 801459a:	f8cc 3000 	str.w	r3, [ip]
 801459e:	f04f 0a00 	mov.w	sl, #0
 80145a2:	4619      	mov	r1, r3
 80145a4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80145a8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80145aa:	2050      	movs	r0, #80	@ 0x50
 80145ac:	4798      	blx	r3
 80145ae:	6020      	str	r0, [r4, #0]
 80145b0:	b358      	cbz	r0, 801460a <rcl_timer_init+0x132>
 80145b2:	2250      	movs	r2, #80	@ 0x50
 80145b4:	a916      	add	r1, sp, #88	@ 0x58
 80145b6:	f004 ff26 	bl	8019406 <memcpy>
 80145ba:	e7a3      	b.n	8014504 <rcl_timer_init+0x2c>
 80145bc:	260b      	movs	r6, #11
 80145be:	4630      	mov	r0, r6
 80145c0:	b02a      	add	sp, #168	@ 0xa8
 80145c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145c6:	2001      	movs	r0, #1
 80145c8:	2100      	movs	r1, #0
 80145ca:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80145ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80145d2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80145d6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80145da:	4a13      	ldr	r2, [pc, #76]	@ (8014628 <rcl_timer_init+0x150>)
 80145dc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80145e0:	9405      	str	r4, [sp, #20]
 80145e2:	9204      	str	r2, [sp, #16]
 80145e4:	ab12      	add	r3, sp, #72	@ 0x48
 80145e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80145e8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80145ec:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80145f0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80145f4:	4628      	mov	r0, r5
 80145f6:	f7ff fe0d 	bl	8014214 <rcl_clock_add_jump_callback>
 80145fa:	4682      	mov	sl, r0
 80145fc:	2800      	cmp	r0, #0
 80145fe:	d0ae      	beq.n	801455e <rcl_timer_init+0x86>
 8014600:	4648      	mov	r0, r9
 8014602:	f003 ff8d 	bl	8018520 <rcl_guard_condition_fini>
 8014606:	4656      	mov	r6, sl
 8014608:	e77c      	b.n	8014504 <rcl_timer_init+0x2c>
 801460a:	4648      	mov	r0, r9
 801460c:	f003 ff88 	bl	8018520 <rcl_guard_condition_fini>
 8014610:	4905      	ldr	r1, [pc, #20]	@ (8014628 <rcl_timer_init+0x150>)
 8014612:	4622      	mov	r2, r4
 8014614:	4628      	mov	r0, r5
 8014616:	f7ff fe5f 	bl	80142d8 <rcl_clock_remove_jump_callback>
 801461a:	260a      	movs	r6, #10
 801461c:	e772      	b.n	8014504 <rcl_timer_init+0x2c>
 801461e:	bf00      	nop
	...
 8014628:	08014395 	.word	0x08014395

0801462c <rcl_timer_call>:
 801462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014630:	b087      	sub	sp, #28
 8014632:	2800      	cmp	r0, #0
 8014634:	d06d      	beq.n	8014712 <rcl_timer_call+0xe6>
 8014636:	6803      	ldr	r3, [r0, #0]
 8014638:	4604      	mov	r4, r0
 801463a:	2b00      	cmp	r3, #0
 801463c:	d063      	beq.n	8014706 <rcl_timer_call+0xda>
 801463e:	f3bf 8f5b 	dmb	ish
 8014642:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014646:	f3bf 8f5b 	dmb	ish
 801464a:	2b00      	cmp	r3, #0
 801464c:	d150      	bne.n	80146f0 <rcl_timer_call+0xc4>
 801464e:	6803      	ldr	r3, [r0, #0]
 8014650:	a904      	add	r1, sp, #16
 8014652:	6818      	ldr	r0, [r3, #0]
 8014654:	f7ff fdd2 	bl	80141fc <rcl_clock_get_now>
 8014658:	4605      	mov	r5, r0
 801465a:	2800      	cmp	r0, #0
 801465c:	d14a      	bne.n	80146f4 <rcl_timer_call+0xc8>
 801465e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014662:	2b00      	cmp	r3, #0
 8014664:	db4a      	blt.n	80146fc <rcl_timer_call+0xd0>
 8014666:	6820      	ldr	r0, [r4, #0]
 8014668:	f04f 0a05 	mov.w	sl, #5
 801466c:	f8cd a000 	str.w	sl, [sp]
 8014670:	3020      	adds	r0, #32
 8014672:	f001 fd0d 	bl	8016090 <__atomic_exchange_8>
 8014676:	6823      	ldr	r3, [r4, #0]
 8014678:	f3bf 8f5b 	dmb	ish
 801467c:	4680      	mov	r8, r0
 801467e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8014682:	f3bf 8f5b 	dmb	ish
 8014686:	6820      	ldr	r0, [r4, #0]
 8014688:	4689      	mov	r9, r1
 801468a:	3028      	adds	r0, #40	@ 0x28
 801468c:	4651      	mov	r1, sl
 801468e:	f001 fc93 	bl	8015fb8 <__atomic_load_8>
 8014692:	4606      	mov	r6, r0
 8014694:	6820      	ldr	r0, [r4, #0]
 8014696:	460f      	mov	r7, r1
 8014698:	3018      	adds	r0, #24
 801469a:	4651      	mov	r1, sl
 801469c:	f001 fc8c 	bl	8015fb8 <__atomic_load_8>
 80146a0:	1836      	adds	r6, r6, r0
 80146a2:	4602      	mov	r2, r0
 80146a4:	4682      	mov	sl, r0
 80146a6:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80146aa:	eb47 0701 	adc.w	r7, r7, r1
 80146ae:	4286      	cmp	r6, r0
 80146b0:	460b      	mov	r3, r1
 80146b2:	eb77 010c 	sbcs.w	r1, r7, ip
 80146b6:	da04      	bge.n	80146c2 <rcl_timer_call+0x96>
 80146b8:	ea53 0102 	orrs.w	r1, r3, r2
 80146bc:	d12e      	bne.n	801471c <rcl_timer_call+0xf0>
 80146be:	4606      	mov	r6, r0
 80146c0:	4667      	mov	r7, ip
 80146c2:	6820      	ldr	r0, [r4, #0]
 80146c4:	2105      	movs	r1, #5
 80146c6:	4632      	mov	r2, r6
 80146c8:	463b      	mov	r3, r7
 80146ca:	3028      	adds	r0, #40	@ 0x28
 80146cc:	9100      	str	r1, [sp, #0]
 80146ce:	f001 fca9 	bl	8016024 <__atomic_store_8>
 80146d2:	f1bb 0f00 	cmp.w	fp, #0
 80146d6:	d00d      	beq.n	80146f4 <rcl_timer_call+0xc8>
 80146d8:	9a04      	ldr	r2, [sp, #16]
 80146da:	9b05      	ldr	r3, [sp, #20]
 80146dc:	ebb2 0208 	subs.w	r2, r2, r8
 80146e0:	4620      	mov	r0, r4
 80146e2:	eb63 0309 	sbc.w	r3, r3, r9
 80146e6:	47d8      	blx	fp
 80146e8:	4628      	mov	r0, r5
 80146ea:	b007      	add	sp, #28
 80146ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146f0:	f240 3521 	movw	r5, #801	@ 0x321
 80146f4:	4628      	mov	r0, r5
 80146f6:	b007      	add	sp, #28
 80146f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146fc:	2501      	movs	r5, #1
 80146fe:	4628      	mov	r0, r5
 8014700:	b007      	add	sp, #28
 8014702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014706:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801470a:	4628      	mov	r0, r5
 801470c:	b007      	add	sp, #28
 801470e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014712:	250b      	movs	r5, #11
 8014714:	4628      	mov	r0, r5
 8014716:	b007      	add	sp, #28
 8014718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801471c:	1b80      	subs	r0, r0, r6
 801471e:	eb6c 0107 	sbc.w	r1, ip, r7
 8014722:	3801      	subs	r0, #1
 8014724:	f161 0100 	sbc.w	r1, r1, #0
 8014728:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801472c:	f7ec fa4c 	bl	8000bc8 <__aeabi_ldivmod>
 8014730:	9b02      	ldr	r3, [sp, #8]
 8014732:	3001      	adds	r0, #1
 8014734:	f141 0100 	adc.w	r1, r1, #0
 8014738:	fb00 f303 	mul.w	r3, r0, r3
 801473c:	fb01 330a 	mla	r3, r1, sl, r3
 8014740:	fba0 0a0a 	umull	r0, sl, r0, sl
 8014744:	1986      	adds	r6, r0, r6
 8014746:	4453      	add	r3, sl
 8014748:	eb43 0707 	adc.w	r7, r3, r7
 801474c:	e7b9      	b.n	80146c2 <rcl_timer_call+0x96>
 801474e:	bf00      	nop

08014750 <rcl_timer_is_ready>:
 8014750:	b570      	push	{r4, r5, r6, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	b378      	cbz	r0, 80147b6 <rcl_timer_is_ready+0x66>
 8014756:	6803      	ldr	r3, [r0, #0]
 8014758:	4604      	mov	r4, r0
 801475a:	b383      	cbz	r3, 80147be <rcl_timer_is_ready+0x6e>
 801475c:	460d      	mov	r5, r1
 801475e:	b351      	cbz	r1, 80147b6 <rcl_timer_is_ready+0x66>
 8014760:	f3bf 8f5b 	dmb	ish
 8014764:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014768:	f3bf 8f5b 	dmb	ish
 801476c:	b953      	cbnz	r3, 8014784 <rcl_timer_is_ready+0x34>
 801476e:	6803      	ldr	r3, [r0, #0]
 8014770:	4669      	mov	r1, sp
 8014772:	6818      	ldr	r0, [r3, #0]
 8014774:	f7ff fd42 	bl	80141fc <rcl_clock_get_now>
 8014778:	4606      	mov	r6, r0
 801477a:	b140      	cbz	r0, 801478e <rcl_timer_is_ready+0x3e>
 801477c:	f240 3321 	movw	r3, #801	@ 0x321
 8014780:	4298      	cmp	r0, r3
 8014782:	d101      	bne.n	8014788 <rcl_timer_is_ready+0x38>
 8014784:	2600      	movs	r6, #0
 8014786:	702e      	strb	r6, [r5, #0]
 8014788:	4630      	mov	r0, r6
 801478a:	b002      	add	sp, #8
 801478c:	bd70      	pop	{r4, r5, r6, pc}
 801478e:	6820      	ldr	r0, [r4, #0]
 8014790:	2105      	movs	r1, #5
 8014792:	3028      	adds	r0, #40	@ 0x28
 8014794:	f001 fc10 	bl	8015fb8 <__atomic_load_8>
 8014798:	9b00      	ldr	r3, [sp, #0]
 801479a:	1ac0      	subs	r0, r0, r3
 801479c:	9b01      	ldr	r3, [sp, #4]
 801479e:	eb61 0103 	sbc.w	r1, r1, r3
 80147a2:	2801      	cmp	r0, #1
 80147a4:	f171 0300 	sbcs.w	r3, r1, #0
 80147a8:	bfb4      	ite	lt
 80147aa:	2301      	movlt	r3, #1
 80147ac:	2300      	movge	r3, #0
 80147ae:	4630      	mov	r0, r6
 80147b0:	702b      	strb	r3, [r5, #0]
 80147b2:	b002      	add	sp, #8
 80147b4:	bd70      	pop	{r4, r5, r6, pc}
 80147b6:	260b      	movs	r6, #11
 80147b8:	4630      	mov	r0, r6
 80147ba:	b002      	add	sp, #8
 80147bc:	bd70      	pop	{r4, r5, r6, pc}
 80147be:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80147c2:	e7e1      	b.n	8014788 <rcl_timer_is_ready+0x38>

080147c4 <rcl_timer_get_time_until_next_call>:
 80147c4:	b570      	push	{r4, r5, r6, lr}
 80147c6:	b082      	sub	sp, #8
 80147c8:	b330      	cbz	r0, 8014818 <rcl_timer_get_time_until_next_call+0x54>
 80147ca:	6803      	ldr	r3, [r0, #0]
 80147cc:	4604      	mov	r4, r0
 80147ce:	b33b      	cbz	r3, 8014820 <rcl_timer_get_time_until_next_call+0x5c>
 80147d0:	460d      	mov	r5, r1
 80147d2:	b309      	cbz	r1, 8014818 <rcl_timer_get_time_until_next_call+0x54>
 80147d4:	f3bf 8f5b 	dmb	ish
 80147d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80147dc:	f3bf 8f5b 	dmb	ish
 80147e0:	b9ab      	cbnz	r3, 801480e <rcl_timer_get_time_until_next_call+0x4a>
 80147e2:	6803      	ldr	r3, [r0, #0]
 80147e4:	4669      	mov	r1, sp
 80147e6:	6818      	ldr	r0, [r3, #0]
 80147e8:	f7ff fd08 	bl	80141fc <rcl_clock_get_now>
 80147ec:	4606      	mov	r6, r0
 80147ee:	b958      	cbnz	r0, 8014808 <rcl_timer_get_time_until_next_call+0x44>
 80147f0:	6820      	ldr	r0, [r4, #0]
 80147f2:	2105      	movs	r1, #5
 80147f4:	3028      	adds	r0, #40	@ 0x28
 80147f6:	f001 fbdf 	bl	8015fb8 <__atomic_load_8>
 80147fa:	9b00      	ldr	r3, [sp, #0]
 80147fc:	1ac0      	subs	r0, r0, r3
 80147fe:	9b01      	ldr	r3, [sp, #4]
 8014800:	6028      	str	r0, [r5, #0]
 8014802:	eb61 0103 	sbc.w	r1, r1, r3
 8014806:	6069      	str	r1, [r5, #4]
 8014808:	4630      	mov	r0, r6
 801480a:	b002      	add	sp, #8
 801480c:	bd70      	pop	{r4, r5, r6, pc}
 801480e:	f240 3621 	movw	r6, #801	@ 0x321
 8014812:	4630      	mov	r0, r6
 8014814:	b002      	add	sp, #8
 8014816:	bd70      	pop	{r4, r5, r6, pc}
 8014818:	260b      	movs	r6, #11
 801481a:	4630      	mov	r0, r6
 801481c:	b002      	add	sp, #8
 801481e:	bd70      	pop	{r4, r5, r6, pc}
 8014820:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014824:	e7f0      	b.n	8014808 <rcl_timer_get_time_until_next_call+0x44>
 8014826:	bf00      	nop

08014828 <rcl_timer_get_guard_condition>:
 8014828:	b130      	cbz	r0, 8014838 <rcl_timer_get_guard_condition+0x10>
 801482a:	6800      	ldr	r0, [r0, #0]
 801482c:	b120      	cbz	r0, 8014838 <rcl_timer_get_guard_condition+0x10>
 801482e:	68c3      	ldr	r3, [r0, #12]
 8014830:	b10b      	cbz	r3, 8014836 <rcl_timer_get_guard_condition+0xe>
 8014832:	3008      	adds	r0, #8
 8014834:	4770      	bx	lr
 8014836:	4618      	mov	r0, r3
 8014838:	4770      	bx	lr
 801483a:	bf00      	nop

0801483c <rcl_validate_enclave_name_with_size>:
 801483c:	b378      	cbz	r0, 801489e <rcl_validate_enclave_name_with_size+0x62>
 801483e:	b570      	push	{r4, r5, r6, lr}
 8014840:	4615      	mov	r5, r2
 8014842:	b0c2      	sub	sp, #264	@ 0x108
 8014844:	b302      	cbz	r2, 8014888 <rcl_validate_enclave_name_with_size+0x4c>
 8014846:	461e      	mov	r6, r3
 8014848:	466a      	mov	r2, sp
 801484a:	ab01      	add	r3, sp, #4
 801484c:	460c      	mov	r4, r1
 801484e:	f002 f815 	bl	801687c <rmw_validate_namespace_with_size>
 8014852:	4684      	mov	ip, r0
 8014854:	b9e8      	cbnz	r0, 8014892 <rcl_validate_enclave_name_with_size+0x56>
 8014856:	9b00      	ldr	r3, [sp, #0]
 8014858:	b923      	cbnz	r3, 8014864 <rcl_validate_enclave_name_with_size+0x28>
 801485a:	2300      	movs	r3, #0
 801485c:	602b      	str	r3, [r5, #0]
 801485e:	4660      	mov	r0, ip
 8014860:	b042      	add	sp, #264	@ 0x108
 8014862:	bd70      	pop	{r4, r5, r6, pc}
 8014864:	2b07      	cmp	r3, #7
 8014866:	d007      	beq.n	8014878 <rcl_validate_enclave_name_with_size+0x3c>
 8014868:	1e5a      	subs	r2, r3, #1
 801486a:	2a05      	cmp	r2, #5
 801486c:	d833      	bhi.n	80148d6 <rcl_validate_enclave_name_with_size+0x9a>
 801486e:	e8df f002 	tbb	[pc, r2]
 8014872:	2c2f      	.short	0x2c2f
 8014874:	1a232629 	.word	0x1a232629
 8014878:	2cff      	cmp	r4, #255	@ 0xff
 801487a:	d9ee      	bls.n	801485a <rcl_validate_enclave_name_with_size+0x1e>
 801487c:	602b      	str	r3, [r5, #0]
 801487e:	2e00      	cmp	r6, #0
 8014880:	d0ed      	beq.n	801485e <rcl_validate_enclave_name_with_size+0x22>
 8014882:	23fe      	movs	r3, #254	@ 0xfe
 8014884:	6033      	str	r3, [r6, #0]
 8014886:	e7ea      	b.n	801485e <rcl_validate_enclave_name_with_size+0x22>
 8014888:	f04f 0c0b 	mov.w	ip, #11
 801488c:	4660      	mov	r0, ip
 801488e:	b042      	add	sp, #264	@ 0x108
 8014890:	bd70      	pop	{r4, r5, r6, pc}
 8014892:	f7fe fdaf 	bl	80133f4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014896:	4684      	mov	ip, r0
 8014898:	4660      	mov	r0, ip
 801489a:	b042      	add	sp, #264	@ 0x108
 801489c:	bd70      	pop	{r4, r5, r6, pc}
 801489e:	f04f 0c0b 	mov.w	ip, #11
 80148a2:	4660      	mov	r0, ip
 80148a4:	4770      	bx	lr
 80148a6:	2306      	movs	r3, #6
 80148a8:	602b      	str	r3, [r5, #0]
 80148aa:	2e00      	cmp	r6, #0
 80148ac:	d0d7      	beq.n	801485e <rcl_validate_enclave_name_with_size+0x22>
 80148ae:	9b01      	ldr	r3, [sp, #4]
 80148b0:	6033      	str	r3, [r6, #0]
 80148b2:	4660      	mov	r0, ip
 80148b4:	b042      	add	sp, #264	@ 0x108
 80148b6:	bd70      	pop	{r4, r5, r6, pc}
 80148b8:	2305      	movs	r3, #5
 80148ba:	602b      	str	r3, [r5, #0]
 80148bc:	e7f5      	b.n	80148aa <rcl_validate_enclave_name_with_size+0x6e>
 80148be:	2304      	movs	r3, #4
 80148c0:	602b      	str	r3, [r5, #0]
 80148c2:	e7f2      	b.n	80148aa <rcl_validate_enclave_name_with_size+0x6e>
 80148c4:	2303      	movs	r3, #3
 80148c6:	602b      	str	r3, [r5, #0]
 80148c8:	e7ef      	b.n	80148aa <rcl_validate_enclave_name_with_size+0x6e>
 80148ca:	2302      	movs	r3, #2
 80148cc:	602b      	str	r3, [r5, #0]
 80148ce:	e7ec      	b.n	80148aa <rcl_validate_enclave_name_with_size+0x6e>
 80148d0:	2301      	movs	r3, #1
 80148d2:	602b      	str	r3, [r5, #0]
 80148d4:	e7e9      	b.n	80148aa <rcl_validate_enclave_name_with_size+0x6e>
 80148d6:	4a04      	ldr	r2, [pc, #16]	@ (80148e8 <rcl_validate_enclave_name_with_size+0xac>)
 80148d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80148dc:	a802      	add	r0, sp, #8
 80148de:	f001 fd25 	bl	801632c <rcutils_snprintf>
 80148e2:	f04f 0c01 	mov.w	ip, #1
 80148e6:	e7ba      	b.n	801485e <rcl_validate_enclave_name_with_size+0x22>
 80148e8:	0801b63c 	.word	0x0801b63c

080148ec <rcl_validate_enclave_name>:
 80148ec:	b168      	cbz	r0, 801490a <rcl_validate_enclave_name+0x1e>
 80148ee:	b570      	push	{r4, r5, r6, lr}
 80148f0:	460d      	mov	r5, r1
 80148f2:	4616      	mov	r6, r2
 80148f4:	4604      	mov	r4, r0
 80148f6:	f7eb fc9d 	bl	8000234 <strlen>
 80148fa:	4633      	mov	r3, r6
 80148fc:	4601      	mov	r1, r0
 80148fe:	462a      	mov	r2, r5
 8014900:	4620      	mov	r0, r4
 8014902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014906:	f7ff bf99 	b.w	801483c <rcl_validate_enclave_name_with_size>
 801490a:	200b      	movs	r0, #11
 801490c:	4770      	bx	lr
 801490e:	bf00      	nop

08014910 <rcl_get_zero_initialized_wait_set>:
 8014910:	b510      	push	{r4, lr}
 8014912:	4c08      	ldr	r4, [pc, #32]	@ (8014934 <rcl_get_zero_initialized_wait_set+0x24>)
 8014914:	4686      	mov	lr, r0
 8014916:	4684      	mov	ip, r0
 8014918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801491a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801491e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014920:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014926:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801492a:	6823      	ldr	r3, [r4, #0]
 801492c:	f8cc 3000 	str.w	r3, [ip]
 8014930:	4670      	mov	r0, lr
 8014932:	bd10      	pop	{r4, pc}
 8014934:	0801b69c 	.word	0x0801b69c

08014938 <rcl_wait_set_is_valid>:
 8014938:	b118      	cbz	r0, 8014942 <rcl_wait_set_is_valid+0xa>
 801493a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801493c:	3800      	subs	r0, #0
 801493e:	bf18      	it	ne
 8014940:	2001      	movne	r0, #1
 8014942:	4770      	bx	lr

08014944 <rcl_wait_set_fini>:
 8014944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014948:	b082      	sub	sp, #8
 801494a:	2800      	cmp	r0, #0
 801494c:	f000 8095 	beq.w	8014a7a <rcl_wait_set_fini+0x136>
 8014950:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014952:	4604      	mov	r4, r0
 8014954:	2e00      	cmp	r6, #0
 8014956:	f000 808c 	beq.w	8014a72 <rcl_wait_set_fini+0x12e>
 801495a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801495c:	f002 fd48 	bl	80173f0 <rmw_destroy_wait_set>
 8014960:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014962:	1e06      	subs	r6, r0, #0
 8014964:	bf18      	it	ne
 8014966:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801496a:	2d00      	cmp	r5, #0
 801496c:	f000 8081 	beq.w	8014a72 <rcl_wait_set_fini+0x12e>
 8014970:	6820      	ldr	r0, [r4, #0]
 8014972:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014976:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014978:	2700      	movs	r7, #0
 801497a:	6067      	str	r7, [r4, #4]
 801497c:	602f      	str	r7, [r5, #0]
 801497e:	b120      	cbz	r0, 801498a <rcl_wait_set_fini+0x46>
 8014980:	9101      	str	r1, [sp, #4]
 8014982:	47c0      	blx	r8
 8014984:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014986:	9901      	ldr	r1, [sp, #4]
 8014988:	6027      	str	r7, [r4, #0]
 801498a:	68a8      	ldr	r0, [r5, #8]
 801498c:	b120      	cbz	r0, 8014998 <rcl_wait_set_fini+0x54>
 801498e:	47c0      	blx	r8
 8014990:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014992:	2300      	movs	r3, #0
 8014994:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014998:	68a0      	ldr	r0, [r4, #8]
 801499a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801499c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801499e:	f04f 0800 	mov.w	r8, #0
 80149a2:	f8c4 800c 	str.w	r8, [r4, #12]
 80149a6:	f8c5 800c 	str.w	r8, [r5, #12]
 80149aa:	b128      	cbz	r0, 80149b8 <rcl_wait_set_fini+0x74>
 80149ac:	47b8      	blx	r7
 80149ae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80149b0:	f8c4 8008 	str.w	r8, [r4, #8]
 80149b4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80149b6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80149b8:	6968      	ldr	r0, [r5, #20]
 80149ba:	f04f 0800 	mov.w	r8, #0
 80149be:	f8c5 8010 	str.w	r8, [r5, #16]
 80149c2:	b128      	cbz	r0, 80149d0 <rcl_wait_set_fini+0x8c>
 80149c4:	47b8      	blx	r7
 80149c6:	f8c5 8014 	str.w	r8, [r5, #20]
 80149ca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80149cc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80149ce:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80149d0:	6920      	ldr	r0, [r4, #16]
 80149d2:	f04f 0800 	mov.w	r8, #0
 80149d6:	f8c4 8014 	str.w	r8, [r4, #20]
 80149da:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80149de:	b128      	cbz	r0, 80149ec <rcl_wait_set_fini+0xa8>
 80149e0:	47b8      	blx	r7
 80149e2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80149e4:	f8c4 8010 	str.w	r8, [r4, #16]
 80149e8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80149ea:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80149ec:	69a0      	ldr	r0, [r4, #24]
 80149ee:	f04f 0800 	mov.w	r8, #0
 80149f2:	f8c4 801c 	str.w	r8, [r4, #28]
 80149f6:	f8c5 8018 	str.w	r8, [r5, #24]
 80149fa:	b128      	cbz	r0, 8014a08 <rcl_wait_set_fini+0xc4>
 80149fc:	9101      	str	r1, [sp, #4]
 80149fe:	47b8      	blx	r7
 8014a00:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a02:	9901      	ldr	r1, [sp, #4]
 8014a04:	f8c4 8018 	str.w	r8, [r4, #24]
 8014a08:	6a28      	ldr	r0, [r5, #32]
 8014a0a:	b120      	cbz	r0, 8014a16 <rcl_wait_set_fini+0xd2>
 8014a0c:	47b8      	blx	r7
 8014a0e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a10:	2300      	movs	r3, #0
 8014a12:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014a16:	6a20      	ldr	r0, [r4, #32]
 8014a18:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014a1c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014a1e:	2700      	movs	r7, #0
 8014a20:	6267      	str	r7, [r4, #36]	@ 0x24
 8014a22:	626f      	str	r7, [r5, #36]	@ 0x24
 8014a24:	b120      	cbz	r0, 8014a30 <rcl_wait_set_fini+0xec>
 8014a26:	9101      	str	r1, [sp, #4]
 8014a28:	47c0      	blx	r8
 8014a2a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a2c:	9901      	ldr	r1, [sp, #4]
 8014a2e:	6227      	str	r7, [r4, #32]
 8014a30:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8014a32:	b120      	cbz	r0, 8014a3e <rcl_wait_set_fini+0xfa>
 8014a34:	47c0      	blx	r8
 8014a36:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a38:	2300      	movs	r3, #0
 8014a3a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014a3e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014a40:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014a44:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014a46:	2700      	movs	r7, #0
 8014a48:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014a4a:	632f      	str	r7, [r5, #48]	@ 0x30
 8014a4c:	b120      	cbz	r0, 8014a58 <rcl_wait_set_fini+0x114>
 8014a4e:	9101      	str	r1, [sp, #4]
 8014a50:	47c0      	blx	r8
 8014a52:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a54:	9901      	ldr	r1, [sp, #4]
 8014a56:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014a58:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014a5a:	b120      	cbz	r0, 8014a66 <rcl_wait_set_fini+0x122>
 8014a5c:	47c0      	blx	r8
 8014a5e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a60:	2300      	movs	r3, #0
 8014a62:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8014a66:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014a68:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014a6a:	4628      	mov	r0, r5
 8014a6c:	4798      	blx	r3
 8014a6e:	2300      	movs	r3, #0
 8014a70:	6323      	str	r3, [r4, #48]	@ 0x30
 8014a72:	4630      	mov	r0, r6
 8014a74:	b002      	add	sp, #8
 8014a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a7a:	260b      	movs	r6, #11
 8014a7c:	4630      	mov	r0, r6
 8014a7e:	b002      	add	sp, #8
 8014a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a84 <rcl_wait_set_add_subscription>:
 8014a84:	b318      	cbz	r0, 8014ace <rcl_wait_set_add_subscription+0x4a>
 8014a86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014a88:	b570      	push	{r4, r5, r6, lr}
 8014a8a:	4604      	mov	r4, r0
 8014a8c:	b30b      	cbz	r3, 8014ad2 <rcl_wait_set_add_subscription+0x4e>
 8014a8e:	b319      	cbz	r1, 8014ad8 <rcl_wait_set_add_subscription+0x54>
 8014a90:	681d      	ldr	r5, [r3, #0]
 8014a92:	6840      	ldr	r0, [r0, #4]
 8014a94:	4285      	cmp	r5, r0
 8014a96:	d217      	bcs.n	8014ac8 <rcl_wait_set_add_subscription+0x44>
 8014a98:	6820      	ldr	r0, [r4, #0]
 8014a9a:	1c6e      	adds	r6, r5, #1
 8014a9c:	601e      	str	r6, [r3, #0]
 8014a9e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014aa2:	b102      	cbz	r2, 8014aa6 <rcl_wait_set_add_subscription+0x22>
 8014aa4:	6015      	str	r5, [r2, #0]
 8014aa6:	4608      	mov	r0, r1
 8014aa8:	f7ff fb08 	bl	80140bc <rcl_subscription_get_rmw_handle>
 8014aac:	b150      	cbz	r0, 8014ac4 <rcl_wait_set_add_subscription+0x40>
 8014aae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ab0:	6842      	ldr	r2, [r0, #4]
 8014ab2:	689b      	ldr	r3, [r3, #8]
 8014ab4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014ab8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014aba:	6853      	ldr	r3, [r2, #4]
 8014abc:	3301      	adds	r3, #1
 8014abe:	2000      	movs	r0, #0
 8014ac0:	6053      	str	r3, [r2, #4]
 8014ac2:	bd70      	pop	{r4, r5, r6, pc}
 8014ac4:	2001      	movs	r0, #1
 8014ac6:	bd70      	pop	{r4, r5, r6, pc}
 8014ac8:	f240 3086 	movw	r0, #902	@ 0x386
 8014acc:	bd70      	pop	{r4, r5, r6, pc}
 8014ace:	200b      	movs	r0, #11
 8014ad0:	4770      	bx	lr
 8014ad2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014ad6:	bd70      	pop	{r4, r5, r6, pc}
 8014ad8:	200b      	movs	r0, #11
 8014ada:	bd70      	pop	{r4, r5, r6, pc}

08014adc <rcl_wait_set_clear>:
 8014adc:	2800      	cmp	r0, #0
 8014ade:	d073      	beq.n	8014bc8 <rcl_wait_set_clear+0xec>
 8014ae0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014ae2:	b510      	push	{r4, lr}
 8014ae4:	4604      	mov	r4, r0
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d070      	beq.n	8014bcc <rcl_wait_set_clear+0xf0>
 8014aea:	6800      	ldr	r0, [r0, #0]
 8014aec:	b138      	cbz	r0, 8014afe <rcl_wait_set_clear+0x22>
 8014aee:	6862      	ldr	r2, [r4, #4]
 8014af0:	2100      	movs	r1, #0
 8014af2:	0092      	lsls	r2, r2, #2
 8014af4:	f004 fbbe 	bl	8019274 <memset>
 8014af8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014afa:	2200      	movs	r2, #0
 8014afc:	601a      	str	r2, [r3, #0]
 8014afe:	68a0      	ldr	r0, [r4, #8]
 8014b00:	b138      	cbz	r0, 8014b12 <rcl_wait_set_clear+0x36>
 8014b02:	68e2      	ldr	r2, [r4, #12]
 8014b04:	2100      	movs	r1, #0
 8014b06:	0092      	lsls	r2, r2, #2
 8014b08:	f004 fbb4 	bl	8019274 <memset>
 8014b0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b0e:	2200      	movs	r2, #0
 8014b10:	60da      	str	r2, [r3, #12]
 8014b12:	69a0      	ldr	r0, [r4, #24]
 8014b14:	b138      	cbz	r0, 8014b26 <rcl_wait_set_clear+0x4a>
 8014b16:	69e2      	ldr	r2, [r4, #28]
 8014b18:	2100      	movs	r1, #0
 8014b1a:	0092      	lsls	r2, r2, #2
 8014b1c:	f004 fbaa 	bl	8019274 <memset>
 8014b20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b22:	2200      	movs	r2, #0
 8014b24:	619a      	str	r2, [r3, #24]
 8014b26:	6a20      	ldr	r0, [r4, #32]
 8014b28:	b138      	cbz	r0, 8014b3a <rcl_wait_set_clear+0x5e>
 8014b2a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014b2c:	2100      	movs	r1, #0
 8014b2e:	0092      	lsls	r2, r2, #2
 8014b30:	f004 fba0 	bl	8019274 <memset>
 8014b34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b36:	2200      	movs	r2, #0
 8014b38:	625a      	str	r2, [r3, #36]	@ 0x24
 8014b3a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014b3c:	b138      	cbz	r0, 8014b4e <rcl_wait_set_clear+0x72>
 8014b3e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014b40:	2100      	movs	r1, #0
 8014b42:	0092      	lsls	r2, r2, #2
 8014b44:	f004 fb96 	bl	8019274 <memset>
 8014b48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8014b4e:	6920      	ldr	r0, [r4, #16]
 8014b50:	b138      	cbz	r0, 8014b62 <rcl_wait_set_clear+0x86>
 8014b52:	6962      	ldr	r2, [r4, #20]
 8014b54:	2100      	movs	r1, #0
 8014b56:	0092      	lsls	r2, r2, #2
 8014b58:	f004 fb8c 	bl	8019274 <memset>
 8014b5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b5e:	2200      	movs	r2, #0
 8014b60:	641a      	str	r2, [r3, #64]	@ 0x40
 8014b62:	6898      	ldr	r0, [r3, #8]
 8014b64:	b138      	cbz	r0, 8014b76 <rcl_wait_set_clear+0x9a>
 8014b66:	685a      	ldr	r2, [r3, #4]
 8014b68:	2100      	movs	r1, #0
 8014b6a:	0092      	lsls	r2, r2, #2
 8014b6c:	f004 fb82 	bl	8019274 <memset>
 8014b70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b72:	2200      	movs	r2, #0
 8014b74:	605a      	str	r2, [r3, #4]
 8014b76:	6958      	ldr	r0, [r3, #20]
 8014b78:	b138      	cbz	r0, 8014b8a <rcl_wait_set_clear+0xae>
 8014b7a:	691a      	ldr	r2, [r3, #16]
 8014b7c:	2100      	movs	r1, #0
 8014b7e:	0092      	lsls	r2, r2, #2
 8014b80:	f004 fb78 	bl	8019274 <memset>
 8014b84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b86:	2200      	movs	r2, #0
 8014b88:	611a      	str	r2, [r3, #16]
 8014b8a:	6a18      	ldr	r0, [r3, #32]
 8014b8c:	b138      	cbz	r0, 8014b9e <rcl_wait_set_clear+0xc2>
 8014b8e:	69da      	ldr	r2, [r3, #28]
 8014b90:	2100      	movs	r1, #0
 8014b92:	0092      	lsls	r2, r2, #2
 8014b94:	f004 fb6e 	bl	8019274 <memset>
 8014b98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	61da      	str	r2, [r3, #28]
 8014b9e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014ba0:	b138      	cbz	r0, 8014bb2 <rcl_wait_set_clear+0xd6>
 8014ba2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014ba4:	2100      	movs	r1, #0
 8014ba6:	0092      	lsls	r2, r2, #2
 8014ba8:	f004 fb64 	bl	8019274 <memset>
 8014bac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014bae:	2200      	movs	r2, #0
 8014bb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8014bb2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014bb4:	b138      	cbz	r0, 8014bc6 <rcl_wait_set_clear+0xea>
 8014bb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014bb8:	2100      	movs	r1, #0
 8014bba:	0092      	lsls	r2, r2, #2
 8014bbc:	f004 fb5a 	bl	8019274 <memset>
 8014bc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014bc2:	2000      	movs	r0, #0
 8014bc4:	6358      	str	r0, [r3, #52]	@ 0x34
 8014bc6:	bd10      	pop	{r4, pc}
 8014bc8:	200b      	movs	r0, #11
 8014bca:	4770      	bx	lr
 8014bcc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014bd0:	bd10      	pop	{r4, pc}
 8014bd2:	bf00      	nop

08014bd4 <rcl_wait_set_resize>:
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	f000 8185 	beq.w	8014ee4 <rcl_wait_set_resize+0x310>
 8014bda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bde:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8014be0:	b083      	sub	sp, #12
 8014be2:	4605      	mov	r5, r0
 8014be4:	2c00      	cmp	r4, #0
 8014be6:	f000 817f 	beq.w	8014ee8 <rcl_wait_set_resize+0x314>
 8014bea:	f04f 0900 	mov.w	r9, #0
 8014bee:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8014bf2:	461f      	mov	r7, r3
 8014bf4:	4688      	mov	r8, r1
 8014bf6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8014bfa:	4616      	mov	r6, r2
 8014bfc:	f8c0 9004 	str.w	r9, [r0, #4]
 8014c00:	f8c4 9000 	str.w	r9, [r4]
 8014c04:	2900      	cmp	r1, #0
 8014c06:	f000 80bd 	beq.w	8014d84 <rcl_wait_set_resize+0x1b0>
 8014c0a:	008c      	lsls	r4, r1, #2
 8014c0c:	6800      	ldr	r0, [r0, #0]
 8014c0e:	9301      	str	r3, [sp, #4]
 8014c10:	4652      	mov	r2, sl
 8014c12:	4621      	mov	r1, r4
 8014c14:	4798      	blx	r3
 8014c16:	9b01      	ldr	r3, [sp, #4]
 8014c18:	6028      	str	r0, [r5, #0]
 8014c1a:	2800      	cmp	r0, #0
 8014c1c:	f000 80cb 	beq.w	8014db6 <rcl_wait_set_resize+0x1e2>
 8014c20:	4622      	mov	r2, r4
 8014c22:	4649      	mov	r1, r9
 8014c24:	9301      	str	r3, [sp, #4]
 8014c26:	f004 fb25 	bl	8019274 <memset>
 8014c2a:	f8c5 8004 	str.w	r8, [r5, #4]
 8014c2e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8014c32:	9b01      	ldr	r3, [sp, #4]
 8014c34:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014c38:	f8c8 9004 	str.w	r9, [r8, #4]
 8014c3c:	4652      	mov	r2, sl
 8014c3e:	4621      	mov	r1, r4
 8014c40:	4798      	blx	r3
 8014c42:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014c44:	f8c8 0008 	str.w	r0, [r8, #8]
 8014c48:	689b      	ldr	r3, [r3, #8]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	f000 80ac 	beq.w	8014da8 <rcl_wait_set_resize+0x1d4>
 8014c50:	4622      	mov	r2, r4
 8014c52:	4649      	mov	r1, r9
 8014c54:	4618      	mov	r0, r3
 8014c56:	f004 fb0d 	bl	8019274 <memset>
 8014c5a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c5c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c60:	f04f 0800 	mov.w	r8, #0
 8014c64:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014c68:	f8c5 800c 	str.w	r8, [r5, #12]
 8014c6c:	f8c4 800c 	str.w	r8, [r4, #12]
 8014c70:	2e00      	cmp	r6, #0
 8014c72:	f040 80a4 	bne.w	8014dbe <rcl_wait_set_resize+0x1ea>
 8014c76:	68a8      	ldr	r0, [r5, #8]
 8014c78:	b128      	cbz	r0, 8014c86 <rcl_wait_set_resize+0xb2>
 8014c7a:	4649      	mov	r1, r9
 8014c7c:	4790      	blx	r2
 8014c7e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c80:	60ae      	str	r6, [r5, #8]
 8014c82:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c86:	f04f 0800 	mov.w	r8, #0
 8014c8a:	19f6      	adds	r6, r6, r7
 8014c8c:	f8c4 8010 	str.w	r8, [r4, #16]
 8014c90:	f040 80ac 	bne.w	8014dec <rcl_wait_set_resize+0x218>
 8014c94:	6960      	ldr	r0, [r4, #20]
 8014c96:	b130      	cbz	r0, 8014ca6 <rcl_wait_set_resize+0xd2>
 8014c98:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014c9a:	4649      	mov	r1, r9
 8014c9c:	4798      	blx	r3
 8014c9e:	6166      	str	r6, [r4, #20]
 8014ca0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ca2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014ca6:	2600      	movs	r6, #0
 8014ca8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014cac:	616e      	str	r6, [r5, #20]
 8014cae:	6426      	str	r6, [r4, #64]	@ 0x40
 8014cb0:	2f00      	cmp	r7, #0
 8014cb2:	f040 80ad 	bne.w	8014e10 <rcl_wait_set_resize+0x23c>
 8014cb6:	6928      	ldr	r0, [r5, #16]
 8014cb8:	b138      	cbz	r0, 8014cca <rcl_wait_set_resize+0xf6>
 8014cba:	4649      	mov	r1, r9
 8014cbc:	47d0      	blx	sl
 8014cbe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014cc0:	612f      	str	r7, [r5, #16]
 8014cc2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014cc6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014cca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ccc:	2600      	movs	r6, #0
 8014cce:	61ee      	str	r6, [r5, #28]
 8014cd0:	61a6      	str	r6, [r4, #24]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	f040 80af 	bne.w	8014e36 <rcl_wait_set_resize+0x262>
 8014cd8:	69a8      	ldr	r0, [r5, #24]
 8014cda:	b120      	cbz	r0, 8014ce6 <rcl_wait_set_resize+0x112>
 8014cdc:	4649      	mov	r1, r9
 8014cde:	47d0      	blx	sl
 8014ce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ce2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ce4:	61ab      	str	r3, [r5, #24]
 8014ce6:	6a20      	ldr	r0, [r4, #32]
 8014ce8:	b128      	cbz	r0, 8014cf6 <rcl_wait_set_resize+0x122>
 8014cea:	4649      	mov	r1, r9
 8014cec:	47d0      	blx	sl
 8014cee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014cf8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014cfa:	2600      	movs	r6, #0
 8014cfc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014d00:	626e      	str	r6, [r5, #36]	@ 0x24
 8014d02:	6266      	str	r6, [r4, #36]	@ 0x24
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	f000 80b6 	beq.w	8014e76 <rcl_wait_set_resize+0x2a2>
 8014d0a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014d0e:	6a28      	ldr	r0, [r5, #32]
 8014d10:	463a      	mov	r2, r7
 8014d12:	4651      	mov	r1, sl
 8014d14:	47c8      	blx	r9
 8014d16:	6228      	str	r0, [r5, #32]
 8014d18:	2800      	cmp	r0, #0
 8014d1a:	d04c      	beq.n	8014db6 <rcl_wait_set_resize+0x1e2>
 8014d1c:	4652      	mov	r2, sl
 8014d1e:	4631      	mov	r1, r6
 8014d20:	f004 faa8 	bl	8019274 <memset>
 8014d24:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014d28:	626b      	str	r3, [r5, #36]	@ 0x24
 8014d2a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014d2c:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014d2e:	463a      	mov	r2, r7
 8014d30:	4651      	mov	r1, sl
 8014d32:	47c8      	blx	r9
 8014d34:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d36:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014d38:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014d3a:	2c00      	cmp	r4, #0
 8014d3c:	f000 80f0 	beq.w	8014f20 <rcl_wait_set_resize+0x34c>
 8014d40:	4620      	mov	r0, r4
 8014d42:	4652      	mov	r2, sl
 8014d44:	4631      	mov	r1, r6
 8014d46:	f004 fa95 	bl	8019274 <memset>
 8014d4a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d4e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014d50:	2600      	movs	r6, #0
 8014d52:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014d56:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014d58:	6326      	str	r6, [r4, #48]	@ 0x30
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	f040 809d 	bne.w	8014e9a <rcl_wait_set_resize+0x2c6>
 8014d60:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014d62:	b120      	cbz	r0, 8014d6e <rcl_wait_set_resize+0x19a>
 8014d64:	4639      	mov	r1, r7
 8014d66:	47c0      	blx	r8
 8014d68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d6a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d6c:	62ab      	str	r3, [r5, #40]	@ 0x28
 8014d6e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014d70:	b310      	cbz	r0, 8014db8 <rcl_wait_set_resize+0x1e4>
 8014d72:	4639      	mov	r1, r7
 8014d74:	47c0      	blx	r8
 8014d76:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d78:	2000      	movs	r0, #0
 8014d7a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8014d7e:	b003      	add	sp, #12
 8014d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d84:	6800      	ldr	r0, [r0, #0]
 8014d86:	b120      	cbz	r0, 8014d92 <rcl_wait_set_resize+0x1be>
 8014d88:	4651      	mov	r1, sl
 8014d8a:	47d8      	blx	fp
 8014d8c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d8e:	f8c5 8000 	str.w	r8, [r5]
 8014d92:	68a0      	ldr	r0, [r4, #8]
 8014d94:	2800      	cmp	r0, #0
 8014d96:	f43f af61 	beq.w	8014c5c <rcl_wait_set_resize+0x88>
 8014d9a:	4651      	mov	r1, sl
 8014d9c:	47d8      	blx	fp
 8014d9e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014da0:	2300      	movs	r3, #0
 8014da2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8014da6:	e759      	b.n	8014c5c <rcl_wait_set_resize+0x88>
 8014da8:	6828      	ldr	r0, [r5, #0]
 8014daa:	9301      	str	r3, [sp, #4]
 8014dac:	4651      	mov	r1, sl
 8014dae:	47d8      	blx	fp
 8014db0:	9b01      	ldr	r3, [sp, #4]
 8014db2:	e9c5 3300 	strd	r3, r3, [r5]
 8014db6:	200a      	movs	r0, #10
 8014db8:	b003      	add	sp, #12
 8014dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dbe:	00b4      	lsls	r4, r6, #2
 8014dc0:	68a8      	ldr	r0, [r5, #8]
 8014dc2:	464a      	mov	r2, r9
 8014dc4:	4621      	mov	r1, r4
 8014dc6:	4798      	blx	r3
 8014dc8:	60a8      	str	r0, [r5, #8]
 8014dca:	2800      	cmp	r0, #0
 8014dcc:	d0f3      	beq.n	8014db6 <rcl_wait_set_resize+0x1e2>
 8014dce:	4622      	mov	r2, r4
 8014dd0:	4641      	mov	r1, r8
 8014dd2:	f004 fa4f 	bl	8019274 <memset>
 8014dd6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014dd8:	60ee      	str	r6, [r5, #12]
 8014dda:	f04f 0800 	mov.w	r8, #0
 8014dde:	19f6      	adds	r6, r6, r7
 8014de0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014de4:	f8c4 8010 	str.w	r8, [r4, #16]
 8014de8:	f43f af54 	beq.w	8014c94 <rcl_wait_set_resize+0xc0>
 8014dec:	00b6      	lsls	r6, r6, #2
 8014dee:	464a      	mov	r2, r9
 8014df0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014df2:	6960      	ldr	r0, [r4, #20]
 8014df4:	4631      	mov	r1, r6
 8014df6:	4798      	blx	r3
 8014df8:	4681      	mov	r9, r0
 8014dfa:	6160      	str	r0, [r4, #20]
 8014dfc:	2800      	cmp	r0, #0
 8014dfe:	d076      	beq.n	8014eee <rcl_wait_set_resize+0x31a>
 8014e00:	4632      	mov	r2, r6
 8014e02:	4641      	mov	r1, r8
 8014e04:	f004 fa36 	bl	8019274 <memset>
 8014e08:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e0a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014e0e:	e74a      	b.n	8014ca6 <rcl_wait_set_resize+0xd2>
 8014e10:	00bc      	lsls	r4, r7, #2
 8014e12:	6928      	ldr	r0, [r5, #16]
 8014e14:	464a      	mov	r2, r9
 8014e16:	4621      	mov	r1, r4
 8014e18:	47c0      	blx	r8
 8014e1a:	6128      	str	r0, [r5, #16]
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	d0ca      	beq.n	8014db6 <rcl_wait_set_resize+0x1e2>
 8014e20:	4622      	mov	r2, r4
 8014e22:	4631      	mov	r1, r6
 8014e24:	f004 fa26 	bl	8019274 <memset>
 8014e28:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e2a:	616f      	str	r7, [r5, #20]
 8014e2c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014e30:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014e34:	e749      	b.n	8014cca <rcl_wait_set_resize+0xf6>
 8014e36:	009c      	lsls	r4, r3, #2
 8014e38:	69a8      	ldr	r0, [r5, #24]
 8014e3a:	464a      	mov	r2, r9
 8014e3c:	4621      	mov	r1, r4
 8014e3e:	47c0      	blx	r8
 8014e40:	61a8      	str	r0, [r5, #24]
 8014e42:	2800      	cmp	r0, #0
 8014e44:	d0b7      	beq.n	8014db6 <rcl_wait_set_resize+0x1e2>
 8014e46:	4622      	mov	r2, r4
 8014e48:	4631      	mov	r1, r6
 8014e4a:	f004 fa13 	bl	8019274 <memset>
 8014e4e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014e50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e52:	61eb      	str	r3, [r5, #28]
 8014e54:	6a38      	ldr	r0, [r7, #32]
 8014e56:	61fe      	str	r6, [r7, #28]
 8014e58:	464a      	mov	r2, r9
 8014e5a:	4621      	mov	r1, r4
 8014e5c:	47c0      	blx	r8
 8014e5e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014e60:	6238      	str	r0, [r7, #32]
 8014e62:	6a1f      	ldr	r7, [r3, #32]
 8014e64:	2f00      	cmp	r7, #0
 8014e66:	d054      	beq.n	8014f12 <rcl_wait_set_resize+0x33e>
 8014e68:	4622      	mov	r2, r4
 8014e6a:	4631      	mov	r1, r6
 8014e6c:	4638      	mov	r0, r7
 8014e6e:	f004 fa01 	bl	8019274 <memset>
 8014e72:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e74:	e73f      	b.n	8014cf6 <rcl_wait_set_resize+0x122>
 8014e76:	6a28      	ldr	r0, [r5, #32]
 8014e78:	b120      	cbz	r0, 8014e84 <rcl_wait_set_resize+0x2b0>
 8014e7a:	4639      	mov	r1, r7
 8014e7c:	47c0      	blx	r8
 8014e7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e80:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e82:	622b      	str	r3, [r5, #32]
 8014e84:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014e86:	2800      	cmp	r0, #0
 8014e88:	f43f af60 	beq.w	8014d4c <rcl_wait_set_resize+0x178>
 8014e8c:	4639      	mov	r1, r7
 8014e8e:	47c0      	blx	r8
 8014e90:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e92:	2300      	movs	r3, #0
 8014e94:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014e98:	e758      	b.n	8014d4c <rcl_wait_set_resize+0x178>
 8014e9a:	009c      	lsls	r4, r3, #2
 8014e9c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014e9e:	463a      	mov	r2, r7
 8014ea0:	4621      	mov	r1, r4
 8014ea2:	47c8      	blx	r9
 8014ea4:	62a8      	str	r0, [r5, #40]	@ 0x28
 8014ea6:	2800      	cmp	r0, #0
 8014ea8:	d085      	beq.n	8014db6 <rcl_wait_set_resize+0x1e2>
 8014eaa:	4622      	mov	r2, r4
 8014eac:	4631      	mov	r1, r6
 8014eae:	f004 f9e1 	bl	8019274 <memset>
 8014eb2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8014eb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014eb8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8014eba:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8014ebe:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8014ec2:	463a      	mov	r2, r7
 8014ec4:	4621      	mov	r1, r4
 8014ec6:	47c8      	blx	r9
 8014ec8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014eca:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8014ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ed0:	b36b      	cbz	r3, 8014f2e <rcl_wait_set_resize+0x35a>
 8014ed2:	4622      	mov	r2, r4
 8014ed4:	4631      	mov	r1, r6
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	f004 f9cc 	bl	8019274 <memset>
 8014edc:	4630      	mov	r0, r6
 8014ede:	b003      	add	sp, #12
 8014ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ee4:	200b      	movs	r0, #11
 8014ee6:	4770      	bx	lr
 8014ee8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014eec:	e764      	b.n	8014db8 <rcl_wait_set_resize+0x1e4>
 8014eee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014ef0:	68a8      	ldr	r0, [r5, #8]
 8014ef2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ef6:	4798      	blx	r3
 8014ef8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014efa:	6928      	ldr	r0, [r5, #16]
 8014efc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014efe:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014f00:	f8c5 900c 	str.w	r9, [r5, #12]
 8014f04:	f8c5 9008 	str.w	r9, [r5, #8]
 8014f08:	4790      	blx	r2
 8014f0a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8014f0e:	200a      	movs	r0, #10
 8014f10:	e752      	b.n	8014db8 <rcl_wait_set_resize+0x1e4>
 8014f12:	69a8      	ldr	r0, [r5, #24]
 8014f14:	4649      	mov	r1, r9
 8014f16:	47d0      	blx	sl
 8014f18:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8014f1c:	200a      	movs	r0, #10
 8014f1e:	e74b      	b.n	8014db8 <rcl_wait_set_resize+0x1e4>
 8014f20:	6a28      	ldr	r0, [r5, #32]
 8014f22:	4639      	mov	r1, r7
 8014f24:	47c0      	blx	r8
 8014f26:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8014f2a:	200a      	movs	r0, #10
 8014f2c:	e744      	b.n	8014db8 <rcl_wait_set_resize+0x1e4>
 8014f2e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014f30:	9301      	str	r3, [sp, #4]
 8014f32:	4639      	mov	r1, r7
 8014f34:	47c0      	blx	r8
 8014f36:	9b01      	ldr	r3, [sp, #4]
 8014f38:	200a      	movs	r0, #10
 8014f3a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014f3e:	e73b      	b.n	8014db8 <rcl_wait_set_resize+0x1e4>

08014f40 <rcl_wait_set_init>:
 8014f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f44:	b084      	sub	sp, #16
 8014f46:	4604      	mov	r4, r0
 8014f48:	a810      	add	r0, sp, #64	@ 0x40
 8014f4a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8014f4e:	460f      	mov	r7, r1
 8014f50:	4690      	mov	r8, r2
 8014f52:	4699      	mov	r9, r3
 8014f54:	f7f8 fb56 	bl	800d604 <rcutils_allocator_is_valid>
 8014f58:	2800      	cmp	r0, #0
 8014f5a:	d06b      	beq.n	8015034 <rcl_wait_set_init+0xf4>
 8014f5c:	2c00      	cmp	r4, #0
 8014f5e:	d069      	beq.n	8015034 <rcl_wait_set_init+0xf4>
 8014f60:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014f62:	b125      	cbz	r5, 8014f6e <rcl_wait_set_init+0x2e>
 8014f64:	2564      	movs	r5, #100	@ 0x64
 8014f66:	4628      	mov	r0, r5
 8014f68:	b004      	add	sp, #16
 8014f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f6e:	f1ba 0f00 	cmp.w	sl, #0
 8014f72:	d05f      	beq.n	8015034 <rcl_wait_set_init+0xf4>
 8014f74:	4650      	mov	r0, sl
 8014f76:	f7fe fa5b 	bl	8013430 <rcl_context_is_valid>
 8014f7a:	2800      	cmp	r0, #0
 8014f7c:	d067      	beq.n	801504e <rcl_wait_set_init+0x10e>
 8014f7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014f80:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8014f82:	205c      	movs	r0, #92	@ 0x5c
 8014f84:	4798      	blx	r3
 8014f86:	6320      	str	r0, [r4, #48]	@ 0x30
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	d062      	beq.n	8015052 <rcl_wait_set_init+0x112>
 8014f8c:	4629      	mov	r1, r5
 8014f8e:	225c      	movs	r2, #92	@ 0x5c
 8014f90:	f004 f970 	bl	8019274 <memset>
 8014f94:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014f98:	eb03 0e02 	add.w	lr, r3, r2
 8014f9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f9e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014fa0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014fa4:	449e      	add	lr, r3
 8014fa6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014faa:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014fae:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8014fb2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014fb6:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8014fba:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8014fbe:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8014fc2:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8014fc6:	f8da a000 	ldr.w	sl, [sl]
 8014fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014fcc:	44c6      	add	lr, r8
 8014fce:	f8dc 3000 	ldr.w	r3, [ip]
 8014fd2:	602b      	str	r3, [r5, #0]
 8014fd4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8014fd8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8014fdc:	f002 f9fe 	bl	80173dc <rmw_create_wait_set>
 8014fe0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fe2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8014fe4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014fe6:	b350      	cbz	r0, 801503e <rcl_wait_set_init+0xfe>
 8014fe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fea:	9302      	str	r3, [sp, #8]
 8014fec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014fee:	9301      	str	r3, [sp, #4]
 8014ff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ff2:	9300      	str	r3, [sp, #0]
 8014ff4:	4642      	mov	r2, r8
 8014ff6:	464b      	mov	r3, r9
 8014ff8:	4639      	mov	r1, r7
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	f7ff fdea 	bl	8014bd4 <rcl_wait_set_resize>
 8015000:	4605      	mov	r5, r0
 8015002:	2800      	cmp	r0, #0
 8015004:	d0af      	beq.n	8014f66 <rcl_wait_set_init+0x26>
 8015006:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015008:	bb2b      	cbnz	r3, 8015056 <rcl_wait_set_init+0x116>
 801500a:	2600      	movs	r6, #0
 801500c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015010:	9600      	str	r6, [sp, #0]
 8015012:	4633      	mov	r3, r6
 8015014:	4632      	mov	r2, r6
 8015016:	4631      	mov	r1, r6
 8015018:	4620      	mov	r0, r4
 801501a:	f7ff fddb 	bl	8014bd4 <rcl_wait_set_resize>
 801501e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015020:	2800      	cmp	r0, #0
 8015022:	d0a0      	beq.n	8014f66 <rcl_wait_set_init+0x26>
 8015024:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015026:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015028:	4798      	blx	r3
 801502a:	4628      	mov	r0, r5
 801502c:	6326      	str	r6, [r4, #48]	@ 0x30
 801502e:	b004      	add	sp, #16
 8015030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015034:	250b      	movs	r5, #11
 8015036:	4628      	mov	r0, r5
 8015038:	b004      	add	sp, #16
 801503a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801503e:	2501      	movs	r5, #1
 8015040:	f002 f9d6 	bl	80173f0 <rmw_destroy_wait_set>
 8015044:	2800      	cmp	r0, #0
 8015046:	bf18      	it	ne
 8015048:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801504c:	e7dd      	b.n	801500a <rcl_wait_set_init+0xca>
 801504e:	2565      	movs	r5, #101	@ 0x65
 8015050:	e789      	b.n	8014f66 <rcl_wait_set_init+0x26>
 8015052:	250a      	movs	r5, #10
 8015054:	e787      	b.n	8014f66 <rcl_wait_set_init+0x26>
 8015056:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015058:	e7f2      	b.n	8015040 <rcl_wait_set_init+0x100>
 801505a:	bf00      	nop

0801505c <rcl_wait_set_add_guard_condition>:
 801505c:	b318      	cbz	r0, 80150a6 <rcl_wait_set_add_guard_condition+0x4a>
 801505e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015060:	b570      	push	{r4, r5, r6, lr}
 8015062:	4604      	mov	r4, r0
 8015064:	b30b      	cbz	r3, 80150aa <rcl_wait_set_add_guard_condition+0x4e>
 8015066:	b319      	cbz	r1, 80150b0 <rcl_wait_set_add_guard_condition+0x54>
 8015068:	68dd      	ldr	r5, [r3, #12]
 801506a:	68c0      	ldr	r0, [r0, #12]
 801506c:	4285      	cmp	r5, r0
 801506e:	d217      	bcs.n	80150a0 <rcl_wait_set_add_guard_condition+0x44>
 8015070:	68a0      	ldr	r0, [r4, #8]
 8015072:	1c6e      	adds	r6, r5, #1
 8015074:	60de      	str	r6, [r3, #12]
 8015076:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801507a:	b102      	cbz	r2, 801507e <rcl_wait_set_add_guard_condition+0x22>
 801507c:	6015      	str	r5, [r2, #0]
 801507e:	4608      	mov	r0, r1
 8015080:	f003 faa0 	bl	80185c4 <rcl_guard_condition_get_rmw_handle>
 8015084:	b150      	cbz	r0, 801509c <rcl_wait_set_add_guard_condition+0x40>
 8015086:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015088:	6842      	ldr	r2, [r0, #4]
 801508a:	695b      	ldr	r3, [r3, #20]
 801508c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015090:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015092:	6913      	ldr	r3, [r2, #16]
 8015094:	3301      	adds	r3, #1
 8015096:	2000      	movs	r0, #0
 8015098:	6113      	str	r3, [r2, #16]
 801509a:	bd70      	pop	{r4, r5, r6, pc}
 801509c:	2001      	movs	r0, #1
 801509e:	bd70      	pop	{r4, r5, r6, pc}
 80150a0:	f240 3086 	movw	r0, #902	@ 0x386
 80150a4:	bd70      	pop	{r4, r5, r6, pc}
 80150a6:	200b      	movs	r0, #11
 80150a8:	4770      	bx	lr
 80150aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80150ae:	bd70      	pop	{r4, r5, r6, pc}
 80150b0:	200b      	movs	r0, #11
 80150b2:	bd70      	pop	{r4, r5, r6, pc}

080150b4 <rcl_wait_set_add_timer>:
 80150b4:	b328      	cbz	r0, 8015102 <rcl_wait_set_add_timer+0x4e>
 80150b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80150b8:	b570      	push	{r4, r5, r6, lr}
 80150ba:	4604      	mov	r4, r0
 80150bc:	b31b      	cbz	r3, 8015106 <rcl_wait_set_add_timer+0x52>
 80150be:	b329      	cbz	r1, 801510c <rcl_wait_set_add_timer+0x58>
 80150c0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80150c2:	6965      	ldr	r5, [r4, #20]
 80150c4:	42a8      	cmp	r0, r5
 80150c6:	d219      	bcs.n	80150fc <rcl_wait_set_add_timer+0x48>
 80150c8:	6925      	ldr	r5, [r4, #16]
 80150ca:	1c46      	adds	r6, r0, #1
 80150cc:	641e      	str	r6, [r3, #64]	@ 0x40
 80150ce:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80150d2:	b102      	cbz	r2, 80150d6 <rcl_wait_set_add_timer+0x22>
 80150d4:	6010      	str	r0, [r2, #0]
 80150d6:	4608      	mov	r0, r1
 80150d8:	f7ff fba6 	bl	8014828 <rcl_timer_get_guard_condition>
 80150dc:	b168      	cbz	r0, 80150fa <rcl_wait_set_add_timer+0x46>
 80150de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80150e0:	68e3      	ldr	r3, [r4, #12]
 80150e2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80150e4:	3b01      	subs	r3, #1
 80150e6:	441d      	add	r5, r3
 80150e8:	f003 fa6c 	bl	80185c4 <rcl_guard_condition_get_rmw_handle>
 80150ec:	b180      	cbz	r0, 8015110 <rcl_wait_set_add_timer+0x5c>
 80150ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80150f0:	6842      	ldr	r2, [r0, #4]
 80150f2:	695b      	ldr	r3, [r3, #20]
 80150f4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80150f8:	2000      	movs	r0, #0
 80150fa:	bd70      	pop	{r4, r5, r6, pc}
 80150fc:	f240 3086 	movw	r0, #902	@ 0x386
 8015100:	bd70      	pop	{r4, r5, r6, pc}
 8015102:	200b      	movs	r0, #11
 8015104:	4770      	bx	lr
 8015106:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801510a:	bd70      	pop	{r4, r5, r6, pc}
 801510c:	200b      	movs	r0, #11
 801510e:	bd70      	pop	{r4, r5, r6, pc}
 8015110:	2001      	movs	r0, #1
 8015112:	bd70      	pop	{r4, r5, r6, pc}

08015114 <rcl_wait_set_add_client>:
 8015114:	b318      	cbz	r0, 801515e <rcl_wait_set_add_client+0x4a>
 8015116:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015118:	b570      	push	{r4, r5, r6, lr}
 801511a:	4604      	mov	r4, r0
 801511c:	b30b      	cbz	r3, 8015162 <rcl_wait_set_add_client+0x4e>
 801511e:	b319      	cbz	r1, 8015168 <rcl_wait_set_add_client+0x54>
 8015120:	699d      	ldr	r5, [r3, #24]
 8015122:	69c0      	ldr	r0, [r0, #28]
 8015124:	4285      	cmp	r5, r0
 8015126:	d217      	bcs.n	8015158 <rcl_wait_set_add_client+0x44>
 8015128:	69a0      	ldr	r0, [r4, #24]
 801512a:	1c6e      	adds	r6, r5, #1
 801512c:	619e      	str	r6, [r3, #24]
 801512e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015132:	b102      	cbz	r2, 8015136 <rcl_wait_set_add_client+0x22>
 8015134:	6015      	str	r5, [r2, #0]
 8015136:	4608      	mov	r0, r1
 8015138:	f7fe f8ce 	bl	80132d8 <rcl_client_get_rmw_handle>
 801513c:	b150      	cbz	r0, 8015154 <rcl_wait_set_add_client+0x40>
 801513e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015140:	6842      	ldr	r2, [r0, #4]
 8015142:	6a1b      	ldr	r3, [r3, #32]
 8015144:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015148:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801514a:	69d3      	ldr	r3, [r2, #28]
 801514c:	3301      	adds	r3, #1
 801514e:	2000      	movs	r0, #0
 8015150:	61d3      	str	r3, [r2, #28]
 8015152:	bd70      	pop	{r4, r5, r6, pc}
 8015154:	2001      	movs	r0, #1
 8015156:	bd70      	pop	{r4, r5, r6, pc}
 8015158:	f240 3086 	movw	r0, #902	@ 0x386
 801515c:	bd70      	pop	{r4, r5, r6, pc}
 801515e:	200b      	movs	r0, #11
 8015160:	4770      	bx	lr
 8015162:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015166:	bd70      	pop	{r4, r5, r6, pc}
 8015168:	200b      	movs	r0, #11
 801516a:	bd70      	pop	{r4, r5, r6, pc}

0801516c <rcl_wait_set_add_service>:
 801516c:	b318      	cbz	r0, 80151b6 <rcl_wait_set_add_service+0x4a>
 801516e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015170:	b570      	push	{r4, r5, r6, lr}
 8015172:	4604      	mov	r4, r0
 8015174:	b30b      	cbz	r3, 80151ba <rcl_wait_set_add_service+0x4e>
 8015176:	b319      	cbz	r1, 80151c0 <rcl_wait_set_add_service+0x54>
 8015178:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801517a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801517c:	4285      	cmp	r5, r0
 801517e:	d217      	bcs.n	80151b0 <rcl_wait_set_add_service+0x44>
 8015180:	6a20      	ldr	r0, [r4, #32]
 8015182:	1c6e      	adds	r6, r5, #1
 8015184:	625e      	str	r6, [r3, #36]	@ 0x24
 8015186:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801518a:	b102      	cbz	r2, 801518e <rcl_wait_set_add_service+0x22>
 801518c:	6015      	str	r5, [r2, #0]
 801518e:	4608      	mov	r0, r1
 8015190:	f7fe fed4 	bl	8013f3c <rcl_service_get_rmw_handle>
 8015194:	b150      	cbz	r0, 80151ac <rcl_wait_set_add_service+0x40>
 8015196:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015198:	6842      	ldr	r2, [r0, #4]
 801519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801519c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80151a0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80151a2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80151a4:	3301      	adds	r3, #1
 80151a6:	2000      	movs	r0, #0
 80151a8:	6293      	str	r3, [r2, #40]	@ 0x28
 80151aa:	bd70      	pop	{r4, r5, r6, pc}
 80151ac:	2001      	movs	r0, #1
 80151ae:	bd70      	pop	{r4, r5, r6, pc}
 80151b0:	f240 3086 	movw	r0, #902	@ 0x386
 80151b4:	bd70      	pop	{r4, r5, r6, pc}
 80151b6:	200b      	movs	r0, #11
 80151b8:	4770      	bx	lr
 80151ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80151be:	bd70      	pop	{r4, r5, r6, pc}
 80151c0:	200b      	movs	r0, #11
 80151c2:	bd70      	pop	{r4, r5, r6, pc}
 80151c4:	0000      	movs	r0, r0
	...

080151c8 <rcl_wait>:
 80151c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151cc:	ed2d 8b02 	vpush	{d8}
 80151d0:	b08d      	sub	sp, #52	@ 0x34
 80151d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80151d6:	2800      	cmp	r0, #0
 80151d8:	f000 8143 	beq.w	8015462 <rcl_wait+0x29a>
 80151dc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80151de:	4605      	mov	r5, r0
 80151e0:	2e00      	cmp	r6, #0
 80151e2:	f000 8112 	beq.w	801540a <rcl_wait+0x242>
 80151e6:	6843      	ldr	r3, [r0, #4]
 80151e8:	b983      	cbnz	r3, 801520c <rcl_wait+0x44>
 80151ea:	68eb      	ldr	r3, [r5, #12]
 80151ec:	b973      	cbnz	r3, 801520c <rcl_wait+0x44>
 80151ee:	696b      	ldr	r3, [r5, #20]
 80151f0:	b963      	cbnz	r3, 801520c <rcl_wait+0x44>
 80151f2:	69eb      	ldr	r3, [r5, #28]
 80151f4:	b953      	cbnz	r3, 801520c <rcl_wait+0x44>
 80151f6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80151f8:	b943      	cbnz	r3, 801520c <rcl_wait+0x44>
 80151fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80151fc:	b933      	cbnz	r3, 801520c <rcl_wait+0x44>
 80151fe:	f240 3085 	movw	r0, #901	@ 0x385
 8015202:	b00d      	add	sp, #52	@ 0x34
 8015204:	ecbd 8b02 	vpop	{d8}
 8015208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801520c:	9b04      	ldr	r3, [sp, #16]
 801520e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015210:	2b01      	cmp	r3, #1
 8015212:	9b05      	ldr	r3, [sp, #20]
 8015214:	f173 0300 	sbcs.w	r3, r3, #0
 8015218:	f2c0 80f0 	blt.w	80153fc <rcl_wait+0x234>
 801521c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015220:	4643      	mov	r3, r8
 8015222:	2a00      	cmp	r2, #0
 8015224:	f000 8133 	beq.w	801548e <rcl_wait+0x2c6>
 8015228:	2400      	movs	r4, #0
 801522a:	4613      	mov	r3, r2
 801522c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80154a0 <rcl_wait+0x2d8>
 8015230:	46a2      	mov	sl, r4
 8015232:	46a3      	mov	fp, r4
 8015234:	f240 3921 	movw	r9, #801	@ 0x321
 8015238:	4632      	mov	r2, r6
 801523a:	e014      	b.n	8015266 <rcl_wait+0x9e>
 801523c:	2800      	cmp	r0, #0
 801523e:	d1e0      	bne.n	8015202 <rcl_wait+0x3a>
 8015240:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015244:	4542      	cmp	r2, r8
 8015246:	eb73 0107 	sbcs.w	r1, r3, r7
 801524a:	da03      	bge.n	8015254 <rcl_wait+0x8c>
 801524c:	4690      	mov	r8, r2
 801524e:	461f      	mov	r7, r3
 8015250:	f04f 0b01 	mov.w	fp, #1
 8015254:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015256:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015258:	3401      	adds	r4, #1
 801525a:	f14a 0a00 	adc.w	sl, sl, #0
 801525e:	429c      	cmp	r4, r3
 8015260:	f17a 0100 	sbcs.w	r1, sl, #0
 8015264:	d228      	bcs.n	80152b8 <rcl_wait+0xf0>
 8015266:	6928      	ldr	r0, [r5, #16]
 8015268:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801526c:	a908      	add	r1, sp, #32
 801526e:	00a6      	lsls	r6, r4, #2
 8015270:	2800      	cmp	r0, #0
 8015272:	d0f1      	beq.n	8015258 <rcl_wait+0x90>
 8015274:	68eb      	ldr	r3, [r5, #12]
 8015276:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801527a:	4423      	add	r3, r4
 801527c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015280:	f1be 0f00 	cmp.w	lr, #0
 8015284:	d006      	beq.n	8015294 <rcl_wait+0xcc>
 8015286:	6913      	ldr	r3, [r2, #16]
 8015288:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801528c:	3301      	adds	r3, #1
 801528e:	6113      	str	r3, [r2, #16]
 8015290:	692b      	ldr	r3, [r5, #16]
 8015292:	5998      	ldr	r0, [r3, r6]
 8015294:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015298:	f7ff fa94 	bl	80147c4 <rcl_timer_get_time_until_next_call>
 801529c:	4548      	cmp	r0, r9
 801529e:	d1cd      	bne.n	801523c <rcl_wait+0x74>
 80152a0:	692b      	ldr	r3, [r5, #16]
 80152a2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80152a4:	2100      	movs	r1, #0
 80152a6:	5199      	str	r1, [r3, r6]
 80152a8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80152aa:	3401      	adds	r4, #1
 80152ac:	f14a 0a00 	adc.w	sl, sl, #0
 80152b0:	429c      	cmp	r4, r3
 80152b2:	f17a 0100 	sbcs.w	r1, sl, #0
 80152b6:	d3d6      	bcc.n	8015266 <rcl_wait+0x9e>
 80152b8:	4616      	mov	r6, r2
 80152ba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80152be:	4313      	orrs	r3, r2
 80152c0:	46d9      	mov	r9, fp
 80152c2:	f040 80a9 	bne.w	8015418 <rcl_wait+0x250>
 80152c6:	2300      	movs	r3, #0
 80152c8:	2200      	movs	r2, #0
 80152ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80152ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80152d2:	ab08      	add	r3, sp, #32
 80152d4:	9302      	str	r3, [sp, #8]
 80152d6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80152d8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80152dc:	e9cd 3200 	strd	r3, r2, [sp]
 80152e0:	f106 0110 	add.w	r1, r6, #16
 80152e4:	f106 031c 	add.w	r3, r6, #28
 80152e8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80152ec:	1d30      	adds	r0, r6, #4
 80152ee:	f001 fefd 	bl	80170ec <rmw_wait>
 80152f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80152f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80152f6:	4680      	mov	r8, r0
 80152f8:	b1ca      	cbz	r2, 801532e <rcl_wait+0x166>
 80152fa:	2400      	movs	r4, #0
 80152fc:	4627      	mov	r7, r4
 80152fe:	692a      	ldr	r2, [r5, #16]
 8015300:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8015304:	f10d 011f 	add.w	r1, sp, #31
 8015308:	00a6      	lsls	r6, r4, #2
 801530a:	b160      	cbz	r0, 8015326 <rcl_wait+0x15e>
 801530c:	f88d 701f 	strb.w	r7, [sp, #31]
 8015310:	f7ff fa1e 	bl	8014750 <rcl_timer_is_ready>
 8015314:	2800      	cmp	r0, #0
 8015316:	f47f af74 	bne.w	8015202 <rcl_wait+0x3a>
 801531a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801531e:	b90b      	cbnz	r3, 8015324 <rcl_wait+0x15c>
 8015320:	692a      	ldr	r2, [r5, #16]
 8015322:	5193      	str	r3, [r2, r6]
 8015324:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015326:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015328:	3401      	adds	r4, #1
 801532a:	42a2      	cmp	r2, r4
 801532c:	d8e7      	bhi.n	80152fe <rcl_wait+0x136>
 801532e:	f038 0002 	bics.w	r0, r8, #2
 8015332:	f040 8090 	bne.w	8015456 <rcl_wait+0x28e>
 8015336:	686e      	ldr	r6, [r5, #4]
 8015338:	4602      	mov	r2, r0
 801533a:	b91e      	cbnz	r6, 8015344 <rcl_wait+0x17c>
 801533c:	e00d      	b.n	801535a <rcl_wait+0x192>
 801533e:	3201      	adds	r2, #1
 8015340:	42b2      	cmp	r2, r6
 8015342:	d00a      	beq.n	801535a <rcl_wait+0x192>
 8015344:	6899      	ldr	r1, [r3, #8]
 8015346:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801534a:	2900      	cmp	r1, #0
 801534c:	d1f7      	bne.n	801533e <rcl_wait+0x176>
 801534e:	682c      	ldr	r4, [r5, #0]
 8015350:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015354:	3201      	adds	r2, #1
 8015356:	42b2      	cmp	r2, r6
 8015358:	d1f4      	bne.n	8015344 <rcl_wait+0x17c>
 801535a:	68ee      	ldr	r6, [r5, #12]
 801535c:	2200      	movs	r2, #0
 801535e:	b91e      	cbnz	r6, 8015368 <rcl_wait+0x1a0>
 8015360:	e00d      	b.n	801537e <rcl_wait+0x1b6>
 8015362:	3201      	adds	r2, #1
 8015364:	42b2      	cmp	r2, r6
 8015366:	d00a      	beq.n	801537e <rcl_wait+0x1b6>
 8015368:	6959      	ldr	r1, [r3, #20]
 801536a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801536e:	2900      	cmp	r1, #0
 8015370:	d1f7      	bne.n	8015362 <rcl_wait+0x19a>
 8015372:	68ac      	ldr	r4, [r5, #8]
 8015374:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015378:	3201      	adds	r2, #1
 801537a:	42b2      	cmp	r2, r6
 801537c:	d1f4      	bne.n	8015368 <rcl_wait+0x1a0>
 801537e:	69ee      	ldr	r6, [r5, #28]
 8015380:	2200      	movs	r2, #0
 8015382:	b91e      	cbnz	r6, 801538c <rcl_wait+0x1c4>
 8015384:	e00d      	b.n	80153a2 <rcl_wait+0x1da>
 8015386:	3201      	adds	r2, #1
 8015388:	42b2      	cmp	r2, r6
 801538a:	d00a      	beq.n	80153a2 <rcl_wait+0x1da>
 801538c:	6a19      	ldr	r1, [r3, #32]
 801538e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015392:	2900      	cmp	r1, #0
 8015394:	d1f7      	bne.n	8015386 <rcl_wait+0x1be>
 8015396:	69ac      	ldr	r4, [r5, #24]
 8015398:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801539c:	3201      	adds	r2, #1
 801539e:	42b2      	cmp	r2, r6
 80153a0:	d1f4      	bne.n	801538c <rcl_wait+0x1c4>
 80153a2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80153a4:	2200      	movs	r2, #0
 80153a6:	b91e      	cbnz	r6, 80153b0 <rcl_wait+0x1e8>
 80153a8:	e00d      	b.n	80153c6 <rcl_wait+0x1fe>
 80153aa:	3201      	adds	r2, #1
 80153ac:	4296      	cmp	r6, r2
 80153ae:	d00a      	beq.n	80153c6 <rcl_wait+0x1fe>
 80153b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80153b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80153b6:	2900      	cmp	r1, #0
 80153b8:	d1f7      	bne.n	80153aa <rcl_wait+0x1e2>
 80153ba:	6a2c      	ldr	r4, [r5, #32]
 80153bc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80153c0:	3201      	adds	r2, #1
 80153c2:	4296      	cmp	r6, r2
 80153c4:	d1f4      	bne.n	80153b0 <rcl_wait+0x1e8>
 80153c6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80153c8:	2200      	movs	r2, #0
 80153ca:	b91e      	cbnz	r6, 80153d4 <rcl_wait+0x20c>
 80153cc:	e00d      	b.n	80153ea <rcl_wait+0x222>
 80153ce:	3201      	adds	r2, #1
 80153d0:	42b2      	cmp	r2, r6
 80153d2:	d00a      	beq.n	80153ea <rcl_wait+0x222>
 80153d4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80153d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80153da:	2900      	cmp	r1, #0
 80153dc:	d1f7      	bne.n	80153ce <rcl_wait+0x206>
 80153de:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80153e0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80153e4:	3201      	adds	r2, #1
 80153e6:	42b2      	cmp	r2, r6
 80153e8:	d1f4      	bne.n	80153d4 <rcl_wait+0x20c>
 80153ea:	f1b8 0f02 	cmp.w	r8, #2
 80153ee:	f47f af08 	bne.w	8015202 <rcl_wait+0x3a>
 80153f2:	464b      	mov	r3, r9
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	bf08      	it	eq
 80153f8:	2002      	moveq	r0, #2
 80153fa:	e702      	b.n	8015202 <rcl_wait+0x3a>
 80153fc:	2a00      	cmp	r2, #0
 80153fe:	d03a      	beq.n	8015476 <rcl_wait+0x2ae>
 8015400:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015404:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015408:	e70e      	b.n	8015228 <rcl_wait+0x60>
 801540a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801540e:	b00d      	add	sp, #52	@ 0x34
 8015410:	ecbd 8b02 	vpop	{d8}
 8015414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015418:	9b04      	ldr	r3, [sp, #16]
 801541a:	2b01      	cmp	r3, #1
 801541c:	9b05      	ldr	r3, [sp, #20]
 801541e:	f173 0300 	sbcs.w	r3, r3, #0
 8015422:	db24      	blt.n	801546e <rcl_wait+0x2a6>
 8015424:	2f00      	cmp	r7, #0
 8015426:	bfbc      	itt	lt
 8015428:	f04f 0800 	movlt.w	r8, #0
 801542c:	4647      	movlt	r7, r8
 801542e:	a31e      	add	r3, pc, #120	@ (adr r3, 80154a8 <rcl_wait+0x2e0>)
 8015430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015434:	4640      	mov	r0, r8
 8015436:	4639      	mov	r1, r7
 8015438:	f7eb fbc6 	bl	8000bc8 <__aeabi_ldivmod>
 801543c:	a31a      	add	r3, pc, #104	@ (adr r3, 80154a8 <rcl_wait+0x2e0>)
 801543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015442:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015446:	4640      	mov	r0, r8
 8015448:	4639      	mov	r1, r7
 801544a:	f7eb fbbd 	bl	8000bc8 <__aeabi_ldivmod>
 801544e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015452:	ab08      	add	r3, sp, #32
 8015454:	e73e      	b.n	80152d4 <rcl_wait+0x10c>
 8015456:	2001      	movs	r0, #1
 8015458:	b00d      	add	sp, #52	@ 0x34
 801545a:	ecbd 8b02 	vpop	{d8}
 801545e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015462:	200b      	movs	r0, #11
 8015464:	b00d      	add	sp, #52	@ 0x34
 8015466:	ecbd 8b02 	vpop	{d8}
 801546a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801546e:	465b      	mov	r3, fp
 8015470:	2b00      	cmp	r3, #0
 8015472:	d1d7      	bne.n	8015424 <rcl_wait+0x25c>
 8015474:	e72e      	b.n	80152d4 <rcl_wait+0x10c>
 8015476:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801547a:	430b      	orrs	r3, r1
 801547c:	bf08      	it	eq
 801547e:	4691      	moveq	r9, r2
 8015480:	f43f af21 	beq.w	80152c6 <rcl_wait+0xfe>
 8015484:	9b04      	ldr	r3, [sp, #16]
 8015486:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801548a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801548e:	2b01      	cmp	r3, #1
 8015490:	9b05      	ldr	r3, [sp, #20]
 8015492:	f173 0300 	sbcs.w	r3, r3, #0
 8015496:	f04f 0300 	mov.w	r3, #0
 801549a:	4699      	mov	r9, r3
 801549c:	dac2      	bge.n	8015424 <rcl_wait+0x25c>
 801549e:	e719      	b.n	80152d4 <rcl_wait+0x10c>
 80154a0:	ffffffff 	.word	0xffffffff
 80154a4:	7fffffff 	.word	0x7fffffff
 80154a8:	3b9aca00 	.word	0x3b9aca00
 80154ac:	00000000 	.word	0x00000000

080154b0 <rcl_action_take_goal_response>:
 80154b0:	2800      	cmp	r0, #0
 80154b2:	d039      	beq.n	8015528 <rcl_action_take_goal_response+0x78>
 80154b4:	b570      	push	{r4, r5, r6, lr}
 80154b6:	4604      	mov	r4, r0
 80154b8:	6800      	ldr	r0, [r0, #0]
 80154ba:	b380      	cbz	r0, 801551e <rcl_action_take_goal_response+0x6e>
 80154bc:	460d      	mov	r5, r1
 80154be:	4616      	mov	r6, r2
 80154c0:	f7fd ff8e 	bl	80133e0 <rcl_client_is_valid>
 80154c4:	b330      	cbz	r0, 8015514 <rcl_action_take_goal_response+0x64>
 80154c6:	6820      	ldr	r0, [r4, #0]
 80154c8:	3004      	adds	r0, #4
 80154ca:	f7fd ff89 	bl	80133e0 <rcl_client_is_valid>
 80154ce:	b308      	cbz	r0, 8015514 <rcl_action_take_goal_response+0x64>
 80154d0:	6820      	ldr	r0, [r4, #0]
 80154d2:	3008      	adds	r0, #8
 80154d4:	f7fd ff84 	bl	80133e0 <rcl_client_is_valid>
 80154d8:	b1e0      	cbz	r0, 8015514 <rcl_action_take_goal_response+0x64>
 80154da:	6820      	ldr	r0, [r4, #0]
 80154dc:	300c      	adds	r0, #12
 80154de:	f7fe fdf3 	bl	80140c8 <rcl_subscription_is_valid>
 80154e2:	b1b8      	cbz	r0, 8015514 <rcl_action_take_goal_response+0x64>
 80154e4:	6820      	ldr	r0, [r4, #0]
 80154e6:	3010      	adds	r0, #16
 80154e8:	f7fe fdee 	bl	80140c8 <rcl_subscription_is_valid>
 80154ec:	b190      	cbz	r0, 8015514 <rcl_action_take_goal_response+0x64>
 80154ee:	b1cd      	cbz	r5, 8015524 <rcl_action_take_goal_response+0x74>
 80154f0:	b1c6      	cbz	r6, 8015524 <rcl_action_take_goal_response+0x74>
 80154f2:	6820      	ldr	r0, [r4, #0]
 80154f4:	4632      	mov	r2, r6
 80154f6:	4629      	mov	r1, r5
 80154f8:	f7fd ff2a 	bl	8013350 <rcl_take_response>
 80154fc:	b148      	cbz	r0, 8015512 <rcl_action_take_goal_response+0x62>
 80154fe:	280a      	cmp	r0, #10
 8015500:	d007      	beq.n	8015512 <rcl_action_take_goal_response+0x62>
 8015502:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015506:	f640 0337 	movw	r3, #2103	@ 0x837
 801550a:	4290      	cmp	r0, r2
 801550c:	bf0c      	ite	eq
 801550e:	4618      	moveq	r0, r3
 8015510:	2001      	movne	r0, #1
 8015512:	bd70      	pop	{r4, r5, r6, pc}
 8015514:	f7f8 f89c 	bl	800d650 <rcutils_reset_error>
 8015518:	f640 0036 	movw	r0, #2102	@ 0x836
 801551c:	bd70      	pop	{r4, r5, r6, pc}
 801551e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015522:	bd70      	pop	{r4, r5, r6, pc}
 8015524:	200b      	movs	r0, #11
 8015526:	bd70      	pop	{r4, r5, r6, pc}
 8015528:	f640 0036 	movw	r0, #2102	@ 0x836
 801552c:	4770      	bx	lr
 801552e:	bf00      	nop

08015530 <rcl_action_send_result_request>:
 8015530:	b390      	cbz	r0, 8015598 <rcl_action_send_result_request+0x68>
 8015532:	b570      	push	{r4, r5, r6, lr}
 8015534:	4604      	mov	r4, r0
 8015536:	6800      	ldr	r0, [r0, #0]
 8015538:	b348      	cbz	r0, 801558e <rcl_action_send_result_request+0x5e>
 801553a:	460d      	mov	r5, r1
 801553c:	4616      	mov	r6, r2
 801553e:	f7fd ff4f 	bl	80133e0 <rcl_client_is_valid>
 8015542:	b1f8      	cbz	r0, 8015584 <rcl_action_send_result_request+0x54>
 8015544:	6820      	ldr	r0, [r4, #0]
 8015546:	3004      	adds	r0, #4
 8015548:	f7fd ff4a 	bl	80133e0 <rcl_client_is_valid>
 801554c:	b1d0      	cbz	r0, 8015584 <rcl_action_send_result_request+0x54>
 801554e:	6820      	ldr	r0, [r4, #0]
 8015550:	3008      	adds	r0, #8
 8015552:	f7fd ff45 	bl	80133e0 <rcl_client_is_valid>
 8015556:	b1a8      	cbz	r0, 8015584 <rcl_action_send_result_request+0x54>
 8015558:	6820      	ldr	r0, [r4, #0]
 801555a:	300c      	adds	r0, #12
 801555c:	f7fe fdb4 	bl	80140c8 <rcl_subscription_is_valid>
 8015560:	b180      	cbz	r0, 8015584 <rcl_action_send_result_request+0x54>
 8015562:	6820      	ldr	r0, [r4, #0]
 8015564:	3010      	adds	r0, #16
 8015566:	f7fe fdaf 	bl	80140c8 <rcl_subscription_is_valid>
 801556a:	b158      	cbz	r0, 8015584 <rcl_action_send_result_request+0x54>
 801556c:	b195      	cbz	r5, 8015594 <rcl_action_send_result_request+0x64>
 801556e:	b18e      	cbz	r6, 8015594 <rcl_action_send_result_request+0x64>
 8015570:	6820      	ldr	r0, [r4, #0]
 8015572:	4632      	mov	r2, r6
 8015574:	4629      	mov	r1, r5
 8015576:	3008      	adds	r0, #8
 8015578:	f7fd feb4 	bl	80132e4 <rcl_send_request>
 801557c:	3800      	subs	r0, #0
 801557e:	bf18      	it	ne
 8015580:	2001      	movne	r0, #1
 8015582:	bd70      	pop	{r4, r5, r6, pc}
 8015584:	f7f8 f864 	bl	800d650 <rcutils_reset_error>
 8015588:	f640 0036 	movw	r0, #2102	@ 0x836
 801558c:	bd70      	pop	{r4, r5, r6, pc}
 801558e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015592:	bd70      	pop	{r4, r5, r6, pc}
 8015594:	200b      	movs	r0, #11
 8015596:	bd70      	pop	{r4, r5, r6, pc}
 8015598:	f640 0036 	movw	r0, #2102	@ 0x836
 801559c:	4770      	bx	lr
 801559e:	bf00      	nop

080155a0 <rcl_action_take_result_response>:
 80155a0:	2800      	cmp	r0, #0
 80155a2:	d03a      	beq.n	801561a <rcl_action_take_result_response+0x7a>
 80155a4:	b570      	push	{r4, r5, r6, lr}
 80155a6:	4604      	mov	r4, r0
 80155a8:	6800      	ldr	r0, [r0, #0]
 80155aa:	b388      	cbz	r0, 8015610 <rcl_action_take_result_response+0x70>
 80155ac:	460d      	mov	r5, r1
 80155ae:	4616      	mov	r6, r2
 80155b0:	f7fd ff16 	bl	80133e0 <rcl_client_is_valid>
 80155b4:	b338      	cbz	r0, 8015606 <rcl_action_take_result_response+0x66>
 80155b6:	6820      	ldr	r0, [r4, #0]
 80155b8:	3004      	adds	r0, #4
 80155ba:	f7fd ff11 	bl	80133e0 <rcl_client_is_valid>
 80155be:	b310      	cbz	r0, 8015606 <rcl_action_take_result_response+0x66>
 80155c0:	6820      	ldr	r0, [r4, #0]
 80155c2:	3008      	adds	r0, #8
 80155c4:	f7fd ff0c 	bl	80133e0 <rcl_client_is_valid>
 80155c8:	b1e8      	cbz	r0, 8015606 <rcl_action_take_result_response+0x66>
 80155ca:	6820      	ldr	r0, [r4, #0]
 80155cc:	300c      	adds	r0, #12
 80155ce:	f7fe fd7b 	bl	80140c8 <rcl_subscription_is_valid>
 80155d2:	b1c0      	cbz	r0, 8015606 <rcl_action_take_result_response+0x66>
 80155d4:	6820      	ldr	r0, [r4, #0]
 80155d6:	3010      	adds	r0, #16
 80155d8:	f7fe fd76 	bl	80140c8 <rcl_subscription_is_valid>
 80155dc:	b198      	cbz	r0, 8015606 <rcl_action_take_result_response+0x66>
 80155de:	b1d5      	cbz	r5, 8015616 <rcl_action_take_result_response+0x76>
 80155e0:	b1ce      	cbz	r6, 8015616 <rcl_action_take_result_response+0x76>
 80155e2:	6820      	ldr	r0, [r4, #0]
 80155e4:	4632      	mov	r2, r6
 80155e6:	4629      	mov	r1, r5
 80155e8:	3008      	adds	r0, #8
 80155ea:	f7fd feb1 	bl	8013350 <rcl_take_response>
 80155ee:	b148      	cbz	r0, 8015604 <rcl_action_take_result_response+0x64>
 80155f0:	280a      	cmp	r0, #10
 80155f2:	d007      	beq.n	8015604 <rcl_action_take_result_response+0x64>
 80155f4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80155f8:	f640 0337 	movw	r3, #2103	@ 0x837
 80155fc:	4290      	cmp	r0, r2
 80155fe:	bf0c      	ite	eq
 8015600:	4618      	moveq	r0, r3
 8015602:	2001      	movne	r0, #1
 8015604:	bd70      	pop	{r4, r5, r6, pc}
 8015606:	f7f8 f823 	bl	800d650 <rcutils_reset_error>
 801560a:	f640 0036 	movw	r0, #2102	@ 0x836
 801560e:	bd70      	pop	{r4, r5, r6, pc}
 8015610:	f640 0036 	movw	r0, #2102	@ 0x836
 8015614:	bd70      	pop	{r4, r5, r6, pc}
 8015616:	200b      	movs	r0, #11
 8015618:	bd70      	pop	{r4, r5, r6, pc}
 801561a:	f640 0036 	movw	r0, #2102	@ 0x836
 801561e:	4770      	bx	lr

08015620 <rcl_action_take_cancel_response>:
 8015620:	2800      	cmp	r0, #0
 8015622:	d03a      	beq.n	801569a <rcl_action_take_cancel_response+0x7a>
 8015624:	b570      	push	{r4, r5, r6, lr}
 8015626:	4604      	mov	r4, r0
 8015628:	6800      	ldr	r0, [r0, #0]
 801562a:	b388      	cbz	r0, 8015690 <rcl_action_take_cancel_response+0x70>
 801562c:	460d      	mov	r5, r1
 801562e:	4616      	mov	r6, r2
 8015630:	f7fd fed6 	bl	80133e0 <rcl_client_is_valid>
 8015634:	b338      	cbz	r0, 8015686 <rcl_action_take_cancel_response+0x66>
 8015636:	6820      	ldr	r0, [r4, #0]
 8015638:	3004      	adds	r0, #4
 801563a:	f7fd fed1 	bl	80133e0 <rcl_client_is_valid>
 801563e:	b310      	cbz	r0, 8015686 <rcl_action_take_cancel_response+0x66>
 8015640:	6820      	ldr	r0, [r4, #0]
 8015642:	3008      	adds	r0, #8
 8015644:	f7fd fecc 	bl	80133e0 <rcl_client_is_valid>
 8015648:	b1e8      	cbz	r0, 8015686 <rcl_action_take_cancel_response+0x66>
 801564a:	6820      	ldr	r0, [r4, #0]
 801564c:	300c      	adds	r0, #12
 801564e:	f7fe fd3b 	bl	80140c8 <rcl_subscription_is_valid>
 8015652:	b1c0      	cbz	r0, 8015686 <rcl_action_take_cancel_response+0x66>
 8015654:	6820      	ldr	r0, [r4, #0]
 8015656:	3010      	adds	r0, #16
 8015658:	f7fe fd36 	bl	80140c8 <rcl_subscription_is_valid>
 801565c:	b198      	cbz	r0, 8015686 <rcl_action_take_cancel_response+0x66>
 801565e:	b1d5      	cbz	r5, 8015696 <rcl_action_take_cancel_response+0x76>
 8015660:	b1ce      	cbz	r6, 8015696 <rcl_action_take_cancel_response+0x76>
 8015662:	6820      	ldr	r0, [r4, #0]
 8015664:	4632      	mov	r2, r6
 8015666:	4629      	mov	r1, r5
 8015668:	3004      	adds	r0, #4
 801566a:	f7fd fe71 	bl	8013350 <rcl_take_response>
 801566e:	b148      	cbz	r0, 8015684 <rcl_action_take_cancel_response+0x64>
 8015670:	280a      	cmp	r0, #10
 8015672:	d007      	beq.n	8015684 <rcl_action_take_cancel_response+0x64>
 8015674:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015678:	f640 0337 	movw	r3, #2103	@ 0x837
 801567c:	4290      	cmp	r0, r2
 801567e:	bf0c      	ite	eq
 8015680:	4618      	moveq	r0, r3
 8015682:	2001      	movne	r0, #1
 8015684:	bd70      	pop	{r4, r5, r6, pc}
 8015686:	f7f7 ffe3 	bl	800d650 <rcutils_reset_error>
 801568a:	f640 0036 	movw	r0, #2102	@ 0x836
 801568e:	bd70      	pop	{r4, r5, r6, pc}
 8015690:	f640 0036 	movw	r0, #2102	@ 0x836
 8015694:	bd70      	pop	{r4, r5, r6, pc}
 8015696:	200b      	movs	r0, #11
 8015698:	bd70      	pop	{r4, r5, r6, pc}
 801569a:	f640 0036 	movw	r0, #2102	@ 0x836
 801569e:	4770      	bx	lr

080156a0 <rcl_action_take_feedback>:
 80156a0:	2800      	cmp	r0, #0
 80156a2:	d038      	beq.n	8015716 <rcl_action_take_feedback+0x76>
 80156a4:	b530      	push	{r4, r5, lr}
 80156a6:	4604      	mov	r4, r0
 80156a8:	6800      	ldr	r0, [r0, #0]
 80156aa:	b091      	sub	sp, #68	@ 0x44
 80156ac:	b378      	cbz	r0, 801570e <rcl_action_take_feedback+0x6e>
 80156ae:	460d      	mov	r5, r1
 80156b0:	f7fd fe96 	bl	80133e0 <rcl_client_is_valid>
 80156b4:	b328      	cbz	r0, 8015702 <rcl_action_take_feedback+0x62>
 80156b6:	6820      	ldr	r0, [r4, #0]
 80156b8:	3004      	adds	r0, #4
 80156ba:	f7fd fe91 	bl	80133e0 <rcl_client_is_valid>
 80156be:	b300      	cbz	r0, 8015702 <rcl_action_take_feedback+0x62>
 80156c0:	6820      	ldr	r0, [r4, #0]
 80156c2:	3008      	adds	r0, #8
 80156c4:	f7fd fe8c 	bl	80133e0 <rcl_client_is_valid>
 80156c8:	b1d8      	cbz	r0, 8015702 <rcl_action_take_feedback+0x62>
 80156ca:	6820      	ldr	r0, [r4, #0]
 80156cc:	300c      	adds	r0, #12
 80156ce:	f7fe fcfb 	bl	80140c8 <rcl_subscription_is_valid>
 80156d2:	b1b0      	cbz	r0, 8015702 <rcl_action_take_feedback+0x62>
 80156d4:	6820      	ldr	r0, [r4, #0]
 80156d6:	3010      	adds	r0, #16
 80156d8:	f7fe fcf6 	bl	80140c8 <rcl_subscription_is_valid>
 80156dc:	b188      	cbz	r0, 8015702 <rcl_action_take_feedback+0x62>
 80156de:	b1ed      	cbz	r5, 801571c <rcl_action_take_feedback+0x7c>
 80156e0:	6820      	ldr	r0, [r4, #0]
 80156e2:	2300      	movs	r3, #0
 80156e4:	466a      	mov	r2, sp
 80156e6:	4629      	mov	r1, r5
 80156e8:	300c      	adds	r0, #12
 80156ea:	f7fe fc8f 	bl	801400c <rcl_take>
 80156ee:	b160      	cbz	r0, 801570a <rcl_action_take_feedback+0x6a>
 80156f0:	f240 1391 	movw	r3, #401	@ 0x191
 80156f4:	4298      	cmp	r0, r3
 80156f6:	d014      	beq.n	8015722 <rcl_action_take_feedback+0x82>
 80156f8:	280a      	cmp	r0, #10
 80156fa:	bf18      	it	ne
 80156fc:	2001      	movne	r0, #1
 80156fe:	b011      	add	sp, #68	@ 0x44
 8015700:	bd30      	pop	{r4, r5, pc}
 8015702:	f7f7 ffa5 	bl	800d650 <rcutils_reset_error>
 8015706:	f640 0036 	movw	r0, #2102	@ 0x836
 801570a:	b011      	add	sp, #68	@ 0x44
 801570c:	bd30      	pop	{r4, r5, pc}
 801570e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015712:	b011      	add	sp, #68	@ 0x44
 8015714:	bd30      	pop	{r4, r5, pc}
 8015716:	f640 0036 	movw	r0, #2102	@ 0x836
 801571a:	4770      	bx	lr
 801571c:	200b      	movs	r0, #11
 801571e:	b011      	add	sp, #68	@ 0x44
 8015720:	bd30      	pop	{r4, r5, pc}
 8015722:	f640 0037 	movw	r0, #2103	@ 0x837
 8015726:	e7f0      	b.n	801570a <rcl_action_take_feedback+0x6a>

08015728 <rcl_action_wait_set_add_action_client>:
 8015728:	2800      	cmp	r0, #0
 801572a:	d048      	beq.n	80157be <rcl_action_wait_set_add_action_client+0x96>
 801572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801572e:	460c      	mov	r4, r1
 8015730:	2900      	cmp	r1, #0
 8015732:	d03c      	beq.n	80157ae <rcl_action_wait_set_add_action_client+0x86>
 8015734:	4605      	mov	r5, r0
 8015736:	6808      	ldr	r0, [r1, #0]
 8015738:	2800      	cmp	r0, #0
 801573a:	d038      	beq.n	80157ae <rcl_action_wait_set_add_action_client+0x86>
 801573c:	4617      	mov	r7, r2
 801573e:	461e      	mov	r6, r3
 8015740:	f7fd fe4e 	bl	80133e0 <rcl_client_is_valid>
 8015744:	b3b0      	cbz	r0, 80157b4 <rcl_action_wait_set_add_action_client+0x8c>
 8015746:	6820      	ldr	r0, [r4, #0]
 8015748:	3004      	adds	r0, #4
 801574a:	f7fd fe49 	bl	80133e0 <rcl_client_is_valid>
 801574e:	b388      	cbz	r0, 80157b4 <rcl_action_wait_set_add_action_client+0x8c>
 8015750:	6820      	ldr	r0, [r4, #0]
 8015752:	3008      	adds	r0, #8
 8015754:	f7fd fe44 	bl	80133e0 <rcl_client_is_valid>
 8015758:	b360      	cbz	r0, 80157b4 <rcl_action_wait_set_add_action_client+0x8c>
 801575a:	6820      	ldr	r0, [r4, #0]
 801575c:	300c      	adds	r0, #12
 801575e:	f7fe fcb3 	bl	80140c8 <rcl_subscription_is_valid>
 8015762:	b338      	cbz	r0, 80157b4 <rcl_action_wait_set_add_action_client+0x8c>
 8015764:	6820      	ldr	r0, [r4, #0]
 8015766:	3010      	adds	r0, #16
 8015768:	f7fe fcae 	bl	80140c8 <rcl_subscription_is_valid>
 801576c:	b310      	cbz	r0, 80157b4 <rcl_action_wait_set_add_action_client+0x8c>
 801576e:	6821      	ldr	r1, [r4, #0]
 8015770:	4628      	mov	r0, r5
 8015772:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8015776:	f7ff fccd 	bl	8015114 <rcl_wait_set_add_client>
 801577a:	b9b8      	cbnz	r0, 80157ac <rcl_action_wait_set_add_action_client+0x84>
 801577c:	6821      	ldr	r1, [r4, #0]
 801577e:	4628      	mov	r0, r5
 8015780:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8015784:	3104      	adds	r1, #4
 8015786:	f7ff fcc5 	bl	8015114 <rcl_wait_set_add_client>
 801578a:	b978      	cbnz	r0, 80157ac <rcl_action_wait_set_add_action_client+0x84>
 801578c:	6821      	ldr	r1, [r4, #0]
 801578e:	4628      	mov	r0, r5
 8015790:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8015794:	3108      	adds	r1, #8
 8015796:	f7ff fcbd 	bl	8015114 <rcl_wait_set_add_client>
 801579a:	b938      	cbnz	r0, 80157ac <rcl_action_wait_set_add_action_client+0x84>
 801579c:	6821      	ldr	r1, [r4, #0]
 801579e:	4628      	mov	r0, r5
 80157a0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80157a4:	310c      	adds	r1, #12
 80157a6:	f7ff f96d 	bl	8014a84 <rcl_wait_set_add_subscription>
 80157aa:	b158      	cbz	r0, 80157c4 <rcl_action_wait_set_add_action_client+0x9c>
 80157ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157ae:	f640 0036 	movw	r0, #2102	@ 0x836
 80157b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157b4:	f7f7 ff4c 	bl	800d650 <rcutils_reset_error>
 80157b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80157bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80157c2:	4770      	bx	lr
 80157c4:	6821      	ldr	r1, [r4, #0]
 80157c6:	4628      	mov	r0, r5
 80157c8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80157cc:	3110      	adds	r1, #16
 80157ce:	f7ff f959 	bl	8014a84 <rcl_wait_set_add_subscription>
 80157d2:	2800      	cmp	r0, #0
 80157d4:	d1ea      	bne.n	80157ac <rcl_action_wait_set_add_action_client+0x84>
 80157d6:	b11f      	cbz	r7, 80157e0 <rcl_action_wait_set_add_action_client+0xb8>
 80157d8:	6823      	ldr	r3, [r4, #0]
 80157da:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80157de:	603b      	str	r3, [r7, #0]
 80157e0:	2e00      	cmp	r6, #0
 80157e2:	d0e3      	beq.n	80157ac <rcl_action_wait_set_add_action_client+0x84>
 80157e4:	6823      	ldr	r3, [r4, #0]
 80157e6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80157ea:	6033      	str	r3, [r6, #0]
 80157ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157ee:	bf00      	nop

080157f0 <rcl_action_client_wait_set_get_entities_ready>:
 80157f0:	2800      	cmp	r0, #0
 80157f2:	f000 808d 	beq.w	8015910 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80157f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157fa:	460c      	mov	r4, r1
 80157fc:	2900      	cmp	r1, #0
 80157fe:	d077      	beq.n	80158f0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015800:	4605      	mov	r5, r0
 8015802:	6808      	ldr	r0, [r1, #0]
 8015804:	2800      	cmp	r0, #0
 8015806:	d073      	beq.n	80158f0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015808:	4616      	mov	r6, r2
 801580a:	461f      	mov	r7, r3
 801580c:	f7fd fde8 	bl	80133e0 <rcl_client_is_valid>
 8015810:	2800      	cmp	r0, #0
 8015812:	d071      	beq.n	80158f8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015814:	6820      	ldr	r0, [r4, #0]
 8015816:	3004      	adds	r0, #4
 8015818:	f7fd fde2 	bl	80133e0 <rcl_client_is_valid>
 801581c:	2800      	cmp	r0, #0
 801581e:	d06b      	beq.n	80158f8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015820:	6820      	ldr	r0, [r4, #0]
 8015822:	3008      	adds	r0, #8
 8015824:	f7fd fddc 	bl	80133e0 <rcl_client_is_valid>
 8015828:	2800      	cmp	r0, #0
 801582a:	d065      	beq.n	80158f8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801582c:	6820      	ldr	r0, [r4, #0]
 801582e:	300c      	adds	r0, #12
 8015830:	f7fe fc4a 	bl	80140c8 <rcl_subscription_is_valid>
 8015834:	2800      	cmp	r0, #0
 8015836:	d05f      	beq.n	80158f8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015838:	6820      	ldr	r0, [r4, #0]
 801583a:	3010      	adds	r0, #16
 801583c:	f7fe fc44 	bl	80140c8 <rcl_subscription_is_valid>
 8015840:	2800      	cmp	r0, #0
 8015842:	d059      	beq.n	80158f8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015844:	2e00      	cmp	r6, #0
 8015846:	d060      	beq.n	801590a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015848:	2f00      	cmp	r7, #0
 801584a:	d05e      	beq.n	801590a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801584c:	9b06      	ldr	r3, [sp, #24]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d05b      	beq.n	801590a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015852:	9b07      	ldr	r3, [sp, #28]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d058      	beq.n	801590a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015858:	9b08      	ldr	r3, [sp, #32]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d055      	beq.n	801590a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801585e:	6823      	ldr	r3, [r4, #0]
 8015860:	686a      	ldr	r2, [r5, #4]
 8015862:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8015866:	428a      	cmp	r2, r1
 8015868:	d94c      	bls.n	8015904 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801586a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801586e:	4282      	cmp	r2, r0
 8015870:	d948      	bls.n	8015904 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015872:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8015876:	69ea      	ldr	r2, [r5, #28]
 8015878:	42a2      	cmp	r2, r4
 801587a:	d943      	bls.n	8015904 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801587c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015880:	4562      	cmp	r2, ip
 8015882:	d93f      	bls.n	8015904 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015884:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015888:	4572      	cmp	r2, lr
 801588a:	d93b      	bls.n	8015904 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801588c:	69aa      	ldr	r2, [r5, #24]
 801588e:	682d      	ldr	r5, [r5, #0]
 8015890:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8015894:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015898:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801589c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80158a0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80158a4:	f103 0c0c 	add.w	ip, r3, #12
 80158a8:	eba5 050c 	sub.w	r5, r5, ip
 80158ac:	fab5 f585 	clz	r5, r5
 80158b0:	096d      	lsrs	r5, r5, #5
 80158b2:	7035      	strb	r5, [r6, #0]
 80158b4:	f103 0510 	add.w	r5, r3, #16
 80158b8:	1b64      	subs	r4, r4, r5
 80158ba:	fab4 f484 	clz	r4, r4
 80158be:	0964      	lsrs	r4, r4, #5
 80158c0:	703c      	strb	r4, [r7, #0]
 80158c2:	eba3 0008 	sub.w	r0, r3, r8
 80158c6:	1d1c      	adds	r4, r3, #4
 80158c8:	3308      	adds	r3, #8
 80158ca:	1ad3      	subs	r3, r2, r3
 80158cc:	fab0 f080 	clz	r0, r0
 80158d0:	9a06      	ldr	r2, [sp, #24]
 80158d2:	0940      	lsrs	r0, r0, #5
 80158d4:	1b09      	subs	r1, r1, r4
 80158d6:	7010      	strb	r0, [r2, #0]
 80158d8:	fab1 f181 	clz	r1, r1
 80158dc:	9a07      	ldr	r2, [sp, #28]
 80158de:	0949      	lsrs	r1, r1, #5
 80158e0:	7011      	strb	r1, [r2, #0]
 80158e2:	fab3 f383 	clz	r3, r3
 80158e6:	9a08      	ldr	r2, [sp, #32]
 80158e8:	095b      	lsrs	r3, r3, #5
 80158ea:	2000      	movs	r0, #0
 80158ec:	7013      	strb	r3, [r2, #0]
 80158ee:	e001      	b.n	80158f4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80158f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80158f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f8:	f7f7 feaa 	bl	800d650 <rcutils_reset_error>
 80158fc:	f640 0036 	movw	r0, #2102	@ 0x836
 8015900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015904:	2001      	movs	r0, #1
 8015906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801590a:	200b      	movs	r0, #11
 801590c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015910:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015914:	4770      	bx	lr
 8015916:	bf00      	nop

08015918 <rcl_action_take_goal_request>:
 8015918:	2800      	cmp	r0, #0
 801591a:	d039      	beq.n	8015990 <rcl_action_take_goal_request+0x78>
 801591c:	b570      	push	{r4, r5, r6, lr}
 801591e:	4604      	mov	r4, r0
 8015920:	6800      	ldr	r0, [r0, #0]
 8015922:	b380      	cbz	r0, 8015986 <rcl_action_take_goal_request+0x6e>
 8015924:	460d      	mov	r5, r1
 8015926:	4616      	mov	r6, r2
 8015928:	f7fe fb66 	bl	8013ff8 <rcl_service_is_valid>
 801592c:	b330      	cbz	r0, 801597c <rcl_action_take_goal_request+0x64>
 801592e:	6820      	ldr	r0, [r4, #0]
 8015930:	3004      	adds	r0, #4
 8015932:	f7fe fb61 	bl	8013ff8 <rcl_service_is_valid>
 8015936:	b308      	cbz	r0, 801597c <rcl_action_take_goal_request+0x64>
 8015938:	6820      	ldr	r0, [r4, #0]
 801593a:	3008      	adds	r0, #8
 801593c:	f7fe fb5c 	bl	8013ff8 <rcl_service_is_valid>
 8015940:	b1e0      	cbz	r0, 801597c <rcl_action_take_goal_request+0x64>
 8015942:	6820      	ldr	r0, [r4, #0]
 8015944:	300c      	adds	r0, #12
 8015946:	f7f6 fe6b 	bl	800c620 <rcl_publisher_is_valid>
 801594a:	b1b8      	cbz	r0, 801597c <rcl_action_take_goal_request+0x64>
 801594c:	6820      	ldr	r0, [r4, #0]
 801594e:	3010      	adds	r0, #16
 8015950:	f7f6 fe66 	bl	800c620 <rcl_publisher_is_valid>
 8015954:	b190      	cbz	r0, 801597c <rcl_action_take_goal_request+0x64>
 8015956:	b1cd      	cbz	r5, 801598c <rcl_action_take_goal_request+0x74>
 8015958:	b1c6      	cbz	r6, 801598c <rcl_action_take_goal_request+0x74>
 801595a:	6820      	ldr	r0, [r4, #0]
 801595c:	4632      	mov	r2, r6
 801595e:	4629      	mov	r1, r5
 8015960:	f7fe faf2 	bl	8013f48 <rcl_take_request>
 8015964:	b148      	cbz	r0, 801597a <rcl_action_take_goal_request+0x62>
 8015966:	280a      	cmp	r0, #10
 8015968:	d007      	beq.n	801597a <rcl_action_take_goal_request+0x62>
 801596a:	f240 2259 	movw	r2, #601	@ 0x259
 801596e:	f640 0399 	movw	r3, #2201	@ 0x899
 8015972:	4290      	cmp	r0, r2
 8015974:	bf0c      	ite	eq
 8015976:	4618      	moveq	r0, r3
 8015978:	2001      	movne	r0, #1
 801597a:	bd70      	pop	{r4, r5, r6, pc}
 801597c:	f7f7 fe68 	bl	800d650 <rcutils_reset_error>
 8015980:	f640 0098 	movw	r0, #2200	@ 0x898
 8015984:	bd70      	pop	{r4, r5, r6, pc}
 8015986:	f640 0098 	movw	r0, #2200	@ 0x898
 801598a:	bd70      	pop	{r4, r5, r6, pc}
 801598c:	200b      	movs	r0, #11
 801598e:	bd70      	pop	{r4, r5, r6, pc}
 8015990:	f640 0098 	movw	r0, #2200	@ 0x898
 8015994:	4770      	bx	lr
 8015996:	bf00      	nop

08015998 <rcl_action_send_goal_response>:
 8015998:	b390      	cbz	r0, 8015a00 <rcl_action_send_goal_response+0x68>
 801599a:	b570      	push	{r4, r5, r6, lr}
 801599c:	4604      	mov	r4, r0
 801599e:	6800      	ldr	r0, [r0, #0]
 80159a0:	b348      	cbz	r0, 80159f6 <rcl_action_send_goal_response+0x5e>
 80159a2:	460d      	mov	r5, r1
 80159a4:	4616      	mov	r6, r2
 80159a6:	f7fe fb27 	bl	8013ff8 <rcl_service_is_valid>
 80159aa:	b1f8      	cbz	r0, 80159ec <rcl_action_send_goal_response+0x54>
 80159ac:	6820      	ldr	r0, [r4, #0]
 80159ae:	3004      	adds	r0, #4
 80159b0:	f7fe fb22 	bl	8013ff8 <rcl_service_is_valid>
 80159b4:	b1d0      	cbz	r0, 80159ec <rcl_action_send_goal_response+0x54>
 80159b6:	6820      	ldr	r0, [r4, #0]
 80159b8:	3008      	adds	r0, #8
 80159ba:	f7fe fb1d 	bl	8013ff8 <rcl_service_is_valid>
 80159be:	b1a8      	cbz	r0, 80159ec <rcl_action_send_goal_response+0x54>
 80159c0:	6820      	ldr	r0, [r4, #0]
 80159c2:	300c      	adds	r0, #12
 80159c4:	f7f6 fe2c 	bl	800c620 <rcl_publisher_is_valid>
 80159c8:	b180      	cbz	r0, 80159ec <rcl_action_send_goal_response+0x54>
 80159ca:	6820      	ldr	r0, [r4, #0]
 80159cc:	3010      	adds	r0, #16
 80159ce:	f7f6 fe27 	bl	800c620 <rcl_publisher_is_valid>
 80159d2:	b158      	cbz	r0, 80159ec <rcl_action_send_goal_response+0x54>
 80159d4:	b195      	cbz	r5, 80159fc <rcl_action_send_goal_response+0x64>
 80159d6:	b18e      	cbz	r6, 80159fc <rcl_action_send_goal_response+0x64>
 80159d8:	6820      	ldr	r0, [r4, #0]
 80159da:	4632      	mov	r2, r6
 80159dc:	4629      	mov	r1, r5
 80159de:	f7fe faf3 	bl	8013fc8 <rcl_send_response>
 80159e2:	b110      	cbz	r0, 80159ea <rcl_action_send_goal_response+0x52>
 80159e4:	2802      	cmp	r0, #2
 80159e6:	bf18      	it	ne
 80159e8:	2001      	movne	r0, #1
 80159ea:	bd70      	pop	{r4, r5, r6, pc}
 80159ec:	f7f7 fe30 	bl	800d650 <rcutils_reset_error>
 80159f0:	f640 0098 	movw	r0, #2200	@ 0x898
 80159f4:	bd70      	pop	{r4, r5, r6, pc}
 80159f6:	f640 0098 	movw	r0, #2200	@ 0x898
 80159fa:	bd70      	pop	{r4, r5, r6, pc}
 80159fc:	200b      	movs	r0, #11
 80159fe:	bd70      	pop	{r4, r5, r6, pc}
 8015a00:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a04:	4770      	bx	lr
 8015a06:	bf00      	nop

08015a08 <rcl_action_take_result_request>:
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	d03a      	beq.n	8015a82 <rcl_action_take_result_request+0x7a>
 8015a0c:	b570      	push	{r4, r5, r6, lr}
 8015a0e:	4604      	mov	r4, r0
 8015a10:	6800      	ldr	r0, [r0, #0]
 8015a12:	b388      	cbz	r0, 8015a78 <rcl_action_take_result_request+0x70>
 8015a14:	460d      	mov	r5, r1
 8015a16:	4616      	mov	r6, r2
 8015a18:	f7fe faee 	bl	8013ff8 <rcl_service_is_valid>
 8015a1c:	b338      	cbz	r0, 8015a6e <rcl_action_take_result_request+0x66>
 8015a1e:	6820      	ldr	r0, [r4, #0]
 8015a20:	3004      	adds	r0, #4
 8015a22:	f7fe fae9 	bl	8013ff8 <rcl_service_is_valid>
 8015a26:	b310      	cbz	r0, 8015a6e <rcl_action_take_result_request+0x66>
 8015a28:	6820      	ldr	r0, [r4, #0]
 8015a2a:	3008      	adds	r0, #8
 8015a2c:	f7fe fae4 	bl	8013ff8 <rcl_service_is_valid>
 8015a30:	b1e8      	cbz	r0, 8015a6e <rcl_action_take_result_request+0x66>
 8015a32:	6820      	ldr	r0, [r4, #0]
 8015a34:	300c      	adds	r0, #12
 8015a36:	f7f6 fdf3 	bl	800c620 <rcl_publisher_is_valid>
 8015a3a:	b1c0      	cbz	r0, 8015a6e <rcl_action_take_result_request+0x66>
 8015a3c:	6820      	ldr	r0, [r4, #0]
 8015a3e:	3010      	adds	r0, #16
 8015a40:	f7f6 fdee 	bl	800c620 <rcl_publisher_is_valid>
 8015a44:	b198      	cbz	r0, 8015a6e <rcl_action_take_result_request+0x66>
 8015a46:	b1d5      	cbz	r5, 8015a7e <rcl_action_take_result_request+0x76>
 8015a48:	b1ce      	cbz	r6, 8015a7e <rcl_action_take_result_request+0x76>
 8015a4a:	6820      	ldr	r0, [r4, #0]
 8015a4c:	4632      	mov	r2, r6
 8015a4e:	4629      	mov	r1, r5
 8015a50:	3008      	adds	r0, #8
 8015a52:	f7fe fa79 	bl	8013f48 <rcl_take_request>
 8015a56:	b148      	cbz	r0, 8015a6c <rcl_action_take_result_request+0x64>
 8015a58:	280a      	cmp	r0, #10
 8015a5a:	d007      	beq.n	8015a6c <rcl_action_take_result_request+0x64>
 8015a5c:	f240 2259 	movw	r2, #601	@ 0x259
 8015a60:	f640 0399 	movw	r3, #2201	@ 0x899
 8015a64:	4290      	cmp	r0, r2
 8015a66:	bf0c      	ite	eq
 8015a68:	4618      	moveq	r0, r3
 8015a6a:	2001      	movne	r0, #1
 8015a6c:	bd70      	pop	{r4, r5, r6, pc}
 8015a6e:	f7f7 fdef 	bl	800d650 <rcutils_reset_error>
 8015a72:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a76:	bd70      	pop	{r4, r5, r6, pc}
 8015a78:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a7c:	bd70      	pop	{r4, r5, r6, pc}
 8015a7e:	200b      	movs	r0, #11
 8015a80:	bd70      	pop	{r4, r5, r6, pc}
 8015a82:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a86:	4770      	bx	lr

08015a88 <rcl_action_take_cancel_request>:
 8015a88:	2800      	cmp	r0, #0
 8015a8a:	d03a      	beq.n	8015b02 <rcl_action_take_cancel_request+0x7a>
 8015a8c:	b570      	push	{r4, r5, r6, lr}
 8015a8e:	4604      	mov	r4, r0
 8015a90:	6800      	ldr	r0, [r0, #0]
 8015a92:	b388      	cbz	r0, 8015af8 <rcl_action_take_cancel_request+0x70>
 8015a94:	460d      	mov	r5, r1
 8015a96:	4616      	mov	r6, r2
 8015a98:	f7fe faae 	bl	8013ff8 <rcl_service_is_valid>
 8015a9c:	b338      	cbz	r0, 8015aee <rcl_action_take_cancel_request+0x66>
 8015a9e:	6820      	ldr	r0, [r4, #0]
 8015aa0:	3004      	adds	r0, #4
 8015aa2:	f7fe faa9 	bl	8013ff8 <rcl_service_is_valid>
 8015aa6:	b310      	cbz	r0, 8015aee <rcl_action_take_cancel_request+0x66>
 8015aa8:	6820      	ldr	r0, [r4, #0]
 8015aaa:	3008      	adds	r0, #8
 8015aac:	f7fe faa4 	bl	8013ff8 <rcl_service_is_valid>
 8015ab0:	b1e8      	cbz	r0, 8015aee <rcl_action_take_cancel_request+0x66>
 8015ab2:	6820      	ldr	r0, [r4, #0]
 8015ab4:	300c      	adds	r0, #12
 8015ab6:	f7f6 fdb3 	bl	800c620 <rcl_publisher_is_valid>
 8015aba:	b1c0      	cbz	r0, 8015aee <rcl_action_take_cancel_request+0x66>
 8015abc:	6820      	ldr	r0, [r4, #0]
 8015abe:	3010      	adds	r0, #16
 8015ac0:	f7f6 fdae 	bl	800c620 <rcl_publisher_is_valid>
 8015ac4:	b198      	cbz	r0, 8015aee <rcl_action_take_cancel_request+0x66>
 8015ac6:	b1d5      	cbz	r5, 8015afe <rcl_action_take_cancel_request+0x76>
 8015ac8:	b1ce      	cbz	r6, 8015afe <rcl_action_take_cancel_request+0x76>
 8015aca:	6820      	ldr	r0, [r4, #0]
 8015acc:	4632      	mov	r2, r6
 8015ace:	4629      	mov	r1, r5
 8015ad0:	3004      	adds	r0, #4
 8015ad2:	f7fe fa39 	bl	8013f48 <rcl_take_request>
 8015ad6:	b148      	cbz	r0, 8015aec <rcl_action_take_cancel_request+0x64>
 8015ad8:	280a      	cmp	r0, #10
 8015ada:	d007      	beq.n	8015aec <rcl_action_take_cancel_request+0x64>
 8015adc:	f240 2259 	movw	r2, #601	@ 0x259
 8015ae0:	f640 0399 	movw	r3, #2201	@ 0x899
 8015ae4:	4290      	cmp	r0, r2
 8015ae6:	bf0c      	ite	eq
 8015ae8:	4618      	moveq	r0, r3
 8015aea:	2001      	movne	r0, #1
 8015aec:	bd70      	pop	{r4, r5, r6, pc}
 8015aee:	f7f7 fdaf 	bl	800d650 <rcutils_reset_error>
 8015af2:	f640 0098 	movw	r0, #2200	@ 0x898
 8015af6:	bd70      	pop	{r4, r5, r6, pc}
 8015af8:	f640 0098 	movw	r0, #2200	@ 0x898
 8015afc:	bd70      	pop	{r4, r5, r6, pc}
 8015afe:	200b      	movs	r0, #11
 8015b00:	bd70      	pop	{r4, r5, r6, pc}
 8015b02:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b06:	4770      	bx	lr

08015b08 <rcl_action_send_cancel_response>:
 8015b08:	b398      	cbz	r0, 8015b72 <rcl_action_send_cancel_response+0x6a>
 8015b0a:	b570      	push	{r4, r5, r6, lr}
 8015b0c:	4604      	mov	r4, r0
 8015b0e:	6800      	ldr	r0, [r0, #0]
 8015b10:	b350      	cbz	r0, 8015b68 <rcl_action_send_cancel_response+0x60>
 8015b12:	460d      	mov	r5, r1
 8015b14:	4616      	mov	r6, r2
 8015b16:	f7fe fa6f 	bl	8013ff8 <rcl_service_is_valid>
 8015b1a:	b300      	cbz	r0, 8015b5e <rcl_action_send_cancel_response+0x56>
 8015b1c:	6820      	ldr	r0, [r4, #0]
 8015b1e:	3004      	adds	r0, #4
 8015b20:	f7fe fa6a 	bl	8013ff8 <rcl_service_is_valid>
 8015b24:	b1d8      	cbz	r0, 8015b5e <rcl_action_send_cancel_response+0x56>
 8015b26:	6820      	ldr	r0, [r4, #0]
 8015b28:	3008      	adds	r0, #8
 8015b2a:	f7fe fa65 	bl	8013ff8 <rcl_service_is_valid>
 8015b2e:	b1b0      	cbz	r0, 8015b5e <rcl_action_send_cancel_response+0x56>
 8015b30:	6820      	ldr	r0, [r4, #0]
 8015b32:	300c      	adds	r0, #12
 8015b34:	f7f6 fd74 	bl	800c620 <rcl_publisher_is_valid>
 8015b38:	b188      	cbz	r0, 8015b5e <rcl_action_send_cancel_response+0x56>
 8015b3a:	6820      	ldr	r0, [r4, #0]
 8015b3c:	3010      	adds	r0, #16
 8015b3e:	f7f6 fd6f 	bl	800c620 <rcl_publisher_is_valid>
 8015b42:	b160      	cbz	r0, 8015b5e <rcl_action_send_cancel_response+0x56>
 8015b44:	b19d      	cbz	r5, 8015b6e <rcl_action_send_cancel_response+0x66>
 8015b46:	b196      	cbz	r6, 8015b6e <rcl_action_send_cancel_response+0x66>
 8015b48:	6820      	ldr	r0, [r4, #0]
 8015b4a:	4632      	mov	r2, r6
 8015b4c:	4629      	mov	r1, r5
 8015b4e:	3004      	adds	r0, #4
 8015b50:	f7fe fa3a 	bl	8013fc8 <rcl_send_response>
 8015b54:	b110      	cbz	r0, 8015b5c <rcl_action_send_cancel_response+0x54>
 8015b56:	2802      	cmp	r0, #2
 8015b58:	bf18      	it	ne
 8015b5a:	2001      	movne	r0, #1
 8015b5c:	bd70      	pop	{r4, r5, r6, pc}
 8015b5e:	f7f7 fd77 	bl	800d650 <rcutils_reset_error>
 8015b62:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b66:	bd70      	pop	{r4, r5, r6, pc}
 8015b68:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b6c:	bd70      	pop	{r4, r5, r6, pc}
 8015b6e:	200b      	movs	r0, #11
 8015b70:	bd70      	pop	{r4, r5, r6, pc}
 8015b72:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b76:	4770      	bx	lr

08015b78 <rcl_action_wait_set_add_action_server>:
 8015b78:	2800      	cmp	r0, #0
 8015b7a:	d04d      	beq.n	8015c18 <rcl_action_wait_set_add_action_server+0xa0>
 8015b7c:	b570      	push	{r4, r5, r6, lr}
 8015b7e:	460c      	mov	r4, r1
 8015b80:	b159      	cbz	r1, 8015b9a <rcl_action_wait_set_add_action_server+0x22>
 8015b82:	4605      	mov	r5, r0
 8015b84:	6808      	ldr	r0, [r1, #0]
 8015b86:	b140      	cbz	r0, 8015b9a <rcl_action_wait_set_add_action_server+0x22>
 8015b88:	4616      	mov	r6, r2
 8015b8a:	f7fe fa35 	bl	8013ff8 <rcl_service_is_valid>
 8015b8e:	b120      	cbz	r0, 8015b9a <rcl_action_wait_set_add_action_server+0x22>
 8015b90:	6820      	ldr	r0, [r4, #0]
 8015b92:	3004      	adds	r0, #4
 8015b94:	f7fe fa30 	bl	8013ff8 <rcl_service_is_valid>
 8015b98:	b910      	cbnz	r0, 8015ba0 <rcl_action_wait_set_add_action_server+0x28>
 8015b9a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b9e:	bd70      	pop	{r4, r5, r6, pc}
 8015ba0:	6820      	ldr	r0, [r4, #0]
 8015ba2:	3008      	adds	r0, #8
 8015ba4:	f7fe fa28 	bl	8013ff8 <rcl_service_is_valid>
 8015ba8:	2800      	cmp	r0, #0
 8015baa:	d0f6      	beq.n	8015b9a <rcl_action_wait_set_add_action_server+0x22>
 8015bac:	6820      	ldr	r0, [r4, #0]
 8015bae:	300c      	adds	r0, #12
 8015bb0:	f7f6 fd4e 	bl	800c650 <rcl_publisher_is_valid_except_context>
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	d0f0      	beq.n	8015b9a <rcl_action_wait_set_add_action_server+0x22>
 8015bb8:	6820      	ldr	r0, [r4, #0]
 8015bba:	3010      	adds	r0, #16
 8015bbc:	f7f6 fd48 	bl	800c650 <rcl_publisher_is_valid_except_context>
 8015bc0:	2800      	cmp	r0, #0
 8015bc2:	d0ea      	beq.n	8015b9a <rcl_action_wait_set_add_action_server+0x22>
 8015bc4:	6821      	ldr	r1, [r4, #0]
 8015bc6:	4628      	mov	r0, r5
 8015bc8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8015bcc:	f7ff face 	bl	801516c <rcl_wait_set_add_service>
 8015bd0:	2800      	cmp	r0, #0
 8015bd2:	d1e4      	bne.n	8015b9e <rcl_action_wait_set_add_action_server+0x26>
 8015bd4:	6821      	ldr	r1, [r4, #0]
 8015bd6:	4628      	mov	r0, r5
 8015bd8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8015bdc:	3104      	adds	r1, #4
 8015bde:	f7ff fac5 	bl	801516c <rcl_wait_set_add_service>
 8015be2:	2800      	cmp	r0, #0
 8015be4:	d1db      	bne.n	8015b9e <rcl_action_wait_set_add_action_server+0x26>
 8015be6:	6821      	ldr	r1, [r4, #0]
 8015be8:	4628      	mov	r0, r5
 8015bea:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015bee:	3108      	adds	r1, #8
 8015bf0:	f7ff fabc 	bl	801516c <rcl_wait_set_add_service>
 8015bf4:	2800      	cmp	r0, #0
 8015bf6:	d1d2      	bne.n	8015b9e <rcl_action_wait_set_add_action_server+0x26>
 8015bf8:	6821      	ldr	r1, [r4, #0]
 8015bfa:	4628      	mov	r0, r5
 8015bfc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015c00:	3114      	adds	r1, #20
 8015c02:	f7ff fa57 	bl	80150b4 <rcl_wait_set_add_timer>
 8015c06:	2800      	cmp	r0, #0
 8015c08:	d1c9      	bne.n	8015b9e <rcl_action_wait_set_add_action_server+0x26>
 8015c0a:	2e00      	cmp	r6, #0
 8015c0c:	d0c7      	beq.n	8015b9e <rcl_action_wait_set_add_action_server+0x26>
 8015c0e:	6823      	ldr	r3, [r4, #0]
 8015c10:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8015c14:	6033      	str	r3, [r6, #0]
 8015c16:	bd70      	pop	{r4, r5, r6, pc}
 8015c18:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015c1c:	4770      	bx	lr
 8015c1e:	bf00      	nop

08015c20 <rcl_action_server_wait_set_get_entities_ready>:
 8015c20:	2800      	cmp	r0, #0
 8015c22:	d05a      	beq.n	8015cda <rcl_action_server_wait_set_get_entities_ready+0xba>
 8015c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c26:	460c      	mov	r4, r1
 8015c28:	b161      	cbz	r1, 8015c44 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c2a:	4605      	mov	r5, r0
 8015c2c:	6808      	ldr	r0, [r1, #0]
 8015c2e:	b148      	cbz	r0, 8015c44 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c30:	4616      	mov	r6, r2
 8015c32:	461f      	mov	r7, r3
 8015c34:	f7fe f9e0 	bl	8013ff8 <rcl_service_is_valid>
 8015c38:	b120      	cbz	r0, 8015c44 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c3a:	6820      	ldr	r0, [r4, #0]
 8015c3c:	3004      	adds	r0, #4
 8015c3e:	f7fe f9db 	bl	8013ff8 <rcl_service_is_valid>
 8015c42:	b910      	cbnz	r0, 8015c4a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8015c44:	f640 0098 	movw	r0, #2200	@ 0x898
 8015c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c4a:	6820      	ldr	r0, [r4, #0]
 8015c4c:	3008      	adds	r0, #8
 8015c4e:	f7fe f9d3 	bl	8013ff8 <rcl_service_is_valid>
 8015c52:	2800      	cmp	r0, #0
 8015c54:	d0f6      	beq.n	8015c44 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c56:	6820      	ldr	r0, [r4, #0]
 8015c58:	300c      	adds	r0, #12
 8015c5a:	f7f6 fcf9 	bl	800c650 <rcl_publisher_is_valid_except_context>
 8015c5e:	2800      	cmp	r0, #0
 8015c60:	d0f0      	beq.n	8015c44 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c62:	6820      	ldr	r0, [r4, #0]
 8015c64:	3010      	adds	r0, #16
 8015c66:	f7f6 fcf3 	bl	800c650 <rcl_publisher_is_valid_except_context>
 8015c6a:	2800      	cmp	r0, #0
 8015c6c:	d0ea      	beq.n	8015c44 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015c6e:	b3be      	cbz	r6, 8015ce0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015c70:	b3b7      	cbz	r7, 8015ce0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015c72:	9b06      	ldr	r3, [sp, #24]
 8015c74:	b3a3      	cbz	r3, 8015ce0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015c76:	9b07      	ldr	r3, [sp, #28]
 8015c78:	b393      	cbz	r3, 8015ce0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015c7a:	6821      	ldr	r1, [r4, #0]
 8015c7c:	692a      	ldr	r2, [r5, #16]
 8015c7e:	6a2c      	ldr	r4, [r5, #32]
 8015c80:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8015c84:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015c88:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015c8c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8015c90:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8015c94:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015c98:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015c9c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015ca0:	1a64      	subs	r4, r4, r1
 8015ca2:	fab4 f484 	clz	r4, r4
 8015ca6:	0964      	lsrs	r4, r4, #5
 8015ca8:	7034      	strb	r4, [r6, #0]
 8015caa:	1d0c      	adds	r4, r1, #4
 8015cac:	1b1b      	subs	r3, r3, r4
 8015cae:	fab3 f383 	clz	r3, r3
 8015cb2:	095b      	lsrs	r3, r3, #5
 8015cb4:	f101 0408 	add.w	r4, r1, #8
 8015cb8:	703b      	strb	r3, [r7, #0]
 8015cba:	f101 0314 	add.w	r3, r1, #20
 8015cbe:	1b01      	subs	r1, r0, r4
 8015cc0:	1ad3      	subs	r3, r2, r3
 8015cc2:	fab1 f181 	clz	r1, r1
 8015cc6:	9a06      	ldr	r2, [sp, #24]
 8015cc8:	0949      	lsrs	r1, r1, #5
 8015cca:	7011      	strb	r1, [r2, #0]
 8015ccc:	fab3 f383 	clz	r3, r3
 8015cd0:	9a07      	ldr	r2, [sp, #28]
 8015cd2:	095b      	lsrs	r3, r3, #5
 8015cd4:	2000      	movs	r0, #0
 8015cd6:	7013      	strb	r3, [r2, #0]
 8015cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015cde:	4770      	bx	lr
 8015ce0:	200b      	movs	r0, #11
 8015ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015ce4 <_execute_event_handler>:
 8015ce4:	2002      	movs	r0, #2
 8015ce6:	4770      	bx	lr

08015ce8 <_cancel_goal_event_handler>:
 8015ce8:	2003      	movs	r0, #3
 8015cea:	4770      	bx	lr

08015cec <_succeed_event_handler>:
 8015cec:	2004      	movs	r0, #4
 8015cee:	4770      	bx	lr

08015cf0 <_abort_event_handler>:
 8015cf0:	2006      	movs	r0, #6
 8015cf2:	4770      	bx	lr

08015cf4 <_canceled_event_handler>:
 8015cf4:	2005      	movs	r0, #5
 8015cf6:	4770      	bx	lr

08015cf8 <rcl_action_transition_goal_state>:
 8015cf8:	b2c2      	uxtb	r2, r0
 8015cfa:	2a06      	cmp	r2, #6
 8015cfc:	d80c      	bhi.n	8015d18 <rcl_action_transition_goal_state+0x20>
 8015cfe:	2904      	cmp	r1, #4
 8015d00:	d80a      	bhi.n	8015d18 <rcl_action_transition_goal_state+0x20>
 8015d02:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8015d06:	b410      	push	{r4}
 8015d08:	1853      	adds	r3, r2, r1
 8015d0a:	4c06      	ldr	r4, [pc, #24]	@ (8015d24 <rcl_action_transition_goal_state+0x2c>)
 8015d0c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015d10:	b123      	cbz	r3, 8015d1c <rcl_action_transition_goal_state+0x24>
 8015d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d16:	4718      	bx	r3
 8015d18:	2000      	movs	r0, #0
 8015d1a:	4770      	bx	lr
 8015d1c:	2000      	movs	r0, #0
 8015d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d22:	4770      	bx	lr
 8015d24:	0801b6d0 	.word	0x0801b6d0

08015d28 <rcl_action_get_zero_initialized_cancel_response>:
 8015d28:	b510      	push	{r4, lr}
 8015d2a:	4c07      	ldr	r4, [pc, #28]	@ (8015d48 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015d2c:	4686      	mov	lr, r0
 8015d2e:	4684      	mov	ip, r0
 8015d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d3c:	6823      	ldr	r3, [r4, #0]
 8015d3e:	f8cc 3000 	str.w	r3, [ip]
 8015d42:	4670      	mov	r0, lr
 8015d44:	bd10      	pop	{r4, pc}
 8015d46:	bf00      	nop
 8015d48:	0801b75c 	.word	0x0801b75c

08015d4c <rclc_action_send_result_request>:
 8015d4c:	b1d0      	cbz	r0, 8015d84 <rclc_action_send_result_request+0x38>
 8015d4e:	b500      	push	{lr}
 8015d50:	4684      	mov	ip, r0
 8015d52:	b087      	sub	sp, #28
 8015d54:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015d58:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015d5c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015d60:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8015d64:	f10d 0e08 	add.w	lr, sp, #8
 8015d68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015d6c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015d70:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8015d74:	a902      	add	r1, sp, #8
 8015d76:	3010      	adds	r0, #16
 8015d78:	f7ff fbda 	bl	8015530 <rcl_action_send_result_request>
 8015d7c:	b920      	cbnz	r0, 8015d88 <rclc_action_send_result_request+0x3c>
 8015d7e:	b007      	add	sp, #28
 8015d80:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d84:	200b      	movs	r0, #11
 8015d86:	4770      	bx	lr
 8015d88:	9001      	str	r0, [sp, #4]
 8015d8a:	f7f7 fc61 	bl	800d650 <rcutils_reset_error>
 8015d8e:	9801      	ldr	r0, [sp, #4]
 8015d90:	b007      	add	sp, #28
 8015d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d96:	bf00      	nop

08015d98 <rclc_action_take_goal_handle>:
 8015d98:	b160      	cbz	r0, 8015db4 <rclc_action_take_goal_handle+0x1c>
 8015d9a:	6883      	ldr	r3, [r0, #8]
 8015d9c:	b143      	cbz	r3, 8015db0 <rclc_action_take_goal_handle+0x18>
 8015d9e:	6819      	ldr	r1, [r3, #0]
 8015da0:	6081      	str	r1, [r0, #8]
 8015da2:	2200      	movs	r2, #0
 8015da4:	721a      	strb	r2, [r3, #8]
 8015da6:	68c1      	ldr	r1, [r0, #12]
 8015da8:	6019      	str	r1, [r3, #0]
 8015daa:	621a      	str	r2, [r3, #32]
 8015dac:	849a      	strh	r2, [r3, #36]	@ 0x24
 8015dae:	60c3      	str	r3, [r0, #12]
 8015db0:	4618      	mov	r0, r3
 8015db2:	4770      	bx	lr
 8015db4:	4603      	mov	r3, r0
 8015db6:	e7fb      	b.n	8015db0 <rclc_action_take_goal_handle+0x18>

08015db8 <rclc_action_remove_used_goal_handle>:
 8015db8:	b180      	cbz	r0, 8015ddc <rclc_action_remove_used_goal_handle+0x24>
 8015dba:	b179      	cbz	r1, 8015ddc <rclc_action_remove_used_goal_handle+0x24>
 8015dbc:	68c3      	ldr	r3, [r0, #12]
 8015dbe:	4299      	cmp	r1, r3
 8015dc0:	d00d      	beq.n	8015dde <rclc_action_remove_used_goal_handle+0x26>
 8015dc2:	b12b      	cbz	r3, 8015dd0 <rclc_action_remove_used_goal_handle+0x18>
 8015dc4:	681a      	ldr	r2, [r3, #0]
 8015dc6:	4291      	cmp	r1, r2
 8015dc8:	d003      	beq.n	8015dd2 <rclc_action_remove_used_goal_handle+0x1a>
 8015dca:	4613      	mov	r3, r2
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d1f9      	bne.n	8015dc4 <rclc_action_remove_used_goal_handle+0xc>
 8015dd0:	4770      	bx	lr
 8015dd2:	680a      	ldr	r2, [r1, #0]
 8015dd4:	601a      	str	r2, [r3, #0]
 8015dd6:	6883      	ldr	r3, [r0, #8]
 8015dd8:	600b      	str	r3, [r1, #0]
 8015dda:	6081      	str	r1, [r0, #8]
 8015ddc:	4770      	bx	lr
 8015dde:	680b      	ldr	r3, [r1, #0]
 8015de0:	60c3      	str	r3, [r0, #12]
 8015de2:	e7f8      	b.n	8015dd6 <rclc_action_remove_used_goal_handle+0x1e>

08015de4 <rclc_action_find_goal_handle_by_uuid>:
 8015de4:	b538      	push	{r3, r4, r5, lr}
 8015de6:	b180      	cbz	r0, 8015e0a <rclc_action_find_goal_handle_by_uuid+0x26>
 8015de8:	460d      	mov	r5, r1
 8015dea:	b181      	cbz	r1, 8015e0e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8015dec:	68c4      	ldr	r4, [r0, #12]
 8015dee:	b914      	cbnz	r4, 8015df6 <rclc_action_find_goal_handle_by_uuid+0x12>
 8015df0:	e009      	b.n	8015e06 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015df2:	6824      	ldr	r4, [r4, #0]
 8015df4:	b13c      	cbz	r4, 8015e06 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015df6:	f104 0009 	add.w	r0, r4, #9
 8015dfa:	2210      	movs	r2, #16
 8015dfc:	4629      	mov	r1, r5
 8015dfe:	f003 fa0f 	bl	8019220 <memcmp>
 8015e02:	2800      	cmp	r0, #0
 8015e04:	d1f5      	bne.n	8015df2 <rclc_action_find_goal_handle_by_uuid+0xe>
 8015e06:	4620      	mov	r0, r4
 8015e08:	bd38      	pop	{r3, r4, r5, pc}
 8015e0a:	4604      	mov	r4, r0
 8015e0c:	e7fb      	b.n	8015e06 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015e0e:	460c      	mov	r4, r1
 8015e10:	e7f9      	b.n	8015e06 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015e12:	bf00      	nop

08015e14 <rclc_action_find_first_handle_by_status>:
 8015e14:	b140      	cbz	r0, 8015e28 <rclc_action_find_first_handle_by_status+0x14>
 8015e16:	68c0      	ldr	r0, [r0, #12]
 8015e18:	b910      	cbnz	r0, 8015e20 <rclc_action_find_first_handle_by_status+0xc>
 8015e1a:	e005      	b.n	8015e28 <rclc_action_find_first_handle_by_status+0x14>
 8015e1c:	6800      	ldr	r0, [r0, #0]
 8015e1e:	b118      	cbz	r0, 8015e28 <rclc_action_find_first_handle_by_status+0x14>
 8015e20:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015e24:	428b      	cmp	r3, r1
 8015e26:	d1f9      	bne.n	8015e1c <rclc_action_find_first_handle_by_status+0x8>
 8015e28:	4770      	bx	lr
 8015e2a:	bf00      	nop

08015e2c <rclc_action_find_first_terminated_handle>:
 8015e2c:	b140      	cbz	r0, 8015e40 <rclc_action_find_first_terminated_handle+0x14>
 8015e2e:	68c0      	ldr	r0, [r0, #12]
 8015e30:	b910      	cbnz	r0, 8015e38 <rclc_action_find_first_terminated_handle+0xc>
 8015e32:	e005      	b.n	8015e40 <rclc_action_find_first_terminated_handle+0x14>
 8015e34:	6800      	ldr	r0, [r0, #0]
 8015e36:	b118      	cbz	r0, 8015e40 <rclc_action_find_first_terminated_handle+0x14>
 8015e38:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015e3c:	2b03      	cmp	r3, #3
 8015e3e:	ddf9      	ble.n	8015e34 <rclc_action_find_first_terminated_handle+0x8>
 8015e40:	4770      	bx	lr
 8015e42:	bf00      	nop

08015e44 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8015e44:	b170      	cbz	r0, 8015e64 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015e46:	68c0      	ldr	r0, [r0, #12]
 8015e48:	b160      	cbz	r0, 8015e64 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015e4a:	b410      	push	{r4}
 8015e4c:	e001      	b.n	8015e52 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015e4e:	6800      	ldr	r0, [r0, #0]
 8015e50:	b128      	cbz	r0, 8015e5e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8015e52:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8015e56:	4299      	cmp	r1, r3
 8015e58:	bf08      	it	eq
 8015e5a:	4294      	cmpeq	r4, r2
 8015e5c:	d1f7      	bne.n	8015e4e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e62:	4770      	bx	lr
 8015e64:	4770      	bx	lr
 8015e66:	bf00      	nop

08015e68 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015e68:	b170      	cbz	r0, 8015e88 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015e6a:	68c0      	ldr	r0, [r0, #12]
 8015e6c:	b160      	cbz	r0, 8015e88 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015e6e:	b410      	push	{r4}
 8015e70:	e001      	b.n	8015e76 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8015e72:	6800      	ldr	r0, [r0, #0]
 8015e74:	b128      	cbz	r0, 8015e82 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8015e76:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015e7a:	4299      	cmp	r1, r3
 8015e7c:	bf08      	it	eq
 8015e7e:	4294      	cmpeq	r4, r2
 8015e80:	d1f7      	bne.n	8015e72 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8015e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e86:	4770      	bx	lr
 8015e88:	4770      	bx	lr
 8015e8a:	bf00      	nop

08015e8c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015e8c:	b170      	cbz	r0, 8015eac <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015e8e:	68c0      	ldr	r0, [r0, #12]
 8015e90:	b160      	cbz	r0, 8015eac <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015e92:	b410      	push	{r4}
 8015e94:	e001      	b.n	8015e9a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8015e96:	6800      	ldr	r0, [r0, #0]
 8015e98:	b128      	cbz	r0, 8015ea6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015e9a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8015e9e:	4299      	cmp	r1, r3
 8015ea0:	bf08      	it	eq
 8015ea2:	4294      	cmpeq	r4, r2
 8015ea4:	d1f7      	bne.n	8015e96 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8015ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015eaa:	4770      	bx	lr
 8015eac:	4770      	bx	lr
 8015eae:	bf00      	nop

08015eb0 <rclc_action_find_first_handle_with_goal_response>:
 8015eb0:	b140      	cbz	r0, 8015ec4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015eb2:	68c0      	ldr	r0, [r0, #12]
 8015eb4:	b910      	cbnz	r0, 8015ebc <rclc_action_find_first_handle_with_goal_response+0xc>
 8015eb6:	e005      	b.n	8015ec4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015eb8:	6800      	ldr	r0, [r0, #0]
 8015eba:	b118      	cbz	r0, 8015ec4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015ebc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d0f9      	beq.n	8015eb8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8015ec4:	4770      	bx	lr
 8015ec6:	bf00      	nop

08015ec8 <rclc_action_find_first_handle_with_result_response>:
 8015ec8:	b140      	cbz	r0, 8015edc <rclc_action_find_first_handle_with_result_response+0x14>
 8015eca:	68c0      	ldr	r0, [r0, #12]
 8015ecc:	b910      	cbnz	r0, 8015ed4 <rclc_action_find_first_handle_with_result_response+0xc>
 8015ece:	e005      	b.n	8015edc <rclc_action_find_first_handle_with_result_response+0x14>
 8015ed0:	6800      	ldr	r0, [r0, #0]
 8015ed2:	b118      	cbz	r0, 8015edc <rclc_action_find_first_handle_with_result_response+0x14>
 8015ed4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d0f9      	beq.n	8015ed0 <rclc_action_find_first_handle_with_result_response+0x8>
 8015edc:	4770      	bx	lr
 8015ede:	bf00      	nop

08015ee0 <rclc_action_server_response_goal_request>:
 8015ee0:	b198      	cbz	r0, 8015f0a <rclc_action_server_response_goal_request+0x2a>
 8015ee2:	b510      	push	{r4, lr}
 8015ee4:	6844      	ldr	r4, [r0, #4]
 8015ee6:	b086      	sub	sp, #24
 8015ee8:	2200      	movs	r2, #0
 8015eea:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015eee:	460b      	mov	r3, r1
 8015ef0:	9205      	str	r2, [sp, #20]
 8015ef2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015ef6:	aa03      	add	r2, sp, #12
 8015ef8:	f104 0010 	add.w	r0, r4, #16
 8015efc:	f88d 300c 	strb.w	r3, [sp, #12]
 8015f00:	f7ff fd4a 	bl	8015998 <rcl_action_send_goal_response>
 8015f04:	b918      	cbnz	r0, 8015f0e <rclc_action_server_response_goal_request+0x2e>
 8015f06:	b006      	add	sp, #24
 8015f08:	bd10      	pop	{r4, pc}
 8015f0a:	200b      	movs	r0, #11
 8015f0c:	4770      	bx	lr
 8015f0e:	9001      	str	r0, [sp, #4]
 8015f10:	f7f7 fb9e 	bl	800d650 <rcutils_reset_error>
 8015f14:	9801      	ldr	r0, [sp, #4]
 8015f16:	b006      	add	sp, #24
 8015f18:	bd10      	pop	{r4, pc}
 8015f1a:	bf00      	nop
 8015f1c:	0000      	movs	r0, r0
	...

08015f20 <rclc_action_server_goal_cancel_accept>:
 8015f20:	b310      	cbz	r0, 8015f68 <rclc_action_server_goal_cancel_accept+0x48>
 8015f22:	b510      	push	{r4, lr}
 8015f24:	b090      	sub	sp, #64	@ 0x40
 8015f26:	4604      	mov	r4, r0
 8015f28:	a806      	add	r0, sp, #24
 8015f2a:	f7ff fefd 	bl	8015d28 <rcl_action_get_zero_initialized_cancel_response>
 8015f2e:	2300      	movs	r3, #0
 8015f30:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8015f34:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015f38:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8015f3c:	f88d 3018 	strb.w	r3, [sp, #24]
 8015f40:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8015f44:	f8cd d01c 	str.w	sp, [sp, #28]
 8015f48:	46ec      	mov	ip, sp
 8015f4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f4e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015f70 <rclc_action_server_goal_cancel_accept+0x50>
 8015f52:	6860      	ldr	r0, [r4, #4]
 8015f54:	aa06      	add	r2, sp, #24
 8015f56:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015f5a:	3010      	adds	r0, #16
 8015f5c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015f60:	f7ff fdd2 	bl	8015b08 <rcl_action_send_cancel_response>
 8015f64:	b010      	add	sp, #64	@ 0x40
 8015f66:	bd10      	pop	{r4, pc}
 8015f68:	200b      	movs	r0, #11
 8015f6a:	4770      	bx	lr
 8015f6c:	f3af 8000 	nop.w
 8015f70:	00000001 	.word	0x00000001
 8015f74:	00000001 	.word	0x00000001

08015f78 <rclc_action_server_goal_cancel_reject>:
 8015f78:	b082      	sub	sp, #8
 8015f7a:	b530      	push	{r4, r5, lr}
 8015f7c:	b08b      	sub	sp, #44	@ 0x2c
 8015f7e:	ac0e      	add	r4, sp, #56	@ 0x38
 8015f80:	e884 000c 	stmia.w	r4, {r2, r3}
 8015f84:	b188      	cbz	r0, 8015faa <rclc_action_server_goal_cancel_reject+0x32>
 8015f86:	4604      	mov	r4, r0
 8015f88:	a801      	add	r0, sp, #4
 8015f8a:	460d      	mov	r5, r1
 8015f8c:	f7ff fecc 	bl	8015d28 <rcl_action_get_zero_initialized_cancel_response>
 8015f90:	aa01      	add	r2, sp, #4
 8015f92:	a90e      	add	r1, sp, #56	@ 0x38
 8015f94:	f104 0010 	add.w	r0, r4, #16
 8015f98:	f88d 5004 	strb.w	r5, [sp, #4]
 8015f9c:	f7ff fdb4 	bl	8015b08 <rcl_action_send_cancel_response>
 8015fa0:	b00b      	add	sp, #44	@ 0x2c
 8015fa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fa6:	b002      	add	sp, #8
 8015fa8:	4770      	bx	lr
 8015faa:	200b      	movs	r0, #11
 8015fac:	b00b      	add	sp, #44	@ 0x2c
 8015fae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fb2:	b002      	add	sp, #8
 8015fb4:	4770      	bx	lr
 8015fb6:	bf00      	nop

08015fb8 <__atomic_load_8>:
 8015fb8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015fbc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015fc0:	4a15      	ldr	r2, [pc, #84]	@ (8016018 <__atomic_load_8+0x60>)
 8015fc2:	4b16      	ldr	r3, [pc, #88]	@ (801601c <__atomic_load_8+0x64>)
 8015fc4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015fc8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015fcc:	fb02 f101 	mul.w	r1, r2, r1
 8015fd0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015fd4:	fba3 2301 	umull	r2, r3, r3, r1
 8015fd8:	091b      	lsrs	r3, r3, #4
 8015fda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015fde:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8015fe2:	b4d0      	push	{r4, r6, r7}
 8015fe4:	4c0e      	ldr	r4, [pc, #56]	@ (8016020 <__atomic_load_8+0x68>)
 8015fe6:	1ac9      	subs	r1, r1, r3
 8015fe8:	1862      	adds	r2, r4, r1
 8015fea:	f04f 0c01 	mov.w	ip, #1
 8015fee:	e8d2 3f4f 	ldrexb	r3, [r2]
 8015ff2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8015ff6:	2e00      	cmp	r6, #0
 8015ff8:	d1f9      	bne.n	8015fee <__atomic_load_8+0x36>
 8015ffa:	f3bf 8f5b 	dmb	ish
 8015ffe:	b2db      	uxtb	r3, r3
 8016000:	2b00      	cmp	r3, #0
 8016002:	d1f4      	bne.n	8015fee <__atomic_load_8+0x36>
 8016004:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016008:	f3bf 8f5b 	dmb	ish
 801600c:	5463      	strb	r3, [r4, r1]
 801600e:	4630      	mov	r0, r6
 8016010:	4639      	mov	r1, r7
 8016012:	bcd0      	pop	{r4, r6, r7}
 8016014:	4770      	bx	lr
 8016016:	bf00      	nop
 8016018:	27d4eb2d 	.word	0x27d4eb2d
 801601c:	b21642c9 	.word	0xb21642c9
 8016020:	2000b690 	.word	0x2000b690

08016024 <__atomic_store_8>:
 8016024:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016028:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801602c:	b570      	push	{r4, r5, r6, lr}
 801602e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016032:	4c14      	ldr	r4, [pc, #80]	@ (8016084 <__atomic_store_8+0x60>)
 8016034:	4d14      	ldr	r5, [pc, #80]	@ (8016088 <__atomic_store_8+0x64>)
 8016036:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801603a:	fb04 f101 	mul.w	r1, r4, r1
 801603e:	4c13      	ldr	r4, [pc, #76]	@ (801608c <__atomic_store_8+0x68>)
 8016040:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016044:	fba4 4e01 	umull	r4, lr, r4, r1
 8016048:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801604c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8016050:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8016054:	eba1 0e0e 	sub.w	lr, r1, lr
 8016058:	eb05 0c0e 	add.w	ip, r5, lr
 801605c:	f04f 0401 	mov.w	r4, #1
 8016060:	e8dc 1f4f 	ldrexb	r1, [ip]
 8016064:	e8cc 4f46 	strexb	r6, r4, [ip]
 8016068:	2e00      	cmp	r6, #0
 801606a:	d1f9      	bne.n	8016060 <__atomic_store_8+0x3c>
 801606c:	f3bf 8f5b 	dmb	ish
 8016070:	b2c9      	uxtb	r1, r1
 8016072:	2900      	cmp	r1, #0
 8016074:	d1f4      	bne.n	8016060 <__atomic_store_8+0x3c>
 8016076:	e9c0 2300 	strd	r2, r3, [r0]
 801607a:	f3bf 8f5b 	dmb	ish
 801607e:	f805 100e 	strb.w	r1, [r5, lr]
 8016082:	bd70      	pop	{r4, r5, r6, pc}
 8016084:	27d4eb2d 	.word	0x27d4eb2d
 8016088:	2000b690 	.word	0x2000b690
 801608c:	b21642c9 	.word	0xb21642c9

08016090 <__atomic_exchange_8>:
 8016090:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8016094:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8016098:	4916      	ldr	r1, [pc, #88]	@ (80160f4 <__atomic_exchange_8+0x64>)
 801609a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801609e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80160a2:	fb01 fc0c 	mul.w	ip, r1, ip
 80160a6:	4914      	ldr	r1, [pc, #80]	@ (80160f8 <__atomic_exchange_8+0x68>)
 80160a8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80160ac:	b570      	push	{r4, r5, r6, lr}
 80160ae:	4605      	mov	r5, r0
 80160b0:	fba1 010c 	umull	r0, r1, r1, ip
 80160b4:	0909      	lsrs	r1, r1, #4
 80160b6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80160ba:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80160be:	4e0f      	ldr	r6, [pc, #60]	@ (80160fc <__atomic_exchange_8+0x6c>)
 80160c0:	ebac 0c01 	sub.w	ip, ip, r1
 80160c4:	eb06 010c 	add.w	r1, r6, ip
 80160c8:	f04f 0e01 	mov.w	lr, #1
 80160cc:	e8d1 4f4f 	ldrexb	r4, [r1]
 80160d0:	e8c1 ef40 	strexb	r0, lr, [r1]
 80160d4:	2800      	cmp	r0, #0
 80160d6:	d1f9      	bne.n	80160cc <__atomic_exchange_8+0x3c>
 80160d8:	f3bf 8f5b 	dmb	ish
 80160dc:	b2e4      	uxtb	r4, r4
 80160de:	2c00      	cmp	r4, #0
 80160e0:	d1f4      	bne.n	80160cc <__atomic_exchange_8+0x3c>
 80160e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80160e6:	e9c5 2300 	strd	r2, r3, [r5]
 80160ea:	f3bf 8f5b 	dmb	ish
 80160ee:	f806 400c 	strb.w	r4, [r6, ip]
 80160f2:	bd70      	pop	{r4, r5, r6, pc}
 80160f4:	27d4eb2d 	.word	0x27d4eb2d
 80160f8:	b21642c9 	.word	0xb21642c9
 80160fc:	2000b690 	.word	0x2000b690

08016100 <rcutils_get_env>:
 8016100:	b168      	cbz	r0, 801611e <rcutils_get_env+0x1e>
 8016102:	b510      	push	{r4, lr}
 8016104:	460c      	mov	r4, r1
 8016106:	b129      	cbz	r1, 8016114 <rcutils_get_env+0x14>
 8016108:	f002 fbf8 	bl	80188fc <getenv>
 801610c:	b120      	cbz	r0, 8016118 <rcutils_get_env+0x18>
 801610e:	6020      	str	r0, [r4, #0]
 8016110:	2000      	movs	r0, #0
 8016112:	bd10      	pop	{r4, pc}
 8016114:	4803      	ldr	r0, [pc, #12]	@ (8016124 <rcutils_get_env+0x24>)
 8016116:	bd10      	pop	{r4, pc}
 8016118:	4b03      	ldr	r3, [pc, #12]	@ (8016128 <rcutils_get_env+0x28>)
 801611a:	6023      	str	r3, [r4, #0]
 801611c:	bd10      	pop	{r4, pc}
 801611e:	4803      	ldr	r0, [pc, #12]	@ (801612c <rcutils_get_env+0x2c>)
 8016120:	4770      	bx	lr
 8016122:	bf00      	nop
 8016124:	0801b79c 	.word	0x0801b79c
 8016128:	0801bb74 	.word	0x0801bb74
 801612c:	0801b780 	.word	0x0801b780

08016130 <rcutils_is_directory>:
 8016130:	2000      	movs	r0, #0
 8016132:	4770      	bx	lr

08016134 <rcutils_join_path>:
 8016134:	b082      	sub	sp, #8
 8016136:	e88d 000c 	stmia.w	sp, {r2, r3}
 801613a:	2000      	movs	r0, #0
 801613c:	b002      	add	sp, #8
 801613e:	4770      	bx	lr

08016140 <rcutils_to_native_path>:
 8016140:	b084      	sub	sp, #16
 8016142:	a801      	add	r0, sp, #4
 8016144:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016148:	b004      	add	sp, #16
 801614a:	2000      	movs	r0, #0
 801614c:	4770      	bx	lr
 801614e:	bf00      	nop

08016150 <rcutils_format_string_limit>:
 8016150:	b40f      	push	{r0, r1, r2, r3}
 8016152:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016154:	b083      	sub	sp, #12
 8016156:	ac08      	add	r4, sp, #32
 8016158:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801615a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801615e:	b34e      	cbz	r6, 80161b4 <rcutils_format_string_limit+0x64>
 8016160:	a808      	add	r0, sp, #32
 8016162:	f7f7 fa4f 	bl	800d604 <rcutils_allocator_is_valid>
 8016166:	b328      	cbz	r0, 80161b4 <rcutils_format_string_limit+0x64>
 8016168:	2100      	movs	r1, #0
 801616a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801616c:	4632      	mov	r2, r6
 801616e:	4608      	mov	r0, r1
 8016170:	e9cd 3300 	strd	r3, r3, [sp]
 8016174:	f000 f8f4 	bl	8016360 <rcutils_vsnprintf>
 8016178:	1c43      	adds	r3, r0, #1
 801617a:	4605      	mov	r5, r0
 801617c:	d01a      	beq.n	80161b4 <rcutils_format_string_limit+0x64>
 801617e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016180:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016182:	1c47      	adds	r7, r0, #1
 8016184:	429f      	cmp	r7, r3
 8016186:	bf84      	itt	hi
 8016188:	461f      	movhi	r7, r3
 801618a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801618e:	4638      	mov	r0, r7
 8016190:	9b08      	ldr	r3, [sp, #32]
 8016192:	4798      	blx	r3
 8016194:	4604      	mov	r4, r0
 8016196:	b168      	cbz	r0, 80161b4 <rcutils_format_string_limit+0x64>
 8016198:	9b01      	ldr	r3, [sp, #4]
 801619a:	4632      	mov	r2, r6
 801619c:	4639      	mov	r1, r7
 801619e:	f000 f8df 	bl	8016360 <rcutils_vsnprintf>
 80161a2:	2800      	cmp	r0, #0
 80161a4:	db02      	blt.n	80161ac <rcutils_format_string_limit+0x5c>
 80161a6:	2300      	movs	r3, #0
 80161a8:	5563      	strb	r3, [r4, r5]
 80161aa:	e004      	b.n	80161b6 <rcutils_format_string_limit+0x66>
 80161ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80161b0:	4620      	mov	r0, r4
 80161b2:	4798      	blx	r3
 80161b4:	2400      	movs	r4, #0
 80161b6:	4620      	mov	r0, r4
 80161b8:	b003      	add	sp, #12
 80161ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80161be:	b004      	add	sp, #16
 80161c0:	4770      	bx	lr
 80161c2:	bf00      	nop

080161c4 <rcutils_repl_str>:
 80161c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161c8:	ed2d 8b02 	vpush	{d8}
 80161cc:	b087      	sub	sp, #28
 80161ce:	4680      	mov	r8, r0
 80161d0:	4608      	mov	r0, r1
 80161d2:	f8cd 8004 	str.w	r8, [sp, #4]
 80161d6:	ee08 2a10 	vmov	s16, r2
 80161da:	468a      	mov	sl, r1
 80161dc:	4699      	mov	r9, r3
 80161de:	f7ea f829 	bl	8000234 <strlen>
 80161e2:	2600      	movs	r6, #0
 80161e4:	4647      	mov	r7, r8
 80161e6:	9002      	str	r0, [sp, #8]
 80161e8:	46b3      	mov	fp, r6
 80161ea:	2510      	movs	r5, #16
 80161ec:	46b0      	mov	r8, r6
 80161ee:	e01d      	b.n	801622c <rcutils_repl_str+0x68>
 80161f0:	f10b 0b01 	add.w	fp, fp, #1
 80161f4:	455e      	cmp	r6, fp
 80161f6:	d211      	bcs.n	801621c <rcutils_repl_str+0x58>
 80161f8:	442e      	add	r6, r5
 80161fa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80161fe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016202:	00b1      	lsls	r1, r6, #2
 8016204:	4798      	blx	r3
 8016206:	2800      	cmp	r0, #0
 8016208:	f000 8088 	beq.w	801631c <rcutils_repl_str+0x158>
 801620c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016210:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8016214:	4680      	mov	r8, r0
 8016216:	bf28      	it	cs
 8016218:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801621c:	9a01      	ldr	r2, [sp, #4]
 801621e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016222:	1aa2      	subs	r2, r4, r2
 8016224:	f843 2c04 	str.w	r2, [r3, #-4]
 8016228:	9b02      	ldr	r3, [sp, #8]
 801622a:	18e7      	adds	r7, r4, r3
 801622c:	4651      	mov	r1, sl
 801622e:	4638      	mov	r0, r7
 8016230:	f003 f847 	bl	80192c2 <strstr>
 8016234:	4604      	mov	r4, r0
 8016236:	4640      	mov	r0, r8
 8016238:	2c00      	cmp	r4, #0
 801623a:	d1d9      	bne.n	80161f0 <rcutils_repl_str+0x2c>
 801623c:	46b8      	mov	r8, r7
 801623e:	4607      	mov	r7, r0
 8016240:	4640      	mov	r0, r8
 8016242:	f7e9 fff7 	bl	8000234 <strlen>
 8016246:	9b01      	ldr	r3, [sp, #4]
 8016248:	eba8 0303 	sub.w	r3, r8, r3
 801624c:	181c      	adds	r4, r3, r0
 801624e:	9404      	str	r4, [sp, #16]
 8016250:	f1bb 0f00 	cmp.w	fp, #0
 8016254:	d04a      	beq.n	80162ec <rcutils_repl_str+0x128>
 8016256:	ee18 0a10 	vmov	r0, s16
 801625a:	f7e9 ffeb 	bl	8000234 <strlen>
 801625e:	9b02      	ldr	r3, [sp, #8]
 8016260:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016264:	1ac3      	subs	r3, r0, r3
 8016266:	fb0b 4303 	mla	r3, fp, r3, r4
 801626a:	461a      	mov	r2, r3
 801626c:	9305      	str	r3, [sp, #20]
 801626e:	4606      	mov	r6, r0
 8016270:	f8d9 3000 	ldr.w	r3, [r9]
 8016274:	1c50      	adds	r0, r2, #1
 8016276:	4798      	blx	r3
 8016278:	9003      	str	r0, [sp, #12]
 801627a:	2800      	cmp	r0, #0
 801627c:	d04f      	beq.n	801631e <rcutils_repl_str+0x15a>
 801627e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016282:	683a      	ldr	r2, [r7, #0]
 8016284:	4641      	mov	r1, r8
 8016286:	f003 f8be 	bl	8019406 <memcpy>
 801628a:	683d      	ldr	r5, [r7, #0]
 801628c:	9b03      	ldr	r3, [sp, #12]
 801628e:	9701      	str	r7, [sp, #4]
 8016290:	46ba      	mov	sl, r7
 8016292:	441d      	add	r5, r3
 8016294:	9f02      	ldr	r7, [sp, #8]
 8016296:	f8cd 9008 	str.w	r9, [sp, #8]
 801629a:	2401      	movs	r4, #1
 801629c:	46d1      	mov	r9, sl
 801629e:	ee18 aa10 	vmov	sl, s16
 80162a2:	e00a      	b.n	80162ba <rcutils_repl_str+0xf6>
 80162a4:	f8d9 5000 	ldr.w	r5, [r9]
 80162a8:	1aaa      	subs	r2, r5, r2
 80162aa:	1885      	adds	r5, r0, r2
 80162ac:	f003 f8ab 	bl	8019406 <memcpy>
 80162b0:	45a3      	cmp	fp, r4
 80162b2:	f104 0201 	add.w	r2, r4, #1
 80162b6:	d935      	bls.n	8016324 <rcutils_repl_str+0x160>
 80162b8:	4614      	mov	r4, r2
 80162ba:	4632      	mov	r2, r6
 80162bc:	4651      	mov	r1, sl
 80162be:	4628      	mov	r0, r5
 80162c0:	f003 f8a1 	bl	8019406 <memcpy>
 80162c4:	f859 2b04 	ldr.w	r2, [r9], #4
 80162c8:	45a3      	cmp	fp, r4
 80162ca:	443a      	add	r2, r7
 80162cc:	eb05 0006 	add.w	r0, r5, r6
 80162d0:	eb08 0102 	add.w	r1, r8, r2
 80162d4:	d1e6      	bne.n	80162a4 <rcutils_repl_str+0xe0>
 80162d6:	9b04      	ldr	r3, [sp, #16]
 80162d8:	1a9a      	subs	r2, r3, r2
 80162da:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80162de:	f003 f892 	bl	8019406 <memcpy>
 80162e2:	9a03      	ldr	r2, [sp, #12]
 80162e4:	9905      	ldr	r1, [sp, #20]
 80162e6:	2300      	movs	r3, #0
 80162e8:	5453      	strb	r3, [r2, r1]
 80162ea:	e00b      	b.n	8016304 <rcutils_repl_str+0x140>
 80162ec:	4620      	mov	r0, r4
 80162ee:	f8d9 3000 	ldr.w	r3, [r9]
 80162f2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80162f6:	3001      	adds	r0, #1
 80162f8:	4798      	blx	r3
 80162fa:	9003      	str	r0, [sp, #12]
 80162fc:	b110      	cbz	r0, 8016304 <rcutils_repl_str+0x140>
 80162fe:	9901      	ldr	r1, [sp, #4]
 8016300:	f003 f879 	bl	80193f6 <strcpy>
 8016304:	4638      	mov	r0, r7
 8016306:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801630a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801630e:	4798      	blx	r3
 8016310:	9803      	ldr	r0, [sp, #12]
 8016312:	b007      	add	sp, #28
 8016314:	ecbd 8b02 	vpop	{d8}
 8016318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801631c:	4647      	mov	r7, r8
 801631e:	2300      	movs	r3, #0
 8016320:	9303      	str	r3, [sp, #12]
 8016322:	e7ef      	b.n	8016304 <rcutils_repl_str+0x140>
 8016324:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016328:	e7db      	b.n	80162e2 <rcutils_repl_str+0x11e>
 801632a:	bf00      	nop

0801632c <rcutils_snprintf>:
 801632c:	b40c      	push	{r2, r3}
 801632e:	b530      	push	{r4, r5, lr}
 8016330:	b083      	sub	sp, #12
 8016332:	ab06      	add	r3, sp, #24
 8016334:	f853 2b04 	ldr.w	r2, [r3], #4
 8016338:	9301      	str	r3, [sp, #4]
 801633a:	b152      	cbz	r2, 8016352 <rcutils_snprintf+0x26>
 801633c:	b138      	cbz	r0, 801634e <rcutils_snprintf+0x22>
 801633e:	b141      	cbz	r1, 8016352 <rcutils_snprintf+0x26>
 8016340:	f002 fecc 	bl	80190dc <vsniprintf>
 8016344:	b003      	add	sp, #12
 8016346:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801634a:	b002      	add	sp, #8
 801634c:	4770      	bx	lr
 801634e:	2900      	cmp	r1, #0
 8016350:	d0f6      	beq.n	8016340 <rcutils_snprintf+0x14>
 8016352:	f003 f823 	bl	801939c <__errno>
 8016356:	2316      	movs	r3, #22
 8016358:	6003      	str	r3, [r0, #0]
 801635a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801635e:	e7f1      	b.n	8016344 <rcutils_snprintf+0x18>

08016360 <rcutils_vsnprintf>:
 8016360:	b570      	push	{r4, r5, r6, lr}
 8016362:	b13a      	cbz	r2, 8016374 <rcutils_vsnprintf+0x14>
 8016364:	b120      	cbz	r0, 8016370 <rcutils_vsnprintf+0x10>
 8016366:	b129      	cbz	r1, 8016374 <rcutils_vsnprintf+0x14>
 8016368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801636c:	f002 beb6 	b.w	80190dc <vsniprintf>
 8016370:	2900      	cmp	r1, #0
 8016372:	d0f9      	beq.n	8016368 <rcutils_vsnprintf+0x8>
 8016374:	f003 f812 	bl	801939c <__errno>
 8016378:	2316      	movs	r3, #22
 801637a:	6003      	str	r3, [r0, #0]
 801637c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016380:	bd70      	pop	{r4, r5, r6, pc}
 8016382:	bf00      	nop

08016384 <rcutils_strdup>:
 8016384:	b084      	sub	sp, #16
 8016386:	b570      	push	{r4, r5, r6, lr}
 8016388:	b082      	sub	sp, #8
 801638a:	ac07      	add	r4, sp, #28
 801638c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016390:	4605      	mov	r5, r0
 8016392:	b1b0      	cbz	r0, 80163c2 <rcutils_strdup+0x3e>
 8016394:	f7e9 ff4e 	bl	8000234 <strlen>
 8016398:	1c42      	adds	r2, r0, #1
 801639a:	9b07      	ldr	r3, [sp, #28]
 801639c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801639e:	9201      	str	r2, [sp, #4]
 80163a0:	4606      	mov	r6, r0
 80163a2:	4610      	mov	r0, r2
 80163a4:	4798      	blx	r3
 80163a6:	4604      	mov	r4, r0
 80163a8:	b128      	cbz	r0, 80163b6 <rcutils_strdup+0x32>
 80163aa:	9a01      	ldr	r2, [sp, #4]
 80163ac:	4629      	mov	r1, r5
 80163ae:	f003 f82a 	bl	8019406 <memcpy>
 80163b2:	2300      	movs	r3, #0
 80163b4:	55a3      	strb	r3, [r4, r6]
 80163b6:	4620      	mov	r0, r4
 80163b8:	b002      	add	sp, #8
 80163ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163be:	b004      	add	sp, #16
 80163c0:	4770      	bx	lr
 80163c2:	4604      	mov	r4, r0
 80163c4:	e7f7      	b.n	80163b6 <rcutils_strdup+0x32>
 80163c6:	bf00      	nop

080163c8 <rcutils_strndup>:
 80163c8:	b082      	sub	sp, #8
 80163ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163cc:	ac06      	add	r4, sp, #24
 80163ce:	e884 000c 	stmia.w	r4, {r2, r3}
 80163d2:	4605      	mov	r5, r0
 80163d4:	b188      	cbz	r0, 80163fa <rcutils_strndup+0x32>
 80163d6:	1c4f      	adds	r7, r1, #1
 80163d8:	460e      	mov	r6, r1
 80163da:	4638      	mov	r0, r7
 80163dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163de:	4790      	blx	r2
 80163e0:	4604      	mov	r4, r0
 80163e2:	b128      	cbz	r0, 80163f0 <rcutils_strndup+0x28>
 80163e4:	463a      	mov	r2, r7
 80163e6:	4629      	mov	r1, r5
 80163e8:	f003 f80d 	bl	8019406 <memcpy>
 80163ec:	2300      	movs	r3, #0
 80163ee:	55a3      	strb	r3, [r4, r6]
 80163f0:	4620      	mov	r0, r4
 80163f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80163f6:	b002      	add	sp, #8
 80163f8:	4770      	bx	lr
 80163fa:	4604      	mov	r4, r0
 80163fc:	e7f8      	b.n	80163f0 <rcutils_strndup+0x28>
 80163fe:	bf00      	nop

08016400 <rcutils_get_zero_initialized_string_map>:
 8016400:	4b01      	ldr	r3, [pc, #4]	@ (8016408 <rcutils_get_zero_initialized_string_map+0x8>)
 8016402:	2000      	movs	r0, #0
 8016404:	6018      	str	r0, [r3, #0]
 8016406:	4770      	bx	lr
 8016408:	2000b6a8 	.word	0x2000b6a8

0801640c <rcutils_string_map_reserve>:
 801640c:	2800      	cmp	r0, #0
 801640e:	d05f      	beq.n	80164d0 <rcutils_string_map_reserve+0xc4>
 8016410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016414:	460c      	mov	r4, r1
 8016416:	6801      	ldr	r1, [r0, #0]
 8016418:	b082      	sub	sp, #8
 801641a:	4605      	mov	r5, r0
 801641c:	b129      	cbz	r1, 801642a <rcutils_string_map_reserve+0x1e>
 801641e:	68cb      	ldr	r3, [r1, #12]
 8016420:	42a3      	cmp	r3, r4
 8016422:	d906      	bls.n	8016432 <rcutils_string_map_reserve+0x26>
 8016424:	461c      	mov	r4, r3
 8016426:	2900      	cmp	r1, #0
 8016428:	d1f9      	bne.n	801641e <rcutils_string_map_reserve+0x12>
 801642a:	201f      	movs	r0, #31
 801642c:	b002      	add	sp, #8
 801642e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016432:	688b      	ldr	r3, [r1, #8]
 8016434:	42a3      	cmp	r3, r4
 8016436:	d047      	beq.n	80164c8 <rcutils_string_map_reserve+0xbc>
 8016438:	6a0e      	ldr	r6, [r1, #32]
 801643a:	2c00      	cmp	r4, #0
 801643c:	d034      	beq.n	80164a8 <rcutils_string_map_reserve+0x9c>
 801643e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8016442:	d243      	bcs.n	80164cc <rcutils_string_map_reserve+0xc0>
 8016444:	00a7      	lsls	r7, r4, #2
 8016446:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801644a:	6808      	ldr	r0, [r1, #0]
 801644c:	4632      	mov	r2, r6
 801644e:	4639      	mov	r1, r7
 8016450:	47c0      	blx	r8
 8016452:	2800      	cmp	r0, #0
 8016454:	d03a      	beq.n	80164cc <rcutils_string_map_reserve+0xc0>
 8016456:	682b      	ldr	r3, [r5, #0]
 8016458:	4632      	mov	r2, r6
 801645a:	6018      	str	r0, [r3, #0]
 801645c:	4639      	mov	r1, r7
 801645e:	6858      	ldr	r0, [r3, #4]
 8016460:	47c0      	blx	r8
 8016462:	2800      	cmp	r0, #0
 8016464:	d032      	beq.n	80164cc <rcutils_string_map_reserve+0xc0>
 8016466:	682d      	ldr	r5, [r5, #0]
 8016468:	68ab      	ldr	r3, [r5, #8]
 801646a:	6068      	str	r0, [r5, #4]
 801646c:	42a3      	cmp	r3, r4
 801646e:	d226      	bcs.n	80164be <rcutils_string_map_reserve+0xb2>
 8016470:	682a      	ldr	r2, [r5, #0]
 8016472:	eb00 0c07 	add.w	ip, r0, r7
 8016476:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801647a:	45e6      	cmp	lr, ip
 801647c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016480:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016484:	d203      	bcs.n	801648e <rcutils_string_map_reserve+0x82>
 8016486:	eb02 0c07 	add.w	ip, r2, r7
 801648a:	4566      	cmp	r6, ip
 801648c:	d322      	bcc.n	80164d4 <rcutils_string_map_reserve+0xc8>
 801648e:	1ae3      	subs	r3, r4, r3
 8016490:	009a      	lsls	r2, r3, #2
 8016492:	4670      	mov	r0, lr
 8016494:	2100      	movs	r1, #0
 8016496:	9201      	str	r2, [sp, #4]
 8016498:	f002 feec 	bl	8019274 <memset>
 801649c:	9a01      	ldr	r2, [sp, #4]
 801649e:	2100      	movs	r1, #0
 80164a0:	4630      	mov	r0, r6
 80164a2:	f002 fee7 	bl	8019274 <memset>
 80164a6:	e00a      	b.n	80164be <rcutils_string_map_reserve+0xb2>
 80164a8:	694f      	ldr	r7, [r1, #20]
 80164aa:	6808      	ldr	r0, [r1, #0]
 80164ac:	4631      	mov	r1, r6
 80164ae:	47b8      	blx	r7
 80164b0:	682b      	ldr	r3, [r5, #0]
 80164b2:	4631      	mov	r1, r6
 80164b4:	6858      	ldr	r0, [r3, #4]
 80164b6:	601c      	str	r4, [r3, #0]
 80164b8:	47b8      	blx	r7
 80164ba:	682d      	ldr	r5, [r5, #0]
 80164bc:	606c      	str	r4, [r5, #4]
 80164be:	2000      	movs	r0, #0
 80164c0:	60ac      	str	r4, [r5, #8]
 80164c2:	b002      	add	sp, #8
 80164c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164c8:	2000      	movs	r0, #0
 80164ca:	e7af      	b.n	801642c <rcutils_string_map_reserve+0x20>
 80164cc:	200a      	movs	r0, #10
 80164ce:	e7ad      	b.n	801642c <rcutils_string_map_reserve+0x20>
 80164d0:	200b      	movs	r0, #11
 80164d2:	4770      	bx	lr
 80164d4:	1f0b      	subs	r3, r1, #4
 80164d6:	4418      	add	r0, r3
 80164d8:	4413      	add	r3, r2
 80164da:	3a04      	subs	r2, #4
 80164dc:	4417      	add	r7, r2
 80164de:	2200      	movs	r2, #0
 80164e0:	f843 2f04 	str.w	r2, [r3, #4]!
 80164e4:	42bb      	cmp	r3, r7
 80164e6:	f840 2f04 	str.w	r2, [r0, #4]!
 80164ea:	d1f9      	bne.n	80164e0 <rcutils_string_map_reserve+0xd4>
 80164ec:	e7e7      	b.n	80164be <rcutils_string_map_reserve+0xb2>
 80164ee:	bf00      	nop

080164f0 <rcutils_string_map_init>:
 80164f0:	b082      	sub	sp, #8
 80164f2:	b570      	push	{r4, r5, r6, lr}
 80164f4:	ac04      	add	r4, sp, #16
 80164f6:	e884 000c 	stmia.w	r4, {r2, r3}
 80164fa:	b380      	cbz	r0, 801655e <rcutils_string_map_init+0x6e>
 80164fc:	6806      	ldr	r6, [r0, #0]
 80164fe:	4604      	mov	r4, r0
 8016500:	b12e      	cbz	r6, 801650e <rcutils_string_map_init+0x1e>
 8016502:	251e      	movs	r5, #30
 8016504:	4628      	mov	r0, r5
 8016506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801650a:	b002      	add	sp, #8
 801650c:	4770      	bx	lr
 801650e:	a804      	add	r0, sp, #16
 8016510:	460d      	mov	r5, r1
 8016512:	f7f7 f877 	bl	800d604 <rcutils_allocator_is_valid>
 8016516:	b310      	cbz	r0, 801655e <rcutils_string_map_init+0x6e>
 8016518:	9b04      	ldr	r3, [sp, #16]
 801651a:	9908      	ldr	r1, [sp, #32]
 801651c:	2024      	movs	r0, #36	@ 0x24
 801651e:	4798      	blx	r3
 8016520:	6020      	str	r0, [r4, #0]
 8016522:	b310      	cbz	r0, 801656a <rcutils_string_map_init+0x7a>
 8016524:	f10d 0e10 	add.w	lr, sp, #16
 8016528:	e9c0 6600 	strd	r6, r6, [r0]
 801652c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016530:	f100 0c10 	add.w	ip, r0, #16
 8016534:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016538:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801653c:	f8de 3000 	ldr.w	r3, [lr]
 8016540:	f8cc 3000 	str.w	r3, [ip]
 8016544:	4629      	mov	r1, r5
 8016546:	4620      	mov	r0, r4
 8016548:	f7ff ff60 	bl	801640c <rcutils_string_map_reserve>
 801654c:	4605      	mov	r5, r0
 801654e:	2800      	cmp	r0, #0
 8016550:	d0d8      	beq.n	8016504 <rcutils_string_map_init+0x14>
 8016552:	9b05      	ldr	r3, [sp, #20]
 8016554:	9908      	ldr	r1, [sp, #32]
 8016556:	6820      	ldr	r0, [r4, #0]
 8016558:	4798      	blx	r3
 801655a:	6026      	str	r6, [r4, #0]
 801655c:	e7d2      	b.n	8016504 <rcutils_string_map_init+0x14>
 801655e:	250b      	movs	r5, #11
 8016560:	4628      	mov	r0, r5
 8016562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016566:	b002      	add	sp, #8
 8016568:	4770      	bx	lr
 801656a:	250a      	movs	r5, #10
 801656c:	e7ca      	b.n	8016504 <rcutils_string_map_init+0x14>
 801656e:	bf00      	nop

08016570 <rcutils_string_map_fini>:
 8016570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016574:	b082      	sub	sp, #8
 8016576:	2800      	cmp	r0, #0
 8016578:	d03a      	beq.n	80165f0 <rcutils_string_map_fini+0x80>
 801657a:	6804      	ldr	r4, [r0, #0]
 801657c:	4606      	mov	r6, r0
 801657e:	2c00      	cmp	r4, #0
 8016580:	d032      	beq.n	80165e8 <rcutils_string_map_fini+0x78>
 8016582:	68a3      	ldr	r3, [r4, #8]
 8016584:	b32b      	cbz	r3, 80165d2 <rcutils_string_map_fini+0x62>
 8016586:	2500      	movs	r5, #0
 8016588:	6822      	ldr	r2, [r4, #0]
 801658a:	462f      	mov	r7, r5
 801658c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016590:	b1e0      	cbz	r0, 80165cc <rcutils_string_map_fini+0x5c>
 8016592:	6a21      	ldr	r1, [r4, #32]
 8016594:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016598:	9101      	str	r1, [sp, #4]
 801659a:	47c0      	blx	r8
 801659c:	e9d4 2300 	ldrd	r2, r3, [r4]
 80165a0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80165a4:	9901      	ldr	r1, [sp, #4]
 80165a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80165aa:	47c0      	blx	r8
 80165ac:	68e3      	ldr	r3, [r4, #12]
 80165ae:	6862      	ldr	r2, [r4, #4]
 80165b0:	3b01      	subs	r3, #1
 80165b2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80165b6:	60e3      	str	r3, [r4, #12]
 80165b8:	6834      	ldr	r4, [r6, #0]
 80165ba:	68a3      	ldr	r3, [r4, #8]
 80165bc:	3501      	adds	r5, #1
 80165be:	429d      	cmp	r5, r3
 80165c0:	d207      	bcs.n	80165d2 <rcutils_string_map_fini+0x62>
 80165c2:	6822      	ldr	r2, [r4, #0]
 80165c4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80165c8:	2800      	cmp	r0, #0
 80165ca:	d1e2      	bne.n	8016592 <rcutils_string_map_fini+0x22>
 80165cc:	3501      	adds	r5, #1
 80165ce:	429d      	cmp	r5, r3
 80165d0:	d3dc      	bcc.n	801658c <rcutils_string_map_fini+0x1c>
 80165d2:	2100      	movs	r1, #0
 80165d4:	4630      	mov	r0, r6
 80165d6:	f7ff ff19 	bl	801640c <rcutils_string_map_reserve>
 80165da:	4604      	mov	r4, r0
 80165dc:	b920      	cbnz	r0, 80165e8 <rcutils_string_map_fini+0x78>
 80165de:	6830      	ldr	r0, [r6, #0]
 80165e0:	6943      	ldr	r3, [r0, #20]
 80165e2:	6a01      	ldr	r1, [r0, #32]
 80165e4:	4798      	blx	r3
 80165e6:	6034      	str	r4, [r6, #0]
 80165e8:	4620      	mov	r0, r4
 80165ea:	b002      	add	sp, #8
 80165ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165f0:	240b      	movs	r4, #11
 80165f2:	4620      	mov	r0, r4
 80165f4:	b002      	add	sp, #8
 80165f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165fa:	bf00      	nop

080165fc <rcutils_string_map_getn>:
 80165fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016600:	b300      	cbz	r0, 8016644 <rcutils_string_map_getn+0x48>
 8016602:	6807      	ldr	r7, [r0, #0]
 8016604:	b1ff      	cbz	r7, 8016646 <rcutils_string_map_getn+0x4a>
 8016606:	4688      	mov	r8, r1
 8016608:	b1e1      	cbz	r1, 8016644 <rcutils_string_map_getn+0x48>
 801660a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801660e:	683e      	ldr	r6, [r7, #0]
 8016610:	f1ba 0f00 	cmp.w	sl, #0
 8016614:	d016      	beq.n	8016644 <rcutils_string_map_getn+0x48>
 8016616:	4691      	mov	r9, r2
 8016618:	3e04      	subs	r6, #4
 801661a:	2400      	movs	r4, #0
 801661c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016620:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016624:	4628      	mov	r0, r5
 8016626:	3401      	adds	r4, #1
 8016628:	b155      	cbz	r5, 8016640 <rcutils_string_map_getn+0x44>
 801662a:	f7e9 fe03 	bl	8000234 <strlen>
 801662e:	4548      	cmp	r0, r9
 8016630:	4602      	mov	r2, r0
 8016632:	4629      	mov	r1, r5
 8016634:	bf38      	it	cc
 8016636:	464a      	movcc	r2, r9
 8016638:	4640      	mov	r0, r8
 801663a:	f002 fe30 	bl	801929e <strncmp>
 801663e:	b128      	cbz	r0, 801664c <rcutils_string_map_getn+0x50>
 8016640:	45a2      	cmp	sl, r4
 8016642:	d1eb      	bne.n	801661c <rcutils_string_map_getn+0x20>
 8016644:	2700      	movs	r7, #0
 8016646:	4638      	mov	r0, r7
 8016648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f853 700b 	ldr.w	r7, [r3, fp]
 8016652:	4638      	mov	r0, r7
 8016654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016658 <rmw_get_zero_initialized_context>:
 8016658:	b510      	push	{r4, lr}
 801665a:	4604      	mov	r4, r0
 801665c:	3010      	adds	r0, #16
 801665e:	f7f7 f863 	bl	800d728 <rmw_get_zero_initialized_init_options>
 8016662:	2300      	movs	r3, #0
 8016664:	2000      	movs	r0, #0
 8016666:	2100      	movs	r1, #0
 8016668:	e9c4 0100 	strd	r0, r1, [r4]
 801666c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016670:	60a3      	str	r3, [r4, #8]
 8016672:	4620      	mov	r0, r4
 8016674:	bd10      	pop	{r4, pc}
 8016676:	bf00      	nop

08016678 <rmw_time_equal>:
 8016678:	b4f0      	push	{r4, r5, r6, r7}
 801667a:	b084      	sub	sp, #16
 801667c:	ac04      	add	r4, sp, #16
 801667e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016682:	4603      	mov	r3, r0
 8016684:	4924      	ldr	r1, [pc, #144]	@ (8016718 <rmw_time_equal+0xa0>)
 8016686:	9e03      	ldr	r6, [sp, #12]
 8016688:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801668c:	2202      	movs	r2, #2
 801668e:	4299      	cmp	r1, r3
 8016690:	41aa      	sbcs	r2, r5
 8016692:	d330      	bcc.n	80166f6 <rmw_time_equal+0x7e>
 8016694:	4c21      	ldr	r4, [pc, #132]	@ (801671c <rmw_time_equal+0xa4>)
 8016696:	fba3 3204 	umull	r3, r2, r3, r4
 801669a:	fb04 2205 	mla	r2, r4, r5, r2
 801669e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80166a2:	43dd      	mvns	r5, r3
 80166a4:	1a8c      	subs	r4, r1, r2
 80166a6:	4285      	cmp	r5, r0
 80166a8:	41b4      	sbcs	r4, r6
 80166aa:	d332      	bcc.n	8016712 <rmw_time_equal+0x9a>
 80166ac:	eb10 0c03 	adds.w	ip, r0, r3
 80166b0:	eb42 0106 	adc.w	r1, r2, r6
 80166b4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80166b8:	4817      	ldr	r0, [pc, #92]	@ (8016718 <rmw_time_equal+0xa0>)
 80166ba:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80166bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80166be:	2202      	movs	r2, #2
 80166c0:	4298      	cmp	r0, r3
 80166c2:	41b2      	sbcs	r2, r6
 80166c4:	d31c      	bcc.n	8016700 <rmw_time_equal+0x88>
 80166c6:	4c15      	ldr	r4, [pc, #84]	@ (801671c <rmw_time_equal+0xa4>)
 80166c8:	fba3 3204 	umull	r3, r2, r3, r4
 80166cc:	fb04 2206 	mla	r2, r4, r6, r2
 80166d0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80166d4:	43de      	mvns	r6, r3
 80166d6:	1a84      	subs	r4, r0, r2
 80166d8:	42ae      	cmp	r6, r5
 80166da:	41bc      	sbcs	r4, r7
 80166dc:	d315      	bcc.n	801670a <rmw_time_equal+0x92>
 80166de:	195b      	adds	r3, r3, r5
 80166e0:	eb42 0207 	adc.w	r2, r2, r7
 80166e4:	428a      	cmp	r2, r1
 80166e6:	bf08      	it	eq
 80166e8:	4563      	cmpeq	r3, ip
 80166ea:	bf0c      	ite	eq
 80166ec:	2001      	moveq	r0, #1
 80166ee:	2000      	movne	r0, #0
 80166f0:	b004      	add	sp, #16
 80166f2:	bcf0      	pop	{r4, r5, r6, r7}
 80166f4:	4770      	bx	lr
 80166f6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80166fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80166fe:	e7d9      	b.n	80166b4 <rmw_time_equal+0x3c>
 8016700:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016704:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016708:	e7ec      	b.n	80166e4 <rmw_time_equal+0x6c>
 801670a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801670e:	4602      	mov	r2, r0
 8016710:	e7e8      	b.n	80166e4 <rmw_time_equal+0x6c>
 8016712:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016716:	e7cd      	b.n	80166b4 <rmw_time_equal+0x3c>
 8016718:	25c17d04 	.word	0x25c17d04
 801671c:	3b9aca00 	.word	0x3b9aca00

08016720 <rmw_time_total_nsec>:
 8016720:	b470      	push	{r4, r5, r6}
 8016722:	b085      	sub	sp, #20
 8016724:	ac04      	add	r4, sp, #16
 8016726:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801672a:	4603      	mov	r3, r0
 801672c:	4912      	ldr	r1, [pc, #72]	@ (8016778 <rmw_time_total_nsec+0x58>)
 801672e:	9e03      	ldr	r6, [sp, #12]
 8016730:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8016734:	2202      	movs	r2, #2
 8016736:	4299      	cmp	r1, r3
 8016738:	41aa      	sbcs	r2, r5
 801673a:	d311      	bcc.n	8016760 <rmw_time_total_nsec+0x40>
 801673c:	4c0f      	ldr	r4, [pc, #60]	@ (801677c <rmw_time_total_nsec+0x5c>)
 801673e:	fba3 3204 	umull	r3, r2, r3, r4
 8016742:	fb04 2205 	mla	r2, r4, r5, r2
 8016746:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801674a:	43dd      	mvns	r5, r3
 801674c:	1a8c      	subs	r4, r1, r2
 801674e:	4285      	cmp	r5, r0
 8016750:	41b4      	sbcs	r4, r6
 8016752:	d30c      	bcc.n	801676e <rmw_time_total_nsec+0x4e>
 8016754:	1818      	adds	r0, r3, r0
 8016756:	eb42 0106 	adc.w	r1, r2, r6
 801675a:	b005      	add	sp, #20
 801675c:	bc70      	pop	{r4, r5, r6}
 801675e:	4770      	bx	lr
 8016760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016764:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016768:	b005      	add	sp, #20
 801676a:	bc70      	pop	{r4, r5, r6}
 801676c:	4770      	bx	lr
 801676e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016772:	b005      	add	sp, #20
 8016774:	bc70      	pop	{r4, r5, r6}
 8016776:	4770      	bx	lr
 8016778:	25c17d04 	.word	0x25c17d04
 801677c:	3b9aca00 	.word	0x3b9aca00

08016780 <rmw_get_zero_initialized_message_info>:
 8016780:	b510      	push	{r4, lr}
 8016782:	2240      	movs	r2, #64	@ 0x40
 8016784:	4604      	mov	r4, r0
 8016786:	2100      	movs	r1, #0
 8016788:	f002 fd74 	bl	8019274 <memset>
 801678c:	4620      	mov	r0, r4
 801678e:	bd10      	pop	{r4, pc}

08016790 <rmw_validate_full_topic_name>:
 8016790:	2800      	cmp	r0, #0
 8016792:	d057      	beq.n	8016844 <rmw_validate_full_topic_name+0xb4>
 8016794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016798:	460d      	mov	r5, r1
 801679a:	2900      	cmp	r1, #0
 801679c:	d054      	beq.n	8016848 <rmw_validate_full_topic_name+0xb8>
 801679e:	4616      	mov	r6, r2
 80167a0:	4604      	mov	r4, r0
 80167a2:	f7e9 fd47 	bl	8000234 <strlen>
 80167a6:	b148      	cbz	r0, 80167bc <rmw_validate_full_topic_name+0x2c>
 80167a8:	7823      	ldrb	r3, [r4, #0]
 80167aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80167ac:	d00d      	beq.n	80167ca <rmw_validate_full_topic_name+0x3a>
 80167ae:	2302      	movs	r3, #2
 80167b0:	602b      	str	r3, [r5, #0]
 80167b2:	b13e      	cbz	r6, 80167c4 <rmw_validate_full_topic_name+0x34>
 80167b4:	2000      	movs	r0, #0
 80167b6:	6030      	str	r0, [r6, #0]
 80167b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167bc:	2301      	movs	r3, #1
 80167be:	602b      	str	r3, [r5, #0]
 80167c0:	2e00      	cmp	r6, #0
 80167c2:	d1f7      	bne.n	80167b4 <rmw_validate_full_topic_name+0x24>
 80167c4:	2000      	movs	r0, #0
 80167c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167ca:	1e43      	subs	r3, r0, #1
 80167cc:	5ce2      	ldrb	r2, [r4, r3]
 80167ce:	2a2f      	cmp	r2, #47	@ 0x2f
 80167d0:	d03c      	beq.n	801684c <rmw_validate_full_topic_name+0xbc>
 80167d2:	1e63      	subs	r3, r4, #1
 80167d4:	eb03 0800 	add.w	r8, r3, r0
 80167d8:	f1c4 0e01 	rsb	lr, r4, #1
 80167dc:	eb0e 0703 	add.w	r7, lr, r3
 80167e0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80167e4:	f021 0220 	bic.w	r2, r1, #32
 80167e8:	3a41      	subs	r2, #65	@ 0x41
 80167ea:	2a19      	cmp	r2, #25
 80167ec:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80167f0:	d90b      	bls.n	801680a <rmw_validate_full_topic_name+0x7a>
 80167f2:	295f      	cmp	r1, #95	@ 0x5f
 80167f4:	d009      	beq.n	801680a <rmw_validate_full_topic_name+0x7a>
 80167f6:	f1bc 0f0a 	cmp.w	ip, #10
 80167fa:	d906      	bls.n	801680a <rmw_validate_full_topic_name+0x7a>
 80167fc:	2304      	movs	r3, #4
 80167fe:	602b      	str	r3, [r5, #0]
 8016800:	2e00      	cmp	r6, #0
 8016802:	d0df      	beq.n	80167c4 <rmw_validate_full_topic_name+0x34>
 8016804:	6037      	str	r7, [r6, #0]
 8016806:	2000      	movs	r0, #0
 8016808:	e7d6      	b.n	80167b8 <rmw_validate_full_topic_name+0x28>
 801680a:	4543      	cmp	r3, r8
 801680c:	d1e6      	bne.n	80167dc <rmw_validate_full_topic_name+0x4c>
 801680e:	4f1a      	ldr	r7, [pc, #104]	@ (8016878 <rmw_validate_full_topic_name+0xe8>)
 8016810:	2301      	movs	r3, #1
 8016812:	e004      	b.n	801681e <rmw_validate_full_topic_name+0x8e>
 8016814:	4298      	cmp	r0, r3
 8016816:	f104 0401 	add.w	r4, r4, #1
 801681a:	d91c      	bls.n	8016856 <rmw_validate_full_topic_name+0xc6>
 801681c:	4613      	mov	r3, r2
 801681e:	4298      	cmp	r0, r3
 8016820:	f103 0201 	add.w	r2, r3, #1
 8016824:	d0f6      	beq.n	8016814 <rmw_validate_full_topic_name+0x84>
 8016826:	7821      	ldrb	r1, [r4, #0]
 8016828:	292f      	cmp	r1, #47	@ 0x2f
 801682a:	d1f3      	bne.n	8016814 <rmw_validate_full_topic_name+0x84>
 801682c:	7861      	ldrb	r1, [r4, #1]
 801682e:	292f      	cmp	r1, #47	@ 0x2f
 8016830:	d01c      	beq.n	801686c <rmw_validate_full_topic_name+0xdc>
 8016832:	5dc9      	ldrb	r1, [r1, r7]
 8016834:	0749      	lsls	r1, r1, #29
 8016836:	d5ed      	bpl.n	8016814 <rmw_validate_full_topic_name+0x84>
 8016838:	2206      	movs	r2, #6
 801683a:	602a      	str	r2, [r5, #0]
 801683c:	2e00      	cmp	r6, #0
 801683e:	d0c1      	beq.n	80167c4 <rmw_validate_full_topic_name+0x34>
 8016840:	6033      	str	r3, [r6, #0]
 8016842:	e7bf      	b.n	80167c4 <rmw_validate_full_topic_name+0x34>
 8016844:	200b      	movs	r0, #11
 8016846:	4770      	bx	lr
 8016848:	200b      	movs	r0, #11
 801684a:	e7b5      	b.n	80167b8 <rmw_validate_full_topic_name+0x28>
 801684c:	2203      	movs	r2, #3
 801684e:	602a      	str	r2, [r5, #0]
 8016850:	2e00      	cmp	r6, #0
 8016852:	d1f5      	bne.n	8016840 <rmw_validate_full_topic_name+0xb0>
 8016854:	e7b6      	b.n	80167c4 <rmw_validate_full_topic_name+0x34>
 8016856:	28f7      	cmp	r0, #247	@ 0xf7
 8016858:	d802      	bhi.n	8016860 <rmw_validate_full_topic_name+0xd0>
 801685a:	2000      	movs	r0, #0
 801685c:	6028      	str	r0, [r5, #0]
 801685e:	e7ab      	b.n	80167b8 <rmw_validate_full_topic_name+0x28>
 8016860:	2307      	movs	r3, #7
 8016862:	602b      	str	r3, [r5, #0]
 8016864:	2e00      	cmp	r6, #0
 8016866:	d0ad      	beq.n	80167c4 <rmw_validate_full_topic_name+0x34>
 8016868:	23f6      	movs	r3, #246	@ 0xf6
 801686a:	e7e9      	b.n	8016840 <rmw_validate_full_topic_name+0xb0>
 801686c:	2205      	movs	r2, #5
 801686e:	602a      	str	r2, [r5, #0]
 8016870:	2e00      	cmp	r6, #0
 8016872:	d1e5      	bne.n	8016840 <rmw_validate_full_topic_name+0xb0>
 8016874:	e7a6      	b.n	80167c4 <rmw_validate_full_topic_name+0x34>
 8016876:	bf00      	nop
 8016878:	0801bc8a 	.word	0x0801bc8a

0801687c <rmw_validate_namespace_with_size>:
 801687c:	b340      	cbz	r0, 80168d0 <rmw_validate_namespace_with_size+0x54>
 801687e:	b570      	push	{r4, r5, r6, lr}
 8016880:	4614      	mov	r4, r2
 8016882:	b0c2      	sub	sp, #264	@ 0x108
 8016884:	b332      	cbz	r2, 80168d4 <rmw_validate_namespace_with_size+0x58>
 8016886:	2901      	cmp	r1, #1
 8016888:	460d      	mov	r5, r1
 801688a:	461e      	mov	r6, r3
 801688c:	d102      	bne.n	8016894 <rmw_validate_namespace_with_size+0x18>
 801688e:	7803      	ldrb	r3, [r0, #0]
 8016890:	2b2f      	cmp	r3, #47	@ 0x2f
 8016892:	d012      	beq.n	80168ba <rmw_validate_namespace_with_size+0x3e>
 8016894:	aa01      	add	r2, sp, #4
 8016896:	4669      	mov	r1, sp
 8016898:	f7ff ff7a 	bl	8016790 <rmw_validate_full_topic_name>
 801689c:	b978      	cbnz	r0, 80168be <rmw_validate_namespace_with_size+0x42>
 801689e:	9b00      	ldr	r3, [sp, #0]
 80168a0:	b14b      	cbz	r3, 80168b6 <rmw_validate_namespace_with_size+0x3a>
 80168a2:	2b07      	cmp	r3, #7
 80168a4:	d007      	beq.n	80168b6 <rmw_validate_namespace_with_size+0x3a>
 80168a6:	1e5a      	subs	r2, r3, #1
 80168a8:	2a05      	cmp	r2, #5
 80168aa:	d82b      	bhi.n	8016904 <rmw_validate_namespace_with_size+0x88>
 80168ac:	e8df f002 	tbb	[pc, r2]
 80168b0:	1e212427 	.word	0x1e212427
 80168b4:	141b      	.short	0x141b
 80168b6:	2df5      	cmp	r5, #245	@ 0xf5
 80168b8:	d803      	bhi.n	80168c2 <rmw_validate_namespace_with_size+0x46>
 80168ba:	2000      	movs	r0, #0
 80168bc:	6020      	str	r0, [r4, #0]
 80168be:	b042      	add	sp, #264	@ 0x108
 80168c0:	bd70      	pop	{r4, r5, r6, pc}
 80168c2:	2307      	movs	r3, #7
 80168c4:	6023      	str	r3, [r4, #0]
 80168c6:	2e00      	cmp	r6, #0
 80168c8:	d0f9      	beq.n	80168be <rmw_validate_namespace_with_size+0x42>
 80168ca:	23f4      	movs	r3, #244	@ 0xf4
 80168cc:	6033      	str	r3, [r6, #0]
 80168ce:	e7f6      	b.n	80168be <rmw_validate_namespace_with_size+0x42>
 80168d0:	200b      	movs	r0, #11
 80168d2:	4770      	bx	lr
 80168d4:	200b      	movs	r0, #11
 80168d6:	e7f2      	b.n	80168be <rmw_validate_namespace_with_size+0x42>
 80168d8:	2306      	movs	r3, #6
 80168da:	6023      	str	r3, [r4, #0]
 80168dc:	2e00      	cmp	r6, #0
 80168de:	d0ee      	beq.n	80168be <rmw_validate_namespace_with_size+0x42>
 80168e0:	9b01      	ldr	r3, [sp, #4]
 80168e2:	6033      	str	r3, [r6, #0]
 80168e4:	e7eb      	b.n	80168be <rmw_validate_namespace_with_size+0x42>
 80168e6:	2305      	movs	r3, #5
 80168e8:	6023      	str	r3, [r4, #0]
 80168ea:	e7f7      	b.n	80168dc <rmw_validate_namespace_with_size+0x60>
 80168ec:	2304      	movs	r3, #4
 80168ee:	6023      	str	r3, [r4, #0]
 80168f0:	e7f4      	b.n	80168dc <rmw_validate_namespace_with_size+0x60>
 80168f2:	2303      	movs	r3, #3
 80168f4:	6023      	str	r3, [r4, #0]
 80168f6:	e7f1      	b.n	80168dc <rmw_validate_namespace_with_size+0x60>
 80168f8:	2302      	movs	r3, #2
 80168fa:	6023      	str	r3, [r4, #0]
 80168fc:	e7ee      	b.n	80168dc <rmw_validate_namespace_with_size+0x60>
 80168fe:	2301      	movs	r3, #1
 8016900:	6023      	str	r3, [r4, #0]
 8016902:	e7eb      	b.n	80168dc <rmw_validate_namespace_with_size+0x60>
 8016904:	4a03      	ldr	r2, [pc, #12]	@ (8016914 <rmw_validate_namespace_with_size+0x98>)
 8016906:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801690a:	a802      	add	r0, sp, #8
 801690c:	f7ff fd0e 	bl	801632c <rcutils_snprintf>
 8016910:	2001      	movs	r0, #1
 8016912:	e7d4      	b.n	80168be <rmw_validate_namespace_with_size+0x42>
 8016914:	0801b7b8 	.word	0x0801b7b8

08016918 <rmw_validate_namespace>:
 8016918:	b168      	cbz	r0, 8016936 <rmw_validate_namespace+0x1e>
 801691a:	b570      	push	{r4, r5, r6, lr}
 801691c:	460d      	mov	r5, r1
 801691e:	4616      	mov	r6, r2
 8016920:	4604      	mov	r4, r0
 8016922:	f7e9 fc87 	bl	8000234 <strlen>
 8016926:	4633      	mov	r3, r6
 8016928:	4601      	mov	r1, r0
 801692a:	462a      	mov	r2, r5
 801692c:	4620      	mov	r0, r4
 801692e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016932:	f7ff bfa3 	b.w	801687c <rmw_validate_namespace_with_size>
 8016936:	200b      	movs	r0, #11
 8016938:	4770      	bx	lr
 801693a:	bf00      	nop

0801693c <rmw_namespace_validation_result_string>:
 801693c:	2807      	cmp	r0, #7
 801693e:	bf9a      	itte	ls
 8016940:	4b02      	ldrls	r3, [pc, #8]	@ (801694c <rmw_namespace_validation_result_string+0x10>)
 8016942:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016946:	4802      	ldrhi	r0, [pc, #8]	@ (8016950 <rmw_namespace_validation_result_string+0x14>)
 8016948:	4770      	bx	lr
 801694a:	bf00      	nop
 801694c:	0801b9b0 	.word	0x0801b9b0
 8016950:	0801b808 	.word	0x0801b808

08016954 <rmw_validate_node_name>:
 8016954:	2800      	cmp	r0, #0
 8016956:	d03b      	beq.n	80169d0 <rmw_validate_node_name+0x7c>
 8016958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801695c:	460d      	mov	r5, r1
 801695e:	2900      	cmp	r1, #0
 8016960:	d038      	beq.n	80169d4 <rmw_validate_node_name+0x80>
 8016962:	4616      	mov	r6, r2
 8016964:	4604      	mov	r4, r0
 8016966:	f7e9 fc65 	bl	8000234 <strlen>
 801696a:	b1e0      	cbz	r0, 80169a6 <rmw_validate_node_name+0x52>
 801696c:	1e63      	subs	r3, r4, #1
 801696e:	eb03 0800 	add.w	r8, r3, r0
 8016972:	f1c4 0101 	rsb	r1, r4, #1
 8016976:	18cf      	adds	r7, r1, r3
 8016978:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801697c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8016980:	f02e 0c20 	bic.w	ip, lr, #32
 8016984:	2a09      	cmp	r2, #9
 8016986:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801698a:	d914      	bls.n	80169b6 <rmw_validate_node_name+0x62>
 801698c:	f1bc 0f19 	cmp.w	ip, #25
 8016990:	d911      	bls.n	80169b6 <rmw_validate_node_name+0x62>
 8016992:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8016996:	d00e      	beq.n	80169b6 <rmw_validate_node_name+0x62>
 8016998:	2302      	movs	r3, #2
 801699a:	602b      	str	r3, [r5, #0]
 801699c:	b106      	cbz	r6, 80169a0 <rmw_validate_node_name+0x4c>
 801699e:	6037      	str	r7, [r6, #0]
 80169a0:	2000      	movs	r0, #0
 80169a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169a6:	2301      	movs	r3, #1
 80169a8:	602b      	str	r3, [r5, #0]
 80169aa:	2e00      	cmp	r6, #0
 80169ac:	d0f8      	beq.n	80169a0 <rmw_validate_node_name+0x4c>
 80169ae:	2000      	movs	r0, #0
 80169b0:	6030      	str	r0, [r6, #0]
 80169b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169b6:	4543      	cmp	r3, r8
 80169b8:	d1dd      	bne.n	8016976 <rmw_validate_node_name+0x22>
 80169ba:	7822      	ldrb	r2, [r4, #0]
 80169bc:	4b0d      	ldr	r3, [pc, #52]	@ (80169f4 <rmw_validate_node_name+0xa0>)
 80169be:	5cd3      	ldrb	r3, [r2, r3]
 80169c0:	f013 0304 	ands.w	r3, r3, #4
 80169c4:	d110      	bne.n	80169e8 <rmw_validate_node_name+0x94>
 80169c6:	28ff      	cmp	r0, #255	@ 0xff
 80169c8:	d806      	bhi.n	80169d8 <rmw_validate_node_name+0x84>
 80169ca:	602b      	str	r3, [r5, #0]
 80169cc:	4618      	mov	r0, r3
 80169ce:	e7e8      	b.n	80169a2 <rmw_validate_node_name+0x4e>
 80169d0:	200b      	movs	r0, #11
 80169d2:	4770      	bx	lr
 80169d4:	200b      	movs	r0, #11
 80169d6:	e7e4      	b.n	80169a2 <rmw_validate_node_name+0x4e>
 80169d8:	2204      	movs	r2, #4
 80169da:	602a      	str	r2, [r5, #0]
 80169dc:	2e00      	cmp	r6, #0
 80169de:	d0df      	beq.n	80169a0 <rmw_validate_node_name+0x4c>
 80169e0:	22fe      	movs	r2, #254	@ 0xfe
 80169e2:	6032      	str	r2, [r6, #0]
 80169e4:	4618      	mov	r0, r3
 80169e6:	e7dc      	b.n	80169a2 <rmw_validate_node_name+0x4e>
 80169e8:	2303      	movs	r3, #3
 80169ea:	602b      	str	r3, [r5, #0]
 80169ec:	2e00      	cmp	r6, #0
 80169ee:	d1de      	bne.n	80169ae <rmw_validate_node_name+0x5a>
 80169f0:	e7d6      	b.n	80169a0 <rmw_validate_node_name+0x4c>
 80169f2:	bf00      	nop
 80169f4:	0801bc8a 	.word	0x0801bc8a

080169f8 <rmw_node_name_validation_result_string>:
 80169f8:	2804      	cmp	r0, #4
 80169fa:	bf9a      	itte	ls
 80169fc:	4b02      	ldrls	r3, [pc, #8]	@ (8016a08 <rmw_node_name_validation_result_string+0x10>)
 80169fe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016a02:	4802      	ldrhi	r0, [pc, #8]	@ (8016a0c <rmw_node_name_validation_result_string+0x14>)
 8016a04:	4770      	bx	lr
 8016a06:	bf00      	nop
 8016a08:	0801babc 	.word	0x0801babc
 8016a0c:	0801b9d0 	.word	0x0801b9d0

08016a10 <on_status>:
 8016a10:	b082      	sub	sp, #8
 8016a12:	b002      	add	sp, #8
 8016a14:	4770      	bx	lr
 8016a16:	bf00      	nop

08016a18 <on_topic>:
 8016a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a1c:	4a22      	ldr	r2, [pc, #136]	@ (8016aa8 <on_topic+0x90>)
 8016a1e:	b094      	sub	sp, #80	@ 0x50
 8016a20:	6812      	ldr	r2, [r2, #0]
 8016a22:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016a24:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016a28:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016a2c:	b3c2      	cbz	r2, 8016aa0 <on_topic+0x88>
 8016a2e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016a32:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016a36:	e001      	b.n	8016a3c <on_topic+0x24>
 8016a38:	6852      	ldr	r2, [r2, #4]
 8016a3a:	b38a      	cbz	r2, 8016aa0 <on_topic+0x88>
 8016a3c:	6894      	ldr	r4, [r2, #8]
 8016a3e:	8aa3      	ldrh	r3, [r4, #20]
 8016a40:	428b      	cmp	r3, r1
 8016a42:	d1f9      	bne.n	8016a38 <on_topic+0x20>
 8016a44:	7da3      	ldrb	r3, [r4, #22]
 8016a46:	4283      	cmp	r3, r0
 8016a48:	d1f6      	bne.n	8016a38 <on_topic+0x20>
 8016a4a:	2248      	movs	r2, #72	@ 0x48
 8016a4c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016a50:	4668      	mov	r0, sp
 8016a52:	f002 fcd8 	bl	8019406 <memcpy>
 8016a56:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016a5a:	cb0c      	ldmia	r3, {r2, r3}
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	f7f7 ff67 	bl	800e930 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016a62:	4607      	mov	r7, r0
 8016a64:	b1e0      	cbz	r0, 8016aa0 <on_topic+0x88>
 8016a66:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016a6a:	4632      	mov	r2, r6
 8016a6c:	4628      	mov	r0, r5
 8016a6e:	f108 0110 	add.w	r1, r8, #16
 8016a72:	f7f8 fe73 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8016a76:	b930      	cbnz	r0, 8016a86 <on_topic+0x6e>
 8016a78:	480c      	ldr	r0, [pc, #48]	@ (8016aac <on_topic+0x94>)
 8016a7a:	4639      	mov	r1, r7
 8016a7c:	b014      	add	sp, #80	@ 0x50
 8016a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a82:	f000 b8bd 	b.w	8016c00 <put_memory>
 8016a86:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016a8a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016a8e:	f7f7 fd4d 	bl	800e52c <rmw_uros_epoch_nanos>
 8016a92:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016a96:	2305      	movs	r3, #5
 8016a98:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016a9c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016aa0:	b014      	add	sp, #80	@ 0x50
 8016aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aa6:	bf00      	nop
 8016aa8:	2000b5ec 	.word	0x2000b5ec
 8016aac:	2000b5dc 	.word	0x2000b5dc

08016ab0 <on_request>:
 8016ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ab4:	4823      	ldr	r0, [pc, #140]	@ (8016b44 <on_request+0x94>)
 8016ab6:	b094      	sub	sp, #80	@ 0x50
 8016ab8:	6800      	ldr	r0, [r0, #0]
 8016aba:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016abc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016ac0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016ac2:	2800      	cmp	r0, #0
 8016ac4:	d03b      	beq.n	8016b3e <on_request+0x8e>
 8016ac6:	461d      	mov	r5, r3
 8016ac8:	e001      	b.n	8016ace <on_request+0x1e>
 8016aca:	6840      	ldr	r0, [r0, #4]
 8016acc:	b3b8      	cbz	r0, 8016b3e <on_request+0x8e>
 8016ace:	6884      	ldr	r4, [r0, #8]
 8016ad0:	8b21      	ldrh	r1, [r4, #24]
 8016ad2:	4291      	cmp	r1, r2
 8016ad4:	d1f9      	bne.n	8016aca <on_request+0x1a>
 8016ad6:	2248      	movs	r2, #72	@ 0x48
 8016ad8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016adc:	4668      	mov	r0, sp
 8016ade:	f002 fc92 	bl	8019406 <memcpy>
 8016ae2:	f104 0320 	add.w	r3, r4, #32
 8016ae6:	cb0c      	ldmia	r3, {r2, r3}
 8016ae8:	4620      	mov	r0, r4
 8016aea:	f7f7 ff21 	bl	800e930 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016aee:	4680      	mov	r8, r0
 8016af0:	b328      	cbz	r0, 8016b3e <on_request+0x8e>
 8016af2:	4638      	mov	r0, r7
 8016af4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016af8:	4632      	mov	r2, r6
 8016afa:	f107 0110 	add.w	r1, r7, #16
 8016afe:	f7f8 fe2d 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8016b02:	b930      	cbnz	r0, 8016b12 <on_request+0x62>
 8016b04:	4810      	ldr	r0, [pc, #64]	@ (8016b48 <on_request+0x98>)
 8016b06:	4641      	mov	r1, r8
 8016b08:	b014      	add	sp, #80	@ 0x50
 8016b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b0e:	f000 b877 	b.w	8016c00 <put_memory>
 8016b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b14:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016b18:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016b1c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016b20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016b28:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016b2c:	f7f7 fcfe 	bl	800e52c <rmw_uros_epoch_nanos>
 8016b30:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016b34:	2303      	movs	r3, #3
 8016b36:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016b3a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016b3e:	b014      	add	sp, #80	@ 0x50
 8016b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b44:	2000b5bc 	.word	0x2000b5bc
 8016b48:	2000b5dc 	.word	0x2000b5dc

08016b4c <on_reply>:
 8016b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b50:	4821      	ldr	r0, [pc, #132]	@ (8016bd8 <on_reply+0x8c>)
 8016b52:	b094      	sub	sp, #80	@ 0x50
 8016b54:	6800      	ldr	r0, [r0, #0]
 8016b56:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016b58:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016b5c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016b5e:	b3b8      	cbz	r0, 8016bd0 <on_reply+0x84>
 8016b60:	461d      	mov	r5, r3
 8016b62:	e001      	b.n	8016b68 <on_reply+0x1c>
 8016b64:	6840      	ldr	r0, [r0, #4]
 8016b66:	b398      	cbz	r0, 8016bd0 <on_reply+0x84>
 8016b68:	6884      	ldr	r4, [r0, #8]
 8016b6a:	8b21      	ldrh	r1, [r4, #24]
 8016b6c:	4291      	cmp	r1, r2
 8016b6e:	d1f9      	bne.n	8016b64 <on_reply+0x18>
 8016b70:	2248      	movs	r2, #72	@ 0x48
 8016b72:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016b76:	4668      	mov	r0, sp
 8016b78:	f002 fc45 	bl	8019406 <memcpy>
 8016b7c:	f104 0320 	add.w	r3, r4, #32
 8016b80:	cb0c      	ldmia	r3, {r2, r3}
 8016b82:	4620      	mov	r0, r4
 8016b84:	f7f7 fed4 	bl	800e930 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016b88:	4680      	mov	r8, r0
 8016b8a:	b308      	cbz	r0, 8016bd0 <on_reply+0x84>
 8016b8c:	4638      	mov	r0, r7
 8016b8e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016b92:	4632      	mov	r2, r6
 8016b94:	f107 0110 	add.w	r1, r7, #16
 8016b98:	f7f8 fde0 	bl	800f75c <ucdr_deserialize_array_uint8_t>
 8016b9c:	b930      	cbnz	r0, 8016bac <on_reply+0x60>
 8016b9e:	480f      	ldr	r0, [pc, #60]	@ (8016bdc <on_reply+0x90>)
 8016ba0:	4641      	mov	r1, r8
 8016ba2:	b014      	add	sp, #80	@ 0x50
 8016ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ba8:	f000 b82a 	b.w	8016c00 <put_memory>
 8016bac:	2200      	movs	r2, #0
 8016bae:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016bb2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016bb6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016bba:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016bbe:	f7f7 fcb5 	bl	800e52c <rmw_uros_epoch_nanos>
 8016bc2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016bc6:	2304      	movs	r3, #4
 8016bc8:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016bcc:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016bd0:	b014      	add	sp, #80	@ 0x50
 8016bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bd6:	bf00      	nop
 8016bd8:	20006ccc 	.word	0x20006ccc
 8016bdc:	2000b5dc 	.word	0x2000b5dc

08016be0 <get_memory>:
 8016be0:	4603      	mov	r3, r0
 8016be2:	6840      	ldr	r0, [r0, #4]
 8016be4:	b158      	cbz	r0, 8016bfe <get_memory+0x1e>
 8016be6:	6842      	ldr	r2, [r0, #4]
 8016be8:	605a      	str	r2, [r3, #4]
 8016bea:	b10a      	cbz	r2, 8016bf0 <get_memory+0x10>
 8016bec:	2100      	movs	r1, #0
 8016bee:	6011      	str	r1, [r2, #0]
 8016bf0:	681a      	ldr	r2, [r3, #0]
 8016bf2:	6042      	str	r2, [r0, #4]
 8016bf4:	b102      	cbz	r2, 8016bf8 <get_memory+0x18>
 8016bf6:	6010      	str	r0, [r2, #0]
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	6002      	str	r2, [r0, #0]
 8016bfc:	6018      	str	r0, [r3, #0]
 8016bfe:	4770      	bx	lr

08016c00 <put_memory>:
 8016c00:	680b      	ldr	r3, [r1, #0]
 8016c02:	b10b      	cbz	r3, 8016c08 <put_memory+0x8>
 8016c04:	684a      	ldr	r2, [r1, #4]
 8016c06:	605a      	str	r2, [r3, #4]
 8016c08:	684a      	ldr	r2, [r1, #4]
 8016c0a:	b102      	cbz	r2, 8016c0e <put_memory+0xe>
 8016c0c:	6013      	str	r3, [r2, #0]
 8016c0e:	6803      	ldr	r3, [r0, #0]
 8016c10:	428b      	cmp	r3, r1
 8016c12:	6843      	ldr	r3, [r0, #4]
 8016c14:	bf08      	it	eq
 8016c16:	6002      	streq	r2, [r0, #0]
 8016c18:	604b      	str	r3, [r1, #4]
 8016c1a:	b103      	cbz	r3, 8016c1e <put_memory+0x1e>
 8016c1c:	6019      	str	r1, [r3, #0]
 8016c1e:	2300      	movs	r3, #0
 8016c20:	600b      	str	r3, [r1, #0]
 8016c22:	6041      	str	r1, [r0, #4]
 8016c24:	4770      	bx	lr
 8016c26:	bf00      	nop

08016c28 <rmw_destroy_client>:
 8016c28:	b570      	push	{r4, r5, r6, lr}
 8016c2a:	b128      	cbz	r0, 8016c38 <rmw_destroy_client+0x10>
 8016c2c:	4604      	mov	r4, r0
 8016c2e:	6800      	ldr	r0, [r0, #0]
 8016c30:	460d      	mov	r5, r1
 8016c32:	f7f8 f88d 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 8016c36:	b910      	cbnz	r0, 8016c3e <rmw_destroy_client+0x16>
 8016c38:	2401      	movs	r4, #1
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	bd70      	pop	{r4, r5, r6, pc}
 8016c3e:	6863      	ldr	r3, [r4, #4]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d0f9      	beq.n	8016c38 <rmw_destroy_client+0x10>
 8016c44:	2d00      	cmp	r5, #0
 8016c46:	d0f7      	beq.n	8016c38 <rmw_destroy_client+0x10>
 8016c48:	6828      	ldr	r0, [r5, #0]
 8016c4a:	f7f8 f881 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 8016c4e:	2800      	cmp	r0, #0
 8016c50:	d0f2      	beq.n	8016c38 <rmw_destroy_client+0x10>
 8016c52:	686e      	ldr	r6, [r5, #4]
 8016c54:	2e00      	cmp	r6, #0
 8016c56:	d0ef      	beq.n	8016c38 <rmw_destroy_client+0x10>
 8016c58:	6864      	ldr	r4, [r4, #4]
 8016c5a:	6932      	ldr	r2, [r6, #16]
 8016c5c:	6920      	ldr	r0, [r4, #16]
 8016c5e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016c62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c66:	6819      	ldr	r1, [r3, #0]
 8016c68:	f7f9 f99e 	bl	800ffa8 <uxr_buffer_cancel_data>
 8016c6c:	4602      	mov	r2, r0
 8016c6e:	6920      	ldr	r0, [r4, #16]
 8016c70:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016c74:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016c78:	f7f7 ff50 	bl	800eb1c <run_xrce_session>
 8016c7c:	6920      	ldr	r0, [r4, #16]
 8016c7e:	6932      	ldr	r2, [r6, #16]
 8016c80:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016c84:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c88:	6819      	ldr	r1, [r3, #0]
 8016c8a:	f7f8 fecd 	bl	800fa28 <uxr_buffer_delete_entity>
 8016c8e:	4602      	mov	r2, r0
 8016c90:	6920      	ldr	r0, [r4, #16]
 8016c92:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016c96:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016c9a:	f7f7 ff3f 	bl	800eb1c <run_xrce_session>
 8016c9e:	2800      	cmp	r0, #0
 8016ca0:	4628      	mov	r0, r5
 8016ca2:	bf14      	ite	ne
 8016ca4:	2400      	movne	r4, #0
 8016ca6:	2402      	moveq	r4, #2
 8016ca8:	f7f7 fe20 	bl	800e8ec <rmw_uxrce_fini_client_memory>
 8016cac:	e7c5      	b.n	8016c3a <rmw_destroy_client+0x12>
 8016cae:	bf00      	nop

08016cb0 <rmw_get_implementation_identifier>:
 8016cb0:	4b01      	ldr	r3, [pc, #4]	@ (8016cb8 <rmw_get_implementation_identifier+0x8>)
 8016cb2:	6818      	ldr	r0, [r3, #0]
 8016cb4:	4770      	bx	lr
 8016cb6:	bf00      	nop
 8016cb8:	0801bae8 	.word	0x0801bae8

08016cbc <create_topic>:
 8016cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc0:	4605      	mov	r5, r0
 8016cc2:	b084      	sub	sp, #16
 8016cc4:	4822      	ldr	r0, [pc, #136]	@ (8016d50 <create_topic+0x94>)
 8016cc6:	460f      	mov	r7, r1
 8016cc8:	4616      	mov	r6, r2
 8016cca:	f7ff ff89 	bl	8016be0 <get_memory>
 8016cce:	4604      	mov	r4, r0
 8016cd0:	2800      	cmp	r0, #0
 8016cd2:	d039      	beq.n	8016d48 <create_topic+0x8c>
 8016cd4:	692b      	ldr	r3, [r5, #16]
 8016cd6:	6884      	ldr	r4, [r0, #8]
 8016cd8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8016d58 <create_topic+0x9c>
 8016cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016ce0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8016ce4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8016ce8:	1c42      	adds	r2, r0, #1
 8016cea:	2102      	movs	r1, #2
 8016cec:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8016cf0:	f7f9 f8f0 	bl	800fed4 <uxr_object_id>
 8016cf4:	223c      	movs	r2, #60	@ 0x3c
 8016cf6:	6120      	str	r0, [r4, #16]
 8016cf8:	4641      	mov	r1, r8
 8016cfa:	4638      	mov	r0, r7
 8016cfc:	f7f8 f80e 	bl	800ed1c <generate_topic_name>
 8016d00:	b1f0      	cbz	r0, 8016d40 <create_topic+0x84>
 8016d02:	4f14      	ldr	r7, [pc, #80]	@ (8016d54 <create_topic+0x98>)
 8016d04:	4630      	mov	r0, r6
 8016d06:	2264      	movs	r2, #100	@ 0x64
 8016d08:	4639      	mov	r1, r7
 8016d0a:	f7f7 ffd7 	bl	800ecbc <generate_type_name>
 8016d0e:	b1b8      	cbz	r0, 8016d40 <create_topic+0x84>
 8016d10:	6928      	ldr	r0, [r5, #16]
 8016d12:	2306      	movs	r3, #6
 8016d14:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016d18:	f8cd 8000 	str.w	r8, [sp]
 8016d1c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016d20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d24:	6811      	ldr	r1, [r2, #0]
 8016d26:	696b      	ldr	r3, [r5, #20]
 8016d28:	6922      	ldr	r2, [r4, #16]
 8016d2a:	f7f8 fefb 	bl	800fb24 <uxr_buffer_create_topic_bin>
 8016d2e:	4602      	mov	r2, r0
 8016d30:	6928      	ldr	r0, [r5, #16]
 8016d32:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016d36:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016d3a:	f7f7 feef 	bl	800eb1c <run_xrce_session>
 8016d3e:	b918      	cbnz	r0, 8016d48 <create_topic+0x8c>
 8016d40:	4620      	mov	r0, r4
 8016d42:	f7f7 fde9 	bl	800e918 <rmw_uxrce_fini_topic_memory>
 8016d46:	2400      	movs	r4, #0
 8016d48:	4620      	mov	r0, r4
 8016d4a:	b004      	add	sp, #16
 8016d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d50:	2000b5fc 	.word	0x2000b5fc
 8016d54:	2000b6e8 	.word	0x2000b6e8
 8016d58:	2000b6ac 	.word	0x2000b6ac

08016d5c <destroy_topic>:
 8016d5c:	b538      	push	{r3, r4, r5, lr}
 8016d5e:	6985      	ldr	r5, [r0, #24]
 8016d60:	b1d5      	cbz	r5, 8016d98 <destroy_topic+0x3c>
 8016d62:	4604      	mov	r4, r0
 8016d64:	6928      	ldr	r0, [r5, #16]
 8016d66:	6922      	ldr	r2, [r4, #16]
 8016d68:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016d6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d70:	6819      	ldr	r1, [r3, #0]
 8016d72:	f7f8 fe59 	bl	800fa28 <uxr_buffer_delete_entity>
 8016d76:	4602      	mov	r2, r0
 8016d78:	6928      	ldr	r0, [r5, #16]
 8016d7a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016d7e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016d82:	f7f7 fecb 	bl	800eb1c <run_xrce_session>
 8016d86:	2800      	cmp	r0, #0
 8016d88:	4620      	mov	r0, r4
 8016d8a:	bf14      	ite	ne
 8016d8c:	2400      	movne	r4, #0
 8016d8e:	2402      	moveq	r4, #2
 8016d90:	f7f7 fdc2 	bl	800e918 <rmw_uxrce_fini_topic_memory>
 8016d94:	4620      	mov	r0, r4
 8016d96:	bd38      	pop	{r3, r4, r5, pc}
 8016d98:	2401      	movs	r4, #1
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	bd38      	pop	{r3, r4, r5, pc}
 8016d9e:	bf00      	nop

08016da0 <rmw_send_request>:
 8016da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016da4:	4604      	mov	r4, r0
 8016da6:	6800      	ldr	r0, [r0, #0]
 8016da8:	b08b      	sub	sp, #44	@ 0x2c
 8016daa:	460e      	mov	r6, r1
 8016dac:	4615      	mov	r5, r2
 8016dae:	b128      	cbz	r0, 8016dbc <rmw_send_request+0x1c>
 8016db0:	4b21      	ldr	r3, [pc, #132]	@ (8016e38 <rmw_send_request+0x98>)
 8016db2:	6819      	ldr	r1, [r3, #0]
 8016db4:	f7e9 fa34 	bl	8000220 <strcmp>
 8016db8:	2800      	cmp	r0, #0
 8016dba:	d139      	bne.n	8016e30 <rmw_send_request+0x90>
 8016dbc:	6864      	ldr	r4, [r4, #4]
 8016dbe:	6963      	ldr	r3, [r4, #20]
 8016dc0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8016dc4:	689b      	ldr	r3, [r3, #8]
 8016dc6:	4798      	blx	r3
 8016dc8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016dcc:	4630      	mov	r0, r6
 8016dce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016dd2:	4798      	blx	r3
 8016dd4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016dd8:	9000      	str	r0, [sp, #0]
 8016dda:	6922      	ldr	r2, [r4, #16]
 8016ddc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8016dde:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016de2:	ab02      	add	r3, sp, #8
 8016de4:	f7fb f99a 	bl	801211c <uxr_prepare_output_stream>
 8016de8:	2700      	movs	r7, #0
 8016dea:	6028      	str	r0, [r5, #0]
 8016dec:	606f      	str	r7, [r5, #4]
 8016dee:	b198      	cbz	r0, 8016e18 <rmw_send_request+0x78>
 8016df0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016df4:	a902      	add	r1, sp, #8
 8016df6:	4630      	mov	r0, r6
 8016df8:	4798      	blx	r3
 8016dfa:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8016dfe:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016e02:	2b01      	cmp	r3, #1
 8016e04:	d00c      	beq.n	8016e20 <rmw_send_request+0x80>
 8016e06:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8016e08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e0c:	f7f9 feb2 	bl	8010b74 <uxr_run_session_until_confirm_delivery>
 8016e10:	4638      	mov	r0, r7
 8016e12:	b00b      	add	sp, #44	@ 0x2c
 8016e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e18:	2001      	movs	r0, #1
 8016e1a:	b00b      	add	sp, #44	@ 0x2c
 8016e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e24:	f7f9 fae6 	bl	80103f4 <uxr_flash_output_streams>
 8016e28:	4638      	mov	r0, r7
 8016e2a:	b00b      	add	sp, #44	@ 0x2c
 8016e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e30:	200c      	movs	r0, #12
 8016e32:	b00b      	add	sp, #44	@ 0x2c
 8016e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e38:	0801bae8 	.word	0x0801bae8

08016e3c <rmw_take_request>:
 8016e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e40:	4605      	mov	r5, r0
 8016e42:	6800      	ldr	r0, [r0, #0]
 8016e44:	b089      	sub	sp, #36	@ 0x24
 8016e46:	460c      	mov	r4, r1
 8016e48:	4690      	mov	r8, r2
 8016e4a:	461e      	mov	r6, r3
 8016e4c:	b128      	cbz	r0, 8016e5a <rmw_take_request+0x1e>
 8016e4e:	4b28      	ldr	r3, [pc, #160]	@ (8016ef0 <rmw_take_request+0xb4>)
 8016e50:	6819      	ldr	r1, [r3, #0]
 8016e52:	f7e9 f9e5 	bl	8000220 <strcmp>
 8016e56:	2800      	cmp	r0, #0
 8016e58:	d146      	bne.n	8016ee8 <rmw_take_request+0xac>
 8016e5a:	b10e      	cbz	r6, 8016e60 <rmw_take_request+0x24>
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	7033      	strb	r3, [r6, #0]
 8016e60:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016e64:	f7f7 fddc 	bl	800ea20 <rmw_uxrce_clean_expired_static_input_buffer>
 8016e68:	4648      	mov	r0, r9
 8016e6a:	f7f7 fdb1 	bl	800e9d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e6e:	4607      	mov	r7, r0
 8016e70:	b3b0      	cbz	r0, 8016ee0 <rmw_take_request+0xa4>
 8016e72:	6885      	ldr	r5, [r0, #8]
 8016e74:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016e78:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8016e7c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8016e80:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016e84:	7423      	strb	r3, [r4, #16]
 8016e86:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016e8a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8016e8e:	74e2      	strb	r2, [r4, #19]
 8016e90:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016e94:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016e98:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016e9c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8016ea0:	61e1      	str	r1, [r4, #28]
 8016ea2:	6162      	str	r2, [r4, #20]
 8016ea4:	61a3      	str	r3, [r4, #24]
 8016ea6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016eaa:	689b      	ldr	r3, [r3, #8]
 8016eac:	4798      	blx	r3
 8016eae:	6844      	ldr	r4, [r0, #4]
 8016eb0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016eb4:	f105 0110 	add.w	r1, r5, #16
 8016eb8:	4668      	mov	r0, sp
 8016eba:	f7f5 f94d 	bl	800c158 <ucdr_init_buffer>
 8016ebe:	68e3      	ldr	r3, [r4, #12]
 8016ec0:	4641      	mov	r1, r8
 8016ec2:	4668      	mov	r0, sp
 8016ec4:	4798      	blx	r3
 8016ec6:	4639      	mov	r1, r7
 8016ec8:	4604      	mov	r4, r0
 8016eca:	480a      	ldr	r0, [pc, #40]	@ (8016ef4 <rmw_take_request+0xb8>)
 8016ecc:	f7ff fe98 	bl	8016c00 <put_memory>
 8016ed0:	b106      	cbz	r6, 8016ed4 <rmw_take_request+0x98>
 8016ed2:	7034      	strb	r4, [r6, #0]
 8016ed4:	f084 0001 	eor.w	r0, r4, #1
 8016ed8:	b2c0      	uxtb	r0, r0
 8016eda:	b009      	add	sp, #36	@ 0x24
 8016edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ee0:	2001      	movs	r0, #1
 8016ee2:	b009      	add	sp, #36	@ 0x24
 8016ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ee8:	200c      	movs	r0, #12
 8016eea:	b009      	add	sp, #36	@ 0x24
 8016eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ef0:	0801bae8 	.word	0x0801bae8
 8016ef4:	2000b5dc 	.word	0x2000b5dc

08016ef8 <rmw_send_response>:
 8016ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016efa:	4605      	mov	r5, r0
 8016efc:	6800      	ldr	r0, [r0, #0]
 8016efe:	b091      	sub	sp, #68	@ 0x44
 8016f00:	460c      	mov	r4, r1
 8016f02:	4616      	mov	r6, r2
 8016f04:	b128      	cbz	r0, 8016f12 <rmw_send_response+0x1a>
 8016f06:	4b29      	ldr	r3, [pc, #164]	@ (8016fac <rmw_send_response+0xb4>)
 8016f08:	6819      	ldr	r1, [r3, #0]
 8016f0a:	f7e9 f989 	bl	8000220 <strcmp>
 8016f0e:	2800      	cmp	r0, #0
 8016f10:	d141      	bne.n	8016f96 <rmw_send_response+0x9e>
 8016f12:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8016f16:	9306      	str	r3, [sp, #24]
 8016f18:	4623      	mov	r3, r4
 8016f1a:	9207      	str	r2, [sp, #28]
 8016f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f20:	686d      	ldr	r5, [r5, #4]
 8016f22:	789b      	ldrb	r3, [r3, #2]
 8016f24:	68a1      	ldr	r1, [r4, #8]
 8016f26:	f88d 2017 	strb.w	r2, [sp, #23]
 8016f2a:	f88d 3016 	strb.w	r3, [sp, #22]
 8016f2e:	68e2      	ldr	r2, [r4, #12]
 8016f30:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8016f34:	6860      	ldr	r0, [r4, #4]
 8016f36:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016f3a:	ab02      	add	r3, sp, #8
 8016f3c:	c307      	stmia	r3!, {r0, r1, r2}
 8016f3e:	696b      	ldr	r3, [r5, #20]
 8016f40:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8016f42:	68db      	ldr	r3, [r3, #12]
 8016f44:	4798      	blx	r3
 8016f46:	6844      	ldr	r4, [r0, #4]
 8016f48:	4630      	mov	r0, r6
 8016f4a:	6923      	ldr	r3, [r4, #16]
 8016f4c:	4798      	blx	r3
 8016f4e:	f100 0318 	add.w	r3, r0, #24
 8016f52:	6938      	ldr	r0, [r7, #16]
 8016f54:	9300      	str	r3, [sp, #0]
 8016f56:	692a      	ldr	r2, [r5, #16]
 8016f58:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016f5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016f5e:	ab08      	add	r3, sp, #32
 8016f60:	f7fb f8dc 	bl	801211c <uxr_prepare_output_stream>
 8016f64:	b910      	cbnz	r0, 8016f6c <rmw_send_response+0x74>
 8016f66:	2001      	movs	r0, #1
 8016f68:	b011      	add	sp, #68	@ 0x44
 8016f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f6c:	a902      	add	r1, sp, #8
 8016f6e:	a808      	add	r0, sp, #32
 8016f70:	f7fc f962 	bl	8013238 <uxr_serialize_SampleIdentity>
 8016f74:	68a3      	ldr	r3, [r4, #8]
 8016f76:	a908      	add	r1, sp, #32
 8016f78:	4630      	mov	r0, r6
 8016f7a:	4798      	blx	r3
 8016f7c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016f80:	6938      	ldr	r0, [r7, #16]
 8016f82:	2b01      	cmp	r3, #1
 8016f84:	d00a      	beq.n	8016f9c <rmw_send_response+0xa4>
 8016f86:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016f88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016f8c:	f7f9 fdf2 	bl	8010b74 <uxr_run_session_until_confirm_delivery>
 8016f90:	2000      	movs	r0, #0
 8016f92:	b011      	add	sp, #68	@ 0x44
 8016f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f96:	200c      	movs	r0, #12
 8016f98:	b011      	add	sp, #68	@ 0x44
 8016f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016fa0:	f7f9 fa28 	bl	80103f4 <uxr_flash_output_streams>
 8016fa4:	2000      	movs	r0, #0
 8016fa6:	b011      	add	sp, #68	@ 0x44
 8016fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016faa:	bf00      	nop
 8016fac:	0801bae8 	.word	0x0801bae8

08016fb0 <rmw_take_response>:
 8016fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fb4:	4604      	mov	r4, r0
 8016fb6:	6800      	ldr	r0, [r0, #0]
 8016fb8:	b088      	sub	sp, #32
 8016fba:	4688      	mov	r8, r1
 8016fbc:	4617      	mov	r7, r2
 8016fbe:	461d      	mov	r5, r3
 8016fc0:	b120      	cbz	r0, 8016fcc <rmw_take_response+0x1c>
 8016fc2:	4b1e      	ldr	r3, [pc, #120]	@ (801703c <rmw_take_response+0x8c>)
 8016fc4:	6819      	ldr	r1, [r3, #0]
 8016fc6:	f7e9 f92b 	bl	8000220 <strcmp>
 8016fca:	bb78      	cbnz	r0, 801702c <rmw_take_response+0x7c>
 8016fcc:	b10d      	cbz	r5, 8016fd2 <rmw_take_response+0x22>
 8016fce:	2300      	movs	r3, #0
 8016fd0:	702b      	strb	r3, [r5, #0]
 8016fd2:	6864      	ldr	r4, [r4, #4]
 8016fd4:	f7f7 fd24 	bl	800ea20 <rmw_uxrce_clean_expired_static_input_buffer>
 8016fd8:	4620      	mov	r0, r4
 8016fda:	f7f7 fcf9 	bl	800e9d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016fde:	4606      	mov	r6, r0
 8016fe0:	b340      	cbz	r0, 8017034 <rmw_take_response+0x84>
 8016fe2:	6963      	ldr	r3, [r4, #20]
 8016fe4:	6884      	ldr	r4, [r0, #8]
 8016fe6:	68db      	ldr	r3, [r3, #12]
 8016fe8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016fec:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016ff0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8016ff4:	4798      	blx	r3
 8016ff6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016ffa:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016ffe:	f104 0110 	add.w	r1, r4, #16
 8017002:	4668      	mov	r0, sp
 8017004:	f7f5 f8a8 	bl	800c158 <ucdr_init_buffer>
 8017008:	4639      	mov	r1, r7
 801700a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801700e:	4668      	mov	r0, sp
 8017010:	4798      	blx	r3
 8017012:	4631      	mov	r1, r6
 8017014:	4604      	mov	r4, r0
 8017016:	480a      	ldr	r0, [pc, #40]	@ (8017040 <rmw_take_response+0x90>)
 8017018:	f7ff fdf2 	bl	8016c00 <put_memory>
 801701c:	b105      	cbz	r5, 8017020 <rmw_take_response+0x70>
 801701e:	702c      	strb	r4, [r5, #0]
 8017020:	f084 0001 	eor.w	r0, r4, #1
 8017024:	b2c0      	uxtb	r0, r0
 8017026:	b008      	add	sp, #32
 8017028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801702c:	200c      	movs	r0, #12
 801702e:	b008      	add	sp, #32
 8017030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017034:	2001      	movs	r0, #1
 8017036:	b008      	add	sp, #32
 8017038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801703c:	0801bae8 	.word	0x0801bae8
 8017040:	2000b5dc 	.word	0x2000b5dc

08017044 <rmw_take_with_info>:
 8017044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017046:	4604      	mov	r4, r0
 8017048:	6800      	ldr	r0, [r0, #0]
 801704a:	b089      	sub	sp, #36	@ 0x24
 801704c:	460f      	mov	r7, r1
 801704e:	4615      	mov	r5, r2
 8017050:	b128      	cbz	r0, 801705e <rmw_take_with_info+0x1a>
 8017052:	4b24      	ldr	r3, [pc, #144]	@ (80170e4 <rmw_take_with_info+0xa0>)
 8017054:	6819      	ldr	r1, [r3, #0]
 8017056:	f7e9 f8e3 	bl	8000220 <strcmp>
 801705a:	2800      	cmp	r0, #0
 801705c:	d13e      	bne.n	80170dc <rmw_take_with_info+0x98>
 801705e:	b305      	cbz	r5, 80170a2 <rmw_take_with_info+0x5e>
 8017060:	6864      	ldr	r4, [r4, #4]
 8017062:	2300      	movs	r3, #0
 8017064:	702b      	strb	r3, [r5, #0]
 8017066:	f7f7 fcdb 	bl	800ea20 <rmw_uxrce_clean_expired_static_input_buffer>
 801706a:	4620      	mov	r0, r4
 801706c:	f7f7 fcb0 	bl	800e9d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017070:	4606      	mov	r6, r0
 8017072:	b1f0      	cbz	r0, 80170b2 <rmw_take_with_info+0x6e>
 8017074:	6881      	ldr	r1, [r0, #8]
 8017076:	4668      	mov	r0, sp
 8017078:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801707c:	3110      	adds	r1, #16
 801707e:	f7f5 f86b 	bl	800c158 <ucdr_init_buffer>
 8017082:	69a3      	ldr	r3, [r4, #24]
 8017084:	4639      	mov	r1, r7
 8017086:	68db      	ldr	r3, [r3, #12]
 8017088:	4668      	mov	r0, sp
 801708a:	4798      	blx	r3
 801708c:	4631      	mov	r1, r6
 801708e:	4604      	mov	r4, r0
 8017090:	4815      	ldr	r0, [pc, #84]	@ (80170e8 <rmw_take_with_info+0xa4>)
 8017092:	f7ff fdb5 	bl	8016c00 <put_memory>
 8017096:	702c      	strb	r4, [r5, #0]
 8017098:	f084 0001 	eor.w	r0, r4, #1
 801709c:	b2c0      	uxtb	r0, r0
 801709e:	b009      	add	sp, #36	@ 0x24
 80170a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170a2:	6864      	ldr	r4, [r4, #4]
 80170a4:	f7f7 fcbc 	bl	800ea20 <rmw_uxrce_clean_expired_static_input_buffer>
 80170a8:	4620      	mov	r0, r4
 80170aa:	f7f7 fc91 	bl	800e9d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80170ae:	4605      	mov	r5, r0
 80170b0:	b910      	cbnz	r0, 80170b8 <rmw_take_with_info+0x74>
 80170b2:	2001      	movs	r0, #1
 80170b4:	b009      	add	sp, #36	@ 0x24
 80170b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170b8:	68a9      	ldr	r1, [r5, #8]
 80170ba:	4668      	mov	r0, sp
 80170bc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80170c0:	3110      	adds	r1, #16
 80170c2:	f7f5 f849 	bl	800c158 <ucdr_init_buffer>
 80170c6:	69a3      	ldr	r3, [r4, #24]
 80170c8:	4639      	mov	r1, r7
 80170ca:	68db      	ldr	r3, [r3, #12]
 80170cc:	4668      	mov	r0, sp
 80170ce:	4798      	blx	r3
 80170d0:	4629      	mov	r1, r5
 80170d2:	4604      	mov	r4, r0
 80170d4:	4804      	ldr	r0, [pc, #16]	@ (80170e8 <rmw_take_with_info+0xa4>)
 80170d6:	f7ff fd93 	bl	8016c00 <put_memory>
 80170da:	e7dd      	b.n	8017098 <rmw_take_with_info+0x54>
 80170dc:	200c      	movs	r0, #12
 80170de:	b009      	add	sp, #36	@ 0x24
 80170e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170e2:	bf00      	nop
 80170e4:	0801bae8 	.word	0x0801bae8
 80170e8:	2000b5dc 	.word	0x2000b5dc

080170ec <rmw_wait>:
 80170ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170f0:	b089      	sub	sp, #36	@ 0x24
 80170f2:	4605      	mov	r5, r0
 80170f4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80170f6:	460e      	mov	r6, r1
 80170f8:	4698      	mov	r8, r3
 80170fa:	4691      	mov	r9, r2
 80170fc:	2a00      	cmp	r2, #0
 80170fe:	f000 810a 	beq.w	8017316 <rmw_wait+0x22a>
 8017102:	b16c      	cbz	r4, 8017120 <rmw_wait+0x34>
 8017104:	4bae      	ldr	r3, [pc, #696]	@ (80173c0 <rmw_wait+0x2d4>)
 8017106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017108:	af04      	add	r7, sp, #16
 801710a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801710e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017112:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017116:	f7ff faaf 	bl	8016678 <rmw_time_equal>
 801711a:	2800      	cmp	r0, #0
 801711c:	f000 8127 	beq.w	801736e <rmw_wait+0x282>
 8017120:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017124:	f7f7 fc7c 	bl	800ea20 <rmw_uxrce_clean_expired_static_input_buffer>
 8017128:	4ba6      	ldr	r3, [pc, #664]	@ (80173c4 <rmw_wait+0x2d8>)
 801712a:	681c      	ldr	r4, [r3, #0]
 801712c:	b14c      	cbz	r4, 8017142 <rmw_wait+0x56>
 801712e:	4623      	mov	r3, r4
 8017130:	2100      	movs	r1, #0
 8017132:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017136:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801713a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801713e:	2b00      	cmp	r3, #0
 8017140:	d1f7      	bne.n	8017132 <rmw_wait+0x46>
 8017142:	f1b9 0f00 	cmp.w	r9, #0
 8017146:	d011      	beq.n	801716c <rmw_wait+0x80>
 8017148:	f8d9 1000 	ldr.w	r1, [r9]
 801714c:	b171      	cbz	r1, 801716c <rmw_wait+0x80>
 801714e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017152:	2300      	movs	r3, #0
 8017154:	2001      	movs	r0, #1
 8017156:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801715a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801715c:	6912      	ldr	r2, [r2, #16]
 801715e:	3301      	adds	r3, #1
 8017160:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017164:	4299      	cmp	r1, r3
 8017166:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801716a:	d1f4      	bne.n	8017156 <rmw_wait+0x6a>
 801716c:	f1b8 0f00 	cmp.w	r8, #0
 8017170:	d011      	beq.n	8017196 <rmw_wait+0xaa>
 8017172:	f8d8 1000 	ldr.w	r1, [r8]
 8017176:	b171      	cbz	r1, 8017196 <rmw_wait+0xaa>
 8017178:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801717c:	2300      	movs	r3, #0
 801717e:	2001      	movs	r0, #1
 8017180:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017184:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017186:	6912      	ldr	r2, [r2, #16]
 8017188:	3301      	adds	r3, #1
 801718a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801718e:	4299      	cmp	r1, r3
 8017190:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017194:	d1f4      	bne.n	8017180 <rmw_wait+0x94>
 8017196:	b185      	cbz	r5, 80171ba <rmw_wait+0xce>
 8017198:	6829      	ldr	r1, [r5, #0]
 801719a:	b171      	cbz	r1, 80171ba <rmw_wait+0xce>
 801719c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80171a0:	2300      	movs	r3, #0
 80171a2:	2001      	movs	r0, #1
 80171a4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80171a8:	6a12      	ldr	r2, [r2, #32]
 80171aa:	6912      	ldr	r2, [r2, #16]
 80171ac:	3301      	adds	r3, #1
 80171ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80171b2:	4299      	cmp	r1, r3
 80171b4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80171b8:	d1f4      	bne.n	80171a4 <rmw_wait+0xb8>
 80171ba:	b34c      	cbz	r4, 8017210 <rmw_wait+0x124>
 80171bc:	4622      	mov	r2, r4
 80171be:	2300      	movs	r3, #0
 80171c0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80171c4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80171c8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80171cc:	440b      	add	r3, r1
 80171ce:	b2db      	uxtb	r3, r3
 80171d0:	2a00      	cmp	r2, #0
 80171d2:	d1f5      	bne.n	80171c0 <rmw_wait+0xd4>
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	f000 8084 	beq.w	80172e2 <rmw_wait+0x1f6>
 80171da:	1c7a      	adds	r2, r7, #1
 80171dc:	d00d      	beq.n	80171fa <rmw_wait+0x10e>
 80171de:	ee07 7a90 	vmov	s15, r7
 80171e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80171e6:	ee07 3a90 	vmov	s15, r3
 80171ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80171ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80171f2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80171f6:	ee17 7a90 	vmov	r7, s15
 80171fa:	68a0      	ldr	r0, [r4, #8]
 80171fc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017200:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017204:	2b00      	cmp	r3, #0
 8017206:	f040 8090 	bne.w	801732a <rmw_wait+0x23e>
 801720a:	6864      	ldr	r4, [r4, #4]
 801720c:	2c00      	cmp	r4, #0
 801720e:	d1f4      	bne.n	80171fa <rmw_wait+0x10e>
 8017210:	f1b9 0f00 	cmp.w	r9, #0
 8017214:	f000 80bc 	beq.w	8017390 <rmw_wait+0x2a4>
 8017218:	f8d9 7000 	ldr.w	r7, [r9]
 801721c:	2f00      	cmp	r7, #0
 801721e:	f000 808e 	beq.w	801733e <rmw_wait+0x252>
 8017222:	2400      	movs	r4, #0
 8017224:	4627      	mov	r7, r4
 8017226:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801722a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801722e:	f7f7 fbcf 	bl	800e9d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017232:	2800      	cmp	r0, #0
 8017234:	d05f      	beq.n	80172f6 <rmw_wait+0x20a>
 8017236:	f8d9 3000 	ldr.w	r3, [r9]
 801723a:	3401      	adds	r4, #1
 801723c:	42a3      	cmp	r3, r4
 801723e:	f04f 0701 	mov.w	r7, #1
 8017242:	d8f0      	bhi.n	8017226 <rmw_wait+0x13a>
 8017244:	f1b8 0f00 	cmp.w	r8, #0
 8017248:	d012      	beq.n	8017270 <rmw_wait+0x184>
 801724a:	f8d8 3000 	ldr.w	r3, [r8]
 801724e:	b17b      	cbz	r3, 8017270 <rmw_wait+0x184>
 8017250:	2400      	movs	r4, #0
 8017252:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017256:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801725a:	f7f7 fbb9 	bl	800e9d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801725e:	2800      	cmp	r0, #0
 8017260:	d051      	beq.n	8017306 <rmw_wait+0x21a>
 8017262:	f8d8 3000 	ldr.w	r3, [r8]
 8017266:	3401      	adds	r4, #1
 8017268:	42a3      	cmp	r3, r4
 801726a:	f04f 0701 	mov.w	r7, #1
 801726e:	d8f0      	bhi.n	8017252 <rmw_wait+0x166>
 8017270:	b1dd      	cbz	r5, 80172aa <rmw_wait+0x1be>
 8017272:	682b      	ldr	r3, [r5, #0]
 8017274:	b1cb      	cbz	r3, 80172aa <rmw_wait+0x1be>
 8017276:	2400      	movs	r4, #0
 8017278:	686b      	ldr	r3, [r5, #4]
 801727a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801727e:	f7f7 fba7 	bl	800e9d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017282:	b158      	cbz	r0, 801729c <rmw_wait+0x1b0>
 8017284:	682b      	ldr	r3, [r5, #0]
 8017286:	3401      	adds	r4, #1
 8017288:	42a3      	cmp	r3, r4
 801728a:	d969      	bls.n	8017360 <rmw_wait+0x274>
 801728c:	686b      	ldr	r3, [r5, #4]
 801728e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017292:	2701      	movs	r7, #1
 8017294:	f7f7 fb9c 	bl	800e9d0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017298:	2800      	cmp	r0, #0
 801729a:	d1f3      	bne.n	8017284 <rmw_wait+0x198>
 801729c:	e9d5 3200 	ldrd	r3, r2, [r5]
 80172a0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80172a4:	3401      	adds	r4, #1
 80172a6:	42a3      	cmp	r3, r4
 80172a8:	d8e6      	bhi.n	8017278 <rmw_wait+0x18c>
 80172aa:	b1a6      	cbz	r6, 80172d6 <rmw_wait+0x1ea>
 80172ac:	6834      	ldr	r4, [r6, #0]
 80172ae:	b194      	cbz	r4, 80172d6 <rmw_wait+0x1ea>
 80172b0:	2300      	movs	r3, #0
 80172b2:	461d      	mov	r5, r3
 80172b4:	e004      	b.n	80172c0 <rmw_wait+0x1d4>
 80172b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80172ba:	3301      	adds	r3, #1
 80172bc:	42a3      	cmp	r3, r4
 80172be:	d00a      	beq.n	80172d6 <rmw_wait+0x1ea>
 80172c0:	6870      	ldr	r0, [r6, #4]
 80172c2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80172c6:	7c0a      	ldrb	r2, [r1, #16]
 80172c8:	2a00      	cmp	r2, #0
 80172ca:	d0f4      	beq.n	80172b6 <rmw_wait+0x1ca>
 80172cc:	3301      	adds	r3, #1
 80172ce:	42a3      	cmp	r3, r4
 80172d0:	740d      	strb	r5, [r1, #16]
 80172d2:	4617      	mov	r7, r2
 80172d4:	d1f4      	bne.n	80172c0 <rmw_wait+0x1d4>
 80172d6:	2f00      	cmp	r7, #0
 80172d8:	d03e      	beq.n	8017358 <rmw_wait+0x26c>
 80172da:	2000      	movs	r0, #0
 80172dc:	b009      	add	sp, #36	@ 0x24
 80172de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172e2:	68a0      	ldr	r0, [r4, #8]
 80172e4:	2100      	movs	r1, #0
 80172e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80172ea:	f7f9 fc09 	bl	8010b00 <uxr_run_session_timeout>
 80172ee:	6864      	ldr	r4, [r4, #4]
 80172f0:	2c00      	cmp	r4, #0
 80172f2:	d1f6      	bne.n	80172e2 <rmw_wait+0x1f6>
 80172f4:	e78c      	b.n	8017210 <rmw_wait+0x124>
 80172f6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80172fa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80172fe:	3401      	adds	r4, #1
 8017300:	42a3      	cmp	r3, r4
 8017302:	d890      	bhi.n	8017226 <rmw_wait+0x13a>
 8017304:	e79e      	b.n	8017244 <rmw_wait+0x158>
 8017306:	e9d8 3200 	ldrd	r3, r2, [r8]
 801730a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801730e:	3401      	adds	r4, #1
 8017310:	429c      	cmp	r4, r3
 8017312:	d39e      	bcc.n	8017252 <rmw_wait+0x166>
 8017314:	e7ac      	b.n	8017270 <rmw_wait+0x184>
 8017316:	2b00      	cmp	r3, #0
 8017318:	f47f aef3 	bne.w	8017102 <rmw_wait+0x16>
 801731c:	2800      	cmp	r0, #0
 801731e:	f47f aef0 	bne.w	8017102 <rmw_wait+0x16>
 8017322:	2900      	cmp	r1, #0
 8017324:	f47f aeed 	bne.w	8017102 <rmw_wait+0x16>
 8017328:	e7d7      	b.n	80172da <rmw_wait+0x1ee>
 801732a:	4639      	mov	r1, r7
 801732c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017330:	f7f9 fc00 	bl	8010b34 <uxr_run_session_until_data>
 8017334:	6864      	ldr	r4, [r4, #4]
 8017336:	2c00      	cmp	r4, #0
 8017338:	f47f af5f 	bne.w	80171fa <rmw_wait+0x10e>
 801733c:	e768      	b.n	8017210 <rmw_wait+0x124>
 801733e:	f1b8 0f00 	cmp.w	r8, #0
 8017342:	d032      	beq.n	80173aa <rmw_wait+0x2be>
 8017344:	f8d8 3000 	ldr.w	r3, [r8]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d181      	bne.n	8017250 <rmw_wait+0x164>
 801734c:	461f      	mov	r7, r3
 801734e:	2d00      	cmp	r5, #0
 8017350:	d18f      	bne.n	8017272 <rmw_wait+0x186>
 8017352:	462f      	mov	r7, r5
 8017354:	2e00      	cmp	r6, #0
 8017356:	d1a9      	bne.n	80172ac <rmw_wait+0x1c0>
 8017358:	2002      	movs	r0, #2
 801735a:	b009      	add	sp, #36	@ 0x24
 801735c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017360:	2e00      	cmp	r6, #0
 8017362:	d0ba      	beq.n	80172da <rmw_wait+0x1ee>
 8017364:	6834      	ldr	r4, [r6, #0]
 8017366:	2701      	movs	r7, #1
 8017368:	2c00      	cmp	r4, #0
 801736a:	d1a1      	bne.n	80172b0 <rmw_wait+0x1c4>
 801736c:	e7b5      	b.n	80172da <rmw_wait+0x1ee>
 801736e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017372:	f7ff f9d5 	bl	8016720 <rmw_time_total_nsec>
 8017376:	2300      	movs	r3, #0
 8017378:	4a13      	ldr	r2, [pc, #76]	@ (80173c8 <rmw_wait+0x2dc>)
 801737a:	f7e9 fc75 	bl	8000c68 <__aeabi_uldivmod>
 801737e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017382:	f171 0300 	sbcs.w	r3, r1, #0
 8017386:	4607      	mov	r7, r0
 8017388:	bfa8      	it	ge
 801738a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801738e:	e6c9      	b.n	8017124 <rmw_wait+0x38>
 8017390:	f1b8 0f00 	cmp.w	r8, #0
 8017394:	d009      	beq.n	80173aa <rmw_wait+0x2be>
 8017396:	f8d8 3000 	ldr.w	r3, [r8]
 801739a:	464f      	mov	r7, r9
 801739c:	2b00      	cmp	r3, #0
 801739e:	f47f af57 	bne.w	8017250 <rmw_wait+0x164>
 80173a2:	2d00      	cmp	r5, #0
 80173a4:	f47f af65 	bne.w	8017272 <rmw_wait+0x186>
 80173a8:	e7d3      	b.n	8017352 <rmw_wait+0x266>
 80173aa:	b17d      	cbz	r5, 80173cc <rmw_wait+0x2e0>
 80173ac:	682b      	ldr	r3, [r5, #0]
 80173ae:	4647      	mov	r7, r8
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	f47f af60 	bne.w	8017276 <rmw_wait+0x18a>
 80173b6:	2e00      	cmp	r6, #0
 80173b8:	f47f af78 	bne.w	80172ac <rmw_wait+0x1c0>
 80173bc:	e7cc      	b.n	8017358 <rmw_wait+0x26c>
 80173be:	bf00      	nop
 80173c0:	0801a850 	.word	0x0801a850
 80173c4:	2000b5cc 	.word	0x2000b5cc
 80173c8:	000f4240 	.word	0x000f4240
 80173cc:	2e00      	cmp	r6, #0
 80173ce:	d0c3      	beq.n	8017358 <rmw_wait+0x26c>
 80173d0:	6834      	ldr	r4, [r6, #0]
 80173d2:	462f      	mov	r7, r5
 80173d4:	2c00      	cmp	r4, #0
 80173d6:	f47f af6b 	bne.w	80172b0 <rmw_wait+0x1c4>
 80173da:	e7bd      	b.n	8017358 <rmw_wait+0x26c>

080173dc <rmw_create_wait_set>:
 80173dc:	b508      	push	{r3, lr}
 80173de:	4803      	ldr	r0, [pc, #12]	@ (80173ec <rmw_create_wait_set+0x10>)
 80173e0:	f7ff fbfe 	bl	8016be0 <get_memory>
 80173e4:	b108      	cbz	r0, 80173ea <rmw_create_wait_set+0xe>
 80173e6:	6880      	ldr	r0, [r0, #8]
 80173e8:	3010      	adds	r0, #16
 80173ea:	bd08      	pop	{r3, pc}
 80173ec:	2000b60c 	.word	0x2000b60c

080173f0 <rmw_destroy_wait_set>:
 80173f0:	b508      	push	{r3, lr}
 80173f2:	4b08      	ldr	r3, [pc, #32]	@ (8017414 <rmw_destroy_wait_set+0x24>)
 80173f4:	6819      	ldr	r1, [r3, #0]
 80173f6:	b911      	cbnz	r1, 80173fe <rmw_destroy_wait_set+0xe>
 80173f8:	e00a      	b.n	8017410 <rmw_destroy_wait_set+0x20>
 80173fa:	6849      	ldr	r1, [r1, #4]
 80173fc:	b141      	cbz	r1, 8017410 <rmw_destroy_wait_set+0x20>
 80173fe:	688b      	ldr	r3, [r1, #8]
 8017400:	3310      	adds	r3, #16
 8017402:	4298      	cmp	r0, r3
 8017404:	d1f9      	bne.n	80173fa <rmw_destroy_wait_set+0xa>
 8017406:	4803      	ldr	r0, [pc, #12]	@ (8017414 <rmw_destroy_wait_set+0x24>)
 8017408:	f7ff fbfa 	bl	8016c00 <put_memory>
 801740c:	2000      	movs	r0, #0
 801740e:	bd08      	pop	{r3, pc}
 8017410:	2001      	movs	r0, #1
 8017412:	bd08      	pop	{r3, pc}
 8017414:	2000b60c 	.word	0x2000b60c

08017418 <sensor_msgs__msg__Imu__init>:
 8017418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801741c:	4605      	mov	r5, r0
 801741e:	b3c0      	cbz	r0, 8017492 <sensor_msgs__msg__Imu__init+0x7a>
 8017420:	f000 f864 	bl	80174ec <std_msgs__msg__Header__init>
 8017424:	4604      	mov	r4, r0
 8017426:	b310      	cbz	r0, 801746e <sensor_msgs__msg__Imu__init+0x56>
 8017428:	f105 0618 	add.w	r6, r5, #24
 801742c:	4630      	mov	r0, r6
 801742e:	f000 f893 	bl	8017558 <geometry_msgs__msg__Quaternion__init>
 8017432:	4604      	mov	r4, r0
 8017434:	2800      	cmp	r0, #0
 8017436:	d040      	beq.n	80174ba <sensor_msgs__msg__Imu__init+0xa2>
 8017438:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 801743c:	4638      	mov	r0, r7
 801743e:	f7f7 ffd9 	bl	800f3f4 <geometry_msgs__msg__Vector3__init>
 8017442:	4604      	mov	r4, r0
 8017444:	b348      	cbz	r0, 801749a <sensor_msgs__msg__Imu__init+0x82>
 8017446:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 801744a:	4640      	mov	r0, r8
 801744c:	f7f7 ffd2 	bl	800f3f4 <geometry_msgs__msg__Vector3__init>
 8017450:	4604      	mov	r4, r0
 8017452:	b9d8      	cbnz	r0, 801748c <sensor_msgs__msg__Imu__init+0x74>
 8017454:	4628      	mov	r0, r5
 8017456:	f000 f86d 	bl	8017534 <std_msgs__msg__Header__fini>
 801745a:	4630      	mov	r0, r6
 801745c:	f000 f890 	bl	8017580 <geometry_msgs__msg__Quaternion__fini>
 8017460:	4638      	mov	r0, r7
 8017462:	f7f7 ffcb 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 8017466:	4640      	mov	r0, r8
 8017468:	f7f7 ffc8 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 801746c:	e00e      	b.n	801748c <sensor_msgs__msg__Imu__init+0x74>
 801746e:	4628      	mov	r0, r5
 8017470:	f000 f860 	bl	8017534 <std_msgs__msg__Header__fini>
 8017474:	f105 0018 	add.w	r0, r5, #24
 8017478:	f000 f882 	bl	8017580 <geometry_msgs__msg__Quaternion__fini>
 801747c:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8017480:	f7f7 ffbc 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 8017484:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017488:	f7f7 ffb8 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 801748c:	4620      	mov	r0, r4
 801748e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017492:	4604      	mov	r4, r0
 8017494:	4620      	mov	r0, r4
 8017496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801749a:	4628      	mov	r0, r5
 801749c:	f000 f84a 	bl	8017534 <std_msgs__msg__Header__fini>
 80174a0:	4630      	mov	r0, r6
 80174a2:	f000 f86d 	bl	8017580 <geometry_msgs__msg__Quaternion__fini>
 80174a6:	4638      	mov	r0, r7
 80174a8:	f7f7 ffa8 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 80174ac:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 80174b0:	f7f7 ffa4 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 80174b4:	4620      	mov	r0, r4
 80174b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ba:	4628      	mov	r0, r5
 80174bc:	f000 f83a 	bl	8017534 <std_msgs__msg__Header__fini>
 80174c0:	4630      	mov	r0, r6
 80174c2:	e7d9      	b.n	8017478 <sensor_msgs__msg__Imu__init+0x60>

080174c4 <sensor_msgs__msg__Imu__fini>:
 80174c4:	b188      	cbz	r0, 80174ea <sensor_msgs__msg__Imu__fini+0x26>
 80174c6:	b510      	push	{r4, lr}
 80174c8:	4604      	mov	r4, r0
 80174ca:	f000 f833 	bl	8017534 <std_msgs__msg__Header__fini>
 80174ce:	f104 0018 	add.w	r0, r4, #24
 80174d2:	f000 f855 	bl	8017580 <geometry_msgs__msg__Quaternion__fini>
 80174d6:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80174da:	f7f7 ff8f 	bl	800f3fc <geometry_msgs__msg__Vector3__fini>
 80174de:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80174e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174e6:	f7f7 bf89 	b.w	800f3fc <geometry_msgs__msg__Vector3__fini>
 80174ea:	4770      	bx	lr

080174ec <std_msgs__msg__Header__init>:
 80174ec:	b570      	push	{r4, r5, r6, lr}
 80174ee:	4605      	mov	r5, r0
 80174f0:	b1a8      	cbz	r0, 801751e <std_msgs__msg__Header__init+0x32>
 80174f2:	f000 f82b 	bl	801754c <builtin_interfaces__msg__Time__init>
 80174f6:	4604      	mov	r4, r0
 80174f8:	b140      	cbz	r0, 801750c <std_msgs__msg__Header__init+0x20>
 80174fa:	f105 0608 	add.w	r6, r5, #8
 80174fe:	4630      	mov	r0, r6
 8017500:	f001 f970 	bl	80187e4 <rosidl_runtime_c__String__init>
 8017504:	4604      	mov	r4, r0
 8017506:	b168      	cbz	r0, 8017524 <std_msgs__msg__Header__init+0x38>
 8017508:	4620      	mov	r0, r4
 801750a:	bd70      	pop	{r4, r5, r6, pc}
 801750c:	4628      	mov	r0, r5
 801750e:	f000 f821 	bl	8017554 <builtin_interfaces__msg__Time__fini>
 8017512:	f105 0008 	add.w	r0, r5, #8
 8017516:	f001 f97b 	bl	8018810 <rosidl_runtime_c__String__fini>
 801751a:	4620      	mov	r0, r4
 801751c:	bd70      	pop	{r4, r5, r6, pc}
 801751e:	4604      	mov	r4, r0
 8017520:	4620      	mov	r0, r4
 8017522:	bd70      	pop	{r4, r5, r6, pc}
 8017524:	4628      	mov	r0, r5
 8017526:	f000 f815 	bl	8017554 <builtin_interfaces__msg__Time__fini>
 801752a:	4630      	mov	r0, r6
 801752c:	f001 f970 	bl	8018810 <rosidl_runtime_c__String__fini>
 8017530:	e7ea      	b.n	8017508 <std_msgs__msg__Header__init+0x1c>
 8017532:	bf00      	nop

08017534 <std_msgs__msg__Header__fini>:
 8017534:	b148      	cbz	r0, 801754a <std_msgs__msg__Header__fini+0x16>
 8017536:	b510      	push	{r4, lr}
 8017538:	4604      	mov	r4, r0
 801753a:	f000 f80b 	bl	8017554 <builtin_interfaces__msg__Time__fini>
 801753e:	f104 0008 	add.w	r0, r4, #8
 8017542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017546:	f001 b963 	b.w	8018810 <rosidl_runtime_c__String__fini>
 801754a:	4770      	bx	lr

0801754c <builtin_interfaces__msg__Time__init>:
 801754c:	3800      	subs	r0, #0
 801754e:	bf18      	it	ne
 8017550:	2001      	movne	r0, #1
 8017552:	4770      	bx	lr

08017554 <builtin_interfaces__msg__Time__fini>:
 8017554:	4770      	bx	lr
 8017556:	bf00      	nop

08017558 <geometry_msgs__msg__Quaternion__init>:
 8017558:	b160      	cbz	r0, 8017574 <geometry_msgs__msg__Quaternion__init+0x1c>
 801755a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8017578 <geometry_msgs__msg__Quaternion__init+0x20>
 801755e:	2200      	movs	r2, #0
 8017560:	2300      	movs	r3, #0
 8017562:	e9c0 2300 	strd	r2, r3, [r0]
 8017566:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801756a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801756e:	ed80 7b06 	vstr	d7, [r0, #24]
 8017572:	2001      	movs	r0, #1
 8017574:	4770      	bx	lr
 8017576:	bf00      	nop
 8017578:	00000000 	.word	0x00000000
 801757c:	3ff00000 	.word	0x3ff00000

08017580 <geometry_msgs__msg__Quaternion__fini>:
 8017580:	4770      	bx	lr
 8017582:	bf00      	nop

08017584 <ucdr_serialize_string>:
 8017584:	b510      	push	{r4, lr}
 8017586:	b082      	sub	sp, #8
 8017588:	4604      	mov	r4, r0
 801758a:	4608      	mov	r0, r1
 801758c:	9101      	str	r1, [sp, #4]
 801758e:	f7e8 fe51 	bl	8000234 <strlen>
 8017592:	9901      	ldr	r1, [sp, #4]
 8017594:	1c42      	adds	r2, r0, #1
 8017596:	4620      	mov	r0, r4
 8017598:	b002      	add	sp, #8
 801759a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801759e:	f7f8 b9eb 	b.w	800f978 <ucdr_serialize_sequence_char>
 80175a2:	bf00      	nop

080175a4 <ucdr_deserialize_string>:
 80175a4:	b500      	push	{lr}
 80175a6:	b083      	sub	sp, #12
 80175a8:	ab01      	add	r3, sp, #4
 80175aa:	f7f8 f9f7 	bl	800f99c <ucdr_deserialize_sequence_char>
 80175ae:	b003      	add	sp, #12
 80175b0:	f85d fb04 	ldr.w	pc, [sp], #4

080175b4 <uxr_init_input_best_effort_stream>:
 80175b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80175b8:	8003      	strh	r3, [r0, #0]
 80175ba:	4770      	bx	lr

080175bc <uxr_reset_input_best_effort_stream>:
 80175bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80175c0:	8003      	strh	r3, [r0, #0]
 80175c2:	4770      	bx	lr

080175c4 <uxr_receive_best_effort_message>:
 80175c4:	b538      	push	{r3, r4, r5, lr}
 80175c6:	4604      	mov	r4, r0
 80175c8:	8800      	ldrh	r0, [r0, #0]
 80175ca:	460d      	mov	r5, r1
 80175cc:	f000 fd42 	bl	8018054 <uxr_seq_num_cmp>
 80175d0:	4603      	mov	r3, r0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80175d8:	bfb8      	it	lt
 80175da:	8025      	strhlt	r5, [r4, #0]
 80175dc:	bd38      	pop	{r3, r4, r5, pc}
 80175de:	bf00      	nop

080175e0 <on_full_input_buffer>:
 80175e0:	b570      	push	{r4, r5, r6, lr}
 80175e2:	4605      	mov	r5, r0
 80175e4:	460c      	mov	r4, r1
 80175e6:	682b      	ldr	r3, [r5, #0]
 80175e8:	6809      	ldr	r1, [r1, #0]
 80175ea:	8920      	ldrh	r0, [r4, #8]
 80175ec:	6862      	ldr	r2, [r4, #4]
 80175ee:	fbb2 f2f0 	udiv	r2, r2, r0
 80175f2:	eba3 0c01 	sub.w	ip, r3, r1
 80175f6:	fbbc fcf2 	udiv	ip, ip, r2
 80175fa:	f10c 0c01 	add.w	ip, ip, #1
 80175fe:	fa1f f38c 	uxth.w	r3, ip
 8017602:	fbb3 f6f0 	udiv	r6, r3, r0
 8017606:	fb00 3316 	mls	r3, r0, r6, r3
 801760a:	b29b      	uxth	r3, r3
 801760c:	fb02 f303 	mul.w	r3, r2, r3
 8017610:	1d18      	adds	r0, r3, #4
 8017612:	4408      	add	r0, r1
 8017614:	7d26      	ldrb	r6, [r4, #20]
 8017616:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801761a:	b116      	cbz	r6, 8017622 <on_full_input_buffer+0x42>
 801761c:	2600      	movs	r6, #0
 801761e:	f840 6c04 	str.w	r6, [r0, #-4]
 8017622:	2a03      	cmp	r2, #3
 8017624:	d801      	bhi.n	801762a <on_full_input_buffer+0x4a>
 8017626:	2001      	movs	r0, #1
 8017628:	bd70      	pop	{r4, r5, r6, pc}
 801762a:	3308      	adds	r3, #8
 801762c:	4419      	add	r1, r3
 801762e:	4628      	mov	r0, r5
 8017630:	692b      	ldr	r3, [r5, #16]
 8017632:	3a04      	subs	r2, #4
 8017634:	f7f4 fd88 	bl	800c148 <ucdr_init_buffer_origin>
 8017638:	4628      	mov	r0, r5
 801763a:	4903      	ldr	r1, [pc, #12]	@ (8017648 <on_full_input_buffer+0x68>)
 801763c:	4622      	mov	r2, r4
 801763e:	f7f4 fd5f 	bl	800c100 <ucdr_set_on_full_buffer_callback>
 8017642:	2000      	movs	r0, #0
 8017644:	bd70      	pop	{r4, r5, r6, pc}
 8017646:	bf00      	nop
 8017648:	080175e1 	.word	0x080175e1

0801764c <uxr_init_input_reliable_stream>:
 801764c:	b500      	push	{lr}
 801764e:	e9c0 1200 	strd	r1, r2, [r0]
 8017652:	f04f 0e00 	mov.w	lr, #0
 8017656:	9a01      	ldr	r2, [sp, #4]
 8017658:	8103      	strh	r3, [r0, #8]
 801765a:	6102      	str	r2, [r0, #16]
 801765c:	f880 e014 	strb.w	lr, [r0, #20]
 8017660:	b1d3      	cbz	r3, 8017698 <uxr_init_input_reliable_stream+0x4c>
 8017662:	f8c1 e000 	str.w	lr, [r1]
 8017666:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801766a:	f1bc 0f01 	cmp.w	ip, #1
 801766e:	d913      	bls.n	8017698 <uxr_init_input_reliable_stream+0x4c>
 8017670:	2301      	movs	r3, #1
 8017672:	fbb3 f1fc 	udiv	r1, r3, ip
 8017676:	fb0c 3111 	mls	r1, ip, r1, r3
 801767a:	b289      	uxth	r1, r1
 801767c:	6842      	ldr	r2, [r0, #4]
 801767e:	fbb2 f2fc 	udiv	r2, r2, ip
 8017682:	fb01 f202 	mul.w	r2, r1, r2
 8017686:	6801      	ldr	r1, [r0, #0]
 8017688:	f841 e002 	str.w	lr, [r1, r2]
 801768c:	3301      	adds	r3, #1
 801768e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017692:	b29b      	uxth	r3, r3
 8017694:	459c      	cmp	ip, r3
 8017696:	d8ec      	bhi.n	8017672 <uxr_init_input_reliable_stream+0x26>
 8017698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801769c:	60c3      	str	r3, [r0, #12]
 801769e:	f85d fb04 	ldr.w	pc, [sp], #4
 80176a2:	bf00      	nop

080176a4 <uxr_reset_input_reliable_stream>:
 80176a4:	8901      	ldrh	r1, [r0, #8]
 80176a6:	b1e9      	cbz	r1, 80176e4 <uxr_reset_input_reliable_stream+0x40>
 80176a8:	f04f 0c00 	mov.w	ip, #0
 80176ac:	b500      	push	{lr}
 80176ae:	4663      	mov	r3, ip
 80176b0:	46e6      	mov	lr, ip
 80176b2:	fbb3 f2f1 	udiv	r2, r3, r1
 80176b6:	fb01 3312 	mls	r3, r1, r2, r3
 80176ba:	b29b      	uxth	r3, r3
 80176bc:	6842      	ldr	r2, [r0, #4]
 80176be:	fbb2 f2f1 	udiv	r2, r2, r1
 80176c2:	fb02 f303 	mul.w	r3, r2, r3
 80176c6:	6802      	ldr	r2, [r0, #0]
 80176c8:	f842 e003 	str.w	lr, [r2, r3]
 80176cc:	f10c 0c01 	add.w	ip, ip, #1
 80176d0:	8901      	ldrh	r1, [r0, #8]
 80176d2:	fa1f f38c 	uxth.w	r3, ip
 80176d6:	4299      	cmp	r1, r3
 80176d8:	d8eb      	bhi.n	80176b2 <uxr_reset_input_reliable_stream+0xe>
 80176da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80176de:	60c3      	str	r3, [r0, #12]
 80176e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80176e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80176e8:	60c3      	str	r3, [r0, #12]
 80176ea:	4770      	bx	lr

080176ec <uxr_receive_reliable_message>:
 80176ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176f0:	4604      	mov	r4, r0
 80176f2:	460d      	mov	r5, r1
 80176f4:	8901      	ldrh	r1, [r0, #8]
 80176f6:	8980      	ldrh	r0, [r0, #12]
 80176f8:	4690      	mov	r8, r2
 80176fa:	461f      	mov	r7, r3
 80176fc:	f000 fca2 	bl	8018044 <uxr_seq_num_add>
 8017700:	4629      	mov	r1, r5
 8017702:	4606      	mov	r6, r0
 8017704:	89a0      	ldrh	r0, [r4, #12]
 8017706:	f000 fca5 	bl	8018054 <uxr_seq_num_cmp>
 801770a:	2800      	cmp	r0, #0
 801770c:	db0a      	blt.n	8017724 <uxr_receive_reliable_message+0x38>
 801770e:	2600      	movs	r6, #0
 8017710:	89e0      	ldrh	r0, [r4, #14]
 8017712:	4629      	mov	r1, r5
 8017714:	f000 fc9e 	bl	8018054 <uxr_seq_num_cmp>
 8017718:	2800      	cmp	r0, #0
 801771a:	da00      	bge.n	801771e <uxr_receive_reliable_message+0x32>
 801771c:	81e5      	strh	r5, [r4, #14]
 801771e:	4630      	mov	r0, r6
 8017720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017724:	4630      	mov	r0, r6
 8017726:	4629      	mov	r1, r5
 8017728:	f000 fc94 	bl	8018054 <uxr_seq_num_cmp>
 801772c:	2800      	cmp	r0, #0
 801772e:	dbee      	blt.n	801770e <uxr_receive_reliable_message+0x22>
 8017730:	6923      	ldr	r3, [r4, #16]
 8017732:	4640      	mov	r0, r8
 8017734:	4798      	blx	r3
 8017736:	2101      	movs	r1, #1
 8017738:	4681      	mov	r9, r0
 801773a:	89a0      	ldrh	r0, [r4, #12]
 801773c:	f000 fc82 	bl	8018044 <uxr_seq_num_add>
 8017740:	f1b9 0f00 	cmp.w	r9, #0
 8017744:	d101      	bne.n	801774a <uxr_receive_reliable_message+0x5e>
 8017746:	4285      	cmp	r5, r0
 8017748:	d047      	beq.n	80177da <uxr_receive_reliable_message+0xee>
 801774a:	8922      	ldrh	r2, [r4, #8]
 801774c:	fbb5 f0f2 	udiv	r0, r5, r2
 8017750:	fb02 5010 	mls	r0, r2, r0, r5
 8017754:	b280      	uxth	r0, r0
 8017756:	6863      	ldr	r3, [r4, #4]
 8017758:	fbb3 f3f2 	udiv	r3, r3, r2
 801775c:	fb00 f303 	mul.w	r3, r0, r3
 8017760:	6820      	ldr	r0, [r4, #0]
 8017762:	3304      	adds	r3, #4
 8017764:	4418      	add	r0, r3
 8017766:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d1cf      	bne.n	801770e <uxr_receive_reliable_message+0x22>
 801776e:	4641      	mov	r1, r8
 8017770:	463a      	mov	r2, r7
 8017772:	f001 fe48 	bl	8019406 <memcpy>
 8017776:	8921      	ldrh	r1, [r4, #8]
 8017778:	fbb5 f2f1 	udiv	r2, r5, r1
 801777c:	fb01 5212 	mls	r2, r1, r2, r5
 8017780:	b292      	uxth	r2, r2
 8017782:	6863      	ldr	r3, [r4, #4]
 8017784:	fbb3 f3f1 	udiv	r3, r3, r1
 8017788:	fb02 f303 	mul.w	r3, r2, r3
 801778c:	6822      	ldr	r2, [r4, #0]
 801778e:	50d7      	str	r7, [r2, r3]
 8017790:	9a08      	ldr	r2, [sp, #32]
 8017792:	2301      	movs	r3, #1
 8017794:	7013      	strb	r3, [r2, #0]
 8017796:	f1b9 0f00 	cmp.w	r9, #0
 801779a:	d0b8      	beq.n	801770e <uxr_receive_reliable_message+0x22>
 801779c:	89a6      	ldrh	r6, [r4, #12]
 801779e:	4630      	mov	r0, r6
 80177a0:	2101      	movs	r1, #1
 80177a2:	f000 fc4f 	bl	8018044 <uxr_seq_num_add>
 80177a6:	8922      	ldrh	r2, [r4, #8]
 80177a8:	6863      	ldr	r3, [r4, #4]
 80177aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80177ae:	4606      	mov	r6, r0
 80177b0:	fbb0 f0f2 	udiv	r0, r0, r2
 80177b4:	fb02 6010 	mls	r0, r2, r0, r6
 80177b8:	b280      	uxth	r0, r0
 80177ba:	fb00 f303 	mul.w	r3, r0, r3
 80177be:	6820      	ldr	r0, [r4, #0]
 80177c0:	3304      	adds	r3, #4
 80177c2:	4418      	add	r0, r3
 80177c4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d0a0      	beq.n	801770e <uxr_receive_reliable_message+0x22>
 80177cc:	6923      	ldr	r3, [r4, #16]
 80177ce:	4798      	blx	r3
 80177d0:	2802      	cmp	r0, #2
 80177d2:	d008      	beq.n	80177e6 <uxr_receive_reliable_message+0xfa>
 80177d4:	2801      	cmp	r0, #1
 80177d6:	d0e2      	beq.n	801779e <uxr_receive_reliable_message+0xb2>
 80177d8:	e799      	b.n	801770e <uxr_receive_reliable_message+0x22>
 80177da:	9b08      	ldr	r3, [sp, #32]
 80177dc:	81a5      	strh	r5, [r4, #12]
 80177de:	2601      	movs	r6, #1
 80177e0:	f883 9000 	strb.w	r9, [r3]
 80177e4:	e794      	b.n	8017710 <uxr_receive_reliable_message+0x24>
 80177e6:	2601      	movs	r6, #1
 80177e8:	e792      	b.n	8017710 <uxr_receive_reliable_message+0x24>
 80177ea:	bf00      	nop

080177ec <uxr_next_input_reliable_buffer_available>:
 80177ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177f0:	4604      	mov	r4, r0
 80177f2:	460f      	mov	r7, r1
 80177f4:	8980      	ldrh	r0, [r0, #12]
 80177f6:	2101      	movs	r1, #1
 80177f8:	4690      	mov	r8, r2
 80177fa:	f000 fc23 	bl	8018044 <uxr_seq_num_add>
 80177fe:	8922      	ldrh	r2, [r4, #8]
 8017800:	fbb0 f6f2 	udiv	r6, r0, r2
 8017804:	fb02 0616 	mls	r6, r2, r6, r0
 8017808:	b2b6      	uxth	r6, r6
 801780a:	6863      	ldr	r3, [r4, #4]
 801780c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017810:	fb06 f303 	mul.w	r3, r6, r3
 8017814:	6826      	ldr	r6, [r4, #0]
 8017816:	3304      	adds	r3, #4
 8017818:	441e      	add	r6, r3
 801781a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801781e:	f1b9 0f00 	cmp.w	r9, #0
 8017822:	d023      	beq.n	801786c <uxr_next_input_reliable_buffer_available+0x80>
 8017824:	6923      	ldr	r3, [r4, #16]
 8017826:	4605      	mov	r5, r0
 8017828:	4630      	mov	r0, r6
 801782a:	4798      	blx	r3
 801782c:	4682      	mov	sl, r0
 801782e:	b300      	cbz	r0, 8017872 <uxr_next_input_reliable_buffer_available+0x86>
 8017830:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017834:	2101      	movs	r1, #1
 8017836:	4650      	mov	r0, sl
 8017838:	f000 fc04 	bl	8018044 <uxr_seq_num_add>
 801783c:	8921      	ldrh	r1, [r4, #8]
 801783e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017842:	4682      	mov	sl, r0
 8017844:	fb01 0212 	mls	r2, r1, r2, r0
 8017848:	e9d4 0300 	ldrd	r0, r3, [r4]
 801784c:	b292      	uxth	r2, r2
 801784e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017852:	fb02 f303 	mul.w	r3, r2, r3
 8017856:	3304      	adds	r3, #4
 8017858:	4418      	add	r0, r3
 801785a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801785e:	b12b      	cbz	r3, 801786c <uxr_next_input_reliable_buffer_available+0x80>
 8017860:	6923      	ldr	r3, [r4, #16]
 8017862:	4798      	blx	r3
 8017864:	2802      	cmp	r0, #2
 8017866:	d01b      	beq.n	80178a0 <uxr_next_input_reliable_buffer_available+0xb4>
 8017868:	2801      	cmp	r0, #1
 801786a:	d0e3      	beq.n	8017834 <uxr_next_input_reliable_buffer_available+0x48>
 801786c:	2000      	movs	r0, #0
 801786e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017872:	464a      	mov	r2, r9
 8017874:	4631      	mov	r1, r6
 8017876:	4638      	mov	r0, r7
 8017878:	f7f4 fc6e 	bl	800c158 <ucdr_init_buffer>
 801787c:	8921      	ldrh	r1, [r4, #8]
 801787e:	fbb5 f2f1 	udiv	r2, r5, r1
 8017882:	fb01 5212 	mls	r2, r1, r2, r5
 8017886:	b292      	uxth	r2, r2
 8017888:	6863      	ldr	r3, [r4, #4]
 801788a:	fbb3 f3f1 	udiv	r3, r3, r1
 801788e:	fb02 f303 	mul.w	r3, r2, r3
 8017892:	6822      	ldr	r2, [r4, #0]
 8017894:	f842 a003 	str.w	sl, [r2, r3]
 8017898:	2001      	movs	r0, #1
 801789a:	81a5      	strh	r5, [r4, #12]
 801789c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178a0:	8920      	ldrh	r0, [r4, #8]
 80178a2:	fbb5 f3f0 	udiv	r3, r5, r0
 80178a6:	fb00 5513 	mls	r5, r0, r3, r5
 80178aa:	b2ad      	uxth	r5, r5
 80178ac:	6863      	ldr	r3, [r4, #4]
 80178ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80178b2:	fb03 f505 	mul.w	r5, r3, r5
 80178b6:	6823      	ldr	r3, [r4, #0]
 80178b8:	2000      	movs	r0, #0
 80178ba:	5158      	str	r0, [r3, r5]
 80178bc:	eb06 0108 	add.w	r1, r6, r8
 80178c0:	eba9 0208 	sub.w	r2, r9, r8
 80178c4:	4638      	mov	r0, r7
 80178c6:	f7f4 fc47 	bl	800c158 <ucdr_init_buffer>
 80178ca:	4638      	mov	r0, r7
 80178cc:	4903      	ldr	r1, [pc, #12]	@ (80178dc <uxr_next_input_reliable_buffer_available+0xf0>)
 80178ce:	4622      	mov	r2, r4
 80178d0:	f7f4 fc16 	bl	800c100 <ucdr_set_on_full_buffer_callback>
 80178d4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80178d8:	2001      	movs	r0, #1
 80178da:	e7c8      	b.n	801786e <uxr_next_input_reliable_buffer_available+0x82>
 80178dc:	080175e1 	.word	0x080175e1

080178e0 <uxr_process_heartbeat>:
 80178e0:	b538      	push	{r3, r4, r5, lr}
 80178e2:	4611      	mov	r1, r2
 80178e4:	4604      	mov	r4, r0
 80178e6:	89c0      	ldrh	r0, [r0, #14]
 80178e8:	4615      	mov	r5, r2
 80178ea:	f000 fbb3 	bl	8018054 <uxr_seq_num_cmp>
 80178ee:	2800      	cmp	r0, #0
 80178f0:	bfb8      	it	lt
 80178f2:	81e5      	strhlt	r5, [r4, #14]
 80178f4:	bd38      	pop	{r3, r4, r5, pc}
 80178f6:	bf00      	nop

080178f8 <uxr_compute_acknack>:
 80178f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178fc:	8903      	ldrh	r3, [r0, #8]
 80178fe:	8985      	ldrh	r5, [r0, #12]
 8017900:	4604      	mov	r4, r0
 8017902:	460e      	mov	r6, r1
 8017904:	b1d3      	cbz	r3, 801793c <uxr_compute_acknack+0x44>
 8017906:	4628      	mov	r0, r5
 8017908:	2701      	movs	r7, #1
 801790a:	e003      	b.n	8017914 <uxr_compute_acknack+0x1c>
 801790c:	4567      	cmp	r7, ip
 801790e:	d215      	bcs.n	801793c <uxr_compute_acknack+0x44>
 8017910:	89a0      	ldrh	r0, [r4, #12]
 8017912:	3701      	adds	r7, #1
 8017914:	b2b9      	uxth	r1, r7
 8017916:	f000 fb95 	bl	8018044 <uxr_seq_num_add>
 801791a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801791e:	fbb0 f3fc 	udiv	r3, r0, ip
 8017922:	fb0c 0313 	mls	r3, ip, r3, r0
 8017926:	b29a      	uxth	r2, r3
 8017928:	e9d4 1300 	ldrd	r1, r3, [r4]
 801792c:	fbb3 f3fc 	udiv	r3, r3, ip
 8017930:	fb02 f303 	mul.w	r3, r2, r3
 8017934:	58cb      	ldr	r3, [r1, r3]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d1e8      	bne.n	801790c <uxr_compute_acknack+0x14>
 801793a:	4605      	mov	r5, r0
 801793c:	8035      	strh	r5, [r6, #0]
 801793e:	2101      	movs	r1, #1
 8017940:	4628      	mov	r0, r5
 8017942:	89e7      	ldrh	r7, [r4, #14]
 8017944:	f000 fb82 	bl	801804c <uxr_seq_num_sub>
 8017948:	4601      	mov	r1, r0
 801794a:	4638      	mov	r0, r7
 801794c:	f000 fb7e 	bl	801804c <uxr_seq_num_sub>
 8017950:	4605      	mov	r5, r0
 8017952:	b318      	cbz	r0, 801799c <uxr_compute_acknack+0xa4>
 8017954:	f04f 0900 	mov.w	r9, #0
 8017958:	464f      	mov	r7, r9
 801795a:	f04f 0801 	mov.w	r8, #1
 801795e:	fa1f f189 	uxth.w	r1, r9
 8017962:	8830      	ldrh	r0, [r6, #0]
 8017964:	f000 fb6e 	bl	8018044 <uxr_seq_num_add>
 8017968:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801796c:	fbb0 f3fc 	udiv	r3, r0, ip
 8017970:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017974:	fb03 001c 	mls	r0, r3, ip, r0
 8017978:	b283      	uxth	r3, r0
 801797a:	fbb2 f2fc 	udiv	r2, r2, ip
 801797e:	fb02 f303 	mul.w	r3, r2, r3
 8017982:	fa08 f209 	lsl.w	r2, r8, r9
 8017986:	58cb      	ldr	r3, [r1, r3]
 8017988:	f109 0901 	add.w	r9, r9, #1
 801798c:	b90b      	cbnz	r3, 8017992 <uxr_compute_acknack+0x9a>
 801798e:	4317      	orrs	r7, r2
 8017990:	b2bf      	uxth	r7, r7
 8017992:	454d      	cmp	r5, r9
 8017994:	d1e3      	bne.n	801795e <uxr_compute_acknack+0x66>
 8017996:	4638      	mov	r0, r7
 8017998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801799c:	4607      	mov	r7, r0
 801799e:	4638      	mov	r0, r7
 80179a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080179a4 <uxr_init_output_best_effort_stream>:
 80179a4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80179a8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80179ac:	6001      	str	r1, [r0, #0]
 80179ae:	7303      	strb	r3, [r0, #12]
 80179b0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80179b4:	4770      	bx	lr
 80179b6:	bf00      	nop

080179b8 <uxr_reset_output_best_effort_stream>:
 80179b8:	7b02      	ldrb	r2, [r0, #12]
 80179ba:	6042      	str	r2, [r0, #4]
 80179bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80179c0:	81c3      	strh	r3, [r0, #14]
 80179c2:	4770      	bx	lr

080179c4 <uxr_prepare_best_effort_buffer_to_write>:
 80179c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179c6:	4604      	mov	r4, r0
 80179c8:	b083      	sub	sp, #12
 80179ca:	6840      	ldr	r0, [r0, #4]
 80179cc:	460d      	mov	r5, r1
 80179ce:	4616      	mov	r6, r2
 80179d0:	f7fa fae4 	bl	8011f9c <uxr_submessage_padding>
 80179d4:	6863      	ldr	r3, [r4, #4]
 80179d6:	4418      	add	r0, r3
 80179d8:	68a3      	ldr	r3, [r4, #8]
 80179da:	1942      	adds	r2, r0, r5
 80179dc:	4293      	cmp	r3, r2
 80179de:	bf2c      	ite	cs
 80179e0:	2701      	movcs	r7, #1
 80179e2:	2700      	movcc	r7, #0
 80179e4:	d202      	bcs.n	80179ec <uxr_prepare_best_effort_buffer_to_write+0x28>
 80179e6:	4638      	mov	r0, r7
 80179e8:	b003      	add	sp, #12
 80179ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179ec:	9000      	str	r0, [sp, #0]
 80179ee:	6821      	ldr	r1, [r4, #0]
 80179f0:	4630      	mov	r0, r6
 80179f2:	2300      	movs	r3, #0
 80179f4:	f7f4 fb9e 	bl	800c134 <ucdr_init_buffer_origin_offset>
 80179f8:	6861      	ldr	r1, [r4, #4]
 80179fa:	4638      	mov	r0, r7
 80179fc:	4429      	add	r1, r5
 80179fe:	6061      	str	r1, [r4, #4]
 8017a00:	b003      	add	sp, #12
 8017a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017a04 <uxr_prepare_best_effort_buffer_to_send>:
 8017a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a08:	4604      	mov	r4, r0
 8017a0a:	461d      	mov	r5, r3
 8017a0c:	6840      	ldr	r0, [r0, #4]
 8017a0e:	7b23      	ldrb	r3, [r4, #12]
 8017a10:	4298      	cmp	r0, r3
 8017a12:	bf8c      	ite	hi
 8017a14:	2601      	movhi	r6, #1
 8017a16:	2600      	movls	r6, #0
 8017a18:	d802      	bhi.n	8017a20 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8017a1a:	4630      	mov	r0, r6
 8017a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a20:	4688      	mov	r8, r1
 8017a22:	89e0      	ldrh	r0, [r4, #14]
 8017a24:	2101      	movs	r1, #1
 8017a26:	4617      	mov	r7, r2
 8017a28:	f000 fb0c 	bl	8018044 <uxr_seq_num_add>
 8017a2c:	6823      	ldr	r3, [r4, #0]
 8017a2e:	81e0      	strh	r0, [r4, #14]
 8017a30:	8028      	strh	r0, [r5, #0]
 8017a32:	f8c8 3000 	str.w	r3, [r8]
 8017a36:	6863      	ldr	r3, [r4, #4]
 8017a38:	603b      	str	r3, [r7, #0]
 8017a3a:	7b23      	ldrb	r3, [r4, #12]
 8017a3c:	6063      	str	r3, [r4, #4]
 8017a3e:	4630      	mov	r0, r6
 8017a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017a44 <on_full_output_buffer>:
 8017a44:	b538      	push	{r3, r4, r5, lr}
 8017a46:	6802      	ldr	r2, [r0, #0]
 8017a48:	460c      	mov	r4, r1
 8017a4a:	6809      	ldr	r1, [r1, #0]
 8017a4c:	8923      	ldrh	r3, [r4, #8]
 8017a4e:	eba2 0c01 	sub.w	ip, r2, r1
 8017a52:	6862      	ldr	r2, [r4, #4]
 8017a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8017a58:	fbbc fcf2 	udiv	ip, ip, r2
 8017a5c:	f10c 0c01 	add.w	ip, ip, #1
 8017a60:	fa1f fc8c 	uxth.w	ip, ip
 8017a64:	fbbc fef3 	udiv	lr, ip, r3
 8017a68:	fb03 c31e 	mls	r3, r3, lr, ip
 8017a6c:	b29b      	uxth	r3, r3
 8017a6e:	fb02 f303 	mul.w	r3, r2, r3
 8017a72:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017a76:	58ca      	ldr	r2, [r1, r3]
 8017a78:	4463      	add	r3, ip
 8017a7a:	eba2 020c 	sub.w	r2, r2, ip
 8017a7e:	3308      	adds	r3, #8
 8017a80:	4605      	mov	r5, r0
 8017a82:	4419      	add	r1, r3
 8017a84:	3a04      	subs	r2, #4
 8017a86:	6903      	ldr	r3, [r0, #16]
 8017a88:	f7f4 fb5e 	bl	800c148 <ucdr_init_buffer_origin>
 8017a8c:	4628      	mov	r0, r5
 8017a8e:	4903      	ldr	r1, [pc, #12]	@ (8017a9c <on_full_output_buffer+0x58>)
 8017a90:	4622      	mov	r2, r4
 8017a92:	f7f4 fb35 	bl	800c100 <ucdr_set_on_full_buffer_callback>
 8017a96:	2000      	movs	r0, #0
 8017a98:	bd38      	pop	{r3, r4, r5, pc}
 8017a9a:	bf00      	nop
 8017a9c:	08017a45 	.word	0x08017a45

08017aa0 <uxr_init_output_reliable_stream>:
 8017aa0:	b410      	push	{r4}
 8017aa2:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017aa6:	8103      	strh	r3, [r0, #8]
 8017aa8:	e9c0 1200 	strd	r1, r2, [r0]
 8017aac:	f880 c00c 	strb.w	ip, [r0, #12]
 8017ab0:	b1d3      	cbz	r3, 8017ae8 <uxr_init_output_reliable_stream+0x48>
 8017ab2:	f8c1 c000 	str.w	ip, [r1]
 8017ab6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017aba:	f1bc 0f01 	cmp.w	ip, #1
 8017abe:	d913      	bls.n	8017ae8 <uxr_init_output_reliable_stream+0x48>
 8017ac0:	2301      	movs	r3, #1
 8017ac2:	fbb3 f1fc 	udiv	r1, r3, ip
 8017ac6:	fb0c 3111 	mls	r1, ip, r1, r3
 8017aca:	b289      	uxth	r1, r1
 8017acc:	6842      	ldr	r2, [r0, #4]
 8017ace:	6804      	ldr	r4, [r0, #0]
 8017ad0:	fbb2 f2fc 	udiv	r2, r2, ip
 8017ad4:	fb01 f202 	mul.w	r2, r1, r2
 8017ad8:	7b01      	ldrb	r1, [r0, #12]
 8017ada:	50a1      	str	r1, [r4, r2]
 8017adc:	3301      	adds	r3, #1
 8017ade:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017ae2:	b29b      	uxth	r3, r3
 8017ae4:	459c      	cmp	ip, r3
 8017ae6:	d8ec      	bhi.n	8017ac2 <uxr_init_output_reliable_stream+0x22>
 8017ae8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017aec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017af0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017af4:	4905      	ldr	r1, [pc, #20]	@ (8017b0c <uxr_init_output_reliable_stream+0x6c>)
 8017af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017afa:	f8c0 100e 	str.w	r1, [r0, #14]
 8017afe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017b02:	2300      	movs	r3, #0
 8017b04:	8242      	strh	r2, [r0, #18]
 8017b06:	8403      	strh	r3, [r0, #32]
 8017b08:	4770      	bx	lr
 8017b0a:	bf00      	nop
 8017b0c:	ffff0000 	.word	0xffff0000

08017b10 <uxr_reset_output_reliable_stream>:
 8017b10:	8901      	ldrh	r1, [r0, #8]
 8017b12:	b1b1      	cbz	r1, 8017b42 <uxr_reset_output_reliable_stream+0x32>
 8017b14:	f04f 0c00 	mov.w	ip, #0
 8017b18:	4663      	mov	r3, ip
 8017b1a:	fbb3 f2f1 	udiv	r2, r3, r1
 8017b1e:	fb01 3312 	mls	r3, r1, r2, r3
 8017b22:	b29b      	uxth	r3, r3
 8017b24:	6842      	ldr	r2, [r0, #4]
 8017b26:	fbb2 f2f1 	udiv	r2, r2, r1
 8017b2a:	6801      	ldr	r1, [r0, #0]
 8017b2c:	fb02 f303 	mul.w	r3, r2, r3
 8017b30:	7b02      	ldrb	r2, [r0, #12]
 8017b32:	50ca      	str	r2, [r1, r3]
 8017b34:	f10c 0c01 	add.w	ip, ip, #1
 8017b38:	8901      	ldrh	r1, [r0, #8]
 8017b3a:	fa1f f38c 	uxth.w	r3, ip
 8017b3e:	4299      	cmp	r1, r3
 8017b40:	d8eb      	bhi.n	8017b1a <uxr_reset_output_reliable_stream+0xa>
 8017b42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017b46:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017b4a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017b4e:	4904      	ldr	r1, [pc, #16]	@ (8017b60 <uxr_reset_output_reliable_stream+0x50>)
 8017b50:	f8c0 100e 	str.w	r1, [r0, #14]
 8017b54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017b58:	2300      	movs	r3, #0
 8017b5a:	8242      	strh	r2, [r0, #18]
 8017b5c:	8403      	strh	r3, [r0, #32]
 8017b5e:	4770      	bx	lr
 8017b60:	ffff0000 	.word	0xffff0000

08017b64 <uxr_prepare_reliable_buffer_to_write>:
 8017b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b68:	4604      	mov	r4, r0
 8017b6a:	b091      	sub	sp, #68	@ 0x44
 8017b6c:	8900      	ldrh	r0, [r0, #8]
 8017b6e:	89e6      	ldrh	r6, [r4, #14]
 8017b70:	6823      	ldr	r3, [r4, #0]
 8017b72:	9204      	str	r2, [sp, #16]
 8017b74:	fbb6 f2f0 	udiv	r2, r6, r0
 8017b78:	fb00 6212 	mls	r2, r0, r2, r6
 8017b7c:	b292      	uxth	r2, r2
 8017b7e:	6865      	ldr	r5, [r4, #4]
 8017b80:	fbb5 f5f0 	udiv	r5, r5, r0
 8017b84:	fb05 3202 	mla	r2, r5, r2, r3
 8017b88:	3204      	adds	r2, #4
 8017b8a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8017b8e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017b92:	9203      	str	r2, [sp, #12]
 8017b94:	468b      	mov	fp, r1
 8017b96:	1f2f      	subs	r7, r5, #4
 8017b98:	2800      	cmp	r0, #0
 8017b9a:	f000 814c 	beq.w	8017e36 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8017b9e:	f04f 0c00 	mov.w	ip, #0
 8017ba2:	46e2      	mov	sl, ip
 8017ba4:	4661      	mov	r1, ip
 8017ba6:	fbb1 f2f0 	udiv	r2, r1, r0
 8017baa:	fb00 1212 	mls	r2, r0, r2, r1
 8017bae:	b292      	uxth	r2, r2
 8017bb0:	fb05 f202 	mul.w	r2, r5, r2
 8017bb4:	f10c 0c01 	add.w	ip, ip, #1
 8017bb8:	589a      	ldr	r2, [r3, r2]
 8017bba:	454a      	cmp	r2, r9
 8017bbc:	bf08      	it	eq
 8017bbe:	f10a 0a01 	addeq.w	sl, sl, #1
 8017bc2:	fa1f f18c 	uxth.w	r1, ip
 8017bc6:	bf08      	it	eq
 8017bc8:	fa1f fa8a 	uxtheq.w	sl, sl
 8017bcc:	4281      	cmp	r1, r0
 8017bce:	d3ea      	bcc.n	8017ba6 <uxr_prepare_reliable_buffer_to_write+0x42>
 8017bd0:	4640      	mov	r0, r8
 8017bd2:	2104      	movs	r1, #4
 8017bd4:	f8cd a014 	str.w	sl, [sp, #20]
 8017bd8:	f7f4 fac2 	bl	800c160 <ucdr_alignment>
 8017bdc:	4480      	add	r8, r0
 8017bde:	eb08 020b 	add.w	r2, r8, fp
 8017be2:	42ba      	cmp	r2, r7
 8017be4:	f240 80cd 	bls.w	8017d82 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8017be8:	7b22      	ldrb	r2, [r4, #12]
 8017bea:	445a      	add	r2, fp
 8017bec:	42ba      	cmp	r2, r7
 8017bee:	f240 80b5 	bls.w	8017d5c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8017bf2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8017bf6:	33fc      	adds	r3, #252	@ 0xfc
 8017bf8:	b2ba      	uxth	r2, r7
 8017bfa:	4413      	add	r3, r2
 8017bfc:	b29b      	uxth	r3, r3
 8017bfe:	fb0a f903 	mul.w	r9, sl, r3
 8017c02:	45d9      	cmp	r9, fp
 8017c04:	9305      	str	r3, [sp, #20]
 8017c06:	9306      	str	r3, [sp, #24]
 8017c08:	f0c0 80b7 	bcc.w	8017d7a <uxr_prepare_reliable_buffer_to_write+0x216>
 8017c0c:	f108 0304 	add.w	r3, r8, #4
 8017c10:	42bb      	cmp	r3, r7
 8017c12:	f080 80db 	bcs.w	8017dcc <uxr_prepare_reliable_buffer_to_write+0x268>
 8017c16:	f1a2 0904 	sub.w	r9, r2, #4
 8017c1a:	eba9 0908 	sub.w	r9, r9, r8
 8017c1e:	9b05      	ldr	r3, [sp, #20]
 8017c20:	fa1f f989 	uxth.w	r9, r9
 8017c24:	ebab 0b09 	sub.w	fp, fp, r9
 8017c28:	fbbb f2f3 	udiv	r2, fp, r3
 8017c2c:	fb03 b312 	mls	r3, r3, r2, fp
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	f000 80c8 	beq.w	8017dc6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8017c36:	3201      	adds	r2, #1
 8017c38:	b292      	uxth	r2, r2
 8017c3a:	9306      	str	r3, [sp, #24]
 8017c3c:	4552      	cmp	r2, sl
 8017c3e:	f200 809c 	bhi.w	8017d7a <uxr_prepare_reliable_buffer_to_write+0x216>
 8017c42:	f10d 0b20 	add.w	fp, sp, #32
 8017c46:	2a00      	cmp	r2, #0
 8017c48:	d042      	beq.n	8017cd0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8017c4a:	f8cd 801c 	str.w	r8, [sp, #28]
 8017c4e:	f04f 0a00 	mov.w	sl, #0
 8017c52:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017c56:	9505      	str	r5, [sp, #20]
 8017c58:	f10d 0b20 	add.w	fp, sp, #32
 8017c5c:	4615      	mov	r5, r2
 8017c5e:	e000      	b.n	8017c62 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017c60:	46c1      	mov	r9, r8
 8017c62:	8920      	ldrh	r0, [r4, #8]
 8017c64:	fbb6 f2f0 	udiv	r2, r6, r0
 8017c68:	fb00 6112 	mls	r1, r0, r2, r6
 8017c6c:	b28a      	uxth	r2, r1
 8017c6e:	6863      	ldr	r3, [r4, #4]
 8017c70:	fbb3 f1f0 	udiv	r1, r3, r0
 8017c74:	6823      	ldr	r3, [r4, #0]
 8017c76:	fb02 f101 	mul.w	r1, r2, r1
 8017c7a:	3104      	adds	r1, #4
 8017c7c:	4419      	add	r1, r3
 8017c7e:	4658      	mov	r0, fp
 8017c80:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8017c84:	9200      	str	r2, [sp, #0]
 8017c86:	2300      	movs	r3, #0
 8017c88:	463a      	mov	r2, r7
 8017c8a:	f7f4 fa53 	bl	800c134 <ucdr_init_buffer_origin_offset>
 8017c8e:	464a      	mov	r2, r9
 8017c90:	2300      	movs	r3, #0
 8017c92:	210d      	movs	r1, #13
 8017c94:	4658      	mov	r0, fp
 8017c96:	f7fa f941 	bl	8011f1c <uxr_buffer_submessage_header>
 8017c9a:	8921      	ldrh	r1, [r4, #8]
 8017c9c:	fbb6 f2f1 	udiv	r2, r6, r1
 8017ca0:	fb01 6212 	mls	r2, r1, r2, r6
 8017ca4:	b292      	uxth	r2, r2
 8017ca6:	6863      	ldr	r3, [r4, #4]
 8017ca8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017cac:	fb02 f303 	mul.w	r3, r2, r3
 8017cb0:	6822      	ldr	r2, [r4, #0]
 8017cb2:	4630      	mov	r0, r6
 8017cb4:	50d7      	str	r7, [r2, r3]
 8017cb6:	2101      	movs	r1, #1
 8017cb8:	f000 f9c4 	bl	8018044 <uxr_seq_num_add>
 8017cbc:	f10a 0a01 	add.w	sl, sl, #1
 8017cc0:	fa1f f38a 	uxth.w	r3, sl
 8017cc4:	429d      	cmp	r5, r3
 8017cc6:	4606      	mov	r6, r0
 8017cc8:	d8ca      	bhi.n	8017c60 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8017cca:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017cce:	9d05      	ldr	r5, [sp, #20]
 8017cd0:	8920      	ldrh	r0, [r4, #8]
 8017cd2:	fbb6 f3f0 	udiv	r3, r6, r0
 8017cd6:	fb00 6313 	mls	r3, r0, r3, r6
 8017cda:	b299      	uxth	r1, r3
 8017cdc:	6863      	ldr	r3, [r4, #4]
 8017cde:	fbb3 f3f0 	udiv	r3, r3, r0
 8017ce2:	fb01 f303 	mul.w	r3, r1, r3
 8017ce6:	6821      	ldr	r1, [r4, #0]
 8017ce8:	3304      	adds	r3, #4
 8017cea:	4419      	add	r1, r3
 8017cec:	463a      	mov	r2, r7
 8017cee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8017cf2:	9000      	str	r0, [sp, #0]
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	4658      	mov	r0, fp
 8017cf8:	f7f4 fa1c 	bl	800c134 <ucdr_init_buffer_origin_offset>
 8017cfc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017d00:	4658      	mov	r0, fp
 8017d02:	fa1f f289 	uxth.w	r2, r9
 8017d06:	2302      	movs	r3, #2
 8017d08:	210d      	movs	r1, #13
 8017d0a:	f7fa f907 	bl	8011f1c <uxr_buffer_submessage_header>
 8017d0e:	9b03      	ldr	r3, [sp, #12]
 8017d10:	8927      	ldrh	r7, [r4, #8]
 8017d12:	7b20      	ldrb	r0, [r4, #12]
 8017d14:	f108 0104 	add.w	r1, r8, #4
 8017d18:	440b      	add	r3, r1
 8017d1a:	4619      	mov	r1, r3
 8017d1c:	fbb6 f3f7 	udiv	r3, r6, r7
 8017d20:	fb07 6313 	mls	r3, r7, r3, r6
 8017d24:	f1a5 0208 	sub.w	r2, r5, #8
 8017d28:	b29d      	uxth	r5, r3
 8017d2a:	3004      	adds	r0, #4
 8017d2c:	6863      	ldr	r3, [r4, #4]
 8017d2e:	fbb3 f3f7 	udiv	r3, r3, r7
 8017d32:	fb05 f303 	mul.w	r3, r5, r3
 8017d36:	6825      	ldr	r5, [r4, #0]
 8017d38:	4448      	add	r0, r9
 8017d3a:	50e8      	str	r0, [r5, r3]
 8017d3c:	9d04      	ldr	r5, [sp, #16]
 8017d3e:	eba2 0208 	sub.w	r2, r2, r8
 8017d42:	4628      	mov	r0, r5
 8017d44:	f7f4 fa08 	bl	800c158 <ucdr_init_buffer>
 8017d48:	4628      	mov	r0, r5
 8017d4a:	493c      	ldr	r1, [pc, #240]	@ (8017e3c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017d4c:	4622      	mov	r2, r4
 8017d4e:	f7f4 f9d7 	bl	800c100 <ucdr_set_on_full_buffer_callback>
 8017d52:	2001      	movs	r0, #1
 8017d54:	81e6      	strh	r6, [r4, #14]
 8017d56:	b011      	add	sp, #68	@ 0x44
 8017d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d5c:	2101      	movs	r1, #1
 8017d5e:	89e0      	ldrh	r0, [r4, #14]
 8017d60:	f000 f970 	bl	8018044 <uxr_seq_num_add>
 8017d64:	8921      	ldrh	r1, [r4, #8]
 8017d66:	4605      	mov	r5, r0
 8017d68:	8a60      	ldrh	r0, [r4, #18]
 8017d6a:	f000 f96b 	bl	8018044 <uxr_seq_num_add>
 8017d6e:	4601      	mov	r1, r0
 8017d70:	4628      	mov	r0, r5
 8017d72:	f000 f96f 	bl	8018054 <uxr_seq_num_cmp>
 8017d76:	2800      	cmp	r0, #0
 8017d78:	dd42      	ble.n	8017e00 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8017d7a:	2000      	movs	r0, #0
 8017d7c:	b011      	add	sp, #68	@ 0x44
 8017d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d82:	8921      	ldrh	r1, [r4, #8]
 8017d84:	8a60      	ldrh	r0, [r4, #18]
 8017d86:	9205      	str	r2, [sp, #20]
 8017d88:	f000 f95c 	bl	8018044 <uxr_seq_num_add>
 8017d8c:	4601      	mov	r1, r0
 8017d8e:	4630      	mov	r0, r6
 8017d90:	f000 f960 	bl	8018054 <uxr_seq_num_cmp>
 8017d94:	2800      	cmp	r0, #0
 8017d96:	9a05      	ldr	r2, [sp, #20]
 8017d98:	dcef      	bgt.n	8017d7a <uxr_prepare_reliable_buffer_to_write+0x216>
 8017d9a:	8927      	ldrh	r7, [r4, #8]
 8017d9c:	fbb6 f3f7 	udiv	r3, r6, r7
 8017da0:	fb07 6313 	mls	r3, r7, r3, r6
 8017da4:	b29d      	uxth	r5, r3
 8017da6:	6863      	ldr	r3, [r4, #4]
 8017da8:	6824      	ldr	r4, [r4, #0]
 8017daa:	fbb3 f3f7 	udiv	r3, r3, r7
 8017dae:	fb05 f303 	mul.w	r3, r5, r3
 8017db2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8017db6:	50e2      	str	r2, [r4, r3]
 8017db8:	2300      	movs	r3, #0
 8017dba:	f8cd 8000 	str.w	r8, [sp]
 8017dbe:	f7f4 f9b9 	bl	800c134 <ucdr_init_buffer_origin_offset>
 8017dc2:	2001      	movs	r0, #1
 8017dc4:	e7da      	b.n	8017d7c <uxr_prepare_reliable_buffer_to_write+0x218>
 8017dc6:	b293      	uxth	r3, r2
 8017dc8:	461a      	mov	r2, r3
 8017dca:	e737      	b.n	8017c3c <uxr_prepare_reliable_buffer_to_write+0xd8>
 8017dcc:	4630      	mov	r0, r6
 8017dce:	2101      	movs	r1, #1
 8017dd0:	9207      	str	r2, [sp, #28]
 8017dd2:	f000 f937 	bl	8018044 <uxr_seq_num_add>
 8017dd6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017dda:	fbb0 f1fc 	udiv	r1, r0, ip
 8017dde:	fb0c 0111 	mls	r1, ip, r1, r0
 8017de2:	4606      	mov	r6, r0
 8017de4:	b288      	uxth	r0, r1
 8017de6:	6863      	ldr	r3, [r4, #4]
 8017de8:	fbb3 f1fc 	udiv	r1, r3, ip
 8017dec:	6823      	ldr	r3, [r4, #0]
 8017dee:	9a07      	ldr	r2, [sp, #28]
 8017df0:	fb00 f101 	mul.w	r1, r0, r1
 8017df4:	3104      	adds	r1, #4
 8017df6:	440b      	add	r3, r1
 8017df8:	9303      	str	r3, [sp, #12]
 8017dfa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017dfe:	e70a      	b.n	8017c16 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017e00:	8921      	ldrh	r1, [r4, #8]
 8017e02:	fbb5 f3f1 	udiv	r3, r5, r1
 8017e06:	fb01 5313 	mls	r3, r1, r3, r5
 8017e0a:	b29a      	uxth	r2, r3
 8017e0c:	6863      	ldr	r3, [r4, #4]
 8017e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e12:	6821      	ldr	r1, [r4, #0]
 8017e14:	9804      	ldr	r0, [sp, #16]
 8017e16:	fb02 f303 	mul.w	r3, r2, r3
 8017e1a:	3304      	adds	r3, #4
 8017e1c:	7b22      	ldrb	r2, [r4, #12]
 8017e1e:	4419      	add	r1, r3
 8017e20:	445a      	add	r2, fp
 8017e22:	f841 2c04 	str.w	r2, [r1, #-4]
 8017e26:	7b23      	ldrb	r3, [r4, #12]
 8017e28:	9300      	str	r3, [sp, #0]
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	f7f4 f982 	bl	800c134 <ucdr_init_buffer_origin_offset>
 8017e30:	81e5      	strh	r5, [r4, #14]
 8017e32:	2001      	movs	r0, #1
 8017e34:	e7a2      	b.n	8017d7c <uxr_prepare_reliable_buffer_to_write+0x218>
 8017e36:	4682      	mov	sl, r0
 8017e38:	e6ca      	b.n	8017bd0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8017e3a:	bf00      	nop
 8017e3c:	08017a45 	.word	0x08017a45

08017e40 <uxr_prepare_next_reliable_buffer_to_send>:
 8017e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e42:	4604      	mov	r4, r0
 8017e44:	460f      	mov	r7, r1
 8017e46:	8a00      	ldrh	r0, [r0, #16]
 8017e48:	2101      	movs	r1, #1
 8017e4a:	4616      	mov	r6, r2
 8017e4c:	461d      	mov	r5, r3
 8017e4e:	f000 f8f9 	bl	8018044 <uxr_seq_num_add>
 8017e52:	8028      	strh	r0, [r5, #0]
 8017e54:	8922      	ldrh	r2, [r4, #8]
 8017e56:	fbb0 f3f2 	udiv	r3, r0, r2
 8017e5a:	fb02 0c13 	mls	ip, r2, r3, r0
 8017e5e:	fa1f fc8c 	uxth.w	ip, ip
 8017e62:	6863      	ldr	r3, [r4, #4]
 8017e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8017e68:	fb0c fc03 	mul.w	ip, ip, r3
 8017e6c:	6823      	ldr	r3, [r4, #0]
 8017e6e:	89e1      	ldrh	r1, [r4, #14]
 8017e70:	f10c 0c04 	add.w	ip, ip, #4
 8017e74:	4463      	add	r3, ip
 8017e76:	603b      	str	r3, [r7, #0]
 8017e78:	6823      	ldr	r3, [r4, #0]
 8017e7a:	449c      	add	ip, r3
 8017e7c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8017e80:	6033      	str	r3, [r6, #0]
 8017e82:	f000 f8e7 	bl	8018054 <uxr_seq_num_cmp>
 8017e86:	2800      	cmp	r0, #0
 8017e88:	dd01      	ble.n	8017e8e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8017e8a:	2000      	movs	r0, #0
 8017e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e8e:	7b23      	ldrb	r3, [r4, #12]
 8017e90:	6832      	ldr	r2, [r6, #0]
 8017e92:	429a      	cmp	r2, r3
 8017e94:	d9f9      	bls.n	8017e8a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017e96:	8a61      	ldrh	r1, [r4, #18]
 8017e98:	8a20      	ldrh	r0, [r4, #16]
 8017e9a:	f000 f8d7 	bl	801804c <uxr_seq_num_sub>
 8017e9e:	8923      	ldrh	r3, [r4, #8]
 8017ea0:	4283      	cmp	r3, r0
 8017ea2:	d0f2      	beq.n	8017e8a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017ea4:	8828      	ldrh	r0, [r5, #0]
 8017ea6:	89e3      	ldrh	r3, [r4, #14]
 8017ea8:	8220      	strh	r0, [r4, #16]
 8017eaa:	4298      	cmp	r0, r3
 8017eac:	d001      	beq.n	8017eb2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8017eae:	2001      	movs	r0, #1
 8017eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017eb2:	2101      	movs	r1, #1
 8017eb4:	f000 f8c6 	bl	8018044 <uxr_seq_num_add>
 8017eb8:	81e0      	strh	r0, [r4, #14]
 8017eba:	2001      	movs	r0, #1
 8017ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ebe:	bf00      	nop

08017ec0 <uxr_update_output_stream_heartbeat_timestamp>:
 8017ec0:	b570      	push	{r4, r5, r6, lr}
 8017ec2:	8a01      	ldrh	r1, [r0, #16]
 8017ec4:	4604      	mov	r4, r0
 8017ec6:	8a40      	ldrh	r0, [r0, #18]
 8017ec8:	4615      	mov	r5, r2
 8017eca:	461e      	mov	r6, r3
 8017ecc:	f000 f8c2 	bl	8018054 <uxr_seq_num_cmp>
 8017ed0:	2800      	cmp	r0, #0
 8017ed2:	db07      	blt.n	8017ee4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8017ed4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017ed8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017edc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8017ee0:	2000      	movs	r0, #0
 8017ee2:	bd70      	pop	{r4, r5, r6, pc}
 8017ee4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017ee8:	b940      	cbnz	r0, 8017efc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8017eea:	2301      	movs	r3, #1
 8017eec:	f884 3020 	strb.w	r3, [r4, #32]
 8017ef0:	3564      	adds	r5, #100	@ 0x64
 8017ef2:	f146 0600 	adc.w	r6, r6, #0
 8017ef6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017efa:	bd70      	pop	{r4, r5, r6, pc}
 8017efc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8017f00:	4295      	cmp	r5, r2
 8017f02:	eb76 0303 	sbcs.w	r3, r6, r3
 8017f06:	bfa5      	ittet	ge
 8017f08:	3001      	addge	r0, #1
 8017f0a:	f884 0020 	strbge.w	r0, [r4, #32]
 8017f0e:	2000      	movlt	r0, #0
 8017f10:	2001      	movge	r0, #1
 8017f12:	e7ed      	b.n	8017ef0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08017f14 <uxr_begin_output_nack_buffer_it>:
 8017f14:	8a40      	ldrh	r0, [r0, #18]
 8017f16:	4770      	bx	lr

08017f18 <uxr_next_reliable_nack_buffer_to_send>:
 8017f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f1c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8017f20:	b082      	sub	sp, #8
 8017f22:	f1b8 0f00 	cmp.w	r8, #0
 8017f26:	d011      	beq.n	8017f4c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8017f28:	4604      	mov	r4, r0
 8017f2a:	8818      	ldrh	r0, [r3, #0]
 8017f2c:	460e      	mov	r6, r1
 8017f2e:	4617      	mov	r7, r2
 8017f30:	461d      	mov	r5, r3
 8017f32:	2101      	movs	r1, #1
 8017f34:	f000 f886 	bl	8018044 <uxr_seq_num_add>
 8017f38:	8028      	strh	r0, [r5, #0]
 8017f3a:	8a21      	ldrh	r1, [r4, #16]
 8017f3c:	f000 f88a 	bl	8018054 <uxr_seq_num_cmp>
 8017f40:	2800      	cmp	r0, #0
 8017f42:	dd07      	ble.n	8017f54 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8017f44:	f04f 0800 	mov.w	r8, #0
 8017f48:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8017f4c:	4640      	mov	r0, r8
 8017f4e:	b002      	add	sp, #8
 8017f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f54:	8921      	ldrh	r1, [r4, #8]
 8017f56:	8828      	ldrh	r0, [r5, #0]
 8017f58:	6823      	ldr	r3, [r4, #0]
 8017f5a:	fbb0 f2f1 	udiv	r2, r0, r1
 8017f5e:	fb01 0c12 	mls	ip, r1, r2, r0
 8017f62:	fa1f f28c 	uxth.w	r2, ip
 8017f66:	9301      	str	r3, [sp, #4]
 8017f68:	6863      	ldr	r3, [r4, #4]
 8017f6a:	fbb3 fcf1 	udiv	ip, r3, r1
 8017f6e:	9b01      	ldr	r3, [sp, #4]
 8017f70:	fb02 fc0c 	mul.w	ip, r2, ip
 8017f74:	f10c 0c04 	add.w	ip, ip, #4
 8017f78:	4463      	add	r3, ip
 8017f7a:	6033      	str	r3, [r6, #0]
 8017f7c:	6823      	ldr	r3, [r4, #0]
 8017f7e:	4463      	add	r3, ip
 8017f80:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017f84:	603b      	str	r3, [r7, #0]
 8017f86:	7b22      	ldrb	r2, [r4, #12]
 8017f88:	429a      	cmp	r2, r3
 8017f8a:	d0d2      	beq.n	8017f32 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8017f8c:	4640      	mov	r0, r8
 8017f8e:	b002      	add	sp, #8
 8017f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f94 <uxr_process_acknack>:
 8017f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f96:	4604      	mov	r4, r0
 8017f98:	460e      	mov	r6, r1
 8017f9a:	4610      	mov	r0, r2
 8017f9c:	2101      	movs	r1, #1
 8017f9e:	f000 f855 	bl	801804c <uxr_seq_num_sub>
 8017fa2:	8a61      	ldrh	r1, [r4, #18]
 8017fa4:	f000 f852 	bl	801804c <uxr_seq_num_sub>
 8017fa8:	b1c0      	cbz	r0, 8017fdc <uxr_process_acknack+0x48>
 8017faa:	4605      	mov	r5, r0
 8017fac:	2700      	movs	r7, #0
 8017fae:	2101      	movs	r1, #1
 8017fb0:	8a60      	ldrh	r0, [r4, #18]
 8017fb2:	f000 f847 	bl	8018044 <uxr_seq_num_add>
 8017fb6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017fba:	fbb0 f1fc 	udiv	r1, r0, ip
 8017fbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017fc2:	fb0c 0111 	mls	r1, ip, r1, r0
 8017fc6:	b289      	uxth	r1, r1
 8017fc8:	3701      	adds	r7, #1
 8017fca:	fbb3 f3fc 	udiv	r3, r3, ip
 8017fce:	fb01 f303 	mul.w	r3, r1, r3
 8017fd2:	42bd      	cmp	r5, r7
 8017fd4:	7b21      	ldrb	r1, [r4, #12]
 8017fd6:	8260      	strh	r0, [r4, #18]
 8017fd8:	50d1      	str	r1, [r2, r3]
 8017fda:	d1e8      	bne.n	8017fae <uxr_process_acknack+0x1a>
 8017fdc:	3e00      	subs	r6, #0
 8017fde:	f04f 0300 	mov.w	r3, #0
 8017fe2:	bf18      	it	ne
 8017fe4:	2601      	movne	r6, #1
 8017fe6:	f884 3020 	strb.w	r3, [r4, #32]
 8017fea:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8017fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017ff0 <uxr_is_output_up_to_date>:
 8017ff0:	8a01      	ldrh	r1, [r0, #16]
 8017ff2:	8a40      	ldrh	r0, [r0, #18]
 8017ff4:	b508      	push	{r3, lr}
 8017ff6:	f000 f82d 	bl	8018054 <uxr_seq_num_cmp>
 8017ffa:	fab0 f080 	clz	r0, r0
 8017ffe:	0940      	lsrs	r0, r0, #5
 8018000:	bd08      	pop	{r3, pc}
 8018002:	bf00      	nop

08018004 <get_available_free_slots>:
 8018004:	8902      	ldrh	r2, [r0, #8]
 8018006:	b1da      	cbz	r2, 8018040 <get_available_free_slots+0x3c>
 8018008:	b530      	push	{r4, r5, lr}
 801800a:	2100      	movs	r1, #0
 801800c:	6843      	ldr	r3, [r0, #4]
 801800e:	6805      	ldr	r5, [r0, #0]
 8018010:	7b04      	ldrb	r4, [r0, #12]
 8018012:	fbb3 fef2 	udiv	lr, r3, r2
 8018016:	4608      	mov	r0, r1
 8018018:	460b      	mov	r3, r1
 801801a:	fbb3 fcf2 	udiv	ip, r3, r2
 801801e:	fb02 331c 	mls	r3, r2, ip, r3
 8018022:	b29b      	uxth	r3, r3
 8018024:	fb0e f303 	mul.w	r3, lr, r3
 8018028:	3101      	adds	r1, #1
 801802a:	f855 c003 	ldr.w	ip, [r5, r3]
 801802e:	4564      	cmp	r4, ip
 8018030:	bf08      	it	eq
 8018032:	3001      	addeq	r0, #1
 8018034:	b28b      	uxth	r3, r1
 8018036:	bf08      	it	eq
 8018038:	b280      	uxtheq	r0, r0
 801803a:	4293      	cmp	r3, r2
 801803c:	d3ed      	bcc.n	801801a <get_available_free_slots+0x16>
 801803e:	bd30      	pop	{r4, r5, pc}
 8018040:	4610      	mov	r0, r2
 8018042:	4770      	bx	lr

08018044 <uxr_seq_num_add>:
 8018044:	4408      	add	r0, r1
 8018046:	b280      	uxth	r0, r0
 8018048:	4770      	bx	lr
 801804a:	bf00      	nop

0801804c <uxr_seq_num_sub>:
 801804c:	1a40      	subs	r0, r0, r1
 801804e:	b280      	uxth	r0, r0
 8018050:	4770      	bx	lr
 8018052:	bf00      	nop

08018054 <uxr_seq_num_cmp>:
 8018054:	4288      	cmp	r0, r1
 8018056:	d011      	beq.n	801807c <uxr_seq_num_cmp+0x28>
 8018058:	d309      	bcc.n	801806e <uxr_seq_num_cmp+0x1a>
 801805a:	4288      	cmp	r0, r1
 801805c:	d910      	bls.n	8018080 <uxr_seq_num_cmp+0x2c>
 801805e:	1a40      	subs	r0, r0, r1
 8018060:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018064:	bfd4      	ite	le
 8018066:	2001      	movle	r0, #1
 8018068:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801806c:	4770      	bx	lr
 801806e:	1a0b      	subs	r3, r1, r0
 8018070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018074:	daf1      	bge.n	801805a <uxr_seq_num_cmp+0x6>
 8018076:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801807a:	4770      	bx	lr
 801807c:	2000      	movs	r0, #0
 801807e:	4770      	bx	lr
 8018080:	2001      	movs	r0, #1
 8018082:	4770      	bx	lr

08018084 <rcl_get_default_domain_id>:
 8018084:	b530      	push	{r4, r5, lr}
 8018086:	b083      	sub	sp, #12
 8018088:	2300      	movs	r3, #0
 801808a:	9300      	str	r3, [sp, #0]
 801808c:	b1d0      	cbz	r0, 80180c4 <rcl_get_default_domain_id+0x40>
 801808e:	4604      	mov	r4, r0
 8018090:	4669      	mov	r1, sp
 8018092:	4815      	ldr	r0, [pc, #84]	@ (80180e8 <rcl_get_default_domain_id+0x64>)
 8018094:	f7fe f834 	bl	8016100 <rcutils_get_env>
 8018098:	4602      	mov	r2, r0
 801809a:	b110      	cbz	r0, 80180a2 <rcl_get_default_domain_id+0x1e>
 801809c:	2001      	movs	r0, #1
 801809e:	b003      	add	sp, #12
 80180a0:	bd30      	pop	{r4, r5, pc}
 80180a2:	9b00      	ldr	r3, [sp, #0]
 80180a4:	b18b      	cbz	r3, 80180ca <rcl_get_default_domain_id+0x46>
 80180a6:	7818      	ldrb	r0, [r3, #0]
 80180a8:	2800      	cmp	r0, #0
 80180aa:	d0f8      	beq.n	801809e <rcl_get_default_domain_id+0x1a>
 80180ac:	a901      	add	r1, sp, #4
 80180ae:	4618      	mov	r0, r3
 80180b0:	9201      	str	r2, [sp, #4]
 80180b2:	f000 fe39 	bl	8018d28 <strtoul>
 80180b6:	4605      	mov	r5, r0
 80180b8:	b150      	cbz	r0, 80180d0 <rcl_get_default_domain_id+0x4c>
 80180ba:	1c43      	adds	r3, r0, #1
 80180bc:	d00d      	beq.n	80180da <rcl_get_default_domain_id+0x56>
 80180be:	6025      	str	r5, [r4, #0]
 80180c0:	2000      	movs	r0, #0
 80180c2:	e7ec      	b.n	801809e <rcl_get_default_domain_id+0x1a>
 80180c4:	200b      	movs	r0, #11
 80180c6:	b003      	add	sp, #12
 80180c8:	bd30      	pop	{r4, r5, pc}
 80180ca:	4618      	mov	r0, r3
 80180cc:	b003      	add	sp, #12
 80180ce:	bd30      	pop	{r4, r5, pc}
 80180d0:	9b01      	ldr	r3, [sp, #4]
 80180d2:	781b      	ldrb	r3, [r3, #0]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d0f2      	beq.n	80180be <rcl_get_default_domain_id+0x3a>
 80180d8:	e7e0      	b.n	801809c <rcl_get_default_domain_id+0x18>
 80180da:	f001 f95f 	bl	801939c <__errno>
 80180de:	6803      	ldr	r3, [r0, #0]
 80180e0:	2b22      	cmp	r3, #34	@ 0x22
 80180e2:	d1ec      	bne.n	80180be <rcl_get_default_domain_id+0x3a>
 80180e4:	e7da      	b.n	801809c <rcl_get_default_domain_id+0x18>
 80180e6:	bf00      	nop
 80180e8:	0801baec 	.word	0x0801baec

080180ec <rcl_expand_topic_name>:
 80180ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f0:	b08b      	sub	sp, #44	@ 0x2c
 80180f2:	9306      	str	r3, [sp, #24]
 80180f4:	2800      	cmp	r0, #0
 80180f6:	f000 80ad 	beq.w	8018254 <rcl_expand_topic_name+0x168>
 80180fa:	460e      	mov	r6, r1
 80180fc:	2900      	cmp	r1, #0
 80180fe:	f000 80a9 	beq.w	8018254 <rcl_expand_topic_name+0x168>
 8018102:	4617      	mov	r7, r2
 8018104:	2a00      	cmp	r2, #0
 8018106:	f000 80a5 	beq.w	8018254 <rcl_expand_topic_name+0x168>
 801810a:	2b00      	cmp	r3, #0
 801810c:	f000 80a2 	beq.w	8018254 <rcl_expand_topic_name+0x168>
 8018110:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018112:	2b00      	cmp	r3, #0
 8018114:	f000 809e 	beq.w	8018254 <rcl_expand_topic_name+0x168>
 8018118:	2200      	movs	r2, #0
 801811a:	a909      	add	r1, sp, #36	@ 0x24
 801811c:	4680      	mov	r8, r0
 801811e:	f000 fa57 	bl	80185d0 <rcl_validate_topic_name>
 8018122:	4604      	mov	r4, r0
 8018124:	2800      	cmp	r0, #0
 8018126:	f040 8096 	bne.w	8018256 <rcl_expand_topic_name+0x16a>
 801812a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801812c:	2b00      	cmp	r3, #0
 801812e:	f040 809a 	bne.w	8018266 <rcl_expand_topic_name+0x17a>
 8018132:	4602      	mov	r2, r0
 8018134:	a909      	add	r1, sp, #36	@ 0x24
 8018136:	4630      	mov	r0, r6
 8018138:	f7fe fc0c 	bl	8016954 <rmw_validate_node_name>
 801813c:	2800      	cmp	r0, #0
 801813e:	f040 808e 	bne.w	801825e <rcl_expand_topic_name+0x172>
 8018142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018144:	2a00      	cmp	r2, #0
 8018146:	f040 8093 	bne.w	8018270 <rcl_expand_topic_name+0x184>
 801814a:	a909      	add	r1, sp, #36	@ 0x24
 801814c:	4638      	mov	r0, r7
 801814e:	f7fe fbe3 	bl	8016918 <rmw_validate_namespace>
 8018152:	2800      	cmp	r0, #0
 8018154:	f040 8083 	bne.w	801825e <rcl_expand_topic_name+0x172>
 8018158:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801815a:	2c00      	cmp	r4, #0
 801815c:	f040 80ed 	bne.w	801833a <rcl_expand_topic_name+0x24e>
 8018160:	217b      	movs	r1, #123	@ 0x7b
 8018162:	4640      	mov	r0, r8
 8018164:	f001 f88e 	bl	8019284 <strchr>
 8018168:	f898 3000 	ldrb.w	r3, [r8]
 801816c:	2b2f      	cmp	r3, #47	@ 0x2f
 801816e:	4605      	mov	r5, r0
 8018170:	f000 809e 	beq.w	80182b0 <rcl_expand_topic_name+0x1c4>
 8018174:	2b7e      	cmp	r3, #126	@ 0x7e
 8018176:	f040 80a2 	bne.w	80182be <rcl_expand_topic_name+0x1d2>
 801817a:	4638      	mov	r0, r7
 801817c:	f7e8 f85a 	bl	8000234 <strlen>
 8018180:	4a82      	ldr	r2, [pc, #520]	@ (801838c <rcl_expand_topic_name+0x2a0>)
 8018182:	4b83      	ldr	r3, [pc, #524]	@ (8018390 <rcl_expand_topic_name+0x2a4>)
 8018184:	2801      	cmp	r0, #1
 8018186:	bf18      	it	ne
 8018188:	4613      	movne	r3, r2
 801818a:	9302      	str	r3, [sp, #8]
 801818c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801818e:	9300      	str	r3, [sp, #0]
 8018190:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018194:	f108 0301 	add.w	r3, r8, #1
 8018198:	9305      	str	r3, [sp, #20]
 801819a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801819e:	9301      	str	r3, [sp, #4]
 80181a0:	ab14      	add	r3, sp, #80	@ 0x50
 80181a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80181a4:	f7fd ffd4 	bl	8016150 <rcutils_format_string_limit>
 80181a8:	4682      	mov	sl, r0
 80181aa:	2800      	cmp	r0, #0
 80181ac:	f000 80c7 	beq.w	801833e <rcl_expand_topic_name+0x252>
 80181b0:	2d00      	cmp	r5, #0
 80181b2:	f000 80a2 	beq.w	80182fa <rcl_expand_topic_name+0x20e>
 80181b6:	217b      	movs	r1, #123	@ 0x7b
 80181b8:	f001 f864 	bl	8019284 <strchr>
 80181bc:	46d1      	mov	r9, sl
 80181be:	4605      	mov	r5, r0
 80181c0:	9407      	str	r4, [sp, #28]
 80181c2:	46d3      	mov	fp, sl
 80181c4:	464c      	mov	r4, r9
 80181c6:	2d00      	cmp	r5, #0
 80181c8:	f000 80be 	beq.w	8018348 <rcl_expand_topic_name+0x25c>
 80181cc:	217d      	movs	r1, #125	@ 0x7d
 80181ce:	4620      	mov	r0, r4
 80181d0:	f001 f858 	bl	8019284 <strchr>
 80181d4:	eba0 0905 	sub.w	r9, r0, r5
 80181d8:	f109 0a01 	add.w	sl, r9, #1
 80181dc:	486d      	ldr	r0, [pc, #436]	@ (8018394 <rcl_expand_topic_name+0x2a8>)
 80181de:	4652      	mov	r2, sl
 80181e0:	4629      	mov	r1, r5
 80181e2:	f001 f85c 	bl	801929e <strncmp>
 80181e6:	2800      	cmp	r0, #0
 80181e8:	d067      	beq.n	80182ba <rcl_expand_topic_name+0x1ce>
 80181ea:	486b      	ldr	r0, [pc, #428]	@ (8018398 <rcl_expand_topic_name+0x2ac>)
 80181ec:	4652      	mov	r2, sl
 80181ee:	4629      	mov	r1, r5
 80181f0:	f001 f855 	bl	801929e <strncmp>
 80181f4:	b130      	cbz	r0, 8018204 <rcl_expand_topic_name+0x118>
 80181f6:	4869      	ldr	r0, [pc, #420]	@ (801839c <rcl_expand_topic_name+0x2b0>)
 80181f8:	4652      	mov	r2, sl
 80181fa:	4629      	mov	r1, r5
 80181fc:	f001 f84f 	bl	801929e <strncmp>
 8018200:	2800      	cmp	r0, #0
 8018202:	d137      	bne.n	8018274 <rcl_expand_topic_name+0x188>
 8018204:	46b9      	mov	r9, r7
 8018206:	ab16      	add	r3, sp, #88	@ 0x58
 8018208:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801820c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018210:	ab14      	add	r3, sp, #80	@ 0x50
 8018212:	4628      	mov	r0, r5
 8018214:	cb0c      	ldmia	r3, {r2, r3}
 8018216:	4651      	mov	r1, sl
 8018218:	f7fe f8d6 	bl	80163c8 <rcutils_strndup>
 801821c:	4605      	mov	r5, r0
 801821e:	2800      	cmp	r0, #0
 8018220:	f000 809c 	beq.w	801835c <rcl_expand_topic_name+0x270>
 8018224:	464a      	mov	r2, r9
 8018226:	4620      	mov	r0, r4
 8018228:	ab14      	add	r3, sp, #80	@ 0x50
 801822a:	4629      	mov	r1, r5
 801822c:	f7fd ffca 	bl	80161c4 <rcutils_repl_str>
 8018230:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018232:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018234:	4604      	mov	r4, r0
 8018236:	4628      	mov	r0, r5
 8018238:	4798      	blx	r3
 801823a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801823c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801823e:	4658      	mov	r0, fp
 8018240:	4798      	blx	r3
 8018242:	2c00      	cmp	r4, #0
 8018244:	d07b      	beq.n	801833e <rcl_expand_topic_name+0x252>
 8018246:	217b      	movs	r1, #123	@ 0x7b
 8018248:	4620      	mov	r0, r4
 801824a:	f001 f81b 	bl	8019284 <strchr>
 801824e:	46a3      	mov	fp, r4
 8018250:	4605      	mov	r5, r0
 8018252:	e7b8      	b.n	80181c6 <rcl_expand_topic_name+0xda>
 8018254:	240b      	movs	r4, #11
 8018256:	4620      	mov	r0, r4
 8018258:	b00b      	add	sp, #44	@ 0x2c
 801825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801825e:	f7fb f8c9 	bl	80133f4 <rcl_convert_rmw_ret_to_rcl_ret>
 8018262:	4604      	mov	r4, r0
 8018264:	e7f7      	b.n	8018256 <rcl_expand_topic_name+0x16a>
 8018266:	2467      	movs	r4, #103	@ 0x67
 8018268:	4620      	mov	r0, r4
 801826a:	b00b      	add	sp, #44	@ 0x2c
 801826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018270:	24c9      	movs	r4, #201	@ 0xc9
 8018272:	e7f0      	b.n	8018256 <rcl_expand_topic_name+0x16a>
 8018274:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018278:	9806      	ldr	r0, [sp, #24]
 801827a:	1c69      	adds	r1, r5, #1
 801827c:	f7fe f9be 	bl	80165fc <rcutils_string_map_getn>
 8018280:	4681      	mov	r9, r0
 8018282:	2800      	cmp	r0, #0
 8018284:	d1bf      	bne.n	8018206 <rcl_expand_topic_name+0x11a>
 8018286:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018288:	aa16      	add	r2, sp, #88	@ 0x58
 801828a:	6018      	str	r0, [r3, #0]
 801828c:	ca07      	ldmia	r2, {r0, r1, r2}
 801828e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018292:	ab14      	add	r3, sp, #80	@ 0x50
 8018294:	cb0c      	ldmia	r3, {r2, r3}
 8018296:	4651      	mov	r1, sl
 8018298:	4628      	mov	r0, r5
 801829a:	f7fe f895 	bl	80163c8 <rcutils_strndup>
 801829e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80182a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80182a2:	4798      	blx	r3
 80182a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80182a6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80182a8:	4658      	mov	r0, fp
 80182aa:	2469      	movs	r4, #105	@ 0x69
 80182ac:	4798      	blx	r3
 80182ae:	e7d2      	b.n	8018256 <rcl_expand_topic_name+0x16a>
 80182b0:	2800      	cmp	r0, #0
 80182b2:	d05b      	beq.n	801836c <rcl_expand_topic_name+0x280>
 80182b4:	46c1      	mov	r9, r8
 80182b6:	46a2      	mov	sl, r4
 80182b8:	e782      	b.n	80181c0 <rcl_expand_topic_name+0xd4>
 80182ba:	46b1      	mov	r9, r6
 80182bc:	e7a3      	b.n	8018206 <rcl_expand_topic_name+0x11a>
 80182be:	2800      	cmp	r0, #0
 80182c0:	d1f8      	bne.n	80182b4 <rcl_expand_topic_name+0x1c8>
 80182c2:	4638      	mov	r0, r7
 80182c4:	f7e7 ffb6 	bl	8000234 <strlen>
 80182c8:	4a35      	ldr	r2, [pc, #212]	@ (80183a0 <rcl_expand_topic_name+0x2b4>)
 80182ca:	4b36      	ldr	r3, [pc, #216]	@ (80183a4 <rcl_expand_topic_name+0x2b8>)
 80182cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80182d0:	2801      	cmp	r0, #1
 80182d2:	bf18      	it	ne
 80182d4:	4613      	movne	r3, r2
 80182d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80182da:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80182de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80182e0:	9703      	str	r7, [sp, #12]
 80182e2:	9200      	str	r2, [sp, #0]
 80182e4:	ab14      	add	r3, sp, #80	@ 0x50
 80182e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80182e8:	f7fd ff32 	bl	8016150 <rcutils_format_string_limit>
 80182ec:	4682      	mov	sl, r0
 80182ee:	4653      	mov	r3, sl
 80182f0:	b32b      	cbz	r3, 801833e <rcl_expand_topic_name+0x252>
 80182f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80182f4:	f8c3 a000 	str.w	sl, [r3]
 80182f8:	e7ad      	b.n	8018256 <rcl_expand_topic_name+0x16a>
 80182fa:	f89a 3000 	ldrb.w	r3, [sl]
 80182fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8018300:	d0f7      	beq.n	80182f2 <rcl_expand_topic_name+0x206>
 8018302:	4638      	mov	r0, r7
 8018304:	f7e7 ff96 	bl	8000234 <strlen>
 8018308:	4a25      	ldr	r2, [pc, #148]	@ (80183a0 <rcl_expand_topic_name+0x2b4>)
 801830a:	4b26      	ldr	r3, [pc, #152]	@ (80183a4 <rcl_expand_topic_name+0x2b8>)
 801830c:	f8cd a010 	str.w	sl, [sp, #16]
 8018310:	2801      	cmp	r0, #1
 8018312:	bf18      	it	ne
 8018314:	4613      	movne	r3, r2
 8018316:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801831a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801831e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018320:	9703      	str	r7, [sp, #12]
 8018322:	9200      	str	r2, [sp, #0]
 8018324:	ab14      	add	r3, sp, #80	@ 0x50
 8018326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018328:	f7fd ff12 	bl	8016150 <rcutils_format_string_limit>
 801832c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801832e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018330:	4605      	mov	r5, r0
 8018332:	4650      	mov	r0, sl
 8018334:	4798      	blx	r3
 8018336:	46aa      	mov	sl, r5
 8018338:	e7d9      	b.n	80182ee <rcl_expand_topic_name+0x202>
 801833a:	24ca      	movs	r4, #202	@ 0xca
 801833c:	e78b      	b.n	8018256 <rcl_expand_topic_name+0x16a>
 801833e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018340:	2300      	movs	r3, #0
 8018342:	6013      	str	r3, [r2, #0]
 8018344:	240a      	movs	r4, #10
 8018346:	e786      	b.n	8018256 <rcl_expand_topic_name+0x16a>
 8018348:	465b      	mov	r3, fp
 801834a:	9c07      	ldr	r4, [sp, #28]
 801834c:	46da      	mov	sl, fp
 801834e:	2b00      	cmp	r3, #0
 8018350:	d1d3      	bne.n	80182fa <rcl_expand_topic_name+0x20e>
 8018352:	f898 3000 	ldrb.w	r3, [r8]
 8018356:	2b2f      	cmp	r3, #47	@ 0x2f
 8018358:	d0cb      	beq.n	80182f2 <rcl_expand_topic_name+0x206>
 801835a:	e7b2      	b.n	80182c2 <rcl_expand_topic_name+0x1d6>
 801835c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018360:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018362:	6015      	str	r5, [r2, #0]
 8018364:	4658      	mov	r0, fp
 8018366:	4798      	blx	r3
 8018368:	240a      	movs	r4, #10
 801836a:	e774      	b.n	8018256 <rcl_expand_topic_name+0x16a>
 801836c:	ab17      	add	r3, sp, #92	@ 0x5c
 801836e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018372:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018376:	ab14      	add	r3, sp, #80	@ 0x50
 8018378:	cb0e      	ldmia	r3, {r1, r2, r3}
 801837a:	4640      	mov	r0, r8
 801837c:	f7fe f802 	bl	8016384 <rcutils_strdup>
 8018380:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018382:	2800      	cmp	r0, #0
 8018384:	6018      	str	r0, [r3, #0]
 8018386:	bf08      	it	eq
 8018388:	240a      	moveq	r4, #10
 801838a:	e764      	b.n	8018256 <rcl_expand_topic_name+0x16a>
 801838c:	0801bafc 	.word	0x0801bafc
 8018390:	0801b04c 	.word	0x0801b04c
 8018394:	0801bb04 	.word	0x0801bb04
 8018398:	0801bb0c 	.word	0x0801bb0c
 801839c:	0801bb14 	.word	0x0801bb14
 80183a0:	0801b038 	.word	0x0801b038
 80183a4:	0801b05c 	.word	0x0801b05c

080183a8 <rcl_get_default_topic_name_substitutions>:
 80183a8:	2800      	cmp	r0, #0
 80183aa:	bf0c      	ite	eq
 80183ac:	200b      	moveq	r0, #11
 80183ae:	2000      	movne	r0, #0
 80183b0:	4770      	bx	lr
 80183b2:	bf00      	nop

080183b4 <rcl_get_zero_initialized_guard_condition>:
 80183b4:	4a03      	ldr	r2, [pc, #12]	@ (80183c4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80183b6:	4603      	mov	r3, r0
 80183b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80183bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80183c0:	4618      	mov	r0, r3
 80183c2:	4770      	bx	lr
 80183c4:	0801bb20 	.word	0x0801bb20

080183c8 <rcl_guard_condition_init>:
 80183c8:	b082      	sub	sp, #8
 80183ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183cc:	b087      	sub	sp, #28
 80183ce:	ac0c      	add	r4, sp, #48	@ 0x30
 80183d0:	e884 000c 	stmia.w	r4, {r2, r3}
 80183d4:	46a6      	mov	lr, r4
 80183d6:	460d      	mov	r5, r1
 80183d8:	4604      	mov	r4, r0
 80183da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80183de:	f10d 0c04 	add.w	ip, sp, #4
 80183e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80183e6:	f8de 3000 	ldr.w	r3, [lr]
 80183ea:	f8cc 3000 	str.w	r3, [ip]
 80183ee:	a801      	add	r0, sp, #4
 80183f0:	f7f5 f908 	bl	800d604 <rcutils_allocator_is_valid>
 80183f4:	b338      	cbz	r0, 8018446 <rcl_guard_condition_init+0x7e>
 80183f6:	b334      	cbz	r4, 8018446 <rcl_guard_condition_init+0x7e>
 80183f8:	6866      	ldr	r6, [r4, #4]
 80183fa:	b9ee      	cbnz	r6, 8018438 <rcl_guard_condition_init+0x70>
 80183fc:	b31d      	cbz	r5, 8018446 <rcl_guard_condition_init+0x7e>
 80183fe:	4628      	mov	r0, r5
 8018400:	f7fb f816 	bl	8013430 <rcl_context_is_valid>
 8018404:	b308      	cbz	r0, 801844a <rcl_guard_condition_init+0x82>
 8018406:	9b01      	ldr	r3, [sp, #4]
 8018408:	9905      	ldr	r1, [sp, #20]
 801840a:	201c      	movs	r0, #28
 801840c:	4798      	blx	r3
 801840e:	4607      	mov	r7, r0
 8018410:	6060      	str	r0, [r4, #4]
 8018412:	b310      	cbz	r0, 801845a <rcl_guard_condition_init+0x92>
 8018414:	6828      	ldr	r0, [r5, #0]
 8018416:	3028      	adds	r0, #40	@ 0x28
 8018418:	f000 f9ac 	bl	8018774 <rmw_create_guard_condition>
 801841c:	6038      	str	r0, [r7, #0]
 801841e:	6860      	ldr	r0, [r4, #4]
 8018420:	6805      	ldr	r5, [r0, #0]
 8018422:	b1a5      	cbz	r5, 801844e <rcl_guard_condition_init+0x86>
 8018424:	2301      	movs	r3, #1
 8018426:	ac01      	add	r4, sp, #4
 8018428:	7103      	strb	r3, [r0, #4]
 801842a:	f100 0708 	add.w	r7, r0, #8
 801842e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018430:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018432:	6823      	ldr	r3, [r4, #0]
 8018434:	603b      	str	r3, [r7, #0]
 8018436:	e000      	b.n	801843a <rcl_guard_condition_init+0x72>
 8018438:	2664      	movs	r6, #100	@ 0x64
 801843a:	4630      	mov	r0, r6
 801843c:	b007      	add	sp, #28
 801843e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018442:	b002      	add	sp, #8
 8018444:	4770      	bx	lr
 8018446:	260b      	movs	r6, #11
 8018448:	e7f7      	b.n	801843a <rcl_guard_condition_init+0x72>
 801844a:	2665      	movs	r6, #101	@ 0x65
 801844c:	e7f5      	b.n	801843a <rcl_guard_condition_init+0x72>
 801844e:	9b02      	ldr	r3, [sp, #8]
 8018450:	9905      	ldr	r1, [sp, #20]
 8018452:	4798      	blx	r3
 8018454:	2601      	movs	r6, #1
 8018456:	6065      	str	r5, [r4, #4]
 8018458:	e7ef      	b.n	801843a <rcl_guard_condition_init+0x72>
 801845a:	260a      	movs	r6, #10
 801845c:	e7ed      	b.n	801843a <rcl_guard_condition_init+0x72>
 801845e:	bf00      	nop

08018460 <rcl_guard_condition_init_from_rmw>:
 8018460:	b082      	sub	sp, #8
 8018462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018466:	b086      	sub	sp, #24
 8018468:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801846c:	4604      	mov	r4, r0
 801846e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018472:	460e      	mov	r6, r1
 8018474:	4617      	mov	r7, r2
 8018476:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801847a:	f10d 0e04 	add.w	lr, sp, #4
 801847e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018482:	f8dc 3000 	ldr.w	r3, [ip]
 8018486:	f8ce 3000 	str.w	r3, [lr]
 801848a:	a801      	add	r0, sp, #4
 801848c:	f7f5 f8ba 	bl	800d604 <rcutils_allocator_is_valid>
 8018490:	b350      	cbz	r0, 80184e8 <rcl_guard_condition_init_from_rmw+0x88>
 8018492:	b34c      	cbz	r4, 80184e8 <rcl_guard_condition_init_from_rmw+0x88>
 8018494:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018498:	f1b8 0f00 	cmp.w	r8, #0
 801849c:	d11e      	bne.n	80184dc <rcl_guard_condition_init_from_rmw+0x7c>
 801849e:	b31f      	cbz	r7, 80184e8 <rcl_guard_condition_init_from_rmw+0x88>
 80184a0:	4638      	mov	r0, r7
 80184a2:	f7fa ffc5 	bl	8013430 <rcl_context_is_valid>
 80184a6:	b328      	cbz	r0, 80184f4 <rcl_guard_condition_init_from_rmw+0x94>
 80184a8:	9b01      	ldr	r3, [sp, #4]
 80184aa:	9905      	ldr	r1, [sp, #20]
 80184ac:	201c      	movs	r0, #28
 80184ae:	4798      	blx	r3
 80184b0:	4605      	mov	r5, r0
 80184b2:	6060      	str	r0, [r4, #4]
 80184b4:	b358      	cbz	r0, 801850e <rcl_guard_condition_init_from_rmw+0xae>
 80184b6:	b1fe      	cbz	r6, 80184f8 <rcl_guard_condition_init_from_rmw+0x98>
 80184b8:	6006      	str	r6, [r0, #0]
 80184ba:	f880 8004 	strb.w	r8, [r0, #4]
 80184be:	ac01      	add	r4, sp, #4
 80184c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184c2:	f105 0c08 	add.w	ip, r5, #8
 80184c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80184ca:	6823      	ldr	r3, [r4, #0]
 80184cc:	f8cc 3000 	str.w	r3, [ip]
 80184d0:	2000      	movs	r0, #0
 80184d2:	b006      	add	sp, #24
 80184d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184d8:	b002      	add	sp, #8
 80184da:	4770      	bx	lr
 80184dc:	2064      	movs	r0, #100	@ 0x64
 80184de:	b006      	add	sp, #24
 80184e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184e4:	b002      	add	sp, #8
 80184e6:	4770      	bx	lr
 80184e8:	200b      	movs	r0, #11
 80184ea:	b006      	add	sp, #24
 80184ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184f0:	b002      	add	sp, #8
 80184f2:	4770      	bx	lr
 80184f4:	2065      	movs	r0, #101	@ 0x65
 80184f6:	e7f2      	b.n	80184de <rcl_guard_condition_init_from_rmw+0x7e>
 80184f8:	6838      	ldr	r0, [r7, #0]
 80184fa:	3028      	adds	r0, #40	@ 0x28
 80184fc:	f000 f93a 	bl	8018774 <rmw_create_guard_condition>
 8018500:	6028      	str	r0, [r5, #0]
 8018502:	6865      	ldr	r5, [r4, #4]
 8018504:	682e      	ldr	r6, [r5, #0]
 8018506:	b126      	cbz	r6, 8018512 <rcl_guard_condition_init_from_rmw+0xb2>
 8018508:	2301      	movs	r3, #1
 801850a:	712b      	strb	r3, [r5, #4]
 801850c:	e7d7      	b.n	80184be <rcl_guard_condition_init_from_rmw+0x5e>
 801850e:	200a      	movs	r0, #10
 8018510:	e7e5      	b.n	80184de <rcl_guard_condition_init_from_rmw+0x7e>
 8018512:	4628      	mov	r0, r5
 8018514:	9b02      	ldr	r3, [sp, #8]
 8018516:	9905      	ldr	r1, [sp, #20]
 8018518:	4798      	blx	r3
 801851a:	6066      	str	r6, [r4, #4]
 801851c:	2001      	movs	r0, #1
 801851e:	e7de      	b.n	80184de <rcl_guard_condition_init_from_rmw+0x7e>

08018520 <rcl_guard_condition_fini>:
 8018520:	b570      	push	{r4, r5, r6, lr}
 8018522:	b082      	sub	sp, #8
 8018524:	b1f0      	cbz	r0, 8018564 <rcl_guard_condition_fini+0x44>
 8018526:	6843      	ldr	r3, [r0, #4]
 8018528:	4604      	mov	r4, r0
 801852a:	b163      	cbz	r3, 8018546 <rcl_guard_condition_fini+0x26>
 801852c:	6818      	ldr	r0, [r3, #0]
 801852e:	68de      	ldr	r6, [r3, #12]
 8018530:	6999      	ldr	r1, [r3, #24]
 8018532:	b160      	cbz	r0, 801854e <rcl_guard_condition_fini+0x2e>
 8018534:	791d      	ldrb	r5, [r3, #4]
 8018536:	b965      	cbnz	r5, 8018552 <rcl_guard_condition_fini+0x32>
 8018538:	4618      	mov	r0, r3
 801853a:	47b0      	blx	r6
 801853c:	2300      	movs	r3, #0
 801853e:	4628      	mov	r0, r5
 8018540:	6063      	str	r3, [r4, #4]
 8018542:	b002      	add	sp, #8
 8018544:	bd70      	pop	{r4, r5, r6, pc}
 8018546:	461d      	mov	r5, r3
 8018548:	4628      	mov	r0, r5
 801854a:	b002      	add	sp, #8
 801854c:	bd70      	pop	{r4, r5, r6, pc}
 801854e:	4605      	mov	r5, r0
 8018550:	e7f2      	b.n	8018538 <rcl_guard_condition_fini+0x18>
 8018552:	9101      	str	r1, [sp, #4]
 8018554:	f000 f922 	bl	801879c <rmw_destroy_guard_condition>
 8018558:	1e05      	subs	r5, r0, #0
 801855a:	6863      	ldr	r3, [r4, #4]
 801855c:	9901      	ldr	r1, [sp, #4]
 801855e:	bf18      	it	ne
 8018560:	2501      	movne	r5, #1
 8018562:	e7e9      	b.n	8018538 <rcl_guard_condition_fini+0x18>
 8018564:	250b      	movs	r5, #11
 8018566:	4628      	mov	r0, r5
 8018568:	b002      	add	sp, #8
 801856a:	bd70      	pop	{r4, r5, r6, pc}

0801856c <rcl_guard_condition_get_default_options>:
 801856c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801856e:	b087      	sub	sp, #28
 8018570:	4606      	mov	r6, r0
 8018572:	4668      	mov	r0, sp
 8018574:	f7f5 f838 	bl	800d5e8 <rcutils_get_default_allocator>
 8018578:	4b09      	ldr	r3, [pc, #36]	@ (80185a0 <rcl_guard_condition_get_default_options+0x34>)
 801857a:	46ee      	mov	lr, sp
 801857c:	469c      	mov	ip, r3
 801857e:	461d      	mov	r5, r3
 8018580:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018584:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801858a:	4634      	mov	r4, r6
 801858c:	f8de 7000 	ldr.w	r7, [lr]
 8018590:	f8cc 7000 	str.w	r7, [ip]
 8018594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018596:	4630      	mov	r0, r6
 8018598:	6027      	str	r7, [r4, #0]
 801859a:	b007      	add	sp, #28
 801859c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801859e:	bf00      	nop
 80185a0:	2000b74c 	.word	0x2000b74c

080185a4 <rcl_trigger_guard_condition>:
 80185a4:	b148      	cbz	r0, 80185ba <rcl_trigger_guard_condition+0x16>
 80185a6:	b508      	push	{r3, lr}
 80185a8:	6843      	ldr	r3, [r0, #4]
 80185aa:	b143      	cbz	r3, 80185be <rcl_trigger_guard_condition+0x1a>
 80185ac:	6818      	ldr	r0, [r3, #0]
 80185ae:	f000 f909 	bl	80187c4 <rmw_trigger_guard_condition>
 80185b2:	3800      	subs	r0, #0
 80185b4:	bf18      	it	ne
 80185b6:	2001      	movne	r0, #1
 80185b8:	bd08      	pop	{r3, pc}
 80185ba:	200b      	movs	r0, #11
 80185bc:	4770      	bx	lr
 80185be:	200b      	movs	r0, #11
 80185c0:	bd08      	pop	{r3, pc}
 80185c2:	bf00      	nop

080185c4 <rcl_guard_condition_get_rmw_handle>:
 80185c4:	b110      	cbz	r0, 80185cc <rcl_guard_condition_get_rmw_handle+0x8>
 80185c6:	6840      	ldr	r0, [r0, #4]
 80185c8:	b100      	cbz	r0, 80185cc <rcl_guard_condition_get_rmw_handle+0x8>
 80185ca:	6800      	ldr	r0, [r0, #0]
 80185cc:	4770      	bx	lr
 80185ce:	bf00      	nop

080185d0 <rcl_validate_topic_name>:
 80185d0:	2800      	cmp	r0, #0
 80185d2:	d07a      	beq.n	80186ca <rcl_validate_topic_name+0xfa>
 80185d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185d8:	460e      	mov	r6, r1
 80185da:	2900      	cmp	r1, #0
 80185dc:	d07c      	beq.n	80186d8 <rcl_validate_topic_name+0x108>
 80185de:	4617      	mov	r7, r2
 80185e0:	4605      	mov	r5, r0
 80185e2:	f7e7 fe27 	bl	8000234 <strlen>
 80185e6:	b1b0      	cbz	r0, 8018616 <rcl_validate_topic_name+0x46>
 80185e8:	f895 9000 	ldrb.w	r9, [r5]
 80185ec:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8018770 <rcl_validate_topic_name+0x1a0>
 80185f0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80185f4:	f013 0304 	ands.w	r3, r3, #4
 80185f8:	d169      	bne.n	80186ce <rcl_validate_topic_name+0xfe>
 80185fa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80185fe:	f815 2008 	ldrb.w	r2, [r5, r8]
 8018602:	2a2f      	cmp	r2, #47	@ 0x2f
 8018604:	d10e      	bne.n	8018624 <rcl_validate_topic_name+0x54>
 8018606:	2202      	movs	r2, #2
 8018608:	6032      	str	r2, [r6, #0]
 801860a:	b36f      	cbz	r7, 8018668 <rcl_validate_topic_name+0x98>
 801860c:	f8c7 8000 	str.w	r8, [r7]
 8018610:	4618      	mov	r0, r3
 8018612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018616:	2301      	movs	r3, #1
 8018618:	6033      	str	r3, [r6, #0]
 801861a:	b32f      	cbz	r7, 8018668 <rcl_validate_topic_name+0x98>
 801861c:	2000      	movs	r0, #0
 801861e:	6038      	str	r0, [r7, #0]
 8018620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018624:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8018628:	461c      	mov	r4, r3
 801862a:	4619      	mov	r1, r3
 801862c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018630:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018634:	f1be 0f09 	cmp.w	lr, #9
 8018638:	d919      	bls.n	801866e <rcl_validate_topic_name+0x9e>
 801863a:	f022 0e20 	bic.w	lr, r2, #32
 801863e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8018642:	f1be 0f19 	cmp.w	lr, #25
 8018646:	d912      	bls.n	801866e <rcl_validate_topic_name+0x9e>
 8018648:	2a5f      	cmp	r2, #95	@ 0x5f
 801864a:	d019      	beq.n	8018680 <rcl_validate_topic_name+0xb0>
 801864c:	2a2f      	cmp	r2, #47	@ 0x2f
 801864e:	d051      	beq.n	80186f4 <rcl_validate_topic_name+0x124>
 8018650:	2a7e      	cmp	r2, #126	@ 0x7e
 8018652:	d048      	beq.n	80186e6 <rcl_validate_topic_name+0x116>
 8018654:	2a7b      	cmp	r2, #123	@ 0x7b
 8018656:	d054      	beq.n	8018702 <rcl_validate_topic_name+0x132>
 8018658:	2a7d      	cmp	r2, #125	@ 0x7d
 801865a:	d161      	bne.n	8018720 <rcl_validate_topic_name+0x150>
 801865c:	2c00      	cmp	r4, #0
 801865e:	d155      	bne.n	801870c <rcl_validate_topic_name+0x13c>
 8018660:	2305      	movs	r3, #5
 8018662:	6033      	str	r3, [r6, #0]
 8018664:	b107      	cbz	r7, 8018668 <rcl_validate_topic_name+0x98>
 8018666:	6039      	str	r1, [r7, #0]
 8018668:	2000      	movs	r0, #0
 801866a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801866e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018672:	0752      	lsls	r2, r2, #29
 8018674:	d504      	bpl.n	8018680 <rcl_validate_topic_name+0xb0>
 8018676:	b11c      	cbz	r4, 8018680 <rcl_validate_topic_name+0xb0>
 8018678:	b111      	cbz	r1, 8018680 <rcl_validate_topic_name+0xb0>
 801867a:	1e4a      	subs	r2, r1, #1
 801867c:	429a      	cmp	r2, r3
 801867e:	d02d      	beq.n	80186dc <rcl_validate_topic_name+0x10c>
 8018680:	3101      	adds	r1, #1
 8018682:	4288      	cmp	r0, r1
 8018684:	d1d2      	bne.n	801862c <rcl_validate_topic_name+0x5c>
 8018686:	2c00      	cmp	r4, #0
 8018688:	d145      	bne.n	8018716 <rcl_validate_topic_name+0x146>
 801868a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801868e:	d04f      	beq.n	8018730 <rcl_validate_topic_name+0x160>
 8018690:	4620      	mov	r0, r4
 8018692:	2301      	movs	r3, #1
 8018694:	e006      	b.n	80186a4 <rcl_validate_topic_name+0xd4>
 8018696:	428b      	cmp	r3, r1
 8018698:	f105 0501 	add.w	r5, r5, #1
 801869c:	f103 0201 	add.w	r2, r3, #1
 80186a0:	d236      	bcs.n	8018710 <rcl_validate_topic_name+0x140>
 80186a2:	4613      	mov	r3, r2
 80186a4:	4580      	cmp	r8, r0
 80186a6:	f100 0001 	add.w	r0, r0, #1
 80186aa:	d0f4      	beq.n	8018696 <rcl_validate_topic_name+0xc6>
 80186ac:	782a      	ldrb	r2, [r5, #0]
 80186ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80186b0:	d1f1      	bne.n	8018696 <rcl_validate_topic_name+0xc6>
 80186b2:	786a      	ldrb	r2, [r5, #1]
 80186b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80186b8:	0754      	lsls	r4, r2, #29
 80186ba:	d5ec      	bpl.n	8018696 <rcl_validate_topic_name+0xc6>
 80186bc:	2204      	movs	r2, #4
 80186be:	6032      	str	r2, [r6, #0]
 80186c0:	2f00      	cmp	r7, #0
 80186c2:	d0d1      	beq.n	8018668 <rcl_validate_topic_name+0x98>
 80186c4:	603b      	str	r3, [r7, #0]
 80186c6:	2000      	movs	r0, #0
 80186c8:	e7aa      	b.n	8018620 <rcl_validate_topic_name+0x50>
 80186ca:	200b      	movs	r0, #11
 80186cc:	4770      	bx	lr
 80186ce:	2304      	movs	r3, #4
 80186d0:	6033      	str	r3, [r6, #0]
 80186d2:	2f00      	cmp	r7, #0
 80186d4:	d1a2      	bne.n	801861c <rcl_validate_topic_name+0x4c>
 80186d6:	e7c7      	b.n	8018668 <rcl_validate_topic_name+0x98>
 80186d8:	200b      	movs	r0, #11
 80186da:	e7a1      	b.n	8018620 <rcl_validate_topic_name+0x50>
 80186dc:	2309      	movs	r3, #9
 80186de:	6033      	str	r3, [r6, #0]
 80186e0:	2f00      	cmp	r7, #0
 80186e2:	d1c0      	bne.n	8018666 <rcl_validate_topic_name+0x96>
 80186e4:	e7c0      	b.n	8018668 <rcl_validate_topic_name+0x98>
 80186e6:	2900      	cmp	r1, #0
 80186e8:	d0ca      	beq.n	8018680 <rcl_validate_topic_name+0xb0>
 80186ea:	2306      	movs	r3, #6
 80186ec:	6033      	str	r3, [r6, #0]
 80186ee:	2f00      	cmp	r7, #0
 80186f0:	d1b9      	bne.n	8018666 <rcl_validate_topic_name+0x96>
 80186f2:	e7b9      	b.n	8018668 <rcl_validate_topic_name+0x98>
 80186f4:	2c00      	cmp	r4, #0
 80186f6:	d0c3      	beq.n	8018680 <rcl_validate_topic_name+0xb0>
 80186f8:	2308      	movs	r3, #8
 80186fa:	6033      	str	r3, [r6, #0]
 80186fc:	2f00      	cmp	r7, #0
 80186fe:	d1b2      	bne.n	8018666 <rcl_validate_topic_name+0x96>
 8018700:	e7b2      	b.n	8018668 <rcl_validate_topic_name+0x98>
 8018702:	2c00      	cmp	r4, #0
 8018704:	d1f8      	bne.n	80186f8 <rcl_validate_topic_name+0x128>
 8018706:	460b      	mov	r3, r1
 8018708:	2401      	movs	r4, #1
 801870a:	e7b9      	b.n	8018680 <rcl_validate_topic_name+0xb0>
 801870c:	2400      	movs	r4, #0
 801870e:	e7b7      	b.n	8018680 <rcl_validate_topic_name+0xb0>
 8018710:	2000      	movs	r0, #0
 8018712:	6030      	str	r0, [r6, #0]
 8018714:	e784      	b.n	8018620 <rcl_validate_topic_name+0x50>
 8018716:	2205      	movs	r2, #5
 8018718:	6032      	str	r2, [r6, #0]
 801871a:	2f00      	cmp	r7, #0
 801871c:	d1d2      	bne.n	80186c4 <rcl_validate_topic_name+0xf4>
 801871e:	e7a3      	b.n	8018668 <rcl_validate_topic_name+0x98>
 8018720:	2c00      	cmp	r4, #0
 8018722:	bf14      	ite	ne
 8018724:	2308      	movne	r3, #8
 8018726:	2303      	moveq	r3, #3
 8018728:	6033      	str	r3, [r6, #0]
 801872a:	2f00      	cmp	r7, #0
 801872c:	d19b      	bne.n	8018666 <rcl_validate_topic_name+0x96>
 801872e:	e79b      	b.n	8018668 <rcl_validate_topic_name+0x98>
 8018730:	2301      	movs	r3, #1
 8018732:	e00a      	b.n	801874a <rcl_validate_topic_name+0x17a>
 8018734:	2c01      	cmp	r4, #1
 8018736:	d013      	beq.n	8018760 <rcl_validate_topic_name+0x190>
 8018738:	4299      	cmp	r1, r3
 801873a:	f104 0401 	add.w	r4, r4, #1
 801873e:	f105 0501 	add.w	r5, r5, #1
 8018742:	f103 0201 	add.w	r2, r3, #1
 8018746:	d9e3      	bls.n	8018710 <rcl_validate_topic_name+0x140>
 8018748:	4613      	mov	r3, r2
 801874a:	45a0      	cmp	r8, r4
 801874c:	d0f4      	beq.n	8018738 <rcl_validate_topic_name+0x168>
 801874e:	782a      	ldrb	r2, [r5, #0]
 8018750:	2a2f      	cmp	r2, #47	@ 0x2f
 8018752:	d1ef      	bne.n	8018734 <rcl_validate_topic_name+0x164>
 8018754:	786a      	ldrb	r2, [r5, #1]
 8018756:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801875a:	0752      	lsls	r2, r2, #29
 801875c:	d5ec      	bpl.n	8018738 <rcl_validate_topic_name+0x168>
 801875e:	e7ad      	b.n	80186bc <rcl_validate_topic_name+0xec>
 8018760:	2307      	movs	r3, #7
 8018762:	6033      	str	r3, [r6, #0]
 8018764:	2f00      	cmp	r7, #0
 8018766:	f43f af7f 	beq.w	8018668 <rcl_validate_topic_name+0x98>
 801876a:	603c      	str	r4, [r7, #0]
 801876c:	2000      	movs	r0, #0
 801876e:	e757      	b.n	8018620 <rcl_validate_topic_name+0x50>
 8018770:	0801bc8a 	.word	0x0801bc8a

08018774 <rmw_create_guard_condition>:
 8018774:	b538      	push	{r3, r4, r5, lr}
 8018776:	4605      	mov	r5, r0
 8018778:	4807      	ldr	r0, [pc, #28]	@ (8018798 <rmw_create_guard_condition+0x24>)
 801877a:	f7fe fa31 	bl	8016be0 <get_memory>
 801877e:	b148      	cbz	r0, 8018794 <rmw_create_guard_condition+0x20>
 8018780:	6884      	ldr	r4, [r0, #8]
 8018782:	2300      	movs	r3, #0
 8018784:	7423      	strb	r3, [r4, #16]
 8018786:	61e5      	str	r5, [r4, #28]
 8018788:	f7fe fa92 	bl	8016cb0 <rmw_get_implementation_identifier>
 801878c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8018790:	f104 0014 	add.w	r0, r4, #20
 8018794:	bd38      	pop	{r3, r4, r5, pc}
 8018796:	bf00      	nop
 8018798:	2000b57c 	.word	0x2000b57c

0801879c <rmw_destroy_guard_condition>:
 801879c:	b508      	push	{r3, lr}
 801879e:	4b08      	ldr	r3, [pc, #32]	@ (80187c0 <rmw_destroy_guard_condition+0x24>)
 80187a0:	6819      	ldr	r1, [r3, #0]
 80187a2:	b911      	cbnz	r1, 80187aa <rmw_destroy_guard_condition+0xe>
 80187a4:	e00a      	b.n	80187bc <rmw_destroy_guard_condition+0x20>
 80187a6:	6849      	ldr	r1, [r1, #4]
 80187a8:	b141      	cbz	r1, 80187bc <rmw_destroy_guard_condition+0x20>
 80187aa:	688b      	ldr	r3, [r1, #8]
 80187ac:	3314      	adds	r3, #20
 80187ae:	4298      	cmp	r0, r3
 80187b0:	d1f9      	bne.n	80187a6 <rmw_destroy_guard_condition+0xa>
 80187b2:	4803      	ldr	r0, [pc, #12]	@ (80187c0 <rmw_destroy_guard_condition+0x24>)
 80187b4:	f7fe fa24 	bl	8016c00 <put_memory>
 80187b8:	2000      	movs	r0, #0
 80187ba:	bd08      	pop	{r3, pc}
 80187bc:	2001      	movs	r0, #1
 80187be:	bd08      	pop	{r3, pc}
 80187c0:	2000b57c 	.word	0x2000b57c

080187c4 <rmw_trigger_guard_condition>:
 80187c4:	b160      	cbz	r0, 80187e0 <rmw_trigger_guard_condition+0x1c>
 80187c6:	b510      	push	{r4, lr}
 80187c8:	4604      	mov	r4, r0
 80187ca:	6800      	ldr	r0, [r0, #0]
 80187cc:	f7f6 fac0 	bl	800ed50 <is_uxrce_rmw_identifier_valid>
 80187d0:	b908      	cbnz	r0, 80187d6 <rmw_trigger_guard_condition+0x12>
 80187d2:	2001      	movs	r0, #1
 80187d4:	bd10      	pop	{r4, pc}
 80187d6:	6863      	ldr	r3, [r4, #4]
 80187d8:	2201      	movs	r2, #1
 80187da:	741a      	strb	r2, [r3, #16]
 80187dc:	2000      	movs	r0, #0
 80187de:	bd10      	pop	{r4, pc}
 80187e0:	2001      	movs	r0, #1
 80187e2:	4770      	bx	lr

080187e4 <rosidl_runtime_c__String__init>:
 80187e4:	b510      	push	{r4, lr}
 80187e6:	4604      	mov	r4, r0
 80187e8:	b086      	sub	sp, #24
 80187ea:	b170      	cbz	r0, 801880a <rosidl_runtime_c__String__init+0x26>
 80187ec:	a801      	add	r0, sp, #4
 80187ee:	f7f4 fefb 	bl	800d5e8 <rcutils_get_default_allocator>
 80187f2:	9b01      	ldr	r3, [sp, #4]
 80187f4:	9905      	ldr	r1, [sp, #20]
 80187f6:	2001      	movs	r0, #1
 80187f8:	4798      	blx	r3
 80187fa:	6020      	str	r0, [r4, #0]
 80187fc:	b128      	cbz	r0, 801880a <rosidl_runtime_c__String__init+0x26>
 80187fe:	2100      	movs	r1, #0
 8018800:	2201      	movs	r2, #1
 8018802:	7001      	strb	r1, [r0, #0]
 8018804:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8018808:	4610      	mov	r0, r2
 801880a:	b006      	add	sp, #24
 801880c:	bd10      	pop	{r4, pc}
 801880e:	bf00      	nop

08018810 <rosidl_runtime_c__String__fini>:
 8018810:	b320      	cbz	r0, 801885c <rosidl_runtime_c__String__fini+0x4c>
 8018812:	b510      	push	{r4, lr}
 8018814:	6803      	ldr	r3, [r0, #0]
 8018816:	b086      	sub	sp, #24
 8018818:	4604      	mov	r4, r0
 801881a:	b173      	cbz	r3, 801883a <rosidl_runtime_c__String__fini+0x2a>
 801881c:	6883      	ldr	r3, [r0, #8]
 801881e:	b1f3      	cbz	r3, 801885e <rosidl_runtime_c__String__fini+0x4e>
 8018820:	a801      	add	r0, sp, #4
 8018822:	f7f4 fee1 	bl	800d5e8 <rcutils_get_default_allocator>
 8018826:	9b02      	ldr	r3, [sp, #8]
 8018828:	9905      	ldr	r1, [sp, #20]
 801882a:	6820      	ldr	r0, [r4, #0]
 801882c:	4798      	blx	r3
 801882e:	2300      	movs	r3, #0
 8018830:	e9c4 3300 	strd	r3, r3, [r4]
 8018834:	60a3      	str	r3, [r4, #8]
 8018836:	b006      	add	sp, #24
 8018838:	bd10      	pop	{r4, pc}
 801883a:	6843      	ldr	r3, [r0, #4]
 801883c:	b9db      	cbnz	r3, 8018876 <rosidl_runtime_c__String__fini+0x66>
 801883e:	6883      	ldr	r3, [r0, #8]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d0f8      	beq.n	8018836 <rosidl_runtime_c__String__fini+0x26>
 8018844:	4b12      	ldr	r3, [pc, #72]	@ (8018890 <rosidl_runtime_c__String__fini+0x80>)
 8018846:	4813      	ldr	r0, [pc, #76]	@ (8018894 <rosidl_runtime_c__String__fini+0x84>)
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	2251      	movs	r2, #81	@ 0x51
 801884c:	68db      	ldr	r3, [r3, #12]
 801884e:	2101      	movs	r1, #1
 8018850:	f000 fb82 	bl	8018f58 <fwrite>
 8018854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018858:	f000 f83e 	bl	80188d8 <exit>
 801885c:	4770      	bx	lr
 801885e:	4b0c      	ldr	r3, [pc, #48]	@ (8018890 <rosidl_runtime_c__String__fini+0x80>)
 8018860:	480d      	ldr	r0, [pc, #52]	@ (8018898 <rosidl_runtime_c__String__fini+0x88>)
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	224c      	movs	r2, #76	@ 0x4c
 8018866:	68db      	ldr	r3, [r3, #12]
 8018868:	2101      	movs	r1, #1
 801886a:	f000 fb75 	bl	8018f58 <fwrite>
 801886e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018872:	f000 f831 	bl	80188d8 <exit>
 8018876:	4b06      	ldr	r3, [pc, #24]	@ (8018890 <rosidl_runtime_c__String__fini+0x80>)
 8018878:	4808      	ldr	r0, [pc, #32]	@ (801889c <rosidl_runtime_c__String__fini+0x8c>)
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	224e      	movs	r2, #78	@ 0x4e
 801887e:	68db      	ldr	r3, [r3, #12]
 8018880:	2101      	movs	r1, #1
 8018882:	f000 fb69 	bl	8018f58 <fwrite>
 8018886:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801888a:	f000 f825 	bl	80188d8 <exit>
 801888e:	bf00      	nop
 8018890:	20000830 	.word	0x20000830
 8018894:	0801bbc8 	.word	0x0801bbc8
 8018898:	0801bb28 	.word	0x0801bb28
 801889c:	0801bb78 	.word	0x0801bb78

080188a0 <calloc>:
 80188a0:	4b02      	ldr	r3, [pc, #8]	@ (80188ac <calloc+0xc>)
 80188a2:	460a      	mov	r2, r1
 80188a4:	4601      	mov	r1, r0
 80188a6:	6818      	ldr	r0, [r3, #0]
 80188a8:	f000 b802 	b.w	80188b0 <_calloc_r>
 80188ac:	20000830 	.word	0x20000830

080188b0 <_calloc_r>:
 80188b0:	b570      	push	{r4, r5, r6, lr}
 80188b2:	fba1 5402 	umull	r5, r4, r1, r2
 80188b6:	b93c      	cbnz	r4, 80188c8 <_calloc_r+0x18>
 80188b8:	4629      	mov	r1, r5
 80188ba:	f000 f899 	bl	80189f0 <_malloc_r>
 80188be:	4606      	mov	r6, r0
 80188c0:	b928      	cbnz	r0, 80188ce <_calloc_r+0x1e>
 80188c2:	2600      	movs	r6, #0
 80188c4:	4630      	mov	r0, r6
 80188c6:	bd70      	pop	{r4, r5, r6, pc}
 80188c8:	220c      	movs	r2, #12
 80188ca:	6002      	str	r2, [r0, #0]
 80188cc:	e7f9      	b.n	80188c2 <_calloc_r+0x12>
 80188ce:	462a      	mov	r2, r5
 80188d0:	4621      	mov	r1, r4
 80188d2:	f000 fccf 	bl	8019274 <memset>
 80188d6:	e7f5      	b.n	80188c4 <_calloc_r+0x14>

080188d8 <exit>:
 80188d8:	b508      	push	{r3, lr}
 80188da:	4b06      	ldr	r3, [pc, #24]	@ (80188f4 <exit+0x1c>)
 80188dc:	4604      	mov	r4, r0
 80188de:	b113      	cbz	r3, 80188e6 <exit+0xe>
 80188e0:	2100      	movs	r1, #0
 80188e2:	f3af 8000 	nop.w
 80188e6:	4b04      	ldr	r3, [pc, #16]	@ (80188f8 <exit+0x20>)
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	b103      	cbz	r3, 80188ee <exit+0x16>
 80188ec:	4798      	blx	r3
 80188ee:	4620      	mov	r0, r4
 80188f0:	f7e9 fc58 	bl	80021a4 <_exit>
 80188f4:	00000000 	.word	0x00000000
 80188f8:	2000b8a0 	.word	0x2000b8a0

080188fc <getenv>:
 80188fc:	b507      	push	{r0, r1, r2, lr}
 80188fe:	4b04      	ldr	r3, [pc, #16]	@ (8018910 <getenv+0x14>)
 8018900:	4601      	mov	r1, r0
 8018902:	aa01      	add	r2, sp, #4
 8018904:	6818      	ldr	r0, [r3, #0]
 8018906:	f000 f805 	bl	8018914 <_findenv_r>
 801890a:	b003      	add	sp, #12
 801890c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018910:	20000830 	.word	0x20000830

08018914 <_findenv_r>:
 8018914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018918:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8018988 <_findenv_r+0x74>
 801891c:	4606      	mov	r6, r0
 801891e:	4689      	mov	r9, r1
 8018920:	4617      	mov	r7, r2
 8018922:	f000 fd9d 	bl	8019460 <__env_lock>
 8018926:	f8da 4000 	ldr.w	r4, [sl]
 801892a:	b134      	cbz	r4, 801893a <_findenv_r+0x26>
 801892c:	464b      	mov	r3, r9
 801892e:	4698      	mov	r8, r3
 8018930:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018934:	b13a      	cbz	r2, 8018946 <_findenv_r+0x32>
 8018936:	2a3d      	cmp	r2, #61	@ 0x3d
 8018938:	d1f9      	bne.n	801892e <_findenv_r+0x1a>
 801893a:	4630      	mov	r0, r6
 801893c:	f000 fd96 	bl	801946c <__env_unlock>
 8018940:	2000      	movs	r0, #0
 8018942:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018946:	eba8 0809 	sub.w	r8, r8, r9
 801894a:	46a3      	mov	fp, r4
 801894c:	f854 0b04 	ldr.w	r0, [r4], #4
 8018950:	2800      	cmp	r0, #0
 8018952:	d0f2      	beq.n	801893a <_findenv_r+0x26>
 8018954:	4642      	mov	r2, r8
 8018956:	4649      	mov	r1, r9
 8018958:	f000 fca1 	bl	801929e <strncmp>
 801895c:	2800      	cmp	r0, #0
 801895e:	d1f4      	bne.n	801894a <_findenv_r+0x36>
 8018960:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018964:	eb03 0508 	add.w	r5, r3, r8
 8018968:	f813 3008 	ldrb.w	r3, [r3, r8]
 801896c:	2b3d      	cmp	r3, #61	@ 0x3d
 801896e:	d1ec      	bne.n	801894a <_findenv_r+0x36>
 8018970:	f8da 3000 	ldr.w	r3, [sl]
 8018974:	ebab 0303 	sub.w	r3, fp, r3
 8018978:	109b      	asrs	r3, r3, #2
 801897a:	4630      	mov	r0, r6
 801897c:	603b      	str	r3, [r7, #0]
 801897e:	f000 fd75 	bl	801946c <__env_unlock>
 8018982:	1c68      	adds	r0, r5, #1
 8018984:	e7dd      	b.n	8018942 <_findenv_r+0x2e>
 8018986:	bf00      	nop
 8018988:	20000000 	.word	0x20000000

0801898c <malloc>:
 801898c:	4b02      	ldr	r3, [pc, #8]	@ (8018998 <malloc+0xc>)
 801898e:	4601      	mov	r1, r0
 8018990:	6818      	ldr	r0, [r3, #0]
 8018992:	f000 b82d 	b.w	80189f0 <_malloc_r>
 8018996:	bf00      	nop
 8018998:	20000830 	.word	0x20000830

0801899c <free>:
 801899c:	4b02      	ldr	r3, [pc, #8]	@ (80189a8 <free+0xc>)
 801899e:	4601      	mov	r1, r0
 80189a0:	6818      	ldr	r0, [r3, #0]
 80189a2:	f000 bd69 	b.w	8019478 <_free_r>
 80189a6:	bf00      	nop
 80189a8:	20000830 	.word	0x20000830

080189ac <sbrk_aligned>:
 80189ac:	b570      	push	{r4, r5, r6, lr}
 80189ae:	4e0f      	ldr	r6, [pc, #60]	@ (80189ec <sbrk_aligned+0x40>)
 80189b0:	460c      	mov	r4, r1
 80189b2:	6831      	ldr	r1, [r6, #0]
 80189b4:	4605      	mov	r5, r0
 80189b6:	b911      	cbnz	r1, 80189be <sbrk_aligned+0x12>
 80189b8:	f000 fcce 	bl	8019358 <_sbrk_r>
 80189bc:	6030      	str	r0, [r6, #0]
 80189be:	4621      	mov	r1, r4
 80189c0:	4628      	mov	r0, r5
 80189c2:	f000 fcc9 	bl	8019358 <_sbrk_r>
 80189c6:	1c43      	adds	r3, r0, #1
 80189c8:	d103      	bne.n	80189d2 <sbrk_aligned+0x26>
 80189ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80189ce:	4620      	mov	r0, r4
 80189d0:	bd70      	pop	{r4, r5, r6, pc}
 80189d2:	1cc4      	adds	r4, r0, #3
 80189d4:	f024 0403 	bic.w	r4, r4, #3
 80189d8:	42a0      	cmp	r0, r4
 80189da:	d0f8      	beq.n	80189ce <sbrk_aligned+0x22>
 80189dc:	1a21      	subs	r1, r4, r0
 80189de:	4628      	mov	r0, r5
 80189e0:	f000 fcba 	bl	8019358 <_sbrk_r>
 80189e4:	3001      	adds	r0, #1
 80189e6:	d1f2      	bne.n	80189ce <sbrk_aligned+0x22>
 80189e8:	e7ef      	b.n	80189ca <sbrk_aligned+0x1e>
 80189ea:	bf00      	nop
 80189ec:	2000b760 	.word	0x2000b760

080189f0 <_malloc_r>:
 80189f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189f4:	1ccd      	adds	r5, r1, #3
 80189f6:	f025 0503 	bic.w	r5, r5, #3
 80189fa:	3508      	adds	r5, #8
 80189fc:	2d0c      	cmp	r5, #12
 80189fe:	bf38      	it	cc
 8018a00:	250c      	movcc	r5, #12
 8018a02:	2d00      	cmp	r5, #0
 8018a04:	4606      	mov	r6, r0
 8018a06:	db01      	blt.n	8018a0c <_malloc_r+0x1c>
 8018a08:	42a9      	cmp	r1, r5
 8018a0a:	d904      	bls.n	8018a16 <_malloc_r+0x26>
 8018a0c:	230c      	movs	r3, #12
 8018a0e:	6033      	str	r3, [r6, #0]
 8018a10:	2000      	movs	r0, #0
 8018a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018aec <_malloc_r+0xfc>
 8018a1a:	f000 f869 	bl	8018af0 <__malloc_lock>
 8018a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8018a22:	461c      	mov	r4, r3
 8018a24:	bb44      	cbnz	r4, 8018a78 <_malloc_r+0x88>
 8018a26:	4629      	mov	r1, r5
 8018a28:	4630      	mov	r0, r6
 8018a2a:	f7ff ffbf 	bl	80189ac <sbrk_aligned>
 8018a2e:	1c43      	adds	r3, r0, #1
 8018a30:	4604      	mov	r4, r0
 8018a32:	d158      	bne.n	8018ae6 <_malloc_r+0xf6>
 8018a34:	f8d8 4000 	ldr.w	r4, [r8]
 8018a38:	4627      	mov	r7, r4
 8018a3a:	2f00      	cmp	r7, #0
 8018a3c:	d143      	bne.n	8018ac6 <_malloc_r+0xd6>
 8018a3e:	2c00      	cmp	r4, #0
 8018a40:	d04b      	beq.n	8018ada <_malloc_r+0xea>
 8018a42:	6823      	ldr	r3, [r4, #0]
 8018a44:	4639      	mov	r1, r7
 8018a46:	4630      	mov	r0, r6
 8018a48:	eb04 0903 	add.w	r9, r4, r3
 8018a4c:	f000 fc84 	bl	8019358 <_sbrk_r>
 8018a50:	4581      	cmp	r9, r0
 8018a52:	d142      	bne.n	8018ada <_malloc_r+0xea>
 8018a54:	6821      	ldr	r1, [r4, #0]
 8018a56:	1a6d      	subs	r5, r5, r1
 8018a58:	4629      	mov	r1, r5
 8018a5a:	4630      	mov	r0, r6
 8018a5c:	f7ff ffa6 	bl	80189ac <sbrk_aligned>
 8018a60:	3001      	adds	r0, #1
 8018a62:	d03a      	beq.n	8018ada <_malloc_r+0xea>
 8018a64:	6823      	ldr	r3, [r4, #0]
 8018a66:	442b      	add	r3, r5
 8018a68:	6023      	str	r3, [r4, #0]
 8018a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8018a6e:	685a      	ldr	r2, [r3, #4]
 8018a70:	bb62      	cbnz	r2, 8018acc <_malloc_r+0xdc>
 8018a72:	f8c8 7000 	str.w	r7, [r8]
 8018a76:	e00f      	b.n	8018a98 <_malloc_r+0xa8>
 8018a78:	6822      	ldr	r2, [r4, #0]
 8018a7a:	1b52      	subs	r2, r2, r5
 8018a7c:	d420      	bmi.n	8018ac0 <_malloc_r+0xd0>
 8018a7e:	2a0b      	cmp	r2, #11
 8018a80:	d917      	bls.n	8018ab2 <_malloc_r+0xc2>
 8018a82:	1961      	adds	r1, r4, r5
 8018a84:	42a3      	cmp	r3, r4
 8018a86:	6025      	str	r5, [r4, #0]
 8018a88:	bf18      	it	ne
 8018a8a:	6059      	strne	r1, [r3, #4]
 8018a8c:	6863      	ldr	r3, [r4, #4]
 8018a8e:	bf08      	it	eq
 8018a90:	f8c8 1000 	streq.w	r1, [r8]
 8018a94:	5162      	str	r2, [r4, r5]
 8018a96:	604b      	str	r3, [r1, #4]
 8018a98:	4630      	mov	r0, r6
 8018a9a:	f000 f82f 	bl	8018afc <__malloc_unlock>
 8018a9e:	f104 000b 	add.w	r0, r4, #11
 8018aa2:	1d23      	adds	r3, r4, #4
 8018aa4:	f020 0007 	bic.w	r0, r0, #7
 8018aa8:	1ac2      	subs	r2, r0, r3
 8018aaa:	bf1c      	itt	ne
 8018aac:	1a1b      	subne	r3, r3, r0
 8018aae:	50a3      	strne	r3, [r4, r2]
 8018ab0:	e7af      	b.n	8018a12 <_malloc_r+0x22>
 8018ab2:	6862      	ldr	r2, [r4, #4]
 8018ab4:	42a3      	cmp	r3, r4
 8018ab6:	bf0c      	ite	eq
 8018ab8:	f8c8 2000 	streq.w	r2, [r8]
 8018abc:	605a      	strne	r2, [r3, #4]
 8018abe:	e7eb      	b.n	8018a98 <_malloc_r+0xa8>
 8018ac0:	4623      	mov	r3, r4
 8018ac2:	6864      	ldr	r4, [r4, #4]
 8018ac4:	e7ae      	b.n	8018a24 <_malloc_r+0x34>
 8018ac6:	463c      	mov	r4, r7
 8018ac8:	687f      	ldr	r7, [r7, #4]
 8018aca:	e7b6      	b.n	8018a3a <_malloc_r+0x4a>
 8018acc:	461a      	mov	r2, r3
 8018ace:	685b      	ldr	r3, [r3, #4]
 8018ad0:	42a3      	cmp	r3, r4
 8018ad2:	d1fb      	bne.n	8018acc <_malloc_r+0xdc>
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	6053      	str	r3, [r2, #4]
 8018ad8:	e7de      	b.n	8018a98 <_malloc_r+0xa8>
 8018ada:	230c      	movs	r3, #12
 8018adc:	6033      	str	r3, [r6, #0]
 8018ade:	4630      	mov	r0, r6
 8018ae0:	f000 f80c 	bl	8018afc <__malloc_unlock>
 8018ae4:	e794      	b.n	8018a10 <_malloc_r+0x20>
 8018ae6:	6005      	str	r5, [r0, #0]
 8018ae8:	e7d6      	b.n	8018a98 <_malloc_r+0xa8>
 8018aea:	bf00      	nop
 8018aec:	2000b764 	.word	0x2000b764

08018af0 <__malloc_lock>:
 8018af0:	4801      	ldr	r0, [pc, #4]	@ (8018af8 <__malloc_lock+0x8>)
 8018af2:	f000 bc7e 	b.w	80193f2 <__retarget_lock_acquire_recursive>
 8018af6:	bf00      	nop
 8018af8:	2000b8a9 	.word	0x2000b8a9

08018afc <__malloc_unlock>:
 8018afc:	4801      	ldr	r0, [pc, #4]	@ (8018b04 <__malloc_unlock+0x8>)
 8018afe:	f000 bc79 	b.w	80193f4 <__retarget_lock_release_recursive>
 8018b02:	bf00      	nop
 8018b04:	2000b8a9 	.word	0x2000b8a9

08018b08 <srand>:
 8018b08:	b538      	push	{r3, r4, r5, lr}
 8018b0a:	4b10      	ldr	r3, [pc, #64]	@ (8018b4c <srand+0x44>)
 8018b0c:	681d      	ldr	r5, [r3, #0]
 8018b0e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018b10:	4604      	mov	r4, r0
 8018b12:	b9b3      	cbnz	r3, 8018b42 <srand+0x3a>
 8018b14:	2018      	movs	r0, #24
 8018b16:	f7ff ff39 	bl	801898c <malloc>
 8018b1a:	4602      	mov	r2, r0
 8018b1c:	6328      	str	r0, [r5, #48]	@ 0x30
 8018b1e:	b920      	cbnz	r0, 8018b2a <srand+0x22>
 8018b20:	4b0b      	ldr	r3, [pc, #44]	@ (8018b50 <srand+0x48>)
 8018b22:	480c      	ldr	r0, [pc, #48]	@ (8018b54 <srand+0x4c>)
 8018b24:	2146      	movs	r1, #70	@ 0x46
 8018b26:	f000 fc7d 	bl	8019424 <__assert_func>
 8018b2a:	490b      	ldr	r1, [pc, #44]	@ (8018b58 <srand+0x50>)
 8018b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8018b5c <srand+0x54>)
 8018b2e:	e9c0 1300 	strd	r1, r3, [r0]
 8018b32:	4b0b      	ldr	r3, [pc, #44]	@ (8018b60 <srand+0x58>)
 8018b34:	6083      	str	r3, [r0, #8]
 8018b36:	230b      	movs	r3, #11
 8018b38:	8183      	strh	r3, [r0, #12]
 8018b3a:	2100      	movs	r1, #0
 8018b3c:	2001      	movs	r0, #1
 8018b3e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018b42:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018b44:	2200      	movs	r2, #0
 8018b46:	611c      	str	r4, [r3, #16]
 8018b48:	615a      	str	r2, [r3, #20]
 8018b4a:	bd38      	pop	{r3, r4, r5, pc}
 8018b4c:	20000830 	.word	0x20000830
 8018b50:	0801bc1a 	.word	0x0801bc1a
 8018b54:	0801bc31 	.word	0x0801bc31
 8018b58:	abcd330e 	.word	0xabcd330e
 8018b5c:	e66d1234 	.word	0xe66d1234
 8018b60:	0005deec 	.word	0x0005deec

08018b64 <rand>:
 8018b64:	4b16      	ldr	r3, [pc, #88]	@ (8018bc0 <rand+0x5c>)
 8018b66:	b510      	push	{r4, lr}
 8018b68:	681c      	ldr	r4, [r3, #0]
 8018b6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018b6c:	b9b3      	cbnz	r3, 8018b9c <rand+0x38>
 8018b6e:	2018      	movs	r0, #24
 8018b70:	f7ff ff0c 	bl	801898c <malloc>
 8018b74:	4602      	mov	r2, r0
 8018b76:	6320      	str	r0, [r4, #48]	@ 0x30
 8018b78:	b920      	cbnz	r0, 8018b84 <rand+0x20>
 8018b7a:	4b12      	ldr	r3, [pc, #72]	@ (8018bc4 <rand+0x60>)
 8018b7c:	4812      	ldr	r0, [pc, #72]	@ (8018bc8 <rand+0x64>)
 8018b7e:	2152      	movs	r1, #82	@ 0x52
 8018b80:	f000 fc50 	bl	8019424 <__assert_func>
 8018b84:	4911      	ldr	r1, [pc, #68]	@ (8018bcc <rand+0x68>)
 8018b86:	4b12      	ldr	r3, [pc, #72]	@ (8018bd0 <rand+0x6c>)
 8018b88:	e9c0 1300 	strd	r1, r3, [r0]
 8018b8c:	4b11      	ldr	r3, [pc, #68]	@ (8018bd4 <rand+0x70>)
 8018b8e:	6083      	str	r3, [r0, #8]
 8018b90:	230b      	movs	r3, #11
 8018b92:	8183      	strh	r3, [r0, #12]
 8018b94:	2100      	movs	r1, #0
 8018b96:	2001      	movs	r0, #1
 8018b98:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018b9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018b9e:	480e      	ldr	r0, [pc, #56]	@ (8018bd8 <rand+0x74>)
 8018ba0:	690b      	ldr	r3, [r1, #16]
 8018ba2:	694c      	ldr	r4, [r1, #20]
 8018ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8018bdc <rand+0x78>)
 8018ba6:	4358      	muls	r0, r3
 8018ba8:	fb02 0004 	mla	r0, r2, r4, r0
 8018bac:	fba3 3202 	umull	r3, r2, r3, r2
 8018bb0:	3301      	adds	r3, #1
 8018bb2:	eb40 0002 	adc.w	r0, r0, r2
 8018bb6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018bba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018bbe:	bd10      	pop	{r4, pc}
 8018bc0:	20000830 	.word	0x20000830
 8018bc4:	0801bc1a 	.word	0x0801bc1a
 8018bc8:	0801bc31 	.word	0x0801bc31
 8018bcc:	abcd330e 	.word	0xabcd330e
 8018bd0:	e66d1234 	.word	0xe66d1234
 8018bd4:	0005deec 	.word	0x0005deec
 8018bd8:	5851f42d 	.word	0x5851f42d
 8018bdc:	4c957f2d 	.word	0x4c957f2d

08018be0 <realloc>:
 8018be0:	4b02      	ldr	r3, [pc, #8]	@ (8018bec <realloc+0xc>)
 8018be2:	460a      	mov	r2, r1
 8018be4:	4601      	mov	r1, r0
 8018be6:	6818      	ldr	r0, [r3, #0]
 8018be8:	f000 b802 	b.w	8018bf0 <_realloc_r>
 8018bec:	20000830 	.word	0x20000830

08018bf0 <_realloc_r>:
 8018bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bf4:	4680      	mov	r8, r0
 8018bf6:	4615      	mov	r5, r2
 8018bf8:	460c      	mov	r4, r1
 8018bfa:	b921      	cbnz	r1, 8018c06 <_realloc_r+0x16>
 8018bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c00:	4611      	mov	r1, r2
 8018c02:	f7ff bef5 	b.w	80189f0 <_malloc_r>
 8018c06:	b92a      	cbnz	r2, 8018c14 <_realloc_r+0x24>
 8018c08:	f000 fc36 	bl	8019478 <_free_r>
 8018c0c:	2400      	movs	r4, #0
 8018c0e:	4620      	mov	r0, r4
 8018c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c14:	f000 fc7a 	bl	801950c <_malloc_usable_size_r>
 8018c18:	4285      	cmp	r5, r0
 8018c1a:	4606      	mov	r6, r0
 8018c1c:	d802      	bhi.n	8018c24 <_realloc_r+0x34>
 8018c1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018c22:	d8f4      	bhi.n	8018c0e <_realloc_r+0x1e>
 8018c24:	4629      	mov	r1, r5
 8018c26:	4640      	mov	r0, r8
 8018c28:	f7ff fee2 	bl	80189f0 <_malloc_r>
 8018c2c:	4607      	mov	r7, r0
 8018c2e:	2800      	cmp	r0, #0
 8018c30:	d0ec      	beq.n	8018c0c <_realloc_r+0x1c>
 8018c32:	42b5      	cmp	r5, r6
 8018c34:	462a      	mov	r2, r5
 8018c36:	4621      	mov	r1, r4
 8018c38:	bf28      	it	cs
 8018c3a:	4632      	movcs	r2, r6
 8018c3c:	f000 fbe3 	bl	8019406 <memcpy>
 8018c40:	4621      	mov	r1, r4
 8018c42:	4640      	mov	r0, r8
 8018c44:	f000 fc18 	bl	8019478 <_free_r>
 8018c48:	463c      	mov	r4, r7
 8018c4a:	e7e0      	b.n	8018c0e <_realloc_r+0x1e>

08018c4c <_strtoul_l.constprop.0>:
 8018c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c50:	4e34      	ldr	r6, [pc, #208]	@ (8018d24 <_strtoul_l.constprop.0+0xd8>)
 8018c52:	4686      	mov	lr, r0
 8018c54:	460d      	mov	r5, r1
 8018c56:	4628      	mov	r0, r5
 8018c58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018c5c:	5d37      	ldrb	r7, [r6, r4]
 8018c5e:	f017 0708 	ands.w	r7, r7, #8
 8018c62:	d1f8      	bne.n	8018c56 <_strtoul_l.constprop.0+0xa>
 8018c64:	2c2d      	cmp	r4, #45	@ 0x2d
 8018c66:	d12f      	bne.n	8018cc8 <_strtoul_l.constprop.0+0x7c>
 8018c68:	782c      	ldrb	r4, [r5, #0]
 8018c6a:	2701      	movs	r7, #1
 8018c6c:	1c85      	adds	r5, r0, #2
 8018c6e:	f033 0010 	bics.w	r0, r3, #16
 8018c72:	d109      	bne.n	8018c88 <_strtoul_l.constprop.0+0x3c>
 8018c74:	2c30      	cmp	r4, #48	@ 0x30
 8018c76:	d12c      	bne.n	8018cd2 <_strtoul_l.constprop.0+0x86>
 8018c78:	7828      	ldrb	r0, [r5, #0]
 8018c7a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018c7e:	2858      	cmp	r0, #88	@ 0x58
 8018c80:	d127      	bne.n	8018cd2 <_strtoul_l.constprop.0+0x86>
 8018c82:	786c      	ldrb	r4, [r5, #1]
 8018c84:	2310      	movs	r3, #16
 8018c86:	3502      	adds	r5, #2
 8018c88:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018c8c:	2600      	movs	r6, #0
 8018c8e:	fbb8 f8f3 	udiv	r8, r8, r3
 8018c92:	fb03 f908 	mul.w	r9, r3, r8
 8018c96:	ea6f 0909 	mvn.w	r9, r9
 8018c9a:	4630      	mov	r0, r6
 8018c9c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018ca0:	f1bc 0f09 	cmp.w	ip, #9
 8018ca4:	d81c      	bhi.n	8018ce0 <_strtoul_l.constprop.0+0x94>
 8018ca6:	4664      	mov	r4, ip
 8018ca8:	42a3      	cmp	r3, r4
 8018caa:	dd2a      	ble.n	8018d02 <_strtoul_l.constprop.0+0xb6>
 8018cac:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8018cb0:	d007      	beq.n	8018cc2 <_strtoul_l.constprop.0+0x76>
 8018cb2:	4580      	cmp	r8, r0
 8018cb4:	d322      	bcc.n	8018cfc <_strtoul_l.constprop.0+0xb0>
 8018cb6:	d101      	bne.n	8018cbc <_strtoul_l.constprop.0+0x70>
 8018cb8:	45a1      	cmp	r9, r4
 8018cba:	db1f      	blt.n	8018cfc <_strtoul_l.constprop.0+0xb0>
 8018cbc:	fb00 4003 	mla	r0, r0, r3, r4
 8018cc0:	2601      	movs	r6, #1
 8018cc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018cc6:	e7e9      	b.n	8018c9c <_strtoul_l.constprop.0+0x50>
 8018cc8:	2c2b      	cmp	r4, #43	@ 0x2b
 8018cca:	bf04      	itt	eq
 8018ccc:	782c      	ldrbeq	r4, [r5, #0]
 8018cce:	1c85      	addeq	r5, r0, #2
 8018cd0:	e7cd      	b.n	8018c6e <_strtoul_l.constprop.0+0x22>
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d1d8      	bne.n	8018c88 <_strtoul_l.constprop.0+0x3c>
 8018cd6:	2c30      	cmp	r4, #48	@ 0x30
 8018cd8:	bf0c      	ite	eq
 8018cda:	2308      	moveq	r3, #8
 8018cdc:	230a      	movne	r3, #10
 8018cde:	e7d3      	b.n	8018c88 <_strtoul_l.constprop.0+0x3c>
 8018ce0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018ce4:	f1bc 0f19 	cmp.w	ip, #25
 8018ce8:	d801      	bhi.n	8018cee <_strtoul_l.constprop.0+0xa2>
 8018cea:	3c37      	subs	r4, #55	@ 0x37
 8018cec:	e7dc      	b.n	8018ca8 <_strtoul_l.constprop.0+0x5c>
 8018cee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018cf2:	f1bc 0f19 	cmp.w	ip, #25
 8018cf6:	d804      	bhi.n	8018d02 <_strtoul_l.constprop.0+0xb6>
 8018cf8:	3c57      	subs	r4, #87	@ 0x57
 8018cfa:	e7d5      	b.n	8018ca8 <_strtoul_l.constprop.0+0x5c>
 8018cfc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8018d00:	e7df      	b.n	8018cc2 <_strtoul_l.constprop.0+0x76>
 8018d02:	1c73      	adds	r3, r6, #1
 8018d04:	d106      	bne.n	8018d14 <_strtoul_l.constprop.0+0xc8>
 8018d06:	2322      	movs	r3, #34	@ 0x22
 8018d08:	f8ce 3000 	str.w	r3, [lr]
 8018d0c:	4630      	mov	r0, r6
 8018d0e:	b932      	cbnz	r2, 8018d1e <_strtoul_l.constprop.0+0xd2>
 8018d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d14:	b107      	cbz	r7, 8018d18 <_strtoul_l.constprop.0+0xcc>
 8018d16:	4240      	negs	r0, r0
 8018d18:	2a00      	cmp	r2, #0
 8018d1a:	d0f9      	beq.n	8018d10 <_strtoul_l.constprop.0+0xc4>
 8018d1c:	b106      	cbz	r6, 8018d20 <_strtoul_l.constprop.0+0xd4>
 8018d1e:	1e69      	subs	r1, r5, #1
 8018d20:	6011      	str	r1, [r2, #0]
 8018d22:	e7f5      	b.n	8018d10 <_strtoul_l.constprop.0+0xc4>
 8018d24:	0801bc8a 	.word	0x0801bc8a

08018d28 <strtoul>:
 8018d28:	4613      	mov	r3, r2
 8018d2a:	460a      	mov	r2, r1
 8018d2c:	4601      	mov	r1, r0
 8018d2e:	4802      	ldr	r0, [pc, #8]	@ (8018d38 <strtoul+0x10>)
 8018d30:	6800      	ldr	r0, [r0, #0]
 8018d32:	f7ff bf8b 	b.w	8018c4c <_strtoul_l.constprop.0>
 8018d36:	bf00      	nop
 8018d38:	20000830 	.word	0x20000830

08018d3c <std>:
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	b510      	push	{r4, lr}
 8018d40:	4604      	mov	r4, r0
 8018d42:	e9c0 3300 	strd	r3, r3, [r0]
 8018d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018d4a:	6083      	str	r3, [r0, #8]
 8018d4c:	8181      	strh	r1, [r0, #12]
 8018d4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8018d50:	81c2      	strh	r2, [r0, #14]
 8018d52:	6183      	str	r3, [r0, #24]
 8018d54:	4619      	mov	r1, r3
 8018d56:	2208      	movs	r2, #8
 8018d58:	305c      	adds	r0, #92	@ 0x5c
 8018d5a:	f000 fa8b 	bl	8019274 <memset>
 8018d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8018d94 <std+0x58>)
 8018d60:	6263      	str	r3, [r4, #36]	@ 0x24
 8018d62:	4b0d      	ldr	r3, [pc, #52]	@ (8018d98 <std+0x5c>)
 8018d64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018d66:	4b0d      	ldr	r3, [pc, #52]	@ (8018d9c <std+0x60>)
 8018d68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8018da0 <std+0x64>)
 8018d6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8018d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8018da4 <std+0x68>)
 8018d70:	6224      	str	r4, [r4, #32]
 8018d72:	429c      	cmp	r4, r3
 8018d74:	d006      	beq.n	8018d84 <std+0x48>
 8018d76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018d7a:	4294      	cmp	r4, r2
 8018d7c:	d002      	beq.n	8018d84 <std+0x48>
 8018d7e:	33d0      	adds	r3, #208	@ 0xd0
 8018d80:	429c      	cmp	r4, r3
 8018d82:	d105      	bne.n	8018d90 <std+0x54>
 8018d84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d8c:	f000 bb30 	b.w	80193f0 <__retarget_lock_init_recursive>
 8018d90:	bd10      	pop	{r4, pc}
 8018d92:	bf00      	nop
 8018d94:	08019001 	.word	0x08019001
 8018d98:	08019023 	.word	0x08019023
 8018d9c:	0801905b 	.word	0x0801905b
 8018da0:	0801907f 	.word	0x0801907f
 8018da4:	2000b768 	.word	0x2000b768

08018da8 <stdio_exit_handler>:
 8018da8:	4a02      	ldr	r2, [pc, #8]	@ (8018db4 <stdio_exit_handler+0xc>)
 8018daa:	4903      	ldr	r1, [pc, #12]	@ (8018db8 <stdio_exit_handler+0x10>)
 8018dac:	4803      	ldr	r0, [pc, #12]	@ (8018dbc <stdio_exit_handler+0x14>)
 8018dae:	f000 b869 	b.w	8018e84 <_fwalk_sglue>
 8018db2:	bf00      	nop
 8018db4:	20000824 	.word	0x20000824
 8018db8:	08019e75 	.word	0x08019e75
 8018dbc:	20000834 	.word	0x20000834

08018dc0 <cleanup_stdio>:
 8018dc0:	6841      	ldr	r1, [r0, #4]
 8018dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8018df4 <cleanup_stdio+0x34>)
 8018dc4:	4299      	cmp	r1, r3
 8018dc6:	b510      	push	{r4, lr}
 8018dc8:	4604      	mov	r4, r0
 8018dca:	d001      	beq.n	8018dd0 <cleanup_stdio+0x10>
 8018dcc:	f001 f852 	bl	8019e74 <_fflush_r>
 8018dd0:	68a1      	ldr	r1, [r4, #8]
 8018dd2:	4b09      	ldr	r3, [pc, #36]	@ (8018df8 <cleanup_stdio+0x38>)
 8018dd4:	4299      	cmp	r1, r3
 8018dd6:	d002      	beq.n	8018dde <cleanup_stdio+0x1e>
 8018dd8:	4620      	mov	r0, r4
 8018dda:	f001 f84b 	bl	8019e74 <_fflush_r>
 8018dde:	68e1      	ldr	r1, [r4, #12]
 8018de0:	4b06      	ldr	r3, [pc, #24]	@ (8018dfc <cleanup_stdio+0x3c>)
 8018de2:	4299      	cmp	r1, r3
 8018de4:	d004      	beq.n	8018df0 <cleanup_stdio+0x30>
 8018de6:	4620      	mov	r0, r4
 8018de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018dec:	f001 b842 	b.w	8019e74 <_fflush_r>
 8018df0:	bd10      	pop	{r4, pc}
 8018df2:	bf00      	nop
 8018df4:	2000b768 	.word	0x2000b768
 8018df8:	2000b7d0 	.word	0x2000b7d0
 8018dfc:	2000b838 	.word	0x2000b838

08018e00 <global_stdio_init.part.0>:
 8018e00:	b510      	push	{r4, lr}
 8018e02:	4b0b      	ldr	r3, [pc, #44]	@ (8018e30 <global_stdio_init.part.0+0x30>)
 8018e04:	4c0b      	ldr	r4, [pc, #44]	@ (8018e34 <global_stdio_init.part.0+0x34>)
 8018e06:	4a0c      	ldr	r2, [pc, #48]	@ (8018e38 <global_stdio_init.part.0+0x38>)
 8018e08:	601a      	str	r2, [r3, #0]
 8018e0a:	4620      	mov	r0, r4
 8018e0c:	2200      	movs	r2, #0
 8018e0e:	2104      	movs	r1, #4
 8018e10:	f7ff ff94 	bl	8018d3c <std>
 8018e14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018e18:	2201      	movs	r2, #1
 8018e1a:	2109      	movs	r1, #9
 8018e1c:	f7ff ff8e 	bl	8018d3c <std>
 8018e20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018e24:	2202      	movs	r2, #2
 8018e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e2a:	2112      	movs	r1, #18
 8018e2c:	f7ff bf86 	b.w	8018d3c <std>
 8018e30:	2000b8a0 	.word	0x2000b8a0
 8018e34:	2000b768 	.word	0x2000b768
 8018e38:	08018da9 	.word	0x08018da9

08018e3c <__sfp_lock_acquire>:
 8018e3c:	4801      	ldr	r0, [pc, #4]	@ (8018e44 <__sfp_lock_acquire+0x8>)
 8018e3e:	f000 bad8 	b.w	80193f2 <__retarget_lock_acquire_recursive>
 8018e42:	bf00      	nop
 8018e44:	2000b8aa 	.word	0x2000b8aa

08018e48 <__sfp_lock_release>:
 8018e48:	4801      	ldr	r0, [pc, #4]	@ (8018e50 <__sfp_lock_release+0x8>)
 8018e4a:	f000 bad3 	b.w	80193f4 <__retarget_lock_release_recursive>
 8018e4e:	bf00      	nop
 8018e50:	2000b8aa 	.word	0x2000b8aa

08018e54 <__sinit>:
 8018e54:	b510      	push	{r4, lr}
 8018e56:	4604      	mov	r4, r0
 8018e58:	f7ff fff0 	bl	8018e3c <__sfp_lock_acquire>
 8018e5c:	6a23      	ldr	r3, [r4, #32]
 8018e5e:	b11b      	cbz	r3, 8018e68 <__sinit+0x14>
 8018e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e64:	f7ff bff0 	b.w	8018e48 <__sfp_lock_release>
 8018e68:	4b04      	ldr	r3, [pc, #16]	@ (8018e7c <__sinit+0x28>)
 8018e6a:	6223      	str	r3, [r4, #32]
 8018e6c:	4b04      	ldr	r3, [pc, #16]	@ (8018e80 <__sinit+0x2c>)
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d1f5      	bne.n	8018e60 <__sinit+0xc>
 8018e74:	f7ff ffc4 	bl	8018e00 <global_stdio_init.part.0>
 8018e78:	e7f2      	b.n	8018e60 <__sinit+0xc>
 8018e7a:	bf00      	nop
 8018e7c:	08018dc1 	.word	0x08018dc1
 8018e80:	2000b8a0 	.word	0x2000b8a0

08018e84 <_fwalk_sglue>:
 8018e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e88:	4607      	mov	r7, r0
 8018e8a:	4688      	mov	r8, r1
 8018e8c:	4614      	mov	r4, r2
 8018e8e:	2600      	movs	r6, #0
 8018e90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018e94:	f1b9 0901 	subs.w	r9, r9, #1
 8018e98:	d505      	bpl.n	8018ea6 <_fwalk_sglue+0x22>
 8018e9a:	6824      	ldr	r4, [r4, #0]
 8018e9c:	2c00      	cmp	r4, #0
 8018e9e:	d1f7      	bne.n	8018e90 <_fwalk_sglue+0xc>
 8018ea0:	4630      	mov	r0, r6
 8018ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ea6:	89ab      	ldrh	r3, [r5, #12]
 8018ea8:	2b01      	cmp	r3, #1
 8018eaa:	d907      	bls.n	8018ebc <_fwalk_sglue+0x38>
 8018eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018eb0:	3301      	adds	r3, #1
 8018eb2:	d003      	beq.n	8018ebc <_fwalk_sglue+0x38>
 8018eb4:	4629      	mov	r1, r5
 8018eb6:	4638      	mov	r0, r7
 8018eb8:	47c0      	blx	r8
 8018eba:	4306      	orrs	r6, r0
 8018ebc:	3568      	adds	r5, #104	@ 0x68
 8018ebe:	e7e9      	b.n	8018e94 <_fwalk_sglue+0x10>

08018ec0 <_fwrite_r>:
 8018ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ec4:	9c08      	ldr	r4, [sp, #32]
 8018ec6:	468a      	mov	sl, r1
 8018ec8:	4690      	mov	r8, r2
 8018eca:	fb02 f903 	mul.w	r9, r2, r3
 8018ece:	4606      	mov	r6, r0
 8018ed0:	b118      	cbz	r0, 8018eda <_fwrite_r+0x1a>
 8018ed2:	6a03      	ldr	r3, [r0, #32]
 8018ed4:	b90b      	cbnz	r3, 8018eda <_fwrite_r+0x1a>
 8018ed6:	f7ff ffbd 	bl	8018e54 <__sinit>
 8018eda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018edc:	07dd      	lsls	r5, r3, #31
 8018ede:	d405      	bmi.n	8018eec <_fwrite_r+0x2c>
 8018ee0:	89a3      	ldrh	r3, [r4, #12]
 8018ee2:	0598      	lsls	r0, r3, #22
 8018ee4:	d402      	bmi.n	8018eec <_fwrite_r+0x2c>
 8018ee6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018ee8:	f000 fa83 	bl	80193f2 <__retarget_lock_acquire_recursive>
 8018eec:	89a3      	ldrh	r3, [r4, #12]
 8018eee:	0719      	lsls	r1, r3, #28
 8018ef0:	d516      	bpl.n	8018f20 <_fwrite_r+0x60>
 8018ef2:	6923      	ldr	r3, [r4, #16]
 8018ef4:	b1a3      	cbz	r3, 8018f20 <_fwrite_r+0x60>
 8018ef6:	2500      	movs	r5, #0
 8018ef8:	454d      	cmp	r5, r9
 8018efa:	d01f      	beq.n	8018f3c <_fwrite_r+0x7c>
 8018efc:	68a7      	ldr	r7, [r4, #8]
 8018efe:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8018f02:	3f01      	subs	r7, #1
 8018f04:	2f00      	cmp	r7, #0
 8018f06:	60a7      	str	r7, [r4, #8]
 8018f08:	da04      	bge.n	8018f14 <_fwrite_r+0x54>
 8018f0a:	69a3      	ldr	r3, [r4, #24]
 8018f0c:	429f      	cmp	r7, r3
 8018f0e:	db0f      	blt.n	8018f30 <_fwrite_r+0x70>
 8018f10:	290a      	cmp	r1, #10
 8018f12:	d00d      	beq.n	8018f30 <_fwrite_r+0x70>
 8018f14:	6823      	ldr	r3, [r4, #0]
 8018f16:	1c5a      	adds	r2, r3, #1
 8018f18:	6022      	str	r2, [r4, #0]
 8018f1a:	7019      	strb	r1, [r3, #0]
 8018f1c:	3501      	adds	r5, #1
 8018f1e:	e7eb      	b.n	8018ef8 <_fwrite_r+0x38>
 8018f20:	4621      	mov	r1, r4
 8018f22:	4630      	mov	r0, r6
 8018f24:	f000 f926 	bl	8019174 <__swsetup_r>
 8018f28:	2800      	cmp	r0, #0
 8018f2a:	d0e4      	beq.n	8018ef6 <_fwrite_r+0x36>
 8018f2c:	2500      	movs	r5, #0
 8018f2e:	e005      	b.n	8018f3c <_fwrite_r+0x7c>
 8018f30:	4622      	mov	r2, r4
 8018f32:	4630      	mov	r0, r6
 8018f34:	f000 f8e0 	bl	80190f8 <__swbuf_r>
 8018f38:	3001      	adds	r0, #1
 8018f3a:	d1ef      	bne.n	8018f1c <_fwrite_r+0x5c>
 8018f3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018f3e:	07da      	lsls	r2, r3, #31
 8018f40:	d405      	bmi.n	8018f4e <_fwrite_r+0x8e>
 8018f42:	89a3      	ldrh	r3, [r4, #12]
 8018f44:	059b      	lsls	r3, r3, #22
 8018f46:	d402      	bmi.n	8018f4e <_fwrite_r+0x8e>
 8018f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018f4a:	f000 fa53 	bl	80193f4 <__retarget_lock_release_recursive>
 8018f4e:	fbb5 f0f8 	udiv	r0, r5, r8
 8018f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018f58 <fwrite>:
 8018f58:	b507      	push	{r0, r1, r2, lr}
 8018f5a:	9300      	str	r3, [sp, #0]
 8018f5c:	4613      	mov	r3, r2
 8018f5e:	460a      	mov	r2, r1
 8018f60:	4601      	mov	r1, r0
 8018f62:	4803      	ldr	r0, [pc, #12]	@ (8018f70 <fwrite+0x18>)
 8018f64:	6800      	ldr	r0, [r0, #0]
 8018f66:	f7ff ffab 	bl	8018ec0 <_fwrite_r>
 8018f6a:	b003      	add	sp, #12
 8018f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f70:	20000830 	.word	0x20000830

08018f74 <iprintf>:
 8018f74:	b40f      	push	{r0, r1, r2, r3}
 8018f76:	b507      	push	{r0, r1, r2, lr}
 8018f78:	4906      	ldr	r1, [pc, #24]	@ (8018f94 <iprintf+0x20>)
 8018f7a:	ab04      	add	r3, sp, #16
 8018f7c:	6808      	ldr	r0, [r1, #0]
 8018f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f82:	6881      	ldr	r1, [r0, #8]
 8018f84:	9301      	str	r3, [sp, #4]
 8018f86:	f000 fc4b 	bl	8019820 <_vfiprintf_r>
 8018f8a:	b003      	add	sp, #12
 8018f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f90:	b004      	add	sp, #16
 8018f92:	4770      	bx	lr
 8018f94:	20000830 	.word	0x20000830

08018f98 <sniprintf>:
 8018f98:	b40c      	push	{r2, r3}
 8018f9a:	b530      	push	{r4, r5, lr}
 8018f9c:	4b17      	ldr	r3, [pc, #92]	@ (8018ffc <sniprintf+0x64>)
 8018f9e:	1e0c      	subs	r4, r1, #0
 8018fa0:	681d      	ldr	r5, [r3, #0]
 8018fa2:	b09d      	sub	sp, #116	@ 0x74
 8018fa4:	da08      	bge.n	8018fb8 <sniprintf+0x20>
 8018fa6:	238b      	movs	r3, #139	@ 0x8b
 8018fa8:	602b      	str	r3, [r5, #0]
 8018faa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018fae:	b01d      	add	sp, #116	@ 0x74
 8018fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018fb4:	b002      	add	sp, #8
 8018fb6:	4770      	bx	lr
 8018fb8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018fbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018fc0:	bf14      	ite	ne
 8018fc2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018fc6:	4623      	moveq	r3, r4
 8018fc8:	9304      	str	r3, [sp, #16]
 8018fca:	9307      	str	r3, [sp, #28]
 8018fcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018fd0:	9002      	str	r0, [sp, #8]
 8018fd2:	9006      	str	r0, [sp, #24]
 8018fd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018fd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018fda:	ab21      	add	r3, sp, #132	@ 0x84
 8018fdc:	a902      	add	r1, sp, #8
 8018fde:	4628      	mov	r0, r5
 8018fe0:	9301      	str	r3, [sp, #4]
 8018fe2:	f000 faf7 	bl	80195d4 <_svfiprintf_r>
 8018fe6:	1c43      	adds	r3, r0, #1
 8018fe8:	bfbc      	itt	lt
 8018fea:	238b      	movlt	r3, #139	@ 0x8b
 8018fec:	602b      	strlt	r3, [r5, #0]
 8018fee:	2c00      	cmp	r4, #0
 8018ff0:	d0dd      	beq.n	8018fae <sniprintf+0x16>
 8018ff2:	9b02      	ldr	r3, [sp, #8]
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	701a      	strb	r2, [r3, #0]
 8018ff8:	e7d9      	b.n	8018fae <sniprintf+0x16>
 8018ffa:	bf00      	nop
 8018ffc:	20000830 	.word	0x20000830

08019000 <__sread>:
 8019000:	b510      	push	{r4, lr}
 8019002:	460c      	mov	r4, r1
 8019004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019008:	f000 f994 	bl	8019334 <_read_r>
 801900c:	2800      	cmp	r0, #0
 801900e:	bfab      	itete	ge
 8019010:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019012:	89a3      	ldrhlt	r3, [r4, #12]
 8019014:	181b      	addge	r3, r3, r0
 8019016:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801901a:	bfac      	ite	ge
 801901c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801901e:	81a3      	strhlt	r3, [r4, #12]
 8019020:	bd10      	pop	{r4, pc}

08019022 <__swrite>:
 8019022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019026:	461f      	mov	r7, r3
 8019028:	898b      	ldrh	r3, [r1, #12]
 801902a:	05db      	lsls	r3, r3, #23
 801902c:	4605      	mov	r5, r0
 801902e:	460c      	mov	r4, r1
 8019030:	4616      	mov	r6, r2
 8019032:	d505      	bpl.n	8019040 <__swrite+0x1e>
 8019034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019038:	2302      	movs	r3, #2
 801903a:	2200      	movs	r2, #0
 801903c:	f000 f968 	bl	8019310 <_lseek_r>
 8019040:	89a3      	ldrh	r3, [r4, #12]
 8019042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019046:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801904a:	81a3      	strh	r3, [r4, #12]
 801904c:	4632      	mov	r2, r6
 801904e:	463b      	mov	r3, r7
 8019050:	4628      	mov	r0, r5
 8019052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019056:	f000 b98f 	b.w	8019378 <_write_r>

0801905a <__sseek>:
 801905a:	b510      	push	{r4, lr}
 801905c:	460c      	mov	r4, r1
 801905e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019062:	f000 f955 	bl	8019310 <_lseek_r>
 8019066:	1c43      	adds	r3, r0, #1
 8019068:	89a3      	ldrh	r3, [r4, #12]
 801906a:	bf15      	itete	ne
 801906c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801906e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019072:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019076:	81a3      	strheq	r3, [r4, #12]
 8019078:	bf18      	it	ne
 801907a:	81a3      	strhne	r3, [r4, #12]
 801907c:	bd10      	pop	{r4, pc}

0801907e <__sclose>:
 801907e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019082:	f000 b935 	b.w	80192f0 <_close_r>

08019086 <_vsniprintf_r>:
 8019086:	b530      	push	{r4, r5, lr}
 8019088:	4614      	mov	r4, r2
 801908a:	2c00      	cmp	r4, #0
 801908c:	b09b      	sub	sp, #108	@ 0x6c
 801908e:	4605      	mov	r5, r0
 8019090:	461a      	mov	r2, r3
 8019092:	da05      	bge.n	80190a0 <_vsniprintf_r+0x1a>
 8019094:	238b      	movs	r3, #139	@ 0x8b
 8019096:	6003      	str	r3, [r0, #0]
 8019098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801909c:	b01b      	add	sp, #108	@ 0x6c
 801909e:	bd30      	pop	{r4, r5, pc}
 80190a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80190a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80190a8:	bf14      	ite	ne
 80190aa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80190ae:	4623      	moveq	r3, r4
 80190b0:	9302      	str	r3, [sp, #8]
 80190b2:	9305      	str	r3, [sp, #20]
 80190b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80190b8:	9100      	str	r1, [sp, #0]
 80190ba:	9104      	str	r1, [sp, #16]
 80190bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80190c0:	4669      	mov	r1, sp
 80190c2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80190c4:	f000 fa86 	bl	80195d4 <_svfiprintf_r>
 80190c8:	1c43      	adds	r3, r0, #1
 80190ca:	bfbc      	itt	lt
 80190cc:	238b      	movlt	r3, #139	@ 0x8b
 80190ce:	602b      	strlt	r3, [r5, #0]
 80190d0:	2c00      	cmp	r4, #0
 80190d2:	d0e3      	beq.n	801909c <_vsniprintf_r+0x16>
 80190d4:	9b00      	ldr	r3, [sp, #0]
 80190d6:	2200      	movs	r2, #0
 80190d8:	701a      	strb	r2, [r3, #0]
 80190da:	e7df      	b.n	801909c <_vsniprintf_r+0x16>

080190dc <vsniprintf>:
 80190dc:	b507      	push	{r0, r1, r2, lr}
 80190de:	9300      	str	r3, [sp, #0]
 80190e0:	4613      	mov	r3, r2
 80190e2:	460a      	mov	r2, r1
 80190e4:	4601      	mov	r1, r0
 80190e6:	4803      	ldr	r0, [pc, #12]	@ (80190f4 <vsniprintf+0x18>)
 80190e8:	6800      	ldr	r0, [r0, #0]
 80190ea:	f7ff ffcc 	bl	8019086 <_vsniprintf_r>
 80190ee:	b003      	add	sp, #12
 80190f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80190f4:	20000830 	.word	0x20000830

080190f8 <__swbuf_r>:
 80190f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190fa:	460e      	mov	r6, r1
 80190fc:	4614      	mov	r4, r2
 80190fe:	4605      	mov	r5, r0
 8019100:	b118      	cbz	r0, 801910a <__swbuf_r+0x12>
 8019102:	6a03      	ldr	r3, [r0, #32]
 8019104:	b90b      	cbnz	r3, 801910a <__swbuf_r+0x12>
 8019106:	f7ff fea5 	bl	8018e54 <__sinit>
 801910a:	69a3      	ldr	r3, [r4, #24]
 801910c:	60a3      	str	r3, [r4, #8]
 801910e:	89a3      	ldrh	r3, [r4, #12]
 8019110:	071a      	lsls	r2, r3, #28
 8019112:	d501      	bpl.n	8019118 <__swbuf_r+0x20>
 8019114:	6923      	ldr	r3, [r4, #16]
 8019116:	b943      	cbnz	r3, 801912a <__swbuf_r+0x32>
 8019118:	4621      	mov	r1, r4
 801911a:	4628      	mov	r0, r5
 801911c:	f000 f82a 	bl	8019174 <__swsetup_r>
 8019120:	b118      	cbz	r0, 801912a <__swbuf_r+0x32>
 8019122:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019126:	4638      	mov	r0, r7
 8019128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801912a:	6823      	ldr	r3, [r4, #0]
 801912c:	6922      	ldr	r2, [r4, #16]
 801912e:	1a98      	subs	r0, r3, r2
 8019130:	6963      	ldr	r3, [r4, #20]
 8019132:	b2f6      	uxtb	r6, r6
 8019134:	4283      	cmp	r3, r0
 8019136:	4637      	mov	r7, r6
 8019138:	dc05      	bgt.n	8019146 <__swbuf_r+0x4e>
 801913a:	4621      	mov	r1, r4
 801913c:	4628      	mov	r0, r5
 801913e:	f000 fe99 	bl	8019e74 <_fflush_r>
 8019142:	2800      	cmp	r0, #0
 8019144:	d1ed      	bne.n	8019122 <__swbuf_r+0x2a>
 8019146:	68a3      	ldr	r3, [r4, #8]
 8019148:	3b01      	subs	r3, #1
 801914a:	60a3      	str	r3, [r4, #8]
 801914c:	6823      	ldr	r3, [r4, #0]
 801914e:	1c5a      	adds	r2, r3, #1
 8019150:	6022      	str	r2, [r4, #0]
 8019152:	701e      	strb	r6, [r3, #0]
 8019154:	6962      	ldr	r2, [r4, #20]
 8019156:	1c43      	adds	r3, r0, #1
 8019158:	429a      	cmp	r2, r3
 801915a:	d004      	beq.n	8019166 <__swbuf_r+0x6e>
 801915c:	89a3      	ldrh	r3, [r4, #12]
 801915e:	07db      	lsls	r3, r3, #31
 8019160:	d5e1      	bpl.n	8019126 <__swbuf_r+0x2e>
 8019162:	2e0a      	cmp	r6, #10
 8019164:	d1df      	bne.n	8019126 <__swbuf_r+0x2e>
 8019166:	4621      	mov	r1, r4
 8019168:	4628      	mov	r0, r5
 801916a:	f000 fe83 	bl	8019e74 <_fflush_r>
 801916e:	2800      	cmp	r0, #0
 8019170:	d0d9      	beq.n	8019126 <__swbuf_r+0x2e>
 8019172:	e7d6      	b.n	8019122 <__swbuf_r+0x2a>

08019174 <__swsetup_r>:
 8019174:	b538      	push	{r3, r4, r5, lr}
 8019176:	4b29      	ldr	r3, [pc, #164]	@ (801921c <__swsetup_r+0xa8>)
 8019178:	4605      	mov	r5, r0
 801917a:	6818      	ldr	r0, [r3, #0]
 801917c:	460c      	mov	r4, r1
 801917e:	b118      	cbz	r0, 8019188 <__swsetup_r+0x14>
 8019180:	6a03      	ldr	r3, [r0, #32]
 8019182:	b90b      	cbnz	r3, 8019188 <__swsetup_r+0x14>
 8019184:	f7ff fe66 	bl	8018e54 <__sinit>
 8019188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801918c:	0719      	lsls	r1, r3, #28
 801918e:	d422      	bmi.n	80191d6 <__swsetup_r+0x62>
 8019190:	06da      	lsls	r2, r3, #27
 8019192:	d407      	bmi.n	80191a4 <__swsetup_r+0x30>
 8019194:	2209      	movs	r2, #9
 8019196:	602a      	str	r2, [r5, #0]
 8019198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801919c:	81a3      	strh	r3, [r4, #12]
 801919e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80191a2:	e033      	b.n	801920c <__swsetup_r+0x98>
 80191a4:	0758      	lsls	r0, r3, #29
 80191a6:	d512      	bpl.n	80191ce <__swsetup_r+0x5a>
 80191a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80191aa:	b141      	cbz	r1, 80191be <__swsetup_r+0x4a>
 80191ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80191b0:	4299      	cmp	r1, r3
 80191b2:	d002      	beq.n	80191ba <__swsetup_r+0x46>
 80191b4:	4628      	mov	r0, r5
 80191b6:	f000 f95f 	bl	8019478 <_free_r>
 80191ba:	2300      	movs	r3, #0
 80191bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80191be:	89a3      	ldrh	r3, [r4, #12]
 80191c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80191c4:	81a3      	strh	r3, [r4, #12]
 80191c6:	2300      	movs	r3, #0
 80191c8:	6063      	str	r3, [r4, #4]
 80191ca:	6923      	ldr	r3, [r4, #16]
 80191cc:	6023      	str	r3, [r4, #0]
 80191ce:	89a3      	ldrh	r3, [r4, #12]
 80191d0:	f043 0308 	orr.w	r3, r3, #8
 80191d4:	81a3      	strh	r3, [r4, #12]
 80191d6:	6923      	ldr	r3, [r4, #16]
 80191d8:	b94b      	cbnz	r3, 80191ee <__swsetup_r+0x7a>
 80191da:	89a3      	ldrh	r3, [r4, #12]
 80191dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80191e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80191e4:	d003      	beq.n	80191ee <__swsetup_r+0x7a>
 80191e6:	4621      	mov	r1, r4
 80191e8:	4628      	mov	r0, r5
 80191ea:	f000 fea3 	bl	8019f34 <__smakebuf_r>
 80191ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80191f2:	f013 0201 	ands.w	r2, r3, #1
 80191f6:	d00a      	beq.n	801920e <__swsetup_r+0x9a>
 80191f8:	2200      	movs	r2, #0
 80191fa:	60a2      	str	r2, [r4, #8]
 80191fc:	6962      	ldr	r2, [r4, #20]
 80191fe:	4252      	negs	r2, r2
 8019200:	61a2      	str	r2, [r4, #24]
 8019202:	6922      	ldr	r2, [r4, #16]
 8019204:	b942      	cbnz	r2, 8019218 <__swsetup_r+0xa4>
 8019206:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801920a:	d1c5      	bne.n	8019198 <__swsetup_r+0x24>
 801920c:	bd38      	pop	{r3, r4, r5, pc}
 801920e:	0799      	lsls	r1, r3, #30
 8019210:	bf58      	it	pl
 8019212:	6962      	ldrpl	r2, [r4, #20]
 8019214:	60a2      	str	r2, [r4, #8]
 8019216:	e7f4      	b.n	8019202 <__swsetup_r+0x8e>
 8019218:	2000      	movs	r0, #0
 801921a:	e7f7      	b.n	801920c <__swsetup_r+0x98>
 801921c:	20000830 	.word	0x20000830

08019220 <memcmp>:
 8019220:	b510      	push	{r4, lr}
 8019222:	3901      	subs	r1, #1
 8019224:	4402      	add	r2, r0
 8019226:	4290      	cmp	r0, r2
 8019228:	d101      	bne.n	801922e <memcmp+0xe>
 801922a:	2000      	movs	r0, #0
 801922c:	e005      	b.n	801923a <memcmp+0x1a>
 801922e:	7803      	ldrb	r3, [r0, #0]
 8019230:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019234:	42a3      	cmp	r3, r4
 8019236:	d001      	beq.n	801923c <memcmp+0x1c>
 8019238:	1b18      	subs	r0, r3, r4
 801923a:	bd10      	pop	{r4, pc}
 801923c:	3001      	adds	r0, #1
 801923e:	e7f2      	b.n	8019226 <memcmp+0x6>

08019240 <memmove>:
 8019240:	4288      	cmp	r0, r1
 8019242:	b510      	push	{r4, lr}
 8019244:	eb01 0402 	add.w	r4, r1, r2
 8019248:	d902      	bls.n	8019250 <memmove+0x10>
 801924a:	4284      	cmp	r4, r0
 801924c:	4623      	mov	r3, r4
 801924e:	d807      	bhi.n	8019260 <memmove+0x20>
 8019250:	1e43      	subs	r3, r0, #1
 8019252:	42a1      	cmp	r1, r4
 8019254:	d008      	beq.n	8019268 <memmove+0x28>
 8019256:	f811 2b01 	ldrb.w	r2, [r1], #1
 801925a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801925e:	e7f8      	b.n	8019252 <memmove+0x12>
 8019260:	4402      	add	r2, r0
 8019262:	4601      	mov	r1, r0
 8019264:	428a      	cmp	r2, r1
 8019266:	d100      	bne.n	801926a <memmove+0x2a>
 8019268:	bd10      	pop	{r4, pc}
 801926a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801926e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019272:	e7f7      	b.n	8019264 <memmove+0x24>

08019274 <memset>:
 8019274:	4402      	add	r2, r0
 8019276:	4603      	mov	r3, r0
 8019278:	4293      	cmp	r3, r2
 801927a:	d100      	bne.n	801927e <memset+0xa>
 801927c:	4770      	bx	lr
 801927e:	f803 1b01 	strb.w	r1, [r3], #1
 8019282:	e7f9      	b.n	8019278 <memset+0x4>

08019284 <strchr>:
 8019284:	b2c9      	uxtb	r1, r1
 8019286:	4603      	mov	r3, r0
 8019288:	4618      	mov	r0, r3
 801928a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801928e:	b112      	cbz	r2, 8019296 <strchr+0x12>
 8019290:	428a      	cmp	r2, r1
 8019292:	d1f9      	bne.n	8019288 <strchr+0x4>
 8019294:	4770      	bx	lr
 8019296:	2900      	cmp	r1, #0
 8019298:	bf18      	it	ne
 801929a:	2000      	movne	r0, #0
 801929c:	4770      	bx	lr

0801929e <strncmp>:
 801929e:	b510      	push	{r4, lr}
 80192a0:	b16a      	cbz	r2, 80192be <strncmp+0x20>
 80192a2:	3901      	subs	r1, #1
 80192a4:	1884      	adds	r4, r0, r2
 80192a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80192ae:	429a      	cmp	r2, r3
 80192b0:	d103      	bne.n	80192ba <strncmp+0x1c>
 80192b2:	42a0      	cmp	r0, r4
 80192b4:	d001      	beq.n	80192ba <strncmp+0x1c>
 80192b6:	2a00      	cmp	r2, #0
 80192b8:	d1f5      	bne.n	80192a6 <strncmp+0x8>
 80192ba:	1ad0      	subs	r0, r2, r3
 80192bc:	bd10      	pop	{r4, pc}
 80192be:	4610      	mov	r0, r2
 80192c0:	e7fc      	b.n	80192bc <strncmp+0x1e>

080192c2 <strstr>:
 80192c2:	780a      	ldrb	r2, [r1, #0]
 80192c4:	b570      	push	{r4, r5, r6, lr}
 80192c6:	b96a      	cbnz	r2, 80192e4 <strstr+0x22>
 80192c8:	bd70      	pop	{r4, r5, r6, pc}
 80192ca:	429a      	cmp	r2, r3
 80192cc:	d109      	bne.n	80192e2 <strstr+0x20>
 80192ce:	460c      	mov	r4, r1
 80192d0:	4605      	mov	r5, r0
 80192d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d0f6      	beq.n	80192c8 <strstr+0x6>
 80192da:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80192de:	429e      	cmp	r6, r3
 80192e0:	d0f7      	beq.n	80192d2 <strstr+0x10>
 80192e2:	3001      	adds	r0, #1
 80192e4:	7803      	ldrb	r3, [r0, #0]
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d1ef      	bne.n	80192ca <strstr+0x8>
 80192ea:	4618      	mov	r0, r3
 80192ec:	e7ec      	b.n	80192c8 <strstr+0x6>
	...

080192f0 <_close_r>:
 80192f0:	b538      	push	{r3, r4, r5, lr}
 80192f2:	4d06      	ldr	r5, [pc, #24]	@ (801930c <_close_r+0x1c>)
 80192f4:	2300      	movs	r3, #0
 80192f6:	4604      	mov	r4, r0
 80192f8:	4608      	mov	r0, r1
 80192fa:	602b      	str	r3, [r5, #0]
 80192fc:	f7e8 ff96 	bl	800222c <_close>
 8019300:	1c43      	adds	r3, r0, #1
 8019302:	d102      	bne.n	801930a <_close_r+0x1a>
 8019304:	682b      	ldr	r3, [r5, #0]
 8019306:	b103      	cbz	r3, 801930a <_close_r+0x1a>
 8019308:	6023      	str	r3, [r4, #0]
 801930a:	bd38      	pop	{r3, r4, r5, pc}
 801930c:	2000b8a4 	.word	0x2000b8a4

08019310 <_lseek_r>:
 8019310:	b538      	push	{r3, r4, r5, lr}
 8019312:	4d07      	ldr	r5, [pc, #28]	@ (8019330 <_lseek_r+0x20>)
 8019314:	4604      	mov	r4, r0
 8019316:	4608      	mov	r0, r1
 8019318:	4611      	mov	r1, r2
 801931a:	2200      	movs	r2, #0
 801931c:	602a      	str	r2, [r5, #0]
 801931e:	461a      	mov	r2, r3
 8019320:	f7e8 ffab 	bl	800227a <_lseek>
 8019324:	1c43      	adds	r3, r0, #1
 8019326:	d102      	bne.n	801932e <_lseek_r+0x1e>
 8019328:	682b      	ldr	r3, [r5, #0]
 801932a:	b103      	cbz	r3, 801932e <_lseek_r+0x1e>
 801932c:	6023      	str	r3, [r4, #0]
 801932e:	bd38      	pop	{r3, r4, r5, pc}
 8019330:	2000b8a4 	.word	0x2000b8a4

08019334 <_read_r>:
 8019334:	b538      	push	{r3, r4, r5, lr}
 8019336:	4d07      	ldr	r5, [pc, #28]	@ (8019354 <_read_r+0x20>)
 8019338:	4604      	mov	r4, r0
 801933a:	4608      	mov	r0, r1
 801933c:	4611      	mov	r1, r2
 801933e:	2200      	movs	r2, #0
 8019340:	602a      	str	r2, [r5, #0]
 8019342:	461a      	mov	r2, r3
 8019344:	f7e8 ff39 	bl	80021ba <_read>
 8019348:	1c43      	adds	r3, r0, #1
 801934a:	d102      	bne.n	8019352 <_read_r+0x1e>
 801934c:	682b      	ldr	r3, [r5, #0]
 801934e:	b103      	cbz	r3, 8019352 <_read_r+0x1e>
 8019350:	6023      	str	r3, [r4, #0]
 8019352:	bd38      	pop	{r3, r4, r5, pc}
 8019354:	2000b8a4 	.word	0x2000b8a4

08019358 <_sbrk_r>:
 8019358:	b538      	push	{r3, r4, r5, lr}
 801935a:	4d06      	ldr	r5, [pc, #24]	@ (8019374 <_sbrk_r+0x1c>)
 801935c:	2300      	movs	r3, #0
 801935e:	4604      	mov	r4, r0
 8019360:	4608      	mov	r0, r1
 8019362:	602b      	str	r3, [r5, #0]
 8019364:	f7e8 ff96 	bl	8002294 <_sbrk>
 8019368:	1c43      	adds	r3, r0, #1
 801936a:	d102      	bne.n	8019372 <_sbrk_r+0x1a>
 801936c:	682b      	ldr	r3, [r5, #0]
 801936e:	b103      	cbz	r3, 8019372 <_sbrk_r+0x1a>
 8019370:	6023      	str	r3, [r4, #0]
 8019372:	bd38      	pop	{r3, r4, r5, pc}
 8019374:	2000b8a4 	.word	0x2000b8a4

08019378 <_write_r>:
 8019378:	b538      	push	{r3, r4, r5, lr}
 801937a:	4d07      	ldr	r5, [pc, #28]	@ (8019398 <_write_r+0x20>)
 801937c:	4604      	mov	r4, r0
 801937e:	4608      	mov	r0, r1
 8019380:	4611      	mov	r1, r2
 8019382:	2200      	movs	r2, #0
 8019384:	602a      	str	r2, [r5, #0]
 8019386:	461a      	mov	r2, r3
 8019388:	f7e8 ff34 	bl	80021f4 <_write>
 801938c:	1c43      	adds	r3, r0, #1
 801938e:	d102      	bne.n	8019396 <_write_r+0x1e>
 8019390:	682b      	ldr	r3, [r5, #0]
 8019392:	b103      	cbz	r3, 8019396 <_write_r+0x1e>
 8019394:	6023      	str	r3, [r4, #0]
 8019396:	bd38      	pop	{r3, r4, r5, pc}
 8019398:	2000b8a4 	.word	0x2000b8a4

0801939c <__errno>:
 801939c:	4b01      	ldr	r3, [pc, #4]	@ (80193a4 <__errno+0x8>)
 801939e:	6818      	ldr	r0, [r3, #0]
 80193a0:	4770      	bx	lr
 80193a2:	bf00      	nop
 80193a4:	20000830 	.word	0x20000830

080193a8 <__libc_init_array>:
 80193a8:	b570      	push	{r4, r5, r6, lr}
 80193aa:	4d0d      	ldr	r5, [pc, #52]	@ (80193e0 <__libc_init_array+0x38>)
 80193ac:	4c0d      	ldr	r4, [pc, #52]	@ (80193e4 <__libc_init_array+0x3c>)
 80193ae:	1b64      	subs	r4, r4, r5
 80193b0:	10a4      	asrs	r4, r4, #2
 80193b2:	2600      	movs	r6, #0
 80193b4:	42a6      	cmp	r6, r4
 80193b6:	d109      	bne.n	80193cc <__libc_init_array+0x24>
 80193b8:	4d0b      	ldr	r5, [pc, #44]	@ (80193e8 <__libc_init_array+0x40>)
 80193ba:	4c0c      	ldr	r4, [pc, #48]	@ (80193ec <__libc_init_array+0x44>)
 80193bc:	f001 f9d6 	bl	801a76c <_init>
 80193c0:	1b64      	subs	r4, r4, r5
 80193c2:	10a4      	asrs	r4, r4, #2
 80193c4:	2600      	movs	r6, #0
 80193c6:	42a6      	cmp	r6, r4
 80193c8:	d105      	bne.n	80193d6 <__libc_init_array+0x2e>
 80193ca:	bd70      	pop	{r4, r5, r6, pc}
 80193cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80193d0:	4798      	blx	r3
 80193d2:	3601      	adds	r6, #1
 80193d4:	e7ee      	b.n	80193b4 <__libc_init_array+0xc>
 80193d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80193da:	4798      	blx	r3
 80193dc:	3601      	adds	r6, #1
 80193de:	e7f2      	b.n	80193c6 <__libc_init_array+0x1e>
 80193e0:	0801be78 	.word	0x0801be78
 80193e4:	0801be78 	.word	0x0801be78
 80193e8:	0801be78 	.word	0x0801be78
 80193ec:	0801be88 	.word	0x0801be88

080193f0 <__retarget_lock_init_recursive>:
 80193f0:	4770      	bx	lr

080193f2 <__retarget_lock_acquire_recursive>:
 80193f2:	4770      	bx	lr

080193f4 <__retarget_lock_release_recursive>:
 80193f4:	4770      	bx	lr

080193f6 <strcpy>:
 80193f6:	4603      	mov	r3, r0
 80193f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80193fc:	f803 2b01 	strb.w	r2, [r3], #1
 8019400:	2a00      	cmp	r2, #0
 8019402:	d1f9      	bne.n	80193f8 <strcpy+0x2>
 8019404:	4770      	bx	lr

08019406 <memcpy>:
 8019406:	440a      	add	r2, r1
 8019408:	4291      	cmp	r1, r2
 801940a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801940e:	d100      	bne.n	8019412 <memcpy+0xc>
 8019410:	4770      	bx	lr
 8019412:	b510      	push	{r4, lr}
 8019414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019418:	f803 4f01 	strb.w	r4, [r3, #1]!
 801941c:	4291      	cmp	r1, r2
 801941e:	d1f9      	bne.n	8019414 <memcpy+0xe>
 8019420:	bd10      	pop	{r4, pc}
	...

08019424 <__assert_func>:
 8019424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019426:	4614      	mov	r4, r2
 8019428:	461a      	mov	r2, r3
 801942a:	4b09      	ldr	r3, [pc, #36]	@ (8019450 <__assert_func+0x2c>)
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	4605      	mov	r5, r0
 8019430:	68d8      	ldr	r0, [r3, #12]
 8019432:	b954      	cbnz	r4, 801944a <__assert_func+0x26>
 8019434:	4b07      	ldr	r3, [pc, #28]	@ (8019454 <__assert_func+0x30>)
 8019436:	461c      	mov	r4, r3
 8019438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801943c:	9100      	str	r1, [sp, #0]
 801943e:	462b      	mov	r3, r5
 8019440:	4905      	ldr	r1, [pc, #20]	@ (8019458 <__assert_func+0x34>)
 8019442:	f000 fd3f 	bl	8019ec4 <fiprintf>
 8019446:	f000 fdd3 	bl	8019ff0 <abort>
 801944a:	4b04      	ldr	r3, [pc, #16]	@ (801945c <__assert_func+0x38>)
 801944c:	e7f4      	b.n	8019438 <__assert_func+0x14>
 801944e:	bf00      	nop
 8019450:	20000830 	.word	0x20000830
 8019454:	0801bdc5 	.word	0x0801bdc5
 8019458:	0801bd97 	.word	0x0801bd97
 801945c:	0801bd8a 	.word	0x0801bd8a

08019460 <__env_lock>:
 8019460:	4801      	ldr	r0, [pc, #4]	@ (8019468 <__env_lock+0x8>)
 8019462:	f7ff bfc6 	b.w	80193f2 <__retarget_lock_acquire_recursive>
 8019466:	bf00      	nop
 8019468:	2000b8a8 	.word	0x2000b8a8

0801946c <__env_unlock>:
 801946c:	4801      	ldr	r0, [pc, #4]	@ (8019474 <__env_unlock+0x8>)
 801946e:	f7ff bfc1 	b.w	80193f4 <__retarget_lock_release_recursive>
 8019472:	bf00      	nop
 8019474:	2000b8a8 	.word	0x2000b8a8

08019478 <_free_r>:
 8019478:	b538      	push	{r3, r4, r5, lr}
 801947a:	4605      	mov	r5, r0
 801947c:	2900      	cmp	r1, #0
 801947e:	d041      	beq.n	8019504 <_free_r+0x8c>
 8019480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019484:	1f0c      	subs	r4, r1, #4
 8019486:	2b00      	cmp	r3, #0
 8019488:	bfb8      	it	lt
 801948a:	18e4      	addlt	r4, r4, r3
 801948c:	f7ff fb30 	bl	8018af0 <__malloc_lock>
 8019490:	4a1d      	ldr	r2, [pc, #116]	@ (8019508 <_free_r+0x90>)
 8019492:	6813      	ldr	r3, [r2, #0]
 8019494:	b933      	cbnz	r3, 80194a4 <_free_r+0x2c>
 8019496:	6063      	str	r3, [r4, #4]
 8019498:	6014      	str	r4, [r2, #0]
 801949a:	4628      	mov	r0, r5
 801949c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194a0:	f7ff bb2c 	b.w	8018afc <__malloc_unlock>
 80194a4:	42a3      	cmp	r3, r4
 80194a6:	d908      	bls.n	80194ba <_free_r+0x42>
 80194a8:	6820      	ldr	r0, [r4, #0]
 80194aa:	1821      	adds	r1, r4, r0
 80194ac:	428b      	cmp	r3, r1
 80194ae:	bf01      	itttt	eq
 80194b0:	6819      	ldreq	r1, [r3, #0]
 80194b2:	685b      	ldreq	r3, [r3, #4]
 80194b4:	1809      	addeq	r1, r1, r0
 80194b6:	6021      	streq	r1, [r4, #0]
 80194b8:	e7ed      	b.n	8019496 <_free_r+0x1e>
 80194ba:	461a      	mov	r2, r3
 80194bc:	685b      	ldr	r3, [r3, #4]
 80194be:	b10b      	cbz	r3, 80194c4 <_free_r+0x4c>
 80194c0:	42a3      	cmp	r3, r4
 80194c2:	d9fa      	bls.n	80194ba <_free_r+0x42>
 80194c4:	6811      	ldr	r1, [r2, #0]
 80194c6:	1850      	adds	r0, r2, r1
 80194c8:	42a0      	cmp	r0, r4
 80194ca:	d10b      	bne.n	80194e4 <_free_r+0x6c>
 80194cc:	6820      	ldr	r0, [r4, #0]
 80194ce:	4401      	add	r1, r0
 80194d0:	1850      	adds	r0, r2, r1
 80194d2:	4283      	cmp	r3, r0
 80194d4:	6011      	str	r1, [r2, #0]
 80194d6:	d1e0      	bne.n	801949a <_free_r+0x22>
 80194d8:	6818      	ldr	r0, [r3, #0]
 80194da:	685b      	ldr	r3, [r3, #4]
 80194dc:	6053      	str	r3, [r2, #4]
 80194de:	4408      	add	r0, r1
 80194e0:	6010      	str	r0, [r2, #0]
 80194e2:	e7da      	b.n	801949a <_free_r+0x22>
 80194e4:	d902      	bls.n	80194ec <_free_r+0x74>
 80194e6:	230c      	movs	r3, #12
 80194e8:	602b      	str	r3, [r5, #0]
 80194ea:	e7d6      	b.n	801949a <_free_r+0x22>
 80194ec:	6820      	ldr	r0, [r4, #0]
 80194ee:	1821      	adds	r1, r4, r0
 80194f0:	428b      	cmp	r3, r1
 80194f2:	bf04      	itt	eq
 80194f4:	6819      	ldreq	r1, [r3, #0]
 80194f6:	685b      	ldreq	r3, [r3, #4]
 80194f8:	6063      	str	r3, [r4, #4]
 80194fa:	bf04      	itt	eq
 80194fc:	1809      	addeq	r1, r1, r0
 80194fe:	6021      	streq	r1, [r4, #0]
 8019500:	6054      	str	r4, [r2, #4]
 8019502:	e7ca      	b.n	801949a <_free_r+0x22>
 8019504:	bd38      	pop	{r3, r4, r5, pc}
 8019506:	bf00      	nop
 8019508:	2000b764 	.word	0x2000b764

0801950c <_malloc_usable_size_r>:
 801950c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019510:	1f18      	subs	r0, r3, #4
 8019512:	2b00      	cmp	r3, #0
 8019514:	bfbc      	itt	lt
 8019516:	580b      	ldrlt	r3, [r1, r0]
 8019518:	18c0      	addlt	r0, r0, r3
 801951a:	4770      	bx	lr

0801951c <__ssputs_r>:
 801951c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019520:	688e      	ldr	r6, [r1, #8]
 8019522:	461f      	mov	r7, r3
 8019524:	42be      	cmp	r6, r7
 8019526:	680b      	ldr	r3, [r1, #0]
 8019528:	4682      	mov	sl, r0
 801952a:	460c      	mov	r4, r1
 801952c:	4690      	mov	r8, r2
 801952e:	d82d      	bhi.n	801958c <__ssputs_r+0x70>
 8019530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019534:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019538:	d026      	beq.n	8019588 <__ssputs_r+0x6c>
 801953a:	6965      	ldr	r5, [r4, #20]
 801953c:	6909      	ldr	r1, [r1, #16]
 801953e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019542:	eba3 0901 	sub.w	r9, r3, r1
 8019546:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801954a:	1c7b      	adds	r3, r7, #1
 801954c:	444b      	add	r3, r9
 801954e:	106d      	asrs	r5, r5, #1
 8019550:	429d      	cmp	r5, r3
 8019552:	bf38      	it	cc
 8019554:	461d      	movcc	r5, r3
 8019556:	0553      	lsls	r3, r2, #21
 8019558:	d527      	bpl.n	80195aa <__ssputs_r+0x8e>
 801955a:	4629      	mov	r1, r5
 801955c:	f7ff fa48 	bl	80189f0 <_malloc_r>
 8019560:	4606      	mov	r6, r0
 8019562:	b360      	cbz	r0, 80195be <__ssputs_r+0xa2>
 8019564:	6921      	ldr	r1, [r4, #16]
 8019566:	464a      	mov	r2, r9
 8019568:	f7ff ff4d 	bl	8019406 <memcpy>
 801956c:	89a3      	ldrh	r3, [r4, #12]
 801956e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019576:	81a3      	strh	r3, [r4, #12]
 8019578:	6126      	str	r6, [r4, #16]
 801957a:	6165      	str	r5, [r4, #20]
 801957c:	444e      	add	r6, r9
 801957e:	eba5 0509 	sub.w	r5, r5, r9
 8019582:	6026      	str	r6, [r4, #0]
 8019584:	60a5      	str	r5, [r4, #8]
 8019586:	463e      	mov	r6, r7
 8019588:	42be      	cmp	r6, r7
 801958a:	d900      	bls.n	801958e <__ssputs_r+0x72>
 801958c:	463e      	mov	r6, r7
 801958e:	6820      	ldr	r0, [r4, #0]
 8019590:	4632      	mov	r2, r6
 8019592:	4641      	mov	r1, r8
 8019594:	f7ff fe54 	bl	8019240 <memmove>
 8019598:	68a3      	ldr	r3, [r4, #8]
 801959a:	1b9b      	subs	r3, r3, r6
 801959c:	60a3      	str	r3, [r4, #8]
 801959e:	6823      	ldr	r3, [r4, #0]
 80195a0:	4433      	add	r3, r6
 80195a2:	6023      	str	r3, [r4, #0]
 80195a4:	2000      	movs	r0, #0
 80195a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195aa:	462a      	mov	r2, r5
 80195ac:	f7ff fb20 	bl	8018bf0 <_realloc_r>
 80195b0:	4606      	mov	r6, r0
 80195b2:	2800      	cmp	r0, #0
 80195b4:	d1e0      	bne.n	8019578 <__ssputs_r+0x5c>
 80195b6:	6921      	ldr	r1, [r4, #16]
 80195b8:	4650      	mov	r0, sl
 80195ba:	f7ff ff5d 	bl	8019478 <_free_r>
 80195be:	230c      	movs	r3, #12
 80195c0:	f8ca 3000 	str.w	r3, [sl]
 80195c4:	89a3      	ldrh	r3, [r4, #12]
 80195c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80195ca:	81a3      	strh	r3, [r4, #12]
 80195cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80195d0:	e7e9      	b.n	80195a6 <__ssputs_r+0x8a>
	...

080195d4 <_svfiprintf_r>:
 80195d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195d8:	4698      	mov	r8, r3
 80195da:	898b      	ldrh	r3, [r1, #12]
 80195dc:	061b      	lsls	r3, r3, #24
 80195de:	b09d      	sub	sp, #116	@ 0x74
 80195e0:	4607      	mov	r7, r0
 80195e2:	460d      	mov	r5, r1
 80195e4:	4614      	mov	r4, r2
 80195e6:	d510      	bpl.n	801960a <_svfiprintf_r+0x36>
 80195e8:	690b      	ldr	r3, [r1, #16]
 80195ea:	b973      	cbnz	r3, 801960a <_svfiprintf_r+0x36>
 80195ec:	2140      	movs	r1, #64	@ 0x40
 80195ee:	f7ff f9ff 	bl	80189f0 <_malloc_r>
 80195f2:	6028      	str	r0, [r5, #0]
 80195f4:	6128      	str	r0, [r5, #16]
 80195f6:	b930      	cbnz	r0, 8019606 <_svfiprintf_r+0x32>
 80195f8:	230c      	movs	r3, #12
 80195fa:	603b      	str	r3, [r7, #0]
 80195fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019600:	b01d      	add	sp, #116	@ 0x74
 8019602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019606:	2340      	movs	r3, #64	@ 0x40
 8019608:	616b      	str	r3, [r5, #20]
 801960a:	2300      	movs	r3, #0
 801960c:	9309      	str	r3, [sp, #36]	@ 0x24
 801960e:	2320      	movs	r3, #32
 8019610:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019614:	f8cd 800c 	str.w	r8, [sp, #12]
 8019618:	2330      	movs	r3, #48	@ 0x30
 801961a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80197b8 <_svfiprintf_r+0x1e4>
 801961e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019622:	f04f 0901 	mov.w	r9, #1
 8019626:	4623      	mov	r3, r4
 8019628:	469a      	mov	sl, r3
 801962a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801962e:	b10a      	cbz	r2, 8019634 <_svfiprintf_r+0x60>
 8019630:	2a25      	cmp	r2, #37	@ 0x25
 8019632:	d1f9      	bne.n	8019628 <_svfiprintf_r+0x54>
 8019634:	ebba 0b04 	subs.w	fp, sl, r4
 8019638:	d00b      	beq.n	8019652 <_svfiprintf_r+0x7e>
 801963a:	465b      	mov	r3, fp
 801963c:	4622      	mov	r2, r4
 801963e:	4629      	mov	r1, r5
 8019640:	4638      	mov	r0, r7
 8019642:	f7ff ff6b 	bl	801951c <__ssputs_r>
 8019646:	3001      	adds	r0, #1
 8019648:	f000 80a7 	beq.w	801979a <_svfiprintf_r+0x1c6>
 801964c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801964e:	445a      	add	r2, fp
 8019650:	9209      	str	r2, [sp, #36]	@ 0x24
 8019652:	f89a 3000 	ldrb.w	r3, [sl]
 8019656:	2b00      	cmp	r3, #0
 8019658:	f000 809f 	beq.w	801979a <_svfiprintf_r+0x1c6>
 801965c:	2300      	movs	r3, #0
 801965e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019666:	f10a 0a01 	add.w	sl, sl, #1
 801966a:	9304      	str	r3, [sp, #16]
 801966c:	9307      	str	r3, [sp, #28]
 801966e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019672:	931a      	str	r3, [sp, #104]	@ 0x68
 8019674:	4654      	mov	r4, sl
 8019676:	2205      	movs	r2, #5
 8019678:	f814 1b01 	ldrb.w	r1, [r4], #1
 801967c:	484e      	ldr	r0, [pc, #312]	@ (80197b8 <_svfiprintf_r+0x1e4>)
 801967e:	f7e6 fde7 	bl	8000250 <memchr>
 8019682:	9a04      	ldr	r2, [sp, #16]
 8019684:	b9d8      	cbnz	r0, 80196be <_svfiprintf_r+0xea>
 8019686:	06d0      	lsls	r0, r2, #27
 8019688:	bf44      	itt	mi
 801968a:	2320      	movmi	r3, #32
 801968c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019690:	0711      	lsls	r1, r2, #28
 8019692:	bf44      	itt	mi
 8019694:	232b      	movmi	r3, #43	@ 0x2b
 8019696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801969a:	f89a 3000 	ldrb.w	r3, [sl]
 801969e:	2b2a      	cmp	r3, #42	@ 0x2a
 80196a0:	d015      	beq.n	80196ce <_svfiprintf_r+0xfa>
 80196a2:	9a07      	ldr	r2, [sp, #28]
 80196a4:	4654      	mov	r4, sl
 80196a6:	2000      	movs	r0, #0
 80196a8:	f04f 0c0a 	mov.w	ip, #10
 80196ac:	4621      	mov	r1, r4
 80196ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80196b2:	3b30      	subs	r3, #48	@ 0x30
 80196b4:	2b09      	cmp	r3, #9
 80196b6:	d94b      	bls.n	8019750 <_svfiprintf_r+0x17c>
 80196b8:	b1b0      	cbz	r0, 80196e8 <_svfiprintf_r+0x114>
 80196ba:	9207      	str	r2, [sp, #28]
 80196bc:	e014      	b.n	80196e8 <_svfiprintf_r+0x114>
 80196be:	eba0 0308 	sub.w	r3, r0, r8
 80196c2:	fa09 f303 	lsl.w	r3, r9, r3
 80196c6:	4313      	orrs	r3, r2
 80196c8:	9304      	str	r3, [sp, #16]
 80196ca:	46a2      	mov	sl, r4
 80196cc:	e7d2      	b.n	8019674 <_svfiprintf_r+0xa0>
 80196ce:	9b03      	ldr	r3, [sp, #12]
 80196d0:	1d19      	adds	r1, r3, #4
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	9103      	str	r1, [sp, #12]
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	bfbb      	ittet	lt
 80196da:	425b      	neglt	r3, r3
 80196dc:	f042 0202 	orrlt.w	r2, r2, #2
 80196e0:	9307      	strge	r3, [sp, #28]
 80196e2:	9307      	strlt	r3, [sp, #28]
 80196e4:	bfb8      	it	lt
 80196e6:	9204      	strlt	r2, [sp, #16]
 80196e8:	7823      	ldrb	r3, [r4, #0]
 80196ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80196ec:	d10a      	bne.n	8019704 <_svfiprintf_r+0x130>
 80196ee:	7863      	ldrb	r3, [r4, #1]
 80196f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80196f2:	d132      	bne.n	801975a <_svfiprintf_r+0x186>
 80196f4:	9b03      	ldr	r3, [sp, #12]
 80196f6:	1d1a      	adds	r2, r3, #4
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	9203      	str	r2, [sp, #12]
 80196fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019700:	3402      	adds	r4, #2
 8019702:	9305      	str	r3, [sp, #20]
 8019704:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80197c8 <_svfiprintf_r+0x1f4>
 8019708:	7821      	ldrb	r1, [r4, #0]
 801970a:	2203      	movs	r2, #3
 801970c:	4650      	mov	r0, sl
 801970e:	f7e6 fd9f 	bl	8000250 <memchr>
 8019712:	b138      	cbz	r0, 8019724 <_svfiprintf_r+0x150>
 8019714:	9b04      	ldr	r3, [sp, #16]
 8019716:	eba0 000a 	sub.w	r0, r0, sl
 801971a:	2240      	movs	r2, #64	@ 0x40
 801971c:	4082      	lsls	r2, r0
 801971e:	4313      	orrs	r3, r2
 8019720:	3401      	adds	r4, #1
 8019722:	9304      	str	r3, [sp, #16]
 8019724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019728:	4824      	ldr	r0, [pc, #144]	@ (80197bc <_svfiprintf_r+0x1e8>)
 801972a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801972e:	2206      	movs	r2, #6
 8019730:	f7e6 fd8e 	bl	8000250 <memchr>
 8019734:	2800      	cmp	r0, #0
 8019736:	d036      	beq.n	80197a6 <_svfiprintf_r+0x1d2>
 8019738:	4b21      	ldr	r3, [pc, #132]	@ (80197c0 <_svfiprintf_r+0x1ec>)
 801973a:	bb1b      	cbnz	r3, 8019784 <_svfiprintf_r+0x1b0>
 801973c:	9b03      	ldr	r3, [sp, #12]
 801973e:	3307      	adds	r3, #7
 8019740:	f023 0307 	bic.w	r3, r3, #7
 8019744:	3308      	adds	r3, #8
 8019746:	9303      	str	r3, [sp, #12]
 8019748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801974a:	4433      	add	r3, r6
 801974c:	9309      	str	r3, [sp, #36]	@ 0x24
 801974e:	e76a      	b.n	8019626 <_svfiprintf_r+0x52>
 8019750:	fb0c 3202 	mla	r2, ip, r2, r3
 8019754:	460c      	mov	r4, r1
 8019756:	2001      	movs	r0, #1
 8019758:	e7a8      	b.n	80196ac <_svfiprintf_r+0xd8>
 801975a:	2300      	movs	r3, #0
 801975c:	3401      	adds	r4, #1
 801975e:	9305      	str	r3, [sp, #20]
 8019760:	4619      	mov	r1, r3
 8019762:	f04f 0c0a 	mov.w	ip, #10
 8019766:	4620      	mov	r0, r4
 8019768:	f810 2b01 	ldrb.w	r2, [r0], #1
 801976c:	3a30      	subs	r2, #48	@ 0x30
 801976e:	2a09      	cmp	r2, #9
 8019770:	d903      	bls.n	801977a <_svfiprintf_r+0x1a6>
 8019772:	2b00      	cmp	r3, #0
 8019774:	d0c6      	beq.n	8019704 <_svfiprintf_r+0x130>
 8019776:	9105      	str	r1, [sp, #20]
 8019778:	e7c4      	b.n	8019704 <_svfiprintf_r+0x130>
 801977a:	fb0c 2101 	mla	r1, ip, r1, r2
 801977e:	4604      	mov	r4, r0
 8019780:	2301      	movs	r3, #1
 8019782:	e7f0      	b.n	8019766 <_svfiprintf_r+0x192>
 8019784:	ab03      	add	r3, sp, #12
 8019786:	9300      	str	r3, [sp, #0]
 8019788:	462a      	mov	r2, r5
 801978a:	4b0e      	ldr	r3, [pc, #56]	@ (80197c4 <_svfiprintf_r+0x1f0>)
 801978c:	a904      	add	r1, sp, #16
 801978e:	4638      	mov	r0, r7
 8019790:	f3af 8000 	nop.w
 8019794:	1c42      	adds	r2, r0, #1
 8019796:	4606      	mov	r6, r0
 8019798:	d1d6      	bne.n	8019748 <_svfiprintf_r+0x174>
 801979a:	89ab      	ldrh	r3, [r5, #12]
 801979c:	065b      	lsls	r3, r3, #25
 801979e:	f53f af2d 	bmi.w	80195fc <_svfiprintf_r+0x28>
 80197a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80197a4:	e72c      	b.n	8019600 <_svfiprintf_r+0x2c>
 80197a6:	ab03      	add	r3, sp, #12
 80197a8:	9300      	str	r3, [sp, #0]
 80197aa:	462a      	mov	r2, r5
 80197ac:	4b05      	ldr	r3, [pc, #20]	@ (80197c4 <_svfiprintf_r+0x1f0>)
 80197ae:	a904      	add	r1, sp, #16
 80197b0:	4638      	mov	r0, r7
 80197b2:	f000 f9bb 	bl	8019b2c <_printf_i>
 80197b6:	e7ed      	b.n	8019794 <_svfiprintf_r+0x1c0>
 80197b8:	0801bdc6 	.word	0x0801bdc6
 80197bc:	0801bdd0 	.word	0x0801bdd0
 80197c0:	00000000 	.word	0x00000000
 80197c4:	0801951d 	.word	0x0801951d
 80197c8:	0801bdcc 	.word	0x0801bdcc

080197cc <__sfputc_r>:
 80197cc:	6893      	ldr	r3, [r2, #8]
 80197ce:	3b01      	subs	r3, #1
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	b410      	push	{r4}
 80197d4:	6093      	str	r3, [r2, #8]
 80197d6:	da08      	bge.n	80197ea <__sfputc_r+0x1e>
 80197d8:	6994      	ldr	r4, [r2, #24]
 80197da:	42a3      	cmp	r3, r4
 80197dc:	db01      	blt.n	80197e2 <__sfputc_r+0x16>
 80197de:	290a      	cmp	r1, #10
 80197e0:	d103      	bne.n	80197ea <__sfputc_r+0x1e>
 80197e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197e6:	f7ff bc87 	b.w	80190f8 <__swbuf_r>
 80197ea:	6813      	ldr	r3, [r2, #0]
 80197ec:	1c58      	adds	r0, r3, #1
 80197ee:	6010      	str	r0, [r2, #0]
 80197f0:	7019      	strb	r1, [r3, #0]
 80197f2:	4608      	mov	r0, r1
 80197f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197f8:	4770      	bx	lr

080197fa <__sfputs_r>:
 80197fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197fc:	4606      	mov	r6, r0
 80197fe:	460f      	mov	r7, r1
 8019800:	4614      	mov	r4, r2
 8019802:	18d5      	adds	r5, r2, r3
 8019804:	42ac      	cmp	r4, r5
 8019806:	d101      	bne.n	801980c <__sfputs_r+0x12>
 8019808:	2000      	movs	r0, #0
 801980a:	e007      	b.n	801981c <__sfputs_r+0x22>
 801980c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019810:	463a      	mov	r2, r7
 8019812:	4630      	mov	r0, r6
 8019814:	f7ff ffda 	bl	80197cc <__sfputc_r>
 8019818:	1c43      	adds	r3, r0, #1
 801981a:	d1f3      	bne.n	8019804 <__sfputs_r+0xa>
 801981c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019820 <_vfiprintf_r>:
 8019820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019824:	460d      	mov	r5, r1
 8019826:	b09d      	sub	sp, #116	@ 0x74
 8019828:	4614      	mov	r4, r2
 801982a:	4698      	mov	r8, r3
 801982c:	4606      	mov	r6, r0
 801982e:	b118      	cbz	r0, 8019838 <_vfiprintf_r+0x18>
 8019830:	6a03      	ldr	r3, [r0, #32]
 8019832:	b90b      	cbnz	r3, 8019838 <_vfiprintf_r+0x18>
 8019834:	f7ff fb0e 	bl	8018e54 <__sinit>
 8019838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801983a:	07d9      	lsls	r1, r3, #31
 801983c:	d405      	bmi.n	801984a <_vfiprintf_r+0x2a>
 801983e:	89ab      	ldrh	r3, [r5, #12]
 8019840:	059a      	lsls	r2, r3, #22
 8019842:	d402      	bmi.n	801984a <_vfiprintf_r+0x2a>
 8019844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019846:	f7ff fdd4 	bl	80193f2 <__retarget_lock_acquire_recursive>
 801984a:	89ab      	ldrh	r3, [r5, #12]
 801984c:	071b      	lsls	r3, r3, #28
 801984e:	d501      	bpl.n	8019854 <_vfiprintf_r+0x34>
 8019850:	692b      	ldr	r3, [r5, #16]
 8019852:	b99b      	cbnz	r3, 801987c <_vfiprintf_r+0x5c>
 8019854:	4629      	mov	r1, r5
 8019856:	4630      	mov	r0, r6
 8019858:	f7ff fc8c 	bl	8019174 <__swsetup_r>
 801985c:	b170      	cbz	r0, 801987c <_vfiprintf_r+0x5c>
 801985e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019860:	07dc      	lsls	r4, r3, #31
 8019862:	d504      	bpl.n	801986e <_vfiprintf_r+0x4e>
 8019864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019868:	b01d      	add	sp, #116	@ 0x74
 801986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801986e:	89ab      	ldrh	r3, [r5, #12]
 8019870:	0598      	lsls	r0, r3, #22
 8019872:	d4f7      	bmi.n	8019864 <_vfiprintf_r+0x44>
 8019874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019876:	f7ff fdbd 	bl	80193f4 <__retarget_lock_release_recursive>
 801987a:	e7f3      	b.n	8019864 <_vfiprintf_r+0x44>
 801987c:	2300      	movs	r3, #0
 801987e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019880:	2320      	movs	r3, #32
 8019882:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019886:	f8cd 800c 	str.w	r8, [sp, #12]
 801988a:	2330      	movs	r3, #48	@ 0x30
 801988c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019a3c <_vfiprintf_r+0x21c>
 8019890:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019894:	f04f 0901 	mov.w	r9, #1
 8019898:	4623      	mov	r3, r4
 801989a:	469a      	mov	sl, r3
 801989c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198a0:	b10a      	cbz	r2, 80198a6 <_vfiprintf_r+0x86>
 80198a2:	2a25      	cmp	r2, #37	@ 0x25
 80198a4:	d1f9      	bne.n	801989a <_vfiprintf_r+0x7a>
 80198a6:	ebba 0b04 	subs.w	fp, sl, r4
 80198aa:	d00b      	beq.n	80198c4 <_vfiprintf_r+0xa4>
 80198ac:	465b      	mov	r3, fp
 80198ae:	4622      	mov	r2, r4
 80198b0:	4629      	mov	r1, r5
 80198b2:	4630      	mov	r0, r6
 80198b4:	f7ff ffa1 	bl	80197fa <__sfputs_r>
 80198b8:	3001      	adds	r0, #1
 80198ba:	f000 80a7 	beq.w	8019a0c <_vfiprintf_r+0x1ec>
 80198be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80198c0:	445a      	add	r2, fp
 80198c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80198c4:	f89a 3000 	ldrb.w	r3, [sl]
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	f000 809f 	beq.w	8019a0c <_vfiprintf_r+0x1ec>
 80198ce:	2300      	movs	r3, #0
 80198d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80198d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198d8:	f10a 0a01 	add.w	sl, sl, #1
 80198dc:	9304      	str	r3, [sp, #16]
 80198de:	9307      	str	r3, [sp, #28]
 80198e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80198e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80198e6:	4654      	mov	r4, sl
 80198e8:	2205      	movs	r2, #5
 80198ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198ee:	4853      	ldr	r0, [pc, #332]	@ (8019a3c <_vfiprintf_r+0x21c>)
 80198f0:	f7e6 fcae 	bl	8000250 <memchr>
 80198f4:	9a04      	ldr	r2, [sp, #16]
 80198f6:	b9d8      	cbnz	r0, 8019930 <_vfiprintf_r+0x110>
 80198f8:	06d1      	lsls	r1, r2, #27
 80198fa:	bf44      	itt	mi
 80198fc:	2320      	movmi	r3, #32
 80198fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019902:	0713      	lsls	r3, r2, #28
 8019904:	bf44      	itt	mi
 8019906:	232b      	movmi	r3, #43	@ 0x2b
 8019908:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801990c:	f89a 3000 	ldrb.w	r3, [sl]
 8019910:	2b2a      	cmp	r3, #42	@ 0x2a
 8019912:	d015      	beq.n	8019940 <_vfiprintf_r+0x120>
 8019914:	9a07      	ldr	r2, [sp, #28]
 8019916:	4654      	mov	r4, sl
 8019918:	2000      	movs	r0, #0
 801991a:	f04f 0c0a 	mov.w	ip, #10
 801991e:	4621      	mov	r1, r4
 8019920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019924:	3b30      	subs	r3, #48	@ 0x30
 8019926:	2b09      	cmp	r3, #9
 8019928:	d94b      	bls.n	80199c2 <_vfiprintf_r+0x1a2>
 801992a:	b1b0      	cbz	r0, 801995a <_vfiprintf_r+0x13a>
 801992c:	9207      	str	r2, [sp, #28]
 801992e:	e014      	b.n	801995a <_vfiprintf_r+0x13a>
 8019930:	eba0 0308 	sub.w	r3, r0, r8
 8019934:	fa09 f303 	lsl.w	r3, r9, r3
 8019938:	4313      	orrs	r3, r2
 801993a:	9304      	str	r3, [sp, #16]
 801993c:	46a2      	mov	sl, r4
 801993e:	e7d2      	b.n	80198e6 <_vfiprintf_r+0xc6>
 8019940:	9b03      	ldr	r3, [sp, #12]
 8019942:	1d19      	adds	r1, r3, #4
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	9103      	str	r1, [sp, #12]
 8019948:	2b00      	cmp	r3, #0
 801994a:	bfbb      	ittet	lt
 801994c:	425b      	neglt	r3, r3
 801994e:	f042 0202 	orrlt.w	r2, r2, #2
 8019952:	9307      	strge	r3, [sp, #28]
 8019954:	9307      	strlt	r3, [sp, #28]
 8019956:	bfb8      	it	lt
 8019958:	9204      	strlt	r2, [sp, #16]
 801995a:	7823      	ldrb	r3, [r4, #0]
 801995c:	2b2e      	cmp	r3, #46	@ 0x2e
 801995e:	d10a      	bne.n	8019976 <_vfiprintf_r+0x156>
 8019960:	7863      	ldrb	r3, [r4, #1]
 8019962:	2b2a      	cmp	r3, #42	@ 0x2a
 8019964:	d132      	bne.n	80199cc <_vfiprintf_r+0x1ac>
 8019966:	9b03      	ldr	r3, [sp, #12]
 8019968:	1d1a      	adds	r2, r3, #4
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	9203      	str	r2, [sp, #12]
 801996e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019972:	3402      	adds	r4, #2
 8019974:	9305      	str	r3, [sp, #20]
 8019976:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019a4c <_vfiprintf_r+0x22c>
 801997a:	7821      	ldrb	r1, [r4, #0]
 801997c:	2203      	movs	r2, #3
 801997e:	4650      	mov	r0, sl
 8019980:	f7e6 fc66 	bl	8000250 <memchr>
 8019984:	b138      	cbz	r0, 8019996 <_vfiprintf_r+0x176>
 8019986:	9b04      	ldr	r3, [sp, #16]
 8019988:	eba0 000a 	sub.w	r0, r0, sl
 801998c:	2240      	movs	r2, #64	@ 0x40
 801998e:	4082      	lsls	r2, r0
 8019990:	4313      	orrs	r3, r2
 8019992:	3401      	adds	r4, #1
 8019994:	9304      	str	r3, [sp, #16]
 8019996:	f814 1b01 	ldrb.w	r1, [r4], #1
 801999a:	4829      	ldr	r0, [pc, #164]	@ (8019a40 <_vfiprintf_r+0x220>)
 801999c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80199a0:	2206      	movs	r2, #6
 80199a2:	f7e6 fc55 	bl	8000250 <memchr>
 80199a6:	2800      	cmp	r0, #0
 80199a8:	d03f      	beq.n	8019a2a <_vfiprintf_r+0x20a>
 80199aa:	4b26      	ldr	r3, [pc, #152]	@ (8019a44 <_vfiprintf_r+0x224>)
 80199ac:	bb1b      	cbnz	r3, 80199f6 <_vfiprintf_r+0x1d6>
 80199ae:	9b03      	ldr	r3, [sp, #12]
 80199b0:	3307      	adds	r3, #7
 80199b2:	f023 0307 	bic.w	r3, r3, #7
 80199b6:	3308      	adds	r3, #8
 80199b8:	9303      	str	r3, [sp, #12]
 80199ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199bc:	443b      	add	r3, r7
 80199be:	9309      	str	r3, [sp, #36]	@ 0x24
 80199c0:	e76a      	b.n	8019898 <_vfiprintf_r+0x78>
 80199c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80199c6:	460c      	mov	r4, r1
 80199c8:	2001      	movs	r0, #1
 80199ca:	e7a8      	b.n	801991e <_vfiprintf_r+0xfe>
 80199cc:	2300      	movs	r3, #0
 80199ce:	3401      	adds	r4, #1
 80199d0:	9305      	str	r3, [sp, #20]
 80199d2:	4619      	mov	r1, r3
 80199d4:	f04f 0c0a 	mov.w	ip, #10
 80199d8:	4620      	mov	r0, r4
 80199da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199de:	3a30      	subs	r2, #48	@ 0x30
 80199e0:	2a09      	cmp	r2, #9
 80199e2:	d903      	bls.n	80199ec <_vfiprintf_r+0x1cc>
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d0c6      	beq.n	8019976 <_vfiprintf_r+0x156>
 80199e8:	9105      	str	r1, [sp, #20]
 80199ea:	e7c4      	b.n	8019976 <_vfiprintf_r+0x156>
 80199ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80199f0:	4604      	mov	r4, r0
 80199f2:	2301      	movs	r3, #1
 80199f4:	e7f0      	b.n	80199d8 <_vfiprintf_r+0x1b8>
 80199f6:	ab03      	add	r3, sp, #12
 80199f8:	9300      	str	r3, [sp, #0]
 80199fa:	462a      	mov	r2, r5
 80199fc:	4b12      	ldr	r3, [pc, #72]	@ (8019a48 <_vfiprintf_r+0x228>)
 80199fe:	a904      	add	r1, sp, #16
 8019a00:	4630      	mov	r0, r6
 8019a02:	f3af 8000 	nop.w
 8019a06:	4607      	mov	r7, r0
 8019a08:	1c78      	adds	r0, r7, #1
 8019a0a:	d1d6      	bne.n	80199ba <_vfiprintf_r+0x19a>
 8019a0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019a0e:	07d9      	lsls	r1, r3, #31
 8019a10:	d405      	bmi.n	8019a1e <_vfiprintf_r+0x1fe>
 8019a12:	89ab      	ldrh	r3, [r5, #12]
 8019a14:	059a      	lsls	r2, r3, #22
 8019a16:	d402      	bmi.n	8019a1e <_vfiprintf_r+0x1fe>
 8019a18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019a1a:	f7ff fceb 	bl	80193f4 <__retarget_lock_release_recursive>
 8019a1e:	89ab      	ldrh	r3, [r5, #12]
 8019a20:	065b      	lsls	r3, r3, #25
 8019a22:	f53f af1f 	bmi.w	8019864 <_vfiprintf_r+0x44>
 8019a26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019a28:	e71e      	b.n	8019868 <_vfiprintf_r+0x48>
 8019a2a:	ab03      	add	r3, sp, #12
 8019a2c:	9300      	str	r3, [sp, #0]
 8019a2e:	462a      	mov	r2, r5
 8019a30:	4b05      	ldr	r3, [pc, #20]	@ (8019a48 <_vfiprintf_r+0x228>)
 8019a32:	a904      	add	r1, sp, #16
 8019a34:	4630      	mov	r0, r6
 8019a36:	f000 f879 	bl	8019b2c <_printf_i>
 8019a3a:	e7e4      	b.n	8019a06 <_vfiprintf_r+0x1e6>
 8019a3c:	0801bdc6 	.word	0x0801bdc6
 8019a40:	0801bdd0 	.word	0x0801bdd0
 8019a44:	00000000 	.word	0x00000000
 8019a48:	080197fb 	.word	0x080197fb
 8019a4c:	0801bdcc 	.word	0x0801bdcc

08019a50 <_printf_common>:
 8019a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a54:	4616      	mov	r6, r2
 8019a56:	4698      	mov	r8, r3
 8019a58:	688a      	ldr	r2, [r1, #8]
 8019a5a:	690b      	ldr	r3, [r1, #16]
 8019a5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019a60:	4293      	cmp	r3, r2
 8019a62:	bfb8      	it	lt
 8019a64:	4613      	movlt	r3, r2
 8019a66:	6033      	str	r3, [r6, #0]
 8019a68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019a6c:	4607      	mov	r7, r0
 8019a6e:	460c      	mov	r4, r1
 8019a70:	b10a      	cbz	r2, 8019a76 <_printf_common+0x26>
 8019a72:	3301      	adds	r3, #1
 8019a74:	6033      	str	r3, [r6, #0]
 8019a76:	6823      	ldr	r3, [r4, #0]
 8019a78:	0699      	lsls	r1, r3, #26
 8019a7a:	bf42      	ittt	mi
 8019a7c:	6833      	ldrmi	r3, [r6, #0]
 8019a7e:	3302      	addmi	r3, #2
 8019a80:	6033      	strmi	r3, [r6, #0]
 8019a82:	6825      	ldr	r5, [r4, #0]
 8019a84:	f015 0506 	ands.w	r5, r5, #6
 8019a88:	d106      	bne.n	8019a98 <_printf_common+0x48>
 8019a8a:	f104 0a19 	add.w	sl, r4, #25
 8019a8e:	68e3      	ldr	r3, [r4, #12]
 8019a90:	6832      	ldr	r2, [r6, #0]
 8019a92:	1a9b      	subs	r3, r3, r2
 8019a94:	42ab      	cmp	r3, r5
 8019a96:	dc26      	bgt.n	8019ae6 <_printf_common+0x96>
 8019a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019a9c:	6822      	ldr	r2, [r4, #0]
 8019a9e:	3b00      	subs	r3, #0
 8019aa0:	bf18      	it	ne
 8019aa2:	2301      	movne	r3, #1
 8019aa4:	0692      	lsls	r2, r2, #26
 8019aa6:	d42b      	bmi.n	8019b00 <_printf_common+0xb0>
 8019aa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019aac:	4641      	mov	r1, r8
 8019aae:	4638      	mov	r0, r7
 8019ab0:	47c8      	blx	r9
 8019ab2:	3001      	adds	r0, #1
 8019ab4:	d01e      	beq.n	8019af4 <_printf_common+0xa4>
 8019ab6:	6823      	ldr	r3, [r4, #0]
 8019ab8:	6922      	ldr	r2, [r4, #16]
 8019aba:	f003 0306 	and.w	r3, r3, #6
 8019abe:	2b04      	cmp	r3, #4
 8019ac0:	bf02      	ittt	eq
 8019ac2:	68e5      	ldreq	r5, [r4, #12]
 8019ac4:	6833      	ldreq	r3, [r6, #0]
 8019ac6:	1aed      	subeq	r5, r5, r3
 8019ac8:	68a3      	ldr	r3, [r4, #8]
 8019aca:	bf0c      	ite	eq
 8019acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ad0:	2500      	movne	r5, #0
 8019ad2:	4293      	cmp	r3, r2
 8019ad4:	bfc4      	itt	gt
 8019ad6:	1a9b      	subgt	r3, r3, r2
 8019ad8:	18ed      	addgt	r5, r5, r3
 8019ada:	2600      	movs	r6, #0
 8019adc:	341a      	adds	r4, #26
 8019ade:	42b5      	cmp	r5, r6
 8019ae0:	d11a      	bne.n	8019b18 <_printf_common+0xc8>
 8019ae2:	2000      	movs	r0, #0
 8019ae4:	e008      	b.n	8019af8 <_printf_common+0xa8>
 8019ae6:	2301      	movs	r3, #1
 8019ae8:	4652      	mov	r2, sl
 8019aea:	4641      	mov	r1, r8
 8019aec:	4638      	mov	r0, r7
 8019aee:	47c8      	blx	r9
 8019af0:	3001      	adds	r0, #1
 8019af2:	d103      	bne.n	8019afc <_printf_common+0xac>
 8019af4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019afc:	3501      	adds	r5, #1
 8019afe:	e7c6      	b.n	8019a8e <_printf_common+0x3e>
 8019b00:	18e1      	adds	r1, r4, r3
 8019b02:	1c5a      	adds	r2, r3, #1
 8019b04:	2030      	movs	r0, #48	@ 0x30
 8019b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019b0a:	4422      	add	r2, r4
 8019b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019b10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019b14:	3302      	adds	r3, #2
 8019b16:	e7c7      	b.n	8019aa8 <_printf_common+0x58>
 8019b18:	2301      	movs	r3, #1
 8019b1a:	4622      	mov	r2, r4
 8019b1c:	4641      	mov	r1, r8
 8019b1e:	4638      	mov	r0, r7
 8019b20:	47c8      	blx	r9
 8019b22:	3001      	adds	r0, #1
 8019b24:	d0e6      	beq.n	8019af4 <_printf_common+0xa4>
 8019b26:	3601      	adds	r6, #1
 8019b28:	e7d9      	b.n	8019ade <_printf_common+0x8e>
	...

08019b2c <_printf_i>:
 8019b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019b30:	7e0f      	ldrb	r7, [r1, #24]
 8019b32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019b34:	2f78      	cmp	r7, #120	@ 0x78
 8019b36:	4691      	mov	r9, r2
 8019b38:	4680      	mov	r8, r0
 8019b3a:	460c      	mov	r4, r1
 8019b3c:	469a      	mov	sl, r3
 8019b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019b42:	d807      	bhi.n	8019b54 <_printf_i+0x28>
 8019b44:	2f62      	cmp	r7, #98	@ 0x62
 8019b46:	d80a      	bhi.n	8019b5e <_printf_i+0x32>
 8019b48:	2f00      	cmp	r7, #0
 8019b4a:	f000 80d2 	beq.w	8019cf2 <_printf_i+0x1c6>
 8019b4e:	2f58      	cmp	r7, #88	@ 0x58
 8019b50:	f000 80b9 	beq.w	8019cc6 <_printf_i+0x19a>
 8019b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019b5c:	e03a      	b.n	8019bd4 <_printf_i+0xa8>
 8019b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019b62:	2b15      	cmp	r3, #21
 8019b64:	d8f6      	bhi.n	8019b54 <_printf_i+0x28>
 8019b66:	a101      	add	r1, pc, #4	@ (adr r1, 8019b6c <_printf_i+0x40>)
 8019b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019b6c:	08019bc5 	.word	0x08019bc5
 8019b70:	08019bd9 	.word	0x08019bd9
 8019b74:	08019b55 	.word	0x08019b55
 8019b78:	08019b55 	.word	0x08019b55
 8019b7c:	08019b55 	.word	0x08019b55
 8019b80:	08019b55 	.word	0x08019b55
 8019b84:	08019bd9 	.word	0x08019bd9
 8019b88:	08019b55 	.word	0x08019b55
 8019b8c:	08019b55 	.word	0x08019b55
 8019b90:	08019b55 	.word	0x08019b55
 8019b94:	08019b55 	.word	0x08019b55
 8019b98:	08019cd9 	.word	0x08019cd9
 8019b9c:	08019c03 	.word	0x08019c03
 8019ba0:	08019c93 	.word	0x08019c93
 8019ba4:	08019b55 	.word	0x08019b55
 8019ba8:	08019b55 	.word	0x08019b55
 8019bac:	08019cfb 	.word	0x08019cfb
 8019bb0:	08019b55 	.word	0x08019b55
 8019bb4:	08019c03 	.word	0x08019c03
 8019bb8:	08019b55 	.word	0x08019b55
 8019bbc:	08019b55 	.word	0x08019b55
 8019bc0:	08019c9b 	.word	0x08019c9b
 8019bc4:	6833      	ldr	r3, [r6, #0]
 8019bc6:	1d1a      	adds	r2, r3, #4
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	6032      	str	r2, [r6, #0]
 8019bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019bd4:	2301      	movs	r3, #1
 8019bd6:	e09d      	b.n	8019d14 <_printf_i+0x1e8>
 8019bd8:	6833      	ldr	r3, [r6, #0]
 8019bda:	6820      	ldr	r0, [r4, #0]
 8019bdc:	1d19      	adds	r1, r3, #4
 8019bde:	6031      	str	r1, [r6, #0]
 8019be0:	0606      	lsls	r6, r0, #24
 8019be2:	d501      	bpl.n	8019be8 <_printf_i+0xbc>
 8019be4:	681d      	ldr	r5, [r3, #0]
 8019be6:	e003      	b.n	8019bf0 <_printf_i+0xc4>
 8019be8:	0645      	lsls	r5, r0, #25
 8019bea:	d5fb      	bpl.n	8019be4 <_printf_i+0xb8>
 8019bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019bf0:	2d00      	cmp	r5, #0
 8019bf2:	da03      	bge.n	8019bfc <_printf_i+0xd0>
 8019bf4:	232d      	movs	r3, #45	@ 0x2d
 8019bf6:	426d      	negs	r5, r5
 8019bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019bfc:	4859      	ldr	r0, [pc, #356]	@ (8019d64 <_printf_i+0x238>)
 8019bfe:	230a      	movs	r3, #10
 8019c00:	e011      	b.n	8019c26 <_printf_i+0xfa>
 8019c02:	6821      	ldr	r1, [r4, #0]
 8019c04:	6833      	ldr	r3, [r6, #0]
 8019c06:	0608      	lsls	r0, r1, #24
 8019c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8019c0c:	d402      	bmi.n	8019c14 <_printf_i+0xe8>
 8019c0e:	0649      	lsls	r1, r1, #25
 8019c10:	bf48      	it	mi
 8019c12:	b2ad      	uxthmi	r5, r5
 8019c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8019c16:	4853      	ldr	r0, [pc, #332]	@ (8019d64 <_printf_i+0x238>)
 8019c18:	6033      	str	r3, [r6, #0]
 8019c1a:	bf14      	ite	ne
 8019c1c:	230a      	movne	r3, #10
 8019c1e:	2308      	moveq	r3, #8
 8019c20:	2100      	movs	r1, #0
 8019c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019c26:	6866      	ldr	r6, [r4, #4]
 8019c28:	60a6      	str	r6, [r4, #8]
 8019c2a:	2e00      	cmp	r6, #0
 8019c2c:	bfa2      	ittt	ge
 8019c2e:	6821      	ldrge	r1, [r4, #0]
 8019c30:	f021 0104 	bicge.w	r1, r1, #4
 8019c34:	6021      	strge	r1, [r4, #0]
 8019c36:	b90d      	cbnz	r5, 8019c3c <_printf_i+0x110>
 8019c38:	2e00      	cmp	r6, #0
 8019c3a:	d04b      	beq.n	8019cd4 <_printf_i+0x1a8>
 8019c3c:	4616      	mov	r6, r2
 8019c3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8019c42:	fb03 5711 	mls	r7, r3, r1, r5
 8019c46:	5dc7      	ldrb	r7, [r0, r7]
 8019c48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019c4c:	462f      	mov	r7, r5
 8019c4e:	42bb      	cmp	r3, r7
 8019c50:	460d      	mov	r5, r1
 8019c52:	d9f4      	bls.n	8019c3e <_printf_i+0x112>
 8019c54:	2b08      	cmp	r3, #8
 8019c56:	d10b      	bne.n	8019c70 <_printf_i+0x144>
 8019c58:	6823      	ldr	r3, [r4, #0]
 8019c5a:	07df      	lsls	r7, r3, #31
 8019c5c:	d508      	bpl.n	8019c70 <_printf_i+0x144>
 8019c5e:	6923      	ldr	r3, [r4, #16]
 8019c60:	6861      	ldr	r1, [r4, #4]
 8019c62:	4299      	cmp	r1, r3
 8019c64:	bfde      	ittt	le
 8019c66:	2330      	movle	r3, #48	@ 0x30
 8019c68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019c6c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019c70:	1b92      	subs	r2, r2, r6
 8019c72:	6122      	str	r2, [r4, #16]
 8019c74:	f8cd a000 	str.w	sl, [sp]
 8019c78:	464b      	mov	r3, r9
 8019c7a:	aa03      	add	r2, sp, #12
 8019c7c:	4621      	mov	r1, r4
 8019c7e:	4640      	mov	r0, r8
 8019c80:	f7ff fee6 	bl	8019a50 <_printf_common>
 8019c84:	3001      	adds	r0, #1
 8019c86:	d14a      	bne.n	8019d1e <_printf_i+0x1f2>
 8019c88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019c8c:	b004      	add	sp, #16
 8019c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c92:	6823      	ldr	r3, [r4, #0]
 8019c94:	f043 0320 	orr.w	r3, r3, #32
 8019c98:	6023      	str	r3, [r4, #0]
 8019c9a:	4833      	ldr	r0, [pc, #204]	@ (8019d68 <_printf_i+0x23c>)
 8019c9c:	2778      	movs	r7, #120	@ 0x78
 8019c9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019ca2:	6823      	ldr	r3, [r4, #0]
 8019ca4:	6831      	ldr	r1, [r6, #0]
 8019ca6:	061f      	lsls	r7, r3, #24
 8019ca8:	f851 5b04 	ldr.w	r5, [r1], #4
 8019cac:	d402      	bmi.n	8019cb4 <_printf_i+0x188>
 8019cae:	065f      	lsls	r7, r3, #25
 8019cb0:	bf48      	it	mi
 8019cb2:	b2ad      	uxthmi	r5, r5
 8019cb4:	6031      	str	r1, [r6, #0]
 8019cb6:	07d9      	lsls	r1, r3, #31
 8019cb8:	bf44      	itt	mi
 8019cba:	f043 0320 	orrmi.w	r3, r3, #32
 8019cbe:	6023      	strmi	r3, [r4, #0]
 8019cc0:	b11d      	cbz	r5, 8019cca <_printf_i+0x19e>
 8019cc2:	2310      	movs	r3, #16
 8019cc4:	e7ac      	b.n	8019c20 <_printf_i+0xf4>
 8019cc6:	4827      	ldr	r0, [pc, #156]	@ (8019d64 <_printf_i+0x238>)
 8019cc8:	e7e9      	b.n	8019c9e <_printf_i+0x172>
 8019cca:	6823      	ldr	r3, [r4, #0]
 8019ccc:	f023 0320 	bic.w	r3, r3, #32
 8019cd0:	6023      	str	r3, [r4, #0]
 8019cd2:	e7f6      	b.n	8019cc2 <_printf_i+0x196>
 8019cd4:	4616      	mov	r6, r2
 8019cd6:	e7bd      	b.n	8019c54 <_printf_i+0x128>
 8019cd8:	6833      	ldr	r3, [r6, #0]
 8019cda:	6825      	ldr	r5, [r4, #0]
 8019cdc:	6961      	ldr	r1, [r4, #20]
 8019cde:	1d18      	adds	r0, r3, #4
 8019ce0:	6030      	str	r0, [r6, #0]
 8019ce2:	062e      	lsls	r6, r5, #24
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	d501      	bpl.n	8019cec <_printf_i+0x1c0>
 8019ce8:	6019      	str	r1, [r3, #0]
 8019cea:	e002      	b.n	8019cf2 <_printf_i+0x1c6>
 8019cec:	0668      	lsls	r0, r5, #25
 8019cee:	d5fb      	bpl.n	8019ce8 <_printf_i+0x1bc>
 8019cf0:	8019      	strh	r1, [r3, #0]
 8019cf2:	2300      	movs	r3, #0
 8019cf4:	6123      	str	r3, [r4, #16]
 8019cf6:	4616      	mov	r6, r2
 8019cf8:	e7bc      	b.n	8019c74 <_printf_i+0x148>
 8019cfa:	6833      	ldr	r3, [r6, #0]
 8019cfc:	1d1a      	adds	r2, r3, #4
 8019cfe:	6032      	str	r2, [r6, #0]
 8019d00:	681e      	ldr	r6, [r3, #0]
 8019d02:	6862      	ldr	r2, [r4, #4]
 8019d04:	2100      	movs	r1, #0
 8019d06:	4630      	mov	r0, r6
 8019d08:	f7e6 faa2 	bl	8000250 <memchr>
 8019d0c:	b108      	cbz	r0, 8019d12 <_printf_i+0x1e6>
 8019d0e:	1b80      	subs	r0, r0, r6
 8019d10:	6060      	str	r0, [r4, #4]
 8019d12:	6863      	ldr	r3, [r4, #4]
 8019d14:	6123      	str	r3, [r4, #16]
 8019d16:	2300      	movs	r3, #0
 8019d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019d1c:	e7aa      	b.n	8019c74 <_printf_i+0x148>
 8019d1e:	6923      	ldr	r3, [r4, #16]
 8019d20:	4632      	mov	r2, r6
 8019d22:	4649      	mov	r1, r9
 8019d24:	4640      	mov	r0, r8
 8019d26:	47d0      	blx	sl
 8019d28:	3001      	adds	r0, #1
 8019d2a:	d0ad      	beq.n	8019c88 <_printf_i+0x15c>
 8019d2c:	6823      	ldr	r3, [r4, #0]
 8019d2e:	079b      	lsls	r3, r3, #30
 8019d30:	d413      	bmi.n	8019d5a <_printf_i+0x22e>
 8019d32:	68e0      	ldr	r0, [r4, #12]
 8019d34:	9b03      	ldr	r3, [sp, #12]
 8019d36:	4298      	cmp	r0, r3
 8019d38:	bfb8      	it	lt
 8019d3a:	4618      	movlt	r0, r3
 8019d3c:	e7a6      	b.n	8019c8c <_printf_i+0x160>
 8019d3e:	2301      	movs	r3, #1
 8019d40:	4632      	mov	r2, r6
 8019d42:	4649      	mov	r1, r9
 8019d44:	4640      	mov	r0, r8
 8019d46:	47d0      	blx	sl
 8019d48:	3001      	adds	r0, #1
 8019d4a:	d09d      	beq.n	8019c88 <_printf_i+0x15c>
 8019d4c:	3501      	adds	r5, #1
 8019d4e:	68e3      	ldr	r3, [r4, #12]
 8019d50:	9903      	ldr	r1, [sp, #12]
 8019d52:	1a5b      	subs	r3, r3, r1
 8019d54:	42ab      	cmp	r3, r5
 8019d56:	dcf2      	bgt.n	8019d3e <_printf_i+0x212>
 8019d58:	e7eb      	b.n	8019d32 <_printf_i+0x206>
 8019d5a:	2500      	movs	r5, #0
 8019d5c:	f104 0619 	add.w	r6, r4, #25
 8019d60:	e7f5      	b.n	8019d4e <_printf_i+0x222>
 8019d62:	bf00      	nop
 8019d64:	0801bdd7 	.word	0x0801bdd7
 8019d68:	0801bde8 	.word	0x0801bde8

08019d6c <__sflush_r>:
 8019d6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d74:	0716      	lsls	r6, r2, #28
 8019d76:	4605      	mov	r5, r0
 8019d78:	460c      	mov	r4, r1
 8019d7a:	d454      	bmi.n	8019e26 <__sflush_r+0xba>
 8019d7c:	684b      	ldr	r3, [r1, #4]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	dc02      	bgt.n	8019d88 <__sflush_r+0x1c>
 8019d82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	dd48      	ble.n	8019e1a <__sflush_r+0xae>
 8019d88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019d8a:	2e00      	cmp	r6, #0
 8019d8c:	d045      	beq.n	8019e1a <__sflush_r+0xae>
 8019d8e:	2300      	movs	r3, #0
 8019d90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019d94:	682f      	ldr	r7, [r5, #0]
 8019d96:	6a21      	ldr	r1, [r4, #32]
 8019d98:	602b      	str	r3, [r5, #0]
 8019d9a:	d030      	beq.n	8019dfe <__sflush_r+0x92>
 8019d9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019d9e:	89a3      	ldrh	r3, [r4, #12]
 8019da0:	0759      	lsls	r1, r3, #29
 8019da2:	d505      	bpl.n	8019db0 <__sflush_r+0x44>
 8019da4:	6863      	ldr	r3, [r4, #4]
 8019da6:	1ad2      	subs	r2, r2, r3
 8019da8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019daa:	b10b      	cbz	r3, 8019db0 <__sflush_r+0x44>
 8019dac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019dae:	1ad2      	subs	r2, r2, r3
 8019db0:	2300      	movs	r3, #0
 8019db2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019db4:	6a21      	ldr	r1, [r4, #32]
 8019db6:	4628      	mov	r0, r5
 8019db8:	47b0      	blx	r6
 8019dba:	1c43      	adds	r3, r0, #1
 8019dbc:	89a3      	ldrh	r3, [r4, #12]
 8019dbe:	d106      	bne.n	8019dce <__sflush_r+0x62>
 8019dc0:	6829      	ldr	r1, [r5, #0]
 8019dc2:	291d      	cmp	r1, #29
 8019dc4:	d82b      	bhi.n	8019e1e <__sflush_r+0xb2>
 8019dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8019e70 <__sflush_r+0x104>)
 8019dc8:	410a      	asrs	r2, r1
 8019dca:	07d6      	lsls	r6, r2, #31
 8019dcc:	d427      	bmi.n	8019e1e <__sflush_r+0xb2>
 8019dce:	2200      	movs	r2, #0
 8019dd0:	6062      	str	r2, [r4, #4]
 8019dd2:	04d9      	lsls	r1, r3, #19
 8019dd4:	6922      	ldr	r2, [r4, #16]
 8019dd6:	6022      	str	r2, [r4, #0]
 8019dd8:	d504      	bpl.n	8019de4 <__sflush_r+0x78>
 8019dda:	1c42      	adds	r2, r0, #1
 8019ddc:	d101      	bne.n	8019de2 <__sflush_r+0x76>
 8019dde:	682b      	ldr	r3, [r5, #0]
 8019de0:	b903      	cbnz	r3, 8019de4 <__sflush_r+0x78>
 8019de2:	6560      	str	r0, [r4, #84]	@ 0x54
 8019de4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019de6:	602f      	str	r7, [r5, #0]
 8019de8:	b1b9      	cbz	r1, 8019e1a <__sflush_r+0xae>
 8019dea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019dee:	4299      	cmp	r1, r3
 8019df0:	d002      	beq.n	8019df8 <__sflush_r+0x8c>
 8019df2:	4628      	mov	r0, r5
 8019df4:	f7ff fb40 	bl	8019478 <_free_r>
 8019df8:	2300      	movs	r3, #0
 8019dfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8019dfc:	e00d      	b.n	8019e1a <__sflush_r+0xae>
 8019dfe:	2301      	movs	r3, #1
 8019e00:	4628      	mov	r0, r5
 8019e02:	47b0      	blx	r6
 8019e04:	4602      	mov	r2, r0
 8019e06:	1c50      	adds	r0, r2, #1
 8019e08:	d1c9      	bne.n	8019d9e <__sflush_r+0x32>
 8019e0a:	682b      	ldr	r3, [r5, #0]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d0c6      	beq.n	8019d9e <__sflush_r+0x32>
 8019e10:	2b1d      	cmp	r3, #29
 8019e12:	d001      	beq.n	8019e18 <__sflush_r+0xac>
 8019e14:	2b16      	cmp	r3, #22
 8019e16:	d11e      	bne.n	8019e56 <__sflush_r+0xea>
 8019e18:	602f      	str	r7, [r5, #0]
 8019e1a:	2000      	movs	r0, #0
 8019e1c:	e022      	b.n	8019e64 <__sflush_r+0xf8>
 8019e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e22:	b21b      	sxth	r3, r3
 8019e24:	e01b      	b.n	8019e5e <__sflush_r+0xf2>
 8019e26:	690f      	ldr	r7, [r1, #16]
 8019e28:	2f00      	cmp	r7, #0
 8019e2a:	d0f6      	beq.n	8019e1a <__sflush_r+0xae>
 8019e2c:	0793      	lsls	r3, r2, #30
 8019e2e:	680e      	ldr	r6, [r1, #0]
 8019e30:	bf08      	it	eq
 8019e32:	694b      	ldreq	r3, [r1, #20]
 8019e34:	600f      	str	r7, [r1, #0]
 8019e36:	bf18      	it	ne
 8019e38:	2300      	movne	r3, #0
 8019e3a:	eba6 0807 	sub.w	r8, r6, r7
 8019e3e:	608b      	str	r3, [r1, #8]
 8019e40:	f1b8 0f00 	cmp.w	r8, #0
 8019e44:	dde9      	ble.n	8019e1a <__sflush_r+0xae>
 8019e46:	6a21      	ldr	r1, [r4, #32]
 8019e48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019e4a:	4643      	mov	r3, r8
 8019e4c:	463a      	mov	r2, r7
 8019e4e:	4628      	mov	r0, r5
 8019e50:	47b0      	blx	r6
 8019e52:	2800      	cmp	r0, #0
 8019e54:	dc08      	bgt.n	8019e68 <__sflush_r+0xfc>
 8019e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e5e:	81a3      	strh	r3, [r4, #12]
 8019e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e68:	4407      	add	r7, r0
 8019e6a:	eba8 0800 	sub.w	r8, r8, r0
 8019e6e:	e7e7      	b.n	8019e40 <__sflush_r+0xd4>
 8019e70:	dfbffffe 	.word	0xdfbffffe

08019e74 <_fflush_r>:
 8019e74:	b538      	push	{r3, r4, r5, lr}
 8019e76:	690b      	ldr	r3, [r1, #16]
 8019e78:	4605      	mov	r5, r0
 8019e7a:	460c      	mov	r4, r1
 8019e7c:	b913      	cbnz	r3, 8019e84 <_fflush_r+0x10>
 8019e7e:	2500      	movs	r5, #0
 8019e80:	4628      	mov	r0, r5
 8019e82:	bd38      	pop	{r3, r4, r5, pc}
 8019e84:	b118      	cbz	r0, 8019e8e <_fflush_r+0x1a>
 8019e86:	6a03      	ldr	r3, [r0, #32]
 8019e88:	b90b      	cbnz	r3, 8019e8e <_fflush_r+0x1a>
 8019e8a:	f7fe ffe3 	bl	8018e54 <__sinit>
 8019e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d0f3      	beq.n	8019e7e <_fflush_r+0xa>
 8019e96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019e98:	07d0      	lsls	r0, r2, #31
 8019e9a:	d404      	bmi.n	8019ea6 <_fflush_r+0x32>
 8019e9c:	0599      	lsls	r1, r3, #22
 8019e9e:	d402      	bmi.n	8019ea6 <_fflush_r+0x32>
 8019ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019ea2:	f7ff faa6 	bl	80193f2 <__retarget_lock_acquire_recursive>
 8019ea6:	4628      	mov	r0, r5
 8019ea8:	4621      	mov	r1, r4
 8019eaa:	f7ff ff5f 	bl	8019d6c <__sflush_r>
 8019eae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019eb0:	07da      	lsls	r2, r3, #31
 8019eb2:	4605      	mov	r5, r0
 8019eb4:	d4e4      	bmi.n	8019e80 <_fflush_r+0xc>
 8019eb6:	89a3      	ldrh	r3, [r4, #12]
 8019eb8:	059b      	lsls	r3, r3, #22
 8019eba:	d4e1      	bmi.n	8019e80 <_fflush_r+0xc>
 8019ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019ebe:	f7ff fa99 	bl	80193f4 <__retarget_lock_release_recursive>
 8019ec2:	e7dd      	b.n	8019e80 <_fflush_r+0xc>

08019ec4 <fiprintf>:
 8019ec4:	b40e      	push	{r1, r2, r3}
 8019ec6:	b503      	push	{r0, r1, lr}
 8019ec8:	4601      	mov	r1, r0
 8019eca:	ab03      	add	r3, sp, #12
 8019ecc:	4805      	ldr	r0, [pc, #20]	@ (8019ee4 <fiprintf+0x20>)
 8019ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ed2:	6800      	ldr	r0, [r0, #0]
 8019ed4:	9301      	str	r3, [sp, #4]
 8019ed6:	f7ff fca3 	bl	8019820 <_vfiprintf_r>
 8019eda:	b002      	add	sp, #8
 8019edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ee0:	b003      	add	sp, #12
 8019ee2:	4770      	bx	lr
 8019ee4:	20000830 	.word	0x20000830

08019ee8 <__swhatbuf_r>:
 8019ee8:	b570      	push	{r4, r5, r6, lr}
 8019eea:	460c      	mov	r4, r1
 8019eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ef0:	2900      	cmp	r1, #0
 8019ef2:	b096      	sub	sp, #88	@ 0x58
 8019ef4:	4615      	mov	r5, r2
 8019ef6:	461e      	mov	r6, r3
 8019ef8:	da0d      	bge.n	8019f16 <__swhatbuf_r+0x2e>
 8019efa:	89a3      	ldrh	r3, [r4, #12]
 8019efc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019f00:	f04f 0100 	mov.w	r1, #0
 8019f04:	bf14      	ite	ne
 8019f06:	2340      	movne	r3, #64	@ 0x40
 8019f08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019f0c:	2000      	movs	r0, #0
 8019f0e:	6031      	str	r1, [r6, #0]
 8019f10:	602b      	str	r3, [r5, #0]
 8019f12:	b016      	add	sp, #88	@ 0x58
 8019f14:	bd70      	pop	{r4, r5, r6, pc}
 8019f16:	466a      	mov	r2, sp
 8019f18:	f000 f848 	bl	8019fac <_fstat_r>
 8019f1c:	2800      	cmp	r0, #0
 8019f1e:	dbec      	blt.n	8019efa <__swhatbuf_r+0x12>
 8019f20:	9901      	ldr	r1, [sp, #4]
 8019f22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019f26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019f2a:	4259      	negs	r1, r3
 8019f2c:	4159      	adcs	r1, r3
 8019f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019f32:	e7eb      	b.n	8019f0c <__swhatbuf_r+0x24>

08019f34 <__smakebuf_r>:
 8019f34:	898b      	ldrh	r3, [r1, #12]
 8019f36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f38:	079d      	lsls	r5, r3, #30
 8019f3a:	4606      	mov	r6, r0
 8019f3c:	460c      	mov	r4, r1
 8019f3e:	d507      	bpl.n	8019f50 <__smakebuf_r+0x1c>
 8019f40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019f44:	6023      	str	r3, [r4, #0]
 8019f46:	6123      	str	r3, [r4, #16]
 8019f48:	2301      	movs	r3, #1
 8019f4a:	6163      	str	r3, [r4, #20]
 8019f4c:	b003      	add	sp, #12
 8019f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f50:	ab01      	add	r3, sp, #4
 8019f52:	466a      	mov	r2, sp
 8019f54:	f7ff ffc8 	bl	8019ee8 <__swhatbuf_r>
 8019f58:	9f00      	ldr	r7, [sp, #0]
 8019f5a:	4605      	mov	r5, r0
 8019f5c:	4639      	mov	r1, r7
 8019f5e:	4630      	mov	r0, r6
 8019f60:	f7fe fd46 	bl	80189f0 <_malloc_r>
 8019f64:	b948      	cbnz	r0, 8019f7a <__smakebuf_r+0x46>
 8019f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f6a:	059a      	lsls	r2, r3, #22
 8019f6c:	d4ee      	bmi.n	8019f4c <__smakebuf_r+0x18>
 8019f6e:	f023 0303 	bic.w	r3, r3, #3
 8019f72:	f043 0302 	orr.w	r3, r3, #2
 8019f76:	81a3      	strh	r3, [r4, #12]
 8019f78:	e7e2      	b.n	8019f40 <__smakebuf_r+0xc>
 8019f7a:	89a3      	ldrh	r3, [r4, #12]
 8019f7c:	6020      	str	r0, [r4, #0]
 8019f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019f82:	81a3      	strh	r3, [r4, #12]
 8019f84:	9b01      	ldr	r3, [sp, #4]
 8019f86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019f8a:	b15b      	cbz	r3, 8019fa4 <__smakebuf_r+0x70>
 8019f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019f90:	4630      	mov	r0, r6
 8019f92:	f000 f81d 	bl	8019fd0 <_isatty_r>
 8019f96:	b128      	cbz	r0, 8019fa4 <__smakebuf_r+0x70>
 8019f98:	89a3      	ldrh	r3, [r4, #12]
 8019f9a:	f023 0303 	bic.w	r3, r3, #3
 8019f9e:	f043 0301 	orr.w	r3, r3, #1
 8019fa2:	81a3      	strh	r3, [r4, #12]
 8019fa4:	89a3      	ldrh	r3, [r4, #12]
 8019fa6:	431d      	orrs	r5, r3
 8019fa8:	81a5      	strh	r5, [r4, #12]
 8019faa:	e7cf      	b.n	8019f4c <__smakebuf_r+0x18>

08019fac <_fstat_r>:
 8019fac:	b538      	push	{r3, r4, r5, lr}
 8019fae:	4d07      	ldr	r5, [pc, #28]	@ (8019fcc <_fstat_r+0x20>)
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	4604      	mov	r4, r0
 8019fb4:	4608      	mov	r0, r1
 8019fb6:	4611      	mov	r1, r2
 8019fb8:	602b      	str	r3, [r5, #0]
 8019fba:	f7e8 f943 	bl	8002244 <_fstat>
 8019fbe:	1c43      	adds	r3, r0, #1
 8019fc0:	d102      	bne.n	8019fc8 <_fstat_r+0x1c>
 8019fc2:	682b      	ldr	r3, [r5, #0]
 8019fc4:	b103      	cbz	r3, 8019fc8 <_fstat_r+0x1c>
 8019fc6:	6023      	str	r3, [r4, #0]
 8019fc8:	bd38      	pop	{r3, r4, r5, pc}
 8019fca:	bf00      	nop
 8019fcc:	2000b8a4 	.word	0x2000b8a4

08019fd0 <_isatty_r>:
 8019fd0:	b538      	push	{r3, r4, r5, lr}
 8019fd2:	4d06      	ldr	r5, [pc, #24]	@ (8019fec <_isatty_r+0x1c>)
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	4604      	mov	r4, r0
 8019fd8:	4608      	mov	r0, r1
 8019fda:	602b      	str	r3, [r5, #0]
 8019fdc:	f7e8 f942 	bl	8002264 <_isatty>
 8019fe0:	1c43      	adds	r3, r0, #1
 8019fe2:	d102      	bne.n	8019fea <_isatty_r+0x1a>
 8019fe4:	682b      	ldr	r3, [r5, #0]
 8019fe6:	b103      	cbz	r3, 8019fea <_isatty_r+0x1a>
 8019fe8:	6023      	str	r3, [r4, #0]
 8019fea:	bd38      	pop	{r3, r4, r5, pc}
 8019fec:	2000b8a4 	.word	0x2000b8a4

08019ff0 <abort>:
 8019ff0:	b508      	push	{r3, lr}
 8019ff2:	2006      	movs	r0, #6
 8019ff4:	f000 f82c 	bl	801a050 <raise>
 8019ff8:	2001      	movs	r0, #1
 8019ffa:	f7e8 f8d3 	bl	80021a4 <_exit>

08019ffe <_raise_r>:
 8019ffe:	291f      	cmp	r1, #31
 801a000:	b538      	push	{r3, r4, r5, lr}
 801a002:	4605      	mov	r5, r0
 801a004:	460c      	mov	r4, r1
 801a006:	d904      	bls.n	801a012 <_raise_r+0x14>
 801a008:	2316      	movs	r3, #22
 801a00a:	6003      	str	r3, [r0, #0]
 801a00c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a010:	bd38      	pop	{r3, r4, r5, pc}
 801a012:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a014:	b112      	cbz	r2, 801a01c <_raise_r+0x1e>
 801a016:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a01a:	b94b      	cbnz	r3, 801a030 <_raise_r+0x32>
 801a01c:	4628      	mov	r0, r5
 801a01e:	f000 f831 	bl	801a084 <_getpid_r>
 801a022:	4622      	mov	r2, r4
 801a024:	4601      	mov	r1, r0
 801a026:	4628      	mov	r0, r5
 801a028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a02c:	f000 b818 	b.w	801a060 <_kill_r>
 801a030:	2b01      	cmp	r3, #1
 801a032:	d00a      	beq.n	801a04a <_raise_r+0x4c>
 801a034:	1c59      	adds	r1, r3, #1
 801a036:	d103      	bne.n	801a040 <_raise_r+0x42>
 801a038:	2316      	movs	r3, #22
 801a03a:	6003      	str	r3, [r0, #0]
 801a03c:	2001      	movs	r0, #1
 801a03e:	e7e7      	b.n	801a010 <_raise_r+0x12>
 801a040:	2100      	movs	r1, #0
 801a042:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a046:	4620      	mov	r0, r4
 801a048:	4798      	blx	r3
 801a04a:	2000      	movs	r0, #0
 801a04c:	e7e0      	b.n	801a010 <_raise_r+0x12>
	...

0801a050 <raise>:
 801a050:	4b02      	ldr	r3, [pc, #8]	@ (801a05c <raise+0xc>)
 801a052:	4601      	mov	r1, r0
 801a054:	6818      	ldr	r0, [r3, #0]
 801a056:	f7ff bfd2 	b.w	8019ffe <_raise_r>
 801a05a:	bf00      	nop
 801a05c:	20000830 	.word	0x20000830

0801a060 <_kill_r>:
 801a060:	b538      	push	{r3, r4, r5, lr}
 801a062:	4d07      	ldr	r5, [pc, #28]	@ (801a080 <_kill_r+0x20>)
 801a064:	2300      	movs	r3, #0
 801a066:	4604      	mov	r4, r0
 801a068:	4608      	mov	r0, r1
 801a06a:	4611      	mov	r1, r2
 801a06c:	602b      	str	r3, [r5, #0]
 801a06e:	f7e8 f889 	bl	8002184 <_kill>
 801a072:	1c43      	adds	r3, r0, #1
 801a074:	d102      	bne.n	801a07c <_kill_r+0x1c>
 801a076:	682b      	ldr	r3, [r5, #0]
 801a078:	b103      	cbz	r3, 801a07c <_kill_r+0x1c>
 801a07a:	6023      	str	r3, [r4, #0]
 801a07c:	bd38      	pop	{r3, r4, r5, pc}
 801a07e:	bf00      	nop
 801a080:	2000b8a4 	.word	0x2000b8a4

0801a084 <_getpid_r>:
 801a084:	f7e8 b876 	b.w	8002174 <_getpid>

0801a088 <atan2>:
 801a088:	f000 baaa 	b.w	801a5e0 <__ieee754_atan2>

0801a08c <sqrt>:
 801a08c:	b538      	push	{r3, r4, r5, lr}
 801a08e:	ed2d 8b02 	vpush	{d8}
 801a092:	ec55 4b10 	vmov	r4, r5, d0
 801a096:	f000 f9c7 	bl	801a428 <__ieee754_sqrt>
 801a09a:	4622      	mov	r2, r4
 801a09c:	462b      	mov	r3, r5
 801a09e:	4620      	mov	r0, r4
 801a0a0:	4629      	mov	r1, r5
 801a0a2:	eeb0 8a40 	vmov.f32	s16, s0
 801a0a6:	eef0 8a60 	vmov.f32	s17, s1
 801a0aa:	f7e6 fd77 	bl	8000b9c <__aeabi_dcmpun>
 801a0ae:	b990      	cbnz	r0, 801a0d6 <sqrt+0x4a>
 801a0b0:	2200      	movs	r2, #0
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	4620      	mov	r0, r4
 801a0b6:	4629      	mov	r1, r5
 801a0b8:	f7e6 fd48 	bl	8000b4c <__aeabi_dcmplt>
 801a0bc:	b158      	cbz	r0, 801a0d6 <sqrt+0x4a>
 801a0be:	f7ff f96d 	bl	801939c <__errno>
 801a0c2:	2321      	movs	r3, #33	@ 0x21
 801a0c4:	6003      	str	r3, [r0, #0]
 801a0c6:	2200      	movs	r2, #0
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	4610      	mov	r0, r2
 801a0cc:	4619      	mov	r1, r3
 801a0ce:	f7e6 fbf5 	bl	80008bc <__aeabi_ddiv>
 801a0d2:	ec41 0b18 	vmov	d8, r0, r1
 801a0d6:	eeb0 0a48 	vmov.f32	s0, s16
 801a0da:	eef0 0a68 	vmov.f32	s1, s17
 801a0de:	ecbd 8b02 	vpop	{d8}
 801a0e2:	bd38      	pop	{r3, r4, r5, pc}
 801a0e4:	0000      	movs	r0, r0
	...

0801a0e8 <atan>:
 801a0e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0ec:	ec55 4b10 	vmov	r4, r5, d0
 801a0f0:	4bbf      	ldr	r3, [pc, #764]	@ (801a3f0 <atan+0x308>)
 801a0f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801a0f6:	429e      	cmp	r6, r3
 801a0f8:	46ab      	mov	fp, r5
 801a0fa:	d918      	bls.n	801a12e <atan+0x46>
 801a0fc:	4bbd      	ldr	r3, [pc, #756]	@ (801a3f4 <atan+0x30c>)
 801a0fe:	429e      	cmp	r6, r3
 801a100:	d801      	bhi.n	801a106 <atan+0x1e>
 801a102:	d109      	bne.n	801a118 <atan+0x30>
 801a104:	b144      	cbz	r4, 801a118 <atan+0x30>
 801a106:	4622      	mov	r2, r4
 801a108:	462b      	mov	r3, r5
 801a10a:	4620      	mov	r0, r4
 801a10c:	4629      	mov	r1, r5
 801a10e:	f7e6 f8f5 	bl	80002fc <__adddf3>
 801a112:	4604      	mov	r4, r0
 801a114:	460d      	mov	r5, r1
 801a116:	e006      	b.n	801a126 <atan+0x3e>
 801a118:	f1bb 0f00 	cmp.w	fp, #0
 801a11c:	f340 812b 	ble.w	801a376 <atan+0x28e>
 801a120:	a597      	add	r5, pc, #604	@ (adr r5, 801a380 <atan+0x298>)
 801a122:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a126:	ec45 4b10 	vmov	d0, r4, r5
 801a12a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a12e:	4bb2      	ldr	r3, [pc, #712]	@ (801a3f8 <atan+0x310>)
 801a130:	429e      	cmp	r6, r3
 801a132:	d813      	bhi.n	801a15c <atan+0x74>
 801a134:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801a138:	429e      	cmp	r6, r3
 801a13a:	d80c      	bhi.n	801a156 <atan+0x6e>
 801a13c:	a392      	add	r3, pc, #584	@ (adr r3, 801a388 <atan+0x2a0>)
 801a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a142:	4620      	mov	r0, r4
 801a144:	4629      	mov	r1, r5
 801a146:	f7e6 f8d9 	bl	80002fc <__adddf3>
 801a14a:	4bac      	ldr	r3, [pc, #688]	@ (801a3fc <atan+0x314>)
 801a14c:	2200      	movs	r2, #0
 801a14e:	f7e6 fd1b 	bl	8000b88 <__aeabi_dcmpgt>
 801a152:	2800      	cmp	r0, #0
 801a154:	d1e7      	bne.n	801a126 <atan+0x3e>
 801a156:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801a15a:	e029      	b.n	801a1b0 <atan+0xc8>
 801a15c:	f000 f95c 	bl	801a418 <fabs>
 801a160:	4ba7      	ldr	r3, [pc, #668]	@ (801a400 <atan+0x318>)
 801a162:	429e      	cmp	r6, r3
 801a164:	ec55 4b10 	vmov	r4, r5, d0
 801a168:	f200 80bc 	bhi.w	801a2e4 <atan+0x1fc>
 801a16c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801a170:	429e      	cmp	r6, r3
 801a172:	f200 809e 	bhi.w	801a2b2 <atan+0x1ca>
 801a176:	4622      	mov	r2, r4
 801a178:	462b      	mov	r3, r5
 801a17a:	4620      	mov	r0, r4
 801a17c:	4629      	mov	r1, r5
 801a17e:	f7e6 f8bd 	bl	80002fc <__adddf3>
 801a182:	4b9e      	ldr	r3, [pc, #632]	@ (801a3fc <atan+0x314>)
 801a184:	2200      	movs	r2, #0
 801a186:	f7e6 f8b7 	bl	80002f8 <__aeabi_dsub>
 801a18a:	2200      	movs	r2, #0
 801a18c:	4606      	mov	r6, r0
 801a18e:	460f      	mov	r7, r1
 801a190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a194:	4620      	mov	r0, r4
 801a196:	4629      	mov	r1, r5
 801a198:	f7e6 f8b0 	bl	80002fc <__adddf3>
 801a19c:	4602      	mov	r2, r0
 801a19e:	460b      	mov	r3, r1
 801a1a0:	4630      	mov	r0, r6
 801a1a2:	4639      	mov	r1, r7
 801a1a4:	f7e6 fb8a 	bl	80008bc <__aeabi_ddiv>
 801a1a8:	f04f 0a00 	mov.w	sl, #0
 801a1ac:	4604      	mov	r4, r0
 801a1ae:	460d      	mov	r5, r1
 801a1b0:	4622      	mov	r2, r4
 801a1b2:	462b      	mov	r3, r5
 801a1b4:	4620      	mov	r0, r4
 801a1b6:	4629      	mov	r1, r5
 801a1b8:	f7e6 fa56 	bl	8000668 <__aeabi_dmul>
 801a1bc:	4602      	mov	r2, r0
 801a1be:	460b      	mov	r3, r1
 801a1c0:	4680      	mov	r8, r0
 801a1c2:	4689      	mov	r9, r1
 801a1c4:	f7e6 fa50 	bl	8000668 <__aeabi_dmul>
 801a1c8:	a371      	add	r3, pc, #452	@ (adr r3, 801a390 <atan+0x2a8>)
 801a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ce:	4606      	mov	r6, r0
 801a1d0:	460f      	mov	r7, r1
 801a1d2:	f7e6 fa49 	bl	8000668 <__aeabi_dmul>
 801a1d6:	a370      	add	r3, pc, #448	@ (adr r3, 801a398 <atan+0x2b0>)
 801a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1dc:	f7e6 f88e 	bl	80002fc <__adddf3>
 801a1e0:	4632      	mov	r2, r6
 801a1e2:	463b      	mov	r3, r7
 801a1e4:	f7e6 fa40 	bl	8000668 <__aeabi_dmul>
 801a1e8:	a36d      	add	r3, pc, #436	@ (adr r3, 801a3a0 <atan+0x2b8>)
 801a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ee:	f7e6 f885 	bl	80002fc <__adddf3>
 801a1f2:	4632      	mov	r2, r6
 801a1f4:	463b      	mov	r3, r7
 801a1f6:	f7e6 fa37 	bl	8000668 <__aeabi_dmul>
 801a1fa:	a36b      	add	r3, pc, #428	@ (adr r3, 801a3a8 <atan+0x2c0>)
 801a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a200:	f7e6 f87c 	bl	80002fc <__adddf3>
 801a204:	4632      	mov	r2, r6
 801a206:	463b      	mov	r3, r7
 801a208:	f7e6 fa2e 	bl	8000668 <__aeabi_dmul>
 801a20c:	a368      	add	r3, pc, #416	@ (adr r3, 801a3b0 <atan+0x2c8>)
 801a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a212:	f7e6 f873 	bl	80002fc <__adddf3>
 801a216:	4632      	mov	r2, r6
 801a218:	463b      	mov	r3, r7
 801a21a:	f7e6 fa25 	bl	8000668 <__aeabi_dmul>
 801a21e:	a366      	add	r3, pc, #408	@ (adr r3, 801a3b8 <atan+0x2d0>)
 801a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a224:	f7e6 f86a 	bl	80002fc <__adddf3>
 801a228:	4642      	mov	r2, r8
 801a22a:	464b      	mov	r3, r9
 801a22c:	f7e6 fa1c 	bl	8000668 <__aeabi_dmul>
 801a230:	a363      	add	r3, pc, #396	@ (adr r3, 801a3c0 <atan+0x2d8>)
 801a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a236:	4680      	mov	r8, r0
 801a238:	4689      	mov	r9, r1
 801a23a:	4630      	mov	r0, r6
 801a23c:	4639      	mov	r1, r7
 801a23e:	f7e6 fa13 	bl	8000668 <__aeabi_dmul>
 801a242:	a361      	add	r3, pc, #388	@ (adr r3, 801a3c8 <atan+0x2e0>)
 801a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a248:	f7e6 f856 	bl	80002f8 <__aeabi_dsub>
 801a24c:	4632      	mov	r2, r6
 801a24e:	463b      	mov	r3, r7
 801a250:	f7e6 fa0a 	bl	8000668 <__aeabi_dmul>
 801a254:	a35e      	add	r3, pc, #376	@ (adr r3, 801a3d0 <atan+0x2e8>)
 801a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a25a:	f7e6 f84d 	bl	80002f8 <__aeabi_dsub>
 801a25e:	4632      	mov	r2, r6
 801a260:	463b      	mov	r3, r7
 801a262:	f7e6 fa01 	bl	8000668 <__aeabi_dmul>
 801a266:	a35c      	add	r3, pc, #368	@ (adr r3, 801a3d8 <atan+0x2f0>)
 801a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a26c:	f7e6 f844 	bl	80002f8 <__aeabi_dsub>
 801a270:	4632      	mov	r2, r6
 801a272:	463b      	mov	r3, r7
 801a274:	f7e6 f9f8 	bl	8000668 <__aeabi_dmul>
 801a278:	a359      	add	r3, pc, #356	@ (adr r3, 801a3e0 <atan+0x2f8>)
 801a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a27e:	f7e6 f83b 	bl	80002f8 <__aeabi_dsub>
 801a282:	4632      	mov	r2, r6
 801a284:	463b      	mov	r3, r7
 801a286:	f7e6 f9ef 	bl	8000668 <__aeabi_dmul>
 801a28a:	4602      	mov	r2, r0
 801a28c:	460b      	mov	r3, r1
 801a28e:	4640      	mov	r0, r8
 801a290:	4649      	mov	r1, r9
 801a292:	f7e6 f833 	bl	80002fc <__adddf3>
 801a296:	4622      	mov	r2, r4
 801a298:	462b      	mov	r3, r5
 801a29a:	f7e6 f9e5 	bl	8000668 <__aeabi_dmul>
 801a29e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801a2a2:	4602      	mov	r2, r0
 801a2a4:	460b      	mov	r3, r1
 801a2a6:	d148      	bne.n	801a33a <atan+0x252>
 801a2a8:	4620      	mov	r0, r4
 801a2aa:	4629      	mov	r1, r5
 801a2ac:	f7e6 f824 	bl	80002f8 <__aeabi_dsub>
 801a2b0:	e72f      	b.n	801a112 <atan+0x2a>
 801a2b2:	4b52      	ldr	r3, [pc, #328]	@ (801a3fc <atan+0x314>)
 801a2b4:	2200      	movs	r2, #0
 801a2b6:	4620      	mov	r0, r4
 801a2b8:	4629      	mov	r1, r5
 801a2ba:	f7e6 f81d 	bl	80002f8 <__aeabi_dsub>
 801a2be:	4b4f      	ldr	r3, [pc, #316]	@ (801a3fc <atan+0x314>)
 801a2c0:	4606      	mov	r6, r0
 801a2c2:	460f      	mov	r7, r1
 801a2c4:	2200      	movs	r2, #0
 801a2c6:	4620      	mov	r0, r4
 801a2c8:	4629      	mov	r1, r5
 801a2ca:	f7e6 f817 	bl	80002fc <__adddf3>
 801a2ce:	4602      	mov	r2, r0
 801a2d0:	460b      	mov	r3, r1
 801a2d2:	4630      	mov	r0, r6
 801a2d4:	4639      	mov	r1, r7
 801a2d6:	f7e6 faf1 	bl	80008bc <__aeabi_ddiv>
 801a2da:	f04f 0a01 	mov.w	sl, #1
 801a2de:	4604      	mov	r4, r0
 801a2e0:	460d      	mov	r5, r1
 801a2e2:	e765      	b.n	801a1b0 <atan+0xc8>
 801a2e4:	4b47      	ldr	r3, [pc, #284]	@ (801a404 <atan+0x31c>)
 801a2e6:	429e      	cmp	r6, r3
 801a2e8:	d21c      	bcs.n	801a324 <atan+0x23c>
 801a2ea:	4b47      	ldr	r3, [pc, #284]	@ (801a408 <atan+0x320>)
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	4620      	mov	r0, r4
 801a2f0:	4629      	mov	r1, r5
 801a2f2:	f7e6 f801 	bl	80002f8 <__aeabi_dsub>
 801a2f6:	4b44      	ldr	r3, [pc, #272]	@ (801a408 <atan+0x320>)
 801a2f8:	4606      	mov	r6, r0
 801a2fa:	460f      	mov	r7, r1
 801a2fc:	2200      	movs	r2, #0
 801a2fe:	4620      	mov	r0, r4
 801a300:	4629      	mov	r1, r5
 801a302:	f7e6 f9b1 	bl	8000668 <__aeabi_dmul>
 801a306:	4b3d      	ldr	r3, [pc, #244]	@ (801a3fc <atan+0x314>)
 801a308:	2200      	movs	r2, #0
 801a30a:	f7e5 fff7 	bl	80002fc <__adddf3>
 801a30e:	4602      	mov	r2, r0
 801a310:	460b      	mov	r3, r1
 801a312:	4630      	mov	r0, r6
 801a314:	4639      	mov	r1, r7
 801a316:	f7e6 fad1 	bl	80008bc <__aeabi_ddiv>
 801a31a:	f04f 0a02 	mov.w	sl, #2
 801a31e:	4604      	mov	r4, r0
 801a320:	460d      	mov	r5, r1
 801a322:	e745      	b.n	801a1b0 <atan+0xc8>
 801a324:	4622      	mov	r2, r4
 801a326:	462b      	mov	r3, r5
 801a328:	4938      	ldr	r1, [pc, #224]	@ (801a40c <atan+0x324>)
 801a32a:	2000      	movs	r0, #0
 801a32c:	f7e6 fac6 	bl	80008bc <__aeabi_ddiv>
 801a330:	f04f 0a03 	mov.w	sl, #3
 801a334:	4604      	mov	r4, r0
 801a336:	460d      	mov	r5, r1
 801a338:	e73a      	b.n	801a1b0 <atan+0xc8>
 801a33a:	4b35      	ldr	r3, [pc, #212]	@ (801a410 <atan+0x328>)
 801a33c:	4e35      	ldr	r6, [pc, #212]	@ (801a414 <atan+0x32c>)
 801a33e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a346:	f7e5 ffd7 	bl	80002f8 <__aeabi_dsub>
 801a34a:	4622      	mov	r2, r4
 801a34c:	462b      	mov	r3, r5
 801a34e:	f7e5 ffd3 	bl	80002f8 <__aeabi_dsub>
 801a352:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a356:	4602      	mov	r2, r0
 801a358:	460b      	mov	r3, r1
 801a35a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a35e:	f7e5 ffcb 	bl	80002f8 <__aeabi_dsub>
 801a362:	f1bb 0f00 	cmp.w	fp, #0
 801a366:	4604      	mov	r4, r0
 801a368:	460d      	mov	r5, r1
 801a36a:	f6bf aedc 	bge.w	801a126 <atan+0x3e>
 801a36e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a372:	461d      	mov	r5, r3
 801a374:	e6d7      	b.n	801a126 <atan+0x3e>
 801a376:	a51c      	add	r5, pc, #112	@ (adr r5, 801a3e8 <atan+0x300>)
 801a378:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a37c:	e6d3      	b.n	801a126 <atan+0x3e>
 801a37e:	bf00      	nop
 801a380:	54442d18 	.word	0x54442d18
 801a384:	3ff921fb 	.word	0x3ff921fb
 801a388:	8800759c 	.word	0x8800759c
 801a38c:	7e37e43c 	.word	0x7e37e43c
 801a390:	e322da11 	.word	0xe322da11
 801a394:	3f90ad3a 	.word	0x3f90ad3a
 801a398:	24760deb 	.word	0x24760deb
 801a39c:	3fa97b4b 	.word	0x3fa97b4b
 801a3a0:	a0d03d51 	.word	0xa0d03d51
 801a3a4:	3fb10d66 	.word	0x3fb10d66
 801a3a8:	c54c206e 	.word	0xc54c206e
 801a3ac:	3fb745cd 	.word	0x3fb745cd
 801a3b0:	920083ff 	.word	0x920083ff
 801a3b4:	3fc24924 	.word	0x3fc24924
 801a3b8:	5555550d 	.word	0x5555550d
 801a3bc:	3fd55555 	.word	0x3fd55555
 801a3c0:	2c6a6c2f 	.word	0x2c6a6c2f
 801a3c4:	bfa2b444 	.word	0xbfa2b444
 801a3c8:	52defd9a 	.word	0x52defd9a
 801a3cc:	3fadde2d 	.word	0x3fadde2d
 801a3d0:	af749a6d 	.word	0xaf749a6d
 801a3d4:	3fb3b0f2 	.word	0x3fb3b0f2
 801a3d8:	fe231671 	.word	0xfe231671
 801a3dc:	3fbc71c6 	.word	0x3fbc71c6
 801a3e0:	9998ebc4 	.word	0x9998ebc4
 801a3e4:	3fc99999 	.word	0x3fc99999
 801a3e8:	54442d18 	.word	0x54442d18
 801a3ec:	bff921fb 	.word	0xbff921fb
 801a3f0:	440fffff 	.word	0x440fffff
 801a3f4:	7ff00000 	.word	0x7ff00000
 801a3f8:	3fdbffff 	.word	0x3fdbffff
 801a3fc:	3ff00000 	.word	0x3ff00000
 801a400:	3ff2ffff 	.word	0x3ff2ffff
 801a404:	40038000 	.word	0x40038000
 801a408:	3ff80000 	.word	0x3ff80000
 801a40c:	bff00000 	.word	0xbff00000
 801a410:	0801be00 	.word	0x0801be00
 801a414:	0801be20 	.word	0x0801be20

0801a418 <fabs>:
 801a418:	ec51 0b10 	vmov	r0, r1, d0
 801a41c:	4602      	mov	r2, r0
 801a41e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a422:	ec43 2b10 	vmov	d0, r2, r3
 801a426:	4770      	bx	lr

0801a428 <__ieee754_sqrt>:
 801a428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a42c:	4a68      	ldr	r2, [pc, #416]	@ (801a5d0 <__ieee754_sqrt+0x1a8>)
 801a42e:	ec55 4b10 	vmov	r4, r5, d0
 801a432:	43aa      	bics	r2, r5
 801a434:	462b      	mov	r3, r5
 801a436:	4621      	mov	r1, r4
 801a438:	d110      	bne.n	801a45c <__ieee754_sqrt+0x34>
 801a43a:	4622      	mov	r2, r4
 801a43c:	4620      	mov	r0, r4
 801a43e:	4629      	mov	r1, r5
 801a440:	f7e6 f912 	bl	8000668 <__aeabi_dmul>
 801a444:	4602      	mov	r2, r0
 801a446:	460b      	mov	r3, r1
 801a448:	4620      	mov	r0, r4
 801a44a:	4629      	mov	r1, r5
 801a44c:	f7e5 ff56 	bl	80002fc <__adddf3>
 801a450:	4604      	mov	r4, r0
 801a452:	460d      	mov	r5, r1
 801a454:	ec45 4b10 	vmov	d0, r4, r5
 801a458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a45c:	2d00      	cmp	r5, #0
 801a45e:	dc0e      	bgt.n	801a47e <__ieee754_sqrt+0x56>
 801a460:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801a464:	4322      	orrs	r2, r4
 801a466:	d0f5      	beq.n	801a454 <__ieee754_sqrt+0x2c>
 801a468:	b19d      	cbz	r5, 801a492 <__ieee754_sqrt+0x6a>
 801a46a:	4622      	mov	r2, r4
 801a46c:	4620      	mov	r0, r4
 801a46e:	4629      	mov	r1, r5
 801a470:	f7e5 ff42 	bl	80002f8 <__aeabi_dsub>
 801a474:	4602      	mov	r2, r0
 801a476:	460b      	mov	r3, r1
 801a478:	f7e6 fa20 	bl	80008bc <__aeabi_ddiv>
 801a47c:	e7e8      	b.n	801a450 <__ieee754_sqrt+0x28>
 801a47e:	152a      	asrs	r2, r5, #20
 801a480:	d115      	bne.n	801a4ae <__ieee754_sqrt+0x86>
 801a482:	2000      	movs	r0, #0
 801a484:	e009      	b.n	801a49a <__ieee754_sqrt+0x72>
 801a486:	0acb      	lsrs	r3, r1, #11
 801a488:	3a15      	subs	r2, #21
 801a48a:	0549      	lsls	r1, r1, #21
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d0fa      	beq.n	801a486 <__ieee754_sqrt+0x5e>
 801a490:	e7f7      	b.n	801a482 <__ieee754_sqrt+0x5a>
 801a492:	462a      	mov	r2, r5
 801a494:	e7fa      	b.n	801a48c <__ieee754_sqrt+0x64>
 801a496:	005b      	lsls	r3, r3, #1
 801a498:	3001      	adds	r0, #1
 801a49a:	02dc      	lsls	r4, r3, #11
 801a49c:	d5fb      	bpl.n	801a496 <__ieee754_sqrt+0x6e>
 801a49e:	1e44      	subs	r4, r0, #1
 801a4a0:	1b12      	subs	r2, r2, r4
 801a4a2:	f1c0 0420 	rsb	r4, r0, #32
 801a4a6:	fa21 f404 	lsr.w	r4, r1, r4
 801a4aa:	4323      	orrs	r3, r4
 801a4ac:	4081      	lsls	r1, r0
 801a4ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a4b2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801a4b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a4ba:	07d2      	lsls	r2, r2, #31
 801a4bc:	bf5c      	itt	pl
 801a4be:	005b      	lslpl	r3, r3, #1
 801a4c0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801a4c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a4c8:	bf58      	it	pl
 801a4ca:	0049      	lslpl	r1, r1, #1
 801a4cc:	2600      	movs	r6, #0
 801a4ce:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801a4d2:	106d      	asrs	r5, r5, #1
 801a4d4:	0049      	lsls	r1, r1, #1
 801a4d6:	2016      	movs	r0, #22
 801a4d8:	4632      	mov	r2, r6
 801a4da:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801a4de:	1917      	adds	r7, r2, r4
 801a4e0:	429f      	cmp	r7, r3
 801a4e2:	bfde      	ittt	le
 801a4e4:	193a      	addle	r2, r7, r4
 801a4e6:	1bdb      	suble	r3, r3, r7
 801a4e8:	1936      	addle	r6, r6, r4
 801a4ea:	0fcf      	lsrs	r7, r1, #31
 801a4ec:	3801      	subs	r0, #1
 801a4ee:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a4f2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a4f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a4fa:	d1f0      	bne.n	801a4de <__ieee754_sqrt+0xb6>
 801a4fc:	4604      	mov	r4, r0
 801a4fe:	2720      	movs	r7, #32
 801a500:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801a504:	429a      	cmp	r2, r3
 801a506:	eb00 0e0c 	add.w	lr, r0, ip
 801a50a:	db02      	blt.n	801a512 <__ieee754_sqrt+0xea>
 801a50c:	d113      	bne.n	801a536 <__ieee754_sqrt+0x10e>
 801a50e:	458e      	cmp	lr, r1
 801a510:	d811      	bhi.n	801a536 <__ieee754_sqrt+0x10e>
 801a512:	f1be 0f00 	cmp.w	lr, #0
 801a516:	eb0e 000c 	add.w	r0, lr, ip
 801a51a:	da42      	bge.n	801a5a2 <__ieee754_sqrt+0x17a>
 801a51c:	2800      	cmp	r0, #0
 801a51e:	db40      	blt.n	801a5a2 <__ieee754_sqrt+0x17a>
 801a520:	f102 0801 	add.w	r8, r2, #1
 801a524:	1a9b      	subs	r3, r3, r2
 801a526:	458e      	cmp	lr, r1
 801a528:	bf88      	it	hi
 801a52a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801a52e:	eba1 010e 	sub.w	r1, r1, lr
 801a532:	4464      	add	r4, ip
 801a534:	4642      	mov	r2, r8
 801a536:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801a53a:	3f01      	subs	r7, #1
 801a53c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801a540:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a544:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801a548:	d1dc      	bne.n	801a504 <__ieee754_sqrt+0xdc>
 801a54a:	4319      	orrs	r1, r3
 801a54c:	d01b      	beq.n	801a586 <__ieee754_sqrt+0x15e>
 801a54e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801a5d4 <__ieee754_sqrt+0x1ac>
 801a552:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801a5d8 <__ieee754_sqrt+0x1b0>
 801a556:	e9da 0100 	ldrd	r0, r1, [sl]
 801a55a:	e9db 2300 	ldrd	r2, r3, [fp]
 801a55e:	f7e5 fecb 	bl	80002f8 <__aeabi_dsub>
 801a562:	e9da 8900 	ldrd	r8, r9, [sl]
 801a566:	4602      	mov	r2, r0
 801a568:	460b      	mov	r3, r1
 801a56a:	4640      	mov	r0, r8
 801a56c:	4649      	mov	r1, r9
 801a56e:	f7e6 faf7 	bl	8000b60 <__aeabi_dcmple>
 801a572:	b140      	cbz	r0, 801a586 <__ieee754_sqrt+0x15e>
 801a574:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801a578:	e9da 0100 	ldrd	r0, r1, [sl]
 801a57c:	e9db 2300 	ldrd	r2, r3, [fp]
 801a580:	d111      	bne.n	801a5a6 <__ieee754_sqrt+0x17e>
 801a582:	3601      	adds	r6, #1
 801a584:	463c      	mov	r4, r7
 801a586:	1072      	asrs	r2, r6, #1
 801a588:	0863      	lsrs	r3, r4, #1
 801a58a:	07f1      	lsls	r1, r6, #31
 801a58c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801a590:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801a594:	bf48      	it	mi
 801a596:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801a59a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801a59e:	4618      	mov	r0, r3
 801a5a0:	e756      	b.n	801a450 <__ieee754_sqrt+0x28>
 801a5a2:	4690      	mov	r8, r2
 801a5a4:	e7be      	b.n	801a524 <__ieee754_sqrt+0xfc>
 801a5a6:	f7e5 fea9 	bl	80002fc <__adddf3>
 801a5aa:	e9da 8900 	ldrd	r8, r9, [sl]
 801a5ae:	4602      	mov	r2, r0
 801a5b0:	460b      	mov	r3, r1
 801a5b2:	4640      	mov	r0, r8
 801a5b4:	4649      	mov	r1, r9
 801a5b6:	f7e6 fac9 	bl	8000b4c <__aeabi_dcmplt>
 801a5ba:	b120      	cbz	r0, 801a5c6 <__ieee754_sqrt+0x19e>
 801a5bc:	1ca0      	adds	r0, r4, #2
 801a5be:	bf08      	it	eq
 801a5c0:	3601      	addeq	r6, #1
 801a5c2:	3402      	adds	r4, #2
 801a5c4:	e7df      	b.n	801a586 <__ieee754_sqrt+0x15e>
 801a5c6:	1c63      	adds	r3, r4, #1
 801a5c8:	f023 0401 	bic.w	r4, r3, #1
 801a5cc:	e7db      	b.n	801a586 <__ieee754_sqrt+0x15e>
 801a5ce:	bf00      	nop
 801a5d0:	7ff00000 	.word	0x7ff00000
 801a5d4:	20000888 	.word	0x20000888
 801a5d8:	20000880 	.word	0x20000880
 801a5dc:	00000000 	.word	0x00000000

0801a5e0 <__ieee754_atan2>:
 801a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5e4:	ec57 6b11 	vmov	r6, r7, d1
 801a5e8:	4273      	negs	r3, r6
 801a5ea:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801a768 <__ieee754_atan2+0x188>
 801a5ee:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801a5f2:	4333      	orrs	r3, r6
 801a5f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a5f8:	4543      	cmp	r3, r8
 801a5fa:	ec51 0b10 	vmov	r0, r1, d0
 801a5fe:	4635      	mov	r5, r6
 801a600:	d809      	bhi.n	801a616 <__ieee754_atan2+0x36>
 801a602:	4244      	negs	r4, r0
 801a604:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a608:	4304      	orrs	r4, r0
 801a60a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a60e:	4544      	cmp	r4, r8
 801a610:	468e      	mov	lr, r1
 801a612:	4681      	mov	r9, r0
 801a614:	d907      	bls.n	801a626 <__ieee754_atan2+0x46>
 801a616:	4632      	mov	r2, r6
 801a618:	463b      	mov	r3, r7
 801a61a:	f7e5 fe6f 	bl	80002fc <__adddf3>
 801a61e:	ec41 0b10 	vmov	d0, r0, r1
 801a622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a626:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801a62a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801a62e:	4334      	orrs	r4, r6
 801a630:	d103      	bne.n	801a63a <__ieee754_atan2+0x5a>
 801a632:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a636:	f7ff bd57 	b.w	801a0e8 <atan>
 801a63a:	17bc      	asrs	r4, r7, #30
 801a63c:	f004 0402 	and.w	r4, r4, #2
 801a640:	ea53 0909 	orrs.w	r9, r3, r9
 801a644:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a648:	d107      	bne.n	801a65a <__ieee754_atan2+0x7a>
 801a64a:	2c02      	cmp	r4, #2
 801a64c:	d05f      	beq.n	801a70e <__ieee754_atan2+0x12e>
 801a64e:	2c03      	cmp	r4, #3
 801a650:	d1e5      	bne.n	801a61e <__ieee754_atan2+0x3e>
 801a652:	a141      	add	r1, pc, #260	@ (adr r1, 801a758 <__ieee754_atan2+0x178>)
 801a654:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a658:	e7e1      	b.n	801a61e <__ieee754_atan2+0x3e>
 801a65a:	4315      	orrs	r5, r2
 801a65c:	d106      	bne.n	801a66c <__ieee754_atan2+0x8c>
 801a65e:	f1be 0f00 	cmp.w	lr, #0
 801a662:	da5f      	bge.n	801a724 <__ieee754_atan2+0x144>
 801a664:	a13e      	add	r1, pc, #248	@ (adr r1, 801a760 <__ieee754_atan2+0x180>)
 801a666:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a66a:	e7d8      	b.n	801a61e <__ieee754_atan2+0x3e>
 801a66c:	4542      	cmp	r2, r8
 801a66e:	d10f      	bne.n	801a690 <__ieee754_atan2+0xb0>
 801a670:	4293      	cmp	r3, r2
 801a672:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801a676:	d107      	bne.n	801a688 <__ieee754_atan2+0xa8>
 801a678:	2c02      	cmp	r4, #2
 801a67a:	d84c      	bhi.n	801a716 <__ieee754_atan2+0x136>
 801a67c:	4b34      	ldr	r3, [pc, #208]	@ (801a750 <__ieee754_atan2+0x170>)
 801a67e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a682:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a686:	e7ca      	b.n	801a61e <__ieee754_atan2+0x3e>
 801a688:	2c02      	cmp	r4, #2
 801a68a:	d848      	bhi.n	801a71e <__ieee754_atan2+0x13e>
 801a68c:	4b31      	ldr	r3, [pc, #196]	@ (801a754 <__ieee754_atan2+0x174>)
 801a68e:	e7f6      	b.n	801a67e <__ieee754_atan2+0x9e>
 801a690:	4543      	cmp	r3, r8
 801a692:	d0e4      	beq.n	801a65e <__ieee754_atan2+0x7e>
 801a694:	1a9b      	subs	r3, r3, r2
 801a696:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801a69a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a69e:	da1e      	bge.n	801a6de <__ieee754_atan2+0xfe>
 801a6a0:	2f00      	cmp	r7, #0
 801a6a2:	da01      	bge.n	801a6a8 <__ieee754_atan2+0xc8>
 801a6a4:	323c      	adds	r2, #60	@ 0x3c
 801a6a6:	db1e      	blt.n	801a6e6 <__ieee754_atan2+0x106>
 801a6a8:	4632      	mov	r2, r6
 801a6aa:	463b      	mov	r3, r7
 801a6ac:	f7e6 f906 	bl	80008bc <__aeabi_ddiv>
 801a6b0:	ec41 0b10 	vmov	d0, r0, r1
 801a6b4:	f7ff feb0 	bl	801a418 <fabs>
 801a6b8:	f7ff fd16 	bl	801a0e8 <atan>
 801a6bc:	ec51 0b10 	vmov	r0, r1, d0
 801a6c0:	2c01      	cmp	r4, #1
 801a6c2:	d013      	beq.n	801a6ec <__ieee754_atan2+0x10c>
 801a6c4:	2c02      	cmp	r4, #2
 801a6c6:	d015      	beq.n	801a6f4 <__ieee754_atan2+0x114>
 801a6c8:	2c00      	cmp	r4, #0
 801a6ca:	d0a8      	beq.n	801a61e <__ieee754_atan2+0x3e>
 801a6cc:	a318      	add	r3, pc, #96	@ (adr r3, 801a730 <__ieee754_atan2+0x150>)
 801a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6d2:	f7e5 fe11 	bl	80002f8 <__aeabi_dsub>
 801a6d6:	a318      	add	r3, pc, #96	@ (adr r3, 801a738 <__ieee754_atan2+0x158>)
 801a6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6dc:	e014      	b.n	801a708 <__ieee754_atan2+0x128>
 801a6de:	a118      	add	r1, pc, #96	@ (adr r1, 801a740 <__ieee754_atan2+0x160>)
 801a6e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6e4:	e7ec      	b.n	801a6c0 <__ieee754_atan2+0xe0>
 801a6e6:	2000      	movs	r0, #0
 801a6e8:	2100      	movs	r1, #0
 801a6ea:	e7e9      	b.n	801a6c0 <__ieee754_atan2+0xe0>
 801a6ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a6f0:	4619      	mov	r1, r3
 801a6f2:	e794      	b.n	801a61e <__ieee754_atan2+0x3e>
 801a6f4:	a30e      	add	r3, pc, #56	@ (adr r3, 801a730 <__ieee754_atan2+0x150>)
 801a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6fa:	f7e5 fdfd 	bl	80002f8 <__aeabi_dsub>
 801a6fe:	4602      	mov	r2, r0
 801a700:	460b      	mov	r3, r1
 801a702:	a10d      	add	r1, pc, #52	@ (adr r1, 801a738 <__ieee754_atan2+0x158>)
 801a704:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a708:	f7e5 fdf6 	bl	80002f8 <__aeabi_dsub>
 801a70c:	e787      	b.n	801a61e <__ieee754_atan2+0x3e>
 801a70e:	a10a      	add	r1, pc, #40	@ (adr r1, 801a738 <__ieee754_atan2+0x158>)
 801a710:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a714:	e783      	b.n	801a61e <__ieee754_atan2+0x3e>
 801a716:	a10c      	add	r1, pc, #48	@ (adr r1, 801a748 <__ieee754_atan2+0x168>)
 801a718:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a71c:	e77f      	b.n	801a61e <__ieee754_atan2+0x3e>
 801a71e:	2000      	movs	r0, #0
 801a720:	2100      	movs	r1, #0
 801a722:	e77c      	b.n	801a61e <__ieee754_atan2+0x3e>
 801a724:	a106      	add	r1, pc, #24	@ (adr r1, 801a740 <__ieee754_atan2+0x160>)
 801a726:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a72a:	e778      	b.n	801a61e <__ieee754_atan2+0x3e>
 801a72c:	f3af 8000 	nop.w
 801a730:	33145c07 	.word	0x33145c07
 801a734:	3ca1a626 	.word	0x3ca1a626
 801a738:	54442d18 	.word	0x54442d18
 801a73c:	400921fb 	.word	0x400921fb
 801a740:	54442d18 	.word	0x54442d18
 801a744:	3ff921fb 	.word	0x3ff921fb
 801a748:	54442d18 	.word	0x54442d18
 801a74c:	3fe921fb 	.word	0x3fe921fb
 801a750:	0801be58 	.word	0x0801be58
 801a754:	0801be40 	.word	0x0801be40
 801a758:	54442d18 	.word	0x54442d18
 801a75c:	c00921fb 	.word	0xc00921fb
 801a760:	54442d18 	.word	0x54442d18
 801a764:	bff921fb 	.word	0xbff921fb
 801a768:	7ff00000 	.word	0x7ff00000

0801a76c <_init>:
 801a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a76e:	bf00      	nop
 801a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a772:	bc08      	pop	{r3}
 801a774:	469e      	mov	lr, r3
 801a776:	4770      	bx	lr

0801a778 <_fini>:
 801a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a77a:	bf00      	nop
 801a77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a77e:	bc08      	pop	{r3}
 801a780:	469e      	mov	lr, r3
 801a782:	4770      	bx	lr
