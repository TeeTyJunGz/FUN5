
G474RE-Firmware-FUN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007014  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080071f4  080071f4  000081f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800727c  0800727c  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  0800727c  0800727c  0000827c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007284  08007284  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007284  08007284  00008284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007288  08007288  00008288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800728c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aa4  20000010  0800729c  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ab4  0800729c  00009ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021378  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ac  00000000  00000000  0002a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c00  00000000  00000000  0002e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015cb  00000000  00000000  00030568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029045  00000000  00000000  00031b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002127c  00000000  00000000  0005ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108cc6  00000000  00000000  0007bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184aba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007624  00000000  00000000  00184b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0018c124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	080071dc 	.word	0x080071dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	080071dc 	.word	0x080071dc

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a04      	ldr	r2, [pc, #16]	@ (8000528 <MX_FREERTOS_Init+0x18>)
 8000516:	2100      	movs	r1, #0
 8000518:	4804      	ldr	r0, [pc, #16]	@ (800052c <MX_FREERTOS_Init+0x1c>)
 800051a:	f004 f8ef 	bl	80046fc <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a03      	ldr	r2, [pc, #12]	@ (8000530 <MX_FREERTOS_Init+0x20>)
 8000522:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	08007218 	.word	0x08007218
 800052c:	08000535 	.word	0x08000535
 8000530:	2000002c 	.word	0x2000002c

08000534 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f004 f96f 	bl	8004820 <osDelay>
 8000542:	e7fb      	b.n	800053c <StartDefaultTask+0x8>

08000544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800054a:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <MX_DMA_Init+0x60>)
 800054c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800054e:	4a15      	ldr	r2, [pc, #84]	@ (80005a4 <MX_DMA_Init+0x60>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6493      	str	r3, [r2, #72]	@ 0x48
 8000556:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <MX_DMA_Init+0x60>)
 8000558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000562:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <MX_DMA_Init+0x60>)
 8000564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000566:	4a0f      	ldr	r2, [pc, #60]	@ (80005a4 <MX_DMA_Init+0x60>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6493      	str	r3, [r2, #72]	@ 0x48
 800056e:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <MX_DMA_Init+0x60>)
 8000570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2105      	movs	r1, #5
 800057e:	200b      	movs	r0, #11
 8000580:	f000 fcc2 	bl	8000f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000584:	200b      	movs	r0, #11
 8000586:	f000 fcd9 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2105      	movs	r1, #5
 800058e:	200c      	movs	r0, #12
 8000590:	f000 fcba 	bl	8000f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000594:	200c      	movs	r0, #12
 8000596:	f000 fcd1 	bl	8000f3c <HAL_NVIC_EnableIRQ>

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b2f      	ldr	r3, [pc, #188]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a2e      	ldr	r2, [pc, #184]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d6:	4b29      	ldr	r3, [pc, #164]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	4a28      	ldr	r2, [pc, #160]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005dc:	f043 0320 	orr.w	r3, r3, #32
 80005e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e2:	4b26      	ldr	r3, [pc, #152]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	f003 0320 	and.w	r3, r3, #32
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b23      	ldr	r3, [pc, #140]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	4a22      	ldr	r2, [pc, #136]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <MX_GPIO_Init+0xd4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <MX_GPIO_Init+0xd4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	4a1c      	ldr	r2, [pc, #112]	@ (800067c <MX_GPIO_Init+0xd4>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <MX_GPIO_Init+0xd4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2120      	movs	r1, #32
 8000622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000626:	f001 f893 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000630:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	480f      	ldr	r0, [pc, #60]	@ (8000680 <MX_GPIO_Init+0xd8>)
 8000642:	f000 ff03 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000646:	2320      	movs	r3, #32
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000660:	f000 fef4 	bl	800144c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2105      	movs	r1, #5
 8000668:	2028      	movs	r0, #40	@ 0x28
 800066a:	f000 fc4d 	bl	8000f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800066e:	2028      	movs	r0, #40	@ 0x28
 8000670:	f000 fc64 	bl	8000f3c <HAL_NVIC_EnableIRQ>

}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	@ 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	48000800 	.word	0x48000800

08000684 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_I2C1_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <MX_I2C1_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_I2C1_Init+0x74>)
 8000690:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <MX_I2C1_Init+0x7c>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_I2C1_Init+0x74>)
 800069c:	2201      	movs	r2, #1
 800069e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006c0:	f001 f881 	bl	80017c6 <HAL_I2C_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ca:	f000 f903 	bl	80008d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006d2:	f001 f913 	bl	80018fc <HAL_I2CEx_ConfigAnalogFilter>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006dc:	f000 f8fa 	bl	80008d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_I2C1_Init+0x74>)
 80006e4:	f001 f955 	bl	8001992 <HAL_I2CEx_ConfigDigitalFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 f8f1 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20002f6c 	.word	0x20002f6c
 80006fc:	40005400 	.word	0x40005400
 8000700:	40621236 	.word	0x40621236

08000704 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b0a0      	sub	sp, #128	@ 0x80
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	2254      	movs	r2, #84	@ 0x54
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f006 fd1f 	bl	8007168 <memset>
  if(i2cHandle->Instance==I2C1)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a2d      	ldr	r2, [pc, #180]	@ (80007e4 <HAL_I2C_MspInit+0xe0>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d153      	bne.n	80007dc <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000734:	2340      	movs	r3, #64	@ 0x40
 8000736:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000738:	2300      	movs	r3, #0
 800073a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	f107 0318 	add.w	r3, r7, #24
 8000740:	4618      	mov	r0, r3
 8000742:	f001 ff87 	bl	8002654 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800074c:	f000 f8c2 	bl	80008d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b25      	ldr	r3, [pc, #148]	@ (80007e8 <HAL_I2C_MspInit+0xe4>)
 8000752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000754:	4a24      	ldr	r2, [pc, #144]	@ (80007e8 <HAL_I2C_MspInit+0xe4>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075c:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <HAL_I2C_MspInit+0xe4>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <HAL_I2C_MspInit+0xe4>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076c:	4a1e      	ldr	r2, [pc, #120]	@ (80007e8 <HAL_I2C_MspInit+0xe4>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000774:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <HAL_I2C_MspInit+0xe4>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000784:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000786:	2312      	movs	r3, #18
 8000788:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000792:	2304      	movs	r3, #4
 8000794:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a0:	f000 fe54 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a4:	2380      	movs	r3, #128	@ 0x80
 80007a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a8:	2312      	movs	r3, #18
 80007aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b4:	2304      	movs	r3, #4
 80007b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80007bc:	4619      	mov	r1, r3
 80007be:	480b      	ldr	r0, [pc, #44]	@ (80007ec <HAL_I2C_MspInit+0xe8>)
 80007c0:	f000 fe44 	bl	800144c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <HAL_I2C_MspInit+0xe4>)
 80007c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c8:	4a07      	ldr	r2, [pc, #28]	@ (80007e8 <HAL_I2C_MspInit+0xe4>)
 80007ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <HAL_I2C_MspInit+0xe4>)
 80007d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007dc:	bf00      	nop
 80007de:	3780      	adds	r7, #128	@ 0x80
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40005400 	.word	0x40005400
 80007e8:	40021000 	.word	0x40021000
 80007ec:	48000400 	.word	0x48000400

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f000 fa99 	bl	8000d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f810 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fc:	f7ff fed4 	bl	80005a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000800:	f7ff fea0 	bl	8000544 <MX_DMA_Init>
  MX_I2C1_Init();
 8000804:	f7ff ff3e 	bl	8000684 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000808:	f000 f95e 	bl	8000ac8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800080c:	f003 ff2c 	bl	8004668 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000810:	f7ff fe7e 	bl	8000510 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000814:	f003 ff4c 	bl	80046b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <main+0x28>

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	2238      	movs	r2, #56	@ 0x38
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f006 fc9c 	bl	8007168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800083e:	2000      	movs	r0, #0
 8000840:	f001 f8f4 	bl	8001a2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000848:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800084c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	2303      	movs	r3, #3
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000856:	2306      	movs	r3, #6
 8000858:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800085a:	2355      	movs	r3, #85	@ 0x55
 800085c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085e:	2302      	movs	r3, #2
 8000860:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000866:	2302      	movs	r3, #2
 8000868:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	4618      	mov	r0, r3
 8000870:	f001 f990 	bl	8001b94 <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800087a:	f000 f82b 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	230f      	movs	r3, #15
 8000880:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2303      	movs	r3, #3
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2104      	movs	r1, #4
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fc8e 	bl	80021b8 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008a2:	f000 f817 	bl	80008d4 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3750      	adds	r7, #80	@ 0x50
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c2:	f000 fa4b 	bl	8000d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40012c00 	.word	0x40012c00

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <HAL_MspInit+0x50>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ea:	4a11      	ldr	r2, [pc, #68]	@ (8000930 <HAL_MspInit+0x50>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <HAL_MspInit+0x50>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <HAL_MspInit+0x50>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	4a0b      	ldr	r2, [pc, #44]	@ (8000930 <HAL_MspInit+0x50>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6593      	str	r3, [r2, #88]	@ 0x58
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <HAL_MspInit+0x50>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	210f      	movs	r1, #15
 800091a:	f06f 0001 	mvn.w	r0, #1
 800091e:	f000 faf3 	bl	8000f08 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000922:	f001 f927 	bl	8001b74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	@ 0x30
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000944:	4b2c      	ldr	r3, [pc, #176]	@ (80009f8 <HAL_InitTick+0xc4>)
 8000946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000948:	4a2b      	ldr	r2, [pc, #172]	@ (80009f8 <HAL_InitTick+0xc4>)
 800094a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800094e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000950:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <HAL_InitTick+0xc4>)
 8000952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800095c:	f107 020c 	add.w	r2, r7, #12
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4611      	mov	r1, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fdfc 	bl	8002564 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800096c:	f001 fde4 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8000970:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000974:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <HAL_InitTick+0xc8>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3
 800097a:	0c9b      	lsrs	r3, r3, #18
 800097c:	3b01      	subs	r3, #1
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <HAL_InitTick+0xcc>)
 8000982:	4a20      	ldr	r2, [pc, #128]	@ (8000a04 <HAL_InitTick+0xd0>)
 8000984:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000986:	4b1e      	ldr	r3, [pc, #120]	@ (8000a00 <HAL_InitTick+0xcc>)
 8000988:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800098c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800098e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a00 <HAL_InitTick+0xcc>)
 8000990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000992:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000994:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <HAL_InitTick+0xcc>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <HAL_InitTick+0xcc>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80009a0:	4817      	ldr	r0, [pc, #92]	@ (8000a00 <HAL_InitTick+0xcc>)
 80009a2:	f002 f8a5 	bl	8002af0 <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d11b      	bne.n	80009ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009b4:	4812      	ldr	r0, [pc, #72]	@ (8000a00 <HAL_InitTick+0xcc>)
 80009b6:	f002 f8fd 	bl	8002bb4 <HAL_TIM_Base_Start_IT>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d111      	bne.n	80009ec <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009c8:	2019      	movs	r0, #25
 80009ca:	f000 fab7 	bl	8000f3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d808      	bhi.n	80009e6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	2019      	movs	r0, #25
 80009da:	f000 fa95 	bl	8000f08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009de:	4a0a      	ldr	r2, [pc, #40]	@ (8000a08 <HAL_InitTick+0xd4>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6013      	str	r3, [r2, #0]
 80009e4:	e002      	b.n	80009ec <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3730      	adds	r7, #48	@ 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40021000 	.word	0x40021000
 80009fc:	431bde83 	.word	0x431bde83
 8000a00:	20002fc0 	.word	0x20002fc0
 8000a04:	40012c00 	.word	0x40012c00
 8000a08:	20000004 	.word	0x20000004

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <NMI_Handler+0x4>

08000a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <MemManage_Handler+0x4>

08000a24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <DMA1_Channel1_IRQHandler+0x10>)
 8000a4a:	f000 fbed 	bl	8001228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200030a0 	.word	0x200030a0

08000a58 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <DMA1_Channel2_IRQHandler+0x10>)
 8000a5e:	f000 fbe3 	bl	8001228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20003100 	.word	0x20003100

08000a6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a70:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a72:	f002 f917 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20002fc0 	.word	0x20002fc0

08000a80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a84:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a88:	f000 fe7a 	bl	8001780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <LPUART1_IRQHandler+0x10>)
 8000a96:	f002 fbc7 	bl	8003228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000300c 	.word	0x2000300c

08000aa4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000acc:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000ace:	4a21      	ldr	r2, [pc, #132]	@ (8000b54 <MX_LPUART1_UART_Init+0x8c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000ad4:	4a20      	ldr	r2, [pc, #128]	@ (8000b58 <MX_LPUART1_UART_Init+0x90>)
 8000ad6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000aea:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000aec:	220c      	movs	r2, #12
 8000aee:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b08:	4811      	ldr	r0, [pc, #68]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000b0a:	f002 fb3d 	bl	8003188 <HAL_UART_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000b14:	f7ff fede 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000b1c:	f003 fc95 	bl	800444a <HAL_UARTEx_SetTxFifoThreshold>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000b26:	f7ff fed5 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4808      	ldr	r0, [pc, #32]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000b2e:	f003 fcca 	bl	80044c6 <HAL_UARTEx_SetRxFifoThreshold>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000b38:	f7ff fecc 	bl	80008d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <MX_LPUART1_UART_Init+0x88>)
 8000b3e:	f003 fc4b 	bl	80043d8 <HAL_UARTEx_DisableFifoMode>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000b48:	f7ff fec4 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000300c 	.word	0x2000300c
 8000b54:	40008000 	.word	0x40008000
 8000b58:	001e8480 	.word	0x001e8480

08000b5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b09e      	sub	sp, #120	@ 0x78
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	2254      	movs	r2, #84	@ 0x54
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f006 faf3 	bl	8007168 <memset>
  if(uartHandle->Instance==LPUART1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a4e      	ldr	r2, [pc, #312]	@ (8000cc0 <HAL_UART_MspInit+0x164>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	f040 8094 	bne.w	8000cb6 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b8e:	2320      	movs	r3, #32
 8000b90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 fd5a 	bl	8002654 <HAL_RCCEx_PeriphCLKConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ba6:	f7ff fe95 	bl	80008d4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000baa:	4b46      	ldr	r3, [pc, #280]	@ (8000cc4 <HAL_UART_MspInit+0x168>)
 8000bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bae:	4a45      	ldr	r2, [pc, #276]	@ (8000cc4 <HAL_UART_MspInit+0x168>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000bb6:	4b43      	ldr	r3, [pc, #268]	@ (8000cc4 <HAL_UART_MspInit+0x168>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b40      	ldr	r3, [pc, #256]	@ (8000cc4 <HAL_UART_MspInit+0x168>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8000cc4 <HAL_UART_MspInit+0x168>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc4 <HAL_UART_MspInit+0x168>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bea:	230c      	movs	r3, #12
 8000bec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f000 fc28 	bl	800144c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000bfc:	4b32      	ldr	r3, [pc, #200]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000bfe:	4a33      	ldr	r2, [pc, #204]	@ (8000ccc <HAL_UART_MspInit+0x170>)
 8000c00:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000c02:	4b31      	ldr	r3, [pc, #196]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000c04:	2222      	movs	r2, #34	@ 0x22
 8000c06:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c08:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c14:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000c16:	2280      	movs	r2, #128	@ 0x80
 8000c18:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c20:	4b29      	ldr	r3, [pc, #164]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c26:	4b28      	ldr	r3, [pc, #160]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000c28:	2220      	movs	r2, #32
 8000c2a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c2c:	4b26      	ldr	r3, [pc, #152]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000c2e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000c32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000c34:	4824      	ldr	r0, [pc, #144]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000c36:	f000 f98f 	bl	8000f58 <HAL_DMA_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8000c40:	f7ff fe48 	bl	80008d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a20      	ldr	r2, [pc, #128]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000c48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc8 <HAL_UART_MspInit+0x16c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000c54:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd4 <HAL_UART_MspInit+0x178>)
 8000c56:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000c5a:	2223      	movs	r2, #35	@ 0x23
 8000c5c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000c60:	2210      	movs	r2, #16
 8000c62:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000c6c:	2280      	movs	r2, #128	@ 0x80
 8000c6e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c70:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000c84:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000c88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000c8a:	4811      	ldr	r0, [pc, #68]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000c8c:	f000 f964 	bl	8000f58 <HAL_DMA_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8000c96:	f7ff fe1d 	bl	80008d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000c9e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd0 <HAL_UART_MspInit+0x174>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2105      	movs	r1, #5
 8000caa:	205b      	movs	r0, #91	@ 0x5b
 8000cac:	f000 f92c 	bl	8000f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000cb0:	205b      	movs	r0, #91	@ 0x5b
 8000cb2:	f000 f943 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3778      	adds	r7, #120	@ 0x78
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40008000 	.word	0x40008000
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	200030a0 	.word	0x200030a0
 8000ccc:	40020008 	.word	0x40020008
 8000cd0:	20003100 	.word	0x20003100
 8000cd4:	4002001c 	.word	0x4002001c

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd8:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cdc:	f7ff fee2 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	@ (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f006 fa37 	bl	8007178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f7ff fd71 	bl	80007f0 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   r0, =_estack
 8000d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d1c:	0800728c 	.word	0x0800728c
  ldr r2, =_sbss
 8000d20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d24:	20004ab4 	.word	0x20004ab4

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>

08000d2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f8dc 	bl	8000ef2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f7ff fdfa 	bl	8000934 <HAL_InitTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	e001      	b.n	8000d50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4c:	f7ff fdc8 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d50:	79fb      	ldrb	r3, [r7, #7]

}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <HAL_IncTick+0x1c>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a03      	ldr	r2, [pc, #12]	@ (8000d78 <HAL_IncTick+0x1c>)
 8000d6c:	6013      	str	r3, [r2, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20003160 	.word	0x20003160
 8000d7c:	20000008 	.word	0x20000008

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20003160 	.word	0x20003160

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db0b      	blt.n	8000e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	4907      	ldr	r1, [pc, #28]	@ (8000e34 <__NVIC_EnableIRQ+0x38>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	@ (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	@ (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	@ 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	@ 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ff4c 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f16:	f7ff ff63 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	6978      	ldr	r0, [r7, #20]
 8000f22:	f7ff ffb3 	bl	8000e8c <NVIC_EncodePriority>
 8000f26:	4602      	mov	r2, r0
 8000f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff82 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff56 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e08d      	b.n	8001086 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b47      	ldr	r3, [pc, #284]	@ (8001090 <HAL_DMA_Init+0x138>)
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d80f      	bhi.n	8000f96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b45      	ldr	r3, [pc, #276]	@ (8001094 <HAL_DMA_Init+0x13c>)
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a45      	ldr	r2, [pc, #276]	@ (8001098 <HAL_DMA_Init+0x140>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	009a      	lsls	r2, r3, #2
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a42      	ldr	r2, [pc, #264]	@ (800109c <HAL_DMA_Init+0x144>)
 8000f92:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f94:	e00e      	b.n	8000fb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b40      	ldr	r3, [pc, #256]	@ (80010a0 <HAL_DMA_Init+0x148>)
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a3d      	ldr	r2, [pc, #244]	@ (8001098 <HAL_DMA_Init+0x140>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	091b      	lsrs	r3, r3, #4
 8000fa8:	009a      	lsls	r2, r3, #2
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80010a4 <HAL_DMA_Init+0x14c>)
 8000fb2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f9be 	bl	8001388 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001014:	d102      	bne.n	800101c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001030:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d010      	beq.n	800105c <HAL_DMA_Init+0x104>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b04      	cmp	r3, #4
 8001040:	d80c      	bhi.n	800105c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f9de 	bl	8001404 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	e008      	b.n	800106e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020407 	.word	0x40020407
 8001094:	bffdfff8 	.word	0xbffdfff8
 8001098:	cccccccd 	.word	0xcccccccd
 800109c:	40020000 	.word	0x40020000
 80010a0:	bffdfbf8 	.word	0xbffdfbf8
 80010a4:	40020400 	.word	0x40020400

080010a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d005      	beq.n	80010cc <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2204      	movs	r2, #4
 80010c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e037      	b.n	800113c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 020e 	bic.w	r2, r2, #14
 80010da:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010ea:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0201 	bic.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	2101      	movs	r1, #1
 800110a:	fa01 f202 	lsl.w	r2, r1, r2
 800110e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001118:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00c      	beq.n	800113c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001130:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800113a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d00d      	beq.n	800118e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2204      	movs	r2, #4
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e047      	b.n	800121e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 020e 	bic.w	r2, r2, #14
 800119c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f003 021f 	and.w	r2, r3, #31
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f202 	lsl.w	r2, r1, r2
 80011d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80011da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00c      	beq.n	80011fe <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
    }
  }
  return status;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001244:	f003 031f 	and.w	r3, r3, #31
 8001248:	2204      	movs	r2, #4
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d026      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x7a>
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	2b00      	cmp	r3, #0
 800125c:	d021      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	2b00      	cmp	r3, #0
 800126a:	d107      	bne.n	800127c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0204 	bic.w	r2, r2, #4
 800127a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	2104      	movs	r1, #4
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001294:	2b00      	cmp	r3, #0
 8001296:	d071      	beq.n	800137c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80012a0:	e06c      	b.n	800137c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	2202      	movs	r2, #2
 80012ac:	409a      	lsls	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d02e      	beq.n	8001314 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d029      	beq.n	8001314 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10b      	bne.n	80012e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 020a 	bic.w	r2, r2, #10
 80012dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	f003 021f 	and.w	r2, r3, #31
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	2102      	movs	r1, #2
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001306:	2b00      	cmp	r3, #0
 8001308:	d038      	beq.n	800137c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001312:	e033      	b.n	800137c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	2208      	movs	r2, #8
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d02a      	beq.n	800137e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d025      	beq.n	800137e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 020e 	bic.w	r2, r2, #14
 8001340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	f003 021f 	and.w	r2, r3, #31
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f202 	lsl.w	r2, r1, r2
 8001354:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800137c:	bf00      	nop
 800137e:	bf00      	nop
}
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001398:	429a      	cmp	r2, r3
 800139a:	d802      	bhi.n	80013a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800139c:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e001      	b.n	80013a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80013a4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	3b08      	subs	r3, #8
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	009a      	lsls	r2, r3, #2
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4413      	add	r3, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80013d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	2201      	movs	r2, #1
 80013dc:	409a      	lsls	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40020407 	.word	0x40020407
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020820 	.word	0x40020820
 80013fc:	cccccccd 	.word	0xcccccccd
 8001400:	40020880 	.word	0x40020880

08001404 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	461a      	mov	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001426:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3b01      	subs	r3, #1
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	2201      	movs	r2, #1
 8001432:	409a      	lsls	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	1000823f 	.word	0x1000823f
 8001448:	40020940 	.word	0x40020940

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800145a:	e15a      	b.n	8001712 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 814c 	beq.w	800170c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d005      	beq.n	800148c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001488:	2b02      	cmp	r3, #2
 800148a:	d130      	bne.n	80014ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014c2:	2201      	movs	r2, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 0201 	and.w	r2, r3, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d017      	beq.n	800152a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d123      	bne.n	800157e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	6939      	ldr	r1, [r7, #16]
 800157a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0203 	and.w	r2, r3, #3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80a6 	beq.w	800170c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b5b      	ldr	r3, [pc, #364]	@ (8001730 <HAL_GPIO_Init+0x2e4>)
 80015c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001730 <HAL_GPIO_Init+0x2e4>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80015cc:	4b58      	ldr	r3, [pc, #352]	@ (8001730 <HAL_GPIO_Init+0x2e4>)
 80015ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d8:	4a56      	ldr	r2, [pc, #344]	@ (8001734 <HAL_GPIO_Init+0x2e8>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001602:	d01f      	beq.n	8001644 <HAL_GPIO_Init+0x1f8>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a4c      	ldr	r2, [pc, #304]	@ (8001738 <HAL_GPIO_Init+0x2ec>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d019      	beq.n	8001640 <HAL_GPIO_Init+0x1f4>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a4b      	ldr	r2, [pc, #300]	@ (800173c <HAL_GPIO_Init+0x2f0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_GPIO_Init+0x1f0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a4a      	ldr	r2, [pc, #296]	@ (8001740 <HAL_GPIO_Init+0x2f4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_Init+0x1ec>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a49      	ldr	r2, [pc, #292]	@ (8001744 <HAL_GPIO_Init+0x2f8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x1e8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a48      	ldr	r2, [pc, #288]	@ (8001748 <HAL_GPIO_Init+0x2fc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_Init+0x1e4>
 800162c:	2305      	movs	r3, #5
 800162e:	e00a      	b.n	8001646 <HAL_GPIO_Init+0x1fa>
 8001630:	2306      	movs	r3, #6
 8001632:	e008      	b.n	8001646 <HAL_GPIO_Init+0x1fa>
 8001634:	2304      	movs	r3, #4
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x1fa>
 8001638:	2303      	movs	r3, #3
 800163a:	e004      	b.n	8001646 <HAL_GPIO_Init+0x1fa>
 800163c:	2302      	movs	r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0x1fa>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_GPIO_Init+0x1fa>
 8001644:	2300      	movs	r3, #0
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	f002 0203 	and.w	r2, r2, #3
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4093      	lsls	r3, r2
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001656:	4937      	ldr	r1, [pc, #220]	@ (8001734 <HAL_GPIO_Init+0x2e8>)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001664:	4b39      	ldr	r3, [pc, #228]	@ (800174c <HAL_GPIO_Init+0x300>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001688:	4a30      	ldr	r2, [pc, #192]	@ (800174c <HAL_GPIO_Init+0x300>)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800168e:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <HAL_GPIO_Init+0x300>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b2:	4a26      	ldr	r2, [pc, #152]	@ (800174c <HAL_GPIO_Init+0x300>)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <HAL_GPIO_Init+0x300>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016dc:	4a1b      	ldr	r2, [pc, #108]	@ (800174c <HAL_GPIO_Init+0x300>)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <HAL_GPIO_Init+0x300>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001706:	4a11      	ldr	r2, [pc, #68]	@ (800174c <HAL_GPIO_Init+0x300>)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	f47f ae9d 	bne.w	800145c <HAL_GPIO_Init+0x10>
  }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000
 8001738:	48000400 	.word	0x48000400
 800173c:	48000800 	.word	0x48000800
 8001740:	48000c00 	.word	0x48000c00
 8001744:	48001000 	.word	0x48001000
 8001748:	48001400 	.word	0x48001400
 800174c:	40010400 	.word	0x40010400

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
 800175c:	4613      	mov	r3, r2
 800175e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001760:	787b      	ldrb	r3, [r7, #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800176c:	e002      	b.n	8001774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d006      	beq.n	80017a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f806 	bl	80017b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40010400 	.word	0x40010400

080017b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e08d      	b.n	80018f4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d106      	bne.n	80017f2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7fe ff89 	bl	8000704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2224      	movs	r2, #36	@ 0x24
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0201 	bic.w	r2, r2, #1
 8001808:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001816:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001826:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	e006      	b.n	800184e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800184c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d108      	bne.n	8001868 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	e007      	b.n	8001878 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001876:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800188a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800189a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69d9      	ldr	r1, [r3, #28]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1a      	ldr	r2, [r3, #32]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0201 	orr.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2220      	movs	r2, #32
 80018e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b20      	cmp	r3, #32
 8001910:	d138      	bne.n	8001984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800191c:	2302      	movs	r3, #2
 800191e:	e032      	b.n	8001986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2224      	movs	r2, #36	@ 0x24
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800194e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2220      	movs	r2, #32
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	e000      	b.n	8001986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001984:	2302      	movs	r3, #2
  }
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d139      	bne.n	8001a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e033      	b.n	8001a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2224      	movs	r2, #36	@ 0x24
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	e000      	b.n	8001a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a1c:	2302      	movs	r3, #2
  }
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d141      	bne.n	8001abe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a46:	d131      	bne.n	8001aac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a48:	4b47      	ldr	r3, [pc, #284]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a4e:	4a46      	ldr	r2, [pc, #280]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a58:	4b43      	ldr	r3, [pc, #268]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a60:	4a41      	ldr	r2, [pc, #260]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a68:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2232      	movs	r2, #50	@ 0x32
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	4a3f      	ldr	r2, [pc, #252]	@ (8001b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9b      	lsrs	r3, r3, #18
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a7e:	e002      	b.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a86:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a92:	d102      	bne.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f2      	bne.n	8001a80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a9a:	4b33      	ldr	r3, [pc, #204]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa6:	d158      	bne.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e057      	b.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aac:	4b2e      	ldr	r3, [pc, #184]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ab8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001abc:	e04d      	b.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ac4:	d141      	bne.n	8001b4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac6:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad2:	d131      	bne.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad4:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ada:	4a23      	ldr	r2, [pc, #140]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aec:	4a1e      	ldr	r2, [pc, #120]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2232      	movs	r2, #50	@ 0x32
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a1c      	ldr	r2, [pc, #112]	@ (8001b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	0c9b      	lsrs	r3, r3, #18
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0a:	e002      	b.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1e:	d102      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f2      	bne.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b32:	d112      	bne.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e011      	b.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b48:	e007      	b.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	431bde83 	.word	0x431bde83

08001b74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b82:	6093      	str	r3, [r2, #8]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40007000 	.word	0x40007000

08001b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e2fe      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d075      	beq.n	8001c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb2:	4b97      	ldr	r3, [pc, #604]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bbc:	4b94      	ldr	r3, [pc, #592]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	d102      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3e>
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d002      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x44>
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d10b      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	4b8d      	ldr	r3, [pc, #564]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d05b      	beq.n	8001c9c <HAL_RCC_OscConfig+0x108>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d157      	bne.n	8001c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e2d9      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf8:	d106      	bne.n	8001c08 <HAL_RCC_OscConfig+0x74>
 8001bfa:	4b85      	ldr	r3, [pc, #532]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a84      	ldr	r2, [pc, #528]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e01d      	b.n	8001c44 <HAL_RCC_OscConfig+0xb0>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x98>
 8001c12:	4b7f      	ldr	r3, [pc, #508]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7e      	ldr	r2, [pc, #504]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7b      	ldr	r2, [pc, #492]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e00b      	b.n	8001c44 <HAL_RCC_OscConfig+0xb0>
 8001c2c:	4b78      	ldr	r3, [pc, #480]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a77      	ldr	r2, [pc, #476]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b75      	ldr	r3, [pc, #468]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a74      	ldr	r2, [pc, #464]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f898 	bl	8000d80 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff f894 	bl	8000d80 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	@ 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e29e      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c66:	4b6a      	ldr	r3, [pc, #424]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0xc0>
 8001c72:	e014      	b.n	8001c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff f884 	bl	8000d80 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff f880 	bl	8000d80 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	@ 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e28a      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8e:	4b60      	ldr	r3, [pc, #384]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0xe8>
 8001c9a:	e000      	b.n	8001c9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d075      	beq.n	8001d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001caa:	4b59      	ldr	r3, [pc, #356]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb4:	4b56      	ldr	r3, [pc, #344]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0x136>
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d002      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x13c>
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d11f      	bne.n	8001d10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x154>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e25d      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b49      	ldr	r3, [pc, #292]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	4946      	ldr	r1, [pc, #280]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cfc:	4b45      	ldr	r3, [pc, #276]	@ (8001e14 <HAL_RCC_OscConfig+0x280>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fe17 	bl	8000934 <HAL_InitTick>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d043      	beq.n	8001d94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e249      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d023      	beq.n	8001d60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d18:	4b3d      	ldr	r3, [pc, #244]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f82c 	bl	8000d80 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f828 	bl	8000d80 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e232      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3e:	4b34      	ldr	r3, [pc, #208]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b31      	ldr	r3, [pc, #196]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	061b      	lsls	r3, r3, #24
 8001d58:	492d      	ldr	r1, [pc, #180]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
 8001d5e:	e01a      	b.n	8001d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d60:	4b2b      	ldr	r3, [pc, #172]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2a      	ldr	r2, [pc, #168]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f808 	bl	8000d80 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d74:	f7ff f804 	bl	8000d80 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e20e      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d86:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1e0>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d041      	beq.n	8001e26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001daa:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db0:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dba:	f7fe ffe1 	bl	8000d80 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc2:	f7fe ffdd 	bl	8000d80 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1e7      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0ef      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x22e>
 8001de2:	e020      	b.n	8001e26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dea:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7fe ffc4 	bl	8000d80 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dfa:	e00d      	b.n	8001e18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7fe ffc0 	bl	8000d80 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d906      	bls.n	8001e18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1ca      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e18:	4b8c      	ldr	r3, [pc, #560]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ea      	bne.n	8001dfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80a6 	beq.w	8001f80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e38:	4b84      	ldr	r3, [pc, #528]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_OscConfig+0x2b4>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x2b6>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00d      	beq.n	8001e6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e52:	4a7e      	ldr	r2, [pc, #504]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e66:	2301      	movs	r3, #1
 8001e68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6a:	4b79      	ldr	r3, [pc, #484]	@ (8002050 <HAL_RCC_OscConfig+0x4bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d118      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e76:	4b76      	ldr	r3, [pc, #472]	@ (8002050 <HAL_RCC_OscConfig+0x4bc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a75      	ldr	r2, [pc, #468]	@ (8002050 <HAL_RCC_OscConfig+0x4bc>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7fe ff7d 	bl	8000d80 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8a:	f7fe ff79 	bl	8000d80 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e183      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002050 <HAL_RCC_OscConfig+0x4bc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d108      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x32e>
 8001eb0:	4b66      	ldr	r3, [pc, #408]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb6:	4a65      	ldr	r2, [pc, #404]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec0:	e024      	b.n	8001f0c <HAL_RCC_OscConfig+0x378>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b05      	cmp	r3, #5
 8001ec8:	d110      	bne.n	8001eec <HAL_RCC_OscConfig+0x358>
 8001eca:	4b60      	ldr	r3, [pc, #384]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eda:	4b5c      	ldr	r3, [pc, #368]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee0:	4a5a      	ldr	r2, [pc, #360]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eea:	e00f      	b.n	8001f0c <HAL_RCC_OscConfig+0x378>
 8001eec:	4b57      	ldr	r3, [pc, #348]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	4a56      	ldr	r2, [pc, #344]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001efc:	4b53      	ldr	r3, [pc, #332]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f02:	4a52      	ldr	r2, [pc, #328]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d016      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f14:	f7fe ff34 	bl	8000d80 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe ff30 	bl	8000d80 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e138      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f32:	4b46      	ldr	r3, [pc, #280]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ed      	beq.n	8001f1c <HAL_RCC_OscConfig+0x388>
 8001f40:	e015      	b.n	8001f6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7fe ff1d 	bl	8000d80 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe ff19 	bl	8000d80 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e121      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f60:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ed      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f74:	4b35      	ldr	r3, [pc, #212]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	4a34      	ldr	r2, [pc, #208]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d03c      	beq.n	8002006 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01c      	beq.n	8001fce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f94:	4b2d      	ldr	r3, [pc, #180]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa4:	f7fe feec 	bl	8000d80 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fac:	f7fe fee8 	bl	8000d80 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0f2      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fbe:	4b23      	ldr	r3, [pc, #140]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ef      	beq.n	8001fac <HAL_RCC_OscConfig+0x418>
 8001fcc:	e01b      	b.n	8002006 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fce:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fde:	f7fe fecf 	bl	8000d80 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fe6:	f7fe fecb 	bl	8000d80 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0d5      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ff8:	4b14      	ldr	r3, [pc, #80]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8001ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ef      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80c9 	beq.w	80021a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b0c      	cmp	r3, #12
 800201a:	f000 8083 	beq.w	8002124 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d15e      	bne.n	80020e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a08      	ldr	r2, [pc, #32]	@ (800204c <HAL_RCC_OscConfig+0x4b8>)
 800202c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7fe fea5 	bl	8000d80 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	e00c      	b.n	8002054 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe fea1 	bl	8000d80 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d905      	bls.n	8002054 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0ab      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	4b55      	ldr	r3, [pc, #340]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ec      	bne.n	800203a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002060:	4b52      	ldr	r3, [pc, #328]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4b52      	ldr	r3, [pc, #328]	@ (80021b0 <HAL_RCC_OscConfig+0x61c>)
 8002066:	4013      	ands	r3, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6a11      	ldr	r1, [r2, #32]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002070:	3a01      	subs	r2, #1
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800207a:	0212      	lsls	r2, r2, #8
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002082:	0852      	lsrs	r2, r2, #1
 8002084:	3a01      	subs	r2, #1
 8002086:	0552      	lsls	r2, r2, #21
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800208e:	0852      	lsrs	r2, r2, #1
 8002090:	3a01      	subs	r2, #1
 8002092:	0652      	lsls	r2, r2, #25
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800209a:	06d2      	lsls	r2, r2, #27
 800209c:	430a      	orrs	r2, r1
 800209e:	4943      	ldr	r1, [pc, #268]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b41      	ldr	r3, [pc, #260]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a40      	ldr	r2, [pc, #256]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b0:	4b3e      	ldr	r3, [pc, #248]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a3d      	ldr	r2, [pc, #244]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe fe60 	bl	8000d80 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe fe5c 	bl	8000d80 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e066      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d6:	4b35      	ldr	r3, [pc, #212]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x530>
 80020e2:	e05e      	b.n	80021a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e4:	4b31      	ldr	r3, [pc, #196]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a30      	ldr	r2, [pc, #192]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 80020ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7fe fe46 	bl	8000d80 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f8:	f7fe fe42 	bl	8000d80 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e04c      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210a:	4b28      	ldr	r3, [pc, #160]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002116:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	4924      	ldr	r1, [pc, #144]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 800211c:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <HAL_RCC_OscConfig+0x620>)
 800211e:	4013      	ands	r3, r2
 8002120:	60cb      	str	r3, [r1, #12]
 8002122:	e03e      	b.n	80021a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e039      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002130:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <HAL_RCC_OscConfig+0x618>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 0203 	and.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	429a      	cmp	r2, r3
 8002142:	d12c      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	3b01      	subs	r3, #1
 8002150:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d123      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002160:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d11b      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d113      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d109      	bne.n	800219e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	3b01      	subs	r3, #1
 8002198:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	019f800c 	.word	0x019f800c
 80021b4:	feeefffc 	.word	0xfeeefffc

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e11e      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d0:	4b91      	ldr	r3, [pc, #580]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d910      	bls.n	8002200 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b8e      	ldr	r3, [pc, #568]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 020f 	bic.w	r2, r3, #15
 80021e6:	498c      	ldr	r1, [pc, #560]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b8a      	ldr	r3, [pc, #552]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e106      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d073      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d129      	bne.n	8002268 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002214:	4b81      	ldr	r3, [pc, #516]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0f4      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002224:	f000 f9d0 	bl	80025c8 <RCC_GetSysClockFreqFromPLLSource>
 8002228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4a7c      	ldr	r2, [pc, #496]	@ (8002420 <HAL_RCC_ClockConfig+0x268>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d93f      	bls.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002232:	4b7a      	ldr	r3, [pc, #488]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002246:	2b00      	cmp	r3, #0
 8002248:	d033      	beq.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	d12f      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002252:	4b72      	ldr	r3, [pc, #456]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800225a:	4a70      	ldr	r2, [pc, #448]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 800225c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002260:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e024      	b.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d107      	bne.n	8002280 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002270:	4b6a      	ldr	r3, [pc, #424]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0c6      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002280:	4b66      	ldr	r3, [pc, #408]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0be      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002290:	f000 f8ce 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8002294:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4a61      	ldr	r2, [pc, #388]	@ (8002420 <HAL_RCC_ClockConfig+0x268>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d909      	bls.n	80022b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800229e:	4b5f      	ldr	r3, [pc, #380]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022a6:	4a5d      	ldr	r2, [pc, #372]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80022a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b5a      	ldr	r3, [pc, #360]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4957      	ldr	r1, [pc, #348]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c4:	f7fe fd5c 	bl	8000d80 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7fe fd58 	bl	8000d80 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e095      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b4e      	ldr	r3, [pc, #312]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d023      	beq.n	8002348 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800230c:	4b43      	ldr	r3, [pc, #268]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a42      	ldr	r2, [pc, #264]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002312:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002316:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002324:	4b3d      	ldr	r3, [pc, #244]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800232c:	4a3b      	ldr	r2, [pc, #236]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 800232e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002332:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b39      	ldr	r3, [pc, #228]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4936      	ldr	r1, [pc, #216]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
 8002346:	e008      	b.n	800235a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b80      	cmp	r3, #128	@ 0x80
 800234c:	d105      	bne.n	800235a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800234e:	4b33      	ldr	r3, [pc, #204]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4a32      	ldr	r2, [pc, #200]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 8002354:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002358:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800235a:	4b2f      	ldr	r3, [pc, #188]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d21d      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002368:	4b2b      	ldr	r3, [pc, #172]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 020f 	bic.w	r2, r3, #15
 8002370:	4929      	ldr	r1, [pc, #164]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002378:	f7fe fd02 	bl	8000d80 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002380:	f7fe fcfe 	bl	8000d80 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e03b      	b.n	800240e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <HAL_RCC_ClockConfig+0x260>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d1ed      	bne.n	8002380 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4917      	ldr	r1, [pc, #92]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	490f      	ldr	r1, [pc, #60]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e2:	f000 f825 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <HAL_RCC_ClockConfig+0x264>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	490c      	ldr	r1, [pc, #48]	@ (8002424 <HAL_RCC_ClockConfig+0x26c>)
 80023f4:	5ccb      	ldrb	r3, [r1, r3]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	fa22 f303 	lsr.w	r3, r2, r3
 80023fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <HAL_RCC_ClockConfig+0x270>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002402:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <HAL_RCC_ClockConfig+0x274>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fa94 	bl	8000934 <HAL_InitTick>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	04c4b400 	.word	0x04c4b400
 8002424:	0800723c 	.word	0x0800723c
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002436:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b04      	cmp	r3, #4
 8002440:	d102      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002442:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	e047      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002448:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d102      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002454:	4b26      	ldr	r3, [pc, #152]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e03e      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800245a:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d136      	bne.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002466:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002470:	4b1d      	ldr	r3, [pc, #116]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3301      	adds	r3, #1
 800247c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d10c      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002484:	4a1a      	ldr	r2, [pc, #104]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	4a16      	ldr	r2, [pc, #88]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800248e:	68d2      	ldr	r2, [r2, #12]
 8002490:	0a12      	lsrs	r2, r2, #8
 8002492:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
      break;
 800249c:	e00c      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800249e:	4a13      	ldr	r2, [pc, #76]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4a10      	ldr	r2, [pc, #64]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a8:	68d2      	ldr	r2, [r2, #12]
 80024aa:	0a12      	lsrs	r2, r2, #8
 80024ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
      break;
 80024b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0e5b      	lsrs	r3, r3, #25
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	e001      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024d8:	693b      	ldr	r3, [r7, #16]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	016e3600 	.word	0x016e3600

080024f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b03      	ldr	r3, [pc, #12]	@ (8002508 <HAL_RCC_GetHCLKFreq+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000000 	.word	0x20000000

0800250c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002510:	f7ff fff0 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4904      	ldr	r1, [pc, #16]	@ (8002534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	0800724c 	.word	0x0800724c

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800253c:	f7ff ffda 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0adb      	lsrs	r3, r3, #11
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4904      	ldr	r1, [pc, #16]	@ (8002560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	0800724c 	.word	0x0800724c

08002564 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	220f      	movs	r2, #15
 8002572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002580:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800258c:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <HAL_RCC_GetClockConfig+0x5c>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002598:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_RCC_GetClockConfig+0x5c>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	08db      	lsrs	r3, r3, #3
 800259e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025a6:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <HAL_RCC_GetClockConfig+0x60>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 020f 	and.w	r2, r3, #15
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	601a      	str	r2, [r3, #0]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40022000 	.word	0x40022000

080025c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	3301      	adds	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d10c      	bne.n	8002606 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ec:	4a17      	ldr	r2, [pc, #92]	@ (800264c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025f6:	68d2      	ldr	r2, [r2, #12]
 80025f8:	0a12      	lsrs	r2, r2, #8
 80025fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	617b      	str	r3, [r7, #20]
    break;
 8002604:	e00c      	b.n	8002620 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002606:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	4a0e      	ldr	r2, [pc, #56]	@ (8002648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002610:	68d2      	ldr	r2, [r2, #12]
 8002612:	0a12      	lsrs	r2, r2, #8
 8002614:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
    break;
 800261e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002620:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0e5b      	lsrs	r3, r3, #25
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	3301      	adds	r3, #1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800263a:	687b      	ldr	r3, [r7, #4]
}
 800263c:	4618      	mov	r0, r3
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40021000 	.word	0x40021000
 800264c:	016e3600 	.word	0x016e3600
 8002650:	00f42400 	.word	0x00f42400

08002654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800265c:	2300      	movs	r3, #0
 800265e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002660:	2300      	movs	r3, #0
 8002662:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8098 	beq.w	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002676:	4b43      	ldr	r3, [pc, #268]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10d      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	4b40      	ldr	r3, [pc, #256]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	4a3f      	ldr	r2, [pc, #252]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800268c:	6593      	str	r3, [r2, #88]	@ 0x58
 800268e:	4b3d      	ldr	r3, [pc, #244]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269a:	2301      	movs	r3, #1
 800269c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800269e:	4b3a      	ldr	r3, [pc, #232]	@ (8002788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a39      	ldr	r2, [pc, #228]	@ (8002788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026aa:	f7fe fb69 	bl	8000d80 <HAL_GetTick>
 80026ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026b0:	e009      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7fe fb65 	bl	8000d80 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d902      	bls.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	74fb      	strb	r3, [r7, #19]
        break;
 80026c4:	e005      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026c6:	4b30      	ldr	r3, [pc, #192]	@ (8002788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0ef      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026d2:	7cfb      	ldrb	r3, [r7, #19]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d159      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01e      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d019      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026f4:	4b23      	ldr	r3, [pc, #140]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002700:	4b20      	ldr	r3, [pc, #128]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002706:	4a1f      	ldr	r2, [pc, #124]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002710:	4b1c      	ldr	r3, [pc, #112]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002716:	4a1b      	ldr	r2, [pc, #108]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002720:	4a18      	ldr	r2, [pc, #96]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fb25 	bl	8000d80 <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002738:	e00b      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe fb21 	bl	8000d80 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d902      	bls.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	74fb      	strb	r3, [r7, #19]
            break;
 8002750:	e006      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002752:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ec      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10b      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002766:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800277c:	e008      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	74bb      	strb	r3, [r7, #18]
 8002782:	e005      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002790:	7c7b      	ldrb	r3, [r7, #17]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4ba7      	ldr	r3, [pc, #668]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	4aa6      	ldr	r2, [pc, #664]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b4:	f023 0203 	bic.w	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	499d      	ldr	r1, [pc, #628]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d0:	4b98      	ldr	r3, [pc, #608]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d6:	f023 020c 	bic.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4995      	ldr	r1, [pc, #596]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027f2:	4b90      	ldr	r3, [pc, #576]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	498c      	ldr	r1, [pc, #560]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002814:	4b87      	ldr	r3, [pc, #540]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	4984      	ldr	r1, [pc, #528]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002836:	4b7f      	ldr	r3, [pc, #508]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	497b      	ldr	r1, [pc, #492]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002858:	4b76      	ldr	r3, [pc, #472]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	4973      	ldr	r1, [pc, #460]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800287a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002880:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	496a      	ldr	r1, [pc, #424]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800289c:	4b65      	ldr	r3, [pc, #404]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4962      	ldr	r1, [pc, #392]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028be:	4b5d      	ldr	r3, [pc, #372]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	4959      	ldr	r1, [pc, #356]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028e0:	4b54      	ldr	r3, [pc, #336]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028e6:	f023 0203 	bic.w	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ee:	4951      	ldr	r1, [pc, #324]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002902:	4b4c      	ldr	r3, [pc, #304]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002908:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	4948      	ldr	r1, [pc, #288]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002924:	4b43      	ldr	r3, [pc, #268]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	4940      	ldr	r1, [pc, #256]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002942:	d105      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002944:	4b3b      	ldr	r3, [pc, #236]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a3a      	ldr	r2, [pc, #232]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800294e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800295c:	4b35      	ldr	r3, [pc, #212]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002962:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296a:	4932      	ldr	r1, [pc, #200]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002976:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800297a:	d105      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800297c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a2c      	ldr	r2, [pc, #176]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002986:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d015      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002994:	4b27      	ldr	r3, [pc, #156]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a2:	4924      	ldr	r1, [pc, #144]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029b2:	d105      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d015      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029da:	4916      	ldr	r1, [pc, #88]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029ea:	d105      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ec:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a10      	ldr	r2, [pc, #64]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d019      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a04:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	4908      	ldr	r1, [pc, #32]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a22:	d109      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a24:	4b03      	ldr	r3, [pc, #12]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a02      	ldr	r2, [pc, #8]	@ (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a2e:	60d3      	str	r3, [r2, #12]
 8002a30:	e002      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d015      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a44:	4b29      	ldr	r3, [pc, #164]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	4926      	ldr	r1, [pc, #152]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a62:	d105      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a64:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4a20      	ldr	r2, [pc, #128]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a6e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d015      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a82:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8a:	4918      	ldr	r1, [pc, #96]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a9c:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d015      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac2:	490a      	ldr	r1, [pc, #40]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad4:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4a04      	ldr	r2, [pc, #16]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ade:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ae0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000

08002af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e049      	b.n	8002b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f841 	bl	8002b9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f000 fa30 	bl	8002f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d001      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e054      	b.n	8002c76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a26      	ldr	r2, [pc, #152]	@ (8002c84 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d022      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf6:	d01d      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a22      	ldr	r2, [pc, #136]	@ (8002c88 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d018      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a21      	ldr	r2, [pc, #132]	@ (8002c8c <HAL_TIM_Base_Start_IT+0xd8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1f      	ldr	r2, [pc, #124]	@ (8002c90 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00e      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002c94 <HAL_TIM_Base_Start_IT+0xe0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <HAL_TIM_Base_Start_IT+0xe4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x80>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c9c <HAL_TIM_Base_Start_IT+0xe8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d115      	bne.n	8002c60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ca0 <HAL_TIM_Base_Start_IT+0xec>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d015      	beq.n	8002c72 <HAL_TIM_Base_Start_IT+0xbe>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c4c:	d011      	beq.n	8002c72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5e:	e008      	b.n	8002c72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e000      	b.n	8002c74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	40000800 	.word	0x40000800
 8002c90:	40000c00 	.word	0x40000c00
 8002c94:	40013400 	.word	0x40013400
 8002c98:	40014000 	.word	0x40014000
 8002c9c:	40015000 	.word	0x40015000
 8002ca0:	00010007 	.word	0x00010007

08002ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d020      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01b      	beq.n	8002d08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0202 	mvn.w	r2, #2
 8002cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f931 	bl	8002f56 <HAL_TIM_IC_CaptureCallback>
 8002cf4:	e005      	b.n	8002d02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f923 	bl	8002f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f934 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d020      	beq.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01b      	beq.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0204 	mvn.w	r2, #4
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f90b 	bl	8002f56 <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8fd 	bl	8002f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f90e 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d020      	beq.n	8002da0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01b      	beq.n	8002da0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0208 	mvn.w	r2, #8
 8002d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2204      	movs	r2, #4
 8002d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f8e5 	bl	8002f56 <HAL_TIM_IC_CaptureCallback>
 8002d8c:	e005      	b.n	8002d9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f8d7 	bl	8002f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f8e8 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d020      	beq.n	8002dec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01b      	beq.n	8002dec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0210 	mvn.w	r2, #16
 8002dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f8bf 	bl	8002f56 <HAL_TIM_IC_CaptureCallback>
 8002dd8:	e005      	b.n	8002de6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f8b1 	bl	8002f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f8c2 	bl	8002f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0201 	mvn.w	r2, #1
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fd fd50 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00c      	beq.n	8002e3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f969 	bl	8003110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00c      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f961 	bl	8003124 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00c      	beq.n	8002e86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f87c 	bl	8002f7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00c      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f06f 0220 	mvn.w	r2, #32
 8002ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f929 	bl	80030fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00c      	beq.n	8002ece <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f935 	bl	8003138 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f92d 	bl	800314c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00c      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f925 	bl	8003160 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00c      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f91d 	bl	8003174 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a4c      	ldr	r2, [pc, #304]	@ (80030d8 <TIM_Base_SetConfig+0x144>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d017      	beq.n	8002fdc <TIM_Base_SetConfig+0x48>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb2:	d013      	beq.n	8002fdc <TIM_Base_SetConfig+0x48>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a49      	ldr	r2, [pc, #292]	@ (80030dc <TIM_Base_SetConfig+0x148>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00f      	beq.n	8002fdc <TIM_Base_SetConfig+0x48>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a48      	ldr	r2, [pc, #288]	@ (80030e0 <TIM_Base_SetConfig+0x14c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00b      	beq.n	8002fdc <TIM_Base_SetConfig+0x48>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a47      	ldr	r2, [pc, #284]	@ (80030e4 <TIM_Base_SetConfig+0x150>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <TIM_Base_SetConfig+0x48>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a46      	ldr	r2, [pc, #280]	@ (80030e8 <TIM_Base_SetConfig+0x154>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0x48>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a45      	ldr	r2, [pc, #276]	@ (80030ec <TIM_Base_SetConfig+0x158>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d108      	bne.n	8002fee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a39      	ldr	r2, [pc, #228]	@ (80030d8 <TIM_Base_SetConfig+0x144>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d023      	beq.n	800303e <TIM_Base_SetConfig+0xaa>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffc:	d01f      	beq.n	800303e <TIM_Base_SetConfig+0xaa>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a36      	ldr	r2, [pc, #216]	@ (80030dc <TIM_Base_SetConfig+0x148>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01b      	beq.n	800303e <TIM_Base_SetConfig+0xaa>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a35      	ldr	r2, [pc, #212]	@ (80030e0 <TIM_Base_SetConfig+0x14c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d017      	beq.n	800303e <TIM_Base_SetConfig+0xaa>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a34      	ldr	r2, [pc, #208]	@ (80030e4 <TIM_Base_SetConfig+0x150>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <TIM_Base_SetConfig+0xaa>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a33      	ldr	r2, [pc, #204]	@ (80030e8 <TIM_Base_SetConfig+0x154>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00f      	beq.n	800303e <TIM_Base_SetConfig+0xaa>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a33      	ldr	r2, [pc, #204]	@ (80030f0 <TIM_Base_SetConfig+0x15c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00b      	beq.n	800303e <TIM_Base_SetConfig+0xaa>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a32      	ldr	r2, [pc, #200]	@ (80030f4 <TIM_Base_SetConfig+0x160>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0xaa>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a31      	ldr	r2, [pc, #196]	@ (80030f8 <TIM_Base_SetConfig+0x164>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0xaa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a2c      	ldr	r2, [pc, #176]	@ (80030ec <TIM_Base_SetConfig+0x158>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a18      	ldr	r2, [pc, #96]	@ (80030d8 <TIM_Base_SetConfig+0x144>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d013      	beq.n	80030a4 <TIM_Base_SetConfig+0x110>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a1a      	ldr	r2, [pc, #104]	@ (80030e8 <TIM_Base_SetConfig+0x154>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00f      	beq.n	80030a4 <TIM_Base_SetConfig+0x110>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a1a      	ldr	r2, [pc, #104]	@ (80030f0 <TIM_Base_SetConfig+0x15c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00b      	beq.n	80030a4 <TIM_Base_SetConfig+0x110>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a19      	ldr	r2, [pc, #100]	@ (80030f4 <TIM_Base_SetConfig+0x160>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <TIM_Base_SetConfig+0x110>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a18      	ldr	r2, [pc, #96]	@ (80030f8 <TIM_Base_SetConfig+0x164>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_Base_SetConfig+0x110>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <TIM_Base_SetConfig+0x158>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d103      	bne.n	80030ac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f023 0201 	bic.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	611a      	str	r2, [r3, #16]
  }
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800
 80030e4:	40000c00 	.word	0x40000c00
 80030e8:	40013400 	.word	0x40013400
 80030ec:	40015000 	.word	0x40015000
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40014400 	.word	0x40014400
 80030f8:	40014800 	.word	0x40014800

080030fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e042      	b.n	8003220 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d106      	bne.n	80031b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fd fcd5 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2224      	movs	r2, #36	@ 0x24
 80031b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fe86 	bl	8003ee4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fb87 	bl	80038ec <UART_SetConfig>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e01b      	b.n	8003220 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003206:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 ff05 	bl	8004028 <UART_CheckIdleState>
 800321e:	4603      	mov	r3, r0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b0ba      	sub	sp, #232	@ 0xe8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800324e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003252:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003256:	4013      	ands	r3, r2
 8003258:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800325c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d11b      	bne.n	800329c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d015      	beq.n	800329c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800327c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8300 	beq.w	8003892 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
      }
      return;
 800329a:	e2fa      	b.n	8003892 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800329c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8123 	beq.w	80034ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80032a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80032aa:	4b8d      	ldr	r3, [pc, #564]	@ (80034e0 <HAL_UART_IRQHandler+0x2b8>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80032b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80032b6:	4b8b      	ldr	r3, [pc, #556]	@ (80034e4 <HAL_UART_IRQHandler+0x2bc>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8116 	beq.w	80034ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d011      	beq.n	80032f0 <HAL_UART_IRQHandler+0xc8>
 80032cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00b      	beq.n	80032f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2201      	movs	r2, #1
 80032de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d011      	beq.n	8003320 <HAL_UART_IRQHandler+0xf8>
 80032fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2202      	movs	r2, #2
 800330e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	f043 0204 	orr.w	r2, r3, #4
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d011      	beq.n	8003350 <HAL_UART_IRQHandler+0x128>
 800332c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2204      	movs	r2, #4
 800333e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003346:	f043 0202 	orr.w	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d017      	beq.n	800338c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800335c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003368:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800336c:	4b5c      	ldr	r3, [pc, #368]	@ (80034e0 <HAL_UART_IRQHandler+0x2b8>)
 800336e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00b      	beq.n	800338c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2208      	movs	r2, #8
 800337a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	f043 0208 	orr.w	r2, r3, #8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800338c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <HAL_UART_IRQHandler+0x196>
 8003398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800339c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00c      	beq.n	80033be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8266 	beq.w	8003896 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80033ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d013      	beq.n	80033fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80033d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80033e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003404:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003412:	2b40      	cmp	r3, #64	@ 0x40
 8003414:	d005      	beq.n	8003422 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800341a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800341e:	2b00      	cmp	r3, #0
 8003420:	d054      	beq.n	80034cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 ff17 	bl	8004256 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b40      	cmp	r3, #64	@ 0x40
 8003434:	d146      	bne.n	80034c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3308      	adds	r3, #8
 800343c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800344c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3308      	adds	r3, #8
 800345e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003462:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003466:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800346e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800347a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1d9      	bne.n	8003436 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003488:	2b00      	cmp	r3, #0
 800348a:	d017      	beq.n	80034bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003492:	4a15      	ldr	r2, [pc, #84]	@ (80034e8 <HAL_UART_IRQHandler+0x2c0>)
 8003494:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd fe5c 	bl	800115a <HAL_DMA_Abort_IT>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d019      	beq.n	80034dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80034b6:	4610      	mov	r0, r2
 80034b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ba:	e00f      	b.n	80034dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f9ff 	bl	80038c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c2:	e00b      	b.n	80034dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f9fb 	bl	80038c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ca:	e007      	b.n	80034dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f9f7 	bl	80038c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80034da:	e1dc      	b.n	8003896 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034dc:	bf00      	nop
    return;
 80034de:	e1da      	b.n	8003896 <HAL_UART_IRQHandler+0x66e>
 80034e0:	10000001 	.word	0x10000001
 80034e4:	04000120 	.word	0x04000120
 80034e8:	08004323 	.word	0x08004323

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	f040 8170 	bne.w	80037d6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8169 	beq.w	80037d6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8162 	beq.w	80037d6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2210      	movs	r2, #16
 8003518:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003524:	2b40      	cmp	r3, #64	@ 0x40
 8003526:	f040 80d8 	bne.w	80036da <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003538:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80af 	beq.w	80036a0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003548:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800354c:	429a      	cmp	r2, r3
 800354e:	f080 80a7 	bcs.w	80036a0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003558:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	f040 8087 	bne.w	800367e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800357c:	e853 3f00 	ldrex	r3, [r3]
 8003580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800358c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800359a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800359e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80035b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1da      	bne.n	8003570 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3308      	adds	r3, #8
 80035c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3308      	adds	r3, #8
 80035da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80035e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80035f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e1      	bne.n	80035ba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3308      	adds	r3, #8
 80035fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800360c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3308      	adds	r3, #8
 8003616:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800361a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800361c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003620:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003622:	e841 2300 	strex	r3, r2, [r1]
 8003626:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e3      	bne.n	80035f6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800364a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800364c:	f023 0310 	bic.w	r3, r3, #16
 8003650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800365e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003660:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003664:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800366c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e4      	bne.n	800363c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd fd15 	bl	80010a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003690:	b29b      	uxth	r3, r3
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	b29b      	uxth	r3, r3
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f91b 	bl	80038d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800369e:	e0fc      	b.n	800389a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80036a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036aa:	429a      	cmp	r2, r3
 80036ac:	f040 80f5 	bne.w	800389a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b20      	cmp	r3, #32
 80036c0:	f040 80eb 	bne.w	800389a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8fe 	bl	80038d4 <HAL_UARTEx_RxEventCallback>
      return;
 80036d8:	e0df      	b.n	800389a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80d1 	beq.w	800389e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80036fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80cc 	beq.w	800389e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003716:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800371a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003728:	647b      	str	r3, [r7, #68]	@ 0x44
 800372a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800372e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e4      	bne.n	8003706 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3308      	adds	r3, #8
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	623b      	str	r3, [r7, #32]
   return(result);
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3308      	adds	r3, #8
 8003760:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003764:	633a      	str	r2, [r7, #48]	@ 0x30
 8003766:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800376a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e1      	bne.n	800373c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	60fb      	str	r3, [r7, #12]
   return(result);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f023 0310 	bic.w	r3, r3, #16
 80037a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	69b9      	ldr	r1, [r7, #24]
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	617b      	str	r3, [r7, #20]
   return(result);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e4      	bne.n	800378c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f880 	bl	80038d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037d4:	e063      	b.n	800389e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00e      	beq.n	8003800 <HAL_UART_IRQHandler+0x5d8>
 80037e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80037f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fdcf 	bl	800439c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037fe:	e051      	b.n	80038a4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003808:	2b00      	cmp	r3, #0
 800380a:	d014      	beq.n	8003836 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800380c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800381c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003828:	2b00      	cmp	r3, #0
 800382a:	d03a      	beq.n	80038a2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
    }
    return;
 8003834:	e035      	b.n	80038a2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800383a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_UART_IRQHandler+0x62e>
 8003842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fd79 	bl	8004346 <UART_EndTransmit_IT>
    return;
 8003854:	e026      	b.n	80038a4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800385a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_UART_IRQHandler+0x64e>
 8003862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003866:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fda8 	bl	80043c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003874:	e016      	b.n	80038a4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800387a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d010      	beq.n	80038a4 <HAL_UART_IRQHandler+0x67c>
 8003882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003886:	2b00      	cmp	r3, #0
 8003888:	da0c      	bge.n	80038a4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fd90 	bl	80043b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003890:	e008      	b.n	80038a4 <HAL_UART_IRQHandler+0x67c>
      return;
 8003892:	bf00      	nop
 8003894:	e006      	b.n	80038a4 <HAL_UART_IRQHandler+0x67c>
    return;
 8003896:	bf00      	nop
 8003898:	e004      	b.n	80038a4 <HAL_UART_IRQHandler+0x67c>
      return;
 800389a:	bf00      	nop
 800389c:	e002      	b.n	80038a4 <HAL_UART_IRQHandler+0x67c>
      return;
 800389e:	bf00      	nop
 80038a0:	e000      	b.n	80038a4 <HAL_UART_IRQHandler+0x67c>
    return;
 80038a2:	bf00      	nop
  }
}
 80038a4:	37e8      	adds	r7, #232	@ 0xe8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop

080038ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f0:	b08c      	sub	sp, #48	@ 0x30
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	431a      	orrs	r2, r3
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	431a      	orrs	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	4313      	orrs	r3, r2
 8003912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4baa      	ldr	r3, [pc, #680]	@ (8003bc4 <UART_SetConfig+0x2d8>)
 800391c:	4013      	ands	r3, r2
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003924:	430b      	orrs	r3, r1
 8003926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a9f      	ldr	r2, [pc, #636]	@ (8003bc8 <UART_SetConfig+0x2dc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003954:	4313      	orrs	r3, r2
 8003956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003962:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800396c:	430b      	orrs	r3, r1
 800396e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	f023 010f 	bic.w	r1, r3, #15
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a90      	ldr	r2, [pc, #576]	@ (8003bcc <UART_SetConfig+0x2e0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d125      	bne.n	80039dc <UART_SetConfig+0xf0>
 8003990:	4b8f      	ldr	r3, [pc, #572]	@ (8003bd0 <UART_SetConfig+0x2e4>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b03      	cmp	r3, #3
 800399c:	d81a      	bhi.n	80039d4 <UART_SetConfig+0xe8>
 800399e:	a201      	add	r2, pc, #4	@ (adr r2, 80039a4 <UART_SetConfig+0xb8>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039c5 	.word	0x080039c5
 80039ac:	080039bd 	.word	0x080039bd
 80039b0:	080039cd 	.word	0x080039cd
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ba:	e116      	b.n	8003bea <UART_SetConfig+0x2fe>
 80039bc:	2302      	movs	r3, #2
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039c2:	e112      	b.n	8003bea <UART_SetConfig+0x2fe>
 80039c4:	2304      	movs	r3, #4
 80039c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ca:	e10e      	b.n	8003bea <UART_SetConfig+0x2fe>
 80039cc:	2308      	movs	r3, #8
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039d2:	e10a      	b.n	8003bea <UART_SetConfig+0x2fe>
 80039d4:	2310      	movs	r3, #16
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039da:	e106      	b.n	8003bea <UART_SetConfig+0x2fe>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a7c      	ldr	r2, [pc, #496]	@ (8003bd4 <UART_SetConfig+0x2e8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d138      	bne.n	8003a58 <UART_SetConfig+0x16c>
 80039e6:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd0 <UART_SetConfig+0x2e4>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b0c      	cmp	r3, #12
 80039f2:	d82d      	bhi.n	8003a50 <UART_SetConfig+0x164>
 80039f4:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <UART_SetConfig+0x110>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a31 	.word	0x08003a31
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a51 	.word	0x08003a51
 8003a08:	08003a51 	.word	0x08003a51
 8003a0c:	08003a41 	.word	0x08003a41
 8003a10:	08003a51 	.word	0x08003a51
 8003a14:	08003a51 	.word	0x08003a51
 8003a18:	08003a51 	.word	0x08003a51
 8003a1c:	08003a39 	.word	0x08003a39
 8003a20:	08003a51 	.word	0x08003a51
 8003a24:	08003a51 	.word	0x08003a51
 8003a28:	08003a51 	.word	0x08003a51
 8003a2c:	08003a49 	.word	0x08003a49
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a36:	e0d8      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a3e:	e0d4      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003a40:	2304      	movs	r3, #4
 8003a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a46:	e0d0      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003a48:	2308      	movs	r3, #8
 8003a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a4e:	e0cc      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003a50:	2310      	movs	r3, #16
 8003a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a56:	e0c8      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a5e      	ldr	r2, [pc, #376]	@ (8003bd8 <UART_SetConfig+0x2ec>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d125      	bne.n	8003aae <UART_SetConfig+0x1c2>
 8003a62:	4b5b      	ldr	r3, [pc, #364]	@ (8003bd0 <UART_SetConfig+0x2e4>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a6c:	2b30      	cmp	r3, #48	@ 0x30
 8003a6e:	d016      	beq.n	8003a9e <UART_SetConfig+0x1b2>
 8003a70:	2b30      	cmp	r3, #48	@ 0x30
 8003a72:	d818      	bhi.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d00a      	beq.n	8003a8e <UART_SetConfig+0x1a2>
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d814      	bhi.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <UART_SetConfig+0x19a>
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d008      	beq.n	8003a96 <UART_SetConfig+0x1aa>
 8003a84:	e00f      	b.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a86:	2300      	movs	r3, #0
 8003a88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a8c:	e0ad      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a94:	e0a9      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003a96:	2304      	movs	r3, #4
 8003a98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a9c:	e0a5      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aa4:	e0a1      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003aa6:	2310      	movs	r3, #16
 8003aa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aac:	e09d      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a4a      	ldr	r2, [pc, #296]	@ (8003bdc <UART_SetConfig+0x2f0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d125      	bne.n	8003b04 <UART_SetConfig+0x218>
 8003ab8:	4b45      	ldr	r3, [pc, #276]	@ (8003bd0 <UART_SetConfig+0x2e4>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ac2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ac4:	d016      	beq.n	8003af4 <UART_SetConfig+0x208>
 8003ac6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ac8:	d818      	bhi.n	8003afc <UART_SetConfig+0x210>
 8003aca:	2b80      	cmp	r3, #128	@ 0x80
 8003acc:	d00a      	beq.n	8003ae4 <UART_SetConfig+0x1f8>
 8003ace:	2b80      	cmp	r3, #128	@ 0x80
 8003ad0:	d814      	bhi.n	8003afc <UART_SetConfig+0x210>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <UART_SetConfig+0x1f0>
 8003ad6:	2b40      	cmp	r3, #64	@ 0x40
 8003ad8:	d008      	beq.n	8003aec <UART_SetConfig+0x200>
 8003ada:	e00f      	b.n	8003afc <UART_SetConfig+0x210>
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae2:	e082      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aea:	e07e      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003aec:	2304      	movs	r3, #4
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003af2:	e07a      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003af4:	2308      	movs	r3, #8
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003afa:	e076      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003afc:	2310      	movs	r3, #16
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b02:	e072      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a35      	ldr	r2, [pc, #212]	@ (8003be0 <UART_SetConfig+0x2f4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d12a      	bne.n	8003b64 <UART_SetConfig+0x278>
 8003b0e:	4b30      	ldr	r3, [pc, #192]	@ (8003bd0 <UART_SetConfig+0x2e4>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b1c:	d01a      	beq.n	8003b54 <UART_SetConfig+0x268>
 8003b1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b22:	d81b      	bhi.n	8003b5c <UART_SetConfig+0x270>
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b28:	d00c      	beq.n	8003b44 <UART_SetConfig+0x258>
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b2e:	d815      	bhi.n	8003b5c <UART_SetConfig+0x270>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <UART_SetConfig+0x250>
 8003b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b38:	d008      	beq.n	8003b4c <UART_SetConfig+0x260>
 8003b3a:	e00f      	b.n	8003b5c <UART_SetConfig+0x270>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b42:	e052      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003b44:	2302      	movs	r3, #2
 8003b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b4a:	e04e      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b52:	e04a      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003b54:	2308      	movs	r3, #8
 8003b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b5a:	e046      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b62:	e042      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a17      	ldr	r2, [pc, #92]	@ (8003bc8 <UART_SetConfig+0x2dc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d13a      	bne.n	8003be4 <UART_SetConfig+0x2f8>
 8003b6e:	4b18      	ldr	r3, [pc, #96]	@ (8003bd0 <UART_SetConfig+0x2e4>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b7c:	d01a      	beq.n	8003bb4 <UART_SetConfig+0x2c8>
 8003b7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b82:	d81b      	bhi.n	8003bbc <UART_SetConfig+0x2d0>
 8003b84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b88:	d00c      	beq.n	8003ba4 <UART_SetConfig+0x2b8>
 8003b8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b8e:	d815      	bhi.n	8003bbc <UART_SetConfig+0x2d0>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <UART_SetConfig+0x2b0>
 8003b94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b98:	d008      	beq.n	8003bac <UART_SetConfig+0x2c0>
 8003b9a:	e00f      	b.n	8003bbc <UART_SetConfig+0x2d0>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ba2:	e022      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003baa:	e01e      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003bac:	2304      	movs	r3, #4
 8003bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bb2:	e01a      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003bb4:	2308      	movs	r3, #8
 8003bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bba:	e016      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bc2:	e012      	b.n	8003bea <UART_SetConfig+0x2fe>
 8003bc4:	cfff69f3 	.word	0xcfff69f3
 8003bc8:	40008000 	.word	0x40008000
 8003bcc:	40013800 	.word	0x40013800
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40004400 	.word	0x40004400
 8003bd8:	40004800 	.word	0x40004800
 8003bdc:	40004c00 	.word	0x40004c00
 8003be0:	40005000 	.word	0x40005000
 8003be4:	2310      	movs	r3, #16
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4aae      	ldr	r2, [pc, #696]	@ (8003ea8 <UART_SetConfig+0x5bc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	f040 8097 	bne.w	8003d24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bf6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d823      	bhi.n	8003c46 <UART_SetConfig+0x35a>
 8003bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003c04 <UART_SetConfig+0x318>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c29 	.word	0x08003c29
 8003c08:	08003c47 	.word	0x08003c47
 8003c0c:	08003c31 	.word	0x08003c31
 8003c10:	08003c47 	.word	0x08003c47
 8003c14:	08003c37 	.word	0x08003c37
 8003c18:	08003c47 	.word	0x08003c47
 8003c1c:	08003c47 	.word	0x08003c47
 8003c20:	08003c47 	.word	0x08003c47
 8003c24:	08003c3f 	.word	0x08003c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c28:	f7fe fc70 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8003c2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c2e:	e010      	b.n	8003c52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c30:	4b9e      	ldr	r3, [pc, #632]	@ (8003eac <UART_SetConfig+0x5c0>)
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c34:	e00d      	b.n	8003c52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c36:	f7fe fbfb 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8003c3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c3c:	e009      	b.n	8003c52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c44:	e005      	b.n	8003c52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8130 	beq.w	8003eba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	4a94      	ldr	r2, [pc, #592]	@ (8003eb0 <UART_SetConfig+0x5c4>)
 8003c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d305      	bcc.n	8003c8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d903      	bls.n	8003c92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c90:	e113      	b.n	8003eba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	2200      	movs	r2, #0
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	60fa      	str	r2, [r7, #12]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	4a84      	ldr	r2, [pc, #528]	@ (8003eb0 <UART_SetConfig+0x5c4>)
 8003ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cb4:	f7fc fab4 	bl	8000220 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	020b      	lsls	r3, r1, #8
 8003cca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003cce:	0202      	lsls	r2, r0, #8
 8003cd0:	6979      	ldr	r1, [r7, #20]
 8003cd2:	6849      	ldr	r1, [r1, #4]
 8003cd4:	0849      	lsrs	r1, r1, #1
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	460c      	mov	r4, r1
 8003cda:	4605      	mov	r5, r0
 8003cdc:	eb12 0804 	adds.w	r8, r2, r4
 8003ce0:	eb43 0905 	adc.w	r9, r3, r5
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	469a      	mov	sl, r3
 8003cec:	4693      	mov	fp, r2
 8003cee:	4652      	mov	r2, sl
 8003cf0:	465b      	mov	r3, fp
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	f7fc fa93 	bl	8000220 <__aeabi_uldivmod>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4613      	mov	r3, r2
 8003d00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d08:	d308      	bcc.n	8003d1c <UART_SetConfig+0x430>
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d10:	d204      	bcs.n	8003d1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6a3a      	ldr	r2, [r7, #32]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	e0ce      	b.n	8003eba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d22:	e0ca      	b.n	8003eba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d2c:	d166      	bne.n	8003dfc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d827      	bhi.n	8003d86 <UART_SetConfig+0x49a>
 8003d36:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <UART_SetConfig+0x450>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003d61 	.word	0x08003d61
 8003d40:	08003d69 	.word	0x08003d69
 8003d44:	08003d71 	.word	0x08003d71
 8003d48:	08003d87 	.word	0x08003d87
 8003d4c:	08003d77 	.word	0x08003d77
 8003d50:	08003d87 	.word	0x08003d87
 8003d54:	08003d87 	.word	0x08003d87
 8003d58:	08003d87 	.word	0x08003d87
 8003d5c:	08003d7f 	.word	0x08003d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d60:	f7fe fbd4 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8003d64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d66:	e014      	b.n	8003d92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d68:	f7fe fbe6 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8003d6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d6e:	e010      	b.n	8003d92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d70:	4b4e      	ldr	r3, [pc, #312]	@ (8003eac <UART_SetConfig+0x5c0>)
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d74:	e00d      	b.n	8003d92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d76:	f7fe fb5b 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8003d7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d7c:	e009      	b.n	8003d92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d84:	e005      	b.n	8003d92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8090 	beq.w	8003eba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	4a44      	ldr	r2, [pc, #272]	@ (8003eb0 <UART_SetConfig+0x5c4>)
 8003da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003da4:	461a      	mov	r2, r3
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dac:	005a      	lsls	r2, r3, #1
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	441a      	add	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	2b0f      	cmp	r3, #15
 8003dc4:	d916      	bls.n	8003df4 <UART_SetConfig+0x508>
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dcc:	d212      	bcs.n	8003df4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f023 030f 	bic.w	r3, r3, #15
 8003dd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	8bfb      	ldrh	r3, [r7, #30]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	8bfa      	ldrh	r2, [r7, #30]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	e062      	b.n	8003eba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003dfa:	e05e      	b.n	8003eba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dfc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d828      	bhi.n	8003e56 <UART_SetConfig+0x56a>
 8003e04:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <UART_SetConfig+0x520>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e57 	.word	0x08003e57
 8003e1c:	08003e47 	.word	0x08003e47
 8003e20:	08003e57 	.word	0x08003e57
 8003e24:	08003e57 	.word	0x08003e57
 8003e28:	08003e57 	.word	0x08003e57
 8003e2c:	08003e4f 	.word	0x08003e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e30:	f7fe fb6c 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8003e34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e36:	e014      	b.n	8003e62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e38:	f7fe fb7e 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8003e3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e3e:	e010      	b.n	8003e62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e40:	4b1a      	ldr	r3, [pc, #104]	@ (8003eac <UART_SetConfig+0x5c0>)
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e44:	e00d      	b.n	8003e62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e46:	f7fe faf3 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8003e4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e4c:	e009      	b.n	8003e62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e54:	e005      	b.n	8003e62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e60:	bf00      	nop
    }

    if (pclk != 0U)
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d028      	beq.n	8003eba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	4a10      	ldr	r2, [pc, #64]	@ (8003eb0 <UART_SetConfig+0x5c4>)
 8003e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e72:	461a      	mov	r2, r3
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	441a      	add	r2, r3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	2b0f      	cmp	r3, #15
 8003e90:	d910      	bls.n	8003eb4 <UART_SetConfig+0x5c8>
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e98:	d20c      	bcs.n	8003eb4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	e009      	b.n	8003eba <UART_SetConfig+0x5ce>
 8003ea6:	bf00      	nop
 8003ea8:	40008000 	.word	0x40008000
 8003eac:	00f42400 	.word	0x00f42400
 8003eb0:	08007254 	.word	0x08007254
      }
      else
      {
        ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003ed6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3730      	adds	r7, #48	@ 0x30
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01a      	beq.n	8003ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fe2:	d10a      	bne.n	8003ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]
  }
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b098      	sub	sp, #96	@ 0x60
 800402c:	af02      	add	r7, sp, #8
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004038:	f7fc fea2 	bl	8000d80 <HAL_GetTick>
 800403c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b08      	cmp	r3, #8
 800404a:	d12f      	bne.n	80040ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800404c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004054:	2200      	movs	r2, #0
 8004056:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f88e 	bl	800417c <UART_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d022      	beq.n	80040ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800407a:	653b      	str	r3, [r7, #80]	@ 0x50
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004084:	647b      	str	r3, [r7, #68]	@ 0x44
 8004086:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800408a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e6      	bne.n	8004066 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e063      	b.n	8004174 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d149      	bne.n	800414e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c2:	2200      	movs	r2, #0
 80040c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f857 	bl	800417c <UART_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d03c      	beq.n	800414e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	623b      	str	r3, [r7, #32]
   return(result);
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e6      	bne.n	80040d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3308      	adds	r3, #8
 800410c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	60fb      	str	r3, [r7, #12]
   return(result);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3308      	adds	r3, #8
 8004124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004126:	61fa      	str	r2, [r7, #28]
 8004128:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	69b9      	ldr	r1, [r7, #24]
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	617b      	str	r3, [r7, #20]
   return(result);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e5      	bne.n	8004106 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e012      	b.n	8004174 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3758      	adds	r7, #88	@ 0x58
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418c:	e04f      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004194:	d04b      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004196:	f7fc fdf3 	bl	8000d80 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <UART_WaitOnFlagUntilTimeout+0x30>
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e04e      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d037      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b80      	cmp	r3, #128	@ 0x80
 80041c2:	d034      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b40      	cmp	r3, #64	@ 0x40
 80041c8:	d031      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d110      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2208      	movs	r2, #8
 80041de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f838 	bl	8004256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2208      	movs	r2, #8
 80041ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e029      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004208:	d111      	bne.n	800422e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004212:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f81e 	bl	8004256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e00f      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4013      	ands	r3, r2
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	bf0c      	ite	eq
 800423e:	2301      	moveq	r3, #1
 8004240:	2300      	movne	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	429a      	cmp	r2, r3
 800424a:	d0a0      	beq.n	800418e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004256:	b480      	push	{r7}
 8004258:	b095      	sub	sp, #84	@ 0x54
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800427c:	643b      	str	r3, [r7, #64]	@ 0x40
 800427e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004282:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800428a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	61fb      	str	r3, [r7, #28]
   return(result);
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3308      	adds	r3, #8
 80042b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e3      	bne.n	8004290 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d118      	bne.n	8004302 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f023 0310 	bic.w	r3, r3, #16
 80042e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6979      	ldr	r1, [r7, #20]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	613b      	str	r3, [r7, #16]
   return(result);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e6      	bne.n	80042d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004316:	bf00      	nop
 8004318:	3754      	adds	r7, #84	@ 0x54
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff fac1 	bl	80038c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b088      	sub	sp, #32
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	60bb      	str	r3, [r7, #8]
   return(result);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	613b      	str	r3, [r7, #16]
   return(result);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e6      	bne.n	800434e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fa8c 	bl	80038ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004394:	bf00      	nop
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_UARTEx_DisableFifoMode+0x16>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e027      	b.n	800443e <HAL_UARTEx_DisableFifoMode+0x66>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2224      	movs	r2, #36	@ 0x24
 80043fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0201 	bic.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800441c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800445e:	2302      	movs	r3, #2
 8004460:	e02d      	b.n	80044be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2224      	movs	r2, #36	@ 0x24
 800446e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f850 	bl	8004544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044da:	2302      	movs	r3, #2
 80044dc:	e02d      	b.n	800453a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2224      	movs	r2, #36	@ 0x24
 80044ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f812 	bl	8004544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004550:	2b00      	cmp	r3, #0
 8004552:	d108      	bne.n	8004566 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004564:	e031      	b.n	80045ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004566:	2308      	movs	r3, #8
 8004568:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800456a:	2308      	movs	r3, #8
 800456c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	0e5b      	lsrs	r3, r3, #25
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	0f5b      	lsrs	r3, r3, #29
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800458e:	7bbb      	ldrb	r3, [r7, #14]
 8004590:	7b3a      	ldrb	r2, [r7, #12]
 8004592:	4911      	ldr	r1, [pc, #68]	@ (80045d8 <UARTEx_SetNbDataToProcess+0x94>)
 8004594:	5c8a      	ldrb	r2, [r1, r2]
 8004596:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800459a:	7b3a      	ldrb	r2, [r7, #12]
 800459c:	490f      	ldr	r1, [pc, #60]	@ (80045dc <UARTEx_SetNbDataToProcess+0x98>)
 800459e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	7b7a      	ldrb	r2, [r7, #13]
 80045b0:	4909      	ldr	r1, [pc, #36]	@ (80045d8 <UARTEx_SetNbDataToProcess+0x94>)
 80045b2:	5c8a      	ldrb	r2, [r1, r2]
 80045b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045b8:	7b7a      	ldrb	r2, [r7, #13]
 80045ba:	4908      	ldr	r1, [pc, #32]	@ (80045dc <UARTEx_SetNbDataToProcess+0x98>)
 80045bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045be:	fb93 f3f2 	sdiv	r3, r3, r2
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	0800726c 	.word	0x0800726c
 80045dc:	08007274 	.word	0x08007274

080045e0 <__NVIC_SetPriority>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	6039      	str	r1, [r7, #0]
 80045ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db0a      	blt.n	800460a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	490c      	ldr	r1, [pc, #48]	@ (800462c <__NVIC_SetPriority+0x4c>)
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	0112      	lsls	r2, r2, #4
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	440b      	add	r3, r1
 8004604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004608:	e00a      	b.n	8004620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	4908      	ldr	r1, [pc, #32]	@ (8004630 <__NVIC_SetPriority+0x50>)
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	3b04      	subs	r3, #4
 8004618:	0112      	lsls	r2, r2, #4
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	440b      	add	r3, r1
 800461e:	761a      	strb	r2, [r3, #24]
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000e100 	.word	0xe000e100
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004638:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <SysTick_Handler+0x1c>)
 800463a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800463c:	f001 fd18 	bl	8006070 <xTaskGetSchedulerState>
 8004640:	4603      	mov	r3, r0
 8004642:	2b01      	cmp	r3, #1
 8004644:	d001      	beq.n	800464a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004646:	f002 fb0f 	bl	8006c68 <xPortSysTickHandler>
  }
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	e000e010 	.word	0xe000e010

08004654 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004658:	2100      	movs	r1, #0
 800465a:	f06f 0004 	mvn.w	r0, #4
 800465e:	f7ff ffbf 	bl	80045e0 <__NVIC_SetPriority>
#endif
}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800466e:	f3ef 8305 	mrs	r3, IPSR
 8004672:	603b      	str	r3, [r7, #0]
  return(result);
 8004674:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800467a:	f06f 0305 	mvn.w	r3, #5
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	e00c      	b.n	800469c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004682:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <osKernelInitialize+0x44>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800468a:	4b08      	ldr	r3, [pc, #32]	@ (80046ac <osKernelInitialize+0x44>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004690:	2300      	movs	r3, #0
 8004692:	607b      	str	r3, [r7, #4]
 8004694:	e002      	b.n	800469c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004696:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800469a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800469c:	687b      	ldr	r3, [r7, #4]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20003164 	.word	0x20003164

080046b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046b6:	f3ef 8305 	mrs	r3, IPSR
 80046ba:	603b      	str	r3, [r7, #0]
  return(result);
 80046bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80046c2:	f06f 0305 	mvn.w	r3, #5
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	e010      	b.n	80046ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046ca:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <osKernelStart+0x48>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d109      	bne.n	80046e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046d2:	f7ff ffbf 	bl	8004654 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046d6:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <osKernelStart+0x48>)
 80046d8:	2202      	movs	r2, #2
 80046da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046dc:	f001 f87a 	bl	80057d4 <vTaskStartScheduler>
      stat = osOK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	e002      	b.n	80046ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046ec:	687b      	ldr	r3, [r7, #4]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20003164 	.word	0x20003164

080046fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08e      	sub	sp, #56	@ 0x38
 8004700:	af04      	add	r7, sp, #16
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800470c:	f3ef 8305 	mrs	r3, IPSR
 8004710:	617b      	str	r3, [r7, #20]
  return(result);
 8004712:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004714:	2b00      	cmp	r3, #0
 8004716:	d17e      	bne.n	8004816 <osThreadNew+0x11a>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d07b      	beq.n	8004816 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800471e:	2380      	movs	r3, #128	@ 0x80
 8004720:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004722:	2318      	movs	r3, #24
 8004724:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800472e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d045      	beq.n	80047c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <osThreadNew+0x48>
        name = attr->name;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <osThreadNew+0x6e>
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b38      	cmp	r3, #56	@ 0x38
 800475c:	d805      	bhi.n	800476a <osThreadNew+0x6e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <osThreadNew+0x72>
        return (NULL);
 800476a:	2300      	movs	r3, #0
 800476c:	e054      	b.n	8004818 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	089b      	lsrs	r3, r3, #2
 800477c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00e      	beq.n	80047a4 <osThreadNew+0xa8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b5b      	cmp	r3, #91	@ 0x5b
 800478c:	d90a      	bls.n	80047a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004792:	2b00      	cmp	r3, #0
 8004794:	d006      	beq.n	80047a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <osThreadNew+0xa8>
        mem = 1;
 800479e:	2301      	movs	r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	e010      	b.n	80047c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10c      	bne.n	80047c6 <osThreadNew+0xca>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d108      	bne.n	80047c6 <osThreadNew+0xca>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <osThreadNew+0xca>
          mem = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	e001      	b.n	80047c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d110      	bne.n	80047ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047d4:	9202      	str	r2, [sp, #8]
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	6a3a      	ldr	r2, [r7, #32]
 80047e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 fe1a 	bl	800541c <xTaskCreateStatic>
 80047e8:	4603      	mov	r3, r0
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	e013      	b.n	8004816 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d110      	bne.n	8004816 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	f107 0310 	add.w	r3, r7, #16
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fe68 	bl	80054dc <xTaskCreate>
 800480c:	4603      	mov	r3, r0
 800480e:	2b01      	cmp	r3, #1
 8004810:	d001      	beq.n	8004816 <osThreadNew+0x11a>
            hTask = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004816:	693b      	ldr	r3, [r7, #16]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3728      	adds	r7, #40	@ 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004828:	f3ef 8305 	mrs	r3, IPSR
 800482c:	60bb      	str	r3, [r7, #8]
  return(result);
 800482e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <osDelay+0x1c>
    stat = osErrorISR;
 8004834:	f06f 0305 	mvn.w	r3, #5
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	e007      	b.n	800484c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 ff8e 	bl	8005768 <vTaskDelay>
    }
  }

  return (stat);
 800484c:	68fb      	ldr	r3, [r7, #12]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a07      	ldr	r2, [pc, #28]	@ (8004884 <vApplicationGetIdleTaskMemory+0x2c>)
 8004868:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4a06      	ldr	r2, [pc, #24]	@ (8004888 <vApplicationGetIdleTaskMemory+0x30>)
 800486e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2280      	movs	r2, #128	@ 0x80
 8004874:	601a      	str	r2, [r3, #0]
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20003168 	.word	0x20003168
 8004888:	200031c4 	.word	0x200031c4

0800488c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a07      	ldr	r2, [pc, #28]	@ (80048b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800489c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4a06      	ldr	r2, [pc, #24]	@ (80048bc <vApplicationGetTimerTaskMemory+0x30>)
 80048a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048aa:	601a      	str	r2, [r3, #0]
}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	200033c4 	.word	0x200033c4
 80048bc:	20003420 	.word	0x20003420

080048c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f103 0208 	add.w	r2, r3, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f103 0208 	add.w	r2, r3, #8
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f103 0208 	add.w	r2, r3, #8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	601a      	str	r2, [r3, #0]
}
 8004956:	bf00      	nop
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004978:	d103      	bne.n	8004982 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e00c      	b.n	800499c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3308      	adds	r3, #8
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e002      	b.n	8004990 <vListInsert+0x2e>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	429a      	cmp	r2, r3
 800499a:	d2f6      	bcs.n	800498a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	601a      	str	r2, [r3, #0]
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6892      	ldr	r2, [r2, #8]
 80049ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6852      	ldr	r2, [r2, #4]
 80049f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d103      	bne.n	8004a08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	1e5a      	subs	r2, r3, #1
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10b      	bne.n	8004a54 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a4e:	bf00      	nop
 8004a50:	bf00      	nop
 8004a52:	e7fd      	b.n	8004a50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a54:	f002 f878 	bl	8006b48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a60:	68f9      	ldr	r1, [r7, #12]
 8004a62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	441a      	add	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a84:	3b01      	subs	r3, #1
 8004a86:	68f9      	ldr	r1, [r7, #12]
 8004a88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a8a:	fb01 f303 	mul.w	r3, r1, r3
 8004a8e:	441a      	add	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	22ff      	movs	r2, #255	@ 0xff
 8004a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	22ff      	movs	r2, #255	@ 0xff
 8004aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d114      	bne.n	8004ad4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01a      	beq.n	8004ae8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3310      	adds	r3, #16
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 f91a 	bl	8005cf0 <xTaskRemoveFromEventList>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d012      	beq.n	8004ae8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8004af8 <xQueueGenericReset+0xd0>)
 8004ac4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	e009      	b.n	8004ae8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3310      	adds	r3, #16
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fef1 	bl	80048c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3324      	adds	r3, #36	@ 0x24
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff feec 	bl	80048c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ae8:	f002 f860 	bl	8006bac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004aec:	2301      	movs	r3, #1
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08e      	sub	sp, #56	@ 0x38
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10b      	bne.n	8004b28 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	e7fd      	b.n	8004b42 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <xQueueGenericCreateStatic+0x56>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <xQueueGenericCreateStatic+0x5a>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <xQueueGenericCreateStatic+0x5c>
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	623b      	str	r3, [r7, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
 8004b72:	e7fd      	b.n	8004b70 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d102      	bne.n	8004b80 <xQueueGenericCreateStatic+0x84>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <xQueueGenericCreateStatic+0x88>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <xQueueGenericCreateStatic+0x8a>
 8004b84:	2300      	movs	r3, #0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10b      	bne.n	8004ba2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	61fb      	str	r3, [r7, #28]
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	e7fd      	b.n	8004b9e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ba2:	2350      	movs	r3, #80	@ 0x50
 8004ba4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b50      	cmp	r3, #80	@ 0x50
 8004baa:	d00b      	beq.n	8004bc4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	61bb      	str	r3, [r7, #24]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bc4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00d      	beq.n	8004bec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bd8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f805 	bl	8004bf6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3730      	adds	r7, #48	@ 0x30
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
 8004c02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d103      	bne.n	8004c12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e002      	b.n	8004c18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c24:	2101      	movs	r1, #1
 8004c26:	69b8      	ldr	r0, [r7, #24]
 8004c28:	f7ff fefe 	bl	8004a28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08e      	sub	sp, #56	@ 0x38
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10b      	bne.n	8004c70 <xQueueGenericSend+0x34>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c6a:	bf00      	nop
 8004c6c:	bf00      	nop
 8004c6e:	e7fd      	b.n	8004c6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <xQueueGenericSend+0x42>
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <xQueueGenericSend+0x46>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <xQueueGenericSend+0x48>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10b      	bne.n	8004ca0 <xQueueGenericSend+0x64>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c9a:	bf00      	nop
 8004c9c:	bf00      	nop
 8004c9e:	e7fd      	b.n	8004c9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d103      	bne.n	8004cae <xQueueGenericSend+0x72>
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <xQueueGenericSend+0x76>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xQueueGenericSend+0x78>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <xQueueGenericSend+0x94>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	623b      	str	r3, [r7, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cd0:	f001 f9ce 	bl	8006070 <xTaskGetSchedulerState>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <xQueueGenericSend+0xa4>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <xQueueGenericSend+0xa8>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <xQueueGenericSend+0xaa>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10b      	bne.n	8004d02 <xQueueGenericSend+0xc6>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	61fb      	str	r3, [r7, #28]
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	e7fd      	b.n	8004cfe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d02:	f001 ff21 	bl	8006b48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d302      	bcc.n	8004d18 <xQueueGenericSend+0xdc>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d129      	bne.n	8004d6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d1e:	f000 fa0f 	bl	8005140 <prvCopyDataToQueue>
 8004d22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d010      	beq.n	8004d4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2e:	3324      	adds	r3, #36	@ 0x24
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 ffdd 	bl	8005cf0 <xTaskRemoveFromEventList>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e3c <xQueueGenericSend+0x200>)
 8004d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	e00a      	b.n	8004d64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d54:	4b39      	ldr	r3, [pc, #228]	@ (8004e3c <xQueueGenericSend+0x200>)
 8004d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d64:	f001 ff22 	bl	8006bac <vPortExitCritical>
				return pdPASS;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e063      	b.n	8004e34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d103      	bne.n	8004d7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d72:	f001 ff1b 	bl	8006bac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	e05c      	b.n	8004e34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d80:	f107 0314 	add.w	r3, r7, #20
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 f817 	bl	8005db8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d8e:	f001 ff0d 	bl	8006bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d92:	f000 fd87 	bl	80058a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d96:	f001 fed7 	bl	8006b48 <vPortEnterCritical>
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004da0:	b25b      	sxtb	r3, r3
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004da6:	d103      	bne.n	8004db0 <xQueueGenericSend+0x174>
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004db6:	b25b      	sxtb	r3, r3
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dbc:	d103      	bne.n	8004dc6 <xQueueGenericSend+0x18a>
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dc6:	f001 fef1 	bl	8006bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dca:	1d3a      	adds	r2, r7, #4
 8004dcc:	f107 0314 	add.w	r3, r7, #20
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 f806 	bl	8005de4 <xTaskCheckForTimeOut>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d124      	bne.n	8004e28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004de0:	f000 faa6 	bl	8005330 <prvIsQueueFull>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d018      	beq.n	8004e1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	3310      	adds	r3, #16
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 ff2a 	bl	8005c4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004df8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dfa:	f000 fa31 	bl	8005260 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dfe:	f000 fd5f 	bl	80058c0 <xTaskResumeAll>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f47f af7c 	bne.w	8004d02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e3c <xQueueGenericSend+0x200>)
 8004e0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	e772      	b.n	8004d02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e1e:	f000 fa1f 	bl	8005260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e22:	f000 fd4d 	bl	80058c0 <xTaskResumeAll>
 8004e26:	e76c      	b.n	8004d02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e2a:	f000 fa19 	bl	8005260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e2e:	f000 fd47 	bl	80058c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3738      	adds	r7, #56	@ 0x38
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	e000ed04 	.word	0xe000ed04

08004e40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b090      	sub	sp, #64	@ 0x40
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e6a:	bf00      	nop
 8004e6c:	bf00      	nop
 8004e6e:	e7fd      	b.n	8004e6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <xQueueGenericSendFromISR+0x3e>
 8004e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <xQueueGenericSendFromISR+0x42>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <xQueueGenericSendFromISR+0x44>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10b      	bne.n	8004ea0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e9a:	bf00      	nop
 8004e9c:	bf00      	nop
 8004e9e:	e7fd      	b.n	8004e9c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d103      	bne.n	8004eae <xQueueGenericSendFromISR+0x6e>
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <xQueueGenericSendFromISR+0x72>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <xQueueGenericSendFromISR+0x74>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10b      	bne.n	8004ed0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	623b      	str	r3, [r7, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	e7fd      	b.n	8004ecc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ed0:	f001 ff1a 	bl	8006d08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ed4:	f3ef 8211 	mrs	r2, BASEPRI
 8004ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	61fa      	str	r2, [r7, #28]
 8004eea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004eec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004eee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d302      	bcc.n	8004f02 <xQueueGenericSendFromISR+0xc2>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d12f      	bne.n	8004f62 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f18:	f000 f912 	bl	8005140 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f1c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f24:	d112      	bne.n	8004f4c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d016      	beq.n	8004f5c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f30:	3324      	adds	r3, #36	@ 0x24
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fedc 	bl	8005cf0 <xTaskRemoveFromEventList>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	e007      	b.n	8004f5c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f50:	3301      	adds	r3, #1
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	b25a      	sxtb	r2, r3
 8004f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004f60:	e001      	b.n	8004f66 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f68:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3740      	adds	r7, #64	@ 0x40
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08c      	sub	sp, #48	@ 0x30
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <xQueueReceive+0x32>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	623b      	str	r3, [r7, #32]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d103      	bne.n	8004fbc <xQueueReceive+0x40>
 8004fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <xQueueReceive+0x44>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <xQueueReceive+0x46>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10b      	bne.n	8004fde <xQueueReceive+0x62>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	61fb      	str	r3, [r7, #28]
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	e7fd      	b.n	8004fda <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fde:	f001 f847 	bl	8006070 <xTaskGetSchedulerState>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <xQueueReceive+0x72>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <xQueueReceive+0x76>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <xQueueReceive+0x78>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10b      	bne.n	8005010 <xQueueReceive+0x94>
	__asm volatile
 8004ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	61bb      	str	r3, [r7, #24]
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	e7fd      	b.n	800500c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005010:	f001 fd9a 	bl	8006b48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01f      	beq.n	8005060 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005024:	f000 f8f6 	bl	8005214 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	1e5a      	subs	r2, r3, #1
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00f      	beq.n	8005058 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503a:	3310      	adds	r3, #16
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fe57 	bl	8005cf0 <xTaskRemoveFromEventList>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005048:	4b3c      	ldr	r3, [pc, #240]	@ (800513c <xQueueReceive+0x1c0>)
 800504a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005058:	f001 fda8 	bl	8006bac <vPortExitCritical>
				return pdPASS;
 800505c:	2301      	movs	r3, #1
 800505e:	e069      	b.n	8005134 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005066:	f001 fda1 	bl	8006bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800506a:	2300      	movs	r3, #0
 800506c:	e062      	b.n	8005134 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800506e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005074:	f107 0310 	add.w	r3, r7, #16
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fe9d 	bl	8005db8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800507e:	2301      	movs	r3, #1
 8005080:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005082:	f001 fd93 	bl	8006bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005086:	f000 fc0d 	bl	80058a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800508a:	f001 fd5d 	bl	8006b48 <vPortEnterCritical>
 800508e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005090:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005094:	b25b      	sxtb	r3, r3
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800509a:	d103      	bne.n	80050a4 <xQueueReceive+0x128>
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050aa:	b25b      	sxtb	r3, r3
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050b0:	d103      	bne.n	80050ba <xQueueReceive+0x13e>
 80050b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050ba:	f001 fd77 	bl	8006bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050be:	1d3a      	adds	r2, r7, #4
 80050c0:	f107 0310 	add.w	r3, r7, #16
 80050c4:	4611      	mov	r1, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fe8c 	bl	8005de4 <xTaskCheckForTimeOut>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d123      	bne.n	800511a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050d4:	f000 f916 	bl	8005304 <prvIsQueueEmpty>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d017      	beq.n	800510e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e0:	3324      	adds	r3, #36	@ 0x24
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4611      	mov	r1, r2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fdb0 	bl	8005c4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050ee:	f000 f8b7 	bl	8005260 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050f2:	f000 fbe5 	bl	80058c0 <xTaskResumeAll>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d189      	bne.n	8005010 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80050fc:	4b0f      	ldr	r3, [pc, #60]	@ (800513c <xQueueReceive+0x1c0>)
 80050fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	e780      	b.n	8005010 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800510e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005110:	f000 f8a6 	bl	8005260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005114:	f000 fbd4 	bl	80058c0 <xTaskResumeAll>
 8005118:	e77a      	b.n	8005010 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800511a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800511c:	f000 f8a0 	bl	8005260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005120:	f000 fbce 	bl	80058c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005124:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005126:	f000 f8ed 	bl	8005304 <prvIsQueueEmpty>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	f43f af6f 	beq.w	8005010 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005132:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005134:	4618      	mov	r0, r3
 8005136:	3730      	adds	r7, #48	@ 0x30
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	e000ed04 	.word	0xe000ed04

08005140 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005154:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10d      	bne.n	800517a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d14d      	bne.n	8005202 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 ff9e 	bl	80060ac <xTaskPriorityDisinherit>
 8005170:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	e043      	b.n	8005202 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d119      	bne.n	80051b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6858      	ldr	r0, [r3, #4]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005188:	461a      	mov	r2, r3
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	f002 f818 	bl	80071c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	441a      	add	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d32b      	bcc.n	8005202 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	e026      	b.n	8005202 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68d8      	ldr	r0, [r3, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	461a      	mov	r2, r3
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	f001 fffe 	bl	80071c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	425b      	negs	r3, r3
 80051ce:	441a      	add	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d207      	bcs.n	80051f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	425b      	negs	r3, r3
 80051ea:	441a      	add	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d105      	bne.n	8005202 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	3b01      	subs	r3, #1
 8005200:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800520a:	697b      	ldr	r3, [r7, #20]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d018      	beq.n	8005258 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	441a      	add	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	429a      	cmp	r2, r3
 800523e:	d303      	bcc.n	8005248 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68d9      	ldr	r1, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	461a      	mov	r2, r3
 8005252:	6838      	ldr	r0, [r7, #0]
 8005254:	f001 ffb4 	bl	80071c0 <memcpy>
	}
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005268:	f001 fc6e 	bl	8006b48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005272:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005274:	e011      	b.n	800529a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d012      	beq.n	80052a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3324      	adds	r3, #36	@ 0x24
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fd34 	bl	8005cf0 <xTaskRemoveFromEventList>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800528e:	f000 fe0d 	bl	8005eac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	3b01      	subs	r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800529a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	dce9      	bgt.n	8005276 <prvUnlockQueue+0x16>
 80052a2:	e000      	b.n	80052a6 <prvUnlockQueue+0x46>
					break;
 80052a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	22ff      	movs	r2, #255	@ 0xff
 80052aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80052ae:	f001 fc7d 	bl	8006bac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052b2:	f001 fc49 	bl	8006b48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052be:	e011      	b.n	80052e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d012      	beq.n	80052ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3310      	adds	r3, #16
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fd0f 	bl	8005cf0 <xTaskRemoveFromEventList>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052d8:	f000 fde8 	bl	8005eac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	3b01      	subs	r3, #1
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	dce9      	bgt.n	80052c0 <prvUnlockQueue+0x60>
 80052ec:	e000      	b.n	80052f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	22ff      	movs	r2, #255	@ 0xff
 80052f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80052f8:	f001 fc58 	bl	8006bac <vPortExitCritical>
}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800530c:	f001 fc1c 	bl	8006b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	2b00      	cmp	r3, #0
 8005316:	d102      	bne.n	800531e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005318:	2301      	movs	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	e001      	b.n	8005322 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005322:	f001 fc43 	bl	8006bac <vPortExitCritical>

	return xReturn;
 8005326:	68fb      	ldr	r3, [r7, #12]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005338:	f001 fc06 	bl	8006b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005344:	429a      	cmp	r2, r3
 8005346:	d102      	bne.n	800534e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	e001      	b.n	8005352 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005352:	f001 fc2b 	bl	8006bac <vPortExitCritical>

	return xReturn;
 8005356:	68fb      	ldr	r3, [r7, #12]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e014      	b.n	800539a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005370:	4a0f      	ldr	r2, [pc, #60]	@ (80053b0 <vQueueAddToRegistry+0x50>)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10b      	bne.n	8005394 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800537c:	490c      	ldr	r1, [pc, #48]	@ (80053b0 <vQueueAddToRegistry+0x50>)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005386:	4a0a      	ldr	r2, [pc, #40]	@ (80053b0 <vQueueAddToRegistry+0x50>)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005392:	e006      	b.n	80053a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3301      	adds	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b07      	cmp	r3, #7
 800539e:	d9e7      	bls.n	8005370 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20003820 	.word	0x20003820

080053b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053c4:	f001 fbc0 	bl	8006b48 <vPortEnterCritical>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053ce:	b25b      	sxtb	r3, r3
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053d4:	d103      	bne.n	80053de <vQueueWaitForMessageRestricted+0x2a>
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053ea:	d103      	bne.n	80053f4 <vQueueWaitForMessageRestricted+0x40>
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053f4:	f001 fbda 	bl	8006bac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d106      	bne.n	800540e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	3324      	adds	r3, #36	@ 0x24
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fc45 	bl	8005c98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800540e:	6978      	ldr	r0, [r7, #20]
 8005410:	f7ff ff26 	bl	8005260 <prvUnlockQueue>
	}
 8005414:	bf00      	nop
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08e      	sub	sp, #56	@ 0x38
 8005420:	af04      	add	r7, sp, #16
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800542a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	623b      	str	r3, [r7, #32]
}
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	e7fd      	b.n	8005444 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10b      	bne.n	8005466 <xTaskCreateStatic+0x4a>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	61fb      	str	r3, [r7, #28]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005466:	235c      	movs	r3, #92	@ 0x5c
 8005468:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b5c      	cmp	r3, #92	@ 0x5c
 800546e:	d00b      	beq.n	8005488 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	61bb      	str	r3, [r7, #24]
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	e7fd      	b.n	8005484 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005488:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01e      	beq.n	80054ce <xTaskCreateStatic+0xb2>
 8005490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01b      	beq.n	80054ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800549e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054a8:	2300      	movs	r3, #0
 80054aa:	9303      	str	r3, [sp, #12]
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	9302      	str	r3, [sp, #8]
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f850 	bl	8005566 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054c8:	f000 f8de 	bl	8005688 <prvAddNewTaskToReadyList>
 80054cc:	e001      	b.n	80054d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054d2:	697b      	ldr	r3, [r7, #20]
	}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3728      	adds	r7, #40	@ 0x28
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08c      	sub	sp, #48	@ 0x30
 80054e0:	af04      	add	r7, sp, #16
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	4613      	mov	r3, r2
 80054ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 fc4b 	bl	8006d8c <pvPortMalloc>
 80054f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00e      	beq.n	800551c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054fe:	205c      	movs	r0, #92	@ 0x5c
 8005500:	f001 fc44 	bl	8006d8c <pvPortMalloc>
 8005504:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	631a      	str	r2, [r3, #48]	@ 0x30
 8005512:	e005      	b.n	8005520 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005514:	6978      	ldr	r0, [r7, #20]
 8005516:	f001 fd07 	bl	8006f28 <vPortFree>
 800551a:	e001      	b.n	8005520 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800551c:	2300      	movs	r3, #0
 800551e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d017      	beq.n	8005556 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	2300      	movs	r3, #0
 8005532:	9303      	str	r3, [sp, #12]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	9302      	str	r3, [sp, #8]
 8005538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553a:	9301      	str	r3, [sp, #4]
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f80e 	bl	8005566 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800554a:	69f8      	ldr	r0, [r7, #28]
 800554c:	f000 f89c 	bl	8005688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005550:	2301      	movs	r3, #1
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	e002      	b.n	800555c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800555a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800555c:	69bb      	ldr	r3, [r7, #24]
	}
 800555e:	4618      	mov	r0, r3
 8005560:	3720      	adds	r7, #32
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b088      	sub	sp, #32
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	461a      	mov	r2, r3
 800557e:	21a5      	movs	r1, #165	@ 0xa5
 8005580:	f001 fdf2 	bl	8007168 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800558e:	3b01      	subs	r3, #1
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	f023 0307 	bic.w	r3, r3, #7
 800559c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00b      	beq.n	80055c0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	617b      	str	r3, [r7, #20]
}
 80055ba:	bf00      	nop
 80055bc:	bf00      	nop
 80055be:	e7fd      	b.n	80055bc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01f      	beq.n	8005606 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	e012      	b.n	80055f2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	7819      	ldrb	r1, [r3, #0]
 80055d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	3334      	adds	r3, #52	@ 0x34
 80055dc:	460a      	mov	r2, r1
 80055de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d006      	beq.n	80055fa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	3301      	adds	r3, #1
 80055f0:	61fb      	str	r3, [r7, #28]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	2b0f      	cmp	r3, #15
 80055f6:	d9e9      	bls.n	80055cc <prvInitialiseNewTask+0x66>
 80055f8:	e000      	b.n	80055fc <prvInitialiseNewTask+0x96>
			{
				break;
 80055fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005604:	e003      	b.n	800560e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	2b37      	cmp	r3, #55	@ 0x37
 8005612:	d901      	bls.n	8005618 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005614:	2337      	movs	r3, #55	@ 0x37
 8005616:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800561c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800561e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005622:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005626:	2200      	movs	r2, #0
 8005628:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	3304      	adds	r3, #4
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff f966 	bl	8004900 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	3318      	adds	r3, #24
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff f961 	bl	8004900 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005642:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005652:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	2200      	movs	r2, #0
 8005658:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	68f9      	ldr	r1, [r7, #12]
 8005666:	69b8      	ldr	r0, [r7, #24]
 8005668:	f001 f93e 	bl	80068e8 <pxPortInitialiseStack>
 800566c:	4602      	mov	r2, r0
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800567c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800567e:	bf00      	nop
 8005680:	3720      	adds	r7, #32
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005690:	f001 fa5a 	bl	8006b48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005694:	4b2d      	ldr	r3, [pc, #180]	@ (800574c <prvAddNewTaskToReadyList+0xc4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	4a2c      	ldr	r2, [pc, #176]	@ (800574c <prvAddNewTaskToReadyList+0xc4>)
 800569c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800569e:	4b2c      	ldr	r3, [pc, #176]	@ (8005750 <prvAddNewTaskToReadyList+0xc8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005750 <prvAddNewTaskToReadyList+0xc8>)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056ac:	4b27      	ldr	r3, [pc, #156]	@ (800574c <prvAddNewTaskToReadyList+0xc4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d110      	bne.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056b4:	f000 fc1e 	bl	8005ef4 <prvInitialiseTaskLists>
 80056b8:	e00d      	b.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056ba:	4b26      	ldr	r3, [pc, #152]	@ (8005754 <prvAddNewTaskToReadyList+0xcc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056c2:	4b23      	ldr	r3, [pc, #140]	@ (8005750 <prvAddNewTaskToReadyList+0xc8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d802      	bhi.n	80056d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005750 <prvAddNewTaskToReadyList+0xc8>)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056d6:	4b20      	ldr	r3, [pc, #128]	@ (8005758 <prvAddNewTaskToReadyList+0xd0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005758 <prvAddNewTaskToReadyList+0xd0>)
 80056de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005758 <prvAddNewTaskToReadyList+0xd0>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ec:	4b1b      	ldr	r3, [pc, #108]	@ (800575c <prvAddNewTaskToReadyList+0xd4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d903      	bls.n	80056fc <prvAddNewTaskToReadyList+0x74>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	4a18      	ldr	r2, [pc, #96]	@ (800575c <prvAddNewTaskToReadyList+0xd4>)
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005700:	4613      	mov	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4a15      	ldr	r2, [pc, #84]	@ (8005760 <prvAddNewTaskToReadyList+0xd8>)
 800570a:	441a      	add	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3304      	adds	r3, #4
 8005710:	4619      	mov	r1, r3
 8005712:	4610      	mov	r0, r2
 8005714:	f7ff f901 	bl	800491a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005718:	f001 fa48 	bl	8006bac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800571c:	4b0d      	ldr	r3, [pc, #52]	@ (8005754 <prvAddNewTaskToReadyList+0xcc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00e      	beq.n	8005742 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005724:	4b0a      	ldr	r3, [pc, #40]	@ (8005750 <prvAddNewTaskToReadyList+0xc8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572e:	429a      	cmp	r2, r3
 8005730:	d207      	bcs.n	8005742 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005732:	4b0c      	ldr	r3, [pc, #48]	@ (8005764 <prvAddNewTaskToReadyList+0xdc>)
 8005734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20003d34 	.word	0x20003d34
 8005750:	20003860 	.word	0x20003860
 8005754:	20003d40 	.word	0x20003d40
 8005758:	20003d50 	.word	0x20003d50
 800575c:	20003d3c 	.word	0x20003d3c
 8005760:	20003864 	.word	0x20003864
 8005764:	e000ed04 	.word	0xe000ed04

08005768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d018      	beq.n	80057ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800577a:	4b14      	ldr	r3, [pc, #80]	@ (80057cc <vTaskDelay+0x64>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <vTaskDelay+0x32>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	60bb      	str	r3, [r7, #8]
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop
 8005798:	e7fd      	b.n	8005796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800579a:	f000 f883 	bl	80058a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800579e:	2100      	movs	r1, #0
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fcf3 	bl	800618c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057a6:	f000 f88b 	bl	80058c0 <xTaskResumeAll>
 80057aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d107      	bne.n	80057c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80057b2:	4b07      	ldr	r3, [pc, #28]	@ (80057d0 <vTaskDelay+0x68>)
 80057b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057c2:	bf00      	nop
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20003d5c 	.word	0x20003d5c
 80057d0:	e000ed04 	.word	0xe000ed04

080057d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	@ 0x28
 80057d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057e2:	463a      	mov	r2, r7
 80057e4:	1d39      	adds	r1, r7, #4
 80057e6:	f107 0308 	add.w	r3, r7, #8
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff f834 	bl	8004858 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	9202      	str	r2, [sp, #8]
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	2300      	movs	r3, #0
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	2300      	movs	r3, #0
 8005800:	460a      	mov	r2, r1
 8005802:	4922      	ldr	r1, [pc, #136]	@ (800588c <vTaskStartScheduler+0xb8>)
 8005804:	4822      	ldr	r0, [pc, #136]	@ (8005890 <vTaskStartScheduler+0xbc>)
 8005806:	f7ff fe09 	bl	800541c <xTaskCreateStatic>
 800580a:	4603      	mov	r3, r0
 800580c:	4a21      	ldr	r2, [pc, #132]	@ (8005894 <vTaskStartScheduler+0xc0>)
 800580e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005810:	4b20      	ldr	r3, [pc, #128]	@ (8005894 <vTaskStartScheduler+0xc0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005818:	2301      	movs	r3, #1
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e001      	b.n	8005822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d102      	bne.n	800582e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005828:	f000 fd04 	bl	8006234 <xTimerCreateTimerTask>
 800582c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d116      	bne.n	8005862 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	613b      	str	r3, [r7, #16]
}
 8005846:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005848:	4b13      	ldr	r3, [pc, #76]	@ (8005898 <vTaskStartScheduler+0xc4>)
 800584a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800584e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005850:	4b12      	ldr	r3, [pc, #72]	@ (800589c <vTaskStartScheduler+0xc8>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005856:	4b12      	ldr	r3, [pc, #72]	@ (80058a0 <vTaskStartScheduler+0xcc>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800585c:	f001 f8d0 	bl	8006a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005860:	e00f      	b.n	8005882 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005868:	d10b      	bne.n	8005882 <vTaskStartScheduler+0xae>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	60fb      	str	r3, [r7, #12]
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <vTaskStartScheduler+0xaa>
}
 8005882:	bf00      	nop
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	08007200 	.word	0x08007200
 8005890:	08005ec5 	.word	0x08005ec5
 8005894:	20003d58 	.word	0x20003d58
 8005898:	20003d54 	.word	0x20003d54
 800589c:	20003d40 	.word	0x20003d40
 80058a0:	20003d38 	.word	0x20003d38

080058a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058a8:	4b04      	ldr	r3, [pc, #16]	@ (80058bc <vTaskSuspendAll+0x18>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3301      	adds	r3, #1
 80058ae:	4a03      	ldr	r2, [pc, #12]	@ (80058bc <vTaskSuspendAll+0x18>)
 80058b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058b2:	bf00      	nop
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	20003d5c 	.word	0x20003d5c

080058c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058ce:	4b42      	ldr	r3, [pc, #264]	@ (80059d8 <xTaskResumeAll+0x118>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <xTaskResumeAll+0x2e>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	603b      	str	r3, [r7, #0]
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	e7fd      	b.n	80058ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058ee:	f001 f92b 	bl	8006b48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058f2:	4b39      	ldr	r3, [pc, #228]	@ (80059d8 <xTaskResumeAll+0x118>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	4a37      	ldr	r2, [pc, #220]	@ (80059d8 <xTaskResumeAll+0x118>)
 80058fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058fc:	4b36      	ldr	r3, [pc, #216]	@ (80059d8 <xTaskResumeAll+0x118>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d162      	bne.n	80059ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005904:	4b35      	ldr	r3, [pc, #212]	@ (80059dc <xTaskResumeAll+0x11c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d05e      	beq.n	80059ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800590c:	e02f      	b.n	800596e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800590e:	4b34      	ldr	r3, [pc, #208]	@ (80059e0 <xTaskResumeAll+0x120>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3318      	adds	r3, #24
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff f85a 	bl	80049d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3304      	adds	r3, #4
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff f855 	bl	80049d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800592e:	4b2d      	ldr	r3, [pc, #180]	@ (80059e4 <xTaskResumeAll+0x124>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d903      	bls.n	800593e <xTaskResumeAll+0x7e>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593a:	4a2a      	ldr	r2, [pc, #168]	@ (80059e4 <xTaskResumeAll+0x124>)
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4a27      	ldr	r2, [pc, #156]	@ (80059e8 <xTaskResumeAll+0x128>)
 800594c:	441a      	add	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3304      	adds	r3, #4
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f7fe ffe0 	bl	800491a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595e:	4b23      	ldr	r3, [pc, #140]	@ (80059ec <xTaskResumeAll+0x12c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	429a      	cmp	r2, r3
 8005966:	d302      	bcc.n	800596e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005968:	4b21      	ldr	r3, [pc, #132]	@ (80059f0 <xTaskResumeAll+0x130>)
 800596a:	2201      	movs	r2, #1
 800596c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800596e:	4b1c      	ldr	r3, [pc, #112]	@ (80059e0 <xTaskResumeAll+0x120>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1cb      	bne.n	800590e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800597c:	f000 fb58 	bl	8006030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005980:	4b1c      	ldr	r3, [pc, #112]	@ (80059f4 <xTaskResumeAll+0x134>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d010      	beq.n	80059ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800598c:	f000 f846 	bl	8005a1c <xTaskIncrementTick>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005996:	4b16      	ldr	r3, [pc, #88]	@ (80059f0 <xTaskResumeAll+0x130>)
 8005998:	2201      	movs	r2, #1
 800599a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3b01      	subs	r3, #1
 80059a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f1      	bne.n	800598c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80059a8:	4b12      	ldr	r3, [pc, #72]	@ (80059f4 <xTaskResumeAll+0x134>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059ae:	4b10      	ldr	r3, [pc, #64]	@ (80059f0 <xTaskResumeAll+0x130>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059b6:	2301      	movs	r3, #1
 80059b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059ba:	4b0f      	ldr	r3, [pc, #60]	@ (80059f8 <xTaskResumeAll+0x138>)
 80059bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059ca:	f001 f8ef 	bl	8006bac <vPortExitCritical>

	return xAlreadyYielded;
 80059ce:	68bb      	ldr	r3, [r7, #8]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20003d5c 	.word	0x20003d5c
 80059dc:	20003d34 	.word	0x20003d34
 80059e0:	20003cf4 	.word	0x20003cf4
 80059e4:	20003d3c 	.word	0x20003d3c
 80059e8:	20003864 	.word	0x20003864
 80059ec:	20003860 	.word	0x20003860
 80059f0:	20003d48 	.word	0x20003d48
 80059f4:	20003d44 	.word	0x20003d44
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a02:	4b05      	ldr	r3, [pc, #20]	@ (8005a18 <xTaskGetTickCount+0x1c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a08:	687b      	ldr	r3, [r7, #4]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	20003d38 	.word	0x20003d38

08005a1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a26:	4b4f      	ldr	r3, [pc, #316]	@ (8005b64 <xTaskIncrementTick+0x148>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f040 8090 	bne.w	8005b50 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a30:	4b4d      	ldr	r3, [pc, #308]	@ (8005b68 <xTaskIncrementTick+0x14c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3301      	adds	r3, #1
 8005a36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a38:	4a4b      	ldr	r2, [pc, #300]	@ (8005b68 <xTaskIncrementTick+0x14c>)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d121      	bne.n	8005a88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a44:	4b49      	ldr	r3, [pc, #292]	@ (8005b6c <xTaskIncrementTick+0x150>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	603b      	str	r3, [r7, #0]
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	e7fd      	b.n	8005a62 <xTaskIncrementTick+0x46>
 8005a66:	4b41      	ldr	r3, [pc, #260]	@ (8005b6c <xTaskIncrementTick+0x150>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	4b40      	ldr	r3, [pc, #256]	@ (8005b70 <xTaskIncrementTick+0x154>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a3e      	ldr	r2, [pc, #248]	@ (8005b6c <xTaskIncrementTick+0x150>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	4a3e      	ldr	r2, [pc, #248]	@ (8005b70 <xTaskIncrementTick+0x154>)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b74 <xTaskIncrementTick+0x158>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	4a3c      	ldr	r2, [pc, #240]	@ (8005b74 <xTaskIncrementTick+0x158>)
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	f000 fad4 	bl	8006030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a88:	4b3b      	ldr	r3, [pc, #236]	@ (8005b78 <xTaskIncrementTick+0x15c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d349      	bcc.n	8005b26 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a92:	4b36      	ldr	r3, [pc, #216]	@ (8005b6c <xTaskIncrementTick+0x150>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a9c:	4b36      	ldr	r3, [pc, #216]	@ (8005b78 <xTaskIncrementTick+0x15c>)
 8005a9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005aa2:	601a      	str	r2, [r3, #0]
					break;
 8005aa4:	e03f      	b.n	8005b26 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa6:	4b31      	ldr	r3, [pc, #196]	@ (8005b6c <xTaskIncrementTick+0x150>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d203      	bcs.n	8005ac6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005abe:	4a2e      	ldr	r2, [pc, #184]	@ (8005b78 <xTaskIncrementTick+0x15c>)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ac4:	e02f      	b.n	8005b26 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe ff82 	bl	80049d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	3318      	adds	r3, #24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fe ff79 	bl	80049d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae6:	4b25      	ldr	r3, [pc, #148]	@ (8005b7c <xTaskIncrementTick+0x160>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d903      	bls.n	8005af6 <xTaskIncrementTick+0xda>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af2:	4a22      	ldr	r2, [pc, #136]	@ (8005b7c <xTaskIncrementTick+0x160>)
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4a1f      	ldr	r2, [pc, #124]	@ (8005b80 <xTaskIncrementTick+0x164>)
 8005b04:	441a      	add	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f7fe ff04 	bl	800491a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b16:	4b1b      	ldr	r3, [pc, #108]	@ (8005b84 <xTaskIncrementTick+0x168>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d3b8      	bcc.n	8005a92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b20:	2301      	movs	r3, #1
 8005b22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b24:	e7b5      	b.n	8005a92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b26:	4b17      	ldr	r3, [pc, #92]	@ (8005b84 <xTaskIncrementTick+0x168>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2c:	4914      	ldr	r1, [pc, #80]	@ (8005b80 <xTaskIncrementTick+0x164>)
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d901      	bls.n	8005b42 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b42:	4b11      	ldr	r3, [pc, #68]	@ (8005b88 <xTaskIncrementTick+0x16c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	e004      	b.n	8005b5a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b50:	4b0e      	ldr	r3, [pc, #56]	@ (8005b8c <xTaskIncrementTick+0x170>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3301      	adds	r3, #1
 8005b56:	4a0d      	ldr	r2, [pc, #52]	@ (8005b8c <xTaskIncrementTick+0x170>)
 8005b58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b5a:	697b      	ldr	r3, [r7, #20]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20003d5c 	.word	0x20003d5c
 8005b68:	20003d38 	.word	0x20003d38
 8005b6c:	20003cec 	.word	0x20003cec
 8005b70:	20003cf0 	.word	0x20003cf0
 8005b74:	20003d4c 	.word	0x20003d4c
 8005b78:	20003d54 	.word	0x20003d54
 8005b7c:	20003d3c 	.word	0x20003d3c
 8005b80:	20003864 	.word	0x20003864
 8005b84:	20003860 	.word	0x20003860
 8005b88:	20003d48 	.word	0x20003d48
 8005b8c:	20003d44 	.word	0x20003d44

08005b90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b96:	4b28      	ldr	r3, [pc, #160]	@ (8005c38 <vTaskSwitchContext+0xa8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b9e:	4b27      	ldr	r3, [pc, #156]	@ (8005c3c <vTaskSwitchContext+0xac>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ba4:	e042      	b.n	8005c2c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005ba6:	4b25      	ldr	r3, [pc, #148]	@ (8005c3c <vTaskSwitchContext+0xac>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bac:	4b24      	ldr	r3, [pc, #144]	@ (8005c40 <vTaskSwitchContext+0xb0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e011      	b.n	8005bd8 <vTaskSwitchContext+0x48>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10b      	bne.n	8005bd2 <vTaskSwitchContext+0x42>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	607b      	str	r3, [r7, #4]
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	e7fd      	b.n	8005bce <vTaskSwitchContext+0x3e>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	491a      	ldr	r1, [pc, #104]	@ (8005c44 <vTaskSwitchContext+0xb4>)
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0e3      	beq.n	8005bb4 <vTaskSwitchContext+0x24>
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4a13      	ldr	r2, [pc, #76]	@ (8005c44 <vTaskSwitchContext+0xb4>)
 8005bf8:	4413      	add	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d104      	bne.n	8005c1c <vTaskSwitchContext+0x8c>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	605a      	str	r2, [r3, #4]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	4a09      	ldr	r2, [pc, #36]	@ (8005c48 <vTaskSwitchContext+0xb8>)
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	4a06      	ldr	r2, [pc, #24]	@ (8005c40 <vTaskSwitchContext+0xb0>)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6013      	str	r3, [r2, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	20003d5c 	.word	0x20003d5c
 8005c3c:	20003d48 	.word	0x20003d48
 8005c40:	20003d3c 	.word	0x20003d3c
 8005c44:	20003864 	.word	0x20003864
 8005c48:	20003860 	.word	0x20003860

08005c4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60fb      	str	r3, [r7, #12]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c74:	4b07      	ldr	r3, [pc, #28]	@ (8005c94 <vTaskPlaceOnEventList+0x48>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3318      	adds	r3, #24
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fe fe70 	bl	8004962 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c82:	2101      	movs	r1, #1
 8005c84:	6838      	ldr	r0, [r7, #0]
 8005c86:	f000 fa81 	bl	800618c <prvAddCurrentTaskToDelayedList>
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20003860 	.word	0x20003860

08005c98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	617b      	str	r3, [r7, #20]
}
 8005cbc:	bf00      	nop
 8005cbe:	bf00      	nop
 8005cc0:	e7fd      	b.n	8005cbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005cec <vTaskPlaceOnEventListRestricted+0x54>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3318      	adds	r3, #24
 8005cc8:	4619      	mov	r1, r3
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7fe fe25 	bl	800491a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005cda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	68b8      	ldr	r0, [r7, #8]
 8005ce0:	f000 fa54 	bl	800618c <prvAddCurrentTaskToDelayedList>
	}
 8005ce4:	bf00      	nop
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20003860 	.word	0x20003860

08005cf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10b      	bne.n	8005d1e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	60fb      	str	r3, [r7, #12]
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	e7fd      	b.n	8005d1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	3318      	adds	r3, #24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fe56 	bl	80049d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d28:	4b1d      	ldr	r3, [pc, #116]	@ (8005da0 <xTaskRemoveFromEventList+0xb0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d11d      	bne.n	8005d6c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fe fe4d 	bl	80049d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3e:	4b19      	ldr	r3, [pc, #100]	@ (8005da4 <xTaskRemoveFromEventList+0xb4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d903      	bls.n	8005d4e <xTaskRemoveFromEventList+0x5e>
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4a:	4a16      	ldr	r2, [pc, #88]	@ (8005da4 <xTaskRemoveFromEventList+0xb4>)
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4a13      	ldr	r2, [pc, #76]	@ (8005da8 <xTaskRemoveFromEventList+0xb8>)
 8005d5c:	441a      	add	r2, r3
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4619      	mov	r1, r3
 8005d64:	4610      	mov	r0, r2
 8005d66:	f7fe fdd8 	bl	800491a <vListInsertEnd>
 8005d6a:	e005      	b.n	8005d78 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	3318      	adds	r3, #24
 8005d70:	4619      	mov	r1, r3
 8005d72:	480e      	ldr	r0, [pc, #56]	@ (8005dac <xTaskRemoveFromEventList+0xbc>)
 8005d74:	f7fe fdd1 	bl	800491a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005db0 <xTaskRemoveFromEventList+0xc0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d905      	bls.n	8005d92 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d86:	2301      	movs	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005db4 <xTaskRemoveFromEventList+0xc4>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e001      	b.n	8005d96 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d96:	697b      	ldr	r3, [r7, #20]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20003d5c 	.word	0x20003d5c
 8005da4:	20003d3c 	.word	0x20003d3c
 8005da8:	20003864 	.word	0x20003864
 8005dac:	20003cf4 	.word	0x20003cf4
 8005db0:	20003860 	.word	0x20003860
 8005db4:	20003d48 	.word	0x20003d48

08005db8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005dc0:	4b06      	ldr	r3, [pc, #24]	@ (8005ddc <vTaskInternalSetTimeOutState+0x24>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005dc8:	4b05      	ldr	r3, [pc, #20]	@ (8005de0 <vTaskInternalSetTimeOutState+0x28>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	605a      	str	r2, [r3, #4]
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	20003d4c 	.word	0x20003d4c
 8005de0:	20003d38 	.word	0x20003d38

08005de4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10b      	bne.n	8005e0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	613b      	str	r3, [r7, #16]
}
 8005e06:	bf00      	nop
 8005e08:	bf00      	nop
 8005e0a:	e7fd      	b.n	8005e08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10b      	bne.n	8005e2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60fb      	str	r3, [r7, #12]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005e2a:	f000 fe8d 	bl	8006b48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea4 <xTaskCheckForTimeOut+0xc0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e46:	d102      	bne.n	8005e4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61fb      	str	r3, [r7, #28]
 8005e4c:	e023      	b.n	8005e96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b15      	ldr	r3, [pc, #84]	@ (8005ea8 <xTaskCheckForTimeOut+0xc4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d007      	beq.n	8005e6a <xTaskCheckForTimeOut+0x86>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d302      	bcc.n	8005e6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e64:	2301      	movs	r3, #1
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	e015      	b.n	8005e96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d20b      	bcs.n	8005e8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff ff99 	bl	8005db8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	e004      	b.n	8005e96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e92:	2301      	movs	r3, #1
 8005e94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e96:	f000 fe89 	bl	8006bac <vPortExitCritical>

	return xReturn;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3720      	adds	r7, #32
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20003d38 	.word	0x20003d38
 8005ea8:	20003d4c 	.word	0x20003d4c

08005eac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005eb0:	4b03      	ldr	r3, [pc, #12]	@ (8005ec0 <vTaskMissedYield+0x14>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	20003d48 	.word	0x20003d48

08005ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ecc:	f000 f852 	bl	8005f74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ed0:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <prvIdleTask+0x28>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d9f9      	bls.n	8005ecc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ed8:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <prvIdleTask+0x2c>)
 8005eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ee8:	e7f0      	b.n	8005ecc <prvIdleTask+0x8>
 8005eea:	bf00      	nop
 8005eec:	20003864 	.word	0x20003864
 8005ef0:	e000ed04 	.word	0xe000ed04

08005ef4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005efa:	2300      	movs	r3, #0
 8005efc:	607b      	str	r3, [r7, #4]
 8005efe:	e00c      	b.n	8005f1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4a12      	ldr	r2, [pc, #72]	@ (8005f54 <prvInitialiseTaskLists+0x60>)
 8005f0c:	4413      	add	r3, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fcd6 	bl	80048c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3301      	adds	r3, #1
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b37      	cmp	r3, #55	@ 0x37
 8005f1e:	d9ef      	bls.n	8005f00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f20:	480d      	ldr	r0, [pc, #52]	@ (8005f58 <prvInitialiseTaskLists+0x64>)
 8005f22:	f7fe fccd 	bl	80048c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f26:	480d      	ldr	r0, [pc, #52]	@ (8005f5c <prvInitialiseTaskLists+0x68>)
 8005f28:	f7fe fcca 	bl	80048c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f2c:	480c      	ldr	r0, [pc, #48]	@ (8005f60 <prvInitialiseTaskLists+0x6c>)
 8005f2e:	f7fe fcc7 	bl	80048c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f32:	480c      	ldr	r0, [pc, #48]	@ (8005f64 <prvInitialiseTaskLists+0x70>)
 8005f34:	f7fe fcc4 	bl	80048c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f38:	480b      	ldr	r0, [pc, #44]	@ (8005f68 <prvInitialiseTaskLists+0x74>)
 8005f3a:	f7fe fcc1 	bl	80048c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f6c <prvInitialiseTaskLists+0x78>)
 8005f40:	4a05      	ldr	r2, [pc, #20]	@ (8005f58 <prvInitialiseTaskLists+0x64>)
 8005f42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f44:	4b0a      	ldr	r3, [pc, #40]	@ (8005f70 <prvInitialiseTaskLists+0x7c>)
 8005f46:	4a05      	ldr	r2, [pc, #20]	@ (8005f5c <prvInitialiseTaskLists+0x68>)
 8005f48:	601a      	str	r2, [r3, #0]
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20003864 	.word	0x20003864
 8005f58:	20003cc4 	.word	0x20003cc4
 8005f5c:	20003cd8 	.word	0x20003cd8
 8005f60:	20003cf4 	.word	0x20003cf4
 8005f64:	20003d08 	.word	0x20003d08
 8005f68:	20003d20 	.word	0x20003d20
 8005f6c:	20003cec 	.word	0x20003cec
 8005f70:	20003cf0 	.word	0x20003cf0

08005f74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f7a:	e019      	b.n	8005fb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f7c:	f000 fde4 	bl	8006b48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f80:	4b10      	ldr	r3, [pc, #64]	@ (8005fc4 <prvCheckTasksWaitingTermination+0x50>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe fd21 	bl	80049d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f92:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc8 <prvCheckTasksWaitingTermination+0x54>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	4a0b      	ldr	r2, [pc, #44]	@ (8005fc8 <prvCheckTasksWaitingTermination+0x54>)
 8005f9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <prvCheckTasksWaitingTermination+0x58>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8005fcc <prvCheckTasksWaitingTermination+0x58>)
 8005fa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fa6:	f000 fe01 	bl	8006bac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f810 	bl	8005fd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fb0:	4b06      	ldr	r3, [pc, #24]	@ (8005fcc <prvCheckTasksWaitingTermination+0x58>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e1      	bne.n	8005f7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20003d08 	.word	0x20003d08
 8005fc8:	20003d34 	.word	0x20003d34
 8005fcc:	20003d1c 	.word	0x20003d1c

08005fd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d108      	bne.n	8005ff4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 ff9e 	bl	8006f28 <vPortFree>
				vPortFree( pxTCB );
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 ff9b 	bl	8006f28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ff2:	e019      	b.n	8006028 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d103      	bne.n	8006006 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 ff92 	bl	8006f28 <vPortFree>
	}
 8006004:	e010      	b.n	8006028 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800600c:	2b02      	cmp	r3, #2
 800600e:	d00b      	beq.n	8006028 <prvDeleteTCB+0x58>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <prvDeleteTCB+0x54>
	}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006036:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <prvResetNextTaskUnblockTime+0x38>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d104      	bne.n	800604a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006040:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <prvResetNextTaskUnblockTime+0x3c>)
 8006042:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006046:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006048:	e008      	b.n	800605c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800604a:	4b07      	ldr	r3, [pc, #28]	@ (8006068 <prvResetNextTaskUnblockTime+0x38>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4a04      	ldr	r2, [pc, #16]	@ (800606c <prvResetNextTaskUnblockTime+0x3c>)
 800605a:	6013      	str	r3, [r2, #0]
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	20003cec 	.word	0x20003cec
 800606c:	20003d54 	.word	0x20003d54

08006070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006076:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <xTaskGetSchedulerState+0x34>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800607e:	2301      	movs	r3, #1
 8006080:	607b      	str	r3, [r7, #4]
 8006082:	e008      	b.n	8006096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006084:	4b08      	ldr	r3, [pc, #32]	@ (80060a8 <xTaskGetSchedulerState+0x38>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800608c:	2302      	movs	r3, #2
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	e001      	b.n	8006096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006092:	2300      	movs	r3, #0
 8006094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006096:	687b      	ldr	r3, [r7, #4]
	}
 8006098:	4618      	mov	r0, r3
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	20003d40 	.word	0x20003d40
 80060a8:	20003d5c 	.word	0x20003d5c

080060ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d058      	beq.n	8006174 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006180 <xTaskPriorityDisinherit+0xd4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d00b      	beq.n	80060e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	60fb      	str	r3, [r7, #12]
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	e7fd      	b.n	80060e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	60bb      	str	r3, [r7, #8]
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006108:	1e5a      	subs	r2, r3, #1
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006116:	429a      	cmp	r2, r3
 8006118:	d02c      	beq.n	8006174 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800611e:	2b00      	cmp	r3, #0
 8006120:	d128      	bne.n	8006174 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3304      	adds	r3, #4
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fc54 	bl	80049d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006138:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006144:	4b0f      	ldr	r3, [pc, #60]	@ (8006184 <xTaskPriorityDisinherit+0xd8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d903      	bls.n	8006154 <xTaskPriorityDisinherit+0xa8>
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006150:	4a0c      	ldr	r2, [pc, #48]	@ (8006184 <xTaskPriorityDisinherit+0xd8>)
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4a09      	ldr	r2, [pc, #36]	@ (8006188 <xTaskPriorityDisinherit+0xdc>)
 8006162:	441a      	add	r2, r3
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7fe fbd5 	bl	800491a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006170:	2301      	movs	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006174:	697b      	ldr	r3, [r7, #20]
	}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20003860 	.word	0x20003860
 8006184:	20003d3c 	.word	0x20003d3c
 8006188:	20003864 	.word	0x20003864

0800618c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006196:	4b21      	ldr	r3, [pc, #132]	@ (800621c <prvAddCurrentTaskToDelayedList+0x90>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800619c:	4b20      	ldr	r3, [pc, #128]	@ (8006220 <prvAddCurrentTaskToDelayedList+0x94>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe fc16 	bl	80049d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061ae:	d10a      	bne.n	80061c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006220 <prvAddCurrentTaskToDelayedList+0x94>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4619      	mov	r1, r3
 80061be:	4819      	ldr	r0, [pc, #100]	@ (8006224 <prvAddCurrentTaskToDelayedList+0x98>)
 80061c0:	f7fe fbab 	bl	800491a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061c4:	e026      	b.n	8006214 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4413      	add	r3, r2
 80061cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061ce:	4b14      	ldr	r3, [pc, #80]	@ (8006220 <prvAddCurrentTaskToDelayedList+0x94>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d209      	bcs.n	80061f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061de:	4b12      	ldr	r3, [pc, #72]	@ (8006228 <prvAddCurrentTaskToDelayedList+0x9c>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006220 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f7fe fbb9 	bl	8004962 <vListInsert>
}
 80061f0:	e010      	b.n	8006214 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061f2:	4b0e      	ldr	r3, [pc, #56]	@ (800622c <prvAddCurrentTaskToDelayedList+0xa0>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006220 <prvAddCurrentTaskToDelayedList+0x94>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4619      	mov	r1, r3
 80061fe:	4610      	mov	r0, r2
 8006200:	f7fe fbaf 	bl	8004962 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006204:	4b0a      	ldr	r3, [pc, #40]	@ (8006230 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	429a      	cmp	r2, r3
 800620c:	d202      	bcs.n	8006214 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800620e:	4a08      	ldr	r2, [pc, #32]	@ (8006230 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	6013      	str	r3, [r2, #0]
}
 8006214:	bf00      	nop
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20003d38 	.word	0x20003d38
 8006220:	20003860 	.word	0x20003860
 8006224:	20003d20 	.word	0x20003d20
 8006228:	20003cf0 	.word	0x20003cf0
 800622c:	20003cec 	.word	0x20003cec
 8006230:	20003d54 	.word	0x20003d54

08006234 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08a      	sub	sp, #40	@ 0x28
 8006238:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800623e:	f000 fb13 	bl	8006868 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006242:	4b1d      	ldr	r3, [pc, #116]	@ (80062b8 <xTimerCreateTimerTask+0x84>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d021      	beq.n	800628e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006252:	1d3a      	adds	r2, r7, #4
 8006254:	f107 0108 	add.w	r1, r7, #8
 8006258:	f107 030c 	add.w	r3, r7, #12
 800625c:	4618      	mov	r0, r3
 800625e:	f7fe fb15 	bl	800488c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	9202      	str	r2, [sp, #8]
 800626a:	9301      	str	r3, [sp, #4]
 800626c:	2302      	movs	r3, #2
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	2300      	movs	r3, #0
 8006272:	460a      	mov	r2, r1
 8006274:	4911      	ldr	r1, [pc, #68]	@ (80062bc <xTimerCreateTimerTask+0x88>)
 8006276:	4812      	ldr	r0, [pc, #72]	@ (80062c0 <xTimerCreateTimerTask+0x8c>)
 8006278:	f7ff f8d0 	bl	800541c <xTaskCreateStatic>
 800627c:	4603      	mov	r3, r0
 800627e:	4a11      	ldr	r2, [pc, #68]	@ (80062c4 <xTimerCreateTimerTask+0x90>)
 8006280:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006282:	4b10      	ldr	r3, [pc, #64]	@ (80062c4 <xTimerCreateTimerTask+0x90>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800628a:	2301      	movs	r3, #1
 800628c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	613b      	str	r3, [r7, #16]
}
 80062a6:	bf00      	nop
 80062a8:	bf00      	nop
 80062aa:	e7fd      	b.n	80062a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062ac:	697b      	ldr	r3, [r7, #20]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20003d90 	.word	0x20003d90
 80062bc:	08007208 	.word	0x08007208
 80062c0:	08006401 	.word	0x08006401
 80062c4:	20003d94 	.word	0x20003d94

080062c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	@ 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	623b      	str	r3, [r7, #32]
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	e7fd      	b.n	80062f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062f8:	4b19      	ldr	r3, [pc, #100]	@ (8006360 <xTimerGenericCommand+0x98>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d02a      	beq.n	8006356 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b05      	cmp	r3, #5
 8006310:	dc18      	bgt.n	8006344 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006312:	f7ff fead 	bl	8006070 <xTaskGetSchedulerState>
 8006316:	4603      	mov	r3, r0
 8006318:	2b02      	cmp	r3, #2
 800631a:	d109      	bne.n	8006330 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800631c:	4b10      	ldr	r3, [pc, #64]	@ (8006360 <xTimerGenericCommand+0x98>)
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	f107 0110 	add.w	r1, r7, #16
 8006324:	2300      	movs	r3, #0
 8006326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006328:	f7fe fc88 	bl	8004c3c <xQueueGenericSend>
 800632c:	6278      	str	r0, [r7, #36]	@ 0x24
 800632e:	e012      	b.n	8006356 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006330:	4b0b      	ldr	r3, [pc, #44]	@ (8006360 <xTimerGenericCommand+0x98>)
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	f107 0110 	add.w	r1, r7, #16
 8006338:	2300      	movs	r3, #0
 800633a:	2200      	movs	r2, #0
 800633c:	f7fe fc7e 	bl	8004c3c <xQueueGenericSend>
 8006340:	6278      	str	r0, [r7, #36]	@ 0x24
 8006342:	e008      	b.n	8006356 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006344:	4b06      	ldr	r3, [pc, #24]	@ (8006360 <xTimerGenericCommand+0x98>)
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	f107 0110 	add.w	r1, r7, #16
 800634c:	2300      	movs	r3, #0
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	f7fe fd76 	bl	8004e40 <xQueueGenericSendFromISR>
 8006354:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006358:	4618      	mov	r0, r3
 800635a:	3728      	adds	r7, #40	@ 0x28
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20003d90 	.word	0x20003d90

08006364 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af02      	add	r7, sp, #8
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800636e:	4b23      	ldr	r3, [pc, #140]	@ (80063fc <prvProcessExpiredTimer+0x98>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	3304      	adds	r3, #4
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fb29 	bl	80049d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d023      	beq.n	80063d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	699a      	ldr	r2, [r3, #24]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	18d1      	adds	r1, r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	6978      	ldr	r0, [r7, #20]
 800639e:	f000 f8d5 	bl	800654c <prvInsertTimerInActiveList>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d020      	beq.n	80063ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063a8:	2300      	movs	r3, #0
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	2100      	movs	r1, #0
 80063b2:	6978      	ldr	r0, [r7, #20]
 80063b4:	f7ff ff88 	bl	80062c8 <xTimerGenericCommand>
 80063b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d114      	bne.n	80063ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	60fb      	str	r3, [r7, #12]
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	e7fd      	b.n	80063d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063de:	f023 0301 	bic.w	r3, r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	6978      	ldr	r0, [r7, #20]
 80063f0:	4798      	blx	r3
}
 80063f2:	bf00      	nop
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20003d88 	.word	0x20003d88

08006400 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006408:	f107 0308 	add.w	r3, r7, #8
 800640c:	4618      	mov	r0, r3
 800640e:	f000 f859 	bl	80064c4 <prvGetNextExpireTime>
 8006412:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4619      	mov	r1, r3
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f805 	bl	8006428 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800641e:	f000 f8d7 	bl	80065d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006422:	bf00      	nop
 8006424:	e7f0      	b.n	8006408 <prvTimerTask+0x8>
	...

08006428 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006432:	f7ff fa37 	bl	80058a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006436:	f107 0308 	add.w	r3, r7, #8
 800643a:	4618      	mov	r0, r3
 800643c:	f000 f866 	bl	800650c <prvSampleTimeNow>
 8006440:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d130      	bne.n	80064aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <prvProcessTimerOrBlockTask+0x3c>
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	429a      	cmp	r2, r3
 8006454:	d806      	bhi.n	8006464 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006456:	f7ff fa33 	bl	80058c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800645a:	68f9      	ldr	r1, [r7, #12]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff ff81 	bl	8006364 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006462:	e024      	b.n	80064ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d008      	beq.n	800647c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800646a:	4b13      	ldr	r3, [pc, #76]	@ (80064b8 <prvProcessTimerOrBlockTask+0x90>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <prvProcessTimerOrBlockTask+0x50>
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <prvProcessTimerOrBlockTask+0x52>
 8006478:	2300      	movs	r3, #0
 800647a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800647c:	4b0f      	ldr	r3, [pc, #60]	@ (80064bc <prvProcessTimerOrBlockTask+0x94>)
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	4619      	mov	r1, r3
 800648a:	f7fe ff93 	bl	80053b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800648e:	f7ff fa17 	bl	80058c0 <xTaskResumeAll>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006498:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <prvProcessTimerOrBlockTask+0x98>)
 800649a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	f3bf 8f6f 	isb	sy
}
 80064a8:	e001      	b.n	80064ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064aa:	f7ff fa09 	bl	80058c0 <xTaskResumeAll>
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20003d8c 	.word	0x20003d8c
 80064bc:	20003d90 	.word	0x20003d90
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006508 <prvGetNextExpireTime+0x44>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <prvGetNextExpireTime+0x16>
 80064d6:	2201      	movs	r2, #1
 80064d8:	e000      	b.n	80064dc <prvGetNextExpireTime+0x18>
 80064da:	2200      	movs	r2, #0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064e8:	4b07      	ldr	r3, [pc, #28]	@ (8006508 <prvGetNextExpireTime+0x44>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e001      	b.n	80064f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064f8:	68fb      	ldr	r3, [r7, #12]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20003d88 	.word	0x20003d88

0800650c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006514:	f7ff fa72 	bl	80059fc <xTaskGetTickCount>
 8006518:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800651a:	4b0b      	ldr	r3, [pc, #44]	@ (8006548 <prvSampleTimeNow+0x3c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	429a      	cmp	r2, r3
 8006522:	d205      	bcs.n	8006530 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006524:	f000 f93a 	bl	800679c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e002      	b.n	8006536 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006536:	4a04      	ldr	r2, [pc, #16]	@ (8006548 <prvSampleTimeNow+0x3c>)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800653c:	68fb      	ldr	r3, [r7, #12]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20003d98 	.word	0x20003d98

0800654c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	429a      	cmp	r2, r3
 8006570:	d812      	bhi.n	8006598 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	429a      	cmp	r2, r3
 800657e:	d302      	bcc.n	8006586 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006580:	2301      	movs	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	e01b      	b.n	80065be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006586:	4b10      	ldr	r3, [pc, #64]	@ (80065c8 <prvInsertTimerInActiveList+0x7c>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3304      	adds	r3, #4
 800658e:	4619      	mov	r1, r3
 8006590:	4610      	mov	r0, r2
 8006592:	f7fe f9e6 	bl	8004962 <vListInsert>
 8006596:	e012      	b.n	80065be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d206      	bcs.n	80065ae <prvInsertTimerInActiveList+0x62>
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d302      	bcc.n	80065ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065a8:	2301      	movs	r3, #1
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	e007      	b.n	80065be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065ae:	4b07      	ldr	r3, [pc, #28]	@ (80065cc <prvInsertTimerInActiveList+0x80>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f7fe f9d2 	bl	8004962 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065be:	697b      	ldr	r3, [r7, #20]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20003d8c 	.word	0x20003d8c
 80065cc:	20003d88 	.word	0x20003d88

080065d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08e      	sub	sp, #56	@ 0x38
 80065d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065d6:	e0ce      	b.n	8006776 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	da19      	bge.n	8006612 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065de:	1d3b      	adds	r3, r7, #4
 80065e0:	3304      	adds	r3, #4
 80065e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10b      	bne.n	8006602 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	61fb      	str	r3, [r7, #28]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006608:	6850      	ldr	r0, [r2, #4]
 800660a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800660c:	6892      	ldr	r2, [r2, #8]
 800660e:	4611      	mov	r1, r2
 8006610:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	f2c0 80ae 	blt.w	8006776 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800661e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d004      	beq.n	8006630 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006628:	3304      	adds	r3, #4
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe f9d2 	bl	80049d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006630:	463b      	mov	r3, r7
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff ff6a 	bl	800650c <prvSampleTimeNow>
 8006638:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b09      	cmp	r3, #9
 800663e:	f200 8097 	bhi.w	8006770 <prvProcessReceivedCommands+0x1a0>
 8006642:	a201      	add	r2, pc, #4	@ (adr r2, 8006648 <prvProcessReceivedCommands+0x78>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	08006671 	.word	0x08006671
 800664c:	08006671 	.word	0x08006671
 8006650:	08006671 	.word	0x08006671
 8006654:	080066e7 	.word	0x080066e7
 8006658:	080066fb 	.word	0x080066fb
 800665c:	08006747 	.word	0x08006747
 8006660:	08006671 	.word	0x08006671
 8006664:	08006671 	.word	0x08006671
 8006668:	080066e7 	.word	0x080066e7
 800666c:	080066fb 	.word	0x080066fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006672:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	18d1      	adds	r1, r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800668e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006690:	f7ff ff5c 	bl	800654c <prvInsertTimerInActiveList>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d06c      	beq.n	8006774 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800669a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d061      	beq.n	8006774 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	441a      	add	r2, r3
 80066b8:	2300      	movs	r3, #0
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	2300      	movs	r3, #0
 80066be:	2100      	movs	r1, #0
 80066c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066c2:	f7ff fe01 	bl	80062c8 <xTimerGenericCommand>
 80066c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d152      	bne.n	8006774 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	61bb      	str	r3, [r7, #24]
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	e7fd      	b.n	80066e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066f8:	e03d      	b.n	8006776 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	b2da      	uxtb	r2, r3
 8006706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006708:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10b      	bne.n	8006732 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	617b      	str	r3, [r7, #20]
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	e7fd      	b.n	800672e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	18d1      	adds	r1, r2, r3
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800673e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006740:	f7ff ff04 	bl	800654c <prvInsertTimerInActiveList>
					break;
 8006744:	e017      	b.n	8006776 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d103      	bne.n	800675c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006754:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006756:	f000 fbe7 	bl	8006f28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800675a:	e00c      	b.n	8006776 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006762:	f023 0301 	bic.w	r3, r3, #1
 8006766:	b2da      	uxtb	r2, r3
 8006768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800676e:	e002      	b.n	8006776 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006770:	bf00      	nop
 8006772:	e000      	b.n	8006776 <prvProcessReceivedCommands+0x1a6>
					break;
 8006774:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006776:	4b08      	ldr	r3, [pc, #32]	@ (8006798 <prvProcessReceivedCommands+0x1c8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	1d39      	adds	r1, r7, #4
 800677c:	2200      	movs	r2, #0
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe fbfc 	bl	8004f7c <xQueueReceive>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	f47f af26 	bne.w	80065d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800678c:	bf00      	nop
 800678e:	bf00      	nop
 8006790:	3730      	adds	r7, #48	@ 0x30
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20003d90 	.word	0x20003d90

0800679c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067a2:	e049      	b.n	8006838 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006860 <prvSwitchTimerLists+0xc4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006860 <prvSwitchTimerLists+0xc4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3304      	adds	r3, #4
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe f909 	bl	80049d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02f      	beq.n	8006838 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4413      	add	r3, r2
 80067e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d90e      	bls.n	8006808 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006860 <prvSwitchTimerLists+0xc4>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f7fe f8ae 	bl	8004962 <vListInsert>
 8006806:	e017      	b.n	8006838 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006808:	2300      	movs	r3, #0
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	2300      	movs	r3, #0
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	2100      	movs	r1, #0
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7ff fd58 	bl	80062c8 <xTimerGenericCommand>
 8006818:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10b      	bne.n	8006838 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	603b      	str	r3, [r7, #0]
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006838:	4b09      	ldr	r3, [pc, #36]	@ (8006860 <prvSwitchTimerLists+0xc4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1b0      	bne.n	80067a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006842:	4b07      	ldr	r3, [pc, #28]	@ (8006860 <prvSwitchTimerLists+0xc4>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006848:	4b06      	ldr	r3, [pc, #24]	@ (8006864 <prvSwitchTimerLists+0xc8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a04      	ldr	r2, [pc, #16]	@ (8006860 <prvSwitchTimerLists+0xc4>)
 800684e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006850:	4a04      	ldr	r2, [pc, #16]	@ (8006864 <prvSwitchTimerLists+0xc8>)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	6013      	str	r3, [r2, #0]
}
 8006856:	bf00      	nop
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20003d88 	.word	0x20003d88
 8006864:	20003d8c 	.word	0x20003d8c

08006868 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800686e:	f000 f96b 	bl	8006b48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006872:	4b15      	ldr	r3, [pc, #84]	@ (80068c8 <prvCheckForValidListAndQueue+0x60>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d120      	bne.n	80068bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800687a:	4814      	ldr	r0, [pc, #80]	@ (80068cc <prvCheckForValidListAndQueue+0x64>)
 800687c:	f7fe f820 	bl	80048c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006880:	4813      	ldr	r0, [pc, #76]	@ (80068d0 <prvCheckForValidListAndQueue+0x68>)
 8006882:	f7fe f81d 	bl	80048c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006886:	4b13      	ldr	r3, [pc, #76]	@ (80068d4 <prvCheckForValidListAndQueue+0x6c>)
 8006888:	4a10      	ldr	r2, [pc, #64]	@ (80068cc <prvCheckForValidListAndQueue+0x64>)
 800688a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800688c:	4b12      	ldr	r3, [pc, #72]	@ (80068d8 <prvCheckForValidListAndQueue+0x70>)
 800688e:	4a10      	ldr	r2, [pc, #64]	@ (80068d0 <prvCheckForValidListAndQueue+0x68>)
 8006890:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006892:	2300      	movs	r3, #0
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	4b11      	ldr	r3, [pc, #68]	@ (80068dc <prvCheckForValidListAndQueue+0x74>)
 8006898:	4a11      	ldr	r2, [pc, #68]	@ (80068e0 <prvCheckForValidListAndQueue+0x78>)
 800689a:	2110      	movs	r1, #16
 800689c:	200a      	movs	r0, #10
 800689e:	f7fe f92d 	bl	8004afc <xQueueGenericCreateStatic>
 80068a2:	4603      	mov	r3, r0
 80068a4:	4a08      	ldr	r2, [pc, #32]	@ (80068c8 <prvCheckForValidListAndQueue+0x60>)
 80068a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068a8:	4b07      	ldr	r3, [pc, #28]	@ (80068c8 <prvCheckForValidListAndQueue+0x60>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068b0:	4b05      	ldr	r3, [pc, #20]	@ (80068c8 <prvCheckForValidListAndQueue+0x60>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	490b      	ldr	r1, [pc, #44]	@ (80068e4 <prvCheckForValidListAndQueue+0x7c>)
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe fd52 	bl	8005360 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068bc:	f000 f976 	bl	8006bac <vPortExitCritical>
}
 80068c0:	bf00      	nop
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20003d90 	.word	0x20003d90
 80068cc:	20003d60 	.word	0x20003d60
 80068d0:	20003d74 	.word	0x20003d74
 80068d4:	20003d88 	.word	0x20003d88
 80068d8:	20003d8c 	.word	0x20003d8c
 80068dc:	20003e3c 	.word	0x20003e3c
 80068e0:	20003d9c 	.word	0x20003d9c
 80068e4:	08007210 	.word	0x08007210

080068e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3b04      	subs	r3, #4
 80068f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3b04      	subs	r3, #4
 8006906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f023 0201 	bic.w	r2, r3, #1
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3b04      	subs	r3, #4
 8006916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006918:	4a0c      	ldr	r2, [pc, #48]	@ (800694c <pxPortInitialiseStack+0x64>)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3b14      	subs	r3, #20
 8006922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3b04      	subs	r3, #4
 800692e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f06f 0202 	mvn.w	r2, #2
 8006936:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3b20      	subs	r3, #32
 800693c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800693e:	68fb      	ldr	r3, [r7, #12]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	08006951 	.word	0x08006951

08006950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800695a:	4b13      	ldr	r3, [pc, #76]	@ (80069a8 <prvTaskExitError+0x58>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006962:	d00b      	beq.n	800697c <prvTaskExitError+0x2c>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	60fb      	str	r3, [r7, #12]
}
 8006976:	bf00      	nop
 8006978:	bf00      	nop
 800697a:	e7fd      	b.n	8006978 <prvTaskExitError+0x28>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	60bb      	str	r3, [r7, #8]
}
 800698e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006990:	bf00      	nop
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0fc      	beq.n	8006992 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	2000000c 	.word	0x2000000c
 80069ac:	00000000 	.word	0x00000000

080069b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069b0:	4b07      	ldr	r3, [pc, #28]	@ (80069d0 <pxCurrentTCBConst2>)
 80069b2:	6819      	ldr	r1, [r3, #0]
 80069b4:	6808      	ldr	r0, [r1, #0]
 80069b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ba:	f380 8809 	msr	PSP, r0
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f04f 0000 	mov.w	r0, #0
 80069c6:	f380 8811 	msr	BASEPRI, r0
 80069ca:	4770      	bx	lr
 80069cc:	f3af 8000 	nop.w

080069d0 <pxCurrentTCBConst2>:
 80069d0:	20003860 	.word	0x20003860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop

080069d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069d8:	4808      	ldr	r0, [pc, #32]	@ (80069fc <prvPortStartFirstTask+0x24>)
 80069da:	6800      	ldr	r0, [r0, #0]
 80069dc:	6800      	ldr	r0, [r0, #0]
 80069de:	f380 8808 	msr	MSP, r0
 80069e2:	f04f 0000 	mov.w	r0, #0
 80069e6:	f380 8814 	msr	CONTROL, r0
 80069ea:	b662      	cpsie	i
 80069ec:	b661      	cpsie	f
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	df00      	svc	0
 80069f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069fa:	bf00      	nop
 80069fc:	e000ed08 	.word	0xe000ed08

08006a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a06:	4b47      	ldr	r3, [pc, #284]	@ (8006b24 <xPortStartScheduler+0x124>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a47      	ldr	r2, [pc, #284]	@ (8006b28 <xPortStartScheduler+0x128>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d10b      	bne.n	8006a28 <xPortStartScheduler+0x28>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	613b      	str	r3, [r7, #16]
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	e7fd      	b.n	8006a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a28:	4b3e      	ldr	r3, [pc, #248]	@ (8006b24 <xPortStartScheduler+0x124>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b2c <xPortStartScheduler+0x12c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d10b      	bne.n	8006a4a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	60fb      	str	r3, [r7, #12]
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	e7fd      	b.n	8006a46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a4a:	4b39      	ldr	r3, [pc, #228]	@ (8006b30 <xPortStartScheduler+0x130>)
 8006a4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	22ff      	movs	r2, #255	@ 0xff
 8006a5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a64:	78fb      	ldrb	r3, [r7, #3]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	4b31      	ldr	r3, [pc, #196]	@ (8006b34 <xPortStartScheduler+0x134>)
 8006a70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a72:	4b31      	ldr	r3, [pc, #196]	@ (8006b38 <xPortStartScheduler+0x138>)
 8006a74:	2207      	movs	r2, #7
 8006a76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a78:	e009      	b.n	8006a8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b38 <xPortStartScheduler+0x138>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	4a2d      	ldr	r2, [pc, #180]	@ (8006b38 <xPortStartScheduler+0x138>)
 8006a82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a96:	2b80      	cmp	r3, #128	@ 0x80
 8006a98:	d0ef      	beq.n	8006a7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a9a:	4b27      	ldr	r3, [pc, #156]	@ (8006b38 <xPortStartScheduler+0x138>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f1c3 0307 	rsb	r3, r3, #7
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d00b      	beq.n	8006abe <xPortStartScheduler+0xbe>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	60bb      	str	r3, [r7, #8]
}
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	e7fd      	b.n	8006aba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006abe:	4b1e      	ldr	r3, [pc, #120]	@ (8006b38 <xPortStartScheduler+0x138>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b38 <xPortStartScheduler+0x138>)
 8006ac6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b38 <xPortStartScheduler+0x138>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ad0:	4a19      	ldr	r2, [pc, #100]	@ (8006b38 <xPortStartScheduler+0x138>)
 8006ad2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006adc:	4b17      	ldr	r3, [pc, #92]	@ (8006b3c <xPortStartScheduler+0x13c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a16      	ldr	r2, [pc, #88]	@ (8006b3c <xPortStartScheduler+0x13c>)
 8006ae2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ae6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ae8:	4b14      	ldr	r3, [pc, #80]	@ (8006b3c <xPortStartScheduler+0x13c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a13      	ldr	r2, [pc, #76]	@ (8006b3c <xPortStartScheduler+0x13c>)
 8006aee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006af2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006af4:	f000 f8da 	bl	8006cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006af8:	4b11      	ldr	r3, [pc, #68]	@ (8006b40 <xPortStartScheduler+0x140>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006afe:	f000 f8f9 	bl	8006cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b02:	4b10      	ldr	r3, [pc, #64]	@ (8006b44 <xPortStartScheduler+0x144>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a0f      	ldr	r2, [pc, #60]	@ (8006b44 <xPortStartScheduler+0x144>)
 8006b08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b0e:	f7ff ff63 	bl	80069d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b12:	f7ff f83d 	bl	8005b90 <vTaskSwitchContext>
	prvTaskExitError();
 8006b16:	f7ff ff1b 	bl	8006950 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	e000ed00 	.word	0xe000ed00
 8006b28:	410fc271 	.word	0x410fc271
 8006b2c:	410fc270 	.word	0x410fc270
 8006b30:	e000e400 	.word	0xe000e400
 8006b34:	20003e8c 	.word	0x20003e8c
 8006b38:	20003e90 	.word	0x20003e90
 8006b3c:	e000ed20 	.word	0xe000ed20
 8006b40:	2000000c 	.word	0x2000000c
 8006b44:	e000ef34 	.word	0xe000ef34

08006b48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
}
 8006b60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b62:	4b10      	ldr	r3, [pc, #64]	@ (8006ba4 <vPortEnterCritical+0x5c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3301      	adds	r3, #1
 8006b68:	4a0e      	ldr	r2, [pc, #56]	@ (8006ba4 <vPortEnterCritical+0x5c>)
 8006b6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba4 <vPortEnterCritical+0x5c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d110      	bne.n	8006b96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b74:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba8 <vPortEnterCritical+0x60>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <vPortEnterCritical+0x4e>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	603b      	str	r3, [r7, #0]
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	e7fd      	b.n	8006b92 <vPortEnterCritical+0x4a>
	}
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	2000000c 	.word	0x2000000c
 8006ba8:	e000ed04 	.word	0xe000ed04

08006bac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bb2:	4b12      	ldr	r3, [pc, #72]	@ (8006bfc <vPortExitCritical+0x50>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10b      	bne.n	8006bd2 <vPortExitCritical+0x26>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	607b      	str	r3, [r7, #4]
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	e7fd      	b.n	8006bce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bfc <vPortExitCritical+0x50>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	4a08      	ldr	r2, [pc, #32]	@ (8006bfc <vPortExitCritical+0x50>)
 8006bda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bdc:	4b07      	ldr	r3, [pc, #28]	@ (8006bfc <vPortExitCritical+0x50>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d105      	bne.n	8006bf0 <vPortExitCritical+0x44>
 8006be4:	2300      	movs	r3, #0
 8006be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	f383 8811 	msr	BASEPRI, r3
}
 8006bee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	2000000c 	.word	0x2000000c

08006c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c00:	f3ef 8009 	mrs	r0, PSP
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	4b15      	ldr	r3, [pc, #84]	@ (8006c60 <pxCurrentTCBConst>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	f01e 0f10 	tst.w	lr, #16
 8006c10:	bf08      	it	eq
 8006c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1a:	6010      	str	r0, [r2, #0]
 8006c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c24:	f380 8811 	msr	BASEPRI, r0
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f7fe ffae 	bl	8005b90 <vTaskSwitchContext>
 8006c34:	f04f 0000 	mov.w	r0, #0
 8006c38:	f380 8811 	msr	BASEPRI, r0
 8006c3c:	bc09      	pop	{r0, r3}
 8006c3e:	6819      	ldr	r1, [r3, #0]
 8006c40:	6808      	ldr	r0, [r1, #0]
 8006c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c46:	f01e 0f10 	tst.w	lr, #16
 8006c4a:	bf08      	it	eq
 8006c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c50:	f380 8809 	msr	PSP, r0
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	f3af 8000 	nop.w

08006c60 <pxCurrentTCBConst>:
 8006c60:	20003860 	.word	0x20003860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop

08006c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	607b      	str	r3, [r7, #4]
}
 8006c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c82:	f7fe fecb 	bl	8005a1c <xTaskIncrementTick>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ca8 <xPortSysTickHandler+0x40>)
 8006c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	2300      	movs	r3, #0
 8006c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f383 8811 	msr	BASEPRI, r3
}
 8006c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	e000ed04 	.word	0xe000ed04

08006cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce0 <vPortSetupTimerInterrupt+0x34>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <vPortSetupTimerInterrupt+0x38>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce8 <vPortSetupTimerInterrupt+0x3c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8006cec <vPortSetupTimerInterrupt+0x40>)
 8006cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc6:	099b      	lsrs	r3, r3, #6
 8006cc8:	4a09      	ldr	r2, [pc, #36]	@ (8006cf0 <vPortSetupTimerInterrupt+0x44>)
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cce:	4b04      	ldr	r3, [pc, #16]	@ (8006ce0 <vPortSetupTimerInterrupt+0x34>)
 8006cd0:	2207      	movs	r2, #7
 8006cd2:	601a      	str	r2, [r3, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	e000e010 	.word	0xe000e010
 8006ce4:	e000e018 	.word	0xe000e018
 8006ce8:	20000000 	.word	0x20000000
 8006cec:	10624dd3 	.word	0x10624dd3
 8006cf0:	e000e014 	.word	0xe000e014

08006cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d04 <vPortEnableVFP+0x10>
 8006cf8:	6801      	ldr	r1, [r0, #0]
 8006cfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006cfe:	6001      	str	r1, [r0, #0]
 8006d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d02:	bf00      	nop
 8006d04:	e000ed88 	.word	0xe000ed88

08006d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d0e:	f3ef 8305 	mrs	r3, IPSR
 8006d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b0f      	cmp	r3, #15
 8006d18:	d915      	bls.n	8006d46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d1a:	4a18      	ldr	r2, [pc, #96]	@ (8006d7c <vPortValidateInterruptPriority+0x74>)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d24:	4b16      	ldr	r3, [pc, #88]	@ (8006d80 <vPortValidateInterruptPriority+0x78>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	7afa      	ldrb	r2, [r7, #11]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d20b      	bcs.n	8006d46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	607b      	str	r3, [r7, #4]
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d46:	4b0f      	ldr	r3, [pc, #60]	@ (8006d84 <vPortValidateInterruptPriority+0x7c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d88 <vPortValidateInterruptPriority+0x80>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d90b      	bls.n	8006d6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	603b      	str	r3, [r7, #0]
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	e7fd      	b.n	8006d6a <vPortValidateInterruptPriority+0x62>
	}
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	e000e3f0 	.word	0xe000e3f0
 8006d80:	20003e8c 	.word	0x20003e8c
 8006d84:	e000ed0c 	.word	0xe000ed0c
 8006d88:	20003e90 	.word	0x20003e90

08006d8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	@ 0x28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d98:	f7fe fd84 	bl	80058a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8006f10 <pvPortMalloc+0x184>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006da4:	f000 f924 	bl	8006ff0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006da8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f14 <pvPortMalloc+0x188>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f040 8095 	bne.w	8006ee0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01e      	beq.n	8006dfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d015      	beq.n	8006dfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f023 0307 	bic.w	r3, r3, #7
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <pvPortMalloc+0x6e>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	617b      	str	r3, [r7, #20]
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	e7fd      	b.n	8006df6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d06f      	beq.n	8006ee0 <pvPortMalloc+0x154>
 8006e00:	4b45      	ldr	r3, [pc, #276]	@ (8006f18 <pvPortMalloc+0x18c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d86a      	bhi.n	8006ee0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e0a:	4b44      	ldr	r3, [pc, #272]	@ (8006f1c <pvPortMalloc+0x190>)
 8006e0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e0e:	4b43      	ldr	r3, [pc, #268]	@ (8006f1c <pvPortMalloc+0x190>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e14:	e004      	b.n	8006e20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d903      	bls.n	8006e32 <pvPortMalloc+0xa6>
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f1      	bne.n	8006e16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e32:	4b37      	ldr	r3, [pc, #220]	@ (8006f10 <pvPortMalloc+0x184>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d051      	beq.n	8006ee0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2208      	movs	r2, #8
 8006e42:	4413      	add	r3, r2
 8006e44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	1ad2      	subs	r2, r2, r3
 8006e56:	2308      	movs	r3, #8
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d920      	bls.n	8006ea0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4413      	add	r3, r2
 8006e64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00b      	beq.n	8006e88 <pvPortMalloc+0xfc>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	613b      	str	r3, [r7, #16]
}
 8006e82:	bf00      	nop
 8006e84:	bf00      	nop
 8006e86:	e7fd      	b.n	8006e84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e9a:	69b8      	ldr	r0, [r7, #24]
 8006e9c:	f000 f90a 	bl	80070b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f18 <pvPortMalloc+0x18c>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8006f18 <pvPortMalloc+0x18c>)
 8006eac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eae:	4b1a      	ldr	r3, [pc, #104]	@ (8006f18 <pvPortMalloc+0x18c>)
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <pvPortMalloc+0x194>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d203      	bcs.n	8006ec2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006eba:	4b17      	ldr	r3, [pc, #92]	@ (8006f18 <pvPortMalloc+0x18c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a18      	ldr	r2, [pc, #96]	@ (8006f20 <pvPortMalloc+0x194>)
 8006ec0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	4b13      	ldr	r3, [pc, #76]	@ (8006f14 <pvPortMalloc+0x188>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ed6:	4b13      	ldr	r3, [pc, #76]	@ (8006f24 <pvPortMalloc+0x198>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3301      	adds	r3, #1
 8006edc:	4a11      	ldr	r2, [pc, #68]	@ (8006f24 <pvPortMalloc+0x198>)
 8006ede:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ee0:	f7fe fcee 	bl	80058c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00b      	beq.n	8006f06 <pvPortMalloc+0x17a>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	60fb      	str	r3, [r7, #12]
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	e7fd      	b.n	8006f02 <pvPortMalloc+0x176>
	return pvReturn;
 8006f06:	69fb      	ldr	r3, [r7, #28]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3728      	adds	r7, #40	@ 0x28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20004a9c 	.word	0x20004a9c
 8006f14:	20004ab0 	.word	0x20004ab0
 8006f18:	20004aa0 	.word	0x20004aa0
 8006f1c:	20004a94 	.word	0x20004a94
 8006f20:	20004aa4 	.word	0x20004aa4
 8006f24:	20004aa8 	.word	0x20004aa8

08006f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d04f      	beq.n	8006fda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f3a:	2308      	movs	r3, #8
 8006f3c:	425b      	negs	r3, r3
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4413      	add	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	4b25      	ldr	r3, [pc, #148]	@ (8006fe4 <vPortFree+0xbc>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10b      	bne.n	8006f6e <vPortFree+0x46>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <vPortFree+0x66>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60bb      	str	r3, [r7, #8]
}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	e7fd      	b.n	8006f8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	4b14      	ldr	r3, [pc, #80]	@ (8006fe4 <vPortFree+0xbc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4013      	ands	r3, r2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d01e      	beq.n	8006fda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d11a      	bne.n	8006fda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe4 <vPortFree+0xbc>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	43db      	mvns	r3, r3
 8006fae:	401a      	ands	r2, r3
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fb4:	f7fe fc76 	bl	80058a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe8 <vPortFree+0xc0>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	4a09      	ldr	r2, [pc, #36]	@ (8006fe8 <vPortFree+0xc0>)
 8006fc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fc6:	6938      	ldr	r0, [r7, #16]
 8006fc8:	f000 f874 	bl	80070b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fcc:	4b07      	ldr	r3, [pc, #28]	@ (8006fec <vPortFree+0xc4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	4a06      	ldr	r2, [pc, #24]	@ (8006fec <vPortFree+0xc4>)
 8006fd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006fd6:	f7fe fc73 	bl	80058c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fda:	bf00      	nop
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20004ab0 	.word	0x20004ab0
 8006fe8:	20004aa0 	.word	0x20004aa0
 8006fec:	20004aac 	.word	0x20004aac

08006ff0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ff6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006ffa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ffc:	4b27      	ldr	r3, [pc, #156]	@ (800709c <prvHeapInit+0xac>)
 8006ffe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00c      	beq.n	8007024 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3307      	adds	r3, #7
 800700e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0307 	bic.w	r3, r3, #7
 8007016:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	4a1f      	ldr	r2, [pc, #124]	@ (800709c <prvHeapInit+0xac>)
 8007020:	4413      	add	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007028:	4a1d      	ldr	r2, [pc, #116]	@ (80070a0 <prvHeapInit+0xb0>)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800702e:	4b1c      	ldr	r3, [pc, #112]	@ (80070a0 <prvHeapInit+0xb0>)
 8007030:	2200      	movs	r2, #0
 8007032:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	4413      	add	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800703c:	2208      	movs	r2, #8
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	1a9b      	subs	r3, r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0307 	bic.w	r3, r3, #7
 800704a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4a15      	ldr	r2, [pc, #84]	@ (80070a4 <prvHeapInit+0xb4>)
 8007050:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007052:	4b14      	ldr	r3, [pc, #80]	@ (80070a4 <prvHeapInit+0xb4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2200      	movs	r2, #0
 8007058:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800705a:	4b12      	ldr	r3, [pc, #72]	@ (80070a4 <prvHeapInit+0xb4>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	1ad2      	subs	r2, r2, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007070:	4b0c      	ldr	r3, [pc, #48]	@ (80070a4 <prvHeapInit+0xb4>)
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	4a0a      	ldr	r2, [pc, #40]	@ (80070a8 <prvHeapInit+0xb8>)
 800707e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	4a09      	ldr	r2, [pc, #36]	@ (80070ac <prvHeapInit+0xbc>)
 8007086:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007088:	4b09      	ldr	r3, [pc, #36]	@ (80070b0 <prvHeapInit+0xc0>)
 800708a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800708e:	601a      	str	r2, [r3, #0]
}
 8007090:	bf00      	nop
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	20003e94 	.word	0x20003e94
 80070a0:	20004a94 	.word	0x20004a94
 80070a4:	20004a9c 	.word	0x20004a9c
 80070a8:	20004aa4 	.word	0x20004aa4
 80070ac:	20004aa0 	.word	0x20004aa0
 80070b0:	20004ab0 	.word	0x20004ab0

080070b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070bc:	4b28      	ldr	r3, [pc, #160]	@ (8007160 <prvInsertBlockIntoFreeList+0xac>)
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e002      	b.n	80070c8 <prvInsertBlockIntoFreeList+0x14>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d8f7      	bhi.n	80070c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	4413      	add	r3, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d108      	bne.n	80070f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	441a      	add	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	441a      	add	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d118      	bne.n	800713c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4b15      	ldr	r3, [pc, #84]	@ (8007164 <prvInsertBlockIntoFreeList+0xb0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d00d      	beq.n	8007132 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	441a      	add	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	e008      	b.n	8007144 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007132:	4b0c      	ldr	r3, [pc, #48]	@ (8007164 <prvInsertBlockIntoFreeList+0xb0>)
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	e003      	b.n	8007144 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	429a      	cmp	r2, r3
 800714a:	d002      	beq.n	8007152 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	20004a94 	.word	0x20004a94
 8007164:	20004a9c 	.word	0x20004a9c

08007168 <memset>:
 8007168:	4402      	add	r2, r0
 800716a:	4603      	mov	r3, r0
 800716c:	4293      	cmp	r3, r2
 800716e:	d100      	bne.n	8007172 <memset+0xa>
 8007170:	4770      	bx	lr
 8007172:	f803 1b01 	strb.w	r1, [r3], #1
 8007176:	e7f9      	b.n	800716c <memset+0x4>

08007178 <__libc_init_array>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	4d0d      	ldr	r5, [pc, #52]	@ (80071b0 <__libc_init_array+0x38>)
 800717c:	4c0d      	ldr	r4, [pc, #52]	@ (80071b4 <__libc_init_array+0x3c>)
 800717e:	1b64      	subs	r4, r4, r5
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	2600      	movs	r6, #0
 8007184:	42a6      	cmp	r6, r4
 8007186:	d109      	bne.n	800719c <__libc_init_array+0x24>
 8007188:	4d0b      	ldr	r5, [pc, #44]	@ (80071b8 <__libc_init_array+0x40>)
 800718a:	4c0c      	ldr	r4, [pc, #48]	@ (80071bc <__libc_init_array+0x44>)
 800718c:	f000 f826 	bl	80071dc <_init>
 8007190:	1b64      	subs	r4, r4, r5
 8007192:	10a4      	asrs	r4, r4, #2
 8007194:	2600      	movs	r6, #0
 8007196:	42a6      	cmp	r6, r4
 8007198:	d105      	bne.n	80071a6 <__libc_init_array+0x2e>
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a0:	4798      	blx	r3
 80071a2:	3601      	adds	r6, #1
 80071a4:	e7ee      	b.n	8007184 <__libc_init_array+0xc>
 80071a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071aa:	4798      	blx	r3
 80071ac:	3601      	adds	r6, #1
 80071ae:	e7f2      	b.n	8007196 <__libc_init_array+0x1e>
 80071b0:	08007284 	.word	0x08007284
 80071b4:	08007284 	.word	0x08007284
 80071b8:	08007284 	.word	0x08007284
 80071bc:	08007288 	.word	0x08007288

080071c0 <memcpy>:
 80071c0:	440a      	add	r2, r1
 80071c2:	4291      	cmp	r1, r2
 80071c4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80071c8:	d100      	bne.n	80071cc <memcpy+0xc>
 80071ca:	4770      	bx	lr
 80071cc:	b510      	push	{r4, lr}
 80071ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d6:	4291      	cmp	r1, r2
 80071d8:	d1f9      	bne.n	80071ce <memcpy+0xe>
 80071da:	bd10      	pop	{r4, pc}

080071dc <_init>:
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	bf00      	nop
 80071e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e2:	bc08      	pop	{r3}
 80071e4:	469e      	mov	lr, r3
 80071e6:	4770      	bx	lr

080071e8 <_fini>:
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	bf00      	nop
 80071ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ee:	bc08      	pop	{r3}
 80071f0:	469e      	mov	lr, r3
 80071f2:	4770      	bx	lr
