
G474RE-Firmware-FUN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b084  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a80  0801b268  0801b268  0001c268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cce8  0801cce8  0001ea20  2**0
                  CONTENTS
  4 .ARM          00000008  0801cce8  0801cce8  0001dce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ccf0  0801ccf0  0001ea20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801ccf0  0801ccf0  0001dcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801cd04  0801cd04  0001dd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a20  20000000  0801cd08  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b14c  20000a20  0801d728  0001ea20  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000bb6c  0801d728  0001eb6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001ea20  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002748d  00000000  00000000  0001ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055e3  00000000  00000000  00045edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  0004b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017a3  00000000  00000000  0004d348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de73  00000000  00000000  0004eaeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028180  00000000  00000000  0007c95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116df2  00000000  00000000  000a4ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001bb8d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090a4  00000000  00000000  001bb948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001c49ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a20 	.word	0x20000a20
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801b24c 	.word	0x0801b24c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a24 	.word	0x20000a24
 800021c:	0801b24c 	.word	0x0801b24c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 b9b5 	b.w	8000f54 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <calculate_gyro_angles>:
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void calculate_gyro_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT);
void calculate_accl_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT);

void calculate_gyro_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT) {
 8000f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f5c:	b08e      	sub	sp, #56	@ 0x38
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8000f64:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8000f68:	ed87 2b08 	vstr	d2, [r7, #32]
 8000f6c:	ed87 3b06 	vstr	d3, [r7, #24]
 8000f70:	ed87 4b04 	vstr	d4, [r7, #16]
 8000f74:	ed87 5b02 	vstr	d5, [r7, #8]
 8000f78:	ed87 6a01 	vstr	s12, [r7, #4]

	rotation_gyro.roll += (Gx * RAD_TO_DEG) * DT;
 8000f7c:	4b5e      	ldr	r3, [pc, #376]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 8000f7e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	4b5d      	ldr	r3, [pc, #372]	@ (80010fc <calculate_gyro_angles+0x1a4>)
 8000f88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f8c:	f7ff fb6c 	bl	8000668 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	a355      	add	r3, pc, #340	@ (adr r3, 80010f0 <calculate_gyro_angles+0x198>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	f7ff fc8d 	bl	80008bc <__aeabi_ddiv>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4690      	mov	r8, r2
 8000fa8:	4699      	mov	r9, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fb04 	bl	80005b8 <__aeabi_f2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	4649      	mov	r1, r9
 8000fb8:	f7ff fb56 	bl	8000668 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	4629      	mov	r1, r5
 8000fc4:	f7ff f99a 	bl	80002fc <__adddf3>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	494a      	ldr	r1, [pc, #296]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 8000fce:	e9c1 2300 	strd	r2, r3, [r1]
	rotation_gyro.pitch += (Gy * RAD_TO_DEG) * DT;
 8000fd2:	4b49      	ldr	r3, [pc, #292]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 8000fd4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b47      	ldr	r3, [pc, #284]	@ (80010fc <calculate_gyro_angles+0x1a4>)
 8000fde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fe2:	f7ff fb41 	bl	8000668 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	a340      	add	r3, pc, #256	@ (adr r3, 80010f0 <calculate_gyro_angles+0x198>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fc62 	bl	80008bc <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4690      	mov	r8, r2
 8000ffe:	4699      	mov	r9, r3
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff fad9 	bl	80005b8 <__aeabi_f2d>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4640      	mov	r0, r8
 800100c:	4649      	mov	r1, r9
 800100e:	f7ff fb2b 	bl	8000668 <__aeabi_dmul>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4620      	mov	r0, r4
 8001018:	4629      	mov	r1, r5
 800101a:	f7ff f96f 	bl	80002fc <__adddf3>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4935      	ldr	r1, [pc, #212]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 8001024:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rotation_gyro.yaw += (Gz * RAD_TO_DEG) * DT;
 8001028:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 800102a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <calculate_gyro_angles+0x1a4>)
 8001034:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001038:	f7ff fb16 	bl	8000668 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	a32a      	add	r3, pc, #168	@ (adr r3, 80010f0 <calculate_gyro_angles+0x198>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff fc37 	bl	80008bc <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4690      	mov	r8, r2
 8001054:	4699      	mov	r9, r3
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff faae 	bl	80005b8 <__aeabi_f2d>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4640      	mov	r0, r8
 8001062:	4649      	mov	r1, r9
 8001064:	f7ff fb00 	bl	8000668 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4620      	mov	r0, r4
 800106e:	4629      	mov	r1, r5
 8001070:	f7ff f944 	bl	80002fc <__adddf3>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	491f      	ldr	r1, [pc, #124]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 800107a:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_gyro.yaw > 180.0){
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 8001080:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <calculate_gyro_angles+0x1a4>)
 800108a:	f7ff fd7d 	bl	8000b88 <__aeabi_dcmpgt>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00d      	beq.n	80010b0 <calculate_gyro_angles+0x158>
    	rotation_gyro.yaw -= 360.0;
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 8001096:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <calculate_gyro_angles+0x1a8>)
 80010a0:	f7ff f92a 	bl	80002f8 <__aeabi_dsub>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4913      	ldr	r1, [pc, #76]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 80010aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_gyro.yaw < -180.0){
    	rotation_gyro.yaw += 360.0;
    }
}
 80010ae:	e018      	b.n	80010e2 <calculate_gyro_angles+0x18a>
    else if (rotation_gyro.yaw < -180.0){
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 80010b2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <calculate_gyro_angles+0x1ac>)
 80010bc:	f7ff fd46 	bl	8000b4c <__aeabi_dcmplt>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d100      	bne.n	80010c8 <calculate_gyro_angles+0x170>
}
 80010c6:	e00c      	b.n	80010e2 <calculate_gyro_angles+0x18a>
    	rotation_gyro.yaw += 360.0;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 80010ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <calculate_gyro_angles+0x1a8>)
 80010d4:	f7ff f912 	bl	80002fc <__adddf3>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4906      	ldr	r1, [pc, #24]	@ (80010f8 <calculate_gyro_angles+0x1a0>)
 80010de:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80010e2:	bf00      	nop
 80010e4:	3738      	adds	r7, #56	@ 0x38
 80010e6:	46bd      	mov	sp, r7
 80010e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010ec:	f3af 8000 	nop.w
 80010f0:	54442d18 	.word	0x54442d18
 80010f4:	400921fb 	.word	0x400921fb
 80010f8:	20000d80 	.word	0x20000d80
 80010fc:	40668000 	.word	0x40668000
 8001100:	40768000 	.word	0x40768000
 8001104:	c0668000 	.word	0xc0668000

08001108 <calculate_accl_angles>:

void calculate_accl_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT) {
 8001108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800110c:	b094      	sub	sp, #80	@ 0x50
 800110e:	af00      	add	r7, sp, #0
 8001110:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001114:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001118:	ed87 2b08 	vstr	d2, [r7, #32]
 800111c:	ed87 3b06 	vstr	d3, [r7, #24]
 8001120:	ed87 4b04 	vstr	d4, [r7, #16]
 8001124:	ed87 5b02 	vstr	d5, [r7, #8]
 8001128:	ed87 6a01 	vstr	s12, [r7, #4]

    double roll_acc = atan2(Ay, Az) * RAD_TO_DEG;
 800112c:	ed97 1b08 	vldr	d1, [r7, #32]
 8001130:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001134:	f019 fd18 	bl	801ab68 <atan2>
 8001138:	ec51 0b10 	vmov	r0, r1, d0
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b5f      	ldr	r3, [pc, #380]	@ (80012c0 <calculate_accl_angles+0x1b8>)
 8001142:	f7ff fa91 	bl	8000668 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	a35a      	add	r3, pc, #360	@ (adr r3, 80012b8 <calculate_accl_angles+0x1b0>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fbb2 	bl	80008bc <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double pitch_acc = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * RAD_TO_DEG;
 8001160:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001164:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001168:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800116c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001170:	f7ff fa7a 	bl	8000668 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4690      	mov	r8, r2
 800117a:	4699      	mov	r9, r3
 800117c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001180:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001184:	f7ff fa70 	bl	8000668 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4640      	mov	r0, r8
 800118e:	4649      	mov	r1, r9
 8001190:	f7ff f8b4 	bl	80002fc <__adddf3>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	ec43 2b17 	vmov	d7, r2, r3
 800119c:	eeb0 0a47 	vmov.f32	s0, s14
 80011a0:	eef0 0a67 	vmov.f32	s1, s15
 80011a4:	f019 fce2 	bl	801ab6c <sqrt>
 80011a8:	eeb0 7a40 	vmov.f32	s14, s0
 80011ac:	eef0 7a60 	vmov.f32	s15, s1
 80011b0:	eeb0 1a47 	vmov.f32	s2, s14
 80011b4:	eef0 1a67 	vmov.f32	s3, s15
 80011b8:	ec45 4b10 	vmov	d0, r4, r5
 80011bc:	f019 fcd4 	bl	801ab68 <atan2>
 80011c0:	ec51 0b10 	vmov	r0, r1, d0
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <calculate_accl_angles+0x1b8>)
 80011ca:	f7ff fa4d 	bl	8000668 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	a338      	add	r3, pc, #224	@ (adr r3, 80012b8 <calculate_accl_angles+0x1b0>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fb6e 	bl	80008bc <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double yaw_acc = (Gz * RAD_TO_DEG) * DT;
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	4b34      	ldr	r3, [pc, #208]	@ (80012c0 <calculate_accl_angles+0x1b8>)
 80011ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f2:	f7ff fa39 	bl	8000668 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	a32e      	add	r3, pc, #184	@ (adr r3, 80012b8 <calculate_accl_angles+0x1b0>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fb5a 	bl	80008bc <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4614      	mov	r4, r2
 800120e:	461d      	mov	r5, r3
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff f9d1 	bl	80005b8 <__aeabi_f2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	f7ff fa23 	bl	8000668 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38


    rotation_accl.roll = roll_acc;
 800122a:	4926      	ldr	r1, [pc, #152]	@ (80012c4 <calculate_accl_angles+0x1bc>)
 800122c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001230:	e9c1 2300 	strd	r2, r3, [r1]
    rotation_accl.pitch = pitch_acc;
 8001234:	4923      	ldr	r1, [pc, #140]	@ (80012c4 <calculate_accl_angles+0x1bc>)
 8001236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800123a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    rotation_accl.yaw = yaw_acc;
 800123e:	4921      	ldr	r1, [pc, #132]	@ (80012c4 <calculate_accl_angles+0x1bc>)
 8001240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001244:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_accl.yaw > 180.0){
 8001248:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <calculate_accl_angles+0x1bc>)
 800124a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <calculate_accl_angles+0x1b8>)
 8001254:	f7ff fc98 	bl	8000b88 <__aeabi_dcmpgt>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00d      	beq.n	800127a <calculate_accl_angles+0x172>
    	rotation_accl.yaw -= 360.0;
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <calculate_accl_angles+0x1bc>)
 8001260:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <calculate_accl_angles+0x1c0>)
 800126a:	f7ff f845 	bl	80002f8 <__aeabi_dsub>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4914      	ldr	r1, [pc, #80]	@ (80012c4 <calculate_accl_angles+0x1bc>)
 8001274:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_accl.yaw < -180.0){
    	rotation_accl.yaw += 360.0;
    }
}
 8001278:	e018      	b.n	80012ac <calculate_accl_angles+0x1a4>
    else if (rotation_accl.yaw < -180.0){
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <calculate_accl_angles+0x1bc>)
 800127c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <calculate_accl_angles+0x1c4>)
 8001286:	f7ff fc61 	bl	8000b4c <__aeabi_dcmplt>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d100      	bne.n	8001292 <calculate_accl_angles+0x18a>
}
 8001290:	e00c      	b.n	80012ac <calculate_accl_angles+0x1a4>
    	rotation_accl.yaw += 360.0;
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <calculate_accl_angles+0x1bc>)
 8001294:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <calculate_accl_angles+0x1c0>)
 800129e:	f7ff f82d 	bl	80002fc <__adddf3>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4907      	ldr	r1, [pc, #28]	@ (80012c4 <calculate_accl_angles+0x1bc>)
 80012a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80012ac:	bf00      	nop
 80012ae:	3750      	adds	r7, #80	@ 0x50
 80012b0:	46bd      	mov	sp, r7
 80012b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012b6:	bf00      	nop
 80012b8:	54442d18 	.word	0x54442d18
 80012bc:	400921fb 	.word	0x400921fb
 80012c0:	40668000 	.word	0x40668000
 80012c4:	20000d98 	.word	0x20000d98
 80012c8:	40768000 	.word	0x40768000
 80012cc:	c0668000 	.word	0xc0668000

080012d0 <timer_callback>:

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	ed2d 8b04 	vpush	{d8-d9}
 80012d6:	b094      	sub	sp, #80	@ 0x50
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	e9c7 2300 	strd	r2, r3, [r7]

	if (timer != NULL) {
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 818f 	beq.w	8001606 <timer_callback+0x336>
		uint32_t i2cError = HAL_I2C_GetError(&hi2c1);
 80012e8:	48a9      	ldr	r0, [pc, #676]	@ (8001590 <timer_callback+0x2c0>)
 80012ea:	f002 ff1f 	bl	800412c <HAL_I2C_GetError>
 80012ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		if (i2cError == HAL_I2C_ERROR_NONE){
 80012f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 8162 	bne.w	80015bc <timer_callback+0x2ec>
			if (is_calib || on_calib){
 80012f8:	4ba6      	ldr	r3, [pc, #664]	@ (8001594 <timer_callback+0x2c4>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d104      	bne.n	800130a <timer_callback+0x3a>
 8001300:	4ba5      	ldr	r3, [pc, #660]	@ (8001598 <timer_callback+0x2c8>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 8175 	beq.w	80015f4 <timer_callback+0x324>
				MPU6050_Read_All(&hi2c1, &MPU6050);
 800130a:	49a4      	ldr	r1, [pc, #656]	@ (800159c <timer_callback+0x2cc>)
 800130c:	48a0      	ldr	r0, [pc, #640]	@ (8001590 <timer_callback+0x2c0>)
 800130e:	f006 fcbb 	bl	8007c88 <MPU6050_Read_All>

				double Ax = (GRAVITY * MPU6050.Ax) - accl_offset.x;
 8001312:	4ba2      	ldr	r3, [pc, #648]	@ (800159c <timer_callback+0x2cc>)
 8001314:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001318:	a399      	add	r3, pc, #612	@ (adr r3, 8001580 <timer_callback+0x2b0>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f9a3 	bl	8000668 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	4b9d      	ldr	r3, [pc, #628]	@ (80015a0 <timer_callback+0x2d0>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7fe ffe2 	bl	80002f8 <__aeabi_dsub>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
				double Ay = (GRAVITY * MPU6050.Ay) - accl_offset.y;
 800133c:	4b97      	ldr	r3, [pc, #604]	@ (800159c <timer_callback+0x2cc>)
 800133e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001342:	a38f      	add	r3, pc, #572	@ (adr r3, 8001580 <timer_callback+0x2b0>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f98e 	bl	8000668 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	4b92      	ldr	r3, [pc, #584]	@ (80015a0 <timer_callback+0x2d0>)
 8001356:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800135a:	f7fe ffcd 	bl	80002f8 <__aeabi_dsub>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
				double Az = (GRAVITY * MPU6050.Az) - accl_offset.z;
 8001366:	4b8d      	ldr	r3, [pc, #564]	@ (800159c <timer_callback+0x2cc>)
 8001368:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800136c:	a384      	add	r3, pc, #528	@ (adr r3, 8001580 <timer_callback+0x2b0>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f979 	bl	8000668 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	4b88      	ldr	r3, [pc, #544]	@ (80015a0 <timer_callback+0x2d0>)
 8001380:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001384:	f7fe ffb8 	bl	80002f8 <__aeabi_dsub>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

				double Gx = (DEG_TO_RAD * MPU6050.Gx) - gyro_offset.x;
 8001390:	4b82      	ldr	r3, [pc, #520]	@ (800159c <timer_callback+0x2cc>)
 8001392:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001396:	a37c      	add	r3, pc, #496	@ (adr r3, 8001588 <timer_callback+0x2b8>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff f964 	bl	8000668 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	4b7e      	ldr	r3, [pc, #504]	@ (80015a4 <timer_callback+0x2d4>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7fe ffa3 	bl	80002f8 <__aeabi_dsub>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
				double Gy = (DEG_TO_RAD * MPU6050.Gy) - gyro_offset.y;
 80013ba:	4b78      	ldr	r3, [pc, #480]	@ (800159c <timer_callback+0x2cc>)
 80013bc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80013c0:	a371      	add	r3, pc, #452	@ (adr r3, 8001588 <timer_callback+0x2b8>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f94f 	bl	8000668 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	4b74      	ldr	r3, [pc, #464]	@ (80015a4 <timer_callback+0x2d4>)
 80013d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013d8:	f7fe ff8e 	bl	80002f8 <__aeabi_dsub>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
				double Gz = (DEG_TO_RAD * MPU6050.Gz) - gyro_offset.z;
 80013e4:	4b6d      	ldr	r3, [pc, #436]	@ (800159c <timer_callback+0x2cc>)
 80013e6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80013ea:	a367      	add	r3, pc, #412	@ (adr r3, 8001588 <timer_callback+0x2b8>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff f93a 	bl	8000668 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	4b69      	ldr	r3, [pc, #420]	@ (80015a4 <timer_callback+0x2d4>)
 80013fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001402:	f7fe ff79 	bl	80002f8 <__aeabi_dsub>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	e9c7 2306 	strd	r2, r3, [r7, #24]

				mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 800140e:	f00d fca7 	bl	800ed60 <rmw_uros_epoch_millis>
 8001412:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f7ff fbd5 	bl	8000bc8 <__aeabi_ldivmod>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4b61      	ldr	r3, [pc, #388]	@ (80015a8 <timer_callback+0x2d8>)
 8001424:	601a      	str	r2, [r3, #0]
				mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 8001426:	f00d fca9 	bl	800ed7c <rmw_uros_epoch_nanos>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4b5e      	ldr	r3, [pc, #376]	@ (80015a8 <timer_callback+0x2d8>)
 8001430:	605a      	str	r2, [r3, #4]

				mpu6050_msg.linear_acceleration.x = Ax;
 8001432:	495d      	ldr	r1, [pc, #372]	@ (80015a8 <timer_callback+0x2d8>)
 8001434:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001438:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
				mpu6050_msg.linear_acceleration.y = Ay;
 800143c:	495a      	ldr	r1, [pc, #360]	@ (80015a8 <timer_callback+0x2d8>)
 800143e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001442:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
				mpu6050_msg.linear_acceleration.z = Az;
 8001446:	4958      	ldr	r1, [pc, #352]	@ (80015a8 <timer_callback+0x2d8>)
 8001448:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800144c:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

				mpu6050_msg.angular_velocity.x = Gx;
 8001450:	4955      	ldr	r1, [pc, #340]	@ (80015a8 <timer_callback+0x2d8>)
 8001452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001456:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
				mpu6050_msg.angular_velocity.y = Gy;
 800145a:	4953      	ldr	r1, [pc, #332]	@ (80015a8 <timer_callback+0x2d8>)
 800145c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001460:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
				mpu6050_msg.angular_velocity.z = Gz;
 8001464:	4950      	ldr	r1, [pc, #320]	@ (80015a8 <timer_callback+0x2d8>)
 8001466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800146a:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

				rcl_ret_t ret = rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL);
 800146e:	2200      	movs	r2, #0
 8001470:	494d      	ldr	r1, [pc, #308]	@ (80015a8 <timer_callback+0x2d8>)
 8001472:	484e      	ldr	r0, [pc, #312]	@ (80015ac <timer_callback+0x2dc>)
 8001474:	f00b fcd8 	bl	800ce28 <rcl_publish>
 8001478:	6178      	str	r0, [r7, #20]
				if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <timer_callback+0x1b8>
 8001480:	21cf      	movs	r1, #207	@ 0xcf
 8001482:	484b      	ldr	r0, [pc, #300]	@ (80015b0 <timer_callback+0x2e0>)
 8001484:	f018 fae6 	bl	8019a54 <iprintf>

				rotation_real.roll = MPU6050.KalmanAngleX;
 8001488:	4b44      	ldr	r3, [pc, #272]	@ (800159c <timer_callback+0x2cc>)
 800148a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800148e:	4949      	ldr	r1, [pc, #292]	@ (80015b4 <timer_callback+0x2e4>)
 8001490:	e9c1 2300 	strd	r2, r3, [r1]
				rotation_real.pitch = MPU6050.KalmanAngleY;
 8001494:	4b41      	ldr	r3, [pc, #260]	@ (800159c <timer_callback+0x2cc>)
 8001496:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800149a:	4946      	ldr	r1, [pc, #280]	@ (80015b4 <timer_callback+0x2e4>)
 800149c:	e9c1 2302 	strd	r2, r3, [r1, #8]

				calculate_gyro_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 80014a0:	a337      	add	r3, pc, #220	@ (adr r3, 8001580 <timer_callback+0x2b0>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80014aa:	f7ff fa07 	bl	80008bc <__aeabi_ddiv>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	ec43 2b18 	vmov	d8, r2, r3
 80014b6:	a332      	add	r3, pc, #200	@ (adr r3, 8001580 <timer_callback+0x2b0>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80014c0:	f7ff f9fc 	bl	80008bc <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	ec43 2b19 	vmov	d9, r2, r3
 80014cc:	a32c      	add	r3, pc, #176	@ (adr r3, 8001580 <timer_callback+0x2b0>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014d6:	f7ff f9f1 	bl	80008bc <__aeabi_ddiv>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	ec43 2b17 	vmov	d7, r2, r3
 80014e2:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80015b8 <timer_callback+0x2e8>
 80014e6:	ed97 5b06 	vldr	d5, [r7, #24]
 80014ea:	ed97 4b08 	vldr	d4, [r7, #32]
 80014ee:	ed97 3b0a 	vldr	d3, [r7, #40]	@ 0x28
 80014f2:	eeb0 2a47 	vmov.f32	s4, s14
 80014f6:	eef0 2a67 	vmov.f32	s5, s15
 80014fa:	eeb0 1a49 	vmov.f32	s2, s18
 80014fe:	eef0 1a69 	vmov.f32	s3, s19
 8001502:	eeb0 0a48 	vmov.f32	s0, s16
 8001506:	eef0 0a68 	vmov.f32	s1, s17
 800150a:	f7ff fd25 	bl	8000f58 <calculate_gyro_angles>
				calculate_accl_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 800150e:	a31c      	add	r3, pc, #112	@ (adr r3, 8001580 <timer_callback+0x2b0>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001518:	f7ff f9d0 	bl	80008bc <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	ec43 2b18 	vmov	d8, r2, r3
 8001524:	a316      	add	r3, pc, #88	@ (adr r3, 8001580 <timer_callback+0x2b0>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800152e:	f7ff f9c5 	bl	80008bc <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	ec43 2b19 	vmov	d9, r2, r3
 800153a:	a311      	add	r3, pc, #68	@ (adr r3, 8001580 <timer_callback+0x2b0>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001544:	f7ff f9ba 	bl	80008bc <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	ec43 2b17 	vmov	d7, r2, r3
 8001550:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 80015b8 <timer_callback+0x2e8>
 8001554:	ed97 5b06 	vldr	d5, [r7, #24]
 8001558:	ed97 4b08 	vldr	d4, [r7, #32]
 800155c:	ed97 3b0a 	vldr	d3, [r7, #40]	@ 0x28
 8001560:	eeb0 2a47 	vmov.f32	s4, s14
 8001564:	eef0 2a67 	vmov.f32	s5, s15
 8001568:	eeb0 1a49 	vmov.f32	s2, s18
 800156c:	eef0 1a69 	vmov.f32	s3, s19
 8001570:	eeb0 0a48 	vmov.f32	s0, s16
 8001574:	eef0 0a68 	vmov.f32	s1, s17
 8001578:	f7ff fdc6 	bl	8001108 <calculate_accl_angles>
 800157c:	e03a      	b.n	80015f4 <timer_callback+0x324>
 800157e:	bf00      	nop
 8001580:	3a92a305 	.word	0x3a92a305
 8001584:	40239d01 	.word	0x40239d01
 8001588:	a2529d39 	.word	0xa2529d39
 800158c:	3f91df46 	.word	0x3f91df46
 8001590:	20004928 	.word	0x20004928
 8001594:	20000dc8 	.word	0x20000dc8
 8001598:	20000dc9 	.word	0x20000dc9
 800159c:	20000cf0 	.word	0x20000cf0
 80015a0:	20000d50 	.word	0x20000d50
 80015a4:	20000d68 	.word	0x20000d68
 80015a8:	20000a48 	.word	0x20000a48
 80015ac:	20000a44 	.word	0x20000a44
 80015b0:	0801b274 	.word	0x0801b274
 80015b4:	20000db0 	.word	0x20000db0
 80015b8:	3c23d70a 	.word	0x3c23d70a
			}
		}
		else
		{
			static uint32_t timestamp = 0;
			if (timestamp <= HAL_GetTick()){
 80015bc:	f001 fbc2 	bl	8002d44 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <timer_callback+0x344>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d314      	bcc.n	80015f4 <timer_callback+0x324>
				timestamp = HAL_GetTick() + 1000;
 80015ca:	f001 fbbb 	bl	8002d44 <HAL_GetTick>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80015d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001614 <timer_callback+0x344>)
 80015d6:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015d8:	2120      	movs	r1, #32
 80015da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015de:	f002 fa6f 	bl	8003ac0 <HAL_GPIO_TogglePin>
				HAL_I2C_DeInit(&hi2c1);
 80015e2:	480d      	ldr	r0, [pc, #52]	@ (8001618 <timer_callback+0x348>)
 80015e4:	f002 fb44 	bl	8003c70 <HAL_I2C_DeInit>
				HAL_I2C_Init(&hi2c1);
 80015e8:	480b      	ldr	r0, [pc, #44]	@ (8001618 <timer_callback+0x348>)
 80015ea:	f002 faa6 	bl	8003b3a <HAL_I2C_Init>
				MPU6050_Init(&hi2c1);
 80015ee:	480a      	ldr	r0, [pc, #40]	@ (8001618 <timer_callback+0x348>)
 80015f0:	f006 faf2 	bl	8007bd8 <MPU6050_Init>
			}
		}

	    HAL_IWDG_Refresh(&hiwdg);
 80015f4:	4809      	ldr	r0, [pc, #36]	@ (800161c <timer_callback+0x34c>)
 80015f6:	f003 f94d 	bl	8004894 <HAL_IWDG_Refresh>
	    cc++;
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <timer_callback+0x350>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <timer_callback+0x350>)
 8001604:	801a      	strh	r2, [r3, #0]
	}
}
 8001606:	bf00      	nop
 8001608:	3750      	adds	r7, #80	@ 0x50
 800160a:	46bd      	mov	sp, r7
 800160c:	ecbd 8b04 	vpop	{d8-d9}
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20003d0c 	.word	0x20003d0c
 8001618:	20004928 	.word	0x20004928
 800161c:	2000497c 	.word	0x2000497c
 8001620:	20000d48 	.word	0x20000d48

08001624 <imu_calib_service_callback>:

void imu_calib_service_callback(const void * request_msg, void * response_msg){
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  imu_interfaces__srv__ImuCalibration_Request * req_in =
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	617b      	str	r3, [r7, #20]
    (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
  imu_interfaces__srv__ImuCalibration_Response * res_in =
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	613b      	str	r3, [r7, #16]
    (imu_interfaces__srv__ImuCalibration_Response *) response_msg;

  size_t accl_size = sizeof(req_in->imu_calib.linear_acceleration_covariance);
 8001636:	2348      	movs	r3, #72	@ 0x48
 8001638:	60fb      	str	r3, [r7, #12]
  size_t gyro_size = sizeof(req_in->imu_calib.angular_velocity_covariance);
 800163a:	2348      	movs	r3, #72	@ 0x48
 800163c:	60bb      	str	r3, [r7, #8]
  memcpy(mpu6050_msg.linear_acceleration_covariance, req_in->imu_calib.linear_acceleration_covariance, accl_size);
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	33f8      	adds	r3, #248	@ 0xf8
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4619      	mov	r1, r3
 8001646:	481e      	ldr	r0, [pc, #120]	@ (80016c0 <imu_calib_service_callback+0x9c>)
 8001648:	f018 fc4d 	bl	8019ee6 <memcpy>
  memcpy(mpu6050_msg.angular_velocity_covariance, req_in->imu_calib.angular_velocity_covariance, gyro_size);
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3398      	adds	r3, #152	@ 0x98
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	4619      	mov	r1, r3
 8001654:	481b      	ldr	r0, [pc, #108]	@ (80016c4 <imu_calib_service_callback+0xa0>)
 8001656:	f018 fc46 	bl	8019ee6 <memcpy>

  accl_offset.x = req_in->imu_calib.linear_acceleration.x;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8001660:	4919      	ldr	r1, [pc, #100]	@ (80016c8 <imu_calib_service_callback+0xa4>)
 8001662:	e9c1 2300 	strd	r2, r3, [r1]
  accl_offset.y = req_in->imu_calib.linear_acceleration.y;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 800166c:	4916      	ldr	r1, [pc, #88]	@ (80016c8 <imu_calib_service_callback+0xa4>)
 800166e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  accl_offset.z = req_in->imu_calib.linear_acceleration.z;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8001678:	4913      	ldr	r1, [pc, #76]	@ (80016c8 <imu_calib_service_callback+0xa4>)
 800167a:	e9c1 2304 	strd	r2, r3, [r1, #16]

  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001684:	4911      	ldr	r1, [pc, #68]	@ (80016cc <imu_calib_service_callback+0xa8>)
 8001686:	e9c1 2300 	strd	r2, r3, [r1]
  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001690:	490e      	ldr	r1, [pc, #56]	@ (80016cc <imu_calib_service_callback+0xa8>)
 8001692:	e9c1 2302 	strd	r2, r3, [r1, #8]
  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800169c:	490b      	ldr	r1, [pc, #44]	@ (80016cc <imu_calib_service_callback+0xa8>)
 800169e:	e9c1 2304 	strd	r2, r3, [r1, #16]

  is_calib = true;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <imu_calib_service_callback+0xac>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
  res_in->success = true;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80016ae:	2120      	movs	r1, #32
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b4:	f002 fa04 	bl	8003ac0 <HAL_GPIO_TogglePin>

}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000b40 	.word	0x20000b40
 80016c4:	20000ae0 	.word	0x20000ae0
 80016c8:	20000d50 	.word	0x20000d50
 80016cc:	20000d68 	.word	0x20000d68
 80016d0:	20000dc8 	.word	0x20000dc8

080016d4 <imu_status_service_callback>:

void imu_status_service_callback(const void * request_msg, void * response_msg){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  std_srvs__srv__SetBool_Request * req_in =
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	617b      	str	r3, [r7, #20]
    (std_srvs__srv__SetBool_Request *) request_msg;
  std_srvs__srv__SetBool_Response * res_in =
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	613b      	str	r3, [r7, #16]
    (std_srvs__srv__SetBool_Response *) response_msg;

  if (req_in->data){
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d020      	beq.n	8001730 <imu_status_service_callback+0x5c>
	  uint32_t i2cError = HAL_I2C_GetError(&hi2c1);
 80016ee:	4815      	ldr	r0, [pc, #84]	@ (8001744 <imu_status_service_callback+0x70>)
 80016f0:	f002 fd1c 	bl	800412c <HAL_I2C_GetError>
 80016f4:	60f8      	str	r0, [r7, #12]
	  if (i2cError == HAL_I2C_ERROR_NONE) {
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10c      	bne.n	8001716 <imu_status_service_callback+0x42>
	      res_in->success = true;
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is connected.";
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4a10      	ldr	r2, [pc, #64]	@ (8001748 <imu_status_service_callback+0x74>)
 8001706:	605a      	str	r2, [r3, #4]
		  cs++;
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <imu_status_service_callback+0x78>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <imu_status_service_callback+0x78>)
 8001712:	801a      	strh	r2, [r3, #0]
  else{
      res_in->success = false;
      res_in->message.data = "Request false.";
  }

}
 8001714:	e012      	b.n	800173c <imu_status_service_callback+0x68>
	      res_in->success = false;
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is not connect, Error with I2C interfaces.";
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4a0c      	ldr	r2, [pc, #48]	@ (8001750 <imu_status_service_callback+0x7c>)
 8001720:	605a      	str	r2, [r3, #4]
		  ct++;
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <imu_status_service_callback+0x80>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <imu_status_service_callback+0x80>)
 800172c:	801a      	strh	r2, [r3, #0]
}
 800172e:	e005      	b.n	800173c <imu_status_service_callback+0x68>
      res_in->success = false;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
      res_in->message.data = "Request false.";
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <imu_status_service_callback+0x84>)
 800173a:	605a      	str	r2, [r3, #4]
}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20004928 	.word	0x20004928
 8001748:	0801b290 	.word	0x0801b290
 800174c:	20000d4a 	.word	0x20000d4a
 8001750:	0801b2a8 	.word	0x0801b2a8
 8001754:	20000d4c 	.word	0x20000d4c
 8001758:	0801b2dc 	.word	0x0801b2dc

0800175c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  while (MPU6050_Init(&hi2c1) == 1);
 8001760:	bf00      	nop
 8001762:	4808      	ldr	r0, [pc, #32]	@ (8001784 <MX_FREERTOS_Init+0x28>)
 8001764:	f006 fa38 	bl	8007bd8 <MPU6050_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d0f9      	beq.n	8001762 <MX_FREERTOS_Init+0x6>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800176e:	4a06      	ldr	r2, [pc, #24]	@ (8001788 <MX_FREERTOS_Init+0x2c>)
 8001770:	2100      	movs	r1, #0
 8001772:	4806      	ldr	r0, [pc, #24]	@ (800178c <MX_FREERTOS_Init+0x30>)
 8001774:	f006 fe58 	bl	8008428 <osThreadNew>
 8001778:	4603      	mov	r3, r0
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <MX_FREERTOS_Init+0x34>)
 800177c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20004928 	.word	0x20004928
 8001788:	0801b3a8 	.word	0x0801b3a8
 800178c:	08001795 	.word	0x08001795
 8001790:	20000dcc 	.word	0x20000dcc

08001794 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001794:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001798:	b0f0      	sub	sp, #448	@ 0x1c0
 800179a:	af02      	add	r7, sp, #8
 800179c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80017a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017a4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 80017a6:	4b8e      	ldr	r3, [pc, #568]	@ (80019e0 <StartDefaultTask+0x24c>)
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	4b8e      	ldr	r3, [pc, #568]	@ (80019e4 <StartDefaultTask+0x250>)
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	4b8e      	ldr	r3, [pc, #568]	@ (80019e8 <StartDefaultTask+0x254>)
 80017b0:	4a8e      	ldr	r2, [pc, #568]	@ (80019ec <StartDefaultTask+0x258>)
 80017b2:	498f      	ldr	r1, [pc, #572]	@ (80019f0 <StartDefaultTask+0x25c>)
 80017b4:	2001      	movs	r0, #1
 80017b6:	f00c fbf7 	bl	800dfa8 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80017ba:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80017be:	4618      	mov	r0, r3
 80017c0:	f00c fb0e 	bl	800dde0 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80017c4:	4b8b      	ldr	r3, [pc, #556]	@ (80019f4 <StartDefaultTask+0x260>)
 80017c6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.deallocate = microros_deallocate;
 80017ca:	4b8b      	ldr	r3, [pc, #556]	@ (80019f8 <StartDefaultTask+0x264>)
 80017cc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.reallocate = microros_reallocate;
 80017d0:	4b8a      	ldr	r3, [pc, #552]	@ (80019fc <StartDefaultTask+0x268>)
 80017d2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80017d6:	4b8a      	ldr	r3, [pc, #552]	@ (8001a00 <StartDefaultTask+0x26c>)
 80017d8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80017dc:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00c fb0b 	bl	800ddfc <rcutils_set_default_allocator>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f083 0301 	eor.w	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <StartDefaultTask+0x68>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 80017f2:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80017f6:	4883      	ldr	r0, [pc, #524]	@ (8001a04 <StartDefaultTask+0x270>)
 80017f8:	f018 f92c 	bl	8019a54 <iprintf>
	}

	GPIO_PinState B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80017fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001800:	4881      	ldr	r0, [pc, #516]	@ (8001a08 <StartDefaultTask+0x274>)
 8001802:	f002 f92d 	bl	8003a60 <HAL_GPIO_ReadPin>
 8001806:	4603      	mov	r3, r0
 8001808:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(10);
 800180c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a0c <StartDefaultTask+0x278>)
 800180e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	const int timeout_ms = 5000;
 8001812:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001816:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	int executor_num = 2;
 800181a:	2302      	movs	r3, #2
 800181c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

	// Get message type support
	const rosidl_message_type_support_t * imu_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu);
 8001820:	f00d ff40 	bl	800f6a4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001824:	f8c7 01a4 	str.w	r0, [r7, #420]	@ 0x1a4

	const rosidl_message_type_support_t * cmd_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist);
 8001828:	f009 fb5e 	bl	800aee8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800182c:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0

	const rosidl_service_type_support_t * imu_calib_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration);
 8001830:	f009 fc96 	bl	800b160 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 8001834:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

	const rosidl_service_type_support_t * imu_status_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool);
 8001838:	f00e f95a 	bl	800faf0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 800183c:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	allocator = rcl_get_default_allocator();
 8001840:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001844:	f5a3 7486 	sub.w	r4, r3, #268	@ 0x10c
 8001848:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800184c:	4618      	mov	r0, r3
 800184e:	f00c faf3 	bl	800de38 <rcutils_get_default_allocator>
 8001852:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001856:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800185a:	461d      	mov	r5, r3
 800185c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 8001864:	463b      	mov	r3, r7
 8001866:	4618      	mov	r0, r3
 8001868:	f00b fe6c 	bl	800d544 <rclc_executor_get_zero_initialized_executor>
 800186c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001870:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8001874:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001878:	4611      	mov	r1, r2
 800187a:	2288      	movs	r2, #136	@ 0x88
 800187c:	4618      	mov	r0, r3
 800187e:	f018 fb32 	bl	8019ee6 <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 8001882:	f00b f901 	bl	800ca88 <rcl_get_zero_initialized_init_options>
 8001886:	4602      	mov	r2, r0
 8001888:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800188c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001890:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8001892:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001896:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800189a:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 800189e:	466d      	mov	r5, sp
 80018a0:	f103 020c 	add.w	r2, r3, #12
 80018a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80018ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ae:	4620      	mov	r0, r4
 80018b0:	f00b f8ec 	bl	800ca8c <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 69));
 80018b4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80018b8:	2145      	movs	r1, #69	@ 0x45
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00b f9e2 	bl	800cc84 <rcl_init_options_set_domain_id>

	//create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80018c0:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80018c4:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 80018c8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	4613      	mov	r3, r2
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	f00c f940 	bl	800db58 <rclc_support_init_with_options>

	//create timer
	rclc_timer_init_default(&mpu6050_timer, &support, timer_period, timer_callback);
 80018d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80018dc:	2200      	movs	r2, #0
 80018de:	4698      	mov	r8, r3
 80018e0:	4691      	mov	r9, r2
 80018e2:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80018e6:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80018ea:	4b49      	ldr	r3, [pc, #292]	@ (8001a10 <StartDefaultTask+0x27c>)
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	4642      	mov	r2, r8
 80018f0:	464b      	mov	r3, r9
 80018f2:	f00c fa3d 	bl	800dd70 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "G474RE_MPU6050_node", "", &support);
 80018f6:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80018fa:	4a46      	ldr	r2, [pc, #280]	@ (8001a14 <StartDefaultTask+0x280>)
 80018fc:	4946      	ldr	r1, [pc, #280]	@ (8001a18 <StartDefaultTask+0x284>)
 80018fe:	4847      	ldr	r0, [pc, #284]	@ (8001a1c <StartDefaultTask+0x288>)
 8001900:	f00c f95e 	bl	800dbc0 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&mpu6050_publisher, &node, imu_type_support, "mpu6050_publisher");
 8001904:	4b46      	ldr	r3, [pc, #280]	@ (8001a20 <StartDefaultTask+0x28c>)
 8001906:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800190a:	4944      	ldr	r1, [pc, #272]	@ (8001a1c <StartDefaultTask+0x288>)
 800190c:	4845      	ldr	r0, [pc, #276]	@ (8001a24 <StartDefaultTask+0x290>)
 800190e:	f00c f9c7 	bl	800dca0 <rclc_publisher_init_best_effort>
	rclc_publisher_init_default(&cmd_vel_publisher, &node, cmd_type_support, "cmd_vel");
 8001912:	4b45      	ldr	r3, [pc, #276]	@ (8001a28 <StartDefaultTask+0x294>)
 8001914:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8001918:	4940      	ldr	r1, [pc, #256]	@ (8001a1c <StartDefaultTask+0x288>)
 800191a:	4844      	ldr	r0, [pc, #272]	@ (8001a2c <StartDefaultTask+0x298>)
 800191c:	f00c f98c 	bl	800dc38 <rclc_publisher_init_default>

	//create subscriber


	//create service server
	if (B1 == GPIO_PIN_RESET) {
 8001920:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10c      	bne.n	8001942 <StartDefaultTask+0x1ae>
		rclc_service_init_default(&imu_calibration_server, &node, imu_calib_type_support, "imu_calibration");
 8001928:	4b41      	ldr	r3, [pc, #260]	@ (8001a30 <StartDefaultTask+0x29c>)
 800192a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800192e:	493b      	ldr	r1, [pc, #236]	@ (8001a1c <StartDefaultTask+0x288>)
 8001930:	4840      	ldr	r0, [pc, #256]	@ (8001a34 <StartDefaultTask+0x2a0>)
 8001932:	f00c f9e9 	bl	800dd08 <rclc_service_init_default>
		executor_num++;
 8001936:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800193a:	3301      	adds	r3, #1
 800193c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001940:	e002      	b.n	8001948 <StartDefaultTask+0x1b4>
	}
	else{
		on_calib = true;
 8001942:	4b3d      	ldr	r3, [pc, #244]	@ (8001a38 <StartDefaultTask+0x2a4>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
	}

	rclc_service_init_default(&imu_status_server, &node, imu_status_type_support, "imu/status");
 8001948:	4b3c      	ldr	r3, [pc, #240]	@ (8001a3c <StartDefaultTask+0x2a8>)
 800194a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800194e:	4933      	ldr	r1, [pc, #204]	@ (8001a1c <StartDefaultTask+0x288>)
 8001950:	483b      	ldr	r0, [pc, #236]	@ (8001a40 <StartDefaultTask+0x2ac>)
 8001952:	f00c f9d9 	bl	800dd08 <rclc_service_init_default>
	//create service client


	//create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 8001956:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800195a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800195e:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 8001962:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001966:	f00b fdf7 	bl	800d558 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &mpu6050_timer);
 800196a:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800196e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f00b fe5f 	bl	800d638 <rclc_executor_add_timer>
	if (B1 == GPIO_PIN_RESET) rclc_executor_add_service(&executor, &imu_calibration_server, &imu_calibration_request, &imu_calibration_response, imu_calib_service_callback);
 800197a:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d108      	bne.n	8001994 <StartDefaultTask+0x200>
 8001982:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001986:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <StartDefaultTask+0x2b0>)
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a48 <StartDefaultTask+0x2b4>)
 800198c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a4c <StartDefaultTask+0x2b8>)
 800198e:	4929      	ldr	r1, [pc, #164]	@ (8001a34 <StartDefaultTask+0x2a0>)
 8001990:	f00b fe7c 	bl	800d68c <rclc_executor_add_service>
	rclc_executor_add_service(&executor, &imu_status_server, &imu_status_request, &imu_status_response, imu_status_service_callback);
 8001994:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001998:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <StartDefaultTask+0x2bc>)
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a54 <StartDefaultTask+0x2c0>)
 800199e:	4a2e      	ldr	r2, [pc, #184]	@ (8001a58 <StartDefaultTask+0x2c4>)
 80019a0:	4927      	ldr	r1, [pc, #156]	@ (8001a40 <StartDefaultTask+0x2ac>)
 80019a2:	f00b fe73 	bl	800d68c <rclc_executor_add_service>

	rclc_executor_spin(&executor);
 80019a6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f00c f894 	bl	800dad8 <rclc_executor_spin>

	rmw_uros_sync_session(timeout_ms);
 80019b0:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 80019b4:	f00d f9f0 	bl	800ed98 <rmw_uros_sync_session>

	//create message
	mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 80019b8:	4c28      	ldr	r4, [pc, #160]	@ (8001a5c <StartDefaultTask+0x2c8>)
 80019ba:	463b      	mov	r3, r7
 80019bc:	4928      	ldr	r1, [pc, #160]	@ (8001a60 <StartDefaultTask+0x2cc>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f009 fcbe 	bl	800b340 <micro_ros_string_utilities_init>
 80019c4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80019c8:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 80019cc:	f104 0308 	add.w	r3, r4, #8
 80019d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for(;;)
	{
		osDelay(10);
 80019d6:	200a      	movs	r0, #10
 80019d8:	f006 fdb8 	bl	800854c <osDelay>
 80019dc:	e7fb      	b.n	80019d6 <StartDefaultTask+0x242>
 80019de:	bf00      	nop
 80019e0:	08002bf5 	.word	0x08002bf5
 80019e4:	08002b91 	.word	0x08002b91
 80019e8:	08002b71 	.word	0x08002b71
 80019ec:	08002b45 	.word	0x08002b45
 80019f0:	200049e8 	.word	0x200049e8
 80019f4:	080022f5 	.word	0x080022f5
 80019f8:	08002339 	.word	0x08002339
 80019fc:	08002371 	.word	0x08002371
 8001a00:	080023dd 	.word	0x080023dd
 8001a04:	0801b2ec 	.word	0x0801b2ec
 8001a08:	48000800 	.word	0x48000800
 8001a0c:	00989680 	.word	0x00989680
 8001a10:	080012d1 	.word	0x080012d1
 8001a14:	0801b314 	.word	0x0801b314
 8001a18:	0801b318 	.word	0x0801b318
 8001a1c:	20000a3c 	.word	0x20000a3c
 8001a20:	0801b32c 	.word	0x0801b32c
 8001a24:	20000a44 	.word	0x20000a44
 8001a28:	0801b340 	.word	0x0801b340
 8001a2c:	20000b88 	.word	0x20000b88
 8001a30:	0801b348 	.word	0x0801b348
 8001a34:	20000b8c 	.word	0x20000b8c
 8001a38:	20000dc9 	.word	0x20000dc9
 8001a3c:	0801b358 	.word	0x0801b358
 8001a40:	20000cd4 	.word	0x20000cd4
 8001a44:	08001625 	.word	0x08001625
 8001a48:	20000cd0 	.word	0x20000cd0
 8001a4c:	20000b90 	.word	0x20000b90
 8001a50:	080016d5 	.word	0x080016d5
 8001a54:	20000cdc 	.word	0x20000cdc
 8001a58:	20000cd8 	.word	0x20000cd8
 8001a5c:	20000a48 	.word	0x20000a48
 8001a60:	0801b364 	.word	0x0801b364

08001a64 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	@ 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001a70:	f007 fdae 	bl	80095d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001a74:	4b5a      	ldr	r3, [pc, #360]	@ (8001be0 <pvPortMallocMicroROS+0x17c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001a7c:	f000 f986 	bl	8001d8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001a80:	4b58      	ldr	r3, [pc, #352]	@ (8001be4 <pvPortMallocMicroROS+0x180>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f040 8090 	bne.w	8001bae <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01e      	beq.n	8001ad2 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001a94:	2208      	movs	r2, #8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d015      	beq.n	8001ad2 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f023 0307 	bic.w	r3, r3, #7
 8001aac:	3308      	adds	r3, #8
 8001aae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00b      	beq.n	8001ad2 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001abe:	f383 8811 	msr	BASEPRI, r3
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	e7fd      	b.n	8001ace <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d06a      	beq.n	8001bae <pvPortMallocMicroROS+0x14a>
 8001ad8:	4b43      	ldr	r3, [pc, #268]	@ (8001be8 <pvPortMallocMicroROS+0x184>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d865      	bhi.n	8001bae <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001ae2:	4b42      	ldr	r3, [pc, #264]	@ (8001bec <pvPortMallocMicroROS+0x188>)
 8001ae4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001ae6:	4b41      	ldr	r3, [pc, #260]	@ (8001bec <pvPortMallocMicroROS+0x188>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001aec:	e004      	b.n	8001af8 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d903      	bls.n	8001b0a <pvPortMallocMicroROS+0xa6>
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f1      	bne.n	8001aee <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001b0a:	4b35      	ldr	r3, [pc, #212]	@ (8001be0 <pvPortMallocMicroROS+0x17c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d04c      	beq.n	8001bae <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2208      	movs	r2, #8
 8001b1a:	4413      	add	r3, r2
 8001b1c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	2308      	movs	r3, #8
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d920      	bls.n	8001b78 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00b      	beq.n	8001b60 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b4c:	f383 8811 	msr	BASEPRI, r3
 8001b50:	f3bf 8f6f 	isb	sy
 8001b54:	f3bf 8f4f 	dsb	sy
 8001b58:	613b      	str	r3, [r7, #16]
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	1ad2      	subs	r2, r2, r3
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001b72:	69b8      	ldr	r0, [r7, #24]
 8001b74:	f000 f96c 	bl	8001e50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <pvPortMallocMicroROS+0x184>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	4a19      	ldr	r2, [pc, #100]	@ (8001be8 <pvPortMallocMicroROS+0x184>)
 8001b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001b86:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <pvPortMallocMicroROS+0x184>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <pvPortMallocMicroROS+0x18c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d203      	bcs.n	8001b9a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <pvPortMallocMicroROS+0x184>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a16      	ldr	r2, [pc, #88]	@ (8001bf0 <pvPortMallocMicroROS+0x18c>)
 8001b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <pvPortMallocMicroROS+0x180>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001bae:	f007 fd1d 	bl	80095ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00b      	beq.n	8001bd4 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bc0:	f383 8811 	msr	BASEPRI, r3
 8001bc4:	f3bf 8f6f 	isb	sy
 8001bc8:	f3bf 8f4f 	dsb	sy
 8001bcc:	60fb      	str	r3, [r7, #12]
}
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3728      	adds	r7, #40	@ 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20004918 	.word	0x20004918
 8001be4:	20004924 	.word	0x20004924
 8001be8:	2000491c 	.word	0x2000491c
 8001bec:	20004910 	.word	0x20004910
 8001bf0:	20004920 	.word	0x20004920

08001bf4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d04a      	beq.n	8001c9c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001c06:	2308      	movs	r3, #8
 8001c08:	425b      	negs	r3, r3
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <vPortFreeMicroROS+0xb0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10b      	bne.n	8001c3a <vPortFreeMicroROS+0x46>
	__asm volatile
 8001c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c26:	f383 8811 	msr	BASEPRI, r3
 8001c2a:	f3bf 8f6f 	isb	sy
 8001c2e:	f3bf 8f4f 	dsb	sy
 8001c32:	60fb      	str	r3, [r7, #12]
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	e7fd      	b.n	8001c36 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <vPortFreeMicroROS+0x66>
	__asm volatile
 8001c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c46:	f383 8811 	msr	BASEPRI, r3
 8001c4a:	f3bf 8f6f 	isb	sy
 8001c4e:	f3bf 8f4f 	dsb	sy
 8001c52:	60bb      	str	r3, [r7, #8]
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	e7fd      	b.n	8001c56 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <vPortFreeMicroROS+0xb0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d019      	beq.n	8001c9c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d115      	bne.n	8001c9c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <vPortFreeMicroROS+0xb0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001c80:	f007 fca6 	bl	80095d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <vPortFreeMicroROS+0xb4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a06      	ldr	r2, [pc, #24]	@ (8001ca8 <vPortFreeMicroROS+0xb4>)
 8001c90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001c92:	6938      	ldr	r0, [r7, #16]
 8001c94:	f000 f8dc 	bl	8001e50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001c98:	f007 fca8 	bl	80095ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001c9c:	bf00      	nop
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20004924 	.word	0x20004924
 8001ca8:	2000491c 	.word	0x2000491c

08001cac <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	425b      	negs	r3, r3
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <getBlockSize+0x38>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]

	return count;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20004924 	.word	0x20004924

08001ce8 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001cf2:	f007 fc6d 	bl	80095d0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001cf6:	6838      	ldr	r0, [r7, #0]
 8001cf8:	f7ff feb4 	bl	8001a64 <pvPortMallocMicroROS>
 8001cfc:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d017      	beq.n	8001d34 <pvPortReallocMicroROS+0x4c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d014      	beq.n	8001d34 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffce 	bl	8001cac <getBlockSize>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2208      	movs	r2, #8
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d201      	bcs.n	8001d24 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	68b8      	ldr	r0, [r7, #8]
 8001d2a:	f018 f8dc 	bl	8019ee6 <memcpy>

		vPortFreeMicroROS(pv);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ff60 	bl	8001bf4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001d34:	f007 fc5a 	bl	80095ec <xTaskResumeAll>

	return newmem;
 8001d38:	68bb      	ldr	r3, [r7, #8]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001d4c:	f007 fc40 	bl	80095d0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
 8001d58:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff fe82 	bl	8001a64 <pvPortMallocMicroROS>
 8001d60:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001d66:	e004      	b.n	8001d72 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	613a      	str	r2, [r7, #16]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	617a      	str	r2, [r7, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f5      	bne.n	8001d68 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001d7c:	f007 fc36 	bl	80095ec <xTaskResumeAll>
  	return mem;
 8001d80:	68fb      	ldr	r3, [r7, #12]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d92:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001d98:	4b27      	ldr	r3, [pc, #156]	@ (8001e38 <prvHeapInit+0xac>)
 8001d9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00c      	beq.n	8001dc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3307      	adds	r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f023 0307 	bic.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	4a1f      	ldr	r2, [pc, #124]	@ (8001e38 <prvHeapInit+0xac>)
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e3c <prvHeapInit+0xb0>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <prvHeapInit+0xb0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001dd8:	2208      	movs	r2, #8
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0307 	bic.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a15      	ldr	r2, [pc, #84]	@ (8001e40 <prvHeapInit+0xb4>)
 8001dec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <prvHeapInit+0xb4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001df6:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <prvHeapInit+0xb4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	1ad2      	subs	r2, r2, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <prvHeapInit+0xb4>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <prvHeapInit+0xb8>)
 8001e1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a09      	ldr	r2, [pc, #36]	@ (8001e48 <prvHeapInit+0xbc>)
 8001e22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001e24:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <prvHeapInit+0xc0>)
 8001e26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	20003d10 	.word	0x20003d10
 8001e3c:	20004910 	.word	0x20004910
 8001e40:	20004918 	.word	0x20004918
 8001e44:	20004920 	.word	0x20004920
 8001e48:	2000491c 	.word	0x2000491c
 8001e4c:	20004924 	.word	0x20004924

08001e50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001e58:	4b28      	ldr	r3, [pc, #160]	@ (8001efc <prvInsertBlockIntoFreeList+0xac>)
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e002      	b.n	8001e64 <prvInsertBlockIntoFreeList+0x14>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d8f7      	bhi.n	8001e5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	4413      	add	r3, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d108      	bne.n	8001e92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	441a      	add	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d118      	bne.n	8001ed8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <prvInsertBlockIntoFreeList+0xb0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d00d      	beq.n	8001ece <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	441a      	add	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e008      	b.n	8001ee0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001ece:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <prvInsertBlockIntoFreeList+0xb0>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e003      	b.n	8001ee0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d002      	beq.n	8001eee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20004910 	.word	0x20004910
 8001f00:	20004918 	.word	0x20004918

08001f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f0a:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <MX_DMA_Init+0x60>)
 8001f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f0e:	4a15      	ldr	r2, [pc, #84]	@ (8001f64 <MX_DMA_Init+0x60>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f16:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <MX_DMA_Init+0x60>)
 8001f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <MX_DMA_Init+0x60>)
 8001f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f26:	4a0f      	ldr	r2, [pc, #60]	@ (8001f64 <MX_DMA_Init+0x60>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <MX_DMA_Init+0x60>)
 8001f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	200b      	movs	r0, #11
 8001f40:	f000 ffc4 	bl	8002ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f44:	200b      	movs	r0, #11
 8001f46:	f000 ffdb 	bl	8002f00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2105      	movs	r1, #5
 8001f4e:	200c      	movs	r0, #12
 8001f50:	f000 ffbc 	bl	8002ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f54:	200c      	movs	r0, #12
 8001f56:	f000 ffd3 	bl	8002f00 <HAL_NVIC_EnableIRQ>

}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000

08001f68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	@ 0x28
 8001f6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	4a2e      	ldr	r2, [pc, #184]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f96:	4b29      	ldr	r3, [pc, #164]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	4a28      	ldr	r2, [pc, #160]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001f9c:	f043 0320 	orr.w	r3, r3, #32
 8001fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa2:	4b26      	ldr	r3, [pc, #152]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	4b23      	ldr	r3, [pc, #140]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	4a22      	ldr	r2, [pc, #136]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fba:	4b20      	ldr	r3, [pc, #128]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	4a1c      	ldr	r2, [pc, #112]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <MX_GPIO_Init+0xd4>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe6:	f001 fd53 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	480f      	ldr	r0, [pc, #60]	@ (8002040 <MX_GPIO_Init+0xd8>)
 8002002:	f001 fac9 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002006:	2320      	movs	r3, #32
 8002008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200a:	2301      	movs	r3, #1
 800200c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002020:	f001 faba 	bl	8003598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2105      	movs	r1, #5
 8002028:	2028      	movs	r0, #40	@ 0x28
 800202a:	f000 ff4f 	bl	8002ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800202e:	2028      	movs	r0, #40	@ 0x28
 8002030:	f000 ff66 	bl	8002f00 <HAL_NVIC_EnableIRQ>

}
 8002034:	bf00      	nop
 8002036:	3728      	adds	r7, #40	@ 0x28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	48000800 	.word	0x48000800

08002044 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002048:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <MX_I2C1_Init+0x74>)
 800204a:	4a1c      	ldr	r2, [pc, #112]	@ (80020bc <MX_I2C1_Init+0x78>)
 800204c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <MX_I2C1_Init+0x74>)
 8002050:	4a1b      	ldr	r2, [pc, #108]	@ (80020c0 <MX_I2C1_Init+0x7c>)
 8002052:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002054:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <MX_I2C1_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800205a:	4b17      	ldr	r3, [pc, #92]	@ (80020b8 <MX_I2C1_Init+0x74>)
 800205c:	2201      	movs	r2, #1
 800205e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002060:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <MX_I2C1_Init+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002066:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <MX_I2C1_Init+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <MX_I2C1_Init+0x74>)
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002072:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <MX_I2C1_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002078:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <MX_I2C1_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800207e:	480e      	ldr	r0, [pc, #56]	@ (80020b8 <MX_I2C1_Init+0x74>)
 8002080:	f001 fd5b 	bl	8003b3a <HAL_I2C_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800208a:	f000 f92d 	bl	80022e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800208e:	2100      	movs	r1, #0
 8002090:	4809      	ldr	r0, [pc, #36]	@ (80020b8 <MX_I2C1_Init+0x74>)
 8002092:	f002 fb19 	bl	80046c8 <HAL_I2CEx_ConfigAnalogFilter>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800209c:	f000 f924 	bl	80022e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020a0:	2100      	movs	r1, #0
 80020a2:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <MX_I2C1_Init+0x74>)
 80020a4:	f002 fb5b 	bl	800475e <HAL_I2CEx_ConfigDigitalFilter>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020ae:	f000 f91b 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20004928 	.word	0x20004928
 80020bc:	40005400 	.word	0x40005400
 80020c0:	40621236 	.word	0x40621236

080020c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b09e      	sub	sp, #120	@ 0x78
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	2254      	movs	r2, #84	@ 0x54
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f017 fe35 	bl	8019d54 <memset>
  if(i2cHandle->Instance==I2C1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1f      	ldr	r2, [pc, #124]	@ (800216c <HAL_I2C_MspInit+0xa8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d136      	bne.n	8002162 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020f4:	2340      	movs	r3, #64	@ 0x40
 80020f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	4618      	mov	r0, r3
 8002102:	f003 f9eb 	bl	80054dc <HAL_RCCEx_PeriphCLKConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800210c:	f000 f8ec 	bl	80022e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002110:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002114:	4a16      	ldr	r2, [pc, #88]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 8002116:	f043 0302 	orr.w	r3, r3, #2
 800211a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002128:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800212c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800212e:	2312      	movs	r3, #18
 8002130:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800213a:	2304      	movs	r3, #4
 800213c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002142:	4619      	mov	r1, r3
 8002144:	480b      	ldr	r0, [pc, #44]	@ (8002174 <HAL_I2C_MspInit+0xb0>)
 8002146:	f001 fa27 	bl	8003598 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 8002150:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002154:	6593      	str	r3, [r2, #88]	@ 0x58
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002162:	bf00      	nop
 8002164:	3778      	adds	r7, #120	@ 0x78
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40005400 	.word	0x40005400
 8002170:	40021000 	.word	0x40021000
 8002174:	48000400 	.word	0x48000400

08002178 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0b      	ldr	r2, [pc, #44]	@ (80021b4 <HAL_I2C_MspDeInit+0x3c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10f      	bne.n	80021aa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800218a:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_I2C_MspDeInit+0x40>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <HAL_I2C_MspDeInit+0x40>)
 8002190:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002194:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002196:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800219a:	4808      	ldr	r0, [pc, #32]	@ (80021bc <HAL_I2C_MspDeInit+0x44>)
 800219c:	f001 fb7e 	bl	800389c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80021a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021a4:	4805      	ldr	r0, [pc, #20]	@ (80021bc <HAL_I2C_MspDeInit+0x44>)
 80021a6:	f001 fb79 	bl	800389c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40005400 	.word	0x40005400
 80021b8:	40021000 	.word	0x40021000
 80021bc:	48000400 	.word	0x48000400

080021c0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <MX_IWDG_Init+0x34>)
 80021c6:	4a0c      	ldr	r2, [pc, #48]	@ (80021f8 <MX_IWDG_Init+0x38>)
 80021c8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <MX_IWDG_Init+0x34>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <MX_IWDG_Init+0x34>)
 80021d2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80021d6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <MX_IWDG_Init+0x34>)
 80021da:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80021de:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80021e0:	4804      	ldr	r0, [pc, #16]	@ (80021f4 <MX_IWDG_Init+0x34>)
 80021e2:	f002 fb08 	bl	80047f6 <HAL_IWDG_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80021ec:	f000 f87c 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	2000497c 	.word	0x2000497c
 80021f8:	40003000 	.word	0x40003000

080021fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002200:	f000 fd75 	bl	8002cee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002204:	f000 f812 	bl	800222c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002208:	f7ff feae 	bl	8001f68 <MX_GPIO_Init>
  MX_DMA_Init();
 800220c:	f7ff fe7a 	bl	8001f04 <MX_DMA_Init>
  MX_I2C1_Init();
 8002210:	f7ff ff18 	bl	8002044 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8002214:	f000 fb8e 	bl	8002934 <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 8002218:	f7ff ffd2 	bl	80021c0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800221c:	f006 f8ba 	bl	8008394 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002220:	f7ff fa9c 	bl	800175c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002224:	f006 f8da 	bl	80083dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <main+0x2c>

0800222c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b094      	sub	sp, #80	@ 0x50
 8002230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002232:	f107 0318 	add.w	r3, r7, #24
 8002236:	2238      	movs	r2, #56	@ 0x38
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f017 fd8a 	bl	8019d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800224e:	2000      	movs	r0, #0
 8002250:	f002 fb30 	bl	80048b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002254:	2309      	movs	r3, #9
 8002256:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002258:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800225c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800225e:	2301      	movs	r3, #1
 8002260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002262:	2302      	movs	r3, #2
 8002264:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002266:	2303      	movs	r3, #3
 8002268:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800226a:	2306      	movs	r3, #6
 800226c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800226e:	2355      	movs	r3, #85	@ 0x55
 8002270:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002272:	2302      	movs	r3, #2
 8002274:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002276:	2302      	movs	r3, #2
 8002278:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800227a:	2302      	movs	r3, #2
 800227c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800227e:	f107 0318 	add.w	r3, r7, #24
 8002282:	4618      	mov	r0, r3
 8002284:	f002 fbca 	bl	8004a1c <HAL_RCC_OscConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800228e:	f000 f82b 	bl	80022e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002292:	230f      	movs	r3, #15
 8002294:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002296:	2303      	movs	r3, #3
 8002298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2104      	movs	r1, #4
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 fec8 	bl	8005040 <HAL_RCC_ClockConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80022b6:	f000 f817 	bl	80022e8 <Error_Handler>
  }
}
 80022ba:	bf00      	nop
 80022bc:	3750      	adds	r7, #80	@ 0x50
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a04      	ldr	r2, [pc, #16]	@ (80022e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022d6:	f000 fd23 	bl	8002d20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40012c00 	.word	0x40012c00

080022e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <Error_Handler+0x8>

080022f4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <microros_allocate+0x3c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	461a      	mov	r2, r3
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <microros_allocate+0x3c>)
 800230c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800230e:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <microros_allocate+0x40>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <microros_allocate+0x40>)
 800231c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff fba0 	bl	8001a64 <pvPortMallocMicroROS>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000498c 	.word	0x2000498c
 8002334:	20004990 	.word	0x20004990

08002338 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff fcaf 	bl	8001cac <getBlockSize>
 800234e:	4603      	mov	r3, r0
 8002350:	4a06      	ldr	r2, [pc, #24]	@ (800236c <microros_deallocate+0x34>)
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	461a      	mov	r2, r3
 8002358:	4b04      	ldr	r3, [pc, #16]	@ (800236c <microros_deallocate+0x34>)
 800235a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fc49 	bl	8001bf4 <vPortFreeMicroROS>
  }
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20004990 	.word	0x20004990

08002370 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800237c:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <microros_reallocate+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4413      	add	r3, r2
 8002386:	461a      	mov	r2, r3
 8002388:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <microros_reallocate+0x64>)
 800238a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800238c:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <microros_reallocate+0x68>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4413      	add	r3, r2
 8002396:	461a      	mov	r2, r3
 8002398:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <microros_reallocate+0x68>)
 800239a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80023a2:	68b8      	ldr	r0, [r7, #8]
 80023a4:	f7ff fb5e 	bl	8001a64 <pvPortMallocMicroROS>
 80023a8:	4603      	mov	r3, r0
 80023aa:	e00e      	b.n	80023ca <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f7ff fc7d 	bl	8001cac <getBlockSize>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4a08      	ldr	r2, [pc, #32]	@ (80023d8 <microros_reallocate+0x68>)
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <microros_reallocate+0x68>)
 80023be:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7ff fc90 	bl	8001ce8 <pvPortReallocMicroROS>
 80023c8:	4603      	mov	r3, r0
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000498c 	.word	0x2000498c
 80023d8:	20004990 	.word	0x20004990

080023dc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002424 <microros_zero_allocate+0x48>)
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	4413      	add	r3, r2
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <microros_zero_allocate+0x48>)
 80023fa:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <microros_zero_allocate+0x4c>)
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	4413      	add	r3, r2
 800240a:	461a      	mov	r2, r3
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <microros_zero_allocate+0x4c>)
 800240e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7ff fc95 	bl	8001d42 <pvPortCallocMicroROS>
 8002418:	4603      	mov	r3, r0
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000498c 	.word	0x2000498c
 8002428:	20004990 	.word	0x20004990
 800242c:	00000000 	.word	0x00000000

08002430 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002430:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002442:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002446:	a320      	add	r3, pc, #128	@ (adr r3, 80024c8 <UTILS_NanosecondsToTimespec+0x98>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fe fbbc 	bl	8000bc8 <__aeabi_ldivmod>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800245a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800245e:	a31a      	add	r3, pc, #104	@ (adr r3, 80024c8 <UTILS_NanosecondsToTimespec+0x98>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fe fbb0 	bl	8000bc8 <__aeabi_ldivmod>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	da20      	bge.n	80024b6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a11      	ldr	r2, [pc, #68]	@ (80024c0 <UTILS_NanosecondsToTimespec+0x90>)
 800247a:	fb82 1203 	smull	r1, r2, r2, r3
 800247e:	1712      	asrs	r2, r2, #28
 8002480:	17db      	asrs	r3, r3, #31
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	3301      	adds	r3, #1
 8002486:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	6979      	ldr	r1, [r7, #20]
 8002490:	17c8      	asrs	r0, r1, #31
 8002492:	460c      	mov	r4, r1
 8002494:	4605      	mov	r5, r0
 8002496:	ebb2 0804 	subs.w	r8, r2, r4
 800249a:	eb63 0905 	sbc.w	r9, r3, r5
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	4906      	ldr	r1, [pc, #24]	@ (80024c4 <UTILS_NanosecondsToTimespec+0x94>)
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	441a      	add	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	609a      	str	r2, [r3, #8]
    }
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024c0:	44b82fa1 	.word	0x44b82fa1
 80024c4:	3b9aca00 	.word	0x3b9aca00
 80024c8:	3b9aca00 	.word	0x3b9aca00
 80024cc:	00000000 	.word	0x00000000

080024d0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80024d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d4:	b08e      	sub	sp, #56	@ 0x38
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80024da:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80024dc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80024e0:	2300      	movs	r3, #0
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80024f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024f6:	4618      	mov	r0, r3
 80024f8:	f007 faf4 	bl	8009ae4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80024fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fe:	17da      	asrs	r2, r3, #31
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	61fa      	str	r2, [r7, #28]
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	69b9      	ldr	r1, [r7, #24]
 800250e:	000b      	movs	r3, r1
 8002510:	2200      	movs	r2, #0
 8002512:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002518:	2200      	movs	r2, #0
 800251a:	461c      	mov	r4, r3
 800251c:	4615      	mov	r5, r2
 800251e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002522:	1911      	adds	r1, r2, r4
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	416b      	adcs	r3, r5
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800252e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002532:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	f04f 0400 	mov.w	r4, #0
 800253e:	f04f 0500 	mov.w	r5, #0
 8002542:	015d      	lsls	r5, r3, #5
 8002544:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002548:	0154      	lsls	r4, r2, #5
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	ebb2 0800 	subs.w	r8, r2, r0
 8002552:	eb63 0901 	sbc.w	r9, r3, r1
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002562:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002566:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800256a:	4690      	mov	r8, r2
 800256c:	4699      	mov	r9, r3
 800256e:	eb18 0a00 	adds.w	sl, r8, r0
 8002572:	eb49 0b01 	adc.w	fp, r9, r1
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002582:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002586:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800258a:	ebb2 040a 	subs.w	r4, r2, sl
 800258e:	603c      	str	r4, [r7, #0]
 8002590:	eb63 030b 	sbc.w	r3, r3, fp
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800259a:	4623      	mov	r3, r4
 800259c:	181b      	adds	r3, r3, r0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	462b      	mov	r3, r5
 80025a2:	eb41 0303 	adc.w	r3, r1, r3
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025ae:	f7ff ff3f 	bl	8002430 <UTILS_NanosecondsToTimespec>

    return 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	3738      	adds	r7, #56	@ 0x38
 80025b8:	46bd      	mov	sp, r7
 80025ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080025c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_MspInit+0x50>)
 80025c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ca:	4a11      	ldr	r2, [pc, #68]	@ (8002610 <HAL_MspInit+0x50>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80025d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <HAL_MspInit+0x50>)
 80025d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <HAL_MspInit+0x50>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002610 <HAL_MspInit+0x50>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ea:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_MspInit+0x50>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	210f      	movs	r1, #15
 80025fa:	f06f 0001 	mvn.w	r0, #1
 80025fe:	f000 fc65 	bl	8002ecc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002602:	f002 f9fb 	bl	80049fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	@ 0x30
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002624:	4b2c      	ldr	r3, [pc, #176]	@ (80026d8 <HAL_InitTick+0xc4>)
 8002626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002628:	4a2b      	ldr	r2, [pc, #172]	@ (80026d8 <HAL_InitTick+0xc4>)
 800262a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800262e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002630:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <HAL_InitTick+0xc4>)
 8002632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800263c:	f107 020c 	add.w	r2, r7, #12
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fed0 	bl	80053ec <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800264c:	f002 feb8 	bl	80053c0 <HAL_RCC_GetPCLK2Freq>
 8002650:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002654:	4a21      	ldr	r2, [pc, #132]	@ (80026dc <HAL_InitTick+0xc8>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	0c9b      	lsrs	r3, r3, #18
 800265c:	3b01      	subs	r3, #1
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002660:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002662:	4a20      	ldr	r2, [pc, #128]	@ (80026e4 <HAL_InitTick+0xd0>)
 8002664:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002666:	4b1e      	ldr	r3, [pc, #120]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002668:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800266c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800266e:	4a1c      	ldr	r2, [pc, #112]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002674:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267a:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_InitTick+0xcc>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002680:	4817      	ldr	r0, [pc, #92]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002682:	f003 f979 	bl	8005978 <HAL_TIM_Base_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800268c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11b      	bne.n	80026cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002694:	4812      	ldr	r0, [pc, #72]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002696:	f003 f9d1 	bl	8005a3c <HAL_TIM_Base_Start_IT>
 800269a:	4603      	mov	r3, r0
 800269c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80026a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80026a8:	2019      	movs	r0, #25
 80026aa:	f000 fc29 	bl	8002f00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b0f      	cmp	r3, #15
 80026b2:	d808      	bhi.n	80026c6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80026b4:	2200      	movs	r2, #0
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	2019      	movs	r0, #25
 80026ba:	f000 fc07 	bl	8002ecc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026be:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <HAL_InitTick+0xd4>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e002      	b.n	80026cc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3730      	adds	r7, #48	@ 0x30
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	431bde83 	.word	0x431bde83
 80026e0:	20004994 	.word	0x20004994
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	20000008 	.word	0x20000008

080026ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <NMI_Handler+0x4>

080026f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <HardFault_Handler+0x4>

080026fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <MemManage_Handler+0x4>

08002704 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <BusFault_Handler+0x4>

0800270c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <UsageFault_Handler+0x4>

08002714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <DMA1_Channel1_IRQHandler+0x10>)
 800272a:	f000 fdda 	bl	80032e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20004a7c 	.word	0x20004a7c

08002738 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <DMA1_Channel2_IRQHandler+0x10>)
 800273e:	f000 fdd0 	bl	80032e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20004adc 	.word	0x20004adc

0800274c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002752:	f003 f9eb 	bl	8005b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20004994 	.word	0x20004994

08002760 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002764:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002768:	f001 f9c4 	bl	8003af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}

08002770 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002774:	4802      	ldr	r0, [pc, #8]	@ (8002780 <LPUART1_IRQHandler+0x10>)
 8002776:	f003 fdfd 	bl	8006374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200049e8 	.word	0x200049e8

08002784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return 1;
 8002788:	2301      	movs	r3, #1
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_kill>:

int _kill(int pid, int sig)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800279e:	f017 fb6d 	bl	8019e7c <__errno>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2216      	movs	r2, #22
 80027a6:	601a      	str	r2, [r3, #0]
  return -1;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_exit>:

void _exit (int status)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ffe7 	bl	8002794 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027c6:	bf00      	nop
 80027c8:	e7fd      	b.n	80027c6 <_exit+0x12>

080027ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e00a      	b.n	80027f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027dc:	f3af 8000 	nop.w
 80027e0:	4601      	mov	r1, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	60ba      	str	r2, [r7, #8]
 80027e8:	b2ca      	uxtb	r2, r1
 80027ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	3301      	adds	r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	dbf0      	blt.n	80027dc <_read+0x12>
  }

  return len;
 80027fa:	687b      	ldr	r3, [r7, #4]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	e009      	b.n	800282a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	60ba      	str	r2, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	dbf1      	blt.n	8002816 <_write+0x12>
  }
  return len;
 8002832:	687b      	ldr	r3, [r7, #4]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <_close>:

int _close(int file)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002864:	605a      	str	r2, [r3, #4]
  return 0;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_isatty>:

int _isatty(int file)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028ac:	4a14      	ldr	r2, [pc, #80]	@ (8002900 <_sbrk+0x5c>)
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <_sbrk+0x60>)
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b8:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <_sbrk+0x64>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c0:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <_sbrk+0x64>)
 80028c2:	4a12      	ldr	r2, [pc, #72]	@ (800290c <_sbrk+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d207      	bcs.n	80028e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d4:	f017 fad2 	bl	8019e7c <__errno>
 80028d8:	4603      	mov	r3, r0
 80028da:	220c      	movs	r2, #12
 80028dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028e2:	e009      	b.n	80028f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e4:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ea:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	4a05      	ldr	r2, [pc, #20]	@ (8002908 <_sbrk+0x64>)
 80028f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20020000 	.word	0x20020000
 8002904:	00000400 	.word	0x00000400
 8002908:	200049e4 	.word	0x200049e4
 800290c:	2000bb70 	.word	0x2000bb70

08002910 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <SystemInit+0x20>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <SystemInit+0x20>)
 800291c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002938:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 800293a:	4a21      	ldr	r2, [pc, #132]	@ (80029c0 <MX_LPUART1_UART_Init+0x8c>)
 800293c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800293e:	4b1f      	ldr	r3, [pc, #124]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 8002940:	4a20      	ldr	r2, [pc, #128]	@ (80029c4 <MX_LPUART1_UART_Init+0x90>)
 8002942:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002944:	4b1d      	ldr	r3, [pc, #116]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800294a:	4b1c      	ldr	r3, [pc, #112]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 800294c:	2200      	movs	r2, #0
 800294e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002950:	4b1a      	ldr	r3, [pc, #104]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002956:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 8002958:	220c      	movs	r2, #12
 800295a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295c:	4b17      	ldr	r3, [pc, #92]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 800295e:	2200      	movs	r2, #0
 8002960:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002962:	4b16      	ldr	r3, [pc, #88]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 8002964:	2200      	movs	r2, #0
 8002966:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002968:	4b14      	ldr	r3, [pc, #80]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 800296a:	2200      	movs	r2, #0
 800296c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800296e:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 8002970:	2200      	movs	r2, #0
 8002972:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002974:	4811      	ldr	r0, [pc, #68]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 8002976:	f003 fb4b 	bl	8006010 <HAL_UART_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002980:	f7ff fcb2 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002984:	2100      	movs	r1, #0
 8002986:	480d      	ldr	r0, [pc, #52]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 8002988:	f005 f85b 	bl	8007a42 <HAL_UARTEx_SetTxFifoThreshold>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8002992:	f7ff fca9 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002996:	2100      	movs	r1, #0
 8002998:	4808      	ldr	r0, [pc, #32]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 800299a:	f005 f890 	bl	8007abe <HAL_UARTEx_SetRxFifoThreshold>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80029a4:	f7ff fca0 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80029a8:	4804      	ldr	r0, [pc, #16]	@ (80029bc <MX_LPUART1_UART_Init+0x88>)
 80029aa:	f005 f811 	bl	80079d0 <HAL_UARTEx_DisableFifoMode>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80029b4:	f7ff fc98 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	200049e8 	.word	0x200049e8
 80029c0:	40008000 	.word	0x40008000
 80029c4:	001e8480 	.word	0x001e8480

080029c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b09e      	sub	sp, #120	@ 0x78
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	2254      	movs	r2, #84	@ 0x54
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f017 f9b3 	bl	8019d54 <memset>
  if(uartHandle->Instance==LPUART1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a4e      	ldr	r2, [pc, #312]	@ (8002b2c <HAL_UART_MspInit+0x164>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	f040 8094 	bne.w	8002b22 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80029fa:	2320      	movs	r3, #32
 80029fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fd68 	bl	80054dc <HAL_RCCEx_PeriphCLKConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a12:	f7ff fc69 	bl	80022e8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002a16:	4b46      	ldr	r3, [pc, #280]	@ (8002b30 <HAL_UART_MspInit+0x168>)
 8002a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1a:	4a45      	ldr	r2, [pc, #276]	@ (8002b30 <HAL_UART_MspInit+0x168>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002a22:	4b43      	ldr	r3, [pc, #268]	@ (8002b30 <HAL_UART_MspInit+0x168>)
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	4b40      	ldr	r3, [pc, #256]	@ (8002b30 <HAL_UART_MspInit+0x168>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	4a3f      	ldr	r2, [pc, #252]	@ (8002b30 <HAL_UART_MspInit+0x168>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b30 <HAL_UART_MspInit+0x168>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002a46:	230c      	movs	r3, #12
 8002a48:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002a56:	230c      	movs	r3, #12
 8002a58:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a64:	f000 fd98 	bl	8003598 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002a68:	4b32      	ldr	r3, [pc, #200]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002a6a:	4a33      	ldr	r2, [pc, #204]	@ (8002b38 <HAL_UART_MspInit+0x170>)
 8002a6c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002a6e:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002a70:	2222      	movs	r2, #34	@ 0x22
 8002a72:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a74:	4b2f      	ldr	r3, [pc, #188]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a80:	4b2c      	ldr	r3, [pc, #176]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002a82:	2280      	movs	r2, #128	@ 0x80
 8002a84:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a86:	4b2b      	ldr	r3, [pc, #172]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a8c:	4b29      	ldr	r3, [pc, #164]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a92:	4b28      	ldr	r3, [pc, #160]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002a94:	2220      	movs	r2, #32
 8002a96:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a98:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002a9a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002a9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002aa0:	4824      	ldr	r0, [pc, #144]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002aa2:	f000 fa3b 	bl	8002f1c <HAL_DMA_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002aac:	f7ff fc1c 	bl	80022e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a20      	ldr	r2, [pc, #128]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002ab4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b34 <HAL_UART_MspInit+0x16c>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002abe:	4b1f      	ldr	r3, [pc, #124]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b40 <HAL_UART_MspInit+0x178>)
 8002ac2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002ac6:	2223      	movs	r2, #35	@ 0x23
 8002ac8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002acc:	2210      	movs	r2, #16
 8002ace:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002ad8:	2280      	movs	r2, #128	@ 0x80
 8002ada:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002adc:	4b17      	ldr	r3, [pc, #92]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae2:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002ae8:	4b14      	ldr	r3, [pc, #80]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002aee:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002af0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002af4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002af6:	4811      	ldr	r0, [pc, #68]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002af8:	f000 fa10 	bl	8002f1c <HAL_DMA_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8002b02:	f7ff fbf1 	bl	80022e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a0c      	ldr	r2, [pc, #48]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002b0a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b3c <HAL_UART_MspInit+0x174>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2105      	movs	r1, #5
 8002b16:	205b      	movs	r0, #91	@ 0x5b
 8002b18:	f000 f9d8 	bl	8002ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002b1c:	205b      	movs	r0, #91	@ 0x5b
 8002b1e:	f000 f9ef 	bl	8002f00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002b22:	bf00      	nop
 8002b24:	3778      	adds	r7, #120	@ 0x78
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40008000 	.word	0x40008000
 8002b30:	40021000 	.word	0x40021000
 8002b34:	20004a7c 	.word	0x20004a7c
 8002b38:	40020008 	.word	0x40020008
 8002b3c:	20004adc 	.word	0x20004adc
 8002b40:	4002001c 	.word	0x4002001c

08002b44 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b52:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002b54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b58:	4904      	ldr	r1, [pc, #16]	@ (8002b6c <cubemx_transport_open+0x28>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f003 fb28 	bl	80061b0 <HAL_UART_Receive_DMA>
    return true;
 8002b60:	2301      	movs	r3, #1
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20004b3c 	.word	0x20004b3c

08002b70 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b7e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f003 fb61 	bl	8006248 <HAL_UART_DMAStop>
    return true;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ba4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d11b      	bne.n	8002be8 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	6978      	ldr	r0, [r7, #20]
 8002bba:	f003 fa79 	bl	80060b0 <HAL_UART_Transmit_DMA>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002bc2:	e002      	b.n	8002bca <cubemx_transport_write+0x3a>
            osDelay(1);
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f005 fcc1 	bl	800854c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d104      	bne.n	8002bda <cubemx_transport_write+0x4a>
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d1f4      	bne.n	8002bc4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <cubemx_transport_write+0x54>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	e002      	b.n	8002bea <cubemx_transport_write+0x5a>
 8002be4:	2300      	movs	r3, #0
 8002be6:	e000      	b.n	8002bea <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8002be8:	2300      	movs	r3, #0
    }
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002c08:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c0e:	b672      	cpsid	i
}
 8002c10:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002c20:	4a1b      	ldr	r2, [pc, #108]	@ (8002c90 <cubemx_transport_read+0x9c>)
 8002c22:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c24:	b662      	cpsie	i
}
 8002c26:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f005 fc8c 	bl	800854c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002c34:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <cubemx_transport_read+0xa0>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <cubemx_transport_read+0x9c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d103      	bne.n	8002c48 <cubemx_transport_read+0x54>
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	dbe2      	blt.n	8002c0e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002c4c:	e011      	b.n	8002c72 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8002c4e:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <cubemx_transport_read+0xa0>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	440b      	add	r3, r1
 8002c58:	490f      	ldr	r1, [pc, #60]	@ (8002c98 <cubemx_transport_read+0xa4>)
 8002c5a:	5c8a      	ldrb	r2, [r1, r2]
 8002c5c:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <cubemx_transport_read+0xa0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c68:	4a0a      	ldr	r2, [pc, #40]	@ (8002c94 <cubemx_transport_read+0xa0>)
 8002c6a:	6013      	str	r3, [r2, #0]
        wrote++;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002c72:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <cubemx_transport_read+0xa0>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <cubemx_transport_read+0x9c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d003      	beq.n	8002c86 <cubemx_transport_read+0x92>
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d3e3      	bcc.n	8002c4e <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8002c86:	69bb      	ldr	r3, [r7, #24]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20005340 	.word	0x20005340
 8002c94:	2000533c 	.word	0x2000533c
 8002c98:	20004b3c 	.word	0x20004b3c

08002c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c9c:	480d      	ldr	r0, [pc, #52]	@ (8002cd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ca0:	f7ff fe36 	bl	8002910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca4:	480c      	ldr	r0, [pc, #48]	@ (8002cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ca6:	490d      	ldr	r1, [pc, #52]	@ (8002cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce0 <LoopForever+0xe>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002cac:	e002      	b.n	8002cb4 <LoopCopyDataInit>

08002cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb2:	3304      	adds	r3, #4

08002cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb8:	d3f9      	bcc.n	8002cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce8 <LoopForever+0x16>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc0:	e001      	b.n	8002cc6 <LoopFillZerobss>

08002cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc4:	3204      	adds	r2, #4

08002cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc8:	d3fb      	bcc.n	8002cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cca:	f017 f8dd 	bl	8019e88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cce:	f7ff fa95 	bl	80021fc <main>

08002cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cd2:	e7fe      	b.n	8002cd2 <LoopForever>
  ldr   r0, =_estack
 8002cd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cdc:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 8002ce0:	0801cd08 	.word	0x0801cd08
  ldr r2, =_sbss
 8002ce4:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 8002ce8:	2000bb6c 	.word	0x2000bb6c

08002cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC1_2_IRQHandler>

08002cee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f000 f8dc 	bl	8002eb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cfe:	200f      	movs	r0, #15
 8002d00:	f7ff fc88 	bl	8002614 <HAL_InitTick>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	71fb      	strb	r3, [r7, #7]
 8002d0e:	e001      	b.n	8002d14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d10:	f7ff fc56 	bl	80025c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d14:	79fb      	ldrb	r3, [r7, #7]

}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <HAL_IncTick+0x1c>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_IncTick+0x20>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4a03      	ldr	r2, [pc, #12]	@ (8002d3c <HAL_IncTick+0x1c>)
 8002d30:	6013      	str	r3, [r2, #0]
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	20005344 	.word	0x20005344
 8002d40:	2000000c 	.word	0x2000000c

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	@ (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20005344 	.word	0x20005344

08002d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60d3      	str	r3, [r2, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da8:	4b04      	ldr	r3, [pc, #16]	@ (8002dbc <__NVIC_GetPriorityGrouping+0x18>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 0307 	and.w	r3, r3, #7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	db0b      	blt.n	8002dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4907      	ldr	r1, [pc, #28]	@ (8002df8 <__NVIC_EnableIRQ+0x38>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2001      	movs	r0, #1
 8002de2:	fa00 f202 	lsl.w	r2, r0, r2
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000e100 	.word	0xe000e100

08002dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db0a      	blt.n	8002e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	490c      	ldr	r1, [pc, #48]	@ (8002e48 <__NVIC_SetPriority+0x4c>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e24:	e00a      	b.n	8002e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4908      	ldr	r1, [pc, #32]	@ (8002e4c <__NVIC_SetPriority+0x50>)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3b04      	subs	r3, #4
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	440b      	add	r3, r1
 8002e3a:	761a      	strb	r2, [r3, #24]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	@ 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f1c3 0307 	rsb	r3, r3, #7
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	bf28      	it	cs
 8002e6e:	2304      	movcs	r3, #4
 8002e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d902      	bls.n	8002e80 <NVIC_EncodePriority+0x30>
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3b03      	subs	r3, #3
 8002e7e:	e000      	b.n	8002e82 <NVIC_EncodePriority+0x32>
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	401a      	ands	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43d9      	mvns	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	4313      	orrs	r3, r2
         );
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	@ 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ff4c 	bl	8002d5c <__NVIC_SetPriorityGrouping>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eda:	f7ff ff63 	bl	8002da4 <__NVIC_GetPriorityGrouping>
 8002ede:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	6978      	ldr	r0, [r7, #20]
 8002ee6:	f7ff ffb3 	bl	8002e50 <NVIC_EncodePriority>
 8002eea:	4602      	mov	r2, r0
 8002eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff82 	bl	8002dfc <__NVIC_SetPriority>
}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff56 	bl	8002dc0 <__NVIC_EnableIRQ>
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e08d      	b.n	800304a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b47      	ldr	r3, [pc, #284]	@ (8003054 <HAL_DMA_Init+0x138>)
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d80f      	bhi.n	8002f5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b45      	ldr	r3, [pc, #276]	@ (8003058 <HAL_DMA_Init+0x13c>)
 8002f42:	4413      	add	r3, r2
 8002f44:	4a45      	ldr	r2, [pc, #276]	@ (800305c <HAL_DMA_Init+0x140>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	009a      	lsls	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a42      	ldr	r2, [pc, #264]	@ (8003060 <HAL_DMA_Init+0x144>)
 8002f56:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f58:	e00e      	b.n	8002f78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b40      	ldr	r3, [pc, #256]	@ (8003064 <HAL_DMA_Init+0x148>)
 8002f62:	4413      	add	r3, r2
 8002f64:	4a3d      	ldr	r2, [pc, #244]	@ (800305c <HAL_DMA_Init+0x140>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	091b      	lsrs	r3, r3, #4
 8002f6c:	009a      	lsls	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a3c      	ldr	r2, [pc, #240]	@ (8003068 <HAL_DMA_Init+0x14c>)
 8002f76:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fa82 	bl	80034d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fd8:	d102      	bne.n	8002fe0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ff4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HAL_DMA_Init+0x104>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b04      	cmp	r3, #4
 8003004:	d80c      	bhi.n	8003020 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 faa2 	bl	8003550 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	e008      	b.n	8003032 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40020407 	.word	0x40020407
 8003058:	bffdfff8 	.word	0xbffdfff8
 800305c:	cccccccd 	.word	0xcccccccd
 8003060:	40020000 	.word	0x40020000
 8003064:	bffdfbf8 	.word	0xbffdfbf8
 8003068:	40020400 	.word	0x40020400

0800306c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_DMA_Start_IT+0x20>
 8003088:	2302      	movs	r3, #2
 800308a:	e066      	b.n	800315a <HAL_DMA_Start_IT+0xee>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d155      	bne.n	800314c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f9c7 	bl	8003458 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d008      	beq.n	80030e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 020e 	orr.w	r2, r2, #14
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	e00f      	b.n	8003104 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0204 	bic.w	r2, r2, #4
 80030f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 020a 	orr.w	r2, r2, #10
 8003102:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003120:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003138:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e005      	b.n	8003158 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003154:	2302      	movs	r3, #2
 8003156:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003158:	7dfb      	ldrb	r3, [r7, #23]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003162:	b480      	push	{r7}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d005      	beq.n	8003186 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2204      	movs	r2, #4
 800317e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	e037      	b.n	80031f6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 020e 	bic.w	r2, r2, #14
 8003194:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031a4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	f003 021f 	and.w	r2, r3, #31
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	2101      	movs	r1, #1
 80031c4:	fa01 f202 	lsl.w	r2, r1, r2
 80031c8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031d2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00c      	beq.n	80031f6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031ea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031f4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d00d      	beq.n	8003248 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2204      	movs	r2, #4
 8003230:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
 8003246:	e047      	b.n	80032d8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 020e 	bic.w	r2, r2, #14
 8003256:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003272:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003276:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f202 	lsl.w	r2, r1, r2
 800328a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003294:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80032b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
    }
  }
  return status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2204      	movs	r2, #4
 8003304:	409a      	lsls	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d026      	beq.n	800335c <HAL_DMA_IRQHandler+0x7a>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d021      	beq.n	800335c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d107      	bne.n	8003336 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0204 	bic.w	r2, r2, #4
 8003334:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f003 021f 	and.w	r2, r3, #31
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	2104      	movs	r1, #4
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	2b00      	cmp	r3, #0
 8003350:	d071      	beq.n	8003436 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800335a:	e06c      	b.n	8003436 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2202      	movs	r2, #2
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d02e      	beq.n	80033ce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d029      	beq.n	80033ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 020a 	bic.w	r2, r2, #10
 8003396:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a4:	f003 021f 	and.w	r2, r3, #31
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	2102      	movs	r1, #2
 80033ae:	fa01 f202 	lsl.w	r2, r1, r2
 80033b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d038      	beq.n	8003436 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033cc:	e033      	b.n	8003436 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2208      	movs	r2, #8
 80033d8:	409a      	lsls	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d02a      	beq.n	8003438 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d025      	beq.n	8003438 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 020e 	bic.w	r2, r2, #14
 80033fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f202 	lsl.w	r2, r1, r2
 800340e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003436:	bf00      	nop
 8003438:	bf00      	nop
}
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800346e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003480:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f003 021f 	and.w	r2, r3, #31
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	2101      	movs	r1, #1
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d108      	bne.n	80034b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034b6:	e007      	b.n	80034c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	60da      	str	r2, [r3, #12]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b16      	ldr	r3, [pc, #88]	@ (800353c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d802      	bhi.n	80034ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80034e8:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	e001      	b.n	80034f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80034ee:	4b15      	ldr	r3, [pc, #84]	@ (8003544 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3b08      	subs	r3, #8
 80034fe:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	461a      	mov	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a0b      	ldr	r2, [pc, #44]	@ (800354c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800351e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2201      	movs	r2, #1
 8003528:	409a      	lsls	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40020407 	.word	0x40020407
 8003540:	40020800 	.word	0x40020800
 8003544:	40020820 	.word	0x40020820
 8003548:	cccccccd 	.word	0xcccccccd
 800354c:	40020880 	.word	0x40020880

08003550 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	461a      	mov	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a08      	ldr	r2, [pc, #32]	@ (8003594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003572:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3b01      	subs	r3, #1
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2201      	movs	r2, #1
 800357e:	409a      	lsls	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	1000823f 	.word	0x1000823f
 8003594:	40020940 	.word	0x40020940

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035a6:	e15a      	b.n	800385e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	4013      	ands	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 814c 	beq.w	8003858 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d005      	beq.n	80035d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d130      	bne.n	800363a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360e:	2201      	movs	r2, #1
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0201 	and.w	r2, r3, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b03      	cmp	r3, #3
 8003644:	d017      	beq.n	8003676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d123      	bne.n	80036ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	08da      	lsrs	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3208      	adds	r2, #8
 800368a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	220f      	movs	r2, #15
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	08da      	lsrs	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3208      	adds	r2, #8
 80036c4:	6939      	ldr	r1, [r7, #16]
 80036c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	2203      	movs	r2, #3
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80a6 	beq.w	8003858 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370c:	4b5b      	ldr	r3, [pc, #364]	@ (800387c <HAL_GPIO_Init+0x2e4>)
 800370e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003710:	4a5a      	ldr	r2, [pc, #360]	@ (800387c <HAL_GPIO_Init+0x2e4>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6613      	str	r3, [r2, #96]	@ 0x60
 8003718:	4b58      	ldr	r3, [pc, #352]	@ (800387c <HAL_GPIO_Init+0x2e4>)
 800371a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003724:	4a56      	ldr	r2, [pc, #344]	@ (8003880 <HAL_GPIO_Init+0x2e8>)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	3302      	adds	r3, #2
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	220f      	movs	r2, #15
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800374e:	d01f      	beq.n	8003790 <HAL_GPIO_Init+0x1f8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a4c      	ldr	r2, [pc, #304]	@ (8003884 <HAL_GPIO_Init+0x2ec>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d019      	beq.n	800378c <HAL_GPIO_Init+0x1f4>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a4b      	ldr	r2, [pc, #300]	@ (8003888 <HAL_GPIO_Init+0x2f0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_GPIO_Init+0x1f0>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a4a      	ldr	r2, [pc, #296]	@ (800388c <HAL_GPIO_Init+0x2f4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00d      	beq.n	8003784 <HAL_GPIO_Init+0x1ec>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a49      	ldr	r2, [pc, #292]	@ (8003890 <HAL_GPIO_Init+0x2f8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <HAL_GPIO_Init+0x1e8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a48      	ldr	r2, [pc, #288]	@ (8003894 <HAL_GPIO_Init+0x2fc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_GPIO_Init+0x1e4>
 8003778:	2305      	movs	r3, #5
 800377a:	e00a      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 800377c:	2306      	movs	r3, #6
 800377e:	e008      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 8003780:	2304      	movs	r3, #4
 8003782:	e006      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 8003784:	2303      	movs	r3, #3
 8003786:	e004      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 8003788:	2302      	movs	r3, #2
 800378a:	e002      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_GPIO_Init+0x1fa>
 8003790:	2300      	movs	r3, #0
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	f002 0203 	and.w	r2, r2, #3
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	4093      	lsls	r3, r2
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037a2:	4937      	ldr	r1, [pc, #220]	@ (8003880 <HAL_GPIO_Init+0x2e8>)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3302      	adds	r3, #2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b0:	4b39      	ldr	r3, [pc, #228]	@ (8003898 <HAL_GPIO_Init+0x300>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037d4:	4a30      	ldr	r2, [pc, #192]	@ (8003898 <HAL_GPIO_Init+0x300>)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037da:	4b2f      	ldr	r3, [pc, #188]	@ (8003898 <HAL_GPIO_Init+0x300>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037fe:	4a26      	ldr	r2, [pc, #152]	@ (8003898 <HAL_GPIO_Init+0x300>)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003804:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <HAL_GPIO_Init+0x300>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	43db      	mvns	r3, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003828:	4a1b      	ldr	r2, [pc, #108]	@ (8003898 <HAL_GPIO_Init+0x300>)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800382e:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <HAL_GPIO_Init+0x300>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003852:	4a11      	ldr	r2, [pc, #68]	@ (8003898 <HAL_GPIO_Init+0x300>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	3301      	adds	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	f47f ae9d 	bne.w	80035a8 <HAL_GPIO_Init+0x10>
  }
}
 800386e:	bf00      	nop
 8003870:	bf00      	nop
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40021000 	.word	0x40021000
 8003880:	40010000 	.word	0x40010000
 8003884:	48000400 	.word	0x48000400
 8003888:	48000800 	.word	0x48000800
 800388c:	48000c00 	.word	0x48000c00
 8003890:	48001000 	.word	0x48001000
 8003894:	48001400 	.word	0x48001400
 8003898:	40010400 	.word	0x40010400

0800389c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80038aa:	e0bd      	b.n	8003a28 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80038ac:	2201      	movs	r2, #1
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80b0 	beq.w	8003a22 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80038c2:	4a60      	ldr	r2, [pc, #384]	@ (8003a44 <HAL_GPIO_DeInit+0x1a8>)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	3302      	adds	r3, #2
 80038ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	220f      	movs	r2, #15
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038ea:	d01f      	beq.n	800392c <HAL_GPIO_DeInit+0x90>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a56      	ldr	r2, [pc, #344]	@ (8003a48 <HAL_GPIO_DeInit+0x1ac>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d019      	beq.n	8003928 <HAL_GPIO_DeInit+0x8c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a55      	ldr	r2, [pc, #340]	@ (8003a4c <HAL_GPIO_DeInit+0x1b0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_GPIO_DeInit+0x88>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a54      	ldr	r2, [pc, #336]	@ (8003a50 <HAL_GPIO_DeInit+0x1b4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00d      	beq.n	8003920 <HAL_GPIO_DeInit+0x84>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a53      	ldr	r2, [pc, #332]	@ (8003a54 <HAL_GPIO_DeInit+0x1b8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <HAL_GPIO_DeInit+0x80>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a52      	ldr	r2, [pc, #328]	@ (8003a58 <HAL_GPIO_DeInit+0x1bc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_GPIO_DeInit+0x7c>
 8003914:	2305      	movs	r3, #5
 8003916:	e00a      	b.n	800392e <HAL_GPIO_DeInit+0x92>
 8003918:	2306      	movs	r3, #6
 800391a:	e008      	b.n	800392e <HAL_GPIO_DeInit+0x92>
 800391c:	2304      	movs	r3, #4
 800391e:	e006      	b.n	800392e <HAL_GPIO_DeInit+0x92>
 8003920:	2303      	movs	r3, #3
 8003922:	e004      	b.n	800392e <HAL_GPIO_DeInit+0x92>
 8003924:	2302      	movs	r3, #2
 8003926:	e002      	b.n	800392e <HAL_GPIO_DeInit+0x92>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <HAL_GPIO_DeInit+0x92>
 800392c:	2300      	movs	r3, #0
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	f002 0203 	and.w	r2, r2, #3
 8003934:	0092      	lsls	r2, r2, #2
 8003936:	4093      	lsls	r3, r2
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	429a      	cmp	r2, r3
 800393c:	d132      	bne.n	80039a4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800393e:	4b47      	ldr	r3, [pc, #284]	@ (8003a5c <HAL_GPIO_DeInit+0x1c0>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	43db      	mvns	r3, r3
 8003946:	4945      	ldr	r1, [pc, #276]	@ (8003a5c <HAL_GPIO_DeInit+0x1c0>)
 8003948:	4013      	ands	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800394c:	4b43      	ldr	r3, [pc, #268]	@ (8003a5c <HAL_GPIO_DeInit+0x1c0>)
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	4941      	ldr	r1, [pc, #260]	@ (8003a5c <HAL_GPIO_DeInit+0x1c0>)
 8003956:	4013      	ands	r3, r2
 8003958:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800395a:	4b40      	ldr	r3, [pc, #256]	@ (8003a5c <HAL_GPIO_DeInit+0x1c0>)
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	43db      	mvns	r3, r3
 8003962:	493e      	ldr	r1, [pc, #248]	@ (8003a5c <HAL_GPIO_DeInit+0x1c0>)
 8003964:	4013      	ands	r3, r2
 8003966:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003968:	4b3c      	ldr	r3, [pc, #240]	@ (8003a5c <HAL_GPIO_DeInit+0x1c0>)
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	43db      	mvns	r3, r3
 8003970:	493a      	ldr	r1, [pc, #232]	@ (8003a5c <HAL_GPIO_DeInit+0x1c0>)
 8003972:	4013      	ands	r3, r2
 8003974:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	220f      	movs	r2, #15
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003986:	4a2f      	ldr	r2, [pc, #188]	@ (8003a44 <HAL_GPIO_DeInit+0x1a8>)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	3302      	adds	r3, #2
 800398e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	43da      	mvns	r2, r3
 8003996:	482b      	ldr	r0, [pc, #172]	@ (8003a44 <HAL_GPIO_DeInit+0x1a8>)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	400a      	ands	r2, r1
 800399e:	3302      	adds	r3, #2
 80039a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	2103      	movs	r1, #3
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	08da      	lsrs	r2, r3, #3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3208      	adds	r2, #8
 80039c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	220f      	movs	r2, #15
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	08d2      	lsrs	r2, r2, #3
 80039d8:	4019      	ands	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2103      	movs	r1, #3
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	2101      	movs	r1, #1
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	401a      	ands	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	2103      	movs	r1, #3
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3301      	adds	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f47f af3b 	bne.w	80038ac <HAL_GPIO_DeInit+0x10>
  }
}
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	40010000 	.word	0x40010000
 8003a48:	48000400 	.word	0x48000400
 8003a4c:	48000800 	.word	0x48000800
 8003a50:	48000c00 	.word	0x48000c00
 8003a54:	48001000 	.word	0x48001000
 8003a58:	48001400 	.word	0x48001400
 8003a5c:	40010400 	.word	0x40010400

08003a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	887b      	ldrh	r3, [r7, #2]
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
 8003a7c:	e001      	b.n	8003a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa0:	787b      	ldrb	r3, [r7, #1]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	041a      	lsls	r2, r3, #16
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	43d9      	mvns	r1, r3
 8003ade:	887b      	ldrh	r3, [r7, #2]
 8003ae0:	400b      	ands	r3, r1
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	619a      	str	r2, [r3, #24]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003afe:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b0a:	4a05      	ldr	r2, [pc, #20]	@ (8003b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f806 	bl	8003b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40010400 	.word	0x40010400

08003b24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e08d      	b.n	8003c68 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7fe faaf 	bl	80020c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2224      	movs	r2, #36	@ 0x24
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b8a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b9a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d107      	bne.n	8003bb4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	e006      	b.n	8003bc2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003bc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d108      	bne.n	8003bdc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	e007      	b.n	8003bec <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bfe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69d9      	ldr	r1, [r3, #28]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1a      	ldr	r2, [r3, #32]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e021      	b.n	8003cc6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2224      	movs	r2, #36	@ 0x24
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fe fa6c 	bl	8002178 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	4608      	mov	r0, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	813b      	strh	r3, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	f040 80f9 	bne.w	8003eea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_I2C_Mem_Write+0x34>
 8003cfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d0a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0ed      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_I2C_Mem_Write+0x4e>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e0e6      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d26:	f7ff f80d 	bl	8002d44 <HAL_GetTick>
 8003d2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2319      	movs	r3, #25
 8003d32:	2201      	movs	r2, #1
 8003d34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 facf 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0d1      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2221      	movs	r2, #33	@ 0x21
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2240      	movs	r2, #64	@ 0x40
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d70:	88f8      	ldrh	r0, [r7, #6]
 8003d72:	893a      	ldrh	r2, [r7, #8]
 8003d74:	8979      	ldrh	r1, [r7, #10]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4603      	mov	r3, r0
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f9df 	bl	8004144 <I2C_RequestMemoryWrite>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0a9      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2bff      	cmp	r3, #255	@ 0xff
 8003da0:	d90e      	bls.n	8003dc0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	22ff      	movs	r2, #255	@ 0xff
 8003da6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	8979      	ldrh	r1, [r7, #10]
 8003db0:	2300      	movs	r3, #0
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fc53 	bl	8004664 <I2C_TransferConfig>
 8003dbe:	e00f      	b.n	8003de0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	8979      	ldrh	r1, [r7, #10]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fc42 	bl	8004664 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fad2 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e07b      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d034      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x1c8>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d130      	bne.n	8003e98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2180      	movs	r1, #128	@ 0x80
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fa4b 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e04d      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2bff      	cmp	r3, #255	@ 0xff
 8003e58:	d90e      	bls.n	8003e78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	22ff      	movs	r2, #255	@ 0xff
 8003e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	8979      	ldrh	r1, [r7, #10]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fbf7 	bl	8004664 <I2C_TransferConfig>
 8003e76:	e00f      	b.n	8003e98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	8979      	ldrh	r1, [r7, #10]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fbe6 	bl	8004664 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d19e      	bne.n	8003de0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fab8 	bl	800441c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e01a      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <HAL_I2C_Mem_Write+0x224>)
 8003eca:	400b      	ands	r3, r1
 8003ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e000      	b.n	8003eec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	fe00e800 	.word	0xfe00e800

08003ef8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	817b      	strh	r3, [r7, #10]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	813b      	strh	r3, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	f040 80fd 	bne.w	800411a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_I2C_Mem_Read+0x34>
 8003f26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0f1      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_I2C_Mem_Read+0x4e>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e0ea      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f4e:	f7fe fef9 	bl	8002d44 <HAL_GetTick>
 8003f52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2319      	movs	r3, #25
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f9bb 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0d5      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2222      	movs	r2, #34	@ 0x22
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2240      	movs	r2, #64	@ 0x40
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a3a      	ldr	r2, [r7, #32]
 8003f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f98:	88f8      	ldrh	r0, [r7, #6]
 8003f9a:	893a      	ldrh	r2, [r7, #8]
 8003f9c:	8979      	ldrh	r1, [r7, #10]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f91f 	bl	80041ec <I2C_RequestMemoryRead>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0ad      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2bff      	cmp	r3, #255	@ 0xff
 8003fc8:	d90e      	bls.n	8003fe8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	22ff      	movs	r2, #255	@ 0xff
 8003fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	8979      	ldrh	r1, [r7, #10]
 8003fd8:	4b52      	ldr	r3, [pc, #328]	@ (8004124 <HAL_I2C_Mem_Read+0x22c>)
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fb3f 	bl	8004664 <I2C_TransferConfig>
 8003fe6:	e00f      	b.n	8004008 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	8979      	ldrh	r1, [r7, #10]
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8004124 <HAL_I2C_Mem_Read+0x22c>)
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fb2e 	bl	8004664 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400e:	2200      	movs	r2, #0
 8004010:	2104      	movs	r1, #4
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f962 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07c      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d034      	beq.n	80040c8 <HAL_I2C_Mem_Read+0x1d0>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004062:	2b00      	cmp	r3, #0
 8004064:	d130      	bne.n	80040c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	2200      	movs	r2, #0
 800406e:	2180      	movs	r1, #128	@ 0x80
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f933 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e04d      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2bff      	cmp	r3, #255	@ 0xff
 8004088:	d90e      	bls.n	80040a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	22ff      	movs	r2, #255	@ 0xff
 800408e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004094:	b2da      	uxtb	r2, r3
 8004096:	8979      	ldrh	r1, [r7, #10]
 8004098:	2300      	movs	r3, #0
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fadf 	bl	8004664 <I2C_TransferConfig>
 80040a6:	e00f      	b.n	80040c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	8979      	ldrh	r1, [r7, #10]
 80040ba:	2300      	movs	r3, #0
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 face 	bl	8004664 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d19a      	bne.n	8004008 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f9a0 	bl	800441c <I2C_WaitOnSTOPFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e01a      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2220      	movs	r2, #32
 80040ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6859      	ldr	r1, [r3, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <HAL_I2C_Mem_Read+0x230>)
 80040fa:	400b      	ands	r3, r1
 80040fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800411a:	2302      	movs	r3, #2
  }
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	80002400 	.word	0x80002400
 8004128:	fe00e800 	.word	0xfe00e800

0800412c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	4608      	mov	r0, r1
 800414e:	4611      	mov	r1, r2
 8004150:	461a      	mov	r2, r3
 8004152:	4603      	mov	r3, r0
 8004154:	817b      	strh	r3, [r7, #10]
 8004156:	460b      	mov	r3, r1
 8004158:	813b      	strh	r3, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <I2C_RequestMemoryWrite+0xa4>)
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fa79 	bl	8004664 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	69b9      	ldr	r1, [r7, #24]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f909 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e02c      	b.n	80041e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800418c:	893b      	ldrh	r3, [r7, #8]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	629a      	str	r2, [r3, #40]	@ 0x28
 8004196:	e015      	b.n	80041c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	b29b      	uxth	r3, r3
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	69b9      	ldr	r1, [r7, #24]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f8ef 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e012      	b.n	80041e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ba:	893b      	ldrh	r3, [r7, #8]
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2200      	movs	r2, #0
 80041cc:	2180      	movs	r1, #128	@ 0x80
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f884 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	80002000 	.word	0x80002000

080041ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	817b      	strh	r3, [r7, #10]
 80041fe:	460b      	mov	r3, r1
 8004200:	813b      	strh	r3, [r7, #8]
 8004202:	4613      	mov	r3, r2
 8004204:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	8979      	ldrh	r1, [r7, #10]
 800420c:	4b20      	ldr	r3, [pc, #128]	@ (8004290 <I2C_RequestMemoryRead+0xa4>)
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2300      	movs	r3, #0
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fa26 	bl	8004664 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	69b9      	ldr	r1, [r7, #24]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f8b6 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e02c      	b.n	8004286 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004232:	893b      	ldrh	r3, [r7, #8]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	629a      	str	r2, [r3, #40]	@ 0x28
 800423c:	e015      	b.n	800426a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800423e:	893b      	ldrh	r3, [r7, #8]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	b29b      	uxth	r3, r3
 8004244:	b2da      	uxtb	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	69b9      	ldr	r1, [r7, #24]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f89c 	bl	800438e <I2C_WaitOnTXISFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e012      	b.n	8004286 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004260:	893b      	ldrh	r3, [r7, #8]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2200      	movs	r2, #0
 8004272:	2140      	movs	r1, #64	@ 0x40
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f831 	bl	80042dc <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	80002000 	.word	0x80002000

08004294 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d103      	bne.n	80042b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2200      	movs	r2, #0
 80042b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d007      	beq.n	80042d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	619a      	str	r2, [r3, #24]
  }
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ec:	e03b      	b.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f8d6 	bl	80044a4 <I2C_IsErrorOccurred>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e041      	b.n	8004386 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004308:	d02d      	beq.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430a:	f7fe fd1b 	bl	8002d44 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <I2C_WaitOnFlagUntilTimeout+0x44>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d122      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	429a      	cmp	r2, r3
 800433c:	d113      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e00f      	b.n	8004386 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699a      	ldr	r2, [r3, #24]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4013      	ands	r3, r2
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	bf0c      	ite	eq
 8004376:	2301      	moveq	r3, #1
 8004378:	2300      	movne	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	429a      	cmp	r2, r3
 8004382:	d0b4      	beq.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800439a:	e033      	b.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f87f 	bl	80044a4 <I2C_IsErrorOccurred>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e031      	b.n	8004414 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043b6:	d025      	beq.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b8:	f7fe fcc4 	bl	8002d44 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d302      	bcc.n	80043ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d11a      	bne.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d013      	beq.n	8004404 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e0:	f043 0220 	orr.w	r2, r3, #32
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e007      	b.n	8004414 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	d1c4      	bne.n	800439c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004428:	e02f      	b.n	800448a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f838 	bl	80044a4 <I2C_IsErrorOccurred>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e02d      	b.n	800449a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443e:	f7fe fc81 	bl	8002d44 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d11a      	bne.n	800448a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b20      	cmp	r3, #32
 8004460:	d013      	beq.n	800448a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e007      	b.n	800449a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b20      	cmp	r3, #32
 8004496:	d1c8      	bne.n	800442a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	@ 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d068      	beq.n	80045a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2210      	movs	r2, #16
 80044d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044d8:	e049      	b.n	800456e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044e0:	d045      	beq.n	800456e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044e2:	f7fe fc2f 	bl	8002d44 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <I2C_IsErrorOccurred+0x54>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d13a      	bne.n	800456e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004502:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800450a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800451a:	d121      	bne.n	8004560 <I2C_IsErrorOccurred+0xbc>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004522:	d01d      	beq.n	8004560 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	2b20      	cmp	r3, #32
 8004528:	d01a      	beq.n	8004560 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004538:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800453a:	f7fe fc03 	bl	8002d44 <HAL_GetTick>
 800453e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004540:	e00e      	b.n	8004560 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004542:	f7fe fbff 	bl	8002d44 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b19      	cmp	r3, #25
 800454e:	d907      	bls.n	8004560 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	f043 0320 	orr.w	r3, r3, #32
 8004556:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800455e:	e006      	b.n	800456e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b20      	cmp	r3, #32
 800456c:	d1e9      	bne.n	8004542 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b20      	cmp	r3, #32
 800457a:	d003      	beq.n	8004584 <I2C_IsErrorOccurred+0xe0>
 800457c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0aa      	beq.n	80044da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2220      	movs	r2, #32
 8004592:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	f043 0302 	orr.w	r3, r3, #2
 80045fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01c      	beq.n	8004652 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff fe3b 	bl	8004294 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b0d      	ldr	r3, [pc, #52]	@ (8004660 <I2C_IsErrorOccurred+0x1bc>)
 800462a:	400b      	ands	r3, r1
 800462c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004656:	4618      	mov	r0, r3
 8004658:	3728      	adds	r7, #40	@ 0x28
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	fe00e800 	.word	0xfe00e800

08004664 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	817b      	strh	r3, [r7, #10]
 8004672:	4613      	mov	r3, r2
 8004674:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004676:	897b      	ldrh	r3, [r7, #10]
 8004678:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800467c:	7a7b      	ldrb	r3, [r7, #9]
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004684:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	4313      	orrs	r3, r2
 800468e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004692:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	0d5b      	lsrs	r3, r3, #21
 800469e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80046a2:	4b08      	ldr	r3, [pc, #32]	@ (80046c4 <I2C_TransferConfig+0x60>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	43db      	mvns	r3, r3
 80046a8:	ea02 0103 	and.w	r1, r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	03ff63ff 	.word	0x03ff63ff

080046c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d138      	bne.n	8004750 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e032      	b.n	8004752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	@ 0x24
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800471a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b20      	cmp	r3, #32
 8004772:	d139      	bne.n	80047e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800477e:	2302      	movs	r3, #2
 8004780:	e033      	b.n	80047ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2224      	movs	r2, #36	@ 0x24
 800478e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80047b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e041      	b.n	800488c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004810:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f245 5255 	movw	r2, #21845	@ 0x5555
 800481a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6852      	ldr	r2, [r2, #4]
 8004824:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6892      	ldr	r2, [r2, #8]
 800482e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004830:	f7fe fa88 	bl	8002d44 <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004836:	e00f      	b.n	8004858 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004838:	f7fe fa84 	bl	8002d44 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b31      	cmp	r3, #49	@ 0x31
 8004844:	d908      	bls.n	8004858 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e019      	b.n	800488c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e8      	bne.n	8004838 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	429a      	cmp	r2, r3
 8004872:	d005      	beq.n	8004880 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68d2      	ldr	r2, [r2, #12]
 800487c:	611a      	str	r2, [r3, #16]
 800487e:	e004      	b.n	800488a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004888:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80048a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d141      	bne.n	8004946 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048c2:	4b4b      	ldr	r3, [pc, #300]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ce:	d131      	bne.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d0:	4b47      	ldr	r3, [pc, #284]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d6:	4a46      	ldr	r2, [pc, #280]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048e0:	4b43      	ldr	r3, [pc, #268]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048e8:	4a41      	ldr	r2, [pc, #260]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048f0:	4b40      	ldr	r3, [pc, #256]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2232      	movs	r2, #50	@ 0x32
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	4a3f      	ldr	r2, [pc, #252]	@ (80049f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	0c9b      	lsrs	r3, r3, #18
 8004902:	3301      	adds	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004906:	e002      	b.n	800490e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3b01      	subs	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800490e:	4b38      	ldr	r3, [pc, #224]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800491a:	d102      	bne.n	8004922 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f2      	bne.n	8004908 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004922:	4b33      	ldr	r3, [pc, #204]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800492a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800492e:	d158      	bne.n	80049e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e057      	b.n	80049e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004934:	4b2e      	ldr	r3, [pc, #184]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800493a:	4a2d      	ldr	r2, [pc, #180]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004940:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004944:	e04d      	b.n	80049e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800494c:	d141      	bne.n	80049d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800494e:	4b28      	ldr	r3, [pc, #160]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495a:	d131      	bne.n	80049c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800495c:	4b24      	ldr	r3, [pc, #144]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004962:	4a23      	ldr	r2, [pc, #140]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004968:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800496c:	4b20      	ldr	r3, [pc, #128]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004974:	4a1e      	ldr	r2, [pc, #120]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800497a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800497c:	4b1d      	ldr	r3, [pc, #116]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2232      	movs	r2, #50	@ 0x32
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004988:	fba2 2303 	umull	r2, r3, r2, r3
 800498c:	0c9b      	lsrs	r3, r3, #18
 800498e:	3301      	adds	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004992:	e002      	b.n	800499a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3b01      	subs	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a6:	d102      	bne.n	80049ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f2      	bne.n	8004994 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049ae:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ba:	d112      	bne.n	80049e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e011      	b.n	80049e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049c0:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049c6:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049d0:	e007      	b.n	80049e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049d2:	4b07      	ldr	r3, [pc, #28]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049da:	4a05      	ldr	r2, [pc, #20]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40007000 	.word	0x40007000
 80049f4:	20000004 	.word	0x20000004
 80049f8:	431bde83 	.word	0x431bde83

080049fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a00:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4a04      	ldr	r2, [pc, #16]	@ (8004a18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a0a:	6093      	str	r3, [r2, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40007000 	.word	0x40007000

08004a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e2fe      	b.n	800502c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d075      	beq.n	8004b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a3a:	4b97      	ldr	r3, [pc, #604]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a44:	4b94      	ldr	r3, [pc, #592]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b0c      	cmp	r3, #12
 8004a52:	d102      	bne.n	8004a5a <HAL_RCC_OscConfig+0x3e>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d002      	beq.n	8004a60 <HAL_RCC_OscConfig+0x44>
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d10b      	bne.n	8004a78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a60:	4b8d      	ldr	r3, [pc, #564]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d05b      	beq.n	8004b24 <HAL_RCC_OscConfig+0x108>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d157      	bne.n	8004b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e2d9      	b.n	800502c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a80:	d106      	bne.n	8004a90 <HAL_RCC_OscConfig+0x74>
 8004a82:	4b85      	ldr	r3, [pc, #532]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a84      	ldr	r2, [pc, #528]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e01d      	b.n	8004acc <HAL_RCC_OscConfig+0xb0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x98>
 8004a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a7b      	ldr	r2, [pc, #492]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e00b      	b.n	8004acc <HAL_RCC_OscConfig+0xb0>
 8004ab4:	4b78      	ldr	r3, [pc, #480]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a77      	ldr	r2, [pc, #476]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	4b75      	ldr	r3, [pc, #468]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a74      	ldr	r2, [pc, #464]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d013      	beq.n	8004afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fe f936 	bl	8002d44 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004adc:	f7fe f932 	bl	8002d44 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	@ 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e29e      	b.n	800502c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aee:	4b6a      	ldr	r3, [pc, #424]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0xc0>
 8004afa:	e014      	b.n	8004b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fe f922 	bl	8002d44 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fe f91e 	bl	8002d44 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	@ 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e28a      	b.n	800502c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b16:	4b60      	ldr	r3, [pc, #384]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0xe8>
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d075      	beq.n	8004c1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b32:	4b59      	ldr	r3, [pc, #356]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b3c:	4b56      	ldr	r3, [pc, #344]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b0c      	cmp	r3, #12
 8004b4a:	d102      	bne.n	8004b52 <HAL_RCC_OscConfig+0x136>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d002      	beq.n	8004b58 <HAL_RCC_OscConfig+0x13c>
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d11f      	bne.n	8004b98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b58:	4b4f      	ldr	r3, [pc, #316]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_OscConfig+0x154>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e25d      	b.n	800502c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b70:	4b49      	ldr	r3, [pc, #292]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	4946      	ldr	r1, [pc, #280]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b84:	4b45      	ldr	r3, [pc, #276]	@ (8004c9c <HAL_RCC_OscConfig+0x280>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fd fd43 	bl	8002614 <HAL_InitTick>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d043      	beq.n	8004c1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e249      	b.n	800502c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d023      	beq.n	8004be8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a3c      	ldr	r2, [pc, #240]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fe f8ca 	bl	8002d44 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb4:	f7fe f8c6 	bl	8002d44 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e232      	b.n	800502c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc6:	4b34      	ldr	r3, [pc, #208]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd2:	4b31      	ldr	r3, [pc, #196]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	492d      	ldr	r1, [pc, #180]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	604b      	str	r3, [r1, #4]
 8004be6:	e01a      	b.n	8004c1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a2a      	ldr	r2, [pc, #168]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004bee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fe f8a6 	bl	8002d44 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfc:	f7fe f8a2 	bl	8002d44 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e20e      	b.n	800502c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c0e:	4b22      	ldr	r3, [pc, #136]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x1e0>
 8004c1a:	e000      	b.n	8004c1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d041      	beq.n	8004cae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01c      	beq.n	8004c6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c32:	4b19      	ldr	r3, [pc, #100]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c38:	4a17      	ldr	r2, [pc, #92]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c42:	f7fe f87f 	bl	8002d44 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c4a:	f7fe f87b 	bl	8002d44 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1e7      	b.n	800502c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0ef      	beq.n	8004c4a <HAL_RCC_OscConfig+0x22e>
 8004c6a:	e020      	b.n	8004cae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c72:	4a09      	ldr	r2, [pc, #36]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fe f862 	bl	8002d44 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c82:	e00d      	b.n	8004ca0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c84:	f7fe f85e 	bl	8002d44 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d906      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e1ca      	b.n	800502c <HAL_RCC_OscConfig+0x610>
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ca0:	4b8c      	ldr	r3, [pc, #560]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1ea      	bne.n	8004c84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80a6 	beq.w	8004e08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cc0:	4b84      	ldr	r3, [pc, #528]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x2b4>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <HAL_RCC_OscConfig+0x2b6>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00d      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cda:	4a7e      	ldr	r2, [pc, #504]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ce0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf2:	4b79      	ldr	r3, [pc, #484]	@ (8004ed8 <HAL_RCC_OscConfig+0x4bc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d118      	bne.n	8004d30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cfe:	4b76      	ldr	r3, [pc, #472]	@ (8004ed8 <HAL_RCC_OscConfig+0x4bc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a75      	ldr	r2, [pc, #468]	@ (8004ed8 <HAL_RCC_OscConfig+0x4bc>)
 8004d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d0a:	f7fe f81b 	bl	8002d44 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d12:	f7fe f817 	bl	8002d44 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e183      	b.n	800502c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d24:	4b6c      	ldr	r3, [pc, #432]	@ (8004ed8 <HAL_RCC_OscConfig+0x4bc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d108      	bne.n	8004d4a <HAL_RCC_OscConfig+0x32e>
 8004d38:	4b66      	ldr	r3, [pc, #408]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3e:	4a65      	ldr	r2, [pc, #404]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d48:	e024      	b.n	8004d94 <HAL_RCC_OscConfig+0x378>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d110      	bne.n	8004d74 <HAL_RCC_OscConfig+0x358>
 8004d52:	4b60      	ldr	r3, [pc, #384]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d58:	4a5e      	ldr	r2, [pc, #376]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004d5a:	f043 0304 	orr.w	r3, r3, #4
 8004d5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d62:	4b5c      	ldr	r3, [pc, #368]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d68:	4a5a      	ldr	r2, [pc, #360]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d72:	e00f      	b.n	8004d94 <HAL_RCC_OscConfig+0x378>
 8004d74:	4b57      	ldr	r3, [pc, #348]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7a:	4a56      	ldr	r2, [pc, #344]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d84:	4b53      	ldr	r3, [pc, #332]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8a:	4a52      	ldr	r2, [pc, #328]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004d8c:	f023 0304 	bic.w	r3, r3, #4
 8004d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d016      	beq.n	8004dca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fd ffd2 	bl	8002d44 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da4:	f7fd ffce 	bl	8002d44 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e138      	b.n	800502c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dba:	4b46      	ldr	r3, [pc, #280]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ed      	beq.n	8004da4 <HAL_RCC_OscConfig+0x388>
 8004dc8:	e015      	b.n	8004df6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dca:	f7fd ffbb 	bl	8002d44 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fd ffb7 	bl	8002d44 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e121      	b.n	800502c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004de8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1ed      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004df6:	7ffb      	ldrb	r3, [r7, #31]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d105      	bne.n	8004e08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfc:	4b35      	ldr	r3, [pc, #212]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e00:	4a34      	ldr	r2, [pc, #208]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d03c      	beq.n	8004e8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01c      	beq.n	8004e56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e22:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fd ff8a 	bl	8002d44 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e34:	f7fd ff86 	bl	8002d44 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e0f2      	b.n	800502c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e46:	4b23      	ldr	r3, [pc, #140]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004e48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ef      	beq.n	8004e34 <HAL_RCC_OscConfig+0x418>
 8004e54:	e01b      	b.n	8004e8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e56:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e66:	f7fd ff6d 	bl	8002d44 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e6e:	f7fd ff69 	bl	8002d44 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0d5      	b.n	800502c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e80:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ef      	bne.n	8004e6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80c9 	beq.w	800502a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e98:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 030c 	and.w	r3, r3, #12
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	f000 8083 	beq.w	8004fac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d15e      	bne.n	8004f6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eae:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a08      	ldr	r2, [pc, #32]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b8>)
 8004eb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eba:	f7fd ff43 	bl	8002d44 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec0:	e00c      	b.n	8004edc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec2:	f7fd ff3f 	bl	8002d44 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d905      	bls.n	8004edc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e0ab      	b.n	800502c <HAL_RCC_OscConfig+0x610>
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004edc:	4b55      	ldr	r3, [pc, #340]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1ec      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee8:	4b52      	ldr	r3, [pc, #328]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	4b52      	ldr	r3, [pc, #328]	@ (8005038 <HAL_RCC_OscConfig+0x61c>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6a11      	ldr	r1, [r2, #32]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ef8:	3a01      	subs	r2, #1
 8004efa:	0112      	lsls	r2, r2, #4
 8004efc:	4311      	orrs	r1, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f02:	0212      	lsls	r2, r2, #8
 8004f04:	4311      	orrs	r1, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f0a:	0852      	lsrs	r2, r2, #1
 8004f0c:	3a01      	subs	r2, #1
 8004f0e:	0552      	lsls	r2, r2, #21
 8004f10:	4311      	orrs	r1, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f16:	0852      	lsrs	r2, r2, #1
 8004f18:	3a01      	subs	r2, #1
 8004f1a:	0652      	lsls	r2, r2, #25
 8004f1c:	4311      	orrs	r1, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f22:	06d2      	lsls	r2, r2, #27
 8004f24:	430a      	orrs	r2, r1
 8004f26:	4943      	ldr	r1, [pc, #268]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f2c:	4b41      	ldr	r3, [pc, #260]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a40      	ldr	r2, [pc, #256]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f38:	4b3e      	ldr	r3, [pc, #248]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a3d      	ldr	r2, [pc, #244]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fd fefe 	bl	8002d44 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fd fefa 	bl	8002d44 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e066      	b.n	800502c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5e:	4b35      	ldr	r3, [pc, #212]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x530>
 8004f6a:	e05e      	b.n	800502a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6c:	4b31      	ldr	r3, [pc, #196]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a30      	ldr	r2, [pc, #192]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fd fee4 	bl	8002d44 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f80:	f7fd fee0 	bl	8002d44 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e04c      	b.n	800502c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f92:	4b28      	ldr	r3, [pc, #160]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f9e:	4b25      	ldr	r3, [pc, #148]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	4924      	ldr	r1, [pc, #144]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004fa4:	4b25      	ldr	r3, [pc, #148]	@ (800503c <HAL_RCC_OscConfig+0x620>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	60cb      	str	r3, [r1, #12]
 8004faa:	e03e      	b.n	800502a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e039      	b.n	800502c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8005034 <HAL_RCC_OscConfig+0x618>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f003 0203 	and.w	r2, r3, #3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d12c      	bne.n	8005026 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d123      	bne.n	8005026 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d11b      	bne.n	8005026 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d113      	bne.n	8005026 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	3b01      	subs	r3, #1
 800500c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d109      	bne.n	8005026 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	3b01      	subs	r3, #1
 8005020:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005022:	429a      	cmp	r2, r3
 8005024:	d001      	beq.n	800502a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3720      	adds	r7, #32
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40021000 	.word	0x40021000
 8005038:	019f800c 	.word	0x019f800c
 800503c:	feeefffc 	.word	0xfeeefffc

08005040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e11e      	b.n	8005296 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005058:	4b91      	ldr	r3, [pc, #580]	@ (80052a0 <HAL_RCC_ClockConfig+0x260>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d910      	bls.n	8005088 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005066:	4b8e      	ldr	r3, [pc, #568]	@ (80052a0 <HAL_RCC_ClockConfig+0x260>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 020f 	bic.w	r2, r3, #15
 800506e:	498c      	ldr	r1, [pc, #560]	@ (80052a0 <HAL_RCC_ClockConfig+0x260>)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005076:	4b8a      	ldr	r3, [pc, #552]	@ (80052a0 <HAL_RCC_ClockConfig+0x260>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e106      	b.n	8005296 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d073      	beq.n	800517c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d129      	bne.n	80050f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509c:	4b81      	ldr	r3, [pc, #516]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0f4      	b.n	8005296 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80050ac:	f000 f9d0 	bl	8005450 <RCC_GetSysClockFreqFromPLLSource>
 80050b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4a7c      	ldr	r2, [pc, #496]	@ (80052a8 <HAL_RCC_ClockConfig+0x268>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d93f      	bls.n	800513a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050ba:	4b7a      	ldr	r3, [pc, #488]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d033      	beq.n	800513a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d12f      	bne.n	800513a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050da:	4b72      	ldr	r3, [pc, #456]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050e2:	4a70      	ldr	r2, [pc, #448]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 80050e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050ea:	2380      	movs	r3, #128	@ 0x80
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e024      	b.n	800513a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f8:	4b6a      	ldr	r3, [pc, #424]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0c6      	b.n	8005296 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005108:	4b66      	ldr	r3, [pc, #408]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0be      	b.n	8005296 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005118:	f000 f8ce 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 800511c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4a61      	ldr	r2, [pc, #388]	@ (80052a8 <HAL_RCC_ClockConfig+0x268>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d909      	bls.n	800513a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005126:	4b5f      	ldr	r3, [pc, #380]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800512e:	4a5d      	ldr	r2, [pc, #372]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 8005130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005134:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005136:	2380      	movs	r3, #128	@ 0x80
 8005138:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800513a:	4b5a      	ldr	r3, [pc, #360]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 0203 	bic.w	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4957      	ldr	r1, [pc, #348]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 8005148:	4313      	orrs	r3, r2
 800514a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514c:	f7fd fdfa 	bl	8002d44 <HAL_GetTick>
 8005150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005152:	e00a      	b.n	800516a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005154:	f7fd fdf6 	bl	8002d44 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e095      	b.n	8005296 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516a:	4b4e      	ldr	r3, [pc, #312]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 020c 	and.w	r2, r3, #12
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	429a      	cmp	r2, r3
 800517a:	d1eb      	bne.n	8005154 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d023      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005194:	4b43      	ldr	r3, [pc, #268]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	4a42      	ldr	r2, [pc, #264]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 800519a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800519e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80051ac:	4b3d      	ldr	r3, [pc, #244]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80051b4:	4a3b      	ldr	r2, [pc, #236]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 80051b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051bc:	4b39      	ldr	r3, [pc, #228]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4936      	ldr	r1, [pc, #216]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	608b      	str	r3, [r1, #8]
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b80      	cmp	r3, #128	@ 0x80
 80051d4:	d105      	bne.n	80051e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051d6:	4b33      	ldr	r3, [pc, #204]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	4a32      	ldr	r2, [pc, #200]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 80051dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051e2:	4b2f      	ldr	r3, [pc, #188]	@ (80052a0 <HAL_RCC_ClockConfig+0x260>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d21d      	bcs.n	800522c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f0:	4b2b      	ldr	r3, [pc, #172]	@ (80052a0 <HAL_RCC_ClockConfig+0x260>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f023 020f 	bic.w	r2, r3, #15
 80051f8:	4929      	ldr	r1, [pc, #164]	@ (80052a0 <HAL_RCC_ClockConfig+0x260>)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005200:	f7fd fda0 	bl	8002d44 <HAL_GetTick>
 8005204:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005206:	e00a      	b.n	800521e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005208:	f7fd fd9c 	bl	8002d44 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e03b      	b.n	8005296 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800521e:	4b20      	ldr	r3, [pc, #128]	@ (80052a0 <HAL_RCC_ClockConfig+0x260>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d1ed      	bne.n	8005208 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005238:	4b1a      	ldr	r3, [pc, #104]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4917      	ldr	r1, [pc, #92]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 8005246:	4313      	orrs	r3, r2
 8005248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005256:	4b13      	ldr	r3, [pc, #76]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	490f      	ldr	r1, [pc, #60]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 8005266:	4313      	orrs	r3, r2
 8005268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800526a:	f000 f825 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 800526e:	4602      	mov	r2, r0
 8005270:	4b0c      	ldr	r3, [pc, #48]	@ (80052a4 <HAL_RCC_ClockConfig+0x264>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	490c      	ldr	r1, [pc, #48]	@ (80052ac <HAL_RCC_ClockConfig+0x26c>)
 800527c:	5ccb      	ldrb	r3, [r1, r3]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	fa22 f303 	lsr.w	r3, r2, r3
 8005286:	4a0a      	ldr	r2, [pc, #40]	@ (80052b0 <HAL_RCC_ClockConfig+0x270>)
 8005288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800528a:	4b0a      	ldr	r3, [pc, #40]	@ (80052b4 <HAL_RCC_ClockConfig+0x274>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f7fd f9c0 	bl	8002614 <HAL_InitTick>
 8005294:	4603      	mov	r3, r0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40022000 	.word	0x40022000
 80052a4:	40021000 	.word	0x40021000
 80052a8:	04c4b400 	.word	0x04c4b400
 80052ac:	0801b3cc 	.word	0x0801b3cc
 80052b0:	20000004 	.word	0x20000004
 80052b4:	20000008 	.word	0x20000008

080052b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80052be:	4b2c      	ldr	r3, [pc, #176]	@ (8005370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d102      	bne.n	80052d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005374 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	e047      	b.n	8005360 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052d0:	4b27      	ldr	r3, [pc, #156]	@ (8005370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d102      	bne.n	80052e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052dc:	4b26      	ldr	r3, [pc, #152]	@ (8005378 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	e03e      	b.n	8005360 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052e2:	4b23      	ldr	r3, [pc, #140]	@ (8005370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d136      	bne.n	800535c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ee:	4b20      	ldr	r3, [pc, #128]	@ (8005370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	3301      	adds	r3, #1
 8005304:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d10c      	bne.n	8005326 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800530c:	4a1a      	ldr	r2, [pc, #104]	@ (8005378 <HAL_RCC_GetSysClockFreq+0xc0>)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	4a16      	ldr	r2, [pc, #88]	@ (8005370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005316:	68d2      	ldr	r2, [r2, #12]
 8005318:	0a12      	lsrs	r2, r2, #8
 800531a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800531e:	fb02 f303 	mul.w	r3, r2, r3
 8005322:	617b      	str	r3, [r7, #20]
      break;
 8005324:	e00c      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005326:	4a13      	ldr	r2, [pc, #76]	@ (8005374 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	4a10      	ldr	r2, [pc, #64]	@ (8005370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005330:	68d2      	ldr	r2, [r2, #12]
 8005332:	0a12      	lsrs	r2, r2, #8
 8005334:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005338:	fb02 f303 	mul.w	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]
      break;
 800533e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005340:	4b0b      	ldr	r3, [pc, #44]	@ (8005370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	0e5b      	lsrs	r3, r3, #25
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	3301      	adds	r3, #1
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e001      	b.n	8005360 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005360:	693b      	ldr	r3, [r7, #16]
}
 8005362:	4618      	mov	r0, r3
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000
 8005374:	00f42400 	.word	0x00f42400
 8005378:	016e3600 	.word	0x016e3600

0800537c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005380:	4b03      	ldr	r3, [pc, #12]	@ (8005390 <HAL_RCC_GetHCLKFreq+0x14>)
 8005382:	681b      	ldr	r3, [r3, #0]
}
 8005384:	4618      	mov	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000004 	.word	0x20000004

08005394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005398:	f7ff fff0 	bl	800537c <HAL_RCC_GetHCLKFreq>
 800539c:	4602      	mov	r2, r0
 800539e:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4904      	ldr	r1, [pc, #16]	@ (80053bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80053aa:	5ccb      	ldrb	r3, [r1, r3]
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40021000 	.word	0x40021000
 80053bc:	0801b3dc 	.word	0x0801b3dc

080053c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053c4:	f7ff ffda 	bl	800537c <HAL_RCC_GetHCLKFreq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4b06      	ldr	r3, [pc, #24]	@ (80053e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	0adb      	lsrs	r3, r3, #11
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	4904      	ldr	r1, [pc, #16]	@ (80053e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053d6:	5ccb      	ldrb	r3, [r1, r3]
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000
 80053e8:	0801b3dc 	.word	0x0801b3dc

080053ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	220f      	movs	r2, #15
 80053fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80053fc:	4b12      	ldr	r3, [pc, #72]	@ (8005448 <HAL_RCC_GetClockConfig+0x5c>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 0203 	and.w	r2, r3, #3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005408:	4b0f      	ldr	r3, [pc, #60]	@ (8005448 <HAL_RCC_GetClockConfig+0x5c>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005414:	4b0c      	ldr	r3, [pc, #48]	@ (8005448 <HAL_RCC_GetClockConfig+0x5c>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005420:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <HAL_RCC_GetClockConfig+0x5c>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	08db      	lsrs	r3, r3, #3
 8005426:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800542e:	4b07      	ldr	r3, [pc, #28]	@ (800544c <HAL_RCC_GetClockConfig+0x60>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 020f 	and.w	r2, r3, #15
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40021000 	.word	0x40021000
 800544c:	40022000 	.word	0x40022000

08005450 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005456:	4b1e      	ldr	r3, [pc, #120]	@ (80054d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005460:	4b1b      	ldr	r3, [pc, #108]	@ (80054d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	091b      	lsrs	r3, r3, #4
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	3301      	adds	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d10c      	bne.n	800548e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005474:	4a17      	ldr	r2, [pc, #92]	@ (80054d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	4a14      	ldr	r2, [pc, #80]	@ (80054d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800547e:	68d2      	ldr	r2, [r2, #12]
 8005480:	0a12      	lsrs	r2, r2, #8
 8005482:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	617b      	str	r3, [r7, #20]
    break;
 800548c:	e00c      	b.n	80054a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800548e:	4a12      	ldr	r2, [pc, #72]	@ (80054d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	fbb2 f3f3 	udiv	r3, r2, r3
 8005496:	4a0e      	ldr	r2, [pc, #56]	@ (80054d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005498:	68d2      	ldr	r2, [r2, #12]
 800549a:	0a12      	lsrs	r2, r2, #8
 800549c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054a0:	fb02 f303 	mul.w	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]
    break;
 80054a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054a8:	4b09      	ldr	r3, [pc, #36]	@ (80054d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	0e5b      	lsrs	r3, r3, #25
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	3301      	adds	r3, #1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80054c2:	687b      	ldr	r3, [r7, #4]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40021000 	.word	0x40021000
 80054d4:	016e3600 	.word	0x016e3600
 80054d8:	00f42400 	.word	0x00f42400

080054dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054e4:	2300      	movs	r3, #0
 80054e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054e8:	2300      	movs	r3, #0
 80054ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8098 	beq.w	800562a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054fa:	2300      	movs	r3, #0
 80054fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054fe:	4b43      	ldr	r3, [pc, #268]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10d      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800550a:	4b40      	ldr	r3, [pc, #256]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800550c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550e:	4a3f      	ldr	r2, [pc, #252]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005514:	6593      	str	r3, [r2, #88]	@ 0x58
 8005516:	4b3d      	ldr	r3, [pc, #244]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005522:	2301      	movs	r3, #1
 8005524:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005526:	4b3a      	ldr	r3, [pc, #232]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a39      	ldr	r2, [pc, #228]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800552c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005532:	f7fd fc07 	bl	8002d44 <HAL_GetTick>
 8005536:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005538:	e009      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800553a:	f7fd fc03 	bl	8002d44 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d902      	bls.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	74fb      	strb	r3, [r7, #19]
        break;
 800554c:	e005      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800554e:	4b30      	ldr	r3, [pc, #192]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ef      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800555a:	7cfb      	ldrb	r3, [r7, #19]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d159      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005560:	4b2a      	ldr	r3, [pc, #168]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800556a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01e      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	429a      	cmp	r2, r3
 800557a:	d019      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800557c:	4b23      	ldr	r3, [pc, #140]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800557e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005586:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005588:	4b20      	ldr	r3, [pc, #128]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558e:	4a1f      	ldr	r2, [pc, #124]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005598:	4b1c      	ldr	r3, [pc, #112]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559e:	4a1b      	ldr	r2, [pc, #108]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055a8:	4a18      	ldr	r2, [pc, #96]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d016      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ba:	f7fd fbc3 	bl	8002d44 <HAL_GetTick>
 80055be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055c0:	e00b      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c2:	f7fd fbbf 	bl	8002d44 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d902      	bls.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	74fb      	strb	r3, [r7, #19]
            break;
 80055d8:	e006      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055da:	4b0c      	ldr	r3, [pc, #48]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0ec      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ee:	4b07      	ldr	r3, [pc, #28]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055fc:	4903      	ldr	r1, [pc, #12]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005604:	e008      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005606:	7cfb      	ldrb	r3, [r7, #19]
 8005608:	74bb      	strb	r3, [r7, #18]
 800560a:	e005      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800560c:	40021000 	.word	0x40021000
 8005610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005618:	7c7b      	ldrb	r3, [r7, #17]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d105      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561e:	4ba7      	ldr	r3, [pc, #668]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005622:	4aa6      	ldr	r2, [pc, #664]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005628:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005636:	4ba1      	ldr	r3, [pc, #644]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563c:	f023 0203 	bic.w	r2, r3, #3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	499d      	ldr	r1, [pc, #628]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005658:	4b98      	ldr	r3, [pc, #608]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565e:	f023 020c 	bic.w	r2, r3, #12
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	4995      	ldr	r1, [pc, #596]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800567a:	4b90      	ldr	r3, [pc, #576]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005680:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	498c      	ldr	r1, [pc, #560]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800569c:	4b87      	ldr	r3, [pc, #540]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	4984      	ldr	r1, [pc, #528]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056be:	4b7f      	ldr	r3, [pc, #508]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	497b      	ldr	r1, [pc, #492]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056e0:	4b76      	ldr	r3, [pc, #472]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	4973      	ldr	r1, [pc, #460]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005702:	4b6e      	ldr	r3, [pc, #440]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005708:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	496a      	ldr	r1, [pc, #424]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005724:	4b65      	ldr	r3, [pc, #404]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	4962      	ldr	r1, [pc, #392]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005746:	4b5d      	ldr	r3, [pc, #372]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005754:	4959      	ldr	r1, [pc, #356]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005768:	4b54      	ldr	r3, [pc, #336]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800576e:	f023 0203 	bic.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	4951      	ldr	r1, [pc, #324]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800578a:	4b4c      	ldr	r3, [pc, #304]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005790:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	4948      	ldr	r1, [pc, #288]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d015      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057ac:	4b43      	ldr	r3, [pc, #268]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ba:	4940      	ldr	r1, [pc, #256]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057ca:	d105      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057cc:	4b3b      	ldr	r3, [pc, #236]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4a3a      	ldr	r2, [pc, #232]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057d6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d015      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057e4:	4b35      	ldr	r3, [pc, #212]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f2:	4932      	ldr	r1, [pc, #200]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005802:	d105      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005804:	4b2d      	ldr	r3, [pc, #180]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4a2c      	ldr	r2, [pc, #176]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800580e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d015      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800581c:	4b27      	ldr	r3, [pc, #156]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005822:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582a:	4924      	ldr	r1, [pc, #144]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800583a:	d105      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800583c:	4b1f      	ldr	r3, [pc, #124]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a1e      	ldr	r2, [pc, #120]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005846:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005854:	4b19      	ldr	r3, [pc, #100]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005862:	4916      	ldr	r1, [pc, #88]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005872:	d105      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005874:	4b11      	ldr	r3, [pc, #68]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a10      	ldr	r2, [pc, #64]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800587e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d019      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800588c:	4b0b      	ldr	r3, [pc, #44]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005892:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	4908      	ldr	r1, [pc, #32]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058aa:	d109      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ac:	4b03      	ldr	r3, [pc, #12]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a02      	ldr	r2, [pc, #8]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058b6:	60d3      	str	r3, [r2, #12]
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80058ba:	bf00      	nop
 80058bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d015      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058cc:	4b29      	ldr	r3, [pc, #164]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058da:	4926      	ldr	r1, [pc, #152]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058ea:	d105      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058ec:	4b21      	ldr	r3, [pc, #132]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4a20      	ldr	r2, [pc, #128]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d015      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005904:	4b1b      	ldr	r3, [pc, #108]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005912:	4918      	ldr	r1, [pc, #96]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005922:	d105      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005924:	4b13      	ldr	r3, [pc, #76]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	4a12      	ldr	r2, [pc, #72]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800592a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800592e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d015      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800593c:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800593e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005942:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800594a:	490a      	ldr	r1, [pc, #40]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800595a:	d105      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800595c:	4b05      	ldr	r3, [pc, #20]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4a04      	ldr	r2, [pc, #16]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005966:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005968:	7cbb      	ldrb	r3, [r7, #18]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	40021000 	.word	0x40021000

08005978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e049      	b.n	8005a1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f841 	bl	8005a26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f000 fa30 	bl	8005e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d001      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e054      	b.n	8005afe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0201 	orr.w	r2, r2, #1
 8005a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a26      	ldr	r2, [pc, #152]	@ (8005b0c <HAL_TIM_Base_Start_IT+0xd0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d022      	beq.n	8005abc <HAL_TIM_Base_Start_IT+0x80>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a7e:	d01d      	beq.n	8005abc <HAL_TIM_Base_Start_IT+0x80>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a22      	ldr	r2, [pc, #136]	@ (8005b10 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d018      	beq.n	8005abc <HAL_TIM_Base_Start_IT+0x80>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a21      	ldr	r2, [pc, #132]	@ (8005b14 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d013      	beq.n	8005abc <HAL_TIM_Base_Start_IT+0x80>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1f      	ldr	r2, [pc, #124]	@ (8005b18 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00e      	beq.n	8005abc <HAL_TIM_Base_Start_IT+0x80>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b1c <HAL_TIM_Base_Start_IT+0xe0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_TIM_Base_Start_IT+0x80>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1c      	ldr	r2, [pc, #112]	@ (8005b20 <HAL_TIM_Base_Start_IT+0xe4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d004      	beq.n	8005abc <HAL_TIM_Base_Start_IT+0x80>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8005b24 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d115      	bne.n	8005ae8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	4b19      	ldr	r3, [pc, #100]	@ (8005b28 <HAL_TIM_Base_Start_IT+0xec>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b06      	cmp	r3, #6
 8005acc:	d015      	beq.n	8005afa <HAL_TIM_Base_Start_IT+0xbe>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ad4:	d011      	beq.n	8005afa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0201 	orr.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae6:	e008      	b.n	8005afa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e000      	b.n	8005afc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40000c00 	.word	0x40000c00
 8005b1c:	40013400 	.word	0x40013400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40015000 	.word	0x40015000
 8005b28:	00010007 	.word	0x00010007

08005b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d020      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0202 	mvn.w	r2, #2
 8005b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f931 	bl	8005dde <HAL_TIM_IC_CaptureCallback>
 8005b7c:	e005      	b.n	8005b8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f923 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f934 	bl	8005df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d020      	beq.n	8005bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01b      	beq.n	8005bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0204 	mvn.w	r2, #4
 8005bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f90b 	bl	8005dde <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f8fd 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f90e 	bl	8005df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d020      	beq.n	8005c28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01b      	beq.n	8005c28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0208 	mvn.w	r2, #8
 8005bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f8e5 	bl	8005dde <HAL_TIM_IC_CaptureCallback>
 8005c14:	e005      	b.n	8005c22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f8d7 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f8e8 	bl	8005df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f003 0310 	and.w	r3, r3, #16
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d020      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01b      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0210 	mvn.w	r2, #16
 8005c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2208      	movs	r2, #8
 8005c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f8bf 	bl	8005dde <HAL_TIM_IC_CaptureCallback>
 8005c60:	e005      	b.n	8005c6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f8b1 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f8c2 	bl	8005df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0201 	mvn.w	r2, #1
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fc fb16 	bl	80022c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d104      	bne.n	8005cac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00c      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f969 	bl	8005f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00c      	beq.n	8005cea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f961 	bl	8005fac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00c      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d007      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f87c 	bl	8005e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00c      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f06f 0220 	mvn.w	r2, #32
 8005d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f929 	bl	8005f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00c      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f935 	bl	8005fc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00c      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f92d 	bl	8005fd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00c      	beq.n	8005d9e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d007      	beq.n	8005d9e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f925 	bl	8005fe8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00c      	beq.n	8005dc2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d007      	beq.n	8005dc2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f91d 	bl	8005ffc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a4c      	ldr	r2, [pc, #304]	@ (8005f60 <TIM_Base_SetConfig+0x144>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d017      	beq.n	8005e64 <TIM_Base_SetConfig+0x48>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3a:	d013      	beq.n	8005e64 <TIM_Base_SetConfig+0x48>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a49      	ldr	r2, [pc, #292]	@ (8005f64 <TIM_Base_SetConfig+0x148>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00f      	beq.n	8005e64 <TIM_Base_SetConfig+0x48>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a48      	ldr	r2, [pc, #288]	@ (8005f68 <TIM_Base_SetConfig+0x14c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00b      	beq.n	8005e64 <TIM_Base_SetConfig+0x48>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a47      	ldr	r2, [pc, #284]	@ (8005f6c <TIM_Base_SetConfig+0x150>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d007      	beq.n	8005e64 <TIM_Base_SetConfig+0x48>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a46      	ldr	r2, [pc, #280]	@ (8005f70 <TIM_Base_SetConfig+0x154>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_Base_SetConfig+0x48>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a45      	ldr	r2, [pc, #276]	@ (8005f74 <TIM_Base_SetConfig+0x158>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d108      	bne.n	8005e76 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a39      	ldr	r2, [pc, #228]	@ (8005f60 <TIM_Base_SetConfig+0x144>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d023      	beq.n	8005ec6 <TIM_Base_SetConfig+0xaa>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e84:	d01f      	beq.n	8005ec6 <TIM_Base_SetConfig+0xaa>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a36      	ldr	r2, [pc, #216]	@ (8005f64 <TIM_Base_SetConfig+0x148>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d01b      	beq.n	8005ec6 <TIM_Base_SetConfig+0xaa>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a35      	ldr	r2, [pc, #212]	@ (8005f68 <TIM_Base_SetConfig+0x14c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d017      	beq.n	8005ec6 <TIM_Base_SetConfig+0xaa>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a34      	ldr	r2, [pc, #208]	@ (8005f6c <TIM_Base_SetConfig+0x150>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <TIM_Base_SetConfig+0xaa>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a33      	ldr	r2, [pc, #204]	@ (8005f70 <TIM_Base_SetConfig+0x154>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00f      	beq.n	8005ec6 <TIM_Base_SetConfig+0xaa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a33      	ldr	r2, [pc, #204]	@ (8005f78 <TIM_Base_SetConfig+0x15c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00b      	beq.n	8005ec6 <TIM_Base_SetConfig+0xaa>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a32      	ldr	r2, [pc, #200]	@ (8005f7c <TIM_Base_SetConfig+0x160>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d007      	beq.n	8005ec6 <TIM_Base_SetConfig+0xaa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a31      	ldr	r2, [pc, #196]	@ (8005f80 <TIM_Base_SetConfig+0x164>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d003      	beq.n	8005ec6 <TIM_Base_SetConfig+0xaa>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8005f74 <TIM_Base_SetConfig+0x158>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d108      	bne.n	8005ed8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a18      	ldr	r2, [pc, #96]	@ (8005f60 <TIM_Base_SetConfig+0x144>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <TIM_Base_SetConfig+0x110>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a1a      	ldr	r2, [pc, #104]	@ (8005f70 <TIM_Base_SetConfig+0x154>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00f      	beq.n	8005f2c <TIM_Base_SetConfig+0x110>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f78 <TIM_Base_SetConfig+0x15c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <TIM_Base_SetConfig+0x110>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a19      	ldr	r2, [pc, #100]	@ (8005f7c <TIM_Base_SetConfig+0x160>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d007      	beq.n	8005f2c <TIM_Base_SetConfig+0x110>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a18      	ldr	r2, [pc, #96]	@ (8005f80 <TIM_Base_SetConfig+0x164>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_Base_SetConfig+0x110>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a13      	ldr	r2, [pc, #76]	@ (8005f74 <TIM_Base_SetConfig+0x158>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d103      	bne.n	8005f34 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d105      	bne.n	8005f52 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f023 0201 	bic.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	611a      	str	r2, [r3, #16]
  }
}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40012c00 	.word	0x40012c00
 8005f64:	40000400 	.word	0x40000400
 8005f68:	40000800 	.word	0x40000800
 8005f6c:	40000c00 	.word	0x40000c00
 8005f70:	40013400 	.word	0x40013400
 8005f74:	40015000 	.word	0x40015000
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800

08005f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e042      	b.n	80060a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fc fcc7 	bl	80029c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2224      	movs	r2, #36	@ 0x24
 800603e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 f806 	bl	800706c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fd07 	bl	8006a74 <UART_SetConfig>
 8006066:	4603      	mov	r3, r0
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e01b      	b.n	80060a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800607e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800608e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 f885 	bl	80071b0 <UART_CheckIdleState>
 80060a6:	4603      	mov	r3, r0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08a      	sub	sp, #40	@ 0x28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	4613      	mov	r3, r2
 80060bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d167      	bne.n	8006198 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_UART_Transmit_DMA+0x24>
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e060      	b.n	800619a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	88fa      	ldrh	r2, [r7, #6]
 80060e2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	88fa      	ldrh	r2, [r7, #6]
 80060ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2221      	movs	r2, #33	@ 0x21
 80060fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d028      	beq.n	8006158 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800610a:	4a26      	ldr	r2, [pc, #152]	@ (80061a4 <HAL_UART_Transmit_DMA+0xf4>)
 800610c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006112:	4a25      	ldr	r2, [pc, #148]	@ (80061a8 <HAL_UART_Transmit_DMA+0xf8>)
 8006114:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800611a:	4a24      	ldr	r2, [pc, #144]	@ (80061ac <HAL_UART_Transmit_DMA+0xfc>)
 800611c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006122:	2200      	movs	r2, #0
 8006124:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800612e:	4619      	mov	r1, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3328      	adds	r3, #40	@ 0x28
 8006136:	461a      	mov	r2, r3
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	f7fc ff97 	bl	800306c <HAL_DMA_Start_IT>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2210      	movs	r2, #16
 8006148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e020      	b.n	800619a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2240      	movs	r2, #64	@ 0x40
 800615e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	613b      	str	r3, [r7, #16]
   return(result);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3308      	adds	r3, #8
 800617e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006180:	623a      	str	r2, [r7, #32]
 8006182:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	69f9      	ldr	r1, [r7, #28]
 8006186:	6a3a      	ldr	r2, [r7, #32]
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	61bb      	str	r3, [r7, #24]
   return(result);
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e5      	bne.n	8006160 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	e000      	b.n	800619a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006198:	2302      	movs	r3, #2
  }
}
 800619a:	4618      	mov	r0, r3
 800619c:	3728      	adds	r7, #40	@ 0x28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	0800767b 	.word	0x0800767b
 80061a8:	08007715 	.word	0x08007715
 80061ac:	0800789b 	.word	0x0800789b

080061b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	@ 0x28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d137      	bne.n	8006238 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_UART_Receive_DMA+0x24>
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e030      	b.n	800623a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a18      	ldr	r2, [pc, #96]	@ (8006244 <HAL_UART_Receive_DMA+0x94>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d01f      	beq.n	8006228 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d018      	beq.n	8006228 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	613b      	str	r3, [r7, #16]
   return(result);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	623b      	str	r3, [r7, #32]
 8006216:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	69f9      	ldr	r1, [r7, #28]
 800621a:	6a3a      	ldr	r2, [r7, #32]
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	61bb      	str	r3, [r7, #24]
   return(result);
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e6      	bne.n	80061f6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	461a      	mov	r2, r3
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f001 f8d6 	bl	80073e0 <UART_Start_Receive_DMA>
 8006234:	4603      	mov	r3, r0
 8006236:	e000      	b.n	800623a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006238:	2302      	movs	r3, #2
  }
}
 800623a:	4618      	mov	r0, r3
 800623c:	3728      	adds	r7, #40	@ 0x28
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	40008000 	.word	0x40008000

08006248 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b090      	sub	sp, #64	@ 0x40
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800625e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626a:	2b80      	cmp	r3, #128	@ 0x80
 800626c:	d139      	bne.n	80062e2 <HAL_UART_DMAStop+0x9a>
 800626e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006270:	2b21      	cmp	r3, #33	@ 0x21
 8006272:	d136      	bne.n	80062e2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3308      	adds	r3, #8
 800627a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	61fb      	str	r3, [r7, #28]
   return(result);
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800628a:	637b      	str	r3, [r7, #52]	@ 0x34
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3308      	adds	r3, #8
 8006292:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006294:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006296:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800629a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e5      	bne.n	8006274 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d015      	beq.n	80062dc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fc ff54 	bl	8003162 <HAL_DMA_Abort>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00d      	beq.n	80062dc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fd f8bb 	bl	8003440 <HAL_DMA_GetError>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d105      	bne.n	80062dc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2210      	movs	r2, #16
 80062d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e047      	b.n	800636c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 f925 	bl	800752c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ec:	2b40      	cmp	r3, #64	@ 0x40
 80062ee:	d13c      	bne.n	800636a <HAL_UART_DMAStop+0x122>
 80062f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f2:	2b22      	cmp	r3, #34	@ 0x22
 80062f4:	d139      	bne.n	800636a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3308      	adds	r3, #8
 80062fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	60bb      	str	r3, [r7, #8]
   return(result);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800630c:	633b      	str	r3, [r7, #48]	@ 0x30
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3308      	adds	r3, #8
 8006314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006316:	61ba      	str	r2, [r7, #24]
 8006318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6979      	ldr	r1, [r7, #20]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	613b      	str	r3, [r7, #16]
   return(result);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e5      	bne.n	80062f6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006330:	2b00      	cmp	r3, #0
 8006332:	d017      	beq.n	8006364 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800633a:	4618      	mov	r0, r3
 800633c:	f7fc ff11 	bl	8003162 <HAL_DMA_Abort>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00e      	beq.n	8006364 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800634c:	4618      	mov	r0, r3
 800634e:	f7fd f877 	bl	8003440 <HAL_DMA_GetError>
 8006352:	4603      	mov	r3, r0
 8006354:	2b20      	cmp	r3, #32
 8006356:	d105      	bne.n	8006364 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2210      	movs	r2, #16
 800635c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e003      	b.n	800636c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 f922 	bl	80075ae <UART_EndRxTransfer>
  }

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3740      	adds	r7, #64	@ 0x40
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b0ba      	sub	sp, #232	@ 0xe8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800639a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800639e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80063a2:	4013      	ands	r3, r2
 80063a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80063a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d11b      	bne.n	80063e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d015      	beq.n	80063e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d105      	bne.n	80063d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8300 	beq.w	80069de <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
      }
      return;
 80063e6:	e2fa      	b.n	80069de <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8123 	beq.w	8006638 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80063f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80063f6:	4b8d      	ldr	r3, [pc, #564]	@ (800662c <HAL_UART_IRQHandler+0x2b8>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80063fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006402:	4b8b      	ldr	r3, [pc, #556]	@ (8006630 <HAL_UART_IRQHandler+0x2bc>)
 8006404:	4013      	ands	r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 8116 	beq.w	8006638 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d011      	beq.n	800643c <HAL_UART_IRQHandler+0xc8>
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2201      	movs	r2, #1
 800642a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006432:	f043 0201 	orr.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800643c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d011      	beq.n	800646c <HAL_UART_IRQHandler+0xf8>
 8006448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2202      	movs	r2, #2
 800645a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006462:	f043 0204 	orr.w	r2, r3, #4
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800646c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d011      	beq.n	800649c <HAL_UART_IRQHandler+0x128>
 8006478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00b      	beq.n	800649c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2204      	movs	r2, #4
 800648a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006492:	f043 0202 	orr.w	r2, r3, #2
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800649c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d017      	beq.n	80064d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d105      	bne.n	80064c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80064b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80064b8:	4b5c      	ldr	r3, [pc, #368]	@ (800662c <HAL_UART_IRQHandler+0x2b8>)
 80064ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00b      	beq.n	80064d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2208      	movs	r2, #8
 80064c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ce:	f043 0208 	orr.w	r2, r3, #8
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d012      	beq.n	800650a <HAL_UART_IRQHandler+0x196>
 80064e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00c      	beq.n	800650a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006500:	f043 0220 	orr.w	r2, r3, #32
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8266 	beq.w	80069e2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b00      	cmp	r3, #0
 8006520:	d013      	beq.n	800654a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b00      	cmp	r3, #0
 800652c:	d105      	bne.n	800653a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800652e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006550:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800655e:	2b40      	cmp	r3, #64	@ 0x40
 8006560:	d005      	beq.n	800656e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006566:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800656a:	2b00      	cmp	r3, #0
 800656c:	d054      	beq.n	8006618 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 f81d 	bl	80075ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657e:	2b40      	cmp	r3, #64	@ 0x40
 8006580:	d146      	bne.n	8006610 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3308      	adds	r3, #8
 8006588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800659c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3308      	adds	r3, #8
 80065aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80065ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80065b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80065ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80065c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1d9      	bne.n	8006582 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d017      	beq.n	8006608 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065de:	4a15      	ldr	r2, [pc, #84]	@ (8006634 <HAL_UART_IRQHandler+0x2c0>)
 80065e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fc fe13 	bl	8003214 <HAL_DMA_Abort_IT>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d019      	beq.n	8006628 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006602:	4610      	mov	r0, r2
 8006604:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006606:	e00f      	b.n	8006628 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fa1d 	bl	8006a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660e:	e00b      	b.n	8006628 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fa19 	bl	8006a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006616:	e007      	b.n	8006628 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fa15 	bl	8006a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006626:	e1dc      	b.n	80069e2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006628:	bf00      	nop
    return;
 800662a:	e1da      	b.n	80069e2 <HAL_UART_IRQHandler+0x66e>
 800662c:	10000001 	.word	0x10000001
 8006630:	04000120 	.word	0x04000120
 8006634:	0800791b 	.word	0x0800791b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800663c:	2b01      	cmp	r3, #1
 800663e:	f040 8170 	bne.w	8006922 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8169 	beq.w	8006922 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 8162 	beq.w	8006922 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2210      	movs	r2, #16
 8006664:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006670:	2b40      	cmp	r3, #64	@ 0x40
 8006672:	f040 80d8 	bne.w	8006826 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006684:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80af 	beq.w	80067ec <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006694:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006698:	429a      	cmp	r2, r3
 800669a:	f080 80a7 	bcs.w	80067ec <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0320 	and.w	r3, r3, #32
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f040 8087 	bne.w	80067ca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80066f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80066fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1da      	bne.n	80066bc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006716:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3308      	adds	r3, #8
 8006726:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800672a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800672e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006732:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800673c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e1      	bne.n	8006706 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3308      	adds	r3, #8
 8006748:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006752:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006754:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3308      	adds	r3, #8
 8006762:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006766:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006768:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800676c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e3      	bne.n	8006742 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006798:	f023 0310 	bic.w	r3, r3, #16
 800679c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e4      	bne.n	8006788 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fc fccc 	bl	8003162 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2202      	movs	r2, #2
 80067ce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067dc:	b29b      	uxth	r3, r3
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f939 	bl	8006a5c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80067ea:	e0fc      	b.n	80069e6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067f6:	429a      	cmp	r2, r3
 80067f8:	f040 80f5 	bne.w	80069e6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b20      	cmp	r3, #32
 800680c:	f040 80eb 	bne.w	80069e6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800681c:	4619      	mov	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f91c 	bl	8006a5c <HAL_UARTEx_RxEventCallback>
      return;
 8006824:	e0df      	b.n	80069e6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006832:	b29b      	uxth	r3, r3
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 80d1 	beq.w	80069ea <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80cc 	beq.w	80069ea <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006862:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006866:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006874:	647b      	str	r3, [r7, #68]	@ 0x44
 8006876:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800687a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e4      	bne.n	8006852 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3308      	adds	r3, #8
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	623b      	str	r3, [r7, #32]
   return(result);
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800689e:	f023 0301 	bic.w	r3, r3, #1
 80068a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3308      	adds	r3, #8
 80068ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80068b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e1      	bne.n	8006888 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f023 0310 	bic.w	r3, r3, #16
 80068ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	69b9      	ldr	r1, [r7, #24]
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	617b      	str	r3, [r7, #20]
   return(result);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e4      	bne.n	80068d8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f89e 	bl	8006a5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006920:	e063      	b.n	80069ea <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00e      	beq.n	800694c <HAL_UART_IRQHandler+0x5d8>
 800692e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d008      	beq.n	800694c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006942:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 f825 	bl	8007994 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800694a:	e051      	b.n	80069f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800694c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006954:	2b00      	cmp	r3, #0
 8006956:	d014      	beq.n	8006982 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800695c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006960:	2b00      	cmp	r3, #0
 8006962:	d105      	bne.n	8006970 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006968:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006974:	2b00      	cmp	r3, #0
 8006976:	d03a      	beq.n	80069ee <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3
    }
    return;
 8006980:	e035      	b.n	80069ee <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <HAL_UART_IRQHandler+0x62e>
 800698e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 ffcf 	bl	800793e <UART_EndTransmit_IT>
    return;
 80069a0:	e026      	b.n	80069f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80069a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <HAL_UART_IRQHandler+0x64e>
 80069ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fffe 	bl	80079bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069c0:	e016      	b.n	80069f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80069c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d010      	beq.n	80069f0 <HAL_UART_IRQHandler+0x67c>
 80069ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	da0c      	bge.n	80069f0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 ffe6 	bl	80079a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069dc:	e008      	b.n	80069f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80069de:	bf00      	nop
 80069e0:	e006      	b.n	80069f0 <HAL_UART_IRQHandler+0x67c>
    return;
 80069e2:	bf00      	nop
 80069e4:	e004      	b.n	80069f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80069e6:	bf00      	nop
 80069e8:	e002      	b.n	80069f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80069ea:	bf00      	nop
 80069ec:	e000      	b.n	80069f0 <HAL_UART_IRQHandler+0x67c>
    return;
 80069ee:	bf00      	nop
  }
}
 80069f0:	37e8      	adds	r7, #232	@ 0xe8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop

080069f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a78:	b08c      	sub	sp, #48	@ 0x30
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4baa      	ldr	r3, [pc, #680]	@ (8006d4c <UART_SetConfig+0x2d8>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	6812      	ldr	r2, [r2, #0]
 8006aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006aac:	430b      	orrs	r3, r1
 8006aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a9f      	ldr	r2, [pc, #636]	@ (8006d50 <UART_SetConfig+0x2dc>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d004      	beq.n	8006ae0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006adc:	4313      	orrs	r3, r2
 8006ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006aea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af4:	430b      	orrs	r3, r1
 8006af6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afe:	f023 010f 	bic.w	r1, r3, #15
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a90      	ldr	r2, [pc, #576]	@ (8006d54 <UART_SetConfig+0x2e0>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d125      	bne.n	8006b64 <UART_SetConfig+0xf0>
 8006b18:	4b8f      	ldr	r3, [pc, #572]	@ (8006d58 <UART_SetConfig+0x2e4>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d81a      	bhi.n	8006b5c <UART_SetConfig+0xe8>
 8006b26:	a201      	add	r2, pc, #4	@ (adr r2, 8006b2c <UART_SetConfig+0xb8>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b3d 	.word	0x08006b3d
 8006b30:	08006b4d 	.word	0x08006b4d
 8006b34:	08006b45 	.word	0x08006b45
 8006b38:	08006b55 	.word	0x08006b55
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b42:	e116      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006b44:	2302      	movs	r3, #2
 8006b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4a:	e112      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b52:	e10e      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006b54:	2308      	movs	r3, #8
 8006b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5a:	e10a      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006b5c:	2310      	movs	r3, #16
 8006b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b62:	e106      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a7c      	ldr	r2, [pc, #496]	@ (8006d5c <UART_SetConfig+0x2e8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d138      	bne.n	8006be0 <UART_SetConfig+0x16c>
 8006b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8006d58 <UART_SetConfig+0x2e4>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b74:	f003 030c 	and.w	r3, r3, #12
 8006b78:	2b0c      	cmp	r3, #12
 8006b7a:	d82d      	bhi.n	8006bd8 <UART_SetConfig+0x164>
 8006b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b84 <UART_SetConfig+0x110>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006bb9 	.word	0x08006bb9
 8006b88:	08006bd9 	.word	0x08006bd9
 8006b8c:	08006bd9 	.word	0x08006bd9
 8006b90:	08006bd9 	.word	0x08006bd9
 8006b94:	08006bc9 	.word	0x08006bc9
 8006b98:	08006bd9 	.word	0x08006bd9
 8006b9c:	08006bd9 	.word	0x08006bd9
 8006ba0:	08006bd9 	.word	0x08006bd9
 8006ba4:	08006bc1 	.word	0x08006bc1
 8006ba8:	08006bd9 	.word	0x08006bd9
 8006bac:	08006bd9 	.word	0x08006bd9
 8006bb0:	08006bd9 	.word	0x08006bd9
 8006bb4:	08006bd1 	.word	0x08006bd1
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	e0d8      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc6:	e0d4      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bce:	e0d0      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006bd0:	2308      	movs	r3, #8
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd6:	e0cc      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bde:	e0c8      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a5e      	ldr	r2, [pc, #376]	@ (8006d60 <UART_SetConfig+0x2ec>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d125      	bne.n	8006c36 <UART_SetConfig+0x1c2>
 8006bea:	4b5b      	ldr	r3, [pc, #364]	@ (8006d58 <UART_SetConfig+0x2e4>)
 8006bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006bf4:	2b30      	cmp	r3, #48	@ 0x30
 8006bf6:	d016      	beq.n	8006c26 <UART_SetConfig+0x1b2>
 8006bf8:	2b30      	cmp	r3, #48	@ 0x30
 8006bfa:	d818      	bhi.n	8006c2e <UART_SetConfig+0x1ba>
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d00a      	beq.n	8006c16 <UART_SetConfig+0x1a2>
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d814      	bhi.n	8006c2e <UART_SetConfig+0x1ba>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <UART_SetConfig+0x19a>
 8006c08:	2b10      	cmp	r3, #16
 8006c0a:	d008      	beq.n	8006c1e <UART_SetConfig+0x1aa>
 8006c0c:	e00f      	b.n	8006c2e <UART_SetConfig+0x1ba>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c14:	e0ad      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006c16:	2302      	movs	r3, #2
 8006c18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1c:	e0a9      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006c1e:	2304      	movs	r3, #4
 8006c20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c24:	e0a5      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006c26:	2308      	movs	r3, #8
 8006c28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2c:	e0a1      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006c2e:	2310      	movs	r3, #16
 8006c30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c34:	e09d      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a4a      	ldr	r2, [pc, #296]	@ (8006d64 <UART_SetConfig+0x2f0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d125      	bne.n	8006c8c <UART_SetConfig+0x218>
 8006c40:	4b45      	ldr	r3, [pc, #276]	@ (8006d58 <UART_SetConfig+0x2e4>)
 8006c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c4c:	d016      	beq.n	8006c7c <UART_SetConfig+0x208>
 8006c4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c50:	d818      	bhi.n	8006c84 <UART_SetConfig+0x210>
 8006c52:	2b80      	cmp	r3, #128	@ 0x80
 8006c54:	d00a      	beq.n	8006c6c <UART_SetConfig+0x1f8>
 8006c56:	2b80      	cmp	r3, #128	@ 0x80
 8006c58:	d814      	bhi.n	8006c84 <UART_SetConfig+0x210>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <UART_SetConfig+0x1f0>
 8006c5e:	2b40      	cmp	r3, #64	@ 0x40
 8006c60:	d008      	beq.n	8006c74 <UART_SetConfig+0x200>
 8006c62:	e00f      	b.n	8006c84 <UART_SetConfig+0x210>
 8006c64:	2300      	movs	r3, #0
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6a:	e082      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c72:	e07e      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006c74:	2304      	movs	r3, #4
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7a:	e07a      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c82:	e076      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006c84:	2310      	movs	r3, #16
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c8a:	e072      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a35      	ldr	r2, [pc, #212]	@ (8006d68 <UART_SetConfig+0x2f4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d12a      	bne.n	8006cec <UART_SetConfig+0x278>
 8006c96:	4b30      	ldr	r3, [pc, #192]	@ (8006d58 <UART_SetConfig+0x2e4>)
 8006c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ca0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ca4:	d01a      	beq.n	8006cdc <UART_SetConfig+0x268>
 8006ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006caa:	d81b      	bhi.n	8006ce4 <UART_SetConfig+0x270>
 8006cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cb0:	d00c      	beq.n	8006ccc <UART_SetConfig+0x258>
 8006cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cb6:	d815      	bhi.n	8006ce4 <UART_SetConfig+0x270>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <UART_SetConfig+0x250>
 8006cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc0:	d008      	beq.n	8006cd4 <UART_SetConfig+0x260>
 8006cc2:	e00f      	b.n	8006ce4 <UART_SetConfig+0x270>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cca:	e052      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cd2:	e04e      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cda:	e04a      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ce2:	e046      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cea:	e042      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a17      	ldr	r2, [pc, #92]	@ (8006d50 <UART_SetConfig+0x2dc>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d13a      	bne.n	8006d6c <UART_SetConfig+0x2f8>
 8006cf6:	4b18      	ldr	r3, [pc, #96]	@ (8006d58 <UART_SetConfig+0x2e4>)
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d04:	d01a      	beq.n	8006d3c <UART_SetConfig+0x2c8>
 8006d06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d0a:	d81b      	bhi.n	8006d44 <UART_SetConfig+0x2d0>
 8006d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d10:	d00c      	beq.n	8006d2c <UART_SetConfig+0x2b8>
 8006d12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d16:	d815      	bhi.n	8006d44 <UART_SetConfig+0x2d0>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <UART_SetConfig+0x2b0>
 8006d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d20:	d008      	beq.n	8006d34 <UART_SetConfig+0x2c0>
 8006d22:	e00f      	b.n	8006d44 <UART_SetConfig+0x2d0>
 8006d24:	2300      	movs	r3, #0
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d2a:	e022      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d32:	e01e      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006d34:	2304      	movs	r3, #4
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d3a:	e01a      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d42:	e016      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006d44:	2310      	movs	r3, #16
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d4a:	e012      	b.n	8006d72 <UART_SetConfig+0x2fe>
 8006d4c:	cfff69f3 	.word	0xcfff69f3
 8006d50:	40008000 	.word	0x40008000
 8006d54:	40013800 	.word	0x40013800
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	40004400 	.word	0x40004400
 8006d60:	40004800 	.word	0x40004800
 8006d64:	40004c00 	.word	0x40004c00
 8006d68:	40005000 	.word	0x40005000
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4aae      	ldr	r2, [pc, #696]	@ (8007030 <UART_SetConfig+0x5bc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	f040 8097 	bne.w	8006eac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d82:	2b08      	cmp	r3, #8
 8006d84:	d823      	bhi.n	8006dce <UART_SetConfig+0x35a>
 8006d86:	a201      	add	r2, pc, #4	@ (adr r2, 8006d8c <UART_SetConfig+0x318>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006dcf 	.word	0x08006dcf
 8006d94:	08006db9 	.word	0x08006db9
 8006d98:	08006dcf 	.word	0x08006dcf
 8006d9c:	08006dbf 	.word	0x08006dbf
 8006da0:	08006dcf 	.word	0x08006dcf
 8006da4:	08006dcf 	.word	0x08006dcf
 8006da8:	08006dcf 	.word	0x08006dcf
 8006dac:	08006dc7 	.word	0x08006dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db0:	f7fe faf0 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8006db4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006db6:	e010      	b.n	8006dda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006db8:	4b9e      	ldr	r3, [pc, #632]	@ (8007034 <UART_SetConfig+0x5c0>)
 8006dba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dbc:	e00d      	b.n	8006dda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dbe:	f7fe fa7b 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 8006dc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dc4:	e009      	b.n	8006dda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dcc:	e005      	b.n	8006dda <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006dd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8130 	beq.w	8007042 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de6:	4a94      	ldr	r2, [pc, #592]	@ (8007038 <UART_SetConfig+0x5c4>)
 8006de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006df4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	4413      	add	r3, r2
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d305      	bcc.n	8006e12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d903      	bls.n	8006e1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e18:	e113      	b.n	8007042 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	60fa      	str	r2, [r7, #12]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e26:	4a84      	ldr	r2, [pc, #528]	@ (8007038 <UART_SetConfig+0x5c4>)
 8006e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2200      	movs	r2, #0
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e3c:	f7f9 ff14 	bl	8000c68 <__aeabi_uldivmod>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4610      	mov	r0, r2
 8006e46:	4619      	mov	r1, r3
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	020b      	lsls	r3, r1, #8
 8006e52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e56:	0202      	lsls	r2, r0, #8
 8006e58:	6979      	ldr	r1, [r7, #20]
 8006e5a:	6849      	ldr	r1, [r1, #4]
 8006e5c:	0849      	lsrs	r1, r1, #1
 8006e5e:	2000      	movs	r0, #0
 8006e60:	460c      	mov	r4, r1
 8006e62:	4605      	mov	r5, r0
 8006e64:	eb12 0804 	adds.w	r8, r2, r4
 8006e68:	eb43 0905 	adc.w	r9, r3, r5
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	469a      	mov	sl, r3
 8006e74:	4693      	mov	fp, r2
 8006e76:	4652      	mov	r2, sl
 8006e78:	465b      	mov	r3, fp
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	f7f9 fef3 	bl	8000c68 <__aeabi_uldivmod>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4613      	mov	r3, r2
 8006e88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e90:	d308      	bcc.n	8006ea4 <UART_SetConfig+0x430>
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e98:	d204      	bcs.n	8006ea4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6a3a      	ldr	r2, [r7, #32]
 8006ea0:	60da      	str	r2, [r3, #12]
 8006ea2:	e0ce      	b.n	8007042 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006eaa:	e0ca      	b.n	8007042 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eb4:	d166      	bne.n	8006f84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d827      	bhi.n	8006f0e <UART_SetConfig+0x49a>
 8006ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec4 <UART_SetConfig+0x450>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006ee9 	.word	0x08006ee9
 8006ec8:	08006ef1 	.word	0x08006ef1
 8006ecc:	08006ef9 	.word	0x08006ef9
 8006ed0:	08006f0f 	.word	0x08006f0f
 8006ed4:	08006eff 	.word	0x08006eff
 8006ed8:	08006f0f 	.word	0x08006f0f
 8006edc:	08006f0f 	.word	0x08006f0f
 8006ee0:	08006f0f 	.word	0x08006f0f
 8006ee4:	08006f07 	.word	0x08006f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee8:	f7fe fa54 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8006eec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eee:	e014      	b.n	8006f1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef0:	f7fe fa66 	bl	80053c0 <HAL_RCC_GetPCLK2Freq>
 8006ef4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ef6:	e010      	b.n	8006f1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8007034 <UART_SetConfig+0x5c0>)
 8006efa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006efc:	e00d      	b.n	8006f1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006efe:	f7fe f9db 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 8006f02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f04:	e009      	b.n	8006f1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f0c:	e005      	b.n	8006f1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8090 	beq.w	8007042 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f26:	4a44      	ldr	r2, [pc, #272]	@ (8007038 <UART_SetConfig+0x5c4>)
 8006f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f34:	005a      	lsls	r2, r3, #1
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	085b      	lsrs	r3, r3, #1
 8006f3c:	441a      	add	r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	2b0f      	cmp	r3, #15
 8006f4c:	d916      	bls.n	8006f7c <UART_SetConfig+0x508>
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f54:	d212      	bcs.n	8006f7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f023 030f 	bic.w	r3, r3, #15
 8006f5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	085b      	lsrs	r3, r3, #1
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	8bfb      	ldrh	r3, [r7, #30]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	8bfa      	ldrh	r2, [r7, #30]
 8006f78:	60da      	str	r2, [r3, #12]
 8006f7a:	e062      	b.n	8007042 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f82:	e05e      	b.n	8007042 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d828      	bhi.n	8006fde <UART_SetConfig+0x56a>
 8006f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f94 <UART_SetConfig+0x520>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fb9 	.word	0x08006fb9
 8006f98:	08006fc1 	.word	0x08006fc1
 8006f9c:	08006fc9 	.word	0x08006fc9
 8006fa0:	08006fdf 	.word	0x08006fdf
 8006fa4:	08006fcf 	.word	0x08006fcf
 8006fa8:	08006fdf 	.word	0x08006fdf
 8006fac:	08006fdf 	.word	0x08006fdf
 8006fb0:	08006fdf 	.word	0x08006fdf
 8006fb4:	08006fd7 	.word	0x08006fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fb8:	f7fe f9ec 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8006fbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fbe:	e014      	b.n	8006fea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fc0:	f7fe f9fe 	bl	80053c0 <HAL_RCC_GetPCLK2Freq>
 8006fc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fc6:	e010      	b.n	8006fea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8007034 <UART_SetConfig+0x5c0>)
 8006fca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fcc:	e00d      	b.n	8006fea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fce:	f7fe f973 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 8006fd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fd4:	e009      	b.n	8006fea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fdc:	e005      	b.n	8006fea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006fe8:	bf00      	nop
    }

    if (pclk != 0U)
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d028      	beq.n	8007042 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff4:	4a10      	ldr	r2, [pc, #64]	@ (8007038 <UART_SetConfig+0x5c4>)
 8006ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	085b      	lsrs	r3, r3, #1
 8007008:	441a      	add	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007012:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	2b0f      	cmp	r3, #15
 8007018:	d910      	bls.n	800703c <UART_SetConfig+0x5c8>
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007020:	d20c      	bcs.n	800703c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	b29a      	uxth	r2, r3
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60da      	str	r2, [r3, #12]
 800702c:	e009      	b.n	8007042 <UART_SetConfig+0x5ce>
 800702e:	bf00      	nop
 8007030:	40008000 	.word	0x40008000
 8007034:	00f42400 	.word	0x00f42400
 8007038:	0801b3e4 	.word	0x0801b3e4
      }
      else
      {
        ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2201      	movs	r2, #1
 8007046:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2201      	movs	r2, #1
 800704e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2200      	movs	r2, #0
 8007056:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2200      	movs	r2, #0
 800705c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800705e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007062:	4618      	mov	r0, r3
 8007064:	3730      	adds	r7, #48	@ 0x30
 8007066:	46bd      	mov	sp, r7
 8007068:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800706c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01a      	beq.n	8007182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800716a:	d10a      	bne.n	8007182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b098      	sub	sp, #96	@ 0x60
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071c0:	f7fb fdc0 	bl	8002d44 <HAL_GetTick>
 80071c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d12f      	bne.n	8007234 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071dc:	2200      	movs	r2, #0
 80071de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f88e 	bl	8007304 <UART_WaitOnFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d022      	beq.n	8007234 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007202:	653b      	str	r3, [r7, #80]	@ 0x50
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800720c:	647b      	str	r3, [r7, #68]	@ 0x44
 800720e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800721a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e6      	bne.n	80071ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e063      	b.n	80072fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b04      	cmp	r3, #4
 8007240:	d149      	bne.n	80072d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007242:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800724a:	2200      	movs	r2, #0
 800724c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f857 	bl	8007304 <UART_WaitOnFlagUntilTimeout>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d03c      	beq.n	80072d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	623b      	str	r3, [r7, #32]
   return(result);
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007270:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800727a:	633b      	str	r3, [r7, #48]	@ 0x30
 800727c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e6      	bne.n	800725c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	60fb      	str	r3, [r7, #12]
   return(result);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072ae:	61fa      	str	r2, [r7, #28]
 80072b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	69b9      	ldr	r1, [r7, #24]
 80072b4:	69fa      	ldr	r2, [r7, #28]
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	617b      	str	r3, [r7, #20]
   return(result);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e5      	bne.n	800728e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e012      	b.n	80072fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3758      	adds	r7, #88	@ 0x58
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	4613      	mov	r3, r2
 8007312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007314:	e04f      	b.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800731c:	d04b      	beq.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731e:	f7fb fd11 	bl	8002d44 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	429a      	cmp	r2, r3
 800732c:	d302      	bcc.n	8007334 <UART_WaitOnFlagUntilTimeout+0x30>
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e04e      	b.n	80073d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d037      	beq.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b80      	cmp	r3, #128	@ 0x80
 800734a:	d034      	beq.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b40      	cmp	r3, #64	@ 0x40
 8007350:	d031      	beq.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b08      	cmp	r3, #8
 800735e:	d110      	bne.n	8007382 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2208      	movs	r2, #8
 8007366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f920 	bl	80075ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2208      	movs	r2, #8
 8007372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e029      	b.n	80073d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800738c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007390:	d111      	bne.n	80073b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800739a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f906 	bl	80075ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e00f      	b.n	80073d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69da      	ldr	r2, [r3, #28]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4013      	ands	r3, r2
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	bf0c      	ite	eq
 80073c6:	2301      	moveq	r3, #1
 80073c8:	2300      	movne	r3, #0
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d0a0      	beq.n	8007316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b096      	sub	sp, #88	@ 0x58
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	4613      	mov	r3, r2
 80073ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	88fa      	ldrh	r2, [r7, #6]
 80073f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2222      	movs	r2, #34	@ 0x22
 8007408:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02d      	beq.n	8007472 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800741c:	4a40      	ldr	r2, [pc, #256]	@ (8007520 <UART_Start_Receive_DMA+0x140>)
 800741e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007426:	4a3f      	ldr	r2, [pc, #252]	@ (8007524 <UART_Start_Receive_DMA+0x144>)
 8007428:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007430:	4a3d      	ldr	r2, [pc, #244]	@ (8007528 <UART_Start_Receive_DMA+0x148>)
 8007432:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800743a:	2200      	movs	r2, #0
 800743c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3324      	adds	r3, #36	@ 0x24
 800744a:	4619      	mov	r1, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007450:	461a      	mov	r2, r3
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	f7fb fe0a 	bl	800306c <HAL_DMA_Start_IT>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d009      	beq.n	8007472 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2210      	movs	r2, #16
 8007462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2220      	movs	r2, #32
 800746a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e051      	b.n	8007516 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d018      	beq.n	80074ac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007482:	e853 3f00 	ldrex	r3, [r3]
 8007486:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800748e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800749a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800749e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80074a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e6      	bne.n	800747a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3308      	adds	r3, #8
 80074b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80074cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80074ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80074da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e5      	bne.n	80074ac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	613b      	str	r3, [r7, #16]
   return(result);
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007500:	623a      	str	r2, [r7, #32]
 8007502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	69f9      	ldr	r1, [r7, #28]
 8007506:	6a3a      	ldr	r2, [r7, #32]
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	61bb      	str	r3, [r7, #24]
   return(result);
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e5      	bne.n	80074e0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3758      	adds	r7, #88	@ 0x58
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	08007731 	.word	0x08007731
 8007524:	0800785d 	.word	0x0800785d
 8007528:	0800789b 	.word	0x0800789b

0800752c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b08f      	sub	sp, #60	@ 0x3c
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	61fb      	str	r3, [r7, #28]
   return(result);
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007548:	637b      	str	r3, [r7, #52]	@ 0x34
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007554:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e6      	bne.n	8007534 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	60bb      	str	r3, [r7, #8]
   return(result);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800757c:	633b      	str	r3, [r7, #48]	@ 0x30
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3308      	adds	r3, #8
 8007584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007586:	61ba      	str	r2, [r7, #24]
 8007588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6979      	ldr	r1, [r7, #20]
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	613b      	str	r3, [r7, #16]
   return(result);
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e5      	bne.n	8007566 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80075a2:	bf00      	nop
 80075a4:	373c      	adds	r7, #60	@ 0x3c
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b095      	sub	sp, #84	@ 0x54
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80075d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e6      	bne.n	80075b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3308      	adds	r3, #8
 80075ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075fe:	f023 0301 	bic.w	r3, r3, #1
 8007602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3308      	adds	r3, #8
 800760a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800760c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800760e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e3      	bne.n	80075e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007624:	2b01      	cmp	r3, #1
 8007626:	d118      	bne.n	800765a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	e853 3f00 	ldrex	r3, [r3]
 8007634:	60bb      	str	r3, [r7, #8]
   return(result);
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f023 0310 	bic.w	r3, r3, #16
 800763c:	647b      	str	r3, [r7, #68]	@ 0x44
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007646:	61bb      	str	r3, [r7, #24]
 8007648:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	6979      	ldr	r1, [r7, #20]
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	613b      	str	r3, [r7, #16]
   return(result);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e6      	bne.n	8007628 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800766e:	bf00      	nop
 8007670:	3754      	adds	r7, #84	@ 0x54
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b090      	sub	sp, #64	@ 0x40
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007686:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d137      	bne.n	8007706 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007698:	2200      	movs	r2, #0
 800769a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800769e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3308      	adds	r3, #8
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	623b      	str	r3, [r7, #32]
   return(result);
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3308      	adds	r3, #8
 80076bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076be:	633a      	str	r2, [r7, #48]	@ 0x30
 80076c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e5      	bne.n	800769e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	60fb      	str	r3, [r7, #12]
   return(result);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f0:	61fb      	str	r3, [r7, #28]
 80076f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	69b9      	ldr	r1, [r7, #24]
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	617b      	str	r3, [r7, #20]
   return(result);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e6      	bne.n	80076d2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007704:	e002      	b.n	800770c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007706:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007708:	f7ff f976 	bl	80069f8 <HAL_UART_TxCpltCallback>
}
 800770c:	bf00      	nop
 800770e:	3740      	adds	r7, #64	@ 0x40
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007720:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7ff f972 	bl	8006a0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b09c      	sub	sp, #112	@ 0x70
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0320 	and.w	r3, r3, #32
 8007748:	2b00      	cmp	r3, #0
 800774a:	d171      	bne.n	8007830 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800774c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800774e:	2200      	movs	r2, #0
 8007750:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007768:	66bb      	str	r3, [r7, #104]	@ 0x68
 800776a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007772:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007774:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007778:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e6      	bne.n	8007754 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3308      	adds	r3, #8
 800778c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007790:	e853 3f00 	ldrex	r3, [r3]
 8007794:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007798:	f023 0301 	bic.w	r3, r3, #1
 800779c:	667b      	str	r3, [r7, #100]	@ 0x64
 800779e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3308      	adds	r3, #8
 80077a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80077a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077ae:	e841 2300 	strex	r3, r2, [r1]
 80077b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1e5      	bne.n	8007786 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	623b      	str	r3, [r7, #32]
   return(result);
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80077d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077da:	633a      	str	r2, [r7, #48]	@ 0x30
 80077dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e5      	bne.n	80077ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d118      	bne.n	8007830 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	60fb      	str	r3, [r7, #12]
   return(result);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0310 	bic.w	r3, r3, #16
 8007812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800781c:	61fb      	str	r3, [r7, #28]
 800781e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	69b9      	ldr	r1, [r7, #24]
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	617b      	str	r3, [r7, #20]
   return(result);
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e6      	bne.n	80077fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007832:	2200      	movs	r2, #0
 8007834:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d107      	bne.n	800784e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800783e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007840:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007844:	4619      	mov	r1, r3
 8007846:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007848:	f7ff f908 	bl	8006a5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800784c:	e002      	b.n	8007854 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800784e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007850:	f7ff f8e6 	bl	8006a20 <HAL_UART_RxCpltCallback>
}
 8007854:	bf00      	nop
 8007856:	3770      	adds	r7, #112	@ 0x70
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007868:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007874:	2b01      	cmp	r3, #1
 8007876:	d109      	bne.n	800788c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	b29b      	uxth	r3, r3
 8007882:	4619      	mov	r1, r3
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f7ff f8e9 	bl	8006a5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800788a:	e002      	b.n	8007892 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f7ff f8d1 	bl	8006a34 <HAL_UART_RxHalfCpltCallback>
}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b086      	sub	sp, #24
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c2:	2b80      	cmp	r3, #128	@ 0x80
 80078c4:	d109      	bne.n	80078da <UART_DMAError+0x40>
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2b21      	cmp	r3, #33	@ 0x21
 80078ca:	d106      	bne.n	80078da <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80078d4:	6978      	ldr	r0, [r7, #20]
 80078d6:	f7ff fe29 	bl	800752c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e4:	2b40      	cmp	r3, #64	@ 0x40
 80078e6:	d109      	bne.n	80078fc <UART_DMAError+0x62>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b22      	cmp	r3, #34	@ 0x22
 80078ec:	d106      	bne.n	80078fc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80078f6:	6978      	ldr	r0, [r7, #20]
 80078f8:	f7ff fe59 	bl	80075ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007902:	f043 0210 	orr.w	r2, r3, #16
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800790c:	6978      	ldr	r0, [r7, #20]
 800790e:	f7ff f89b 	bl	8006a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007912:	bf00      	nop
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007926:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff f889 	bl	8006a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b088      	sub	sp, #32
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	60bb      	str	r3, [r7, #8]
   return(result);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800795a:	61fb      	str	r3, [r7, #28]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6979      	ldr	r1, [r7, #20]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	613b      	str	r3, [r7, #16]
   return(result);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff f836 	bl	80069f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800798c:	bf00      	nop
 800798e:	3720      	adds	r7, #32
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d101      	bne.n	80079e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80079e2:	2302      	movs	r3, #2
 80079e4:	e027      	b.n	8007a36 <HAL_UARTEx_DisableFifoMode+0x66>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2224      	movs	r2, #36	@ 0x24
 80079f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 0201 	bic.w	r2, r2, #1
 8007a0c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d101      	bne.n	8007a5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a56:	2302      	movs	r3, #2
 8007a58:	e02d      	b.n	8007ab6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2224      	movs	r2, #36	@ 0x24
 8007a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0201 	bic.w	r2, r2, #1
 8007a80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f850 	bl	8007b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d101      	bne.n	8007ad6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	e02d      	b.n	8007b32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2224      	movs	r2, #36	@ 0x24
 8007ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 0201 	bic.w	r2, r2, #1
 8007afc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f812 	bl	8007b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d108      	bne.n	8007b5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b5c:	e031      	b.n	8007bc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b5e:	2308      	movs	r3, #8
 8007b60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b62:	2308      	movs	r3, #8
 8007b64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	0e5b      	lsrs	r3, r3, #25
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	0f5b      	lsrs	r3, r3, #29
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	7b3a      	ldrb	r2, [r7, #12]
 8007b8a:	4911      	ldr	r1, [pc, #68]	@ (8007bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8007b8c:	5c8a      	ldrb	r2, [r1, r2]
 8007b8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b92:	7b3a      	ldrb	r2, [r7, #12]
 8007b94:	490f      	ldr	r1, [pc, #60]	@ (8007bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8007b96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b98:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	7b7a      	ldrb	r2, [r7, #13]
 8007ba8:	4909      	ldr	r1, [pc, #36]	@ (8007bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8007baa:	5c8a      	ldrb	r2, [r1, r2]
 8007bac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bb0:	7b7a      	ldrb	r2, [r7, #13]
 8007bb2:	4908      	ldr	r1, [pc, #32]	@ (8007bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8007bb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bc2:	bf00      	nop
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	0801b3fc 	.word	0x0801b3fc
 8007bd4:	0801b404 	.word	0x0801b404

08007bd8 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af04      	add	r7, sp, #16
 8007bde:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8007be0:	2364      	movs	r3, #100	@ 0x64
 8007be2:	9302      	str	r3, [sp, #8]
 8007be4:	2301      	movs	r3, #1
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	f107 030f 	add.w	r3, r7, #15
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	2301      	movs	r3, #1
 8007bf0:	2275      	movs	r2, #117	@ 0x75
 8007bf2:	21d0      	movs	r1, #208	@ 0xd0
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7fc f97f 	bl	8003ef8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	2b68      	cmp	r3, #104	@ 0x68
 8007bfe:	d13d      	bne.n	8007c7c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8007c04:	2364      	movs	r3, #100	@ 0x64
 8007c06:	9302      	str	r3, [sp, #8]
 8007c08:	2301      	movs	r3, #1
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	f107 030e 	add.w	r3, r7, #14
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	2301      	movs	r3, #1
 8007c14:	226b      	movs	r2, #107	@ 0x6b
 8007c16:	21d0      	movs	r1, #208	@ 0xd0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7fc f859 	bl	8003cd0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8007c1e:	2307      	movs	r3, #7
 8007c20:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8007c22:	2364      	movs	r3, #100	@ 0x64
 8007c24:	9302      	str	r3, [sp, #8]
 8007c26:	2301      	movs	r3, #1
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	f107 030e 	add.w	r3, r7, #14
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	2301      	movs	r3, #1
 8007c32:	2219      	movs	r2, #25
 8007c34:	21d0      	movs	r1, #208	@ 0xd0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7fc f84a 	bl	8003cd0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8007c40:	2364      	movs	r3, #100	@ 0x64
 8007c42:	9302      	str	r3, [sp, #8]
 8007c44:	2301      	movs	r3, #1
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	f107 030e 	add.w	r3, r7, #14
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	2301      	movs	r3, #1
 8007c50:	221c      	movs	r2, #28
 8007c52:	21d0      	movs	r1, #208	@ 0xd0
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7fc f83b 	bl	8003cd0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8007c5e:	2364      	movs	r3, #100	@ 0x64
 8007c60:	9302      	str	r3, [sp, #8]
 8007c62:	2301      	movs	r3, #1
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	f107 030e 	add.w	r3, r7, #14
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	221b      	movs	r2, #27
 8007c70:	21d0      	movs	r1, #208	@ 0xd0
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7fc f82c 	bl	8003cd0 <HAL_I2C_Mem_Write>
        return 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e000      	b.n	8007c7e <MPU6050_Init+0xa6>
    }
    return 1;
 8007c7c:	2301      	movs	r3, #1
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8007c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c8c:	b094      	sub	sp, #80	@ 0x50
 8007c8e:	af04      	add	r7, sp, #16
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8007c94:	2364      	movs	r3, #100	@ 0x64
 8007c96:	9302      	str	r3, [sp, #8]
 8007c98:	230e      	movs	r3, #14
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	f107 0308 	add.w	r3, r7, #8
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	223b      	movs	r2, #59	@ 0x3b
 8007ca6:	21d0      	movs	r1, #208	@ 0xd0
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7fc f925 	bl	8003ef8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8007cae:	7a3b      	ldrb	r3, [r7, #8]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	b21a      	sxth	r2, r3
 8007cb4:	7a7b      	ldrb	r3, [r7, #9]
 8007cb6:	b21b      	sxth	r3, r3
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	b21a      	sxth	r2, r3
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8007cc0:	7abb      	ldrb	r3, [r7, #10]
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	b21a      	sxth	r2, r3
 8007cc6:	7afb      	ldrb	r3, [r7, #11]
 8007cc8:	b21b      	sxth	r3, r3
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	b21a      	sxth	r2, r3
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8007cd2:	7b3b      	ldrb	r3, [r7, #12]
 8007cd4:	021b      	lsls	r3, r3, #8
 8007cd6:	b21a      	sxth	r2, r3
 8007cd8:	7b7b      	ldrb	r3, [r7, #13]
 8007cda:	b21b      	sxth	r3, r3
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	b21a      	sxth	r2, r3
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	b21a      	sxth	r2, r3
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	b21b      	sxth	r3, r3
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8007cf2:	7c3b      	ldrb	r3, [r7, #16]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	b21a      	sxth	r2, r3
 8007cf8:	7c7b      	ldrb	r3, [r7, #17]
 8007cfa:	b21b      	sxth	r3, r3
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	b21a      	sxth	r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8007d04:	7cbb      	ldrb	r3, [r7, #18]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	b21a      	sxth	r2, r3
 8007d0a:	7cfb      	ldrb	r3, [r7, #19]
 8007d0c:	b21b      	sxth	r3, r3
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	b21a      	sxth	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8007d16:	7d3b      	ldrb	r3, [r7, #20]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	b21a      	sxth	r2, r3
 8007d1c:	7d7b      	ldrb	r3, [r7, #21]
 8007d1e:	b21b      	sxth	r3, r3
 8007d20:	4313      	orrs	r3, r2
 8007d22:	b21a      	sxth	r2, r3
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7f8 fc30 	bl	8000594 <__aeabi_i2d>
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	4bbd      	ldr	r3, [pc, #756]	@ (8008030 <MPU6050_Read_All+0x3a8>)
 8007d3a:	f7f8 fdbf 	bl	80008bc <__aeabi_ddiv>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7f8 fc20 	bl	8000594 <__aeabi_i2d>
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	4bb5      	ldr	r3, [pc, #724]	@ (8008030 <MPU6050_Read_All+0x3a8>)
 8007d5a:	f7f8 fdaf 	bl	80008bc <__aeabi_ddiv>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7f8 fc10 	bl	8000594 <__aeabi_i2d>
 8007d74:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008018 <MPU6050_Read_All+0x390>)
 8007d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7a:	f7f8 fd9f 	bl	80008bc <__aeabi_ddiv>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8007d88:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007d8c:	ee07 3a90 	vmov	s15, r3
 8007d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d94:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8008034 <MPU6050_Read_All+0x3ac>
 8007d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d9c:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8008038 <MPU6050_Read_All+0x3b0>
 8007da0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7f8 fbef 	bl	8000594 <__aeabi_i2d>
 8007db6:	a39a      	add	r3, pc, #616	@ (adr r3, 8008020 <MPU6050_Read_All+0x398>)
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	f7f8 fd7e 	bl	80008bc <__aeabi_ddiv>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7f8 fbdf 	bl	8000594 <__aeabi_i2d>
 8007dd6:	a392      	add	r3, pc, #584	@ (adr r3, 8008020 <MPU6050_Read_All+0x398>)
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	f7f8 fd6e 	bl	80008bc <__aeabi_ddiv>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7f8 fbcf 	bl	8000594 <__aeabi_i2d>
 8007df6:	a38a      	add	r3, pc, #552	@ (adr r3, 8008020 <MPU6050_Read_All+0x398>)
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f7f8 fd5e 	bl	80008bc <__aeabi_ddiv>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8007e0a:	f7fa ff9b 	bl	8002d44 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	4b8a      	ldr	r3, [pc, #552]	@ (800803c <MPU6050_Read_All+0x3b4>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7f8 fbac 	bl	8000574 <__aeabi_ui2d>
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	4b87      	ldr	r3, [pc, #540]	@ (8008040 <MPU6050_Read_All+0x3b8>)
 8007e22:	f7f8 fd4b 	bl	80008bc <__aeabi_ddiv>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8007e2e:	f7fa ff89 	bl	8002d44 <HAL_GetTick>
 8007e32:	4603      	mov	r3, r0
 8007e34:	4a81      	ldr	r2, [pc, #516]	@ (800803c <MPU6050_Read_All+0x3b4>)
 8007e36:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e46:	fb03 f202 	mul.w	r2, r3, r2
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007e50:	4619      	mov	r1, r3
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007e58:	fb01 f303 	mul.w	r3, r1, r3
 8007e5c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7f8 fb98 	bl	8000594 <__aeabi_i2d>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	ec43 2b10 	vmov	d0, r2, r3
 8007e6c:	f012 fe7e 	bl	801ab6c <sqrt>
 8007e70:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007e80:	f7f8 fe5a 	bl	8000b38 <__aeabi_dcmpeq>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d11f      	bne.n	8007eca <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7f8 fb7f 	bl	8000594 <__aeabi_i2d>
 8007e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e9a:	f7f8 fd0f 	bl	80008bc <__aeabi_ddiv>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	ec43 2b17 	vmov	d7, r2, r3
 8007ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8007eaa:	eef0 0a67 	vmov.f32	s1, s15
 8007eae:	f012 fe8b 	bl	801abc8 <atan>
 8007eb2:	ec51 0b10 	vmov	r0, r1, d0
 8007eb6:	a35c      	add	r3, pc, #368	@ (adr r3, 8008028 <MPU6050_Read_All+0x3a0>)
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f7f8 fbd4 	bl	8000668 <__aeabi_dmul>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8007ec8:	e005      	b.n	8007ed6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	f04f 0300 	mov.w	r3, #0
 8007ed2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007edc:	425b      	negs	r3, r3
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7f8 fb58 	bl	8000594 <__aeabi_i2d>
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	468b      	mov	fp, r1
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7f8 fb50 	bl	8000594 <__aeabi_i2d>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	ec43 2b11 	vmov	d1, r2, r3
 8007efc:	ec4b ab10 	vmov	d0, sl, fp
 8007f00:	f012 fe32 	bl	801ab68 <atan2>
 8007f04:	ec51 0b10 	vmov	r0, r1, d0
 8007f08:	a347      	add	r3, pc, #284	@ (adr r3, 8008028 <MPU6050_Read_All+0x3a0>)
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	f7f8 fbab 	bl	8000668 <__aeabi_dmul>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8007f1a:	f04f 0200 	mov.w	r2, #0
 8007f1e:	4b49      	ldr	r3, [pc, #292]	@ (8008044 <MPU6050_Read_All+0x3bc>)
 8007f20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007f24:	f7f8 fe12 	bl	8000b4c <__aeabi_dcmplt>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <MPU6050_Read_All+0x2bc>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	4b43      	ldr	r3, [pc, #268]	@ (8008048 <MPU6050_Read_All+0x3c0>)
 8007f3a:	f7f8 fe25 	bl	8000b88 <__aeabi_dcmpgt>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d114      	bne.n	8007f6e <MPU6050_Read_All+0x2e6>
 8007f44:	f04f 0200 	mov.w	r2, #0
 8007f48:	4b3f      	ldr	r3, [pc, #252]	@ (8008048 <MPU6050_Read_All+0x3c0>)
 8007f4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007f4e:	f7f8 fe1b 	bl	8000b88 <__aeabi_dcmpgt>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d015      	beq.n	8007f84 <MPU6050_Read_All+0x2fc>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007f5e:	f04f 0200 	mov.w	r2, #0
 8007f62:	4b38      	ldr	r3, [pc, #224]	@ (8008044 <MPU6050_Read_All+0x3bc>)
 8007f64:	f7f8 fdf2 	bl	8000b4c <__aeabi_dcmplt>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00a      	beq.n	8007f84 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8007f6e:	4937      	ldr	r1, [pc, #220]	@ (800804c <MPU6050_Read_All+0x3c4>)
 8007f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f74:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f7e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8007f82:	e014      	b.n	8007fae <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8007f8a:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8007f8e:	eeb0 1a47 	vmov.f32	s2, s14
 8007f92:	eef0 1a67 	vmov.f32	s3, s15
 8007f96:	ed97 0b06 	vldr	d0, [r7, #24]
 8007f9a:	482c      	ldr	r0, [pc, #176]	@ (800804c <MPU6050_Read_All+0x3c4>)
 8007f9c:	f000 f85a 	bl	8008054 <Kalman_getAngle>
 8007fa0:	eeb0 7a40 	vmov.f32	s14, s0
 8007fa4:	eef0 7a60 	vmov.f32	s15, s1
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007fb4:	4690      	mov	r8, r2
 8007fb6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8007fba:	f04f 0200 	mov.w	r2, #0
 8007fbe:	4b22      	ldr	r3, [pc, #136]	@ (8008048 <MPU6050_Read_All+0x3c0>)
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	f7f8 fde0 	bl	8000b88 <__aeabi_dcmpgt>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d008      	beq.n	8007fe0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8007fe6:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8007fea:	eeb0 1a47 	vmov.f32	s2, s14
 8007fee:	eef0 1a67 	vmov.f32	s3, s15
 8007ff2:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8007ff6:	4816      	ldr	r0, [pc, #88]	@ (8008050 <MPU6050_Read_All+0x3c8>)
 8007ff8:	f000 f82c 	bl	8008054 <Kalman_getAngle>
 8007ffc:	eeb0 7a40 	vmov.f32	s14, s0
 8008000:	eef0 7a60 	vmov.f32	s15, s1
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800800a:	bf00      	nop
 800800c:	3740      	adds	r7, #64	@ 0x40
 800800e:	46bd      	mov	sp, r7
 8008010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008014:	f3af 8000 	nop.w
 8008018:	00000000 	.word	0x00000000
 800801c:	40cc2900 	.word	0x40cc2900
 8008020:	00000000 	.word	0x00000000
 8008024:	40606000 	.word	0x40606000
 8008028:	1a63c1f8 	.word	0x1a63c1f8
 800802c:	404ca5dc 	.word	0x404ca5dc
 8008030:	40d00000 	.word	0x40d00000
 8008034:	43aa0000 	.word	0x43aa0000
 8008038:	42121eb8 	.word	0x42121eb8
 800803c:	20005348 	.word	0x20005348
 8008040:	408f4000 	.word	0x408f4000
 8008044:	c0568000 	.word	0xc0568000
 8008048:	40568000 	.word	0x40568000
 800804c:	20000058 	.word	0x20000058
 8008050:	20000010 	.word	0x20000010

08008054 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8008054:	b5b0      	push	{r4, r5, r7, lr}
 8008056:	b096      	sub	sp, #88	@ 0x58
 8008058:	af00      	add	r7, sp, #0
 800805a:	61f8      	str	r0, [r7, #28]
 800805c:	ed87 0b04 	vstr	d0, [r7, #16]
 8008060:	ed87 1b02 	vstr	d1, [r7, #8]
 8008064:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800806e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008072:	f7f8 f941 	bl	80002f8 <__aeabi_dsub>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8008084:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800808c:	f7f8 faec 	bl	8000668 <__aeabi_dmul>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4620      	mov	r0, r4
 8008096:	4629      	mov	r1, r5
 8008098:	f7f8 f930 	bl	80002fc <__adddf3>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	69f9      	ldr	r1, [r7, #28]
 80080a2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80080b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080b6:	f7f8 fad7 	bl	8000668 <__aeabi_dmul>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4610      	mov	r0, r2
 80080c0:	4619      	mov	r1, r3
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80080c8:	f7f8 f916 	bl	80002f8 <__aeabi_dsub>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4610      	mov	r0, r2
 80080d2:	4619      	mov	r1, r3
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80080da:	f7f8 f90d 	bl	80002f8 <__aeabi_dsub>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	4610      	mov	r0, r2
 80080e4:	4619      	mov	r1, r3
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	f7f8 f906 	bl	80002fc <__adddf3>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4610      	mov	r0, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080fc:	f7f8 fab4 	bl	8000668 <__aeabi_dmul>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	4620      	mov	r0, r4
 8008106:	4629      	mov	r1, r5
 8008108:	f7f8 f8f8 	bl	80002fc <__adddf3>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	69f9      	ldr	r1, [r7, #28]
 8008112:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8008122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008126:	f7f8 fa9f 	bl	8000668 <__aeabi_dmul>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 f8e1 	bl	80002f8 <__aeabi_dsub>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	69f9      	ldr	r1, [r7, #28]
 800813c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800814c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008150:	f7f8 fa8a 	bl	8000668 <__aeabi_dmul>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4620      	mov	r0, r4
 800815a:	4629      	mov	r1, r5
 800815c:	f7f8 f8cc 	bl	80002f8 <__aeabi_dsub>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	69f9      	ldr	r1, [r7, #28]
 8008166:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800817a:	f7f8 fa75 	bl	8000668 <__aeabi_dmul>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4620      	mov	r0, r4
 8008184:	4629      	mov	r1, r5
 8008186:	f7f8 f8b9 	bl	80002fc <__adddf3>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	69f9      	ldr	r1, [r7, #28]
 8008190:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80081a0:	f7f8 f8ac 	bl	80002fc <__adddf3>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80081b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80081b6:	f7f8 fb81 	bl	80008bc <__aeabi_ddiv>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80081c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80081cc:	f7f8 fb76 	bl	80008bc <__aeabi_ddiv>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80081de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081e2:	f7f8 f889 	bl	80002f8 <__aeabi_dsub>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80081f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80081f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80081fc:	f7f8 fa34 	bl	8000668 <__aeabi_dmul>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4620      	mov	r0, r4
 8008206:	4629      	mov	r1, r5
 8008208:	f7f8 f878 	bl	80002fc <__adddf3>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	69f9      	ldr	r1, [r7, #28]
 8008212:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800821c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008220:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008224:	f7f8 fa20 	bl	8000668 <__aeabi_dmul>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	4620      	mov	r0, r4
 800822e:	4629      	mov	r1, r5
 8008230:	f7f8 f864 	bl	80002fc <__adddf3>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	69f9      	ldr	r1, [r7, #28]
 800823a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8008244:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800824e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8008258:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800825c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008260:	f7f8 fa02 	bl	8000668 <__aeabi_dmul>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4620      	mov	r0, r4
 800826a:	4629      	mov	r1, r5
 800826c:	f7f8 f844 	bl	80002f8 <__aeabi_dsub>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	69f9      	ldr	r1, [r7, #28]
 8008276:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8008280:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008284:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008288:	f7f8 f9ee 	bl	8000668 <__aeabi_dmul>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4620      	mov	r0, r4
 8008292:	4629      	mov	r1, r5
 8008294:	f7f8 f830 	bl	80002f8 <__aeabi_dsub>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	69f9      	ldr	r1, [r7, #28]
 800829e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80082a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80082ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80082b0:	f7f8 f9da 	bl	8000668 <__aeabi_dmul>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4620      	mov	r0, r4
 80082ba:	4629      	mov	r1, r5
 80082bc:	f7f8 f81c 	bl	80002f8 <__aeabi_dsub>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	69f9      	ldr	r1, [r7, #28]
 80082c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80082d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80082d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80082d8:	f7f8 f9c6 	bl	8000668 <__aeabi_dmul>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4620      	mov	r0, r4
 80082e2:	4629      	mov	r1, r5
 80082e4:	f7f8 f808 	bl	80002f8 <__aeabi_dsub>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	69f9      	ldr	r1, [r7, #28]
 80082ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80082f8:	ec43 2b17 	vmov	d7, r2, r3
};
 80082fc:	eeb0 0a47 	vmov.f32	s0, s14
 8008300:	eef0 0a67 	vmov.f32	s1, s15
 8008304:	3758      	adds	r7, #88	@ 0x58
 8008306:	46bd      	mov	sp, r7
 8008308:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800830c <__NVIC_SetPriority>:
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	6039      	str	r1, [r7, #0]
 8008316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831c:	2b00      	cmp	r3, #0
 800831e:	db0a      	blt.n	8008336 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	b2da      	uxtb	r2, r3
 8008324:	490c      	ldr	r1, [pc, #48]	@ (8008358 <__NVIC_SetPriority+0x4c>)
 8008326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800832a:	0112      	lsls	r2, r2, #4
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	440b      	add	r3, r1
 8008330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008334:	e00a      	b.n	800834c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	b2da      	uxtb	r2, r3
 800833a:	4908      	ldr	r1, [pc, #32]	@ (800835c <__NVIC_SetPriority+0x50>)
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	f003 030f 	and.w	r3, r3, #15
 8008342:	3b04      	subs	r3, #4
 8008344:	0112      	lsls	r2, r2, #4
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	440b      	add	r3, r1
 800834a:	761a      	strb	r2, [r3, #24]
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	e000e100 	.word	0xe000e100
 800835c:	e000ed00 	.word	0xe000ed00

08008360 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008364:	4b05      	ldr	r3, [pc, #20]	@ (800837c <SysTick_Handler+0x1c>)
 8008366:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008368:	f001 fd40 	bl	8009dec <xTaskGetSchedulerState>
 800836c:	4603      	mov	r3, r0
 800836e:	2b01      	cmp	r3, #1
 8008370:	d001      	beq.n	8008376 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008372:	f002 fb39 	bl	800a9e8 <xPortSysTickHandler>
  }
}
 8008376:	bf00      	nop
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	e000e010 	.word	0xe000e010

08008380 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008380:	b580      	push	{r7, lr}
 8008382:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008384:	2100      	movs	r1, #0
 8008386:	f06f 0004 	mvn.w	r0, #4
 800838a:	f7ff ffbf 	bl	800830c <__NVIC_SetPriority>
#endif
}
 800838e:	bf00      	nop
 8008390:	bd80      	pop	{r7, pc}
	...

08008394 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800839a:	f3ef 8305 	mrs	r3, IPSR
 800839e:	603b      	str	r3, [r7, #0]
  return(result);
 80083a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80083a6:	f06f 0305 	mvn.w	r3, #5
 80083aa:	607b      	str	r3, [r7, #4]
 80083ac:	e00c      	b.n	80083c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083ae:	4b0a      	ldr	r3, [pc, #40]	@ (80083d8 <osKernelInitialize+0x44>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d105      	bne.n	80083c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80083b6:	4b08      	ldr	r3, [pc, #32]	@ (80083d8 <osKernelInitialize+0x44>)
 80083b8:	2201      	movs	r2, #1
 80083ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083bc:	2300      	movs	r3, #0
 80083be:	607b      	str	r3, [r7, #4]
 80083c0:	e002      	b.n	80083c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80083c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083c8:	687b      	ldr	r3, [r7, #4]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	2000534c 	.word	0x2000534c

080083dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083e2:	f3ef 8305 	mrs	r3, IPSR
 80083e6:	603b      	str	r3, [r7, #0]
  return(result);
 80083e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80083ee:	f06f 0305 	mvn.w	r3, #5
 80083f2:	607b      	str	r3, [r7, #4]
 80083f4:	e010      	b.n	8008418 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008424 <osKernelStart+0x48>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d109      	bne.n	8008412 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083fe:	f7ff ffbf 	bl	8008380 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008402:	4b08      	ldr	r3, [pc, #32]	@ (8008424 <osKernelStart+0x48>)
 8008404:	2202      	movs	r2, #2
 8008406:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008408:	f001 f87a 	bl	8009500 <vTaskStartScheduler>
      stat = osOK;
 800840c:	2300      	movs	r3, #0
 800840e:	607b      	str	r3, [r7, #4]
 8008410:	e002      	b.n	8008418 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008412:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008416:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008418:	687b      	ldr	r3, [r7, #4]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	2000534c 	.word	0x2000534c

08008428 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008428:	b580      	push	{r7, lr}
 800842a:	b08e      	sub	sp, #56	@ 0x38
 800842c:	af04      	add	r7, sp, #16
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008434:	2300      	movs	r3, #0
 8008436:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008438:	f3ef 8305 	mrs	r3, IPSR
 800843c:	617b      	str	r3, [r7, #20]
  return(result);
 800843e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008440:	2b00      	cmp	r3, #0
 8008442:	d17e      	bne.n	8008542 <osThreadNew+0x11a>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d07b      	beq.n	8008542 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800844a:	2380      	movs	r3, #128	@ 0x80
 800844c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800844e:	2318      	movs	r3, #24
 8008450:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008452:	2300      	movs	r3, #0
 8008454:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008456:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800845a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d045      	beq.n	80084ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <osThreadNew+0x48>
        name = attr->name;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d008      	beq.n	8008496 <osThreadNew+0x6e>
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	2b38      	cmp	r3, #56	@ 0x38
 8008488:	d805      	bhi.n	8008496 <osThreadNew+0x6e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <osThreadNew+0x72>
        return (NULL);
 8008496:	2300      	movs	r3, #0
 8008498:	e054      	b.n	8008544 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	089b      	lsrs	r3, r3, #2
 80084a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00e      	beq.n	80084d0 <osThreadNew+0xa8>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	2b5b      	cmp	r3, #91	@ 0x5b
 80084b8:	d90a      	bls.n	80084d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d006      	beq.n	80084d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <osThreadNew+0xa8>
        mem = 1;
 80084ca:	2301      	movs	r3, #1
 80084cc:	61bb      	str	r3, [r7, #24]
 80084ce:	e010      	b.n	80084f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10c      	bne.n	80084f2 <osThreadNew+0xca>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d108      	bne.n	80084f2 <osThreadNew+0xca>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d104      	bne.n	80084f2 <osThreadNew+0xca>
          mem = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	61bb      	str	r3, [r7, #24]
 80084ec:	e001      	b.n	80084f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d110      	bne.n	800851a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008500:	9202      	str	r2, [sp, #8]
 8008502:	9301      	str	r3, [sp, #4]
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6a3a      	ldr	r2, [r7, #32]
 800850c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 fe1a 	bl	8009148 <xTaskCreateStatic>
 8008514:	4603      	mov	r3, r0
 8008516:	613b      	str	r3, [r7, #16]
 8008518:	e013      	b.n	8008542 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d110      	bne.n	8008542 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	b29a      	uxth	r2, r3
 8008524:	f107 0310 	add.w	r3, r7, #16
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 fe68 	bl	8009208 <xTaskCreate>
 8008538:	4603      	mov	r3, r0
 800853a:	2b01      	cmp	r3, #1
 800853c:	d001      	beq.n	8008542 <osThreadNew+0x11a>
            hTask = NULL;
 800853e:	2300      	movs	r3, #0
 8008540:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008542:	693b      	ldr	r3, [r7, #16]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3728      	adds	r7, #40	@ 0x28
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008554:	f3ef 8305 	mrs	r3, IPSR
 8008558:	60bb      	str	r3, [r7, #8]
  return(result);
 800855a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <osDelay+0x1c>
    stat = osErrorISR;
 8008560:	f06f 0305 	mvn.w	r3, #5
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	e007      	b.n	8008578 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008568:	2300      	movs	r3, #0
 800856a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 ff8e 	bl	8009494 <vTaskDelay>
    }
  }

  return (stat);
 8008578:	68fb      	ldr	r3, [r7, #12]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4a07      	ldr	r2, [pc, #28]	@ (80085b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4a06      	ldr	r2, [pc, #24]	@ (80085b4 <vApplicationGetIdleTaskMemory+0x30>)
 800859a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2280      	movs	r2, #128	@ 0x80
 80085a0:	601a      	str	r2, [r3, #0]
}
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	20005350 	.word	0x20005350
 80085b4:	200053ac 	.word	0x200053ac

080085b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4a07      	ldr	r2, [pc, #28]	@ (80085e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80085c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4a06      	ldr	r2, [pc, #24]	@ (80085e8 <vApplicationGetTimerTaskMemory+0x30>)
 80085ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085d6:	601a      	str	r2, [r3, #0]
}
 80085d8:	bf00      	nop
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	200055ac 	.word	0x200055ac
 80085e8:	20005608 	.word	0x20005608

080085ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f103 0208 	add.w	r2, r3, #8
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008604:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f103 0208 	add.w	r2, r3, #8
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f103 0208 	add.w	r2, r3, #8
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008646:	b480      	push	{r7}
 8008648:	b085      	sub	sp, #20
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	601a      	str	r2, [r3, #0]
}
 8008682:	bf00      	nop
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800868e:	b480      	push	{r7}
 8008690:	b085      	sub	sp, #20
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086a4:	d103      	bne.n	80086ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	e00c      	b.n	80086c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3308      	adds	r3, #8
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e002      	b.n	80086bc <vListInsert+0x2e>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d2f6      	bcs.n	80086b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	601a      	str	r2, [r3, #0]
}
 80086f4:	bf00      	nop
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6892      	ldr	r2, [r2, #8]
 8008716:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	6852      	ldr	r2, [r2, #4]
 8008720:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	429a      	cmp	r2, r3
 800872a:	d103      	bne.n	8008734 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	1e5a      	subs	r2, r3, #1
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10b      	bne.n	8008780 <xQueueGenericReset+0x2c>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	60bb      	str	r3, [r7, #8]
}
 800877a:	bf00      	nop
 800877c:	bf00      	nop
 800877e:	e7fd      	b.n	800877c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008780:	f002 f8a2 	bl	800a8c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800878c:	68f9      	ldr	r1, [r7, #12]
 800878e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008790:	fb01 f303 	mul.w	r3, r1, r3
 8008794:	441a      	add	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b0:	3b01      	subs	r3, #1
 80087b2:	68f9      	ldr	r1, [r7, #12]
 80087b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087b6:	fb01 f303 	mul.w	r3, r1, r3
 80087ba:	441a      	add	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	22ff      	movs	r2, #255	@ 0xff
 80087c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	22ff      	movs	r2, #255	@ 0xff
 80087cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d114      	bne.n	8008800 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d01a      	beq.n	8008814 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3310      	adds	r3, #16
 80087e2:	4618      	mov	r0, r3
 80087e4:	f001 f91a 	bl	8009a1c <xTaskRemoveFromEventList>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d012      	beq.n	8008814 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80087ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008824 <xQueueGenericReset+0xd0>)
 80087f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	e009      	b.n	8008814 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3310      	adds	r3, #16
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fef1 	bl	80085ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3324      	adds	r3, #36	@ 0x24
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff feec 	bl	80085ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008814:	f002 f88a 	bl	800a92c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008818:	2301      	movs	r3, #1
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	e000ed04 	.word	0xe000ed04

08008828 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08e      	sub	sp, #56	@ 0x38
 800882c:	af02      	add	r7, sp, #8
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10b      	bne.n	8008854 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800884e:	bf00      	nop
 8008850:	bf00      	nop
 8008852:	e7fd      	b.n	8008850 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10b      	bne.n	8008872 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800886c:	bf00      	nop
 800886e:	bf00      	nop
 8008870:	e7fd      	b.n	800886e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <xQueueGenericCreateStatic+0x56>
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <xQueueGenericCreateStatic+0x5a>
 800887e:	2301      	movs	r3, #1
 8008880:	e000      	b.n	8008884 <xQueueGenericCreateStatic+0x5c>
 8008882:	2300      	movs	r3, #0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10b      	bne.n	80088a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	623b      	str	r3, [r7, #32]
}
 800889a:	bf00      	nop
 800889c:	bf00      	nop
 800889e:	e7fd      	b.n	800889c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d102      	bne.n	80088ac <xQueueGenericCreateStatic+0x84>
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <xQueueGenericCreateStatic+0x88>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e000      	b.n	80088b2 <xQueueGenericCreateStatic+0x8a>
 80088b0:	2300      	movs	r3, #0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10b      	bne.n	80088ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	61fb      	str	r3, [r7, #28]
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	e7fd      	b.n	80088ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088ce:	2350      	movs	r3, #80	@ 0x50
 80088d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b50      	cmp	r3, #80	@ 0x50
 80088d6:	d00b      	beq.n	80088f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	61bb      	str	r3, [r7, #24]
}
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
 80088ee:	e7fd      	b.n	80088ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80088f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00d      	beq.n	8008918 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80088fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008904:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	4613      	mov	r3, r2
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	68b9      	ldr	r1, [r7, #8]
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 f805 	bl	8008922 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800891a:	4618      	mov	r0, r3
 800891c:	3730      	adds	r7, #48	@ 0x30
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	60f8      	str	r0, [r7, #12]
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	607a      	str	r2, [r7, #4]
 800892e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d103      	bne.n	800893e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	e002      	b.n	8008944 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008950:	2101      	movs	r1, #1
 8008952:	69b8      	ldr	r0, [r7, #24]
 8008954:	f7ff fefe 	bl	8008754 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008960:	bf00      	nop
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08e      	sub	sp, #56	@ 0x38
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008976:	2300      	movs	r3, #0
 8008978:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800897e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10b      	bne.n	800899c <xQueueGenericSend+0x34>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008996:	bf00      	nop
 8008998:	bf00      	nop
 800899a:	e7fd      	b.n	8008998 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d103      	bne.n	80089aa <xQueueGenericSend+0x42>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <xQueueGenericSend+0x46>
 80089aa:	2301      	movs	r3, #1
 80089ac:	e000      	b.n	80089b0 <xQueueGenericSend+0x48>
 80089ae:	2300      	movs	r3, #0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10b      	bne.n	80089cc <xQueueGenericSend+0x64>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	e7fd      	b.n	80089c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d103      	bne.n	80089da <xQueueGenericSend+0x72>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <xQueueGenericSend+0x76>
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <xQueueGenericSend+0x78>
 80089de:	2300      	movs	r3, #0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10b      	bne.n	80089fc <xQueueGenericSend+0x94>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	623b      	str	r3, [r7, #32]
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	e7fd      	b.n	80089f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089fc:	f001 f9f6 	bl	8009dec <xTaskGetSchedulerState>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d102      	bne.n	8008a0c <xQueueGenericSend+0xa4>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <xQueueGenericSend+0xa8>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e000      	b.n	8008a12 <xQueueGenericSend+0xaa>
 8008a10:	2300      	movs	r3, #0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10b      	bne.n	8008a2e <xQueueGenericSend+0xc6>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	61fb      	str	r3, [r7, #28]
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	e7fd      	b.n	8008a2a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a2e:	f001 ff4b 	bl	800a8c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d302      	bcc.n	8008a44 <xQueueGenericSend+0xdc>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d129      	bne.n	8008a98 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	68b9      	ldr	r1, [r7, #8]
 8008a48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a4a:	f000 fa0f 	bl	8008e6c <prvCopyDataToQueue>
 8008a4e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d010      	beq.n	8008a7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	3324      	adds	r3, #36	@ 0x24
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 ffdd 	bl	8009a1c <xTaskRemoveFromEventList>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d013      	beq.n	8008a90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a68:	4b3f      	ldr	r3, [pc, #252]	@ (8008b68 <xQueueGenericSend+0x200>)
 8008a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	e00a      	b.n	8008a90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d007      	beq.n	8008a90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a80:	4b39      	ldr	r3, [pc, #228]	@ (8008b68 <xQueueGenericSend+0x200>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a90:	f001 ff4c 	bl	800a92c <vPortExitCritical>
				return pdPASS;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e063      	b.n	8008b60 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d103      	bne.n	8008aa6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a9e:	f001 ff45 	bl	800a92c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	e05c      	b.n	8008b60 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d106      	bne.n	8008aba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008aac:	f107 0314 	add.w	r3, r7, #20
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 f83f 	bl	8009b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008aba:	f001 ff37 	bl	800a92c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008abe:	f000 fd87 	bl	80095d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ac2:	f001 ff01 	bl	800a8c8 <vPortEnterCritical>
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008acc:	b25b      	sxtb	r3, r3
 8008ace:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ad2:	d103      	bne.n	8008adc <xQueueGenericSend+0x174>
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ae2:	b25b      	sxtb	r3, r3
 8008ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ae8:	d103      	bne.n	8008af2 <xQueueGenericSend+0x18a>
 8008aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008af2:	f001 ff1b 	bl	800a92c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008af6:	1d3a      	adds	r2, r7, #4
 8008af8:	f107 0314 	add.w	r3, r7, #20
 8008afc:	4611      	mov	r1, r2
 8008afe:	4618      	mov	r0, r3
 8008b00:	f001 f82e 	bl	8009b60 <xTaskCheckForTimeOut>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d124      	bne.n	8008b54 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b0c:	f000 faa6 	bl	800905c <prvIsQueueFull>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d018      	beq.n	8008b48 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	3310      	adds	r3, #16
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 ff2a 	bl	8009978 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b26:	f000 fa31 	bl	8008f8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b2a:	f000 fd5f 	bl	80095ec <xTaskResumeAll>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f47f af7c 	bne.w	8008a2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b36:	4b0c      	ldr	r3, [pc, #48]	@ (8008b68 <xQueueGenericSend+0x200>)
 8008b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	e772      	b.n	8008a2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b4a:	f000 fa1f 	bl	8008f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b4e:	f000 fd4d 	bl	80095ec <xTaskResumeAll>
 8008b52:	e76c      	b.n	8008a2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b56:	f000 fa19 	bl	8008f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b5a:	f000 fd47 	bl	80095ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3738      	adds	r7, #56	@ 0x38
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b090      	sub	sp, #64	@ 0x40
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10b      	bne.n	8008b9c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b96:	bf00      	nop
 8008b98:	bf00      	nop
 8008b9a:	e7fd      	b.n	8008b98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d103      	bne.n	8008baa <xQueueGenericSendFromISR+0x3e>
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <xQueueGenericSendFromISR+0x42>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e000      	b.n	8008bb0 <xQueueGenericSendFromISR+0x44>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10b      	bne.n	8008bcc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008bc6:	bf00      	nop
 8008bc8:	bf00      	nop
 8008bca:	e7fd      	b.n	8008bc8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d103      	bne.n	8008bda <xQueueGenericSendFromISR+0x6e>
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d101      	bne.n	8008bde <xQueueGenericSendFromISR+0x72>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e000      	b.n	8008be0 <xQueueGenericSendFromISR+0x74>
 8008bde:	2300      	movs	r3, #0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10b      	bne.n	8008bfc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	623b      	str	r3, [r7, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	bf00      	nop
 8008bfa:	e7fd      	b.n	8008bf8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bfc:	f001 ff44 	bl	800aa88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c00:	f3ef 8211 	mrs	r2, BASEPRI
 8008c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	61fa      	str	r2, [r7, #28]
 8008c16:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c18:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c1a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d302      	bcc.n	8008c2e <xQueueGenericSendFromISR+0xc2>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d12f      	bne.n	8008c8e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c44:	f000 f912 	bl	8008e6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c48:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c50:	d112      	bne.n	8008c78 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d016      	beq.n	8008c88 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5c:	3324      	adds	r3, #36	@ 0x24
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fedc 	bl	8009a1c <xTaskRemoveFromEventList>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00e      	beq.n	8008c88 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00b      	beq.n	8008c88 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	e007      	b.n	8008c88 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	b25a      	sxtb	r2, r3
 8008c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008c8c:	e001      	b.n	8008c92 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c94:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3740      	adds	r7, #64	@ 0x40
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08c      	sub	sp, #48	@ 0x30
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10b      	bne.n	8008cda <xQueueReceive+0x32>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	623b      	str	r3, [r7, #32]
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop
 8008cd8:	e7fd      	b.n	8008cd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d103      	bne.n	8008ce8 <xQueueReceive+0x40>
 8008ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <xQueueReceive+0x44>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <xQueueReceive+0x46>
 8008cec:	2300      	movs	r3, #0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10b      	bne.n	8008d0a <xQueueReceive+0x62>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	61fb      	str	r3, [r7, #28]
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	e7fd      	b.n	8008d06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d0a:	f001 f86f 	bl	8009dec <xTaskGetSchedulerState>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d102      	bne.n	8008d1a <xQueueReceive+0x72>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <xQueueReceive+0x76>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <xQueueReceive+0x78>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10b      	bne.n	8008d3c <xQueueReceive+0x94>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	61bb      	str	r3, [r7, #24]
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	e7fd      	b.n	8008d38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d3c:	f001 fdc4 	bl	800a8c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01f      	beq.n	8008d8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d4c:	68b9      	ldr	r1, [r7, #8]
 8008d4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d50:	f000 f8f6 	bl	8008f40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d56:	1e5a      	subs	r2, r3, #1
 8008d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00f      	beq.n	8008d84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d66:	3310      	adds	r3, #16
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 fe57 	bl	8009a1c <xTaskRemoveFromEventList>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d007      	beq.n	8008d84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d74:	4b3c      	ldr	r3, [pc, #240]	@ (8008e68 <xQueueReceive+0x1c0>)
 8008d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d84:	f001 fdd2 	bl	800a92c <vPortExitCritical>
				return pdPASS;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e069      	b.n	8008e60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d103      	bne.n	8008d9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d92:	f001 fdcb 	bl	800a92c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e062      	b.n	8008e60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d106      	bne.n	8008dae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008da0:	f107 0310 	add.w	r3, r7, #16
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 fec5 	bl	8009b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008daa:	2301      	movs	r3, #1
 8008dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dae:	f001 fdbd 	bl	800a92c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008db2:	f000 fc0d 	bl	80095d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008db6:	f001 fd87 	bl	800a8c8 <vPortEnterCritical>
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008dc0:	b25b      	sxtb	r3, r3
 8008dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dc6:	d103      	bne.n	8008dd0 <xQueueReceive+0x128>
 8008dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dd6:	b25b      	sxtb	r3, r3
 8008dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ddc:	d103      	bne.n	8008de6 <xQueueReceive+0x13e>
 8008dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008de6:	f001 fda1 	bl	800a92c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dea:	1d3a      	adds	r2, r7, #4
 8008dec:	f107 0310 	add.w	r3, r7, #16
 8008df0:	4611      	mov	r1, r2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 feb4 	bl	8009b60 <xTaskCheckForTimeOut>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d123      	bne.n	8008e46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e00:	f000 f916 	bl	8009030 <prvIsQueueEmpty>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d017      	beq.n	8008e3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0c:	3324      	adds	r3, #36	@ 0x24
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	4611      	mov	r1, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fdb0 	bl	8009978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e1a:	f000 f8b7 	bl	8008f8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e1e:	f000 fbe5 	bl	80095ec <xTaskResumeAll>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d189      	bne.n	8008d3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e28:	4b0f      	ldr	r3, [pc, #60]	@ (8008e68 <xQueueReceive+0x1c0>)
 8008e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	e780      	b.n	8008d3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e3c:	f000 f8a6 	bl	8008f8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e40:	f000 fbd4 	bl	80095ec <xTaskResumeAll>
 8008e44:	e77a      	b.n	8008d3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e48:	f000 f8a0 	bl	8008f8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e4c:	f000 fbce 	bl	80095ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e52:	f000 f8ed 	bl	8009030 <prvIsQueueEmpty>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f43f af6f 	beq.w	8008d3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3730      	adds	r7, #48	@ 0x30
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10d      	bne.n	8008ea6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d14d      	bne.n	8008f2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 ffc6 	bl	8009e28 <xTaskPriorityDisinherit>
 8008e9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	609a      	str	r2, [r3, #8]
 8008ea4:	e043      	b.n	8008f2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d119      	bne.n	8008ee0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6858      	ldr	r0, [r3, #4]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	68b9      	ldr	r1, [r7, #8]
 8008eb8:	f011 f815 	bl	8019ee6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec4:	441a      	add	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d32b      	bcc.n	8008f2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	605a      	str	r2, [r3, #4]
 8008ede:	e026      	b.n	8008f2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	68d8      	ldr	r0, [r3, #12]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee8:	461a      	mov	r2, r3
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	f010 fffb 	bl	8019ee6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef8:	425b      	negs	r3, r3
 8008efa:	441a      	add	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	68da      	ldr	r2, [r3, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d207      	bcs.n	8008f1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f14:	425b      	negs	r3, r3
 8008f16:	441a      	add	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d105      	bne.n	8008f2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d002      	beq.n	8008f2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f36:	697b      	ldr	r3, [r7, #20]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d018      	beq.n	8008f84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f5a:	441a      	add	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d303      	bcc.n	8008f74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68d9      	ldr	r1, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	6838      	ldr	r0, [r7, #0]
 8008f80:	f010 ffb1 	bl	8019ee6 <memcpy>
	}
}
 8008f84:	bf00      	nop
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f94:	f001 fc98 	bl	800a8c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fa0:	e011      	b.n	8008fc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d012      	beq.n	8008fd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3324      	adds	r3, #36	@ 0x24
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fd34 	bl	8009a1c <xTaskRemoveFromEventList>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fba:	f000 fe35 	bl	8009c28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	dce9      	bgt.n	8008fa2 <prvUnlockQueue+0x16>
 8008fce:	e000      	b.n	8008fd2 <prvUnlockQueue+0x46>
					break;
 8008fd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	22ff      	movs	r2, #255	@ 0xff
 8008fd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008fda:	f001 fca7 	bl	800a92c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fde:	f001 fc73 	bl	800a8c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fe8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fea:	e011      	b.n	8009010 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d012      	beq.n	800901a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	3310      	adds	r3, #16
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fd0f 	bl	8009a1c <xTaskRemoveFromEventList>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009004:	f000 fe10 	bl	8009c28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	3b01      	subs	r3, #1
 800900c:	b2db      	uxtb	r3, r3
 800900e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009014:	2b00      	cmp	r3, #0
 8009016:	dce9      	bgt.n	8008fec <prvUnlockQueue+0x60>
 8009018:	e000      	b.n	800901c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800901a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	22ff      	movs	r2, #255	@ 0xff
 8009020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009024:	f001 fc82 	bl	800a92c <vPortExitCritical>
}
 8009028:	bf00      	nop
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009038:	f001 fc46 	bl	800a8c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009040:	2b00      	cmp	r3, #0
 8009042:	d102      	bne.n	800904a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009044:	2301      	movs	r3, #1
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	e001      	b.n	800904e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800904e:	f001 fc6d 	bl	800a92c <vPortExitCritical>

	return xReturn;
 8009052:	68fb      	ldr	r3, [r7, #12]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009064:	f001 fc30 	bl	800a8c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009070:	429a      	cmp	r2, r3
 8009072:	d102      	bne.n	800907a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009074:	2301      	movs	r3, #1
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	e001      	b.n	800907e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800907e:	f001 fc55 	bl	800a92c <vPortExitCritical>

	return xReturn;
 8009082:	68fb      	ldr	r3, [r7, #12]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009096:	2300      	movs	r3, #0
 8009098:	60fb      	str	r3, [r7, #12]
 800909a:	e014      	b.n	80090c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800909c:	4a0f      	ldr	r2, [pc, #60]	@ (80090dc <vQueueAddToRegistry+0x50>)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10b      	bne.n	80090c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090a8:	490c      	ldr	r1, [pc, #48]	@ (80090dc <vQueueAddToRegistry+0x50>)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090b2:	4a0a      	ldr	r2, [pc, #40]	@ (80090dc <vQueueAddToRegistry+0x50>)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	4413      	add	r3, r2
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090be:	e006      	b.n	80090ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3301      	adds	r3, #1
 80090c4:	60fb      	str	r3, [r7, #12]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b07      	cmp	r3, #7
 80090ca:	d9e7      	bls.n	800909c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090cc:	bf00      	nop
 80090ce:	bf00      	nop
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	20005a08 	.word	0x20005a08

080090e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090f0:	f001 fbea 	bl	800a8c8 <vPortEnterCritical>
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090fa:	b25b      	sxtb	r3, r3
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009100:	d103      	bne.n	800910a <vQueueWaitForMessageRestricted+0x2a>
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009110:	b25b      	sxtb	r3, r3
 8009112:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009116:	d103      	bne.n	8009120 <vQueueWaitForMessageRestricted+0x40>
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009120:	f001 fc04 	bl	800a92c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009128:	2b00      	cmp	r3, #0
 800912a:	d106      	bne.n	800913a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	3324      	adds	r3, #36	@ 0x24
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	4618      	mov	r0, r3
 8009136:	f000 fc45 	bl	80099c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800913a:	6978      	ldr	r0, [r7, #20]
 800913c:	f7ff ff26 	bl	8008f8c <prvUnlockQueue>
	}
 8009140:	bf00      	nop
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009148:	b580      	push	{r7, lr}
 800914a:	b08e      	sub	sp, #56	@ 0x38
 800914c:	af04      	add	r7, sp, #16
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10b      	bne.n	8009174 <xTaskCreateStatic+0x2c>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	623b      	str	r3, [r7, #32]
}
 800916e:	bf00      	nop
 8009170:	bf00      	nop
 8009172:	e7fd      	b.n	8009170 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10b      	bne.n	8009192 <xTaskCreateStatic+0x4a>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	61fb      	str	r3, [r7, #28]
}
 800918c:	bf00      	nop
 800918e:	bf00      	nop
 8009190:	e7fd      	b.n	800918e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009192:	235c      	movs	r3, #92	@ 0x5c
 8009194:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b5c      	cmp	r3, #92	@ 0x5c
 800919a:	d00b      	beq.n	80091b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	61bb      	str	r3, [r7, #24]
}
 80091ae:	bf00      	nop
 80091b0:	bf00      	nop
 80091b2:	e7fd      	b.n	80091b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d01e      	beq.n	80091fa <xTaskCreateStatic+0xb2>
 80091bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d01b      	beq.n	80091fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ce:	2202      	movs	r2, #2
 80091d0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091d4:	2300      	movs	r3, #0
 80091d6:	9303      	str	r3, [sp, #12]
 80091d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091da:	9302      	str	r3, [sp, #8]
 80091dc:	f107 0314 	add.w	r3, r7, #20
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	68b9      	ldr	r1, [r7, #8]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f850 	bl	8009292 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091f4:	f000 f8de 	bl	80093b4 <prvAddNewTaskToReadyList>
 80091f8:	e001      	b.n	80091fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091fe:	697b      	ldr	r3, [r7, #20]
	}
 8009200:	4618      	mov	r0, r3
 8009202:	3728      	adds	r7, #40	@ 0x28
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08c      	sub	sp, #48	@ 0x30
 800920c:	af04      	add	r7, sp, #16
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	4613      	mov	r3, r2
 8009216:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4618      	mov	r0, r3
 800921e:	f001 fc75 	bl	800ab0c <pvPortMalloc>
 8009222:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00e      	beq.n	8009248 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800922a:	205c      	movs	r0, #92	@ 0x5c
 800922c:	f001 fc6e 	bl	800ab0c <pvPortMalloc>
 8009230:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d003      	beq.n	8009240 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	631a      	str	r2, [r3, #48]	@ 0x30
 800923e:	e005      	b.n	800924c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009240:	6978      	ldr	r0, [r7, #20]
 8009242:	f001 fd31 	bl	800aca8 <vPortFree>
 8009246:	e001      	b.n	800924c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009248:	2300      	movs	r3, #0
 800924a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d017      	beq.n	8009282 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800925a:	88fa      	ldrh	r2, [r7, #6]
 800925c:	2300      	movs	r3, #0
 800925e:	9303      	str	r3, [sp, #12]
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	9302      	str	r3, [sp, #8]
 8009264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009266:	9301      	str	r3, [sp, #4]
 8009268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	68b9      	ldr	r1, [r7, #8]
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 f80e 	bl	8009292 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009276:	69f8      	ldr	r0, [r7, #28]
 8009278:	f000 f89c 	bl	80093b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800927c:	2301      	movs	r3, #1
 800927e:	61bb      	str	r3, [r7, #24]
 8009280:	e002      	b.n	8009288 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009286:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009288:	69bb      	ldr	r3, [r7, #24]
	}
 800928a:	4618      	mov	r0, r3
 800928c:	3720      	adds	r7, #32
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b088      	sub	sp, #32
 8009296:	af00      	add	r7, sp, #0
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	607a      	str	r2, [r7, #4]
 800929e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	461a      	mov	r2, r3
 80092aa:	21a5      	movs	r1, #165	@ 0xa5
 80092ac:	f010 fd52 	bl	8019d54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092ba:	3b01      	subs	r3, #1
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	f023 0307 	bic.w	r3, r3, #7
 80092c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00b      	beq.n	80092ec <prvInitialiseNewTask+0x5a>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	617b      	str	r3, [r7, #20]
}
 80092e6:	bf00      	nop
 80092e8:	bf00      	nop
 80092ea:	e7fd      	b.n	80092e8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d01f      	beq.n	8009332 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092f2:	2300      	movs	r3, #0
 80092f4:	61fb      	str	r3, [r7, #28]
 80092f6:	e012      	b.n	800931e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	4413      	add	r3, r2
 80092fe:	7819      	ldrb	r1, [r3, #0]
 8009300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	4413      	add	r3, r2
 8009306:	3334      	adds	r3, #52	@ 0x34
 8009308:	460a      	mov	r2, r1
 800930a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	4413      	add	r3, r2
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d006      	beq.n	8009326 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	3301      	adds	r3, #1
 800931c:	61fb      	str	r3, [r7, #28]
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	2b0f      	cmp	r3, #15
 8009322:	d9e9      	bls.n	80092f8 <prvInitialiseNewTask+0x66>
 8009324:	e000      	b.n	8009328 <prvInitialiseNewTask+0x96>
			{
				break;
 8009326:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009330:	e003      	b.n	800933a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800933a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933c:	2b37      	cmp	r3, #55	@ 0x37
 800933e:	d901      	bls.n	8009344 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009340:	2337      	movs	r3, #55	@ 0x37
 8009342:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009348:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800934e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009352:	2200      	movs	r2, #0
 8009354:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009358:	3304      	adds	r3, #4
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff f966 	bl	800862c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	3318      	adds	r3, #24
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff f961 	bl	800862c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800936e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009378:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800937e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009382:	2200      	movs	r2, #0
 8009384:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	68f9      	ldr	r1, [r7, #12]
 8009392:	69b8      	ldr	r0, [r7, #24]
 8009394:	f001 f966 	bl	800a664 <pxPortInitialiseStack>
 8009398:	4602      	mov	r2, r0
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800939e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093aa:	bf00      	nop
 80093ac:	3720      	adds	r7, #32
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093bc:	f001 fa84 	bl	800a8c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093c0:	4b2d      	ldr	r3, [pc, #180]	@ (8009478 <prvAddNewTaskToReadyList+0xc4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3301      	adds	r3, #1
 80093c6:	4a2c      	ldr	r2, [pc, #176]	@ (8009478 <prvAddNewTaskToReadyList+0xc4>)
 80093c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093ca:	4b2c      	ldr	r3, [pc, #176]	@ (800947c <prvAddNewTaskToReadyList+0xc8>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093d2:	4a2a      	ldr	r2, [pc, #168]	@ (800947c <prvAddNewTaskToReadyList+0xc8>)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093d8:	4b27      	ldr	r3, [pc, #156]	@ (8009478 <prvAddNewTaskToReadyList+0xc4>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d110      	bne.n	8009402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093e0:	f000 fc46 	bl	8009c70 <prvInitialiseTaskLists>
 80093e4:	e00d      	b.n	8009402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093e6:	4b26      	ldr	r3, [pc, #152]	@ (8009480 <prvAddNewTaskToReadyList+0xcc>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d109      	bne.n	8009402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093ee:	4b23      	ldr	r3, [pc, #140]	@ (800947c <prvAddNewTaskToReadyList+0xc8>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d802      	bhi.n	8009402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093fc:	4a1f      	ldr	r2, [pc, #124]	@ (800947c <prvAddNewTaskToReadyList+0xc8>)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009402:	4b20      	ldr	r3, [pc, #128]	@ (8009484 <prvAddNewTaskToReadyList+0xd0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3301      	adds	r3, #1
 8009408:	4a1e      	ldr	r2, [pc, #120]	@ (8009484 <prvAddNewTaskToReadyList+0xd0>)
 800940a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800940c:	4b1d      	ldr	r3, [pc, #116]	@ (8009484 <prvAddNewTaskToReadyList+0xd0>)
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009418:	4b1b      	ldr	r3, [pc, #108]	@ (8009488 <prvAddNewTaskToReadyList+0xd4>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	429a      	cmp	r2, r3
 800941e:	d903      	bls.n	8009428 <prvAddNewTaskToReadyList+0x74>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009424:	4a18      	ldr	r2, [pc, #96]	@ (8009488 <prvAddNewTaskToReadyList+0xd4>)
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4a15      	ldr	r2, [pc, #84]	@ (800948c <prvAddNewTaskToReadyList+0xd8>)
 8009436:	441a      	add	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3304      	adds	r3, #4
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f7ff f901 	bl	8008646 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009444:	f001 fa72 	bl	800a92c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009448:	4b0d      	ldr	r3, [pc, #52]	@ (8009480 <prvAddNewTaskToReadyList+0xcc>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00e      	beq.n	800946e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009450:	4b0a      	ldr	r3, [pc, #40]	@ (800947c <prvAddNewTaskToReadyList+0xc8>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945a:	429a      	cmp	r2, r3
 800945c:	d207      	bcs.n	800946e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800945e:	4b0c      	ldr	r3, [pc, #48]	@ (8009490 <prvAddNewTaskToReadyList+0xdc>)
 8009460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20005f1c 	.word	0x20005f1c
 800947c:	20005a48 	.word	0x20005a48
 8009480:	20005f28 	.word	0x20005f28
 8009484:	20005f38 	.word	0x20005f38
 8009488:	20005f24 	.word	0x20005f24
 800948c:	20005a4c 	.word	0x20005a4c
 8009490:	e000ed04 	.word	0xe000ed04

08009494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800949c:	2300      	movs	r3, #0
 800949e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d018      	beq.n	80094d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094a6:	4b14      	ldr	r3, [pc, #80]	@ (80094f8 <vTaskDelay+0x64>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00b      	beq.n	80094c6 <vTaskDelay+0x32>
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	60bb      	str	r3, [r7, #8]
}
 80094c0:	bf00      	nop
 80094c2:	bf00      	nop
 80094c4:	e7fd      	b.n	80094c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094c6:	f000 f883 	bl	80095d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094ca:	2100      	movs	r1, #0
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fd1b 	bl	8009f08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094d2:	f000 f88b 	bl	80095ec <xTaskResumeAll>
 80094d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d107      	bne.n	80094ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80094de:	4b07      	ldr	r3, [pc, #28]	@ (80094fc <vTaskDelay+0x68>)
 80094e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20005f44 	.word	0x20005f44
 80094fc:	e000ed04 	.word	0xe000ed04

08009500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08a      	sub	sp, #40	@ 0x28
 8009504:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009506:	2300      	movs	r3, #0
 8009508:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800950a:	2300      	movs	r3, #0
 800950c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800950e:	463a      	mov	r2, r7
 8009510:	1d39      	adds	r1, r7, #4
 8009512:	f107 0308 	add.w	r3, r7, #8
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff f834 	bl	8008584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	9202      	str	r2, [sp, #8]
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	2300      	movs	r3, #0
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	2300      	movs	r3, #0
 800952c:	460a      	mov	r2, r1
 800952e:	4922      	ldr	r1, [pc, #136]	@ (80095b8 <vTaskStartScheduler+0xb8>)
 8009530:	4822      	ldr	r0, [pc, #136]	@ (80095bc <vTaskStartScheduler+0xbc>)
 8009532:	f7ff fe09 	bl	8009148 <xTaskCreateStatic>
 8009536:	4603      	mov	r3, r0
 8009538:	4a21      	ldr	r2, [pc, #132]	@ (80095c0 <vTaskStartScheduler+0xc0>)
 800953a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800953c:	4b20      	ldr	r3, [pc, #128]	@ (80095c0 <vTaskStartScheduler+0xc0>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009544:	2301      	movs	r3, #1
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	e001      	b.n	800954e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800954a:	2300      	movs	r3, #0
 800954c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d102      	bne.n	800955a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009554:	f000 fd2c 	bl	8009fb0 <xTimerCreateTimerTask>
 8009558:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d116      	bne.n	800958e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	613b      	str	r3, [r7, #16]
}
 8009572:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009574:	4b13      	ldr	r3, [pc, #76]	@ (80095c4 <vTaskStartScheduler+0xc4>)
 8009576:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800957a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800957c:	4b12      	ldr	r3, [pc, #72]	@ (80095c8 <vTaskStartScheduler+0xc8>)
 800957e:	2201      	movs	r2, #1
 8009580:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009582:	4b12      	ldr	r3, [pc, #72]	@ (80095cc <vTaskStartScheduler+0xcc>)
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009588:	f001 f8fa 	bl	800a780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800958c:	e00f      	b.n	80095ae <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009594:	d10b      	bne.n	80095ae <vTaskStartScheduler+0xae>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	60fb      	str	r3, [r7, #12]
}
 80095a8:	bf00      	nop
 80095aa:	bf00      	nop
 80095ac:	e7fd      	b.n	80095aa <vTaskStartScheduler+0xaa>
}
 80095ae:	bf00      	nop
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	0801b370 	.word	0x0801b370
 80095bc:	08009c41 	.word	0x08009c41
 80095c0:	20005f40 	.word	0x20005f40
 80095c4:	20005f3c 	.word	0x20005f3c
 80095c8:	20005f28 	.word	0x20005f28
 80095cc:	20005f20 	.word	0x20005f20

080095d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095d0:	b480      	push	{r7}
 80095d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80095d4:	4b04      	ldr	r3, [pc, #16]	@ (80095e8 <vTaskSuspendAll+0x18>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3301      	adds	r3, #1
 80095da:	4a03      	ldr	r2, [pc, #12]	@ (80095e8 <vTaskSuspendAll+0x18>)
 80095dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095de:	bf00      	nop
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	20005f44 	.word	0x20005f44

080095ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095fa:	4b42      	ldr	r3, [pc, #264]	@ (8009704 <xTaskResumeAll+0x118>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10b      	bne.n	800961a <xTaskResumeAll+0x2e>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	603b      	str	r3, [r7, #0]
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	e7fd      	b.n	8009616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800961a:	f001 f955 	bl	800a8c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800961e:	4b39      	ldr	r3, [pc, #228]	@ (8009704 <xTaskResumeAll+0x118>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3b01      	subs	r3, #1
 8009624:	4a37      	ldr	r2, [pc, #220]	@ (8009704 <xTaskResumeAll+0x118>)
 8009626:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009628:	4b36      	ldr	r3, [pc, #216]	@ (8009704 <xTaskResumeAll+0x118>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d162      	bne.n	80096f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009630:	4b35      	ldr	r3, [pc, #212]	@ (8009708 <xTaskResumeAll+0x11c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d05e      	beq.n	80096f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009638:	e02f      	b.n	800969a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800963a:	4b34      	ldr	r3, [pc, #208]	@ (800970c <xTaskResumeAll+0x120>)
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3318      	adds	r3, #24
 8009646:	4618      	mov	r0, r3
 8009648:	f7ff f85a 	bl	8008700 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	3304      	adds	r3, #4
 8009650:	4618      	mov	r0, r3
 8009652:	f7ff f855 	bl	8008700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800965a:	4b2d      	ldr	r3, [pc, #180]	@ (8009710 <xTaskResumeAll+0x124>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	429a      	cmp	r2, r3
 8009660:	d903      	bls.n	800966a <xTaskResumeAll+0x7e>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009666:	4a2a      	ldr	r2, [pc, #168]	@ (8009710 <xTaskResumeAll+0x124>)
 8009668:	6013      	str	r3, [r2, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966e:	4613      	mov	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4a27      	ldr	r2, [pc, #156]	@ (8009714 <xTaskResumeAll+0x128>)
 8009678:	441a      	add	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3304      	adds	r3, #4
 800967e:	4619      	mov	r1, r3
 8009680:	4610      	mov	r0, r2
 8009682:	f7fe ffe0 	bl	8008646 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800968a:	4b23      	ldr	r3, [pc, #140]	@ (8009718 <xTaskResumeAll+0x12c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009690:	429a      	cmp	r2, r3
 8009692:	d302      	bcc.n	800969a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009694:	4b21      	ldr	r3, [pc, #132]	@ (800971c <xTaskResumeAll+0x130>)
 8009696:	2201      	movs	r2, #1
 8009698:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800969a:	4b1c      	ldr	r3, [pc, #112]	@ (800970c <xTaskResumeAll+0x120>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1cb      	bne.n	800963a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096a8:	f000 fb80 	bl	8009dac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096ac:	4b1c      	ldr	r3, [pc, #112]	@ (8009720 <xTaskResumeAll+0x134>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d010      	beq.n	80096da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096b8:	f000 f846 	bl	8009748 <xTaskIncrementTick>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d002      	beq.n	80096c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80096c2:	4b16      	ldr	r3, [pc, #88]	@ (800971c <xTaskResumeAll+0x130>)
 80096c4:	2201      	movs	r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1f1      	bne.n	80096b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80096d4:	4b12      	ldr	r3, [pc, #72]	@ (8009720 <xTaskResumeAll+0x134>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096da:	4b10      	ldr	r3, [pc, #64]	@ (800971c <xTaskResumeAll+0x130>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d009      	beq.n	80096f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096e2:	2301      	movs	r3, #1
 80096e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009724 <xTaskResumeAll+0x138>)
 80096e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096f6:	f001 f919 	bl	800a92c <vPortExitCritical>

	return xAlreadyYielded;
 80096fa:	68bb      	ldr	r3, [r7, #8]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	20005f44 	.word	0x20005f44
 8009708:	20005f1c 	.word	0x20005f1c
 800970c:	20005edc 	.word	0x20005edc
 8009710:	20005f24 	.word	0x20005f24
 8009714:	20005a4c 	.word	0x20005a4c
 8009718:	20005a48 	.word	0x20005a48
 800971c:	20005f30 	.word	0x20005f30
 8009720:	20005f2c 	.word	0x20005f2c
 8009724:	e000ed04 	.word	0xe000ed04

08009728 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800972e:	4b05      	ldr	r3, [pc, #20]	@ (8009744 <xTaskGetTickCount+0x1c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009734:	687b      	ldr	r3, [r7, #4]
}
 8009736:	4618      	mov	r0, r3
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20005f20 	.word	0x20005f20

08009748 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009752:	4b4f      	ldr	r3, [pc, #316]	@ (8009890 <xTaskIncrementTick+0x148>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f040 8090 	bne.w	800987c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800975c:	4b4d      	ldr	r3, [pc, #308]	@ (8009894 <xTaskIncrementTick+0x14c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3301      	adds	r3, #1
 8009762:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009764:	4a4b      	ldr	r2, [pc, #300]	@ (8009894 <xTaskIncrementTick+0x14c>)
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d121      	bne.n	80097b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009770:	4b49      	ldr	r3, [pc, #292]	@ (8009898 <xTaskIncrementTick+0x150>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00b      	beq.n	8009792 <xTaskIncrementTick+0x4a>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	603b      	str	r3, [r7, #0]
}
 800978c:	bf00      	nop
 800978e:	bf00      	nop
 8009790:	e7fd      	b.n	800978e <xTaskIncrementTick+0x46>
 8009792:	4b41      	ldr	r3, [pc, #260]	@ (8009898 <xTaskIncrementTick+0x150>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	4b40      	ldr	r3, [pc, #256]	@ (800989c <xTaskIncrementTick+0x154>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a3e      	ldr	r2, [pc, #248]	@ (8009898 <xTaskIncrementTick+0x150>)
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	4a3e      	ldr	r2, [pc, #248]	@ (800989c <xTaskIncrementTick+0x154>)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	4b3e      	ldr	r3, [pc, #248]	@ (80098a0 <xTaskIncrementTick+0x158>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	4a3c      	ldr	r2, [pc, #240]	@ (80098a0 <xTaskIncrementTick+0x158>)
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	f000 fafc 	bl	8009dac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097b4:	4b3b      	ldr	r3, [pc, #236]	@ (80098a4 <xTaskIncrementTick+0x15c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d349      	bcc.n	8009852 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097be:	4b36      	ldr	r3, [pc, #216]	@ (8009898 <xTaskIncrementTick+0x150>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d104      	bne.n	80097d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097c8:	4b36      	ldr	r3, [pc, #216]	@ (80098a4 <xTaskIncrementTick+0x15c>)
 80097ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097ce:	601a      	str	r2, [r3, #0]
					break;
 80097d0:	e03f      	b.n	8009852 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097d2:	4b31      	ldr	r3, [pc, #196]	@ (8009898 <xTaskIncrementTick+0x150>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d203      	bcs.n	80097f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097ea:	4a2e      	ldr	r2, [pc, #184]	@ (80098a4 <xTaskIncrementTick+0x15c>)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097f0:	e02f      	b.n	8009852 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	3304      	adds	r3, #4
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe ff82 	bl	8008700 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009800:	2b00      	cmp	r3, #0
 8009802:	d004      	beq.n	800980e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	3318      	adds	r3, #24
 8009808:	4618      	mov	r0, r3
 800980a:	f7fe ff79 	bl	8008700 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009812:	4b25      	ldr	r3, [pc, #148]	@ (80098a8 <xTaskIncrementTick+0x160>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	429a      	cmp	r2, r3
 8009818:	d903      	bls.n	8009822 <xTaskIncrementTick+0xda>
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981e:	4a22      	ldr	r2, [pc, #136]	@ (80098a8 <xTaskIncrementTick+0x160>)
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4a1f      	ldr	r2, [pc, #124]	@ (80098ac <xTaskIncrementTick+0x164>)
 8009830:	441a      	add	r2, r3
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	3304      	adds	r3, #4
 8009836:	4619      	mov	r1, r3
 8009838:	4610      	mov	r0, r2
 800983a:	f7fe ff04 	bl	8008646 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009842:	4b1b      	ldr	r3, [pc, #108]	@ (80098b0 <xTaskIncrementTick+0x168>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009848:	429a      	cmp	r2, r3
 800984a:	d3b8      	bcc.n	80097be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800984c:	2301      	movs	r3, #1
 800984e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009850:	e7b5      	b.n	80097be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009852:	4b17      	ldr	r3, [pc, #92]	@ (80098b0 <xTaskIncrementTick+0x168>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009858:	4914      	ldr	r1, [pc, #80]	@ (80098ac <xTaskIncrementTick+0x164>)
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	440b      	add	r3, r1
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d901      	bls.n	800986e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800986a:	2301      	movs	r3, #1
 800986c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800986e:	4b11      	ldr	r3, [pc, #68]	@ (80098b4 <xTaskIncrementTick+0x16c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d007      	beq.n	8009886 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009876:	2301      	movs	r3, #1
 8009878:	617b      	str	r3, [r7, #20]
 800987a:	e004      	b.n	8009886 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800987c:	4b0e      	ldr	r3, [pc, #56]	@ (80098b8 <xTaskIncrementTick+0x170>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3301      	adds	r3, #1
 8009882:	4a0d      	ldr	r2, [pc, #52]	@ (80098b8 <xTaskIncrementTick+0x170>)
 8009884:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009886:	697b      	ldr	r3, [r7, #20]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20005f44 	.word	0x20005f44
 8009894:	20005f20 	.word	0x20005f20
 8009898:	20005ed4 	.word	0x20005ed4
 800989c:	20005ed8 	.word	0x20005ed8
 80098a0:	20005f34 	.word	0x20005f34
 80098a4:	20005f3c 	.word	0x20005f3c
 80098a8:	20005f24 	.word	0x20005f24
 80098ac:	20005a4c 	.word	0x20005a4c
 80098b0:	20005a48 	.word	0x20005a48
 80098b4:	20005f30 	.word	0x20005f30
 80098b8:	20005f2c 	.word	0x20005f2c

080098bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098c2:	4b28      	ldr	r3, [pc, #160]	@ (8009964 <vTaskSwitchContext+0xa8>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098ca:	4b27      	ldr	r3, [pc, #156]	@ (8009968 <vTaskSwitchContext+0xac>)
 80098cc:	2201      	movs	r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098d0:	e042      	b.n	8009958 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80098d2:	4b25      	ldr	r3, [pc, #148]	@ (8009968 <vTaskSwitchContext+0xac>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d8:	4b24      	ldr	r3, [pc, #144]	@ (800996c <vTaskSwitchContext+0xb0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	60fb      	str	r3, [r7, #12]
 80098de:	e011      	b.n	8009904 <vTaskSwitchContext+0x48>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10b      	bne.n	80098fe <vTaskSwitchContext+0x42>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	607b      	str	r3, [r7, #4]
}
 80098f8:	bf00      	nop
 80098fa:	bf00      	nop
 80098fc:	e7fd      	b.n	80098fa <vTaskSwitchContext+0x3e>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3b01      	subs	r3, #1
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	491a      	ldr	r1, [pc, #104]	@ (8009970 <vTaskSwitchContext+0xb4>)
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	440b      	add	r3, r1
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d0e3      	beq.n	80098e0 <vTaskSwitchContext+0x24>
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	4613      	mov	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4413      	add	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4a13      	ldr	r2, [pc, #76]	@ (8009970 <vTaskSwitchContext+0xb4>)
 8009924:	4413      	add	r3, r2
 8009926:	60bb      	str	r3, [r7, #8]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	605a      	str	r2, [r3, #4]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	3308      	adds	r3, #8
 800993a:	429a      	cmp	r2, r3
 800993c:	d104      	bne.n	8009948 <vTaskSwitchContext+0x8c>
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	685a      	ldr	r2, [r3, #4]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	605a      	str	r2, [r3, #4]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	4a09      	ldr	r2, [pc, #36]	@ (8009974 <vTaskSwitchContext+0xb8>)
 8009950:	6013      	str	r3, [r2, #0]
 8009952:	4a06      	ldr	r2, [pc, #24]	@ (800996c <vTaskSwitchContext+0xb0>)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6013      	str	r3, [r2, #0]
}
 8009958:	bf00      	nop
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	20005f44 	.word	0x20005f44
 8009968:	20005f30 	.word	0x20005f30
 800996c:	20005f24 	.word	0x20005f24
 8009970:	20005a4c 	.word	0x20005a4c
 8009974:	20005a48 	.word	0x20005a48

08009978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10b      	bne.n	80099a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	60fb      	str	r3, [r7, #12]
}
 800999a:	bf00      	nop
 800999c:	bf00      	nop
 800999e:	e7fd      	b.n	800999c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099a0:	4b07      	ldr	r3, [pc, #28]	@ (80099c0 <vTaskPlaceOnEventList+0x48>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3318      	adds	r3, #24
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7fe fe70 	bl	800868e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099ae:	2101      	movs	r1, #1
 80099b0:	6838      	ldr	r0, [r7, #0]
 80099b2:	f000 faa9 	bl	8009f08 <prvAddCurrentTaskToDelayedList>
}
 80099b6:	bf00      	nop
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20005a48 	.word	0x20005a48

080099c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10b      	bne.n	80099ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	617b      	str	r3, [r7, #20]
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009a18 <vTaskPlaceOnEventListRestricted+0x54>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3318      	adds	r3, #24
 80099f4:	4619      	mov	r1, r3
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f7fe fe25 	bl	8008646 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a08:	6879      	ldr	r1, [r7, #4]
 8009a0a:	68b8      	ldr	r0, [r7, #8]
 8009a0c:	f000 fa7c 	bl	8009f08 <prvAddCurrentTaskToDelayedList>
	}
 8009a10:	bf00      	nop
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	20005a48 	.word	0x20005a48

08009a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10b      	bne.n	8009a4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	60fb      	str	r3, [r7, #12]
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop
 8009a48:	e7fd      	b.n	8009a46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	3318      	adds	r3, #24
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fe fe56 	bl	8008700 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a54:	4b1d      	ldr	r3, [pc, #116]	@ (8009acc <xTaskRemoveFromEventList+0xb0>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d11d      	bne.n	8009a98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe fe4d 	bl	8008700 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a6a:	4b19      	ldr	r3, [pc, #100]	@ (8009ad0 <xTaskRemoveFromEventList+0xb4>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d903      	bls.n	8009a7a <xTaskRemoveFromEventList+0x5e>
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a76:	4a16      	ldr	r2, [pc, #88]	@ (8009ad0 <xTaskRemoveFromEventList+0xb4>)
 8009a78:	6013      	str	r3, [r2, #0]
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4a13      	ldr	r2, [pc, #76]	@ (8009ad4 <xTaskRemoveFromEventList+0xb8>)
 8009a88:	441a      	add	r2, r3
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4610      	mov	r0, r2
 8009a92:	f7fe fdd8 	bl	8008646 <vListInsertEnd>
 8009a96:	e005      	b.n	8009aa4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	3318      	adds	r3, #24
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	480e      	ldr	r0, [pc, #56]	@ (8009ad8 <xTaskRemoveFromEventList+0xbc>)
 8009aa0:	f7fe fdd1 	bl	8008646 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8009adc <xTaskRemoveFromEventList+0xc0>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d905      	bls.n	8009abe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae0 <xTaskRemoveFromEventList+0xc4>)
 8009ab8:	2201      	movs	r2, #1
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	e001      	b.n	8009ac2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ac2:	697b      	ldr	r3, [r7, #20]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	20005f44 	.word	0x20005f44
 8009ad0:	20005f24 	.word	0x20005f24
 8009ad4:	20005a4c 	.word	0x20005a4c
 8009ad8:	20005edc 	.word	0x20005edc
 8009adc:	20005a48 	.word	0x20005a48
 8009ae0:	20005f30 	.word	0x20005f30

08009ae4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10b      	bne.n	8009b0a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	60fb      	str	r3, [r7, #12]
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
 8009b08:	e7fd      	b.n	8009b06 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009b0a:	f000 fedd 	bl	800a8c8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b0e:	4b07      	ldr	r3, [pc, #28]	@ (8009b2c <vTaskSetTimeOutState+0x48>)
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009b16:	4b06      	ldr	r3, [pc, #24]	@ (8009b30 <vTaskSetTimeOutState+0x4c>)
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009b1e:	f000 ff05 	bl	800a92c <vPortExitCritical>
}
 8009b22:	bf00      	nop
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20005f34 	.word	0x20005f34
 8009b30:	20005f20 	.word	0x20005f20

08009b34 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b3c:	4b06      	ldr	r3, [pc, #24]	@ (8009b58 <vTaskInternalSetTimeOutState+0x24>)
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b44:	4b05      	ldr	r3, [pc, #20]	@ (8009b5c <vTaskInternalSetTimeOutState+0x28>)
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	605a      	str	r2, [r3, #4]
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	20005f34 	.word	0x20005f34
 8009b5c:	20005f20 	.word	0x20005f20

08009b60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10b      	bne.n	8009b88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	613b      	str	r3, [r7, #16]
}
 8009b82:	bf00      	nop
 8009b84:	bf00      	nop
 8009b86:	e7fd      	b.n	8009b84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10b      	bne.n	8009ba6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	60fb      	str	r3, [r7, #12]
}
 8009ba0:	bf00      	nop
 8009ba2:	bf00      	nop
 8009ba4:	e7fd      	b.n	8009ba2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009ba6:	f000 fe8f 	bl	800a8c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009baa:	4b1d      	ldr	r3, [pc, #116]	@ (8009c20 <xTaskCheckForTimeOut+0xc0>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bc2:	d102      	bne.n	8009bca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61fb      	str	r3, [r7, #28]
 8009bc8:	e023      	b.n	8009c12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	4b15      	ldr	r3, [pc, #84]	@ (8009c24 <xTaskCheckForTimeOut+0xc4>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d007      	beq.n	8009be6 <xTaskCheckForTimeOut+0x86>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d302      	bcc.n	8009be6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	61fb      	str	r3, [r7, #28]
 8009be4:	e015      	b.n	8009c12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d20b      	bcs.n	8009c08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	1ad2      	subs	r2, r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff ff99 	bl	8009b34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c02:	2300      	movs	r3, #0
 8009c04:	61fb      	str	r3, [r7, #28]
 8009c06:	e004      	b.n	8009c12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c12:	f000 fe8b 	bl	800a92c <vPortExitCritical>

	return xReturn;
 8009c16:	69fb      	ldr	r3, [r7, #28]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	20005f20 	.word	0x20005f20
 8009c24:	20005f34 	.word	0x20005f34

08009c28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c2c:	4b03      	ldr	r3, [pc, #12]	@ (8009c3c <vTaskMissedYield+0x14>)
 8009c2e:	2201      	movs	r2, #1
 8009c30:	601a      	str	r2, [r3, #0]
}
 8009c32:	bf00      	nop
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	20005f30 	.word	0x20005f30

08009c40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c48:	f000 f852 	bl	8009cf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c4c:	4b06      	ldr	r3, [pc, #24]	@ (8009c68 <prvIdleTask+0x28>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d9f9      	bls.n	8009c48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c54:	4b05      	ldr	r3, [pc, #20]	@ (8009c6c <prvIdleTask+0x2c>)
 8009c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c64:	e7f0      	b.n	8009c48 <prvIdleTask+0x8>
 8009c66:	bf00      	nop
 8009c68:	20005a4c 	.word	0x20005a4c
 8009c6c:	e000ed04 	.word	0xe000ed04

08009c70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c76:	2300      	movs	r3, #0
 8009c78:	607b      	str	r3, [r7, #4]
 8009c7a:	e00c      	b.n	8009c96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4a12      	ldr	r2, [pc, #72]	@ (8009cd0 <prvInitialiseTaskLists+0x60>)
 8009c88:	4413      	add	r3, r2
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fcae 	bl	80085ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3301      	adds	r3, #1
 8009c94:	607b      	str	r3, [r7, #4]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b37      	cmp	r3, #55	@ 0x37
 8009c9a:	d9ef      	bls.n	8009c7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c9c:	480d      	ldr	r0, [pc, #52]	@ (8009cd4 <prvInitialiseTaskLists+0x64>)
 8009c9e:	f7fe fca5 	bl	80085ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ca2:	480d      	ldr	r0, [pc, #52]	@ (8009cd8 <prvInitialiseTaskLists+0x68>)
 8009ca4:	f7fe fca2 	bl	80085ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ca8:	480c      	ldr	r0, [pc, #48]	@ (8009cdc <prvInitialiseTaskLists+0x6c>)
 8009caa:	f7fe fc9f 	bl	80085ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cae:	480c      	ldr	r0, [pc, #48]	@ (8009ce0 <prvInitialiseTaskLists+0x70>)
 8009cb0:	f7fe fc9c 	bl	80085ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cb4:	480b      	ldr	r0, [pc, #44]	@ (8009ce4 <prvInitialiseTaskLists+0x74>)
 8009cb6:	f7fe fc99 	bl	80085ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cba:	4b0b      	ldr	r3, [pc, #44]	@ (8009ce8 <prvInitialiseTaskLists+0x78>)
 8009cbc:	4a05      	ldr	r2, [pc, #20]	@ (8009cd4 <prvInitialiseTaskLists+0x64>)
 8009cbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8009cec <prvInitialiseTaskLists+0x7c>)
 8009cc2:	4a05      	ldr	r2, [pc, #20]	@ (8009cd8 <prvInitialiseTaskLists+0x68>)
 8009cc4:	601a      	str	r2, [r3, #0]
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20005a4c 	.word	0x20005a4c
 8009cd4:	20005eac 	.word	0x20005eac
 8009cd8:	20005ec0 	.word	0x20005ec0
 8009cdc:	20005edc 	.word	0x20005edc
 8009ce0:	20005ef0 	.word	0x20005ef0
 8009ce4:	20005f08 	.word	0x20005f08
 8009ce8:	20005ed4 	.word	0x20005ed4
 8009cec:	20005ed8 	.word	0x20005ed8

08009cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cf6:	e019      	b.n	8009d2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cf8:	f000 fde6 	bl	800a8c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfc:	4b10      	ldr	r3, [pc, #64]	@ (8009d40 <prvCheckTasksWaitingTermination+0x50>)
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe fcf9 	bl	8008700 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d44 <prvCheckTasksWaitingTermination+0x54>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3b01      	subs	r3, #1
 8009d14:	4a0b      	ldr	r2, [pc, #44]	@ (8009d44 <prvCheckTasksWaitingTermination+0x54>)
 8009d16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d18:	4b0b      	ldr	r3, [pc, #44]	@ (8009d48 <prvCheckTasksWaitingTermination+0x58>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8009d48 <prvCheckTasksWaitingTermination+0x58>)
 8009d20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d22:	f000 fe03 	bl	800a92c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f810 	bl	8009d4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d2c:	4b06      	ldr	r3, [pc, #24]	@ (8009d48 <prvCheckTasksWaitingTermination+0x58>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e1      	bne.n	8009cf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d34:	bf00      	nop
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20005ef0 	.word	0x20005ef0
 8009d44:	20005f1c 	.word	0x20005f1c
 8009d48:	20005f04 	.word	0x20005f04

08009d4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d108      	bne.n	8009d70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 ffa0 	bl	800aca8 <vPortFree>
				vPortFree( pxTCB );
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 ff9d 	bl	800aca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d6e:	e019      	b.n	8009da4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d103      	bne.n	8009d82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 ff94 	bl	800aca8 <vPortFree>
	}
 8009d80:	e010      	b.n	8009da4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d00b      	beq.n	8009da4 <prvDeleteTCB+0x58>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	60fb      	str	r3, [r7, #12]
}
 8009d9e:	bf00      	nop
 8009da0:	bf00      	nop
 8009da2:	e7fd      	b.n	8009da0 <prvDeleteTCB+0x54>
	}
 8009da4:	bf00      	nop
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009db2:	4b0c      	ldr	r3, [pc, #48]	@ (8009de4 <prvResetNextTaskUnblockTime+0x38>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d104      	bne.n	8009dc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009de8 <prvResetNextTaskUnblockTime+0x3c>)
 8009dbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009dc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dc4:	e008      	b.n	8009dd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dc6:	4b07      	ldr	r3, [pc, #28]	@ (8009de4 <prvResetNextTaskUnblockTime+0x38>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	4a04      	ldr	r2, [pc, #16]	@ (8009de8 <prvResetNextTaskUnblockTime+0x3c>)
 8009dd6:	6013      	str	r3, [r2, #0]
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	20005ed4 	.word	0x20005ed4
 8009de8:	20005f3c 	.word	0x20005f3c

08009dec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009df2:	4b0b      	ldr	r3, [pc, #44]	@ (8009e20 <xTaskGetSchedulerState+0x34>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d102      	bne.n	8009e00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	607b      	str	r3, [r7, #4]
 8009dfe:	e008      	b.n	8009e12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e00:	4b08      	ldr	r3, [pc, #32]	@ (8009e24 <xTaskGetSchedulerState+0x38>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d102      	bne.n	8009e0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e08:	2302      	movs	r3, #2
 8009e0a:	607b      	str	r3, [r7, #4]
 8009e0c:	e001      	b.n	8009e12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e12:	687b      	ldr	r3, [r7, #4]
	}
 8009e14:	4618      	mov	r0, r3
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	20005f28 	.word	0x20005f28
 8009e24:	20005f44 	.word	0x20005f44

08009e28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e34:	2300      	movs	r3, #0
 8009e36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d058      	beq.n	8009ef0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8009efc <xTaskPriorityDisinherit+0xd4>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d00b      	beq.n	8009e60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	60fb      	str	r3, [r7, #12]
}
 8009e5a:	bf00      	nop
 8009e5c:	bf00      	nop
 8009e5e:	e7fd      	b.n	8009e5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10b      	bne.n	8009e80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	60bb      	str	r3, [r7, #8]
}
 8009e7a:	bf00      	nop
 8009e7c:	bf00      	nop
 8009e7e:	e7fd      	b.n	8009e7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e84:	1e5a      	subs	r2, r3, #1
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d02c      	beq.n	8009ef0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d128      	bne.n	8009ef0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe fc2c 	bl	8008700 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8009f00 <xTaskPriorityDisinherit+0xd8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d903      	bls.n	8009ed0 <xTaskPriorityDisinherit+0xa8>
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8009f00 <xTaskPriorityDisinherit+0xd8>)
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4a09      	ldr	r2, [pc, #36]	@ (8009f04 <xTaskPriorityDisinherit+0xdc>)
 8009ede:	441a      	add	r2, r3
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	f7fe fbad 	bl	8008646 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009eec:	2301      	movs	r3, #1
 8009eee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ef0:	697b      	ldr	r3, [r7, #20]
	}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20005a48 	.word	0x20005a48
 8009f00:	20005f24 	.word	0x20005f24
 8009f04:	20005a4c 	.word	0x20005a4c

08009f08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f12:	4b21      	ldr	r3, [pc, #132]	@ (8009f98 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f18:	4b20      	ldr	r3, [pc, #128]	@ (8009f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe fbee 	bl	8008700 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f2a:	d10a      	bne.n	8009f42 <prvAddCurrentTaskToDelayedList+0x3a>
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d007      	beq.n	8009f42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f32:	4b1a      	ldr	r3, [pc, #104]	@ (8009f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	3304      	adds	r3, #4
 8009f38:	4619      	mov	r1, r3
 8009f3a:	4819      	ldr	r0, [pc, #100]	@ (8009fa0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009f3c:	f7fe fb83 	bl	8008646 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f40:	e026      	b.n	8009f90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4413      	add	r3, r2
 8009f48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f4a:	4b14      	ldr	r3, [pc, #80]	@ (8009f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d209      	bcs.n	8009f6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f5a:	4b12      	ldr	r3, [pc, #72]	@ (8009fa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8009f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3304      	adds	r3, #4
 8009f64:	4619      	mov	r1, r3
 8009f66:	4610      	mov	r0, r2
 8009f68:	f7fe fb91 	bl	800868e <vListInsert>
}
 8009f6c:	e010      	b.n	8009f90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009fa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	4b0a      	ldr	r3, [pc, #40]	@ (8009f9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3304      	adds	r3, #4
 8009f78:	4619      	mov	r1, r3
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	f7fe fb87 	bl	800868e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f80:	4b0a      	ldr	r3, [pc, #40]	@ (8009fac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d202      	bcs.n	8009f90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f8a:	4a08      	ldr	r2, [pc, #32]	@ (8009fac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	6013      	str	r3, [r2, #0]
}
 8009f90:	bf00      	nop
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20005f20 	.word	0x20005f20
 8009f9c:	20005a48 	.word	0x20005a48
 8009fa0:	20005f08 	.word	0x20005f08
 8009fa4:	20005ed8 	.word	0x20005ed8
 8009fa8:	20005ed4 	.word	0x20005ed4
 8009fac:	20005f3c 	.word	0x20005f3c

08009fb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	@ 0x28
 8009fb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fba:	f000 fb13 	bl	800a5e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009fbe:	4b1d      	ldr	r3, [pc, #116]	@ (800a034 <xTimerCreateTimerTask+0x84>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d021      	beq.n	800a00a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009fce:	1d3a      	adds	r2, r7, #4
 8009fd0:	f107 0108 	add.w	r1, r7, #8
 8009fd4:	f107 030c 	add.w	r3, r7, #12
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fe faed 	bl	80085b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009fde:	6879      	ldr	r1, [r7, #4]
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	9202      	str	r2, [sp, #8]
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	2302      	movs	r3, #2
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	2300      	movs	r3, #0
 8009fee:	460a      	mov	r2, r1
 8009ff0:	4911      	ldr	r1, [pc, #68]	@ (800a038 <xTimerCreateTimerTask+0x88>)
 8009ff2:	4812      	ldr	r0, [pc, #72]	@ (800a03c <xTimerCreateTimerTask+0x8c>)
 8009ff4:	f7ff f8a8 	bl	8009148 <xTaskCreateStatic>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	4a11      	ldr	r2, [pc, #68]	@ (800a040 <xTimerCreateTimerTask+0x90>)
 8009ffc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ffe:	4b10      	ldr	r3, [pc, #64]	@ (800a040 <xTimerCreateTimerTask+0x90>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a006:	2301      	movs	r3, #1
 800a008:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10b      	bne.n	800a028 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	613b      	str	r3, [r7, #16]
}
 800a022:	bf00      	nop
 800a024:	bf00      	nop
 800a026:	e7fd      	b.n	800a024 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a028:	697b      	ldr	r3, [r7, #20]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	20005f78 	.word	0x20005f78
 800a038:	0801b378 	.word	0x0801b378
 800a03c:	0800a17d 	.word	0x0800a17d
 800a040:	20005f7c 	.word	0x20005f7c

0800a044 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08a      	sub	sp, #40	@ 0x28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a052:	2300      	movs	r3, #0
 800a054:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10b      	bne.n	800a074 <xTimerGenericCommand+0x30>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	623b      	str	r3, [r7, #32]
}
 800a06e:	bf00      	nop
 800a070:	bf00      	nop
 800a072:	e7fd      	b.n	800a070 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a074:	4b19      	ldr	r3, [pc, #100]	@ (800a0dc <xTimerGenericCommand+0x98>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d02a      	beq.n	800a0d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b05      	cmp	r3, #5
 800a08c:	dc18      	bgt.n	800a0c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a08e:	f7ff fead 	bl	8009dec <xTaskGetSchedulerState>
 800a092:	4603      	mov	r3, r0
 800a094:	2b02      	cmp	r3, #2
 800a096:	d109      	bne.n	800a0ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a098:	4b10      	ldr	r3, [pc, #64]	@ (800a0dc <xTimerGenericCommand+0x98>)
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	f107 0110 	add.w	r1, r7, #16
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0a4:	f7fe fc60 	bl	8008968 <xQueueGenericSend>
 800a0a8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a0aa:	e012      	b.n	800a0d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a0dc <xTimerGenericCommand+0x98>)
 800a0ae:	6818      	ldr	r0, [r3, #0]
 800a0b0:	f107 0110 	add.w	r1, r7, #16
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f7fe fc56 	bl	8008968 <xQueueGenericSend>
 800a0bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a0be:	e008      	b.n	800a0d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0c0:	4b06      	ldr	r3, [pc, #24]	@ (800a0dc <xTimerGenericCommand+0x98>)
 800a0c2:	6818      	ldr	r0, [r3, #0]
 800a0c4:	f107 0110 	add.w	r1, r7, #16
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	f7fe fd4e 	bl	8008b6c <xQueueGenericSendFromISR>
 800a0d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3728      	adds	r7, #40	@ 0x28
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20005f78 	.word	0x20005f78

0800a0e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ea:	4b23      	ldr	r3, [pc, #140]	@ (800a178 <prvProcessExpiredTimer+0x98>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fe fb01 	bl	8008700 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a104:	f003 0304 	and.w	r3, r3, #4
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d023      	beq.n	800a154 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	699a      	ldr	r2, [r3, #24]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	18d1      	adds	r1, r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	6978      	ldr	r0, [r7, #20]
 800a11a:	f000 f8d5 	bl	800a2c8 <prvInsertTimerInActiveList>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d020      	beq.n	800a166 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a124:	2300      	movs	r3, #0
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	2300      	movs	r3, #0
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	2100      	movs	r1, #0
 800a12e:	6978      	ldr	r0, [r7, #20]
 800a130:	f7ff ff88 	bl	800a044 <xTimerGenericCommand>
 800a134:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d114      	bne.n	800a166 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	60fb      	str	r3, [r7, #12]
}
 800a14e:	bf00      	nop
 800a150:	bf00      	nop
 800a152:	e7fd      	b.n	800a150 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a15a:	f023 0301 	bic.w	r3, r3, #1
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	6978      	ldr	r0, [r7, #20]
 800a16c:	4798      	blx	r3
}
 800a16e:	bf00      	nop
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	20005f70 	.word	0x20005f70

0800a17c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a184:	f107 0308 	add.w	r3, r7, #8
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 f859 	bl	800a240 <prvGetNextExpireTime>
 800a18e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	4619      	mov	r1, r3
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 f805 	bl	800a1a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a19a:	f000 f8d7 	bl	800a34c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a19e:	bf00      	nop
 800a1a0:	e7f0      	b.n	800a184 <prvTimerTask+0x8>
	...

0800a1a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1ae:	f7ff fa0f 	bl	80095d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1b2:	f107 0308 	add.w	r3, r7, #8
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 f866 	bl	800a288 <prvSampleTimeNow>
 800a1bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d130      	bne.n	800a226 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10a      	bne.n	800a1e0 <prvProcessTimerOrBlockTask+0x3c>
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d806      	bhi.n	800a1e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1d2:	f7ff fa0b 	bl	80095ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1d6:	68f9      	ldr	r1, [r7, #12]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7ff ff81 	bl	800a0e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1de:	e024      	b.n	800a22a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d008      	beq.n	800a1f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1e6:	4b13      	ldr	r3, [pc, #76]	@ (800a234 <prvProcessTimerOrBlockTask+0x90>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <prvProcessTimerOrBlockTask+0x50>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e000      	b.n	800a1f6 <prvProcessTimerOrBlockTask+0x52>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a238 <prvProcessTimerOrBlockTask+0x94>)
 800a1fa:	6818      	ldr	r0, [r3, #0]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	4619      	mov	r1, r3
 800a206:	f7fe ff6b 	bl	80090e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a20a:	f7ff f9ef 	bl	80095ec <xTaskResumeAll>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a214:	4b09      	ldr	r3, [pc, #36]	@ (800a23c <prvProcessTimerOrBlockTask+0x98>)
 800a216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	f3bf 8f6f 	isb	sy
}
 800a224:	e001      	b.n	800a22a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a226:	f7ff f9e1 	bl	80095ec <xTaskResumeAll>
}
 800a22a:	bf00      	nop
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	20005f74 	.word	0x20005f74
 800a238:	20005f78 	.word	0x20005f78
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a248:	4b0e      	ldr	r3, [pc, #56]	@ (800a284 <prvGetNextExpireTime+0x44>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <prvGetNextExpireTime+0x16>
 800a252:	2201      	movs	r2, #1
 800a254:	e000      	b.n	800a258 <prvGetNextExpireTime+0x18>
 800a256:	2200      	movs	r2, #0
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d105      	bne.n	800a270 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a264:	4b07      	ldr	r3, [pc, #28]	@ (800a284 <prvGetNextExpireTime+0x44>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60fb      	str	r3, [r7, #12]
 800a26e:	e001      	b.n	800a274 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a274:	68fb      	ldr	r3, [r7, #12]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	20005f70 	.word	0x20005f70

0800a288 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a290:	f7ff fa4a 	bl	8009728 <xTaskGetTickCount>
 800a294:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a296:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c4 <prvSampleTimeNow+0x3c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d205      	bcs.n	800a2ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2a0:	f000 f93a 	bl	800a518 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	e002      	b.n	800a2b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2b2:	4a04      	ldr	r2, [pc, #16]	@ (800a2c4 <prvSampleTimeNow+0x3c>)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20005f80 	.word	0x20005f80

0800a2c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d812      	bhi.n	800a314 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	1ad2      	subs	r2, r2, r3
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d302      	bcc.n	800a302 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	e01b      	b.n	800a33a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a302:	4b10      	ldr	r3, [pc, #64]	@ (800a344 <prvInsertTimerInActiveList+0x7c>)
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3304      	adds	r3, #4
 800a30a:	4619      	mov	r1, r3
 800a30c:	4610      	mov	r0, r2
 800a30e:	f7fe f9be 	bl	800868e <vListInsert>
 800a312:	e012      	b.n	800a33a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d206      	bcs.n	800a32a <prvInsertTimerInActiveList+0x62>
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d302      	bcc.n	800a32a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a324:	2301      	movs	r3, #1
 800a326:	617b      	str	r3, [r7, #20]
 800a328:	e007      	b.n	800a33a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a32a:	4b07      	ldr	r3, [pc, #28]	@ (800a348 <prvInsertTimerInActiveList+0x80>)
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3304      	adds	r3, #4
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	f7fe f9aa 	bl	800868e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a33a:	697b      	ldr	r3, [r7, #20]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20005f74 	.word	0x20005f74
 800a348:	20005f70 	.word	0x20005f70

0800a34c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08e      	sub	sp, #56	@ 0x38
 800a350:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a352:	e0ce      	b.n	800a4f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	da19      	bge.n	800a38e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a35a:	1d3b      	adds	r3, r7, #4
 800a35c:	3304      	adds	r3, #4
 800a35e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10b      	bne.n	800a37e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	61fb      	str	r3, [r7, #28]
}
 800a378:	bf00      	nop
 800a37a:	bf00      	nop
 800a37c:	e7fd      	b.n	800a37a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a384:	6850      	ldr	r0, [r2, #4]
 800a386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a388:	6892      	ldr	r2, [r2, #8]
 800a38a:	4611      	mov	r1, r2
 800a38c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	f2c0 80ae 	blt.w	800a4f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d004      	beq.n	800a3ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fe f9aa 	bl	8008700 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3ac:	463b      	mov	r3, r7
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7ff ff6a 	bl	800a288 <prvSampleTimeNow>
 800a3b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2b09      	cmp	r3, #9
 800a3ba:	f200 8097 	bhi.w	800a4ec <prvProcessReceivedCommands+0x1a0>
 800a3be:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c4 <prvProcessReceivedCommands+0x78>)
 800a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c4:	0800a3ed 	.word	0x0800a3ed
 800a3c8:	0800a3ed 	.word	0x0800a3ed
 800a3cc:	0800a3ed 	.word	0x0800a3ed
 800a3d0:	0800a463 	.word	0x0800a463
 800a3d4:	0800a477 	.word	0x0800a477
 800a3d8:	0800a4c3 	.word	0x0800a4c3
 800a3dc:	0800a3ed 	.word	0x0800a3ed
 800a3e0:	0800a3ed 	.word	0x0800a3ed
 800a3e4:	0800a463 	.word	0x0800a463
 800a3e8:	0800a477 	.word	0x0800a477
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3f2:	f043 0301 	orr.w	r3, r3, #1
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	18d1      	adds	r1, r2, r3
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a40a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a40c:	f7ff ff5c 	bl	800a2c8 <prvInsertTimerInActiveList>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d06c      	beq.n	800a4f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a41c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d061      	beq.n	800a4f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	441a      	add	r2, r3
 800a434:	2300      	movs	r3, #0
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	2300      	movs	r3, #0
 800a43a:	2100      	movs	r1, #0
 800a43c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a43e:	f7ff fe01 	bl	800a044 <xTimerGenericCommand>
 800a442:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d152      	bne.n	800a4f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	61bb      	str	r3, [r7, #24]
}
 800a45c:	bf00      	nop
 800a45e:	bf00      	nop
 800a460:	e7fd      	b.n	800a45e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a464:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a468:	f023 0301 	bic.w	r3, r3, #1
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a470:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a474:	e03d      	b.n	800a4f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a47c:	f043 0301 	orr.w	r3, r3, #1
 800a480:	b2da      	uxtb	r2, r3
 800a482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a484:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10b      	bne.n	800a4ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	617b      	str	r3, [r7, #20]
}
 800a4a8:	bf00      	nop
 800a4aa:	bf00      	nop
 800a4ac:	e7fd      	b.n	800a4aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b0:	699a      	ldr	r2, [r3, #24]
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b4:	18d1      	adds	r1, r2, r3
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4bc:	f7ff ff04 	bl	800a2c8 <prvInsertTimerInActiveList>
					break;
 800a4c0:	e017      	b.n	800a4f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4c8:	f003 0302 	and.w	r3, r3, #2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d103      	bne.n	800a4d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a4d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4d2:	f000 fbe9 	bl	800aca8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4d6:	e00c      	b.n	800a4f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4de:	f023 0301 	bic.w	r3, r3, #1
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a4ea:	e002      	b.n	800a4f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a4ec:	bf00      	nop
 800a4ee:	e000      	b.n	800a4f2 <prvProcessReceivedCommands+0x1a6>
					break;
 800a4f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4f2:	4b08      	ldr	r3, [pc, #32]	@ (800a514 <prvProcessReceivedCommands+0x1c8>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	1d39      	adds	r1, r7, #4
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe fbd4 	bl	8008ca8 <xQueueReceive>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	f47f af26 	bne.w	800a354 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a508:	bf00      	nop
 800a50a:	bf00      	nop
 800a50c:	3730      	adds	r7, #48	@ 0x30
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20005f78 	.word	0x20005f78

0800a518 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b088      	sub	sp, #32
 800a51c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a51e:	e049      	b.n	800a5b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a520:	4b2e      	ldr	r3, [pc, #184]	@ (800a5dc <prvSwitchTimerLists+0xc4>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a52a:	4b2c      	ldr	r3, [pc, #176]	@ (800a5dc <prvSwitchTimerLists+0xc4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3304      	adds	r3, #4
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe f8e1 	bl	8008700 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d02f      	beq.n	800a5b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	4413      	add	r3, r2
 800a55c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	429a      	cmp	r2, r3
 800a564:	d90e      	bls.n	800a584 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a572:	4b1a      	ldr	r3, [pc, #104]	@ (800a5dc <prvSwitchTimerLists+0xc4>)
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3304      	adds	r3, #4
 800a57a:	4619      	mov	r1, r3
 800a57c:	4610      	mov	r0, r2
 800a57e:	f7fe f886 	bl	800868e <vListInsert>
 800a582:	e017      	b.n	800a5b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a584:	2300      	movs	r3, #0
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	2300      	movs	r3, #0
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	2100      	movs	r1, #0
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7ff fd58 	bl	800a044 <xTimerGenericCommand>
 800a594:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10b      	bne.n	800a5b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	603b      	str	r3, [r7, #0]
}
 800a5ae:	bf00      	nop
 800a5b0:	bf00      	nop
 800a5b2:	e7fd      	b.n	800a5b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5b4:	4b09      	ldr	r3, [pc, #36]	@ (800a5dc <prvSwitchTimerLists+0xc4>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1b0      	bne.n	800a520 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5be:	4b07      	ldr	r3, [pc, #28]	@ (800a5dc <prvSwitchTimerLists+0xc4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5c4:	4b06      	ldr	r3, [pc, #24]	@ (800a5e0 <prvSwitchTimerLists+0xc8>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a04      	ldr	r2, [pc, #16]	@ (800a5dc <prvSwitchTimerLists+0xc4>)
 800a5ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5cc:	4a04      	ldr	r2, [pc, #16]	@ (800a5e0 <prvSwitchTimerLists+0xc8>)
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	6013      	str	r3, [r2, #0]
}
 800a5d2:	bf00      	nop
 800a5d4:	3718      	adds	r7, #24
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20005f70 	.word	0x20005f70
 800a5e0:	20005f74 	.word	0x20005f74

0800a5e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5ea:	f000 f96d 	bl	800a8c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5ee:	4b15      	ldr	r3, [pc, #84]	@ (800a644 <prvCheckForValidListAndQueue+0x60>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d120      	bne.n	800a638 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5f6:	4814      	ldr	r0, [pc, #80]	@ (800a648 <prvCheckForValidListAndQueue+0x64>)
 800a5f8:	f7fd fff8 	bl	80085ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5fc:	4813      	ldr	r0, [pc, #76]	@ (800a64c <prvCheckForValidListAndQueue+0x68>)
 800a5fe:	f7fd fff5 	bl	80085ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a602:	4b13      	ldr	r3, [pc, #76]	@ (800a650 <prvCheckForValidListAndQueue+0x6c>)
 800a604:	4a10      	ldr	r2, [pc, #64]	@ (800a648 <prvCheckForValidListAndQueue+0x64>)
 800a606:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a608:	4b12      	ldr	r3, [pc, #72]	@ (800a654 <prvCheckForValidListAndQueue+0x70>)
 800a60a:	4a10      	ldr	r2, [pc, #64]	@ (800a64c <prvCheckForValidListAndQueue+0x68>)
 800a60c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a60e:	2300      	movs	r3, #0
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	4b11      	ldr	r3, [pc, #68]	@ (800a658 <prvCheckForValidListAndQueue+0x74>)
 800a614:	4a11      	ldr	r2, [pc, #68]	@ (800a65c <prvCheckForValidListAndQueue+0x78>)
 800a616:	2110      	movs	r1, #16
 800a618:	200a      	movs	r0, #10
 800a61a:	f7fe f905 	bl	8008828 <xQueueGenericCreateStatic>
 800a61e:	4603      	mov	r3, r0
 800a620:	4a08      	ldr	r2, [pc, #32]	@ (800a644 <prvCheckForValidListAndQueue+0x60>)
 800a622:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a624:	4b07      	ldr	r3, [pc, #28]	@ (800a644 <prvCheckForValidListAndQueue+0x60>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d005      	beq.n	800a638 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a62c:	4b05      	ldr	r3, [pc, #20]	@ (800a644 <prvCheckForValidListAndQueue+0x60>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	490b      	ldr	r1, [pc, #44]	@ (800a660 <prvCheckForValidListAndQueue+0x7c>)
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fd2a 	bl	800908c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a638:	f000 f978 	bl	800a92c <vPortExitCritical>
}
 800a63c:	bf00      	nop
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20005f78 	.word	0x20005f78
 800a648:	20005f48 	.word	0x20005f48
 800a64c:	20005f5c 	.word	0x20005f5c
 800a650:	20005f70 	.word	0x20005f70
 800a654:	20005f74 	.word	0x20005f74
 800a658:	20006024 	.word	0x20006024
 800a65c:	20005f84 	.word	0x20005f84
 800a660:	0801b380 	.word	0x0801b380

0800a664 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	3b04      	subs	r3, #4
 800a674:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a67c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	3b04      	subs	r3, #4
 800a682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f023 0201 	bic.w	r2, r3, #1
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3b04      	subs	r3, #4
 800a692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a694:	4a0c      	ldr	r2, [pc, #48]	@ (800a6c8 <pxPortInitialiseStack+0x64>)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3b14      	subs	r3, #20
 800a69e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3b04      	subs	r3, #4
 800a6aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f06f 0202 	mvn.w	r2, #2
 800a6b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	3b20      	subs	r3, #32
 800a6b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	0800a6cd 	.word	0x0800a6cd

0800a6cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6d6:	4b13      	ldr	r3, [pc, #76]	@ (800a724 <prvTaskExitError+0x58>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6de:	d00b      	beq.n	800a6f8 <prvTaskExitError+0x2c>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	60fb      	str	r3, [r7, #12]
}
 800a6f2:	bf00      	nop
 800a6f4:	bf00      	nop
 800a6f6:	e7fd      	b.n	800a6f4 <prvTaskExitError+0x28>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	60bb      	str	r3, [r7, #8]
}
 800a70a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a70c:	bf00      	nop
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0fc      	beq.n	800a70e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	200000a0 	.word	0x200000a0
	...

0800a730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a730:	4b07      	ldr	r3, [pc, #28]	@ (800a750 <pxCurrentTCBConst2>)
 800a732:	6819      	ldr	r1, [r3, #0]
 800a734:	6808      	ldr	r0, [r1, #0]
 800a736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73a:	f380 8809 	msr	PSP, r0
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f04f 0000 	mov.w	r0, #0
 800a746:	f380 8811 	msr	BASEPRI, r0
 800a74a:	4770      	bx	lr
 800a74c:	f3af 8000 	nop.w

0800a750 <pxCurrentTCBConst2>:
 800a750:	20005a48 	.word	0x20005a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop

0800a758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a758:	4808      	ldr	r0, [pc, #32]	@ (800a77c <prvPortStartFirstTask+0x24>)
 800a75a:	6800      	ldr	r0, [r0, #0]
 800a75c:	6800      	ldr	r0, [r0, #0]
 800a75e:	f380 8808 	msr	MSP, r0
 800a762:	f04f 0000 	mov.w	r0, #0
 800a766:	f380 8814 	msr	CONTROL, r0
 800a76a:	b662      	cpsie	i
 800a76c:	b661      	cpsie	f
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	df00      	svc	0
 800a778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a77a:	bf00      	nop
 800a77c:	e000ed08 	.word	0xe000ed08

0800a780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a786:	4b47      	ldr	r3, [pc, #284]	@ (800a8a4 <xPortStartScheduler+0x124>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a47      	ldr	r2, [pc, #284]	@ (800a8a8 <xPortStartScheduler+0x128>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d10b      	bne.n	800a7a8 <xPortStartScheduler+0x28>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	613b      	str	r3, [r7, #16]
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	e7fd      	b.n	800a7a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7a8:	4b3e      	ldr	r3, [pc, #248]	@ (800a8a4 <xPortStartScheduler+0x124>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a3f      	ldr	r2, [pc, #252]	@ (800a8ac <xPortStartScheduler+0x12c>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d10b      	bne.n	800a7ca <xPortStartScheduler+0x4a>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	60fb      	str	r3, [r7, #12]
}
 800a7c4:	bf00      	nop
 800a7c6:	bf00      	nop
 800a7c8:	e7fd      	b.n	800a7c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7ca:	4b39      	ldr	r3, [pc, #228]	@ (800a8b0 <xPortStartScheduler+0x130>)
 800a7cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	22ff      	movs	r2, #255	@ 0xff
 800a7da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	4b31      	ldr	r3, [pc, #196]	@ (800a8b4 <xPortStartScheduler+0x134>)
 800a7f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7f2:	4b31      	ldr	r3, [pc, #196]	@ (800a8b8 <xPortStartScheduler+0x138>)
 800a7f4:	2207      	movs	r2, #7
 800a7f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7f8:	e009      	b.n	800a80e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a7fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a8b8 <xPortStartScheduler+0x138>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	4a2d      	ldr	r2, [pc, #180]	@ (800a8b8 <xPortStartScheduler+0x138>)
 800a802:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	b2db      	uxtb	r3, r3
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	b2db      	uxtb	r3, r3
 800a812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a816:	2b80      	cmp	r3, #128	@ 0x80
 800a818:	d0ef      	beq.n	800a7fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a81a:	4b27      	ldr	r3, [pc, #156]	@ (800a8b8 <xPortStartScheduler+0x138>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f1c3 0307 	rsb	r3, r3, #7
 800a822:	2b04      	cmp	r3, #4
 800a824:	d00b      	beq.n	800a83e <xPortStartScheduler+0xbe>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	60bb      	str	r3, [r7, #8]
}
 800a838:	bf00      	nop
 800a83a:	bf00      	nop
 800a83c:	e7fd      	b.n	800a83a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a83e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8b8 <xPortStartScheduler+0x138>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	021b      	lsls	r3, r3, #8
 800a844:	4a1c      	ldr	r2, [pc, #112]	@ (800a8b8 <xPortStartScheduler+0x138>)
 800a846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a848:	4b1b      	ldr	r3, [pc, #108]	@ (800a8b8 <xPortStartScheduler+0x138>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a850:	4a19      	ldr	r2, [pc, #100]	@ (800a8b8 <xPortStartScheduler+0x138>)
 800a852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	b2da      	uxtb	r2, r3
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a85c:	4b17      	ldr	r3, [pc, #92]	@ (800a8bc <xPortStartScheduler+0x13c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a16      	ldr	r2, [pc, #88]	@ (800a8bc <xPortStartScheduler+0x13c>)
 800a862:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a868:	4b14      	ldr	r3, [pc, #80]	@ (800a8bc <xPortStartScheduler+0x13c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a13      	ldr	r2, [pc, #76]	@ (800a8bc <xPortStartScheduler+0x13c>)
 800a86e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a874:	f000 f8da 	bl	800aa2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a878:	4b11      	ldr	r3, [pc, #68]	@ (800a8c0 <xPortStartScheduler+0x140>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a87e:	f000 f8f9 	bl	800aa74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a882:	4b10      	ldr	r3, [pc, #64]	@ (800a8c4 <xPortStartScheduler+0x144>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a0f      	ldr	r2, [pc, #60]	@ (800a8c4 <xPortStartScheduler+0x144>)
 800a888:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a88c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a88e:	f7ff ff63 	bl	800a758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a892:	f7ff f813 	bl	80098bc <vTaskSwitchContext>
	prvTaskExitError();
 800a896:	f7ff ff19 	bl	800a6cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3718      	adds	r7, #24
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	e000ed00 	.word	0xe000ed00
 800a8a8:	410fc271 	.word	0x410fc271
 800a8ac:	410fc270 	.word	0x410fc270
 800a8b0:	e000e400 	.word	0xe000e400
 800a8b4:	20006074 	.word	0x20006074
 800a8b8:	20006078 	.word	0x20006078
 800a8bc:	e000ed20 	.word	0xe000ed20
 800a8c0:	200000a0 	.word	0x200000a0
 800a8c4:	e000ef34 	.word	0xe000ef34

0800a8c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	607b      	str	r3, [r7, #4]
}
 800a8e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8e2:	4b10      	ldr	r3, [pc, #64]	@ (800a924 <vPortEnterCritical+0x5c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a924 <vPortEnterCritical+0x5c>)
 800a8ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a924 <vPortEnterCritical+0x5c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d110      	bne.n	800a916 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a928 <vPortEnterCritical+0x60>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00b      	beq.n	800a916 <vPortEnterCritical+0x4e>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	603b      	str	r3, [r7, #0]
}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	e7fd      	b.n	800a912 <vPortEnterCritical+0x4a>
	}
}
 800a916:	bf00      	nop
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	200000a0 	.word	0x200000a0
 800a928:	e000ed04 	.word	0xe000ed04

0800a92c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a932:	4b12      	ldr	r3, [pc, #72]	@ (800a97c <vPortExitCritical+0x50>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10b      	bne.n	800a952 <vPortExitCritical+0x26>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	607b      	str	r3, [r7, #4]
}
 800a94c:	bf00      	nop
 800a94e:	bf00      	nop
 800a950:	e7fd      	b.n	800a94e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a952:	4b0a      	ldr	r3, [pc, #40]	@ (800a97c <vPortExitCritical+0x50>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	3b01      	subs	r3, #1
 800a958:	4a08      	ldr	r2, [pc, #32]	@ (800a97c <vPortExitCritical+0x50>)
 800a95a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a95c:	4b07      	ldr	r3, [pc, #28]	@ (800a97c <vPortExitCritical+0x50>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d105      	bne.n	800a970 <vPortExitCritical+0x44>
 800a964:	2300      	movs	r3, #0
 800a966:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	f383 8811 	msr	BASEPRI, r3
}
 800a96e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	200000a0 	.word	0x200000a0

0800a980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a980:	f3ef 8009 	mrs	r0, PSP
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	4b15      	ldr	r3, [pc, #84]	@ (800a9e0 <pxCurrentTCBConst>)
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	f01e 0f10 	tst.w	lr, #16
 800a990:	bf08      	it	eq
 800a992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99a:	6010      	str	r0, [r2, #0]
 800a99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a9a4:	f380 8811 	msr	BASEPRI, r0
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f7fe ff84 	bl	80098bc <vTaskSwitchContext>
 800a9b4:	f04f 0000 	mov.w	r0, #0
 800a9b8:	f380 8811 	msr	BASEPRI, r0
 800a9bc:	bc09      	pop	{r0, r3}
 800a9be:	6819      	ldr	r1, [r3, #0]
 800a9c0:	6808      	ldr	r0, [r1, #0]
 800a9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c6:	f01e 0f10 	tst.w	lr, #16
 800a9ca:	bf08      	it	eq
 800a9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9d0:	f380 8809 	msr	PSP, r0
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	f3af 8000 	nop.w

0800a9e0 <pxCurrentTCBConst>:
 800a9e0:	20005a48 	.word	0x20005a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9e4:	bf00      	nop
 800a9e6:	bf00      	nop

0800a9e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	607b      	str	r3, [r7, #4]
}
 800aa00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa02:	f7fe fea1 	bl	8009748 <xTaskIncrementTick>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d003      	beq.n	800aa14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa0c:	4b06      	ldr	r3, [pc, #24]	@ (800aa28 <xPortSysTickHandler+0x40>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	2300      	movs	r3, #0
 800aa16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	f383 8811 	msr	BASEPRI, r3
}
 800aa1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa20:	bf00      	nop
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa30:	4b0b      	ldr	r3, [pc, #44]	@ (800aa60 <vPortSetupTimerInterrupt+0x34>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa36:	4b0b      	ldr	r3, [pc, #44]	@ (800aa64 <vPortSetupTimerInterrupt+0x38>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa68 <vPortSetupTimerInterrupt+0x3c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a0a      	ldr	r2, [pc, #40]	@ (800aa6c <vPortSetupTimerInterrupt+0x40>)
 800aa42:	fba2 2303 	umull	r2, r3, r2, r3
 800aa46:	099b      	lsrs	r3, r3, #6
 800aa48:	4a09      	ldr	r2, [pc, #36]	@ (800aa70 <vPortSetupTimerInterrupt+0x44>)
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa4e:	4b04      	ldr	r3, [pc, #16]	@ (800aa60 <vPortSetupTimerInterrupt+0x34>)
 800aa50:	2207      	movs	r2, #7
 800aa52:	601a      	str	r2, [r3, #0]
}
 800aa54:	bf00      	nop
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	e000e010 	.word	0xe000e010
 800aa64:	e000e018 	.word	0xe000e018
 800aa68:	20000004 	.word	0x20000004
 800aa6c:	10624dd3 	.word	0x10624dd3
 800aa70:	e000e014 	.word	0xe000e014

0800aa74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aa84 <vPortEnableVFP+0x10>
 800aa78:	6801      	ldr	r1, [r0, #0]
 800aa7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aa7e:	6001      	str	r1, [r0, #0]
 800aa80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa82:	bf00      	nop
 800aa84:	e000ed88 	.word	0xe000ed88

0800aa88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa8e:	f3ef 8305 	mrs	r3, IPSR
 800aa92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b0f      	cmp	r3, #15
 800aa98:	d915      	bls.n	800aac6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa9a:	4a18      	ldr	r2, [pc, #96]	@ (800aafc <vPortValidateInterruptPriority+0x74>)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aaa4:	4b16      	ldr	r3, [pc, #88]	@ (800ab00 <vPortValidateInterruptPriority+0x78>)
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	7afa      	ldrb	r2, [r7, #11]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d20b      	bcs.n	800aac6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	607b      	str	r3, [r7, #4]
}
 800aac0:	bf00      	nop
 800aac2:	bf00      	nop
 800aac4:	e7fd      	b.n	800aac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aac6:	4b0f      	ldr	r3, [pc, #60]	@ (800ab04 <vPortValidateInterruptPriority+0x7c>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aace:	4b0e      	ldr	r3, [pc, #56]	@ (800ab08 <vPortValidateInterruptPriority+0x80>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d90b      	bls.n	800aaee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	603b      	str	r3, [r7, #0]
}
 800aae8:	bf00      	nop
 800aaea:	bf00      	nop
 800aaec:	e7fd      	b.n	800aaea <vPortValidateInterruptPriority+0x62>
	}
 800aaee:	bf00      	nop
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	e000e3f0 	.word	0xe000e3f0
 800ab00:	20006074 	.word	0x20006074
 800ab04:	e000ed0c 	.word	0xe000ed0c
 800ab08:	20006078 	.word	0x20006078

0800ab0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08a      	sub	sp, #40	@ 0x28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab14:	2300      	movs	r3, #0
 800ab16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab18:	f7fe fd5a 	bl	80095d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab1c:	4b5c      	ldr	r3, [pc, #368]	@ (800ac90 <pvPortMalloc+0x184>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d101      	bne.n	800ab28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab24:	f000 f924 	bl	800ad70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab28:	4b5a      	ldr	r3, [pc, #360]	@ (800ac94 <pvPortMalloc+0x188>)
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4013      	ands	r3, r2
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f040 8095 	bne.w	800ac60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d01e      	beq.n	800ab7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ab3c:	2208      	movs	r2, #8
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4413      	add	r3, r2
 800ab42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f003 0307 	and.w	r3, r3, #7
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d015      	beq.n	800ab7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f023 0307 	bic.w	r3, r3, #7
 800ab54:	3308      	adds	r3, #8
 800ab56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f003 0307 	and.w	r3, r3, #7
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00b      	beq.n	800ab7a <pvPortMalloc+0x6e>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	617b      	str	r3, [r7, #20]
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop
 800ab78:	e7fd      	b.n	800ab76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d06f      	beq.n	800ac60 <pvPortMalloc+0x154>
 800ab80:	4b45      	ldr	r3, [pc, #276]	@ (800ac98 <pvPortMalloc+0x18c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d86a      	bhi.n	800ac60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab8a:	4b44      	ldr	r3, [pc, #272]	@ (800ac9c <pvPortMalloc+0x190>)
 800ab8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab8e:	4b43      	ldr	r3, [pc, #268]	@ (800ac9c <pvPortMalloc+0x190>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab94:	e004      	b.n	800aba0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ab96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d903      	bls.n	800abb2 <pvPortMalloc+0xa6>
 800abaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f1      	bne.n	800ab96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abb2:	4b37      	ldr	r3, [pc, #220]	@ (800ac90 <pvPortMalloc+0x184>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abb8:	429a      	cmp	r2, r3
 800abba:	d051      	beq.n	800ac60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abbc:	6a3b      	ldr	r3, [r7, #32]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2208      	movs	r2, #8
 800abc2:	4413      	add	r3, r2
 800abc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	1ad2      	subs	r2, r2, r3
 800abd6:	2308      	movs	r3, #8
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	429a      	cmp	r2, r3
 800abdc:	d920      	bls.n	800ac20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4413      	add	r3, r2
 800abe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	f003 0307 	and.w	r3, r3, #7
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00b      	beq.n	800ac08 <pvPortMalloc+0xfc>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	613b      	str	r3, [r7, #16]
}
 800ac02:	bf00      	nop
 800ac04:	bf00      	nop
 800ac06:	e7fd      	b.n	800ac04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	1ad2      	subs	r2, r2, r3
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac1a:	69b8      	ldr	r0, [r7, #24]
 800ac1c:	f000 f90a 	bl	800ae34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac20:	4b1d      	ldr	r3, [pc, #116]	@ (800ac98 <pvPortMalloc+0x18c>)
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	4a1b      	ldr	r2, [pc, #108]	@ (800ac98 <pvPortMalloc+0x18c>)
 800ac2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ac98 <pvPortMalloc+0x18c>)
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	4b1b      	ldr	r3, [pc, #108]	@ (800aca0 <pvPortMalloc+0x194>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d203      	bcs.n	800ac42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac3a:	4b17      	ldr	r3, [pc, #92]	@ (800ac98 <pvPortMalloc+0x18c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a18      	ldr	r2, [pc, #96]	@ (800aca0 <pvPortMalloc+0x194>)
 800ac40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	4b13      	ldr	r3, [pc, #76]	@ (800ac94 <pvPortMalloc+0x188>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	431a      	orrs	r2, r3
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac52:	2200      	movs	r2, #0
 800ac54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac56:	4b13      	ldr	r3, [pc, #76]	@ (800aca4 <pvPortMalloc+0x198>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	4a11      	ldr	r2, [pc, #68]	@ (800aca4 <pvPortMalloc+0x198>)
 800ac5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac60:	f7fe fcc4 	bl	80095ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	f003 0307 	and.w	r3, r3, #7
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00b      	beq.n	800ac86 <pvPortMalloc+0x17a>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	60fb      	str	r3, [r7, #12]
}
 800ac80:	bf00      	nop
 800ac82:	bf00      	nop
 800ac84:	e7fd      	b.n	800ac82 <pvPortMalloc+0x176>
	return pvReturn;
 800ac86:	69fb      	ldr	r3, [r7, #28]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3728      	adds	r7, #40	@ 0x28
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20006c84 	.word	0x20006c84
 800ac94:	20006c98 	.word	0x20006c98
 800ac98:	20006c88 	.word	0x20006c88
 800ac9c:	20006c7c 	.word	0x20006c7c
 800aca0:	20006c8c 	.word	0x20006c8c
 800aca4:	20006c90 	.word	0x20006c90

0800aca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d04f      	beq.n	800ad5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acba:	2308      	movs	r3, #8
 800acbc:	425b      	negs	r3, r3
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	4413      	add	r3, r2
 800acc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	4b25      	ldr	r3, [pc, #148]	@ (800ad64 <vPortFree+0xbc>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4013      	ands	r3, r2
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10b      	bne.n	800acee <vPortFree+0x46>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	60fb      	str	r3, [r7, #12]
}
 800ace8:	bf00      	nop
 800acea:	bf00      	nop
 800acec:	e7fd      	b.n	800acea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00b      	beq.n	800ad0e <vPortFree+0x66>
	__asm volatile
 800acf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	60bb      	str	r3, [r7, #8]
}
 800ad08:	bf00      	nop
 800ad0a:	bf00      	nop
 800ad0c:	e7fd      	b.n	800ad0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	4b14      	ldr	r3, [pc, #80]	@ (800ad64 <vPortFree+0xbc>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4013      	ands	r3, r2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d01e      	beq.n	800ad5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d11a      	bne.n	800ad5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	4b0e      	ldr	r3, [pc, #56]	@ (800ad64 <vPortFree+0xbc>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	43db      	mvns	r3, r3
 800ad2e:	401a      	ands	r2, r3
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad34:	f7fe fc4c 	bl	80095d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	685a      	ldr	r2, [r3, #4]
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad68 <vPortFree+0xc0>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4413      	add	r3, r2
 800ad42:	4a09      	ldr	r2, [pc, #36]	@ (800ad68 <vPortFree+0xc0>)
 800ad44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad46:	6938      	ldr	r0, [r7, #16]
 800ad48:	f000 f874 	bl	800ae34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad4c:	4b07      	ldr	r3, [pc, #28]	@ (800ad6c <vPortFree+0xc4>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	3301      	adds	r3, #1
 800ad52:	4a06      	ldr	r2, [pc, #24]	@ (800ad6c <vPortFree+0xc4>)
 800ad54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad56:	f7fe fc49 	bl	80095ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad5a:	bf00      	nop
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20006c98 	.word	0x20006c98
 800ad68:	20006c88 	.word	0x20006c88
 800ad6c:	20006c94 	.word	0x20006c94

0800ad70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad76:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ad7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad7c:	4b27      	ldr	r3, [pc, #156]	@ (800ae1c <prvHeapInit+0xac>)
 800ad7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f003 0307 	and.w	r3, r3, #7
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00c      	beq.n	800ada4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3307      	adds	r3, #7
 800ad8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f023 0307 	bic.w	r3, r3, #7
 800ad96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	4a1f      	ldr	r2, [pc, #124]	@ (800ae1c <prvHeapInit+0xac>)
 800ada0:	4413      	add	r3, r2
 800ada2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ada8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae20 <prvHeapInit+0xb0>)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800adae:	4b1c      	ldr	r3, [pc, #112]	@ (800ae20 <prvHeapInit+0xb0>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	4413      	add	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adbc:	2208      	movs	r2, #8
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	1a9b      	subs	r3, r3, r2
 800adc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f023 0307 	bic.w	r3, r3, #7
 800adca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4a15      	ldr	r2, [pc, #84]	@ (800ae24 <prvHeapInit+0xb4>)
 800add0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800add2:	4b14      	ldr	r3, [pc, #80]	@ (800ae24 <prvHeapInit+0xb4>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2200      	movs	r2, #0
 800add8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adda:	4b12      	ldr	r3, [pc, #72]	@ (800ae24 <prvHeapInit+0xb4>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2200      	movs	r2, #0
 800ade0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	1ad2      	subs	r2, r2, r3
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800adf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ae24 <prvHeapInit+0xb4>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	4a0a      	ldr	r2, [pc, #40]	@ (800ae28 <prvHeapInit+0xb8>)
 800adfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	4a09      	ldr	r2, [pc, #36]	@ (800ae2c <prvHeapInit+0xbc>)
 800ae06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae08:	4b09      	ldr	r3, [pc, #36]	@ (800ae30 <prvHeapInit+0xc0>)
 800ae0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ae0e:	601a      	str	r2, [r3, #0]
}
 800ae10:	bf00      	nop
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	2000607c 	.word	0x2000607c
 800ae20:	20006c7c 	.word	0x20006c7c
 800ae24:	20006c84 	.word	0x20006c84
 800ae28:	20006c8c 	.word	0x20006c8c
 800ae2c:	20006c88 	.word	0x20006c88
 800ae30:	20006c98 	.word	0x20006c98

0800ae34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae3c:	4b28      	ldr	r3, [pc, #160]	@ (800aee0 <prvInsertBlockIntoFreeList+0xac>)
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	e002      	b.n	800ae48 <prvInsertBlockIntoFreeList+0x14>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d8f7      	bhi.n	800ae42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d108      	bne.n	800ae76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	441a      	add	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	441a      	add	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d118      	bne.n	800aebc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	4b15      	ldr	r3, [pc, #84]	@ (800aee4 <prvInsertBlockIntoFreeList+0xb0>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d00d      	beq.n	800aeb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	685a      	ldr	r2, [r3, #4]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	441a      	add	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	601a      	str	r2, [r3, #0]
 800aeb0:	e008      	b.n	800aec4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aeb2:	4b0c      	ldr	r3, [pc, #48]	@ (800aee4 <prvInsertBlockIntoFreeList+0xb0>)
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	e003      	b.n	800aec4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d002      	beq.n	800aed2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aed2:	bf00      	nop
 800aed4:	3714      	adds	r7, #20
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	20006c7c 	.word	0x20006c7c
 800aee4:	20006c84 	.word	0x20006c84

0800aee8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aee8:	4b04      	ldr	r3, [pc, #16]	@ (800aefc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	b10a      	cbz	r2, 800aef2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800aeee:	4803      	ldr	r0, [pc, #12]	@ (800aefc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aef0:	4770      	bx	lr
 800aef2:	4a03      	ldr	r2, [pc, #12]	@ (800af00 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800aef4:	4801      	ldr	r0, [pc, #4]	@ (800aefc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aef6:	6812      	ldr	r2, [r2, #0]
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	4770      	bx	lr
 800aefc:	200000ac 	.word	0x200000ac
 800af00:	200003b4 	.word	0x200003b4

0800af04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800af04:	4a02      	ldr	r2, [pc, #8]	@ (800af10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800af06:	4b03      	ldr	r3, [pc, #12]	@ (800af14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800af08:	6812      	ldr	r2, [r2, #0]
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	200003b4 	.word	0x200003b4
 800af14:	200000ac 	.word	0x200000ac

0800af18 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800af18:	f004 bf8c 	b.w	800fe34 <geometry_msgs__msg__Twist__init>

0800af1c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800af1c:	f004 bfae 	b.w	800fe7c <geometry_msgs__msg__Twist__fini>

0800af20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800af20:	b510      	push	{r4, lr}
 800af22:	f000 f819 	bl	800af58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800af26:	4c07      	ldr	r4, [pc, #28]	@ (800af44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800af28:	60e0      	str	r0, [r4, #12]
 800af2a:	f000 f815 	bl	800af58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800af2e:	4b06      	ldr	r3, [pc, #24]	@ (800af48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800af30:	64a0      	str	r0, [r4, #72]	@ 0x48
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	b10a      	cbz	r2, 800af3a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800af36:	4804      	ldr	r0, [pc, #16]	@ (800af48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800af38:	bd10      	pop	{r4, pc}
 800af3a:	4a04      	ldr	r2, [pc, #16]	@ (800af4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800af3c:	4802      	ldr	r0, [pc, #8]	@ (800af48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800af3e:	6812      	ldr	r2, [r2, #0]
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	bd10      	pop	{r4, pc}
 800af44:	200000b8 	.word	0x200000b8
 800af48:	20000130 	.word	0x20000130
 800af4c:	200003b8 	.word	0x200003b8

0800af50 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800af50:	f004 bfa0 	b.w	800fe94 <geometry_msgs__msg__Vector3__init>

0800af54 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800af54:	f004 bfa2 	b.w	800fe9c <geometry_msgs__msg__Vector3__fini>

0800af58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800af58:	4b04      	ldr	r3, [pc, #16]	@ (800af6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	b10a      	cbz	r2, 800af62 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800af5e:	4803      	ldr	r0, [pc, #12]	@ (800af6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800af60:	4770      	bx	lr
 800af62:	4a03      	ldr	r2, [pc, #12]	@ (800af70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800af64:	4801      	ldr	r0, [pc, #4]	@ (800af6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800af66:	6812      	ldr	r2, [r2, #0]
 800af68:	601a      	str	r2, [r3, #0]
 800af6a:	4770      	bx	lr
 800af6c:	200001f0 	.word	0x200001f0
 800af70:	200003b8 	.word	0x200003b8

0800af74 <get_serialized_size_geometry_msgs__msg__Twist>:
 800af74:	b570      	push	{r4, r5, r6, lr}
 800af76:	4604      	mov	r4, r0
 800af78:	b148      	cbz	r0, 800af8e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800af7a:	460d      	mov	r5, r1
 800af7c:	f000 f860 	bl	800b040 <get_serialized_size_geometry_msgs__msg__Vector3>
 800af80:	4606      	mov	r6, r0
 800af82:	1829      	adds	r1, r5, r0
 800af84:	f104 0018 	add.w	r0, r4, #24
 800af88:	f000 f85a 	bl	800b040 <get_serialized_size_geometry_msgs__msg__Vector3>
 800af8c:	4430      	add	r0, r6
 800af8e:	bd70      	pop	{r4, r5, r6, pc}

0800af90 <_Twist__cdr_deserialize>:
 800af90:	b570      	push	{r4, r5, r6, lr}
 800af92:	460c      	mov	r4, r1
 800af94:	b189      	cbz	r1, 800afba <_Twist__cdr_deserialize+0x2a>
 800af96:	4605      	mov	r5, r0
 800af98:	f000 f8de 	bl	800b158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800af9c:	6843      	ldr	r3, [r0, #4]
 800af9e:	4621      	mov	r1, r4
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	4628      	mov	r0, r5
 800afa4:	4798      	blx	r3
 800afa6:	f000 f8d7 	bl	800b158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800afaa:	6843      	ldr	r3, [r0, #4]
 800afac:	f104 0118 	add.w	r1, r4, #24
 800afb0:	4628      	mov	r0, r5
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800afb8:	4718      	bx	r3
 800afba:	4608      	mov	r0, r1
 800afbc:	bd70      	pop	{r4, r5, r6, pc}
 800afbe:	bf00      	nop

0800afc0 <_Twist__cdr_serialize>:
 800afc0:	b510      	push	{r4, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	9101      	str	r1, [sp, #4]
 800afc6:	b190      	cbz	r0, 800afee <_Twist__cdr_serialize+0x2e>
 800afc8:	4604      	mov	r4, r0
 800afca:	f000 f8c5 	bl	800b158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800afce:	6843      	ldr	r3, [r0, #4]
 800afd0:	9901      	ldr	r1, [sp, #4]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	4620      	mov	r0, r4
 800afd6:	4798      	blx	r3
 800afd8:	f000 f8be 	bl	800b158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800afdc:	6843      	ldr	r3, [r0, #4]
 800afde:	9901      	ldr	r1, [sp, #4]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	f104 0018 	add.w	r0, r4, #24
 800afe6:	b002      	add	sp, #8
 800afe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afec:	4718      	bx	r3
 800afee:	b002      	add	sp, #8
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	bf00      	nop

0800aff4 <_Twist__get_serialized_size>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	4604      	mov	r4, r0
 800aff8:	b148      	cbz	r0, 800b00e <_Twist__get_serialized_size+0x1a>
 800affa:	2100      	movs	r1, #0
 800affc:	f000 f820 	bl	800b040 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b000:	4605      	mov	r5, r0
 800b002:	4601      	mov	r1, r0
 800b004:	f104 0018 	add.w	r0, r4, #24
 800b008:	f000 f81a 	bl	800b040 <get_serialized_size_geometry_msgs__msg__Vector3>
 800b00c:	4428      	add	r0, r5
 800b00e:	bd38      	pop	{r3, r4, r5, pc}

0800b010 <_Twist__max_serialized_size>:
 800b010:	b510      	push	{r4, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	2301      	movs	r3, #1
 800b016:	2100      	movs	r1, #0
 800b018:	f10d 0007 	add.w	r0, sp, #7
 800b01c:	f88d 3007 	strb.w	r3, [sp, #7]
 800b020:	f000 f87e 	bl	800b120 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b024:	4604      	mov	r4, r0
 800b026:	4601      	mov	r1, r0
 800b028:	f10d 0007 	add.w	r0, sp, #7
 800b02c:	f000 f878 	bl	800b120 <max_serialized_size_geometry_msgs__msg__Vector3>
 800b030:	4420      	add	r0, r4
 800b032:	b002      	add	sp, #8
 800b034:	bd10      	pop	{r4, pc}
 800b036:	bf00      	nop

0800b038 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800b038:	4800      	ldr	r0, [pc, #0]	@ (800b03c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800b03a:	4770      	bx	lr
 800b03c:	200001fc 	.word	0x200001fc

0800b040 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800b040:	b1b8      	cbz	r0, 800b072 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800b042:	b538      	push	{r3, r4, r5, lr}
 800b044:	460d      	mov	r5, r1
 800b046:	4628      	mov	r0, r5
 800b048:	2108      	movs	r1, #8
 800b04a:	f001 fcb1 	bl	800c9b0 <ucdr_alignment>
 800b04e:	f105 0308 	add.w	r3, r5, #8
 800b052:	181c      	adds	r4, r3, r0
 800b054:	2108      	movs	r1, #8
 800b056:	4620      	mov	r0, r4
 800b058:	f001 fcaa 	bl	800c9b0 <ucdr_alignment>
 800b05c:	3008      	adds	r0, #8
 800b05e:	4404      	add	r4, r0
 800b060:	2108      	movs	r1, #8
 800b062:	4620      	mov	r0, r4
 800b064:	f001 fca4 	bl	800c9b0 <ucdr_alignment>
 800b068:	f1c5 0508 	rsb	r5, r5, #8
 800b06c:	4428      	add	r0, r5
 800b06e:	4420      	add	r0, r4
 800b070:	bd38      	pop	{r3, r4, r5, pc}
 800b072:	4770      	bx	lr

0800b074 <_Vector3__cdr_deserialize>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	460c      	mov	r4, r1
 800b078:	b171      	cbz	r1, 800b098 <_Vector3__cdr_deserialize+0x24>
 800b07a:	4605      	mov	r5, r0
 800b07c:	f001 faac 	bl	800c5d8 <ucdr_deserialize_double>
 800b080:	f104 0108 	add.w	r1, r4, #8
 800b084:	4628      	mov	r0, r5
 800b086:	f001 faa7 	bl	800c5d8 <ucdr_deserialize_double>
 800b08a:	f104 0110 	add.w	r1, r4, #16
 800b08e:	4628      	mov	r0, r5
 800b090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b094:	f001 baa0 	b.w	800c5d8 <ucdr_deserialize_double>
 800b098:	4608      	mov	r0, r1
 800b09a:	bd38      	pop	{r3, r4, r5, pc}

0800b09c <_Vector3__cdr_serialize>:
 800b09c:	b198      	cbz	r0, 800b0c6 <_Vector3__cdr_serialize+0x2a>
 800b09e:	b538      	push	{r3, r4, r5, lr}
 800b0a0:	ed90 0b00 	vldr	d0, [r0]
 800b0a4:	460d      	mov	r5, r1
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	f001 f8f3 	bl	800c294 <ucdr_serialize_double>
 800b0ae:	ed94 0b02 	vldr	d0, [r4, #8]
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f001 f8ee 	bl	800c294 <ucdr_serialize_double>
 800b0b8:	ed94 0b04 	vldr	d0, [r4, #16]
 800b0bc:	4628      	mov	r0, r5
 800b0be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0c2:	f001 b8e7 	b.w	800c294 <ucdr_serialize_double>
 800b0c6:	4770      	bx	lr

0800b0c8 <_Vector3__get_serialized_size>:
 800b0c8:	b198      	cbz	r0, 800b0f2 <_Vector3__get_serialized_size+0x2a>
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	2108      	movs	r1, #8
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	f001 fc6e 	bl	800c9b0 <ucdr_alignment>
 800b0d4:	f100 0408 	add.w	r4, r0, #8
 800b0d8:	2108      	movs	r1, #8
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f001 fc68 	bl	800c9b0 <ucdr_alignment>
 800b0e0:	3008      	adds	r0, #8
 800b0e2:	4404      	add	r4, r0
 800b0e4:	2108      	movs	r1, #8
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f001 fc62 	bl	800c9b0 <ucdr_alignment>
 800b0ec:	3008      	adds	r0, #8
 800b0ee:	4420      	add	r0, r4
 800b0f0:	bd10      	pop	{r4, pc}
 800b0f2:	4770      	bx	lr

0800b0f4 <_Vector3__max_serialized_size>:
 800b0f4:	b538      	push	{r3, r4, r5, lr}
 800b0f6:	2108      	movs	r1, #8
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	f001 fc59 	bl	800c9b0 <ucdr_alignment>
 800b0fe:	f100 0508 	add.w	r5, r0, #8
 800b102:	2108      	movs	r1, #8
 800b104:	4628      	mov	r0, r5
 800b106:	f001 fc53 	bl	800c9b0 <ucdr_alignment>
 800b10a:	f100 0408 	add.w	r4, r0, #8
 800b10e:	442c      	add	r4, r5
 800b110:	2108      	movs	r1, #8
 800b112:	4620      	mov	r0, r4
 800b114:	f001 fc4c 	bl	800c9b0 <ucdr_alignment>
 800b118:	3008      	adds	r0, #8
 800b11a:	4420      	add	r0, r4
 800b11c:	bd38      	pop	{r3, r4, r5, pc}
 800b11e:	bf00      	nop

0800b120 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800b120:	b570      	push	{r4, r5, r6, lr}
 800b122:	2301      	movs	r3, #1
 800b124:	460c      	mov	r4, r1
 800b126:	7003      	strb	r3, [r0, #0]
 800b128:	2108      	movs	r1, #8
 800b12a:	4620      	mov	r0, r4
 800b12c:	f001 fc40 	bl	800c9b0 <ucdr_alignment>
 800b130:	f104 0508 	add.w	r5, r4, #8
 800b134:	1946      	adds	r6, r0, r5
 800b136:	2108      	movs	r1, #8
 800b138:	4630      	mov	r0, r6
 800b13a:	f001 fc39 	bl	800c9b0 <ucdr_alignment>
 800b13e:	f100 0508 	add.w	r5, r0, #8
 800b142:	4435      	add	r5, r6
 800b144:	2108      	movs	r1, #8
 800b146:	4628      	mov	r0, r5
 800b148:	f001 fc32 	bl	800c9b0 <ucdr_alignment>
 800b14c:	f1c4 0408 	rsb	r4, r4, #8
 800b150:	4420      	add	r0, r4
 800b152:	4428      	add	r0, r5
 800b154:	bd70      	pop	{r4, r5, r6, pc}
 800b156:	bf00      	nop

0800b158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800b158:	4800      	ldr	r0, [pc, #0]	@ (800b15c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800b15a:	4770      	bx	lr
 800b15c:	20000224 	.word	0x20000224

0800b160 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800b160:	4b04      	ldr	r3, [pc, #16]	@ (800b174 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	b10a      	cbz	r2, 800b16a <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800b166:	4803      	ldr	r0, [pc, #12]	@ (800b174 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800b168:	4770      	bx	lr
 800b16a:	4a03      	ldr	r2, [pc, #12]	@ (800b178 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800b16c:	4801      	ldr	r0, [pc, #4]	@ (800b174 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800b16e:	6812      	ldr	r2, [r2, #0]
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	4770      	bx	lr
 800b174:	20000254 	.word	0x20000254
 800b178:	200003b4 	.word	0x200003b4

0800b17c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800b17c:	4b04      	ldr	r3, [pc, #16]	@ (800b190 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800b17e:	4805      	ldr	r0, [pc, #20]	@ (800b194 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800b180:	4905      	ldr	r1, [pc, #20]	@ (800b198 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800b182:	4a06      	ldr	r2, [pc, #24]	@ (800b19c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	6003      	str	r3, [r0, #0]
 800b188:	600b      	str	r3, [r1, #0]
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop
 800b190:	200003b4 	.word	0x200003b4
 800b194:	20000270 	.word	0x20000270
 800b198:	2000027c 	.word	0x2000027c
 800b19c:	20000254 	.word	0x20000254

0800b1a0 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800b1a0:	f004 bf48 	b.w	8010034 <imu_interfaces__srv__ImuCalibration_Request__init>

0800b1a4 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800b1a4:	f004 bf58 	b.w	8010058 <imu_interfaces__srv__ImuCalibration_Request__fini>

0800b1a8 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800b1a8:	f004 bf5a 	b.w	8010060 <imu_interfaces__srv__ImuCalibration_Response__init>

0800b1ac <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800b1ac:	f004 bf5c 	b.w	8010068 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800b1b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800b1b0:	b508      	push	{r3, lr}
 800b1b2:	f004 fae1 	bl	800f778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800b1b6:	4b06      	ldr	r3, [pc, #24]	@ (800b1d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800b1b8:	4906      	ldr	r1, [pc, #24]	@ (800b1d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	60c8      	str	r0, [r1, #12]
 800b1be:	b10a      	cbz	r2, 800b1c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800b1c0:	4803      	ldr	r0, [pc, #12]	@ (800b1d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800b1c2:	bd08      	pop	{r3, pc}
 800b1c4:	4a04      	ldr	r2, [pc, #16]	@ (800b1d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800b1c6:	4802      	ldr	r0, [pc, #8]	@ (800b1d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800b1c8:	6812      	ldr	r2, [r2, #0]
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	bd08      	pop	{r3, pc}
 800b1ce:	bf00      	nop
 800b1d0:	200002c4 	.word	0x200002c4
 800b1d4:	20000288 	.word	0x20000288
 800b1d8:	200003b8 	.word	0x200003b8

0800b1dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800b1dc:	4b04      	ldr	r3, [pc, #16]	@ (800b1f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	b10a      	cbz	r2, 800b1e6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800b1e2:	4803      	ldr	r0, [pc, #12]	@ (800b1f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800b1e4:	4770      	bx	lr
 800b1e6:	4a03      	ldr	r2, [pc, #12]	@ (800b1f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800b1e8:	4801      	ldr	r0, [pc, #4]	@ (800b1f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800b1ea:	6812      	ldr	r2, [r2, #0]
 800b1ec:	601a      	str	r2, [r3, #0]
 800b1ee:	4770      	bx	lr
 800b1f0:	2000030c 	.word	0x2000030c
 800b1f4:	200003b8 	.word	0x200003b8

0800b1f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800b1f8:	4b16      	ldr	r3, [pc, #88]	@ (800b254 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	b132      	cbz	r2, 800b20e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800b200:	685c      	ldr	r4, [r3, #4]
 800b202:	68a3      	ldr	r3, [r4, #8]
 800b204:	b153      	cbz	r3, 800b21c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800b206:	68e3      	ldr	r3, [r4, #12]
 800b208:	b1a3      	cbz	r3, 800b234 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800b20a:	4812      	ldr	r0, [pc, #72]	@ (800b254 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800b20c:	bd10      	pop	{r4, pc}
 800b20e:	4a12      	ldr	r2, [pc, #72]	@ (800b258 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800b210:	685c      	ldr	r4, [r3, #4]
 800b212:	6812      	ldr	r2, [r2, #0]
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	68a3      	ldr	r3, [r4, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1f4      	bne.n	800b206 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800b21c:	f004 faac 	bl	800f778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800b220:	4b0e      	ldr	r3, [pc, #56]	@ (800b25c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800b222:	490f      	ldr	r1, [pc, #60]	@ (800b260 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	60c8      	str	r0, [r1, #12]
 800b228:	b17a      	cbz	r2, 800b24a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	60a3      	str	r3, [r4, #8]
 800b22e:	68e3      	ldr	r3, [r4, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1ea      	bne.n	800b20a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800b234:	4b0b      	ldr	r3, [pc, #44]	@ (800b264 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	b11a      	cbz	r2, 800b242 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	4805      	ldr	r0, [pc, #20]	@ (800b254 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800b23e:	60e3      	str	r3, [r4, #12]
 800b240:	bd10      	pop	{r4, pc}
 800b242:	4a05      	ldr	r2, [pc, #20]	@ (800b258 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800b244:	6812      	ldr	r2, [r2, #0]
 800b246:	601a      	str	r2, [r3, #0]
 800b248:	e7f7      	b.n	800b23a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800b24a:	4a03      	ldr	r2, [pc, #12]	@ (800b258 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800b24c:	6812      	ldr	r2, [r2, #0]
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	e7eb      	b.n	800b22a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800b252:	bf00      	nop
 800b254:	20000328 	.word	0x20000328
 800b258:	200003b8 	.word	0x200003b8
 800b25c:	200002c4 	.word	0x200002c4
 800b260:	20000288 	.word	0x20000288
 800b264:	2000030c 	.word	0x2000030c

0800b268 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800b268:	4800      	ldr	r0, [pc, #0]	@ (800b26c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800b26a:	4770      	bx	lr
 800b26c:	20000350 	.word	0x20000350

0800b270 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800b270:	4800      	ldr	r0, [pc, #0]	@ (800b274 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800b272:	4770      	bx	lr
 800b274:	2000035c 	.word	0x2000035c

0800b278 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800b278:	b108      	cbz	r0, 800b27e <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800b27a:	f004 bacf 	b.w	800f81c <get_serialized_size_sensor_msgs__msg__Imu>
 800b27e:	4770      	bx	lr

0800b280 <_ImuCalibration_Request__max_serialized_size>:
 800b280:	b500      	push	{lr}
 800b282:	b083      	sub	sp, #12
 800b284:	2301      	movs	r3, #1
 800b286:	2100      	movs	r1, #0
 800b288:	f10d 0007 	add.w	r0, sp, #7
 800b28c:	f88d 3007 	strb.w	r3, [sp, #7]
 800b290:	f004 fb42 	bl	800f918 <max_serialized_size_sensor_msgs__msg__Imu>
 800b294:	b003      	add	sp, #12
 800b296:	f85d fb04 	ldr.w	pc, [sp], #4
 800b29a:	bf00      	nop

0800b29c <_ImuCalibration_Response__max_serialized_size>:
 800b29c:	b508      	push	{r3, lr}
 800b29e:	2101      	movs	r1, #1
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	f001 fb85 	bl	800c9b0 <ucdr_alignment>
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	bd08      	pop	{r3, pc}
 800b2aa:	bf00      	nop

0800b2ac <_ImuCalibration_Response__cdr_deserialize>:
 800b2ac:	b109      	cbz	r1, 800b2b2 <_ImuCalibration_Response__cdr_deserialize+0x6>
 800b2ae:	f000 b881 	b.w	800b3b4 <ucdr_deserialize_bool>
 800b2b2:	4608      	mov	r0, r1
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop

0800b2b8 <_ImuCalibration_Request__get_serialized_size>:
 800b2b8:	b110      	cbz	r0, 800b2c0 <_ImuCalibration_Request__get_serialized_size+0x8>
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	f004 baae 	b.w	800f81c <get_serialized_size_sensor_msgs__msg__Imu>
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop

0800b2c4 <_ImuCalibration_Request__cdr_deserialize>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	460c      	mov	r4, r1
 800b2c8:	b149      	cbz	r1, 800b2de <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	f004 fb5e 	bl	800f98c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800b2d0:	6843      	ldr	r3, [r0, #4]
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2dc:	4718      	bx	r3
 800b2de:	4608      	mov	r0, r1
 800b2e0:	bd70      	pop	{r4, r5, r6, pc}
 800b2e2:	bf00      	nop

0800b2e4 <_ImuCalibration_Request__cdr_serialize>:
 800b2e4:	b158      	cbz	r0, 800b2fe <_ImuCalibration_Request__cdr_serialize+0x1a>
 800b2e6:	b570      	push	{r4, r5, r6, lr}
 800b2e8:	460d      	mov	r5, r1
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	f004 fb4e 	bl	800f98c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800b2f0:	6843      	ldr	r3, [r0, #4]
 800b2f2:	4629      	mov	r1, r5
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2fc:	4718      	bx	r3
 800b2fe:	4770      	bx	lr

0800b300 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800b300:	b138      	cbz	r0, 800b312 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800b302:	b508      	push	{r3, lr}
 800b304:	460b      	mov	r3, r1
 800b306:	4618      	mov	r0, r3
 800b308:	2101      	movs	r1, #1
 800b30a:	f001 fb51 	bl	800c9b0 <ucdr_alignment>
 800b30e:	3001      	adds	r0, #1
 800b310:	bd08      	pop	{r3, pc}
 800b312:	4770      	bx	lr

0800b314 <_ImuCalibration_Response__cdr_serialize>:
 800b314:	460a      	mov	r2, r1
 800b316:	b118      	cbz	r0, 800b320 <_ImuCalibration_Response__cdr_serialize+0xc>
 800b318:	7801      	ldrb	r1, [r0, #0]
 800b31a:	4610      	mov	r0, r2
 800b31c:	f000 b834 	b.w	800b388 <ucdr_serialize_bool>
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop

0800b324 <_ImuCalibration_Response__get_serialized_size>:
 800b324:	b130      	cbz	r0, 800b334 <_ImuCalibration_Response__get_serialized_size+0x10>
 800b326:	b508      	push	{r3, lr}
 800b328:	2101      	movs	r1, #1
 800b32a:	2000      	movs	r0, #0
 800b32c:	f001 fb40 	bl	800c9b0 <ucdr_alignment>
 800b330:	3001      	adds	r0, #1
 800b332:	bd08      	pop	{r3, pc}
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop

0800b338 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800b338:	4800      	ldr	r0, [pc, #0]	@ (800b33c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800b33a:	4770      	bx	lr
 800b33c:	20000344 	.word	0x20000344

0800b340 <micro_ros_string_utilities_init>:
 800b340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b344:	b086      	sub	sp, #24
 800b346:	460f      	mov	r7, r1
 800b348:	4604      	mov	r4, r0
 800b34a:	a801      	add	r0, sp, #4
 800b34c:	f002 fd74 	bl	800de38 <rcutils_get_default_allocator>
 800b350:	4638      	mov	r0, r7
 800b352:	f7f4 ff6f 	bl	8000234 <strlen>
 800b356:	f100 0801 	add.w	r8, r0, #1
 800b35a:	9b01      	ldr	r3, [sp, #4]
 800b35c:	9905      	ldr	r1, [sp, #20]
 800b35e:	4605      	mov	r5, r0
 800b360:	4640      	mov	r0, r8
 800b362:	4798      	blx	r3
 800b364:	4642      	mov	r2, r8
 800b366:	4606      	mov	r6, r0
 800b368:	2100      	movs	r1, #0
 800b36a:	f00e fcf3 	bl	8019d54 <memset>
 800b36e:	462a      	mov	r2, r5
 800b370:	4639      	mov	r1, r7
 800b372:	4630      	mov	r0, r6
 800b374:	f00e fdb7 	bl	8019ee6 <memcpy>
 800b378:	4620      	mov	r0, r4
 800b37a:	e9c4 6500 	strd	r6, r5, [r4]
 800b37e:	f8c4 8008 	str.w	r8, [r4, #8]
 800b382:	b006      	add	sp, #24
 800b384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b388 <ucdr_serialize_bool>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	460d      	mov	r5, r1
 800b38c:	2101      	movs	r1, #1
 800b38e:	4604      	mov	r4, r0
 800b390:	f001 fac2 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b394:	b148      	cbz	r0, 800b3aa <ucdr_serialize_bool+0x22>
 800b396:	68a3      	ldr	r3, [r4, #8]
 800b398:	701d      	strb	r5, [r3, #0]
 800b39a:	68a2      	ldr	r2, [r4, #8]
 800b39c:	6923      	ldr	r3, [r4, #16]
 800b39e:	2101      	movs	r1, #1
 800b3a0:	440a      	add	r2, r1
 800b3a2:	440b      	add	r3, r1
 800b3a4:	60a2      	str	r2, [r4, #8]
 800b3a6:	6123      	str	r3, [r4, #16]
 800b3a8:	7561      	strb	r1, [r4, #21]
 800b3aa:	7da0      	ldrb	r0, [r4, #22]
 800b3ac:	f080 0001 	eor.w	r0, r0, #1
 800b3b0:	bd38      	pop	{r3, r4, r5, pc}
 800b3b2:	bf00      	nop

0800b3b4 <ucdr_deserialize_bool>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	460d      	mov	r5, r1
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	f001 faac 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b3c0:	b160      	cbz	r0, 800b3dc <ucdr_deserialize_bool+0x28>
 800b3c2:	68a2      	ldr	r2, [r4, #8]
 800b3c4:	6923      	ldr	r3, [r4, #16]
 800b3c6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b3ca:	3900      	subs	r1, #0
 800b3cc:	bf18      	it	ne
 800b3ce:	2101      	movne	r1, #1
 800b3d0:	7029      	strb	r1, [r5, #0]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	2101      	movs	r1, #1
 800b3d6:	60a2      	str	r2, [r4, #8]
 800b3d8:	6123      	str	r3, [r4, #16]
 800b3da:	7561      	strb	r1, [r4, #21]
 800b3dc:	7da0      	ldrb	r0, [r4, #22]
 800b3de:	f080 0001 	eor.w	r0, r0, #1
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}

0800b3e4 <ucdr_serialize_uint8_t>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	460d      	mov	r5, r1
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	f001 fa94 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b3f0:	b148      	cbz	r0, 800b406 <ucdr_serialize_uint8_t+0x22>
 800b3f2:	68a3      	ldr	r3, [r4, #8]
 800b3f4:	701d      	strb	r5, [r3, #0]
 800b3f6:	68a2      	ldr	r2, [r4, #8]
 800b3f8:	6923      	ldr	r3, [r4, #16]
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	440a      	add	r2, r1
 800b3fe:	440b      	add	r3, r1
 800b400:	60a2      	str	r2, [r4, #8]
 800b402:	6123      	str	r3, [r4, #16]
 800b404:	7561      	strb	r1, [r4, #21]
 800b406:	7da0      	ldrb	r0, [r4, #22]
 800b408:	f080 0001 	eor.w	r0, r0, #1
 800b40c:	bd38      	pop	{r3, r4, r5, pc}
 800b40e:	bf00      	nop

0800b410 <ucdr_deserialize_uint8_t>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	460d      	mov	r5, r1
 800b414:	2101      	movs	r1, #1
 800b416:	4604      	mov	r4, r0
 800b418:	f001 fa7e 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b41c:	b150      	cbz	r0, 800b434 <ucdr_deserialize_uint8_t+0x24>
 800b41e:	68a3      	ldr	r3, [r4, #8]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	702b      	strb	r3, [r5, #0]
 800b424:	68a2      	ldr	r2, [r4, #8]
 800b426:	6923      	ldr	r3, [r4, #16]
 800b428:	2101      	movs	r1, #1
 800b42a:	440a      	add	r2, r1
 800b42c:	440b      	add	r3, r1
 800b42e:	60a2      	str	r2, [r4, #8]
 800b430:	6123      	str	r3, [r4, #16]
 800b432:	7561      	strb	r1, [r4, #21]
 800b434:	7da0      	ldrb	r0, [r4, #22]
 800b436:	f080 0001 	eor.w	r0, r0, #1
 800b43a:	bd38      	pop	{r3, r4, r5, pc}

0800b43c <ucdr_serialize_uint16_t>:
 800b43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b440:	b082      	sub	sp, #8
 800b442:	460b      	mov	r3, r1
 800b444:	2102      	movs	r1, #2
 800b446:	4604      	mov	r4, r0
 800b448:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b44c:	f001 fab8 	bl	800c9c0 <ucdr_buffer_alignment>
 800b450:	4601      	mov	r1, r0
 800b452:	4620      	mov	r0, r4
 800b454:	7d67      	ldrb	r7, [r4, #21]
 800b456:	f001 faf7 	bl	800ca48 <ucdr_advance_buffer>
 800b45a:	2102      	movs	r1, #2
 800b45c:	4620      	mov	r0, r4
 800b45e:	f001 fa4f 	bl	800c900 <ucdr_check_buffer_available_for>
 800b462:	bb78      	cbnz	r0, 800b4c4 <ucdr_serialize_uint16_t+0x88>
 800b464:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b468:	42ab      	cmp	r3, r5
 800b46a:	d926      	bls.n	800b4ba <ucdr_serialize_uint16_t+0x7e>
 800b46c:	1b5e      	subs	r6, r3, r5
 800b46e:	60a3      	str	r3, [r4, #8]
 800b470:	6923      	ldr	r3, [r4, #16]
 800b472:	f1c6 0802 	rsb	r8, r6, #2
 800b476:	4433      	add	r3, r6
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	4641      	mov	r1, r8
 800b47c:	4620      	mov	r0, r4
 800b47e:	f001 fa4b 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b482:	2800      	cmp	r0, #0
 800b484:	d03b      	beq.n	800b4fe <ucdr_serialize_uint16_t+0xc2>
 800b486:	7d23      	ldrb	r3, [r4, #20]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d04a      	beq.n	800b522 <ucdr_serialize_uint16_t+0xe6>
 800b48c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b490:	702b      	strb	r3, [r5, #0]
 800b492:	2e00      	cmp	r6, #0
 800b494:	d040      	beq.n	800b518 <ucdr_serialize_uint16_t+0xdc>
 800b496:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b49a:	706b      	strb	r3, [r5, #1]
 800b49c:	6923      	ldr	r3, [r4, #16]
 800b49e:	68a2      	ldr	r2, [r4, #8]
 800b4a0:	7da0      	ldrb	r0, [r4, #22]
 800b4a2:	3302      	adds	r3, #2
 800b4a4:	1b9e      	subs	r6, r3, r6
 800b4a6:	4442      	add	r2, r8
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	f080 0001 	eor.w	r0, r0, #1
 800b4ae:	60a2      	str	r2, [r4, #8]
 800b4b0:	6126      	str	r6, [r4, #16]
 800b4b2:	7563      	strb	r3, [r4, #21]
 800b4b4:	b002      	add	sp, #8
 800b4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ba:	2102      	movs	r1, #2
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f001 fa2b 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b4c2:	b190      	cbz	r0, 800b4ea <ucdr_serialize_uint16_t+0xae>
 800b4c4:	7d23      	ldrb	r3, [r4, #20]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	68a3      	ldr	r3, [r4, #8]
 800b4ca:	d014      	beq.n	800b4f6 <ucdr_serialize_uint16_t+0xba>
 800b4cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b4d0:	701a      	strb	r2, [r3, #0]
 800b4d2:	68a3      	ldr	r3, [r4, #8]
 800b4d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4d8:	705a      	strb	r2, [r3, #1]
 800b4da:	68a2      	ldr	r2, [r4, #8]
 800b4dc:	6923      	ldr	r3, [r4, #16]
 800b4de:	3202      	adds	r2, #2
 800b4e0:	3302      	adds	r3, #2
 800b4e2:	2102      	movs	r1, #2
 800b4e4:	60a2      	str	r2, [r4, #8]
 800b4e6:	6123      	str	r3, [r4, #16]
 800b4e8:	7561      	strb	r1, [r4, #21]
 800b4ea:	7da0      	ldrb	r0, [r4, #22]
 800b4ec:	f080 0001 	eor.w	r0, r0, #1
 800b4f0:	b002      	add	sp, #8
 800b4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b4fa:	801a      	strh	r2, [r3, #0]
 800b4fc:	e7ed      	b.n	800b4da <ucdr_serialize_uint16_t+0x9e>
 800b4fe:	68a2      	ldr	r2, [r4, #8]
 800b500:	6923      	ldr	r3, [r4, #16]
 800b502:	7da0      	ldrb	r0, [r4, #22]
 800b504:	7567      	strb	r7, [r4, #21]
 800b506:	1b92      	subs	r2, r2, r6
 800b508:	1b9b      	subs	r3, r3, r6
 800b50a:	f080 0001 	eor.w	r0, r0, #1
 800b50e:	60a2      	str	r2, [r4, #8]
 800b510:	6123      	str	r3, [r4, #16]
 800b512:	b002      	add	sp, #8
 800b514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b518:	68a3      	ldr	r3, [r4, #8]
 800b51a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b51e:	701a      	strb	r2, [r3, #0]
 800b520:	e7bc      	b.n	800b49c <ucdr_serialize_uint16_t+0x60>
 800b522:	4628      	mov	r0, r5
 800b524:	f10d 0506 	add.w	r5, sp, #6
 800b528:	4629      	mov	r1, r5
 800b52a:	4632      	mov	r2, r6
 800b52c:	f00e fcdb 	bl	8019ee6 <memcpy>
 800b530:	68a0      	ldr	r0, [r4, #8]
 800b532:	4642      	mov	r2, r8
 800b534:	19a9      	adds	r1, r5, r6
 800b536:	f00e fcd6 	bl	8019ee6 <memcpy>
 800b53a:	e7af      	b.n	800b49c <ucdr_serialize_uint16_t+0x60>

0800b53c <ucdr_serialize_endian_uint16_t>:
 800b53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b540:	b083      	sub	sp, #12
 800b542:	460d      	mov	r5, r1
 800b544:	2102      	movs	r1, #2
 800b546:	4604      	mov	r4, r0
 800b548:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b54c:	f001 fa38 	bl	800c9c0 <ucdr_buffer_alignment>
 800b550:	4601      	mov	r1, r0
 800b552:	4620      	mov	r0, r4
 800b554:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b558:	f001 fa76 	bl	800ca48 <ucdr_advance_buffer>
 800b55c:	2102      	movs	r1, #2
 800b55e:	4620      	mov	r0, r4
 800b560:	f001 f9ce 	bl	800c900 <ucdr_check_buffer_available_for>
 800b564:	bb70      	cbnz	r0, 800b5c4 <ucdr_serialize_endian_uint16_t+0x88>
 800b566:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b56a:	42be      	cmp	r6, r7
 800b56c:	d925      	bls.n	800b5ba <ucdr_serialize_endian_uint16_t+0x7e>
 800b56e:	6923      	ldr	r3, [r4, #16]
 800b570:	60a6      	str	r6, [r4, #8]
 800b572:	1bf6      	subs	r6, r6, r7
 800b574:	4433      	add	r3, r6
 800b576:	f1c6 0902 	rsb	r9, r6, #2
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	4649      	mov	r1, r9
 800b57e:	4620      	mov	r0, r4
 800b580:	f001 f9ca 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b584:	2800      	cmp	r0, #0
 800b586:	d039      	beq.n	800b5fc <ucdr_serialize_endian_uint16_t+0xc0>
 800b588:	2d01      	cmp	r5, #1
 800b58a:	d04a      	beq.n	800b622 <ucdr_serialize_endian_uint16_t+0xe6>
 800b58c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b590:	703b      	strb	r3, [r7, #0]
 800b592:	2e00      	cmp	r6, #0
 800b594:	d040      	beq.n	800b618 <ucdr_serialize_endian_uint16_t+0xdc>
 800b596:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b59a:	707b      	strb	r3, [r7, #1]
 800b59c:	6923      	ldr	r3, [r4, #16]
 800b59e:	68a2      	ldr	r2, [r4, #8]
 800b5a0:	7da0      	ldrb	r0, [r4, #22]
 800b5a2:	3302      	adds	r3, #2
 800b5a4:	444a      	add	r2, r9
 800b5a6:	1b9b      	subs	r3, r3, r6
 800b5a8:	2102      	movs	r1, #2
 800b5aa:	f080 0001 	eor.w	r0, r0, #1
 800b5ae:	60a2      	str	r2, [r4, #8]
 800b5b0:	6123      	str	r3, [r4, #16]
 800b5b2:	7561      	strb	r1, [r4, #21]
 800b5b4:	b003      	add	sp, #12
 800b5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5ba:	2102      	movs	r1, #2
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f001 f9ab 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b5c2:	b188      	cbz	r0, 800b5e8 <ucdr_serialize_endian_uint16_t+0xac>
 800b5c4:	2d01      	cmp	r5, #1
 800b5c6:	68a3      	ldr	r3, [r4, #8]
 800b5c8:	d014      	beq.n	800b5f4 <ucdr_serialize_endian_uint16_t+0xb8>
 800b5ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5ce:	701a      	strb	r2, [r3, #0]
 800b5d0:	68a3      	ldr	r3, [r4, #8]
 800b5d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5d6:	705a      	strb	r2, [r3, #1]
 800b5d8:	68a2      	ldr	r2, [r4, #8]
 800b5da:	6923      	ldr	r3, [r4, #16]
 800b5dc:	3202      	adds	r2, #2
 800b5de:	3302      	adds	r3, #2
 800b5e0:	2102      	movs	r1, #2
 800b5e2:	60a2      	str	r2, [r4, #8]
 800b5e4:	6123      	str	r3, [r4, #16]
 800b5e6:	7561      	strb	r1, [r4, #21]
 800b5e8:	7da0      	ldrb	r0, [r4, #22]
 800b5ea:	f080 0001 	eor.w	r0, r0, #1
 800b5ee:	b003      	add	sp, #12
 800b5f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b5f8:	801a      	strh	r2, [r3, #0]
 800b5fa:	e7ed      	b.n	800b5d8 <ucdr_serialize_endian_uint16_t+0x9c>
 800b5fc:	68a2      	ldr	r2, [r4, #8]
 800b5fe:	6923      	ldr	r3, [r4, #16]
 800b600:	7da0      	ldrb	r0, [r4, #22]
 800b602:	f884 8015 	strb.w	r8, [r4, #21]
 800b606:	1b92      	subs	r2, r2, r6
 800b608:	1b9b      	subs	r3, r3, r6
 800b60a:	f080 0001 	eor.w	r0, r0, #1
 800b60e:	60a2      	str	r2, [r4, #8]
 800b610:	6123      	str	r3, [r4, #16]
 800b612:	b003      	add	sp, #12
 800b614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b618:	68a3      	ldr	r3, [r4, #8]
 800b61a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b61e:	701a      	strb	r2, [r3, #0]
 800b620:	e7bc      	b.n	800b59c <ucdr_serialize_endian_uint16_t+0x60>
 800b622:	f10d 0506 	add.w	r5, sp, #6
 800b626:	4629      	mov	r1, r5
 800b628:	4632      	mov	r2, r6
 800b62a:	4638      	mov	r0, r7
 800b62c:	f00e fc5b 	bl	8019ee6 <memcpy>
 800b630:	68a0      	ldr	r0, [r4, #8]
 800b632:	464a      	mov	r2, r9
 800b634:	19a9      	adds	r1, r5, r6
 800b636:	f00e fc56 	bl	8019ee6 <memcpy>
 800b63a:	e7af      	b.n	800b59c <ucdr_serialize_endian_uint16_t+0x60>

0800b63c <ucdr_deserialize_uint16_t>:
 800b63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b640:	460d      	mov	r5, r1
 800b642:	2102      	movs	r1, #2
 800b644:	4604      	mov	r4, r0
 800b646:	f001 f9bb 	bl	800c9c0 <ucdr_buffer_alignment>
 800b64a:	4601      	mov	r1, r0
 800b64c:	4620      	mov	r0, r4
 800b64e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b652:	f001 f9f9 	bl	800ca48 <ucdr_advance_buffer>
 800b656:	2102      	movs	r1, #2
 800b658:	4620      	mov	r0, r4
 800b65a:	f001 f951 	bl	800c900 <ucdr_check_buffer_available_for>
 800b65e:	bb60      	cbnz	r0, 800b6ba <ucdr_deserialize_uint16_t+0x7e>
 800b660:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b664:	42be      	cmp	r6, r7
 800b666:	d923      	bls.n	800b6b0 <ucdr_deserialize_uint16_t+0x74>
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	60a6      	str	r6, [r4, #8]
 800b66c:	1bf6      	subs	r6, r6, r7
 800b66e:	4433      	add	r3, r6
 800b670:	f1c6 0902 	rsb	r9, r6, #2
 800b674:	6123      	str	r3, [r4, #16]
 800b676:	4649      	mov	r1, r9
 800b678:	4620      	mov	r0, r4
 800b67a:	f001 f94d 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b67e:	2800      	cmp	r0, #0
 800b680:	d034      	beq.n	800b6ec <ucdr_deserialize_uint16_t+0xb0>
 800b682:	7d23      	ldrb	r3, [r4, #20]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d042      	beq.n	800b70e <ucdr_deserialize_uint16_t+0xd2>
 800b688:	787b      	ldrb	r3, [r7, #1]
 800b68a:	702b      	strb	r3, [r5, #0]
 800b68c:	2e00      	cmp	r6, #0
 800b68e:	d03a      	beq.n	800b706 <ucdr_deserialize_uint16_t+0xca>
 800b690:	783b      	ldrb	r3, [r7, #0]
 800b692:	706b      	strb	r3, [r5, #1]
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	68a2      	ldr	r2, [r4, #8]
 800b698:	7da0      	ldrb	r0, [r4, #22]
 800b69a:	2102      	movs	r1, #2
 800b69c:	3302      	adds	r3, #2
 800b69e:	444a      	add	r2, r9
 800b6a0:	1b9b      	subs	r3, r3, r6
 800b6a2:	7561      	strb	r1, [r4, #21]
 800b6a4:	60a2      	str	r2, [r4, #8]
 800b6a6:	6123      	str	r3, [r4, #16]
 800b6a8:	f080 0001 	eor.w	r0, r0, #1
 800b6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b0:	2102      	movs	r1, #2
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f001 f930 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b6b8:	b180      	cbz	r0, 800b6dc <ucdr_deserialize_uint16_t+0xa0>
 800b6ba:	7d23      	ldrb	r3, [r4, #20]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	68a3      	ldr	r3, [r4, #8]
 800b6c0:	d011      	beq.n	800b6e6 <ucdr_deserialize_uint16_t+0xaa>
 800b6c2:	785b      	ldrb	r3, [r3, #1]
 800b6c4:	702b      	strb	r3, [r5, #0]
 800b6c6:	68a3      	ldr	r3, [r4, #8]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	706b      	strb	r3, [r5, #1]
 800b6cc:	68a2      	ldr	r2, [r4, #8]
 800b6ce:	6923      	ldr	r3, [r4, #16]
 800b6d0:	3202      	adds	r2, #2
 800b6d2:	3302      	adds	r3, #2
 800b6d4:	2102      	movs	r1, #2
 800b6d6:	60a2      	str	r2, [r4, #8]
 800b6d8:	6123      	str	r3, [r4, #16]
 800b6da:	7561      	strb	r1, [r4, #21]
 800b6dc:	7da0      	ldrb	r0, [r4, #22]
 800b6de:	f080 0001 	eor.w	r0, r0, #1
 800b6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6e6:	881b      	ldrh	r3, [r3, #0]
 800b6e8:	802b      	strh	r3, [r5, #0]
 800b6ea:	e7ef      	b.n	800b6cc <ucdr_deserialize_uint16_t+0x90>
 800b6ec:	68a2      	ldr	r2, [r4, #8]
 800b6ee:	6923      	ldr	r3, [r4, #16]
 800b6f0:	7da0      	ldrb	r0, [r4, #22]
 800b6f2:	f884 8015 	strb.w	r8, [r4, #21]
 800b6f6:	1b92      	subs	r2, r2, r6
 800b6f8:	1b9b      	subs	r3, r3, r6
 800b6fa:	60a2      	str	r2, [r4, #8]
 800b6fc:	6123      	str	r3, [r4, #16]
 800b6fe:	f080 0001 	eor.w	r0, r0, #1
 800b702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b706:	68a3      	ldr	r3, [r4, #8]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	706b      	strb	r3, [r5, #1]
 800b70c:	e7c2      	b.n	800b694 <ucdr_deserialize_uint16_t+0x58>
 800b70e:	4639      	mov	r1, r7
 800b710:	4632      	mov	r2, r6
 800b712:	4628      	mov	r0, r5
 800b714:	f00e fbe7 	bl	8019ee6 <memcpy>
 800b718:	68a1      	ldr	r1, [r4, #8]
 800b71a:	464a      	mov	r2, r9
 800b71c:	19a8      	adds	r0, r5, r6
 800b71e:	f00e fbe2 	bl	8019ee6 <memcpy>
 800b722:	e7b7      	b.n	800b694 <ucdr_deserialize_uint16_t+0x58>

0800b724 <ucdr_deserialize_endian_uint16_t>:
 800b724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b728:	460e      	mov	r6, r1
 800b72a:	2102      	movs	r1, #2
 800b72c:	4604      	mov	r4, r0
 800b72e:	4615      	mov	r5, r2
 800b730:	f001 f946 	bl	800c9c0 <ucdr_buffer_alignment>
 800b734:	4601      	mov	r1, r0
 800b736:	4620      	mov	r0, r4
 800b738:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b73c:	f001 f984 	bl	800ca48 <ucdr_advance_buffer>
 800b740:	2102      	movs	r1, #2
 800b742:	4620      	mov	r0, r4
 800b744:	f001 f8dc 	bl	800c900 <ucdr_check_buffer_available_for>
 800b748:	bb70      	cbnz	r0, 800b7a8 <ucdr_deserialize_endian_uint16_t+0x84>
 800b74a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b74e:	4547      	cmp	r7, r8
 800b750:	d925      	bls.n	800b79e <ucdr_deserialize_endian_uint16_t+0x7a>
 800b752:	6923      	ldr	r3, [r4, #16]
 800b754:	60a7      	str	r7, [r4, #8]
 800b756:	eba7 0708 	sub.w	r7, r7, r8
 800b75a:	443b      	add	r3, r7
 800b75c:	f1c7 0a02 	rsb	sl, r7, #2
 800b760:	6123      	str	r3, [r4, #16]
 800b762:	4651      	mov	r1, sl
 800b764:	4620      	mov	r0, r4
 800b766:	f001 f8d7 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d034      	beq.n	800b7d8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b76e:	2e01      	cmp	r6, #1
 800b770:	d043      	beq.n	800b7fa <ucdr_deserialize_endian_uint16_t+0xd6>
 800b772:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b776:	702b      	strb	r3, [r5, #0]
 800b778:	2f00      	cmp	r7, #0
 800b77a:	d03a      	beq.n	800b7f2 <ucdr_deserialize_endian_uint16_t+0xce>
 800b77c:	f898 3000 	ldrb.w	r3, [r8]
 800b780:	706b      	strb	r3, [r5, #1]
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	68a2      	ldr	r2, [r4, #8]
 800b786:	7da0      	ldrb	r0, [r4, #22]
 800b788:	2102      	movs	r1, #2
 800b78a:	3302      	adds	r3, #2
 800b78c:	4452      	add	r2, sl
 800b78e:	1bdb      	subs	r3, r3, r7
 800b790:	7561      	strb	r1, [r4, #21]
 800b792:	60a2      	str	r2, [r4, #8]
 800b794:	6123      	str	r3, [r4, #16]
 800b796:	f080 0001 	eor.w	r0, r0, #1
 800b79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b79e:	2102      	movs	r1, #2
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f001 f8b9 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b7a6:	b178      	cbz	r0, 800b7c8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b7a8:	2e01      	cmp	r6, #1
 800b7aa:	68a3      	ldr	r3, [r4, #8]
 800b7ac:	d011      	beq.n	800b7d2 <ucdr_deserialize_endian_uint16_t+0xae>
 800b7ae:	785b      	ldrb	r3, [r3, #1]
 800b7b0:	702b      	strb	r3, [r5, #0]
 800b7b2:	68a3      	ldr	r3, [r4, #8]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	706b      	strb	r3, [r5, #1]
 800b7b8:	68a2      	ldr	r2, [r4, #8]
 800b7ba:	6923      	ldr	r3, [r4, #16]
 800b7bc:	3202      	adds	r2, #2
 800b7be:	3302      	adds	r3, #2
 800b7c0:	2102      	movs	r1, #2
 800b7c2:	60a2      	str	r2, [r4, #8]
 800b7c4:	6123      	str	r3, [r4, #16]
 800b7c6:	7561      	strb	r1, [r4, #21]
 800b7c8:	7da0      	ldrb	r0, [r4, #22]
 800b7ca:	f080 0001 	eor.w	r0, r0, #1
 800b7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	802b      	strh	r3, [r5, #0]
 800b7d6:	e7ef      	b.n	800b7b8 <ucdr_deserialize_endian_uint16_t+0x94>
 800b7d8:	68a2      	ldr	r2, [r4, #8]
 800b7da:	6923      	ldr	r3, [r4, #16]
 800b7dc:	7da0      	ldrb	r0, [r4, #22]
 800b7de:	f884 9015 	strb.w	r9, [r4, #21]
 800b7e2:	1bd2      	subs	r2, r2, r7
 800b7e4:	1bdb      	subs	r3, r3, r7
 800b7e6:	60a2      	str	r2, [r4, #8]
 800b7e8:	6123      	str	r3, [r4, #16]
 800b7ea:	f080 0001 	eor.w	r0, r0, #1
 800b7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f2:	68a3      	ldr	r3, [r4, #8]
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	706b      	strb	r3, [r5, #1]
 800b7f8:	e7c3      	b.n	800b782 <ucdr_deserialize_endian_uint16_t+0x5e>
 800b7fa:	4641      	mov	r1, r8
 800b7fc:	463a      	mov	r2, r7
 800b7fe:	4628      	mov	r0, r5
 800b800:	f00e fb71 	bl	8019ee6 <memcpy>
 800b804:	68a1      	ldr	r1, [r4, #8]
 800b806:	4652      	mov	r2, sl
 800b808:	19e8      	adds	r0, r5, r7
 800b80a:	f00e fb6c 	bl	8019ee6 <memcpy>
 800b80e:	e7b8      	b.n	800b782 <ucdr_deserialize_endian_uint16_t+0x5e>

0800b810 <ucdr_serialize_uint32_t>:
 800b810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b814:	b082      	sub	sp, #8
 800b816:	4604      	mov	r4, r0
 800b818:	9101      	str	r1, [sp, #4]
 800b81a:	2104      	movs	r1, #4
 800b81c:	f001 f8d0 	bl	800c9c0 <ucdr_buffer_alignment>
 800b820:	4601      	mov	r1, r0
 800b822:	4620      	mov	r0, r4
 800b824:	7d67      	ldrb	r7, [r4, #21]
 800b826:	f001 f90f 	bl	800ca48 <ucdr_advance_buffer>
 800b82a:	2104      	movs	r1, #4
 800b82c:	4620      	mov	r0, r4
 800b82e:	f001 f867 	bl	800c900 <ucdr_check_buffer_available_for>
 800b832:	2800      	cmp	r0, #0
 800b834:	d139      	bne.n	800b8aa <ucdr_serialize_uint32_t+0x9a>
 800b836:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b83a:	42ab      	cmp	r3, r5
 800b83c:	d930      	bls.n	800b8a0 <ucdr_serialize_uint32_t+0x90>
 800b83e:	1b5e      	subs	r6, r3, r5
 800b840:	60a3      	str	r3, [r4, #8]
 800b842:	6923      	ldr	r3, [r4, #16]
 800b844:	f1c6 0804 	rsb	r8, r6, #4
 800b848:	4433      	add	r3, r6
 800b84a:	6123      	str	r3, [r4, #16]
 800b84c:	4641      	mov	r1, r8
 800b84e:	4620      	mov	r0, r4
 800b850:	f001 f862 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b854:	2800      	cmp	r0, #0
 800b856:	d04c      	beq.n	800b8f2 <ucdr_serialize_uint32_t+0xe2>
 800b858:	7d23      	ldrb	r3, [r4, #20]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d063      	beq.n	800b926 <ucdr_serialize_uint32_t+0x116>
 800b85e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b862:	702b      	strb	r3, [r5, #0]
 800b864:	2e00      	cmp	r6, #0
 800b866:	d051      	beq.n	800b90c <ucdr_serialize_uint32_t+0xfc>
 800b868:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b86c:	706b      	strb	r3, [r5, #1]
 800b86e:	2e01      	cmp	r6, #1
 800b870:	d050      	beq.n	800b914 <ucdr_serialize_uint32_t+0x104>
 800b872:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b876:	70ab      	strb	r3, [r5, #2]
 800b878:	2e02      	cmp	r6, #2
 800b87a:	d04f      	beq.n	800b91c <ucdr_serialize_uint32_t+0x10c>
 800b87c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b880:	70eb      	strb	r3, [r5, #3]
 800b882:	6923      	ldr	r3, [r4, #16]
 800b884:	68a2      	ldr	r2, [r4, #8]
 800b886:	7da0      	ldrb	r0, [r4, #22]
 800b888:	3304      	adds	r3, #4
 800b88a:	1b9e      	subs	r6, r3, r6
 800b88c:	4442      	add	r2, r8
 800b88e:	2304      	movs	r3, #4
 800b890:	f080 0001 	eor.w	r0, r0, #1
 800b894:	60a2      	str	r2, [r4, #8]
 800b896:	6126      	str	r6, [r4, #16]
 800b898:	7563      	strb	r3, [r4, #21]
 800b89a:	b002      	add	sp, #8
 800b89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a0:	2104      	movs	r1, #4
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f001 f838 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b8a8:	b1d0      	cbz	r0, 800b8e0 <ucdr_serialize_uint32_t+0xd0>
 800b8aa:	7d23      	ldrb	r3, [r4, #20]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	68a3      	ldr	r3, [r4, #8]
 800b8b0:	d01c      	beq.n	800b8ec <ucdr_serialize_uint32_t+0xdc>
 800b8b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b8b6:	701a      	strb	r2, [r3, #0]
 800b8b8:	68a3      	ldr	r3, [r4, #8]
 800b8ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8be:	705a      	strb	r2, [r3, #1]
 800b8c0:	68a3      	ldr	r3, [r4, #8]
 800b8c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8c6:	709a      	strb	r2, [r3, #2]
 800b8c8:	68a3      	ldr	r3, [r4, #8]
 800b8ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8ce:	70da      	strb	r2, [r3, #3]
 800b8d0:	68a2      	ldr	r2, [r4, #8]
 800b8d2:	6923      	ldr	r3, [r4, #16]
 800b8d4:	3204      	adds	r2, #4
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	2104      	movs	r1, #4
 800b8da:	60a2      	str	r2, [r4, #8]
 800b8dc:	6123      	str	r3, [r4, #16]
 800b8de:	7561      	strb	r1, [r4, #21]
 800b8e0:	7da0      	ldrb	r0, [r4, #22]
 800b8e2:	f080 0001 	eor.w	r0, r0, #1
 800b8e6:	b002      	add	sp, #8
 800b8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ec:	9a01      	ldr	r2, [sp, #4]
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	e7ee      	b.n	800b8d0 <ucdr_serialize_uint32_t+0xc0>
 800b8f2:	68a2      	ldr	r2, [r4, #8]
 800b8f4:	6923      	ldr	r3, [r4, #16]
 800b8f6:	7da0      	ldrb	r0, [r4, #22]
 800b8f8:	7567      	strb	r7, [r4, #21]
 800b8fa:	1b92      	subs	r2, r2, r6
 800b8fc:	1b9b      	subs	r3, r3, r6
 800b8fe:	f080 0001 	eor.w	r0, r0, #1
 800b902:	60a2      	str	r2, [r4, #8]
 800b904:	6123      	str	r3, [r4, #16]
 800b906:	b002      	add	sp, #8
 800b908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b90c:	68a3      	ldr	r3, [r4, #8]
 800b90e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b912:	701a      	strb	r2, [r3, #0]
 800b914:	68a3      	ldr	r3, [r4, #8]
 800b916:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b91a:	701a      	strb	r2, [r3, #0]
 800b91c:	68a3      	ldr	r3, [r4, #8]
 800b91e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b922:	701a      	strb	r2, [r3, #0]
 800b924:	e7ad      	b.n	800b882 <ucdr_serialize_uint32_t+0x72>
 800b926:	4628      	mov	r0, r5
 800b928:	ad01      	add	r5, sp, #4
 800b92a:	4629      	mov	r1, r5
 800b92c:	4632      	mov	r2, r6
 800b92e:	f00e fada 	bl	8019ee6 <memcpy>
 800b932:	68a0      	ldr	r0, [r4, #8]
 800b934:	4642      	mov	r2, r8
 800b936:	19a9      	adds	r1, r5, r6
 800b938:	f00e fad5 	bl	8019ee6 <memcpy>
 800b93c:	e7a1      	b.n	800b882 <ucdr_serialize_uint32_t+0x72>
 800b93e:	bf00      	nop

0800b940 <ucdr_serialize_endian_uint32_t>:
 800b940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b944:	b083      	sub	sp, #12
 800b946:	460d      	mov	r5, r1
 800b948:	2104      	movs	r1, #4
 800b94a:	4604      	mov	r4, r0
 800b94c:	9201      	str	r2, [sp, #4]
 800b94e:	f001 f837 	bl	800c9c0 <ucdr_buffer_alignment>
 800b952:	4601      	mov	r1, r0
 800b954:	4620      	mov	r0, r4
 800b956:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b95a:	f001 f875 	bl	800ca48 <ucdr_advance_buffer>
 800b95e:	2104      	movs	r1, #4
 800b960:	4620      	mov	r0, r4
 800b962:	f000 ffcd 	bl	800c900 <ucdr_check_buffer_available_for>
 800b966:	2800      	cmp	r0, #0
 800b968:	d138      	bne.n	800b9dc <ucdr_serialize_endian_uint32_t+0x9c>
 800b96a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b96e:	42b7      	cmp	r7, r6
 800b970:	d92f      	bls.n	800b9d2 <ucdr_serialize_endian_uint32_t+0x92>
 800b972:	6923      	ldr	r3, [r4, #16]
 800b974:	60a7      	str	r7, [r4, #8]
 800b976:	1bbf      	subs	r7, r7, r6
 800b978:	443b      	add	r3, r7
 800b97a:	f1c7 0904 	rsb	r9, r7, #4
 800b97e:	6123      	str	r3, [r4, #16]
 800b980:	4649      	mov	r1, r9
 800b982:	4620      	mov	r0, r4
 800b984:	f000 ffc8 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b988:	2800      	cmp	r0, #0
 800b98a:	d04a      	beq.n	800ba22 <ucdr_serialize_endian_uint32_t+0xe2>
 800b98c:	2d01      	cmp	r5, #1
 800b98e:	d063      	beq.n	800ba58 <ucdr_serialize_endian_uint32_t+0x118>
 800b990:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b994:	7033      	strb	r3, [r6, #0]
 800b996:	2f00      	cmp	r7, #0
 800b998:	d051      	beq.n	800ba3e <ucdr_serialize_endian_uint32_t+0xfe>
 800b99a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b99e:	7073      	strb	r3, [r6, #1]
 800b9a0:	2f01      	cmp	r7, #1
 800b9a2:	d050      	beq.n	800ba46 <ucdr_serialize_endian_uint32_t+0x106>
 800b9a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b9a8:	70b3      	strb	r3, [r6, #2]
 800b9aa:	2f02      	cmp	r7, #2
 800b9ac:	d04f      	beq.n	800ba4e <ucdr_serialize_endian_uint32_t+0x10e>
 800b9ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b9b2:	70f3      	strb	r3, [r6, #3]
 800b9b4:	6923      	ldr	r3, [r4, #16]
 800b9b6:	68a2      	ldr	r2, [r4, #8]
 800b9b8:	7da0      	ldrb	r0, [r4, #22]
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	444a      	add	r2, r9
 800b9be:	1bdb      	subs	r3, r3, r7
 800b9c0:	2104      	movs	r1, #4
 800b9c2:	f080 0001 	eor.w	r0, r0, #1
 800b9c6:	60a2      	str	r2, [r4, #8]
 800b9c8:	6123      	str	r3, [r4, #16]
 800b9ca:	7561      	strb	r1, [r4, #21]
 800b9cc:	b003      	add	sp, #12
 800b9ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9d2:	2104      	movs	r1, #4
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f000 ff9f 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800b9da:	b1c8      	cbz	r0, 800ba10 <ucdr_serialize_endian_uint32_t+0xd0>
 800b9dc:	2d01      	cmp	r5, #1
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	d01c      	beq.n	800ba1c <ucdr_serialize_endian_uint32_t+0xdc>
 800b9e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b9e6:	701a      	strb	r2, [r3, #0]
 800b9e8:	68a3      	ldr	r3, [r4, #8]
 800b9ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9ee:	705a      	strb	r2, [r3, #1]
 800b9f0:	68a3      	ldr	r3, [r4, #8]
 800b9f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9f6:	709a      	strb	r2, [r3, #2]
 800b9f8:	68a3      	ldr	r3, [r4, #8]
 800b9fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9fe:	70da      	strb	r2, [r3, #3]
 800ba00:	68a2      	ldr	r2, [r4, #8]
 800ba02:	6923      	ldr	r3, [r4, #16]
 800ba04:	3204      	adds	r2, #4
 800ba06:	3304      	adds	r3, #4
 800ba08:	2104      	movs	r1, #4
 800ba0a:	60a2      	str	r2, [r4, #8]
 800ba0c:	6123      	str	r3, [r4, #16]
 800ba0e:	7561      	strb	r1, [r4, #21]
 800ba10:	7da0      	ldrb	r0, [r4, #22]
 800ba12:	f080 0001 	eor.w	r0, r0, #1
 800ba16:	b003      	add	sp, #12
 800ba18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba1c:	9a01      	ldr	r2, [sp, #4]
 800ba1e:	601a      	str	r2, [r3, #0]
 800ba20:	e7ee      	b.n	800ba00 <ucdr_serialize_endian_uint32_t+0xc0>
 800ba22:	68a2      	ldr	r2, [r4, #8]
 800ba24:	6923      	ldr	r3, [r4, #16]
 800ba26:	7da0      	ldrb	r0, [r4, #22]
 800ba28:	f884 8015 	strb.w	r8, [r4, #21]
 800ba2c:	1bd2      	subs	r2, r2, r7
 800ba2e:	1bdb      	subs	r3, r3, r7
 800ba30:	f080 0001 	eor.w	r0, r0, #1
 800ba34:	60a2      	str	r2, [r4, #8]
 800ba36:	6123      	str	r3, [r4, #16]
 800ba38:	b003      	add	sp, #12
 800ba3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba3e:	68a3      	ldr	r3, [r4, #8]
 800ba40:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba44:	701a      	strb	r2, [r3, #0]
 800ba46:	68a3      	ldr	r3, [r4, #8]
 800ba48:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba4c:	701a      	strb	r2, [r3, #0]
 800ba4e:	68a3      	ldr	r3, [r4, #8]
 800ba50:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba54:	701a      	strb	r2, [r3, #0]
 800ba56:	e7ad      	b.n	800b9b4 <ucdr_serialize_endian_uint32_t+0x74>
 800ba58:	ad01      	add	r5, sp, #4
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	463a      	mov	r2, r7
 800ba5e:	4630      	mov	r0, r6
 800ba60:	f00e fa41 	bl	8019ee6 <memcpy>
 800ba64:	68a0      	ldr	r0, [r4, #8]
 800ba66:	464a      	mov	r2, r9
 800ba68:	19e9      	adds	r1, r5, r7
 800ba6a:	f00e fa3c 	bl	8019ee6 <memcpy>
 800ba6e:	e7a1      	b.n	800b9b4 <ucdr_serialize_endian_uint32_t+0x74>

0800ba70 <ucdr_deserialize_uint32_t>:
 800ba70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba74:	460d      	mov	r5, r1
 800ba76:	2104      	movs	r1, #4
 800ba78:	4604      	mov	r4, r0
 800ba7a:	f000 ffa1 	bl	800c9c0 <ucdr_buffer_alignment>
 800ba7e:	4601      	mov	r1, r0
 800ba80:	4620      	mov	r0, r4
 800ba82:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba86:	f000 ffdf 	bl	800ca48 <ucdr_advance_buffer>
 800ba8a:	2104      	movs	r1, #4
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 ff37 	bl	800c900 <ucdr_check_buffer_available_for>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d138      	bne.n	800bb08 <ucdr_deserialize_uint32_t+0x98>
 800ba96:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ba9a:	42b7      	cmp	r7, r6
 800ba9c:	d92f      	bls.n	800bafe <ucdr_deserialize_uint32_t+0x8e>
 800ba9e:	6923      	ldr	r3, [r4, #16]
 800baa0:	60a7      	str	r7, [r4, #8]
 800baa2:	1bbf      	subs	r7, r7, r6
 800baa4:	443b      	add	r3, r7
 800baa6:	f1c7 0904 	rsb	r9, r7, #4
 800baaa:	6123      	str	r3, [r4, #16]
 800baac:	4649      	mov	r1, r9
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 ff32 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d046      	beq.n	800bb46 <ucdr_deserialize_uint32_t+0xd6>
 800bab8:	7d23      	ldrb	r3, [r4, #20]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d05c      	beq.n	800bb78 <ucdr_deserialize_uint32_t+0x108>
 800babe:	78f3      	ldrb	r3, [r6, #3]
 800bac0:	702b      	strb	r3, [r5, #0]
 800bac2:	2f00      	cmp	r7, #0
 800bac4:	d04c      	beq.n	800bb60 <ucdr_deserialize_uint32_t+0xf0>
 800bac6:	78b3      	ldrb	r3, [r6, #2]
 800bac8:	706b      	strb	r3, [r5, #1]
 800baca:	2f01      	cmp	r7, #1
 800bacc:	f105 0302 	add.w	r3, r5, #2
 800bad0:	d04a      	beq.n	800bb68 <ucdr_deserialize_uint32_t+0xf8>
 800bad2:	7873      	ldrb	r3, [r6, #1]
 800bad4:	70ab      	strb	r3, [r5, #2]
 800bad6:	2f02      	cmp	r7, #2
 800bad8:	f105 0303 	add.w	r3, r5, #3
 800badc:	d048      	beq.n	800bb70 <ucdr_deserialize_uint32_t+0x100>
 800bade:	7833      	ldrb	r3, [r6, #0]
 800bae0:	70eb      	strb	r3, [r5, #3]
 800bae2:	6923      	ldr	r3, [r4, #16]
 800bae4:	68a2      	ldr	r2, [r4, #8]
 800bae6:	7da0      	ldrb	r0, [r4, #22]
 800bae8:	2104      	movs	r1, #4
 800baea:	3304      	adds	r3, #4
 800baec:	444a      	add	r2, r9
 800baee:	1bdb      	subs	r3, r3, r7
 800baf0:	7561      	strb	r1, [r4, #21]
 800baf2:	60a2      	str	r2, [r4, #8]
 800baf4:	6123      	str	r3, [r4, #16]
 800baf6:	f080 0001 	eor.w	r0, r0, #1
 800bafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bafe:	2104      	movs	r1, #4
 800bb00:	4620      	mov	r0, r4
 800bb02:	f000 ff09 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800bb06:	b1b0      	cbz	r0, 800bb36 <ucdr_deserialize_uint32_t+0xc6>
 800bb08:	7d23      	ldrb	r3, [r4, #20]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	68a3      	ldr	r3, [r4, #8]
 800bb0e:	d017      	beq.n	800bb40 <ucdr_deserialize_uint32_t+0xd0>
 800bb10:	78db      	ldrb	r3, [r3, #3]
 800bb12:	702b      	strb	r3, [r5, #0]
 800bb14:	68a3      	ldr	r3, [r4, #8]
 800bb16:	789b      	ldrb	r3, [r3, #2]
 800bb18:	706b      	strb	r3, [r5, #1]
 800bb1a:	68a3      	ldr	r3, [r4, #8]
 800bb1c:	785b      	ldrb	r3, [r3, #1]
 800bb1e:	70ab      	strb	r3, [r5, #2]
 800bb20:	68a3      	ldr	r3, [r4, #8]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	70eb      	strb	r3, [r5, #3]
 800bb26:	68a2      	ldr	r2, [r4, #8]
 800bb28:	6923      	ldr	r3, [r4, #16]
 800bb2a:	3204      	adds	r2, #4
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	2104      	movs	r1, #4
 800bb30:	60a2      	str	r2, [r4, #8]
 800bb32:	6123      	str	r3, [r4, #16]
 800bb34:	7561      	strb	r1, [r4, #21]
 800bb36:	7da0      	ldrb	r0, [r4, #22]
 800bb38:	f080 0001 	eor.w	r0, r0, #1
 800bb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	602b      	str	r3, [r5, #0]
 800bb44:	e7ef      	b.n	800bb26 <ucdr_deserialize_uint32_t+0xb6>
 800bb46:	68a2      	ldr	r2, [r4, #8]
 800bb48:	6923      	ldr	r3, [r4, #16]
 800bb4a:	7da0      	ldrb	r0, [r4, #22]
 800bb4c:	f884 8015 	strb.w	r8, [r4, #21]
 800bb50:	1bd2      	subs	r2, r2, r7
 800bb52:	1bdb      	subs	r3, r3, r7
 800bb54:	60a2      	str	r2, [r4, #8]
 800bb56:	6123      	str	r3, [r4, #16]
 800bb58:	f080 0001 	eor.w	r0, r0, #1
 800bb5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb60:	68a3      	ldr	r3, [r4, #8]
 800bb62:	789b      	ldrb	r3, [r3, #2]
 800bb64:	706b      	strb	r3, [r5, #1]
 800bb66:	1cab      	adds	r3, r5, #2
 800bb68:	68a2      	ldr	r2, [r4, #8]
 800bb6a:	7852      	ldrb	r2, [r2, #1]
 800bb6c:	f803 2b01 	strb.w	r2, [r3], #1
 800bb70:	68a2      	ldr	r2, [r4, #8]
 800bb72:	7812      	ldrb	r2, [r2, #0]
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	e7b4      	b.n	800bae2 <ucdr_deserialize_uint32_t+0x72>
 800bb78:	4631      	mov	r1, r6
 800bb7a:	463a      	mov	r2, r7
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	f00e f9b2 	bl	8019ee6 <memcpy>
 800bb82:	68a1      	ldr	r1, [r4, #8]
 800bb84:	464a      	mov	r2, r9
 800bb86:	19e8      	adds	r0, r5, r7
 800bb88:	f00e f9ad 	bl	8019ee6 <memcpy>
 800bb8c:	e7a9      	b.n	800bae2 <ucdr_deserialize_uint32_t+0x72>
 800bb8e:	bf00      	nop

0800bb90 <ucdr_deserialize_endian_uint32_t>:
 800bb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb94:	460e      	mov	r6, r1
 800bb96:	2104      	movs	r1, #4
 800bb98:	4604      	mov	r4, r0
 800bb9a:	4615      	mov	r5, r2
 800bb9c:	f000 ff10 	bl	800c9c0 <ucdr_buffer_alignment>
 800bba0:	4601      	mov	r1, r0
 800bba2:	4620      	mov	r0, r4
 800bba4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bba8:	f000 ff4e 	bl	800ca48 <ucdr_advance_buffer>
 800bbac:	2104      	movs	r1, #4
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f000 fea6 	bl	800c900 <ucdr_check_buffer_available_for>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d13c      	bne.n	800bc32 <ucdr_deserialize_endian_uint32_t+0xa2>
 800bbb8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bbbc:	42bb      	cmp	r3, r7
 800bbbe:	d933      	bls.n	800bc28 <ucdr_deserialize_endian_uint32_t+0x98>
 800bbc0:	eba3 0807 	sub.w	r8, r3, r7
 800bbc4:	60a3      	str	r3, [r4, #8]
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	f1c8 0a04 	rsb	sl, r8, #4
 800bbcc:	4443      	add	r3, r8
 800bbce:	6123      	str	r3, [r4, #16]
 800bbd0:	4651      	mov	r1, sl
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 fea0 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d048      	beq.n	800bc6e <ucdr_deserialize_endian_uint32_t+0xde>
 800bbdc:	2e01      	cmp	r6, #1
 800bbde:	d061      	beq.n	800bca4 <ucdr_deserialize_endian_uint32_t+0x114>
 800bbe0:	78fb      	ldrb	r3, [r7, #3]
 800bbe2:	702b      	strb	r3, [r5, #0]
 800bbe4:	f1b8 0f00 	cmp.w	r8, #0
 800bbe8:	d050      	beq.n	800bc8c <ucdr_deserialize_endian_uint32_t+0xfc>
 800bbea:	78bb      	ldrb	r3, [r7, #2]
 800bbec:	706b      	strb	r3, [r5, #1]
 800bbee:	f1b8 0f01 	cmp.w	r8, #1
 800bbf2:	f105 0302 	add.w	r3, r5, #2
 800bbf6:	d04d      	beq.n	800bc94 <ucdr_deserialize_endian_uint32_t+0x104>
 800bbf8:	787b      	ldrb	r3, [r7, #1]
 800bbfa:	70ab      	strb	r3, [r5, #2]
 800bbfc:	f1b8 0f02 	cmp.w	r8, #2
 800bc00:	f105 0303 	add.w	r3, r5, #3
 800bc04:	d04a      	beq.n	800bc9c <ucdr_deserialize_endian_uint32_t+0x10c>
 800bc06:	783b      	ldrb	r3, [r7, #0]
 800bc08:	70eb      	strb	r3, [r5, #3]
 800bc0a:	6923      	ldr	r3, [r4, #16]
 800bc0c:	68a2      	ldr	r2, [r4, #8]
 800bc0e:	7da0      	ldrb	r0, [r4, #22]
 800bc10:	2104      	movs	r1, #4
 800bc12:	3304      	adds	r3, #4
 800bc14:	4452      	add	r2, sl
 800bc16:	eba3 0308 	sub.w	r3, r3, r8
 800bc1a:	7561      	strb	r1, [r4, #21]
 800bc1c:	60a2      	str	r2, [r4, #8]
 800bc1e:	6123      	str	r3, [r4, #16]
 800bc20:	f080 0001 	eor.w	r0, r0, #1
 800bc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc28:	2104      	movs	r1, #4
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 fe74 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800bc30:	b1a8      	cbz	r0, 800bc5e <ucdr_deserialize_endian_uint32_t+0xce>
 800bc32:	2e01      	cmp	r6, #1
 800bc34:	68a3      	ldr	r3, [r4, #8]
 800bc36:	d017      	beq.n	800bc68 <ucdr_deserialize_endian_uint32_t+0xd8>
 800bc38:	78db      	ldrb	r3, [r3, #3]
 800bc3a:	702b      	strb	r3, [r5, #0]
 800bc3c:	68a3      	ldr	r3, [r4, #8]
 800bc3e:	789b      	ldrb	r3, [r3, #2]
 800bc40:	706b      	strb	r3, [r5, #1]
 800bc42:	68a3      	ldr	r3, [r4, #8]
 800bc44:	785b      	ldrb	r3, [r3, #1]
 800bc46:	70ab      	strb	r3, [r5, #2]
 800bc48:	68a3      	ldr	r3, [r4, #8]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	70eb      	strb	r3, [r5, #3]
 800bc4e:	68a2      	ldr	r2, [r4, #8]
 800bc50:	6923      	ldr	r3, [r4, #16]
 800bc52:	3204      	adds	r2, #4
 800bc54:	3304      	adds	r3, #4
 800bc56:	2104      	movs	r1, #4
 800bc58:	60a2      	str	r2, [r4, #8]
 800bc5a:	6123      	str	r3, [r4, #16]
 800bc5c:	7561      	strb	r1, [r4, #21]
 800bc5e:	7da0      	ldrb	r0, [r4, #22]
 800bc60:	f080 0001 	eor.w	r0, r0, #1
 800bc64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	602b      	str	r3, [r5, #0]
 800bc6c:	e7ef      	b.n	800bc4e <ucdr_deserialize_endian_uint32_t+0xbe>
 800bc6e:	68a2      	ldr	r2, [r4, #8]
 800bc70:	6923      	ldr	r3, [r4, #16]
 800bc72:	7da0      	ldrb	r0, [r4, #22]
 800bc74:	f884 9015 	strb.w	r9, [r4, #21]
 800bc78:	eba2 0208 	sub.w	r2, r2, r8
 800bc7c:	eba3 0308 	sub.w	r3, r3, r8
 800bc80:	60a2      	str	r2, [r4, #8]
 800bc82:	6123      	str	r3, [r4, #16]
 800bc84:	f080 0001 	eor.w	r0, r0, #1
 800bc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc8c:	68a3      	ldr	r3, [r4, #8]
 800bc8e:	789b      	ldrb	r3, [r3, #2]
 800bc90:	706b      	strb	r3, [r5, #1]
 800bc92:	1cab      	adds	r3, r5, #2
 800bc94:	68a2      	ldr	r2, [r4, #8]
 800bc96:	7852      	ldrb	r2, [r2, #1]
 800bc98:	f803 2b01 	strb.w	r2, [r3], #1
 800bc9c:	68a2      	ldr	r2, [r4, #8]
 800bc9e:	7812      	ldrb	r2, [r2, #0]
 800bca0:	701a      	strb	r2, [r3, #0]
 800bca2:	e7b2      	b.n	800bc0a <ucdr_deserialize_endian_uint32_t+0x7a>
 800bca4:	4639      	mov	r1, r7
 800bca6:	4642      	mov	r2, r8
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f00e f91c 	bl	8019ee6 <memcpy>
 800bcae:	68a1      	ldr	r1, [r4, #8]
 800bcb0:	4652      	mov	r2, sl
 800bcb2:	eb05 0008 	add.w	r0, r5, r8
 800bcb6:	f00e f916 	bl	8019ee6 <memcpy>
 800bcba:	e7a6      	b.n	800bc0a <ucdr_deserialize_endian_uint32_t+0x7a>

0800bcbc <ucdr_serialize_uint64_t>:
 800bcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc0:	2108      	movs	r1, #8
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	e9cd 2300 	strd	r2, r3, [sp]
 800bcca:	f000 fe79 	bl	800c9c0 <ucdr_buffer_alignment>
 800bcce:	4601      	mov	r1, r0
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	7d67      	ldrb	r7, [r4, #21]
 800bcd4:	f000 feb8 	bl	800ca48 <ucdr_advance_buffer>
 800bcd8:	2108      	movs	r1, #8
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f000 fe10 	bl	800c900 <ucdr_check_buffer_available_for>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d14e      	bne.n	800bd82 <ucdr_serialize_uint64_t+0xc6>
 800bce4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bce8:	42ab      	cmp	r3, r5
 800bcea:	d945      	bls.n	800bd78 <ucdr_serialize_uint64_t+0xbc>
 800bcec:	1b5e      	subs	r6, r3, r5
 800bcee:	60a3      	str	r3, [r4, #8]
 800bcf0:	6923      	ldr	r3, [r4, #16]
 800bcf2:	f1c6 0808 	rsb	r8, r6, #8
 800bcf6:	4433      	add	r3, r6
 800bcf8:	6123      	str	r3, [r4, #16]
 800bcfa:	4641      	mov	r1, r8
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f000 fe0b 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d074      	beq.n	800bdf0 <ucdr_serialize_uint64_t+0x134>
 800bd06:	7d23      	ldrb	r3, [r4, #20]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	f000 809b 	beq.w	800be44 <ucdr_serialize_uint64_t+0x188>
 800bd0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd12:	702b      	strb	r3, [r5, #0]
 800bd14:	2e00      	cmp	r6, #0
 800bd16:	d078      	beq.n	800be0a <ucdr_serialize_uint64_t+0x14e>
 800bd18:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd1c:	706b      	strb	r3, [r5, #1]
 800bd1e:	2e01      	cmp	r6, #1
 800bd20:	d077      	beq.n	800be12 <ucdr_serialize_uint64_t+0x156>
 800bd22:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bd26:	70ab      	strb	r3, [r5, #2]
 800bd28:	2e02      	cmp	r6, #2
 800bd2a:	d076      	beq.n	800be1a <ucdr_serialize_uint64_t+0x15e>
 800bd2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd30:	70eb      	strb	r3, [r5, #3]
 800bd32:	2e03      	cmp	r6, #3
 800bd34:	d075      	beq.n	800be22 <ucdr_serialize_uint64_t+0x166>
 800bd36:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bd3a:	712b      	strb	r3, [r5, #4]
 800bd3c:	2e04      	cmp	r6, #4
 800bd3e:	d074      	beq.n	800be2a <ucdr_serialize_uint64_t+0x16e>
 800bd40:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bd44:	716b      	strb	r3, [r5, #5]
 800bd46:	2e05      	cmp	r6, #5
 800bd48:	d073      	beq.n	800be32 <ucdr_serialize_uint64_t+0x176>
 800bd4a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bd4e:	71ab      	strb	r3, [r5, #6]
 800bd50:	2e06      	cmp	r6, #6
 800bd52:	d072      	beq.n	800be3a <ucdr_serialize_uint64_t+0x17e>
 800bd54:	f89d 3000 	ldrb.w	r3, [sp]
 800bd58:	71eb      	strb	r3, [r5, #7]
 800bd5a:	6923      	ldr	r3, [r4, #16]
 800bd5c:	68a2      	ldr	r2, [r4, #8]
 800bd5e:	7da0      	ldrb	r0, [r4, #22]
 800bd60:	3308      	adds	r3, #8
 800bd62:	1b9e      	subs	r6, r3, r6
 800bd64:	4442      	add	r2, r8
 800bd66:	2308      	movs	r3, #8
 800bd68:	f080 0001 	eor.w	r0, r0, #1
 800bd6c:	60a2      	str	r2, [r4, #8]
 800bd6e:	6126      	str	r6, [r4, #16]
 800bd70:	7563      	strb	r3, [r4, #21]
 800bd72:	b002      	add	sp, #8
 800bd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd78:	2108      	movs	r1, #8
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f000 fdcc 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800bd80:	b350      	cbz	r0, 800bdd8 <ucdr_serialize_uint64_t+0x11c>
 800bd82:	7d23      	ldrb	r3, [r4, #20]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d02d      	beq.n	800bde4 <ucdr_serialize_uint64_t+0x128>
 800bd88:	68a3      	ldr	r3, [r4, #8]
 800bd8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd8e:	701a      	strb	r2, [r3, #0]
 800bd90:	68a3      	ldr	r3, [r4, #8]
 800bd92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd96:	705a      	strb	r2, [r3, #1]
 800bd98:	68a3      	ldr	r3, [r4, #8]
 800bd9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd9e:	709a      	strb	r2, [r3, #2]
 800bda0:	68a3      	ldr	r3, [r4, #8]
 800bda2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bda6:	70da      	strb	r2, [r3, #3]
 800bda8:	68a3      	ldr	r3, [r4, #8]
 800bdaa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bdae:	711a      	strb	r2, [r3, #4]
 800bdb0:	68a3      	ldr	r3, [r4, #8]
 800bdb2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bdb6:	715a      	strb	r2, [r3, #5]
 800bdb8:	68a3      	ldr	r3, [r4, #8]
 800bdba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bdbe:	719a      	strb	r2, [r3, #6]
 800bdc0:	68a3      	ldr	r3, [r4, #8]
 800bdc2:	f89d 2000 	ldrb.w	r2, [sp]
 800bdc6:	71da      	strb	r2, [r3, #7]
 800bdc8:	68a2      	ldr	r2, [r4, #8]
 800bdca:	6923      	ldr	r3, [r4, #16]
 800bdcc:	3208      	adds	r2, #8
 800bdce:	3308      	adds	r3, #8
 800bdd0:	2108      	movs	r1, #8
 800bdd2:	60a2      	str	r2, [r4, #8]
 800bdd4:	6123      	str	r3, [r4, #16]
 800bdd6:	7561      	strb	r1, [r4, #21]
 800bdd8:	7da0      	ldrb	r0, [r4, #22]
 800bdda:	f080 0001 	eor.w	r0, r0, #1
 800bdde:	b002      	add	sp, #8
 800bde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde4:	466b      	mov	r3, sp
 800bde6:	cb03      	ldmia	r3!, {r0, r1}
 800bde8:	68a3      	ldr	r3, [r4, #8]
 800bdea:	6018      	str	r0, [r3, #0]
 800bdec:	6059      	str	r1, [r3, #4]
 800bdee:	e7eb      	b.n	800bdc8 <ucdr_serialize_uint64_t+0x10c>
 800bdf0:	68a2      	ldr	r2, [r4, #8]
 800bdf2:	6923      	ldr	r3, [r4, #16]
 800bdf4:	7da0      	ldrb	r0, [r4, #22]
 800bdf6:	7567      	strb	r7, [r4, #21]
 800bdf8:	1b92      	subs	r2, r2, r6
 800bdfa:	1b9b      	subs	r3, r3, r6
 800bdfc:	f080 0001 	eor.w	r0, r0, #1
 800be00:	60a2      	str	r2, [r4, #8]
 800be02:	6123      	str	r3, [r4, #16]
 800be04:	b002      	add	sp, #8
 800be06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be0a:	68a3      	ldr	r3, [r4, #8]
 800be0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be10:	701a      	strb	r2, [r3, #0]
 800be12:	68a3      	ldr	r3, [r4, #8]
 800be14:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800be18:	701a      	strb	r2, [r3, #0]
 800be1a:	68a3      	ldr	r3, [r4, #8]
 800be1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800be20:	701a      	strb	r2, [r3, #0]
 800be22:	68a3      	ldr	r3, [r4, #8]
 800be24:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800be28:	701a      	strb	r2, [r3, #0]
 800be2a:	68a3      	ldr	r3, [r4, #8]
 800be2c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800be30:	701a      	strb	r2, [r3, #0]
 800be32:	68a3      	ldr	r3, [r4, #8]
 800be34:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800be38:	701a      	strb	r2, [r3, #0]
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	f89d 2000 	ldrb.w	r2, [sp]
 800be40:	701a      	strb	r2, [r3, #0]
 800be42:	e78a      	b.n	800bd5a <ucdr_serialize_uint64_t+0x9e>
 800be44:	4628      	mov	r0, r5
 800be46:	466d      	mov	r5, sp
 800be48:	4629      	mov	r1, r5
 800be4a:	4632      	mov	r2, r6
 800be4c:	f00e f84b 	bl	8019ee6 <memcpy>
 800be50:	68a0      	ldr	r0, [r4, #8]
 800be52:	4642      	mov	r2, r8
 800be54:	19a9      	adds	r1, r5, r6
 800be56:	f00e f846 	bl	8019ee6 <memcpy>
 800be5a:	e77e      	b.n	800bd5a <ucdr_serialize_uint64_t+0x9e>

0800be5c <ucdr_serialize_int16_t>:
 800be5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be60:	b082      	sub	sp, #8
 800be62:	460b      	mov	r3, r1
 800be64:	2102      	movs	r1, #2
 800be66:	4604      	mov	r4, r0
 800be68:	f8ad 3006 	strh.w	r3, [sp, #6]
 800be6c:	f000 fda8 	bl	800c9c0 <ucdr_buffer_alignment>
 800be70:	4601      	mov	r1, r0
 800be72:	4620      	mov	r0, r4
 800be74:	7d67      	ldrb	r7, [r4, #21]
 800be76:	f000 fde7 	bl	800ca48 <ucdr_advance_buffer>
 800be7a:	2102      	movs	r1, #2
 800be7c:	4620      	mov	r0, r4
 800be7e:	f000 fd3f 	bl	800c900 <ucdr_check_buffer_available_for>
 800be82:	bb78      	cbnz	r0, 800bee4 <ucdr_serialize_int16_t+0x88>
 800be84:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800be88:	42ab      	cmp	r3, r5
 800be8a:	d926      	bls.n	800beda <ucdr_serialize_int16_t+0x7e>
 800be8c:	1b5e      	subs	r6, r3, r5
 800be8e:	60a3      	str	r3, [r4, #8]
 800be90:	6923      	ldr	r3, [r4, #16]
 800be92:	f1c6 0802 	rsb	r8, r6, #2
 800be96:	4433      	add	r3, r6
 800be98:	6123      	str	r3, [r4, #16]
 800be9a:	4641      	mov	r1, r8
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 fd3b 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d03b      	beq.n	800bf1e <ucdr_serialize_int16_t+0xc2>
 800bea6:	7d23      	ldrb	r3, [r4, #20]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d04a      	beq.n	800bf42 <ucdr_serialize_int16_t+0xe6>
 800beac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800beb0:	702b      	strb	r3, [r5, #0]
 800beb2:	2e00      	cmp	r6, #0
 800beb4:	d040      	beq.n	800bf38 <ucdr_serialize_int16_t+0xdc>
 800beb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800beba:	706b      	strb	r3, [r5, #1]
 800bebc:	6923      	ldr	r3, [r4, #16]
 800bebe:	68a2      	ldr	r2, [r4, #8]
 800bec0:	7da0      	ldrb	r0, [r4, #22]
 800bec2:	3302      	adds	r3, #2
 800bec4:	1b9e      	subs	r6, r3, r6
 800bec6:	4442      	add	r2, r8
 800bec8:	2302      	movs	r3, #2
 800beca:	f080 0001 	eor.w	r0, r0, #1
 800bece:	60a2      	str	r2, [r4, #8]
 800bed0:	6126      	str	r6, [r4, #16]
 800bed2:	7563      	strb	r3, [r4, #21]
 800bed4:	b002      	add	sp, #8
 800bed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beda:	2102      	movs	r1, #2
 800bedc:	4620      	mov	r0, r4
 800bede:	f000 fd1b 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800bee2:	b190      	cbz	r0, 800bf0a <ucdr_serialize_int16_t+0xae>
 800bee4:	7d23      	ldrb	r3, [r4, #20]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	68a3      	ldr	r3, [r4, #8]
 800beea:	d014      	beq.n	800bf16 <ucdr_serialize_int16_t+0xba>
 800beec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bef0:	701a      	strb	r2, [r3, #0]
 800bef2:	68a3      	ldr	r3, [r4, #8]
 800bef4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bef8:	705a      	strb	r2, [r3, #1]
 800befa:	68a2      	ldr	r2, [r4, #8]
 800befc:	6923      	ldr	r3, [r4, #16]
 800befe:	3202      	adds	r2, #2
 800bf00:	3302      	adds	r3, #2
 800bf02:	2102      	movs	r1, #2
 800bf04:	60a2      	str	r2, [r4, #8]
 800bf06:	6123      	str	r3, [r4, #16]
 800bf08:	7561      	strb	r1, [r4, #21]
 800bf0a:	7da0      	ldrb	r0, [r4, #22]
 800bf0c:	f080 0001 	eor.w	r0, r0, #1
 800bf10:	b002      	add	sp, #8
 800bf12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bf1a:	801a      	strh	r2, [r3, #0]
 800bf1c:	e7ed      	b.n	800befa <ucdr_serialize_int16_t+0x9e>
 800bf1e:	68a2      	ldr	r2, [r4, #8]
 800bf20:	6923      	ldr	r3, [r4, #16]
 800bf22:	7da0      	ldrb	r0, [r4, #22]
 800bf24:	7567      	strb	r7, [r4, #21]
 800bf26:	1b92      	subs	r2, r2, r6
 800bf28:	1b9b      	subs	r3, r3, r6
 800bf2a:	f080 0001 	eor.w	r0, r0, #1
 800bf2e:	60a2      	str	r2, [r4, #8]
 800bf30:	6123      	str	r3, [r4, #16]
 800bf32:	b002      	add	sp, #8
 800bf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf38:	68a3      	ldr	r3, [r4, #8]
 800bf3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf3e:	701a      	strb	r2, [r3, #0]
 800bf40:	e7bc      	b.n	800bebc <ucdr_serialize_int16_t+0x60>
 800bf42:	4628      	mov	r0, r5
 800bf44:	f10d 0506 	add.w	r5, sp, #6
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4632      	mov	r2, r6
 800bf4c:	f00d ffcb 	bl	8019ee6 <memcpy>
 800bf50:	68a0      	ldr	r0, [r4, #8]
 800bf52:	4642      	mov	r2, r8
 800bf54:	19a9      	adds	r1, r5, r6
 800bf56:	f00d ffc6 	bl	8019ee6 <memcpy>
 800bf5a:	e7af      	b.n	800bebc <ucdr_serialize_int16_t+0x60>

0800bf5c <ucdr_deserialize_int16_t>:
 800bf5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf60:	460d      	mov	r5, r1
 800bf62:	2102      	movs	r1, #2
 800bf64:	4604      	mov	r4, r0
 800bf66:	f000 fd2b 	bl	800c9c0 <ucdr_buffer_alignment>
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bf72:	f000 fd69 	bl	800ca48 <ucdr_advance_buffer>
 800bf76:	2102      	movs	r1, #2
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f000 fcc1 	bl	800c900 <ucdr_check_buffer_available_for>
 800bf7e:	bb60      	cbnz	r0, 800bfda <ucdr_deserialize_int16_t+0x7e>
 800bf80:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bf84:	42be      	cmp	r6, r7
 800bf86:	d923      	bls.n	800bfd0 <ucdr_deserialize_int16_t+0x74>
 800bf88:	6923      	ldr	r3, [r4, #16]
 800bf8a:	60a6      	str	r6, [r4, #8]
 800bf8c:	1bf6      	subs	r6, r6, r7
 800bf8e:	4433      	add	r3, r6
 800bf90:	f1c6 0902 	rsb	r9, r6, #2
 800bf94:	6123      	str	r3, [r4, #16]
 800bf96:	4649      	mov	r1, r9
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f000 fcbd 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d034      	beq.n	800c00c <ucdr_deserialize_int16_t+0xb0>
 800bfa2:	7d23      	ldrb	r3, [r4, #20]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d042      	beq.n	800c02e <ucdr_deserialize_int16_t+0xd2>
 800bfa8:	787b      	ldrb	r3, [r7, #1]
 800bfaa:	702b      	strb	r3, [r5, #0]
 800bfac:	2e00      	cmp	r6, #0
 800bfae:	d03a      	beq.n	800c026 <ucdr_deserialize_int16_t+0xca>
 800bfb0:	783b      	ldrb	r3, [r7, #0]
 800bfb2:	706b      	strb	r3, [r5, #1]
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	68a2      	ldr	r2, [r4, #8]
 800bfb8:	7da0      	ldrb	r0, [r4, #22]
 800bfba:	2102      	movs	r1, #2
 800bfbc:	3302      	adds	r3, #2
 800bfbe:	444a      	add	r2, r9
 800bfc0:	1b9b      	subs	r3, r3, r6
 800bfc2:	7561      	strb	r1, [r4, #21]
 800bfc4:	60a2      	str	r2, [r4, #8]
 800bfc6:	6123      	str	r3, [r4, #16]
 800bfc8:	f080 0001 	eor.w	r0, r0, #1
 800bfcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfd0:	2102      	movs	r1, #2
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f000 fca0 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800bfd8:	b180      	cbz	r0, 800bffc <ucdr_deserialize_int16_t+0xa0>
 800bfda:	7d23      	ldrb	r3, [r4, #20]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	68a3      	ldr	r3, [r4, #8]
 800bfe0:	d011      	beq.n	800c006 <ucdr_deserialize_int16_t+0xaa>
 800bfe2:	785b      	ldrb	r3, [r3, #1]
 800bfe4:	702b      	strb	r3, [r5, #0]
 800bfe6:	68a3      	ldr	r3, [r4, #8]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	706b      	strb	r3, [r5, #1]
 800bfec:	68a2      	ldr	r2, [r4, #8]
 800bfee:	6923      	ldr	r3, [r4, #16]
 800bff0:	3202      	adds	r2, #2
 800bff2:	3302      	adds	r3, #2
 800bff4:	2102      	movs	r1, #2
 800bff6:	60a2      	str	r2, [r4, #8]
 800bff8:	6123      	str	r3, [r4, #16]
 800bffa:	7561      	strb	r1, [r4, #21]
 800bffc:	7da0      	ldrb	r0, [r4, #22]
 800bffe:	f080 0001 	eor.w	r0, r0, #1
 800c002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	802b      	strh	r3, [r5, #0]
 800c00a:	e7ef      	b.n	800bfec <ucdr_deserialize_int16_t+0x90>
 800c00c:	68a2      	ldr	r2, [r4, #8]
 800c00e:	6923      	ldr	r3, [r4, #16]
 800c010:	7da0      	ldrb	r0, [r4, #22]
 800c012:	f884 8015 	strb.w	r8, [r4, #21]
 800c016:	1b92      	subs	r2, r2, r6
 800c018:	1b9b      	subs	r3, r3, r6
 800c01a:	60a2      	str	r2, [r4, #8]
 800c01c:	6123      	str	r3, [r4, #16]
 800c01e:	f080 0001 	eor.w	r0, r0, #1
 800c022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c026:	68a3      	ldr	r3, [r4, #8]
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	706b      	strb	r3, [r5, #1]
 800c02c:	e7c2      	b.n	800bfb4 <ucdr_deserialize_int16_t+0x58>
 800c02e:	4639      	mov	r1, r7
 800c030:	4632      	mov	r2, r6
 800c032:	4628      	mov	r0, r5
 800c034:	f00d ff57 	bl	8019ee6 <memcpy>
 800c038:	68a1      	ldr	r1, [r4, #8]
 800c03a:	464a      	mov	r2, r9
 800c03c:	19a8      	adds	r0, r5, r6
 800c03e:	f00d ff52 	bl	8019ee6 <memcpy>
 800c042:	e7b7      	b.n	800bfb4 <ucdr_deserialize_int16_t+0x58>

0800c044 <ucdr_serialize_int32_t>:
 800c044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c048:	b082      	sub	sp, #8
 800c04a:	4604      	mov	r4, r0
 800c04c:	9101      	str	r1, [sp, #4]
 800c04e:	2104      	movs	r1, #4
 800c050:	f000 fcb6 	bl	800c9c0 <ucdr_buffer_alignment>
 800c054:	4601      	mov	r1, r0
 800c056:	4620      	mov	r0, r4
 800c058:	7d67      	ldrb	r7, [r4, #21]
 800c05a:	f000 fcf5 	bl	800ca48 <ucdr_advance_buffer>
 800c05e:	2104      	movs	r1, #4
 800c060:	4620      	mov	r0, r4
 800c062:	f000 fc4d 	bl	800c900 <ucdr_check_buffer_available_for>
 800c066:	2800      	cmp	r0, #0
 800c068:	d139      	bne.n	800c0de <ucdr_serialize_int32_t+0x9a>
 800c06a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c06e:	42ab      	cmp	r3, r5
 800c070:	d930      	bls.n	800c0d4 <ucdr_serialize_int32_t+0x90>
 800c072:	1b5e      	subs	r6, r3, r5
 800c074:	60a3      	str	r3, [r4, #8]
 800c076:	6923      	ldr	r3, [r4, #16]
 800c078:	f1c6 0804 	rsb	r8, r6, #4
 800c07c:	4433      	add	r3, r6
 800c07e:	6123      	str	r3, [r4, #16]
 800c080:	4641      	mov	r1, r8
 800c082:	4620      	mov	r0, r4
 800c084:	f000 fc48 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c088:	2800      	cmp	r0, #0
 800c08a:	d04c      	beq.n	800c126 <ucdr_serialize_int32_t+0xe2>
 800c08c:	7d23      	ldrb	r3, [r4, #20]
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d063      	beq.n	800c15a <ucdr_serialize_int32_t+0x116>
 800c092:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c096:	702b      	strb	r3, [r5, #0]
 800c098:	2e00      	cmp	r6, #0
 800c09a:	d051      	beq.n	800c140 <ucdr_serialize_int32_t+0xfc>
 800c09c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c0a0:	706b      	strb	r3, [r5, #1]
 800c0a2:	2e01      	cmp	r6, #1
 800c0a4:	d050      	beq.n	800c148 <ucdr_serialize_int32_t+0x104>
 800c0a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c0aa:	70ab      	strb	r3, [r5, #2]
 800c0ac:	2e02      	cmp	r6, #2
 800c0ae:	d04f      	beq.n	800c150 <ucdr_serialize_int32_t+0x10c>
 800c0b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c0b4:	70eb      	strb	r3, [r5, #3]
 800c0b6:	6923      	ldr	r3, [r4, #16]
 800c0b8:	68a2      	ldr	r2, [r4, #8]
 800c0ba:	7da0      	ldrb	r0, [r4, #22]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	1b9e      	subs	r6, r3, r6
 800c0c0:	4442      	add	r2, r8
 800c0c2:	2304      	movs	r3, #4
 800c0c4:	f080 0001 	eor.w	r0, r0, #1
 800c0c8:	60a2      	str	r2, [r4, #8]
 800c0ca:	6126      	str	r6, [r4, #16]
 800c0cc:	7563      	strb	r3, [r4, #21]
 800c0ce:	b002      	add	sp, #8
 800c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d4:	2104      	movs	r1, #4
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f000 fc1e 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c0dc:	b1d0      	cbz	r0, 800c114 <ucdr_serialize_int32_t+0xd0>
 800c0de:	7d23      	ldrb	r3, [r4, #20]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	68a3      	ldr	r3, [r4, #8]
 800c0e4:	d01c      	beq.n	800c120 <ucdr_serialize_int32_t+0xdc>
 800c0e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c0ea:	701a      	strb	r2, [r3, #0]
 800c0ec:	68a3      	ldr	r3, [r4, #8]
 800c0ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c0f2:	705a      	strb	r2, [r3, #1]
 800c0f4:	68a3      	ldr	r3, [r4, #8]
 800c0f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c0fa:	709a      	strb	r2, [r3, #2]
 800c0fc:	68a3      	ldr	r3, [r4, #8]
 800c0fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c102:	70da      	strb	r2, [r3, #3]
 800c104:	68a2      	ldr	r2, [r4, #8]
 800c106:	6923      	ldr	r3, [r4, #16]
 800c108:	3204      	adds	r2, #4
 800c10a:	3304      	adds	r3, #4
 800c10c:	2104      	movs	r1, #4
 800c10e:	60a2      	str	r2, [r4, #8]
 800c110:	6123      	str	r3, [r4, #16]
 800c112:	7561      	strb	r1, [r4, #21]
 800c114:	7da0      	ldrb	r0, [r4, #22]
 800c116:	f080 0001 	eor.w	r0, r0, #1
 800c11a:	b002      	add	sp, #8
 800c11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c120:	9a01      	ldr	r2, [sp, #4]
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	e7ee      	b.n	800c104 <ucdr_serialize_int32_t+0xc0>
 800c126:	68a2      	ldr	r2, [r4, #8]
 800c128:	6923      	ldr	r3, [r4, #16]
 800c12a:	7da0      	ldrb	r0, [r4, #22]
 800c12c:	7567      	strb	r7, [r4, #21]
 800c12e:	1b92      	subs	r2, r2, r6
 800c130:	1b9b      	subs	r3, r3, r6
 800c132:	f080 0001 	eor.w	r0, r0, #1
 800c136:	60a2      	str	r2, [r4, #8]
 800c138:	6123      	str	r3, [r4, #16]
 800c13a:	b002      	add	sp, #8
 800c13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c140:	68a3      	ldr	r3, [r4, #8]
 800c142:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c146:	701a      	strb	r2, [r3, #0]
 800c148:	68a3      	ldr	r3, [r4, #8]
 800c14a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c14e:	701a      	strb	r2, [r3, #0]
 800c150:	68a3      	ldr	r3, [r4, #8]
 800c152:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c156:	701a      	strb	r2, [r3, #0]
 800c158:	e7ad      	b.n	800c0b6 <ucdr_serialize_int32_t+0x72>
 800c15a:	4628      	mov	r0, r5
 800c15c:	ad01      	add	r5, sp, #4
 800c15e:	4629      	mov	r1, r5
 800c160:	4632      	mov	r2, r6
 800c162:	f00d fec0 	bl	8019ee6 <memcpy>
 800c166:	68a0      	ldr	r0, [r4, #8]
 800c168:	4642      	mov	r2, r8
 800c16a:	19a9      	adds	r1, r5, r6
 800c16c:	f00d febb 	bl	8019ee6 <memcpy>
 800c170:	e7a1      	b.n	800c0b6 <ucdr_serialize_int32_t+0x72>
 800c172:	bf00      	nop

0800c174 <ucdr_deserialize_int32_t>:
 800c174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c178:	460d      	mov	r5, r1
 800c17a:	2104      	movs	r1, #4
 800c17c:	4604      	mov	r4, r0
 800c17e:	f000 fc1f 	bl	800c9c0 <ucdr_buffer_alignment>
 800c182:	4601      	mov	r1, r0
 800c184:	4620      	mov	r0, r4
 800c186:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c18a:	f000 fc5d 	bl	800ca48 <ucdr_advance_buffer>
 800c18e:	2104      	movs	r1, #4
 800c190:	4620      	mov	r0, r4
 800c192:	f000 fbb5 	bl	800c900 <ucdr_check_buffer_available_for>
 800c196:	2800      	cmp	r0, #0
 800c198:	d138      	bne.n	800c20c <ucdr_deserialize_int32_t+0x98>
 800c19a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c19e:	42b7      	cmp	r7, r6
 800c1a0:	d92f      	bls.n	800c202 <ucdr_deserialize_int32_t+0x8e>
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	60a7      	str	r7, [r4, #8]
 800c1a6:	1bbf      	subs	r7, r7, r6
 800c1a8:	443b      	add	r3, r7
 800c1aa:	f1c7 0904 	rsb	r9, r7, #4
 800c1ae:	6123      	str	r3, [r4, #16]
 800c1b0:	4649      	mov	r1, r9
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f000 fbb0 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d046      	beq.n	800c24a <ucdr_deserialize_int32_t+0xd6>
 800c1bc:	7d23      	ldrb	r3, [r4, #20]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d05c      	beq.n	800c27c <ucdr_deserialize_int32_t+0x108>
 800c1c2:	78f3      	ldrb	r3, [r6, #3]
 800c1c4:	702b      	strb	r3, [r5, #0]
 800c1c6:	2f00      	cmp	r7, #0
 800c1c8:	d04c      	beq.n	800c264 <ucdr_deserialize_int32_t+0xf0>
 800c1ca:	78b3      	ldrb	r3, [r6, #2]
 800c1cc:	706b      	strb	r3, [r5, #1]
 800c1ce:	2f01      	cmp	r7, #1
 800c1d0:	f105 0302 	add.w	r3, r5, #2
 800c1d4:	d04a      	beq.n	800c26c <ucdr_deserialize_int32_t+0xf8>
 800c1d6:	7873      	ldrb	r3, [r6, #1]
 800c1d8:	70ab      	strb	r3, [r5, #2]
 800c1da:	2f02      	cmp	r7, #2
 800c1dc:	f105 0303 	add.w	r3, r5, #3
 800c1e0:	d048      	beq.n	800c274 <ucdr_deserialize_int32_t+0x100>
 800c1e2:	7833      	ldrb	r3, [r6, #0]
 800c1e4:	70eb      	strb	r3, [r5, #3]
 800c1e6:	6923      	ldr	r3, [r4, #16]
 800c1e8:	68a2      	ldr	r2, [r4, #8]
 800c1ea:	7da0      	ldrb	r0, [r4, #22]
 800c1ec:	2104      	movs	r1, #4
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	444a      	add	r2, r9
 800c1f2:	1bdb      	subs	r3, r3, r7
 800c1f4:	7561      	strb	r1, [r4, #21]
 800c1f6:	60a2      	str	r2, [r4, #8]
 800c1f8:	6123      	str	r3, [r4, #16]
 800c1fa:	f080 0001 	eor.w	r0, r0, #1
 800c1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c202:	2104      	movs	r1, #4
 800c204:	4620      	mov	r0, r4
 800c206:	f000 fb87 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c20a:	b1b0      	cbz	r0, 800c23a <ucdr_deserialize_int32_t+0xc6>
 800c20c:	7d23      	ldrb	r3, [r4, #20]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	68a3      	ldr	r3, [r4, #8]
 800c212:	d017      	beq.n	800c244 <ucdr_deserialize_int32_t+0xd0>
 800c214:	78db      	ldrb	r3, [r3, #3]
 800c216:	702b      	strb	r3, [r5, #0]
 800c218:	68a3      	ldr	r3, [r4, #8]
 800c21a:	789b      	ldrb	r3, [r3, #2]
 800c21c:	706b      	strb	r3, [r5, #1]
 800c21e:	68a3      	ldr	r3, [r4, #8]
 800c220:	785b      	ldrb	r3, [r3, #1]
 800c222:	70ab      	strb	r3, [r5, #2]
 800c224:	68a3      	ldr	r3, [r4, #8]
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	70eb      	strb	r3, [r5, #3]
 800c22a:	68a2      	ldr	r2, [r4, #8]
 800c22c:	6923      	ldr	r3, [r4, #16]
 800c22e:	3204      	adds	r2, #4
 800c230:	3304      	adds	r3, #4
 800c232:	2104      	movs	r1, #4
 800c234:	60a2      	str	r2, [r4, #8]
 800c236:	6123      	str	r3, [r4, #16]
 800c238:	7561      	strb	r1, [r4, #21]
 800c23a:	7da0      	ldrb	r0, [r4, #22]
 800c23c:	f080 0001 	eor.w	r0, r0, #1
 800c240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	602b      	str	r3, [r5, #0]
 800c248:	e7ef      	b.n	800c22a <ucdr_deserialize_int32_t+0xb6>
 800c24a:	68a2      	ldr	r2, [r4, #8]
 800c24c:	6923      	ldr	r3, [r4, #16]
 800c24e:	7da0      	ldrb	r0, [r4, #22]
 800c250:	f884 8015 	strb.w	r8, [r4, #21]
 800c254:	1bd2      	subs	r2, r2, r7
 800c256:	1bdb      	subs	r3, r3, r7
 800c258:	60a2      	str	r2, [r4, #8]
 800c25a:	6123      	str	r3, [r4, #16]
 800c25c:	f080 0001 	eor.w	r0, r0, #1
 800c260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c264:	68a3      	ldr	r3, [r4, #8]
 800c266:	789b      	ldrb	r3, [r3, #2]
 800c268:	706b      	strb	r3, [r5, #1]
 800c26a:	1cab      	adds	r3, r5, #2
 800c26c:	68a2      	ldr	r2, [r4, #8]
 800c26e:	7852      	ldrb	r2, [r2, #1]
 800c270:	f803 2b01 	strb.w	r2, [r3], #1
 800c274:	68a2      	ldr	r2, [r4, #8]
 800c276:	7812      	ldrb	r2, [r2, #0]
 800c278:	701a      	strb	r2, [r3, #0]
 800c27a:	e7b4      	b.n	800c1e6 <ucdr_deserialize_int32_t+0x72>
 800c27c:	4631      	mov	r1, r6
 800c27e:	463a      	mov	r2, r7
 800c280:	4628      	mov	r0, r5
 800c282:	f00d fe30 	bl	8019ee6 <memcpy>
 800c286:	68a1      	ldr	r1, [r4, #8]
 800c288:	464a      	mov	r2, r9
 800c28a:	19e8      	adds	r0, r5, r7
 800c28c:	f00d fe2b 	bl	8019ee6 <memcpy>
 800c290:	e7a9      	b.n	800c1e6 <ucdr_deserialize_int32_t+0x72>
 800c292:	bf00      	nop

0800c294 <ucdr_serialize_double>:
 800c294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c298:	2108      	movs	r1, #8
 800c29a:	b082      	sub	sp, #8
 800c29c:	4604      	mov	r4, r0
 800c29e:	ed8d 0b00 	vstr	d0, [sp]
 800c2a2:	f000 fb8d 	bl	800c9c0 <ucdr_buffer_alignment>
 800c2a6:	4601      	mov	r1, r0
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	7d67      	ldrb	r7, [r4, #21]
 800c2ac:	f000 fbcc 	bl	800ca48 <ucdr_advance_buffer>
 800c2b0:	2108      	movs	r1, #8
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f000 fb24 	bl	800c900 <ucdr_check_buffer_available_for>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	d14e      	bne.n	800c35a <ucdr_serialize_double+0xc6>
 800c2bc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c2c0:	42ab      	cmp	r3, r5
 800c2c2:	d945      	bls.n	800c350 <ucdr_serialize_double+0xbc>
 800c2c4:	1b5e      	subs	r6, r3, r5
 800c2c6:	60a3      	str	r3, [r4, #8]
 800c2c8:	6923      	ldr	r3, [r4, #16]
 800c2ca:	f1c6 0808 	rsb	r8, r6, #8
 800c2ce:	4433      	add	r3, r6
 800c2d0:	6123      	str	r3, [r4, #16]
 800c2d2:	4641      	mov	r1, r8
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f000 fb1f 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	d074      	beq.n	800c3c8 <ucdr_serialize_double+0x134>
 800c2de:	7d23      	ldrb	r3, [r4, #20]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	f000 809b 	beq.w	800c41c <ucdr_serialize_double+0x188>
 800c2e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c2ea:	702b      	strb	r3, [r5, #0]
 800c2ec:	2e00      	cmp	r6, #0
 800c2ee:	d078      	beq.n	800c3e2 <ucdr_serialize_double+0x14e>
 800c2f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c2f4:	706b      	strb	r3, [r5, #1]
 800c2f6:	2e01      	cmp	r6, #1
 800c2f8:	d077      	beq.n	800c3ea <ucdr_serialize_double+0x156>
 800c2fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c2fe:	70ab      	strb	r3, [r5, #2]
 800c300:	2e02      	cmp	r6, #2
 800c302:	d076      	beq.n	800c3f2 <ucdr_serialize_double+0x15e>
 800c304:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c308:	70eb      	strb	r3, [r5, #3]
 800c30a:	2e03      	cmp	r6, #3
 800c30c:	d075      	beq.n	800c3fa <ucdr_serialize_double+0x166>
 800c30e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c312:	712b      	strb	r3, [r5, #4]
 800c314:	2e04      	cmp	r6, #4
 800c316:	d074      	beq.n	800c402 <ucdr_serialize_double+0x16e>
 800c318:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c31c:	716b      	strb	r3, [r5, #5]
 800c31e:	2e05      	cmp	r6, #5
 800c320:	d073      	beq.n	800c40a <ucdr_serialize_double+0x176>
 800c322:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c326:	71ab      	strb	r3, [r5, #6]
 800c328:	2e06      	cmp	r6, #6
 800c32a:	d072      	beq.n	800c412 <ucdr_serialize_double+0x17e>
 800c32c:	f89d 3000 	ldrb.w	r3, [sp]
 800c330:	71eb      	strb	r3, [r5, #7]
 800c332:	6923      	ldr	r3, [r4, #16]
 800c334:	68a2      	ldr	r2, [r4, #8]
 800c336:	7da0      	ldrb	r0, [r4, #22]
 800c338:	3308      	adds	r3, #8
 800c33a:	1b9e      	subs	r6, r3, r6
 800c33c:	4442      	add	r2, r8
 800c33e:	2308      	movs	r3, #8
 800c340:	f080 0001 	eor.w	r0, r0, #1
 800c344:	60a2      	str	r2, [r4, #8]
 800c346:	6126      	str	r6, [r4, #16]
 800c348:	7563      	strb	r3, [r4, #21]
 800c34a:	b002      	add	sp, #8
 800c34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c350:	2108      	movs	r1, #8
 800c352:	4620      	mov	r0, r4
 800c354:	f000 fae0 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c358:	b350      	cbz	r0, 800c3b0 <ucdr_serialize_double+0x11c>
 800c35a:	7d23      	ldrb	r3, [r4, #20]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d02d      	beq.n	800c3bc <ucdr_serialize_double+0x128>
 800c360:	68a3      	ldr	r3, [r4, #8]
 800c362:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c366:	701a      	strb	r2, [r3, #0]
 800c368:	68a3      	ldr	r3, [r4, #8]
 800c36a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c36e:	705a      	strb	r2, [r3, #1]
 800c370:	68a3      	ldr	r3, [r4, #8]
 800c372:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c376:	709a      	strb	r2, [r3, #2]
 800c378:	68a3      	ldr	r3, [r4, #8]
 800c37a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c37e:	70da      	strb	r2, [r3, #3]
 800c380:	68a3      	ldr	r3, [r4, #8]
 800c382:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c386:	711a      	strb	r2, [r3, #4]
 800c388:	68a3      	ldr	r3, [r4, #8]
 800c38a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c38e:	715a      	strb	r2, [r3, #5]
 800c390:	68a3      	ldr	r3, [r4, #8]
 800c392:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c396:	719a      	strb	r2, [r3, #6]
 800c398:	68a3      	ldr	r3, [r4, #8]
 800c39a:	f89d 2000 	ldrb.w	r2, [sp]
 800c39e:	71da      	strb	r2, [r3, #7]
 800c3a0:	68a2      	ldr	r2, [r4, #8]
 800c3a2:	6923      	ldr	r3, [r4, #16]
 800c3a4:	3208      	adds	r2, #8
 800c3a6:	3308      	adds	r3, #8
 800c3a8:	2108      	movs	r1, #8
 800c3aa:	60a2      	str	r2, [r4, #8]
 800c3ac:	6123      	str	r3, [r4, #16]
 800c3ae:	7561      	strb	r1, [r4, #21]
 800c3b0:	7da0      	ldrb	r0, [r4, #22]
 800c3b2:	f080 0001 	eor.w	r0, r0, #1
 800c3b6:	b002      	add	sp, #8
 800c3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3bc:	466b      	mov	r3, sp
 800c3be:	cb03      	ldmia	r3!, {r0, r1}
 800c3c0:	68a3      	ldr	r3, [r4, #8]
 800c3c2:	6018      	str	r0, [r3, #0]
 800c3c4:	6059      	str	r1, [r3, #4]
 800c3c6:	e7eb      	b.n	800c3a0 <ucdr_serialize_double+0x10c>
 800c3c8:	68a2      	ldr	r2, [r4, #8]
 800c3ca:	6923      	ldr	r3, [r4, #16]
 800c3cc:	7da0      	ldrb	r0, [r4, #22]
 800c3ce:	7567      	strb	r7, [r4, #21]
 800c3d0:	1b92      	subs	r2, r2, r6
 800c3d2:	1b9b      	subs	r3, r3, r6
 800c3d4:	f080 0001 	eor.w	r0, r0, #1
 800c3d8:	60a2      	str	r2, [r4, #8]
 800c3da:	6123      	str	r3, [r4, #16]
 800c3dc:	b002      	add	sp, #8
 800c3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e2:	68a3      	ldr	r3, [r4, #8]
 800c3e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c3e8:	701a      	strb	r2, [r3, #0]
 800c3ea:	68a3      	ldr	r3, [r4, #8]
 800c3ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c3f0:	701a      	strb	r2, [r3, #0]
 800c3f2:	68a3      	ldr	r3, [r4, #8]
 800c3f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c3f8:	701a      	strb	r2, [r3, #0]
 800c3fa:	68a3      	ldr	r3, [r4, #8]
 800c3fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	68a3      	ldr	r3, [r4, #8]
 800c404:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	68a3      	ldr	r3, [r4, #8]
 800c40c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c410:	701a      	strb	r2, [r3, #0]
 800c412:	68a3      	ldr	r3, [r4, #8]
 800c414:	f89d 2000 	ldrb.w	r2, [sp]
 800c418:	701a      	strb	r2, [r3, #0]
 800c41a:	e78a      	b.n	800c332 <ucdr_serialize_double+0x9e>
 800c41c:	4628      	mov	r0, r5
 800c41e:	466d      	mov	r5, sp
 800c420:	4629      	mov	r1, r5
 800c422:	4632      	mov	r2, r6
 800c424:	f00d fd5f 	bl	8019ee6 <memcpy>
 800c428:	68a0      	ldr	r0, [r4, #8]
 800c42a:	4642      	mov	r2, r8
 800c42c:	19a9      	adds	r1, r5, r6
 800c42e:	f00d fd5a 	bl	8019ee6 <memcpy>
 800c432:	e77e      	b.n	800c332 <ucdr_serialize_double+0x9e>

0800c434 <ucdr_serialize_endian_double>:
 800c434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c438:	460e      	mov	r6, r1
 800c43a:	b083      	sub	sp, #12
 800c43c:	2108      	movs	r1, #8
 800c43e:	4604      	mov	r4, r0
 800c440:	ed8d 0b00 	vstr	d0, [sp]
 800c444:	f000 fabc 	bl	800c9c0 <ucdr_buffer_alignment>
 800c448:	4601      	mov	r1, r0
 800c44a:	4620      	mov	r0, r4
 800c44c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c450:	f000 fafa 	bl	800ca48 <ucdr_advance_buffer>
 800c454:	2108      	movs	r1, #8
 800c456:	4620      	mov	r0, r4
 800c458:	f000 fa52 	bl	800c900 <ucdr_check_buffer_available_for>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d14d      	bne.n	800c4fc <ucdr_serialize_endian_double+0xc8>
 800c460:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800c464:	42bd      	cmp	r5, r7
 800c466:	d944      	bls.n	800c4f2 <ucdr_serialize_endian_double+0xbe>
 800c468:	6923      	ldr	r3, [r4, #16]
 800c46a:	60a5      	str	r5, [r4, #8]
 800c46c:	1bed      	subs	r5, r5, r7
 800c46e:	442b      	add	r3, r5
 800c470:	f1c5 0908 	rsb	r9, r5, #8
 800c474:	6123      	str	r3, [r4, #16]
 800c476:	4649      	mov	r1, r9
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 fa4d 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c47e:	2800      	cmp	r0, #0
 800c480:	d072      	beq.n	800c568 <ucdr_serialize_endian_double+0x134>
 800c482:	2e01      	cmp	r6, #1
 800c484:	f000 809b 	beq.w	800c5be <ucdr_serialize_endian_double+0x18a>
 800c488:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c48c:	703b      	strb	r3, [r7, #0]
 800c48e:	2d00      	cmp	r5, #0
 800c490:	d078      	beq.n	800c584 <ucdr_serialize_endian_double+0x150>
 800c492:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c496:	707b      	strb	r3, [r7, #1]
 800c498:	2d01      	cmp	r5, #1
 800c49a:	d077      	beq.n	800c58c <ucdr_serialize_endian_double+0x158>
 800c49c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c4a0:	70bb      	strb	r3, [r7, #2]
 800c4a2:	2d02      	cmp	r5, #2
 800c4a4:	d076      	beq.n	800c594 <ucdr_serialize_endian_double+0x160>
 800c4a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c4aa:	70fb      	strb	r3, [r7, #3]
 800c4ac:	2d03      	cmp	r5, #3
 800c4ae:	d075      	beq.n	800c59c <ucdr_serialize_endian_double+0x168>
 800c4b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c4b4:	713b      	strb	r3, [r7, #4]
 800c4b6:	2d04      	cmp	r5, #4
 800c4b8:	d074      	beq.n	800c5a4 <ucdr_serialize_endian_double+0x170>
 800c4ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c4be:	717b      	strb	r3, [r7, #5]
 800c4c0:	2d05      	cmp	r5, #5
 800c4c2:	d073      	beq.n	800c5ac <ucdr_serialize_endian_double+0x178>
 800c4c4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c4c8:	71bb      	strb	r3, [r7, #6]
 800c4ca:	2d06      	cmp	r5, #6
 800c4cc:	d072      	beq.n	800c5b4 <ucdr_serialize_endian_double+0x180>
 800c4ce:	f89d 3000 	ldrb.w	r3, [sp]
 800c4d2:	71fb      	strb	r3, [r7, #7]
 800c4d4:	6923      	ldr	r3, [r4, #16]
 800c4d6:	68a2      	ldr	r2, [r4, #8]
 800c4d8:	7da0      	ldrb	r0, [r4, #22]
 800c4da:	3308      	adds	r3, #8
 800c4dc:	1b5d      	subs	r5, r3, r5
 800c4de:	444a      	add	r2, r9
 800c4e0:	2308      	movs	r3, #8
 800c4e2:	f080 0001 	eor.w	r0, r0, #1
 800c4e6:	60a2      	str	r2, [r4, #8]
 800c4e8:	6125      	str	r5, [r4, #16]
 800c4ea:	7563      	strb	r3, [r4, #21]
 800c4ec:	b003      	add	sp, #12
 800c4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4f2:	2108      	movs	r1, #8
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f000 fa0f 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c4fa:	b348      	cbz	r0, 800c550 <ucdr_serialize_endian_double+0x11c>
 800c4fc:	2e01      	cmp	r6, #1
 800c4fe:	d02d      	beq.n	800c55c <ucdr_serialize_endian_double+0x128>
 800c500:	68a3      	ldr	r3, [r4, #8]
 800c502:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c506:	701a      	strb	r2, [r3, #0]
 800c508:	68a3      	ldr	r3, [r4, #8]
 800c50a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c50e:	705a      	strb	r2, [r3, #1]
 800c510:	68a3      	ldr	r3, [r4, #8]
 800c512:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c516:	709a      	strb	r2, [r3, #2]
 800c518:	68a3      	ldr	r3, [r4, #8]
 800c51a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c51e:	70da      	strb	r2, [r3, #3]
 800c520:	68a3      	ldr	r3, [r4, #8]
 800c522:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c526:	711a      	strb	r2, [r3, #4]
 800c528:	68a3      	ldr	r3, [r4, #8]
 800c52a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c52e:	715a      	strb	r2, [r3, #5]
 800c530:	68a3      	ldr	r3, [r4, #8]
 800c532:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c536:	719a      	strb	r2, [r3, #6]
 800c538:	68a3      	ldr	r3, [r4, #8]
 800c53a:	f89d 2000 	ldrb.w	r2, [sp]
 800c53e:	71da      	strb	r2, [r3, #7]
 800c540:	68a2      	ldr	r2, [r4, #8]
 800c542:	6923      	ldr	r3, [r4, #16]
 800c544:	3208      	adds	r2, #8
 800c546:	3308      	adds	r3, #8
 800c548:	2108      	movs	r1, #8
 800c54a:	60a2      	str	r2, [r4, #8]
 800c54c:	6123      	str	r3, [r4, #16]
 800c54e:	7561      	strb	r1, [r4, #21]
 800c550:	7da0      	ldrb	r0, [r4, #22]
 800c552:	f080 0001 	eor.w	r0, r0, #1
 800c556:	b003      	add	sp, #12
 800c558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c55c:	466b      	mov	r3, sp
 800c55e:	cb03      	ldmia	r3!, {r0, r1}
 800c560:	68a3      	ldr	r3, [r4, #8]
 800c562:	6018      	str	r0, [r3, #0]
 800c564:	6059      	str	r1, [r3, #4]
 800c566:	e7eb      	b.n	800c540 <ucdr_serialize_endian_double+0x10c>
 800c568:	68a2      	ldr	r2, [r4, #8]
 800c56a:	6923      	ldr	r3, [r4, #16]
 800c56c:	7da0      	ldrb	r0, [r4, #22]
 800c56e:	f884 8015 	strb.w	r8, [r4, #21]
 800c572:	1b52      	subs	r2, r2, r5
 800c574:	1b5b      	subs	r3, r3, r5
 800c576:	f080 0001 	eor.w	r0, r0, #1
 800c57a:	60a2      	str	r2, [r4, #8]
 800c57c:	6123      	str	r3, [r4, #16]
 800c57e:	b003      	add	sp, #12
 800c580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c584:	68a3      	ldr	r3, [r4, #8]
 800c586:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c58a:	701a      	strb	r2, [r3, #0]
 800c58c:	68a3      	ldr	r3, [r4, #8]
 800c58e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c592:	701a      	strb	r2, [r3, #0]
 800c594:	68a3      	ldr	r3, [r4, #8]
 800c596:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c59a:	701a      	strb	r2, [r3, #0]
 800c59c:	68a3      	ldr	r3, [r4, #8]
 800c59e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c5a2:	701a      	strb	r2, [r3, #0]
 800c5a4:	68a3      	ldr	r3, [r4, #8]
 800c5a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c5aa:	701a      	strb	r2, [r3, #0]
 800c5ac:	68a3      	ldr	r3, [r4, #8]
 800c5ae:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c5b2:	701a      	strb	r2, [r3, #0]
 800c5b4:	68a3      	ldr	r3, [r4, #8]
 800c5b6:	f89d 2000 	ldrb.w	r2, [sp]
 800c5ba:	701a      	strb	r2, [r3, #0]
 800c5bc:	e78a      	b.n	800c4d4 <ucdr_serialize_endian_double+0xa0>
 800c5be:	466e      	mov	r6, sp
 800c5c0:	4631      	mov	r1, r6
 800c5c2:	462a      	mov	r2, r5
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	f00d fc8e 	bl	8019ee6 <memcpy>
 800c5ca:	68a0      	ldr	r0, [r4, #8]
 800c5cc:	464a      	mov	r2, r9
 800c5ce:	1971      	adds	r1, r6, r5
 800c5d0:	f00d fc89 	bl	8019ee6 <memcpy>
 800c5d4:	e77e      	b.n	800c4d4 <ucdr_serialize_endian_double+0xa0>
 800c5d6:	bf00      	nop

0800c5d8 <ucdr_deserialize_double>:
 800c5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5dc:	460d      	mov	r5, r1
 800c5de:	2108      	movs	r1, #8
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	f000 f9ed 	bl	800c9c0 <ucdr_buffer_alignment>
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c5ee:	f000 fa2b 	bl	800ca48 <ucdr_advance_buffer>
 800c5f2:	2108      	movs	r1, #8
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f000 f983 	bl	800c900 <ucdr_check_buffer_available_for>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d151      	bne.n	800c6a2 <ucdr_deserialize_double+0xca>
 800c5fe:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c602:	42be      	cmp	r6, r7
 800c604:	d948      	bls.n	800c698 <ucdr_deserialize_double+0xc0>
 800c606:	6923      	ldr	r3, [r4, #16]
 800c608:	60a6      	str	r6, [r4, #8]
 800c60a:	1bf6      	subs	r6, r6, r7
 800c60c:	4433      	add	r3, r6
 800c60e:	f1c6 0808 	rsb	r8, r6, #8
 800c612:	6123      	str	r3, [r4, #16]
 800c614:	4641      	mov	r1, r8
 800c616:	4620      	mov	r0, r4
 800c618:	f000 f97e 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d06d      	beq.n	800c6fc <ucdr_deserialize_double+0x124>
 800c620:	7d23      	ldrb	r3, [r4, #20]
 800c622:	2b01      	cmp	r3, #1
 800c624:	f000 8093 	beq.w	800c74e <ucdr_deserialize_double+0x176>
 800c628:	79fb      	ldrb	r3, [r7, #7]
 800c62a:	702b      	strb	r3, [r5, #0]
 800c62c:	2e00      	cmp	r6, #0
 800c62e:	d072      	beq.n	800c716 <ucdr_deserialize_double+0x13e>
 800c630:	79bb      	ldrb	r3, [r7, #6]
 800c632:	706b      	strb	r3, [r5, #1]
 800c634:	2e01      	cmp	r6, #1
 800c636:	f105 0302 	add.w	r3, r5, #2
 800c63a:	d070      	beq.n	800c71e <ucdr_deserialize_double+0x146>
 800c63c:	797b      	ldrb	r3, [r7, #5]
 800c63e:	70ab      	strb	r3, [r5, #2]
 800c640:	2e02      	cmp	r6, #2
 800c642:	f105 0303 	add.w	r3, r5, #3
 800c646:	d06e      	beq.n	800c726 <ucdr_deserialize_double+0x14e>
 800c648:	793b      	ldrb	r3, [r7, #4]
 800c64a:	70eb      	strb	r3, [r5, #3]
 800c64c:	2e03      	cmp	r6, #3
 800c64e:	f105 0304 	add.w	r3, r5, #4
 800c652:	d06c      	beq.n	800c72e <ucdr_deserialize_double+0x156>
 800c654:	78fb      	ldrb	r3, [r7, #3]
 800c656:	712b      	strb	r3, [r5, #4]
 800c658:	2e04      	cmp	r6, #4
 800c65a:	f105 0305 	add.w	r3, r5, #5
 800c65e:	d06a      	beq.n	800c736 <ucdr_deserialize_double+0x15e>
 800c660:	78bb      	ldrb	r3, [r7, #2]
 800c662:	716b      	strb	r3, [r5, #5]
 800c664:	2e05      	cmp	r6, #5
 800c666:	f105 0306 	add.w	r3, r5, #6
 800c66a:	d068      	beq.n	800c73e <ucdr_deserialize_double+0x166>
 800c66c:	787b      	ldrb	r3, [r7, #1]
 800c66e:	71ab      	strb	r3, [r5, #6]
 800c670:	2e06      	cmp	r6, #6
 800c672:	f105 0307 	add.w	r3, r5, #7
 800c676:	d066      	beq.n	800c746 <ucdr_deserialize_double+0x16e>
 800c678:	783b      	ldrb	r3, [r7, #0]
 800c67a:	71eb      	strb	r3, [r5, #7]
 800c67c:	6923      	ldr	r3, [r4, #16]
 800c67e:	68a2      	ldr	r2, [r4, #8]
 800c680:	7da0      	ldrb	r0, [r4, #22]
 800c682:	3308      	adds	r3, #8
 800c684:	1b9e      	subs	r6, r3, r6
 800c686:	2308      	movs	r3, #8
 800c688:	4442      	add	r2, r8
 800c68a:	7563      	strb	r3, [r4, #21]
 800c68c:	60a2      	str	r2, [r4, #8]
 800c68e:	6126      	str	r6, [r4, #16]
 800c690:	f080 0001 	eor.w	r0, r0, #1
 800c694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c698:	2108      	movs	r1, #8
 800c69a:	4620      	mov	r0, r4
 800c69c:	f000 f93c 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c6a0:	b310      	cbz	r0, 800c6e8 <ucdr_deserialize_double+0x110>
 800c6a2:	7d23      	ldrb	r3, [r4, #20]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	68a3      	ldr	r3, [r4, #8]
 800c6a8:	d023      	beq.n	800c6f2 <ucdr_deserialize_double+0x11a>
 800c6aa:	79db      	ldrb	r3, [r3, #7]
 800c6ac:	702b      	strb	r3, [r5, #0]
 800c6ae:	68a3      	ldr	r3, [r4, #8]
 800c6b0:	799b      	ldrb	r3, [r3, #6]
 800c6b2:	706b      	strb	r3, [r5, #1]
 800c6b4:	68a3      	ldr	r3, [r4, #8]
 800c6b6:	795b      	ldrb	r3, [r3, #5]
 800c6b8:	70ab      	strb	r3, [r5, #2]
 800c6ba:	68a3      	ldr	r3, [r4, #8]
 800c6bc:	791b      	ldrb	r3, [r3, #4]
 800c6be:	70eb      	strb	r3, [r5, #3]
 800c6c0:	68a3      	ldr	r3, [r4, #8]
 800c6c2:	78db      	ldrb	r3, [r3, #3]
 800c6c4:	712b      	strb	r3, [r5, #4]
 800c6c6:	68a3      	ldr	r3, [r4, #8]
 800c6c8:	789b      	ldrb	r3, [r3, #2]
 800c6ca:	716b      	strb	r3, [r5, #5]
 800c6cc:	68a3      	ldr	r3, [r4, #8]
 800c6ce:	785b      	ldrb	r3, [r3, #1]
 800c6d0:	71ab      	strb	r3, [r5, #6]
 800c6d2:	68a3      	ldr	r3, [r4, #8]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	71eb      	strb	r3, [r5, #7]
 800c6d8:	68a2      	ldr	r2, [r4, #8]
 800c6da:	6923      	ldr	r3, [r4, #16]
 800c6dc:	3208      	adds	r2, #8
 800c6de:	3308      	adds	r3, #8
 800c6e0:	2108      	movs	r1, #8
 800c6e2:	60a2      	str	r2, [r4, #8]
 800c6e4:	6123      	str	r3, [r4, #16]
 800c6e6:	7561      	strb	r1, [r4, #21]
 800c6e8:	7da0      	ldrb	r0, [r4, #22]
 800c6ea:	f080 0001 	eor.w	r0, r0, #1
 800c6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	606b      	str	r3, [r5, #4]
 800c6f8:	602a      	str	r2, [r5, #0]
 800c6fa:	e7ed      	b.n	800c6d8 <ucdr_deserialize_double+0x100>
 800c6fc:	68a2      	ldr	r2, [r4, #8]
 800c6fe:	6923      	ldr	r3, [r4, #16]
 800c700:	7da0      	ldrb	r0, [r4, #22]
 800c702:	f884 9015 	strb.w	r9, [r4, #21]
 800c706:	1b92      	subs	r2, r2, r6
 800c708:	1b9b      	subs	r3, r3, r6
 800c70a:	60a2      	str	r2, [r4, #8]
 800c70c:	6123      	str	r3, [r4, #16]
 800c70e:	f080 0001 	eor.w	r0, r0, #1
 800c712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c716:	68a3      	ldr	r3, [r4, #8]
 800c718:	799b      	ldrb	r3, [r3, #6]
 800c71a:	706b      	strb	r3, [r5, #1]
 800c71c:	1cab      	adds	r3, r5, #2
 800c71e:	68a2      	ldr	r2, [r4, #8]
 800c720:	7952      	ldrb	r2, [r2, #5]
 800c722:	f803 2b01 	strb.w	r2, [r3], #1
 800c726:	68a2      	ldr	r2, [r4, #8]
 800c728:	7912      	ldrb	r2, [r2, #4]
 800c72a:	f803 2b01 	strb.w	r2, [r3], #1
 800c72e:	68a2      	ldr	r2, [r4, #8]
 800c730:	78d2      	ldrb	r2, [r2, #3]
 800c732:	f803 2b01 	strb.w	r2, [r3], #1
 800c736:	68a2      	ldr	r2, [r4, #8]
 800c738:	7892      	ldrb	r2, [r2, #2]
 800c73a:	f803 2b01 	strb.w	r2, [r3], #1
 800c73e:	68a2      	ldr	r2, [r4, #8]
 800c740:	7852      	ldrb	r2, [r2, #1]
 800c742:	f803 2b01 	strb.w	r2, [r3], #1
 800c746:	68a2      	ldr	r2, [r4, #8]
 800c748:	7812      	ldrb	r2, [r2, #0]
 800c74a:	701a      	strb	r2, [r3, #0]
 800c74c:	e796      	b.n	800c67c <ucdr_deserialize_double+0xa4>
 800c74e:	4639      	mov	r1, r7
 800c750:	4632      	mov	r2, r6
 800c752:	4628      	mov	r0, r5
 800c754:	f00d fbc7 	bl	8019ee6 <memcpy>
 800c758:	68a1      	ldr	r1, [r4, #8]
 800c75a:	4642      	mov	r2, r8
 800c75c:	19a8      	adds	r0, r5, r6
 800c75e:	f00d fbc2 	bl	8019ee6 <memcpy>
 800c762:	e78b      	b.n	800c67c <ucdr_deserialize_double+0xa4>

0800c764 <ucdr_deserialize_endian_double>:
 800c764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c768:	460f      	mov	r7, r1
 800c76a:	2108      	movs	r1, #8
 800c76c:	4604      	mov	r4, r0
 800c76e:	4615      	mov	r5, r2
 800c770:	f000 f926 	bl	800c9c0 <ucdr_buffer_alignment>
 800c774:	4601      	mov	r1, r0
 800c776:	4620      	mov	r0, r4
 800c778:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c77c:	f000 f964 	bl	800ca48 <ucdr_advance_buffer>
 800c780:	2108      	movs	r1, #8
 800c782:	4620      	mov	r0, r4
 800c784:	f000 f8bc 	bl	800c900 <ucdr_check_buffer_available_for>
 800c788:	2800      	cmp	r0, #0
 800c78a:	d159      	bne.n	800c840 <ucdr_deserialize_endian_double+0xdc>
 800c78c:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800c790:	4546      	cmp	r6, r8
 800c792:	d950      	bls.n	800c836 <ucdr_deserialize_endian_double+0xd2>
 800c794:	6923      	ldr	r3, [r4, #16]
 800c796:	60a6      	str	r6, [r4, #8]
 800c798:	eba6 0608 	sub.w	r6, r6, r8
 800c79c:	4433      	add	r3, r6
 800c79e:	f1c6 0a08 	rsb	sl, r6, #8
 800c7a2:	6123      	str	r3, [r4, #16]
 800c7a4:	4651      	mov	r1, sl
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f000 f8b6 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d073      	beq.n	800c898 <ucdr_deserialize_endian_double+0x134>
 800c7b0:	2f01      	cmp	r7, #1
 800c7b2:	f000 809a 	beq.w	800c8ea <ucdr_deserialize_endian_double+0x186>
 800c7b6:	f898 3007 	ldrb.w	r3, [r8, #7]
 800c7ba:	702b      	strb	r3, [r5, #0]
 800c7bc:	2e00      	cmp	r6, #0
 800c7be:	d078      	beq.n	800c8b2 <ucdr_deserialize_endian_double+0x14e>
 800c7c0:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c7c4:	706b      	strb	r3, [r5, #1]
 800c7c6:	2e01      	cmp	r6, #1
 800c7c8:	f105 0302 	add.w	r3, r5, #2
 800c7cc:	d075      	beq.n	800c8ba <ucdr_deserialize_endian_double+0x156>
 800c7ce:	f898 3005 	ldrb.w	r3, [r8, #5]
 800c7d2:	70ab      	strb	r3, [r5, #2]
 800c7d4:	2e02      	cmp	r6, #2
 800c7d6:	f105 0303 	add.w	r3, r5, #3
 800c7da:	d072      	beq.n	800c8c2 <ucdr_deserialize_endian_double+0x15e>
 800c7dc:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c7e0:	70eb      	strb	r3, [r5, #3]
 800c7e2:	2e03      	cmp	r6, #3
 800c7e4:	f105 0304 	add.w	r3, r5, #4
 800c7e8:	d06f      	beq.n	800c8ca <ucdr_deserialize_endian_double+0x166>
 800c7ea:	f898 3003 	ldrb.w	r3, [r8, #3]
 800c7ee:	712b      	strb	r3, [r5, #4]
 800c7f0:	2e04      	cmp	r6, #4
 800c7f2:	f105 0305 	add.w	r3, r5, #5
 800c7f6:	d06c      	beq.n	800c8d2 <ucdr_deserialize_endian_double+0x16e>
 800c7f8:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c7fc:	716b      	strb	r3, [r5, #5]
 800c7fe:	2e05      	cmp	r6, #5
 800c800:	f105 0306 	add.w	r3, r5, #6
 800c804:	d069      	beq.n	800c8da <ucdr_deserialize_endian_double+0x176>
 800c806:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c80a:	71ab      	strb	r3, [r5, #6]
 800c80c:	2e06      	cmp	r6, #6
 800c80e:	f105 0307 	add.w	r3, r5, #7
 800c812:	d066      	beq.n	800c8e2 <ucdr_deserialize_endian_double+0x17e>
 800c814:	f898 3000 	ldrb.w	r3, [r8]
 800c818:	71eb      	strb	r3, [r5, #7]
 800c81a:	6923      	ldr	r3, [r4, #16]
 800c81c:	68a2      	ldr	r2, [r4, #8]
 800c81e:	7da0      	ldrb	r0, [r4, #22]
 800c820:	3308      	adds	r3, #8
 800c822:	1b9e      	subs	r6, r3, r6
 800c824:	2308      	movs	r3, #8
 800c826:	4452      	add	r2, sl
 800c828:	7563      	strb	r3, [r4, #21]
 800c82a:	60a2      	str	r2, [r4, #8]
 800c82c:	6126      	str	r6, [r4, #16]
 800c82e:	f080 0001 	eor.w	r0, r0, #1
 800c832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c836:	2108      	movs	r1, #8
 800c838:	4620      	mov	r0, r4
 800c83a:	f000 f86d 	bl	800c918 <ucdr_check_final_buffer_behavior>
 800c83e:	b308      	cbz	r0, 800c884 <ucdr_deserialize_endian_double+0x120>
 800c840:	2f01      	cmp	r7, #1
 800c842:	68a3      	ldr	r3, [r4, #8]
 800c844:	d023      	beq.n	800c88e <ucdr_deserialize_endian_double+0x12a>
 800c846:	79db      	ldrb	r3, [r3, #7]
 800c848:	702b      	strb	r3, [r5, #0]
 800c84a:	68a3      	ldr	r3, [r4, #8]
 800c84c:	799b      	ldrb	r3, [r3, #6]
 800c84e:	706b      	strb	r3, [r5, #1]
 800c850:	68a3      	ldr	r3, [r4, #8]
 800c852:	795b      	ldrb	r3, [r3, #5]
 800c854:	70ab      	strb	r3, [r5, #2]
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	791b      	ldrb	r3, [r3, #4]
 800c85a:	70eb      	strb	r3, [r5, #3]
 800c85c:	68a3      	ldr	r3, [r4, #8]
 800c85e:	78db      	ldrb	r3, [r3, #3]
 800c860:	712b      	strb	r3, [r5, #4]
 800c862:	68a3      	ldr	r3, [r4, #8]
 800c864:	789b      	ldrb	r3, [r3, #2]
 800c866:	716b      	strb	r3, [r5, #5]
 800c868:	68a3      	ldr	r3, [r4, #8]
 800c86a:	785b      	ldrb	r3, [r3, #1]
 800c86c:	71ab      	strb	r3, [r5, #6]
 800c86e:	68a3      	ldr	r3, [r4, #8]
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	71eb      	strb	r3, [r5, #7]
 800c874:	68a2      	ldr	r2, [r4, #8]
 800c876:	6923      	ldr	r3, [r4, #16]
 800c878:	3208      	adds	r2, #8
 800c87a:	3308      	adds	r3, #8
 800c87c:	2108      	movs	r1, #8
 800c87e:	60a2      	str	r2, [r4, #8]
 800c880:	6123      	str	r3, [r4, #16]
 800c882:	7561      	strb	r1, [r4, #21]
 800c884:	7da0      	ldrb	r0, [r4, #22]
 800c886:	f080 0001 	eor.w	r0, r0, #1
 800c88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	606b      	str	r3, [r5, #4]
 800c894:	602a      	str	r2, [r5, #0]
 800c896:	e7ed      	b.n	800c874 <ucdr_deserialize_endian_double+0x110>
 800c898:	68a2      	ldr	r2, [r4, #8]
 800c89a:	6923      	ldr	r3, [r4, #16]
 800c89c:	7da0      	ldrb	r0, [r4, #22]
 800c89e:	f884 9015 	strb.w	r9, [r4, #21]
 800c8a2:	1b92      	subs	r2, r2, r6
 800c8a4:	1b9b      	subs	r3, r3, r6
 800c8a6:	60a2      	str	r2, [r4, #8]
 800c8a8:	6123      	str	r3, [r4, #16]
 800c8aa:	f080 0001 	eor.w	r0, r0, #1
 800c8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b2:	68a3      	ldr	r3, [r4, #8]
 800c8b4:	799b      	ldrb	r3, [r3, #6]
 800c8b6:	706b      	strb	r3, [r5, #1]
 800c8b8:	1cab      	adds	r3, r5, #2
 800c8ba:	68a2      	ldr	r2, [r4, #8]
 800c8bc:	7952      	ldrb	r2, [r2, #5]
 800c8be:	f803 2b01 	strb.w	r2, [r3], #1
 800c8c2:	68a2      	ldr	r2, [r4, #8]
 800c8c4:	7912      	ldrb	r2, [r2, #4]
 800c8c6:	f803 2b01 	strb.w	r2, [r3], #1
 800c8ca:	68a2      	ldr	r2, [r4, #8]
 800c8cc:	78d2      	ldrb	r2, [r2, #3]
 800c8ce:	f803 2b01 	strb.w	r2, [r3], #1
 800c8d2:	68a2      	ldr	r2, [r4, #8]
 800c8d4:	7892      	ldrb	r2, [r2, #2]
 800c8d6:	f803 2b01 	strb.w	r2, [r3], #1
 800c8da:	68a2      	ldr	r2, [r4, #8]
 800c8dc:	7852      	ldrb	r2, [r2, #1]
 800c8de:	f803 2b01 	strb.w	r2, [r3], #1
 800c8e2:	68a2      	ldr	r2, [r4, #8]
 800c8e4:	7812      	ldrb	r2, [r2, #0]
 800c8e6:	701a      	strb	r2, [r3, #0]
 800c8e8:	e797      	b.n	800c81a <ucdr_deserialize_endian_double+0xb6>
 800c8ea:	4641      	mov	r1, r8
 800c8ec:	4632      	mov	r2, r6
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	f00d faf9 	bl	8019ee6 <memcpy>
 800c8f4:	68a1      	ldr	r1, [r4, #8]
 800c8f6:	4652      	mov	r2, sl
 800c8f8:	19a8      	adds	r0, r5, r6
 800c8fa:	f00d faf4 	bl	8019ee6 <memcpy>
 800c8fe:	e78c      	b.n	800c81a <ucdr_deserialize_endian_double+0xb6>

0800c900 <ucdr_check_buffer_available_for>:
 800c900:	7d83      	ldrb	r3, [r0, #22]
 800c902:	b93b      	cbnz	r3, 800c914 <ucdr_check_buffer_available_for+0x14>
 800c904:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c908:	4419      	add	r1, r3
 800c90a:	4288      	cmp	r0, r1
 800c90c:	bf34      	ite	cc
 800c90e:	2000      	movcc	r0, #0
 800c910:	2001      	movcs	r0, #1
 800c912:	4770      	bx	lr
 800c914:	2000      	movs	r0, #0
 800c916:	4770      	bx	lr

0800c918 <ucdr_check_final_buffer_behavior>:
 800c918:	7d83      	ldrb	r3, [r0, #22]
 800c91a:	b943      	cbnz	r3, 800c92e <ucdr_check_final_buffer_behavior+0x16>
 800c91c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c920:	4291      	cmp	r1, r2
 800c922:	b510      	push	{r4, lr}
 800c924:	4604      	mov	r4, r0
 800c926:	d205      	bcs.n	800c934 <ucdr_check_final_buffer_behavior+0x1c>
 800c928:	2301      	movs	r3, #1
 800c92a:	4618      	mov	r0, r3
 800c92c:	bd10      	pop	{r4, pc}
 800c92e:	2300      	movs	r3, #0
 800c930:	4618      	mov	r0, r3
 800c932:	4770      	bx	lr
 800c934:	6982      	ldr	r2, [r0, #24]
 800c936:	b13a      	cbz	r2, 800c948 <ucdr_check_final_buffer_behavior+0x30>
 800c938:	69c1      	ldr	r1, [r0, #28]
 800c93a:	4790      	blx	r2
 800c93c:	f080 0301 	eor.w	r3, r0, #1
 800c940:	b2db      	uxtb	r3, r3
 800c942:	75a0      	strb	r0, [r4, #22]
 800c944:	4618      	mov	r0, r3
 800c946:	bd10      	pop	{r4, pc}
 800c948:	2001      	movs	r0, #1
 800c94a:	75a0      	strb	r0, [r4, #22]
 800c94c:	e7fa      	b.n	800c944 <ucdr_check_final_buffer_behavior+0x2c>
 800c94e:	bf00      	nop

0800c950 <ucdr_set_on_full_buffer_callback>:
 800c950:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop

0800c958 <ucdr_init_buffer_origin_offset_endian>:
 800c958:	b410      	push	{r4}
 800c95a:	9c01      	ldr	r4, [sp, #4]
 800c95c:	6001      	str	r1, [r0, #0]
 800c95e:	440a      	add	r2, r1
 800c960:	6042      	str	r2, [r0, #4]
 800c962:	190a      	adds	r2, r1, r4
 800c964:	441c      	add	r4, r3
 800c966:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c96a:	6082      	str	r2, [r0, #8]
 800c96c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c970:	7503      	strb	r3, [r0, #20]
 800c972:	2200      	movs	r2, #0
 800c974:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c97c:	7542      	strb	r2, [r0, #21]
 800c97e:	7582      	strb	r2, [r0, #22]
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop

0800c984 <ucdr_init_buffer_origin_offset>:
 800c984:	b510      	push	{r4, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	9c04      	ldr	r4, [sp, #16]
 800c98a:	9400      	str	r4, [sp, #0]
 800c98c:	2401      	movs	r4, #1
 800c98e:	9401      	str	r4, [sp, #4]
 800c990:	f7ff ffe2 	bl	800c958 <ucdr_init_buffer_origin_offset_endian>
 800c994:	b002      	add	sp, #8
 800c996:	bd10      	pop	{r4, pc}

0800c998 <ucdr_init_buffer_origin>:
 800c998:	b510      	push	{r4, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	2400      	movs	r4, #0
 800c99e:	9400      	str	r4, [sp, #0]
 800c9a0:	f7ff fff0 	bl	800c984 <ucdr_init_buffer_origin_offset>
 800c9a4:	b002      	add	sp, #8
 800c9a6:	bd10      	pop	{r4, pc}

0800c9a8 <ucdr_init_buffer>:
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	f7ff bff5 	b.w	800c998 <ucdr_init_buffer_origin>
 800c9ae:	bf00      	nop

0800c9b0 <ucdr_alignment>:
 800c9b0:	fbb0 f3f1 	udiv	r3, r0, r1
 800c9b4:	fb03 0011 	mls	r0, r3, r1, r0
 800c9b8:	1a08      	subs	r0, r1, r0
 800c9ba:	3901      	subs	r1, #1
 800c9bc:	4008      	ands	r0, r1
 800c9be:	4770      	bx	lr

0800c9c0 <ucdr_buffer_alignment>:
 800c9c0:	7d43      	ldrb	r3, [r0, #21]
 800c9c2:	428b      	cmp	r3, r1
 800c9c4:	d208      	bcs.n	800c9d8 <ucdr_buffer_alignment+0x18>
 800c9c6:	6900      	ldr	r0, [r0, #16]
 800c9c8:	fbb0 f3f1 	udiv	r3, r0, r1
 800c9cc:	fb01 0013 	mls	r0, r1, r3, r0
 800c9d0:	1a08      	subs	r0, r1, r0
 800c9d2:	3901      	subs	r1, #1
 800c9d4:	4008      	ands	r0, r1
 800c9d6:	4770      	bx	lr
 800c9d8:	2000      	movs	r0, #0
 800c9da:	4770      	bx	lr

0800c9dc <ucdr_align_to>:
 800c9dc:	b538      	push	{r3, r4, r5, lr}
 800c9de:	4604      	mov	r4, r0
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	f7ff ffed 	bl	800c9c0 <ucdr_buffer_alignment>
 800c9e6:	68a3      	ldr	r3, [r4, #8]
 800c9e8:	6921      	ldr	r1, [r4, #16]
 800c9ea:	7565      	strb	r5, [r4, #21]
 800c9ec:	181a      	adds	r2, r3, r0
 800c9ee:	6863      	ldr	r3, [r4, #4]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	4408      	add	r0, r1
 800c9f4:	bf28      	it	cs
 800c9f6:	4613      	movcs	r3, r2
 800c9f8:	6120      	str	r0, [r4, #16]
 800c9fa:	60a3      	str	r3, [r4, #8]
 800c9fc:	bd38      	pop	{r3, r4, r5, pc}
 800c9fe:	bf00      	nop

0800ca00 <ucdr_buffer_length>:
 800ca00:	6882      	ldr	r2, [r0, #8]
 800ca02:	6800      	ldr	r0, [r0, #0]
 800ca04:	1a10      	subs	r0, r2, r0
 800ca06:	4770      	bx	lr

0800ca08 <ucdr_buffer_remaining>:
 800ca08:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ca0c:	1a10      	subs	r0, r2, r0
 800ca0e:	4770      	bx	lr

0800ca10 <ucdr_check_final_buffer_behavior_array>:
 800ca10:	b538      	push	{r3, r4, r5, lr}
 800ca12:	7d83      	ldrb	r3, [r0, #22]
 800ca14:	b963      	cbnz	r3, 800ca30 <ucdr_check_final_buffer_behavior_array+0x20>
 800ca16:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	460d      	mov	r5, r1
 800ca20:	d308      	bcc.n	800ca34 <ucdr_check_final_buffer_behavior_array+0x24>
 800ca22:	b139      	cbz	r1, 800ca34 <ucdr_check_final_buffer_behavior_array+0x24>
 800ca24:	6983      	ldr	r3, [r0, #24]
 800ca26:	b163      	cbz	r3, 800ca42 <ucdr_check_final_buffer_behavior_array+0x32>
 800ca28:	69c1      	ldr	r1, [r0, #28]
 800ca2a:	4798      	blx	r3
 800ca2c:	75a0      	strb	r0, [r4, #22]
 800ca2e:	b108      	cbz	r0, 800ca34 <ucdr_check_final_buffer_behavior_array+0x24>
 800ca30:	2000      	movs	r0, #0
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	4620      	mov	r0, r4
 800ca36:	f7ff ffe7 	bl	800ca08 <ucdr_buffer_remaining>
 800ca3a:	42a8      	cmp	r0, r5
 800ca3c:	bf28      	it	cs
 800ca3e:	4628      	movcs	r0, r5
 800ca40:	bd38      	pop	{r3, r4, r5, pc}
 800ca42:	2301      	movs	r3, #1
 800ca44:	7583      	strb	r3, [r0, #22]
 800ca46:	e7f3      	b.n	800ca30 <ucdr_check_final_buffer_behavior_array+0x20>

0800ca48 <ucdr_advance_buffer>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	460d      	mov	r5, r1
 800ca4e:	f7ff ff57 	bl	800c900 <ucdr_check_buffer_available_for>
 800ca52:	b178      	cbz	r0, 800ca74 <ucdr_advance_buffer+0x2c>
 800ca54:	6923      	ldr	r3, [r4, #16]
 800ca56:	68a2      	ldr	r2, [r4, #8]
 800ca58:	442b      	add	r3, r5
 800ca5a:	6123      	str	r3, [r4, #16]
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	442a      	add	r2, r5
 800ca60:	7563      	strb	r3, [r4, #21]
 800ca62:	60a2      	str	r2, [r4, #8]
 800ca64:	bd38      	pop	{r3, r4, r5, pc}
 800ca66:	68a2      	ldr	r2, [r4, #8]
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	4402      	add	r2, r0
 800ca6c:	4403      	add	r3, r0
 800ca6e:	1a2d      	subs	r5, r5, r0
 800ca70:	60a2      	str	r2, [r4, #8]
 800ca72:	6123      	str	r3, [r4, #16]
 800ca74:	4629      	mov	r1, r5
 800ca76:	2201      	movs	r2, #1
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f7ff ffc9 	bl	800ca10 <ucdr_check_final_buffer_behavior_array>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d1f1      	bne.n	800ca66 <ucdr_advance_buffer+0x1e>
 800ca82:	2301      	movs	r3, #1
 800ca84:	7563      	strb	r3, [r4, #21]
 800ca86:	bd38      	pop	{r3, r4, r5, pc}

0800ca88 <rcl_get_zero_initialized_init_options>:
 800ca88:	2000      	movs	r0, #0
 800ca8a:	4770      	bx	lr

0800ca8c <rcl_init_options_init>:
 800ca8c:	b084      	sub	sp, #16
 800ca8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca90:	b097      	sub	sp, #92	@ 0x5c
 800ca92:	ae1d      	add	r6, sp, #116	@ 0x74
 800ca94:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	d058      	beq.n	800cb4e <rcl_init_options_init+0xc2>
 800ca9c:	6803      	ldr	r3, [r0, #0]
 800ca9e:	4605      	mov	r5, r0
 800caa0:	b133      	cbz	r3, 800cab0 <rcl_init_options_init+0x24>
 800caa2:	2464      	movs	r4, #100	@ 0x64
 800caa4:	4620      	mov	r0, r4
 800caa6:	b017      	add	sp, #92	@ 0x5c
 800caa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800caac:	b004      	add	sp, #16
 800caae:	4770      	bx	lr
 800cab0:	4630      	mov	r0, r6
 800cab2:	f001 f9cf 	bl	800de54 <rcutils_allocator_is_valid>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	d049      	beq.n	800cb4e <rcl_init_options_init+0xc2>
 800caba:	46b4      	mov	ip, r6
 800cabc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cac0:	ac11      	add	r4, sp, #68	@ 0x44
 800cac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cac4:	f8dc 3000 	ldr.w	r3, [ip]
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cacc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cace:	2050      	movs	r0, #80	@ 0x50
 800cad0:	4798      	blx	r3
 800cad2:	4604      	mov	r4, r0
 800cad4:	6028      	str	r0, [r5, #0]
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d03b      	beq.n	800cb52 <rcl_init_options_init+0xc6>
 800cada:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800cade:	4686      	mov	lr, r0
 800cae0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cae4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cae8:	f8dc 3000 	ldr.w	r3, [ip]
 800caec:	f8ce 3000 	str.w	r3, [lr]
 800caf0:	a802      	add	r0, sp, #8
 800caf2:	f001 fa41 	bl	800df78 <rmw_get_zero_initialized_init_options>
 800caf6:	f10d 0e08 	add.w	lr, sp, #8
 800cafa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cafe:	f104 0c18 	add.w	ip, r4, #24
 800cb02:	682f      	ldr	r7, [r5, #0]
 800cb04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cb1c:	ac20      	add	r4, sp, #128	@ 0x80
 800cb1e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cb22:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cb26:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cb2a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800cb2e:	f107 0018 	add.w	r0, r7, #24
 800cb32:	f001 fa4f 	bl	800dfd4 <rmw_init_options_init>
 800cb36:	4604      	mov	r4, r0
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d0b3      	beq.n	800caa4 <rcl_init_options_init+0x18>
 800cb3c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cb3e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cb40:	6828      	ldr	r0, [r5, #0]
 800cb42:	4798      	blx	r3
 800cb44:	4620      	mov	r0, r4
 800cb46:	f007 f9a5 	bl	8013e94 <rcl_convert_rmw_ret_to_rcl_ret>
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	e7aa      	b.n	800caa4 <rcl_init_options_init+0x18>
 800cb4e:	240b      	movs	r4, #11
 800cb50:	e7a8      	b.n	800caa4 <rcl_init_options_init+0x18>
 800cb52:	240a      	movs	r4, #10
 800cb54:	e7a6      	b.n	800caa4 <rcl_init_options_init+0x18>
 800cb56:	bf00      	nop

0800cb58 <rcl_init_options_fini>:
 800cb58:	b530      	push	{r4, r5, lr}
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	b1f0      	cbz	r0, 800cb9c <rcl_init_options_fini+0x44>
 800cb5e:	6803      	ldr	r3, [r0, #0]
 800cb60:	4604      	mov	r4, r0
 800cb62:	b1db      	cbz	r3, 800cb9c <rcl_init_options_fini+0x44>
 800cb64:	469c      	mov	ip, r3
 800cb66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cb6a:	f10d 0e04 	add.w	lr, sp, #4
 800cb6e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cb72:	f8dc 3000 	ldr.w	r3, [ip]
 800cb76:	f8ce 3000 	str.w	r3, [lr]
 800cb7a:	a801      	add	r0, sp, #4
 800cb7c:	f001 f96a 	bl	800de54 <rcutils_allocator_is_valid>
 800cb80:	b160      	cbz	r0, 800cb9c <rcl_init_options_fini+0x44>
 800cb82:	6820      	ldr	r0, [r4, #0]
 800cb84:	3018      	adds	r0, #24
 800cb86:	f001 fad5 	bl	800e134 <rmw_init_options_fini>
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	b950      	cbnz	r0, 800cba4 <rcl_init_options_fini+0x4c>
 800cb8e:	6820      	ldr	r0, [r4, #0]
 800cb90:	9b02      	ldr	r3, [sp, #8]
 800cb92:	9905      	ldr	r1, [sp, #20]
 800cb94:	4798      	blx	r3
 800cb96:	4628      	mov	r0, r5
 800cb98:	b007      	add	sp, #28
 800cb9a:	bd30      	pop	{r4, r5, pc}
 800cb9c:	250b      	movs	r5, #11
 800cb9e:	4628      	mov	r0, r5
 800cba0:	b007      	add	sp, #28
 800cba2:	bd30      	pop	{r4, r5, pc}
 800cba4:	f007 f976 	bl	8013e94 <rcl_convert_rmw_ret_to_rcl_ret>
 800cba8:	4605      	mov	r5, r0
 800cbaa:	e7f8      	b.n	800cb9e <rcl_init_options_fini+0x46>

0800cbac <rcl_init_options_copy>:
 800cbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb0:	b094      	sub	sp, #80	@ 0x50
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d058      	beq.n	800cc68 <rcl_init_options_copy+0xbc>
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	6800      	ldr	r0, [r0, #0]
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d054      	beq.n	800cc68 <rcl_init_options_copy+0xbc>
 800cbbe:	460e      	mov	r6, r1
 800cbc0:	f001 f948 	bl	800de54 <rcutils_allocator_is_valid>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d04f      	beq.n	800cc68 <rcl_init_options_copy+0xbc>
 800cbc8:	2e00      	cmp	r6, #0
 800cbca:	d04d      	beq.n	800cc68 <rcl_init_options_copy+0xbc>
 800cbcc:	6833      	ldr	r3, [r6, #0]
 800cbce:	b123      	cbz	r3, 800cbda <rcl_init_options_copy+0x2e>
 800cbd0:	2464      	movs	r4, #100	@ 0x64
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	b014      	add	sp, #80	@ 0x50
 800cbd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbda:	6827      	ldr	r7, [r4, #0]
 800cbdc:	46bc      	mov	ip, r7
 800cbde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cbe2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800cbe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbe6:	f8dc 3000 	ldr.w	r3, [ip]
 800cbea:	f8d7 8000 	ldr.w	r8, [r7]
 800cbee:	602b      	str	r3, [r5, #0]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	2050      	movs	r0, #80	@ 0x50
 800cbf4:	47c0      	blx	r8
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	6030      	str	r0, [r6, #0]
 800cbfa:	b3d0      	cbz	r0, 800cc72 <rcl_init_options_copy+0xc6>
 800cbfc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800cc00:	4686      	mov	lr, r0
 800cc02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc0a:	f8dc 3000 	ldr.w	r3, [ip]
 800cc0e:	f8ce 3000 	str.w	r3, [lr]
 800cc12:	4668      	mov	r0, sp
 800cc14:	f001 f9b0 	bl	800df78 <rmw_get_zero_initialized_init_options>
 800cc18:	46ee      	mov	lr, sp
 800cc1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cc1e:	f105 0c18 	add.w	ip, r5, #24
 800cc22:	6824      	ldr	r4, [r4, #0]
 800cc24:	6835      	ldr	r5, [r6, #0]
 800cc26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cc2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cc36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc3a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cc3e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cc42:	f104 0018 	add.w	r0, r4, #24
 800cc46:	f105 0118 	add.w	r1, r5, #24
 800cc4a:	f001 fa2b 	bl	800e0a4 <rmw_init_options_copy>
 800cc4e:	4604      	mov	r4, r0
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d0be      	beq.n	800cbd2 <rcl_init_options_copy+0x26>
 800cc54:	f001 f90c 	bl	800de70 <rcutils_get_error_string>
 800cc58:	f001 f922 	bl	800dea0 <rcutils_reset_error>
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f7ff ff7b 	bl	800cb58 <rcl_init_options_fini>
 800cc62:	b140      	cbz	r0, 800cc76 <rcl_init_options_copy+0xca>
 800cc64:	4604      	mov	r4, r0
 800cc66:	e7b4      	b.n	800cbd2 <rcl_init_options_copy+0x26>
 800cc68:	240b      	movs	r4, #11
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	b014      	add	sp, #80	@ 0x50
 800cc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc72:	240a      	movs	r4, #10
 800cc74:	e7ad      	b.n	800cbd2 <rcl_init_options_copy+0x26>
 800cc76:	4620      	mov	r0, r4
 800cc78:	b014      	add	sp, #80	@ 0x50
 800cc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc7e:	f007 b909 	b.w	8013e94 <rcl_convert_rmw_ret_to_rcl_ret>
 800cc82:	bf00      	nop

0800cc84 <rcl_init_options_set_domain_id>:
 800cc84:	b120      	cbz	r0, 800cc90 <rcl_init_options_set_domain_id+0xc>
 800cc86:	6803      	ldr	r3, [r0, #0]
 800cc88:	b113      	cbz	r3, 800cc90 <rcl_init_options_set_domain_id+0xc>
 800cc8a:	6259      	str	r1, [r3, #36]	@ 0x24
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	4770      	bx	lr
 800cc90:	200b      	movs	r0, #11
 800cc92:	4770      	bx	lr

0800cc94 <rcl_get_zero_initialized_publisher>:
 800cc94:	4b01      	ldr	r3, [pc, #4]	@ (800cc9c <rcl_get_zero_initialized_publisher+0x8>)
 800cc96:	6818      	ldr	r0, [r3, #0]
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	0801b99c 	.word	0x0801b99c

0800cca0 <rcl_publisher_init>:
 800cca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca4:	b088      	sub	sp, #32
 800cca6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800cca8:	2d00      	cmp	r5, #0
 800ccaa:	d069      	beq.n	800cd80 <rcl_publisher_init+0xe0>
 800ccac:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	4648      	mov	r0, r9
 800ccb4:	460e      	mov	r6, r1
 800ccb6:	4690      	mov	r8, r2
 800ccb8:	461f      	mov	r7, r3
 800ccba:	f001 f8cb 	bl	800de54 <rcutils_allocator_is_valid>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d05e      	beq.n	800cd80 <rcl_publisher_init+0xe0>
 800ccc2:	2c00      	cmp	r4, #0
 800ccc4:	d05c      	beq.n	800cd80 <rcl_publisher_init+0xe0>
 800ccc6:	f8d4 a000 	ldr.w	sl, [r4]
 800ccca:	f1ba 0f00 	cmp.w	sl, #0
 800ccce:	d004      	beq.n	800ccda <rcl_publisher_init+0x3a>
 800ccd0:	2764      	movs	r7, #100	@ 0x64
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	b008      	add	sp, #32
 800ccd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccda:	4630      	mov	r0, r6
 800ccdc:	f007 fbd4 	bl	8014488 <rcl_node_is_valid>
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d052      	beq.n	800cd8a <rcl_publisher_init+0xea>
 800cce4:	f1b8 0f00 	cmp.w	r8, #0
 800cce8:	d04a      	beq.n	800cd80 <rcl_publisher_init+0xe0>
 800ccea:	2f00      	cmp	r7, #0
 800ccec:	d048      	beq.n	800cd80 <rcl_publisher_init+0xe0>
 800ccee:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800ccf2:	aa07      	add	r2, sp, #28
 800ccf4:	9205      	str	r2, [sp, #20]
 800ccf6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800ccfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccfe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cd02:	f8cd a01c 	str.w	sl, [sp, #28]
 800cd06:	4639      	mov	r1, r7
 800cd08:	e899 000c 	ldmia.w	r9, {r2, r3}
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f007 fc0f 	bl	8014530 <rcl_node_resolve_name>
 800cd12:	4607      	mov	r7, r0
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d14f      	bne.n	800cdb8 <rcl_publisher_init+0x118>
 800cd18:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800cd1a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cd1c:	20c8      	movs	r0, #200	@ 0xc8
 800cd1e:	4798      	blx	r3
 800cd20:	6020      	str	r0, [r4, #0]
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d04e      	beq.n	800cdc4 <rcl_publisher_init+0x124>
 800cd26:	4630      	mov	r0, r6
 800cd28:	f007 fbd0 	bl	80144cc <rcl_node_get_rmw_handle>
 800cd2c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	9a07      	ldr	r2, [sp, #28]
 800cd34:	6827      	ldr	r7, [r4, #0]
 800cd36:	462b      	mov	r3, r5
 800cd38:	4641      	mov	r1, r8
 800cd3a:	f001 fd23 	bl	800e784 <rmw_create_publisher>
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800cd44:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cd48:	b370      	cbz	r0, 800cda8 <rcl_publisher_init+0x108>
 800cd4a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800cd4e:	f001 fdf7 	bl	800e940 <rmw_publisher_get_actual_qos>
 800cd52:	6823      	ldr	r3, [r4, #0]
 800cd54:	4607      	mov	r7, r0
 800cd56:	b9d0      	cbnz	r0, 800cd8e <rcl_publisher_init+0xee>
 800cd58:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800cd5c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800cd60:	4629      	mov	r1, r5
 800cd62:	2270      	movs	r2, #112	@ 0x70
 800cd64:	4618      	mov	r0, r3
 800cd66:	f00d f8be 	bl	8019ee6 <memcpy>
 800cd6a:	6832      	ldr	r2, [r6, #0]
 800cd6c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800cd70:	9807      	ldr	r0, [sp, #28]
 800cd72:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800cd74:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cd76:	4798      	blx	r3
 800cd78:	4638      	mov	r0, r7
 800cd7a:	b008      	add	sp, #32
 800cd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd80:	270b      	movs	r7, #11
 800cd82:	4638      	mov	r0, r7
 800cd84:	b008      	add	sp, #32
 800cd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd8a:	27c8      	movs	r7, #200	@ 0xc8
 800cd8c:	e7a1      	b.n	800ccd2 <rcl_publisher_init+0x32>
 800cd8e:	b18b      	cbz	r3, 800cdb4 <rcl_publisher_init+0x114>
 800cd90:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cd94:	b142      	cbz	r2, 800cda8 <rcl_publisher_init+0x108>
 800cd96:	4630      	mov	r0, r6
 800cd98:	f007 fb98 	bl	80144cc <rcl_node_get_rmw_handle>
 800cd9c:	6823      	ldr	r3, [r4, #0]
 800cd9e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800cda2:	f001 fddd 	bl	800e960 <rmw_destroy_publisher>
 800cda6:	6823      	ldr	r3, [r4, #0]
 800cda8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800cdaa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cdac:	4618      	mov	r0, r3
 800cdae:	4790      	blx	r2
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	2701      	movs	r7, #1
 800cdb6:	e7db      	b.n	800cd70 <rcl_publisher_init+0xd0>
 800cdb8:	2867      	cmp	r0, #103	@ 0x67
 800cdba:	d0d9      	beq.n	800cd70 <rcl_publisher_init+0xd0>
 800cdbc:	2869      	cmp	r0, #105	@ 0x69
 800cdbe:	d003      	beq.n	800cdc8 <rcl_publisher_init+0x128>
 800cdc0:	280a      	cmp	r0, #10
 800cdc2:	d1f7      	bne.n	800cdb4 <rcl_publisher_init+0x114>
 800cdc4:	270a      	movs	r7, #10
 800cdc6:	e7d3      	b.n	800cd70 <rcl_publisher_init+0xd0>
 800cdc8:	2767      	movs	r7, #103	@ 0x67
 800cdca:	e7d1      	b.n	800cd70 <rcl_publisher_init+0xd0>

0800cdcc <rcl_publisher_get_default_options>:
 800cdcc:	b570      	push	{r4, r5, r6, lr}
 800cdce:	4d14      	ldr	r5, [pc, #80]	@ (800ce20 <rcl_publisher_get_default_options+0x54>)
 800cdd0:	4914      	ldr	r1, [pc, #80]	@ (800ce24 <rcl_publisher_get_default_options+0x58>)
 800cdd2:	b088      	sub	sp, #32
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	2250      	movs	r2, #80	@ 0x50
 800cdd8:	4628      	mov	r0, r5
 800cdda:	f00d f884 	bl	8019ee6 <memcpy>
 800cdde:	a802      	add	r0, sp, #8
 800cde0:	f001 f82a 	bl	800de38 <rcutils_get_default_allocator>
 800cde4:	f10d 0c08 	add.w	ip, sp, #8
 800cde8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cdec:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800cdf0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cdf4:	466e      	mov	r6, sp
 800cdf6:	f8dc 3000 	ldr.w	r3, [ip]
 800cdfa:	f8ce 3000 	str.w	r3, [lr]
 800cdfe:	4630      	mov	r0, r6
 800ce00:	f001 f8ca 	bl	800df98 <rmw_get_default_publisher_options>
 800ce04:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ce08:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ce0c:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce10:	2270      	movs	r2, #112	@ 0x70
 800ce12:	4629      	mov	r1, r5
 800ce14:	4620      	mov	r0, r4
 800ce16:	f00d f866 	bl	8019ee6 <memcpy>
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	b008      	add	sp, #32
 800ce1e:	bd70      	pop	{r4, r5, r6, pc}
 800ce20:	20006ca0 	.word	0x20006ca0
 800ce24:	0801b9a0 	.word	0x0801b9a0

0800ce28 <rcl_publish>:
 800ce28:	b1f8      	cbz	r0, 800ce6a <rcl_publish+0x42>
 800ce2a:	6803      	ldr	r3, [r0, #0]
 800ce2c:	b570      	push	{r4, r5, r6, lr}
 800ce2e:	4604      	mov	r4, r0
 800ce30:	b1b3      	cbz	r3, 800ce60 <rcl_publish+0x38>
 800ce32:	4616      	mov	r6, r2
 800ce34:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ce38:	b192      	cbz	r2, 800ce60 <rcl_publish+0x38>
 800ce3a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ce3e:	460d      	mov	r5, r1
 800ce40:	f007 f846 	bl	8013ed0 <rcl_context_is_valid>
 800ce44:	b160      	cbz	r0, 800ce60 <rcl_publish+0x38>
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ce4c:	b140      	cbz	r0, 800ce60 <rcl_publish+0x38>
 800ce4e:	b155      	cbz	r5, 800ce66 <rcl_publish+0x3e>
 800ce50:	4632      	mov	r2, r6
 800ce52:	4629      	mov	r1, r5
 800ce54:	f001 fc36 	bl	800e6c4 <rmw_publish>
 800ce58:	3800      	subs	r0, #0
 800ce5a:	bf18      	it	ne
 800ce5c:	2001      	movne	r0, #1
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
 800ce60:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ce64:	bd70      	pop	{r4, r5, r6, pc}
 800ce66:	200b      	movs	r0, #11
 800ce68:	bd70      	pop	{r4, r5, r6, pc}
 800ce6a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ce6e:	4770      	bx	lr

0800ce70 <rcl_publisher_is_valid>:
 800ce70:	b1a0      	cbz	r0, 800ce9c <rcl_publisher_is_valid+0x2c>
 800ce72:	6803      	ldr	r3, [r0, #0]
 800ce74:	b510      	push	{r4, lr}
 800ce76:	4604      	mov	r4, r0
 800ce78:	b173      	cbz	r3, 800ce98 <rcl_publisher_is_valid+0x28>
 800ce7a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ce7e:	b15a      	cbz	r2, 800ce98 <rcl_publisher_is_valid+0x28>
 800ce80:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ce84:	f007 f824 	bl	8013ed0 <rcl_context_is_valid>
 800ce88:	b130      	cbz	r0, 800ce98 <rcl_publisher_is_valid+0x28>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ce90:	3800      	subs	r0, #0
 800ce92:	bf18      	it	ne
 800ce94:	2001      	movne	r0, #1
 800ce96:	bd10      	pop	{r4, pc}
 800ce98:	2000      	movs	r0, #0
 800ce9a:	bd10      	pop	{r4, pc}
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	4770      	bx	lr

0800cea0 <rcl_publisher_is_valid_except_context>:
 800cea0:	b130      	cbz	r0, 800ceb0 <rcl_publisher_is_valid_except_context+0x10>
 800cea2:	6800      	ldr	r0, [r0, #0]
 800cea4:	b120      	cbz	r0, 800ceb0 <rcl_publisher_is_valid_except_context+0x10>
 800cea6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ceaa:	3800      	subs	r0, #0
 800ceac:	bf18      	it	ne
 800ceae:	2001      	movne	r0, #1
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop

0800ceb4 <_rclc_check_for_new_data>:
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d046      	beq.n	800cf46 <_rclc_check_for_new_data+0x92>
 800ceb8:	b510      	push	{r4, lr}
 800ceba:	7802      	ldrb	r2, [r0, #0]
 800cebc:	b084      	sub	sp, #16
 800cebe:	4603      	mov	r3, r0
 800cec0:	2a0a      	cmp	r2, #10
 800cec2:	d842      	bhi.n	800cf4a <_rclc_check_for_new_data+0x96>
 800cec4:	e8df f002 	tbb	[pc, r2]
 800cec8:	14181212 	.word	0x14181212
 800cecc:	06060614 	.word	0x06060614
 800ced0:	2e1a      	.short	0x2e1a
 800ced2:	16          	.byte	0x16
 800ced3:	00          	.byte	0x00
 800ced4:	6a0a      	ldr	r2, [r1, #32]
 800ced6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ced8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cedc:	2000      	movs	r0, #0
 800cede:	1a12      	subs	r2, r2, r0
 800cee0:	bf18      	it	ne
 800cee2:	2201      	movne	r2, #1
 800cee4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800cee8:	b004      	add	sp, #16
 800ceea:	bd10      	pop	{r4, pc}
 800ceec:	680a      	ldr	r2, [r1, #0]
 800ceee:	e7f2      	b.n	800ced6 <_rclc_check_for_new_data+0x22>
 800cef0:	698a      	ldr	r2, [r1, #24]
 800cef2:	e7f0      	b.n	800ced6 <_rclc_check_for_new_data+0x22>
 800cef4:	688a      	ldr	r2, [r1, #8]
 800cef6:	e7ee      	b.n	800ced6 <_rclc_check_for_new_data+0x22>
 800cef8:	690a      	ldr	r2, [r1, #16]
 800cefa:	e7ec      	b.n	800ced6 <_rclc_check_for_new_data+0x22>
 800cefc:	685c      	ldr	r4, [r3, #4]
 800cefe:	4608      	mov	r0, r1
 800cf00:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800cf04:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800cf08:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800cf0c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800cf16:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800cf1a:	f104 0110 	add.w	r1, r4, #16
 800cf1e:	f009 f9b7 	bl	8016290 <rcl_action_client_wait_set_get_entities_ready>
 800cf22:	e7e1      	b.n	800cee8 <_rclc_check_for_new_data+0x34>
 800cf24:	685c      	ldr	r4, [r3, #4]
 800cf26:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800cf2a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800cf2e:	e9cd 3200 	strd	r3, r2, [sp]
 800cf32:	4608      	mov	r0, r1
 800cf34:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800cf38:	f104 0220 	add.w	r2, r4, #32
 800cf3c:	f104 0110 	add.w	r1, r4, #16
 800cf40:	f009 fbbe 	bl	80166c0 <rcl_action_server_wait_set_get_entities_ready>
 800cf44:	e7d0      	b.n	800cee8 <_rclc_check_for_new_data+0x34>
 800cf46:	200b      	movs	r0, #11
 800cf48:	4770      	bx	lr
 800cf4a:	2001      	movs	r0, #1
 800cf4c:	e7cc      	b.n	800cee8 <_rclc_check_for_new_data+0x34>
 800cf4e:	bf00      	nop

0800cf50 <_rclc_take_new_data>:
 800cf50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf52:	b09b      	sub	sp, #108	@ 0x6c
 800cf54:	2800      	cmp	r0, #0
 800cf56:	f000 8088 	beq.w	800d06a <_rclc_take_new_data+0x11a>
 800cf5a:	7803      	ldrb	r3, [r0, #0]
 800cf5c:	4604      	mov	r4, r0
 800cf5e:	2b0a      	cmp	r3, #10
 800cf60:	f200 8167 	bhi.w	800d232 <_rclc_take_new_data+0x2e2>
 800cf64:	e8df f003 	tbb	[pc, r3]
 800cf68:	44152d2d 	.word	0x44152d2d
 800cf6c:	19191944 	.word	0x19191944
 800cf70:	065a      	.short	0x065a
 800cf72:	15          	.byte	0x15
 800cf73:	00          	.byte	0x00
 800cf74:	6840      	ldr	r0, [r0, #4]
 800cf76:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f040 80b2 	bne.w	800d0e4 <_rclc_take_new_data+0x194>
 800cf80:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f040 80e4 	bne.w	800d152 <_rclc_take_new_data+0x202>
 800cf8a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d16f      	bne.n	800d072 <_rclc_take_new_data+0x122>
 800cf92:	2500      	movs	r5, #0
 800cf94:	4628      	mov	r0, r5
 800cf96:	b01b      	add	sp, #108	@ 0x6c
 800cf98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf9a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cf9c:	6a0b      	ldr	r3, [r1, #32]
 800cf9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d0f5      	beq.n	800cf92 <_rclc_take_new_data+0x42>
 800cfa6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cfaa:	f104 0110 	add.w	r1, r4, #16
 800cfae:	f007 fd1b 	bl	80149e8 <rcl_take_request>
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d0ec      	beq.n	800cf92 <_rclc_take_new_data+0x42>
 800cfb8:	f240 2359 	movw	r3, #601	@ 0x259
 800cfbc:	4298      	cmp	r0, r3
 800cfbe:	d013      	beq.n	800cfe8 <_rclc_take_new_data+0x98>
 800cfc0:	e029      	b.n	800d016 <_rclc_take_new_data+0xc6>
 800cfc2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cfc4:	680b      	ldr	r3, [r1, #0]
 800cfc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d0e1      	beq.n	800cf92 <_rclc_take_new_data+0x42>
 800cfce:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	aa0a      	add	r2, sp, #40	@ 0x28
 800cfd6:	f007 fd69 	bl	8014aac <rcl_take>
 800cfda:	4605      	mov	r5, r0
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d0d9      	beq.n	800cf94 <_rclc_take_new_data+0x44>
 800cfe0:	f240 1391 	movw	r3, #401	@ 0x191
 800cfe4:	4298      	cmp	r0, r3
 800cfe6:	d116      	bne.n	800d016 <_rclc_take_new_data+0xc6>
 800cfe8:	2300      	movs	r3, #0
 800cfea:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800cfee:	e7d1      	b.n	800cf94 <_rclc_take_new_data+0x44>
 800cff0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cff2:	698b      	ldr	r3, [r1, #24]
 800cff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d0ca      	beq.n	800cf92 <_rclc_take_new_data+0x42>
 800cffc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d000:	f104 0110 	add.w	r1, r4, #16
 800d004:	f006 fef4 	bl	8013df0 <rcl_take_response>
 800d008:	4605      	mov	r5, r0
 800d00a:	2800      	cmp	r0, #0
 800d00c:	d0c1      	beq.n	800cf92 <_rclc_take_new_data+0x42>
 800d00e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d012:	4298      	cmp	r0, r3
 800d014:	d0be      	beq.n	800cf94 <_rclc_take_new_data+0x44>
 800d016:	f000 ff43 	bl	800dea0 <rcutils_reset_error>
 800d01a:	e7bb      	b.n	800cf94 <_rclc_take_new_data+0x44>
 800d01c:	6840      	ldr	r0, [r0, #4]
 800d01e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d022:	2b00      	cmp	r3, #0
 800d024:	d17d      	bne.n	800d122 <_rclc_take_new_data+0x1d2>
 800d026:	69c3      	ldr	r3, [r0, #28]
 800d028:	b11b      	cbz	r3, 800d032 <_rclc_take_new_data+0xe2>
 800d02a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d144      	bne.n	800d0bc <_rclc_take_new_data+0x16c>
 800d032:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d036:	2b00      	cmp	r3, #0
 800d038:	f040 80ac 	bne.w	800d194 <_rclc_take_new_data+0x244>
 800d03c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d040:	2b00      	cmp	r3, #0
 800d042:	d0a6      	beq.n	800cf92 <_rclc_take_new_data+0x42>
 800d044:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d046:	a90a      	add	r1, sp, #40	@ 0x28
 800d048:	3010      	adds	r0, #16
 800d04a:	f008 fff9 	bl	8016040 <rcl_action_take_result_response>
 800d04e:	4605      	mov	r5, r0
 800d050:	2800      	cmp	r0, #0
 800d052:	d1e0      	bne.n	800d016 <_rclc_take_new_data+0xc6>
 800d054:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d058:	6860      	ldr	r0, [r4, #4]
 800d05a:	f009 fc55 	bl	8016908 <rclc_action_find_handle_by_result_request_sequence_number>
 800d05e:	2800      	cmp	r0, #0
 800d060:	d098      	beq.n	800cf94 <_rclc_take_new_data+0x44>
 800d062:	2301      	movs	r3, #1
 800d064:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800d068:	e794      	b.n	800cf94 <_rclc_take_new_data+0x44>
 800d06a:	250b      	movs	r5, #11
 800d06c:	4628      	mov	r0, r5
 800d06e:	b01b      	add	sp, #108	@ 0x6c
 800d070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d072:	ae04      	add	r6, sp, #16
 800d074:	aa0a      	add	r2, sp, #40	@ 0x28
 800d076:	3010      	adds	r0, #16
 800d078:	4631      	mov	r1, r6
 800d07a:	f009 fa55 	bl	8016528 <rcl_action_take_cancel_request>
 800d07e:	4605      	mov	r5, r0
 800d080:	2800      	cmp	r0, #0
 800d082:	d1c8      	bne.n	800d016 <_rclc_take_new_data+0xc6>
 800d084:	6860      	ldr	r0, [r4, #4]
 800d086:	a90a      	add	r1, sp, #40	@ 0x28
 800d088:	f009 fbfc 	bl	8016884 <rclc_action_find_goal_handle_by_uuid>
 800d08c:	4607      	mov	r7, r0
 800d08e:	2800      	cmp	r0, #0
 800d090:	f000 80bb 	beq.w	800d20a <_rclc_take_new_data+0x2ba>
 800d094:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d098:	2101      	movs	r1, #1
 800d09a:	f009 fb7d 	bl	8016798 <rcl_action_transition_goal_state>
 800d09e:	2803      	cmp	r0, #3
 800d0a0:	4684      	mov	ip, r0
 800d0a2:	f040 80a7 	bne.w	800d1f4 <_rclc_take_new_data+0x2a4>
 800d0a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d0a8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d0ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d0b2:	e884 0003 	stmia.w	r4, {r0, r1}
 800d0b6:	f887 c008 	strb.w	ip, [r7, #8]
 800d0ba:	e76b      	b.n	800cf94 <_rclc_take_new_data+0x44>
 800d0bc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d0be:	3010      	adds	r0, #16
 800d0c0:	f009 f83e 	bl	8016140 <rcl_action_take_feedback>
 800d0c4:	4605      	mov	r5, r0
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d1a5      	bne.n	800d016 <_rclc_take_new_data+0xc6>
 800d0ca:	6860      	ldr	r0, [r4, #4]
 800d0cc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d0ce:	f009 fbd9 	bl	8016884 <rclc_action_find_goal_handle_by_uuid>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	f000 80a3 	beq.w	800d220 <_rclc_take_new_data+0x2d0>
 800d0da:	2201      	movs	r2, #1
 800d0dc:	6860      	ldr	r0, [r4, #4]
 800d0de:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d0e2:	e7a6      	b.n	800d032 <_rclc_take_new_data+0xe2>
 800d0e4:	f009 fba8 	bl	8016838 <rclc_action_take_goal_handle>
 800d0e8:	4606      	mov	r6, r0
 800d0ea:	6860      	ldr	r0, [r4, #4]
 800d0ec:	2e00      	cmp	r6, #0
 800d0ee:	f43f af47 	beq.w	800cf80 <_rclc_take_new_data+0x30>
 800d0f2:	6070      	str	r0, [r6, #4]
 800d0f4:	69f2      	ldr	r2, [r6, #28]
 800d0f6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d0fa:	3010      	adds	r0, #16
 800d0fc:	f009 f95c 	bl	80163b8 <rcl_action_take_goal_request>
 800d100:	4605      	mov	r5, r0
 800d102:	2800      	cmp	r0, #0
 800d104:	f040 808e 	bne.w	800d224 <_rclc_take_new_data+0x2d4>
 800d108:	69f7      	ldr	r7, [r6, #28]
 800d10a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d10c:	7235      	strb	r5, [r6, #8]
 800d10e:	f8c6 0009 	str.w	r0, [r6, #9]
 800d112:	f8c6 100d 	str.w	r1, [r6, #13]
 800d116:	6860      	ldr	r0, [r4, #4]
 800d118:	f8c6 2011 	str.w	r2, [r6, #17]
 800d11c:	f8c6 3015 	str.w	r3, [r6, #21]
 800d120:	e72e      	b.n	800cf80 <_rclc_take_new_data+0x30>
 800d122:	aa04      	add	r2, sp, #16
 800d124:	a90a      	add	r1, sp, #40	@ 0x28
 800d126:	3010      	adds	r0, #16
 800d128:	f008 ff12 	bl	8015f50 <rcl_action_take_goal_response>
 800d12c:	4605      	mov	r5, r0
 800d12e:	2800      	cmp	r0, #0
 800d130:	f47f af71 	bne.w	800d016 <_rclc_take_new_data+0xc6>
 800d134:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d138:	6860      	ldr	r0, [r4, #4]
 800d13a:	f009 fbd3 	bl	80168e4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800d13e:	b130      	cbz	r0, 800d14e <_rclc_take_new_data+0x1fe>
 800d140:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d144:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d148:	2201      	movs	r2, #1
 800d14a:	f880 2020 	strb.w	r2, [r0, #32]
 800d14e:	6860      	ldr	r0, [r4, #4]
 800d150:	e769      	b.n	800d026 <_rclc_take_new_data+0xd6>
 800d152:	aa04      	add	r2, sp, #16
 800d154:	3010      	adds	r0, #16
 800d156:	a90a      	add	r1, sp, #40	@ 0x28
 800d158:	f009 f9a6 	bl	80164a8 <rcl_action_take_result_request>
 800d15c:	4605      	mov	r5, r0
 800d15e:	2800      	cmp	r0, #0
 800d160:	f47f af59 	bne.w	800d016 <_rclc_take_new_data+0xc6>
 800d164:	6860      	ldr	r0, [r4, #4]
 800d166:	a904      	add	r1, sp, #16
 800d168:	f009 fb8c 	bl	8016884 <rclc_action_find_goal_handle_by_uuid>
 800d16c:	4607      	mov	r7, r0
 800d16e:	b160      	cbz	r0, 800d18a <_rclc_take_new_data+0x23a>
 800d170:	ad0a      	add	r5, sp, #40	@ 0x28
 800d172:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d178:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d17a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d17e:	f04f 0c02 	mov.w	ip, #2
 800d182:	e886 0003 	stmia.w	r6, {r0, r1}
 800d186:	f887 c008 	strb.w	ip, [r7, #8]
 800d18a:	6860      	ldr	r0, [r4, #4]
 800d18c:	2300      	movs	r3, #0
 800d18e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d192:	e6fa      	b.n	800cf8a <_rclc_take_new_data+0x3a>
 800d194:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d198:	a90a      	add	r1, sp, #40	@ 0x28
 800d19a:	3010      	adds	r0, #16
 800d19c:	f008 ff90 	bl	80160c0 <rcl_action_take_cancel_response>
 800d1a0:	4605      	mov	r5, r0
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	f47f af37 	bne.w	800d016 <_rclc_take_new_data+0xc6>
 800d1a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d1ac:	6860      	ldr	r0, [r4, #4]
 800d1ae:	f009 fbbd 	bl	801692c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	6860      	ldr	r0, [r4, #4]
 800d1b6:	2e00      	cmp	r6, #0
 800d1b8:	f43f af40 	beq.w	800d03c <_rclc_take_new_data+0xec>
 800d1bc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d1be:	2701      	movs	r7, #1
 800d1c0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f43f af3a 	beq.w	800d03c <_rclc_take_new_data+0xec>
 800d1c8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d1ca:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d1ce:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d1d2:	f009 fb57 	bl	8016884 <rclc_action_find_goal_handle_by_uuid>
 800d1d6:	b138      	cbz	r0, 800d1e8 <_rclc_take_new_data+0x298>
 800d1d8:	6860      	ldr	r0, [r4, #4]
 800d1da:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d1dc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d1e0:	3501      	adds	r5, #1
 800d1e2:	42ab      	cmp	r3, r5
 800d1e4:	d8f0      	bhi.n	800d1c8 <_rclc_take_new_data+0x278>
 800d1e6:	e729      	b.n	800d03c <_rclc_take_new_data+0xec>
 800d1e8:	6860      	ldr	r0, [r4, #4]
 800d1ea:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d1ec:	3501      	adds	r5, #1
 800d1ee:	42ab      	cmp	r3, r5
 800d1f0:	d8ea      	bhi.n	800d1c8 <_rclc_take_new_data+0x278>
 800d1f2:	e723      	b.n	800d03c <_rclc_take_new_data+0xec>
 800d1f4:	ab06      	add	r3, sp, #24
 800d1f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d1fc:	2103      	movs	r1, #3
 800d1fe:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d202:	6860      	ldr	r0, [r4, #4]
 800d204:	f009 fc08 	bl	8016a18 <rclc_action_server_goal_cancel_reject>
 800d208:	e6c4      	b.n	800cf94 <_rclc_take_new_data+0x44>
 800d20a:	ab06      	add	r3, sp, #24
 800d20c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d20e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d212:	2102      	movs	r1, #2
 800d214:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d218:	6860      	ldr	r0, [r4, #4]
 800d21a:	f009 fbfd 	bl	8016a18 <rclc_action_server_goal_cancel_reject>
 800d21e:	e6b9      	b.n	800cf94 <_rclc_take_new_data+0x44>
 800d220:	6860      	ldr	r0, [r4, #4]
 800d222:	e706      	b.n	800d032 <_rclc_take_new_data+0xe2>
 800d224:	6860      	ldr	r0, [r4, #4]
 800d226:	4631      	mov	r1, r6
 800d228:	f009 fb16 	bl	8016858 <rclc_action_remove_used_goal_handle>
 800d22c:	f000 fe38 	bl	800dea0 <rcutils_reset_error>
 800d230:	e6b0      	b.n	800cf94 <_rclc_take_new_data+0x44>
 800d232:	2501      	movs	r5, #1
 800d234:	e6ae      	b.n	800cf94 <_rclc_take_new_data+0x44>
 800d236:	bf00      	nop

0800d238 <_rclc_execute.part.0>:
 800d238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d23a:	7803      	ldrb	r3, [r0, #0]
 800d23c:	b087      	sub	sp, #28
 800d23e:	4604      	mov	r4, r0
 800d240:	2b0a      	cmp	r3, #10
 800d242:	f200 8136 	bhi.w	800d4b2 <_rclc_execute.part.0+0x27a>
 800d246:	e8df f003 	tbb	[pc, r3]
 800d24a:	435e      	.short	0x435e
 800d24c:	06a1664f 	.word	0x06a1664f
 800d250:	6c1e0606 	.word	0x6c1e0606
 800d254:	59          	.byte	0x59
 800d255:	00          	.byte	0x00
 800d256:	2b06      	cmp	r3, #6
 800d258:	f000 8122 	beq.w	800d4a0 <_rclc_execute.part.0+0x268>
 800d25c:	2b07      	cmp	r3, #7
 800d25e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d260:	f040 8118 	bne.w	800d494 <_rclc_execute.part.0+0x25c>
 800d264:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d268:	6880      	ldr	r0, [r0, #8]
 800d26a:	4798      	blx	r3
 800d26c:	f104 0110 	add.w	r1, r4, #16
 800d270:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d272:	6860      	ldr	r0, [r4, #4]
 800d274:	f007 fbf8 	bl	8014a68 <rcl_send_response>
 800d278:	2800      	cmp	r0, #0
 800d27a:	d033      	beq.n	800d2e4 <_rclc_execute.part.0+0xac>
 800d27c:	9005      	str	r0, [sp, #20]
 800d27e:	f000 fe0f 	bl	800dea0 <rcutils_reset_error>
 800d282:	9805      	ldr	r0, [sp, #20]
 800d284:	e02e      	b.n	800d2e4 <_rclc_execute.part.0+0xac>
 800d286:	6840      	ldr	r0, [r0, #4]
 800d288:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	f000 8086 	beq.w	800d39e <_rclc_execute.part.0+0x166>
 800d292:	2600      	movs	r6, #0
 800d294:	2701      	movs	r7, #1
 800d296:	e004      	b.n	800d2a2 <_rclc_execute.part.0+0x6a>
 800d298:	f009 faa8 	bl	80167ec <rclc_action_send_result_request>
 800d29c:	b998      	cbnz	r0, 800d2c6 <_rclc_execute.part.0+0x8e>
 800d29e:	722f      	strb	r7, [r5, #8]
 800d2a0:	6860      	ldr	r0, [r4, #4]
 800d2a2:	f009 fb55 	bl	8016950 <rclc_action_find_first_handle_with_goal_response>
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d077      	beq.n	800d39c <_rclc_execute.part.0+0x164>
 800d2ac:	6863      	ldr	r3, [r4, #4]
 800d2ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d2b0:	699b      	ldr	r3, [r3, #24]
 800d2b2:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d2b6:	f885 6020 	strb.w	r6, [r5, #32]
 800d2ba:	4798      	blx	r3
 800d2bc:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1e8      	bne.n	800d298 <_rclc_execute.part.0+0x60>
 800d2c6:	6860      	ldr	r0, [r4, #4]
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	f009 fac5 	bl	8016858 <rclc_action_remove_used_goal_handle>
 800d2ce:	e7e7      	b.n	800d2a0 <_rclc_execute.part.0+0x68>
 800d2d0:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d2d4:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d2d8:	2d00      	cmp	r5, #0
 800d2da:	f000 80c9 	beq.w	800d470 <_rclc_execute.part.0+0x238>
 800d2de:	6880      	ldr	r0, [r0, #8]
 800d2e0:	4798      	blx	r3
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	b007      	add	sp, #28
 800d2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e8:	6840      	ldr	r0, [r0, #4]
 800d2ea:	f007 feef 	bl	80150cc <rcl_timer_call>
 800d2ee:	f240 3321 	movw	r3, #801	@ 0x321
 800d2f2:	4298      	cmp	r0, r3
 800d2f4:	d004      	beq.n	800d300 <_rclc_execute.part.0+0xc8>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d0f4      	beq.n	800d2e4 <_rclc_execute.part.0+0xac>
 800d2fa:	e7bf      	b.n	800d27c <_rclc_execute.part.0+0x44>
 800d2fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d2fe:	4798      	blx	r3
 800d300:	2000      	movs	r0, #0
 800d302:	b007      	add	sp, #28
 800d304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d306:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d30a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d30c:	b925      	cbnz	r5, 800d318 <_rclc_execute.part.0+0xe0>
 800d30e:	4628      	mov	r0, r5
 800d310:	4798      	blx	r3
 800d312:	4628      	mov	r0, r5
 800d314:	e7e6      	b.n	800d2e4 <_rclc_execute.part.0+0xac>
 800d316:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d318:	68a0      	ldr	r0, [r4, #8]
 800d31a:	4798      	blx	r3
 800d31c:	2000      	movs	r0, #0
 800d31e:	b007      	add	sp, #28
 800d320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d322:	6840      	ldr	r0, [r0, #4]
 800d324:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d328:	bb3b      	cbnz	r3, 800d37a <_rclc_execute.part.0+0x142>
 800d32a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d07b      	beq.n	800d42a <_rclc_execute.part.0+0x1f2>
 800d332:	f640 0634 	movw	r6, #2100	@ 0x834
 800d336:	2701      	movs	r7, #1
 800d338:	e007      	b.n	800d34a <_rclc_execute.part.0+0x112>
 800d33a:	4628      	mov	r0, r5
 800d33c:	f009 fb20 	bl	8016980 <rclc_action_server_response_goal_request>
 800d340:	6860      	ldr	r0, [r4, #4]
 800d342:	4629      	mov	r1, r5
 800d344:	f009 fa88 	bl	8016858 <rclc_action_remove_used_goal_handle>
 800d348:	6860      	ldr	r0, [r4, #4]
 800d34a:	2100      	movs	r1, #0
 800d34c:	f009 fab2 	bl	80168b4 <rclc_action_find_first_handle_by_status>
 800d350:	4605      	mov	r5, r0
 800d352:	2800      	cmp	r0, #0
 800d354:	d066      	beq.n	800d424 <_rclc_execute.part.0+0x1ec>
 800d356:	6863      	ldr	r3, [r4, #4]
 800d358:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d35a:	699b      	ldr	r3, [r3, #24]
 800d35c:	4798      	blx	r3
 800d35e:	42b0      	cmp	r0, r6
 800d360:	f04f 0100 	mov.w	r1, #0
 800d364:	d1e9      	bne.n	800d33a <_rclc_execute.part.0+0x102>
 800d366:	2101      	movs	r1, #1
 800d368:	4628      	mov	r0, r5
 800d36a:	f009 fb09 	bl	8016980 <rclc_action_server_response_goal_request>
 800d36e:	722f      	strb	r7, [r5, #8]
 800d370:	e7ea      	b.n	800d348 <_rclc_execute.part.0+0x110>
 800d372:	6848      	ldr	r0, [r1, #4]
 800d374:	f009 fa70 	bl	8016858 <rclc_action_remove_used_goal_handle>
 800d378:	6860      	ldr	r0, [r4, #4]
 800d37a:	f009 faa7 	bl	80168cc <rclc_action_find_first_terminated_handle>
 800d37e:	4601      	mov	r1, r0
 800d380:	2800      	cmp	r0, #0
 800d382:	d1f6      	bne.n	800d372 <_rclc_execute.part.0+0x13a>
 800d384:	6860      	ldr	r0, [r4, #4]
 800d386:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800d38a:	e7ce      	b.n	800d32a <_rclc_execute.part.0+0xf2>
 800d38c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d38e:	6880      	ldr	r0, [r0, #8]
 800d390:	f104 0110 	add.w	r1, r4, #16
 800d394:	4798      	blx	r3
 800d396:	2000      	movs	r0, #0
 800d398:	b007      	add	sp, #28
 800d39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d39c:	6860      	ldr	r0, [r4, #4]
 800d39e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d3a2:	b18b      	cbz	r3, 800d3c8 <_rclc_execute.part.0+0x190>
 800d3a4:	68c5      	ldr	r5, [r0, #12]
 800d3a6:	b32d      	cbz	r5, 800d3f4 <_rclc_execute.part.0+0x1bc>
 800d3a8:	2600      	movs	r6, #0
 800d3aa:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d3ae:	b143      	cbz	r3, 800d3c2 <_rclc_execute.part.0+0x18a>
 800d3b0:	69c3      	ldr	r3, [r0, #28]
 800d3b2:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d3b6:	b123      	cbz	r3, 800d3c2 <_rclc_execute.part.0+0x18a>
 800d3b8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d3ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d3bc:	4628      	mov	r0, r5
 800d3be:	4798      	blx	r3
 800d3c0:	6860      	ldr	r0, [r4, #4]
 800d3c2:	682d      	ldr	r5, [r5, #0]
 800d3c4:	2d00      	cmp	r5, #0
 800d3c6:	d1f0      	bne.n	800d3aa <_rclc_execute.part.0+0x172>
 800d3c8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d3cc:	b193      	cbz	r3, 800d3f4 <_rclc_execute.part.0+0x1bc>
 800d3ce:	68c5      	ldr	r5, [r0, #12]
 800d3d0:	b185      	cbz	r5, 800d3f4 <_rclc_execute.part.0+0x1bc>
 800d3d2:	2600      	movs	r6, #0
 800d3d4:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d3d8:	b14b      	cbz	r3, 800d3ee <_rclc_execute.part.0+0x1b6>
 800d3da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d3dc:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d3e0:	b12b      	cbz	r3, 800d3ee <_rclc_execute.part.0+0x1b6>
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d3e8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d3ea:	4798      	blx	r3
 800d3ec:	6860      	ldr	r0, [r4, #4]
 800d3ee:	682d      	ldr	r5, [r5, #0]
 800d3f0:	2d00      	cmp	r5, #0
 800d3f2:	d1ef      	bne.n	800d3d4 <_rclc_execute.part.0+0x19c>
 800d3f4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d081      	beq.n	800d300 <_rclc_execute.part.0+0xc8>
 800d3fc:	2700      	movs	r7, #0
 800d3fe:	e00b      	b.n	800d418 <_rclc_execute.part.0+0x1e0>
 800d400:	6863      	ldr	r3, [r4, #4]
 800d402:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d404:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d406:	6a1e      	ldr	r6, [r3, #32]
 800d408:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d40c:	47b0      	blx	r6
 800d40e:	6860      	ldr	r0, [r4, #4]
 800d410:	4629      	mov	r1, r5
 800d412:	f009 fa21 	bl	8016858 <rclc_action_remove_used_goal_handle>
 800d416:	6860      	ldr	r0, [r4, #4]
 800d418:	f009 faa6 	bl	8016968 <rclc_action_find_first_handle_with_result_response>
 800d41c:	4605      	mov	r5, r0
 800d41e:	2800      	cmp	r0, #0
 800d420:	d1ee      	bne.n	800d400 <_rclc_execute.part.0+0x1c8>
 800d422:	e76d      	b.n	800d300 <_rclc_execute.part.0+0xc8>
 800d424:	6860      	ldr	r0, [r4, #4]
 800d426:	f880 5020 	strb.w	r5, [r0, #32]
 800d42a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f43f af66 	beq.w	800d300 <_rclc_execute.part.0+0xc8>
 800d434:	68c5      	ldr	r5, [r0, #12]
 800d436:	b1b5      	cbz	r5, 800d466 <_rclc_execute.part.0+0x22e>
 800d438:	2602      	movs	r6, #2
 800d43a:	e001      	b.n	800d440 <_rclc_execute.part.0+0x208>
 800d43c:	682d      	ldr	r5, [r5, #0]
 800d43e:	b195      	cbz	r5, 800d466 <_rclc_execute.part.0+0x22e>
 800d440:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d444:	2b03      	cmp	r3, #3
 800d446:	d1f9      	bne.n	800d43c <_rclc_execute.part.0+0x204>
 800d448:	69c3      	ldr	r3, [r0, #28]
 800d44a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d44c:	4628      	mov	r0, r5
 800d44e:	4798      	blx	r3
 800d450:	4603      	mov	r3, r0
 800d452:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d456:	4628      	mov	r0, r5
 800d458:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d45c:	b163      	cbz	r3, 800d478 <_rclc_execute.part.0+0x240>
 800d45e:	f009 faaf 	bl	80169c0 <rclc_action_server_goal_cancel_accept>
 800d462:	6860      	ldr	r0, [r4, #4]
 800d464:	e7ea      	b.n	800d43c <_rclc_execute.part.0+0x204>
 800d466:	2300      	movs	r3, #0
 800d468:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d46c:	4618      	mov	r0, r3
 800d46e:	e739      	b.n	800d2e4 <_rclc_execute.part.0+0xac>
 800d470:	4628      	mov	r0, r5
 800d472:	4798      	blx	r3
 800d474:	4628      	mov	r0, r5
 800d476:	e735      	b.n	800d2e4 <_rclc_execute.part.0+0xac>
 800d478:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d47a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d47e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d482:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d486:	6860      	ldr	r0, [r4, #4]
 800d488:	2101      	movs	r1, #1
 800d48a:	f009 fac5 	bl	8016a18 <rclc_action_server_goal_cancel_reject>
 800d48e:	722e      	strb	r6, [r5, #8]
 800d490:	6860      	ldr	r0, [r4, #4]
 800d492:	e7d3      	b.n	800d43c <_rclc_execute.part.0+0x204>
 800d494:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d496:	6880      	ldr	r0, [r0, #8]
 800d498:	4798      	blx	r3
 800d49a:	f104 0110 	add.w	r1, r4, #16
 800d49e:	e6e7      	b.n	800d270 <_rclc_execute.part.0+0x38>
 800d4a0:	f100 0110 	add.w	r1, r0, #16
 800d4a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d4a6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d4a8:	6880      	ldr	r0, [r0, #8]
 800d4aa:	9105      	str	r1, [sp, #20]
 800d4ac:	4798      	blx	r3
 800d4ae:	9905      	ldr	r1, [sp, #20]
 800d4b0:	e6de      	b.n	800d270 <_rclc_execute.part.0+0x38>
 800d4b2:	2001      	movs	r0, #1
 800d4b4:	e716      	b.n	800d2e4 <_rclc_execute.part.0+0xac>
 800d4b6:	bf00      	nop

0800d4b8 <rclc_executor_trigger_any>:
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	d03f      	beq.n	800d53c <rclc_executor_trigger_any+0x84>
 800d4bc:	2900      	cmp	r1, #0
 800d4be:	d03e      	beq.n	800d53e <rclc_executor_trigger_any+0x86>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d037      	beq.n	800d53c <rclc_executor_trigger_any+0x84>
 800d4cc:	b430      	push	{r4, r5}
 800d4ce:	f893 c000 	ldrb.w	ip, [r3]
 800d4d2:	f1bc 0f08 	cmp.w	ip, #8
 800d4d6:	d11e      	bne.n	800d516 <rclc_executor_trigger_any+0x5e>
 800d4d8:	685c      	ldr	r4, [r3, #4]
 800d4da:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d4dc:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d4e0:	d105      	bne.n	800d4ee <rclc_executor_trigger_any+0x36>
 800d4e2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d4e6:	b910      	cbnz	r0, 800d4ee <rclc_executor_trigger_any+0x36>
 800d4e8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d4ec:	b128      	cbz	r0, 800d4fa <rclc_executor_trigger_any+0x42>
 800d4ee:	bc30      	pop	{r4, r5}
 800d4f0:	4770      	bx	lr
 800d4f2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d1f9      	bne.n	800d4ee <rclc_executor_trigger_any+0x36>
 800d4fa:	3201      	adds	r2, #1
 800d4fc:	4291      	cmp	r1, r2
 800d4fe:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d502:	d018      	beq.n	800d536 <rclc_executor_trigger_any+0x7e>
 800d504:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d508:	2800      	cmp	r0, #0
 800d50a:	d0f0      	beq.n	800d4ee <rclc_executor_trigger_any+0x36>
 800d50c:	f893 c000 	ldrb.w	ip, [r3]
 800d510:	f1bc 0f08 	cmp.w	ip, #8
 800d514:	d0e0      	beq.n	800d4d8 <rclc_executor_trigger_any+0x20>
 800d516:	f1bc 0f09 	cmp.w	ip, #9
 800d51a:	d1ea      	bne.n	800d4f2 <rclc_executor_trigger_any+0x3a>
 800d51c:	685c      	ldr	r4, [r3, #4]
 800d51e:	6a25      	ldr	r5, [r4, #32]
 800d520:	2d00      	cmp	r5, #0
 800d522:	d1e4      	bne.n	800d4ee <rclc_executor_trigger_any+0x36>
 800d524:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d528:	2800      	cmp	r0, #0
 800d52a:	d1e0      	bne.n	800d4ee <rclc_executor_trigger_any+0x36>
 800d52c:	3201      	adds	r2, #1
 800d52e:	4291      	cmp	r1, r2
 800d530:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d534:	d1e6      	bne.n	800d504 <rclc_executor_trigger_any+0x4c>
 800d536:	2000      	movs	r0, #0
 800d538:	bc30      	pop	{r4, r5}
 800d53a:	4770      	bx	lr
 800d53c:	4770      	bx	lr
 800d53e:	4608      	mov	r0, r1
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop

0800d544 <rclc_executor_get_zero_initialized_executor>:
 800d544:	b510      	push	{r4, lr}
 800d546:	4903      	ldr	r1, [pc, #12]	@ (800d554 <rclc_executor_get_zero_initialized_executor+0x10>)
 800d548:	4604      	mov	r4, r0
 800d54a:	2288      	movs	r2, #136	@ 0x88
 800d54c:	f00c fccb 	bl	8019ee6 <memcpy>
 800d550:	4620      	mov	r0, r4
 800d552:	bd10      	pop	{r4, pc}
 800d554:	0801b9f0 	.word	0x0801b9f0

0800d558 <rclc_executor_init>:
 800d558:	2800      	cmp	r0, #0
 800d55a:	d05f      	beq.n	800d61c <rclc_executor_init+0xc4>
 800d55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d560:	460c      	mov	r4, r1
 800d562:	b0b0      	sub	sp, #192	@ 0xc0
 800d564:	2900      	cmp	r1, #0
 800d566:	d051      	beq.n	800d60c <rclc_executor_init+0xb4>
 800d568:	4605      	mov	r5, r0
 800d56a:	4618      	mov	r0, r3
 800d56c:	4616      	mov	r6, r2
 800d56e:	461f      	mov	r7, r3
 800d570:	f000 fc70 	bl	800de54 <rcutils_allocator_is_valid>
 800d574:	2800      	cmp	r0, #0
 800d576:	d049      	beq.n	800d60c <rclc_executor_init+0xb4>
 800d578:	2e00      	cmp	r6, #0
 800d57a:	d047      	beq.n	800d60c <rclc_executor_init+0xb4>
 800d57c:	492c      	ldr	r1, [pc, #176]	@ (800d630 <rclc_executor_init+0xd8>)
 800d57e:	2288      	movs	r2, #136	@ 0x88
 800d580:	a80e      	add	r0, sp, #56	@ 0x38
 800d582:	f00c fcb0 	bl	8019ee6 <memcpy>
 800d586:	a90e      	add	r1, sp, #56	@ 0x38
 800d588:	2288      	movs	r2, #136	@ 0x88
 800d58a:	4628      	mov	r0, r5
 800d58c:	f00c fcab 	bl	8019ee6 <memcpy>
 800d590:	602c      	str	r4, [r5, #0]
 800d592:	4668      	mov	r0, sp
 800d594:	60ae      	str	r6, [r5, #8]
 800d596:	466c      	mov	r4, sp
 800d598:	f007 ff0a 	bl	80153b0 <rcl_get_zero_initialized_wait_set>
 800d59c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d59e:	f105 0c14 	add.w	ip, r5, #20
 800d5a2:	f8d7 8000 	ldr.w	r8, [r7]
 800d5a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5b6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d628 <rclc_executor_init+0xd0>
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	f8cc 3000 	str.w	r3, [ip]
 800d5c0:	6939      	ldr	r1, [r7, #16]
 800d5c2:	612f      	str	r7, [r5, #16]
 800d5c4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800d5c8:	01b0      	lsls	r0, r6, #6
 800d5ca:	47c0      	blx	r8
 800d5cc:	6068      	str	r0, [r5, #4]
 800d5ce:	b338      	cbz	r0, 800d620 <rclc_executor_init+0xc8>
 800d5d0:	2400      	movs	r4, #0
 800d5d2:	e000      	b.n	800d5d6 <rclc_executor_init+0x7e>
 800d5d4:	6868      	ldr	r0, [r5, #4]
 800d5d6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d5da:	4631      	mov	r1, r6
 800d5dc:	3401      	adds	r4, #1
 800d5de:	f000 faa3 	bl	800db28 <rclc_executor_handle_init>
 800d5e2:	42a6      	cmp	r6, r4
 800d5e4:	d1f6      	bne.n	800d5d4 <rclc_executor_init+0x7c>
 800d5e6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d5ea:	f000 fa93 	bl	800db14 <rclc_executor_handle_counters_zero_init>
 800d5ee:	4a11      	ldr	r2, [pc, #68]	@ (800d634 <rclc_executor_init+0xdc>)
 800d5f0:	686b      	ldr	r3, [r5, #4]
 800d5f2:	2000      	movs	r0, #0
 800d5f4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800d5f8:	b163      	cbz	r3, 800d614 <rclc_executor_init+0xbc>
 800d5fa:	692b      	ldr	r3, [r5, #16]
 800d5fc:	b153      	cbz	r3, 800d614 <rclc_executor_init+0xbc>
 800d5fe:	68ab      	ldr	r3, [r5, #8]
 800d600:	b143      	cbz	r3, 800d614 <rclc_executor_init+0xbc>
 800d602:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800d606:	b030      	add	sp, #192	@ 0xc0
 800d608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d60c:	200b      	movs	r0, #11
 800d60e:	b030      	add	sp, #192	@ 0xc0
 800d610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d614:	4618      	mov	r0, r3
 800d616:	b030      	add	sp, #192	@ 0xc0
 800d618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d61c:	200b      	movs	r0, #11
 800d61e:	4770      	bx	lr
 800d620:	200a      	movs	r0, #10
 800d622:	e7f4      	b.n	800d60e <rclc_executor_init+0xb6>
 800d624:	f3af 8000 	nop.w
 800d628:	3b9aca00 	.word	0x3b9aca00
 800d62c:	00000000 	.word	0x00000000
 800d630:	0801b9f0 	.word	0x0801b9f0
 800d634:	0800d4b9 	.word	0x0800d4b9

0800d638 <rclc_executor_add_timer>:
 800d638:	b300      	cbz	r0, 800d67c <rclc_executor_add_timer+0x44>
 800d63a:	b1f9      	cbz	r1, 800d67c <rclc_executor_add_timer+0x44>
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d642:	4293      	cmp	r3, r2
 800d644:	4604      	mov	r4, r0
 800d646:	d301      	bcc.n	800d64c <rclc_executor_add_timer+0x14>
 800d648:	2001      	movs	r0, #1
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	6840      	ldr	r0, [r0, #4]
 800d64e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d652:	019d      	lsls	r5, r3, #6
 800d654:	6051      	str	r1, [r2, #4]
 800d656:	2102      	movs	r1, #2
 800d658:	5341      	strh	r1, [r0, r5]
 800d65a:	3301      	adds	r3, #1
 800d65c:	2000      	movs	r0, #0
 800d65e:	2101      	movs	r1, #1
 800d660:	f104 0514 	add.w	r5, r4, #20
 800d664:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d666:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d668:	4628      	mov	r0, r5
 800d66a:	60e3      	str	r3, [r4, #12]
 800d66c:	f007 feb4 	bl	80153d8 <rcl_wait_set_is_valid>
 800d670:	b930      	cbnz	r0, 800d680 <rclc_executor_add_timer+0x48>
 800d672:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d674:	3301      	adds	r3, #1
 800d676:	2000      	movs	r0, #0
 800d678:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
 800d67c:	200b      	movs	r0, #11
 800d67e:	4770      	bx	lr
 800d680:	4628      	mov	r0, r5
 800d682:	f007 feaf 	bl	80153e4 <rcl_wait_set_fini>
 800d686:	2800      	cmp	r0, #0
 800d688:	d0f3      	beq.n	800d672 <rclc_executor_add_timer+0x3a>
 800d68a:	bd38      	pop	{r3, r4, r5, pc}

0800d68c <rclc_executor_add_service>:
 800d68c:	b370      	cbz	r0, 800d6ec <rclc_executor_add_service+0x60>
 800d68e:	b369      	cbz	r1, 800d6ec <rclc_executor_add_service+0x60>
 800d690:	b362      	cbz	r2, 800d6ec <rclc_executor_add_service+0x60>
 800d692:	b35b      	cbz	r3, 800d6ec <rclc_executor_add_service+0x60>
 800d694:	b538      	push	{r3, r4, r5, lr}
 800d696:	4604      	mov	r4, r0
 800d698:	9804      	ldr	r0, [sp, #16]
 800d69a:	b378      	cbz	r0, 800d6fc <rclc_executor_add_service+0x70>
 800d69c:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800d6a0:	42a8      	cmp	r0, r5
 800d6a2:	d301      	bcc.n	800d6a8 <rclc_executor_add_service+0x1c>
 800d6a4:	2001      	movs	r0, #1
 800d6a6:	bd38      	pop	{r3, r4, r5, pc}
 800d6a8:	6865      	ldr	r5, [r4, #4]
 800d6aa:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800d6ae:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800d6b2:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800d6b6:	9b04      	ldr	r3, [sp, #16]
 800d6b8:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800d6bc:	2305      	movs	r3, #5
 800d6be:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800d6c2:	3001      	adds	r0, #1
 800d6c4:	f825 300e 	strh.w	r3, [r5, lr]
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	f104 0514 	add.w	r5, r4, #20
 800d6d0:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800d6d4:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800d6d8:	60e0      	str	r0, [r4, #12]
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f007 fe7c 	bl	80153d8 <rcl_wait_set_is_valid>
 800d6e0:	b930      	cbnz	r0, 800d6f0 <rclc_executor_add_service+0x64>
 800d6e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	6563      	str	r3, [r4, #84]	@ 0x54
 800d6ea:	bd38      	pop	{r3, r4, r5, pc}
 800d6ec:	200b      	movs	r0, #11
 800d6ee:	4770      	bx	lr
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	f007 fe77 	bl	80153e4 <rcl_wait_set_fini>
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	d0f3      	beq.n	800d6e2 <rclc_executor_add_service+0x56>
 800d6fa:	e7d4      	b.n	800d6a6 <rclc_executor_add_service+0x1a>
 800d6fc:	200b      	movs	r0, #11
 800d6fe:	bd38      	pop	{r3, r4, r5, pc}

0800d700 <rclc_executor_prepare>:
 800d700:	2800      	cmp	r0, #0
 800d702:	d044      	beq.n	800d78e <rclc_executor_prepare+0x8e>
 800d704:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d706:	f100 0514 	add.w	r5, r0, #20
 800d70a:	b09b      	sub	sp, #108	@ 0x6c
 800d70c:	4604      	mov	r4, r0
 800d70e:	4628      	mov	r0, r5
 800d710:	f007 fe62 	bl	80153d8 <rcl_wait_set_is_valid>
 800d714:	b110      	cbz	r0, 800d71c <rclc_executor_prepare+0x1c>
 800d716:	2000      	movs	r0, #0
 800d718:	b01b      	add	sp, #108	@ 0x6c
 800d71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d71c:	4628      	mov	r0, r5
 800d71e:	f007 fe61 	bl	80153e4 <rcl_wait_set_fini>
 800d722:	2800      	cmp	r0, #0
 800d724:	d130      	bne.n	800d788 <rclc_executor_prepare+0x88>
 800d726:	a80c      	add	r0, sp, #48	@ 0x30
 800d728:	f007 fe42 	bl	80153b0 <rcl_get_zero_initialized_wait_set>
 800d72c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d730:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d734:	46ae      	mov	lr, r5
 800d736:	6927      	ldr	r7, [r4, #16]
 800d738:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d73c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d740:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d744:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d748:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d74c:	f8dc 3000 	ldr.w	r3, [ip]
 800d750:	f8ce 3000 	str.w	r3, [lr]
 800d754:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d756:	ae04      	add	r6, sp, #16
 800d758:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	6822      	ldr	r2, [r4, #0]
 800d75e:	6033      	str	r3, [r6, #0]
 800d760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d762:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d764:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d768:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d76c:	e9cd 2100 	strd	r2, r1, [sp]
 800d770:	4628      	mov	r0, r5
 800d772:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d774:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d776:	f008 f933 	bl	80159e0 <rcl_wait_set_init>
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d0cc      	beq.n	800d718 <rclc_executor_prepare+0x18>
 800d77e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d780:	f000 fb8e 	bl	800dea0 <rcutils_reset_error>
 800d784:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d786:	e7c7      	b.n	800d718 <rclc_executor_prepare+0x18>
 800d788:	f000 fb8a 	bl	800dea0 <rcutils_reset_error>
 800d78c:	e7cb      	b.n	800d726 <rclc_executor_prepare+0x26>
 800d78e:	200b      	movs	r0, #11
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop

0800d794 <rclc_executor_spin_some.part.0>:
 800d794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d798:	f100 0614 	add.w	r6, r0, #20
 800d79c:	b083      	sub	sp, #12
 800d79e:	4691      	mov	r9, r2
 800d7a0:	4698      	mov	r8, r3
 800d7a2:	4605      	mov	r5, r0
 800d7a4:	f7ff ffac 	bl	800d700 <rclc_executor_prepare>
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f007 fee7 	bl	801557c <rcl_wait_set_clear>
 800d7ae:	4607      	mov	r7, r0
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	f040 80ed 	bne.w	800d990 <rclc_executor_spin_some.part.0+0x1fc>
 800d7b6:	68ab      	ldr	r3, [r5, #8]
 800d7b8:	4604      	mov	r4, r0
 800d7ba:	b303      	cbz	r3, 800d7fe <rclc_executor_spin_some.part.0+0x6a>
 800d7bc:	6869      	ldr	r1, [r5, #4]
 800d7be:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d7c2:	01a2      	lsls	r2, r4, #6
 800d7c4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d7c8:	b1cb      	cbz	r3, 800d7fe <rclc_executor_spin_some.part.0+0x6a>
 800d7ca:	5c8b      	ldrb	r3, [r1, r2]
 800d7cc:	2b0a      	cmp	r3, #10
 800d7ce:	f200 80d8 	bhi.w	800d982 <rclc_executor_spin_some.part.0+0x1ee>
 800d7d2:	e8df f003 	tbb	[pc, r3]
 800d7d6:	9c9c      	.short	0x9c9c
 800d7d8:	068c8ca7 	.word	0x068c8ca7
 800d7dc:	bdc90606 	.word	0xbdc90606
 800d7e0:	b2          	.byte	0xb2
 800d7e1:	00          	.byte	0x00
 800d7e2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d7e6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	f008 fa0e 	bl	8015c0c <rcl_wait_set_add_service>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	f040 8086 	bne.w	800d902 <rclc_executor_spin_some.part.0+0x16e>
 800d7f6:	68ab      	ldr	r3, [r5, #8]
 800d7f8:	3401      	adds	r4, #1
 800d7fa:	429c      	cmp	r4, r3
 800d7fc:	d3de      	bcc.n	800d7bc <rclc_executor_spin_some.part.0+0x28>
 800d7fe:	4643      	mov	r3, r8
 800d800:	464a      	mov	r2, r9
 800d802:	4630      	mov	r0, r6
 800d804:	f008 fa30 	bl	8015c68 <rcl_wait>
 800d808:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f000 80c7 	beq.w	800d9a0 <rclc_executor_spin_some.part.0+0x20c>
 800d812:	2b01      	cmp	r3, #1
 800d814:	f040 80b5 	bne.w	800d982 <rclc_executor_spin_some.part.0+0x1ee>
 800d818:	68ab      	ldr	r3, [r5, #8]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	f000 8159 	beq.w	800dad2 <rclc_executor_spin_some.part.0+0x33e>
 800d820:	2400      	movs	r4, #0
 800d822:	46a0      	mov	r8, r4
 800d824:	f240 1991 	movw	r9, #401	@ 0x191
 800d828:	e00a      	b.n	800d840 <rclc_executor_spin_some.part.0+0xac>
 800d82a:	f7ff fb43 	bl	800ceb4 <_rclc_check_for_new_data>
 800d82e:	4604      	mov	r4, r0
 800d830:	b110      	cbz	r0, 800d838 <rclc_executor_spin_some.part.0+0xa4>
 800d832:	4548      	cmp	r0, r9
 800d834:	f040 80b2 	bne.w	800d99c <rclc_executor_spin_some.part.0+0x208>
 800d838:	68ab      	ldr	r3, [r5, #8]
 800d83a:	4598      	cmp	r8, r3
 800d83c:	f080 8126 	bcs.w	800da8c <rclc_executor_spin_some.part.0+0x2f8>
 800d840:	686a      	ldr	r2, [r5, #4]
 800d842:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d846:	4631      	mov	r1, r6
 800d848:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d84c:	f108 0801 	add.w	r8, r8, #1
 800d850:	f1bc 0f00 	cmp.w	ip, #0
 800d854:	d1e9      	bne.n	800d82a <rclc_executor_spin_some.part.0+0x96>
 800d856:	4619      	mov	r1, r3
 800d858:	4610      	mov	r0, r2
 800d85a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d85e:	4798      	blx	r3
 800d860:	2800      	cmp	r0, #0
 800d862:	f000 809b 	beq.w	800d99c <rclc_executor_spin_some.part.0+0x208>
 800d866:	68ab      	ldr	r3, [r5, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	f000 8097 	beq.w	800d99c <rclc_executor_spin_some.part.0+0x208>
 800d86e:	f04f 0800 	mov.w	r8, #0
 800d872:	f240 1991 	movw	r9, #401	@ 0x191
 800d876:	e009      	b.n	800d88c <rclc_executor_spin_some.part.0+0xf8>
 800d878:	f7ff fb6a 	bl	800cf50 <_rclc_take_new_data>
 800d87c:	4604      	mov	r4, r0
 800d87e:	b110      	cbz	r0, 800d886 <rclc_executor_spin_some.part.0+0xf2>
 800d880:	4548      	cmp	r0, r9
 800d882:	f040 808b 	bne.w	800d99c <rclc_executor_spin_some.part.0+0x208>
 800d886:	68ab      	ldr	r3, [r5, #8]
 800d888:	4598      	cmp	r8, r3
 800d88a:	d209      	bcs.n	800d8a0 <rclc_executor_spin_some.part.0+0x10c>
 800d88c:	6868      	ldr	r0, [r5, #4]
 800d88e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d892:	4631      	mov	r1, r6
 800d894:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d898:	f108 0801 	add.w	r8, r8, #1
 800d89c:	2a00      	cmp	r2, #0
 800d89e:	d1eb      	bne.n	800d878 <rclc_executor_spin_some.part.0+0xe4>
 800d8a0:	2600      	movs	r6, #0
 800d8a2:	b97b      	cbnz	r3, 800d8c4 <rclc_executor_spin_some.part.0+0x130>
 800d8a4:	e07a      	b.n	800d99c <rclc_executor_spin_some.part.0+0x208>
 800d8a6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d8aa:	2a08      	cmp	r2, #8
 800d8ac:	f000 80fd 	beq.w	800daaa <rclc_executor_spin_some.part.0+0x316>
 800d8b0:	2a09      	cmp	r2, #9
 800d8b2:	f000 80ef 	beq.w	800da94 <rclc_executor_spin_some.part.0+0x300>
 800d8b6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d8ba:	b98a      	cbnz	r2, 800d8e0 <rclc_executor_spin_some.part.0+0x14c>
 800d8bc:	3601      	adds	r6, #1
 800d8be:	429e      	cmp	r6, r3
 800d8c0:	d262      	bcs.n	800d988 <rclc_executor_spin_some.part.0+0x1f4>
 800d8c2:	2400      	movs	r4, #0
 800d8c4:	686a      	ldr	r2, [r5, #4]
 800d8c6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d8ca:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d8ce:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d8d2:	2900      	cmp	r1, #0
 800d8d4:	d062      	beq.n	800d99c <rclc_executor_spin_some.part.0+0x208>
 800d8d6:	7841      	ldrb	r1, [r0, #1]
 800d8d8:	2900      	cmp	r1, #0
 800d8da:	d0e4      	beq.n	800d8a6 <rclc_executor_spin_some.part.0+0x112>
 800d8dc:	2901      	cmp	r1, #1
 800d8de:	d1ed      	bne.n	800d8bc <rclc_executor_spin_some.part.0+0x128>
 800d8e0:	f7ff fcaa 	bl	800d238 <_rclc_execute.part.0>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	f040 80b6 	bne.w	800da56 <rclc_executor_spin_some.part.0+0x2c2>
 800d8ea:	68ab      	ldr	r3, [r5, #8]
 800d8ec:	e7e6      	b.n	800d8bc <rclc_executor_spin_some.part.0+0x128>
 800d8ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d8f2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f008 f95c 	bl	8015bb4 <rcl_wait_set_add_client>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	f43f af7a 	beq.w	800d7f6 <rclc_executor_spin_some.part.0+0x62>
 800d902:	9001      	str	r0, [sp, #4]
 800d904:	f000 facc 	bl	800dea0 <rcutils_reset_error>
 800d908:	9801      	ldr	r0, [sp, #4]
 800d90a:	4607      	mov	r7, r0
 800d90c:	e03c      	b.n	800d988 <rclc_executor_spin_some.part.0+0x1f4>
 800d90e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d912:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d916:	4630      	mov	r0, r6
 800d918:	f007 fe04 	bl	8015524 <rcl_wait_set_add_subscription>
 800d91c:	2800      	cmp	r0, #0
 800d91e:	f43f af6a 	beq.w	800d7f6 <rclc_executor_spin_some.part.0+0x62>
 800d922:	e7ee      	b.n	800d902 <rclc_executor_spin_some.part.0+0x16e>
 800d924:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d928:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d92c:	4630      	mov	r0, r6
 800d92e:	f008 f911 	bl	8015b54 <rcl_wait_set_add_timer>
 800d932:	2800      	cmp	r0, #0
 800d934:	f43f af5f 	beq.w	800d7f6 <rclc_executor_spin_some.part.0+0x62>
 800d938:	e7e3      	b.n	800d902 <rclc_executor_spin_some.part.0+0x16e>
 800d93a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d93e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d942:	4630      	mov	r0, r6
 800d944:	f008 f8da 	bl	8015afc <rcl_wait_set_add_guard_condition>
 800d948:	2800      	cmp	r0, #0
 800d94a:	f43f af54 	beq.w	800d7f6 <rclc_executor_spin_some.part.0+0x62>
 800d94e:	e7d8      	b.n	800d902 <rclc_executor_spin_some.part.0+0x16e>
 800d950:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d954:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d958:	3110      	adds	r1, #16
 800d95a:	4630      	mov	r0, r6
 800d95c:	f008 fe5c 	bl	8016618 <rcl_action_wait_set_add_action_server>
 800d960:	2800      	cmp	r0, #0
 800d962:	f43f af48 	beq.w	800d7f6 <rclc_executor_spin_some.part.0+0x62>
 800d966:	e7cc      	b.n	800d902 <rclc_executor_spin_some.part.0+0x16e>
 800d968:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d96c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d970:	3110      	adds	r1, #16
 800d972:	2300      	movs	r3, #0
 800d974:	4630      	mov	r0, r6
 800d976:	f008 fc27 	bl	80161c8 <rcl_action_wait_set_add_action_client>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	f43f af3b 	beq.w	800d7f6 <rclc_executor_spin_some.part.0+0x62>
 800d980:	e7bf      	b.n	800d902 <rclc_executor_spin_some.part.0+0x16e>
 800d982:	f000 fa8d 	bl	800dea0 <rcutils_reset_error>
 800d986:	2701      	movs	r7, #1
 800d988:	4638      	mov	r0, r7
 800d98a:	b003      	add	sp, #12
 800d98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d990:	f000 fa86 	bl	800dea0 <rcutils_reset_error>
 800d994:	4638      	mov	r0, r7
 800d996:	b003      	add	sp, #12
 800d998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d99c:	4627      	mov	r7, r4
 800d99e:	e7f3      	b.n	800d988 <rclc_executor_spin_some.part.0+0x1f4>
 800d9a0:	68ab      	ldr	r3, [r5, #8]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 8092 	beq.w	800dacc <rclc_executor_spin_some.part.0+0x338>
 800d9a8:	2400      	movs	r4, #0
 800d9aa:	46a0      	mov	r8, r4
 800d9ac:	f240 1991 	movw	r9, #401	@ 0x191
 800d9b0:	e008      	b.n	800d9c4 <rclc_executor_spin_some.part.0+0x230>
 800d9b2:	f7ff fa7f 	bl	800ceb4 <_rclc_check_for_new_data>
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	b108      	cbz	r0, 800d9be <rclc_executor_spin_some.part.0+0x22a>
 800d9ba:	4548      	cmp	r0, r9
 800d9bc:	d1ee      	bne.n	800d99c <rclc_executor_spin_some.part.0+0x208>
 800d9be:	68ab      	ldr	r3, [r5, #8]
 800d9c0:	4598      	cmp	r8, r3
 800d9c2:	d265      	bcs.n	800da90 <rclc_executor_spin_some.part.0+0x2fc>
 800d9c4:	686a      	ldr	r2, [r5, #4]
 800d9c6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d9ca:	4631      	mov	r1, r6
 800d9cc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d9d0:	f108 0801 	add.w	r8, r8, #1
 800d9d4:	f1bc 0f00 	cmp.w	ip, #0
 800d9d8:	d1eb      	bne.n	800d9b2 <rclc_executor_spin_some.part.0+0x21e>
 800d9da:	4619      	mov	r1, r3
 800d9dc:	4610      	mov	r0, r2
 800d9de:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d9e2:	4798      	blx	r3
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	d0d9      	beq.n	800d99c <rclc_executor_spin_some.part.0+0x208>
 800d9e8:	68ab      	ldr	r3, [r5, #8]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d0d6      	beq.n	800d99c <rclc_executor_spin_some.part.0+0x208>
 800d9ee:	f04f 0800 	mov.w	r8, #0
 800d9f2:	f240 1991 	movw	r9, #401	@ 0x191
 800d9f6:	f240 2a59 	movw	sl, #601	@ 0x259
 800d9fa:	e00e      	b.n	800da1a <rclc_executor_spin_some.part.0+0x286>
 800d9fc:	f813 300b 	ldrb.w	r3, [r3, fp]
 800da00:	2b08      	cmp	r3, #8
 800da02:	d033      	beq.n	800da6c <rclc_executor_spin_some.part.0+0x2d8>
 800da04:	2b09      	cmp	r3, #9
 800da06:	d028      	beq.n	800da5a <rclc_executor_spin_some.part.0+0x2c6>
 800da08:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800da0c:	b9fb      	cbnz	r3, 800da4e <rclc_executor_spin_some.part.0+0x2ba>
 800da0e:	68ab      	ldr	r3, [r5, #8]
 800da10:	f108 0801 	add.w	r8, r8, #1
 800da14:	4598      	cmp	r8, r3
 800da16:	d2b7      	bcs.n	800d988 <rclc_executor_spin_some.part.0+0x1f4>
 800da18:	2400      	movs	r4, #0
 800da1a:	6868      	ldr	r0, [r5, #4]
 800da1c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800da20:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800da24:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d0b7      	beq.n	800d99c <rclc_executor_spin_some.part.0+0x208>
 800da2c:	4631      	mov	r1, r6
 800da2e:	f7ff fa8f 	bl	800cf50 <_rclc_take_new_data>
 800da32:	b118      	cbz	r0, 800da3c <rclc_executor_spin_some.part.0+0x2a8>
 800da34:	4548      	cmp	r0, r9
 800da36:	d001      	beq.n	800da3c <rclc_executor_spin_some.part.0+0x2a8>
 800da38:	4550      	cmp	r0, sl
 800da3a:	d10c      	bne.n	800da56 <rclc_executor_spin_some.part.0+0x2c2>
 800da3c:	686b      	ldr	r3, [r5, #4]
 800da3e:	eb13 000b 	adds.w	r0, r3, fp
 800da42:	d021      	beq.n	800da88 <rclc_executor_spin_some.part.0+0x2f4>
 800da44:	7842      	ldrb	r2, [r0, #1]
 800da46:	2a00      	cmp	r2, #0
 800da48:	d0d8      	beq.n	800d9fc <rclc_executor_spin_some.part.0+0x268>
 800da4a:	2a01      	cmp	r2, #1
 800da4c:	d1df      	bne.n	800da0e <rclc_executor_spin_some.part.0+0x27a>
 800da4e:	f7ff fbf3 	bl	800d238 <_rclc_execute.part.0>
 800da52:	2800      	cmp	r0, #0
 800da54:	d0db      	beq.n	800da0e <rclc_executor_spin_some.part.0+0x27a>
 800da56:	4607      	mov	r7, r0
 800da58:	e796      	b.n	800d988 <rclc_executor_spin_some.part.0+0x1f4>
 800da5a:	6843      	ldr	r3, [r0, #4]
 800da5c:	6a1a      	ldr	r2, [r3, #32]
 800da5e:	2a00      	cmp	r2, #0
 800da60:	d1f5      	bne.n	800da4e <rclc_executor_spin_some.part.0+0x2ba>
 800da62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800da66:	2b00      	cmp	r3, #0
 800da68:	d0d1      	beq.n	800da0e <rclc_executor_spin_some.part.0+0x27a>
 800da6a:	e7f0      	b.n	800da4e <rclc_executor_spin_some.part.0+0x2ba>
 800da6c:	6843      	ldr	r3, [r0, #4]
 800da6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800da70:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800da74:	d1eb      	bne.n	800da4e <rclc_executor_spin_some.part.0+0x2ba>
 800da76:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800da7a:	2a00      	cmp	r2, #0
 800da7c:	d1e7      	bne.n	800da4e <rclc_executor_spin_some.part.0+0x2ba>
 800da7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800da82:	2b00      	cmp	r3, #0
 800da84:	d0c3      	beq.n	800da0e <rclc_executor_spin_some.part.0+0x27a>
 800da86:	e7e2      	b.n	800da4e <rclc_executor_spin_some.part.0+0x2ba>
 800da88:	270b      	movs	r7, #11
 800da8a:	e77d      	b.n	800d988 <rclc_executor_spin_some.part.0+0x1f4>
 800da8c:	686a      	ldr	r2, [r5, #4]
 800da8e:	e6e2      	b.n	800d856 <rclc_executor_spin_some.part.0+0xc2>
 800da90:	686a      	ldr	r2, [r5, #4]
 800da92:	e7a2      	b.n	800d9da <rclc_executor_spin_some.part.0+0x246>
 800da94:	6842      	ldr	r2, [r0, #4]
 800da96:	6a11      	ldr	r1, [r2, #32]
 800da98:	2900      	cmp	r1, #0
 800da9a:	f47f af21 	bne.w	800d8e0 <rclc_executor_spin_some.part.0+0x14c>
 800da9e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800daa2:	2a00      	cmp	r2, #0
 800daa4:	f43f af0a 	beq.w	800d8bc <rclc_executor_spin_some.part.0+0x128>
 800daa8:	e71a      	b.n	800d8e0 <rclc_executor_spin_some.part.0+0x14c>
 800daaa:	6842      	ldr	r2, [r0, #4]
 800daac:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800daae:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800dab2:	f47f af15 	bne.w	800d8e0 <rclc_executor_spin_some.part.0+0x14c>
 800dab6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800daba:	2900      	cmp	r1, #0
 800dabc:	f47f af10 	bne.w	800d8e0 <rclc_executor_spin_some.part.0+0x14c>
 800dac0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800dac4:	2a00      	cmp	r2, #0
 800dac6:	f43f aef9 	beq.w	800d8bc <rclc_executor_spin_some.part.0+0x128>
 800daca:	e709      	b.n	800d8e0 <rclc_executor_spin_some.part.0+0x14c>
 800dacc:	686a      	ldr	r2, [r5, #4]
 800dace:	461c      	mov	r4, r3
 800dad0:	e783      	b.n	800d9da <rclc_executor_spin_some.part.0+0x246>
 800dad2:	686a      	ldr	r2, [r5, #4]
 800dad4:	461c      	mov	r4, r3
 800dad6:	e6be      	b.n	800d856 <rclc_executor_spin_some.part.0+0xc2>

0800dad8 <rclc_executor_spin>:
 800dad8:	b1d0      	cbz	r0, 800db10 <rclc_executor_spin+0x38>
 800dada:	b510      	push	{r4, lr}
 800dadc:	4604      	mov	r4, r0
 800dade:	b082      	sub	sp, #8
 800dae0:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800dae4:	6820      	ldr	r0, [r4, #0]
 800dae6:	e9cd 2300 	strd	r2, r3, [sp]
 800daea:	f006 f9f1 	bl	8013ed0 <rcl_context_is_valid>
 800daee:	4601      	mov	r1, r0
 800daf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daf4:	4620      	mov	r0, r4
 800daf6:	b131      	cbz	r1, 800db06 <rclc_executor_spin+0x2e>
 800daf8:	f7ff fe4c 	bl	800d794 <rclc_executor_spin_some.part.0>
 800dafc:	f030 0302 	bics.w	r3, r0, #2
 800db00:	d0ee      	beq.n	800dae0 <rclc_executor_spin+0x8>
 800db02:	b002      	add	sp, #8
 800db04:	bd10      	pop	{r4, pc}
 800db06:	f000 f9cb 	bl	800dea0 <rcutils_reset_error>
 800db0a:	2001      	movs	r0, #1
 800db0c:	b002      	add	sp, #8
 800db0e:	bd10      	pop	{r4, pc}
 800db10:	200b      	movs	r0, #11
 800db12:	4770      	bx	lr

0800db14 <rclc_executor_handle_counters_zero_init>:
 800db14:	b130      	cbz	r0, 800db24 <rclc_executor_handle_counters_zero_init+0x10>
 800db16:	b508      	push	{r3, lr}
 800db18:	2220      	movs	r2, #32
 800db1a:	2100      	movs	r1, #0
 800db1c:	f00c f91a 	bl	8019d54 <memset>
 800db20:	2000      	movs	r0, #0
 800db22:	bd08      	pop	{r3, pc}
 800db24:	200b      	movs	r0, #11
 800db26:	4770      	bx	lr

0800db28 <rclc_executor_handle_init>:
 800db28:	b168      	cbz	r0, 800db46 <rclc_executor_handle_init+0x1e>
 800db2a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800db50 <rclc_executor_handle_init+0x28>
 800db2e:	2300      	movs	r3, #0
 800db30:	220b      	movs	r2, #11
 800db32:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800db36:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800db3a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800db3e:	8002      	strh	r2, [r0, #0]
 800db40:	8703      	strh	r3, [r0, #56]	@ 0x38
 800db42:	4618      	mov	r0, r3
 800db44:	4770      	bx	lr
 800db46:	200b      	movs	r0, #11
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	f3af 8000 	nop.w
	...

0800db58 <rclc_support_init_with_options>:
 800db58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db5c:	b083      	sub	sp, #12
 800db5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800db60:	b340      	cbz	r0, 800dbb4 <rclc_support_init_with_options+0x5c>
 800db62:	461d      	mov	r5, r3
 800db64:	b333      	cbz	r3, 800dbb4 <rclc_support_init_with_options+0x5c>
 800db66:	b32e      	cbz	r6, 800dbb4 <rclc_support_init_with_options+0x5c>
 800db68:	46e9      	mov	r9, sp
 800db6a:	4604      	mov	r4, r0
 800db6c:	4648      	mov	r0, r9
 800db6e:	460f      	mov	r7, r1
 800db70:	4690      	mov	r8, r2
 800db72:	f006 f9a3 	bl	8013ebc <rcl_get_zero_initialized_context>
 800db76:	e899 0003 	ldmia.w	r9, {r0, r1}
 800db7a:	462a      	mov	r2, r5
 800db7c:	e884 0003 	stmia.w	r4, {r0, r1}
 800db80:	4623      	mov	r3, r4
 800db82:	4641      	mov	r1, r8
 800db84:	4638      	mov	r0, r7
 800db86:	f006 fa09 	bl	8013f9c <rcl_init>
 800db8a:	4605      	mov	r5, r0
 800db8c:	b960      	cbnz	r0, 800dba8 <rclc_support_init_with_options+0x50>
 800db8e:	60a6      	str	r6, [r4, #8]
 800db90:	4632      	mov	r2, r6
 800db92:	f104 010c 	add.w	r1, r4, #12
 800db96:	2003      	movs	r0, #3
 800db98:	f007 f808 	bl	8014bac <rcl_clock_init>
 800db9c:	4605      	mov	r5, r0
 800db9e:	b918      	cbnz	r0, 800dba8 <rclc_support_init_with_options+0x50>
 800dba0:	4628      	mov	r0, r5
 800dba2:	b003      	add	sp, #12
 800dba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dba8:	f000 f97a 	bl	800dea0 <rcutils_reset_error>
 800dbac:	4628      	mov	r0, r5
 800dbae:	b003      	add	sp, #12
 800dbb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbb4:	250b      	movs	r5, #11
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	b003      	add	sp, #12
 800dbba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbbe:	bf00      	nop

0800dbc0 <rclc_node_init_default>:
 800dbc0:	b3b8      	cbz	r0, 800dc32 <rclc_node_init_default+0x72>
 800dbc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbc6:	460d      	mov	r5, r1
 800dbc8:	b0a1      	sub	sp, #132	@ 0x84
 800dbca:	b329      	cbz	r1, 800dc18 <rclc_node_init_default+0x58>
 800dbcc:	4616      	mov	r6, r2
 800dbce:	b31a      	cbz	r2, 800dc18 <rclc_node_init_default+0x58>
 800dbd0:	461f      	mov	r7, r3
 800dbd2:	b30b      	cbz	r3, 800dc18 <rclc_node_init_default+0x58>
 800dbd4:	f10d 0810 	add.w	r8, sp, #16
 800dbd8:	4604      	mov	r4, r0
 800dbda:	4640      	mov	r0, r8
 800dbdc:	f006 fb04 	bl	80141e8 <rcl_get_zero_initialized_node>
 800dbe0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dbe4:	f10d 0918 	add.w	r9, sp, #24
 800dbe8:	e884 0003 	stmia.w	r4, {r0, r1}
 800dbec:	4648      	mov	r0, r9
 800dbee:	f006 fc73 	bl	80144d8 <rcl_node_get_default_options>
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	f006 faf8 	bl	80141e8 <rcl_get_zero_initialized_node>
 800dbf8:	f8cd 9000 	str.w	r9, [sp]
 800dbfc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dc00:	463b      	mov	r3, r7
 800dc02:	e884 0003 	stmia.w	r4, {r0, r1}
 800dc06:	4632      	mov	r2, r6
 800dc08:	4629      	mov	r1, r5
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	f006 faf6 	bl	80141fc <rcl_node_init>
 800dc10:	b930      	cbnz	r0, 800dc20 <rclc_node_init_default+0x60>
 800dc12:	b021      	add	sp, #132	@ 0x84
 800dc14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc18:	200b      	movs	r0, #11
 800dc1a:	b021      	add	sp, #132	@ 0x84
 800dc1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc20:	9003      	str	r0, [sp, #12]
 800dc22:	f000 f93d 	bl	800dea0 <rcutils_reset_error>
 800dc26:	f000 f93b 	bl	800dea0 <rcutils_reset_error>
 800dc2a:	9803      	ldr	r0, [sp, #12]
 800dc2c:	b021      	add	sp, #132	@ 0x84
 800dc2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc32:	200b      	movs	r0, #11
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop

0800dc38 <rclc_publisher_init_default>:
 800dc38:	b368      	cbz	r0, 800dc96 <rclc_publisher_init_default+0x5e>
 800dc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc3e:	460d      	mov	r5, r1
 800dc40:	b0a0      	sub	sp, #128	@ 0x80
 800dc42:	b321      	cbz	r1, 800dc8e <rclc_publisher_init_default+0x56>
 800dc44:	4616      	mov	r6, r2
 800dc46:	b312      	cbz	r2, 800dc8e <rclc_publisher_init_default+0x56>
 800dc48:	461f      	mov	r7, r3
 800dc4a:	b303      	cbz	r3, 800dc8e <rclc_publisher_init_default+0x56>
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	f7ff f821 	bl	800cc94 <rcl_get_zero_initialized_publisher>
 800dc52:	f10d 0810 	add.w	r8, sp, #16
 800dc56:	6020      	str	r0, [r4, #0]
 800dc58:	4640      	mov	r0, r8
 800dc5a:	f7ff f8b7 	bl	800cdcc <rcl_publisher_get_default_options>
 800dc5e:	490f      	ldr	r1, [pc, #60]	@ (800dc9c <rclc_publisher_init_default+0x64>)
 800dc60:	2250      	movs	r2, #80	@ 0x50
 800dc62:	4640      	mov	r0, r8
 800dc64:	f00c f93f 	bl	8019ee6 <memcpy>
 800dc68:	f8cd 8000 	str.w	r8, [sp]
 800dc6c:	463b      	mov	r3, r7
 800dc6e:	4632      	mov	r2, r6
 800dc70:	4629      	mov	r1, r5
 800dc72:	4620      	mov	r0, r4
 800dc74:	f7ff f814 	bl	800cca0 <rcl_publisher_init>
 800dc78:	b910      	cbnz	r0, 800dc80 <rclc_publisher_init_default+0x48>
 800dc7a:	b020      	add	sp, #128	@ 0x80
 800dc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc80:	9003      	str	r0, [sp, #12]
 800dc82:	f000 f90d 	bl	800dea0 <rcutils_reset_error>
 800dc86:	9803      	ldr	r0, [sp, #12]
 800dc88:	b020      	add	sp, #128	@ 0x80
 800dc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc8e:	200b      	movs	r0, #11
 800dc90:	b020      	add	sp, #128	@ 0x80
 800dc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc96:	200b      	movs	r0, #11
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	0801ba78 	.word	0x0801ba78

0800dca0 <rclc_publisher_init_best_effort>:
 800dca0:	b368      	cbz	r0, 800dcfe <rclc_publisher_init_best_effort+0x5e>
 800dca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca6:	460d      	mov	r5, r1
 800dca8:	b0a0      	sub	sp, #128	@ 0x80
 800dcaa:	b321      	cbz	r1, 800dcf6 <rclc_publisher_init_best_effort+0x56>
 800dcac:	4616      	mov	r6, r2
 800dcae:	b312      	cbz	r2, 800dcf6 <rclc_publisher_init_best_effort+0x56>
 800dcb0:	461f      	mov	r7, r3
 800dcb2:	b303      	cbz	r3, 800dcf6 <rclc_publisher_init_best_effort+0x56>
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	f7fe ffed 	bl	800cc94 <rcl_get_zero_initialized_publisher>
 800dcba:	f10d 0810 	add.w	r8, sp, #16
 800dcbe:	6020      	str	r0, [r4, #0]
 800dcc0:	4640      	mov	r0, r8
 800dcc2:	f7ff f883 	bl	800cdcc <rcl_publisher_get_default_options>
 800dcc6:	490f      	ldr	r1, [pc, #60]	@ (800dd04 <rclc_publisher_init_best_effort+0x64>)
 800dcc8:	2250      	movs	r2, #80	@ 0x50
 800dcca:	4640      	mov	r0, r8
 800dccc:	f00c f90b 	bl	8019ee6 <memcpy>
 800dcd0:	f8cd 8000 	str.w	r8, [sp]
 800dcd4:	463b      	mov	r3, r7
 800dcd6:	4632      	mov	r2, r6
 800dcd8:	4629      	mov	r1, r5
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f7fe ffe0 	bl	800cca0 <rcl_publisher_init>
 800dce0:	b910      	cbnz	r0, 800dce8 <rclc_publisher_init_best_effort+0x48>
 800dce2:	b020      	add	sp, #128	@ 0x80
 800dce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce8:	9003      	str	r0, [sp, #12]
 800dcea:	f000 f8d9 	bl	800dea0 <rcutils_reset_error>
 800dcee:	9803      	ldr	r0, [sp, #12]
 800dcf0:	b020      	add	sp, #128	@ 0x80
 800dcf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf6:	200b      	movs	r0, #11
 800dcf8:	b020      	add	sp, #128	@ 0x80
 800dcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcfe:	200b      	movs	r0, #11
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	0801bac8 	.word	0x0801bac8

0800dd08 <rclc_service_init_default>:
 800dd08:	b368      	cbz	r0, 800dd66 <rclc_service_init_default+0x5e>
 800dd0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0e:	460d      	mov	r5, r1
 800dd10:	b09e      	sub	sp, #120	@ 0x78
 800dd12:	b321      	cbz	r1, 800dd5e <rclc_service_init_default+0x56>
 800dd14:	4616      	mov	r6, r2
 800dd16:	b312      	cbz	r2, 800dd5e <rclc_service_init_default+0x56>
 800dd18:	461f      	mov	r7, r3
 800dd1a:	b303      	cbz	r3, 800dd5e <rclc_service_init_default+0x56>
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	f006 fdab 	bl	8014878 <rcl_get_zero_initialized_service>
 800dd22:	f10d 0810 	add.w	r8, sp, #16
 800dd26:	6020      	str	r0, [r4, #0]
 800dd28:	4640      	mov	r0, r8
 800dd2a:	f006 fe33 	bl	8014994 <rcl_service_get_default_options>
 800dd2e:	490f      	ldr	r1, [pc, #60]	@ (800dd6c <rclc_service_init_default+0x64>)
 800dd30:	2250      	movs	r2, #80	@ 0x50
 800dd32:	4640      	mov	r0, r8
 800dd34:	f00c f8d7 	bl	8019ee6 <memcpy>
 800dd38:	f8cd 8000 	str.w	r8, [sp]
 800dd3c:	463b      	mov	r3, r7
 800dd3e:	4632      	mov	r2, r6
 800dd40:	4629      	mov	r1, r5
 800dd42:	4620      	mov	r0, r4
 800dd44:	f006 fd9e 	bl	8014884 <rcl_service_init>
 800dd48:	b910      	cbnz	r0, 800dd50 <rclc_service_init_default+0x48>
 800dd4a:	b01e      	add	sp, #120	@ 0x78
 800dd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd50:	9003      	str	r0, [sp, #12]
 800dd52:	f000 f8a5 	bl	800dea0 <rcutils_reset_error>
 800dd56:	9803      	ldr	r0, [sp, #12]
 800dd58:	b01e      	add	sp, #120	@ 0x78
 800dd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd5e:	200b      	movs	r0, #11
 800dd60:	b01e      	add	sp, #120	@ 0x78
 800dd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd66:	200b      	movs	r0, #11
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	0801bb18 	.word	0x0801bb18

0800dd70 <rclc_timer_init_default>:
 800dd70:	b360      	cbz	r0, 800ddcc <rclc_timer_init_default+0x5c>
 800dd72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd76:	460e      	mov	r6, r1
 800dd78:	b08a      	sub	sp, #40	@ 0x28
 800dd7a:	b319      	cbz	r1, 800ddc4 <rclc_timer_init_default+0x54>
 800dd7c:	4690      	mov	r8, r2
 800dd7e:	461f      	mov	r7, r3
 800dd80:	4605      	mov	r5, r0
 800dd82:	f007 f8f1 	bl	8014f68 <rcl_get_zero_initialized_timer>
 800dd86:	68b4      	ldr	r4, [r6, #8]
 800dd88:	6028      	str	r0, [r5, #0]
 800dd8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd8c:	f10d 0c0c 	add.w	ip, sp, #12
 800dd90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dd94:	6823      	ldr	r3, [r4, #0]
 800dd96:	f8cc 3000 	str.w	r3, [ip]
 800dd9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd9c:	9302      	str	r3, [sp, #8]
 800dd9e:	e9cd 8700 	strd	r8, r7, [sp]
 800dda2:	4628      	mov	r0, r5
 800dda4:	4632      	mov	r2, r6
 800dda6:	f106 010c 	add.w	r1, r6, #12
 800ddaa:	f007 f8e5 	bl	8014f78 <rcl_timer_init>
 800ddae:	b910      	cbnz	r0, 800ddb6 <rclc_timer_init_default+0x46>
 800ddb0:	b00a      	add	sp, #40	@ 0x28
 800ddb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb6:	9009      	str	r0, [sp, #36]	@ 0x24
 800ddb8:	f000 f872 	bl	800dea0 <rcutils_reset_error>
 800ddbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddbe:	b00a      	add	sp, #40	@ 0x28
 800ddc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddc4:	200b      	movs	r0, #11
 800ddc6:	b00a      	add	sp, #40	@ 0x28
 800ddc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddcc:	200b      	movs	r0, #11
 800ddce:	4770      	bx	lr

0800ddd0 <__default_zero_allocate>:
 800ddd0:	f00b bad6 	b.w	8019380 <calloc>

0800ddd4 <__default_reallocate>:
 800ddd4:	f00b bc74 	b.w	80196c0 <realloc>

0800ddd8 <__default_deallocate>:
 800ddd8:	f00b bb50 	b.w	801947c <free>

0800dddc <__default_allocate>:
 800dddc:	f00b bb46 	b.w	801946c <malloc>

0800dde0 <rcutils_get_zero_initialized_allocator>:
 800dde0:	b510      	push	{r4, lr}
 800dde2:	4c05      	ldr	r4, [pc, #20]	@ (800ddf8 <rcutils_get_zero_initialized_allocator+0x18>)
 800dde4:	4686      	mov	lr, r0
 800dde6:	4684      	mov	ip, r0
 800dde8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	f8cc 3000 	str.w	r3, [ip]
 800ddf4:	4670      	mov	r0, lr
 800ddf6:	bd10      	pop	{r4, pc}
 800ddf8:	0801bb68 	.word	0x0801bb68

0800ddfc <rcutils_set_default_allocator>:
 800ddfc:	b1a8      	cbz	r0, 800de2a <rcutils_set_default_allocator+0x2e>
 800ddfe:	6802      	ldr	r2, [r0, #0]
 800de00:	b1a2      	cbz	r2, 800de2c <rcutils_set_default_allocator+0x30>
 800de02:	6841      	ldr	r1, [r0, #4]
 800de04:	b1a1      	cbz	r1, 800de30 <rcutils_set_default_allocator+0x34>
 800de06:	b410      	push	{r4}
 800de08:	68c4      	ldr	r4, [r0, #12]
 800de0a:	b164      	cbz	r4, 800de26 <rcutils_set_default_allocator+0x2a>
 800de0c:	6880      	ldr	r0, [r0, #8]
 800de0e:	b138      	cbz	r0, 800de20 <rcutils_set_default_allocator+0x24>
 800de10:	4b08      	ldr	r3, [pc, #32]	@ (800de34 <rcutils_set_default_allocator+0x38>)
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	2200      	movs	r2, #0
 800de16:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800de1a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800de1e:	2001      	movs	r0, #1
 800de20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de24:	4770      	bx	lr
 800de26:	4620      	mov	r0, r4
 800de28:	e7fa      	b.n	800de20 <rcutils_set_default_allocator+0x24>
 800de2a:	4770      	bx	lr
 800de2c:	4610      	mov	r0, r2
 800de2e:	4770      	bx	lr
 800de30:	4608      	mov	r0, r1
 800de32:	4770      	bx	lr
 800de34:	200003a0 	.word	0x200003a0

0800de38 <rcutils_get_default_allocator>:
 800de38:	b510      	push	{r4, lr}
 800de3a:	4c05      	ldr	r4, [pc, #20]	@ (800de50 <rcutils_get_default_allocator+0x18>)
 800de3c:	4686      	mov	lr, r0
 800de3e:	4684      	mov	ip, r0
 800de40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de46:	6823      	ldr	r3, [r4, #0]
 800de48:	f8cc 3000 	str.w	r3, [ip]
 800de4c:	4670      	mov	r0, lr
 800de4e:	bd10      	pop	{r4, pc}
 800de50:	200003a0 	.word	0x200003a0

0800de54 <rcutils_allocator_is_valid>:
 800de54:	b158      	cbz	r0, 800de6e <rcutils_allocator_is_valid+0x1a>
 800de56:	6803      	ldr	r3, [r0, #0]
 800de58:	b143      	cbz	r3, 800de6c <rcutils_allocator_is_valid+0x18>
 800de5a:	6843      	ldr	r3, [r0, #4]
 800de5c:	b133      	cbz	r3, 800de6c <rcutils_allocator_is_valid+0x18>
 800de5e:	68c3      	ldr	r3, [r0, #12]
 800de60:	b123      	cbz	r3, 800de6c <rcutils_allocator_is_valid+0x18>
 800de62:	6880      	ldr	r0, [r0, #8]
 800de64:	3800      	subs	r0, #0
 800de66:	bf18      	it	ne
 800de68:	2001      	movne	r0, #1
 800de6a:	4770      	bx	lr
 800de6c:	4618      	mov	r0, r3
 800de6e:	4770      	bx	lr

0800de70 <rcutils_get_error_string>:
 800de70:	4b06      	ldr	r3, [pc, #24]	@ (800de8c <rcutils_get_error_string+0x1c>)
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	b13b      	cbz	r3, 800de86 <rcutils_get_error_string+0x16>
 800de76:	4b06      	ldr	r3, [pc, #24]	@ (800de90 <rcutils_get_error_string+0x20>)
 800de78:	781a      	ldrb	r2, [r3, #0]
 800de7a:	b90a      	cbnz	r2, 800de80 <rcutils_get_error_string+0x10>
 800de7c:	2201      	movs	r2, #1
 800de7e:	701a      	strb	r2, [r3, #0]
 800de80:	4b04      	ldr	r3, [pc, #16]	@ (800de94 <rcutils_get_error_string+0x24>)
 800de82:	7818      	ldrb	r0, [r3, #0]
 800de84:	4770      	bx	lr
 800de86:	4b04      	ldr	r3, [pc, #16]	@ (800de98 <rcutils_get_error_string+0x28>)
 800de88:	7818      	ldrb	r0, [r3, #0]
 800de8a:	4770      	bx	lr
 800de8c:	20006d10 	.word	0x20006d10
 800de90:	20006d29 	.word	0x20006d29
 800de94:	20006d28 	.word	0x20006d28
 800de98:	0801b720 	.word	0x0801b720
 800de9c:	00000000 	.word	0x00000000

0800dea0 <rcutils_reset_error>:
 800dea0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800dec0 <rcutils_reset_error+0x20>
 800dea4:	4a08      	ldr	r2, [pc, #32]	@ (800dec8 <rcutils_reset_error+0x28>)
 800dea6:	4809      	ldr	r0, [pc, #36]	@ (800decc <rcutils_reset_error+0x2c>)
 800dea8:	4909      	ldr	r1, [pc, #36]	@ (800ded0 <rcutils_reset_error+0x30>)
 800deaa:	2300      	movs	r3, #0
 800deac:	8013      	strh	r3, [r2, #0]
 800deae:	ed82 7b02 	vstr	d7, [r2, #8]
 800deb2:	4a08      	ldr	r2, [pc, #32]	@ (800ded4 <rcutils_reset_error+0x34>)
 800deb4:	7003      	strb	r3, [r0, #0]
 800deb6:	700b      	strb	r3, [r1, #0]
 800deb8:	7013      	strb	r3, [r2, #0]
 800deba:	4770      	bx	lr
 800debc:	f3af 8000 	nop.w
	...
 800dec8:	20006d18 	.word	0x20006d18
 800decc:	20006d29 	.word	0x20006d29
 800ded0:	20006d28 	.word	0x20006d28
 800ded4:	20006d10 	.word	0x20006d10

0800ded8 <rcutils_system_time_now>:
 800ded8:	b308      	cbz	r0, 800df1e <rcutils_system_time_now+0x46>
 800deda:	b570      	push	{r4, r5, r6, lr}
 800dedc:	b084      	sub	sp, #16
 800dede:	4604      	mov	r4, r0
 800dee0:	4669      	mov	r1, sp
 800dee2:	2001      	movs	r0, #1
 800dee4:	f7f4 faf4 	bl	80024d0 <clock_gettime>
 800dee8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800deec:	2d00      	cmp	r5, #0
 800deee:	db13      	blt.n	800df18 <rcutils_system_time_now+0x40>
 800def0:	9902      	ldr	r1, [sp, #8]
 800def2:	2900      	cmp	r1, #0
 800def4:	db0d      	blt.n	800df12 <rcutils_system_time_now+0x3a>
 800def6:	4e0b      	ldr	r6, [pc, #44]	@ (800df24 <rcutils_system_time_now+0x4c>)
 800def8:	fba3 3206 	umull	r3, r2, r3, r6
 800defc:	185b      	adds	r3, r3, r1
 800defe:	fb06 2205 	mla	r2, r6, r5, r2
 800df02:	f04f 0000 	mov.w	r0, #0
 800df06:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800df0a:	e9c4 3200 	strd	r3, r2, [r4]
 800df0e:	b004      	add	sp, #16
 800df10:	bd70      	pop	{r4, r5, r6, pc}
 800df12:	ea53 0205 	orrs.w	r2, r3, r5
 800df16:	d1ee      	bne.n	800def6 <rcutils_system_time_now+0x1e>
 800df18:	2002      	movs	r0, #2
 800df1a:	b004      	add	sp, #16
 800df1c:	bd70      	pop	{r4, r5, r6, pc}
 800df1e:	200b      	movs	r0, #11
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	3b9aca00 	.word	0x3b9aca00

0800df28 <rcutils_steady_time_now>:
 800df28:	b308      	cbz	r0, 800df6e <rcutils_steady_time_now+0x46>
 800df2a:	b570      	push	{r4, r5, r6, lr}
 800df2c:	b084      	sub	sp, #16
 800df2e:	4604      	mov	r4, r0
 800df30:	4669      	mov	r1, sp
 800df32:	2000      	movs	r0, #0
 800df34:	f7f4 facc 	bl	80024d0 <clock_gettime>
 800df38:	e9dd 3500 	ldrd	r3, r5, [sp]
 800df3c:	2d00      	cmp	r5, #0
 800df3e:	db13      	blt.n	800df68 <rcutils_steady_time_now+0x40>
 800df40:	9902      	ldr	r1, [sp, #8]
 800df42:	2900      	cmp	r1, #0
 800df44:	db0d      	blt.n	800df62 <rcutils_steady_time_now+0x3a>
 800df46:	4e0b      	ldr	r6, [pc, #44]	@ (800df74 <rcutils_steady_time_now+0x4c>)
 800df48:	fba3 3206 	umull	r3, r2, r3, r6
 800df4c:	185b      	adds	r3, r3, r1
 800df4e:	fb06 2205 	mla	r2, r6, r5, r2
 800df52:	f04f 0000 	mov.w	r0, #0
 800df56:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800df5a:	e9c4 3200 	strd	r3, r2, [r4]
 800df5e:	b004      	add	sp, #16
 800df60:	bd70      	pop	{r4, r5, r6, pc}
 800df62:	ea53 0205 	orrs.w	r2, r3, r5
 800df66:	d1ee      	bne.n	800df46 <rcutils_steady_time_now+0x1e>
 800df68:	2002      	movs	r0, #2
 800df6a:	b004      	add	sp, #16
 800df6c:	bd70      	pop	{r4, r5, r6, pc}
 800df6e:	200b      	movs	r0, #11
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	3b9aca00 	.word	0x3b9aca00

0800df78 <rmw_get_zero_initialized_init_options>:
 800df78:	b510      	push	{r4, lr}
 800df7a:	2238      	movs	r2, #56	@ 0x38
 800df7c:	4604      	mov	r4, r0
 800df7e:	2100      	movs	r1, #0
 800df80:	f00b fee8 	bl	8019d54 <memset>
 800df84:	f104 0010 	add.w	r0, r4, #16
 800df88:	f000 f80a 	bl	800dfa0 <rmw_get_default_security_options>
 800df8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df90:	60e3      	str	r3, [r4, #12]
 800df92:	4620      	mov	r0, r4
 800df94:	bd10      	pop	{r4, pc}
 800df96:	bf00      	nop

0800df98 <rmw_get_default_publisher_options>:
 800df98:	2200      	movs	r2, #0
 800df9a:	6002      	str	r2, [r0, #0]
 800df9c:	7102      	strb	r2, [r0, #4]
 800df9e:	4770      	bx	lr

0800dfa0 <rmw_get_default_security_options>:
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	7002      	strb	r2, [r0, #0]
 800dfa4:	6042      	str	r2, [r0, #4]
 800dfa6:	4770      	bx	lr

0800dfa8 <rmw_uros_set_custom_transport>:
 800dfa8:	b470      	push	{r4, r5, r6}
 800dfaa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dfae:	b162      	cbz	r2, 800dfca <rmw_uros_set_custom_transport+0x22>
 800dfb0:	b15b      	cbz	r3, 800dfca <rmw_uros_set_custom_transport+0x22>
 800dfb2:	b155      	cbz	r5, 800dfca <rmw_uros_set_custom_transport+0x22>
 800dfb4:	b14e      	cbz	r6, 800dfca <rmw_uros_set_custom_transport+0x22>
 800dfb6:	4c06      	ldr	r4, [pc, #24]	@ (800dfd0 <rmw_uros_set_custom_transport+0x28>)
 800dfb8:	7020      	strb	r0, [r4, #0]
 800dfba:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dfbe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dfc2:	6166      	str	r6, [r4, #20]
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	bc70      	pop	{r4, r5, r6}
 800dfc8:	4770      	bx	lr
 800dfca:	200b      	movs	r0, #11
 800dfcc:	bc70      	pop	{r4, r5, r6}
 800dfce:	4770      	bx	lr
 800dfd0:	20006d2c 	.word	0x20006d2c

0800dfd4 <rmw_init_options_init>:
 800dfd4:	b084      	sub	sp, #16
 800dfd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfd8:	b083      	sub	sp, #12
 800dfda:	ad09      	add	r5, sp, #36	@ 0x24
 800dfdc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800dfe0:	b130      	cbz	r0, 800dff0 <rmw_init_options_init+0x1c>
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	f7ff ff35 	bl	800de54 <rcutils_allocator_is_valid>
 800dfea:	b108      	cbz	r0, 800dff0 <rmw_init_options_init+0x1c>
 800dfec:	68a6      	ldr	r6, [r4, #8]
 800dfee:	b12e      	cbz	r6, 800dffc <rmw_init_options_init+0x28>
 800dff0:	200b      	movs	r0, #11
 800dff2:	b003      	add	sp, #12
 800dff4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dff8:	b004      	add	sp, #16
 800dffa:	4770      	bx	lr
 800dffc:	2200      	movs	r2, #0
 800dffe:	2300      	movs	r3, #0
 800e000:	e9c4 2300 	strd	r2, r3, [r4]
 800e004:	4b22      	ldr	r3, [pc, #136]	@ (800e090 <rmw_init_options_init+0xbc>)
 800e006:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800e0a0 <rmw_init_options_init+0xcc>
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	60a3      	str	r3, [r4, #8]
 800e00e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e010:	f104 0c20 	add.w	ip, r4, #32
 800e014:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e018:	466f      	mov	r7, sp
 800e01a:	682b      	ldr	r3, [r5, #0]
 800e01c:	f8cc 3000 	str.w	r3, [ip]
 800e020:	4638      	mov	r0, r7
 800e022:	f8c4 e01c 	str.w	lr, [r4, #28]
 800e026:	60e6      	str	r6, [r4, #12]
 800e028:	f7ff ffba 	bl	800dfa0 <rmw_get_default_security_options>
 800e02c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e030:	f104 0310 	add.w	r3, r4, #16
 800e034:	e883 0003 	stmia.w	r3, {r0, r1}
 800e038:	2203      	movs	r2, #3
 800e03a:	4816      	ldr	r0, [pc, #88]	@ (800e094 <rmw_init_options_init+0xc0>)
 800e03c:	4916      	ldr	r1, [pc, #88]	@ (800e098 <rmw_init_options_init+0xc4>)
 800e03e:	7626      	strb	r6, [r4, #24]
 800e040:	f000 ffbc 	bl	800efbc <rmw_uxrce_init_init_options_impl_memory>
 800e044:	4813      	ldr	r0, [pc, #76]	@ (800e094 <rmw_init_options_init+0xc0>)
 800e046:	f009 fb1b 	bl	8017680 <get_memory>
 800e04a:	b1f0      	cbz	r0, 800e08a <rmw_init_options_init+0xb6>
 800e04c:	4a13      	ldr	r2, [pc, #76]	@ (800e09c <rmw_init_options_init+0xc8>)
 800e04e:	6883      	ldr	r3, [r0, #8]
 800e050:	6851      	ldr	r1, [r2, #4]
 800e052:	7810      	ldrb	r0, [r2, #0]
 800e054:	6363      	str	r3, [r4, #52]	@ 0x34
 800e056:	7418      	strb	r0, [r3, #16]
 800e058:	6159      	str	r1, [r3, #20]
 800e05a:	68d1      	ldr	r1, [r2, #12]
 800e05c:	61d9      	str	r1, [r3, #28]
 800e05e:	6911      	ldr	r1, [r2, #16]
 800e060:	6219      	str	r1, [r3, #32]
 800e062:	6951      	ldr	r1, [r2, #20]
 800e064:	6892      	ldr	r2, [r2, #8]
 800e066:	619a      	str	r2, [r3, #24]
 800e068:	6259      	str	r1, [r3, #36]	@ 0x24
 800e06a:	f004 fd07 	bl	8012a7c <uxr_nanos>
 800e06e:	f00b fabb 	bl	80195e8 <srand>
 800e072:	f00b fae7 	bl	8019644 <rand>
 800e076:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e078:	6298      	str	r0, [r3, #40]	@ 0x28
 800e07a:	2800      	cmp	r0, #0
 800e07c:	d0f9      	beq.n	800e072 <rmw_init_options_init+0x9e>
 800e07e:	2000      	movs	r0, #0
 800e080:	b003      	add	sp, #12
 800e082:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e086:	b004      	add	sp, #16
 800e088:	4770      	bx	lr
 800e08a:	2001      	movs	r0, #1
 800e08c:	e7b1      	b.n	800dff2 <rmw_init_options_init+0x1e>
 800e08e:	bf00      	nop
 800e090:	0801c960 	.word	0x0801c960
 800e094:	2000b84c 	.word	0x2000b84c
 800e098:	20007020 	.word	0x20007020
 800e09c:	20006d2c 	.word	0x20006d2c
 800e0a0:	0801bb7c 	.word	0x0801bb7c

0800e0a4 <rmw_init_options_copy>:
 800e0a4:	b570      	push	{r4, r5, r6, lr}
 800e0a6:	b158      	cbz	r0, 800e0c0 <rmw_init_options_copy+0x1c>
 800e0a8:	460d      	mov	r5, r1
 800e0aa:	b149      	cbz	r1, 800e0c0 <rmw_init_options_copy+0x1c>
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	6880      	ldr	r0, [r0, #8]
 800e0b0:	b120      	cbz	r0, 800e0bc <rmw_init_options_copy+0x18>
 800e0b2:	4b1e      	ldr	r3, [pc, #120]	@ (800e12c <rmw_init_options_copy+0x88>)
 800e0b4:	6819      	ldr	r1, [r3, #0]
 800e0b6:	f7f2 f8b3 	bl	8000220 <strcmp>
 800e0ba:	bb90      	cbnz	r0, 800e122 <rmw_init_options_copy+0x7e>
 800e0bc:	68ab      	ldr	r3, [r5, #8]
 800e0be:	b113      	cbz	r3, 800e0c6 <rmw_init_options_copy+0x22>
 800e0c0:	250b      	movs	r5, #11
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	bd70      	pop	{r4, r5, r6, pc}
 800e0c6:	4623      	mov	r3, r4
 800e0c8:	462a      	mov	r2, r5
 800e0ca:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800e0ce:	f8d3 c000 	ldr.w	ip, [r3]
 800e0d2:	6858      	ldr	r0, [r3, #4]
 800e0d4:	6899      	ldr	r1, [r3, #8]
 800e0d6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800e0da:	f8c2 e00c 	str.w	lr, [r2, #12]
 800e0de:	3310      	adds	r3, #16
 800e0e0:	42b3      	cmp	r3, r6
 800e0e2:	f8c2 c000 	str.w	ip, [r2]
 800e0e6:	6050      	str	r0, [r2, #4]
 800e0e8:	6091      	str	r1, [r2, #8]
 800e0ea:	f102 0210 	add.w	r2, r2, #16
 800e0ee:	d1ee      	bne.n	800e0ce <rmw_init_options_copy+0x2a>
 800e0f0:	6819      	ldr	r1, [r3, #0]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	480e      	ldr	r0, [pc, #56]	@ (800e130 <rmw_init_options_copy+0x8c>)
 800e0f6:	6053      	str	r3, [r2, #4]
 800e0f8:	6011      	str	r1, [r2, #0]
 800e0fa:	f009 fac1 	bl	8017680 <get_memory>
 800e0fe:	b198      	cbz	r0, 800e128 <rmw_init_options_copy+0x84>
 800e100:	6883      	ldr	r3, [r0, #8]
 800e102:	636b      	str	r3, [r5, #52]	@ 0x34
 800e104:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e106:	f102 0c10 	add.w	ip, r2, #16
 800e10a:	f103 0410 	add.w	r4, r3, #16
 800e10e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e114:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800e118:	2500      	movs	r5, #0
 800e11a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e11e:	4628      	mov	r0, r5
 800e120:	bd70      	pop	{r4, r5, r6, pc}
 800e122:	250c      	movs	r5, #12
 800e124:	4628      	mov	r0, r5
 800e126:	bd70      	pop	{r4, r5, r6, pc}
 800e128:	2501      	movs	r5, #1
 800e12a:	e7ca      	b.n	800e0c2 <rmw_init_options_copy+0x1e>
 800e12c:	0801c960 	.word	0x0801c960
 800e130:	2000b84c 	.word	0x2000b84c

0800e134 <rmw_init_options_fini>:
 800e134:	2800      	cmp	r0, #0
 800e136:	d03d      	beq.n	800e1b4 <rmw_init_options_fini+0x80>
 800e138:	b510      	push	{r4, lr}
 800e13a:	4604      	mov	r4, r0
 800e13c:	b08e      	sub	sp, #56	@ 0x38
 800e13e:	3020      	adds	r0, #32
 800e140:	f7ff fe88 	bl	800de54 <rcutils_allocator_is_valid>
 800e144:	b360      	cbz	r0, 800e1a0 <rmw_init_options_fini+0x6c>
 800e146:	68a0      	ldr	r0, [r4, #8]
 800e148:	b120      	cbz	r0, 800e154 <rmw_init_options_fini+0x20>
 800e14a:	4b1c      	ldr	r3, [pc, #112]	@ (800e1bc <rmw_init_options_fini+0x88>)
 800e14c:	6819      	ldr	r1, [r3, #0]
 800e14e:	f7f2 f867 	bl	8000220 <strcmp>
 800e152:	bb68      	cbnz	r0, 800e1b0 <rmw_init_options_fini+0x7c>
 800e154:	4b1a      	ldr	r3, [pc, #104]	@ (800e1c0 <rmw_init_options_fini+0x8c>)
 800e156:	6819      	ldr	r1, [r3, #0]
 800e158:	b331      	cbz	r1, 800e1a8 <rmw_init_options_fini+0x74>
 800e15a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e15c:	e001      	b.n	800e162 <rmw_init_options_fini+0x2e>
 800e15e:	6849      	ldr	r1, [r1, #4]
 800e160:	b311      	cbz	r1, 800e1a8 <rmw_init_options_fini+0x74>
 800e162:	688b      	ldr	r3, [r1, #8]
 800e164:	429a      	cmp	r2, r3
 800e166:	d1fa      	bne.n	800e15e <rmw_init_options_fini+0x2a>
 800e168:	4815      	ldr	r0, [pc, #84]	@ (800e1c0 <rmw_init_options_fini+0x8c>)
 800e16a:	f009 fa99 	bl	80176a0 <put_memory>
 800e16e:	4668      	mov	r0, sp
 800e170:	f7ff ff02 	bl	800df78 <rmw_get_zero_initialized_init_options>
 800e174:	46ee      	mov	lr, sp
 800e176:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e17a:	46a4      	mov	ip, r4
 800e17c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e180:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e188:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e18c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e190:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e194:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e198:	2300      	movs	r3, #0
 800e19a:	4618      	mov	r0, r3
 800e19c:	b00e      	add	sp, #56	@ 0x38
 800e19e:	bd10      	pop	{r4, pc}
 800e1a0:	230b      	movs	r3, #11
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	b00e      	add	sp, #56	@ 0x38
 800e1a6:	bd10      	pop	{r4, pc}
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	b00e      	add	sp, #56	@ 0x38
 800e1ae:	bd10      	pop	{r4, pc}
 800e1b0:	230c      	movs	r3, #12
 800e1b2:	e7f2      	b.n	800e19a <rmw_init_options_fini+0x66>
 800e1b4:	230b      	movs	r3, #11
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	0801c960 	.word	0x0801c960
 800e1c0:	2000b84c 	.word	0x2000b84c

0800e1c4 <rmw_init>:
 800e1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1c8:	b083      	sub	sp, #12
 800e1ca:	2800      	cmp	r0, #0
 800e1cc:	f000 80d3 	beq.w	800e376 <rmw_init+0x1b2>
 800e1d0:	460e      	mov	r6, r1
 800e1d2:	2900      	cmp	r1, #0
 800e1d4:	f000 80cf 	beq.w	800e376 <rmw_init+0x1b2>
 800e1d8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e1da:	4605      	mov	r5, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 80ca 	beq.w	800e376 <rmw_init+0x1b2>
 800e1e2:	4b78      	ldr	r3, [pc, #480]	@ (800e3c4 <rmw_init+0x200>)
 800e1e4:	6880      	ldr	r0, [r0, #8]
 800e1e6:	681f      	ldr	r7, [r3, #0]
 800e1e8:	b128      	cbz	r0, 800e1f6 <rmw_init+0x32>
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	f7f2 f818 	bl	8000220 <strcmp>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	f040 80ca 	bne.w	800e38a <rmw_init+0x1c6>
 800e1f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1fa:	4c73      	ldr	r4, [pc, #460]	@ (800e3c8 <rmw_init+0x204>)
 800e1fc:	4973      	ldr	r1, [pc, #460]	@ (800e3cc <rmw_init+0x208>)
 800e1fe:	4874      	ldr	r0, [pc, #464]	@ (800e3d0 <rmw_init+0x20c>)
 800e200:	60b7      	str	r7, [r6, #8]
 800e202:	e9c6 2300 	strd	r2, r3, [r6]
 800e206:	68eb      	ldr	r3, [r5, #12]
 800e208:	64b3      	str	r3, [r6, #72]	@ 0x48
 800e20a:	2201      	movs	r2, #1
 800e20c:	f000 fe76 	bl	800eefc <rmw_uxrce_init_session_memory>
 800e210:	4620      	mov	r0, r4
 800e212:	4970      	ldr	r1, [pc, #448]	@ (800e3d4 <rmw_init+0x210>)
 800e214:	2204      	movs	r2, #4
 800e216:	f000 feb1 	bl	800ef7c <rmw_uxrce_init_static_input_buffer_memory>
 800e21a:	f04f 0800 	mov.w	r8, #0
 800e21e:	486c      	ldr	r0, [pc, #432]	@ (800e3d0 <rmw_init+0x20c>)
 800e220:	f884 800d 	strb.w	r8, [r4, #13]
 800e224:	f009 fa2c 	bl	8017680 <get_memory>
 800e228:	2800      	cmp	r0, #0
 800e22a:	f000 80a9 	beq.w	800e380 <rmw_init+0x1bc>
 800e22e:	6884      	ldr	r4, [r0, #8]
 800e230:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800e232:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800e234:	f890 c010 	ldrb.w	ip, [r0, #16]
 800e238:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e23c:	9101      	str	r1, [sp, #4]
 800e23e:	6a00      	ldr	r0, [r0, #32]
 800e240:	9000      	str	r0, [sp, #0]
 800e242:	f104 0910 	add.w	r9, r4, #16
 800e246:	4661      	mov	r1, ip
 800e248:	4648      	mov	r0, r9
 800e24a:	f002 fb4d 	bl	80108e8 <uxr_set_custom_transport_callbacks>
 800e24e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800e252:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e256:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800e25a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800e25e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800e262:	495d      	ldr	r1, [pc, #372]	@ (800e3d8 <rmw_init+0x214>)
 800e264:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800e268:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800e26c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800e270:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800e274:	4859      	ldr	r0, [pc, #356]	@ (800e3dc <rmw_init+0x218>)
 800e276:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800e27a:	2201      	movs	r2, #1
 800e27c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800e27e:	f000 fe1d 	bl	800eebc <rmw_uxrce_init_node_memory>
 800e282:	4957      	ldr	r1, [pc, #348]	@ (800e3e0 <rmw_init+0x21c>)
 800e284:	4857      	ldr	r0, [pc, #348]	@ (800e3e4 <rmw_init+0x220>)
 800e286:	2205      	movs	r2, #5
 800e288:	f000 fdf8 	bl	800ee7c <rmw_uxrce_init_subscription_memory>
 800e28c:	4956      	ldr	r1, [pc, #344]	@ (800e3e8 <rmw_init+0x224>)
 800e28e:	4857      	ldr	r0, [pc, #348]	@ (800e3ec <rmw_init+0x228>)
 800e290:	220a      	movs	r2, #10
 800e292:	f000 fdd3 	bl	800ee3c <rmw_uxrce_init_publisher_memory>
 800e296:	4956      	ldr	r1, [pc, #344]	@ (800e3f0 <rmw_init+0x22c>)
 800e298:	4856      	ldr	r0, [pc, #344]	@ (800e3f4 <rmw_init+0x230>)
 800e29a:	2202      	movs	r2, #2
 800e29c:	f000 fd8e 	bl	800edbc <rmw_uxrce_init_service_memory>
 800e2a0:	4955      	ldr	r1, [pc, #340]	@ (800e3f8 <rmw_init+0x234>)
 800e2a2:	4856      	ldr	r0, [pc, #344]	@ (800e3fc <rmw_init+0x238>)
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	f000 fda9 	bl	800edfc <rmw_uxrce_init_client_memory>
 800e2aa:	4955      	ldr	r1, [pc, #340]	@ (800e400 <rmw_init+0x23c>)
 800e2ac:	4855      	ldr	r0, [pc, #340]	@ (800e404 <rmw_init+0x240>)
 800e2ae:	220f      	movs	r2, #15
 800e2b0:	f000 fe44 	bl	800ef3c <rmw_uxrce_init_topic_memory>
 800e2b4:	4954      	ldr	r1, [pc, #336]	@ (800e408 <rmw_init+0x244>)
 800e2b6:	4855      	ldr	r0, [pc, #340]	@ (800e40c <rmw_init+0x248>)
 800e2b8:	2203      	movs	r2, #3
 800e2ba:	f000 fe7f 	bl	800efbc <rmw_uxrce_init_init_options_impl_memory>
 800e2be:	4954      	ldr	r1, [pc, #336]	@ (800e410 <rmw_init+0x24c>)
 800e2c0:	4854      	ldr	r0, [pc, #336]	@ (800e414 <rmw_init+0x250>)
 800e2c2:	2204      	movs	r2, #4
 800e2c4:	f000 fe9a 	bl	800effc <rmw_uxrce_init_wait_set_memory>
 800e2c8:	4953      	ldr	r1, [pc, #332]	@ (800e418 <rmw_init+0x254>)
 800e2ca:	4854      	ldr	r0, [pc, #336]	@ (800e41c <rmw_init+0x258>)
 800e2cc:	2204      	movs	r2, #4
 800e2ce:	f000 feb5 	bl	800f03c <rmw_uxrce_init_guard_condition_memory>
 800e2d2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e2d4:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800e2d6:	4642      	mov	r2, r8
 800e2d8:	f000 fd2a 	bl	800ed30 <rmw_uxrce_transport_init>
 800e2dc:	4607      	mov	r7, r0
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	d158      	bne.n	800e394 <rmw_init+0x1d0>
 800e2e2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e2e4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800e2e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e2ea:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800e2ee:	4628      	mov	r0, r5
 800e2f0:	f002 fd2e 	bl	8010d50 <uxr_init_session>
 800e2f4:	494a      	ldr	r1, [pc, #296]	@ (800e420 <rmw_init+0x25c>)
 800e2f6:	4622      	mov	r2, r4
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	f002 fd4d 	bl	8010d98 <uxr_set_topic_callback>
 800e2fe:	4949      	ldr	r1, [pc, #292]	@ (800e424 <rmw_init+0x260>)
 800e300:	463a      	mov	r2, r7
 800e302:	4628      	mov	r0, r5
 800e304:	f002 fd44 	bl	8010d90 <uxr_set_status_callback>
 800e308:	4947      	ldr	r1, [pc, #284]	@ (800e428 <rmw_init+0x264>)
 800e30a:	463a      	mov	r2, r7
 800e30c:	4628      	mov	r0, r5
 800e30e:	f002 fd47 	bl	8010da0 <uxr_set_request_callback>
 800e312:	4946      	ldr	r1, [pc, #280]	@ (800e42c <rmw_init+0x268>)
 800e314:	463a      	mov	r2, r7
 800e316:	4628      	mov	r0, r5
 800e318:	f002 fd46 	bl	8010da8 <uxr_set_reply_callback>
 800e31c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e320:	2304      	movs	r3, #4
 800e322:	0092      	lsls	r2, r2, #2
 800e324:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800e328:	4628      	mov	r0, r5
 800e32a:	f002 fd7b 	bl	8010e24 <uxr_create_input_reliable_stream>
 800e32e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e332:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800e336:	0092      	lsls	r2, r2, #2
 800e338:	2304      	movs	r3, #4
 800e33a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800e33e:	4628      	mov	r0, r5
 800e340:	f002 fd48 	bl	8010dd4 <uxr_create_output_reliable_stream>
 800e344:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800e348:	4628      	mov	r0, r5
 800e34a:	f002 fd65 	bl	8010e18 <uxr_create_input_best_effort_stream>
 800e34e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800e352:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800e356:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e35a:	3114      	adds	r1, #20
 800e35c:	4628      	mov	r0, r5
 800e35e:	f002 fd27 	bl	8010db0 <uxr_create_output_best_effort_stream>
 800e362:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800e366:	4628      	mov	r0, r5
 800e368:	f003 fb1a 	bl	80119a0 <uxr_create_session>
 800e36c:	b1f8      	cbz	r0, 800e3ae <rmw_init+0x1ea>
 800e36e:	4638      	mov	r0, r7
 800e370:	b003      	add	sp, #12
 800e372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e376:	270b      	movs	r7, #11
 800e378:	4638      	mov	r0, r7
 800e37a:	b003      	add	sp, #12
 800e37c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e380:	2701      	movs	r7, #1
 800e382:	4638      	mov	r0, r7
 800e384:	b003      	add	sp, #12
 800e386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e38a:	270c      	movs	r7, #12
 800e38c:	4638      	mov	r0, r7
 800e38e:	b003      	add	sp, #12
 800e390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e394:	4648      	mov	r0, r9
 800e396:	f002 fae9 	bl	801096c <uxr_close_custom_transport>
 800e39a:	480d      	ldr	r0, [pc, #52]	@ (800e3d0 <rmw_init+0x20c>)
 800e39c:	4621      	mov	r1, r4
 800e39e:	f009 f97f 	bl	80176a0 <put_memory>
 800e3a2:	4638      	mov	r0, r7
 800e3a4:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800e3a8:	b003      	add	sp, #12
 800e3aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3ae:	4648      	mov	r0, r9
 800e3b0:	f002 fadc 	bl	801096c <uxr_close_custom_transport>
 800e3b4:	4806      	ldr	r0, [pc, #24]	@ (800e3d0 <rmw_init+0x20c>)
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	f009 f972 	bl	80176a0 <put_memory>
 800e3bc:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800e3be:	2701      	movs	r7, #1
 800e3c0:	e7d5      	b.n	800e36e <rmw_init+0x1aa>
 800e3c2:	bf00      	nop
 800e3c4:	0801c960 	.word	0x0801c960
 800e3c8:	2000b89c 	.word	0x2000b89c
 800e3cc:	20007b48 	.word	0x20007b48
 800e3d0:	2000b88c 	.word	0x2000b88c
 800e3d4:	200090f0 	.word	0x200090f0
 800e3d8:	200070a4 	.word	0x200070a4
 800e3dc:	2000b85c 	.word	0x2000b85c
 800e3e0:	2000b1f0 	.word	0x2000b1f0
 800e3e4:	2000b8ac 	.word	0x2000b8ac
 800e3e8:	20007148 	.word	0x20007148
 800e3ec:	2000b86c 	.word	0x2000b86c
 800e3f0:	200079b8 	.word	0x200079b8
 800e3f4:	2000b87c 	.word	0x2000b87c
 800e3f8:	20006ed8 	.word	0x20006ed8
 800e3fc:	20006ec4 	.word	0x20006ec4
 800e400:	2000b628 	.word	0x2000b628
 800e404:	2000b8bc 	.word	0x2000b8bc
 800e408:	20007020 	.word	0x20007020
 800e40c:	2000b84c 	.word	0x2000b84c
 800e410:	2000b7cc 	.word	0x2000b7cc
 800e414:	2000b8cc 	.word	0x2000b8cc
 800e418:	20006fa0 	.word	0x20006fa0
 800e41c:	2000b83c 	.word	0x2000b83c
 800e420:	080174b9 	.word	0x080174b9
 800e424:	080174b1 	.word	0x080174b1
 800e428:	08017551 	.word	0x08017551
 800e42c:	080175ed 	.word	0x080175ed

0800e430 <rmw_context_fini>:
 800e430:	4b17      	ldr	r3, [pc, #92]	@ (800e490 <rmw_context_fini+0x60>)
 800e432:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800e434:	b570      	push	{r4, r5, r6, lr}
 800e436:	681c      	ldr	r4, [r3, #0]
 800e438:	4605      	mov	r5, r0
 800e43a:	b334      	cbz	r4, 800e48a <rmw_context_fini+0x5a>
 800e43c:	2600      	movs	r6, #0
 800e43e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800e442:	6902      	ldr	r2, [r0, #16]
 800e444:	428a      	cmp	r2, r1
 800e446:	d018      	beq.n	800e47a <rmw_context_fini+0x4a>
 800e448:	2c00      	cmp	r4, #0
 800e44a:	d1f8      	bne.n	800e43e <rmw_context_fini+0xe>
 800e44c:	b189      	cbz	r1, 800e472 <rmw_context_fini+0x42>
 800e44e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800e452:	789b      	ldrb	r3, [r3, #2]
 800e454:	2b01      	cmp	r3, #1
 800e456:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800e45a:	bf14      	ite	ne
 800e45c:	210a      	movne	r1, #10
 800e45e:	2100      	moveq	r1, #0
 800e460:	f003 fa76 	bl	8011950 <uxr_delete_session_retries>
 800e464:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e466:	f000 fe09 	bl	800f07c <rmw_uxrce_fini_session_memory>
 800e46a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e46c:	3010      	adds	r0, #16
 800e46e:	f002 fa7d 	bl	801096c <uxr_close_custom_transport>
 800e472:	2300      	movs	r3, #0
 800e474:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800e476:	4630      	mov	r0, r6
 800e478:	bd70      	pop	{r4, r5, r6, pc}
 800e47a:	3018      	adds	r0, #24
 800e47c:	f000 f89c 	bl	800e5b8 <rmw_destroy_node>
 800e480:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e482:	4606      	mov	r6, r0
 800e484:	2c00      	cmp	r4, #0
 800e486:	d1da      	bne.n	800e43e <rmw_context_fini+0xe>
 800e488:	e7e0      	b.n	800e44c <rmw_context_fini+0x1c>
 800e48a:	4626      	mov	r6, r4
 800e48c:	e7de      	b.n	800e44c <rmw_context_fini+0x1c>
 800e48e:	bf00      	nop
 800e490:	2000b85c 	.word	0x2000b85c

0800e494 <create_node>:
 800e494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e498:	b083      	sub	sp, #12
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d05f      	beq.n	800e55e <create_node+0xca>
 800e49e:	4606      	mov	r6, r0
 800e4a0:	4835      	ldr	r0, [pc, #212]	@ (800e578 <create_node+0xe4>)
 800e4a2:	460f      	mov	r7, r1
 800e4a4:	4690      	mov	r8, r2
 800e4a6:	461d      	mov	r5, r3
 800e4a8:	f009 f8ea 	bl	8017680 <get_memory>
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	d056      	beq.n	800e55e <create_node+0xca>
 800e4b0:	6884      	ldr	r4, [r0, #8]
 800e4b2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e4b4:	6123      	str	r3, [r4, #16]
 800e4b6:	f009 f94b 	bl	8017750 <rmw_get_implementation_identifier>
 800e4ba:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e4be:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e4c2:	f8c4 9020 	str.w	r9, [r4, #32]
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	f7f1 feb4 	bl	8000234 <strlen>
 800e4cc:	1c42      	adds	r2, r0, #1
 800e4ce:	2a3c      	cmp	r2, #60	@ 0x3c
 800e4d0:	f104 0518 	add.w	r5, r4, #24
 800e4d4:	d840      	bhi.n	800e558 <create_node+0xc4>
 800e4d6:	4648      	mov	r0, r9
 800e4d8:	4631      	mov	r1, r6
 800e4da:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e4de:	f00b fd02 	bl	8019ee6 <memcpy>
 800e4e2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e4e6:	4638      	mov	r0, r7
 800e4e8:	f7f1 fea4 	bl	8000234 <strlen>
 800e4ec:	1c42      	adds	r2, r0, #1
 800e4ee:	2a3c      	cmp	r2, #60	@ 0x3c
 800e4f0:	d832      	bhi.n	800e558 <create_node+0xc4>
 800e4f2:	4639      	mov	r1, r7
 800e4f4:	4648      	mov	r0, r9
 800e4f6:	f00b fcf6 	bl	8019ee6 <memcpy>
 800e4fa:	6923      	ldr	r3, [r4, #16]
 800e4fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e500:	2101      	movs	r1, #1
 800e502:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e506:	1842      	adds	r2, r0, r1
 800e508:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e50c:	f002 fa32 	bl	8010974 <uxr_object_id>
 800e510:	6160      	str	r0, [r4, #20]
 800e512:	783b      	ldrb	r3, [r7, #0]
 800e514:	2b2f      	cmp	r3, #47	@ 0x2f
 800e516:	d127      	bne.n	800e568 <create_node+0xd4>
 800e518:	787b      	ldrb	r3, [r7, #1]
 800e51a:	bb2b      	cbnz	r3, 800e568 <create_node+0xd4>
 800e51c:	4a17      	ldr	r2, [pc, #92]	@ (800e57c <create_node+0xe8>)
 800e51e:	4818      	ldr	r0, [pc, #96]	@ (800e580 <create_node+0xec>)
 800e520:	4633      	mov	r3, r6
 800e522:	213c      	movs	r1, #60	@ 0x3c
 800e524:	f00b faa8 	bl	8019a78 <sniprintf>
 800e528:	6920      	ldr	r0, [r4, #16]
 800e52a:	4915      	ldr	r1, [pc, #84]	@ (800e580 <create_node+0xec>)
 800e52c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e530:	9100      	str	r1, [sp, #0]
 800e532:	2106      	movs	r1, #6
 800e534:	9101      	str	r1, [sp, #4]
 800e536:	6811      	ldr	r1, [r2, #0]
 800e538:	6962      	ldr	r2, [r4, #20]
 800e53a:	fa1f f388 	uxth.w	r3, r8
 800e53e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e542:	f002 f80d 	bl	8010560 <uxr_buffer_create_participant_bin>
 800e546:	4602      	mov	r2, r0
 800e548:	6920      	ldr	r0, [r4, #16]
 800e54a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e54e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e552:	f000 ff0b 	bl	800f36c <run_xrce_session>
 800e556:	b918      	cbnz	r0, 800e560 <create_node+0xcc>
 800e558:	4628      	mov	r0, r5
 800e55a:	f000 fd95 	bl	800f088 <rmw_uxrce_fini_node_memory>
 800e55e:	2500      	movs	r5, #0
 800e560:	4628      	mov	r0, r5
 800e562:	b003      	add	sp, #12
 800e564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e568:	4a06      	ldr	r2, [pc, #24]	@ (800e584 <create_node+0xf0>)
 800e56a:	9600      	str	r6, [sp, #0]
 800e56c:	463b      	mov	r3, r7
 800e56e:	213c      	movs	r1, #60	@ 0x3c
 800e570:	4803      	ldr	r0, [pc, #12]	@ (800e580 <create_node+0xec>)
 800e572:	f00b fa81 	bl	8019a78 <sniprintf>
 800e576:	e7d7      	b.n	800e528 <create_node+0x94>
 800e578:	2000b85c 	.word	0x2000b85c
 800e57c:	0801bb98 	.word	0x0801bb98
 800e580:	20006d48 	.word	0x20006d48
 800e584:	0801bb80 	.word	0x0801bb80

0800e588 <rmw_create_node>:
 800e588:	b199      	cbz	r1, 800e5b2 <rmw_create_node+0x2a>
 800e58a:	780b      	ldrb	r3, [r1, #0]
 800e58c:	468c      	mov	ip, r1
 800e58e:	b183      	cbz	r3, 800e5b2 <rmw_create_node+0x2a>
 800e590:	b410      	push	{r4}
 800e592:	4614      	mov	r4, r2
 800e594:	b14a      	cbz	r2, 800e5aa <rmw_create_node+0x22>
 800e596:	7813      	ldrb	r3, [r2, #0]
 800e598:	b13b      	cbz	r3, 800e5aa <rmw_create_node+0x22>
 800e59a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e59c:	4603      	mov	r3, r0
 800e59e:	4621      	mov	r1, r4
 800e5a0:	4660      	mov	r0, ip
 800e5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5a6:	f7ff bf75 	b.w	800e494 <create_node>
 800e5aa:	2000      	movs	r0, #0
 800e5ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5b0:	4770      	bx	lr
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop

0800e5b8 <rmw_destroy_node>:
 800e5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ba:	b328      	cbz	r0, 800e608 <rmw_destroy_node+0x50>
 800e5bc:	4607      	mov	r7, r0
 800e5be:	6800      	ldr	r0, [r0, #0]
 800e5c0:	b120      	cbz	r0, 800e5cc <rmw_destroy_node+0x14>
 800e5c2:	4b36      	ldr	r3, [pc, #216]	@ (800e69c <rmw_destroy_node+0xe4>)
 800e5c4:	6819      	ldr	r1, [r3, #0]
 800e5c6:	f7f1 fe2b 	bl	8000220 <strcmp>
 800e5ca:	b9e8      	cbnz	r0, 800e608 <rmw_destroy_node+0x50>
 800e5cc:	687d      	ldr	r5, [r7, #4]
 800e5ce:	b1dd      	cbz	r5, 800e608 <rmw_destroy_node+0x50>
 800e5d0:	4b33      	ldr	r3, [pc, #204]	@ (800e6a0 <rmw_destroy_node+0xe8>)
 800e5d2:	681c      	ldr	r4, [r3, #0]
 800e5d4:	2c00      	cmp	r4, #0
 800e5d6:	d05f      	beq.n	800e698 <rmw_destroy_node+0xe0>
 800e5d8:	2600      	movs	r6, #0
 800e5da:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e5de:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e5e2:	429d      	cmp	r5, r3
 800e5e4:	d013      	beq.n	800e60e <rmw_destroy_node+0x56>
 800e5e6:	2c00      	cmp	r4, #0
 800e5e8:	d1f7      	bne.n	800e5da <rmw_destroy_node+0x22>
 800e5ea:	4b2e      	ldr	r3, [pc, #184]	@ (800e6a4 <rmw_destroy_node+0xec>)
 800e5ec:	681c      	ldr	r4, [r3, #0]
 800e5ee:	b1c4      	cbz	r4, 800e622 <rmw_destroy_node+0x6a>
 800e5f0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e5f4:	6a0b      	ldr	r3, [r1, #32]
 800e5f6:	429d      	cmp	r5, r3
 800e5f8:	d1f9      	bne.n	800e5ee <rmw_destroy_node+0x36>
 800e5fa:	317c      	adds	r1, #124	@ 0x7c
 800e5fc:	4638      	mov	r0, r7
 800e5fe:	f000 fb37 	bl	800ec70 <rmw_destroy_subscription>
 800e602:	2801      	cmp	r0, #1
 800e604:	4606      	mov	r6, r0
 800e606:	d1f2      	bne.n	800e5ee <rmw_destroy_node+0x36>
 800e608:	2601      	movs	r6, #1
 800e60a:	4630      	mov	r0, r6
 800e60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e60e:	3184      	adds	r1, #132	@ 0x84
 800e610:	4638      	mov	r0, r7
 800e612:	f000 f9a5 	bl	800e960 <rmw_destroy_publisher>
 800e616:	2801      	cmp	r0, #1
 800e618:	4606      	mov	r6, r0
 800e61a:	d0f5      	beq.n	800e608 <rmw_destroy_node+0x50>
 800e61c:	2c00      	cmp	r4, #0
 800e61e:	d1dc      	bne.n	800e5da <rmw_destroy_node+0x22>
 800e620:	e7e3      	b.n	800e5ea <rmw_destroy_node+0x32>
 800e622:	4b21      	ldr	r3, [pc, #132]	@ (800e6a8 <rmw_destroy_node+0xf0>)
 800e624:	681c      	ldr	r4, [r3, #0]
 800e626:	b16c      	cbz	r4, 800e644 <rmw_destroy_node+0x8c>
 800e628:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e62c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e62e:	429d      	cmp	r5, r3
 800e630:	d1f9      	bne.n	800e626 <rmw_destroy_node+0x6e>
 800e632:	317c      	adds	r1, #124	@ 0x7c
 800e634:	4638      	mov	r0, r7
 800e636:	f000 fab7 	bl	800eba8 <rmw_destroy_service>
 800e63a:	2801      	cmp	r0, #1
 800e63c:	4606      	mov	r6, r0
 800e63e:	d0e3      	beq.n	800e608 <rmw_destroy_node+0x50>
 800e640:	2c00      	cmp	r4, #0
 800e642:	d1f1      	bne.n	800e628 <rmw_destroy_node+0x70>
 800e644:	4b19      	ldr	r3, [pc, #100]	@ (800e6ac <rmw_destroy_node+0xf4>)
 800e646:	681c      	ldr	r4, [r3, #0]
 800e648:	b16c      	cbz	r4, 800e666 <rmw_destroy_node+0xae>
 800e64a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e64e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e650:	429d      	cmp	r5, r3
 800e652:	d1f9      	bne.n	800e648 <rmw_destroy_node+0x90>
 800e654:	317c      	adds	r1, #124	@ 0x7c
 800e656:	4638      	mov	r0, r7
 800e658:	f009 f836 	bl	80176c8 <rmw_destroy_client>
 800e65c:	2801      	cmp	r0, #1
 800e65e:	4606      	mov	r6, r0
 800e660:	d0d2      	beq.n	800e608 <rmw_destroy_node+0x50>
 800e662:	2c00      	cmp	r4, #0
 800e664:	d1f1      	bne.n	800e64a <rmw_destroy_node+0x92>
 800e666:	6928      	ldr	r0, [r5, #16]
 800e668:	696a      	ldr	r2, [r5, #20]
 800e66a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e66e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e672:	6819      	ldr	r1, [r3, #0]
 800e674:	f001 ff28 	bl	80104c8 <uxr_buffer_delete_entity>
 800e678:	4602      	mov	r2, r0
 800e67a:	6928      	ldr	r0, [r5, #16]
 800e67c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e680:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e684:	f000 fe72 	bl	800f36c <run_xrce_session>
 800e688:	2800      	cmp	r0, #0
 800e68a:	bf08      	it	eq
 800e68c:	2602      	moveq	r6, #2
 800e68e:	4638      	mov	r0, r7
 800e690:	f000 fcfa 	bl	800f088 <rmw_uxrce_fini_node_memory>
 800e694:	4630      	mov	r0, r6
 800e696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e698:	4626      	mov	r6, r4
 800e69a:	e7a6      	b.n	800e5ea <rmw_destroy_node+0x32>
 800e69c:	0801c960 	.word	0x0801c960
 800e6a0:	2000b86c 	.word	0x2000b86c
 800e6a4:	2000b8ac 	.word	0x2000b8ac
 800e6a8:	2000b87c 	.word	0x2000b87c
 800e6ac:	20006ec4 	.word	0x20006ec4

0800e6b0 <rmw_node_get_graph_guard_condition>:
 800e6b0:	6843      	ldr	r3, [r0, #4]
 800e6b2:	6918      	ldr	r0, [r3, #16]
 800e6b4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e6b8:	4770      	bx	lr
 800e6ba:	bf00      	nop

0800e6bc <flush_session>:
 800e6bc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e6be:	f002 bfa9 	b.w	8011614 <uxr_run_session_until_confirm_delivery>
 800e6c2:	bf00      	nop

0800e6c4 <rmw_publish>:
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d053      	beq.n	800e770 <rmw_publish+0xac>
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	460d      	mov	r5, r1
 800e6cc:	b08e      	sub	sp, #56	@ 0x38
 800e6ce:	2900      	cmp	r1, #0
 800e6d0:	d04b      	beq.n	800e76a <rmw_publish+0xa6>
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	6800      	ldr	r0, [r0, #0]
 800e6d6:	f000 ff63 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	d045      	beq.n	800e76a <rmw_publish+0xa6>
 800e6de:	6866      	ldr	r6, [r4, #4]
 800e6e0:	2e00      	cmp	r6, #0
 800e6e2:	d042      	beq.n	800e76a <rmw_publish+0xa6>
 800e6e4:	69b4      	ldr	r4, [r6, #24]
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	6923      	ldr	r3, [r4, #16]
 800e6ea:	4798      	blx	r3
 800e6ec:	69f3      	ldr	r3, [r6, #28]
 800e6ee:	9005      	str	r0, [sp, #20]
 800e6f0:	b113      	cbz	r3, 800e6f8 <rmw_publish+0x34>
 800e6f2:	a805      	add	r0, sp, #20
 800e6f4:	4798      	blx	r3
 800e6f6:	9805      	ldr	r0, [sp, #20]
 800e6f8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	9000      	str	r0, [sp, #0]
 800e700:	6972      	ldr	r2, [r6, #20]
 800e702:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e704:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e708:	ab06      	add	r3, sp, #24
 800e70a:	f004 fa57 	bl	8012bbc <uxr_prepare_output_stream>
 800e70e:	b1d8      	cbz	r0, 800e748 <rmw_publish+0x84>
 800e710:	68a3      	ldr	r3, [r4, #8]
 800e712:	a906      	add	r1, sp, #24
 800e714:	4628      	mov	r0, r5
 800e716:	4798      	blx	r3
 800e718:	6a33      	ldr	r3, [r6, #32]
 800e71a:	4604      	mov	r4, r0
 800e71c:	b10b      	cbz	r3, 800e722 <rmw_publish+0x5e>
 800e71e:	a806      	add	r0, sp, #24
 800e720:	4798      	blx	r3
 800e722:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e726:	2b01      	cmp	r3, #1
 800e728:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e72c:	d022      	beq.n	800e774 <rmw_publish+0xb0>
 800e72e:	6918      	ldr	r0, [r3, #16]
 800e730:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e732:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e736:	f002 ff6d 	bl	8011614 <uxr_run_session_until_confirm_delivery>
 800e73a:	4020      	ands	r0, r4
 800e73c:	b2c4      	uxtb	r4, r0
 800e73e:	f084 0001 	eor.w	r0, r4, #1
 800e742:	b2c0      	uxtb	r0, r0
 800e744:	b00e      	add	sp, #56	@ 0x38
 800e746:	bd70      	pop	{r4, r5, r6, pc}
 800e748:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e74c:	6918      	ldr	r0, [r3, #16]
 800e74e:	9b05      	ldr	r3, [sp, #20]
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	4b0b      	ldr	r3, [pc, #44]	@ (800e780 <rmw_publish+0xbc>)
 800e754:	9301      	str	r3, [sp, #4]
 800e756:	9602      	str	r6, [sp, #8]
 800e758:	6972      	ldr	r2, [r6, #20]
 800e75a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e75c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e760:	ab06      	add	r3, sp, #24
 800e762:	f004 fa5b 	bl	8012c1c <uxr_prepare_output_stream_fragmented>
 800e766:	2800      	cmp	r0, #0
 800e768:	d1d2      	bne.n	800e710 <rmw_publish+0x4c>
 800e76a:	2001      	movs	r0, #1
 800e76c:	b00e      	add	sp, #56	@ 0x38
 800e76e:	bd70      	pop	{r4, r5, r6, pc}
 800e770:	2001      	movs	r0, #1
 800e772:	4770      	bx	lr
 800e774:	6918      	ldr	r0, [r3, #16]
 800e776:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e77a:	f002 fb8b 	bl	8010e94 <uxr_flash_output_streams>
 800e77e:	e7de      	b.n	800e73e <rmw_publish+0x7a>
 800e780:	0800e6bd 	.word	0x0800e6bd

0800e784 <rmw_create_publisher>:
 800e784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e788:	b087      	sub	sp, #28
 800e78a:	2800      	cmp	r0, #0
 800e78c:	f000 80cc 	beq.w	800e928 <rmw_create_publisher+0x1a4>
 800e790:	460e      	mov	r6, r1
 800e792:	2900      	cmp	r1, #0
 800e794:	f000 80c8 	beq.w	800e928 <rmw_create_publisher+0x1a4>
 800e798:	4604      	mov	r4, r0
 800e79a:	6800      	ldr	r0, [r0, #0]
 800e79c:	4615      	mov	r5, r2
 800e79e:	4698      	mov	r8, r3
 800e7a0:	f000 fefe 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	f000 80bf 	beq.w	800e928 <rmw_create_publisher+0x1a4>
 800e7aa:	2d00      	cmp	r5, #0
 800e7ac:	f000 80bc 	beq.w	800e928 <rmw_create_publisher+0x1a4>
 800e7b0:	782b      	ldrb	r3, [r5, #0]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f000 80b8 	beq.w	800e928 <rmw_create_publisher+0x1a4>
 800e7b8:	f1b8 0f00 	cmp.w	r8, #0
 800e7bc:	f000 80b4 	beq.w	800e928 <rmw_create_publisher+0x1a4>
 800e7c0:	485c      	ldr	r0, [pc, #368]	@ (800e934 <rmw_create_publisher+0x1b0>)
 800e7c2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e7c6:	f008 ff5b 	bl	8017680 <get_memory>
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	f000 80ac 	beq.w	800e928 <rmw_create_publisher+0x1a4>
 800e7d0:	6884      	ldr	r4, [r0, #8]
 800e7d2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e7d6:	f008 ffbb 	bl	8017750 <rmw_get_implementation_identifier>
 800e7da:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e7de:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e7e2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	f7f1 fd24 	bl	8000234 <strlen>
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	283c      	cmp	r0, #60	@ 0x3c
 800e7f0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e7f4:	f200 8091 	bhi.w	800e91a <rmw_create_publisher+0x196>
 800e7f8:	4a4f      	ldr	r2, [pc, #316]	@ (800e938 <rmw_create_publisher+0x1b4>)
 800e7fa:	462b      	mov	r3, r5
 800e7fc:	213c      	movs	r1, #60	@ 0x3c
 800e7fe:	4650      	mov	r0, sl
 800e800:	f00b f93a 	bl	8019a78 <sniprintf>
 800e804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e808:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e80a:	4641      	mov	r1, r8
 800e80c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e810:	2250      	movs	r2, #80	@ 0x50
 800e812:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e816:	f00b fb66 	bl	8019ee6 <memcpy>
 800e81a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e81e:	4947      	ldr	r1, [pc, #284]	@ (800e93c <rmw_create_publisher+0x1b8>)
 800e820:	2b02      	cmp	r3, #2
 800e822:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e826:	bf0c      	ite	eq
 800e828:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e82c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e830:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e832:	2300      	movs	r3, #0
 800e834:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e838:	4630      	mov	r0, r6
 800e83a:	f000 febf 	bl	800f5bc <get_message_typesupport_handle>
 800e83e:	2800      	cmp	r0, #0
 800e840:	d06b      	beq.n	800e91a <rmw_create_publisher+0x196>
 800e842:	6842      	ldr	r2, [r0, #4]
 800e844:	61a2      	str	r2, [r4, #24]
 800e846:	2a00      	cmp	r2, #0
 800e848:	d067      	beq.n	800e91a <rmw_create_publisher+0x196>
 800e84a:	4629      	mov	r1, r5
 800e84c:	4643      	mov	r3, r8
 800e84e:	4648      	mov	r0, r9
 800e850:	f008 ff84 	bl	801775c <create_topic>
 800e854:	6260      	str	r0, [r4, #36]	@ 0x24
 800e856:	2800      	cmp	r0, #0
 800e858:	d063      	beq.n	800e922 <rmw_create_publisher+0x19e>
 800e85a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e85e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e862:	2103      	movs	r1, #3
 800e864:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e868:	1c42      	adds	r2, r0, #1
 800e86a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e86e:	f002 f881 	bl	8010974 <uxr_object_id>
 800e872:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e876:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e87a:	6120      	str	r0, [r4, #16]
 800e87c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e880:	6910      	ldr	r0, [r2, #16]
 800e882:	2506      	movs	r5, #6
 800e884:	9500      	str	r5, [sp, #0]
 800e886:	6819      	ldr	r1, [r3, #0]
 800e888:	6922      	ldr	r2, [r4, #16]
 800e88a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e88e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e892:	f001 fecd 	bl	8010630 <uxr_buffer_create_publisher_bin>
 800e896:	4602      	mov	r2, r0
 800e898:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e89c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e8a0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e8a4:	f000 fd62 	bl	800f36c <run_xrce_session>
 800e8a8:	b3b8      	cbz	r0, 800e91a <rmw_create_publisher+0x196>
 800e8aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e8b2:	2105      	movs	r1, #5
 800e8b4:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e8b8:	1c42      	adds	r2, r0, #1
 800e8ba:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e8be:	f002 f859 	bl	8010974 <uxr_object_id>
 800e8c2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e8c6:	6160      	str	r0, [r4, #20]
 800e8c8:	691e      	ldr	r6, [r3, #16]
 800e8ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8ce:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e8d2:	f10d 0a10 	add.w	sl, sp, #16
 800e8d6:	4641      	mov	r1, r8
 800e8d8:	4650      	mov	r0, sl
 800e8da:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e8de:	f000 fd61 	bl	800f3a4 <convert_qos_profile>
 800e8e2:	9503      	str	r5, [sp, #12]
 800e8e4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e8e8:	9001      	str	r0, [sp, #4]
 800e8ea:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e8ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e8f8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e8fc:	f8d8 1000 	ldr.w	r1, [r8]
 800e900:	4630      	mov	r0, r6
 800e902:	f001 fec5 	bl	8010690 <uxr_buffer_create_datawriter_bin>
 800e906:	4602      	mov	r2, r0
 800e908:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e90c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e910:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e914:	f000 fd2a 	bl	800f36c <run_xrce_session>
 800e918:	b938      	cbnz	r0, 800e92a <rmw_create_publisher+0x1a6>
 800e91a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e91c:	b108      	cbz	r0, 800e922 <rmw_create_publisher+0x19e>
 800e91e:	f000 fc23 	bl	800f168 <rmw_uxrce_fini_topic_memory>
 800e922:	4638      	mov	r0, r7
 800e924:	f000 fbc8 	bl	800f0b8 <rmw_uxrce_fini_publisher_memory>
 800e928:	2700      	movs	r7, #0
 800e92a:	4638      	mov	r0, r7
 800e92c:	b007      	add	sp, #28
 800e92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e932:	bf00      	nop
 800e934:	2000b86c 	.word	0x2000b86c
 800e938:	0801bb98 	.word	0x0801bb98
 800e93c:	0801b500 	.word	0x0801b500

0800e940 <rmw_publisher_get_actual_qos>:
 800e940:	b150      	cbz	r0, 800e958 <rmw_publisher_get_actual_qos+0x18>
 800e942:	b508      	push	{r3, lr}
 800e944:	460b      	mov	r3, r1
 800e946:	b149      	cbz	r1, 800e95c <rmw_publisher_get_actual_qos+0x1c>
 800e948:	6841      	ldr	r1, [r0, #4]
 800e94a:	2250      	movs	r2, #80	@ 0x50
 800e94c:	3128      	adds	r1, #40	@ 0x28
 800e94e:	4618      	mov	r0, r3
 800e950:	f00b fac9 	bl	8019ee6 <memcpy>
 800e954:	2000      	movs	r0, #0
 800e956:	bd08      	pop	{r3, pc}
 800e958:	200b      	movs	r0, #11
 800e95a:	4770      	bx	lr
 800e95c:	200b      	movs	r0, #11
 800e95e:	bd08      	pop	{r3, pc}

0800e960 <rmw_destroy_publisher>:
 800e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e962:	b128      	cbz	r0, 800e970 <rmw_destroy_publisher+0x10>
 800e964:	4604      	mov	r4, r0
 800e966:	6800      	ldr	r0, [r0, #0]
 800e968:	460d      	mov	r5, r1
 800e96a:	f000 fe19 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 800e96e:	b910      	cbnz	r0, 800e976 <rmw_destroy_publisher+0x16>
 800e970:	2401      	movs	r4, #1
 800e972:	4620      	mov	r0, r4
 800e974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e976:	6863      	ldr	r3, [r4, #4]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d0f9      	beq.n	800e970 <rmw_destroy_publisher+0x10>
 800e97c:	2d00      	cmp	r5, #0
 800e97e:	d0f7      	beq.n	800e970 <rmw_destroy_publisher+0x10>
 800e980:	6828      	ldr	r0, [r5, #0]
 800e982:	f000 fe0d 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 800e986:	2800      	cmp	r0, #0
 800e988:	d0f2      	beq.n	800e970 <rmw_destroy_publisher+0x10>
 800e98a:	686c      	ldr	r4, [r5, #4]
 800e98c:	2c00      	cmp	r4, #0
 800e98e:	d0ef      	beq.n	800e970 <rmw_destroy_publisher+0x10>
 800e990:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e992:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e996:	f008 ff31 	bl	80177fc <destroy_topic>
 800e99a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e99e:	6962      	ldr	r2, [r4, #20]
 800e9a0:	6918      	ldr	r0, [r3, #16]
 800e9a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e9a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e9aa:	6819      	ldr	r1, [r3, #0]
 800e9ac:	f001 fd8c 	bl	80104c8 <uxr_buffer_delete_entity>
 800e9b0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e9b4:	6922      	ldr	r2, [r4, #16]
 800e9b6:	691b      	ldr	r3, [r3, #16]
 800e9b8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e9bc:	4604      	mov	r4, r0
 800e9be:	6809      	ldr	r1, [r1, #0]
 800e9c0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e9c4:	f001 fd80 	bl	80104c8 <uxr_buffer_delete_entity>
 800e9c8:	693e      	ldr	r6, [r7, #16]
 800e9ca:	4622      	mov	r2, r4
 800e9cc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e9d0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	f000 fcc8 	bl	800f36c <run_xrce_session>
 800e9dc:	693e      	ldr	r6, [r7, #16]
 800e9de:	4622      	mov	r2, r4
 800e9e0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e9e4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e9e8:	4604      	mov	r4, r0
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	f000 fcbe 	bl	800f36c <run_xrce_session>
 800e9f0:	b12c      	cbz	r4, 800e9fe <rmw_destroy_publisher+0x9e>
 800e9f2:	b120      	cbz	r0, 800e9fe <rmw_destroy_publisher+0x9e>
 800e9f4:	2400      	movs	r4, #0
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	f000 fb5e 	bl	800f0b8 <rmw_uxrce_fini_publisher_memory>
 800e9fc:	e7b9      	b.n	800e972 <rmw_destroy_publisher+0x12>
 800e9fe:	2402      	movs	r4, #2
 800ea00:	e7f9      	b.n	800e9f6 <rmw_destroy_publisher+0x96>
 800ea02:	bf00      	nop

0800ea04 <rmw_create_service>:
 800ea04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea08:	b091      	sub	sp, #68	@ 0x44
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	f000 80ba 	beq.w	800eb84 <rmw_create_service+0x180>
 800ea10:	4689      	mov	r9, r1
 800ea12:	2900      	cmp	r1, #0
 800ea14:	f000 80b6 	beq.w	800eb84 <rmw_create_service+0x180>
 800ea18:	4606      	mov	r6, r0
 800ea1a:	6800      	ldr	r0, [r0, #0]
 800ea1c:	4614      	mov	r4, r2
 800ea1e:	461d      	mov	r5, r3
 800ea20:	f000 fdbe 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	f000 80ad 	beq.w	800eb84 <rmw_create_service+0x180>
 800ea2a:	2c00      	cmp	r4, #0
 800ea2c:	f000 80aa 	beq.w	800eb84 <rmw_create_service+0x180>
 800ea30:	7823      	ldrb	r3, [r4, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f000 80a6 	beq.w	800eb84 <rmw_create_service+0x180>
 800ea38:	2d00      	cmp	r5, #0
 800ea3a:	f000 80a3 	beq.w	800eb84 <rmw_create_service+0x180>
 800ea3e:	4854      	ldr	r0, [pc, #336]	@ (800eb90 <rmw_create_service+0x18c>)
 800ea40:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800ea44:	f008 fe1c 	bl	8017680 <get_memory>
 800ea48:	4606      	mov	r6, r0
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	f000 809b 	beq.w	800eb86 <rmw_create_service+0x182>
 800ea50:	6887      	ldr	r7, [r0, #8]
 800ea52:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800ea56:	f008 fe7b 	bl	8017750 <rmw_get_implementation_identifier>
 800ea5a:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800ea5e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ea60:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800ea64:	4620      	mov	r0, r4
 800ea66:	f7f1 fbe5 	bl	8000234 <strlen>
 800ea6a:	1c42      	adds	r2, r0, #1
 800ea6c:	2a3c      	cmp	r2, #60	@ 0x3c
 800ea6e:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800ea72:	f200 8084 	bhi.w	800eb7e <rmw_create_service+0x17a>
 800ea76:	4621      	mov	r1, r4
 800ea78:	4650      	mov	r0, sl
 800ea7a:	f00b fa34 	bl	8019ee6 <memcpy>
 800ea7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ea82:	4629      	mov	r1, r5
 800ea84:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800ea88:	677b      	str	r3, [r7, #116]	@ 0x74
 800ea8a:	2250      	movs	r2, #80	@ 0x50
 800ea8c:	f107 0020 	add.w	r0, r7, #32
 800ea90:	f00b fa29 	bl	8019ee6 <memcpy>
 800ea94:	493f      	ldr	r1, [pc, #252]	@ (800eb94 <rmw_create_service+0x190>)
 800ea96:	4648      	mov	r0, r9
 800ea98:	f000 fd9c 	bl	800f5d4 <get_service_typesupport_handle>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d06e      	beq.n	800eb7e <rmw_create_service+0x17a>
 800eaa0:	6843      	ldr	r3, [r0, #4]
 800eaa2:	617b      	str	r3, [r7, #20]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d06a      	beq.n	800eb7e <rmw_create_service+0x17a>
 800eaa8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800eaac:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800eb9c <rmw_create_service+0x198>
 800eab0:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800eba0 <rmw_create_service+0x19c>
 800eab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eab8:	2108      	movs	r1, #8
 800eaba:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 800eabe:	1c42      	adds	r2, r0, #1
 800eac0:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 800eac4:	f001 ff56 	bl	8010974 <uxr_object_id>
 800eac8:	2364      	movs	r3, #100	@ 0x64
 800eaca:	6138      	str	r0, [r7, #16]
 800eacc:	4652      	mov	r2, sl
 800eace:	6978      	ldr	r0, [r7, #20]
 800ead0:	4649      	mov	r1, r9
 800ead2:	f000 fcb3 	bl	800f43c <generate_service_types>
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d051      	beq.n	800eb7e <rmw_create_service+0x17a>
 800eada:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800eba4 <rmw_create_service+0x1a0>
 800eade:	4a2e      	ldr	r2, [pc, #184]	@ (800eb98 <rmw_create_service+0x194>)
 800eae0:	233c      	movs	r3, #60	@ 0x3c
 800eae2:	4659      	mov	r1, fp
 800eae4:	4620      	mov	r0, r4
 800eae6:	f000 fc77 	bl	800f3d8 <generate_service_topics>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	d047      	beq.n	800eb7e <rmw_create_service+0x17a>
 800eaee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800eaf2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800eaf6:	a80c      	add	r0, sp, #48	@ 0x30
 800eaf8:	4629      	mov	r1, r5
 800eafa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eafe:	f000 fc51 	bl	800f3a4 <convert_qos_profile>
 800eb02:	4a25      	ldr	r2, [pc, #148]	@ (800eb98 <rmw_create_service+0x194>)
 800eb04:	9400      	str	r4, [sp, #0]
 800eb06:	e9cd b203 	strd	fp, r2, [sp, #12]
 800eb0a:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800eb0e:	a80c      	add	r0, sp, #48	@ 0x30
 800eb10:	c803      	ldmia	r0, {r0, r1}
 800eb12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb14:	9005      	str	r0, [sp, #20]
 800eb16:	9a08      	ldr	r2, [sp, #32]
 800eb18:	f8ad 1018 	strh.w	r1, [sp, #24]
 800eb1c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800eb20:	2306      	movs	r3, #6
 800eb22:	9307      	str	r3, [sp, #28]
 800eb24:	6811      	ldr	r1, [r2, #0]
 800eb26:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800eb2a:	693a      	ldr	r2, [r7, #16]
 800eb2c:	f001 fe26 	bl	801077c <uxr_buffer_create_replier_bin>
 800eb30:	4602      	mov	r2, r0
 800eb32:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800eb36:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eb3a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eb3e:	f000 fc15 	bl	800f36c <run_xrce_session>
 800eb42:	b1e0      	cbz	r0, 800eb7e <rmw_create_service+0x17a>
 800eb44:	7a2b      	ldrb	r3, [r5, #8]
 800eb46:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	2b02      	cmp	r3, #2
 800eb4e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800eb52:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800eb56:	bf0c      	ite	eq
 800eb58:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800eb5c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800eb60:	673a      	str	r2, [r7, #112]	@ 0x70
 800eb62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb64:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800eb68:	ab0e      	add	r3, sp, #56	@ 0x38
 800eb6a:	9300      	str	r3, [sp, #0]
 800eb6c:	6811      	ldr	r1, [r2, #0]
 800eb6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb70:	693a      	ldr	r2, [r7, #16]
 800eb72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb76:	f001 ff2d 	bl	80109d4 <uxr_buffer_request_data>
 800eb7a:	8338      	strh	r0, [r7, #24]
 800eb7c:	e003      	b.n	800eb86 <rmw_create_service+0x182>
 800eb7e:	4630      	mov	r0, r6
 800eb80:	f000 fac6 	bl	800f110 <rmw_uxrce_fini_service_memory>
 800eb84:	2600      	movs	r6, #0
 800eb86:	4630      	mov	r0, r6
 800eb88:	b011      	add	sp, #68	@ 0x44
 800eb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8e:	bf00      	nop
 800eb90:	2000b87c 	.word	0x2000b87c
 800eb94:	0801b500 	.word	0x0801b500
 800eb98:	20006e24 	.word	0x20006e24
 800eb9c:	20006e60 	.word	0x20006e60
 800eba0:	20006dc0 	.word	0x20006dc0
 800eba4:	20006d84 	.word	0x20006d84

0800eba8 <rmw_destroy_service>:
 800eba8:	b570      	push	{r4, r5, r6, lr}
 800ebaa:	b128      	cbz	r0, 800ebb8 <rmw_destroy_service+0x10>
 800ebac:	4604      	mov	r4, r0
 800ebae:	6800      	ldr	r0, [r0, #0]
 800ebb0:	460d      	mov	r5, r1
 800ebb2:	f000 fcf5 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 800ebb6:	b910      	cbnz	r0, 800ebbe <rmw_destroy_service+0x16>
 800ebb8:	2401      	movs	r4, #1
 800ebba:	4620      	mov	r0, r4
 800ebbc:	bd70      	pop	{r4, r5, r6, pc}
 800ebbe:	6863      	ldr	r3, [r4, #4]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d0f9      	beq.n	800ebb8 <rmw_destroy_service+0x10>
 800ebc4:	2d00      	cmp	r5, #0
 800ebc6:	d0f7      	beq.n	800ebb8 <rmw_destroy_service+0x10>
 800ebc8:	6828      	ldr	r0, [r5, #0]
 800ebca:	f000 fce9 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d0f2      	beq.n	800ebb8 <rmw_destroy_service+0x10>
 800ebd2:	686e      	ldr	r6, [r5, #4]
 800ebd4:	2e00      	cmp	r6, #0
 800ebd6:	d0ef      	beq.n	800ebb8 <rmw_destroy_service+0x10>
 800ebd8:	6864      	ldr	r4, [r4, #4]
 800ebda:	6932      	ldr	r2, [r6, #16]
 800ebdc:	6920      	ldr	r0, [r4, #16]
 800ebde:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ebe2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebe6:	6819      	ldr	r1, [r3, #0]
 800ebe8:	f001 ff2e 	bl	8010a48 <uxr_buffer_cancel_data>
 800ebec:	4602      	mov	r2, r0
 800ebee:	6920      	ldr	r0, [r4, #16]
 800ebf0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ebf4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ebf8:	f000 fbb8 	bl	800f36c <run_xrce_session>
 800ebfc:	6920      	ldr	r0, [r4, #16]
 800ebfe:	6932      	ldr	r2, [r6, #16]
 800ec00:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ec04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec08:	6819      	ldr	r1, [r3, #0]
 800ec0a:	f001 fc5d 	bl	80104c8 <uxr_buffer_delete_entity>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	6920      	ldr	r0, [r4, #16]
 800ec12:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ec16:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ec1a:	f000 fba7 	bl	800f36c <run_xrce_session>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	4628      	mov	r0, r5
 800ec22:	bf14      	ite	ne
 800ec24:	2400      	movne	r4, #0
 800ec26:	2402      	moveq	r4, #2
 800ec28:	f000 fa72 	bl	800f110 <rmw_uxrce_fini_service_memory>
 800ec2c:	e7c5      	b.n	800ebba <rmw_destroy_service+0x12>
 800ec2e:	bf00      	nop

0800ec30 <rmw_service_response_publisher_get_actual_qos>:
 800ec30:	b150      	cbz	r0, 800ec48 <rmw_service_response_publisher_get_actual_qos+0x18>
 800ec32:	b508      	push	{r3, lr}
 800ec34:	460b      	mov	r3, r1
 800ec36:	b149      	cbz	r1, 800ec4c <rmw_service_response_publisher_get_actual_qos+0x1c>
 800ec38:	6841      	ldr	r1, [r0, #4]
 800ec3a:	2250      	movs	r2, #80	@ 0x50
 800ec3c:	3120      	adds	r1, #32
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f00b f951 	bl	8019ee6 <memcpy>
 800ec44:	2000      	movs	r0, #0
 800ec46:	bd08      	pop	{r3, pc}
 800ec48:	200b      	movs	r0, #11
 800ec4a:	4770      	bx	lr
 800ec4c:	200b      	movs	r0, #11
 800ec4e:	bd08      	pop	{r3, pc}

0800ec50 <rmw_service_request_subscription_get_actual_qos>:
 800ec50:	b150      	cbz	r0, 800ec68 <rmw_service_request_subscription_get_actual_qos+0x18>
 800ec52:	b508      	push	{r3, lr}
 800ec54:	460b      	mov	r3, r1
 800ec56:	b149      	cbz	r1, 800ec6c <rmw_service_request_subscription_get_actual_qos+0x1c>
 800ec58:	6841      	ldr	r1, [r0, #4]
 800ec5a:	2250      	movs	r2, #80	@ 0x50
 800ec5c:	3120      	adds	r1, #32
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f00b f941 	bl	8019ee6 <memcpy>
 800ec64:	2000      	movs	r0, #0
 800ec66:	bd08      	pop	{r3, pc}
 800ec68:	200b      	movs	r0, #11
 800ec6a:	4770      	bx	lr
 800ec6c:	200b      	movs	r0, #11
 800ec6e:	bd08      	pop	{r3, pc}

0800ec70 <rmw_destroy_subscription>:
 800ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec72:	b128      	cbz	r0, 800ec80 <rmw_destroy_subscription+0x10>
 800ec74:	4604      	mov	r4, r0
 800ec76:	6800      	ldr	r0, [r0, #0]
 800ec78:	460d      	mov	r5, r1
 800ec7a:	f000 fc91 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 800ec7e:	b910      	cbnz	r0, 800ec86 <rmw_destroy_subscription+0x16>
 800ec80:	2401      	movs	r4, #1
 800ec82:	4620      	mov	r0, r4
 800ec84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec86:	6863      	ldr	r3, [r4, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d0f9      	beq.n	800ec80 <rmw_destroy_subscription+0x10>
 800ec8c:	2d00      	cmp	r5, #0
 800ec8e:	d0f7      	beq.n	800ec80 <rmw_destroy_subscription+0x10>
 800ec90:	6828      	ldr	r0, [r5, #0]
 800ec92:	f000 fc85 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d0f2      	beq.n	800ec80 <rmw_destroy_subscription+0x10>
 800ec9a:	686c      	ldr	r4, [r5, #4]
 800ec9c:	2c00      	cmp	r4, #0
 800ec9e:	d0ef      	beq.n	800ec80 <rmw_destroy_subscription+0x10>
 800eca0:	6a26      	ldr	r6, [r4, #32]
 800eca2:	6962      	ldr	r2, [r4, #20]
 800eca4:	6930      	ldr	r0, [r6, #16]
 800eca6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ecaa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ecae:	6819      	ldr	r1, [r3, #0]
 800ecb0:	f001 feca 	bl	8010a48 <uxr_buffer_cancel_data>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	6930      	ldr	r0, [r6, #16]
 800ecb8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ecbc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ecc0:	f000 fb54 	bl	800f36c <run_xrce_session>
 800ecc4:	69e0      	ldr	r0, [r4, #28]
 800ecc6:	f008 fd99 	bl	80177fc <destroy_topic>
 800ecca:	6a23      	ldr	r3, [r4, #32]
 800eccc:	6962      	ldr	r2, [r4, #20]
 800ecce:	6918      	ldr	r0, [r3, #16]
 800ecd0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ecd4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ecd8:	6819      	ldr	r1, [r3, #0]
 800ecda:	f001 fbf5 	bl	80104c8 <uxr_buffer_delete_entity>
 800ecde:	6a23      	ldr	r3, [r4, #32]
 800ece0:	6922      	ldr	r2, [r4, #16]
 800ece2:	691b      	ldr	r3, [r3, #16]
 800ece4:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ece8:	4604      	mov	r4, r0
 800ecea:	6809      	ldr	r1, [r1, #0]
 800ecec:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ecf0:	f001 fbea 	bl	80104c8 <uxr_buffer_delete_entity>
 800ecf4:	6937      	ldr	r7, [r6, #16]
 800ecf6:	4622      	mov	r2, r4
 800ecf8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ecfc:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ed00:	4604      	mov	r4, r0
 800ed02:	4638      	mov	r0, r7
 800ed04:	f000 fb32 	bl	800f36c <run_xrce_session>
 800ed08:	6936      	ldr	r6, [r6, #16]
 800ed0a:	4622      	mov	r2, r4
 800ed0c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ed10:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ed14:	4604      	mov	r4, r0
 800ed16:	4630      	mov	r0, r6
 800ed18:	f000 fb28 	bl	800f36c <run_xrce_session>
 800ed1c:	b12c      	cbz	r4, 800ed2a <rmw_destroy_subscription+0xba>
 800ed1e:	b120      	cbz	r0, 800ed2a <rmw_destroy_subscription+0xba>
 800ed20:	2400      	movs	r4, #0
 800ed22:	4628      	mov	r0, r5
 800ed24:	f000 f9de 	bl	800f0e4 <rmw_uxrce_fini_subscription_memory>
 800ed28:	e7ab      	b.n	800ec82 <rmw_destroy_subscription+0x12>
 800ed2a:	2402      	movs	r4, #2
 800ed2c:	e7f9      	b.n	800ed22 <rmw_destroy_subscription+0xb2>
 800ed2e:	bf00      	nop

0800ed30 <rmw_uxrce_transport_init>:
 800ed30:	b508      	push	{r3, lr}
 800ed32:	b108      	cbz	r0, 800ed38 <rmw_uxrce_transport_init+0x8>
 800ed34:	f100 0210 	add.w	r2, r0, #16
 800ed38:	b139      	cbz	r1, 800ed4a <rmw_uxrce_transport_init+0x1a>
 800ed3a:	6949      	ldr	r1, [r1, #20]
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	f001 fde1 	bl	8010904 <uxr_init_custom_transport>
 800ed42:	f080 0001 	eor.w	r0, r0, #1
 800ed46:	b2c0      	uxtb	r0, r0
 800ed48:	bd08      	pop	{r3, pc}
 800ed4a:	4b04      	ldr	r3, [pc, #16]	@ (800ed5c <rmw_uxrce_transport_init+0x2c>)
 800ed4c:	4610      	mov	r0, r2
 800ed4e:	6859      	ldr	r1, [r3, #4]
 800ed50:	f001 fdd8 	bl	8010904 <uxr_init_custom_transport>
 800ed54:	f080 0001 	eor.w	r0, r0, #1
 800ed58:	b2c0      	uxtb	r0, r0
 800ed5a:	bd08      	pop	{r3, pc}
 800ed5c:	20006d2c 	.word	0x20006d2c

0800ed60 <rmw_uros_epoch_millis>:
 800ed60:	4b05      	ldr	r3, [pc, #20]	@ (800ed78 <rmw_uros_epoch_millis+0x18>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	b123      	cbz	r3, 800ed70 <rmw_uros_epoch_millis+0x10>
 800ed66:	6898      	ldr	r0, [r3, #8]
 800ed68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed6c:	f002 b876 	b.w	8010e5c <uxr_epoch_millis>
 800ed70:	2000      	movs	r0, #0
 800ed72:	2100      	movs	r1, #0
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	2000b88c 	.word	0x2000b88c

0800ed7c <rmw_uros_epoch_nanos>:
 800ed7c:	4b05      	ldr	r3, [pc, #20]	@ (800ed94 <rmw_uros_epoch_nanos+0x18>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	b123      	cbz	r3, 800ed8c <rmw_uros_epoch_nanos+0x10>
 800ed82:	6898      	ldr	r0, [r3, #8]
 800ed84:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed88:	f002 b87a 	b.w	8010e80 <uxr_epoch_nanos>
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	2100      	movs	r1, #0
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	2000b88c 	.word	0x2000b88c

0800ed98 <rmw_uros_sync_session>:
 800ed98:	b508      	push	{r3, lr}
 800ed9a:	4b07      	ldr	r3, [pc, #28]	@ (800edb8 <rmw_uros_sync_session+0x20>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	b14b      	cbz	r3, 800edb4 <rmw_uros_sync_session+0x1c>
 800eda0:	4601      	mov	r1, r0
 800eda2:	6898      	ldr	r0, [r3, #8]
 800eda4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eda8:	f002 fcae 	bl	8011708 <uxr_sync_session>
 800edac:	f080 0001 	eor.w	r0, r0, #1
 800edb0:	b2c0      	uxtb	r0, r0
 800edb2:	bd08      	pop	{r3, pc}
 800edb4:	2001      	movs	r0, #1
 800edb6:	bd08      	pop	{r3, pc}
 800edb8:	2000b88c 	.word	0x2000b88c

0800edbc <rmw_uxrce_init_service_memory>:
 800edbc:	b1e2      	cbz	r2, 800edf8 <rmw_uxrce_init_service_memory+0x3c>
 800edbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc2:	7b05      	ldrb	r5, [r0, #12]
 800edc4:	4606      	mov	r6, r0
 800edc6:	b9ad      	cbnz	r5, 800edf4 <rmw_uxrce_init_service_memory+0x38>
 800edc8:	23c8      	movs	r3, #200	@ 0xc8
 800edca:	e9c0 5500 	strd	r5, r5, [r0]
 800edce:	6083      	str	r3, [r0, #8]
 800edd0:	f240 1301 	movw	r3, #257	@ 0x101
 800edd4:	4617      	mov	r7, r2
 800edd6:	8183      	strh	r3, [r0, #12]
 800edd8:	460c      	mov	r4, r1
 800edda:	46a8      	mov	r8, r5
 800eddc:	4621      	mov	r1, r4
 800edde:	4630      	mov	r0, r6
 800ede0:	3501      	adds	r5, #1
 800ede2:	f008 fc5d 	bl	80176a0 <put_memory>
 800ede6:	42af      	cmp	r7, r5
 800ede8:	60a4      	str	r4, [r4, #8]
 800edea:	f884 800c 	strb.w	r8, [r4, #12]
 800edee:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800edf2:	d1f3      	bne.n	800eddc <rmw_uxrce_init_service_memory+0x20>
 800edf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop

0800edfc <rmw_uxrce_init_client_memory>:
 800edfc:	b1e2      	cbz	r2, 800ee38 <rmw_uxrce_init_client_memory+0x3c>
 800edfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee02:	7b05      	ldrb	r5, [r0, #12]
 800ee04:	4606      	mov	r6, r0
 800ee06:	b9ad      	cbnz	r5, 800ee34 <rmw_uxrce_init_client_memory+0x38>
 800ee08:	23c8      	movs	r3, #200	@ 0xc8
 800ee0a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee0e:	6083      	str	r3, [r0, #8]
 800ee10:	f240 1301 	movw	r3, #257	@ 0x101
 800ee14:	4617      	mov	r7, r2
 800ee16:	8183      	strh	r3, [r0, #12]
 800ee18:	460c      	mov	r4, r1
 800ee1a:	46a8      	mov	r8, r5
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	4630      	mov	r0, r6
 800ee20:	3501      	adds	r5, #1
 800ee22:	f008 fc3d 	bl	80176a0 <put_memory>
 800ee26:	42af      	cmp	r7, r5
 800ee28:	60a4      	str	r4, [r4, #8]
 800ee2a:	f884 800c 	strb.w	r8, [r4, #12]
 800ee2e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ee32:	d1f3      	bne.n	800ee1c <rmw_uxrce_init_client_memory+0x20>
 800ee34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop

0800ee3c <rmw_uxrce_init_publisher_memory>:
 800ee3c:	b1e2      	cbz	r2, 800ee78 <rmw_uxrce_init_publisher_memory+0x3c>
 800ee3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee42:	7b05      	ldrb	r5, [r0, #12]
 800ee44:	4606      	mov	r6, r0
 800ee46:	b9ad      	cbnz	r5, 800ee74 <rmw_uxrce_init_publisher_memory+0x38>
 800ee48:	23d8      	movs	r3, #216	@ 0xd8
 800ee4a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee4e:	6083      	str	r3, [r0, #8]
 800ee50:	f240 1301 	movw	r3, #257	@ 0x101
 800ee54:	4617      	mov	r7, r2
 800ee56:	8183      	strh	r3, [r0, #12]
 800ee58:	460c      	mov	r4, r1
 800ee5a:	46a8      	mov	r8, r5
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	4630      	mov	r0, r6
 800ee60:	3501      	adds	r5, #1
 800ee62:	f008 fc1d 	bl	80176a0 <put_memory>
 800ee66:	42af      	cmp	r7, r5
 800ee68:	60a4      	str	r4, [r4, #8]
 800ee6a:	f884 800c 	strb.w	r8, [r4, #12]
 800ee6e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ee72:	d1f3      	bne.n	800ee5c <rmw_uxrce_init_publisher_memory+0x20>
 800ee74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop

0800ee7c <rmw_uxrce_init_subscription_memory>:
 800ee7c:	b1e2      	cbz	r2, 800eeb8 <rmw_uxrce_init_subscription_memory+0x3c>
 800ee7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee82:	7b05      	ldrb	r5, [r0, #12]
 800ee84:	4606      	mov	r6, r0
 800ee86:	b9ad      	cbnz	r5, 800eeb4 <rmw_uxrce_init_subscription_memory+0x38>
 800ee88:	23d8      	movs	r3, #216	@ 0xd8
 800ee8a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee8e:	6083      	str	r3, [r0, #8]
 800ee90:	f240 1301 	movw	r3, #257	@ 0x101
 800ee94:	4617      	mov	r7, r2
 800ee96:	8183      	strh	r3, [r0, #12]
 800ee98:	460c      	mov	r4, r1
 800ee9a:	46a8      	mov	r8, r5
 800ee9c:	4621      	mov	r1, r4
 800ee9e:	4630      	mov	r0, r6
 800eea0:	3501      	adds	r5, #1
 800eea2:	f008 fbfd 	bl	80176a0 <put_memory>
 800eea6:	42af      	cmp	r7, r5
 800eea8:	60a4      	str	r4, [r4, #8]
 800eeaa:	f884 800c 	strb.w	r8, [r4, #12]
 800eeae:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800eeb2:	d1f3      	bne.n	800ee9c <rmw_uxrce_init_subscription_memory+0x20>
 800eeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop

0800eebc <rmw_uxrce_init_node_memory>:
 800eebc:	b1e2      	cbz	r2, 800eef8 <rmw_uxrce_init_node_memory+0x3c>
 800eebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec2:	7b05      	ldrb	r5, [r0, #12]
 800eec4:	4606      	mov	r6, r0
 800eec6:	b9ad      	cbnz	r5, 800eef4 <rmw_uxrce_init_node_memory+0x38>
 800eec8:	23a4      	movs	r3, #164	@ 0xa4
 800eeca:	e9c0 5500 	strd	r5, r5, [r0]
 800eece:	6083      	str	r3, [r0, #8]
 800eed0:	f240 1301 	movw	r3, #257	@ 0x101
 800eed4:	4617      	mov	r7, r2
 800eed6:	8183      	strh	r3, [r0, #12]
 800eed8:	460c      	mov	r4, r1
 800eeda:	46a8      	mov	r8, r5
 800eedc:	4621      	mov	r1, r4
 800eede:	4630      	mov	r0, r6
 800eee0:	3501      	adds	r5, #1
 800eee2:	f008 fbdd 	bl	80176a0 <put_memory>
 800eee6:	42af      	cmp	r7, r5
 800eee8:	60a4      	str	r4, [r4, #8]
 800eeea:	f884 800c 	strb.w	r8, [r4, #12]
 800eeee:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800eef2:	d1f3      	bne.n	800eedc <rmw_uxrce_init_node_memory+0x20>
 800eef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop

0800eefc <rmw_uxrce_init_session_memory>:
 800eefc:	b1ea      	cbz	r2, 800ef3a <rmw_uxrce_init_session_memory+0x3e>
 800eefe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef02:	7b05      	ldrb	r5, [r0, #12]
 800ef04:	4606      	mov	r6, r0
 800ef06:	b9b5      	cbnz	r5, 800ef36 <rmw_uxrce_init_session_memory+0x3a>
 800ef08:	e9c0 5500 	strd	r5, r5, [r0]
 800ef0c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ef10:	f240 1301 	movw	r3, #257	@ 0x101
 800ef14:	4617      	mov	r7, r2
 800ef16:	f8c0 8008 	str.w	r8, [r0, #8]
 800ef1a:	460c      	mov	r4, r1
 800ef1c:	8183      	strh	r3, [r0, #12]
 800ef1e:	46a9      	mov	r9, r5
 800ef20:	4621      	mov	r1, r4
 800ef22:	4630      	mov	r0, r6
 800ef24:	3501      	adds	r5, #1
 800ef26:	f008 fbbb 	bl	80176a0 <put_memory>
 800ef2a:	42af      	cmp	r7, r5
 800ef2c:	60a4      	str	r4, [r4, #8]
 800ef2e:	f884 900c 	strb.w	r9, [r4, #12]
 800ef32:	4444      	add	r4, r8
 800ef34:	d1f4      	bne.n	800ef20 <rmw_uxrce_init_session_memory+0x24>
 800ef36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef3a:	4770      	bx	lr

0800ef3c <rmw_uxrce_init_topic_memory>:
 800ef3c:	b1e2      	cbz	r2, 800ef78 <rmw_uxrce_init_topic_memory+0x3c>
 800ef3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef42:	7b05      	ldrb	r5, [r0, #12]
 800ef44:	4606      	mov	r6, r0
 800ef46:	b9ad      	cbnz	r5, 800ef74 <rmw_uxrce_init_topic_memory+0x38>
 800ef48:	231c      	movs	r3, #28
 800ef4a:	e9c0 5500 	strd	r5, r5, [r0]
 800ef4e:	6083      	str	r3, [r0, #8]
 800ef50:	f240 1301 	movw	r3, #257	@ 0x101
 800ef54:	4617      	mov	r7, r2
 800ef56:	8183      	strh	r3, [r0, #12]
 800ef58:	460c      	mov	r4, r1
 800ef5a:	46a8      	mov	r8, r5
 800ef5c:	4621      	mov	r1, r4
 800ef5e:	4630      	mov	r0, r6
 800ef60:	3501      	adds	r5, #1
 800ef62:	f008 fb9d 	bl	80176a0 <put_memory>
 800ef66:	42af      	cmp	r7, r5
 800ef68:	60a4      	str	r4, [r4, #8]
 800ef6a:	f884 800c 	strb.w	r8, [r4, #12]
 800ef6e:	f104 041c 	add.w	r4, r4, #28
 800ef72:	d1f3      	bne.n	800ef5c <rmw_uxrce_init_topic_memory+0x20>
 800ef74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop

0800ef7c <rmw_uxrce_init_static_input_buffer_memory>:
 800ef7c:	b1ea      	cbz	r2, 800efba <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ef7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef82:	7b05      	ldrb	r5, [r0, #12]
 800ef84:	4606      	mov	r6, r0
 800ef86:	b9b5      	cbnz	r5, 800efb6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ef88:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ef8c:	e9c0 5500 	strd	r5, r5, [r0]
 800ef90:	6083      	str	r3, [r0, #8]
 800ef92:	f240 1301 	movw	r3, #257	@ 0x101
 800ef96:	4617      	mov	r7, r2
 800ef98:	8183      	strh	r3, [r0, #12]
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	46a8      	mov	r8, r5
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4630      	mov	r0, r6
 800efa2:	3501      	adds	r5, #1
 800efa4:	f008 fb7c 	bl	80176a0 <put_memory>
 800efa8:	42af      	cmp	r7, r5
 800efaa:	60a4      	str	r4, [r4, #8]
 800efac:	f884 800c 	strb.w	r8, [r4, #12]
 800efb0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800efb4:	d1f3      	bne.n	800ef9e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800efb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efba:	4770      	bx	lr

0800efbc <rmw_uxrce_init_init_options_impl_memory>:
 800efbc:	b1e2      	cbz	r2, 800eff8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800efbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc2:	7b05      	ldrb	r5, [r0, #12]
 800efc4:	4606      	mov	r6, r0
 800efc6:	b9ad      	cbnz	r5, 800eff4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800efc8:	232c      	movs	r3, #44	@ 0x2c
 800efca:	e9c0 5500 	strd	r5, r5, [r0]
 800efce:	6083      	str	r3, [r0, #8]
 800efd0:	f240 1301 	movw	r3, #257	@ 0x101
 800efd4:	4617      	mov	r7, r2
 800efd6:	8183      	strh	r3, [r0, #12]
 800efd8:	460c      	mov	r4, r1
 800efda:	46a8      	mov	r8, r5
 800efdc:	4621      	mov	r1, r4
 800efde:	4630      	mov	r0, r6
 800efe0:	3501      	adds	r5, #1
 800efe2:	f008 fb5d 	bl	80176a0 <put_memory>
 800efe6:	42af      	cmp	r7, r5
 800efe8:	60a4      	str	r4, [r4, #8]
 800efea:	f884 800c 	strb.w	r8, [r4, #12]
 800efee:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800eff2:	d1f3      	bne.n	800efdc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800eff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop

0800effc <rmw_uxrce_init_wait_set_memory>:
 800effc:	b1e2      	cbz	r2, 800f038 <rmw_uxrce_init_wait_set_memory+0x3c>
 800effe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f002:	7b05      	ldrb	r5, [r0, #12]
 800f004:	4606      	mov	r6, r0
 800f006:	b9ad      	cbnz	r5, 800f034 <rmw_uxrce_init_wait_set_memory+0x38>
 800f008:	231c      	movs	r3, #28
 800f00a:	e9c0 5500 	strd	r5, r5, [r0]
 800f00e:	6083      	str	r3, [r0, #8]
 800f010:	f240 1301 	movw	r3, #257	@ 0x101
 800f014:	4617      	mov	r7, r2
 800f016:	8183      	strh	r3, [r0, #12]
 800f018:	460c      	mov	r4, r1
 800f01a:	46a8      	mov	r8, r5
 800f01c:	4621      	mov	r1, r4
 800f01e:	4630      	mov	r0, r6
 800f020:	3501      	adds	r5, #1
 800f022:	f008 fb3d 	bl	80176a0 <put_memory>
 800f026:	42af      	cmp	r7, r5
 800f028:	60a4      	str	r4, [r4, #8]
 800f02a:	f884 800c 	strb.w	r8, [r4, #12]
 800f02e:	f104 041c 	add.w	r4, r4, #28
 800f032:	d1f3      	bne.n	800f01c <rmw_uxrce_init_wait_set_memory+0x20>
 800f034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop

0800f03c <rmw_uxrce_init_guard_condition_memory>:
 800f03c:	b1e2      	cbz	r2, 800f078 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f042:	7b05      	ldrb	r5, [r0, #12]
 800f044:	4606      	mov	r6, r0
 800f046:	b9ad      	cbnz	r5, 800f074 <rmw_uxrce_init_guard_condition_memory+0x38>
 800f048:	2320      	movs	r3, #32
 800f04a:	e9c0 5500 	strd	r5, r5, [r0]
 800f04e:	6083      	str	r3, [r0, #8]
 800f050:	f240 1301 	movw	r3, #257	@ 0x101
 800f054:	4617      	mov	r7, r2
 800f056:	8183      	strh	r3, [r0, #12]
 800f058:	460c      	mov	r4, r1
 800f05a:	46a8      	mov	r8, r5
 800f05c:	4621      	mov	r1, r4
 800f05e:	4630      	mov	r0, r6
 800f060:	3501      	adds	r5, #1
 800f062:	f008 fb1d 	bl	80176a0 <put_memory>
 800f066:	42af      	cmp	r7, r5
 800f068:	60a4      	str	r4, [r4, #8]
 800f06a:	f884 800c 	strb.w	r8, [r4, #12]
 800f06e:	f104 0420 	add.w	r4, r4, #32
 800f072:	d1f3      	bne.n	800f05c <rmw_uxrce_init_guard_condition_memory+0x20>
 800f074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop

0800f07c <rmw_uxrce_fini_session_memory>:
 800f07c:	4601      	mov	r1, r0
 800f07e:	4801      	ldr	r0, [pc, #4]	@ (800f084 <rmw_uxrce_fini_session_memory+0x8>)
 800f080:	f008 bb0e 	b.w	80176a0 <put_memory>
 800f084:	2000b88c 	.word	0x2000b88c

0800f088 <rmw_uxrce_fini_node_memory>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	4604      	mov	r4, r0
 800f08c:	6800      	ldr	r0, [r0, #0]
 800f08e:	b128      	cbz	r0, 800f09c <rmw_uxrce_fini_node_memory+0x14>
 800f090:	4b07      	ldr	r3, [pc, #28]	@ (800f0b0 <rmw_uxrce_fini_node_memory+0x28>)
 800f092:	6819      	ldr	r1, [r3, #0]
 800f094:	f7f1 f8c4 	bl	8000220 <strcmp>
 800f098:	b940      	cbnz	r0, 800f0ac <rmw_uxrce_fini_node_memory+0x24>
 800f09a:	6020      	str	r0, [r4, #0]
 800f09c:	6861      	ldr	r1, [r4, #4]
 800f09e:	b129      	cbz	r1, 800f0ac <rmw_uxrce_fini_node_memory+0x24>
 800f0a0:	2500      	movs	r5, #0
 800f0a2:	4804      	ldr	r0, [pc, #16]	@ (800f0b4 <rmw_uxrce_fini_node_memory+0x2c>)
 800f0a4:	610d      	str	r5, [r1, #16]
 800f0a6:	f008 fafb 	bl	80176a0 <put_memory>
 800f0aa:	6065      	str	r5, [r4, #4]
 800f0ac:	bd38      	pop	{r3, r4, r5, pc}
 800f0ae:	bf00      	nop
 800f0b0:	0801c960 	.word	0x0801c960
 800f0b4:	2000b85c 	.word	0x2000b85c

0800f0b8 <rmw_uxrce_fini_publisher_memory>:
 800f0b8:	b510      	push	{r4, lr}
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	6800      	ldr	r0, [r0, #0]
 800f0be:	b128      	cbz	r0, 800f0cc <rmw_uxrce_fini_publisher_memory+0x14>
 800f0c0:	4b06      	ldr	r3, [pc, #24]	@ (800f0dc <rmw_uxrce_fini_publisher_memory+0x24>)
 800f0c2:	6819      	ldr	r1, [r3, #0]
 800f0c4:	f7f1 f8ac 	bl	8000220 <strcmp>
 800f0c8:	b938      	cbnz	r0, 800f0da <rmw_uxrce_fini_publisher_memory+0x22>
 800f0ca:	6020      	str	r0, [r4, #0]
 800f0cc:	6861      	ldr	r1, [r4, #4]
 800f0ce:	b121      	cbz	r1, 800f0da <rmw_uxrce_fini_publisher_memory+0x22>
 800f0d0:	4803      	ldr	r0, [pc, #12]	@ (800f0e0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f0d2:	f008 fae5 	bl	80176a0 <put_memory>
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	6063      	str	r3, [r4, #4]
 800f0da:	bd10      	pop	{r4, pc}
 800f0dc:	0801c960 	.word	0x0801c960
 800f0e0:	2000b86c 	.word	0x2000b86c

0800f0e4 <rmw_uxrce_fini_subscription_memory>:
 800f0e4:	b510      	push	{r4, lr}
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	6800      	ldr	r0, [r0, #0]
 800f0ea:	b128      	cbz	r0, 800f0f8 <rmw_uxrce_fini_subscription_memory+0x14>
 800f0ec:	4b06      	ldr	r3, [pc, #24]	@ (800f108 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f0ee:	6819      	ldr	r1, [r3, #0]
 800f0f0:	f7f1 f896 	bl	8000220 <strcmp>
 800f0f4:	b938      	cbnz	r0, 800f106 <rmw_uxrce_fini_subscription_memory+0x22>
 800f0f6:	6020      	str	r0, [r4, #0]
 800f0f8:	6861      	ldr	r1, [r4, #4]
 800f0fa:	b121      	cbz	r1, 800f106 <rmw_uxrce_fini_subscription_memory+0x22>
 800f0fc:	4803      	ldr	r0, [pc, #12]	@ (800f10c <rmw_uxrce_fini_subscription_memory+0x28>)
 800f0fe:	f008 facf 	bl	80176a0 <put_memory>
 800f102:	2300      	movs	r3, #0
 800f104:	6063      	str	r3, [r4, #4]
 800f106:	bd10      	pop	{r4, pc}
 800f108:	0801c960 	.word	0x0801c960
 800f10c:	2000b8ac 	.word	0x2000b8ac

0800f110 <rmw_uxrce_fini_service_memory>:
 800f110:	b510      	push	{r4, lr}
 800f112:	4604      	mov	r4, r0
 800f114:	6800      	ldr	r0, [r0, #0]
 800f116:	b128      	cbz	r0, 800f124 <rmw_uxrce_fini_service_memory+0x14>
 800f118:	4b06      	ldr	r3, [pc, #24]	@ (800f134 <rmw_uxrce_fini_service_memory+0x24>)
 800f11a:	6819      	ldr	r1, [r3, #0]
 800f11c:	f7f1 f880 	bl	8000220 <strcmp>
 800f120:	b938      	cbnz	r0, 800f132 <rmw_uxrce_fini_service_memory+0x22>
 800f122:	6020      	str	r0, [r4, #0]
 800f124:	6861      	ldr	r1, [r4, #4]
 800f126:	b121      	cbz	r1, 800f132 <rmw_uxrce_fini_service_memory+0x22>
 800f128:	4803      	ldr	r0, [pc, #12]	@ (800f138 <rmw_uxrce_fini_service_memory+0x28>)
 800f12a:	f008 fab9 	bl	80176a0 <put_memory>
 800f12e:	2300      	movs	r3, #0
 800f130:	6063      	str	r3, [r4, #4]
 800f132:	bd10      	pop	{r4, pc}
 800f134:	0801c960 	.word	0x0801c960
 800f138:	2000b87c 	.word	0x2000b87c

0800f13c <rmw_uxrce_fini_client_memory>:
 800f13c:	b510      	push	{r4, lr}
 800f13e:	4604      	mov	r4, r0
 800f140:	6800      	ldr	r0, [r0, #0]
 800f142:	b128      	cbz	r0, 800f150 <rmw_uxrce_fini_client_memory+0x14>
 800f144:	4b06      	ldr	r3, [pc, #24]	@ (800f160 <rmw_uxrce_fini_client_memory+0x24>)
 800f146:	6819      	ldr	r1, [r3, #0]
 800f148:	f7f1 f86a 	bl	8000220 <strcmp>
 800f14c:	b938      	cbnz	r0, 800f15e <rmw_uxrce_fini_client_memory+0x22>
 800f14e:	6020      	str	r0, [r4, #0]
 800f150:	6861      	ldr	r1, [r4, #4]
 800f152:	b121      	cbz	r1, 800f15e <rmw_uxrce_fini_client_memory+0x22>
 800f154:	4803      	ldr	r0, [pc, #12]	@ (800f164 <rmw_uxrce_fini_client_memory+0x28>)
 800f156:	f008 faa3 	bl	80176a0 <put_memory>
 800f15a:	2300      	movs	r3, #0
 800f15c:	6063      	str	r3, [r4, #4]
 800f15e:	bd10      	pop	{r4, pc}
 800f160:	0801c960 	.word	0x0801c960
 800f164:	20006ec4 	.word	0x20006ec4

0800f168 <rmw_uxrce_fini_topic_memory>:
 800f168:	b510      	push	{r4, lr}
 800f16a:	4604      	mov	r4, r0
 800f16c:	4621      	mov	r1, r4
 800f16e:	4803      	ldr	r0, [pc, #12]	@ (800f17c <rmw_uxrce_fini_topic_memory+0x14>)
 800f170:	f008 fa96 	bl	80176a0 <put_memory>
 800f174:	2300      	movs	r3, #0
 800f176:	61a3      	str	r3, [r4, #24]
 800f178:	bd10      	pop	{r4, pc}
 800f17a:	bf00      	nop
 800f17c:	2000b8bc 	.word	0x2000b8bc

0800f180 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f180:	b082      	sub	sp, #8
 800f182:	b530      	push	{r4, r5, lr}
 800f184:	4925      	ldr	r1, [pc, #148]	@ (800f21c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f186:	680d      	ldr	r5, [r1, #0]
 800f188:	ac03      	add	r4, sp, #12
 800f18a:	e884 000c 	stmia.w	r4, {r2, r3}
 800f18e:	461c      	mov	r4, r3
 800f190:	2d00      	cmp	r5, #0
 800f192:	d041      	beq.n	800f218 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800f194:	462b      	mov	r3, r5
 800f196:	2100      	movs	r1, #0
 800f198:	689a      	ldr	r2, [r3, #8]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f1a0:	4290      	cmp	r0, r2
 800f1a2:	bf08      	it	eq
 800f1a4:	3101      	addeq	r1, #1
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1f6      	bne.n	800f198 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f1aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f1ae:	2b02      	cmp	r3, #2
 800f1b0:	d029      	beq.n	800f206 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f1b2:	d907      	bls.n	800f1c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f1b4:	2b03      	cmp	r3, #3
 800f1b6:	d005      	beq.n	800f1c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1be:	4608      	mov	r0, r1
 800f1c0:	b002      	add	sp, #8
 800f1c2:	4770      	bx	lr
 800f1c4:	b314      	cbz	r4, 800f20c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1c6:	428c      	cmp	r4, r1
 800f1c8:	d820      	bhi.n	800f20c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1ca:	2d00      	cmp	r5, #0
 800f1cc:	d0f4      	beq.n	800f1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f1ce:	2100      	movs	r1, #0
 800f1d0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800f1d4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f1d8:	e002      	b.n	800f1e0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800f1da:	686d      	ldr	r5, [r5, #4]
 800f1dc:	2d00      	cmp	r5, #0
 800f1de:	d0ec      	beq.n	800f1ba <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800f1e0:	68ab      	ldr	r3, [r5, #8]
 800f1e2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800f1e6:	4290      	cmp	r0, r2
 800f1e8:	d1f7      	bne.n	800f1da <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f1ea:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800f1ee:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f1f2:	4562      	cmp	r2, ip
 800f1f4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f1f8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f1fc:	daed      	bge.n	800f1da <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f1fe:	4694      	mov	ip, r2
 800f200:	461c      	mov	r4, r3
 800f202:	4629      	mov	r1, r5
 800f204:	e7e9      	b.n	800f1da <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f206:	b10c      	cbz	r4, 800f20c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f208:	428c      	cmp	r4, r1
 800f20a:	d9d5      	bls.n	800f1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f20c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f210:	4802      	ldr	r0, [pc, #8]	@ (800f21c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f212:	b002      	add	sp, #8
 800f214:	f008 ba34 	b.w	8017680 <get_memory>
 800f218:	4629      	mov	r1, r5
 800f21a:	e7c6      	b.n	800f1aa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f21c:	2000b89c 	.word	0x2000b89c

0800f220 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f220:	4b11      	ldr	r3, [pc, #68]	@ (800f268 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	b530      	push	{r4, r5, lr}
 800f226:	b1e3      	cbz	r3, 800f262 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f228:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800f22c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800f230:	2400      	movs	r4, #0
 800f232:	e001      	b.n	800f238 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	b193      	cbz	r3, 800f25e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800f238:	689a      	ldr	r2, [r3, #8]
 800f23a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800f23e:	4288      	cmp	r0, r1
 800f240:	d1f8      	bne.n	800f234 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f242:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800f246:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800f24a:	4571      	cmp	r1, lr
 800f24c:	eb72 050c 	sbcs.w	r5, r2, ip
 800f250:	daf0      	bge.n	800f234 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f252:	461c      	mov	r4, r3
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	468e      	mov	lr, r1
 800f258:	4694      	mov	ip, r2
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d1ec      	bne.n	800f238 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f25e:	4620      	mov	r0, r4
 800f260:	bd30      	pop	{r4, r5, pc}
 800f262:	461c      	mov	r4, r3
 800f264:	4620      	mov	r0, r4
 800f266:	bd30      	pop	{r4, r5, pc}
 800f268:	2000b89c 	.word	0x2000b89c
 800f26c:	00000000 	.word	0x00000000

0800f270 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f274:	4b3c      	ldr	r3, [pc, #240]	@ (800f368 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f276:	ed2d 8b06 	vpush	{d8-d10}
 800f27a:	681f      	ldr	r7, [r3, #0]
 800f27c:	b08d      	sub	sp, #52	@ 0x34
 800f27e:	f7ff fd7d 	bl	800ed7c <rmw_uros_epoch_nanos>
 800f282:	2f00      	cmp	r7, #0
 800f284:	d05d      	beq.n	800f342 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f286:	46b8      	mov	r8, r7
 800f288:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800f350 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f28c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f290:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f294:	2b04      	cmp	r3, #4
 800f296:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800f358 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f29a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800f360 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f29e:	4681      	mov	r9, r0
 800f2a0:	468a      	mov	sl, r1
 800f2a2:	ac04      	add	r4, sp, #16
 800f2a4:	d03f      	beq.n	800f326 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f2a6:	2b05      	cmp	r3, #5
 800f2a8:	d044      	beq.n	800f334 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f2aa:	2b03      	cmp	r3, #3
 800f2ac:	d03b      	beq.n	800f326 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f2ae:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f2b2:	ed8d ab06 	vstr	d10, [sp, #24]
 800f2b6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f2ba:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800f2be:	ab08      	add	r3, sp, #32
 800f2c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f2c2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f2c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f2ca:	f007 ff25 	bl	8017118 <rmw_time_equal>
 800f2ce:	b118      	cbz	r0, 800f2d8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f2d0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f2d4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f2d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f2dc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800f2e0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800f2e4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f2e8:	f007 ff6a 	bl	80171c0 <rmw_time_total_nsec>
 800f2ec:	1830      	adds	r0, r6, r0
 800f2ee:	eb47 0101 	adc.w	r1, r7, r1
 800f2f2:	4548      	cmp	r0, r9
 800f2f4:	eb71 030a 	sbcs.w	r3, r1, sl
 800f2f8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800f2fc:	db05      	blt.n	800f30a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800f2fe:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f302:	4591      	cmp	r9, r2
 800f304:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f308:	da03      	bge.n	800f312 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800f30a:	4817      	ldr	r0, [pc, #92]	@ (800f368 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f30c:	4641      	mov	r1, r8
 800f30e:	f008 f9c7 	bl	80176a0 <put_memory>
 800f312:	f1bb 0f00 	cmp.w	fp, #0
 800f316:	d014      	beq.n	800f342 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f318:	46d8      	mov	r8, fp
 800f31a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f31e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f322:	2b04      	cmp	r3, #4
 800f324:	d1bf      	bne.n	800f2a6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800f326:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f32a:	3340      	adds	r3, #64	@ 0x40
 800f32c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f32e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f332:	e7c0      	b.n	800f2b6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f334:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f338:	3348      	adds	r3, #72	@ 0x48
 800f33a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f33c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f340:	e7b9      	b.n	800f2b6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f342:	b00d      	add	sp, #52	@ 0x34
 800f344:	ecbd 8b06 	vpop	{d8-d10}
 800f348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f34c:	f3af 8000 	nop.w
	...
 800f358:	00000001 	.word	0x00000001
 800f35c:	00000000 	.word	0x00000000
 800f360:	0000001e 	.word	0x0000001e
 800f364:	00000000 	.word	0x00000000
 800f368:	2000b89c 	.word	0x2000b89c

0800f36c <run_xrce_session>:
 800f36c:	b510      	push	{r4, lr}
 800f36e:	788c      	ldrb	r4, [r1, #2]
 800f370:	b086      	sub	sp, #24
 800f372:	2c01      	cmp	r4, #1
 800f374:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f378:	d00c      	beq.n	800f394 <run_xrce_session+0x28>
 800f37a:	4619      	mov	r1, r3
 800f37c:	2301      	movs	r3, #1
 800f37e:	9300      	str	r3, [sp, #0]
 800f380:	f10d 020e 	add.w	r2, sp, #14
 800f384:	f10d 0317 	add.w	r3, sp, #23
 800f388:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f38c:	f002 f968 	bl	8011660 <uxr_run_session_until_all_status>
 800f390:	b006      	add	sp, #24
 800f392:	bd10      	pop	{r4, pc}
 800f394:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f398:	f001 fd7c 	bl	8010e94 <uxr_flash_output_streams>
 800f39c:	4620      	mov	r0, r4
 800f39e:	b006      	add	sp, #24
 800f3a0:	bd10      	pop	{r4, pc}
 800f3a2:	bf00      	nop

0800f3a4 <convert_qos_profile>:
 800f3a4:	7a4a      	ldrb	r2, [r1, #9]
 800f3a6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f3aa:	2a02      	cmp	r2, #2
 800f3ac:	bf18      	it	ne
 800f3ae:	2200      	movne	r2, #0
 800f3b0:	7002      	strb	r2, [r0, #0]
 800f3b2:	780a      	ldrb	r2, [r1, #0]
 800f3b4:	8889      	ldrh	r1, [r1, #4]
 800f3b6:	8081      	strh	r1, [r0, #4]
 800f3b8:	f1ac 0c02 	sub.w	ip, ip, #2
 800f3bc:	f1a2 0202 	sub.w	r2, r2, #2
 800f3c0:	fabc fc8c 	clz	ip, ip
 800f3c4:	fab2 f282 	clz	r2, r2
 800f3c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f3cc:	0952      	lsrs	r2, r2, #5
 800f3ce:	f880 c001 	strb.w	ip, [r0, #1]
 800f3d2:	7082      	strb	r2, [r0, #2]
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop

0800f3d8 <generate_service_topics>:
 800f3d8:	b570      	push	{r4, r5, r6, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	461c      	mov	r4, r3
 800f3de:	4b12      	ldr	r3, [pc, #72]	@ (800f428 <generate_service_topics+0x50>)
 800f3e0:	9301      	str	r3, [sp, #4]
 800f3e2:	4605      	mov	r5, r0
 800f3e4:	4b11      	ldr	r3, [pc, #68]	@ (800f42c <generate_service_topics+0x54>)
 800f3e6:	9000      	str	r0, [sp, #0]
 800f3e8:	4616      	mov	r6, r2
 800f3ea:	4608      	mov	r0, r1
 800f3ec:	4a10      	ldr	r2, [pc, #64]	@ (800f430 <generate_service_topics+0x58>)
 800f3ee:	4621      	mov	r1, r4
 800f3f0:	f00a fb42 	bl	8019a78 <sniprintf>
 800f3f4:	4b0f      	ldr	r3, [pc, #60]	@ (800f434 <generate_service_topics+0x5c>)
 800f3f6:	9301      	str	r3, [sp, #4]
 800f3f8:	4601      	mov	r1, r0
 800f3fa:	9500      	str	r5, [sp, #0]
 800f3fc:	4b0e      	ldr	r3, [pc, #56]	@ (800f438 <generate_service_topics+0x60>)
 800f3fe:	4a0c      	ldr	r2, [pc, #48]	@ (800f430 <generate_service_topics+0x58>)
 800f400:	460d      	mov	r5, r1
 800f402:	4630      	mov	r0, r6
 800f404:	4621      	mov	r1, r4
 800f406:	f00a fb37 	bl	8019a78 <sniprintf>
 800f40a:	2d00      	cmp	r5, #0
 800f40c:	db01      	blt.n	800f412 <generate_service_topics+0x3a>
 800f40e:	42ac      	cmp	r4, r5
 800f410:	dc02      	bgt.n	800f418 <generate_service_topics+0x40>
 800f412:	2000      	movs	r0, #0
 800f414:	b002      	add	sp, #8
 800f416:	bd70      	pop	{r4, r5, r6, pc}
 800f418:	2800      	cmp	r0, #0
 800f41a:	dbfa      	blt.n	800f412 <generate_service_topics+0x3a>
 800f41c:	4284      	cmp	r4, r0
 800f41e:	bfd4      	ite	le
 800f420:	2000      	movle	r0, #0
 800f422:	2001      	movgt	r0, #1
 800f424:	b002      	add	sp, #8
 800f426:	bd70      	pop	{r4, r5, r6, pc}
 800f428:	0801bbbc 	.word	0x0801bbbc
 800f42c:	0801bbb8 	.word	0x0801bbb8
 800f430:	0801bb94 	.word	0x0801bb94
 800f434:	0801bbb0 	.word	0x0801bbb0
 800f438:	0801bbac 	.word	0x0801bbac

0800f43c <generate_service_types>:
 800f43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f440:	4605      	mov	r5, r0
 800f442:	b086      	sub	sp, #24
 800f444:	6880      	ldr	r0, [r0, #8]
 800f446:	460c      	mov	r4, r1
 800f448:	4617      	mov	r7, r2
 800f44a:	461e      	mov	r6, r3
 800f44c:	4780      	blx	r0
 800f44e:	68eb      	ldr	r3, [r5, #12]
 800f450:	4680      	mov	r8, r0
 800f452:	4798      	blx	r3
 800f454:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f458:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f45c:	2300      	movs	r3, #0
 800f45e:	7023      	strb	r3, [r4, #0]
 800f460:	6813      	ldr	r3, [r2, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d042      	beq.n	800f4ec <generate_service_types+0xb0>
 800f466:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800f500 <generate_service_types+0xc4>
 800f46a:	4641      	mov	r1, r8
 800f46c:	4620      	mov	r0, r4
 800f46e:	4c22      	ldr	r4, [pc, #136]	@ (800f4f8 <generate_service_types+0xbc>)
 800f470:	9405      	str	r4, [sp, #20]
 800f472:	6852      	ldr	r2, [r2, #4]
 800f474:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800f508 <generate_service_types+0xcc>
 800f478:	9204      	str	r2, [sp, #16]
 800f47a:	9100      	str	r1, [sp, #0]
 800f47c:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800f480:	4a1e      	ldr	r2, [pc, #120]	@ (800f4fc <generate_service_types+0xc0>)
 800f482:	f8cd a004 	str.w	sl, [sp, #4]
 800f486:	4631      	mov	r1, r6
 800f488:	f00a faf6 	bl	8019a78 <sniprintf>
 800f48c:	2800      	cmp	r0, #0
 800f48e:	db1f      	blt.n	800f4d0 <generate_service_types+0x94>
 800f490:	2300      	movs	r3, #0
 800f492:	703b      	strb	r3, [r7, #0]
 800f494:	f8d9 3000 	ldr.w	r3, [r9]
 800f498:	42b0      	cmp	r0, r6
 800f49a:	bfac      	ite	ge
 800f49c:	2500      	movge	r5, #0
 800f49e:	2501      	movlt	r5, #1
 800f4a0:	b1eb      	cbz	r3, 800f4de <generate_service_types+0xa2>
 800f4a2:	4a17      	ldr	r2, [pc, #92]	@ (800f500 <generate_service_types+0xc4>)
 800f4a4:	9405      	str	r4, [sp, #20]
 800f4a6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f4aa:	9200      	str	r2, [sp, #0]
 800f4ac:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800f4b0:	e9cd a401 	strd	sl, r4, [sp, #4]
 800f4b4:	4a11      	ldr	r2, [pc, #68]	@ (800f4fc <generate_service_types+0xc0>)
 800f4b6:	4638      	mov	r0, r7
 800f4b8:	4631      	mov	r1, r6
 800f4ba:	f00a fadd 	bl	8019a78 <sniprintf>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	db10      	blt.n	800f4e4 <generate_service_types+0xa8>
 800f4c2:	42b0      	cmp	r0, r6
 800f4c4:	bfb4      	ite	lt
 800f4c6:	4628      	movlt	r0, r5
 800f4c8:	2000      	movge	r0, #0
 800f4ca:	b006      	add	sp, #24
 800f4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	703b      	strb	r3, [r7, #0]
 800f4d4:	f8d9 3000 	ldr.w	r3, [r9]
 800f4d8:	2500      	movs	r5, #0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d1e1      	bne.n	800f4a2 <generate_service_types+0x66>
 800f4de:	4b09      	ldr	r3, [pc, #36]	@ (800f504 <generate_service_types+0xc8>)
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	e7df      	b.n	800f4a4 <generate_service_types+0x68>
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	b006      	add	sp, #24
 800f4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ec:	4b05      	ldr	r3, [pc, #20]	@ (800f504 <generate_service_types+0xc8>)
 800f4ee:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800f500 <generate_service_types+0xc4>
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	e7ba      	b.n	800f46c <generate_service_types+0x30>
 800f4f6:	bf00      	nop
 800f4f8:	0801bb9c 	.word	0x0801bb9c
 800f4fc:	0801bb8c 	.word	0x0801bb8c
 800f500:	0801bb88 	.word	0x0801bb88
 800f504:	0801c9ec 	.word	0x0801c9ec
 800f508:	0801bba0 	.word	0x0801bba0

0800f50c <generate_type_name>:
 800f50c:	b530      	push	{r4, r5, lr}
 800f50e:	2300      	movs	r3, #0
 800f510:	700b      	strb	r3, [r1, #0]
 800f512:	6803      	ldr	r3, [r0, #0]
 800f514:	b087      	sub	sp, #28
 800f516:	4614      	mov	r4, r2
 800f518:	b1d3      	cbz	r3, 800f550 <generate_type_name+0x44>
 800f51a:	4a0f      	ldr	r2, [pc, #60]	@ (800f558 <generate_type_name+0x4c>)
 800f51c:	4615      	mov	r5, r2
 800f51e:	9203      	str	r2, [sp, #12]
 800f520:	9500      	str	r5, [sp, #0]
 800f522:	6842      	ldr	r2, [r0, #4]
 800f524:	480d      	ldr	r0, [pc, #52]	@ (800f55c <generate_type_name+0x50>)
 800f526:	9001      	str	r0, [sp, #4]
 800f528:	4608      	mov	r0, r1
 800f52a:	490d      	ldr	r1, [pc, #52]	@ (800f560 <generate_type_name+0x54>)
 800f52c:	9204      	str	r2, [sp, #16]
 800f52e:	9105      	str	r1, [sp, #20]
 800f530:	9102      	str	r1, [sp, #8]
 800f532:	4a0c      	ldr	r2, [pc, #48]	@ (800f564 <generate_type_name+0x58>)
 800f534:	4621      	mov	r1, r4
 800f536:	f00a fa9f 	bl	8019a78 <sniprintf>
 800f53a:	2800      	cmp	r0, #0
 800f53c:	db05      	blt.n	800f54a <generate_type_name+0x3e>
 800f53e:	4284      	cmp	r4, r0
 800f540:	bfd4      	ite	le
 800f542:	2000      	movle	r0, #0
 800f544:	2001      	movgt	r0, #1
 800f546:	b007      	add	sp, #28
 800f548:	bd30      	pop	{r4, r5, pc}
 800f54a:	2000      	movs	r0, #0
 800f54c:	b007      	add	sp, #28
 800f54e:	bd30      	pop	{r4, r5, pc}
 800f550:	4b05      	ldr	r3, [pc, #20]	@ (800f568 <generate_type_name+0x5c>)
 800f552:	4a01      	ldr	r2, [pc, #4]	@ (800f558 <generate_type_name+0x4c>)
 800f554:	461d      	mov	r5, r3
 800f556:	e7e2      	b.n	800f51e <generate_type_name+0x12>
 800f558:	0801bb88 	.word	0x0801bb88
 800f55c:	0801bba0 	.word	0x0801bba0
 800f560:	0801bb9c 	.word	0x0801bb9c
 800f564:	0801bb8c 	.word	0x0801bb8c
 800f568:	0801c9ec 	.word	0x0801c9ec

0800f56c <generate_topic_name>:
 800f56c:	b510      	push	{r4, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	4614      	mov	r4, r2
 800f572:	9000      	str	r0, [sp, #0]
 800f574:	4b08      	ldr	r3, [pc, #32]	@ (800f598 <generate_topic_name+0x2c>)
 800f576:	4a09      	ldr	r2, [pc, #36]	@ (800f59c <generate_topic_name+0x30>)
 800f578:	4608      	mov	r0, r1
 800f57a:	4621      	mov	r1, r4
 800f57c:	f00a fa7c 	bl	8019a78 <sniprintf>
 800f580:	2800      	cmp	r0, #0
 800f582:	db05      	blt.n	800f590 <generate_topic_name+0x24>
 800f584:	4284      	cmp	r4, r0
 800f586:	bfd4      	ite	le
 800f588:	2000      	movle	r0, #0
 800f58a:	2001      	movgt	r0, #1
 800f58c:	b002      	add	sp, #8
 800f58e:	bd10      	pop	{r4, pc}
 800f590:	2000      	movs	r0, #0
 800f592:	b002      	add	sp, #8
 800f594:	bd10      	pop	{r4, pc}
 800f596:	bf00      	nop
 800f598:	0801bbc4 	.word	0x0801bbc4
 800f59c:	0801bba4 	.word	0x0801bba4

0800f5a0 <is_uxrce_rmw_identifier_valid>:
 800f5a0:	b510      	push	{r4, lr}
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	b140      	cbz	r0, 800f5b8 <is_uxrce_rmw_identifier_valid+0x18>
 800f5a6:	f008 f8d3 	bl	8017750 <rmw_get_implementation_identifier>
 800f5aa:	4601      	mov	r1, r0
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f7f0 fe37 	bl	8000220 <strcmp>
 800f5b2:	fab0 f080 	clz	r0, r0
 800f5b6:	0940      	lsrs	r0, r0, #5
 800f5b8:	bd10      	pop	{r4, pc}
 800f5ba:	bf00      	nop

0800f5bc <get_message_typesupport_handle>:
 800f5bc:	6883      	ldr	r3, [r0, #8]
 800f5be:	4718      	bx	r3

0800f5c0 <get_message_typesupport_handle_function>:
 800f5c0:	b510      	push	{r4, lr}
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	6800      	ldr	r0, [r0, #0]
 800f5c6:	f7f0 fe2b 	bl	8000220 <strcmp>
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	bf0c      	ite	eq
 800f5ce:	4620      	moveq	r0, r4
 800f5d0:	2000      	movne	r0, #0
 800f5d2:	bd10      	pop	{r4, pc}

0800f5d4 <get_service_typesupport_handle>:
 800f5d4:	6883      	ldr	r3, [r0, #8]
 800f5d6:	4718      	bx	r3

0800f5d8 <get_service_typesupport_handle_function>:
 800f5d8:	b510      	push	{r4, lr}
 800f5da:	4604      	mov	r4, r0
 800f5dc:	6800      	ldr	r0, [r0, #0]
 800f5de:	f7f0 fe1f 	bl	8000220 <strcmp>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	bf0c      	ite	eq
 800f5e6:	4620      	moveq	r0, r4
 800f5e8:	2000      	movne	r0, #0
 800f5ea:	bd10      	pop	{r4, pc}

0800f5ec <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f0:	6805      	ldr	r5, [r0, #0]
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	460e      	mov	r6, r1
 800f5f8:	f7f0 fe12 	bl	8000220 <strcmp>
 800f5fc:	b1c8      	cbz	r0, 800f632 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f5fe:	4b11      	ldr	r3, [pc, #68]	@ (800f644 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	429d      	cmp	r5, r3
 800f604:	d112      	bne.n	800f62c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f606:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f60a:	f8d8 4000 	ldr.w	r4, [r8]
 800f60e:	b16c      	cbz	r4, 800f62c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f610:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f614:	2700      	movs	r7, #0
 800f616:	3d04      	subs	r5, #4
 800f618:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f61c:	4631      	mov	r1, r6
 800f61e:	f7f0 fdff 	bl	8000220 <strcmp>
 800f622:	00bb      	lsls	r3, r7, #2
 800f624:	b140      	cbz	r0, 800f638 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f626:	3701      	adds	r7, #1
 800f628:	42bc      	cmp	r4, r7
 800f62a:	d1f5      	bne.n	800f618 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f62c:	2000      	movs	r0, #0
 800f62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f632:	4620      	mov	r0, r4
 800f634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f638:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f63c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f640:	58d3      	ldr	r3, [r2, r3]
 800f642:	4718      	bx	r3
 800f644:	200003b4 	.word	0x200003b4

0800f648 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800f648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f64c:	6805      	ldr	r5, [r0, #0]
 800f64e:	4604      	mov	r4, r0
 800f650:	4628      	mov	r0, r5
 800f652:	460e      	mov	r6, r1
 800f654:	f7f0 fde4 	bl	8000220 <strcmp>
 800f658:	b1c8      	cbz	r0, 800f68e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800f65a:	4b11      	ldr	r3, [pc, #68]	@ (800f6a0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	429d      	cmp	r5, r3
 800f660:	d112      	bne.n	800f688 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f662:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f666:	f8d8 4000 	ldr.w	r4, [r8]
 800f66a:	b16c      	cbz	r4, 800f688 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f66c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f670:	2700      	movs	r7, #0
 800f672:	3d04      	subs	r5, #4
 800f674:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f678:	4631      	mov	r1, r6
 800f67a:	f7f0 fdd1 	bl	8000220 <strcmp>
 800f67e:	00bb      	lsls	r3, r7, #2
 800f680:	b140      	cbz	r0, 800f694 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800f682:	3701      	adds	r7, #1
 800f684:	42bc      	cmp	r4, r7
 800f686:	d1f5      	bne.n	800f674 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800f688:	2000      	movs	r0, #0
 800f68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f68e:	4620      	mov	r0, r4
 800f690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f694:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f69c:	58d3      	ldr	r3, [r2, r3]
 800f69e:	4718      	bx	r3
 800f6a0:	200003b4 	.word	0x200003b4

0800f6a4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f6a4:	4b04      	ldr	r3, [pc, #16]	@ (800f6b8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f6a6:	681a      	ldr	r2, [r3, #0]
 800f6a8:	b10a      	cbz	r2, 800f6ae <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800f6aa:	4803      	ldr	r0, [pc, #12]	@ (800f6b8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f6ac:	4770      	bx	lr
 800f6ae:	4a03      	ldr	r2, [pc, #12]	@ (800f6bc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800f6b0:	4801      	ldr	r0, [pc, #4]	@ (800f6b8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f6b2:	6812      	ldr	r2, [r2, #0]
 800f6b4:	601a      	str	r2, [r3, #0]
 800f6b6:	4770      	bx	lr
 800f6b8:	200003c4 	.word	0x200003c4
 800f6bc:	200003b4 	.word	0x200003b4

0800f6c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f6c0:	4a02      	ldr	r2, [pc, #8]	@ (800f6cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800f6c2:	4b03      	ldr	r3, [pc, #12]	@ (800f6d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800f6c4:	6812      	ldr	r2, [r2, #0]
 800f6c6:	601a      	str	r2, [r3, #0]
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	200003b4 	.word	0x200003b4
 800f6d0:	200003c4 	.word	0x200003c4

0800f6d4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800f6d4:	2009      	movs	r0, #9
 800f6d6:	4770      	bx	lr

0800f6d8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800f6d8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop

0800f6e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800f6e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6e8:	e9c2 0100 	strd	r0, r1, [r2]
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop

0800f6f0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800f6f0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f6f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f6f8:	e9c1 2300 	strd	r2, r3, [r1]
 800f6fc:	4770      	bx	lr
 800f6fe:	bf00      	nop

0800f700 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800f700:	f008 bbda 	b.w	8017eb8 <sensor_msgs__msg__Imu__init>

0800f704 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800f704:	f008 bc2e 	b.w	8017f64 <sensor_msgs__msg__Imu__fini>

0800f708 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800f708:	2009      	movs	r0, #9
 800f70a:	4770      	bx	lr

0800f70c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800f70c:	2009      	movs	r0, #9
 800f70e:	4770      	bx	lr

0800f710 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800f710:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop

0800f718 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800f718:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop

0800f720 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800f720:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f724:	4770      	bx	lr
 800f726:	bf00      	nop

0800f728 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800f728:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop

0800f730 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800f730:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop

0800f738 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800f738:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f73c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f740:	e9c2 0100 	strd	r0, r1, [r2]
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop

0800f748 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800f748:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f74c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f750:	e9c1 2300 	strd	r2, r3, [r1]
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop

0800f758 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800f758:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f75c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f760:	e9c2 0100 	strd	r0, r1, [r2]
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop

0800f768 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800f768:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f76c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f770:	e9c1 2300 	strd	r2, r3, [r1]
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop

0800f778 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f778:	b510      	push	{r4, lr}
 800f77a:	f000 f90f 	bl	800f99c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f77e:	4c0b      	ldr	r4, [pc, #44]	@ (800f7ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800f780:	60e0      	str	r0, [r4, #12]
 800f782:	f000 fb91 	bl	800fea8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f786:	64a0      	str	r0, [r4, #72]	@ 0x48
 800f788:	f7fb fbe6 	bl	800af58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f78c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800f790:	f7fb fbe2 	bl	800af58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f794:	4b06      	ldr	r3, [pc, #24]	@ (800f7b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f796:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	b10a      	cbz	r2, 800f7a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800f79e:	4804      	ldr	r0, [pc, #16]	@ (800f7b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f7a0:	bd10      	pop	{r4, pc}
 800f7a2:	4a04      	ldr	r2, [pc, #16]	@ (800f7b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800f7a4:	4802      	ldr	r0, [pc, #8]	@ (800f7b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f7a6:	6812      	ldr	r2, [r2, #0]
 800f7a8:	601a      	str	r2, [r3, #0]
 800f7aa:	bd10      	pop	{r4, pc}
 800f7ac:	200003d0 	.word	0x200003d0
 800f7b0:	20000574 	.word	0x20000574
 800f7b4:	200003b8 	.word	0x200003b8

0800f7b8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800f7b8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800f7bc:	4680      	mov	r8, r0
 800f7be:	460f      	mov	r7, r1
 800f7c0:	f000 f910 	bl	800f9e4 <get_serialized_size_std_msgs__msg__Header>
 800f7c4:	183c      	adds	r4, r7, r0
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	f108 0018 	add.w	r0, r8, #24
 800f7cc:	f000 fb7a 	bl	800fec4 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800f7d0:	4404      	add	r4, r0
 800f7d2:	2108      	movs	r1, #8
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	f7fd f8eb 	bl	800c9b0 <ucdr_alignment>
 800f7da:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800f7de:	4425      	add	r5, r4
 800f7e0:	4629      	mov	r1, r5
 800f7e2:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800f7e6:	f7fb fc2b 	bl	800b040 <get_serialized_size_geometry_msgs__msg__Vector3>
 800f7ea:	4405      	add	r5, r0
 800f7ec:	2108      	movs	r1, #8
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f7fd f8de 	bl	800c9b0 <ucdr_alignment>
 800f7f4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800f7f8:	4425      	add	r5, r4
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800f800:	f7fb fc1e 	bl	800b040 <get_serialized_size_geometry_msgs__msg__Vector3>
 800f804:	4405      	add	r5, r0
 800f806:	2108      	movs	r1, #8
 800f808:	4628      	mov	r0, r5
 800f80a:	f7fd f8d1 	bl	800c9b0 <ucdr_alignment>
 800f80e:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800f812:	4438      	add	r0, r7
 800f814:	4428      	add	r0, r5
 800f816:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800f81a:	bf00      	nop

0800f81c <get_serialized_size_sensor_msgs__msg__Imu>:
 800f81c:	b108      	cbz	r0, 800f822 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800f81e:	f7ff bfcb 	b.w	800f7b8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800f822:	4770      	bx	lr

0800f824 <_Imu__get_serialized_size>:
 800f824:	b110      	cbz	r0, 800f82c <_Imu__get_serialized_size+0x8>
 800f826:	2100      	movs	r1, #0
 800f828:	f7ff bfc6 	b.w	800f7b8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop

0800f830 <_Imu__cdr_deserialize>:
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	460c      	mov	r4, r1
 800f834:	b399      	cbz	r1, 800f89e <_Imu__cdr_deserialize+0x6e>
 800f836:	4605      	mov	r5, r0
 800f838:	f000 f956 	bl	800fae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f83c:	6843      	ldr	r3, [r0, #4]
 800f83e:	4621      	mov	r1, r4
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	4628      	mov	r0, r5
 800f844:	4798      	blx	r3
 800f846:	f000 fbf1 	bl	801002c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f84a:	6843      	ldr	r3, [r0, #4]
 800f84c:	f104 0118 	add.w	r1, r4, #24
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	4628      	mov	r0, r5
 800f854:	4798      	blx	r3
 800f856:	2209      	movs	r2, #9
 800f858:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f85c:	4628      	mov	r0, r5
 800f85e:	f000 fd85 	bl	801036c <ucdr_deserialize_array_double>
 800f862:	f7fb fc79 	bl	800b158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f866:	6843      	ldr	r3, [r0, #4]
 800f868:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	4628      	mov	r0, r5
 800f870:	4798      	blx	r3
 800f872:	2209      	movs	r2, #9
 800f874:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800f878:	4628      	mov	r0, r5
 800f87a:	f000 fd77 	bl	801036c <ucdr_deserialize_array_double>
 800f87e:	f7fb fc6b 	bl	800b158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f882:	6843      	ldr	r3, [r0, #4]
 800f884:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	4628      	mov	r0, r5
 800f88c:	4798      	blx	r3
 800f88e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800f892:	4628      	mov	r0, r5
 800f894:	2209      	movs	r2, #9
 800f896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f89a:	f000 bd67 	b.w	801036c <ucdr_deserialize_array_double>
 800f89e:	4608      	mov	r0, r1
 800f8a0:	bd38      	pop	{r3, r4, r5, pc}
 800f8a2:	bf00      	nop

0800f8a4 <_Imu__cdr_serialize>:
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	d035      	beq.n	800f914 <_Imu__cdr_serialize+0x70>
 800f8a8:	b538      	push	{r3, r4, r5, lr}
 800f8aa:	460d      	mov	r5, r1
 800f8ac:	4604      	mov	r4, r0
 800f8ae:	f000 f91b 	bl	800fae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f8b2:	6843      	ldr	r3, [r0, #4]
 800f8b4:	4629      	mov	r1, r5
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	4798      	blx	r3
 800f8bc:	f000 fbb6 	bl	801002c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f8c0:	6843      	ldr	r3, [r0, #4]
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	f104 0018 	add.w	r0, r4, #24
 800f8ca:	4798      	blx	r3
 800f8cc:	2209      	movs	r2, #9
 800f8ce:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f000 fcf6 	bl	80102c4 <ucdr_serialize_array_double>
 800f8d8:	f7fb fc3e 	bl	800b158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f8dc:	6843      	ldr	r3, [r0, #4]
 800f8de:	4629      	mov	r1, r5
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800f8e6:	4798      	blx	r3
 800f8e8:	2209      	movs	r2, #9
 800f8ea:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	f000 fce8 	bl	80102c4 <ucdr_serialize_array_double>
 800f8f4:	f7fb fc30 	bl	800b158 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f8f8:	6843      	ldr	r3, [r0, #4]
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	689b      	ldr	r3, [r3, #8]
 800f8fe:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800f902:	4798      	blx	r3
 800f904:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800f908:	4628      	mov	r0, r5
 800f90a:	2209      	movs	r2, #9
 800f90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f910:	f000 bcd8 	b.w	80102c4 <ucdr_serialize_array_double>
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop

0800f918 <max_serialized_size_sensor_msgs__msg__Imu>:
 800f918:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800f91c:	2301      	movs	r3, #1
 800f91e:	7003      	strb	r3, [r0, #0]
 800f920:	4680      	mov	r8, r0
 800f922:	460f      	mov	r7, r1
 800f924:	f000 f8d6 	bl	800fad4 <max_serialized_size_std_msgs__msg__Header>
 800f928:	183c      	adds	r4, r7, r0
 800f92a:	4621      	mov	r1, r4
 800f92c:	4640      	mov	r0, r8
 800f92e:	f000 fb5b 	bl	800ffe8 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800f932:	4404      	add	r4, r0
 800f934:	2108      	movs	r1, #8
 800f936:	4620      	mov	r0, r4
 800f938:	f7fd f83a 	bl	800c9b0 <ucdr_alignment>
 800f93c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800f940:	4425      	add	r5, r4
 800f942:	4629      	mov	r1, r5
 800f944:	4640      	mov	r0, r8
 800f946:	f7fb fbeb 	bl	800b120 <max_serialized_size_geometry_msgs__msg__Vector3>
 800f94a:	4405      	add	r5, r0
 800f94c:	2108      	movs	r1, #8
 800f94e:	4628      	mov	r0, r5
 800f950:	f7fd f82e 	bl	800c9b0 <ucdr_alignment>
 800f954:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800f958:	4425      	add	r5, r4
 800f95a:	4629      	mov	r1, r5
 800f95c:	4640      	mov	r0, r8
 800f95e:	f7fb fbdf 	bl	800b120 <max_serialized_size_geometry_msgs__msg__Vector3>
 800f962:	4405      	add	r5, r0
 800f964:	2108      	movs	r1, #8
 800f966:	4628      	mov	r0, r5
 800f968:	f7fd f822 	bl	800c9b0 <ucdr_alignment>
 800f96c:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800f970:	4438      	add	r0, r7
 800f972:	4428      	add	r0, r5
 800f974:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800f978 <_Imu__max_serialized_size>:
 800f978:	b500      	push	{lr}
 800f97a:	b083      	sub	sp, #12
 800f97c:	2100      	movs	r1, #0
 800f97e:	f10d 0007 	add.w	r0, sp, #7
 800f982:	f7ff ffc9 	bl	800f918 <max_serialized_size_sensor_msgs__msg__Imu>
 800f986:	b003      	add	sp, #12
 800f988:	f85d fb04 	ldr.w	pc, [sp], #4

0800f98c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f98c:	4800      	ldr	r0, [pc, #0]	@ (800f990 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800f98e:	4770      	bx	lr
 800f990:	20000580 	.word	0x20000580

0800f994 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800f994:	f008 bafa 	b.w	8017f8c <std_msgs__msg__Header__init>

0800f998 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800f998:	f008 bb1c 	b.w	8017fd4 <std_msgs__msg__Header__fini>

0800f99c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f99c:	b508      	push	{r3, lr}
 800f99e:	f000 f9d3 	bl	800fd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f9a2:	4b06      	ldr	r3, [pc, #24]	@ (800f9bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f9a4:	4906      	ldr	r1, [pc, #24]	@ (800f9c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	60c8      	str	r0, [r1, #12]
 800f9aa:	b10a      	cbz	r2, 800f9b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800f9ac:	4803      	ldr	r0, [pc, #12]	@ (800f9bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f9ae:	bd08      	pop	{r3, pc}
 800f9b0:	4a04      	ldr	r2, [pc, #16]	@ (800f9c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800f9b2:	4802      	ldr	r0, [pc, #8]	@ (800f9bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f9b4:	6812      	ldr	r2, [r2, #0]
 800f9b6:	601a      	str	r2, [r3, #0]
 800f9b8:	bd08      	pop	{r3, pc}
 800f9ba:	bf00      	nop
 800f9bc:	20000620 	.word	0x20000620
 800f9c0:	200005a8 	.word	0x200005a8
 800f9c4:	200003b8 	.word	0x200003b8

0800f9c8 <_Header__max_serialized_size>:
 800f9c8:	b500      	push	{lr}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	f10d 0007 	add.w	r0, sp, #7
 800f9d4:	f88d 3007 	strb.w	r3, [sp, #7]
 800f9d8:	f000 fa14 	bl	800fe04 <max_serialized_size_builtin_interfaces__msg__Time>
 800f9dc:	b003      	add	sp, #12
 800f9de:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9e2:	bf00      	nop

0800f9e4 <get_serialized_size_std_msgs__msg__Header>:
 800f9e4:	b570      	push	{r4, r5, r6, lr}
 800f9e6:	4605      	mov	r5, r0
 800f9e8:	b168      	cbz	r0, 800fa06 <get_serialized_size_std_msgs__msg__Header+0x22>
 800f9ea:	460c      	mov	r4, r1
 800f9ec:	f000 f9ba 	bl	800fd64 <get_serialized_size_builtin_interfaces__msg__Time>
 800f9f0:	1826      	adds	r6, r4, r0
 800f9f2:	2104      	movs	r1, #4
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	f7fc ffdb 	bl	800c9b0 <ucdr_alignment>
 800f9fa:	68e9      	ldr	r1, [r5, #12]
 800f9fc:	f1c4 0405 	rsb	r4, r4, #5
 800fa00:	440c      	add	r4, r1
 800fa02:	4404      	add	r4, r0
 800fa04:	19a0      	adds	r0, r4, r6
 800fa06:	bd70      	pop	{r4, r5, r6, pc}

0800fa08 <_Header__cdr_deserialize>:
 800fa08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa0a:	460c      	mov	r4, r1
 800fa0c:	b083      	sub	sp, #12
 800fa0e:	b1e1      	cbz	r1, 800fa4a <_Header__cdr_deserialize+0x42>
 800fa10:	4606      	mov	r6, r0
 800fa12:	f000 fa0b 	bl	800fe2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa16:	6843      	ldr	r3, [r0, #4]
 800fa18:	4621      	mov	r1, r4
 800fa1a:	68db      	ldr	r3, [r3, #12]
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	4798      	blx	r3
 800fa20:	6927      	ldr	r7, [r4, #16]
 800fa22:	68a1      	ldr	r1, [r4, #8]
 800fa24:	ab01      	add	r3, sp, #4
 800fa26:	463a      	mov	r2, r7
 800fa28:	4630      	mov	r0, r6
 800fa2a:	f000 fd07 	bl	801043c <ucdr_deserialize_sequence_char>
 800fa2e:	9b01      	ldr	r3, [sp, #4]
 800fa30:	4605      	mov	r5, r0
 800fa32:	b920      	cbnz	r0, 800fa3e <_Header__cdr_deserialize+0x36>
 800fa34:	429f      	cmp	r7, r3
 800fa36:	d30c      	bcc.n	800fa52 <_Header__cdr_deserialize+0x4a>
 800fa38:	4628      	mov	r0, r5
 800fa3a:	b003      	add	sp, #12
 800fa3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa3e:	b103      	cbz	r3, 800fa42 <_Header__cdr_deserialize+0x3a>
 800fa40:	3b01      	subs	r3, #1
 800fa42:	4628      	mov	r0, r5
 800fa44:	60e3      	str	r3, [r4, #12]
 800fa46:	b003      	add	sp, #12
 800fa48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa4a:	460d      	mov	r5, r1
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	b003      	add	sp, #12
 800fa50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa52:	2101      	movs	r1, #1
 800fa54:	75b0      	strb	r0, [r6, #22]
 800fa56:	7571      	strb	r1, [r6, #21]
 800fa58:	4630      	mov	r0, r6
 800fa5a:	60e5      	str	r5, [r4, #12]
 800fa5c:	f7fc ffbe 	bl	800c9dc <ucdr_align_to>
 800fa60:	4630      	mov	r0, r6
 800fa62:	9901      	ldr	r1, [sp, #4]
 800fa64:	f7fc fff0 	bl	800ca48 <ucdr_advance_buffer>
 800fa68:	4628      	mov	r0, r5
 800fa6a:	b003      	add	sp, #12
 800fa6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa6e:	bf00      	nop

0800fa70 <_Header__cdr_serialize>:
 800fa70:	b1f8      	cbz	r0, 800fab2 <_Header__cdr_serialize+0x42>
 800fa72:	b570      	push	{r4, r5, r6, lr}
 800fa74:	4604      	mov	r4, r0
 800fa76:	460d      	mov	r5, r1
 800fa78:	f000 f9d8 	bl	800fe2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa7c:	6843      	ldr	r3, [r0, #4]
 800fa7e:	4629      	mov	r1, r5
 800fa80:	689b      	ldr	r3, [r3, #8]
 800fa82:	4620      	mov	r0, r4
 800fa84:	4798      	blx	r3
 800fa86:	68a6      	ldr	r6, [r4, #8]
 800fa88:	b156      	cbz	r6, 800faa0 <_Header__cdr_serialize+0x30>
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	f7f0 fbd2 	bl	8000234 <strlen>
 800fa90:	4631      	mov	r1, r6
 800fa92:	60e0      	str	r0, [r4, #12]
 800fa94:	1c42      	adds	r2, r0, #1
 800fa96:	4628      	mov	r0, r5
 800fa98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa9c:	f000 bcbc 	b.w	8010418 <ucdr_serialize_sequence_char>
 800faa0:	4630      	mov	r0, r6
 800faa2:	60e0      	str	r0, [r4, #12]
 800faa4:	4632      	mov	r2, r6
 800faa6:	4631      	mov	r1, r6
 800faa8:	4628      	mov	r0, r5
 800faaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800faae:	f000 bcb3 	b.w	8010418 <ucdr_serialize_sequence_char>
 800fab2:	4770      	bx	lr

0800fab4 <_Header__get_serialized_size>:
 800fab4:	b538      	push	{r3, r4, r5, lr}
 800fab6:	4604      	mov	r4, r0
 800fab8:	b150      	cbz	r0, 800fad0 <_Header__get_serialized_size+0x1c>
 800faba:	2100      	movs	r1, #0
 800fabc:	f000 f952 	bl	800fd64 <get_serialized_size_builtin_interfaces__msg__Time>
 800fac0:	2104      	movs	r1, #4
 800fac2:	4605      	mov	r5, r0
 800fac4:	f7fc ff74 	bl	800c9b0 <ucdr_alignment>
 800fac8:	68e2      	ldr	r2, [r4, #12]
 800faca:	3205      	adds	r2, #5
 800facc:	1953      	adds	r3, r2, r5
 800face:	4418      	add	r0, r3
 800fad0:	bd38      	pop	{r3, r4, r5, pc}
 800fad2:	bf00      	nop

0800fad4 <max_serialized_size_std_msgs__msg__Header>:
 800fad4:	b510      	push	{r4, lr}
 800fad6:	2301      	movs	r3, #1
 800fad8:	4604      	mov	r4, r0
 800fada:	7003      	strb	r3, [r0, #0]
 800fadc:	f000 f992 	bl	800fe04 <max_serialized_size_builtin_interfaces__msg__Time>
 800fae0:	2300      	movs	r3, #0
 800fae2:	7023      	strb	r3, [r4, #0]
 800fae4:	bd10      	pop	{r4, pc}
 800fae6:	bf00      	nop

0800fae8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800fae8:	4800      	ldr	r0, [pc, #0]	@ (800faec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800faea:	4770      	bx	lr
 800faec:	2000062c 	.word	0x2000062c

0800faf0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800faf0:	4b04      	ldr	r3, [pc, #16]	@ (800fb04 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	b10a      	cbz	r2, 800fafa <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 800faf6:	4803      	ldr	r0, [pc, #12]	@ (800fb04 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800faf8:	4770      	bx	lr
 800fafa:	4a03      	ldr	r2, [pc, #12]	@ (800fb08 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 800fafc:	4801      	ldr	r0, [pc, #4]	@ (800fb04 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800fafe:	6812      	ldr	r2, [r2, #0]
 800fb00:	601a      	str	r2, [r3, #0]
 800fb02:	4770      	bx	lr
 800fb04:	2000065c 	.word	0x2000065c
 800fb08:	200003b4 	.word	0x200003b4

0800fb0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800fb0c:	4b04      	ldr	r3, [pc, #16]	@ (800fb20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800fb0e:	4805      	ldr	r0, [pc, #20]	@ (800fb24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800fb10:	4905      	ldr	r1, [pc, #20]	@ (800fb28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 800fb12:	4a06      	ldr	r2, [pc, #24]	@ (800fb2c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	6003      	str	r3, [r0, #0]
 800fb18:	600b      	str	r3, [r1, #0]
 800fb1a:	6013      	str	r3, [r2, #0]
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	200003b4 	.word	0x200003b4
 800fb24:	20000678 	.word	0x20000678
 800fb28:	20000684 	.word	0x20000684
 800fb2c:	2000065c 	.word	0x2000065c

0800fb30 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 800fb30:	f008 ba5c 	b.w	8017fec <std_srvs__srv__SetBool_Request__init>

0800fb34 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 800fb34:	f008 ba5e 	b.w	8017ff4 <std_srvs__srv__SetBool_Request__fini>

0800fb38 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 800fb38:	f008 ba5e 	b.w	8017ff8 <std_srvs__srv__SetBool_Response__init>

0800fb3c <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 800fb3c:	f008 ba6e 	b.w	801801c <std_srvs__srv__SetBool_Response__fini>

0800fb40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800fb40:	4b04      	ldr	r3, [pc, #16]	@ (800fb54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	b10a      	cbz	r2, 800fb4a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 800fb46:	4803      	ldr	r0, [pc, #12]	@ (800fb54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800fb48:	4770      	bx	lr
 800fb4a:	4a03      	ldr	r2, [pc, #12]	@ (800fb58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800fb4c:	4801      	ldr	r0, [pc, #4]	@ (800fb54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800fb4e:	6812      	ldr	r2, [r2, #0]
 800fb50:	601a      	str	r2, [r3, #0]
 800fb52:	4770      	bx	lr
 800fb54:	200006cc 	.word	0x200006cc
 800fb58:	200003b8 	.word	0x200003b8

0800fb5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800fb5c:	4b04      	ldr	r3, [pc, #16]	@ (800fb70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	b10a      	cbz	r2, 800fb66 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 800fb62:	4803      	ldr	r0, [pc, #12]	@ (800fb70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800fb64:	4770      	bx	lr
 800fb66:	4a03      	ldr	r2, [pc, #12]	@ (800fb74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 800fb68:	4801      	ldr	r0, [pc, #4]	@ (800fb70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800fb6a:	6812      	ldr	r2, [r2, #0]
 800fb6c:	601a      	str	r2, [r3, #0]
 800fb6e:	4770      	bx	lr
 800fb70:	20000750 	.word	0x20000750
 800fb74:	200003b8 	.word	0x200003b8

0800fb78 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800fb78:	4b13      	ldr	r3, [pc, #76]	@ (800fbc8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	b132      	cbz	r2, 800fb8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	689a      	ldr	r2, [r3, #8]
 800fb82:	b152      	cbz	r2, 800fb9a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 800fb84:	68da      	ldr	r2, [r3, #12]
 800fb86:	b182      	cbz	r2, 800fbaa <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 800fb88:	480f      	ldr	r0, [pc, #60]	@ (800fbc8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800fb8a:	4770      	bx	lr
 800fb8c:	4a0f      	ldr	r2, [pc, #60]	@ (800fbcc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800fb8e:	6812      	ldr	r2, [r2, #0]
 800fb90:	601a      	str	r2, [r3, #0]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	689a      	ldr	r2, [r3, #8]
 800fb96:	2a00      	cmp	r2, #0
 800fb98:	d1f4      	bne.n	800fb84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 800fb9a:	4a0d      	ldr	r2, [pc, #52]	@ (800fbd0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 800fb9c:	6811      	ldr	r1, [r2, #0]
 800fb9e:	b179      	cbz	r1, 800fbc0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 800fba0:	6852      	ldr	r2, [r2, #4]
 800fba2:	609a      	str	r2, [r3, #8]
 800fba4:	68da      	ldr	r2, [r3, #12]
 800fba6:	2a00      	cmp	r2, #0
 800fba8:	d1ee      	bne.n	800fb88 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 800fbaa:	4a0a      	ldr	r2, [pc, #40]	@ (800fbd4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 800fbac:	6811      	ldr	r1, [r2, #0]
 800fbae:	b119      	cbz	r1, 800fbb8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 800fbb0:	6852      	ldr	r2, [r2, #4]
 800fbb2:	4805      	ldr	r0, [pc, #20]	@ (800fbc8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800fbb4:	60da      	str	r2, [r3, #12]
 800fbb6:	4770      	bx	lr
 800fbb8:	4904      	ldr	r1, [pc, #16]	@ (800fbcc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800fbba:	6809      	ldr	r1, [r1, #0]
 800fbbc:	6011      	str	r1, [r2, #0]
 800fbbe:	e7f7      	b.n	800fbb0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 800fbc0:	4902      	ldr	r1, [pc, #8]	@ (800fbcc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800fbc2:	6809      	ldr	r1, [r1, #0]
 800fbc4:	6011      	str	r1, [r2, #0]
 800fbc6:	e7eb      	b.n	800fba0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 800fbc8:	2000076c 	.word	0x2000076c
 800fbcc:	200003b8 	.word	0x200003b8
 800fbd0:	200006cc 	.word	0x200006cc
 800fbd4:	20000750 	.word	0x20000750

0800fbd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800fbd8:	4800      	ldr	r0, [pc, #0]	@ (800fbdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 800fbda:	4770      	bx	lr
 800fbdc:	20000794 	.word	0x20000794

0800fbe0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800fbe0:	4800      	ldr	r0, [pc, #0]	@ (800fbe4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 800fbe2:	4770      	bx	lr
 800fbe4:	200007a0 	.word	0x200007a0

0800fbe8 <_SetBool_Request__max_serialized_size>:
 800fbe8:	b508      	push	{r3, lr}
 800fbea:	2101      	movs	r1, #1
 800fbec:	2000      	movs	r0, #0
 800fbee:	f7fc fedf 	bl	800c9b0 <ucdr_alignment>
 800fbf2:	3001      	adds	r0, #1
 800fbf4:	bd08      	pop	{r3, pc}
 800fbf6:	bf00      	nop

0800fbf8 <_SetBool_Request__cdr_deserialize>:
 800fbf8:	b109      	cbz	r1, 800fbfe <_SetBool_Request__cdr_deserialize+0x6>
 800fbfa:	f7fb bbdb 	b.w	800b3b4 <ucdr_deserialize_bool>
 800fbfe:	4608      	mov	r0, r1
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop

0800fc04 <get_serialized_size_std_srvs__srv__SetBool_Request>:
 800fc04:	b138      	cbz	r0, 800fc16 <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 800fc06:	b508      	push	{r3, lr}
 800fc08:	460b      	mov	r3, r1
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	2101      	movs	r1, #1
 800fc0e:	f7fc fecf 	bl	800c9b0 <ucdr_alignment>
 800fc12:	3001      	adds	r0, #1
 800fc14:	bd08      	pop	{r3, pc}
 800fc16:	4770      	bx	lr

0800fc18 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 800fc18:	b570      	push	{r4, r5, r6, lr}
 800fc1a:	4605      	mov	r5, r0
 800fc1c:	b180      	cbz	r0, 800fc40 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 800fc1e:	460c      	mov	r4, r1
 800fc20:	4620      	mov	r0, r4
 800fc22:	2101      	movs	r1, #1
 800fc24:	f7fc fec4 	bl	800c9b0 <ucdr_alignment>
 800fc28:	1c63      	adds	r3, r4, #1
 800fc2a:	181e      	adds	r6, r3, r0
 800fc2c:	2104      	movs	r1, #4
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f7fc febe 	bl	800c9b0 <ucdr_alignment>
 800fc34:	68a9      	ldr	r1, [r5, #8]
 800fc36:	f1c4 0405 	rsb	r4, r4, #5
 800fc3a:	440c      	add	r4, r1
 800fc3c:	4404      	add	r4, r0
 800fc3e:	19a0      	adds	r0, r4, r6
 800fc40:	bd70      	pop	{r4, r5, r6, pc}
 800fc42:	bf00      	nop

0800fc44 <_SetBool_Request__cdr_serialize>:
 800fc44:	460a      	mov	r2, r1
 800fc46:	b118      	cbz	r0, 800fc50 <_SetBool_Request__cdr_serialize+0xc>
 800fc48:	7801      	ldrb	r1, [r0, #0]
 800fc4a:	4610      	mov	r0, r2
 800fc4c:	f7fb bb9c 	b.w	800b388 <ucdr_serialize_bool>
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop

0800fc54 <_SetBool_Response__cdr_deserialize>:
 800fc54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc56:	460c      	mov	r4, r1
 800fc58:	b083      	sub	sp, #12
 800fc5a:	b1b9      	cbz	r1, 800fc8c <_SetBool_Response__cdr_deserialize+0x38>
 800fc5c:	4606      	mov	r6, r0
 800fc5e:	f7fb fba9 	bl	800b3b4 <ucdr_deserialize_bool>
 800fc62:	68e7      	ldr	r7, [r4, #12]
 800fc64:	6861      	ldr	r1, [r4, #4]
 800fc66:	ab01      	add	r3, sp, #4
 800fc68:	463a      	mov	r2, r7
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	f000 fbe6 	bl	801043c <ucdr_deserialize_sequence_char>
 800fc70:	9b01      	ldr	r3, [sp, #4]
 800fc72:	4605      	mov	r5, r0
 800fc74:	b920      	cbnz	r0, 800fc80 <_SetBool_Response__cdr_deserialize+0x2c>
 800fc76:	429f      	cmp	r7, r3
 800fc78:	d30c      	bcc.n	800fc94 <_SetBool_Response__cdr_deserialize+0x40>
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	b003      	add	sp, #12
 800fc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc80:	b103      	cbz	r3, 800fc84 <_SetBool_Response__cdr_deserialize+0x30>
 800fc82:	3b01      	subs	r3, #1
 800fc84:	4628      	mov	r0, r5
 800fc86:	60a3      	str	r3, [r4, #8]
 800fc88:	b003      	add	sp, #12
 800fc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc8c:	460d      	mov	r5, r1
 800fc8e:	4628      	mov	r0, r5
 800fc90:	b003      	add	sp, #12
 800fc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc94:	2101      	movs	r1, #1
 800fc96:	75b0      	strb	r0, [r6, #22]
 800fc98:	7571      	strb	r1, [r6, #21]
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	60a5      	str	r5, [r4, #8]
 800fc9e:	f7fc fe9d 	bl	800c9dc <ucdr_align_to>
 800fca2:	4630      	mov	r0, r6
 800fca4:	9901      	ldr	r1, [sp, #4]
 800fca6:	f7fc fecf 	bl	800ca48 <ucdr_advance_buffer>
 800fcaa:	4628      	mov	r0, r5
 800fcac:	b003      	add	sp, #12
 800fcae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fcb0 <_SetBool_Response__cdr_serialize>:
 800fcb0:	b1e0      	cbz	r0, 800fcec <_SetBool_Response__cdr_serialize+0x3c>
 800fcb2:	b570      	push	{r4, r5, r6, lr}
 800fcb4:	460d      	mov	r5, r1
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	7801      	ldrb	r1, [r0, #0]
 800fcba:	4628      	mov	r0, r5
 800fcbc:	f7fb fb64 	bl	800b388 <ucdr_serialize_bool>
 800fcc0:	6866      	ldr	r6, [r4, #4]
 800fcc2:	b156      	cbz	r6, 800fcda <_SetBool_Response__cdr_serialize+0x2a>
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	f7f0 fab5 	bl	8000234 <strlen>
 800fcca:	4631      	mov	r1, r6
 800fccc:	60a0      	str	r0, [r4, #8]
 800fcce:	1c42      	adds	r2, r0, #1
 800fcd0:	4628      	mov	r0, r5
 800fcd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcd6:	f000 bb9f 	b.w	8010418 <ucdr_serialize_sequence_char>
 800fcda:	4630      	mov	r0, r6
 800fcdc:	60a0      	str	r0, [r4, #8]
 800fcde:	4632      	mov	r2, r6
 800fce0:	4631      	mov	r1, r6
 800fce2:	4628      	mov	r0, r5
 800fce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fce8:	f000 bb96 	b.w	8010418 <ucdr_serialize_sequence_char>
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop

0800fcf0 <_SetBool_Request__get_serialized_size>:
 800fcf0:	b130      	cbz	r0, 800fd00 <_SetBool_Request__get_serialized_size+0x10>
 800fcf2:	b508      	push	{r3, lr}
 800fcf4:	2101      	movs	r1, #1
 800fcf6:	2000      	movs	r0, #0
 800fcf8:	f7fc fe5a 	bl	800c9b0 <ucdr_alignment>
 800fcfc:	3001      	adds	r0, #1
 800fcfe:	bd08      	pop	{r3, pc}
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop

0800fd04 <_SetBool_Response__max_serialized_size>:
 800fd04:	b508      	push	{r3, lr}
 800fd06:	2101      	movs	r1, #1
 800fd08:	2000      	movs	r0, #0
 800fd0a:	f7fc fe51 	bl	800c9b0 <ucdr_alignment>
 800fd0e:	3001      	adds	r0, #1
 800fd10:	bd08      	pop	{r3, pc}
 800fd12:	bf00      	nop

0800fd14 <_SetBool_Response__get_serialized_size>:
 800fd14:	b538      	push	{r3, r4, r5, lr}
 800fd16:	4604      	mov	r4, r0
 800fd18:	b160      	cbz	r0, 800fd34 <_SetBool_Response__get_serialized_size+0x20>
 800fd1a:	2101      	movs	r1, #1
 800fd1c:	2000      	movs	r0, #0
 800fd1e:	f7fc fe47 	bl	800c9b0 <ucdr_alignment>
 800fd22:	1c45      	adds	r5, r0, #1
 800fd24:	2104      	movs	r1, #4
 800fd26:	4628      	mov	r0, r5
 800fd28:	f7fc fe42 	bl	800c9b0 <ucdr_alignment>
 800fd2c:	68a3      	ldr	r3, [r4, #8]
 800fd2e:	3305      	adds	r3, #5
 800fd30:	4418      	add	r0, r3
 800fd32:	4428      	add	r0, r5
 800fd34:	bd38      	pop	{r3, r4, r5, pc}
 800fd36:	bf00      	nop

0800fd38 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800fd38:	4800      	ldr	r0, [pc, #0]	@ (800fd3c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 800fd3a:	4770      	bx	lr
 800fd3c:	20000788 	.word	0x20000788

0800fd40 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800fd40:	f008 b972 	b.w	8018028 <builtin_interfaces__msg__Time__init>

0800fd44 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800fd44:	f008 b974 	b.w	8018030 <builtin_interfaces__msg__Time__fini>

0800fd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fd48:	4b04      	ldr	r3, [pc, #16]	@ (800fd5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	b10a      	cbz	r2, 800fd52 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800fd4e:	4803      	ldr	r0, [pc, #12]	@ (800fd5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fd50:	4770      	bx	lr
 800fd52:	4a03      	ldr	r2, [pc, #12]	@ (800fd60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800fd54:	4801      	ldr	r0, [pc, #4]	@ (800fd5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fd56:	6812      	ldr	r2, [r2, #0]
 800fd58:	601a      	str	r2, [r3, #0]
 800fd5a:	4770      	bx	lr
 800fd5c:	2000085c 	.word	0x2000085c
 800fd60:	200003b8 	.word	0x200003b8

0800fd64 <get_serialized_size_builtin_interfaces__msg__Time>:
 800fd64:	b180      	cbz	r0, 800fd88 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800fd66:	b538      	push	{r3, r4, r5, lr}
 800fd68:	460d      	mov	r5, r1
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	2104      	movs	r1, #4
 800fd6e:	f7fc fe1f 	bl	800c9b0 <ucdr_alignment>
 800fd72:	1d2b      	adds	r3, r5, #4
 800fd74:	181c      	adds	r4, r3, r0
 800fd76:	2104      	movs	r1, #4
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f7fc fe19 	bl	800c9b0 <ucdr_alignment>
 800fd7e:	f1c5 0504 	rsb	r5, r5, #4
 800fd82:	4428      	add	r0, r5
 800fd84:	4420      	add	r0, r4
 800fd86:	bd38      	pop	{r3, r4, r5, pc}
 800fd88:	4770      	bx	lr
 800fd8a:	bf00      	nop

0800fd8c <_Time__cdr_deserialize>:
 800fd8c:	b538      	push	{r3, r4, r5, lr}
 800fd8e:	460c      	mov	r4, r1
 800fd90:	b141      	cbz	r1, 800fda4 <_Time__cdr_deserialize+0x18>
 800fd92:	4605      	mov	r5, r0
 800fd94:	f7fc f9ee 	bl	800c174 <ucdr_deserialize_int32_t>
 800fd98:	1d21      	adds	r1, r4, #4
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fda0:	f7fb be66 	b.w	800ba70 <ucdr_deserialize_uint32_t>
 800fda4:	4608      	mov	r0, r1
 800fda6:	bd38      	pop	{r3, r4, r5, pc}

0800fda8 <_Time__cdr_serialize>:
 800fda8:	b160      	cbz	r0, 800fdc4 <_Time__cdr_serialize+0x1c>
 800fdaa:	b538      	push	{r3, r4, r5, lr}
 800fdac:	460d      	mov	r5, r1
 800fdae:	4604      	mov	r4, r0
 800fdb0:	6801      	ldr	r1, [r0, #0]
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	f7fc f946 	bl	800c044 <ucdr_serialize_int32_t>
 800fdb8:	6861      	ldr	r1, [r4, #4]
 800fdba:	4628      	mov	r0, r5
 800fdbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdc0:	f7fb bd26 	b.w	800b810 <ucdr_serialize_uint32_t>
 800fdc4:	4770      	bx	lr
 800fdc6:	bf00      	nop

0800fdc8 <_Time__get_serialized_size>:
 800fdc8:	b160      	cbz	r0, 800fde4 <_Time__get_serialized_size+0x1c>
 800fdca:	b510      	push	{r4, lr}
 800fdcc:	2104      	movs	r1, #4
 800fdce:	2000      	movs	r0, #0
 800fdd0:	f7fc fdee 	bl	800c9b0 <ucdr_alignment>
 800fdd4:	1d04      	adds	r4, r0, #4
 800fdd6:	2104      	movs	r1, #4
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f7fc fde9 	bl	800c9b0 <ucdr_alignment>
 800fdde:	3004      	adds	r0, #4
 800fde0:	4420      	add	r0, r4
 800fde2:	bd10      	pop	{r4, pc}
 800fde4:	4770      	bx	lr
 800fde6:	bf00      	nop

0800fde8 <_Time__max_serialized_size>:
 800fde8:	b510      	push	{r4, lr}
 800fdea:	2104      	movs	r1, #4
 800fdec:	2000      	movs	r0, #0
 800fdee:	f7fc fddf 	bl	800c9b0 <ucdr_alignment>
 800fdf2:	1d04      	adds	r4, r0, #4
 800fdf4:	2104      	movs	r1, #4
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f7fc fdda 	bl	800c9b0 <ucdr_alignment>
 800fdfc:	3004      	adds	r0, #4
 800fdfe:	4420      	add	r0, r4
 800fe00:	bd10      	pop	{r4, pc}
 800fe02:	bf00      	nop

0800fe04 <max_serialized_size_builtin_interfaces__msg__Time>:
 800fe04:	b538      	push	{r3, r4, r5, lr}
 800fe06:	460c      	mov	r4, r1
 800fe08:	2301      	movs	r3, #1
 800fe0a:	7003      	strb	r3, [r0, #0]
 800fe0c:	2104      	movs	r1, #4
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f7fc fdce 	bl	800c9b0 <ucdr_alignment>
 800fe14:	1d25      	adds	r5, r4, #4
 800fe16:	4405      	add	r5, r0
 800fe18:	2104      	movs	r1, #4
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	f7fc fdc8 	bl	800c9b0 <ucdr_alignment>
 800fe20:	f1c4 0404 	rsb	r4, r4, #4
 800fe24:	4420      	add	r0, r4
 800fe26:	4428      	add	r0, r5
 800fe28:	bd38      	pop	{r3, r4, r5, pc}
 800fe2a:	bf00      	nop

0800fe2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fe2c:	4800      	ldr	r0, [pc, #0]	@ (800fe30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800fe2e:	4770      	bx	lr
 800fe30:	20000868 	.word	0x20000868

0800fe34 <geometry_msgs__msg__Twist__init>:
 800fe34:	b570      	push	{r4, r5, r6, lr}
 800fe36:	4605      	mov	r5, r0
 800fe38:	b1a8      	cbz	r0, 800fe66 <geometry_msgs__msg__Twist__init+0x32>
 800fe3a:	f000 f82b 	bl	800fe94 <geometry_msgs__msg__Vector3__init>
 800fe3e:	4604      	mov	r4, r0
 800fe40:	b140      	cbz	r0, 800fe54 <geometry_msgs__msg__Twist__init+0x20>
 800fe42:	f105 0618 	add.w	r6, r5, #24
 800fe46:	4630      	mov	r0, r6
 800fe48:	f000 f824 	bl	800fe94 <geometry_msgs__msg__Vector3__init>
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	b168      	cbz	r0, 800fe6c <geometry_msgs__msg__Twist__init+0x38>
 800fe50:	4620      	mov	r0, r4
 800fe52:	bd70      	pop	{r4, r5, r6, pc}
 800fe54:	4628      	mov	r0, r5
 800fe56:	f000 f821 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 800fe5a:	f105 0018 	add.w	r0, r5, #24
 800fe5e:	f000 f81d 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 800fe62:	4620      	mov	r0, r4
 800fe64:	bd70      	pop	{r4, r5, r6, pc}
 800fe66:	4604      	mov	r4, r0
 800fe68:	4620      	mov	r0, r4
 800fe6a:	bd70      	pop	{r4, r5, r6, pc}
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	f000 f815 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 800fe72:	4630      	mov	r0, r6
 800fe74:	f000 f812 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 800fe78:	e7ea      	b.n	800fe50 <geometry_msgs__msg__Twist__init+0x1c>
 800fe7a:	bf00      	nop

0800fe7c <geometry_msgs__msg__Twist__fini>:
 800fe7c:	b148      	cbz	r0, 800fe92 <geometry_msgs__msg__Twist__fini+0x16>
 800fe7e:	b510      	push	{r4, lr}
 800fe80:	4604      	mov	r4, r0
 800fe82:	f000 f80b 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 800fe86:	f104 0018 	add.w	r0, r4, #24
 800fe8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe8e:	f000 b805 	b.w	800fe9c <geometry_msgs__msg__Vector3__fini>
 800fe92:	4770      	bx	lr

0800fe94 <geometry_msgs__msg__Vector3__init>:
 800fe94:	3800      	subs	r0, #0
 800fe96:	bf18      	it	ne
 800fe98:	2001      	movne	r0, #1
 800fe9a:	4770      	bx	lr

0800fe9c <geometry_msgs__msg__Vector3__fini>:
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop

0800fea0 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800fea0:	f008 b8ca 	b.w	8018038 <geometry_msgs__msg__Quaternion__init>

0800fea4 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800fea4:	f008 b8dc 	b.w	8018060 <geometry_msgs__msg__Quaternion__fini>

0800fea8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800fea8:	4b04      	ldr	r3, [pc, #16]	@ (800febc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	b10a      	cbz	r2, 800feb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800feae:	4803      	ldr	r0, [pc, #12]	@ (800febc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800feb0:	4770      	bx	lr
 800feb2:	4a03      	ldr	r2, [pc, #12]	@ (800fec0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800feb4:	4801      	ldr	r0, [pc, #4]	@ (800febc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800feb6:	6812      	ldr	r2, [r2, #0]
 800feb8:	601a      	str	r2, [r3, #0]
 800feba:	4770      	bx	lr
 800febc:	20000980 	.word	0x20000980
 800fec0:	200003b8 	.word	0x200003b8

0800fec4 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800fec4:	b1f0      	cbz	r0, 800ff04 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800fec6:	b570      	push	{r4, r5, r6, lr}
 800fec8:	460d      	mov	r5, r1
 800feca:	4628      	mov	r0, r5
 800fecc:	2108      	movs	r1, #8
 800fece:	f7fc fd6f 	bl	800c9b0 <ucdr_alignment>
 800fed2:	f105 0308 	add.w	r3, r5, #8
 800fed6:	181e      	adds	r6, r3, r0
 800fed8:	2108      	movs	r1, #8
 800feda:	4630      	mov	r0, r6
 800fedc:	f7fc fd68 	bl	800c9b0 <ucdr_alignment>
 800fee0:	f100 0408 	add.w	r4, r0, #8
 800fee4:	4434      	add	r4, r6
 800fee6:	2108      	movs	r1, #8
 800fee8:	4620      	mov	r0, r4
 800feea:	f7fc fd61 	bl	800c9b0 <ucdr_alignment>
 800feee:	3008      	adds	r0, #8
 800fef0:	4404      	add	r4, r0
 800fef2:	2108      	movs	r1, #8
 800fef4:	4620      	mov	r0, r4
 800fef6:	f7fc fd5b 	bl	800c9b0 <ucdr_alignment>
 800fefa:	f1c5 0508 	rsb	r5, r5, #8
 800fefe:	4428      	add	r0, r5
 800ff00:	4420      	add	r0, r4
 800ff02:	bd70      	pop	{r4, r5, r6, pc}
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop

0800ff08 <_Quaternion__cdr_deserialize>:
 800ff08:	b538      	push	{r3, r4, r5, lr}
 800ff0a:	460c      	mov	r4, r1
 800ff0c:	b199      	cbz	r1, 800ff36 <_Quaternion__cdr_deserialize+0x2e>
 800ff0e:	4605      	mov	r5, r0
 800ff10:	f7fc fb62 	bl	800c5d8 <ucdr_deserialize_double>
 800ff14:	f104 0108 	add.w	r1, r4, #8
 800ff18:	4628      	mov	r0, r5
 800ff1a:	f7fc fb5d 	bl	800c5d8 <ucdr_deserialize_double>
 800ff1e:	f104 0110 	add.w	r1, r4, #16
 800ff22:	4628      	mov	r0, r5
 800ff24:	f7fc fb58 	bl	800c5d8 <ucdr_deserialize_double>
 800ff28:	f104 0118 	add.w	r1, r4, #24
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff32:	f7fc bb51 	b.w	800c5d8 <ucdr_deserialize_double>
 800ff36:	4608      	mov	r0, r1
 800ff38:	bd38      	pop	{r3, r4, r5, pc}
 800ff3a:	bf00      	nop

0800ff3c <_Quaternion__cdr_serialize>:
 800ff3c:	b1c0      	cbz	r0, 800ff70 <_Quaternion__cdr_serialize+0x34>
 800ff3e:	b538      	push	{r3, r4, r5, lr}
 800ff40:	ed90 0b00 	vldr	d0, [r0]
 800ff44:	460d      	mov	r5, r1
 800ff46:	4604      	mov	r4, r0
 800ff48:	4608      	mov	r0, r1
 800ff4a:	f7fc f9a3 	bl	800c294 <ucdr_serialize_double>
 800ff4e:	ed94 0b02 	vldr	d0, [r4, #8]
 800ff52:	4628      	mov	r0, r5
 800ff54:	f7fc f99e 	bl	800c294 <ucdr_serialize_double>
 800ff58:	ed94 0b04 	vldr	d0, [r4, #16]
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	f7fc f999 	bl	800c294 <ucdr_serialize_double>
 800ff62:	ed94 0b06 	vldr	d0, [r4, #24]
 800ff66:	4628      	mov	r0, r5
 800ff68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff6c:	f7fc b992 	b.w	800c294 <ucdr_serialize_double>
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop

0800ff74 <_Quaternion__get_serialized_size>:
 800ff74:	b1d0      	cbz	r0, 800ffac <_Quaternion__get_serialized_size+0x38>
 800ff76:	b538      	push	{r3, r4, r5, lr}
 800ff78:	2108      	movs	r1, #8
 800ff7a:	2000      	movs	r0, #0
 800ff7c:	f7fc fd18 	bl	800c9b0 <ucdr_alignment>
 800ff80:	f100 0508 	add.w	r5, r0, #8
 800ff84:	2108      	movs	r1, #8
 800ff86:	4628      	mov	r0, r5
 800ff88:	f7fc fd12 	bl	800c9b0 <ucdr_alignment>
 800ff8c:	f100 0408 	add.w	r4, r0, #8
 800ff90:	442c      	add	r4, r5
 800ff92:	2108      	movs	r1, #8
 800ff94:	4620      	mov	r0, r4
 800ff96:	f7fc fd0b 	bl	800c9b0 <ucdr_alignment>
 800ff9a:	3008      	adds	r0, #8
 800ff9c:	4404      	add	r4, r0
 800ff9e:	2108      	movs	r1, #8
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f7fc fd05 	bl	800c9b0 <ucdr_alignment>
 800ffa6:	3008      	adds	r0, #8
 800ffa8:	4420      	add	r0, r4
 800ffaa:	bd38      	pop	{r3, r4, r5, pc}
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop

0800ffb0 <_Quaternion__max_serialized_size>:
 800ffb0:	b538      	push	{r3, r4, r5, lr}
 800ffb2:	2108      	movs	r1, #8
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	f7fc fcfb 	bl	800c9b0 <ucdr_alignment>
 800ffba:	f100 0508 	add.w	r5, r0, #8
 800ffbe:	2108      	movs	r1, #8
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	f7fc fcf5 	bl	800c9b0 <ucdr_alignment>
 800ffc6:	f100 0408 	add.w	r4, r0, #8
 800ffca:	442c      	add	r4, r5
 800ffcc:	2108      	movs	r1, #8
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f7fc fcee 	bl	800c9b0 <ucdr_alignment>
 800ffd4:	3008      	adds	r0, #8
 800ffd6:	4404      	add	r4, r0
 800ffd8:	2108      	movs	r1, #8
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f7fc fce8 	bl	800c9b0 <ucdr_alignment>
 800ffe0:	3008      	adds	r0, #8
 800ffe2:	4420      	add	r0, r4
 800ffe4:	bd38      	pop	{r3, r4, r5, pc}
 800ffe6:	bf00      	nop

0800ffe8 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800ffe8:	b570      	push	{r4, r5, r6, lr}
 800ffea:	2301      	movs	r3, #1
 800ffec:	460c      	mov	r4, r1
 800ffee:	7003      	strb	r3, [r0, #0]
 800fff0:	2108      	movs	r1, #8
 800fff2:	4620      	mov	r0, r4
 800fff4:	f7fc fcdc 	bl	800c9b0 <ucdr_alignment>
 800fff8:	f104 0508 	add.w	r5, r4, #8
 800fffc:	1946      	adds	r6, r0, r5
 800fffe:	2108      	movs	r1, #8
 8010000:	4630      	mov	r0, r6
 8010002:	f7fc fcd5 	bl	800c9b0 <ucdr_alignment>
 8010006:	f100 0508 	add.w	r5, r0, #8
 801000a:	4435      	add	r5, r6
 801000c:	2108      	movs	r1, #8
 801000e:	4628      	mov	r0, r5
 8010010:	f7fc fcce 	bl	800c9b0 <ucdr_alignment>
 8010014:	3008      	adds	r0, #8
 8010016:	4405      	add	r5, r0
 8010018:	2108      	movs	r1, #8
 801001a:	4628      	mov	r0, r5
 801001c:	f7fc fcc8 	bl	800c9b0 <ucdr_alignment>
 8010020:	f1c4 0408 	rsb	r4, r4, #8
 8010024:	4420      	add	r0, r4
 8010026:	4428      	add	r0, r5
 8010028:	bd70      	pop	{r4, r5, r6, pc}
 801002a:	bf00      	nop

0801002c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 801002c:	4800      	ldr	r0, [pc, #0]	@ (8010030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 801002e:	4770      	bx	lr
 8010030:	2000098c 	.word	0x2000098c

08010034 <imu_interfaces__srv__ImuCalibration_Request__init>:
 8010034:	b538      	push	{r3, r4, r5, lr}
 8010036:	4604      	mov	r4, r0
 8010038:	b128      	cbz	r0, 8010046 <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 801003a:	f007 ff3d 	bl	8017eb8 <sensor_msgs__msg__Imu__init>
 801003e:	4605      	mov	r5, r0
 8010040:	b120      	cbz	r0, 801004c <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 8010042:	4628      	mov	r0, r5
 8010044:	bd38      	pop	{r3, r4, r5, pc}
 8010046:	4605      	mov	r5, r0
 8010048:	4628      	mov	r0, r5
 801004a:	bd38      	pop	{r3, r4, r5, pc}
 801004c:	4620      	mov	r0, r4
 801004e:	f007 ff89 	bl	8017f64 <sensor_msgs__msg__Imu__fini>
 8010052:	4628      	mov	r0, r5
 8010054:	bd38      	pop	{r3, r4, r5, pc}
 8010056:	bf00      	nop

08010058 <imu_interfaces__srv__ImuCalibration_Request__fini>:
 8010058:	b108      	cbz	r0, 801005e <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 801005a:	f007 bf83 	b.w	8017f64 <sensor_msgs__msg__Imu__fini>
 801005e:	4770      	bx	lr

08010060 <imu_interfaces__srv__ImuCalibration_Response__init>:
 8010060:	3800      	subs	r0, #0
 8010062:	bf18      	it	ne
 8010064:	2001      	movne	r0, #1
 8010066:	4770      	bx	lr

08010068 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop

0801006c <ucdr_serialize_endian_array_char>:
 801006c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010070:	4619      	mov	r1, r3
 8010072:	461f      	mov	r7, r3
 8010074:	4605      	mov	r5, r0
 8010076:	4690      	mov	r8, r2
 8010078:	f7fc fc42 	bl	800c900 <ucdr_check_buffer_available_for>
 801007c:	b9e0      	cbnz	r0, 80100b8 <ucdr_serialize_endian_array_char+0x4c>
 801007e:	463e      	mov	r6, r7
 8010080:	e009      	b.n	8010096 <ucdr_serialize_endian_array_char+0x2a>
 8010082:	68a8      	ldr	r0, [r5, #8]
 8010084:	f009 ff2f 	bl	8019ee6 <memcpy>
 8010088:	68ab      	ldr	r3, [r5, #8]
 801008a:	6928      	ldr	r0, [r5, #16]
 801008c:	4423      	add	r3, r4
 801008e:	4420      	add	r0, r4
 8010090:	1b36      	subs	r6, r6, r4
 8010092:	60ab      	str	r3, [r5, #8]
 8010094:	6128      	str	r0, [r5, #16]
 8010096:	4631      	mov	r1, r6
 8010098:	2201      	movs	r2, #1
 801009a:	4628      	mov	r0, r5
 801009c:	f7fc fcb8 	bl	800ca10 <ucdr_check_final_buffer_behavior_array>
 80100a0:	1bb9      	subs	r1, r7, r6
 80100a2:	4441      	add	r1, r8
 80100a4:	4604      	mov	r4, r0
 80100a6:	4602      	mov	r2, r0
 80100a8:	2800      	cmp	r0, #0
 80100aa:	d1ea      	bne.n	8010082 <ucdr_serialize_endian_array_char+0x16>
 80100ac:	2301      	movs	r3, #1
 80100ae:	7da8      	ldrb	r0, [r5, #22]
 80100b0:	756b      	strb	r3, [r5, #21]
 80100b2:	4058      	eors	r0, r3
 80100b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b8:	463a      	mov	r2, r7
 80100ba:	68a8      	ldr	r0, [r5, #8]
 80100bc:	4641      	mov	r1, r8
 80100be:	f009 ff12 	bl	8019ee6 <memcpy>
 80100c2:	68aa      	ldr	r2, [r5, #8]
 80100c4:	692b      	ldr	r3, [r5, #16]
 80100c6:	443a      	add	r2, r7
 80100c8:	443b      	add	r3, r7
 80100ca:	60aa      	str	r2, [r5, #8]
 80100cc:	612b      	str	r3, [r5, #16]
 80100ce:	e7ed      	b.n	80100ac <ucdr_serialize_endian_array_char+0x40>

080100d0 <ucdr_deserialize_endian_array_char>:
 80100d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d4:	4619      	mov	r1, r3
 80100d6:	461f      	mov	r7, r3
 80100d8:	4605      	mov	r5, r0
 80100da:	4690      	mov	r8, r2
 80100dc:	f7fc fc10 	bl	800c900 <ucdr_check_buffer_available_for>
 80100e0:	b9e0      	cbnz	r0, 801011c <ucdr_deserialize_endian_array_char+0x4c>
 80100e2:	463e      	mov	r6, r7
 80100e4:	e009      	b.n	80100fa <ucdr_deserialize_endian_array_char+0x2a>
 80100e6:	68a9      	ldr	r1, [r5, #8]
 80100e8:	f009 fefd 	bl	8019ee6 <memcpy>
 80100ec:	68ab      	ldr	r3, [r5, #8]
 80100ee:	6928      	ldr	r0, [r5, #16]
 80100f0:	4423      	add	r3, r4
 80100f2:	4420      	add	r0, r4
 80100f4:	1b36      	subs	r6, r6, r4
 80100f6:	60ab      	str	r3, [r5, #8]
 80100f8:	6128      	str	r0, [r5, #16]
 80100fa:	2201      	movs	r2, #1
 80100fc:	4631      	mov	r1, r6
 80100fe:	4628      	mov	r0, r5
 8010100:	f7fc fc86 	bl	800ca10 <ucdr_check_final_buffer_behavior_array>
 8010104:	4604      	mov	r4, r0
 8010106:	1bb8      	subs	r0, r7, r6
 8010108:	4440      	add	r0, r8
 801010a:	4622      	mov	r2, r4
 801010c:	2c00      	cmp	r4, #0
 801010e:	d1ea      	bne.n	80100e6 <ucdr_deserialize_endian_array_char+0x16>
 8010110:	2301      	movs	r3, #1
 8010112:	7da8      	ldrb	r0, [r5, #22]
 8010114:	756b      	strb	r3, [r5, #21]
 8010116:	4058      	eors	r0, r3
 8010118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801011c:	463a      	mov	r2, r7
 801011e:	68a9      	ldr	r1, [r5, #8]
 8010120:	4640      	mov	r0, r8
 8010122:	f009 fee0 	bl	8019ee6 <memcpy>
 8010126:	68aa      	ldr	r2, [r5, #8]
 8010128:	692b      	ldr	r3, [r5, #16]
 801012a:	443a      	add	r2, r7
 801012c:	443b      	add	r3, r7
 801012e:	60aa      	str	r2, [r5, #8]
 8010130:	612b      	str	r3, [r5, #16]
 8010132:	e7ed      	b.n	8010110 <ucdr_deserialize_endian_array_char+0x40>

08010134 <ucdr_serialize_array_uint8_t>:
 8010134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010138:	4688      	mov	r8, r1
 801013a:	4611      	mov	r1, r2
 801013c:	4617      	mov	r7, r2
 801013e:	4605      	mov	r5, r0
 8010140:	f7fc fbde 	bl	800c900 <ucdr_check_buffer_available_for>
 8010144:	b9e0      	cbnz	r0, 8010180 <ucdr_serialize_array_uint8_t+0x4c>
 8010146:	463e      	mov	r6, r7
 8010148:	e009      	b.n	801015e <ucdr_serialize_array_uint8_t+0x2a>
 801014a:	68a8      	ldr	r0, [r5, #8]
 801014c:	f009 fecb 	bl	8019ee6 <memcpy>
 8010150:	68aa      	ldr	r2, [r5, #8]
 8010152:	692b      	ldr	r3, [r5, #16]
 8010154:	4422      	add	r2, r4
 8010156:	4423      	add	r3, r4
 8010158:	1b36      	subs	r6, r6, r4
 801015a:	60aa      	str	r2, [r5, #8]
 801015c:	612b      	str	r3, [r5, #16]
 801015e:	4631      	mov	r1, r6
 8010160:	2201      	movs	r2, #1
 8010162:	4628      	mov	r0, r5
 8010164:	f7fc fc54 	bl	800ca10 <ucdr_check_final_buffer_behavior_array>
 8010168:	1bb9      	subs	r1, r7, r6
 801016a:	4441      	add	r1, r8
 801016c:	4604      	mov	r4, r0
 801016e:	4602      	mov	r2, r0
 8010170:	2800      	cmp	r0, #0
 8010172:	d1ea      	bne.n	801014a <ucdr_serialize_array_uint8_t+0x16>
 8010174:	2301      	movs	r3, #1
 8010176:	7da8      	ldrb	r0, [r5, #22]
 8010178:	756b      	strb	r3, [r5, #21]
 801017a:	4058      	eors	r0, r3
 801017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010180:	463a      	mov	r2, r7
 8010182:	68a8      	ldr	r0, [r5, #8]
 8010184:	4641      	mov	r1, r8
 8010186:	f009 feae 	bl	8019ee6 <memcpy>
 801018a:	68aa      	ldr	r2, [r5, #8]
 801018c:	692b      	ldr	r3, [r5, #16]
 801018e:	443a      	add	r2, r7
 8010190:	443b      	add	r3, r7
 8010192:	60aa      	str	r2, [r5, #8]
 8010194:	612b      	str	r3, [r5, #16]
 8010196:	e7ed      	b.n	8010174 <ucdr_serialize_array_uint8_t+0x40>

08010198 <ucdr_serialize_endian_array_uint8_t>:
 8010198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801019c:	4619      	mov	r1, r3
 801019e:	461f      	mov	r7, r3
 80101a0:	4605      	mov	r5, r0
 80101a2:	4690      	mov	r8, r2
 80101a4:	f7fc fbac 	bl	800c900 <ucdr_check_buffer_available_for>
 80101a8:	b9e0      	cbnz	r0, 80101e4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80101aa:	463e      	mov	r6, r7
 80101ac:	e009      	b.n	80101c2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80101ae:	68a8      	ldr	r0, [r5, #8]
 80101b0:	f009 fe99 	bl	8019ee6 <memcpy>
 80101b4:	68ab      	ldr	r3, [r5, #8]
 80101b6:	6928      	ldr	r0, [r5, #16]
 80101b8:	4423      	add	r3, r4
 80101ba:	4420      	add	r0, r4
 80101bc:	1b36      	subs	r6, r6, r4
 80101be:	60ab      	str	r3, [r5, #8]
 80101c0:	6128      	str	r0, [r5, #16]
 80101c2:	4631      	mov	r1, r6
 80101c4:	2201      	movs	r2, #1
 80101c6:	4628      	mov	r0, r5
 80101c8:	f7fc fc22 	bl	800ca10 <ucdr_check_final_buffer_behavior_array>
 80101cc:	1bb9      	subs	r1, r7, r6
 80101ce:	4441      	add	r1, r8
 80101d0:	4604      	mov	r4, r0
 80101d2:	4602      	mov	r2, r0
 80101d4:	2800      	cmp	r0, #0
 80101d6:	d1ea      	bne.n	80101ae <ucdr_serialize_endian_array_uint8_t+0x16>
 80101d8:	2301      	movs	r3, #1
 80101da:	7da8      	ldrb	r0, [r5, #22]
 80101dc:	756b      	strb	r3, [r5, #21]
 80101de:	4058      	eors	r0, r3
 80101e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101e4:	463a      	mov	r2, r7
 80101e6:	68a8      	ldr	r0, [r5, #8]
 80101e8:	4641      	mov	r1, r8
 80101ea:	f009 fe7c 	bl	8019ee6 <memcpy>
 80101ee:	68aa      	ldr	r2, [r5, #8]
 80101f0:	692b      	ldr	r3, [r5, #16]
 80101f2:	443a      	add	r2, r7
 80101f4:	443b      	add	r3, r7
 80101f6:	60aa      	str	r2, [r5, #8]
 80101f8:	612b      	str	r3, [r5, #16]
 80101fa:	e7ed      	b.n	80101d8 <ucdr_serialize_endian_array_uint8_t+0x40>

080101fc <ucdr_deserialize_array_uint8_t>:
 80101fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010200:	4688      	mov	r8, r1
 8010202:	4611      	mov	r1, r2
 8010204:	4617      	mov	r7, r2
 8010206:	4605      	mov	r5, r0
 8010208:	f7fc fb7a 	bl	800c900 <ucdr_check_buffer_available_for>
 801020c:	b9e0      	cbnz	r0, 8010248 <ucdr_deserialize_array_uint8_t+0x4c>
 801020e:	463e      	mov	r6, r7
 8010210:	e009      	b.n	8010226 <ucdr_deserialize_array_uint8_t+0x2a>
 8010212:	68a9      	ldr	r1, [r5, #8]
 8010214:	f009 fe67 	bl	8019ee6 <memcpy>
 8010218:	68aa      	ldr	r2, [r5, #8]
 801021a:	692b      	ldr	r3, [r5, #16]
 801021c:	4422      	add	r2, r4
 801021e:	4423      	add	r3, r4
 8010220:	1b36      	subs	r6, r6, r4
 8010222:	60aa      	str	r2, [r5, #8]
 8010224:	612b      	str	r3, [r5, #16]
 8010226:	2201      	movs	r2, #1
 8010228:	4631      	mov	r1, r6
 801022a:	4628      	mov	r0, r5
 801022c:	f7fc fbf0 	bl	800ca10 <ucdr_check_final_buffer_behavior_array>
 8010230:	4604      	mov	r4, r0
 8010232:	1bb8      	subs	r0, r7, r6
 8010234:	4440      	add	r0, r8
 8010236:	4622      	mov	r2, r4
 8010238:	2c00      	cmp	r4, #0
 801023a:	d1ea      	bne.n	8010212 <ucdr_deserialize_array_uint8_t+0x16>
 801023c:	2301      	movs	r3, #1
 801023e:	7da8      	ldrb	r0, [r5, #22]
 8010240:	756b      	strb	r3, [r5, #21]
 8010242:	4058      	eors	r0, r3
 8010244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010248:	463a      	mov	r2, r7
 801024a:	68a9      	ldr	r1, [r5, #8]
 801024c:	4640      	mov	r0, r8
 801024e:	f009 fe4a 	bl	8019ee6 <memcpy>
 8010252:	68aa      	ldr	r2, [r5, #8]
 8010254:	692b      	ldr	r3, [r5, #16]
 8010256:	443a      	add	r2, r7
 8010258:	443b      	add	r3, r7
 801025a:	60aa      	str	r2, [r5, #8]
 801025c:	612b      	str	r3, [r5, #16]
 801025e:	e7ed      	b.n	801023c <ucdr_deserialize_array_uint8_t+0x40>

08010260 <ucdr_deserialize_endian_array_uint8_t>:
 8010260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010264:	4619      	mov	r1, r3
 8010266:	461f      	mov	r7, r3
 8010268:	4605      	mov	r5, r0
 801026a:	4690      	mov	r8, r2
 801026c:	f7fc fb48 	bl	800c900 <ucdr_check_buffer_available_for>
 8010270:	b9e0      	cbnz	r0, 80102ac <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8010272:	463e      	mov	r6, r7
 8010274:	e009      	b.n	801028a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8010276:	68a9      	ldr	r1, [r5, #8]
 8010278:	f009 fe35 	bl	8019ee6 <memcpy>
 801027c:	68ab      	ldr	r3, [r5, #8]
 801027e:	6928      	ldr	r0, [r5, #16]
 8010280:	4423      	add	r3, r4
 8010282:	4420      	add	r0, r4
 8010284:	1b36      	subs	r6, r6, r4
 8010286:	60ab      	str	r3, [r5, #8]
 8010288:	6128      	str	r0, [r5, #16]
 801028a:	2201      	movs	r2, #1
 801028c:	4631      	mov	r1, r6
 801028e:	4628      	mov	r0, r5
 8010290:	f7fc fbbe 	bl	800ca10 <ucdr_check_final_buffer_behavior_array>
 8010294:	4604      	mov	r4, r0
 8010296:	1bb8      	subs	r0, r7, r6
 8010298:	4440      	add	r0, r8
 801029a:	4622      	mov	r2, r4
 801029c:	2c00      	cmp	r4, #0
 801029e:	d1ea      	bne.n	8010276 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80102a0:	2301      	movs	r3, #1
 80102a2:	7da8      	ldrb	r0, [r5, #22]
 80102a4:	756b      	strb	r3, [r5, #21]
 80102a6:	4058      	eors	r0, r3
 80102a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ac:	463a      	mov	r2, r7
 80102ae:	68a9      	ldr	r1, [r5, #8]
 80102b0:	4640      	mov	r0, r8
 80102b2:	f009 fe18 	bl	8019ee6 <memcpy>
 80102b6:	68aa      	ldr	r2, [r5, #8]
 80102b8:	692b      	ldr	r3, [r5, #16]
 80102ba:	443a      	add	r2, r7
 80102bc:	443b      	add	r3, r7
 80102be:	60aa      	str	r2, [r5, #8]
 80102c0:	612b      	str	r3, [r5, #16]
 80102c2:	e7ed      	b.n	80102a0 <ucdr_deserialize_endian_array_uint8_t+0x40>

080102c4 <ucdr_serialize_array_double>:
 80102c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102c8:	460e      	mov	r6, r1
 80102ca:	2108      	movs	r1, #8
 80102cc:	4604      	mov	r4, r0
 80102ce:	4617      	mov	r7, r2
 80102d0:	f7fc fb76 	bl	800c9c0 <ucdr_buffer_alignment>
 80102d4:	4601      	mov	r1, r0
 80102d6:	4620      	mov	r0, r4
 80102d8:	7d65      	ldrb	r5, [r4, #21]
 80102da:	f7fc fbb5 	bl	800ca48 <ucdr_advance_buffer>
 80102de:	7d21      	ldrb	r1, [r4, #20]
 80102e0:	7565      	strb	r5, [r4, #21]
 80102e2:	2901      	cmp	r1, #1
 80102e4:	d010      	beq.n	8010308 <ucdr_serialize_array_double+0x44>
 80102e6:	b157      	cbz	r7, 80102fe <ucdr_serialize_array_double+0x3a>
 80102e8:	2500      	movs	r5, #0
 80102ea:	e000      	b.n	80102ee <ucdr_serialize_array_double+0x2a>
 80102ec:	7d21      	ldrb	r1, [r4, #20]
 80102ee:	ecb6 0b02 	vldmia	r6!, {d0}
 80102f2:	4620      	mov	r0, r4
 80102f4:	3501      	adds	r5, #1
 80102f6:	f7fc f89d 	bl	800c434 <ucdr_serialize_endian_double>
 80102fa:	42af      	cmp	r7, r5
 80102fc:	d1f6      	bne.n	80102ec <ucdr_serialize_array_double+0x28>
 80102fe:	7da0      	ldrb	r0, [r4, #22]
 8010300:	f080 0001 	eor.w	r0, r0, #1
 8010304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010308:	00ff      	lsls	r7, r7, #3
 801030a:	4639      	mov	r1, r7
 801030c:	4620      	mov	r0, r4
 801030e:	f7fc faf7 	bl	800c900 <ucdr_check_buffer_available_for>
 8010312:	b9f8      	cbnz	r0, 8010354 <ucdr_serialize_array_double+0x90>
 8010314:	46b8      	mov	r8, r7
 8010316:	e00a      	b.n	801032e <ucdr_serialize_array_double+0x6a>
 8010318:	68a0      	ldr	r0, [r4, #8]
 801031a:	f009 fde4 	bl	8019ee6 <memcpy>
 801031e:	68a2      	ldr	r2, [r4, #8]
 8010320:	6923      	ldr	r3, [r4, #16]
 8010322:	442a      	add	r2, r5
 8010324:	442b      	add	r3, r5
 8010326:	eba8 0805 	sub.w	r8, r8, r5
 801032a:	60a2      	str	r2, [r4, #8]
 801032c:	6123      	str	r3, [r4, #16]
 801032e:	4641      	mov	r1, r8
 8010330:	2208      	movs	r2, #8
 8010332:	4620      	mov	r0, r4
 8010334:	f7fc fb6c 	bl	800ca10 <ucdr_check_final_buffer_behavior_array>
 8010338:	eba7 0108 	sub.w	r1, r7, r8
 801033c:	4431      	add	r1, r6
 801033e:	4605      	mov	r5, r0
 8010340:	4602      	mov	r2, r0
 8010342:	2800      	cmp	r0, #0
 8010344:	d1e8      	bne.n	8010318 <ucdr_serialize_array_double+0x54>
 8010346:	7da0      	ldrb	r0, [r4, #22]
 8010348:	2308      	movs	r3, #8
 801034a:	7563      	strb	r3, [r4, #21]
 801034c:	f080 0001 	eor.w	r0, r0, #1
 8010350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010354:	463a      	mov	r2, r7
 8010356:	68a0      	ldr	r0, [r4, #8]
 8010358:	4631      	mov	r1, r6
 801035a:	f009 fdc4 	bl	8019ee6 <memcpy>
 801035e:	68a2      	ldr	r2, [r4, #8]
 8010360:	6923      	ldr	r3, [r4, #16]
 8010362:	443a      	add	r2, r7
 8010364:	441f      	add	r7, r3
 8010366:	60a2      	str	r2, [r4, #8]
 8010368:	6127      	str	r7, [r4, #16]
 801036a:	e7ec      	b.n	8010346 <ucdr_serialize_array_double+0x82>

0801036c <ucdr_deserialize_array_double>:
 801036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010370:	460e      	mov	r6, r1
 8010372:	2108      	movs	r1, #8
 8010374:	4604      	mov	r4, r0
 8010376:	4617      	mov	r7, r2
 8010378:	f7fc fb22 	bl	800c9c0 <ucdr_buffer_alignment>
 801037c:	4601      	mov	r1, r0
 801037e:	4620      	mov	r0, r4
 8010380:	7d65      	ldrb	r5, [r4, #21]
 8010382:	f7fc fb61 	bl	800ca48 <ucdr_advance_buffer>
 8010386:	7d21      	ldrb	r1, [r4, #20]
 8010388:	7565      	strb	r5, [r4, #21]
 801038a:	2901      	cmp	r1, #1
 801038c:	d011      	beq.n	80103b2 <ucdr_deserialize_array_double+0x46>
 801038e:	b15f      	cbz	r7, 80103a8 <ucdr_deserialize_array_double+0x3c>
 8010390:	2500      	movs	r5, #0
 8010392:	e000      	b.n	8010396 <ucdr_deserialize_array_double+0x2a>
 8010394:	7d21      	ldrb	r1, [r4, #20]
 8010396:	4632      	mov	r2, r6
 8010398:	4620      	mov	r0, r4
 801039a:	3501      	adds	r5, #1
 801039c:	f7fc f9e2 	bl	800c764 <ucdr_deserialize_endian_double>
 80103a0:	42af      	cmp	r7, r5
 80103a2:	f106 0608 	add.w	r6, r6, #8
 80103a6:	d1f5      	bne.n	8010394 <ucdr_deserialize_array_double+0x28>
 80103a8:	7da0      	ldrb	r0, [r4, #22]
 80103aa:	f080 0001 	eor.w	r0, r0, #1
 80103ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103b2:	00ff      	lsls	r7, r7, #3
 80103b4:	4639      	mov	r1, r7
 80103b6:	4620      	mov	r0, r4
 80103b8:	f7fc faa2 	bl	800c900 <ucdr_check_buffer_available_for>
 80103bc:	b9f8      	cbnz	r0, 80103fe <ucdr_deserialize_array_double+0x92>
 80103be:	46b8      	mov	r8, r7
 80103c0:	e00a      	b.n	80103d8 <ucdr_deserialize_array_double+0x6c>
 80103c2:	68a1      	ldr	r1, [r4, #8]
 80103c4:	f009 fd8f 	bl	8019ee6 <memcpy>
 80103c8:	68a2      	ldr	r2, [r4, #8]
 80103ca:	6923      	ldr	r3, [r4, #16]
 80103cc:	442a      	add	r2, r5
 80103ce:	442b      	add	r3, r5
 80103d0:	eba8 0805 	sub.w	r8, r8, r5
 80103d4:	60a2      	str	r2, [r4, #8]
 80103d6:	6123      	str	r3, [r4, #16]
 80103d8:	2208      	movs	r2, #8
 80103da:	4641      	mov	r1, r8
 80103dc:	4620      	mov	r0, r4
 80103de:	f7fc fb17 	bl	800ca10 <ucdr_check_final_buffer_behavior_array>
 80103e2:	4605      	mov	r5, r0
 80103e4:	eba7 0008 	sub.w	r0, r7, r8
 80103e8:	4430      	add	r0, r6
 80103ea:	462a      	mov	r2, r5
 80103ec:	2d00      	cmp	r5, #0
 80103ee:	d1e8      	bne.n	80103c2 <ucdr_deserialize_array_double+0x56>
 80103f0:	7da0      	ldrb	r0, [r4, #22]
 80103f2:	2308      	movs	r3, #8
 80103f4:	7563      	strb	r3, [r4, #21]
 80103f6:	f080 0001 	eor.w	r0, r0, #1
 80103fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103fe:	463a      	mov	r2, r7
 8010400:	68a1      	ldr	r1, [r4, #8]
 8010402:	4630      	mov	r0, r6
 8010404:	f009 fd6f 	bl	8019ee6 <memcpy>
 8010408:	68a2      	ldr	r2, [r4, #8]
 801040a:	6923      	ldr	r3, [r4, #16]
 801040c:	443a      	add	r2, r7
 801040e:	441f      	add	r7, r3
 8010410:	60a2      	str	r2, [r4, #8]
 8010412:	6127      	str	r7, [r4, #16]
 8010414:	e7ec      	b.n	80103f0 <ucdr_deserialize_array_double+0x84>
 8010416:	bf00      	nop

08010418 <ucdr_serialize_sequence_char>:
 8010418:	b570      	push	{r4, r5, r6, lr}
 801041a:	4615      	mov	r5, r2
 801041c:	460e      	mov	r6, r1
 801041e:	7d01      	ldrb	r1, [r0, #20]
 8010420:	4604      	mov	r4, r0
 8010422:	f7fb fa8d 	bl	800b940 <ucdr_serialize_endian_uint32_t>
 8010426:	b90d      	cbnz	r5, 801042c <ucdr_serialize_sequence_char+0x14>
 8010428:	2001      	movs	r0, #1
 801042a:	bd70      	pop	{r4, r5, r6, pc}
 801042c:	7d21      	ldrb	r1, [r4, #20]
 801042e:	462b      	mov	r3, r5
 8010430:	4632      	mov	r2, r6
 8010432:	4620      	mov	r0, r4
 8010434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010438:	f7ff be18 	b.w	801006c <ucdr_serialize_endian_array_char>

0801043c <ucdr_deserialize_sequence_char>:
 801043c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010440:	461d      	mov	r5, r3
 8010442:	4616      	mov	r6, r2
 8010444:	460f      	mov	r7, r1
 8010446:	461a      	mov	r2, r3
 8010448:	7d01      	ldrb	r1, [r0, #20]
 801044a:	4604      	mov	r4, r0
 801044c:	f7fb fba0 	bl	800bb90 <ucdr_deserialize_endian_uint32_t>
 8010450:	682b      	ldr	r3, [r5, #0]
 8010452:	429e      	cmp	r6, r3
 8010454:	bf3c      	itt	cc
 8010456:	2201      	movcc	r2, #1
 8010458:	75a2      	strbcc	r2, [r4, #22]
 801045a:	b913      	cbnz	r3, 8010462 <ucdr_deserialize_sequence_char+0x26>
 801045c:	2001      	movs	r0, #1
 801045e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010462:	7d21      	ldrb	r1, [r4, #20]
 8010464:	463a      	mov	r2, r7
 8010466:	4620      	mov	r0, r4
 8010468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801046c:	f7ff be30 	b.w	80100d0 <ucdr_deserialize_endian_array_char>

08010470 <ucdr_serialize_sequence_uint8_t>:
 8010470:	b570      	push	{r4, r5, r6, lr}
 8010472:	4615      	mov	r5, r2
 8010474:	460e      	mov	r6, r1
 8010476:	7d01      	ldrb	r1, [r0, #20]
 8010478:	4604      	mov	r4, r0
 801047a:	f7fb fa61 	bl	800b940 <ucdr_serialize_endian_uint32_t>
 801047e:	b90d      	cbnz	r5, 8010484 <ucdr_serialize_sequence_uint8_t+0x14>
 8010480:	2001      	movs	r0, #1
 8010482:	bd70      	pop	{r4, r5, r6, pc}
 8010484:	7d21      	ldrb	r1, [r4, #20]
 8010486:	462b      	mov	r3, r5
 8010488:	4632      	mov	r2, r6
 801048a:	4620      	mov	r0, r4
 801048c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010490:	f7ff be82 	b.w	8010198 <ucdr_serialize_endian_array_uint8_t>

08010494 <ucdr_deserialize_sequence_uint8_t>:
 8010494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010498:	461d      	mov	r5, r3
 801049a:	4616      	mov	r6, r2
 801049c:	460f      	mov	r7, r1
 801049e:	461a      	mov	r2, r3
 80104a0:	7d01      	ldrb	r1, [r0, #20]
 80104a2:	4604      	mov	r4, r0
 80104a4:	f7fb fb74 	bl	800bb90 <ucdr_deserialize_endian_uint32_t>
 80104a8:	682b      	ldr	r3, [r5, #0]
 80104aa:	429e      	cmp	r6, r3
 80104ac:	bf3c      	itt	cc
 80104ae:	2201      	movcc	r2, #1
 80104b0:	75a2      	strbcc	r2, [r4, #22]
 80104b2:	b913      	cbnz	r3, 80104ba <ucdr_deserialize_sequence_uint8_t+0x26>
 80104b4:	2001      	movs	r0, #1
 80104b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104ba:	7d21      	ldrb	r1, [r4, #20]
 80104bc:	463a      	mov	r2, r7
 80104be:	4620      	mov	r0, r4
 80104c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104c4:	f7ff becc 	b.w	8010260 <ucdr_deserialize_endian_array_uint8_t>

080104c8 <uxr_buffer_delete_entity>:
 80104c8:	b510      	push	{r4, lr}
 80104ca:	2300      	movs	r3, #0
 80104cc:	b08e      	sub	sp, #56	@ 0x38
 80104ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80104d2:	2303      	movs	r3, #3
 80104d4:	9300      	str	r3, [sp, #0]
 80104d6:	2204      	movs	r2, #4
 80104d8:	ab06      	add	r3, sp, #24
 80104da:	4604      	mov	r4, r0
 80104dc:	9103      	str	r1, [sp, #12]
 80104de:	f001 fb3d 	bl	8011b5c <uxr_prepare_stream_to_write_submessage>
 80104e2:	b918      	cbnz	r0, 80104ec <uxr_buffer_delete_entity+0x24>
 80104e4:	4604      	mov	r4, r0
 80104e6:	4620      	mov	r0, r4
 80104e8:	b00e      	add	sp, #56	@ 0x38
 80104ea:	bd10      	pop	{r4, pc}
 80104ec:	9902      	ldr	r1, [sp, #8]
 80104ee:	aa05      	add	r2, sp, #20
 80104f0:	4620      	mov	r0, r4
 80104f2:	f001 fc69 	bl	8011dc8 <uxr_init_base_object_request>
 80104f6:	a905      	add	r1, sp, #20
 80104f8:	4604      	mov	r4, r0
 80104fa:	a806      	add	r0, sp, #24
 80104fc:	f003 fa94 	bl	8013a28 <uxr_serialize_DELETE_Payload>
 8010500:	4620      	mov	r0, r4
 8010502:	b00e      	add	sp, #56	@ 0x38
 8010504:	bd10      	pop	{r4, pc}
 8010506:	bf00      	nop

08010508 <uxr_common_create_entity>:
 8010508:	b510      	push	{r4, lr}
 801050a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801050e:	b08c      	sub	sp, #48	@ 0x30
 8010510:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010514:	f1bc 0f01 	cmp.w	ip, #1
 8010518:	bf0c      	ite	eq
 801051a:	f003 0201 	andeq.w	r2, r3, #1
 801051e:	2200      	movne	r2, #0
 8010520:	330e      	adds	r3, #14
 8010522:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010526:	9101      	str	r1, [sp, #4]
 8010528:	441a      	add	r2, r3
 801052a:	2301      	movs	r3, #1
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	9903      	ldr	r1, [sp, #12]
 8010530:	ab04      	add	r3, sp, #16
 8010532:	b292      	uxth	r2, r2
 8010534:	4604      	mov	r4, r0
 8010536:	f001 fb11 	bl	8011b5c <uxr_prepare_stream_to_write_submessage>
 801053a:	b918      	cbnz	r0, 8010544 <uxr_common_create_entity+0x3c>
 801053c:	4604      	mov	r4, r0
 801053e:	4620      	mov	r0, r4
 8010540:	b00c      	add	sp, #48	@ 0x30
 8010542:	bd10      	pop	{r4, pc}
 8010544:	9902      	ldr	r1, [sp, #8]
 8010546:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010548:	4620      	mov	r0, r4
 801054a:	f001 fc3d 	bl	8011dc8 <uxr_init_base_object_request>
 801054e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010550:	4604      	mov	r4, r0
 8010552:	a804      	add	r0, sp, #16
 8010554:	f003 f9c4 	bl	80138e0 <uxr_serialize_CREATE_Payload>
 8010558:	4620      	mov	r0, r4
 801055a:	b00c      	add	sp, #48	@ 0x30
 801055c:	bd10      	pop	{r4, pc}
 801055e:	bf00      	nop

08010560 <uxr_buffer_create_participant_bin>:
 8010560:	b570      	push	{r4, r5, r6, lr}
 8010562:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010566:	ac11      	add	r4, sp, #68	@ 0x44
 8010568:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 801056c:	2303      	movs	r3, #3
 801056e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010572:	7223      	strb	r3, [r4, #8]
 8010574:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010576:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801057a:	2201      	movs	r2, #1
 801057c:	2100      	movs	r1, #0
 801057e:	4605      	mov	r5, r0
 8010580:	7122      	strb	r2, [r4, #4]
 8010582:	f88d 1014 	strb.w	r1, [sp, #20]
 8010586:	b1cb      	cbz	r3, 80105bc <uxr_buffer_create_participant_bin+0x5c>
 8010588:	f88d 201c 	strb.w	r2, [sp, #28]
 801058c:	9308      	str	r3, [sp, #32]
 801058e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010592:	a915      	add	r1, sp, #84	@ 0x54
 8010594:	a809      	add	r0, sp, #36	@ 0x24
 8010596:	f7fc fa07 	bl	800c9a8 <ucdr_init_buffer>
 801059a:	a905      	add	r1, sp, #20
 801059c:	a809      	add	r0, sp, #36	@ 0x24
 801059e:	f002 fe39 	bl	8013214 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80105a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105a4:	9600      	str	r6, [sp, #0]
 80105a6:	9401      	str	r4, [sp, #4]
 80105a8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80105ac:	60e3      	str	r3, [r4, #12]
 80105ae:	4628      	mov	r0, r5
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	f7ff ffa9 	bl	8010508 <uxr_common_create_entity>
 80105b6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	f88d 301c 	strb.w	r3, [sp, #28]
 80105c0:	e7e5      	b.n	801058e <uxr_buffer_create_participant_bin+0x2e>
 80105c2:	bf00      	nop

080105c4 <uxr_buffer_create_topic_bin>:
 80105c4:	b570      	push	{r4, r5, r6, lr}
 80105c6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80105ca:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80105ce:	9105      	str	r1, [sp, #20]
 80105d0:	4605      	mov	r5, r0
 80105d2:	a997      	add	r1, sp, #604	@ 0x25c
 80105d4:	4618      	mov	r0, r3
 80105d6:	2302      	movs	r3, #2
 80105d8:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80105dc:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80105e0:	f000 f9ea 	bl	80109b8 <uxr_object_id_to_raw>
 80105e4:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80105e6:	9306      	str	r3, [sp, #24]
 80105e8:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80105ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80105ec:	2303      	movs	r3, #3
 80105ee:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80105f2:	2301      	movs	r3, #1
 80105f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80105f8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80105fc:	a917      	add	r1, sp, #92	@ 0x5c
 80105fe:	2300      	movs	r3, #0
 8010600:	a80b      	add	r0, sp, #44	@ 0x2c
 8010602:	f88d 301c 	strb.w	r3, [sp, #28]
 8010606:	f7fc f9cf 	bl	800c9a8 <ucdr_init_buffer>
 801060a:	a906      	add	r1, sp, #24
 801060c:	a80b      	add	r0, sp, #44	@ 0x2c
 801060e:	f002 fe23 	bl	8013258 <uxr_serialize_OBJK_Topic_Binary>
 8010612:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010614:	9316      	str	r3, [sp, #88]	@ 0x58
 8010616:	ac13      	add	r4, sp, #76	@ 0x4c
 8010618:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801061c:	9600      	str	r6, [sp, #0]
 801061e:	9401      	str	r4, [sp, #4]
 8010620:	b29b      	uxth	r3, r3
 8010622:	4628      	mov	r0, r5
 8010624:	f7ff ff70 	bl	8010508 <uxr_common_create_entity>
 8010628:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801062c:	bd70      	pop	{r4, r5, r6, pc}
 801062e:	bf00      	nop

08010630 <uxr_buffer_create_publisher_bin>:
 8010630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010632:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010636:	4605      	mov	r5, r0
 8010638:	9105      	str	r1, [sp, #20]
 801063a:	4618      	mov	r0, r3
 801063c:	2603      	movs	r6, #3
 801063e:	a992      	add	r1, sp, #584	@ 0x248
 8010640:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010644:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010648:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801064c:	f000 f9b4 	bl	80109b8 <uxr_object_id_to_raw>
 8010650:	2300      	movs	r3, #0
 8010652:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010656:	a912      	add	r1, sp, #72	@ 0x48
 8010658:	a806      	add	r0, sp, #24
 801065a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801065e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010662:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010666:	f7fc f99f 	bl	800c9a8 <ucdr_init_buffer>
 801066a:	a993      	add	r1, sp, #588	@ 0x24c
 801066c:	a806      	add	r0, sp, #24
 801066e:	f002 fea7 	bl	80133c0 <uxr_serialize_OBJK_Publisher_Binary>
 8010672:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010674:	9311      	str	r3, [sp, #68]	@ 0x44
 8010676:	ac0e      	add	r4, sp, #56	@ 0x38
 8010678:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801067c:	9700      	str	r7, [sp, #0]
 801067e:	9401      	str	r4, [sp, #4]
 8010680:	b29b      	uxth	r3, r3
 8010682:	4628      	mov	r0, r5
 8010684:	f7ff ff40 	bl	8010508 <uxr_common_create_entity>
 8010688:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801068e:	bf00      	nop

08010690 <uxr_buffer_create_datawriter_bin>:
 8010690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010694:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010698:	ac1d      	add	r4, sp, #116	@ 0x74
 801069a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801069e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80106a2:	9105      	str	r1, [sp, #20]
 80106a4:	4606      	mov	r6, r0
 80106a6:	a9a1      	add	r1, sp, #644	@ 0x284
 80106a8:	4618      	mov	r0, r3
 80106aa:	2305      	movs	r3, #5
 80106ac:	7123      	strb	r3, [r4, #4]
 80106ae:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80106b2:	2703      	movs	r7, #3
 80106b4:	f000 f980 	bl	80109b8 <uxr_object_id_to_raw>
 80106b8:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80106ba:	7227      	strb	r7, [r4, #8]
 80106bc:	a90e      	add	r1, sp, #56	@ 0x38
 80106be:	f000 f97b 	bl	80109b8 <uxr_object_id_to_raw>
 80106c2:	2300      	movs	r3, #0
 80106c4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80106c8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80106cc:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80106d0:	3d00      	subs	r5, #0
 80106d2:	bf18      	it	ne
 80106d4:	2501      	movne	r5, #1
 80106d6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80106da:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80106de:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80106e2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80106e6:	2301      	movs	r3, #1
 80106e8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80106ec:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80106f0:	bb8a      	cbnz	r2, 8010756 <uxr_buffer_create_datawriter_bin+0xc6>
 80106f2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80106f6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80106fa:	f04f 0c13 	mov.w	ip, #19
 80106fe:	250b      	movs	r5, #11
 8010700:	2221      	movs	r2, #33	@ 0x21
 8010702:	2111      	movs	r1, #17
 8010704:	2009      	movs	r0, #9
 8010706:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801070a:	b923      	cbnz	r3, 8010716 <uxr_buffer_create_datawriter_bin+0x86>
 801070c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010710:	4672      	mov	r2, lr
 8010712:	4661      	mov	r1, ip
 8010714:	4628      	mov	r0, r5
 8010716:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801071a:	2b01      	cmp	r3, #1
 801071c:	d025      	beq.n	801076a <uxr_buffer_create_datawriter_bin+0xda>
 801071e:	2b03      	cmp	r3, #3
 8010720:	d029      	beq.n	8010776 <uxr_buffer_create_datawriter_bin+0xe6>
 8010722:	b32b      	cbz	r3, 8010770 <uxr_buffer_create_datawriter_bin+0xe0>
 8010724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010728:	a921      	add	r1, sp, #132	@ 0x84
 801072a:	a806      	add	r0, sp, #24
 801072c:	f7fc f93c 	bl	800c9a8 <ucdr_init_buffer>
 8010730:	a90e      	add	r1, sp, #56	@ 0x38
 8010732:	a806      	add	r0, sp, #24
 8010734:	f002 feba 	bl	80134ac <uxr_serialize_OBJK_DataWriter_Binary>
 8010738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801073a:	f8cd 8000 	str.w	r8, [sp]
 801073e:	9401      	str	r4, [sp, #4]
 8010740:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010744:	60e3      	str	r3, [r4, #12]
 8010746:	4630      	mov	r0, r6
 8010748:	b29b      	uxth	r3, r3
 801074a:	f7ff fedd 	bl	8010508 <uxr_common_create_entity>
 801074e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010756:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801075a:	f04f 0c12 	mov.w	ip, #18
 801075e:	250a      	movs	r5, #10
 8010760:	2220      	movs	r2, #32
 8010762:	2110      	movs	r1, #16
 8010764:	2008      	movs	r0, #8
 8010766:	2702      	movs	r7, #2
 8010768:	e7cd      	b.n	8010706 <uxr_buffer_create_datawriter_bin+0x76>
 801076a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801076e:	e7d9      	b.n	8010724 <uxr_buffer_create_datawriter_bin+0x94>
 8010770:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010774:	e7d6      	b.n	8010724 <uxr_buffer_create_datawriter_bin+0x94>
 8010776:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801077a:	e7d3      	b.n	8010724 <uxr_buffer_create_datawriter_bin+0x94>

0801077c <uxr_buffer_create_replier_bin>:
 801077c:	b570      	push	{r4, r5, r6, lr}
 801077e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8010782:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010786:	9105      	str	r1, [sp, #20]
 8010788:	4605      	mov	r5, r0
 801078a:	a999      	add	r1, sp, #612	@ 0x264
 801078c:	4618      	mov	r0, r3
 801078e:	2308      	movs	r3, #8
 8010790:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8010794:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8010798:	f000 f90e 	bl	80109b8 <uxr_object_id_to_raw>
 801079c:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 801079e:	9306      	str	r3, [sp, #24]
 80107a0:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 80107a2:	9307      	str	r3, [sp, #28]
 80107a4:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 80107a6:	9308      	str	r3, [sp, #32]
 80107a8:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80107aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80107ac:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80107ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80107b0:	2301      	movs	r3, #1
 80107b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80107b6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80107ba:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80107be:	a919      	add	r1, sp, #100	@ 0x64
 80107c0:	2303      	movs	r3, #3
 80107c2:	a80d      	add	r0, sp, #52	@ 0x34
 80107c4:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 80107c8:	f7fc f8ee 	bl	800c9a8 <ucdr_init_buffer>
 80107cc:	a906      	add	r1, sp, #24
 80107ce:	a80d      	add	r0, sp, #52	@ 0x34
 80107d0:	f002 fe98 	bl	8013504 <uxr_serialize_OBJK_Replier_Binary>
 80107d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107d6:	9318      	str	r3, [sp, #96]	@ 0x60
 80107d8:	ac15      	add	r4, sp, #84	@ 0x54
 80107da:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80107de:	9600      	str	r6, [sp, #0]
 80107e0:	9401      	str	r4, [sp, #4]
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	4628      	mov	r0, r5
 80107e6:	f7ff fe8f 	bl	8010508 <uxr_common_create_entity>
 80107ea:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 80107ee:	bd70      	pop	{r4, r5, r6, pc}

080107f0 <get_custom_error>:
 80107f0:	4b01      	ldr	r3, [pc, #4]	@ (80107f8 <get_custom_error+0x8>)
 80107f2:	7818      	ldrb	r0, [r3, #0]
 80107f4:	4770      	bx	lr
 80107f6:	bf00      	nop
 80107f8:	2000b8dc 	.word	0x2000b8dc

080107fc <recv_custom_msg>:
 80107fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010800:	4693      	mov	fp, r2
 8010802:	b089      	sub	sp, #36	@ 0x24
 8010804:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8010808:	9305      	str	r3, [sp, #20]
 801080a:	468a      	mov	sl, r1
 801080c:	2100      	movs	r1, #0
 801080e:	4604      	mov	r4, r0
 8010810:	f88d 101e 	strb.w	r1, [sp, #30]
 8010814:	b322      	cbz	r2, 8010860 <recv_custom_msg+0x64>
 8010816:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801081a:	f10d 081f 	add.w	r8, sp, #31
 801081e:	af05      	add	r7, sp, #20
 8010820:	f10d 061e 	add.w	r6, sp, #30
 8010824:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010828:	e002      	b.n	8010830 <recv_custom_msg+0x34>
 801082a:	9b05      	ldr	r3, [sp, #20]
 801082c:	2b00      	cmp	r3, #0
 801082e:	dd0f      	ble.n	8010850 <recv_custom_msg+0x54>
 8010830:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010834:	4623      	mov	r3, r4
 8010836:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801083a:	e9cd 5600 	strd	r5, r6, [sp]
 801083e:	4622      	mov	r2, r4
 8010840:	4648      	mov	r0, r9
 8010842:	f001 fcef 	bl	8012224 <uxr_read_framed_msg>
 8010846:	2800      	cmp	r0, #0
 8010848:	d0ef      	beq.n	801082a <recv_custom_msg+0x2e>
 801084a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801084e:	b1b3      	cbz	r3, 801087e <recv_custom_msg+0x82>
 8010850:	4b0f      	ldr	r3, [pc, #60]	@ (8010890 <recv_custom_msg+0x94>)
 8010852:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010856:	701a      	strb	r2, [r3, #0]
 8010858:	2000      	movs	r0, #0
 801085a:	b009      	add	sp, #36	@ 0x24
 801085c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010860:	f10d 021f 	add.w	r2, sp, #31
 8010864:	9200      	str	r2, [sp, #0]
 8010866:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801086a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801086e:	4601      	mov	r1, r0
 8010870:	47a8      	blx	r5
 8010872:	2800      	cmp	r0, #0
 8010874:	d0ec      	beq.n	8010850 <recv_custom_msg+0x54>
 8010876:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d1e8      	bne.n	8010850 <recv_custom_msg+0x54>
 801087e:	f8cb 0000 	str.w	r0, [fp]
 8010882:	2001      	movs	r0, #1
 8010884:	f8ca 4000 	str.w	r4, [sl]
 8010888:	b009      	add	sp, #36	@ 0x24
 801088a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801088e:	bf00      	nop
 8010890:	2000b8dc 	.word	0x2000b8dc

08010894 <send_custom_msg>:
 8010894:	b530      	push	{r4, r5, lr}
 8010896:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801089a:	b087      	sub	sp, #28
 801089c:	4615      	mov	r5, r2
 801089e:	b974      	cbnz	r4, 80108be <send_custom_msg+0x2a>
 80108a0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80108a4:	f10d 0317 	add.w	r3, sp, #23
 80108a8:	47a0      	blx	r4
 80108aa:	b108      	cbz	r0, 80108b0 <send_custom_msg+0x1c>
 80108ac:	42a8      	cmp	r0, r5
 80108ae:	d015      	beq.n	80108dc <send_custom_msg+0x48>
 80108b0:	4b0c      	ldr	r3, [pc, #48]	@ (80108e4 <send_custom_msg+0x50>)
 80108b2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80108b6:	701a      	strb	r2, [r3, #0]
 80108b8:	2000      	movs	r0, #0
 80108ba:	b007      	add	sp, #28
 80108bc:	bd30      	pop	{r4, r5, pc}
 80108be:	460b      	mov	r3, r1
 80108c0:	2200      	movs	r2, #0
 80108c2:	f10d 0117 	add.w	r1, sp, #23
 80108c6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80108ca:	4602      	mov	r2, r0
 80108cc:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80108d0:	9500      	str	r5, [sp, #0]
 80108d2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80108d6:	f001 faad 	bl	8011e34 <uxr_write_framed_msg>
 80108da:	e7e6      	b.n	80108aa <send_custom_msg+0x16>
 80108dc:	2001      	movs	r0, #1
 80108de:	b007      	add	sp, #28
 80108e0:	bd30      	pop	{r4, r5, pc}
 80108e2:	bf00      	nop
 80108e4:	2000b8dc 	.word	0x2000b8dc

080108e8 <uxr_set_custom_transport_callbacks>:
 80108e8:	b410      	push	{r4}
 80108ea:	9c01      	ldr	r4, [sp, #4]
 80108ec:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80108f0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80108f4:	9b02      	ldr	r3, [sp, #8]
 80108f6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80108fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108fe:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010902:	4770      	bx	lr

08010904 <uxr_init_custom_transport>:
 8010904:	b538      	push	{r3, r4, r5, lr}
 8010906:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801090a:	b303      	cbz	r3, 801094e <uxr_init_custom_transport+0x4a>
 801090c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010910:	4604      	mov	r4, r0
 8010912:	b1e2      	cbz	r2, 801094e <uxr_init_custom_transport+0x4a>
 8010914:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010918:	b1ca      	cbz	r2, 801094e <uxr_init_custom_transport+0x4a>
 801091a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801091e:	b1b2      	cbz	r2, 801094e <uxr_init_custom_transport+0x4a>
 8010920:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010924:	4798      	blx	r3
 8010926:	4605      	mov	r5, r0
 8010928:	b188      	cbz	r0, 801094e <uxr_init_custom_transport+0x4a>
 801092a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801092e:	b98b      	cbnz	r3, 8010954 <uxr_init_custom_transport+0x50>
 8010930:	490b      	ldr	r1, [pc, #44]	@ (8010960 <uxr_init_custom_transport+0x5c>)
 8010932:	4b0c      	ldr	r3, [pc, #48]	@ (8010964 <uxr_init_custom_transport+0x60>)
 8010934:	4a0c      	ldr	r2, [pc, #48]	@ (8010968 <uxr_init_custom_transport+0x64>)
 8010936:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801093a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801093e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8010942:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010946:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801094a:	4628      	mov	r0, r5
 801094c:	bd38      	pop	{r3, r4, r5, pc}
 801094e:	2500      	movs	r5, #0
 8010950:	4628      	mov	r0, r5
 8010952:	bd38      	pop	{r3, r4, r5, pc}
 8010954:	2100      	movs	r1, #0
 8010956:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801095a:	f001 fa65 	bl	8011e28 <uxr_init_framing_io>
 801095e:	e7e7      	b.n	8010930 <uxr_init_custom_transport+0x2c>
 8010960:	08010895 	.word	0x08010895
 8010964:	080107fd 	.word	0x080107fd
 8010968:	080107f1 	.word	0x080107f1

0801096c <uxr_close_custom_transport>:
 801096c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010970:	4718      	bx	r3
 8010972:	bf00      	nop

08010974 <uxr_object_id>:
 8010974:	b082      	sub	sp, #8
 8010976:	2300      	movs	r3, #0
 8010978:	f88d 1006 	strb.w	r1, [sp, #6]
 801097c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010980:	f360 030f 	bfi	r3, r0, #0, #16
 8010984:	f362 431f 	bfi	r3, r2, #16, #16
 8010988:	4618      	mov	r0, r3
 801098a:	b002      	add	sp, #8
 801098c:	4770      	bx	lr
 801098e:	bf00      	nop

08010990 <uxr_object_id_from_raw>:
 8010990:	7843      	ldrb	r3, [r0, #1]
 8010992:	7801      	ldrb	r1, [r0, #0]
 8010994:	b082      	sub	sp, #8
 8010996:	f003 020f 	and.w	r2, r3, #15
 801099a:	f88d 2006 	strb.w	r2, [sp, #6]
 801099e:	091b      	lsrs	r3, r3, #4
 80109a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80109a4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80109a8:	2000      	movs	r0, #0
 80109aa:	f363 000f 	bfi	r0, r3, #0, #16
 80109ae:	f362 401f 	bfi	r0, r2, #16, #16
 80109b2:	b002      	add	sp, #8
 80109b4:	4770      	bx	lr
 80109b6:	bf00      	nop

080109b8 <uxr_object_id_to_raw>:
 80109b8:	4602      	mov	r2, r0
 80109ba:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80109be:	b082      	sub	sp, #8
 80109c0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80109c4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80109c8:	f881 c000 	strb.w	ip, [r1]
 80109cc:	7048      	strb	r0, [r1, #1]
 80109ce:	b002      	add	sp, #8
 80109d0:	4770      	bx	lr
 80109d2:	bf00      	nop

080109d4 <uxr_buffer_request_data>:
 80109d4:	b530      	push	{r4, r5, lr}
 80109d6:	b095      	sub	sp, #84	@ 0x54
 80109d8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80109dc:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80109de:	9303      	str	r3, [sp, #12]
 80109e0:	2200      	movs	r2, #0
 80109e2:	2d00      	cmp	r5, #0
 80109e4:	bf14      	ite	ne
 80109e6:	2101      	movne	r1, #1
 80109e8:	4611      	moveq	r1, r2
 80109ea:	4604      	mov	r4, r0
 80109ec:	f88d 301c 	strb.w	r3, [sp, #28]
 80109f0:	f88d 201d 	strb.w	r2, [sp, #29]
 80109f4:	f88d 201e 	strb.w	r2, [sp, #30]
 80109f8:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80109fc:	d021      	beq.n	8010a42 <uxr_buffer_request_data+0x6e>
 80109fe:	682a      	ldr	r2, [r5, #0]
 8010a00:	686b      	ldr	r3, [r5, #4]
 8010a02:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8010a06:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010a0a:	2210      	movs	r2, #16
 8010a0c:	2308      	movs	r3, #8
 8010a0e:	2100      	movs	r1, #0
 8010a10:	e9cd 3100 	strd	r3, r1, [sp]
 8010a14:	4620      	mov	r0, r4
 8010a16:	9905      	ldr	r1, [sp, #20]
 8010a18:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a1a:	f001 f89f 	bl	8011b5c <uxr_prepare_stream_to_write_submessage>
 8010a1e:	b918      	cbnz	r0, 8010a28 <uxr_buffer_request_data+0x54>
 8010a20:	4604      	mov	r4, r0
 8010a22:	4620      	mov	r0, r4
 8010a24:	b015      	add	sp, #84	@ 0x54
 8010a26:	bd30      	pop	{r4, r5, pc}
 8010a28:	9904      	ldr	r1, [sp, #16]
 8010a2a:	aa06      	add	r2, sp, #24
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f001 f9cb 	bl	8011dc8 <uxr_init_base_object_request>
 8010a32:	a906      	add	r1, sp, #24
 8010a34:	4604      	mov	r4, r0
 8010a36:	a80c      	add	r0, sp, #48	@ 0x30
 8010a38:	f003 f8a0 	bl	8013b7c <uxr_serialize_READ_DATA_Payload>
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	b015      	add	sp, #84	@ 0x54
 8010a40:	bd30      	pop	{r4, r5, pc}
 8010a42:	2208      	movs	r2, #8
 8010a44:	e7e2      	b.n	8010a0c <uxr_buffer_request_data+0x38>
 8010a46:	bf00      	nop

08010a48 <uxr_buffer_cancel_data>:
 8010a48:	b510      	push	{r4, lr}
 8010a4a:	b094      	sub	sp, #80	@ 0x50
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	9202      	str	r2, [sp, #8]
 8010a50:	9205      	str	r2, [sp, #20]
 8010a52:	9301      	str	r3, [sp, #4]
 8010a54:	2201      	movs	r2, #1
 8010a56:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010a5a:	f88d 301e 	strb.w	r3, [sp, #30]
 8010a5e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8010a62:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010a66:	2308      	movs	r3, #8
 8010a68:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8010a6c:	9300      	str	r3, [sp, #0]
 8010a6e:	2210      	movs	r2, #16
 8010a70:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a72:	4604      	mov	r4, r0
 8010a74:	9103      	str	r1, [sp, #12]
 8010a76:	f001 f871 	bl	8011b5c <uxr_prepare_stream_to_write_submessage>
 8010a7a:	b918      	cbnz	r0, 8010a84 <uxr_buffer_cancel_data+0x3c>
 8010a7c:	4604      	mov	r4, r0
 8010a7e:	4620      	mov	r0, r4
 8010a80:	b014      	add	sp, #80	@ 0x50
 8010a82:	bd10      	pop	{r4, pc}
 8010a84:	9905      	ldr	r1, [sp, #20]
 8010a86:	aa06      	add	r2, sp, #24
 8010a88:	4620      	mov	r0, r4
 8010a8a:	f001 f99d 	bl	8011dc8 <uxr_init_base_object_request>
 8010a8e:	a906      	add	r1, sp, #24
 8010a90:	4604      	mov	r4, r0
 8010a92:	a80c      	add	r0, sp, #48	@ 0x30
 8010a94:	f003 f872 	bl	8013b7c <uxr_serialize_READ_DATA_Payload>
 8010a98:	4620      	mov	r0, r4
 8010a9a:	b014      	add	sp, #80	@ 0x50
 8010a9c:	bd10      	pop	{r4, pc}
 8010a9e:	bf00      	nop

08010aa0 <read_submessage_format>:
 8010aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010aa4:	b095      	sub	sp, #84	@ 0x54
 8010aa6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8010aaa:	b113      	cbz	r3, 8010ab2 <read_submessage_format+0x12>
 8010aac:	b015      	add	sp, #84	@ 0x54
 8010aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ab2:	460c      	mov	r4, r1
 8010ab4:	4615      	mov	r5, r2
 8010ab6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010aba:	4607      	mov	r7, r0
 8010abc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8010abe:	9004      	str	r0, [sp, #16]
 8010ac0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8010ac2:	9005      	str	r0, [sp, #20]
 8010ac4:	1a52      	subs	r2, r2, r1
 8010ac6:	a80c      	add	r0, sp, #48	@ 0x30
 8010ac8:	4699      	mov	r9, r3
 8010aca:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8010ace:	f7fb ff6b 	bl	800c9a8 <ucdr_init_buffer>
 8010ad2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010ad6:	a80c      	add	r0, sp, #48	@ 0x30
 8010ad8:	f7fb ff3a 	bl	800c950 <ucdr_set_on_full_buffer_callback>
 8010adc:	69e2      	ldr	r2, [r4, #28]
 8010ade:	b19a      	cbz	r2, 8010b08 <read_submessage_format+0x68>
 8010ae0:	f1b8 0f07 	cmp.w	r8, #7
 8010ae4:	f882 9014 	strb.w	r9, [r2, #20]
 8010ae8:	d040      	beq.n	8010b6c <read_submessage_format+0xcc>
 8010aea:	f1b8 0f08 	cmp.w	r8, #8
 8010aee:	d02e      	beq.n	8010b4e <read_submessage_format+0xae>
 8010af0:	f1b8 0f06 	cmp.w	r8, #6
 8010af4:	d011      	beq.n	8010b1a <read_submessage_format+0x7a>
 8010af6:	2301      	movs	r3, #1
 8010af8:	7513      	strb	r3, [r2, #20]
 8010afa:	4629      	mov	r1, r5
 8010afc:	4620      	mov	r0, r4
 8010afe:	f7fb ffa3 	bl	800ca48 <ucdr_advance_buffer>
 8010b02:	b015      	add	sp, #84	@ 0x54
 8010b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b08:	f1b8 0f07 	cmp.w	r8, #7
 8010b0c:	d02e      	beq.n	8010b6c <read_submessage_format+0xcc>
 8010b0e:	f1b8 0f08 	cmp.w	r8, #8
 8010b12:	d01c      	beq.n	8010b4e <read_submessage_format+0xae>
 8010b14:	f1b8 0f06 	cmp.w	r8, #6
 8010b18:	d1ef      	bne.n	8010afa <read_submessage_format+0x5a>
 8010b1a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8010b1e:	f1b8 0f00 	cmp.w	r8, #0
 8010b22:	d011      	beq.n	8010b48 <read_submessage_format+0xa8>
 8010b24:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b26:	e9cd 3500 	strd	r3, r5, [sp]
 8010b2a:	2306      	movs	r3, #6
 8010b2c:	f88d 3016 	strb.w	r3, [sp, #22]
 8010b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010b34:	9302      	str	r3, [sp, #8]
 8010b36:	4632      	mov	r2, r6
 8010b38:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010b3c:	4638      	mov	r0, r7
 8010b3e:	47c0      	blx	r8
 8010b40:	2301      	movs	r3, #1
 8010b42:	69e2      	ldr	r2, [r4, #28]
 8010b44:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010b48:	2a00      	cmp	r2, #0
 8010b4a:	d1d4      	bne.n	8010af6 <read_submessage_format+0x56>
 8010b4c:	e7d5      	b.n	8010afa <read_submessage_format+0x5a>
 8010b4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d0f8      	beq.n	8010b48 <read_submessage_format+0xa8>
 8010b56:	a906      	add	r1, sp, #24
 8010b58:	a80c      	add	r0, sp, #48	@ 0x30
 8010b5a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010b5e:	f003 f8e1 	bl	8013d24 <uxr_deserialize_SampleIdentity>
 8010b62:	b9a0      	cbnz	r0, 8010b8e <read_submessage_format+0xee>
 8010b64:	69e2      	ldr	r2, [r4, #28]
 8010b66:	2a00      	cmp	r2, #0
 8010b68:	d1c5      	bne.n	8010af6 <read_submessage_format+0x56>
 8010b6a:	e7c6      	b.n	8010afa <read_submessage_format+0x5a>
 8010b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b70:	b13b      	cbz	r3, 8010b82 <read_submessage_format+0xe2>
 8010b72:	a906      	add	r1, sp, #24
 8010b74:	a80c      	add	r0, sp, #48	@ 0x30
 8010b76:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010b7a:	f002 fd99 	bl	80136b0 <uxr_deserialize_BaseObjectRequest>
 8010b7e:	bb60      	cbnz	r0, 8010bda <read_submessage_format+0x13a>
 8010b80:	69e2      	ldr	r2, [r4, #28]
 8010b82:	68a3      	ldr	r3, [r4, #8]
 8010b84:	442b      	add	r3, r5
 8010b86:	60a3      	str	r3, [r4, #8]
 8010b88:	2a00      	cmp	r2, #0
 8010b8a:	d1b4      	bne.n	8010af6 <read_submessage_format+0x56>
 8010b8c:	e7b5      	b.n	8010afa <read_submessage_format+0x5a>
 8010b8e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010b92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b94:	1a52      	subs	r2, r2, r1
 8010b96:	eba8 0803 	sub.w	r8, r8, r3
 8010b9a:	a80c      	add	r0, sp, #48	@ 0x30
 8010b9c:	f7fb ff04 	bl	800c9a8 <ucdr_init_buffer>
 8010ba0:	44a8      	add	r8, r5
 8010ba2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010ba6:	a80c      	add	r0, sp, #48	@ 0x30
 8010ba8:	f7fb fed2 	bl	800c950 <ucdr_set_on_full_buffer_callback>
 8010bac:	fa1f f888 	uxth.w	r8, r8
 8010bb0:	ab0c      	add	r3, sp, #48	@ 0x30
 8010bb2:	9300      	str	r3, [sp, #0]
 8010bb4:	f8cd 8004 	str.w	r8, [sp, #4]
 8010bb8:	2108      	movs	r1, #8
 8010bba:	f88d 1016 	strb.w	r1, [sp, #22]
 8010bbe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8010bc2:	9102      	str	r1, [sp, #8]
 8010bc4:	ab06      	add	r3, sp, #24
 8010bc6:	4632      	mov	r2, r6
 8010bc8:	9905      	ldr	r1, [sp, #20]
 8010bca:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8010bce:	4638      	mov	r0, r7
 8010bd0:	47b0      	blx	r6
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010bd8:	e7c4      	b.n	8010b64 <read_submessage_format+0xc4>
 8010bda:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010bde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010be0:	1a52      	subs	r2, r2, r1
 8010be2:	a80c      	add	r0, sp, #48	@ 0x30
 8010be4:	eba8 0803 	sub.w	r8, r8, r3
 8010be8:	f7fb fede 	bl	800c9a8 <ucdr_init_buffer>
 8010bec:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010bf0:	a80c      	add	r0, sp, #48	@ 0x30
 8010bf2:	f7fb fead 	bl	800c950 <ucdr_set_on_full_buffer_callback>
 8010bf6:	ab0c      	add	r3, sp, #48	@ 0x30
 8010bf8:	9300      	str	r3, [sp, #0]
 8010bfa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010bfe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010c02:	44a8      	add	r8, r5
 8010c04:	fa1f f888 	uxth.w	r8, r8
 8010c08:	f8cd 8004 	str.w	r8, [sp, #4]
 8010c0c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010c10:	2107      	movs	r1, #7
 8010c12:	f88d 1016 	strb.w	r1, [sp, #22]
 8010c16:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8010c1a:	9102      	str	r1, [sp, #8]
 8010c1c:	4632      	mov	r2, r6
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010c24:	9905      	ldr	r1, [sp, #20]
 8010c26:	4638      	mov	r0, r7
 8010c28:	47b0      	blx	r6
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010c30:	e7a6      	b.n	8010b80 <read_submessage_format+0xe0>
 8010c32:	bf00      	nop

08010c34 <on_get_fragmentation_info>:
 8010c34:	b500      	push	{lr}
 8010c36:	b08b      	sub	sp, #44	@ 0x2c
 8010c38:	4601      	mov	r1, r0
 8010c3a:	2204      	movs	r2, #4
 8010c3c:	a802      	add	r0, sp, #8
 8010c3e:	f7fb feb3 	bl	800c9a8 <ucdr_init_buffer>
 8010c42:	f10d 0305 	add.w	r3, sp, #5
 8010c46:	f10d 0206 	add.w	r2, sp, #6
 8010c4a:	a901      	add	r1, sp, #4
 8010c4c:	a802      	add	r0, sp, #8
 8010c4e:	f001 fecf 	bl	80129f0 <uxr_read_submessage_header>
 8010c52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010c56:	2b0d      	cmp	r3, #13
 8010c58:	d003      	beq.n	8010c62 <on_get_fragmentation_info+0x2e>
 8010c5a:	2000      	movs	r0, #0
 8010c5c:	b00b      	add	sp, #44	@ 0x2c
 8010c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010c66:	f013 0f02 	tst.w	r3, #2
 8010c6a:	bf14      	ite	ne
 8010c6c:	2002      	movne	r0, #2
 8010c6e:	2001      	moveq	r0, #1
 8010c70:	b00b      	add	sp, #44	@ 0x2c
 8010c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c76:	bf00      	nop

08010c78 <read_submessage_get_info>:
 8010c78:	b570      	push	{r4, r5, r6, lr}
 8010c7a:	2500      	movs	r5, #0
 8010c7c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010c80:	4604      	mov	r4, r0
 8010c82:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010c86:	460e      	mov	r6, r1
 8010c88:	a810      	add	r0, sp, #64	@ 0x40
 8010c8a:	4629      	mov	r1, r5
 8010c8c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010c90:	f009 f860 	bl	8019d54 <memset>
 8010c94:	a903      	add	r1, sp, #12
 8010c96:	4630      	mov	r0, r6
 8010c98:	f002 feb2 	bl	8013a00 <uxr_deserialize_GET_INFO_Payload>
 8010c9c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010ca0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f001 f887 	bl	8011db8 <uxr_session_header_offset>
 8010caa:	462b      	mov	r3, r5
 8010cac:	9000      	str	r0, [sp, #0]
 8010cae:	220c      	movs	r2, #12
 8010cb0:	a905      	add	r1, sp, #20
 8010cb2:	a808      	add	r0, sp, #32
 8010cb4:	f7fb fe66 	bl	800c984 <ucdr_init_buffer_origin_offset>
 8010cb8:	a910      	add	r1, sp, #64	@ 0x40
 8010cba:	a808      	add	r0, sp, #32
 8010cbc:	f002 ff12 	bl	8013ae4 <uxr_serialize_INFO_Payload>
 8010cc0:	9b08      	ldr	r3, [sp, #32]
 8010cc2:	462a      	mov	r2, r5
 8010cc4:	4629      	mov	r1, r5
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	f001 f820 	bl	8011d0c <uxr_stamp_session_header>
 8010ccc:	a808      	add	r0, sp, #32
 8010cce:	f7fb fe97 	bl	800ca00 <ucdr_buffer_length>
 8010cd2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	a905      	add	r1, sp, #20
 8010cd8:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010cdc:	47a0      	blx	r4
 8010cde:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010ce2:	bd70      	pop	{r4, r5, r6, pc}

08010ce4 <write_submessage_acknack.isra.0>:
 8010ce4:	b570      	push	{r4, r5, r6, lr}
 8010ce6:	b092      	sub	sp, #72	@ 0x48
 8010ce8:	4605      	mov	r5, r0
 8010cea:	460e      	mov	r6, r1
 8010cec:	4614      	mov	r4, r2
 8010cee:	f001 f863 	bl	8011db8 <uxr_session_header_offset>
 8010cf2:	a905      	add	r1, sp, #20
 8010cf4:	9000      	str	r0, [sp, #0]
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	a80a      	add	r0, sp, #40	@ 0x28
 8010cfa:	2211      	movs	r2, #17
 8010cfc:	f7fb fe42 	bl	800c984 <ucdr_init_buffer_origin_offset>
 8010d00:	2218      	movs	r2, #24
 8010d02:	fb02 5404 	mla	r4, r2, r4, r5
 8010d06:	2300      	movs	r3, #0
 8010d08:	2205      	movs	r2, #5
 8010d0a:	3450      	adds	r4, #80	@ 0x50
 8010d0c:	210a      	movs	r1, #10
 8010d0e:	a80a      	add	r0, sp, #40	@ 0x28
 8010d10:	f001 fe54 	bl	80129bc <uxr_buffer_submessage_header>
 8010d14:	a903      	add	r1, sp, #12
 8010d16:	4620      	mov	r0, r4
 8010d18:	f007 fb5e 	bl	80183d8 <uxr_compute_acknack>
 8010d1c:	ba40      	rev16	r0, r0
 8010d1e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010d22:	a903      	add	r1, sp, #12
 8010d24:	a80a      	add	r0, sp, #40	@ 0x28
 8010d26:	f88d 6010 	strb.w	r6, [sp, #16]
 8010d2a:	f002 ff4b 	bl	8013bc4 <uxr_serialize_ACKNACK_Payload>
 8010d2e:	2200      	movs	r2, #0
 8010d30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d32:	4611      	mov	r1, r2
 8010d34:	4628      	mov	r0, r5
 8010d36:	f000 ffe9 	bl	8011d0c <uxr_stamp_session_header>
 8010d3a:	a80a      	add	r0, sp, #40	@ 0x28
 8010d3c:	f7fb fe60 	bl	800ca00 <ucdr_buffer_length>
 8010d40:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010d42:	4602      	mov	r2, r0
 8010d44:	a905      	add	r1, sp, #20
 8010d46:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010d4a:	47a0      	blx	r4
 8010d4c:	b012      	add	sp, #72	@ 0x48
 8010d4e:	bd70      	pop	{r4, r5, r6, pc}

08010d50 <uxr_init_session>:
 8010d50:	b510      	push	{r4, lr}
 8010d52:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010d88 <uxr_init_session+0x38>
 8010d56:	2300      	movs	r3, #0
 8010d58:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010d5c:	4604      	mov	r4, r0
 8010d5e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010d62:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010d66:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010d6a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010d6e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010d72:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010d76:	2181      	movs	r1, #129	@ 0x81
 8010d78:	f000 ff34 	bl	8011be4 <uxr_init_session_info>
 8010d7c:	f104 0008 	add.w	r0, r4, #8
 8010d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d84:	f001 bd36 	b.w	80127f4 <uxr_init_stream_storage>
	...

08010d90 <uxr_set_status_callback>:
 8010d90:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010d94:	4770      	bx	lr
 8010d96:	bf00      	nop

08010d98 <uxr_set_topic_callback>:
 8010d98:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010d9c:	4770      	bx	lr
 8010d9e:	bf00      	nop

08010da0 <uxr_set_request_callback>:
 8010da0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop

08010da8 <uxr_set_reply_callback>:
 8010da8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop

08010db0 <uxr_create_output_best_effort_stream>:
 8010db0:	b510      	push	{r4, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	e9cd 2100 	strd	r2, r1, [sp]
 8010db8:	4604      	mov	r4, r0
 8010dba:	f000 fffd 	bl	8011db8 <uxr_session_header_offset>
 8010dbe:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	f104 0008 	add.w	r0, r4, #8
 8010dc8:	b004      	add	sp, #16
 8010dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dce:	f001 bd5b 	b.w	8012888 <uxr_add_output_best_effort_buffer>
 8010dd2:	bf00      	nop

08010dd4 <uxr_create_output_reliable_stream>:
 8010dd4:	b510      	push	{r4, lr}
 8010dd6:	b088      	sub	sp, #32
 8010dd8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010ddc:	4604      	mov	r4, r0
 8010dde:	9303      	str	r3, [sp, #12]
 8010de0:	f000 ffea 	bl	8011db8 <uxr_session_header_offset>
 8010de4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010de8:	9000      	str	r0, [sp, #0]
 8010dea:	9905      	ldr	r1, [sp, #20]
 8010dec:	f104 0008 	add.w	r0, r4, #8
 8010df0:	f001 fd5e 	bl	80128b0 <uxr_add_output_reliable_buffer>
 8010df4:	2200      	movs	r2, #0
 8010df6:	b2c3      	uxtb	r3, r0
 8010df8:	f363 0207 	bfi	r2, r3, #0, #8
 8010dfc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010e00:	f363 220f 	bfi	r2, r3, #8, #8
 8010e04:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010e08:	f363 4217 	bfi	r2, r3, #16, #8
 8010e0c:	0e03      	lsrs	r3, r0, #24
 8010e0e:	f363 621f 	bfi	r2, r3, #24, #8
 8010e12:	4610      	mov	r0, r2
 8010e14:	b008      	add	sp, #32
 8010e16:	bd10      	pop	{r4, pc}

08010e18 <uxr_create_input_best_effort_stream>:
 8010e18:	b082      	sub	sp, #8
 8010e1a:	3008      	adds	r0, #8
 8010e1c:	b002      	add	sp, #8
 8010e1e:	f001 bd61 	b.w	80128e4 <uxr_add_input_best_effort_buffer>
 8010e22:	bf00      	nop

08010e24 <uxr_create_input_reliable_stream>:
 8010e24:	b510      	push	{r4, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	4c0b      	ldr	r4, [pc, #44]	@ (8010e58 <uxr_create_input_reliable_stream+0x34>)
 8010e2a:	9400      	str	r4, [sp, #0]
 8010e2c:	3008      	adds	r0, #8
 8010e2e:	f001 fd6f 	bl	8012910 <uxr_add_input_reliable_buffer>
 8010e32:	2200      	movs	r2, #0
 8010e34:	b2c3      	uxtb	r3, r0
 8010e36:	f363 0207 	bfi	r2, r3, #0, #8
 8010e3a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010e3e:	f363 220f 	bfi	r2, r3, #8, #8
 8010e42:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010e46:	f363 4217 	bfi	r2, r3, #16, #8
 8010e4a:	0e03      	lsrs	r3, r0, #24
 8010e4c:	f363 621f 	bfi	r2, r3, #24, #8
 8010e50:	4610      	mov	r0, r2
 8010e52:	b004      	add	sp, #16
 8010e54:	bd10      	pop	{r4, pc}
 8010e56:	bf00      	nop
 8010e58:	08010c35 	.word	0x08010c35

08010e5c <uxr_epoch_millis>:
 8010e5c:	b510      	push	{r4, lr}
 8010e5e:	4604      	mov	r4, r0
 8010e60:	f001 fe0c 	bl	8012a7c <uxr_nanos>
 8010e64:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 8010e68:	1ac0      	subs	r0, r0, r3
 8010e6a:	4a04      	ldr	r2, [pc, #16]	@ (8010e7c <uxr_epoch_millis+0x20>)
 8010e6c:	f04f 0300 	mov.w	r3, #0
 8010e70:	eb61 0104 	sbc.w	r1, r1, r4
 8010e74:	f7ef fea8 	bl	8000bc8 <__aeabi_ldivmod>
 8010e78:	bd10      	pop	{r4, pc}
 8010e7a:	bf00      	nop
 8010e7c:	000f4240 	.word	0x000f4240

08010e80 <uxr_epoch_nanos>:
 8010e80:	b510      	push	{r4, lr}
 8010e82:	4604      	mov	r4, r0
 8010e84:	f001 fdfa 	bl	8012a7c <uxr_nanos>
 8010e88:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010e8c:	1ac0      	subs	r0, r0, r3
 8010e8e:	eb61 0102 	sbc.w	r1, r1, r2
 8010e92:	bd10      	pop	{r4, pc}

08010e94 <uxr_flash_output_streams>:
 8010e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e98:	7e03      	ldrb	r3, [r0, #24]
 8010e9a:	b084      	sub	sp, #16
 8010e9c:	4604      	mov	r4, r0
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d035      	beq.n	8010f0e <uxr_flash_output_streams+0x7a>
 8010ea2:	f04f 0900 	mov.w	r9, #0
 8010ea6:	4648      	mov	r0, r9
 8010ea8:	f10d 0802 	add.w	r8, sp, #2
 8010eac:	af03      	add	r7, sp, #12
 8010eae:	ae02      	add	r6, sp, #8
 8010eb0:	e006      	b.n	8010ec0 <uxr_flash_output_streams+0x2c>
 8010eb2:	7e23      	ldrb	r3, [r4, #24]
 8010eb4:	f109 0901 	add.w	r9, r9, #1
 8010eb8:	fa5f f089 	uxtb.w	r0, r9
 8010ebc:	4283      	cmp	r3, r0
 8010ebe:	d926      	bls.n	8010f0e <uxr_flash_output_streams+0x7a>
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010ec8:	f001 fc40 	bl	801274c <uxr_stream_id>
 8010ecc:	3508      	adds	r5, #8
 8010ece:	4684      	mov	ip, r0
 8010ed0:	4643      	mov	r3, r8
 8010ed2:	463a      	mov	r2, r7
 8010ed4:	4631      	mov	r1, r6
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	f8cd c004 	str.w	ip, [sp, #4]
 8010edc:	f007 fb02 	bl	80184e4 <uxr_prepare_best_effort_buffer_to_send>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d0e6      	beq.n	8010eb2 <uxr_flash_output_streams+0x1e>
 8010ee4:	9b02      	ldr	r3, [sp, #8]
 8010ee6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010eea:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f000 ff0c 	bl	8011d0c <uxr_stamp_session_header>
 8010ef4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010ef6:	9a03      	ldr	r2, [sp, #12]
 8010ef8:	685d      	ldr	r5, [r3, #4]
 8010efa:	6818      	ldr	r0, [r3, #0]
 8010efc:	9902      	ldr	r1, [sp, #8]
 8010efe:	47a8      	blx	r5
 8010f00:	f109 0901 	add.w	r9, r9, #1
 8010f04:	7e23      	ldrb	r3, [r4, #24]
 8010f06:	fa5f f089 	uxtb.w	r0, r9
 8010f0a:	4283      	cmp	r3, r0
 8010f0c:	d8d8      	bhi.n	8010ec0 <uxr_flash_output_streams+0x2c>
 8010f0e:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010f12:	b38b      	cbz	r3, 8010f78 <uxr_flash_output_streams+0xe4>
 8010f14:	f04f 0900 	mov.w	r9, #0
 8010f18:	f10d 0802 	add.w	r8, sp, #2
 8010f1c:	af03      	add	r7, sp, #12
 8010f1e:	ae02      	add	r6, sp, #8
 8010f20:	4648      	mov	r0, r9
 8010f22:	2201      	movs	r2, #1
 8010f24:	2102      	movs	r1, #2
 8010f26:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010f2a:	f001 fc0f 	bl	801274c <uxr_stream_id>
 8010f2e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010f32:	3520      	adds	r5, #32
 8010f34:	9001      	str	r0, [sp, #4]
 8010f36:	e00d      	b.n	8010f54 <uxr_flash_output_streams+0xc0>
 8010f38:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010f3c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010f40:	9b02      	ldr	r3, [sp, #8]
 8010f42:	f000 fee3 	bl	8011d0c <uxr_stamp_session_header>
 8010f46:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f48:	9a03      	ldr	r2, [sp, #12]
 8010f4a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010f4e:	9902      	ldr	r1, [sp, #8]
 8010f50:	6818      	ldr	r0, [r3, #0]
 8010f52:	47d0      	blx	sl
 8010f54:	4643      	mov	r3, r8
 8010f56:	463a      	mov	r2, r7
 8010f58:	4631      	mov	r1, r6
 8010f5a:	4628      	mov	r0, r5
 8010f5c:	f007 fce0 	bl	8018920 <uxr_prepare_next_reliable_buffer_to_send>
 8010f60:	4603      	mov	r3, r0
 8010f62:	4620      	mov	r0, r4
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d1e7      	bne.n	8010f38 <uxr_flash_output_streams+0xa4>
 8010f68:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010f6c:	f109 0901 	add.w	r9, r9, #1
 8010f70:	fa5f f089 	uxtb.w	r0, r9
 8010f74:	4283      	cmp	r3, r0
 8010f76:	d8d4      	bhi.n	8010f22 <uxr_flash_output_streams+0x8e>
 8010f78:	b004      	add	sp, #16
 8010f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f7e:	bf00      	nop

08010f80 <read_submessage_info>:
 8010f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f84:	460d      	mov	r5, r1
 8010f86:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010f8a:	4669      	mov	r1, sp
 8010f8c:	4607      	mov	r7, r0
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f002 fc44 	bl	801381c <uxr_deserialize_BaseObjectReply>
 8010f94:	a902      	add	r1, sp, #8
 8010f96:	4604      	mov	r4, r0
 8010f98:	4628      	mov	r0, r5
 8010f9a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010f9e:	f7fa fa09 	bl	800b3b4 <ucdr_deserialize_bool>
 8010fa2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010fa6:	4004      	ands	r4, r0
 8010fa8:	b2e4      	uxtb	r4, r4
 8010faa:	b95b      	cbnz	r3, 8010fc4 <read_submessage_info+0x44>
 8010fac:	a987      	add	r1, sp, #540	@ 0x21c
 8010fae:	4628      	mov	r0, r5
 8010fb0:	f7fa fa00 	bl	800b3b4 <ucdr_deserialize_bool>
 8010fb4:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010fb8:	4606      	mov	r6, r0
 8010fba:	b94b      	cbnz	r3, 8010fd0 <read_submessage_info+0x50>
 8010fbc:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc4:	a903      	add	r1, sp, #12
 8010fc6:	4628      	mov	r0, r5
 8010fc8:	f002 fad0 	bl	801356c <uxr_deserialize_ObjectVariant>
 8010fcc:	4004      	ands	r4, r0
 8010fce:	e7ed      	b.n	8010fac <read_submessage_info+0x2c>
 8010fd0:	a988      	add	r1, sp, #544	@ 0x220
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	f7fa fa1c 	bl	800b410 <ucdr_deserialize_uint8_t>
 8010fd8:	4234      	tst	r4, r6
 8010fda:	d0ef      	beq.n	8010fbc <read_submessage_info+0x3c>
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	d0ed      	beq.n	8010fbc <read_submessage_info+0x3c>
 8010fe0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010fe4:	2b0d      	cmp	r3, #13
 8010fe6:	d1e9      	bne.n	8010fbc <read_submessage_info+0x3c>
 8010fe8:	a98a      	add	r1, sp, #552	@ 0x228
 8010fea:	4628      	mov	r0, r5
 8010fec:	f7fa ffb6 	bl	800bf5c <ucdr_deserialize_int16_t>
 8010ff0:	b140      	cbz	r0, 8011004 <read_submessage_info+0x84>
 8010ff2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dd07      	ble.n	801100a <read_submessage_info+0x8a>
 8010ffa:	f1b8 0f00 	cmp.w	r8, #0
 8010ffe:	bf14      	ite	ne
 8011000:	2001      	movne	r0, #1
 8011002:	2002      	moveq	r0, #2
 8011004:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8011008:	e7d8      	b.n	8010fbc <read_submessage_info+0x3c>
 801100a:	2000      	movs	r0, #0
 801100c:	e7fa      	b.n	8011004 <read_submessage_info+0x84>
 801100e:	bf00      	nop

08011010 <read_submessage_list>:
 8011010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011014:	b097      	sub	sp, #92	@ 0x5c
 8011016:	4ec1      	ldr	r6, [pc, #772]	@ (801131c <read_submessage_list+0x30c>)
 8011018:	9209      	str	r2, [sp, #36]	@ 0x24
 801101a:	4604      	mov	r4, r0
 801101c:	460d      	mov	r5, r1
 801101e:	f04f 0801 	mov.w	r8, #1
 8011022:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8011026:	aa0c      	add	r2, sp, #48	@ 0x30
 8011028:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801102c:	4628      	mov	r0, r5
 801102e:	f001 fcdf 	bl	80129f0 <uxr_read_submessage_header>
 8011032:	2800      	cmp	r0, #0
 8011034:	f000 813e 	beq.w	80112b4 <read_submessage_list+0x2a4>
 8011038:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801103c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8011040:	3b02      	subs	r3, #2
 8011042:	2b0d      	cmp	r3, #13
 8011044:	d8ed      	bhi.n	8011022 <read_submessage_list+0x12>
 8011046:	a101      	add	r1, pc, #4	@ (adr r1, 801104c <read_submessage_list+0x3c>)
 8011048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801104c:	080112ab 	.word	0x080112ab
 8011050:	08011023 	.word	0x08011023
 8011054:	0801129b 	.word	0x0801129b
 8011058:	08011239 	.word	0x08011239
 801105c:	0801122f 	.word	0x0801122f
 8011060:	08011023 	.word	0x08011023
 8011064:	08011023 	.word	0x08011023
 8011068:	0801118f 	.word	0x0801118f
 801106c:	0801111f 	.word	0x0801111f
 8011070:	080110df 	.word	0x080110df
 8011074:	08011023 	.word	0x08011023
 8011078:	08011023 	.word	0x08011023
 801107c:	08011023 	.word	0x08011023
 8011080:	08011085 	.word	0x08011085
 8011084:	a910      	add	r1, sp, #64	@ 0x40
 8011086:	4628      	mov	r0, r5
 8011088:	f002 fdfa 	bl	8013c80 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801108c:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8011090:	f1b9 0f00 	cmp.w	r9, #0
 8011094:	f000 8116 	beq.w	80112c4 <read_submessage_list+0x2b4>
 8011098:	f001 fcf0 	bl	8012a7c <uxr_nanos>
 801109c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801109e:	4602      	mov	r2, r0
 80110a0:	460b      	mov	r3, r1
 80110a2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80110a4:	2100      	movs	r1, #0
 80110a6:	468c      	mov	ip, r1
 80110a8:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80110ac:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80110b0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80110b2:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80110b4:	468c      	mov	ip, r1
 80110b6:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80110ba:	46e2      	mov	sl, ip
 80110bc:	46bc      	mov	ip, r7
 80110be:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80110c2:	fbc0 7106 	smlal	r7, r1, r0, r6
 80110c6:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80110ca:	e9cd 7100 	strd	r7, r1, [sp]
 80110ce:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80110d2:	9106      	str	r1, [sp, #24]
 80110d4:	4620      	mov	r0, r4
 80110d6:	47c8      	blx	r9
 80110d8:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 80110dc:	e7a1      	b.n	8011022 <read_submessage_list+0x12>
 80110de:	a910      	add	r1, sp, #64	@ 0x40
 80110e0:	4628      	mov	r0, r5
 80110e2:	f002 fdad 	bl	8013c40 <uxr_deserialize_HEARTBEAT_Payload>
 80110e6:	2100      	movs	r1, #0
 80110e8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80110ec:	f001 fb58 	bl	80127a0 <uxr_stream_id_from_raw>
 80110f0:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80110f4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80110f6:	4639      	mov	r1, r7
 80110f8:	f104 0008 	add.w	r0, r4, #8
 80110fc:	f001 fc3e 	bl	801297c <uxr_get_input_reliable_stream>
 8011100:	2800      	cmp	r0, #0
 8011102:	d08e      	beq.n	8011022 <read_submessage_list+0x12>
 8011104:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011108:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801110c:	f007 f958 	bl	80183c0 <uxr_process_heartbeat>
 8011110:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011114:	463a      	mov	r2, r7
 8011116:	4620      	mov	r0, r4
 8011118:	f7ff fde4 	bl	8010ce4 <write_submessage_acknack.isra.0>
 801111c:	e781      	b.n	8011022 <read_submessage_list+0x12>
 801111e:	a910      	add	r1, sp, #64	@ 0x40
 8011120:	4628      	mov	r0, r5
 8011122:	f002 fd65 	bl	8013bf0 <uxr_deserialize_ACKNACK_Payload>
 8011126:	2100      	movs	r1, #0
 8011128:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801112c:	f001 fb38 	bl	80127a0 <uxr_stream_id_from_raw>
 8011130:	900d      	str	r0, [sp, #52]	@ 0x34
 8011132:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011136:	f104 0008 	add.w	r0, r4, #8
 801113a:	f001 fc0b 	bl	8012954 <uxr_get_output_reliable_stream>
 801113e:	4607      	mov	r7, r0
 8011140:	2800      	cmp	r0, #0
 8011142:	f43f af6e 	beq.w	8011022 <read_submessage_list+0x12>
 8011146:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801114a:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801114e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011152:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011156:	b289      	uxth	r1, r1
 8011158:	f007 fc8c 	bl	8018a74 <uxr_process_acknack>
 801115c:	4638      	mov	r0, r7
 801115e:	f007 fc49 	bl	80189f4 <uxr_begin_output_nack_buffer_it>
 8011162:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011166:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801116a:	e006      	b.n	801117a <read_submessage_list+0x16a>
 801116c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801116e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011170:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8011174:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011176:	6818      	ldr	r0, [r3, #0]
 8011178:	47c8      	blx	r9
 801117a:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801117e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011180:	4651      	mov	r1, sl
 8011182:	4638      	mov	r0, r7
 8011184:	f007 fc38 	bl	80189f8 <uxr_next_reliable_nack_buffer_to_send>
 8011188:	2800      	cmp	r0, #0
 801118a:	d1ef      	bne.n	801116c <read_submessage_list+0x15c>
 801118c:	e749      	b.n	8011022 <read_submessage_list+0x12>
 801118e:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8011192:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8011196:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801119a:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801119e:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80111a2:	4651      	mov	r1, sl
 80111a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80111a8:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80111ac:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80111b0:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80111b4:	4628      	mov	r0, r5
 80111b6:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80111ba:	f002 fa79 	bl	80136b0 <uxr_deserialize_BaseObjectRequest>
 80111be:	4650      	mov	r0, sl
 80111c0:	a90f      	add	r1, sp, #60	@ 0x3c
 80111c2:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80111c6:	f000 fe1d 	bl	8011e04 <uxr_parse_base_object_request>
 80111ca:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80111ce:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80111d0:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80111d4:	9110      	str	r1, [sp, #64]	@ 0x40
 80111d6:	3f04      	subs	r7, #4
 80111d8:	f009 090e 	and.w	r9, r9, #14
 80111dc:	b2bf      	uxth	r7, r7
 80111de:	f1bb 0f00 	cmp.w	fp, #0
 80111e2:	d006      	beq.n	80111f2 <read_submessage_list+0x1e2>
 80111e4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	4652      	mov	r2, sl
 80111ec:	2300      	movs	r3, #0
 80111ee:	4620      	mov	r0, r4
 80111f0:	47d8      	blx	fp
 80111f2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80111f4:	b16a      	cbz	r2, 8011212 <read_submessage_list+0x202>
 80111f6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80111f8:	2100      	movs	r1, #0
 80111fa:	3802      	subs	r0, #2
 80111fc:	e002      	b.n	8011204 <read_submessage_list+0x1f4>
 80111fe:	3101      	adds	r1, #1
 8011200:	4291      	cmp	r1, r2
 8011202:	d006      	beq.n	8011212 <read_submessage_list+0x202>
 8011204:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011208:	4553      	cmp	r3, sl
 801120a:	d1f8      	bne.n	80111fe <read_submessage_list+0x1ee>
 801120c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801120e:	2200      	movs	r2, #0
 8011210:	545a      	strb	r2, [r3, r1]
 8011212:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011216:	9102      	str	r1, [sp, #8]
 8011218:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801121a:	9101      	str	r1, [sp, #4]
 801121c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801121e:	9100      	str	r1, [sp, #0]
 8011220:	464b      	mov	r3, r9
 8011222:	463a      	mov	r2, r7
 8011224:	4629      	mov	r1, r5
 8011226:	4620      	mov	r0, r4
 8011228:	f7ff fc3a 	bl	8010aa0 <read_submessage_format>
 801122c:	e6f9      	b.n	8011022 <read_submessage_list+0x12>
 801122e:	4629      	mov	r1, r5
 8011230:	4620      	mov	r0, r4
 8011232:	f7ff fea5 	bl	8010f80 <read_submessage_info>
 8011236:	e6f4      	b.n	8011022 <read_submessage_list+0x12>
 8011238:	2a00      	cmp	r2, #0
 801123a:	d03e      	beq.n	80112ba <read_submessage_list+0x2aa>
 801123c:	a910      	add	r1, sp, #64	@ 0x40
 801123e:	4628      	mov	r0, r5
 8011240:	f002 fc32 	bl	8013aa8 <uxr_deserialize_STATUS_Payload>
 8011244:	a90e      	add	r1, sp, #56	@ 0x38
 8011246:	aa0d      	add	r2, sp, #52	@ 0x34
 8011248:	a810      	add	r0, sp, #64	@ 0x40
 801124a:	f000 fddb 	bl	8011e04 <uxr_parse_base_object_request>
 801124e:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011252:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011254:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8011258:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 801125c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801125e:	f1ba 0f00 	cmp.w	sl, #0
 8011262:	d006      	beq.n	8011272 <read_submessage_list+0x262>
 8011264:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011268:	9300      	str	r3, [sp, #0]
 801126a:	463a      	mov	r2, r7
 801126c:	464b      	mov	r3, r9
 801126e:	4620      	mov	r0, r4
 8011270:	47d0      	blx	sl
 8011272:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011274:	2a00      	cmp	r2, #0
 8011276:	f43f aed4 	beq.w	8011022 <read_submessage_list+0x12>
 801127a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801127c:	2100      	movs	r1, #0
 801127e:	3802      	subs	r0, #2
 8011280:	e003      	b.n	801128a <read_submessage_list+0x27a>
 8011282:	3101      	adds	r1, #1
 8011284:	4291      	cmp	r1, r2
 8011286:	f43f aecc 	beq.w	8011022 <read_submessage_list+0x12>
 801128a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801128e:	42bb      	cmp	r3, r7
 8011290:	d1f7      	bne.n	8011282 <read_submessage_list+0x272>
 8011292:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011294:	f803 9001 	strb.w	r9, [r3, r1]
 8011298:	e6c3      	b.n	8011022 <read_submessage_list+0x12>
 801129a:	2a00      	cmp	r2, #0
 801129c:	f47f aec1 	bne.w	8011022 <read_submessage_list+0x12>
 80112a0:	4629      	mov	r1, r5
 80112a2:	4620      	mov	r0, r4
 80112a4:	f000 fcf4 	bl	8011c90 <uxr_read_create_session_status>
 80112a8:	e6bb      	b.n	8011022 <read_submessage_list+0x12>
 80112aa:	4629      	mov	r1, r5
 80112ac:	4620      	mov	r0, r4
 80112ae:	f7ff fce3 	bl	8010c78 <read_submessage_get_info>
 80112b2:	e6b6      	b.n	8011022 <read_submessage_list+0x12>
 80112b4:	b017      	add	sp, #92	@ 0x5c
 80112b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ba:	4629      	mov	r1, r5
 80112bc:	4620      	mov	r0, r4
 80112be:	f000 fcf3 	bl	8011ca8 <uxr_read_delete_session_status>
 80112c2:	e6ae      	b.n	8011022 <read_submessage_list+0x12>
 80112c4:	f001 fbda 	bl	8012a7c <uxr_nanos>
 80112c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80112ca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80112cc:	464f      	mov	r7, r9
 80112ce:	fbc3 2706 	smlal	r2, r7, r3, r6
 80112d2:	1812      	adds	r2, r2, r0
 80112d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80112d6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80112d8:	eb47 0101 	adc.w	r1, r7, r1
 80112dc:	464f      	mov	r7, r9
 80112de:	fbc3 0706 	smlal	r0, r7, r3, r6
 80112e2:	463b      	mov	r3, r7
 80112e4:	4684      	mov	ip, r0
 80112e6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80112ea:	fbc7 0906 	smlal	r0, r9, r7, r6
 80112ee:	eb1c 0c00 	adds.w	ip, ip, r0
 80112f2:	464f      	mov	r7, r9
 80112f4:	eb43 0307 	adc.w	r3, r3, r7
 80112f8:	ebb2 0c0c 	subs.w	ip, r2, ip
 80112fc:	eb61 0303 	sbc.w	r3, r1, r3
 8011300:	0fda      	lsrs	r2, r3, #31
 8011302:	eb12 020c 	adds.w	r2, r2, ip
 8011306:	f143 0300 	adc.w	r3, r3, #0
 801130a:	0852      	lsrs	r2, r2, #1
 801130c:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011310:	105b      	asrs	r3, r3, #1
 8011312:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8011316:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801131a:	e6dd      	b.n	80110d8 <read_submessage_list+0xc8>
 801131c:	3b9aca00 	.word	0x3b9aca00

08011320 <listen_message_reliably>:
 8011320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011324:	1e0b      	subs	r3, r1, #0
 8011326:	b09d      	sub	sp, #116	@ 0x74
 8011328:	bfb8      	it	lt
 801132a:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801132e:	4680      	mov	r8, r0
 8011330:	9305      	str	r3, [sp, #20]
 8011332:	f001 fb89 	bl	8012a48 <uxr_millis>
 8011336:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801133a:	4681      	mov	r9, r0
 801133c:	2a00      	cmp	r2, #0
 801133e:	f000 80a1 	beq.w	8011484 <listen_message_reliably+0x164>
 8011342:	2600      	movs	r6, #0
 8011344:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011348:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801134c:	9303      	str	r3, [sp, #12]
 801134e:	4630      	mov	r0, r6
 8011350:	460f      	mov	r7, r1
 8011352:	e00f      	b.n	8011374 <listen_message_reliably+0x54>
 8011354:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011358:	9903      	ldr	r1, [sp, #12]
 801135a:	455a      	cmp	r2, fp
 801135c:	f106 0601 	add.w	r6, r6, #1
 8011360:	eb73 0101 	sbcs.w	r1, r3, r1
 8011364:	b2f0      	uxtb	r0, r6
 8011366:	da01      	bge.n	801136c <listen_message_reliably+0x4c>
 8011368:	4693      	mov	fp, r2
 801136a:	9303      	str	r3, [sp, #12]
 801136c:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011370:	4283      	cmp	r3, r0
 8011372:	d960      	bls.n	8011436 <listen_message_reliably+0x116>
 8011374:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011378:	2102      	movs	r1, #2
 801137a:	2201      	movs	r2, #1
 801137c:	f001 f9e6 	bl	801274c <uxr_stream_id>
 8011380:	00e4      	lsls	r4, r4, #3
 8011382:	f104 0520 	add.w	r5, r4, #32
 8011386:	4445      	add	r5, r8
 8011388:	4601      	mov	r1, r0
 801138a:	463b      	mov	r3, r7
 801138c:	464a      	mov	r2, r9
 801138e:	4628      	mov	r0, r5
 8011390:	9109      	str	r1, [sp, #36]	@ 0x24
 8011392:	f007 fb05 	bl	80189a0 <uxr_update_output_stream_heartbeat_timestamp>
 8011396:	eb08 0304 	add.w	r3, r8, r4
 801139a:	2800      	cmp	r0, #0
 801139c:	d0da      	beq.n	8011354 <listen_message_reliably+0x34>
 801139e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80113a2:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80113a6:	9304      	str	r3, [sp, #16]
 80113a8:	4640      	mov	r0, r8
 80113aa:	f000 fd05 	bl	8011db8 <uxr_session_header_offset>
 80113ae:	3501      	adds	r5, #1
 80113b0:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80113b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80113b8:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80113bc:	2300      	movs	r3, #0
 80113be:	2211      	movs	r2, #17
 80113c0:	9000      	str	r0, [sp, #0]
 80113c2:	a90c      	add	r1, sp, #48	@ 0x30
 80113c4:	4650      	mov	r0, sl
 80113c6:	f7fb fadd 	bl	800c984 <ucdr_init_buffer_origin_offset>
 80113ca:	2300      	movs	r3, #0
 80113cc:	2205      	movs	r2, #5
 80113ce:	210b      	movs	r1, #11
 80113d0:	4650      	mov	r0, sl
 80113d2:	f001 faf3 	bl	80129bc <uxr_buffer_submessage_header>
 80113d6:	8968      	ldrh	r0, [r5, #10]
 80113d8:	2101      	movs	r1, #1
 80113da:	f007 fba3 	bl	8018b24 <uxr_seq_num_add>
 80113de:	892b      	ldrh	r3, [r5, #8]
 80113e0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80113e4:	4602      	mov	r2, r0
 80113e6:	9b04      	ldr	r3, [sp, #16]
 80113e8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80113ec:	a90a      	add	r1, sp, #40	@ 0x28
 80113ee:	4650      	mov	r0, sl
 80113f0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80113f4:	f002 fc10 	bl	8013c18 <uxr_serialize_HEARTBEAT_Payload>
 80113f8:	2200      	movs	r2, #0
 80113fa:	4611      	mov	r1, r2
 80113fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80113fe:	4640      	mov	r0, r8
 8011400:	f000 fc84 	bl	8011d0c <uxr_stamp_session_header>
 8011404:	4650      	mov	r0, sl
 8011406:	f7fb fafb 	bl	800ca00 <ucdr_buffer_length>
 801140a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801140e:	4602      	mov	r2, r0
 8011410:	a90c      	add	r1, sp, #48	@ 0x30
 8011412:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011416:	4444      	add	r4, r8
 8011418:	47a8      	blx	r5
 801141a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801141e:	9903      	ldr	r1, [sp, #12]
 8011420:	455a      	cmp	r2, fp
 8011422:	f106 0601 	add.w	r6, r6, #1
 8011426:	eb73 0101 	sbcs.w	r1, r3, r1
 801142a:	b2f0      	uxtb	r0, r6
 801142c:	db9c      	blt.n	8011368 <listen_message_reliably+0x48>
 801142e:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011432:	4283      	cmp	r3, r0
 8011434:	d89e      	bhi.n	8011374 <listen_message_reliably+0x54>
 8011436:	9a03      	ldr	r2, [sp, #12]
 8011438:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801143c:	429a      	cmp	r2, r3
 801143e:	bf08      	it	eq
 8011440:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011444:	d01e      	beq.n	8011484 <listen_message_reliably+0x164>
 8011446:	ebab 0309 	sub.w	r3, fp, r9
 801144a:	9905      	ldr	r1, [sp, #20]
 801144c:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011450:	2b00      	cmp	r3, #0
 8011452:	bf08      	it	eq
 8011454:	2301      	moveq	r3, #1
 8011456:	4299      	cmp	r1, r3
 8011458:	bfa8      	it	ge
 801145a:	4619      	movge	r1, r3
 801145c:	6894      	ldr	r4, [r2, #8]
 801145e:	6810      	ldr	r0, [r2, #0]
 8011460:	4689      	mov	r9, r1
 8011462:	460b      	mov	r3, r1
 8011464:	aa08      	add	r2, sp, #32
 8011466:	a907      	add	r1, sp, #28
 8011468:	47a0      	blx	r4
 801146a:	b968      	cbnz	r0, 8011488 <listen_message_reliably+0x168>
 801146c:	9b05      	ldr	r3, [sp, #20]
 801146e:	eba3 0309 	sub.w	r3, r3, r9
 8011472:	2b00      	cmp	r3, #0
 8011474:	9305      	str	r3, [sp, #20]
 8011476:	f73f af5c 	bgt.w	8011332 <listen_message_reliably+0x12>
 801147a:	4604      	mov	r4, r0
 801147c:	4620      	mov	r0, r4
 801147e:	b01d      	add	sp, #116	@ 0x74
 8011480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011484:	9b05      	ldr	r3, [sp, #20]
 8011486:	e7e0      	b.n	801144a <listen_message_reliably+0x12a>
 8011488:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801148c:	4604      	mov	r4, r0
 801148e:	a80c      	add	r0, sp, #48	@ 0x30
 8011490:	f7fb fa8a 	bl	800c9a8 <ucdr_init_buffer>
 8011494:	2500      	movs	r5, #0
 8011496:	f10d 031a 	add.w	r3, sp, #26
 801149a:	aa06      	add	r2, sp, #24
 801149c:	a90c      	add	r1, sp, #48	@ 0x30
 801149e:	4640      	mov	r0, r8
 80114a0:	f88d 5018 	strb.w	r5, [sp, #24]
 80114a4:	f000 fc46 	bl	8011d34 <uxr_read_session_header>
 80114a8:	b918      	cbnz	r0, 80114b2 <listen_message_reliably+0x192>
 80114aa:	4620      	mov	r0, r4
 80114ac:	b01d      	add	sp, #116	@ 0x74
 80114ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b2:	4629      	mov	r1, r5
 80114b4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80114b8:	f001 f972 	bl	80127a0 <uxr_stream_id_from_raw>
 80114bc:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80114c0:	2d01      	cmp	r5, #1
 80114c2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80114c6:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80114ca:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80114ce:	d04b      	beq.n	8011568 <listen_message_reliably+0x248>
 80114d0:	2d02      	cmp	r5, #2
 80114d2:	d00f      	beq.n	80114f4 <listen_message_reliably+0x1d4>
 80114d4:	2d00      	cmp	r5, #0
 80114d6:	d1e8      	bne.n	80114aa <listen_message_reliably+0x18a>
 80114d8:	4629      	mov	r1, r5
 80114da:	4628      	mov	r0, r5
 80114dc:	f001 f960 	bl	80127a0 <uxr_stream_id_from_raw>
 80114e0:	a90c      	add	r1, sp, #48	@ 0x30
 80114e2:	4602      	mov	r2, r0
 80114e4:	4640      	mov	r0, r8
 80114e6:	920a      	str	r2, [sp, #40]	@ 0x28
 80114e8:	f7ff fd92 	bl	8011010 <read_submessage_list>
 80114ec:	4620      	mov	r0, r4
 80114ee:	b01d      	add	sp, #116	@ 0x74
 80114f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f4:	4631      	mov	r1, r6
 80114f6:	f108 0008 	add.w	r0, r8, #8
 80114fa:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80114fe:	f001 fa3d 	bl	801297c <uxr_get_input_reliable_stream>
 8011502:	4607      	mov	r7, r0
 8011504:	b338      	cbz	r0, 8011556 <listen_message_reliably+0x236>
 8011506:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011508:	9203      	str	r2, [sp, #12]
 801150a:	a80c      	add	r0, sp, #48	@ 0x30
 801150c:	f7fb fa7c 	bl	800ca08 <ucdr_buffer_remaining>
 8011510:	4603      	mov	r3, r0
 8011512:	f10d 0019 	add.w	r0, sp, #25
 8011516:	9000      	str	r0, [sp, #0]
 8011518:	9a03      	ldr	r2, [sp, #12]
 801151a:	4651      	mov	r1, sl
 801151c:	4638      	mov	r0, r7
 801151e:	f006 fe55 	bl	80181cc <uxr_receive_reliable_message>
 8011522:	b1c0      	cbz	r0, 8011556 <listen_message_reliably+0x236>
 8011524:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011528:	b393      	cbz	r3, 8011590 <listen_message_reliably+0x270>
 801152a:	ad14      	add	r5, sp, #80	@ 0x50
 801152c:	f04f 0a02 	mov.w	sl, #2
 8011530:	e00a      	b.n	8011548 <listen_message_reliably+0x228>
 8011532:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011536:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801153a:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801153e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011540:	4629      	mov	r1, r5
 8011542:	4640      	mov	r0, r8
 8011544:	f7ff fd64 	bl	8011010 <read_submessage_list>
 8011548:	2204      	movs	r2, #4
 801154a:	4629      	mov	r1, r5
 801154c:	4638      	mov	r0, r7
 801154e:	f006 febd 	bl	80182cc <uxr_next_input_reliable_buffer_available>
 8011552:	2800      	cmp	r0, #0
 8011554:	d1ed      	bne.n	8011532 <listen_message_reliably+0x212>
 8011556:	4640      	mov	r0, r8
 8011558:	4632      	mov	r2, r6
 801155a:	4649      	mov	r1, r9
 801155c:	f7ff fbc2 	bl	8010ce4 <write_submessage_acknack.isra.0>
 8011560:	4620      	mov	r0, r4
 8011562:	b01d      	add	sp, #116	@ 0x74
 8011564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011568:	4631      	mov	r1, r6
 801156a:	f108 0008 	add.w	r0, r8, #8
 801156e:	f001 f9fb 	bl	8012968 <uxr_get_input_best_effort_stream>
 8011572:	2800      	cmp	r0, #0
 8011574:	d099      	beq.n	80114aa <listen_message_reliably+0x18a>
 8011576:	4651      	mov	r1, sl
 8011578:	f006 fd94 	bl	80180a4 <uxr_receive_best_effort_message>
 801157c:	2800      	cmp	r0, #0
 801157e:	d094      	beq.n	80114aa <listen_message_reliably+0x18a>
 8011580:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011584:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011586:	a90c      	add	r1, sp, #48	@ 0x30
 8011588:	4640      	mov	r0, r8
 801158a:	f7ff fd41 	bl	8011010 <read_submessage_list>
 801158e:	e78c      	b.n	80114aa <listen_message_reliably+0x18a>
 8011590:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011594:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011596:	a90c      	add	r1, sp, #48	@ 0x30
 8011598:	4640      	mov	r0, r8
 801159a:	f7ff fd39 	bl	8011010 <read_submessage_list>
 801159e:	e7c4      	b.n	801152a <listen_message_reliably+0x20a>

080115a0 <uxr_run_session_timeout>:
 80115a0:	b570      	push	{r4, r5, r6, lr}
 80115a2:	4604      	mov	r4, r0
 80115a4:	460d      	mov	r5, r1
 80115a6:	f001 fa4f 	bl	8012a48 <uxr_millis>
 80115aa:	4606      	mov	r6, r0
 80115ac:	4620      	mov	r0, r4
 80115ae:	f7ff fc71 	bl	8010e94 <uxr_flash_output_streams>
 80115b2:	4629      	mov	r1, r5
 80115b4:	4620      	mov	r0, r4
 80115b6:	f7ff feb3 	bl	8011320 <listen_message_reliably>
 80115ba:	f001 fa45 	bl	8012a48 <uxr_millis>
 80115be:	1b83      	subs	r3, r0, r6
 80115c0:	1ae9      	subs	r1, r5, r3
 80115c2:	2900      	cmp	r1, #0
 80115c4:	dcf6      	bgt.n	80115b4 <uxr_run_session_timeout+0x14>
 80115c6:	f104 0008 	add.w	r0, r4, #8
 80115ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115ce:	f001 b9df 	b.w	8012990 <uxr_output_streams_confirmed>
 80115d2:	bf00      	nop

080115d4 <uxr_run_session_until_data>:
 80115d4:	b570      	push	{r4, r5, r6, lr}
 80115d6:	4604      	mov	r4, r0
 80115d8:	460d      	mov	r5, r1
 80115da:	f001 fa35 	bl	8012a48 <uxr_millis>
 80115de:	4606      	mov	r6, r0
 80115e0:	4620      	mov	r0, r4
 80115e2:	f7ff fc57 	bl	8010e94 <uxr_flash_output_streams>
 80115e6:	2300      	movs	r3, #0
 80115e8:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80115ec:	4629      	mov	r1, r5
 80115ee:	e005      	b.n	80115fc <uxr_run_session_until_data+0x28>
 80115f0:	f001 fa2a 	bl	8012a48 <uxr_millis>
 80115f4:	1b83      	subs	r3, r0, r6
 80115f6:	1ae9      	subs	r1, r5, r3
 80115f8:	2900      	cmp	r1, #0
 80115fa:	dd07      	ble.n	801160c <uxr_run_session_until_data+0x38>
 80115fc:	4620      	mov	r0, r4
 80115fe:	f7ff fe8f 	bl	8011320 <listen_message_reliably>
 8011602:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011606:	2800      	cmp	r0, #0
 8011608:	d0f2      	beq.n	80115f0 <uxr_run_session_until_data+0x1c>
 801160a:	bd70      	pop	{r4, r5, r6, pc}
 801160c:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011610:	bd70      	pop	{r4, r5, r6, pc}
 8011612:	bf00      	nop

08011614 <uxr_run_session_until_confirm_delivery>:
 8011614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011618:	4606      	mov	r6, r0
 801161a:	460d      	mov	r5, r1
 801161c:	f001 fa14 	bl	8012a48 <uxr_millis>
 8011620:	4607      	mov	r7, r0
 8011622:	4630      	mov	r0, r6
 8011624:	f7ff fc36 	bl	8010e94 <uxr_flash_output_streams>
 8011628:	2d00      	cmp	r5, #0
 801162a:	f106 0808 	add.w	r8, r6, #8
 801162e:	bfa8      	it	ge
 8011630:	462c      	movge	r4, r5
 8011632:	da07      	bge.n	8011644 <uxr_run_session_until_confirm_delivery+0x30>
 8011634:	e00e      	b.n	8011654 <uxr_run_session_until_confirm_delivery+0x40>
 8011636:	f7ff fe73 	bl	8011320 <listen_message_reliably>
 801163a:	f001 fa05 	bl	8012a48 <uxr_millis>
 801163e:	1bc3      	subs	r3, r0, r7
 8011640:	1aec      	subs	r4, r5, r3
 8011642:	d407      	bmi.n	8011654 <uxr_run_session_until_confirm_delivery+0x40>
 8011644:	4640      	mov	r0, r8
 8011646:	f001 f9a3 	bl	8012990 <uxr_output_streams_confirmed>
 801164a:	4603      	mov	r3, r0
 801164c:	4621      	mov	r1, r4
 801164e:	4630      	mov	r0, r6
 8011650:	2b00      	cmp	r3, #0
 8011652:	d0f0      	beq.n	8011636 <uxr_run_session_until_confirm_delivery+0x22>
 8011654:	4640      	mov	r0, r8
 8011656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801165a:	f001 b999 	b.w	8012990 <uxr_output_streams_confirmed>
 801165e:	bf00      	nop

08011660 <uxr_run_session_until_all_status>:
 8011660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011664:	9c08      	ldr	r4, [sp, #32]
 8011666:	4606      	mov	r6, r0
 8011668:	460f      	mov	r7, r1
 801166a:	4691      	mov	r9, r2
 801166c:	461d      	mov	r5, r3
 801166e:	f7ff fc11 	bl	8010e94 <uxr_flash_output_streams>
 8011672:	b124      	cbz	r4, 801167e <uxr_run_session_until_all_status+0x1e>
 8011674:	4622      	mov	r2, r4
 8011676:	21ff      	movs	r1, #255	@ 0xff
 8011678:	4628      	mov	r0, r5
 801167a:	f008 fb6b 	bl	8019d54 <memset>
 801167e:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8011682:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011684:	f001 f9e0 	bl	8012a48 <uxr_millis>
 8011688:	3d01      	subs	r5, #1
 801168a:	f1a9 0902 	sub.w	r9, r9, #2
 801168e:	4680      	mov	r8, r0
 8011690:	4639      	mov	r1, r7
 8011692:	4630      	mov	r0, r6
 8011694:	f7ff fe44 	bl	8011320 <listen_message_reliably>
 8011698:	f001 f9d6 	bl	8012a48 <uxr_millis>
 801169c:	eba0 0008 	sub.w	r0, r0, r8
 80116a0:	1a39      	subs	r1, r7, r0
 80116a2:	b344      	cbz	r4, 80116f6 <uxr_run_session_until_all_status+0x96>
 80116a4:	4628      	mov	r0, r5
 80116a6:	46ac      	mov	ip, r5
 80116a8:	2301      	movs	r3, #1
 80116aa:	e002      	b.n	80116b2 <uxr_run_session_until_all_status+0x52>
 80116ac:	42a3      	cmp	r3, r4
 80116ae:	d20d      	bcs.n	80116cc <uxr_run_session_until_all_status+0x6c>
 80116b0:	3301      	adds	r3, #1
 80116b2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80116b6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80116ba:	d1f7      	bne.n	80116ac <uxr_run_session_until_all_status+0x4c>
 80116bc:	42a3      	cmp	r3, r4
 80116be:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80116c2:	d213      	bcs.n	80116ec <uxr_run_session_until_all_status+0x8c>
 80116c4:	2a00      	cmp	r2, #0
 80116c6:	d0f3      	beq.n	80116b0 <uxr_run_session_until_all_status+0x50>
 80116c8:	2900      	cmp	r1, #0
 80116ca:	dce2      	bgt.n	8011692 <uxr_run_session_until_all_status+0x32>
 80116cc:	2300      	movs	r3, #0
 80116ce:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80116d0:	442c      	add	r4, r5
 80116d2:	e001      	b.n	80116d8 <uxr_run_session_until_all_status+0x78>
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	d812      	bhi.n	80116fe <uxr_run_session_until_all_status+0x9e>
 80116d8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80116dc:	4284      	cmp	r4, r0
 80116de:	d1f9      	bne.n	80116d4 <uxr_run_session_until_all_status+0x74>
 80116e0:	2b01      	cmp	r3, #1
 80116e2:	bf8c      	ite	hi
 80116e4:	2000      	movhi	r0, #0
 80116e6:	2001      	movls	r0, #1
 80116e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ec:	2900      	cmp	r1, #0
 80116ee:	dded      	ble.n	80116cc <uxr_run_session_until_all_status+0x6c>
 80116f0:	2a00      	cmp	r2, #0
 80116f2:	d1ce      	bne.n	8011692 <uxr_run_session_until_all_status+0x32>
 80116f4:	e7ea      	b.n	80116cc <uxr_run_session_until_all_status+0x6c>
 80116f6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80116f8:	2001      	movs	r0, #1
 80116fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116fe:	2000      	movs	r0, #0
 8011700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011704:	0000      	movs	r0, r0
	...

08011708 <uxr_sync_session>:
 8011708:	b5f0      	push	{r4, r5, r6, r7, lr}
 801170a:	b093      	sub	sp, #76	@ 0x4c
 801170c:	4604      	mov	r4, r0
 801170e:	460d      	mov	r5, r1
 8011710:	f000 fb52 	bl	8011db8 <uxr_session_header_offset>
 8011714:	2214      	movs	r2, #20
 8011716:	eb0d 0102 	add.w	r1, sp, r2
 801171a:	9000      	str	r0, [sp, #0]
 801171c:	2300      	movs	r3, #0
 801171e:	a80a      	add	r0, sp, #40	@ 0x28
 8011720:	f7fb f930 	bl	800c984 <ucdr_init_buffer_origin_offset>
 8011724:	2300      	movs	r3, #0
 8011726:	2208      	movs	r2, #8
 8011728:	210e      	movs	r1, #14
 801172a:	a80a      	add	r0, sp, #40	@ 0x28
 801172c:	f001 f946 	bl	80129bc <uxr_buffer_submessage_header>
 8011730:	f001 f9a4 	bl	8012a7c <uxr_nanos>
 8011734:	a31c      	add	r3, pc, #112	@ (adr r3, 80117a8 <uxr_sync_session+0xa0>)
 8011736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173a:	460e      	mov	r6, r1
 801173c:	4607      	mov	r7, r0
 801173e:	f7ef fa43 	bl	8000bc8 <__aeabi_ldivmod>
 8011742:	4631      	mov	r1, r6
 8011744:	9003      	str	r0, [sp, #12]
 8011746:	a318      	add	r3, pc, #96	@ (adr r3, 80117a8 <uxr_sync_session+0xa0>)
 8011748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174c:	4638      	mov	r0, r7
 801174e:	f7ef fa3b 	bl	8000bc8 <__aeabi_ldivmod>
 8011752:	a903      	add	r1, sp, #12
 8011754:	a80a      	add	r0, sp, #40	@ 0x28
 8011756:	9204      	str	r2, [sp, #16]
 8011758:	f002 fa84 	bl	8013c64 <uxr_serialize_TIMESTAMP_Payload>
 801175c:	2200      	movs	r2, #0
 801175e:	4611      	mov	r1, r2
 8011760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011762:	4620      	mov	r0, r4
 8011764:	f000 fad2 	bl	8011d0c <uxr_stamp_session_header>
 8011768:	a80a      	add	r0, sp, #40	@ 0x28
 801176a:	f7fb f949 	bl	800ca00 <ucdr_buffer_length>
 801176e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011770:	4602      	mov	r2, r0
 8011772:	a905      	add	r1, sp, #20
 8011774:	e9d3 0600 	ldrd	r0, r6, [r3]
 8011778:	47b0      	blx	r6
 801177a:	f001 f965 	bl	8012a48 <uxr_millis>
 801177e:	2300      	movs	r3, #0
 8011780:	4606      	mov	r6, r0
 8011782:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8011786:	4629      	mov	r1, r5
 8011788:	e000      	b.n	801178c <uxr_sync_session+0x84>
 801178a:	b950      	cbnz	r0, 80117a2 <uxr_sync_session+0x9a>
 801178c:	4620      	mov	r0, r4
 801178e:	f7ff fdc7 	bl	8011320 <listen_message_reliably>
 8011792:	f001 f959 	bl	8012a48 <uxr_millis>
 8011796:	1b83      	subs	r3, r0, r6
 8011798:	1ae9      	subs	r1, r5, r3
 801179a:	2900      	cmp	r1, #0
 801179c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80117a0:	dcf3      	bgt.n	801178a <uxr_sync_session+0x82>
 80117a2:	b013      	add	sp, #76	@ 0x4c
 80117a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117a6:	bf00      	nop
 80117a8:	3b9aca00 	.word	0x3b9aca00
 80117ac:	00000000 	.word	0x00000000

080117b0 <wait_session_status>:
 80117b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b4:	4604      	mov	r4, r0
 80117b6:	b09d      	sub	sp, #116	@ 0x74
 80117b8:	20ff      	movs	r0, #255	@ 0xff
 80117ba:	7160      	strb	r0, [r4, #5]
 80117bc:	9303      	str	r3, [sp, #12]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f000 80b6 	beq.w	8011930 <wait_session_status+0x180>
 80117c4:	468a      	mov	sl, r1
 80117c6:	4691      	mov	r9, r2
 80117c8:	f04f 0b00 	mov.w	fp, #0
 80117cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80117ce:	464a      	mov	r2, r9
 80117d0:	e9d3 0500 	ldrd	r0, r5, [r3]
 80117d4:	4651      	mov	r1, sl
 80117d6:	47a8      	blx	r5
 80117d8:	f001 f936 	bl	8012a48 <uxr_millis>
 80117dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80117e0:	4605      	mov	r5, r0
 80117e2:	e009      	b.n	80117f8 <wait_session_status+0x48>
 80117e4:	f001 f930 	bl	8012a48 <uxr_millis>
 80117e8:	1b40      	subs	r0, r0, r5
 80117ea:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	dd40      	ble.n	8011874 <wait_session_status+0xc4>
 80117f2:	7960      	ldrb	r0, [r4, #5]
 80117f4:	28ff      	cmp	r0, #255	@ 0xff
 80117f6:	d145      	bne.n	8011884 <wait_session_status+0xd4>
 80117f8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80117fa:	a908      	add	r1, sp, #32
 80117fc:	6896      	ldr	r6, [r2, #8]
 80117fe:	6810      	ldr	r0, [r2, #0]
 8011800:	aa09      	add	r2, sp, #36	@ 0x24
 8011802:	47b0      	blx	r6
 8011804:	2800      	cmp	r0, #0
 8011806:	d0ed      	beq.n	80117e4 <wait_session_status+0x34>
 8011808:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801180c:	a80c      	add	r0, sp, #48	@ 0x30
 801180e:	f7fb f8cb 	bl	800c9a8 <ucdr_init_buffer>
 8011812:	2600      	movs	r6, #0
 8011814:	f10d 031e 	add.w	r3, sp, #30
 8011818:	aa07      	add	r2, sp, #28
 801181a:	a90c      	add	r1, sp, #48	@ 0x30
 801181c:	4620      	mov	r0, r4
 801181e:	f88d 601c 	strb.w	r6, [sp, #28]
 8011822:	f000 fa87 	bl	8011d34 <uxr_read_session_header>
 8011826:	2800      	cmp	r0, #0
 8011828:	d0dc      	beq.n	80117e4 <wait_session_status+0x34>
 801182a:	4631      	mov	r1, r6
 801182c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011830:	f000 ffb6 	bl	80127a0 <uxr_stream_id_from_raw>
 8011834:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011838:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801183c:	9302      	str	r3, [sp, #8]
 801183e:	2f01      	cmp	r7, #1
 8011840:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011844:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011848:	d05c      	beq.n	8011904 <wait_session_status+0x154>
 801184a:	2f02      	cmp	r7, #2
 801184c:	d020      	beq.n	8011890 <wait_session_status+0xe0>
 801184e:	2f00      	cmp	r7, #0
 8011850:	d1c8      	bne.n	80117e4 <wait_session_status+0x34>
 8011852:	4639      	mov	r1, r7
 8011854:	4638      	mov	r0, r7
 8011856:	f000 ffa3 	bl	80127a0 <uxr_stream_id_from_raw>
 801185a:	a90c      	add	r1, sp, #48	@ 0x30
 801185c:	4602      	mov	r2, r0
 801185e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011860:	4620      	mov	r0, r4
 8011862:	f7ff fbd5 	bl	8011010 <read_submessage_list>
 8011866:	f001 f8ef 	bl	8012a48 <uxr_millis>
 801186a:	1b40      	subs	r0, r0, r5
 801186c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011870:	2b00      	cmp	r3, #0
 8011872:	dcbe      	bgt.n	80117f2 <wait_session_status+0x42>
 8011874:	9b03      	ldr	r3, [sp, #12]
 8011876:	7960      	ldrb	r0, [r4, #5]
 8011878:	f10b 0b01 	add.w	fp, fp, #1
 801187c:	455b      	cmp	r3, fp
 801187e:	d001      	beq.n	8011884 <wait_session_status+0xd4>
 8011880:	28ff      	cmp	r0, #255	@ 0xff
 8011882:	d0a3      	beq.n	80117cc <wait_session_status+0x1c>
 8011884:	38ff      	subs	r0, #255	@ 0xff
 8011886:	bf18      	it	ne
 8011888:	2001      	movne	r0, #1
 801188a:	b01d      	add	sp, #116	@ 0x74
 801188c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011890:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8011894:	9304      	str	r3, [sp, #16]
 8011896:	4631      	mov	r1, r6
 8011898:	f104 0008 	add.w	r0, r4, #8
 801189c:	f001 f86e 	bl	801297c <uxr_get_input_reliable_stream>
 80118a0:	4680      	mov	r8, r0
 80118a2:	b348      	cbz	r0, 80118f8 <wait_session_status+0x148>
 80118a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80118a6:	9205      	str	r2, [sp, #20]
 80118a8:	a80c      	add	r0, sp, #48	@ 0x30
 80118aa:	f7fb f8ad 	bl	800ca08 <ucdr_buffer_remaining>
 80118ae:	4603      	mov	r3, r0
 80118b0:	f10d 001d 	add.w	r0, sp, #29
 80118b4:	9000      	str	r0, [sp, #0]
 80118b6:	9a05      	ldr	r2, [sp, #20]
 80118b8:	9902      	ldr	r1, [sp, #8]
 80118ba:	4640      	mov	r0, r8
 80118bc:	f006 fc86 	bl	80181cc <uxr_receive_reliable_message>
 80118c0:	b1d0      	cbz	r0, 80118f8 <wait_session_status+0x148>
 80118c2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d03a      	beq.n	8011940 <wait_session_status+0x190>
 80118ca:	9f04      	ldr	r7, [sp, #16]
 80118cc:	e00a      	b.n	80118e4 <wait_session_status+0x134>
 80118ce:	f04f 0302 	mov.w	r3, #2
 80118d2:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80118d6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80118da:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80118de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80118e0:	f7ff fb96 	bl	8011010 <read_submessage_list>
 80118e4:	a914      	add	r1, sp, #80	@ 0x50
 80118e6:	2204      	movs	r2, #4
 80118e8:	4640      	mov	r0, r8
 80118ea:	f006 fcef 	bl	80182cc <uxr_next_input_reliable_buffer_available>
 80118ee:	4603      	mov	r3, r0
 80118f0:	a914      	add	r1, sp, #80	@ 0x50
 80118f2:	4620      	mov	r0, r4
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d1ea      	bne.n	80118ce <wait_session_status+0x11e>
 80118f8:	9904      	ldr	r1, [sp, #16]
 80118fa:	4632      	mov	r2, r6
 80118fc:	4620      	mov	r0, r4
 80118fe:	f7ff f9f1 	bl	8010ce4 <write_submessage_acknack.isra.0>
 8011902:	e76f      	b.n	80117e4 <wait_session_status+0x34>
 8011904:	4631      	mov	r1, r6
 8011906:	f104 0008 	add.w	r0, r4, #8
 801190a:	f001 f82d 	bl	8012968 <uxr_get_input_best_effort_stream>
 801190e:	2800      	cmp	r0, #0
 8011910:	f43f af68 	beq.w	80117e4 <wait_session_status+0x34>
 8011914:	9902      	ldr	r1, [sp, #8]
 8011916:	f006 fbc5 	bl	80180a4 <uxr_receive_best_effort_message>
 801191a:	2800      	cmp	r0, #0
 801191c:	f43f af62 	beq.w	80117e4 <wait_session_status+0x34>
 8011920:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011924:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011926:	a90c      	add	r1, sp, #48	@ 0x30
 8011928:	4620      	mov	r0, r4
 801192a:	f7ff fb71 	bl	8011010 <read_submessage_list>
 801192e:	e759      	b.n	80117e4 <wait_session_status+0x34>
 8011930:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011932:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011936:	47a0      	blx	r4
 8011938:	2001      	movs	r0, #1
 801193a:	b01d      	add	sp, #116	@ 0x74
 801193c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011940:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011944:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011946:	a90c      	add	r1, sp, #48	@ 0x30
 8011948:	4620      	mov	r0, r4
 801194a:	f7ff fb61 	bl	8011010 <read_submessage_list>
 801194e:	e7bc      	b.n	80118ca <wait_session_status+0x11a>

08011950 <uxr_delete_session_retries>:
 8011950:	b530      	push	{r4, r5, lr}
 8011952:	b08f      	sub	sp, #60	@ 0x3c
 8011954:	4604      	mov	r4, r0
 8011956:	460d      	mov	r5, r1
 8011958:	f000 fa2e 	bl	8011db8 <uxr_session_header_offset>
 801195c:	2300      	movs	r3, #0
 801195e:	2210      	movs	r2, #16
 8011960:	9000      	str	r0, [sp, #0]
 8011962:	a902      	add	r1, sp, #8
 8011964:	a806      	add	r0, sp, #24
 8011966:	f7fb f80d 	bl	800c984 <ucdr_init_buffer_origin_offset>
 801196a:	a906      	add	r1, sp, #24
 801196c:	4620      	mov	r0, r4
 801196e:	f000 f973 	bl	8011c58 <uxr_buffer_delete_session>
 8011972:	2200      	movs	r2, #0
 8011974:	4611      	mov	r1, r2
 8011976:	9b06      	ldr	r3, [sp, #24]
 8011978:	4620      	mov	r0, r4
 801197a:	f000 f9c7 	bl	8011d0c <uxr_stamp_session_header>
 801197e:	a806      	add	r0, sp, #24
 8011980:	f7fb f83e 	bl	800ca00 <ucdr_buffer_length>
 8011984:	462b      	mov	r3, r5
 8011986:	4602      	mov	r2, r0
 8011988:	a902      	add	r1, sp, #8
 801198a:	4620      	mov	r0, r4
 801198c:	f7ff ff10 	bl	80117b0 <wait_session_status>
 8011990:	b118      	cbz	r0, 801199a <uxr_delete_session_retries+0x4a>
 8011992:	7960      	ldrb	r0, [r4, #5]
 8011994:	fab0 f080 	clz	r0, r0
 8011998:	0940      	lsrs	r0, r0, #5
 801199a:	b00f      	add	sp, #60	@ 0x3c
 801199c:	bd30      	pop	{r4, r5, pc}
 801199e:	bf00      	nop

080119a0 <uxr_create_session>:
 80119a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a4:	f100 0b08 	add.w	fp, r0, #8
 80119a8:	b0ab      	sub	sp, #172	@ 0xac
 80119aa:	4604      	mov	r4, r0
 80119ac:	4658      	mov	r0, fp
 80119ae:	f000 ff2b 	bl	8012808 <uxr_reset_stream_storage>
 80119b2:	4620      	mov	r0, r4
 80119b4:	f000 fa00 	bl	8011db8 <uxr_session_header_offset>
 80119b8:	2300      	movs	r3, #0
 80119ba:	9000      	str	r0, [sp, #0]
 80119bc:	221c      	movs	r2, #28
 80119be:	a90b      	add	r1, sp, #44	@ 0x2c
 80119c0:	a812      	add	r0, sp, #72	@ 0x48
 80119c2:	f7fa ffdf 	bl	800c984 <ucdr_init_buffer_origin_offset>
 80119c6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80119c8:	8a1a      	ldrh	r2, [r3, #16]
 80119ca:	3a04      	subs	r2, #4
 80119cc:	b292      	uxth	r2, r2
 80119ce:	a912      	add	r1, sp, #72	@ 0x48
 80119d0:	4620      	mov	r0, r4
 80119d2:	f000 f917 	bl	8011c04 <uxr_buffer_create_session>
 80119d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80119d8:	4620      	mov	r0, r4
 80119da:	f000 f983 	bl	8011ce4 <uxr_stamp_create_session_header>
 80119de:	a812      	add	r0, sp, #72	@ 0x48
 80119e0:	f7fb f80e 	bl	800ca00 <ucdr_buffer_length>
 80119e4:	23ff      	movs	r3, #255	@ 0xff
 80119e6:	7163      	strb	r3, [r4, #5]
 80119e8:	230a      	movs	r3, #10
 80119ea:	46da      	mov	sl, fp
 80119ec:	9303      	str	r3, [sp, #12]
 80119ee:	4683      	mov	fp, r0
 80119f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80119f2:	465a      	mov	r2, fp
 80119f4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80119f8:	a90b      	add	r1, sp, #44	@ 0x2c
 80119fa:	47a8      	blx	r5
 80119fc:	f001 f824 	bl	8012a48 <uxr_millis>
 8011a00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011a04:	4605      	mov	r5, r0
 8011a06:	e009      	b.n	8011a1c <uxr_create_session+0x7c>
 8011a08:	f001 f81e 	bl	8012a48 <uxr_millis>
 8011a0c:	1b40      	subs	r0, r0, r5
 8011a0e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	7962      	ldrb	r2, [r4, #5]
 8011a16:	dd38      	ble.n	8011a8a <uxr_create_session+0xea>
 8011a18:	2aff      	cmp	r2, #255	@ 0xff
 8011a1a:	d13c      	bne.n	8011a96 <uxr_create_session+0xf6>
 8011a1c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011a1e:	a907      	add	r1, sp, #28
 8011a20:	6896      	ldr	r6, [r2, #8]
 8011a22:	6810      	ldr	r0, [r2, #0]
 8011a24:	aa08      	add	r2, sp, #32
 8011a26:	47b0      	blx	r6
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	d0ed      	beq.n	8011a08 <uxr_create_session+0x68>
 8011a2c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011a30:	a81a      	add	r0, sp, #104	@ 0x68
 8011a32:	f7fa ffb9 	bl	800c9a8 <ucdr_init_buffer>
 8011a36:	2600      	movs	r6, #0
 8011a38:	f10d 031a 	add.w	r3, sp, #26
 8011a3c:	aa06      	add	r2, sp, #24
 8011a3e:	a91a      	add	r1, sp, #104	@ 0x68
 8011a40:	4620      	mov	r0, r4
 8011a42:	f88d 6018 	strb.w	r6, [sp, #24]
 8011a46:	f000 f975 	bl	8011d34 <uxr_read_session_header>
 8011a4a:	2800      	cmp	r0, #0
 8011a4c:	d0dc      	beq.n	8011a08 <uxr_create_session+0x68>
 8011a4e:	4631      	mov	r1, r6
 8011a50:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011a54:	f000 fea4 	bl	80127a0 <uxr_stream_id_from_raw>
 8011a58:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011a5c:	2e01      	cmp	r6, #1
 8011a5e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011a62:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011a66:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011a6a:	d053      	beq.n	8011b14 <uxr_create_session+0x174>
 8011a6c:	2e02      	cmp	r6, #2
 8011a6e:	d018      	beq.n	8011aa2 <uxr_create_session+0x102>
 8011a70:	2e00      	cmp	r6, #0
 8011a72:	d1c9      	bne.n	8011a08 <uxr_create_session+0x68>
 8011a74:	4631      	mov	r1, r6
 8011a76:	4630      	mov	r0, r6
 8011a78:	f000 fe92 	bl	80127a0 <uxr_stream_id_from_raw>
 8011a7c:	a91a      	add	r1, sp, #104	@ 0x68
 8011a7e:	4602      	mov	r2, r0
 8011a80:	900a      	str	r0, [sp, #40]	@ 0x28
 8011a82:	4620      	mov	r0, r4
 8011a84:	f7ff fac4 	bl	8011010 <read_submessage_list>
 8011a88:	e7be      	b.n	8011a08 <uxr_create_session+0x68>
 8011a8a:	9b03      	ldr	r3, [sp, #12]
 8011a8c:	3b01      	subs	r3, #1
 8011a8e:	9303      	str	r3, [sp, #12]
 8011a90:	d001      	beq.n	8011a96 <uxr_create_session+0xf6>
 8011a92:	2aff      	cmp	r2, #255	@ 0xff
 8011a94:	d0ac      	beq.n	80119f0 <uxr_create_session+0x50>
 8011a96:	2a00      	cmp	r2, #0
 8011a98:	d051      	beq.n	8011b3e <uxr_create_session+0x19e>
 8011a9a:	2000      	movs	r0, #0
 8011a9c:	b02b      	add	sp, #172	@ 0xac
 8011a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011aa6:	9304      	str	r3, [sp, #16]
 8011aa8:	4639      	mov	r1, r7
 8011aaa:	4650      	mov	r0, sl
 8011aac:	f000 ff66 	bl	801297c <uxr_get_input_reliable_stream>
 8011ab0:	4680      	mov	r8, r0
 8011ab2:	b348      	cbz	r0, 8011b08 <uxr_create_session+0x168>
 8011ab4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011ab6:	9205      	str	r2, [sp, #20]
 8011ab8:	a81a      	add	r0, sp, #104	@ 0x68
 8011aba:	f7fa ffa5 	bl	800ca08 <ucdr_buffer_remaining>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	f10d 0019 	add.w	r0, sp, #25
 8011ac4:	9000      	str	r0, [sp, #0]
 8011ac6:	9a05      	ldr	r2, [sp, #20]
 8011ac8:	4649      	mov	r1, r9
 8011aca:	4640      	mov	r0, r8
 8011acc:	f006 fb7e 	bl	80181cc <uxr_receive_reliable_message>
 8011ad0:	b1d0      	cbz	r0, 8011b08 <uxr_create_session+0x168>
 8011ad2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d038      	beq.n	8011b4c <uxr_create_session+0x1ac>
 8011ada:	9e04      	ldr	r6, [sp, #16]
 8011adc:	e00a      	b.n	8011af4 <uxr_create_session+0x154>
 8011ade:	f04f 0302 	mov.w	r3, #2
 8011ae2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8011ae6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8011aea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011aee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011af0:	f7ff fa8e 	bl	8011010 <read_submessage_list>
 8011af4:	a922      	add	r1, sp, #136	@ 0x88
 8011af6:	2204      	movs	r2, #4
 8011af8:	4640      	mov	r0, r8
 8011afa:	f006 fbe7 	bl	80182cc <uxr_next_input_reliable_buffer_available>
 8011afe:	4603      	mov	r3, r0
 8011b00:	a922      	add	r1, sp, #136	@ 0x88
 8011b02:	4620      	mov	r0, r4
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d1ea      	bne.n	8011ade <uxr_create_session+0x13e>
 8011b08:	9904      	ldr	r1, [sp, #16]
 8011b0a:	463a      	mov	r2, r7
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	f7ff f8e9 	bl	8010ce4 <write_submessage_acknack.isra.0>
 8011b12:	e779      	b.n	8011a08 <uxr_create_session+0x68>
 8011b14:	4639      	mov	r1, r7
 8011b16:	4650      	mov	r0, sl
 8011b18:	f000 ff26 	bl	8012968 <uxr_get_input_best_effort_stream>
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	f43f af73 	beq.w	8011a08 <uxr_create_session+0x68>
 8011b22:	4649      	mov	r1, r9
 8011b24:	f006 fabe 	bl	80180a4 <uxr_receive_best_effort_message>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	f43f af6d 	beq.w	8011a08 <uxr_create_session+0x68>
 8011b2e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011b32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011b34:	a91a      	add	r1, sp, #104	@ 0x68
 8011b36:	4620      	mov	r0, r4
 8011b38:	f7ff fa6a 	bl	8011010 <read_submessage_list>
 8011b3c:	e764      	b.n	8011a08 <uxr_create_session+0x68>
 8011b3e:	4650      	mov	r0, sl
 8011b40:	f000 fe62 	bl	8012808 <uxr_reset_stream_storage>
 8011b44:	2001      	movs	r0, #1
 8011b46:	b02b      	add	sp, #172	@ 0xac
 8011b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b4c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011b50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011b52:	a91a      	add	r1, sp, #104	@ 0x68
 8011b54:	4620      	mov	r0, r4
 8011b56:	f7ff fa5b 	bl	8011010 <read_submessage_list>
 8011b5a:	e7be      	b.n	8011ada <uxr_create_session+0x13a>

08011b5c <uxr_prepare_stream_to_write_submessage>:
 8011b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b60:	b082      	sub	sp, #8
 8011b62:	4682      	mov	sl, r0
 8011b64:	4610      	mov	r0, r2
 8011b66:	4615      	mov	r5, r2
 8011b68:	461e      	mov	r6, r3
 8011b6a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011b6e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011b72:	9101      	str	r1, [sp, #4]
 8011b74:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011b78:	f000 ff60 	bl	8012a3c <uxr_submessage_padding>
 8011b7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011b80:	f105 0904 	add.w	r9, r5, #4
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	4481      	add	r9, r0
 8011b88:	d01d      	beq.n	8011bc6 <uxr_prepare_stream_to_write_submessage+0x6a>
 8011b8a:	2b02      	cmp	r3, #2
 8011b8c:	d116      	bne.n	8011bbc <uxr_prepare_stream_to_write_submessage+0x60>
 8011b8e:	4621      	mov	r1, r4
 8011b90:	f10a 0008 	add.w	r0, sl, #8
 8011b94:	f000 fede 	bl	8012954 <uxr_get_output_reliable_stream>
 8011b98:	4604      	mov	r4, r0
 8011b9a:	b158      	cbz	r0, 8011bb4 <uxr_prepare_stream_to_write_submessage+0x58>
 8011b9c:	4649      	mov	r1, r9
 8011b9e:	4632      	mov	r2, r6
 8011ba0:	f006 fd50 	bl	8018644 <uxr_prepare_reliable_buffer_to_write>
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	b12c      	cbz	r4, 8011bb4 <uxr_prepare_stream_to_write_submessage+0x58>
 8011ba8:	4643      	mov	r3, r8
 8011baa:	b2aa      	uxth	r2, r5
 8011bac:	4639      	mov	r1, r7
 8011bae:	4630      	mov	r0, r6
 8011bb0:	f000 ff04 	bl	80129bc <uxr_buffer_submessage_header>
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	b002      	add	sp, #8
 8011bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bbc:	2400      	movs	r4, #0
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	b002      	add	sp, #8
 8011bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bc6:	4621      	mov	r1, r4
 8011bc8:	f10a 0008 	add.w	r0, sl, #8
 8011bcc:	f000 feba 	bl	8012944 <uxr_get_output_best_effort_stream>
 8011bd0:	4604      	mov	r4, r0
 8011bd2:	2800      	cmp	r0, #0
 8011bd4:	d0ee      	beq.n	8011bb4 <uxr_prepare_stream_to_write_submessage+0x58>
 8011bd6:	4649      	mov	r1, r9
 8011bd8:	4632      	mov	r2, r6
 8011bda:	f006 fc63 	bl	80184a4 <uxr_prepare_best_effort_buffer_to_write>
 8011bde:	4604      	mov	r4, r0
 8011be0:	e7e1      	b.n	8011ba6 <uxr_prepare_stream_to_write_submessage+0x4a>
 8011be2:	bf00      	nop

08011be4 <uxr_init_session_info>:
 8011be4:	0e13      	lsrs	r3, r2, #24
 8011be6:	7043      	strb	r3, [r0, #1]
 8011be8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011bec:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011bf0:	7001      	strb	r1, [r0, #0]
 8011bf2:	70c3      	strb	r3, [r0, #3]
 8011bf4:	2109      	movs	r1, #9
 8011bf6:	23ff      	movs	r3, #255	@ 0xff
 8011bf8:	f880 c002 	strb.w	ip, [r0, #2]
 8011bfc:	7102      	strb	r2, [r0, #4]
 8011bfe:	80c1      	strh	r1, [r0, #6]
 8011c00:	7143      	strb	r3, [r0, #5]
 8011c02:	4770      	bx	lr

08011c04 <uxr_buffer_create_session>:
 8011c04:	b530      	push	{r4, r5, lr}
 8011c06:	b089      	sub	sp, #36	@ 0x24
 8011c08:	2300      	movs	r3, #0
 8011c0a:	4d12      	ldr	r5, [pc, #72]	@ (8011c54 <uxr_buffer_create_session+0x50>)
 8011c0c:	9307      	str	r3, [sp, #28]
 8011c0e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011c12:	2201      	movs	r2, #1
 8011c14:	9301      	str	r3, [sp, #4]
 8011c16:	80c2      	strh	r2, [r0, #6]
 8011c18:	f88d 2004 	strb.w	r2, [sp, #4]
 8011c1c:	682a      	ldr	r2, [r5, #0]
 8011c1e:	9200      	str	r2, [sp, #0]
 8011c20:	88aa      	ldrh	r2, [r5, #4]
 8011c22:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011c26:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011c2a:	9202      	str	r2, [sp, #8]
 8011c2c:	460c      	mov	r4, r1
 8011c2e:	7802      	ldrb	r2, [r0, #0]
 8011c30:	9303      	str	r3, [sp, #12]
 8011c32:	4619      	mov	r1, r3
 8011c34:	f88d 200c 	strb.w	r2, [sp, #12]
 8011c38:	4620      	mov	r0, r4
 8011c3a:	2210      	movs	r2, #16
 8011c3c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011c40:	9306      	str	r3, [sp, #24]
 8011c42:	f000 febb 	bl	80129bc <uxr_buffer_submessage_header>
 8011c46:	4669      	mov	r1, sp
 8011c48:	4620      	mov	r0, r4
 8011c4a:	f001 fe47 	bl	80138dc <uxr_serialize_CREATE_CLIENT_Payload>
 8011c4e:	b009      	add	sp, #36	@ 0x24
 8011c50:	bd30      	pop	{r4, r5, pc}
 8011c52:	bf00      	nop
 8011c54:	0801b388 	.word	0x0801b388

08011c58 <uxr_buffer_delete_session>:
 8011c58:	b510      	push	{r4, lr}
 8011c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8011c8c <uxr_buffer_delete_session+0x34>)
 8011c5c:	b082      	sub	sp, #8
 8011c5e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011c62:	f8ad c006 	strh.w	ip, [sp, #6]
 8011c66:	460c      	mov	r4, r1
 8011c68:	2202      	movs	r2, #2
 8011c6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011c6e:	80c2      	strh	r2, [r0, #6]
 8011c70:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011c74:	2204      	movs	r2, #4
 8011c76:	2300      	movs	r3, #0
 8011c78:	2103      	movs	r1, #3
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	f000 fe9e 	bl	80129bc <uxr_buffer_submessage_header>
 8011c80:	a901      	add	r1, sp, #4
 8011c82:	4620      	mov	r0, r4
 8011c84:	f001 fed0 	bl	8013a28 <uxr_serialize_DELETE_Payload>
 8011c88:	b002      	add	sp, #8
 8011c8a:	bd10      	pop	{r4, pc}
 8011c8c:	0801b388 	.word	0x0801b388

08011c90 <uxr_read_create_session_status>:
 8011c90:	b510      	push	{r4, lr}
 8011c92:	b088      	sub	sp, #32
 8011c94:	4604      	mov	r4, r0
 8011c96:	4608      	mov	r0, r1
 8011c98:	a901      	add	r1, sp, #4
 8011c9a:	f001 fed5 	bl	8013a48 <uxr_deserialize_STATUS_AGENT_Payload>
 8011c9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011ca2:	7163      	strb	r3, [r4, #5]
 8011ca4:	b008      	add	sp, #32
 8011ca6:	bd10      	pop	{r4, pc}

08011ca8 <uxr_read_delete_session_status>:
 8011ca8:	b510      	push	{r4, lr}
 8011caa:	4604      	mov	r4, r0
 8011cac:	b084      	sub	sp, #16
 8011cae:	4608      	mov	r0, r1
 8011cb0:	a902      	add	r1, sp, #8
 8011cb2:	f001 fef9 	bl	8013aa8 <uxr_deserialize_STATUS_Payload>
 8011cb6:	88e3      	ldrh	r3, [r4, #6]
 8011cb8:	2b02      	cmp	r3, #2
 8011cba:	d001      	beq.n	8011cc0 <uxr_read_delete_session_status+0x18>
 8011cbc:	b004      	add	sp, #16
 8011cbe:	bd10      	pop	{r4, pc}
 8011cc0:	f10d 000a 	add.w	r0, sp, #10
 8011cc4:	f7fe fe64 	bl	8010990 <uxr_object_id_from_raw>
 8011cc8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011ccc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011cd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	2b02      	cmp	r3, #2
 8011cd8:	bf04      	itt	eq
 8011cda:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011cde:	7163      	strbeq	r3, [r4, #5]
 8011ce0:	b004      	add	sp, #16
 8011ce2:	bd10      	pop	{r4, pc}

08011ce4 <uxr_stamp_create_session_header>:
 8011ce4:	b510      	push	{r4, lr}
 8011ce6:	2208      	movs	r2, #8
 8011ce8:	b08a      	sub	sp, #40	@ 0x28
 8011cea:	4604      	mov	r4, r0
 8011cec:	eb0d 0002 	add.w	r0, sp, r2
 8011cf0:	f7fa fe5a 	bl	800c9a8 <ucdr_init_buffer>
 8011cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cf8:	9400      	str	r4, [sp, #0]
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011d02:	a802      	add	r0, sp, #8
 8011d04:	f001 f854 	bl	8012db0 <uxr_serialize_message_header>
 8011d08:	b00a      	add	sp, #40	@ 0x28
 8011d0a:	bd10      	pop	{r4, pc}

08011d0c <uxr_stamp_session_header>:
 8011d0c:	b530      	push	{r4, r5, lr}
 8011d0e:	b08d      	sub	sp, #52	@ 0x34
 8011d10:	4604      	mov	r4, r0
 8011d12:	460d      	mov	r5, r1
 8011d14:	9203      	str	r2, [sp, #12]
 8011d16:	4619      	mov	r1, r3
 8011d18:	a804      	add	r0, sp, #16
 8011d1a:	2208      	movs	r2, #8
 8011d1c:	f7fa fe44 	bl	800c9a8 <ucdr_init_buffer>
 8011d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d24:	9b03      	ldr	r3, [sp, #12]
 8011d26:	9400      	str	r4, [sp, #0]
 8011d28:	462a      	mov	r2, r5
 8011d2a:	a804      	add	r0, sp, #16
 8011d2c:	f001 f840 	bl	8012db0 <uxr_serialize_message_header>
 8011d30:	b00d      	add	sp, #52	@ 0x34
 8011d32:	bd30      	pop	{r4, r5, pc}

08011d34 <uxr_read_session_header>:
 8011d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d38:	4607      	mov	r7, r0
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	4608      	mov	r0, r1
 8011d3e:	460c      	mov	r4, r1
 8011d40:	4615      	mov	r5, r2
 8011d42:	461e      	mov	r6, r3
 8011d44:	f7fa fe60 	bl	800ca08 <ucdr_buffer_remaining>
 8011d48:	2808      	cmp	r0, #8
 8011d4a:	d803      	bhi.n	8011d54 <uxr_read_session_header+0x20>
 8011d4c:	2000      	movs	r0, #0
 8011d4e:	b004      	add	sp, #16
 8011d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d54:	f10d 080c 	add.w	r8, sp, #12
 8011d58:	4633      	mov	r3, r6
 8011d5a:	462a      	mov	r2, r5
 8011d5c:	f8cd 8000 	str.w	r8, [sp]
 8011d60:	4620      	mov	r0, r4
 8011d62:	f10d 010b 	add.w	r1, sp, #11
 8011d66:	f001 f841 	bl	8012dec <uxr_deserialize_message_header>
 8011d6a:	783a      	ldrb	r2, [r7, #0]
 8011d6c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011d70:	4293      	cmp	r3, r2
 8011d72:	d1eb      	bne.n	8011d4c <uxr_read_session_header+0x18>
 8011d74:	061b      	lsls	r3, r3, #24
 8011d76:	d41c      	bmi.n	8011db2 <uxr_read_session_header+0x7e>
 8011d78:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011d7c:	787b      	ldrb	r3, [r7, #1]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d003      	beq.n	8011d8a <uxr_read_session_header+0x56>
 8011d82:	2001      	movs	r0, #1
 8011d84:	f080 0001 	eor.w	r0, r0, #1
 8011d88:	e7e1      	b.n	8011d4e <uxr_read_session_header+0x1a>
 8011d8a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011d8e:	78bb      	ldrb	r3, [r7, #2]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	f107 0102 	add.w	r1, r7, #2
 8011d96:	d1f4      	bne.n	8011d82 <uxr_read_session_header+0x4e>
 8011d98:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011d9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d1ee      	bne.n	8011d82 <uxr_read_session_header+0x4e>
 8011da4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011da8:	784b      	ldrb	r3, [r1, #1]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d1e9      	bne.n	8011d82 <uxr_read_session_header+0x4e>
 8011dae:	2000      	movs	r0, #0
 8011db0:	e7e8      	b.n	8011d84 <uxr_read_session_header+0x50>
 8011db2:	2001      	movs	r0, #1
 8011db4:	e7cb      	b.n	8011d4e <uxr_read_session_header+0x1a>
 8011db6:	bf00      	nop

08011db8 <uxr_session_header_offset>:
 8011db8:	f990 3000 	ldrsb.w	r3, [r0]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	bfac      	ite	ge
 8011dc0:	2008      	movge	r0, #8
 8011dc2:	2004      	movlt	r0, #4
 8011dc4:	4770      	bx	lr
 8011dc6:	bf00      	nop

08011dc8 <uxr_init_base_object_request>:
 8011dc8:	b510      	push	{r4, lr}
 8011dca:	88c3      	ldrh	r3, [r0, #6]
 8011dcc:	b082      	sub	sp, #8
 8011dce:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011dd2:	9101      	str	r1, [sp, #4]
 8011dd4:	f1a3 010a 	sub.w	r1, r3, #10
 8011dd8:	b289      	uxth	r1, r1
 8011dda:	42a1      	cmp	r1, r4
 8011ddc:	d80e      	bhi.n	8011dfc <uxr_init_base_object_request+0x34>
 8011dde:	3301      	adds	r3, #1
 8011de0:	b29c      	uxth	r4, r3
 8011de2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011de6:	b2db      	uxtb	r3, r3
 8011de8:	80c4      	strh	r4, [r0, #6]
 8011dea:	9801      	ldr	r0, [sp, #4]
 8011dec:	7011      	strb	r1, [r2, #0]
 8011dee:	7053      	strb	r3, [r2, #1]
 8011df0:	1c91      	adds	r1, r2, #2
 8011df2:	f7fe fde1 	bl	80109b8 <uxr_object_id_to_raw>
 8011df6:	4620      	mov	r0, r4
 8011df8:	b002      	add	sp, #8
 8011dfa:	bd10      	pop	{r4, pc}
 8011dfc:	230a      	movs	r3, #10
 8011dfe:	2100      	movs	r1, #0
 8011e00:	461c      	mov	r4, r3
 8011e02:	e7f1      	b.n	8011de8 <uxr_init_base_object_request+0x20>

08011e04 <uxr_parse_base_object_request>:
 8011e04:	b570      	push	{r4, r5, r6, lr}
 8011e06:	4604      	mov	r4, r0
 8011e08:	3002      	adds	r0, #2
 8011e0a:	460d      	mov	r5, r1
 8011e0c:	4616      	mov	r6, r2
 8011e0e:	f7fe fdbf 	bl	8010990 <uxr_object_id_from_raw>
 8011e12:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011e16:	8028      	strh	r0, [r5, #0]
 8011e18:	806b      	strh	r3, [r5, #2]
 8011e1a:	7822      	ldrb	r2, [r4, #0]
 8011e1c:	7863      	ldrb	r3, [r4, #1]
 8011e1e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011e22:	8033      	strh	r3, [r6, #0]
 8011e24:	bd70      	pop	{r4, r5, r6, pc}
 8011e26:	bf00      	nop

08011e28 <uxr_init_framing_io>:
 8011e28:	2300      	movs	r3, #0
 8011e2a:	7041      	strb	r1, [r0, #1]
 8011e2c:	7003      	strb	r3, [r0, #0]
 8011e2e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011e30:	4770      	bx	lr
 8011e32:	bf00      	nop

08011e34 <uxr_write_framed_msg>:
 8011e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e38:	4617      	mov	r7, r2
 8011e3a:	7842      	ldrb	r2, [r0, #1]
 8011e3c:	b083      	sub	sp, #12
 8011e3e:	460e      	mov	r6, r1
 8011e40:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011e44:	469a      	mov	sl, r3
 8011e46:	2901      	cmp	r1, #1
 8011e48:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011e4c:	4604      	mov	r4, r0
 8011e4e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011e52:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011e56:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011e5a:	f240 8137 	bls.w	80120cc <uxr_write_framed_msg+0x298>
 8011e5e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011e62:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011e66:	2901      	cmp	r1, #1
 8011e68:	f04f 0202 	mov.w	r2, #2
 8011e6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e70:	f240 808f 	bls.w	8011f92 <uxr_write_framed_msg+0x15e>
 8011e74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e76:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8011e7a:	b2dd      	uxtb	r5, r3
 8011e7c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011e80:	2203      	movs	r2, #3
 8011e82:	2901      	cmp	r1, #1
 8011e84:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e88:	f240 809a 	bls.w	8011fc0 <uxr_write_framed_msg+0x18c>
 8011e8c:	18a1      	adds	r1, r4, r2
 8011e8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e90:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011e94:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011e98:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011e9c:	3201      	adds	r2, #1
 8011e9e:	2801      	cmp	r0, #1
 8011ea0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ea4:	f240 80a0 	bls.w	8011fe8 <uxr_write_framed_msg+0x1b4>
 8011ea8:	18a0      	adds	r0, r4, r2
 8011eaa:	3201      	adds	r2, #1
 8011eac:	b2d2      	uxtb	r2, r2
 8011eae:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011eb2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	f000 80a9 	beq.w	801200e <uxr_write_framed_msg+0x1da>
 8011ebc:	f04f 0900 	mov.w	r9, #0
 8011ec0:	46c8      	mov	r8, r9
 8011ec2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011ec6:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011eca:	2901      	cmp	r1, #1
 8011ecc:	f240 80c3 	bls.w	8012056 <uxr_write_framed_msg+0x222>
 8011ed0:	2a29      	cmp	r2, #41	@ 0x29
 8011ed2:	f200 809f 	bhi.w	8012014 <uxr_write_framed_msg+0x1e0>
 8011ed6:	18a1      	adds	r1, r4, r2
 8011ed8:	3201      	adds	r2, #1
 8011eda:	b2d2      	uxtb	r2, r2
 8011edc:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011ee0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ee4:	ea89 0303 	eor.w	r3, r9, r3
 8011ee8:	498c      	ldr	r1, [pc, #560]	@ (801211c <uxr_write_framed_msg+0x2e8>)
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	f108 0801 	add.w	r8, r8, #1
 8011ef0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011ef4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011ef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011efa:	4543      	cmp	r3, r8
 8011efc:	d8e1      	bhi.n	8011ec2 <uxr_write_framed_msg+0x8e>
 8011efe:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011f02:	fa5f f889 	uxtb.w	r8, r9
 8011f06:	9301      	str	r3, [sp, #4]
 8011f08:	f04f 0900 	mov.w	r9, #0
 8011f0c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011f10:	fa5f f18a 	uxtb.w	r1, sl
 8011f14:	2901      	cmp	r1, #1
 8011f16:	d921      	bls.n	8011f5c <uxr_write_framed_msg+0x128>
 8011f18:	2a29      	cmp	r2, #41	@ 0x29
 8011f1a:	f240 80af 	bls.w	801207c <uxr_write_framed_msg+0x248>
 8011f1e:	2500      	movs	r5, #0
 8011f20:	e000      	b.n	8011f24 <uxr_write_framed_msg+0xf0>
 8011f22:	b160      	cbz	r0, 8011f3e <uxr_write_framed_msg+0x10a>
 8011f24:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011f28:	1b52      	subs	r2, r2, r5
 8011f2a:	465b      	mov	r3, fp
 8011f2c:	4421      	add	r1, r4
 8011f2e:	4638      	mov	r0, r7
 8011f30:	47b0      	blx	r6
 8011f32:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011f36:	4405      	add	r5, r0
 8011f38:	4295      	cmp	r5, r2
 8011f3a:	d3f2      	bcc.n	8011f22 <uxr_write_framed_msg+0xee>
 8011f3c:	d003      	beq.n	8011f46 <uxr_write_framed_msg+0x112>
 8011f3e:	2000      	movs	r0, #0
 8011f40:	b003      	add	sp, #12
 8011f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f46:	fa5f f18a 	uxtb.w	r1, sl
 8011f4a:	f04f 0300 	mov.w	r3, #0
 8011f4e:	2901      	cmp	r1, #1
 8011f50:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011f54:	f04f 0200 	mov.w	r2, #0
 8011f58:	f200 8090 	bhi.w	801207c <uxr_write_framed_msg+0x248>
 8011f5c:	1c51      	adds	r1, r2, #1
 8011f5e:	b2c9      	uxtb	r1, r1
 8011f60:	2929      	cmp	r1, #41	@ 0x29
 8011f62:	d8dc      	bhi.n	8011f1e <uxr_write_framed_msg+0xea>
 8011f64:	18a5      	adds	r5, r4, r2
 8011f66:	4421      	add	r1, r4
 8011f68:	3202      	adds	r2, #2
 8011f6a:	f088 0820 	eor.w	r8, r8, #32
 8011f6e:	4648      	mov	r0, r9
 8011f70:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011f74:	b2d2      	uxtb	r2, r2
 8011f76:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8011f7a:	f04f 0901 	mov.w	r9, #1
 8011f7e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011f82:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f86:	2800      	cmp	r0, #0
 8011f88:	f040 8085 	bne.w	8012096 <uxr_write_framed_msg+0x262>
 8011f8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f90:	e7bc      	b.n	8011f0c <uxr_write_framed_msg+0xd8>
 8011f92:	4611      	mov	r1, r2
 8011f94:	f04f 0c03 	mov.w	ip, #3
 8011f98:	2204      	movs	r2, #4
 8011f9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f9c:	4421      	add	r1, r4
 8011f9e:	b2dd      	uxtb	r5, r3
 8011fa0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011fa4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011fa8:	44a4      	add	ip, r4
 8011faa:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011fae:	f080 0020 	eor.w	r0, r0, #32
 8011fb2:	2901      	cmp	r1, #1
 8011fb4:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011fb8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011fbc:	f63f af66 	bhi.w	8011e8c <uxr_write_framed_msg+0x58>
 8011fc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011fc2:	18a0      	adds	r0, r4, r2
 8011fc4:	f085 0520 	eor.w	r5, r5, #32
 8011fc8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011fcc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011fd0:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8011fd4:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8011fd8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011fdc:	3202      	adds	r2, #2
 8011fde:	2801      	cmp	r0, #1
 8011fe0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011fe4:	f63f af60 	bhi.w	8011ea8 <uxr_write_framed_msg+0x74>
 8011fe8:	1c50      	adds	r0, r2, #1
 8011fea:	18a5      	adds	r5, r4, r2
 8011fec:	fa54 f080 	uxtab	r0, r4, r0
 8011ff0:	3202      	adds	r2, #2
 8011ff2:	f081 0120 	eor.w	r1, r1, #32
 8011ff6:	b2d2      	uxtb	r2, r2
 8011ff8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011ffc:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8012000:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8012004:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012008:	2b00      	cmp	r3, #0
 801200a:	f47f af57 	bne.w	8011ebc <uxr_write_framed_msg+0x88>
 801200e:	9301      	str	r3, [sp, #4]
 8012010:	4698      	mov	r8, r3
 8012012:	e779      	b.n	8011f08 <uxr_write_framed_msg+0xd4>
 8012014:	2500      	movs	r5, #0
 8012016:	e001      	b.n	801201c <uxr_write_framed_msg+0x1e8>
 8012018:	2800      	cmp	r0, #0
 801201a:	d090      	beq.n	8011f3e <uxr_write_framed_msg+0x10a>
 801201c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012020:	1b52      	subs	r2, r2, r5
 8012022:	465b      	mov	r3, fp
 8012024:	4421      	add	r1, r4
 8012026:	4638      	mov	r0, r7
 8012028:	47b0      	blx	r6
 801202a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801202e:	4405      	add	r5, r0
 8012030:	4295      	cmp	r5, r2
 8012032:	d3f1      	bcc.n	8012018 <uxr_write_framed_msg+0x1e4>
 8012034:	d183      	bne.n	8011f3e <uxr_write_framed_msg+0x10a>
 8012036:	f04f 0300 	mov.w	r3, #0
 801203a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801203e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012040:	4543      	cmp	r3, r8
 8012042:	d964      	bls.n	801210e <uxr_write_framed_msg+0x2da>
 8012044:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8012048:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801204c:	2901      	cmp	r1, #1
 801204e:	f04f 0200 	mov.w	r2, #0
 8012052:	f63f af3d 	bhi.w	8011ed0 <uxr_write_framed_msg+0x9c>
 8012056:	1c51      	adds	r1, r2, #1
 8012058:	b2c9      	uxtb	r1, r1
 801205a:	2929      	cmp	r1, #41	@ 0x29
 801205c:	d8da      	bhi.n	8012014 <uxr_write_framed_msg+0x1e0>
 801205e:	18a0      	adds	r0, r4, r2
 8012060:	4421      	add	r1, r4
 8012062:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8012066:	3202      	adds	r2, #2
 8012068:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801206c:	b2d2      	uxtb	r2, r2
 801206e:	f083 0020 	eor.w	r0, r3, #32
 8012072:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8012076:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801207a:	e733      	b.n	8011ee4 <uxr_write_framed_msg+0xb0>
 801207c:	18a1      	adds	r1, r4, r2
 801207e:	3201      	adds	r2, #1
 8012080:	4648      	mov	r0, r9
 8012082:	b2d2      	uxtb	r2, r2
 8012084:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8012088:	f04f 0901 	mov.w	r9, #1
 801208c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012090:	2800      	cmp	r0, #0
 8012092:	f43f af7b 	beq.w	8011f8c <uxr_write_framed_msg+0x158>
 8012096:	2500      	movs	r5, #0
 8012098:	e002      	b.n	80120a0 <uxr_write_framed_msg+0x26c>
 801209a:	2800      	cmp	r0, #0
 801209c:	f43f af4f 	beq.w	8011f3e <uxr_write_framed_msg+0x10a>
 80120a0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80120a4:	1b52      	subs	r2, r2, r5
 80120a6:	465b      	mov	r3, fp
 80120a8:	4421      	add	r1, r4
 80120aa:	4638      	mov	r0, r7
 80120ac:	47b0      	blx	r6
 80120ae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80120b2:	4405      	add	r5, r0
 80120b4:	4295      	cmp	r5, r2
 80120b6:	d3f0      	bcc.n	801209a <uxr_write_framed_msg+0x266>
 80120b8:	f47f af41 	bne.w	8011f3e <uxr_write_framed_msg+0x10a>
 80120bc:	2300      	movs	r3, #0
 80120be:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80120c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120c4:	b298      	uxth	r0, r3
 80120c6:	b003      	add	sp, #12
 80120c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120cc:	217d      	movs	r1, #125	@ 0x7d
 80120ce:	f082 0220 	eor.w	r2, r2, #32
 80120d2:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80120d6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80120da:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80120de:	2901      	cmp	r1, #1
 80120e0:	f04f 0203 	mov.w	r2, #3
 80120e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80120e8:	d804      	bhi.n	80120f4 <uxr_write_framed_msg+0x2c0>
 80120ea:	4611      	mov	r1, r2
 80120ec:	f04f 0c04 	mov.w	ip, #4
 80120f0:	2205      	movs	r2, #5
 80120f2:	e752      	b.n	8011f9a <uxr_write_framed_msg+0x166>
 80120f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120f6:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80120fa:	b2dd      	uxtb	r5, r3
 80120fc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012100:	2204      	movs	r2, #4
 8012102:	2901      	cmp	r1, #1
 8012104:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012108:	f63f aec0 	bhi.w	8011e8c <uxr_write_framed_msg+0x58>
 801210c:	e758      	b.n	8011fc0 <uxr_write_framed_msg+0x18c>
 801210e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8012112:	fa5f f889 	uxtb.w	r8, r9
 8012116:	9301      	str	r3, [sp, #4]
 8012118:	2200      	movs	r2, #0
 801211a:	e6f5      	b.n	8011f08 <uxr_write_framed_msg+0xd4>
 801211c:	0801c1ac 	.word	0x0801c1ac

08012120 <uxr_framing_read_transport>:
 8012120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012124:	4604      	mov	r4, r0
 8012126:	b083      	sub	sp, #12
 8012128:	461f      	mov	r7, r3
 801212a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801212e:	4689      	mov	r9, r1
 8012130:	4692      	mov	sl, r2
 8012132:	f000 fc89 	bl	8012a48 <uxr_millis>
 8012136:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801213a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801213e:	42b3      	cmp	r3, r6
 8012140:	4680      	mov	r8, r0
 8012142:	d061      	beq.n	8012208 <uxr_framing_read_transport+0xe8>
 8012144:	d81c      	bhi.n	8012180 <uxr_framing_read_transport+0x60>
 8012146:	1e75      	subs	r5, r6, #1
 8012148:	1aed      	subs	r5, r5, r3
 801214a:	b2ed      	uxtb	r5, r5
 801214c:	2600      	movs	r6, #0
 801214e:	455d      	cmp	r5, fp
 8012150:	d81f      	bhi.n	8012192 <uxr_framing_read_transport+0x72>
 8012152:	19ab      	adds	r3, r5, r6
 8012154:	455b      	cmp	r3, fp
 8012156:	bf84      	itt	hi
 8012158:	ebab 0605 	subhi.w	r6, fp, r5
 801215c:	b2f6      	uxtbhi	r6, r6
 801215e:	b9ed      	cbnz	r5, 801219c <uxr_framing_read_transport+0x7c>
 8012160:	f04f 0b00 	mov.w	fp, #0
 8012164:	f000 fc70 	bl	8012a48 <uxr_millis>
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	eba0 0808 	sub.w	r8, r0, r8
 801216e:	eba3 0308 	sub.w	r3, r3, r8
 8012172:	4658      	mov	r0, fp
 8012174:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012178:	603b      	str	r3, [r7, #0]
 801217a:	b003      	add	sp, #12
 801217c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012180:	2e00      	cmp	r6, #0
 8012182:	d049      	beq.n	8012218 <uxr_framing_read_transport+0xf8>
 8012184:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8012188:	b2ed      	uxtb	r5, r5
 801218a:	3e01      	subs	r6, #1
 801218c:	455d      	cmp	r5, fp
 801218e:	b2f6      	uxtb	r6, r6
 8012190:	d9df      	bls.n	8012152 <uxr_framing_read_transport+0x32>
 8012192:	fa5f f58b 	uxtb.w	r5, fp
 8012196:	2600      	movs	r6, #0
 8012198:	2d00      	cmp	r5, #0
 801219a:	d0e1      	beq.n	8012160 <uxr_framing_read_transport+0x40>
 801219c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80121a0:	3102      	adds	r1, #2
 80121a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121a4:	9300      	str	r3, [sp, #0]
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	4421      	add	r1, r4
 80121aa:	462a      	mov	r2, r5
 80121ac:	4650      	mov	r0, sl
 80121ae:	47c8      	blx	r9
 80121b0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80121b4:	4a1a      	ldr	r2, [pc, #104]	@ (8012220 <uxr_framing_read_transport+0x100>)
 80121b6:	4403      	add	r3, r0
 80121b8:	0859      	lsrs	r1, r3, #1
 80121ba:	fba2 2101 	umull	r2, r1, r2, r1
 80121be:	0889      	lsrs	r1, r1, #2
 80121c0:	222a      	movs	r2, #42	@ 0x2a
 80121c2:	fb02 3111 	mls	r1, r2, r1, r3
 80121c6:	4683      	mov	fp, r0
 80121c8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80121cc:	2800      	cmp	r0, #0
 80121ce:	d0c7      	beq.n	8012160 <uxr_framing_read_transport+0x40>
 80121d0:	42a8      	cmp	r0, r5
 80121d2:	d1c7      	bne.n	8012164 <uxr_framing_read_transport+0x44>
 80121d4:	2e00      	cmp	r6, #0
 80121d6:	d0c5      	beq.n	8012164 <uxr_framing_read_transport+0x44>
 80121d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121da:	9300      	str	r3, [sp, #0]
 80121dc:	3102      	adds	r1, #2
 80121de:	4632      	mov	r2, r6
 80121e0:	4421      	add	r1, r4
 80121e2:	2300      	movs	r3, #0
 80121e4:	4650      	mov	r0, sl
 80121e6:	47c8      	blx	r9
 80121e8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80121ec:	4a0c      	ldr	r2, [pc, #48]	@ (8012220 <uxr_framing_read_transport+0x100>)
 80121ee:	180b      	adds	r3, r1, r0
 80121f0:	0859      	lsrs	r1, r3, #1
 80121f2:	fba2 1201 	umull	r1, r2, r2, r1
 80121f6:	0892      	lsrs	r2, r2, #2
 80121f8:	212a      	movs	r1, #42	@ 0x2a
 80121fa:	fb01 3312 	mls	r3, r1, r2, r3
 80121fe:	eb00 0b05 	add.w	fp, r0, r5
 8012202:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012206:	e7ad      	b.n	8012164 <uxr_framing_read_transport+0x44>
 8012208:	2600      	movs	r6, #0
 801220a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801220e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012210:	d9bf      	bls.n	8012192 <uxr_framing_read_transport+0x72>
 8012212:	2102      	movs	r1, #2
 8012214:	2529      	movs	r5, #41	@ 0x29
 8012216:	e7c4      	b.n	80121a2 <uxr_framing_read_transport+0x82>
 8012218:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801221c:	b2ed      	uxtb	r5, r5
 801221e:	e796      	b.n	801214e <uxr_framing_read_transport+0x2e>
 8012220:	30c30c31 	.word	0x30c30c31

08012224 <uxr_read_framed_msg>:
 8012224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012228:	461e      	mov	r6, r3
 801222a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801222e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8012232:	429d      	cmp	r5, r3
 8012234:	b083      	sub	sp, #12
 8012236:	4604      	mov	r4, r0
 8012238:	4688      	mov	r8, r1
 801223a:	4691      	mov	r9, r2
 801223c:	f000 8188 	beq.w	8012550 <uxr_read_framed_msg+0x32c>
 8012240:	7823      	ldrb	r3, [r4, #0]
 8012242:	4dc1      	ldr	r5, [pc, #772]	@ (8012548 <uxr_read_framed_msg+0x324>)
 8012244:	4fc1      	ldr	r7, [pc, #772]	@ (801254c <uxr_read_framed_msg+0x328>)
 8012246:	2b07      	cmp	r3, #7
 8012248:	d8fd      	bhi.n	8012246 <uxr_read_framed_msg+0x22>
 801224a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801224e:	0115      	.short	0x0115
 8012250:	00d600f6 	.word	0x00d600f6
 8012254:	009000b9 	.word	0x009000b9
 8012258:	0030004d 	.word	0x0030004d
 801225c:	0008      	.short	0x0008
 801225e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012262:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012266:	4299      	cmp	r1, r3
 8012268:	f000 814a 	beq.w	8012500 <uxr_read_framed_msg+0x2dc>
 801226c:	18e2      	adds	r2, r4, r3
 801226e:	7892      	ldrb	r2, [r2, #2]
 8012270:	2a7d      	cmp	r2, #125	@ 0x7d
 8012272:	f000 8199 	beq.w	80125a8 <uxr_read_framed_msg+0x384>
 8012276:	3301      	adds	r3, #1
 8012278:	0858      	lsrs	r0, r3, #1
 801227a:	fba5 1000 	umull	r1, r0, r5, r0
 801227e:	0880      	lsrs	r0, r0, #2
 8012280:	212a      	movs	r1, #42	@ 0x2a
 8012282:	fb01 3310 	mls	r3, r1, r0, r3
 8012286:	2a7e      	cmp	r2, #126	@ 0x7e
 8012288:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801228c:	f000 8252 	beq.w	8012734 <uxr_read_framed_msg+0x510>
 8012290:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8012292:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8012294:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012298:	b29b      	uxth	r3, r3
 801229a:	2200      	movs	r2, #0
 801229c:	4299      	cmp	r1, r3
 801229e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80122a0:	7022      	strb	r2, [r4, #0]
 80122a2:	f000 8179 	beq.w	8012598 <uxr_read_framed_msg+0x374>
 80122a6:	2000      	movs	r0, #0
 80122a8:	b003      	add	sp, #12
 80122aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ae:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80122b2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80122b6:	4299      	cmp	r1, r3
 80122b8:	f000 8131 	beq.w	801251e <uxr_read_framed_msg+0x2fa>
 80122bc:	18e2      	adds	r2, r4, r3
 80122be:	7890      	ldrb	r0, [r2, #2]
 80122c0:	287d      	cmp	r0, #125	@ 0x7d
 80122c2:	f000 8190 	beq.w	80125e6 <uxr_read_framed_msg+0x3c2>
 80122c6:	3301      	adds	r3, #1
 80122c8:	085a      	lsrs	r2, r3, #1
 80122ca:	fba5 1202 	umull	r1, r2, r5, r2
 80122ce:	0892      	lsrs	r2, r2, #2
 80122d0:	212a      	movs	r1, #42	@ 0x2a
 80122d2:	fb01 3312 	mls	r3, r1, r2, r3
 80122d6:	287e      	cmp	r0, #126	@ 0x7e
 80122d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80122dc:	f000 821a 	beq.w	8012714 <uxr_read_framed_msg+0x4f0>
 80122e0:	2307      	movs	r3, #7
 80122e2:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80122e4:	7023      	strb	r3, [r4, #0]
 80122e6:	e7ae      	b.n	8012246 <uxr_read_framed_msg+0x22>
 80122e8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80122ea:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80122ee:	459e      	cmp	lr, r3
 80122f0:	d938      	bls.n	8012364 <uxr_read_framed_msg+0x140>
 80122f2:	ee07 8a90 	vmov	s15, r8
 80122f6:	212a      	movs	r1, #42	@ 0x2a
 80122f8:	e020      	b.n	801233c <uxr_read_framed_msg+0x118>
 80122fa:	f89b c002 	ldrb.w	ip, [fp, #2]
 80122fe:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012302:	f000 80d4 	beq.w	80124ae <uxr_read_framed_msg+0x28a>
 8012306:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801230a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801230e:	f000 8219 	beq.w	8012744 <uxr_read_framed_msg+0x520>
 8012312:	f806 c003 	strb.w	ip, [r6, r3]
 8012316:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801231a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801231c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012320:	ea8a 000c 	eor.w	r0, sl, ip
 8012324:	b2c0      	uxtb	r0, r0
 8012326:	3301      	adds	r3, #1
 8012328:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801232c:	b29b      	uxth	r3, r3
 801232e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8012332:	4573      	cmp	r3, lr
 8012334:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012336:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012338:	f080 8120 	bcs.w	801257c <uxr_read_framed_msg+0x358>
 801233c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012340:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012344:	f100 0c01 	add.w	ip, r0, #1
 8012348:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801234c:	fba5 8202 	umull	r8, r2, r5, r2
 8012350:	0892      	lsrs	r2, r2, #2
 8012352:	4582      	cmp	sl, r0
 8012354:	eb04 0b00 	add.w	fp, r4, r0
 8012358:	fb01 c212 	mls	r2, r1, r2, ip
 801235c:	d1cd      	bne.n	80122fa <uxr_read_framed_msg+0xd6>
 801235e:	ee17 8a90 	vmov	r8, s15
 8012362:	459e      	cmp	lr, r3
 8012364:	f040 8111 	bne.w	801258a <uxr_read_framed_msg+0x366>
 8012368:	2306      	movs	r3, #6
 801236a:	7023      	strb	r3, [r4, #0]
 801236c:	e76b      	b.n	8012246 <uxr_read_framed_msg+0x22>
 801236e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012372:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012376:	4298      	cmp	r0, r3
 8012378:	f000 80c2 	beq.w	8012500 <uxr_read_framed_msg+0x2dc>
 801237c:	18e2      	adds	r2, r4, r3
 801237e:	7891      	ldrb	r1, [r2, #2]
 8012380:	297d      	cmp	r1, #125	@ 0x7d
 8012382:	f000 814c 	beq.w	801261e <uxr_read_framed_msg+0x3fa>
 8012386:	3301      	adds	r3, #1
 8012388:	085a      	lsrs	r2, r3, #1
 801238a:	fba5 0202 	umull	r0, r2, r5, r2
 801238e:	0892      	lsrs	r2, r2, #2
 8012390:	202a      	movs	r0, #42	@ 0x2a
 8012392:	fb00 3312 	mls	r3, r0, r2, r3
 8012396:	297e      	cmp	r1, #126	@ 0x7e
 8012398:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801239c:	f000 81ca 	beq.w	8012734 <uxr_read_framed_msg+0x510>
 80123a0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80123a2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80123a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	2000      	movs	r0, #0
 80123ac:	428b      	cmp	r3, r1
 80123ae:	8623      	strh	r3, [r4, #48]	@ 0x30
 80123b0:	8660      	strh	r0, [r4, #50]	@ 0x32
 80123b2:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80123b4:	f240 80df 	bls.w	8012576 <uxr_read_framed_msg+0x352>
 80123b8:	7020      	strb	r0, [r4, #0]
 80123ba:	b003      	add	sp, #12
 80123bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123c0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80123c4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80123c8:	4299      	cmp	r1, r3
 80123ca:	f000 80a8 	beq.w	801251e <uxr_read_framed_msg+0x2fa>
 80123ce:	18e2      	adds	r2, r4, r3
 80123d0:	7890      	ldrb	r0, [r2, #2]
 80123d2:	287d      	cmp	r0, #125	@ 0x7d
 80123d4:	f000 8164 	beq.w	80126a0 <uxr_read_framed_msg+0x47c>
 80123d8:	3301      	adds	r3, #1
 80123da:	085a      	lsrs	r2, r3, #1
 80123dc:	fba5 1202 	umull	r1, r2, r5, r2
 80123e0:	0892      	lsrs	r2, r2, #2
 80123e2:	212a      	movs	r1, #42	@ 0x2a
 80123e4:	fb01 3312 	mls	r3, r1, r2, r3
 80123e8:	287e      	cmp	r0, #126	@ 0x7e
 80123ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80123ee:	f000 8191 	beq.w	8012714 <uxr_read_framed_msg+0x4f0>
 80123f2:	2304      	movs	r3, #4
 80123f4:	8620      	strh	r0, [r4, #48]	@ 0x30
 80123f6:	7023      	strb	r3, [r4, #0]
 80123f8:	e725      	b.n	8012246 <uxr_read_framed_msg+0x22>
 80123fa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80123fe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012402:	4290      	cmp	r0, r2
 8012404:	f000 80b3 	beq.w	801256e <uxr_read_framed_msg+0x34a>
 8012408:	18a3      	adds	r3, r4, r2
 801240a:	7899      	ldrb	r1, [r3, #2]
 801240c:	297d      	cmp	r1, #125	@ 0x7d
 801240e:	f000 8164 	beq.w	80126da <uxr_read_framed_msg+0x4b6>
 8012412:	3201      	adds	r2, #1
 8012414:	0850      	lsrs	r0, r2, #1
 8012416:	fba5 3000 	umull	r3, r0, r5, r0
 801241a:	0880      	lsrs	r0, r0, #2
 801241c:	232a      	movs	r3, #42	@ 0x2a
 801241e:	fb03 2210 	mls	r2, r3, r0, r2
 8012422:	297e      	cmp	r1, #126	@ 0x7e
 8012424:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012428:	f000 8188 	beq.w	801273c <uxr_read_framed_msg+0x518>
 801242c:	7863      	ldrb	r3, [r4, #1]
 801242e:	428b      	cmp	r3, r1
 8012430:	bf0c      	ite	eq
 8012432:	2303      	moveq	r3, #3
 8012434:	2300      	movne	r3, #0
 8012436:	7023      	strb	r3, [r4, #0]
 8012438:	e705      	b.n	8012246 <uxr_read_framed_msg+0x22>
 801243a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801243e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012442:	2200      	movs	r2, #0
 8012444:	4299      	cmp	r1, r3
 8012446:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801244a:	d06c      	beq.n	8012526 <uxr_read_framed_msg+0x302>
 801244c:	18e2      	adds	r2, r4, r3
 801244e:	7890      	ldrb	r0, [r2, #2]
 8012450:	287d      	cmp	r0, #125	@ 0x7d
 8012452:	f000 8101 	beq.w	8012658 <uxr_read_framed_msg+0x434>
 8012456:	3301      	adds	r3, #1
 8012458:	085a      	lsrs	r2, r3, #1
 801245a:	fba5 1202 	umull	r1, r2, r5, r2
 801245e:	0892      	lsrs	r2, r2, #2
 8012460:	212a      	movs	r1, #42	@ 0x2a
 8012462:	fb01 3312 	mls	r3, r1, r2, r3
 8012466:	287e      	cmp	r0, #126	@ 0x7e
 8012468:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801246c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012470:	d059      	beq.n	8012526 <uxr_read_framed_msg+0x302>
 8012472:	2302      	movs	r3, #2
 8012474:	7023      	strb	r3, [r4, #0]
 8012476:	e6e6      	b.n	8012246 <uxr_read_framed_msg+0x22>
 8012478:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801247c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012480:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8012484:	1c51      	adds	r1, r2, #1
 8012486:	084b      	lsrs	r3, r1, #1
 8012488:	fba5 c303 	umull	ip, r3, r5, r3
 801248c:	089b      	lsrs	r3, r3, #2
 801248e:	fb0e 1313 	mls	r3, lr, r3, r1
 8012492:	4592      	cmp	sl, r2
 8012494:	eb04 0002 	add.w	r0, r4, r2
 8012498:	b2da      	uxtb	r2, r3
 801249a:	f43f af04 	beq.w	80122a6 <uxr_read_framed_msg+0x82>
 801249e:	7883      	ldrb	r3, [r0, #2]
 80124a0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80124a4:	2b7e      	cmp	r3, #126	@ 0x7e
 80124a6:	d1ed      	bne.n	8012484 <uxr_read_framed_msg+0x260>
 80124a8:	2301      	movs	r3, #1
 80124aa:	7023      	strb	r3, [r4, #0]
 80124ac:	e6cb      	b.n	8012246 <uxr_read_framed_msg+0x22>
 80124ae:	f100 0c01 	add.w	ip, r0, #1
 80124b2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80124b6:	fba5 8202 	umull	r8, r2, r5, r2
 80124ba:	0892      	lsrs	r2, r2, #2
 80124bc:	fb01 c212 	mls	r2, r1, r2, ip
 80124c0:	eb04 0c02 	add.w	ip, r4, r2
 80124c4:	b2d2      	uxtb	r2, r2
 80124c6:	4592      	cmp	sl, r2
 80124c8:	f100 0002 	add.w	r0, r0, #2
 80124cc:	f43f af47 	beq.w	801235e <uxr_read_framed_msg+0x13a>
 80124d0:	0842      	lsrs	r2, r0, #1
 80124d2:	f89c a002 	ldrb.w	sl, [ip, #2]
 80124d6:	fba5 8202 	umull	r8, r2, r5, r2
 80124da:	0892      	lsrs	r2, r2, #2
 80124dc:	fb01 0012 	mls	r0, r1, r2, r0
 80124e0:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80124e4:	f08a 0c20 	eor.w	ip, sl, #32
 80124e8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80124ec:	f47f af11 	bne.w	8012312 <uxr_read_framed_msg+0xee>
 80124f0:	459e      	cmp	lr, r3
 80124f2:	ee17 8a90 	vmov	r8, s15
 80124f6:	f43f af37 	beq.w	8012368 <uxr_read_framed_msg+0x144>
 80124fa:	2301      	movs	r3, #1
 80124fc:	7023      	strb	r3, [r4, #0]
 80124fe:	e6a2      	b.n	8012246 <uxr_read_framed_msg+0x22>
 8012500:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012502:	9300      	str	r3, [sp, #0]
 8012504:	2301      	movs	r3, #1
 8012506:	9301      	str	r3, [sp, #4]
 8012508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801250a:	464a      	mov	r2, r9
 801250c:	4641      	mov	r1, r8
 801250e:	4620      	mov	r0, r4
 8012510:	f7ff fe06 	bl	8012120 <uxr_framing_read_transport>
 8012514:	2800      	cmp	r0, #0
 8012516:	f43f aec6 	beq.w	80122a6 <uxr_read_framed_msg+0x82>
 801251a:	7823      	ldrb	r3, [r4, #0]
 801251c:	e693      	b.n	8012246 <uxr_read_framed_msg+0x22>
 801251e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	2302      	movs	r3, #2
 8012524:	e7ef      	b.n	8012506 <uxr_read_framed_msg+0x2e2>
 8012526:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012528:	9300      	str	r3, [sp, #0]
 801252a:	2304      	movs	r3, #4
 801252c:	9301      	str	r3, [sp, #4]
 801252e:	464a      	mov	r2, r9
 8012530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012532:	4641      	mov	r1, r8
 8012534:	4620      	mov	r0, r4
 8012536:	f7ff fdf3 	bl	8012120 <uxr_framing_read_transport>
 801253a:	2800      	cmp	r0, #0
 801253c:	d1ed      	bne.n	801251a <uxr_read_framed_msg+0x2f6>
 801253e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012542:	2b7e      	cmp	r3, #126	@ 0x7e
 8012544:	d0e9      	beq.n	801251a <uxr_read_framed_msg+0x2f6>
 8012546:	e6ae      	b.n	80122a6 <uxr_read_framed_msg+0x82>
 8012548:	30c30c31 	.word	0x30c30c31
 801254c:	0801c1ac 	.word	0x0801c1ac
 8012550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012552:	9300      	str	r3, [sp, #0]
 8012554:	2305      	movs	r3, #5
 8012556:	9301      	str	r3, [sp, #4]
 8012558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801255a:	f7ff fde1 	bl	8012120 <uxr_framing_read_transport>
 801255e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012562:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012566:	429a      	cmp	r2, r3
 8012568:	f43f ae9d 	beq.w	80122a6 <uxr_read_framed_msg+0x82>
 801256c:	e668      	b.n	8012240 <uxr_read_framed_msg+0x1c>
 801256e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	2303      	movs	r3, #3
 8012574:	e7c7      	b.n	8012506 <uxr_read_framed_msg+0x2e2>
 8012576:	2305      	movs	r3, #5
 8012578:	7023      	strb	r3, [r4, #0]
 801257a:	e664      	b.n	8012246 <uxr_read_framed_msg+0x22>
 801257c:	ee17 8a90 	vmov	r8, s15
 8012580:	f43f aef2 	beq.w	8012368 <uxr_read_framed_msg+0x144>
 8012584:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012588:	d08e      	beq.n	80124a8 <uxr_read_framed_msg+0x284>
 801258a:	ebae 0303 	sub.w	r3, lr, r3
 801258e:	3302      	adds	r3, #2
 8012590:	9301      	str	r3, [sp, #4]
 8012592:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012594:	9300      	str	r3, [sp, #0]
 8012596:	e7b7      	b.n	8012508 <uxr_read_framed_msg+0x2e4>
 8012598:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801259a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801259e:	7013      	strb	r3, [r2, #0]
 80125a0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80125a2:	b003      	add	sp, #12
 80125a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125a8:	f103 0c01 	add.w	ip, r3, #1
 80125ac:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80125b0:	fba5 0202 	umull	r0, r2, r5, r2
 80125b4:	0892      	lsrs	r2, r2, #2
 80125b6:	202a      	movs	r0, #42	@ 0x2a
 80125b8:	fb00 c212 	mls	r2, r0, r2, ip
 80125bc:	fa5f fc82 	uxtb.w	ip, r2
 80125c0:	4561      	cmp	r1, ip
 80125c2:	d09d      	beq.n	8012500 <uxr_read_framed_msg+0x2dc>
 80125c4:	3302      	adds	r3, #2
 80125c6:	4422      	add	r2, r4
 80125c8:	0859      	lsrs	r1, r3, #1
 80125ca:	7892      	ldrb	r2, [r2, #2]
 80125cc:	fba5 c101 	umull	ip, r1, r5, r1
 80125d0:	0889      	lsrs	r1, r1, #2
 80125d2:	fb00 3311 	mls	r3, r0, r1, r3
 80125d6:	2a7e      	cmp	r2, #126	@ 0x7e
 80125d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80125dc:	f000 80aa 	beq.w	8012734 <uxr_read_framed_msg+0x510>
 80125e0:	f082 0220 	eor.w	r2, r2, #32
 80125e4:	e654      	b.n	8012290 <uxr_read_framed_msg+0x6c>
 80125e6:	1c58      	adds	r0, r3, #1
 80125e8:	0842      	lsrs	r2, r0, #1
 80125ea:	fba5 c202 	umull	ip, r2, r5, r2
 80125ee:	0892      	lsrs	r2, r2, #2
 80125f0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80125f4:	fb0c 0212 	mls	r2, ip, r2, r0
 80125f8:	b2d0      	uxtb	r0, r2
 80125fa:	4281      	cmp	r1, r0
 80125fc:	d08f      	beq.n	801251e <uxr_read_framed_msg+0x2fa>
 80125fe:	4422      	add	r2, r4
 8012600:	3302      	adds	r3, #2
 8012602:	7890      	ldrb	r0, [r2, #2]
 8012604:	085a      	lsrs	r2, r3, #1
 8012606:	fba5 1202 	umull	r1, r2, r5, r2
 801260a:	0892      	lsrs	r2, r2, #2
 801260c:	fb0c 3312 	mls	r3, ip, r2, r3
 8012610:	287e      	cmp	r0, #126	@ 0x7e
 8012612:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012616:	d07d      	beq.n	8012714 <uxr_read_framed_msg+0x4f0>
 8012618:	f080 0020 	eor.w	r0, r0, #32
 801261c:	e660      	b.n	80122e0 <uxr_read_framed_msg+0xbc>
 801261e:	1c59      	adds	r1, r3, #1
 8012620:	084a      	lsrs	r2, r1, #1
 8012622:	fba5 c202 	umull	ip, r2, r5, r2
 8012626:	0892      	lsrs	r2, r2, #2
 8012628:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801262c:	fb0c 1212 	mls	r2, ip, r2, r1
 8012630:	b2d1      	uxtb	r1, r2
 8012632:	4288      	cmp	r0, r1
 8012634:	f43f af64 	beq.w	8012500 <uxr_read_framed_msg+0x2dc>
 8012638:	4422      	add	r2, r4
 801263a:	3302      	adds	r3, #2
 801263c:	7891      	ldrb	r1, [r2, #2]
 801263e:	085a      	lsrs	r2, r3, #1
 8012640:	fba5 0202 	umull	r0, r2, r5, r2
 8012644:	0892      	lsrs	r2, r2, #2
 8012646:	fb0c 3312 	mls	r3, ip, r2, r3
 801264a:	297e      	cmp	r1, #126	@ 0x7e
 801264c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012650:	d070      	beq.n	8012734 <uxr_read_framed_msg+0x510>
 8012652:	f081 0120 	eor.w	r1, r1, #32
 8012656:	e6a3      	b.n	80123a0 <uxr_read_framed_msg+0x17c>
 8012658:	f103 0c01 	add.w	ip, r3, #1
 801265c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012660:	fba5 0202 	umull	r0, r2, r5, r2
 8012664:	0892      	lsrs	r2, r2, #2
 8012666:	202a      	movs	r0, #42	@ 0x2a
 8012668:	fb00 c212 	mls	r2, r0, r2, ip
 801266c:	fa5f fc82 	uxtb.w	ip, r2
 8012670:	4561      	cmp	r1, ip
 8012672:	f43f af58 	beq.w	8012526 <uxr_read_framed_msg+0x302>
 8012676:	4422      	add	r2, r4
 8012678:	3302      	adds	r3, #2
 801267a:	7891      	ldrb	r1, [r2, #2]
 801267c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012680:	085a      	lsrs	r2, r3, #1
 8012682:	fba5 c202 	umull	ip, r2, r5, r2
 8012686:	0892      	lsrs	r2, r2, #2
 8012688:	fb00 3312 	mls	r3, r0, r2, r3
 801268c:	297e      	cmp	r1, #126	@ 0x7e
 801268e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012692:	f43f af48 	beq.w	8012526 <uxr_read_framed_msg+0x302>
 8012696:	f081 0120 	eor.w	r1, r1, #32
 801269a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801269e:	e6e8      	b.n	8012472 <uxr_read_framed_msg+0x24e>
 80126a0:	1c58      	adds	r0, r3, #1
 80126a2:	0842      	lsrs	r2, r0, #1
 80126a4:	fba5 c202 	umull	ip, r2, r5, r2
 80126a8:	0892      	lsrs	r2, r2, #2
 80126aa:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80126ae:	fb0c 0212 	mls	r2, ip, r2, r0
 80126b2:	b2d0      	uxtb	r0, r2
 80126b4:	4281      	cmp	r1, r0
 80126b6:	f43f af32 	beq.w	801251e <uxr_read_framed_msg+0x2fa>
 80126ba:	4422      	add	r2, r4
 80126bc:	3302      	adds	r3, #2
 80126be:	7890      	ldrb	r0, [r2, #2]
 80126c0:	085a      	lsrs	r2, r3, #1
 80126c2:	fba5 1202 	umull	r1, r2, r5, r2
 80126c6:	0892      	lsrs	r2, r2, #2
 80126c8:	fb0c 3312 	mls	r3, ip, r2, r3
 80126cc:	287e      	cmp	r0, #126	@ 0x7e
 80126ce:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80126d2:	d01f      	beq.n	8012714 <uxr_read_framed_msg+0x4f0>
 80126d4:	f080 0020 	eor.w	r0, r0, #32
 80126d8:	e68b      	b.n	80123f2 <uxr_read_framed_msg+0x1ce>
 80126da:	1c51      	adds	r1, r2, #1
 80126dc:	084b      	lsrs	r3, r1, #1
 80126de:	fba5 c303 	umull	ip, r3, r5, r3
 80126e2:	089b      	lsrs	r3, r3, #2
 80126e4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80126e8:	fb0c 1313 	mls	r3, ip, r3, r1
 80126ec:	b2d9      	uxtb	r1, r3
 80126ee:	4288      	cmp	r0, r1
 80126f0:	f43f af3d 	beq.w	801256e <uxr_read_framed_msg+0x34a>
 80126f4:	3202      	adds	r2, #2
 80126f6:	4423      	add	r3, r4
 80126f8:	0850      	lsrs	r0, r2, #1
 80126fa:	789b      	ldrb	r3, [r3, #2]
 80126fc:	fba5 1000 	umull	r1, r0, r5, r0
 8012700:	0880      	lsrs	r0, r0, #2
 8012702:	fb0c 2210 	mls	r2, ip, r0, r2
 8012706:	2b7e      	cmp	r3, #126	@ 0x7e
 8012708:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801270c:	d016      	beq.n	801273c <uxr_read_framed_msg+0x518>
 801270e:	f083 0120 	eor.w	r1, r3, #32
 8012712:	e68b      	b.n	801242c <uxr_read_framed_msg+0x208>
 8012714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012716:	9300      	str	r3, [sp, #0]
 8012718:	2302      	movs	r3, #2
 801271a:	9301      	str	r3, [sp, #4]
 801271c:	464a      	mov	r2, r9
 801271e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012720:	4641      	mov	r1, r8
 8012722:	4620      	mov	r0, r4
 8012724:	f7ff fcfc 	bl	8012120 <uxr_framing_read_transport>
 8012728:	2800      	cmp	r0, #0
 801272a:	f47f aef6 	bne.w	801251a <uxr_read_framed_msg+0x2f6>
 801272e:	2301      	movs	r3, #1
 8012730:	7023      	strb	r3, [r4, #0]
 8012732:	e588      	b.n	8012246 <uxr_read_framed_msg+0x22>
 8012734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012736:	9300      	str	r3, [sp, #0]
 8012738:	2301      	movs	r3, #1
 801273a:	e7ee      	b.n	801271a <uxr_read_framed_msg+0x4f6>
 801273c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801273e:	9300      	str	r3, [sp, #0]
 8012740:	2303      	movs	r3, #3
 8012742:	e7ea      	b.n	801271a <uxr_read_framed_msg+0x4f6>
 8012744:	ee17 8a90 	vmov	r8, s15
 8012748:	e6ae      	b.n	80124a8 <uxr_read_framed_msg+0x284>
 801274a:	bf00      	nop

0801274c <uxr_stream_id>:
 801274c:	2901      	cmp	r1, #1
 801274e:	b082      	sub	sp, #8
 8012750:	d01d      	beq.n	801278e <uxr_stream_id+0x42>
 8012752:	2902      	cmp	r1, #2
 8012754:	f04f 0c00 	mov.w	ip, #0
 8012758:	d01e      	beq.n	8012798 <uxr_stream_id+0x4c>
 801275a:	2300      	movs	r3, #0
 801275c:	f36c 0307 	bfi	r3, ip, #0, #8
 8012760:	f360 230f 	bfi	r3, r0, #8, #8
 8012764:	f361 4317 	bfi	r3, r1, #16, #8
 8012768:	f362 631f 	bfi	r3, r2, #24, #8
 801276c:	b2da      	uxtb	r2, r3
 801276e:	2000      	movs	r0, #0
 8012770:	f362 0007 	bfi	r0, r2, #0, #8
 8012774:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012778:	f362 200f 	bfi	r0, r2, #8, #8
 801277c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012780:	f362 4017 	bfi	r0, r2, #16, #8
 8012784:	0e1b      	lsrs	r3, r3, #24
 8012786:	f363 601f 	bfi	r0, r3, #24, #8
 801278a:	b002      	add	sp, #8
 801278c:	4770      	bx	lr
 801278e:	f100 0c01 	add.w	ip, r0, #1
 8012792:	fa5f fc8c 	uxtb.w	ip, ip
 8012796:	e7e0      	b.n	801275a <uxr_stream_id+0xe>
 8012798:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 801279c:	e7dd      	b.n	801275a <uxr_stream_id+0xe>
 801279e:	bf00      	nop

080127a0 <uxr_stream_id_from_raw>:
 80127a0:	b082      	sub	sp, #8
 80127a2:	b130      	cbz	r0, 80127b2 <uxr_stream_id_from_raw+0x12>
 80127a4:	0603      	lsls	r3, r0, #24
 80127a6:	d420      	bmi.n	80127ea <uxr_stream_id_from_raw+0x4a>
 80127a8:	1e42      	subs	r2, r0, #1
 80127aa:	b2d2      	uxtb	r2, r2
 80127ac:	f04f 0c01 	mov.w	ip, #1
 80127b0:	e001      	b.n	80127b6 <uxr_stream_id_from_raw+0x16>
 80127b2:	4684      	mov	ip, r0
 80127b4:	4602      	mov	r2, r0
 80127b6:	2300      	movs	r3, #0
 80127b8:	f360 0307 	bfi	r3, r0, #0, #8
 80127bc:	f362 230f 	bfi	r3, r2, #8, #8
 80127c0:	f36c 4317 	bfi	r3, ip, #16, #8
 80127c4:	f361 631f 	bfi	r3, r1, #24, #8
 80127c8:	b2da      	uxtb	r2, r3
 80127ca:	2000      	movs	r0, #0
 80127cc:	f362 0007 	bfi	r0, r2, #0, #8
 80127d0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80127d4:	f362 200f 	bfi	r0, r2, #8, #8
 80127d8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80127dc:	f362 4017 	bfi	r0, r2, #16, #8
 80127e0:	0e1b      	lsrs	r3, r3, #24
 80127e2:	f363 601f 	bfi	r0, r3, #24, #8
 80127e6:	b002      	add	sp, #8
 80127e8:	4770      	bx	lr
 80127ea:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80127ee:	f04f 0c02 	mov.w	ip, #2
 80127f2:	e7e0      	b.n	80127b6 <uxr_stream_id_from_raw+0x16>

080127f4 <uxr_init_stream_storage>:
 80127f4:	2300      	movs	r3, #0
 80127f6:	7403      	strb	r3, [r0, #16]
 80127f8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80127fc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012800:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012804:	4770      	bx	lr
 8012806:	bf00      	nop

08012808 <uxr_reset_stream_storage>:
 8012808:	b570      	push	{r4, r5, r6, lr}
 801280a:	7c03      	ldrb	r3, [r0, #16]
 801280c:	4604      	mov	r4, r0
 801280e:	b153      	cbz	r3, 8012826 <uxr_reset_stream_storage+0x1e>
 8012810:	4606      	mov	r6, r0
 8012812:	2500      	movs	r5, #0
 8012814:	4630      	mov	r0, r6
 8012816:	f005 fe3f 	bl	8018498 <uxr_reset_output_best_effort_stream>
 801281a:	7c23      	ldrb	r3, [r4, #16]
 801281c:	3501      	adds	r5, #1
 801281e:	42ab      	cmp	r3, r5
 8012820:	f106 0610 	add.w	r6, r6, #16
 8012824:	d8f6      	bhi.n	8012814 <uxr_reset_stream_storage+0xc>
 8012826:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801282a:	b163      	cbz	r3, 8012846 <uxr_reset_stream_storage+0x3e>
 801282c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012830:	2500      	movs	r5, #0
 8012832:	4630      	mov	r0, r6
 8012834:	f005 fc32 	bl	801809c <uxr_reset_input_best_effort_stream>
 8012838:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801283c:	3501      	adds	r5, #1
 801283e:	42ab      	cmp	r3, r5
 8012840:	f106 0602 	add.w	r6, r6, #2
 8012844:	d8f5      	bhi.n	8012832 <uxr_reset_stream_storage+0x2a>
 8012846:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801284a:	b163      	cbz	r3, 8012866 <uxr_reset_stream_storage+0x5e>
 801284c:	f104 0618 	add.w	r6, r4, #24
 8012850:	2500      	movs	r5, #0
 8012852:	4630      	mov	r0, r6
 8012854:	f005 fecc 	bl	80185f0 <uxr_reset_output_reliable_stream>
 8012858:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801285c:	3501      	adds	r5, #1
 801285e:	42ab      	cmp	r3, r5
 8012860:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012864:	d8f5      	bhi.n	8012852 <uxr_reset_stream_storage+0x4a>
 8012866:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801286a:	b163      	cbz	r3, 8012886 <uxr_reset_stream_storage+0x7e>
 801286c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012870:	2500      	movs	r5, #0
 8012872:	4630      	mov	r0, r6
 8012874:	f005 fc86 	bl	8018184 <uxr_reset_input_reliable_stream>
 8012878:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801287c:	3501      	adds	r5, #1
 801287e:	42ab      	cmp	r3, r5
 8012880:	f106 0618 	add.w	r6, r6, #24
 8012884:	d8f5      	bhi.n	8012872 <uxr_reset_stream_storage+0x6a>
 8012886:	bd70      	pop	{r4, r5, r6, pc}

08012888 <uxr_add_output_best_effort_buffer>:
 8012888:	b510      	push	{r4, lr}
 801288a:	7c04      	ldrb	r4, [r0, #16]
 801288c:	f104 0c01 	add.w	ip, r4, #1
 8012890:	b082      	sub	sp, #8
 8012892:	f880 c010 	strb.w	ip, [r0, #16]
 8012896:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801289a:	f005 fdf3 	bl	8018484 <uxr_init_output_best_effort_stream>
 801289e:	2201      	movs	r2, #1
 80128a0:	4611      	mov	r1, r2
 80128a2:	4620      	mov	r0, r4
 80128a4:	b002      	add	sp, #8
 80128a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128aa:	f7ff bf4f 	b.w	801274c <uxr_stream_id>
 80128ae:	bf00      	nop

080128b0 <uxr_add_output_reliable_buffer>:
 80128b0:	b510      	push	{r4, lr}
 80128b2:	b084      	sub	sp, #16
 80128b4:	4684      	mov	ip, r0
 80128b6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80128ba:	9000      	str	r0, [sp, #0]
 80128bc:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80128c0:	2028      	movs	r0, #40	@ 0x28
 80128c2:	fb00 c004 	mla	r0, r0, r4, ip
 80128c6:	f104 0e01 	add.w	lr, r4, #1
 80128ca:	3018      	adds	r0, #24
 80128cc:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80128d0:	f005 fe56 	bl	8018580 <uxr_init_output_reliable_stream>
 80128d4:	2201      	movs	r2, #1
 80128d6:	2102      	movs	r1, #2
 80128d8:	4620      	mov	r0, r4
 80128da:	b004      	add	sp, #16
 80128dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128e0:	f7ff bf34 	b.w	801274c <uxr_stream_id>

080128e4 <uxr_add_input_best_effort_buffer>:
 80128e4:	b510      	push	{r4, lr}
 80128e6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80128ea:	4603      	mov	r3, r0
 80128ec:	1c62      	adds	r2, r4, #1
 80128ee:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80128f2:	b082      	sub	sp, #8
 80128f4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80128f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80128fc:	f005 fbca 	bl	8018094 <uxr_init_input_best_effort_stream>
 8012900:	2200      	movs	r2, #0
 8012902:	2101      	movs	r1, #1
 8012904:	4620      	mov	r0, r4
 8012906:	b002      	add	sp, #8
 8012908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801290c:	f7ff bf1e 	b.w	801274c <uxr_stream_id>

08012910 <uxr_add_input_reliable_buffer>:
 8012910:	b510      	push	{r4, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	4684      	mov	ip, r0
 8012916:	9806      	ldr	r0, [sp, #24]
 8012918:	9000      	str	r0, [sp, #0]
 801291a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801291e:	2018      	movs	r0, #24
 8012920:	fb00 c004 	mla	r0, r0, r4, ip
 8012924:	f104 0e01 	add.w	lr, r4, #1
 8012928:	3048      	adds	r0, #72	@ 0x48
 801292a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801292e:	f005 fbfd 	bl	801812c <uxr_init_input_reliable_stream>
 8012932:	2200      	movs	r2, #0
 8012934:	2102      	movs	r1, #2
 8012936:	4620      	mov	r0, r4
 8012938:	b004      	add	sp, #16
 801293a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801293e:	f7ff bf05 	b.w	801274c <uxr_stream_id>
 8012942:	bf00      	nop

08012944 <uxr_get_output_best_effort_stream>:
 8012944:	7c03      	ldrb	r3, [r0, #16]
 8012946:	428b      	cmp	r3, r1
 8012948:	bf8c      	ite	hi
 801294a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801294e:	2000      	movls	r0, #0
 8012950:	4770      	bx	lr
 8012952:	bf00      	nop

08012954 <uxr_get_output_reliable_stream>:
 8012954:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012958:	428b      	cmp	r3, r1
 801295a:	bf83      	ittte	hi
 801295c:	2328      	movhi	r3, #40	@ 0x28
 801295e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012962:	3018      	addhi	r0, #24
 8012964:	2000      	movls	r0, #0
 8012966:	4770      	bx	lr

08012968 <uxr_get_input_best_effort_stream>:
 8012968:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801296c:	428b      	cmp	r3, r1
 801296e:	bf86      	itte	hi
 8012970:	3121      	addhi	r1, #33	@ 0x21
 8012972:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012976:	2000      	movls	r0, #0
 8012978:	4770      	bx	lr
 801297a:	bf00      	nop

0801297c <uxr_get_input_reliable_stream>:
 801297c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012980:	428b      	cmp	r3, r1
 8012982:	bf83      	ittte	hi
 8012984:	2318      	movhi	r3, #24
 8012986:	fb03 0001 	mlahi	r0, r3, r1, r0
 801298a:	3048      	addhi	r0, #72	@ 0x48
 801298c:	2000      	movls	r0, #0
 801298e:	4770      	bx	lr

08012990 <uxr_output_streams_confirmed>:
 8012990:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012994:	b183      	cbz	r3, 80129b8 <uxr_output_streams_confirmed+0x28>
 8012996:	b570      	push	{r4, r5, r6, lr}
 8012998:	4606      	mov	r6, r0
 801299a:	f100 0518 	add.w	r5, r0, #24
 801299e:	2400      	movs	r4, #0
 80129a0:	e001      	b.n	80129a6 <uxr_output_streams_confirmed+0x16>
 80129a2:	3528      	adds	r5, #40	@ 0x28
 80129a4:	b138      	cbz	r0, 80129b6 <uxr_output_streams_confirmed+0x26>
 80129a6:	4628      	mov	r0, r5
 80129a8:	f006 f892 	bl	8018ad0 <uxr_is_output_up_to_date>
 80129ac:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80129b0:	3401      	adds	r4, #1
 80129b2:	42a3      	cmp	r3, r4
 80129b4:	d8f5      	bhi.n	80129a2 <uxr_output_streams_confirmed+0x12>
 80129b6:	bd70      	pop	{r4, r5, r6, pc}
 80129b8:	2001      	movs	r0, #1
 80129ba:	4770      	bx	lr

080129bc <uxr_buffer_submessage_header>:
 80129bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129be:	4604      	mov	r4, r0
 80129c0:	460e      	mov	r6, r1
 80129c2:	2104      	movs	r1, #4
 80129c4:	4615      	mov	r5, r2
 80129c6:	461f      	mov	r7, r3
 80129c8:	f7fa f808 	bl	800c9dc <ucdr_align_to>
 80129cc:	2301      	movs	r3, #1
 80129ce:	ea47 0203 	orr.w	r2, r7, r3
 80129d2:	4631      	mov	r1, r6
 80129d4:	7523      	strb	r3, [r4, #20]
 80129d6:	4620      	mov	r0, r4
 80129d8:	462b      	mov	r3, r5
 80129da:	f000 fa27 	bl	8012e2c <uxr_serialize_submessage_header>
 80129de:	4620      	mov	r0, r4
 80129e0:	f7fa f812 	bl	800ca08 <ucdr_buffer_remaining>
 80129e4:	42a8      	cmp	r0, r5
 80129e6:	bf34      	ite	cc
 80129e8:	2000      	movcc	r0, #0
 80129ea:	2001      	movcs	r0, #1
 80129ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129ee:	bf00      	nop

080129f0 <uxr_read_submessage_header>:
 80129f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f4:	4604      	mov	r4, r0
 80129f6:	460d      	mov	r5, r1
 80129f8:	2104      	movs	r1, #4
 80129fa:	4616      	mov	r6, r2
 80129fc:	4698      	mov	r8, r3
 80129fe:	f7f9 ffed 	bl	800c9dc <ucdr_align_to>
 8012a02:	4620      	mov	r0, r4
 8012a04:	f7fa f800 	bl	800ca08 <ucdr_buffer_remaining>
 8012a08:	2803      	cmp	r0, #3
 8012a0a:	bf8c      	ite	hi
 8012a0c:	2701      	movhi	r7, #1
 8012a0e:	2700      	movls	r7, #0
 8012a10:	d802      	bhi.n	8012a18 <uxr_read_submessage_header+0x28>
 8012a12:	4638      	mov	r0, r7
 8012a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a18:	4633      	mov	r3, r6
 8012a1a:	4642      	mov	r2, r8
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	4629      	mov	r1, r5
 8012a20:	f000 fa18 	bl	8012e54 <uxr_deserialize_submessage_header>
 8012a24:	f898 3000 	ldrb.w	r3, [r8]
 8012a28:	f003 0201 	and.w	r2, r3, #1
 8012a2c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012a30:	f888 3000 	strb.w	r3, [r8]
 8012a34:	7522      	strb	r2, [r4, #20]
 8012a36:	4638      	mov	r0, r7
 8012a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a3c <uxr_submessage_padding>:
 8012a3c:	f010 0003 	ands.w	r0, r0, #3
 8012a40:	bf18      	it	ne
 8012a42:	f1c0 0004 	rsbne	r0, r0, #4
 8012a46:	4770      	bx	lr

08012a48 <uxr_millis>:
 8012a48:	b510      	push	{r4, lr}
 8012a4a:	b084      	sub	sp, #16
 8012a4c:	4669      	mov	r1, sp
 8012a4e:	2001      	movs	r0, #1
 8012a50:	f7ef fd3e 	bl	80024d0 <clock_gettime>
 8012a54:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012a58:	4906      	ldr	r1, [pc, #24]	@ (8012a74 <uxr_millis+0x2c>)
 8012a5a:	fba0 0301 	umull	r0, r3, r0, r1
 8012a5e:	1900      	adds	r0, r0, r4
 8012a60:	fb01 3102 	mla	r1, r1, r2, r3
 8012a64:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012a68:	4a03      	ldr	r2, [pc, #12]	@ (8012a78 <uxr_millis+0x30>)
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	f7ee f8ac 	bl	8000bc8 <__aeabi_ldivmod>
 8012a70:	b004      	add	sp, #16
 8012a72:	bd10      	pop	{r4, pc}
 8012a74:	3b9aca00 	.word	0x3b9aca00
 8012a78:	000f4240 	.word	0x000f4240

08012a7c <uxr_nanos>:
 8012a7c:	b510      	push	{r4, lr}
 8012a7e:	b084      	sub	sp, #16
 8012a80:	4669      	mov	r1, sp
 8012a82:	2001      	movs	r0, #1
 8012a84:	f7ef fd24 	bl	80024d0 <clock_gettime>
 8012a88:	4a06      	ldr	r2, [pc, #24]	@ (8012aa4 <uxr_nanos+0x28>)
 8012a8a:	9800      	ldr	r0, [sp, #0]
 8012a8c:	9902      	ldr	r1, [sp, #8]
 8012a8e:	9c01      	ldr	r4, [sp, #4]
 8012a90:	fba0 0302 	umull	r0, r3, r0, r2
 8012a94:	1840      	adds	r0, r0, r1
 8012a96:	fb02 3304 	mla	r3, r2, r4, r3
 8012a9a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8012a9e:	b004      	add	sp, #16
 8012aa0:	bd10      	pop	{r4, pc}
 8012aa2:	bf00      	nop
 8012aa4:	3b9aca00 	.word	0x3b9aca00

08012aa8 <on_full_output_buffer_fragmented>:
 8012aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aac:	460c      	mov	r4, r1
 8012aae:	b08a      	sub	sp, #40	@ 0x28
 8012ab0:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012ab4:	4606      	mov	r6, r0
 8012ab6:	f104 0008 	add.w	r0, r4, #8
 8012aba:	f7ff ff4b 	bl	8012954 <uxr_get_output_reliable_stream>
 8012abe:	4605      	mov	r5, r0
 8012ac0:	f006 f810 	bl	8018ae4 <get_available_free_slots>
 8012ac4:	b968      	cbnz	r0, 8012ae2 <on_full_output_buffer_fragmented+0x3a>
 8012ac6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8012aca:	4620      	mov	r0, r4
 8012acc:	4798      	blx	r3
 8012ace:	b918      	cbnz	r0, 8012ad8 <on_full_output_buffer_fragmented+0x30>
 8012ad0:	2001      	movs	r0, #1
 8012ad2:	b00a      	add	sp, #40	@ 0x28
 8012ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad8:	4628      	mov	r0, r5
 8012ada:	f006 f803 	bl	8018ae4 <get_available_free_slots>
 8012ade:	2800      	cmp	r0, #0
 8012ae0:	d0f6      	beq.n	8012ad0 <on_full_output_buffer_fragmented+0x28>
 8012ae2:	8929      	ldrh	r1, [r5, #8]
 8012ae4:	89eb      	ldrh	r3, [r5, #14]
 8012ae6:	7b28      	ldrb	r0, [r5, #12]
 8012ae8:	686a      	ldr	r2, [r5, #4]
 8012aea:	fbb2 f8f1 	udiv	r8, r2, r1
 8012aee:	fbb3 f2f1 	udiv	r2, r3, r1
 8012af2:	fb01 3112 	mls	r1, r1, r2, r3
 8012af6:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8012afa:	b289      	uxth	r1, r1
 8012afc:	fb08 f101 	mul.w	r1, r8, r1
 8012b00:	30fc      	adds	r0, #252	@ 0xfc
 8012b02:	f1a8 0804 	sub.w	r8, r8, #4
 8012b06:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8012b0a:	4440      	add	r0, r8
 8012b0c:	b287      	uxth	r7, r0
 8012b0e:	1bdb      	subs	r3, r3, r7
 8012b10:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012b14:	682b      	ldr	r3, [r5, #0]
 8012b16:	3104      	adds	r1, #4
 8012b18:	4419      	add	r1, r3
 8012b1a:	4642      	mov	r2, r8
 8012b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b20:	9300      	str	r3, [sp, #0]
 8012b22:	a802      	add	r0, sp, #8
 8012b24:	2300      	movs	r3, #0
 8012b26:	f7f9 ff2d 	bl	800c984 <ucdr_init_buffer_origin_offset>
 8012b2a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012b2e:	f102 0308 	add.w	r3, r2, #8
 8012b32:	4543      	cmp	r3, r8
 8012b34:	d928      	bls.n	8012b88 <on_full_output_buffer_fragmented+0xe0>
 8012b36:	463a      	mov	r2, r7
 8012b38:	2300      	movs	r3, #0
 8012b3a:	210d      	movs	r1, #13
 8012b3c:	a802      	add	r0, sp, #8
 8012b3e:	f7ff ff3d 	bl	80129bc <uxr_buffer_submessage_header>
 8012b42:	8929      	ldrh	r1, [r5, #8]
 8012b44:	89eb      	ldrh	r3, [r5, #14]
 8012b46:	fbb3 f2f1 	udiv	r2, r3, r1
 8012b4a:	fb01 3312 	mls	r3, r1, r2, r3
 8012b4e:	b29b      	uxth	r3, r3
 8012b50:	686a      	ldr	r2, [r5, #4]
 8012b52:	fbb2 f2f1 	udiv	r2, r2, r1
 8012b56:	fb02 f303 	mul.w	r3, r2, r3
 8012b5a:	682a      	ldr	r2, [r5, #0]
 8012b5c:	f842 8003 	str.w	r8, [r2, r3]
 8012b60:	89e8      	ldrh	r0, [r5, #14]
 8012b62:	2101      	movs	r1, #1
 8012b64:	f005 ffde 	bl	8018b24 <uxr_seq_num_add>
 8012b68:	9904      	ldr	r1, [sp, #16]
 8012b6a:	9a03      	ldr	r2, [sp, #12]
 8012b6c:	81e8      	strh	r0, [r5, #14]
 8012b6e:	1a52      	subs	r2, r2, r1
 8012b70:	4630      	mov	r0, r6
 8012b72:	f7f9 ff19 	bl	800c9a8 <ucdr_init_buffer>
 8012b76:	4630      	mov	r0, r6
 8012b78:	490f      	ldr	r1, [pc, #60]	@ (8012bb8 <on_full_output_buffer_fragmented+0x110>)
 8012b7a:	4622      	mov	r2, r4
 8012b7c:	f7f9 fee8 	bl	800c950 <ucdr_set_on_full_buffer_callback>
 8012b80:	2000      	movs	r0, #0
 8012b82:	b00a      	add	sp, #40	@ 0x28
 8012b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b88:	b292      	uxth	r2, r2
 8012b8a:	2302      	movs	r3, #2
 8012b8c:	210d      	movs	r1, #13
 8012b8e:	a802      	add	r0, sp, #8
 8012b90:	f7ff ff14 	bl	80129bc <uxr_buffer_submessage_header>
 8012b94:	8928      	ldrh	r0, [r5, #8]
 8012b96:	89eb      	ldrh	r3, [r5, #14]
 8012b98:	fbb3 f1f0 	udiv	r1, r3, r0
 8012b9c:	fb00 3311 	mls	r3, r0, r1, r3
 8012ba0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012ba4:	6869      	ldr	r1, [r5, #4]
 8012ba6:	fbb1 f1f0 	udiv	r1, r1, r0
 8012baa:	b29b      	uxth	r3, r3
 8012bac:	fb01 f303 	mul.w	r3, r1, r3
 8012bb0:	6829      	ldr	r1, [r5, #0]
 8012bb2:	3208      	adds	r2, #8
 8012bb4:	50ca      	str	r2, [r1, r3]
 8012bb6:	e7d3      	b.n	8012b60 <on_full_output_buffer_fragmented+0xb8>
 8012bb8:	08012aa9 	.word	0x08012aa9

08012bbc <uxr_prepare_output_stream>:
 8012bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bbe:	b087      	sub	sp, #28
 8012bc0:	2707      	movs	r7, #7
 8012bc2:	9202      	str	r2, [sp, #8]
 8012bc4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012bc6:	9103      	str	r1, [sp, #12]
 8012bc8:	2500      	movs	r5, #0
 8012bca:	3204      	adds	r2, #4
 8012bcc:	e9cd 7500 	strd	r7, r5, [sp]
 8012bd0:	461c      	mov	r4, r3
 8012bd2:	4606      	mov	r6, r0
 8012bd4:	f7fe ffc2 	bl	8011b5c <uxr_prepare_stream_to_write_submessage>
 8012bd8:	f080 0201 	eor.w	r2, r0, #1
 8012bdc:	b2d2      	uxtb	r2, r2
 8012bde:	75a2      	strb	r2, [r4, #22]
 8012be0:	b112      	cbz	r2, 8012be8 <uxr_prepare_output_stream+0x2c>
 8012be2:	4628      	mov	r0, r5
 8012be4:	b007      	add	sp, #28
 8012be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012be8:	aa05      	add	r2, sp, #20
 8012bea:	9902      	ldr	r1, [sp, #8]
 8012bec:	4630      	mov	r0, r6
 8012bee:	f7ff f8eb 	bl	8011dc8 <uxr_init_base_object_request>
 8012bf2:	a905      	add	r1, sp, #20
 8012bf4:	4605      	mov	r5, r0
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	f000 ffd4 	bl	8013ba4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012bfc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012c00:	69a6      	ldr	r6, [r4, #24]
 8012c02:	69e7      	ldr	r7, [r4, #28]
 8012c04:	1a52      	subs	r2, r2, r1
 8012c06:	4620      	mov	r0, r4
 8012c08:	f7f9 fece 	bl	800c9a8 <ucdr_init_buffer>
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	463a      	mov	r2, r7
 8012c10:	4631      	mov	r1, r6
 8012c12:	f7f9 fe9d 	bl	800c950 <ucdr_set_on_full_buffer_callback>
 8012c16:	4628      	mov	r0, r5
 8012c18:	b007      	add	sp, #28
 8012c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c1c <uxr_prepare_output_stream_fragmented>:
 8012c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c20:	b091      	sub	sp, #68	@ 0x44
 8012c22:	4605      	mov	r5, r0
 8012c24:	9105      	str	r1, [sp, #20]
 8012c26:	3008      	adds	r0, #8
 8012c28:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012c2c:	461e      	mov	r6, r3
 8012c2e:	9204      	str	r2, [sp, #16]
 8012c30:	f7ff fe90 	bl	8012954 <uxr_get_output_reliable_stream>
 8012c34:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	f000 8091 	beq.w	8012d60 <uxr_prepare_output_stream_fragmented+0x144>
 8012c3e:	4604      	mov	r4, r0
 8012c40:	2800      	cmp	r0, #0
 8012c42:	f000 808d 	beq.w	8012d60 <uxr_prepare_output_stream_fragmented+0x144>
 8012c46:	f005 ff4d 	bl	8018ae4 <get_available_free_slots>
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	f000 8083 	beq.w	8012d56 <uxr_prepare_output_stream_fragmented+0x13a>
 8012c50:	8922      	ldrh	r2, [r4, #8]
 8012c52:	89e7      	ldrh	r7, [r4, #14]
 8012c54:	fbb7 f9f2 	udiv	r9, r7, r2
 8012c58:	fb02 7919 	mls	r9, r2, r9, r7
 8012c5c:	fa1f f989 	uxth.w	r9, r9
 8012c60:	6863      	ldr	r3, [r4, #4]
 8012c62:	fbb3 f2f2 	udiv	r2, r3, r2
 8012c66:	6823      	ldr	r3, [r4, #0]
 8012c68:	9203      	str	r2, [sp, #12]
 8012c6a:	fb02 f909 	mul.w	r9, r2, r9
 8012c6e:	f109 0904 	add.w	r9, r9, #4
 8012c72:	4499      	add	r9, r3
 8012c74:	7b23      	ldrb	r3, [r4, #12]
 8012c76:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012c7a:	4543      	cmp	r3, r8
 8012c7c:	f1a2 0b04 	sub.w	fp, r2, #4
 8012c80:	d37a      	bcc.n	8012d78 <uxr_prepare_output_stream_fragmented+0x15c>
 8012c82:	f1ab 0a04 	sub.w	sl, fp, #4
 8012c86:	ebaa 0a03 	sub.w	sl, sl, r3
 8012c8a:	465a      	mov	r2, fp
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	4649      	mov	r1, r9
 8012c90:	a808      	add	r0, sp, #32
 8012c92:	f8cd 8000 	str.w	r8, [sp]
 8012c96:	f7f9 fe75 	bl	800c984 <ucdr_init_buffer_origin_offset>
 8012c9a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012c9c:	fa1f fa8a 	uxth.w	sl, sl
 8012ca0:	4652      	mov	r2, sl
 8012ca2:	f103 0a08 	add.w	sl, r3, #8
 8012ca6:	45da      	cmp	sl, fp
 8012ca8:	bf34      	ite	cc
 8012caa:	2302      	movcc	r3, #2
 8012cac:	2300      	movcs	r3, #0
 8012cae:	210d      	movs	r1, #13
 8012cb0:	a808      	add	r0, sp, #32
 8012cb2:	f7ff fe83 	bl	80129bc <uxr_buffer_submessage_header>
 8012cb6:	8921      	ldrh	r1, [r4, #8]
 8012cb8:	fbb7 f2f1 	udiv	r2, r7, r1
 8012cbc:	fb01 7212 	mls	r2, r1, r2, r7
 8012cc0:	b292      	uxth	r2, r2
 8012cc2:	6863      	ldr	r3, [r4, #4]
 8012cc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8012cc8:	fb02 f303 	mul.w	r3, r2, r3
 8012ccc:	6822      	ldr	r2, [r4, #0]
 8012cce:	4638      	mov	r0, r7
 8012cd0:	f842 b003 	str.w	fp, [r2, r3]
 8012cd4:	2101      	movs	r1, #1
 8012cd6:	f005 ff25 	bl	8018b24 <uxr_seq_num_add>
 8012cda:	9b03      	ldr	r3, [sp, #12]
 8012cdc:	f108 0104 	add.w	r1, r8, #4
 8012ce0:	f1a3 0208 	sub.w	r2, r3, #8
 8012ce4:	eba2 0208 	sub.w	r2, r2, r8
 8012ce8:	4449      	add	r1, r9
 8012cea:	4607      	mov	r7, r0
 8012cec:	4630      	mov	r0, r6
 8012cee:	f7f9 fe5b 	bl	800c9a8 <ucdr_init_buffer>
 8012cf2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012cf4:	81e7      	strh	r7, [r4, #14]
 8012cf6:	1d1a      	adds	r2, r3, #4
 8012cf8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012cfc:	bf28      	it	cs
 8012cfe:	2200      	movcs	r2, #0
 8012d00:	2300      	movs	r3, #0
 8012d02:	b292      	uxth	r2, r2
 8012d04:	2107      	movs	r1, #7
 8012d06:	4630      	mov	r0, r6
 8012d08:	f7ff fe58 	bl	80129bc <uxr_buffer_submessage_header>
 8012d0c:	9904      	ldr	r1, [sp, #16]
 8012d0e:	aa07      	add	r2, sp, #28
 8012d10:	4628      	mov	r0, r5
 8012d12:	f7ff f859 	bl	8011dc8 <uxr_init_base_object_request>
 8012d16:	4604      	mov	r4, r0
 8012d18:	b318      	cbz	r0, 8012d62 <uxr_prepare_output_stream_fragmented+0x146>
 8012d1a:	a907      	add	r1, sp, #28
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	f000 ff41 	bl	8013ba4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012d22:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012d26:	4630      	mov	r0, r6
 8012d28:	1a52      	subs	r2, r2, r1
 8012d2a:	f7f9 fe3d 	bl	800c9a8 <ucdr_init_buffer>
 8012d2e:	9b05      	ldr	r3, [sp, #20]
 8012d30:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012d34:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012d36:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012d3a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012d3c:	491b      	ldr	r1, [pc, #108]	@ (8012dac <uxr_prepare_output_stream_fragmented+0x190>)
 8012d3e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012d42:	4630      	mov	r0, r6
 8012d44:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012d48:	462a      	mov	r2, r5
 8012d4a:	f7f9 fe01 	bl	800c950 <ucdr_set_on_full_buffer_callback>
 8012d4e:	4620      	mov	r0, r4
 8012d50:	b011      	add	sp, #68	@ 0x44
 8012d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d56:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8012d58:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012d5a:	4628      	mov	r0, r5
 8012d5c:	4798      	blx	r3
 8012d5e:	b920      	cbnz	r0, 8012d6a <uxr_prepare_output_stream_fragmented+0x14e>
 8012d60:	2400      	movs	r4, #0
 8012d62:	4620      	mov	r0, r4
 8012d64:	b011      	add	sp, #68	@ 0x44
 8012d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	f005 feba 	bl	8018ae4 <get_available_free_slots>
 8012d70:	2800      	cmp	r0, #0
 8012d72:	f47f af6d 	bne.w	8012c50 <uxr_prepare_output_stream_fragmented+0x34>
 8012d76:	e7f3      	b.n	8012d60 <uxr_prepare_output_stream_fragmented+0x144>
 8012d78:	4638      	mov	r0, r7
 8012d7a:	2101      	movs	r1, #1
 8012d7c:	f005 fed2 	bl	8018b24 <uxr_seq_num_add>
 8012d80:	8921      	ldrh	r1, [r4, #8]
 8012d82:	fbb0 f2f1 	udiv	r2, r0, r1
 8012d86:	fb01 0912 	mls	r9, r1, r2, r0
 8012d8a:	fa1f f289 	uxth.w	r2, r9
 8012d8e:	6863      	ldr	r3, [r4, #4]
 8012d90:	fbb3 f9f1 	udiv	r9, r3, r1
 8012d94:	6823      	ldr	r3, [r4, #0]
 8012d96:	fb02 f909 	mul.w	r9, r2, r9
 8012d9a:	f109 0904 	add.w	r9, r9, #4
 8012d9e:	4499      	add	r9, r3
 8012da0:	4607      	mov	r7, r0
 8012da2:	7b23      	ldrb	r3, [r4, #12]
 8012da4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012da8:	e76b      	b.n	8012c82 <uxr_prepare_output_stream_fragmented+0x66>
 8012daa:	bf00      	nop
 8012dac:	08012aa9 	.word	0x08012aa9

08012db0 <uxr_serialize_message_header>:
 8012db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012db2:	b083      	sub	sp, #12
 8012db4:	4616      	mov	r6, r2
 8012db6:	4604      	mov	r4, r0
 8012db8:	9301      	str	r3, [sp, #4]
 8012dba:	460d      	mov	r5, r1
 8012dbc:	9f08      	ldr	r7, [sp, #32]
 8012dbe:	f7f8 fb11 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8012dc2:	4631      	mov	r1, r6
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	f7f8 fb0d 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8012dca:	9a01      	ldr	r2, [sp, #4]
 8012dcc:	2101      	movs	r1, #1
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f7f8 fbb4 	bl	800b53c <ucdr_serialize_endian_uint16_t>
 8012dd4:	062b      	lsls	r3, r5, #24
 8012dd6:	d501      	bpl.n	8012ddc <uxr_serialize_message_header+0x2c>
 8012dd8:	b003      	add	sp, #12
 8012dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ddc:	2204      	movs	r2, #4
 8012dde:	4639      	mov	r1, r7
 8012de0:	4620      	mov	r0, r4
 8012de2:	b003      	add	sp, #12
 8012de4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012de8:	f7fd b9a4 	b.w	8010134 <ucdr_serialize_array_uint8_t>

08012dec <uxr_deserialize_message_header>:
 8012dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dee:	b083      	sub	sp, #12
 8012df0:	4616      	mov	r6, r2
 8012df2:	4604      	mov	r4, r0
 8012df4:	9301      	str	r3, [sp, #4]
 8012df6:	460d      	mov	r5, r1
 8012df8:	9f08      	ldr	r7, [sp, #32]
 8012dfa:	f7f8 fb09 	bl	800b410 <ucdr_deserialize_uint8_t>
 8012dfe:	4631      	mov	r1, r6
 8012e00:	4620      	mov	r0, r4
 8012e02:	f7f8 fb05 	bl	800b410 <ucdr_deserialize_uint8_t>
 8012e06:	9a01      	ldr	r2, [sp, #4]
 8012e08:	2101      	movs	r1, #1
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f7f8 fc8a 	bl	800b724 <ucdr_deserialize_endian_uint16_t>
 8012e10:	f995 3000 	ldrsb.w	r3, [r5]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	da01      	bge.n	8012e1c <uxr_deserialize_message_header+0x30>
 8012e18:	b003      	add	sp, #12
 8012e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e1c:	2204      	movs	r2, #4
 8012e1e:	4639      	mov	r1, r7
 8012e20:	4620      	mov	r0, r4
 8012e22:	b003      	add	sp, #12
 8012e24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012e28:	f7fd b9e8 	b.w	80101fc <ucdr_deserialize_array_uint8_t>

08012e2c <uxr_serialize_submessage_header>:
 8012e2c:	b530      	push	{r4, r5, lr}
 8012e2e:	b083      	sub	sp, #12
 8012e30:	4615      	mov	r5, r2
 8012e32:	4604      	mov	r4, r0
 8012e34:	9301      	str	r3, [sp, #4]
 8012e36:	f7f8 fad5 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8012e3a:	4629      	mov	r1, r5
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	f7f8 fad1 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8012e42:	9a01      	ldr	r2, [sp, #4]
 8012e44:	2101      	movs	r1, #1
 8012e46:	4620      	mov	r0, r4
 8012e48:	b003      	add	sp, #12
 8012e4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e4e:	f7f8 bb75 	b.w	800b53c <ucdr_serialize_endian_uint16_t>
 8012e52:	bf00      	nop

08012e54 <uxr_deserialize_submessage_header>:
 8012e54:	b530      	push	{r4, r5, lr}
 8012e56:	b083      	sub	sp, #12
 8012e58:	4615      	mov	r5, r2
 8012e5a:	4604      	mov	r4, r0
 8012e5c:	9301      	str	r3, [sp, #4]
 8012e5e:	f7f8 fad7 	bl	800b410 <ucdr_deserialize_uint8_t>
 8012e62:	4629      	mov	r1, r5
 8012e64:	4620      	mov	r0, r4
 8012e66:	f7f8 fad3 	bl	800b410 <ucdr_deserialize_uint8_t>
 8012e6a:	9a01      	ldr	r2, [sp, #4]
 8012e6c:	2101      	movs	r1, #1
 8012e6e:	4620      	mov	r0, r4
 8012e70:	b003      	add	sp, #12
 8012e72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e76:	f7f8 bc55 	b.w	800b724 <ucdr_deserialize_endian_uint16_t>
 8012e7a:	bf00      	nop

08012e7c <uxr_serialize_CLIENT_Representation>:
 8012e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e80:	2204      	movs	r2, #4
 8012e82:	460e      	mov	r6, r1
 8012e84:	4605      	mov	r5, r0
 8012e86:	f7fd f955 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8012e8a:	2202      	movs	r2, #2
 8012e8c:	4607      	mov	r7, r0
 8012e8e:	1d31      	adds	r1, r6, #4
 8012e90:	4628      	mov	r0, r5
 8012e92:	f7fd f94f 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8012e96:	4038      	ands	r0, r7
 8012e98:	2202      	movs	r2, #2
 8012e9a:	1db1      	adds	r1, r6, #6
 8012e9c:	b2c7      	uxtb	r7, r0
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	f7fd f948 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8012ea4:	2204      	movs	r2, #4
 8012ea6:	4007      	ands	r7, r0
 8012ea8:	f106 0108 	add.w	r1, r6, #8
 8012eac:	4628      	mov	r0, r5
 8012eae:	f7fd f941 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8012eb2:	7b31      	ldrb	r1, [r6, #12]
 8012eb4:	4007      	ands	r7, r0
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	f7f8 fa94 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8012ebc:	7b71      	ldrb	r1, [r6, #13]
 8012ebe:	4007      	ands	r7, r0
 8012ec0:	4628      	mov	r0, r5
 8012ec2:	f7f8 fa61 	bl	800b388 <ucdr_serialize_bool>
 8012ec6:	7b73      	ldrb	r3, [r6, #13]
 8012ec8:	ea07 0800 	and.w	r8, r7, r0
 8012ecc:	b93b      	cbnz	r3, 8012ede <uxr_serialize_CLIENT_Representation+0x62>
 8012ece:	8bb1      	ldrh	r1, [r6, #28]
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	f7f8 fab3 	bl	800b43c <ucdr_serialize_uint16_t>
 8012ed6:	ea08 0000 	and.w	r0, r8, r0
 8012eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ede:	6931      	ldr	r1, [r6, #16]
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	f7f8 fc95 	bl	800b810 <ucdr_serialize_uint32_t>
 8012ee6:	6933      	ldr	r3, [r6, #16]
 8012ee8:	b1e3      	cbz	r3, 8012f24 <uxr_serialize_CLIENT_Representation+0xa8>
 8012eea:	b1c0      	cbz	r0, 8012f1e <uxr_serialize_CLIENT_Representation+0xa2>
 8012eec:	4637      	mov	r7, r6
 8012eee:	f04f 0900 	mov.w	r9, #0
 8012ef2:	e001      	b.n	8012ef8 <uxr_serialize_CLIENT_Representation+0x7c>
 8012ef4:	3708      	adds	r7, #8
 8012ef6:	b194      	cbz	r4, 8012f1e <uxr_serialize_CLIENT_Representation+0xa2>
 8012ef8:	6979      	ldr	r1, [r7, #20]
 8012efa:	4628      	mov	r0, r5
 8012efc:	f005 f8b2 	bl	8018064 <ucdr_serialize_string>
 8012f00:	69b9      	ldr	r1, [r7, #24]
 8012f02:	4604      	mov	r4, r0
 8012f04:	4628      	mov	r0, r5
 8012f06:	f005 f8ad 	bl	8018064 <ucdr_serialize_string>
 8012f0a:	6933      	ldr	r3, [r6, #16]
 8012f0c:	f109 0901 	add.w	r9, r9, #1
 8012f10:	4004      	ands	r4, r0
 8012f12:	4599      	cmp	r9, r3
 8012f14:	b2e4      	uxtb	r4, r4
 8012f16:	d3ed      	bcc.n	8012ef4 <uxr_serialize_CLIENT_Representation+0x78>
 8012f18:	ea08 0804 	and.w	r8, r8, r4
 8012f1c:	e7d7      	b.n	8012ece <uxr_serialize_CLIENT_Representation+0x52>
 8012f1e:	f04f 0800 	mov.w	r8, #0
 8012f22:	e7d4      	b.n	8012ece <uxr_serialize_CLIENT_Representation+0x52>
 8012f24:	ea08 0800 	and.w	r8, r8, r0
 8012f28:	e7d1      	b.n	8012ece <uxr_serialize_CLIENT_Representation+0x52>
 8012f2a:	bf00      	nop

08012f2c <uxr_deserialize_CLIENT_Representation>:
 8012f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f30:	2204      	movs	r2, #4
 8012f32:	460c      	mov	r4, r1
 8012f34:	4605      	mov	r5, r0
 8012f36:	f7fd f961 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8012f3a:	2202      	movs	r2, #2
 8012f3c:	4607      	mov	r7, r0
 8012f3e:	1d21      	adds	r1, r4, #4
 8012f40:	4628      	mov	r0, r5
 8012f42:	f7fd f95b 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8012f46:	4038      	ands	r0, r7
 8012f48:	2202      	movs	r2, #2
 8012f4a:	1da1      	adds	r1, r4, #6
 8012f4c:	b2c6      	uxtb	r6, r0
 8012f4e:	4628      	mov	r0, r5
 8012f50:	f7fd f954 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8012f54:	2204      	movs	r2, #4
 8012f56:	4006      	ands	r6, r0
 8012f58:	f104 0108 	add.w	r1, r4, #8
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	f7fd f94d 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8012f62:	f104 010c 	add.w	r1, r4, #12
 8012f66:	4006      	ands	r6, r0
 8012f68:	4628      	mov	r0, r5
 8012f6a:	f7f8 fa51 	bl	800b410 <ucdr_deserialize_uint8_t>
 8012f6e:	f104 010d 	add.w	r1, r4, #13
 8012f72:	ea06 0700 	and.w	r7, r6, r0
 8012f76:	4628      	mov	r0, r5
 8012f78:	f7f8 fa1c 	bl	800b3b4 <ucdr_deserialize_bool>
 8012f7c:	7b63      	ldrb	r3, [r4, #13]
 8012f7e:	4007      	ands	r7, r0
 8012f80:	b93b      	cbnz	r3, 8012f92 <uxr_deserialize_CLIENT_Representation+0x66>
 8012f82:	f104 011c 	add.w	r1, r4, #28
 8012f86:	4628      	mov	r0, r5
 8012f88:	f7f8 fb58 	bl	800b63c <ucdr_deserialize_uint16_t>
 8012f8c:	4038      	ands	r0, r7
 8012f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f92:	f104 0110 	add.w	r1, r4, #16
 8012f96:	4628      	mov	r0, r5
 8012f98:	f7f8 fd6a 	bl	800ba70 <ucdr_deserialize_uint32_t>
 8012f9c:	6923      	ldr	r3, [r4, #16]
 8012f9e:	2b01      	cmp	r3, #1
 8012fa0:	d903      	bls.n	8012faa <uxr_deserialize_CLIENT_Representation+0x7e>
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	75ab      	strb	r3, [r5, #22]
 8012fa6:	2700      	movs	r7, #0
 8012fa8:	e7eb      	b.n	8012f82 <uxr_deserialize_CLIENT_Representation+0x56>
 8012faa:	b30b      	cbz	r3, 8012ff0 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012fac:	2800      	cmp	r0, #0
 8012fae:	d0fa      	beq.n	8012fa6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012fb0:	46a0      	mov	r8, r4
 8012fb2:	f04f 0900 	mov.w	r9, #0
 8012fb6:	e001      	b.n	8012fbc <uxr_deserialize_CLIENT_Representation+0x90>
 8012fb8:	2e00      	cmp	r6, #0
 8012fba:	d0f4      	beq.n	8012fa6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012fbc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	f005 f85d 	bl	8018084 <ucdr_deserialize_string>
 8012fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012fce:	4606      	mov	r6, r0
 8012fd0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	f005 f855 	bl	8018084 <ucdr_deserialize_string>
 8012fda:	6923      	ldr	r3, [r4, #16]
 8012fdc:	f109 0901 	add.w	r9, r9, #1
 8012fe0:	4006      	ands	r6, r0
 8012fe2:	4599      	cmp	r9, r3
 8012fe4:	f108 0808 	add.w	r8, r8, #8
 8012fe8:	b2f6      	uxtb	r6, r6
 8012fea:	d3e5      	bcc.n	8012fb8 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012fec:	4037      	ands	r7, r6
 8012fee:	e7c8      	b.n	8012f82 <uxr_deserialize_CLIENT_Representation+0x56>
 8012ff0:	4007      	ands	r7, r0
 8012ff2:	e7c6      	b.n	8012f82 <uxr_deserialize_CLIENT_Representation+0x56>

08012ff4 <uxr_serialize_AGENT_Representation>:
 8012ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ff8:	2204      	movs	r2, #4
 8012ffa:	460f      	mov	r7, r1
 8012ffc:	4605      	mov	r5, r0
 8012ffe:	f7fd f899 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013002:	2202      	movs	r2, #2
 8013004:	4604      	mov	r4, r0
 8013006:	1d39      	adds	r1, r7, #4
 8013008:	4628      	mov	r0, r5
 801300a:	f7fd f893 	bl	8010134 <ucdr_serialize_array_uint8_t>
 801300e:	4020      	ands	r0, r4
 8013010:	2202      	movs	r2, #2
 8013012:	1db9      	adds	r1, r7, #6
 8013014:	b2c4      	uxtb	r4, r0
 8013016:	4628      	mov	r0, r5
 8013018:	f7fd f88c 	bl	8010134 <ucdr_serialize_array_uint8_t>
 801301c:	7a39      	ldrb	r1, [r7, #8]
 801301e:	4004      	ands	r4, r0
 8013020:	4628      	mov	r0, r5
 8013022:	f7f8 f9b1 	bl	800b388 <ucdr_serialize_bool>
 8013026:	7a3b      	ldrb	r3, [r7, #8]
 8013028:	ea00 0804 	and.w	r8, r0, r4
 801302c:	b913      	cbnz	r3, 8013034 <uxr_serialize_AGENT_Representation+0x40>
 801302e:	4640      	mov	r0, r8
 8013030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013034:	68f9      	ldr	r1, [r7, #12]
 8013036:	4628      	mov	r0, r5
 8013038:	f7f8 fbea 	bl	800b810 <ucdr_serialize_uint32_t>
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	b303      	cbz	r3, 8013082 <uxr_serialize_AGENT_Representation+0x8e>
 8013040:	b1d0      	cbz	r0, 8013078 <uxr_serialize_AGENT_Representation+0x84>
 8013042:	463e      	mov	r6, r7
 8013044:	f04f 0900 	mov.w	r9, #0
 8013048:	e001      	b.n	801304e <uxr_serialize_AGENT_Representation+0x5a>
 801304a:	3608      	adds	r6, #8
 801304c:	b1a4      	cbz	r4, 8013078 <uxr_serialize_AGENT_Representation+0x84>
 801304e:	6931      	ldr	r1, [r6, #16]
 8013050:	4628      	mov	r0, r5
 8013052:	f005 f807 	bl	8018064 <ucdr_serialize_string>
 8013056:	6971      	ldr	r1, [r6, #20]
 8013058:	4604      	mov	r4, r0
 801305a:	4628      	mov	r0, r5
 801305c:	f005 f802 	bl	8018064 <ucdr_serialize_string>
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	f109 0901 	add.w	r9, r9, #1
 8013066:	4004      	ands	r4, r0
 8013068:	4599      	cmp	r9, r3
 801306a:	b2e4      	uxtb	r4, r4
 801306c:	d3ed      	bcc.n	801304a <uxr_serialize_AGENT_Representation+0x56>
 801306e:	ea08 0804 	and.w	r8, r8, r4
 8013072:	4640      	mov	r0, r8
 8013074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013078:	f04f 0800 	mov.w	r8, #0
 801307c:	4640      	mov	r0, r8
 801307e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013082:	ea08 0800 	and.w	r8, r8, r0
 8013086:	e7d2      	b.n	801302e <uxr_serialize_AGENT_Representation+0x3a>

08013088 <uxr_serialize_DATAWRITER_Representation>:
 8013088:	b570      	push	{r4, r5, r6, lr}
 801308a:	460d      	mov	r5, r1
 801308c:	7809      	ldrb	r1, [r1, #0]
 801308e:	4606      	mov	r6, r0
 8013090:	f7f8 f9a8 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013094:	4604      	mov	r4, r0
 8013096:	b130      	cbz	r0, 80130a6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013098:	782b      	ldrb	r3, [r5, #0]
 801309a:	2b02      	cmp	r3, #2
 801309c:	d00c      	beq.n	80130b8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801309e:	2b03      	cmp	r3, #3
 80130a0:	d010      	beq.n	80130c4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d008      	beq.n	80130b8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80130a6:	2202      	movs	r2, #2
 80130a8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80130ac:	4630      	mov	r0, r6
 80130ae:	f7fd f841 	bl	8010134 <ucdr_serialize_array_uint8_t>
 80130b2:	4020      	ands	r0, r4
 80130b4:	b2c0      	uxtb	r0, r0
 80130b6:	bd70      	pop	{r4, r5, r6, pc}
 80130b8:	6869      	ldr	r1, [r5, #4]
 80130ba:	4630      	mov	r0, r6
 80130bc:	f004 ffd2 	bl	8018064 <ucdr_serialize_string>
 80130c0:	4604      	mov	r4, r0
 80130c2:	e7f0      	b.n	80130a6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80130c4:	4629      	mov	r1, r5
 80130c6:	4630      	mov	r0, r6
 80130c8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80130cc:	3104      	adds	r1, #4
 80130ce:	f7fd f9cf 	bl	8010470 <ucdr_serialize_sequence_uint8_t>
 80130d2:	4604      	mov	r4, r0
 80130d4:	e7e7      	b.n	80130a6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80130d6:	bf00      	nop

080130d8 <uxr_serialize_ObjectVariant.part.0>:
 80130d8:	b570      	push	{r4, r5, r6, lr}
 80130da:	780b      	ldrb	r3, [r1, #0]
 80130dc:	3b01      	subs	r3, #1
 80130de:	460c      	mov	r4, r1
 80130e0:	4605      	mov	r5, r0
 80130e2:	2b0d      	cmp	r3, #13
 80130e4:	d854      	bhi.n	8013190 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80130e6:	e8df f003 	tbb	[pc, r3]
 80130ea:	0730      	.short	0x0730
 80130ec:	07071b1b 	.word	0x07071b1b
 80130f0:	0c530707 	.word	0x0c530707
 80130f4:	494e0c0c 	.word	0x494e0c0c
 80130f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130fc:	3104      	adds	r1, #4
 80130fe:	f7ff bfc3 	b.w	8013088 <uxr_serialize_DATAWRITER_Representation>
 8013102:	7909      	ldrb	r1, [r1, #4]
 8013104:	f7f8 f96e 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013108:	b1e8      	cbz	r0, 8013146 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801310a:	7923      	ldrb	r3, [r4, #4]
 801310c:	2b01      	cmp	r3, #1
 801310e:	d001      	beq.n	8013114 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013110:	2b02      	cmp	r3, #2
 8013112:	d13d      	bne.n	8013190 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013114:	68a1      	ldr	r1, [r4, #8]
 8013116:	4628      	mov	r0, r5
 8013118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801311c:	f004 bfa2 	b.w	8018064 <ucdr_serialize_string>
 8013120:	7909      	ldrb	r1, [r1, #4]
 8013122:	f7f8 f95f 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013126:	4606      	mov	r6, r0
 8013128:	b120      	cbz	r0, 8013134 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801312a:	7923      	ldrb	r3, [r4, #4]
 801312c:	2b02      	cmp	r3, #2
 801312e:	d039      	beq.n	80131a4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013130:	2b03      	cmp	r3, #3
 8013132:	d02f      	beq.n	8013194 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8013134:	2202      	movs	r2, #2
 8013136:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801313a:	4628      	mov	r0, r5
 801313c:	f7fc fffa 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013140:	4030      	ands	r0, r6
 8013142:	b2c0      	uxtb	r0, r0
 8013144:	bd70      	pop	{r4, r5, r6, pc}
 8013146:	2000      	movs	r0, #0
 8013148:	bd70      	pop	{r4, r5, r6, pc}
 801314a:	7909      	ldrb	r1, [r1, #4]
 801314c:	f7f8 f94a 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013150:	4606      	mov	r6, r0
 8013152:	b158      	cbz	r0, 801316c <uxr_serialize_ObjectVariant.part.0+0x94>
 8013154:	7923      	ldrb	r3, [r4, #4]
 8013156:	2b02      	cmp	r3, #2
 8013158:	d003      	beq.n	8013162 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801315a:	2b03      	cmp	r3, #3
 801315c:	d028      	beq.n	80131b0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801315e:	2b01      	cmp	r3, #1
 8013160:	d104      	bne.n	801316c <uxr_serialize_ObjectVariant.part.0+0x94>
 8013162:	68a1      	ldr	r1, [r4, #8]
 8013164:	4628      	mov	r0, r5
 8013166:	f004 ff7d 	bl	8018064 <ucdr_serialize_string>
 801316a:	4606      	mov	r6, r0
 801316c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8013170:	4628      	mov	r0, r5
 8013172:	f7f8 fe73 	bl	800be5c <ucdr_serialize_int16_t>
 8013176:	4030      	ands	r0, r6
 8013178:	b2c0      	uxtb	r0, r0
 801317a:	bd70      	pop	{r4, r5, r6, pc}
 801317c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013180:	3104      	adds	r1, #4
 8013182:	f7ff be7b 	b.w	8012e7c <uxr_serialize_CLIENT_Representation>
 8013186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801318a:	3104      	adds	r1, #4
 801318c:	f7ff bf32 	b.w	8012ff4 <uxr_serialize_AGENT_Representation>
 8013190:	2001      	movs	r0, #1
 8013192:	bd70      	pop	{r4, r5, r6, pc}
 8013194:	68a2      	ldr	r2, [r4, #8]
 8013196:	f104 010c 	add.w	r1, r4, #12
 801319a:	4628      	mov	r0, r5
 801319c:	f7fd f968 	bl	8010470 <ucdr_serialize_sequence_uint8_t>
 80131a0:	4606      	mov	r6, r0
 80131a2:	e7c7      	b.n	8013134 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80131a4:	68a1      	ldr	r1, [r4, #8]
 80131a6:	4628      	mov	r0, r5
 80131a8:	f004 ff5c 	bl	8018064 <ucdr_serialize_string>
 80131ac:	4606      	mov	r6, r0
 80131ae:	e7c1      	b.n	8013134 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80131b0:	68a2      	ldr	r2, [r4, #8]
 80131b2:	f104 010c 	add.w	r1, r4, #12
 80131b6:	4628      	mov	r0, r5
 80131b8:	f7fd f95a 	bl	8010470 <ucdr_serialize_sequence_uint8_t>
 80131bc:	4606      	mov	r6, r0
 80131be:	e7d5      	b.n	801316c <uxr_serialize_ObjectVariant.part.0+0x94>

080131c0 <uxr_deserialize_DATAWRITER_Representation>:
 80131c0:	b570      	push	{r4, r5, r6, lr}
 80131c2:	4606      	mov	r6, r0
 80131c4:	460d      	mov	r5, r1
 80131c6:	f7f8 f923 	bl	800b410 <ucdr_deserialize_uint8_t>
 80131ca:	4604      	mov	r4, r0
 80131cc:	b130      	cbz	r0, 80131dc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80131ce:	782b      	ldrb	r3, [r5, #0]
 80131d0:	2b02      	cmp	r3, #2
 80131d2:	d00c      	beq.n	80131ee <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80131d4:	2b03      	cmp	r3, #3
 80131d6:	d012      	beq.n	80131fe <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80131d8:	2b01      	cmp	r3, #1
 80131da:	d008      	beq.n	80131ee <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80131dc:	2202      	movs	r2, #2
 80131de:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80131e2:	4630      	mov	r0, r6
 80131e4:	f7fd f80a 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 80131e8:	4020      	ands	r0, r4
 80131ea:	b2c0      	uxtb	r0, r0
 80131ec:	bd70      	pop	{r4, r5, r6, pc}
 80131ee:	6869      	ldr	r1, [r5, #4]
 80131f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80131f4:	4630      	mov	r0, r6
 80131f6:	f004 ff45 	bl	8018084 <ucdr_deserialize_string>
 80131fa:	4604      	mov	r4, r0
 80131fc:	e7ee      	b.n	80131dc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80131fe:	1d2b      	adds	r3, r5, #4
 8013200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013204:	f105 0108 	add.w	r1, r5, #8
 8013208:	4630      	mov	r0, r6
 801320a:	f7fd f943 	bl	8010494 <ucdr_deserialize_sequence_uint8_t>
 801320e:	4604      	mov	r4, r0
 8013210:	e7e4      	b.n	80131dc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013212:	bf00      	nop

08013214 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013214:	b570      	push	{r4, r5, r6, lr}
 8013216:	460d      	mov	r5, r1
 8013218:	7809      	ldrb	r1, [r1, #0]
 801321a:	4606      	mov	r6, r0
 801321c:	f7f8 f8b4 	bl	800b388 <ucdr_serialize_bool>
 8013220:	782b      	ldrb	r3, [r5, #0]
 8013222:	4604      	mov	r4, r0
 8013224:	b94b      	cbnz	r3, 801323a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013226:	7a29      	ldrb	r1, [r5, #8]
 8013228:	4630      	mov	r0, r6
 801322a:	f7f8 f8ad 	bl	800b388 <ucdr_serialize_bool>
 801322e:	7a2b      	ldrb	r3, [r5, #8]
 8013230:	4004      	ands	r4, r0
 8013232:	b2e4      	uxtb	r4, r4
 8013234:	b943      	cbnz	r3, 8013248 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013236:	4620      	mov	r0, r4
 8013238:	bd70      	pop	{r4, r5, r6, pc}
 801323a:	6869      	ldr	r1, [r5, #4]
 801323c:	4630      	mov	r0, r6
 801323e:	f004 ff11 	bl	8018064 <ucdr_serialize_string>
 8013242:	4004      	ands	r4, r0
 8013244:	b2e4      	uxtb	r4, r4
 8013246:	e7ee      	b.n	8013226 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013248:	68e9      	ldr	r1, [r5, #12]
 801324a:	4630      	mov	r0, r6
 801324c:	f004 ff0a 	bl	8018064 <ucdr_serialize_string>
 8013250:	4004      	ands	r4, r0
 8013252:	4620      	mov	r0, r4
 8013254:	bd70      	pop	{r4, r5, r6, pc}
 8013256:	bf00      	nop

08013258 <uxr_serialize_OBJK_Topic_Binary>:
 8013258:	b570      	push	{r4, r5, r6, lr}
 801325a:	460d      	mov	r5, r1
 801325c:	6809      	ldr	r1, [r1, #0]
 801325e:	4606      	mov	r6, r0
 8013260:	f004 ff00 	bl	8018064 <ucdr_serialize_string>
 8013264:	7929      	ldrb	r1, [r5, #4]
 8013266:	4604      	mov	r4, r0
 8013268:	4630      	mov	r0, r6
 801326a:	f7f8 f88d 	bl	800b388 <ucdr_serialize_bool>
 801326e:	792b      	ldrb	r3, [r5, #4]
 8013270:	4004      	ands	r4, r0
 8013272:	b2e4      	uxtb	r4, r4
 8013274:	b943      	cbnz	r3, 8013288 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013276:	7b29      	ldrb	r1, [r5, #12]
 8013278:	4630      	mov	r0, r6
 801327a:	f7f8 f885 	bl	800b388 <ucdr_serialize_bool>
 801327e:	7b2b      	ldrb	r3, [r5, #12]
 8013280:	4004      	ands	r4, r0
 8013282:	b93b      	cbnz	r3, 8013294 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013284:	4620      	mov	r0, r4
 8013286:	bd70      	pop	{r4, r5, r6, pc}
 8013288:	68a9      	ldr	r1, [r5, #8]
 801328a:	4630      	mov	r0, r6
 801328c:	f004 feea 	bl	8018064 <ucdr_serialize_string>
 8013290:	4004      	ands	r4, r0
 8013292:	e7f0      	b.n	8013276 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013294:	6929      	ldr	r1, [r5, #16]
 8013296:	4630      	mov	r0, r6
 8013298:	f004 fee4 	bl	8018064 <ucdr_serialize_string>
 801329c:	4004      	ands	r4, r0
 801329e:	b2e4      	uxtb	r4, r4
 80132a0:	4620      	mov	r0, r4
 80132a2:	bd70      	pop	{r4, r5, r6, pc}

080132a4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80132a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132a8:	460c      	mov	r4, r1
 80132aa:	7809      	ldrb	r1, [r1, #0]
 80132ac:	4606      	mov	r6, r0
 80132ae:	f7f8 f86b 	bl	800b388 <ucdr_serialize_bool>
 80132b2:	7823      	ldrb	r3, [r4, #0]
 80132b4:	4605      	mov	r5, r0
 80132b6:	b96b      	cbnz	r3, 80132d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80132b8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80132bc:	4630      	mov	r0, r6
 80132be:	f7f8 f863 	bl	800b388 <ucdr_serialize_bool>
 80132c2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80132c6:	4005      	ands	r5, r0
 80132c8:	b2ed      	uxtb	r5, r5
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d169      	bne.n	80133a2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80132ce:	4628      	mov	r0, r5
 80132d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d4:	6861      	ldr	r1, [r4, #4]
 80132d6:	4630      	mov	r0, r6
 80132d8:	f7f8 fa9a 	bl	800b810 <ucdr_serialize_uint32_t>
 80132dc:	6863      	ldr	r3, [r4, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d06b      	beq.n	80133ba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80132e2:	2800      	cmp	r0, #0
 80132e4:	d067      	beq.n	80133b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132e6:	68a1      	ldr	r1, [r4, #8]
 80132e8:	4630      	mov	r0, r6
 80132ea:	f004 febb 	bl	8018064 <ucdr_serialize_string>
 80132ee:	6863      	ldr	r3, [r4, #4]
 80132f0:	2b01      	cmp	r3, #1
 80132f2:	d953      	bls.n	801339c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80132f4:	2800      	cmp	r0, #0
 80132f6:	d05e      	beq.n	80133b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132f8:	68e1      	ldr	r1, [r4, #12]
 80132fa:	4630      	mov	r0, r6
 80132fc:	f004 feb2 	bl	8018064 <ucdr_serialize_string>
 8013300:	6863      	ldr	r3, [r4, #4]
 8013302:	2b02      	cmp	r3, #2
 8013304:	d94a      	bls.n	801339c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013306:	2800      	cmp	r0, #0
 8013308:	d055      	beq.n	80133b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801330a:	6921      	ldr	r1, [r4, #16]
 801330c:	4630      	mov	r0, r6
 801330e:	f004 fea9 	bl	8018064 <ucdr_serialize_string>
 8013312:	6863      	ldr	r3, [r4, #4]
 8013314:	2b03      	cmp	r3, #3
 8013316:	d941      	bls.n	801339c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013318:	2800      	cmp	r0, #0
 801331a:	d04c      	beq.n	80133b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801331c:	6961      	ldr	r1, [r4, #20]
 801331e:	4630      	mov	r0, r6
 8013320:	f004 fea0 	bl	8018064 <ucdr_serialize_string>
 8013324:	6863      	ldr	r3, [r4, #4]
 8013326:	2b04      	cmp	r3, #4
 8013328:	d938      	bls.n	801339c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801332a:	2800      	cmp	r0, #0
 801332c:	d043      	beq.n	80133b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801332e:	69a1      	ldr	r1, [r4, #24]
 8013330:	4630      	mov	r0, r6
 8013332:	f004 fe97 	bl	8018064 <ucdr_serialize_string>
 8013336:	6863      	ldr	r3, [r4, #4]
 8013338:	2b05      	cmp	r3, #5
 801333a:	d92f      	bls.n	801339c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801333c:	2800      	cmp	r0, #0
 801333e:	d03a      	beq.n	80133b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013340:	69e1      	ldr	r1, [r4, #28]
 8013342:	4630      	mov	r0, r6
 8013344:	f004 fe8e 	bl	8018064 <ucdr_serialize_string>
 8013348:	6863      	ldr	r3, [r4, #4]
 801334a:	2b06      	cmp	r3, #6
 801334c:	d926      	bls.n	801339c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801334e:	b390      	cbz	r0, 80133b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013350:	6a21      	ldr	r1, [r4, #32]
 8013352:	4630      	mov	r0, r6
 8013354:	f004 fe86 	bl	8018064 <ucdr_serialize_string>
 8013358:	6863      	ldr	r3, [r4, #4]
 801335a:	2b07      	cmp	r3, #7
 801335c:	d91e      	bls.n	801339c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801335e:	b350      	cbz	r0, 80133b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013360:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013362:	4630      	mov	r0, r6
 8013364:	f004 fe7e 	bl	8018064 <ucdr_serialize_string>
 8013368:	6863      	ldr	r3, [r4, #4]
 801336a:	2b08      	cmp	r3, #8
 801336c:	d916      	bls.n	801339c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801336e:	b310      	cbz	r0, 80133b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013370:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013372:	4630      	mov	r0, r6
 8013374:	f004 fe76 	bl	8018064 <ucdr_serialize_string>
 8013378:	6863      	ldr	r3, [r4, #4]
 801337a:	2b09      	cmp	r3, #9
 801337c:	d90e      	bls.n	801339c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801337e:	b1d0      	cbz	r0, 80133b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013380:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013384:	2709      	movs	r7, #9
 8013386:	e000      	b.n	801338a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013388:	b1a8      	cbz	r0, 80133b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801338a:	f858 1b04 	ldr.w	r1, [r8], #4
 801338e:	4630      	mov	r0, r6
 8013390:	f004 fe68 	bl	8018064 <ucdr_serialize_string>
 8013394:	6862      	ldr	r2, [r4, #4]
 8013396:	3701      	adds	r7, #1
 8013398:	4297      	cmp	r7, r2
 801339a:	d3f5      	bcc.n	8013388 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801339c:	4005      	ands	r5, r0
 801339e:	b2ed      	uxtb	r5, r5
 80133a0:	e78a      	b.n	80132b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80133a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80133a4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80133a8:	4630      	mov	r0, r6
 80133aa:	f7fd f861 	bl	8010470 <ucdr_serialize_sequence_uint8_t>
 80133ae:	4005      	ands	r5, r0
 80133b0:	4628      	mov	r0, r5
 80133b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b6:	2500      	movs	r5, #0
 80133b8:	e77e      	b.n	80132b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80133ba:	4028      	ands	r0, r5
 80133bc:	b2c5      	uxtb	r5, r0
 80133be:	e77b      	b.n	80132b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080133c0 <uxr_serialize_OBJK_Publisher_Binary>:
 80133c0:	b570      	push	{r4, r5, r6, lr}
 80133c2:	460d      	mov	r5, r1
 80133c4:	7809      	ldrb	r1, [r1, #0]
 80133c6:	4606      	mov	r6, r0
 80133c8:	f7f7 ffde 	bl	800b388 <ucdr_serialize_bool>
 80133cc:	782b      	ldrb	r3, [r5, #0]
 80133ce:	4604      	mov	r4, r0
 80133d0:	b94b      	cbnz	r3, 80133e6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80133d2:	7a29      	ldrb	r1, [r5, #8]
 80133d4:	4630      	mov	r0, r6
 80133d6:	f7f7 ffd7 	bl	800b388 <ucdr_serialize_bool>
 80133da:	7a2b      	ldrb	r3, [r5, #8]
 80133dc:	4004      	ands	r4, r0
 80133de:	b2e4      	uxtb	r4, r4
 80133e0:	b943      	cbnz	r3, 80133f4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80133e2:	4620      	mov	r0, r4
 80133e4:	bd70      	pop	{r4, r5, r6, pc}
 80133e6:	6869      	ldr	r1, [r5, #4]
 80133e8:	4630      	mov	r0, r6
 80133ea:	f004 fe3b 	bl	8018064 <ucdr_serialize_string>
 80133ee:	4004      	ands	r4, r0
 80133f0:	b2e4      	uxtb	r4, r4
 80133f2:	e7ee      	b.n	80133d2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80133f4:	f105 010c 	add.w	r1, r5, #12
 80133f8:	4630      	mov	r0, r6
 80133fa:	f7ff ff53 	bl	80132a4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80133fe:	4004      	ands	r4, r0
 8013400:	4620      	mov	r0, r4
 8013402:	bd70      	pop	{r4, r5, r6, pc}

08013404 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013404:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013408:	4688      	mov	r8, r1
 801340a:	8809      	ldrh	r1, [r1, #0]
 801340c:	4681      	mov	r9, r0
 801340e:	f7f8 f815 	bl	800b43c <ucdr_serialize_uint16_t>
 8013412:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013416:	4606      	mov	r6, r0
 8013418:	4648      	mov	r0, r9
 801341a:	f7f7 ffb5 	bl	800b388 <ucdr_serialize_bool>
 801341e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013422:	4006      	ands	r6, r0
 8013424:	b2f5      	uxtb	r5, r6
 8013426:	b9eb      	cbnz	r3, 8013464 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013428:	f898 1006 	ldrb.w	r1, [r8, #6]
 801342c:	4648      	mov	r0, r9
 801342e:	f7f7 ffab 	bl	800b388 <ucdr_serialize_bool>
 8013432:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013436:	4005      	ands	r5, r0
 8013438:	bb7b      	cbnz	r3, 801349a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801343a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801343e:	4648      	mov	r0, r9
 8013440:	f7f7 ffa2 	bl	800b388 <ucdr_serialize_bool>
 8013444:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013448:	4005      	ands	r5, r0
 801344a:	b9f3      	cbnz	r3, 801348a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801344c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013450:	4648      	mov	r0, r9
 8013452:	f7f7 ff99 	bl	800b388 <ucdr_serialize_bool>
 8013456:	f898 3014 	ldrb.w	r3, [r8, #20]
 801345a:	4005      	ands	r5, r0
 801345c:	b94b      	cbnz	r3, 8013472 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801345e:	4628      	mov	r0, r5
 8013460:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013464:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013468:	4648      	mov	r0, r9
 801346a:	f7f7 ffe7 	bl	800b43c <ucdr_serialize_uint16_t>
 801346e:	4005      	ands	r5, r0
 8013470:	e7da      	b.n	8013428 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013472:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013476:	f108 011c 	add.w	r1, r8, #28
 801347a:	4648      	mov	r0, r9
 801347c:	f7fc fff8 	bl	8010470 <ucdr_serialize_sequence_uint8_t>
 8013480:	4028      	ands	r0, r5
 8013482:	b2c5      	uxtb	r5, r0
 8013484:	4628      	mov	r0, r5
 8013486:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801348a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801348e:	4648      	mov	r0, r9
 8013490:	f7f8 f9be 	bl	800b810 <ucdr_serialize_uint32_t>
 8013494:	4028      	ands	r0, r5
 8013496:	b2c5      	uxtb	r5, r0
 8013498:	e7d8      	b.n	801344c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801349a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801349e:	4648      	mov	r0, r9
 80134a0:	f7f8 f9b6 	bl	800b810 <ucdr_serialize_uint32_t>
 80134a4:	4028      	ands	r0, r5
 80134a6:	b2c5      	uxtb	r5, r0
 80134a8:	e7c7      	b.n	801343a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80134aa:	bf00      	nop

080134ac <uxr_serialize_OBJK_DataWriter_Binary>:
 80134ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ae:	2202      	movs	r2, #2
 80134b0:	460d      	mov	r5, r1
 80134b2:	4606      	mov	r6, r0
 80134b4:	f7fc fe3e 	bl	8010134 <ucdr_serialize_array_uint8_t>
 80134b8:	78a9      	ldrb	r1, [r5, #2]
 80134ba:	4604      	mov	r4, r0
 80134bc:	4630      	mov	r0, r6
 80134be:	f7f7 ff63 	bl	800b388 <ucdr_serialize_bool>
 80134c2:	78ab      	ldrb	r3, [r5, #2]
 80134c4:	4004      	ands	r4, r0
 80134c6:	b2e4      	uxtb	r4, r4
 80134c8:	b90b      	cbnz	r3, 80134ce <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80134ca:	4620      	mov	r0, r4
 80134cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134ce:	f105 0108 	add.w	r1, r5, #8
 80134d2:	4630      	mov	r0, r6
 80134d4:	f7ff ff96 	bl	8013404 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80134d8:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80134dc:	4607      	mov	r7, r0
 80134de:	4630      	mov	r0, r6
 80134e0:	f7f7 ff52 	bl	800b388 <ucdr_serialize_bool>
 80134e4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80134e8:	4038      	ands	r0, r7
 80134ea:	b2c7      	uxtb	r7, r0
 80134ec:	b913      	cbnz	r3, 80134f4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80134ee:	403c      	ands	r4, r7
 80134f0:	4620      	mov	r0, r4
 80134f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134f4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80134f8:	4630      	mov	r0, r6
 80134fa:	f7f8 fbdf 	bl	800bcbc <ucdr_serialize_uint64_t>
 80134fe:	4007      	ands	r7, r0
 8013500:	e7f5      	b.n	80134ee <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013502:	bf00      	nop

08013504 <uxr_serialize_OBJK_Replier_Binary>:
 8013504:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8013508:	460f      	mov	r7, r1
 801350a:	6809      	ldr	r1, [r1, #0]
 801350c:	4680      	mov	r8, r0
 801350e:	f004 fda9 	bl	8018064 <ucdr_serialize_string>
 8013512:	6879      	ldr	r1, [r7, #4]
 8013514:	4605      	mov	r5, r0
 8013516:	4640      	mov	r0, r8
 8013518:	f004 fda4 	bl	8018064 <ucdr_serialize_string>
 801351c:	68b9      	ldr	r1, [r7, #8]
 801351e:	4005      	ands	r5, r0
 8013520:	4640      	mov	r0, r8
 8013522:	f004 fd9f 	bl	8018064 <ucdr_serialize_string>
 8013526:	b2ec      	uxtb	r4, r5
 8013528:	4004      	ands	r4, r0
 801352a:	7b39      	ldrb	r1, [r7, #12]
 801352c:	4640      	mov	r0, r8
 801352e:	f7f7 ff2b 	bl	800b388 <ucdr_serialize_bool>
 8013532:	7b3b      	ldrb	r3, [r7, #12]
 8013534:	4004      	ands	r4, r0
 8013536:	b94b      	cbnz	r3, 801354c <uxr_serialize_OBJK_Replier_Binary+0x48>
 8013538:	7d39      	ldrb	r1, [r7, #20]
 801353a:	4640      	mov	r0, r8
 801353c:	f7f7 ff24 	bl	800b388 <ucdr_serialize_bool>
 8013540:	7d3b      	ldrb	r3, [r7, #20]
 8013542:	4004      	ands	r4, r0
 8013544:	b943      	cbnz	r3, 8013558 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8013546:	4620      	mov	r0, r4
 8013548:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801354c:	6939      	ldr	r1, [r7, #16]
 801354e:	4640      	mov	r0, r8
 8013550:	f004 fd88 	bl	8018064 <ucdr_serialize_string>
 8013554:	4004      	ands	r4, r0
 8013556:	e7ef      	b.n	8013538 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8013558:	69b9      	ldr	r1, [r7, #24]
 801355a:	4640      	mov	r0, r8
 801355c:	f004 fd82 	bl	8018064 <ucdr_serialize_string>
 8013560:	4004      	ands	r4, r0
 8013562:	b2e4      	uxtb	r4, r4
 8013564:	4620      	mov	r0, r4
 8013566:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801356a:	bf00      	nop

0801356c <uxr_deserialize_ObjectVariant>:
 801356c:	b570      	push	{r4, r5, r6, lr}
 801356e:	4605      	mov	r5, r0
 8013570:	460e      	mov	r6, r1
 8013572:	f7f7 ff4d 	bl	800b410 <ucdr_deserialize_uint8_t>
 8013576:	b168      	cbz	r0, 8013594 <uxr_deserialize_ObjectVariant+0x28>
 8013578:	7833      	ldrb	r3, [r6, #0]
 801357a:	3b01      	subs	r3, #1
 801357c:	4604      	mov	r4, r0
 801357e:	2b0d      	cmp	r3, #13
 8013580:	d809      	bhi.n	8013596 <uxr_deserialize_ObjectVariant+0x2a>
 8013582:	e8df f003 	tbb	[pc, r3]
 8013586:	0a41      	.short	0x0a41
 8013588:	0a0a2323 	.word	0x0a0a2323
 801358c:	10080a0a 	.word	0x10080a0a
 8013590:	565c1010 	.word	0x565c1010
 8013594:	2400      	movs	r4, #0
 8013596:	4620      	mov	r0, r4
 8013598:	bd70      	pop	{r4, r5, r6, pc}
 801359a:	1d31      	adds	r1, r6, #4
 801359c:	4628      	mov	r0, r5
 801359e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135a2:	f7ff be0d 	b.w	80131c0 <uxr_deserialize_DATAWRITER_Representation>
 80135a6:	1d31      	adds	r1, r6, #4
 80135a8:	4628      	mov	r0, r5
 80135aa:	f7f7 ff31 	bl	800b410 <ucdr_deserialize_uint8_t>
 80135ae:	2800      	cmp	r0, #0
 80135b0:	d0f0      	beq.n	8013594 <uxr_deserialize_ObjectVariant+0x28>
 80135b2:	7933      	ldrb	r3, [r6, #4]
 80135b4:	2b01      	cmp	r3, #1
 80135b6:	d001      	beq.n	80135bc <uxr_deserialize_ObjectVariant+0x50>
 80135b8:	2b02      	cmp	r3, #2
 80135ba:	d1ec      	bne.n	8013596 <uxr_deserialize_ObjectVariant+0x2a>
 80135bc:	68b1      	ldr	r1, [r6, #8]
 80135be:	4628      	mov	r0, r5
 80135c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80135c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135c8:	f004 bd5c 	b.w	8018084 <ucdr_deserialize_string>
 80135cc:	1d31      	adds	r1, r6, #4
 80135ce:	4628      	mov	r0, r5
 80135d0:	f7f7 ff1e 	bl	800b410 <ucdr_deserialize_uint8_t>
 80135d4:	4604      	mov	r4, r0
 80135d6:	b170      	cbz	r0, 80135f6 <uxr_deserialize_ObjectVariant+0x8a>
 80135d8:	7933      	ldrb	r3, [r6, #4]
 80135da:	2b02      	cmp	r3, #2
 80135dc:	d04c      	beq.n	8013678 <uxr_deserialize_ObjectVariant+0x10c>
 80135de:	2b03      	cmp	r3, #3
 80135e0:	d109      	bne.n	80135f6 <uxr_deserialize_ObjectVariant+0x8a>
 80135e2:	f106 0308 	add.w	r3, r6, #8
 80135e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80135ea:	f106 010c 	add.w	r1, r6, #12
 80135ee:	4628      	mov	r0, r5
 80135f0:	f7fc ff50 	bl	8010494 <ucdr_deserialize_sequence_uint8_t>
 80135f4:	4604      	mov	r4, r0
 80135f6:	2202      	movs	r2, #2
 80135f8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80135fc:	4628      	mov	r0, r5
 80135fe:	f7fc fdfd 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013602:	4020      	ands	r0, r4
 8013604:	b2c4      	uxtb	r4, r0
 8013606:	e7c6      	b.n	8013596 <uxr_deserialize_ObjectVariant+0x2a>
 8013608:	1d31      	adds	r1, r6, #4
 801360a:	4628      	mov	r0, r5
 801360c:	f7f7 ff00 	bl	800b410 <ucdr_deserialize_uint8_t>
 8013610:	4604      	mov	r4, r0
 8013612:	b130      	cbz	r0, 8013622 <uxr_deserialize_ObjectVariant+0xb6>
 8013614:	7933      	ldrb	r3, [r6, #4]
 8013616:	2b02      	cmp	r3, #2
 8013618:	d036      	beq.n	8013688 <uxr_deserialize_ObjectVariant+0x11c>
 801361a:	2b03      	cmp	r3, #3
 801361c:	d03c      	beq.n	8013698 <uxr_deserialize_ObjectVariant+0x12c>
 801361e:	2b01      	cmp	r3, #1
 8013620:	d032      	beq.n	8013688 <uxr_deserialize_ObjectVariant+0x11c>
 8013622:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013626:	4628      	mov	r0, r5
 8013628:	f7f8 fc98 	bl	800bf5c <ucdr_deserialize_int16_t>
 801362c:	4020      	ands	r0, r4
 801362e:	b2c4      	uxtb	r4, r0
 8013630:	e7b1      	b.n	8013596 <uxr_deserialize_ObjectVariant+0x2a>
 8013632:	1d31      	adds	r1, r6, #4
 8013634:	4628      	mov	r0, r5
 8013636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801363a:	f7ff bc77 	b.w	8012f2c <uxr_deserialize_CLIENT_Representation>
 801363e:	2204      	movs	r2, #4
 8013640:	18b1      	adds	r1, r6, r2
 8013642:	4628      	mov	r0, r5
 8013644:	f7fc fdda 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013648:	2202      	movs	r2, #2
 801364a:	f106 0108 	add.w	r1, r6, #8
 801364e:	4604      	mov	r4, r0
 8013650:	4628      	mov	r0, r5
 8013652:	f7fc fdd3 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013656:	2202      	movs	r2, #2
 8013658:	4004      	ands	r4, r0
 801365a:	f106 010a 	add.w	r1, r6, #10
 801365e:	4628      	mov	r0, r5
 8013660:	f7fc fdcc 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013664:	b2e4      	uxtb	r4, r4
 8013666:	4603      	mov	r3, r0
 8013668:	f106 010c 	add.w	r1, r6, #12
 801366c:	4628      	mov	r0, r5
 801366e:	401c      	ands	r4, r3
 8013670:	f7f7 fea0 	bl	800b3b4 <ucdr_deserialize_bool>
 8013674:	4004      	ands	r4, r0
 8013676:	e78e      	b.n	8013596 <uxr_deserialize_ObjectVariant+0x2a>
 8013678:	68b1      	ldr	r1, [r6, #8]
 801367a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801367e:	4628      	mov	r0, r5
 8013680:	f004 fd00 	bl	8018084 <ucdr_deserialize_string>
 8013684:	4604      	mov	r4, r0
 8013686:	e7b6      	b.n	80135f6 <uxr_deserialize_ObjectVariant+0x8a>
 8013688:	68b1      	ldr	r1, [r6, #8]
 801368a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801368e:	4628      	mov	r0, r5
 8013690:	f004 fcf8 	bl	8018084 <ucdr_deserialize_string>
 8013694:	4604      	mov	r4, r0
 8013696:	e7c4      	b.n	8013622 <uxr_deserialize_ObjectVariant+0xb6>
 8013698:	f106 0308 	add.w	r3, r6, #8
 801369c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80136a0:	f106 010c 	add.w	r1, r6, #12
 80136a4:	4628      	mov	r0, r5
 80136a6:	f7fc fef5 	bl	8010494 <ucdr_deserialize_sequence_uint8_t>
 80136aa:	4604      	mov	r4, r0
 80136ac:	e7b9      	b.n	8013622 <uxr_deserialize_ObjectVariant+0xb6>
 80136ae:	bf00      	nop

080136b0 <uxr_deserialize_BaseObjectRequest>:
 80136b0:	b570      	push	{r4, r5, r6, lr}
 80136b2:	2202      	movs	r2, #2
 80136b4:	4605      	mov	r5, r0
 80136b6:	460e      	mov	r6, r1
 80136b8:	f7fc fda0 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 80136bc:	2202      	movs	r2, #2
 80136be:	4604      	mov	r4, r0
 80136c0:	18b1      	adds	r1, r6, r2
 80136c2:	4628      	mov	r0, r5
 80136c4:	f7fc fd9a 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 80136c8:	4020      	ands	r0, r4
 80136ca:	b2c0      	uxtb	r0, r0
 80136cc:	bd70      	pop	{r4, r5, r6, pc}
 80136ce:	bf00      	nop

080136d0 <uxr_serialize_ActivityInfoVariant>:
 80136d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136d4:	460d      	mov	r5, r1
 80136d6:	7809      	ldrb	r1, [r1, #0]
 80136d8:	4607      	mov	r7, r0
 80136da:	f7f7 fe83 	bl	800b3e4 <ucdr_serialize_uint8_t>
 80136de:	4681      	mov	r9, r0
 80136e0:	b138      	cbz	r0, 80136f2 <uxr_serialize_ActivityInfoVariant+0x22>
 80136e2:	782b      	ldrb	r3, [r5, #0]
 80136e4:	2b06      	cmp	r3, #6
 80136e6:	f000 8082 	beq.w	80137ee <uxr_serialize_ActivityInfoVariant+0x11e>
 80136ea:	2b0d      	cmp	r3, #13
 80136ec:	d016      	beq.n	801371c <uxr_serialize_ActivityInfoVariant+0x4c>
 80136ee:	2b05      	cmp	r3, #5
 80136f0:	d002      	beq.n	80136f8 <uxr_serialize_ActivityInfoVariant+0x28>
 80136f2:	4648      	mov	r0, r9
 80136f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136f8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80136fc:	4638      	mov	r0, r7
 80136fe:	f7f8 fbad 	bl	800be5c <ucdr_serialize_int16_t>
 8013702:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013706:	4681      	mov	r9, r0
 8013708:	4638      	mov	r0, r7
 801370a:	f7f8 fad7 	bl	800bcbc <ucdr_serialize_uint64_t>
 801370e:	ea09 0000 	and.w	r0, r9, r0
 8013712:	fa5f f980 	uxtb.w	r9, r0
 8013716:	4648      	mov	r0, r9
 8013718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801371c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013720:	4638      	mov	r0, r7
 8013722:	f7f8 fb9b 	bl	800be5c <ucdr_serialize_int16_t>
 8013726:	68e9      	ldr	r1, [r5, #12]
 8013728:	4681      	mov	r9, r0
 801372a:	4638      	mov	r0, r7
 801372c:	f7f8 f870 	bl	800b810 <ucdr_serialize_uint32_t>
 8013730:	68eb      	ldr	r3, [r5, #12]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d0eb      	beq.n	801370e <uxr_serialize_ActivityInfoVariant+0x3e>
 8013736:	b320      	cbz	r0, 8013782 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013738:	f105 080c 	add.w	r8, r5, #12
 801373c:	2600      	movs	r6, #0
 801373e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8013742:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8013746:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801374a:	4638      	mov	r0, r7
 801374c:	f7f7 fe4a 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013750:	2800      	cmp	r0, #0
 8013752:	d053      	beq.n	80137fc <uxr_serialize_ActivityInfoVariant+0x12c>
 8013754:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8013758:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801375c:	0074      	lsls	r4, r6, #1
 801375e:	00c9      	lsls	r1, r1, #3
 8013760:	2b03      	cmp	r3, #3
 8013762:	d854      	bhi.n	801380e <uxr_serialize_ActivityInfoVariant+0x13e>
 8013764:	e8df f003 	tbb	[pc, r3]
 8013768:	02102132 	.word	0x02102132
 801376c:	4441      	add	r1, r8
 801376e:	4638      	mov	r0, r7
 8013770:	6889      	ldr	r1, [r1, #8]
 8013772:	f004 fc77 	bl	8018064 <ucdr_serialize_string>
 8013776:	68ea      	ldr	r2, [r5, #12]
 8013778:	3601      	adds	r6, #1
 801377a:	4296      	cmp	r6, r2
 801377c:	d242      	bcs.n	8013804 <uxr_serialize_ActivityInfoVariant+0x134>
 801377e:	2800      	cmp	r0, #0
 8013780:	d1dd      	bne.n	801373e <uxr_serialize_ActivityInfoVariant+0x6e>
 8013782:	f04f 0900 	mov.w	r9, #0
 8013786:	e7b4      	b.n	80136f2 <uxr_serialize_ActivityInfoVariant+0x22>
 8013788:	3108      	adds	r1, #8
 801378a:	4441      	add	r1, r8
 801378c:	2210      	movs	r2, #16
 801378e:	4638      	mov	r0, r7
 8013790:	f7fc fcd0 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013794:	4434      	add	r4, r6
 8013796:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801379a:	4604      	mov	r4, r0
 801379c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801379e:	4638      	mov	r0, r7
 80137a0:	f7f8 f836 	bl	800b810 <ucdr_serialize_uint32_t>
 80137a4:	4020      	ands	r0, r4
 80137a6:	b2c0      	uxtb	r0, r0
 80137a8:	e7e5      	b.n	8013776 <uxr_serialize_ActivityInfoVariant+0xa6>
 80137aa:	3108      	adds	r1, #8
 80137ac:	4441      	add	r1, r8
 80137ae:	2204      	movs	r2, #4
 80137b0:	4638      	mov	r0, r7
 80137b2:	f7fc fcbf 	bl	8010134 <ucdr_serialize_array_uint8_t>
 80137b6:	4434      	add	r4, r6
 80137b8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80137bc:	4604      	mov	r4, r0
 80137be:	8b19      	ldrh	r1, [r3, #24]
 80137c0:	4638      	mov	r0, r7
 80137c2:	f7f7 fe3b 	bl	800b43c <ucdr_serialize_uint16_t>
 80137c6:	4020      	ands	r0, r4
 80137c8:	b2c0      	uxtb	r0, r0
 80137ca:	e7d4      	b.n	8013776 <uxr_serialize_ActivityInfoVariant+0xa6>
 80137cc:	3108      	adds	r1, #8
 80137ce:	4441      	add	r1, r8
 80137d0:	2202      	movs	r2, #2
 80137d2:	4638      	mov	r0, r7
 80137d4:	f7fc fcae 	bl	8010134 <ucdr_serialize_array_uint8_t>
 80137d8:	4434      	add	r4, r6
 80137da:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80137de:	4604      	mov	r4, r0
 80137e0:	7d99      	ldrb	r1, [r3, #22]
 80137e2:	4638      	mov	r0, r7
 80137e4:	f7f7 fdfe 	bl	800b3e4 <ucdr_serialize_uint8_t>
 80137e8:	4020      	ands	r0, r4
 80137ea:	b2c0      	uxtb	r0, r0
 80137ec:	e7c3      	b.n	8013776 <uxr_serialize_ActivityInfoVariant+0xa6>
 80137ee:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80137f2:	4638      	mov	r0, r7
 80137f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137f8:	f7f8 bb30 	b.w	800be5c <ucdr_serialize_int16_t>
 80137fc:	68ea      	ldr	r2, [r5, #12]
 80137fe:	3601      	adds	r6, #1
 8013800:	42b2      	cmp	r2, r6
 8013802:	d8be      	bhi.n	8013782 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013804:	ea09 0900 	and.w	r9, r9, r0
 8013808:	fa5f f989 	uxtb.w	r9, r9
 801380c:	e771      	b.n	80136f2 <uxr_serialize_ActivityInfoVariant+0x22>
 801380e:	68eb      	ldr	r3, [r5, #12]
 8013810:	3601      	adds	r6, #1
 8013812:	429e      	cmp	r6, r3
 8013814:	f10a 0a18 	add.w	sl, sl, #24
 8013818:	d395      	bcc.n	8013746 <uxr_serialize_ActivityInfoVariant+0x76>
 801381a:	e76a      	b.n	80136f2 <uxr_serialize_ActivityInfoVariant+0x22>

0801381c <uxr_deserialize_BaseObjectReply>:
 801381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013820:	2202      	movs	r2, #2
 8013822:	4606      	mov	r6, r0
 8013824:	460f      	mov	r7, r1
 8013826:	f7fc fce9 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 801382a:	2202      	movs	r2, #2
 801382c:	18b9      	adds	r1, r7, r2
 801382e:	4605      	mov	r5, r0
 8013830:	4630      	mov	r0, r6
 8013832:	f7fc fce3 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013836:	1d39      	adds	r1, r7, #4
 8013838:	4680      	mov	r8, r0
 801383a:	4630      	mov	r0, r6
 801383c:	f7f7 fde8 	bl	800b410 <ucdr_deserialize_uint8_t>
 8013840:	1d79      	adds	r1, r7, #5
 8013842:	4604      	mov	r4, r0
 8013844:	4630      	mov	r0, r6
 8013846:	f7f7 fde3 	bl	800b410 <ucdr_deserialize_uint8_t>
 801384a:	ea05 0508 	and.w	r5, r5, r8
 801384e:	402c      	ands	r4, r5
 8013850:	4020      	ands	r0, r4
 8013852:	b2c0      	uxtb	r0, r0
 8013854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013858 <uxr_serialize_ReadSpecification>:
 8013858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801385c:	460e      	mov	r6, r1
 801385e:	7809      	ldrb	r1, [r1, #0]
 8013860:	4607      	mov	r7, r0
 8013862:	f7f7 fdbf 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013866:	7871      	ldrb	r1, [r6, #1]
 8013868:	4604      	mov	r4, r0
 801386a:	4638      	mov	r0, r7
 801386c:	f7f7 fdba 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013870:	78b1      	ldrb	r1, [r6, #2]
 8013872:	4004      	ands	r4, r0
 8013874:	4638      	mov	r0, r7
 8013876:	f7f7 fd87 	bl	800b388 <ucdr_serialize_bool>
 801387a:	78b3      	ldrb	r3, [r6, #2]
 801387c:	b2e4      	uxtb	r4, r4
 801387e:	4004      	ands	r4, r0
 8013880:	b94b      	cbnz	r3, 8013896 <uxr_serialize_ReadSpecification+0x3e>
 8013882:	7a31      	ldrb	r1, [r6, #8]
 8013884:	4638      	mov	r0, r7
 8013886:	f7f7 fd7f 	bl	800b388 <ucdr_serialize_bool>
 801388a:	7a33      	ldrb	r3, [r6, #8]
 801388c:	4004      	ands	r4, r0
 801388e:	b943      	cbnz	r3, 80138a2 <uxr_serialize_ReadSpecification+0x4a>
 8013890:	4620      	mov	r0, r4
 8013892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013896:	6871      	ldr	r1, [r6, #4]
 8013898:	4638      	mov	r0, r7
 801389a:	f004 fbe3 	bl	8018064 <ucdr_serialize_string>
 801389e:	4004      	ands	r4, r0
 80138a0:	e7ef      	b.n	8013882 <uxr_serialize_ReadSpecification+0x2a>
 80138a2:	8971      	ldrh	r1, [r6, #10]
 80138a4:	4638      	mov	r0, r7
 80138a6:	f7f7 fdc9 	bl	800b43c <ucdr_serialize_uint16_t>
 80138aa:	89b1      	ldrh	r1, [r6, #12]
 80138ac:	4605      	mov	r5, r0
 80138ae:	4638      	mov	r0, r7
 80138b0:	f7f7 fdc4 	bl	800b43c <ucdr_serialize_uint16_t>
 80138b4:	89f1      	ldrh	r1, [r6, #14]
 80138b6:	4005      	ands	r5, r0
 80138b8:	4638      	mov	r0, r7
 80138ba:	f7f7 fdbf 	bl	800b43c <ucdr_serialize_uint16_t>
 80138be:	8a31      	ldrh	r1, [r6, #16]
 80138c0:	4680      	mov	r8, r0
 80138c2:	4638      	mov	r0, r7
 80138c4:	f7f7 fdba 	bl	800b43c <ucdr_serialize_uint16_t>
 80138c8:	b2ed      	uxtb	r5, r5
 80138ca:	4025      	ands	r5, r4
 80138cc:	ea08 0505 	and.w	r5, r8, r5
 80138d0:	ea00 0405 	and.w	r4, r0, r5
 80138d4:	4620      	mov	r0, r4
 80138d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138da:	bf00      	nop

080138dc <uxr_serialize_CREATE_CLIENT_Payload>:
 80138dc:	f7ff bace 	b.w	8012e7c <uxr_serialize_CLIENT_Representation>

080138e0 <uxr_serialize_CREATE_Payload>:
 80138e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138e2:	2202      	movs	r2, #2
 80138e4:	4607      	mov	r7, r0
 80138e6:	460e      	mov	r6, r1
 80138e8:	f7fc fc24 	bl	8010134 <ucdr_serialize_array_uint8_t>
 80138ec:	2202      	movs	r2, #2
 80138ee:	18b1      	adds	r1, r6, r2
 80138f0:	4605      	mov	r5, r0
 80138f2:	4638      	mov	r0, r7
 80138f4:	f7fc fc1e 	bl	8010134 <ucdr_serialize_array_uint8_t>
 80138f8:	7931      	ldrb	r1, [r6, #4]
 80138fa:	4604      	mov	r4, r0
 80138fc:	4638      	mov	r0, r7
 80138fe:	f7f7 fd71 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013902:	b170      	cbz	r0, 8013922 <uxr_serialize_CREATE_Payload+0x42>
 8013904:	7933      	ldrb	r3, [r6, #4]
 8013906:	402c      	ands	r4, r5
 8013908:	3b01      	subs	r3, #1
 801390a:	b2e4      	uxtb	r4, r4
 801390c:	2b0d      	cmp	r3, #13
 801390e:	d809      	bhi.n	8013924 <uxr_serialize_CREATE_Payload+0x44>
 8013910:	e8df f003 	tbb	[pc, r3]
 8013914:	23230a4c 	.word	0x23230a4c
 8013918:	0a0a0a0a 	.word	0x0a0a0a0a
 801391c:	12121208 	.word	0x12121208
 8013920:	3e45      	.short	0x3e45
 8013922:	2400      	movs	r4, #0
 8013924:	4620      	mov	r0, r4
 8013926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013928:	f106 0108 	add.w	r1, r6, #8
 801392c:	4638      	mov	r0, r7
 801392e:	f7ff fbab 	bl	8013088 <uxr_serialize_DATAWRITER_Representation>
 8013932:	4004      	ands	r4, r0
 8013934:	4620      	mov	r0, r4
 8013936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013938:	7a31      	ldrb	r1, [r6, #8]
 801393a:	4638      	mov	r0, r7
 801393c:	f7f7 fd52 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013940:	2800      	cmp	r0, #0
 8013942:	d0ee      	beq.n	8013922 <uxr_serialize_CREATE_Payload+0x42>
 8013944:	7a33      	ldrb	r3, [r6, #8]
 8013946:	2b01      	cmp	r3, #1
 8013948:	d001      	beq.n	801394e <uxr_serialize_CREATE_Payload+0x6e>
 801394a:	2b02      	cmp	r3, #2
 801394c:	d1ea      	bne.n	8013924 <uxr_serialize_CREATE_Payload+0x44>
 801394e:	68f1      	ldr	r1, [r6, #12]
 8013950:	4638      	mov	r0, r7
 8013952:	f004 fb87 	bl	8018064 <ucdr_serialize_string>
 8013956:	4004      	ands	r4, r0
 8013958:	e7e4      	b.n	8013924 <uxr_serialize_CREATE_Payload+0x44>
 801395a:	7a31      	ldrb	r1, [r6, #8]
 801395c:	4638      	mov	r0, r7
 801395e:	f7f7 fd41 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013962:	4605      	mov	r5, r0
 8013964:	b158      	cbz	r0, 801397e <uxr_serialize_CREATE_Payload+0x9e>
 8013966:	7a33      	ldrb	r3, [r6, #8]
 8013968:	2b02      	cmp	r3, #2
 801396a:	d034      	beq.n	80139d6 <uxr_serialize_CREATE_Payload+0xf6>
 801396c:	2b03      	cmp	r3, #3
 801396e:	d106      	bne.n	801397e <uxr_serialize_CREATE_Payload+0x9e>
 8013970:	68f2      	ldr	r2, [r6, #12]
 8013972:	f106 0110 	add.w	r1, r6, #16
 8013976:	4638      	mov	r0, r7
 8013978:	f7fc fd7a 	bl	8010470 <ucdr_serialize_sequence_uint8_t>
 801397c:	4605      	mov	r5, r0
 801397e:	2202      	movs	r2, #2
 8013980:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8013984:	4638      	mov	r0, r7
 8013986:	f7fc fbd5 	bl	8010134 <ucdr_serialize_array_uint8_t>
 801398a:	4028      	ands	r0, r5
 801398c:	4004      	ands	r4, r0
 801398e:	e7c9      	b.n	8013924 <uxr_serialize_CREATE_Payload+0x44>
 8013990:	f106 0108 	add.w	r1, r6, #8
 8013994:	4638      	mov	r0, r7
 8013996:	f7ff fa71 	bl	8012e7c <uxr_serialize_CLIENT_Representation>
 801399a:	4004      	ands	r4, r0
 801399c:	e7c2      	b.n	8013924 <uxr_serialize_CREATE_Payload+0x44>
 801399e:	f106 0108 	add.w	r1, r6, #8
 80139a2:	4638      	mov	r0, r7
 80139a4:	f7ff fb26 	bl	8012ff4 <uxr_serialize_AGENT_Representation>
 80139a8:	4004      	ands	r4, r0
 80139aa:	e7bb      	b.n	8013924 <uxr_serialize_CREATE_Payload+0x44>
 80139ac:	7a31      	ldrb	r1, [r6, #8]
 80139ae:	4638      	mov	r0, r7
 80139b0:	f7f7 fd18 	bl	800b3e4 <ucdr_serialize_uint8_t>
 80139b4:	4605      	mov	r5, r0
 80139b6:	b130      	cbz	r0, 80139c6 <uxr_serialize_CREATE_Payload+0xe6>
 80139b8:	7a33      	ldrb	r3, [r6, #8]
 80139ba:	2b02      	cmp	r3, #2
 80139bc:	d011      	beq.n	80139e2 <uxr_serialize_CREATE_Payload+0x102>
 80139be:	2b03      	cmp	r3, #3
 80139c0:	d015      	beq.n	80139ee <uxr_serialize_CREATE_Payload+0x10e>
 80139c2:	2b01      	cmp	r3, #1
 80139c4:	d00d      	beq.n	80139e2 <uxr_serialize_CREATE_Payload+0x102>
 80139c6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80139ca:	4638      	mov	r0, r7
 80139cc:	f7f8 fa46 	bl	800be5c <ucdr_serialize_int16_t>
 80139d0:	4028      	ands	r0, r5
 80139d2:	4004      	ands	r4, r0
 80139d4:	e7a6      	b.n	8013924 <uxr_serialize_CREATE_Payload+0x44>
 80139d6:	68f1      	ldr	r1, [r6, #12]
 80139d8:	4638      	mov	r0, r7
 80139da:	f004 fb43 	bl	8018064 <ucdr_serialize_string>
 80139de:	4605      	mov	r5, r0
 80139e0:	e7cd      	b.n	801397e <uxr_serialize_CREATE_Payload+0x9e>
 80139e2:	68f1      	ldr	r1, [r6, #12]
 80139e4:	4638      	mov	r0, r7
 80139e6:	f004 fb3d 	bl	8018064 <ucdr_serialize_string>
 80139ea:	4605      	mov	r5, r0
 80139ec:	e7eb      	b.n	80139c6 <uxr_serialize_CREATE_Payload+0xe6>
 80139ee:	68f2      	ldr	r2, [r6, #12]
 80139f0:	f106 0110 	add.w	r1, r6, #16
 80139f4:	4638      	mov	r0, r7
 80139f6:	f7fc fd3b 	bl	8010470 <ucdr_serialize_sequence_uint8_t>
 80139fa:	4605      	mov	r5, r0
 80139fc:	e7e3      	b.n	80139c6 <uxr_serialize_CREATE_Payload+0xe6>
 80139fe:	bf00      	nop

08013a00 <uxr_deserialize_GET_INFO_Payload>:
 8013a00:	b570      	push	{r4, r5, r6, lr}
 8013a02:	2202      	movs	r2, #2
 8013a04:	4605      	mov	r5, r0
 8013a06:	460e      	mov	r6, r1
 8013a08:	f7fc fbf8 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013a0c:	2202      	movs	r2, #2
 8013a0e:	18b1      	adds	r1, r6, r2
 8013a10:	4604      	mov	r4, r0
 8013a12:	4628      	mov	r0, r5
 8013a14:	f7fc fbf2 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013a18:	1d31      	adds	r1, r6, #4
 8013a1a:	4004      	ands	r4, r0
 8013a1c:	4628      	mov	r0, r5
 8013a1e:	f7f8 f827 	bl	800ba70 <ucdr_deserialize_uint32_t>
 8013a22:	b2e4      	uxtb	r4, r4
 8013a24:	4020      	ands	r0, r4
 8013a26:	bd70      	pop	{r4, r5, r6, pc}

08013a28 <uxr_serialize_DELETE_Payload>:
 8013a28:	b570      	push	{r4, r5, r6, lr}
 8013a2a:	2202      	movs	r2, #2
 8013a2c:	4605      	mov	r5, r0
 8013a2e:	460e      	mov	r6, r1
 8013a30:	f7fc fb80 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013a34:	2202      	movs	r2, #2
 8013a36:	4604      	mov	r4, r0
 8013a38:	18b1      	adds	r1, r6, r2
 8013a3a:	4628      	mov	r0, r5
 8013a3c:	f7fc fb7a 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013a40:	4020      	ands	r0, r4
 8013a42:	b2c0      	uxtb	r0, r0
 8013a44:	bd70      	pop	{r4, r5, r6, pc}
 8013a46:	bf00      	nop

08013a48 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a4c:	4605      	mov	r5, r0
 8013a4e:	460e      	mov	r6, r1
 8013a50:	f7f7 fcde 	bl	800b410 <ucdr_deserialize_uint8_t>
 8013a54:	1c71      	adds	r1, r6, #1
 8013a56:	4604      	mov	r4, r0
 8013a58:	4628      	mov	r0, r5
 8013a5a:	f7f7 fcd9 	bl	800b410 <ucdr_deserialize_uint8_t>
 8013a5e:	2204      	movs	r2, #4
 8013a60:	18b1      	adds	r1, r6, r2
 8013a62:	4680      	mov	r8, r0
 8013a64:	4628      	mov	r0, r5
 8013a66:	f7fc fbc9 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013a6a:	f106 0108 	add.w	r1, r6, #8
 8013a6e:	4607      	mov	r7, r0
 8013a70:	2202      	movs	r2, #2
 8013a72:	4628      	mov	r0, r5
 8013a74:	f7fc fbc2 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013a78:	ea04 0308 	and.w	r3, r4, r8
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	ea03 0407 	and.w	r4, r3, r7
 8013a82:	2202      	movs	r2, #2
 8013a84:	4607      	mov	r7, r0
 8013a86:	f106 010a 	add.w	r1, r6, #10
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	f7fc fbb6 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013a90:	f106 010c 	add.w	r1, r6, #12
 8013a94:	4603      	mov	r3, r0
 8013a96:	4628      	mov	r0, r5
 8013a98:	461d      	mov	r5, r3
 8013a9a:	f7f7 fc8b 	bl	800b3b4 <ucdr_deserialize_bool>
 8013a9e:	403c      	ands	r4, r7
 8013aa0:	4025      	ands	r5, r4
 8013aa2:	4028      	ands	r0, r5
 8013aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013aa8 <uxr_deserialize_STATUS_Payload>:
 8013aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aac:	2202      	movs	r2, #2
 8013aae:	4606      	mov	r6, r0
 8013ab0:	460f      	mov	r7, r1
 8013ab2:	f7fc fba3 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013ab6:	2202      	movs	r2, #2
 8013ab8:	18b9      	adds	r1, r7, r2
 8013aba:	4605      	mov	r5, r0
 8013abc:	4630      	mov	r0, r6
 8013abe:	f7fc fb9d 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013ac2:	1d39      	adds	r1, r7, #4
 8013ac4:	4680      	mov	r8, r0
 8013ac6:	4630      	mov	r0, r6
 8013ac8:	f7f7 fca2 	bl	800b410 <ucdr_deserialize_uint8_t>
 8013acc:	1d79      	adds	r1, r7, #5
 8013ace:	4604      	mov	r4, r0
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	f7f7 fc9d 	bl	800b410 <ucdr_deserialize_uint8_t>
 8013ad6:	ea05 0508 	and.w	r5, r5, r8
 8013ada:	402c      	ands	r4, r5
 8013adc:	4020      	ands	r0, r4
 8013ade:	b2c0      	uxtb	r0, r0
 8013ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ae4 <uxr_serialize_INFO_Payload>:
 8013ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ae8:	2202      	movs	r2, #2
 8013aea:	460c      	mov	r4, r1
 8013aec:	4605      	mov	r5, r0
 8013aee:	f7fc fb21 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013af2:	2202      	movs	r2, #2
 8013af4:	18a1      	adds	r1, r4, r2
 8013af6:	4680      	mov	r8, r0
 8013af8:	4628      	mov	r0, r5
 8013afa:	f7fc fb1b 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013afe:	7921      	ldrb	r1, [r4, #4]
 8013b00:	4607      	mov	r7, r0
 8013b02:	4628      	mov	r0, r5
 8013b04:	f7f7 fc6e 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013b08:	7961      	ldrb	r1, [r4, #5]
 8013b0a:	4606      	mov	r6, r0
 8013b0c:	4628      	mov	r0, r5
 8013b0e:	f7f7 fc69 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013b12:	ea08 0807 	and.w	r8, r8, r7
 8013b16:	ea06 0608 	and.w	r6, r6, r8
 8013b1a:	4006      	ands	r6, r0
 8013b1c:	7a21      	ldrb	r1, [r4, #8]
 8013b1e:	4628      	mov	r0, r5
 8013b20:	f7f7 fc32 	bl	800b388 <ucdr_serialize_bool>
 8013b24:	7a23      	ldrb	r3, [r4, #8]
 8013b26:	b2f7      	uxtb	r7, r6
 8013b28:	4606      	mov	r6, r0
 8013b2a:	b96b      	cbnz	r3, 8013b48 <uxr_serialize_INFO_Payload+0x64>
 8013b2c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013b30:	4628      	mov	r0, r5
 8013b32:	f7f7 fc29 	bl	800b388 <ucdr_serialize_bool>
 8013b36:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013b3a:	4030      	ands	r0, r6
 8013b3c:	b2c6      	uxtb	r6, r0
 8013b3e:	b983      	cbnz	r3, 8013b62 <uxr_serialize_INFO_Payload+0x7e>
 8013b40:	ea06 0007 	and.w	r0, r6, r7
 8013b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b48:	7b21      	ldrb	r1, [r4, #12]
 8013b4a:	4628      	mov	r0, r5
 8013b4c:	f7f7 fc4a 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013b50:	b188      	cbz	r0, 8013b76 <uxr_serialize_INFO_Payload+0x92>
 8013b52:	f104 010c 	add.w	r1, r4, #12
 8013b56:	4628      	mov	r0, r5
 8013b58:	f7ff fabe 	bl	80130d8 <uxr_serialize_ObjectVariant.part.0>
 8013b5c:	4030      	ands	r0, r6
 8013b5e:	b2c6      	uxtb	r6, r0
 8013b60:	e7e4      	b.n	8013b2c <uxr_serialize_INFO_Payload+0x48>
 8013b62:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013b66:	4628      	mov	r0, r5
 8013b68:	f7ff fdb2 	bl	80136d0 <uxr_serialize_ActivityInfoVariant>
 8013b6c:	4006      	ands	r6, r0
 8013b6e:	ea06 0007 	and.w	r0, r6, r7
 8013b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b76:	4606      	mov	r6, r0
 8013b78:	e7d8      	b.n	8013b2c <uxr_serialize_INFO_Payload+0x48>
 8013b7a:	bf00      	nop

08013b7c <uxr_serialize_READ_DATA_Payload>:
 8013b7c:	b570      	push	{r4, r5, r6, lr}
 8013b7e:	2202      	movs	r2, #2
 8013b80:	4605      	mov	r5, r0
 8013b82:	460e      	mov	r6, r1
 8013b84:	f7fc fad6 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013b88:	2202      	movs	r2, #2
 8013b8a:	18b1      	adds	r1, r6, r2
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	4628      	mov	r0, r5
 8013b90:	f7fc fad0 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013b94:	1d31      	adds	r1, r6, #4
 8013b96:	4004      	ands	r4, r0
 8013b98:	4628      	mov	r0, r5
 8013b9a:	f7ff fe5d 	bl	8013858 <uxr_serialize_ReadSpecification>
 8013b9e:	b2e4      	uxtb	r4, r4
 8013ba0:	4020      	ands	r0, r4
 8013ba2:	bd70      	pop	{r4, r5, r6, pc}

08013ba4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013ba4:	b570      	push	{r4, r5, r6, lr}
 8013ba6:	2202      	movs	r2, #2
 8013ba8:	4605      	mov	r5, r0
 8013baa:	460e      	mov	r6, r1
 8013bac:	f7fc fac2 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013bb0:	2202      	movs	r2, #2
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	18b1      	adds	r1, r6, r2
 8013bb6:	4628      	mov	r0, r5
 8013bb8:	f7fc fabc 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013bbc:	4020      	ands	r0, r4
 8013bbe:	b2c0      	uxtb	r0, r0
 8013bc0:	bd70      	pop	{r4, r5, r6, pc}
 8013bc2:	bf00      	nop

08013bc4 <uxr_serialize_ACKNACK_Payload>:
 8013bc4:	b570      	push	{r4, r5, r6, lr}
 8013bc6:	460c      	mov	r4, r1
 8013bc8:	460e      	mov	r6, r1
 8013bca:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013bce:	4605      	mov	r5, r0
 8013bd0:	f7f7 fc34 	bl	800b43c <ucdr_serialize_uint16_t>
 8013bd4:	2202      	movs	r2, #2
 8013bd6:	4621      	mov	r1, r4
 8013bd8:	4604      	mov	r4, r0
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f7fc faaa 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013be0:	7931      	ldrb	r1, [r6, #4]
 8013be2:	4004      	ands	r4, r0
 8013be4:	4628      	mov	r0, r5
 8013be6:	f7f7 fbfd 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013bea:	b2e4      	uxtb	r4, r4
 8013bec:	4020      	ands	r0, r4
 8013bee:	bd70      	pop	{r4, r5, r6, pc}

08013bf0 <uxr_deserialize_ACKNACK_Payload>:
 8013bf0:	b570      	push	{r4, r5, r6, lr}
 8013bf2:	4605      	mov	r5, r0
 8013bf4:	460e      	mov	r6, r1
 8013bf6:	f7f7 fd21 	bl	800b63c <ucdr_deserialize_uint16_t>
 8013bfa:	2202      	movs	r2, #2
 8013bfc:	18b1      	adds	r1, r6, r2
 8013bfe:	4604      	mov	r4, r0
 8013c00:	4628      	mov	r0, r5
 8013c02:	f7fc fafb 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013c06:	1d31      	adds	r1, r6, #4
 8013c08:	4004      	ands	r4, r0
 8013c0a:	4628      	mov	r0, r5
 8013c0c:	f7f7 fc00 	bl	800b410 <ucdr_deserialize_uint8_t>
 8013c10:	b2e4      	uxtb	r4, r4
 8013c12:	4020      	ands	r0, r4
 8013c14:	bd70      	pop	{r4, r5, r6, pc}
 8013c16:	bf00      	nop

08013c18 <uxr_serialize_HEARTBEAT_Payload>:
 8013c18:	b570      	push	{r4, r5, r6, lr}
 8013c1a:	460d      	mov	r5, r1
 8013c1c:	8809      	ldrh	r1, [r1, #0]
 8013c1e:	4606      	mov	r6, r0
 8013c20:	f7f7 fc0c 	bl	800b43c <ucdr_serialize_uint16_t>
 8013c24:	8869      	ldrh	r1, [r5, #2]
 8013c26:	4604      	mov	r4, r0
 8013c28:	4630      	mov	r0, r6
 8013c2a:	f7f7 fc07 	bl	800b43c <ucdr_serialize_uint16_t>
 8013c2e:	7929      	ldrb	r1, [r5, #4]
 8013c30:	4004      	ands	r4, r0
 8013c32:	4630      	mov	r0, r6
 8013c34:	f7f7 fbd6 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013c38:	b2e4      	uxtb	r4, r4
 8013c3a:	4020      	ands	r0, r4
 8013c3c:	bd70      	pop	{r4, r5, r6, pc}
 8013c3e:	bf00      	nop

08013c40 <uxr_deserialize_HEARTBEAT_Payload>:
 8013c40:	b570      	push	{r4, r5, r6, lr}
 8013c42:	4605      	mov	r5, r0
 8013c44:	460e      	mov	r6, r1
 8013c46:	f7f7 fcf9 	bl	800b63c <ucdr_deserialize_uint16_t>
 8013c4a:	1cb1      	adds	r1, r6, #2
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	4628      	mov	r0, r5
 8013c50:	f7f7 fcf4 	bl	800b63c <ucdr_deserialize_uint16_t>
 8013c54:	1d31      	adds	r1, r6, #4
 8013c56:	4004      	ands	r4, r0
 8013c58:	4628      	mov	r0, r5
 8013c5a:	f7f7 fbd9 	bl	800b410 <ucdr_deserialize_uint8_t>
 8013c5e:	b2e4      	uxtb	r4, r4
 8013c60:	4020      	ands	r0, r4
 8013c62:	bd70      	pop	{r4, r5, r6, pc}

08013c64 <uxr_serialize_TIMESTAMP_Payload>:
 8013c64:	b570      	push	{r4, r5, r6, lr}
 8013c66:	460d      	mov	r5, r1
 8013c68:	6809      	ldr	r1, [r1, #0]
 8013c6a:	4606      	mov	r6, r0
 8013c6c:	f7f8 f9ea 	bl	800c044 <ucdr_serialize_int32_t>
 8013c70:	6869      	ldr	r1, [r5, #4]
 8013c72:	4604      	mov	r4, r0
 8013c74:	4630      	mov	r0, r6
 8013c76:	f7f7 fdcb 	bl	800b810 <ucdr_serialize_uint32_t>
 8013c7a:	4020      	ands	r0, r4
 8013c7c:	b2c0      	uxtb	r0, r0
 8013c7e:	bd70      	pop	{r4, r5, r6, pc}

08013c80 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c84:	4605      	mov	r5, r0
 8013c86:	460e      	mov	r6, r1
 8013c88:	f7f8 fa74 	bl	800c174 <ucdr_deserialize_int32_t>
 8013c8c:	1d31      	adds	r1, r6, #4
 8013c8e:	4607      	mov	r7, r0
 8013c90:	4628      	mov	r0, r5
 8013c92:	f7f7 feed 	bl	800ba70 <ucdr_deserialize_uint32_t>
 8013c96:	f106 0108 	add.w	r1, r6, #8
 8013c9a:	4680      	mov	r8, r0
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	f7f8 fa69 	bl	800c174 <ucdr_deserialize_int32_t>
 8013ca2:	f106 010c 	add.w	r1, r6, #12
 8013ca6:	4604      	mov	r4, r0
 8013ca8:	4628      	mov	r0, r5
 8013caa:	f7f7 fee1 	bl	800ba70 <ucdr_deserialize_uint32_t>
 8013cae:	ea07 0708 	and.w	r7, r7, r8
 8013cb2:	403c      	ands	r4, r7
 8013cb4:	f106 0110 	add.w	r1, r6, #16
 8013cb8:	4004      	ands	r4, r0
 8013cba:	4628      	mov	r0, r5
 8013cbc:	f7f8 fa5a 	bl	800c174 <ucdr_deserialize_int32_t>
 8013cc0:	f106 0114 	add.w	r1, r6, #20
 8013cc4:	4607      	mov	r7, r0
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	f7f7 fed2 	bl	800ba70 <ucdr_deserialize_uint32_t>
 8013ccc:	b2e4      	uxtb	r4, r4
 8013cce:	403c      	ands	r4, r7
 8013cd0:	4020      	ands	r0, r4
 8013cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd6:	bf00      	nop

08013cd8 <uxr_serialize_SampleIdentity>:
 8013cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cdc:	220c      	movs	r2, #12
 8013cde:	4604      	mov	r4, r0
 8013ce0:	460d      	mov	r5, r1
 8013ce2:	f7fc fa27 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013ce6:	2203      	movs	r2, #3
 8013ce8:	f105 010c 	add.w	r1, r5, #12
 8013cec:	4607      	mov	r7, r0
 8013cee:	4620      	mov	r0, r4
 8013cf0:	f7fc fa20 	bl	8010134 <ucdr_serialize_array_uint8_t>
 8013cf4:	7be9      	ldrb	r1, [r5, #15]
 8013cf6:	4680      	mov	r8, r0
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f7f7 fb73 	bl	800b3e4 <ucdr_serialize_uint8_t>
 8013cfe:	6929      	ldr	r1, [r5, #16]
 8013d00:	4606      	mov	r6, r0
 8013d02:	4620      	mov	r0, r4
 8013d04:	f7f8 f99e 	bl	800c044 <ucdr_serialize_int32_t>
 8013d08:	6969      	ldr	r1, [r5, #20]
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	ea07 0708 	and.w	r7, r7, r8
 8013d12:	461c      	mov	r4, r3
 8013d14:	f7f7 fd7c 	bl	800b810 <ucdr_serialize_uint32_t>
 8013d18:	403e      	ands	r6, r7
 8013d1a:	4034      	ands	r4, r6
 8013d1c:	4020      	ands	r0, r4
 8013d1e:	b2c0      	uxtb	r0, r0
 8013d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d24 <uxr_deserialize_SampleIdentity>:
 8013d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d28:	220c      	movs	r2, #12
 8013d2a:	4604      	mov	r4, r0
 8013d2c:	460d      	mov	r5, r1
 8013d2e:	f7fc fa65 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013d32:	2203      	movs	r2, #3
 8013d34:	f105 010c 	add.w	r1, r5, #12
 8013d38:	4607      	mov	r7, r0
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	f7fc fa5e 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8013d40:	f105 010f 	add.w	r1, r5, #15
 8013d44:	4680      	mov	r8, r0
 8013d46:	4620      	mov	r0, r4
 8013d48:	f7f7 fb62 	bl	800b410 <ucdr_deserialize_uint8_t>
 8013d4c:	f105 0110 	add.w	r1, r5, #16
 8013d50:	4606      	mov	r6, r0
 8013d52:	4620      	mov	r0, r4
 8013d54:	f7f8 fa0e 	bl	800c174 <ucdr_deserialize_int32_t>
 8013d58:	f105 0114 	add.w	r1, r5, #20
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	4620      	mov	r0, r4
 8013d60:	ea07 0708 	and.w	r7, r7, r8
 8013d64:	461c      	mov	r4, r3
 8013d66:	f7f7 fe83 	bl	800ba70 <ucdr_deserialize_uint32_t>
 8013d6a:	403e      	ands	r6, r7
 8013d6c:	4034      	ands	r4, r6
 8013d6e:	4020      	ands	r0, r4
 8013d70:	b2c0      	uxtb	r0, r0
 8013d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d76:	bf00      	nop

08013d78 <rcl_client_get_rmw_handle>:
 8013d78:	b118      	cbz	r0, 8013d82 <rcl_client_get_rmw_handle+0xa>
 8013d7a:	6800      	ldr	r0, [r0, #0]
 8013d7c:	b108      	cbz	r0, 8013d82 <rcl_client_get_rmw_handle+0xa>
 8013d7e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013d82:	4770      	bx	lr

08013d84 <rcl_send_request>:
 8013d84:	b570      	push	{r4, r5, r6, lr}
 8013d86:	b082      	sub	sp, #8
 8013d88:	b1e8      	cbz	r0, 8013dc6 <rcl_send_request+0x42>
 8013d8a:	4604      	mov	r4, r0
 8013d8c:	6800      	ldr	r0, [r0, #0]
 8013d8e:	b1d0      	cbz	r0, 8013dc6 <rcl_send_request+0x42>
 8013d90:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8013d94:	b1bb      	cbz	r3, 8013dc6 <rcl_send_request+0x42>
 8013d96:	460e      	mov	r6, r1
 8013d98:	b1d1      	cbz	r1, 8013dd0 <rcl_send_request+0x4c>
 8013d9a:	4615      	mov	r5, r2
 8013d9c:	b1c2      	cbz	r2, 8013dd0 <rcl_send_request+0x4c>
 8013d9e:	2105      	movs	r1, #5
 8013da0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013da4:	f002 fe58 	bl	8016a58 <__atomic_load_8>
 8013da8:	6823      	ldr	r3, [r4, #0]
 8013daa:	e9c5 0100 	strd	r0, r1, [r5]
 8013dae:	462a      	mov	r2, r5
 8013db0:	4631      	mov	r1, r6
 8013db2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013db6:	f003 fd43 	bl	8017840 <rmw_send_request>
 8013dba:	4606      	mov	r6, r0
 8013dbc:	b160      	cbz	r0, 8013dd8 <rcl_send_request+0x54>
 8013dbe:	2601      	movs	r6, #1
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	b002      	add	sp, #8
 8013dc4:	bd70      	pop	{r4, r5, r6, pc}
 8013dc6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8013dca:	4630      	mov	r0, r6
 8013dcc:	b002      	add	sp, #8
 8013dce:	bd70      	pop	{r4, r5, r6, pc}
 8013dd0:	260b      	movs	r6, #11
 8013dd2:	4630      	mov	r0, r6
 8013dd4:	b002      	add	sp, #8
 8013dd6:	bd70      	pop	{r4, r5, r6, pc}
 8013dd8:	6820      	ldr	r0, [r4, #0]
 8013dda:	2105      	movs	r1, #5
 8013ddc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013de0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013de4:	9100      	str	r1, [sp, #0]
 8013de6:	f002 fea3 	bl	8016b30 <__atomic_exchange_8>
 8013dea:	4630      	mov	r0, r6
 8013dec:	b002      	add	sp, #8
 8013dee:	bd70      	pop	{r4, r5, r6, pc}

08013df0 <rcl_take_response>:
 8013df0:	b570      	push	{r4, r5, r6, lr}
 8013df2:	468e      	mov	lr, r1
 8013df4:	460c      	mov	r4, r1
 8013df6:	4616      	mov	r6, r2
 8013df8:	4605      	mov	r5, r0
 8013dfa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013dfe:	b08c      	sub	sp, #48	@ 0x30
 8013e00:	f10d 0c18 	add.w	ip, sp, #24
 8013e04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e08:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013e0c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013e10:	b35d      	cbz	r5, 8013e6a <rcl_take_response+0x7a>
 8013e12:	682b      	ldr	r3, [r5, #0]
 8013e14:	b34b      	cbz	r3, 8013e6a <rcl_take_response+0x7a>
 8013e16:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013e1a:	b330      	cbz	r0, 8013e6a <rcl_take_response+0x7a>
 8013e1c:	b346      	cbz	r6, 8013e70 <rcl_take_response+0x80>
 8013e1e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013e78 <rcl_take_response+0x88>
 8013e22:	2300      	movs	r3, #0
 8013e24:	f88d 3007 	strb.w	r3, [sp, #7]
 8013e28:	4632      	mov	r2, r6
 8013e2a:	f10d 0307 	add.w	r3, sp, #7
 8013e2e:	a902      	add	r1, sp, #8
 8013e30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013e34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013e38:	f003 fe0a 	bl	8017a50 <rmw_take_response>
 8013e3c:	4605      	mov	r5, r0
 8013e3e:	b9c8      	cbnz	r0, 8013e74 <rcl_take_response+0x84>
 8013e40:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013e44:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013e48:	2a00      	cmp	r2, #0
 8013e4a:	bf08      	it	eq
 8013e4c:	461d      	moveq	r5, r3
 8013e4e:	f10d 0e18 	add.w	lr, sp, #24
 8013e52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e56:	46a4      	mov	ip, r4
 8013e58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e5c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013e60:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013e64:	4628      	mov	r0, r5
 8013e66:	b00c      	add	sp, #48	@ 0x30
 8013e68:	bd70      	pop	{r4, r5, r6, pc}
 8013e6a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8013e6e:	e7ee      	b.n	8013e4e <rcl_take_response+0x5e>
 8013e70:	250b      	movs	r5, #11
 8013e72:	e7ec      	b.n	8013e4e <rcl_take_response+0x5e>
 8013e74:	2501      	movs	r5, #1
 8013e76:	e7ea      	b.n	8013e4e <rcl_take_response+0x5e>
	...

08013e80 <rcl_client_is_valid>:
 8013e80:	b130      	cbz	r0, 8013e90 <rcl_client_is_valid+0x10>
 8013e82:	6800      	ldr	r0, [r0, #0]
 8013e84:	b120      	cbz	r0, 8013e90 <rcl_client_is_valid+0x10>
 8013e86:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013e8a:	3800      	subs	r0, #0
 8013e8c:	bf18      	it	ne
 8013e8e:	2001      	movne	r0, #1
 8013e90:	4770      	bx	lr
 8013e92:	bf00      	nop

08013e94 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013e94:	280b      	cmp	r0, #11
 8013e96:	dc0d      	bgt.n	8013eb4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	db09      	blt.n	8013eb0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013e9c:	280b      	cmp	r0, #11
 8013e9e:	d807      	bhi.n	8013eb0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013ea0:	e8df f000 	tbb	[pc, r0]
 8013ea4:	07060607 	.word	0x07060607
 8013ea8:	06060606 	.word	0x06060606
 8013eac:	07070606 	.word	0x07070606
 8013eb0:	2001      	movs	r0, #1
 8013eb2:	4770      	bx	lr
 8013eb4:	28cb      	cmp	r0, #203	@ 0xcb
 8013eb6:	bf18      	it	ne
 8013eb8:	2001      	movne	r0, #1
 8013eba:	4770      	bx	lr

08013ebc <rcl_get_zero_initialized_context>:
 8013ebc:	4a03      	ldr	r2, [pc, #12]	@ (8013ecc <rcl_get_zero_initialized_context+0x10>)
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ec4:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	4770      	bx	lr
 8013ecc:	0801c3ac 	.word	0x0801c3ac

08013ed0 <rcl_context_is_valid>:
 8013ed0:	b118      	cbz	r0, 8013eda <rcl_context_is_valid+0xa>
 8013ed2:	6840      	ldr	r0, [r0, #4]
 8013ed4:	3800      	subs	r0, #0
 8013ed6:	bf18      	it	ne
 8013ed8:	2001      	movne	r0, #1
 8013eda:	4770      	bx	lr

08013edc <__cleanup_context>:
 8013edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ee0:	4606      	mov	r6, r0
 8013ee2:	6800      	ldr	r0, [r0, #0]
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	6073      	str	r3, [r6, #4]
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	d049      	beq.n	8013f80 <__cleanup_context+0xa4>
 8013eec:	6947      	ldr	r7, [r0, #20]
 8013eee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013ef2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8013ef6:	b137      	cbz	r7, 8013f06 <__cleanup_context+0x2a>
 8013ef8:	3014      	adds	r0, #20
 8013efa:	f7f8 fe2d 	bl	800cb58 <rcl_init_options_fini>
 8013efe:	4607      	mov	r7, r0
 8013f00:	2800      	cmp	r0, #0
 8013f02:	d144      	bne.n	8013f8e <__cleanup_context+0xb2>
 8013f04:	6830      	ldr	r0, [r6, #0]
 8013f06:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013f08:	b143      	cbz	r3, 8013f1c <__cleanup_context+0x40>
 8013f0a:	3028      	adds	r0, #40	@ 0x28
 8013f0c:	f7fa fa90 	bl	800e430 <rmw_context_fini>
 8013f10:	b118      	cbz	r0, 8013f1a <__cleanup_context+0x3e>
 8013f12:	2f00      	cmp	r7, #0
 8013f14:	d03e      	beq.n	8013f94 <__cleanup_context+0xb8>
 8013f16:	f7f9 ffc3 	bl	800dea0 <rcutils_reset_error>
 8013f1a:	6830      	ldr	r0, [r6, #0]
 8013f1c:	6a03      	ldr	r3, [r0, #32]
 8013f1e:	b1db      	cbz	r3, 8013f58 <__cleanup_context+0x7c>
 8013f20:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013f24:	2a01      	cmp	r2, #1
 8013f26:	f17c 0100 	sbcs.w	r1, ip, #0
 8013f2a:	db11      	blt.n	8013f50 <__cleanup_context+0x74>
 8013f2c:	2400      	movs	r4, #0
 8013f2e:	4625      	mov	r5, r4
 8013f30:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013f34:	4649      	mov	r1, r9
 8013f36:	b1b8      	cbz	r0, 8013f68 <__cleanup_context+0x8c>
 8013f38:	47c0      	blx	r8
 8013f3a:	6833      	ldr	r3, [r6, #0]
 8013f3c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013f40:	3401      	adds	r4, #1
 8013f42:	f145 0500 	adc.w	r5, r5, #0
 8013f46:	4294      	cmp	r4, r2
 8013f48:	eb75 010c 	sbcs.w	r1, r5, ip
 8013f4c:	6a1b      	ldr	r3, [r3, #32]
 8013f4e:	dbef      	blt.n	8013f30 <__cleanup_context+0x54>
 8013f50:	4618      	mov	r0, r3
 8013f52:	4649      	mov	r1, r9
 8013f54:	47c0      	blx	r8
 8013f56:	6830      	ldr	r0, [r6, #0]
 8013f58:	4649      	mov	r1, r9
 8013f5a:	47c0      	blx	r8
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	e9c6 3300 	strd	r3, r3, [r6]
 8013f62:	4638      	mov	r0, r7
 8013f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f68:	3401      	adds	r4, #1
 8013f6a:	f145 0500 	adc.w	r5, r5, #0
 8013f6e:	4294      	cmp	r4, r2
 8013f70:	eb75 010c 	sbcs.w	r1, r5, ip
 8013f74:	dbdc      	blt.n	8013f30 <__cleanup_context+0x54>
 8013f76:	4618      	mov	r0, r3
 8013f78:	4649      	mov	r1, r9
 8013f7a:	47c0      	blx	r8
 8013f7c:	6830      	ldr	r0, [r6, #0]
 8013f7e:	e7eb      	b.n	8013f58 <__cleanup_context+0x7c>
 8013f80:	4607      	mov	r7, r0
 8013f82:	2300      	movs	r3, #0
 8013f84:	e9c6 3300 	strd	r3, r3, [r6]
 8013f88:	4638      	mov	r0, r7
 8013f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f8e:	f7f9 ff87 	bl	800dea0 <rcutils_reset_error>
 8013f92:	e7b7      	b.n	8013f04 <__cleanup_context+0x28>
 8013f94:	f7ff ff7e 	bl	8013e94 <rcl_convert_rmw_ret_to_rcl_ret>
 8013f98:	4607      	mov	r7, r0
 8013f9a:	e7bc      	b.n	8013f16 <__cleanup_context+0x3a>

08013f9c <rcl_init>:
 8013f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fa0:	1e05      	subs	r5, r0, #0
 8013fa2:	b09e      	sub	sp, #120	@ 0x78
 8013fa4:	460e      	mov	r6, r1
 8013fa6:	4690      	mov	r8, r2
 8013fa8:	461f      	mov	r7, r3
 8013faa:	f340 809c 	ble.w	80140e6 <rcl_init+0x14a>
 8013fae:	2900      	cmp	r1, #0
 8013fb0:	f000 809c 	beq.w	80140ec <rcl_init+0x150>
 8013fb4:	f1a1 0e04 	sub.w	lr, r1, #4
 8013fb8:	f04f 0c00 	mov.w	ip, #0
 8013fbc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013fc0:	f10c 0c01 	add.w	ip, ip, #1
 8013fc4:	2c00      	cmp	r4, #0
 8013fc6:	f000 8091 	beq.w	80140ec <rcl_init+0x150>
 8013fca:	4565      	cmp	r5, ip
 8013fcc:	d1f6      	bne.n	8013fbc <rcl_init+0x20>
 8013fce:	f1b8 0f00 	cmp.w	r8, #0
 8013fd2:	f000 808b 	beq.w	80140ec <rcl_init+0x150>
 8013fd6:	f8d8 4000 	ldr.w	r4, [r8]
 8013fda:	2c00      	cmp	r4, #0
 8013fdc:	f000 8086 	beq.w	80140ec <rcl_init+0x150>
 8013fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013fe2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8013fe6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fea:	6823      	ldr	r3, [r4, #0]
 8013fec:	f8cc 3000 	str.w	r3, [ip]
 8013ff0:	a819      	add	r0, sp, #100	@ 0x64
 8013ff2:	f7f9 ff2f 	bl	800de54 <rcutils_allocator_is_valid>
 8013ff6:	2800      	cmp	r0, #0
 8013ff8:	d078      	beq.n	80140ec <rcl_init+0x150>
 8013ffa:	2f00      	cmp	r7, #0
 8013ffc:	d076      	beq.n	80140ec <rcl_init+0x150>
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d178      	bne.n	80140f6 <rcl_init+0x15a>
 8014004:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8014008:	2178      	movs	r1, #120	@ 0x78
 801400a:	2001      	movs	r0, #1
 801400c:	4798      	blx	r3
 801400e:	4604      	mov	r4, r0
 8014010:	6038      	str	r0, [r7, #0]
 8014012:	2800      	cmp	r0, #0
 8014014:	f000 80b6 	beq.w	8014184 <rcl_init+0x1e8>
 8014018:	a802      	add	r0, sp, #8
 801401a:	f003 f86d 	bl	80170f8 <rmw_get_zero_initialized_context>
 801401e:	a902      	add	r1, sp, #8
 8014020:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014024:	2250      	movs	r2, #80	@ 0x50
 8014026:	ac19      	add	r4, sp, #100	@ 0x64
 8014028:	f005 ff5d 	bl	8019ee6 <memcpy>
 801402c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801402e:	f8d7 e000 	ldr.w	lr, [r7]
 8014032:	46f4      	mov	ip, lr
 8014034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014038:	6823      	ldr	r3, [r4, #0]
 801403a:	f8cc 3000 	str.w	r3, [ip]
 801403e:	f10e 0114 	add.w	r1, lr, #20
 8014042:	4640      	mov	r0, r8
 8014044:	f7f8 fdb2 	bl	800cbac <rcl_init_options_copy>
 8014048:	4604      	mov	r4, r0
 801404a:	2800      	cmp	r0, #0
 801404c:	d144      	bne.n	80140d8 <rcl_init+0x13c>
 801404e:	f8d7 9000 	ldr.w	r9, [r7]
 8014052:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8014056:	f8c9 0020 	str.w	r0, [r9, #32]
 801405a:	f8c9 5018 	str.w	r5, [r9, #24]
 801405e:	f8c9 801c 	str.w	r8, [r9, #28]
 8014062:	2d00      	cmp	r5, #0
 8014064:	d04e      	beq.n	8014104 <rcl_init+0x168>
 8014066:	2e00      	cmp	r6, #0
 8014068:	d04c      	beq.n	8014104 <rcl_init+0x168>
 801406a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801406e:	2104      	movs	r1, #4
 8014070:	4628      	mov	r0, r5
 8014072:	4798      	blx	r3
 8014074:	f8c9 0020 	str.w	r0, [r9, #32]
 8014078:	f8d7 9000 	ldr.w	r9, [r7]
 801407c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8014080:	46ca      	mov	sl, r9
 8014082:	b343      	cbz	r3, 80140d6 <rcl_init+0x13a>
 8014084:	2d01      	cmp	r5, #1
 8014086:	f178 0300 	sbcs.w	r3, r8, #0
 801408a:	db3b      	blt.n	8014104 <rcl_init+0x168>
 801408c:	2400      	movs	r4, #0
 801408e:	3e04      	subs	r6, #4
 8014090:	46a1      	mov	r9, r4
 8014092:	e00b      	b.n	80140ac <rcl_init+0x110>
 8014094:	6831      	ldr	r1, [r6, #0]
 8014096:	f005 ff26 	bl	8019ee6 <memcpy>
 801409a:	3401      	adds	r4, #1
 801409c:	f149 0900 	adc.w	r9, r9, #0
 80140a0:	45c8      	cmp	r8, r9
 80140a2:	bf08      	it	eq
 80140a4:	42a5      	cmpeq	r5, r4
 80140a6:	d02b      	beq.n	8014100 <rcl_init+0x164>
 80140a8:	f8d7 a000 	ldr.w	sl, [r7]
 80140ac:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80140b0:	f7ec f8c0 	bl	8000234 <strlen>
 80140b4:	1c42      	adds	r2, r0, #1
 80140b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80140b8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80140ba:	f8da a020 	ldr.w	sl, [sl, #32]
 80140be:	9201      	str	r2, [sp, #4]
 80140c0:	4610      	mov	r0, r2
 80140c2:	4798      	blx	r3
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80140ca:	6a1b      	ldr	r3, [r3, #32]
 80140cc:	9a01      	ldr	r2, [sp, #4]
 80140ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80140d2:	2800      	cmp	r0, #0
 80140d4:	d1de      	bne.n	8014094 <rcl_init+0xf8>
 80140d6:	240a      	movs	r4, #10
 80140d8:	4638      	mov	r0, r7
 80140da:	f7ff feff 	bl	8013edc <__cleanup_context>
 80140de:	4620      	mov	r0, r4
 80140e0:	b01e      	add	sp, #120	@ 0x78
 80140e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140e6:	2900      	cmp	r1, #0
 80140e8:	f43f af71 	beq.w	8013fce <rcl_init+0x32>
 80140ec:	240b      	movs	r4, #11
 80140ee:	4620      	mov	r0, r4
 80140f0:	b01e      	add	sp, #120	@ 0x78
 80140f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140f6:	2464      	movs	r4, #100	@ 0x64
 80140f8:	4620      	mov	r0, r4
 80140fa:	b01e      	add	sp, #120	@ 0x78
 80140fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014100:	f8d7 9000 	ldr.w	r9, [r7]
 8014104:	4926      	ldr	r1, [pc, #152]	@ (80141a0 <rcl_init+0x204>)
 8014106:	680b      	ldr	r3, [r1, #0]
 8014108:	3301      	adds	r3, #1
 801410a:	d036      	beq.n	801417a <rcl_init+0x1de>
 801410c:	600b      	str	r3, [r1, #0]
 801410e:	461a      	mov	r2, r3
 8014110:	2400      	movs	r4, #0
 8014112:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014116:	607b      	str	r3, [r7, #4]
 8014118:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801411a:	3301      	adds	r3, #1
 801411c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8014120:	d034      	beq.n	801418c <rcl_init+0x1f0>
 8014122:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8014126:	b93b      	cbnz	r3, 8014138 <rcl_init+0x19c>
 8014128:	3030      	adds	r0, #48	@ 0x30
 801412a:	f000 f83b 	bl	80141a4 <rcl_get_localhost_only>
 801412e:	4604      	mov	r4, r0
 8014130:	2800      	cmp	r0, #0
 8014132:	d1d1      	bne.n	80140d8 <rcl_init+0x13c>
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	6958      	ldr	r0, [r3, #20]
 8014138:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801413a:	aa18      	add	r2, sp, #96	@ 0x60
 801413c:	a917      	add	r1, sp, #92	@ 0x5c
 801413e:	f001 f925 	bl	801538c <rcl_validate_enclave_name>
 8014142:	4604      	mov	r4, r0
 8014144:	2800      	cmp	r0, #0
 8014146:	d1c7      	bne.n	80140d8 <rcl_init+0x13c>
 8014148:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801414a:	b9eb      	cbnz	r3, 8014188 <rcl_init+0x1ec>
 801414c:	6839      	ldr	r1, [r7, #0]
 801414e:	694b      	ldr	r3, [r1, #20]
 8014150:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8014152:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8014156:	f000 fb3f 	bl	80147d8 <rcl_get_security_options_from_environment>
 801415a:	4604      	mov	r4, r0
 801415c:	2800      	cmp	r0, #0
 801415e:	d1bb      	bne.n	80140d8 <rcl_init+0x13c>
 8014160:	6839      	ldr	r1, [r7, #0]
 8014162:	6948      	ldr	r0, [r1, #20]
 8014164:	3128      	adds	r1, #40	@ 0x28
 8014166:	3018      	adds	r0, #24
 8014168:	f7fa f82c 	bl	800e1c4 <rmw_init>
 801416c:	4604      	mov	r4, r0
 801416e:	2800      	cmp	r0, #0
 8014170:	d0bd      	beq.n	80140ee <rcl_init+0x152>
 8014172:	f7ff fe8f 	bl	8013e94 <rcl_convert_rmw_ret_to_rcl_ret>
 8014176:	4604      	mov	r4, r0
 8014178:	e7ae      	b.n	80140d8 <rcl_init+0x13c>
 801417a:	2201      	movs	r2, #1
 801417c:	461c      	mov	r4, r3
 801417e:	600a      	str	r2, [r1, #0]
 8014180:	4613      	mov	r3, r2
 8014182:	e7c6      	b.n	8014112 <rcl_init+0x176>
 8014184:	240a      	movs	r4, #10
 8014186:	e7b2      	b.n	80140ee <rcl_init+0x152>
 8014188:	2401      	movs	r4, #1
 801418a:	e7a5      	b.n	80140d8 <rcl_init+0x13c>
 801418c:	3024      	adds	r0, #36	@ 0x24
 801418e:	f004 fce9 	bl	8018b64 <rcl_get_default_domain_id>
 8014192:	4604      	mov	r4, r0
 8014194:	2800      	cmp	r0, #0
 8014196:	d19f      	bne.n	80140d8 <rcl_init+0x13c>
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	6958      	ldr	r0, [r3, #20]
 801419c:	e7c1      	b.n	8014122 <rcl_init+0x186>
 801419e:	bf00      	nop
 80141a0:	2000b8e0 	.word	0x2000b8e0

080141a4 <rcl_get_localhost_only>:
 80141a4:	b510      	push	{r4, lr}
 80141a6:	b082      	sub	sp, #8
 80141a8:	2300      	movs	r3, #0
 80141aa:	9301      	str	r3, [sp, #4]
 80141ac:	b1b8      	cbz	r0, 80141de <rcl_get_localhost_only+0x3a>
 80141ae:	4604      	mov	r4, r0
 80141b0:	a901      	add	r1, sp, #4
 80141b2:	480c      	ldr	r0, [pc, #48]	@ (80141e4 <rcl_get_localhost_only+0x40>)
 80141b4:	f002 fcf4 	bl	8016ba0 <rcutils_get_env>
 80141b8:	b110      	cbz	r0, 80141c0 <rcl_get_localhost_only+0x1c>
 80141ba:	2001      	movs	r0, #1
 80141bc:	b002      	add	sp, #8
 80141be:	bd10      	pop	{r4, pc}
 80141c0:	9b01      	ldr	r3, [sp, #4]
 80141c2:	b113      	cbz	r3, 80141ca <rcl_get_localhost_only+0x26>
 80141c4:	781a      	ldrb	r2, [r3, #0]
 80141c6:	2a31      	cmp	r2, #49	@ 0x31
 80141c8:	d004      	beq.n	80141d4 <rcl_get_localhost_only+0x30>
 80141ca:	2302      	movs	r3, #2
 80141cc:	2000      	movs	r0, #0
 80141ce:	7023      	strb	r3, [r4, #0]
 80141d0:	b002      	add	sp, #8
 80141d2:	bd10      	pop	{r4, pc}
 80141d4:	785b      	ldrb	r3, [r3, #1]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d1f7      	bne.n	80141ca <rcl_get_localhost_only+0x26>
 80141da:	2301      	movs	r3, #1
 80141dc:	e7f6      	b.n	80141cc <rcl_get_localhost_only+0x28>
 80141de:	200b      	movs	r0, #11
 80141e0:	b002      	add	sp, #8
 80141e2:	bd10      	pop	{r4, pc}
 80141e4:	0801c3b4 	.word	0x0801c3b4

080141e8 <rcl_get_zero_initialized_node>:
 80141e8:	4a03      	ldr	r2, [pc, #12]	@ (80141f8 <rcl_get_zero_initialized_node+0x10>)
 80141ea:	4603      	mov	r3, r0
 80141ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80141f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80141f4:	4618      	mov	r0, r3
 80141f6:	4770      	bx	lr
 80141f8:	0801c3d0 	.word	0x0801c3d0

080141fc <rcl_node_init>:
 80141fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014200:	b0a9      	sub	sp, #164	@ 0xa4
 8014202:	4604      	mov	r4, r0
 8014204:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8014208:	a823      	add	r0, sp, #140	@ 0x8c
 801420a:	460e      	mov	r6, r1
 801420c:	4615      	mov	r5, r2
 801420e:	461f      	mov	r7, r3
 8014210:	f004 ff1c 	bl	801904c <rcl_guard_condition_get_default_options>
 8014214:	f1b8 0f00 	cmp.w	r8, #0
 8014218:	f000 80e6 	beq.w	80143e8 <rcl_node_init+0x1ec>
 801421c:	4640      	mov	r0, r8
 801421e:	f7f9 fe19 	bl	800de54 <rcutils_allocator_is_valid>
 8014222:	2800      	cmp	r0, #0
 8014224:	f000 80e0 	beq.w	80143e8 <rcl_node_init+0x1ec>
 8014228:	2e00      	cmp	r6, #0
 801422a:	f000 80dd 	beq.w	80143e8 <rcl_node_init+0x1ec>
 801422e:	2d00      	cmp	r5, #0
 8014230:	f000 80da 	beq.w	80143e8 <rcl_node_init+0x1ec>
 8014234:	2c00      	cmp	r4, #0
 8014236:	f000 80d7 	beq.w	80143e8 <rcl_node_init+0x1ec>
 801423a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801423e:	f1b9 0f00 	cmp.w	r9, #0
 8014242:	f040 80fd 	bne.w	8014440 <rcl_node_init+0x244>
 8014246:	2f00      	cmp	r7, #0
 8014248:	f000 80ce 	beq.w	80143e8 <rcl_node_init+0x1ec>
 801424c:	4638      	mov	r0, r7
 801424e:	f7ff fe3f 	bl	8013ed0 <rcl_context_is_valid>
 8014252:	4682      	mov	sl, r0
 8014254:	2800      	cmp	r0, #0
 8014256:	f000 80cd 	beq.w	80143f4 <rcl_node_init+0x1f8>
 801425a:	464a      	mov	r2, r9
 801425c:	a922      	add	r1, sp, #136	@ 0x88
 801425e:	4630      	mov	r0, r6
 8014260:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8014264:	f003 f8c6 	bl	80173f4 <rmw_validate_node_name>
 8014268:	4681      	mov	r9, r0
 801426a:	2800      	cmp	r0, #0
 801426c:	f040 80be 	bne.w	80143ec <rcl_node_init+0x1f0>
 8014270:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014272:	2800      	cmp	r0, #0
 8014274:	f040 80f0 	bne.w	8014458 <rcl_node_init+0x25c>
 8014278:	4628      	mov	r0, r5
 801427a:	f7eb ffdb 	bl	8000234 <strlen>
 801427e:	2800      	cmp	r0, #0
 8014280:	f040 80bb 	bne.w	80143fa <rcl_node_init+0x1fe>
 8014284:	4d7c      	ldr	r5, [pc, #496]	@ (8014478 <rcl_node_init+0x27c>)
 8014286:	a922      	add	r1, sp, #136	@ 0x88
 8014288:	2200      	movs	r2, #0
 801428a:	4628      	mov	r0, r5
 801428c:	f003 f894 	bl	80173b8 <rmw_validate_namespace>
 8014290:	4681      	mov	r9, r0
 8014292:	2800      	cmp	r0, #0
 8014294:	f040 80aa 	bne.w	80143ec <rcl_node_init+0x1f0>
 8014298:	4682      	mov	sl, r0
 801429a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801429c:	2800      	cmp	r0, #0
 801429e:	f040 80e0 	bne.w	8014462 <rcl_node_init+0x266>
 80142a2:	f8d8 3000 	ldr.w	r3, [r8]
 80142a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80142aa:	2078      	movs	r0, #120	@ 0x78
 80142ac:	4798      	blx	r3
 80142ae:	4681      	mov	r9, r0
 80142b0:	6060      	str	r0, [r4, #4]
 80142b2:	2800      	cmp	r0, #0
 80142b4:	f000 80ca 	beq.w	801444c <rcl_node_init+0x250>
 80142b8:	2200      	movs	r2, #0
 80142ba:	2300      	movs	r3, #0
 80142bc:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80142c0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80142c4:	a808      	add	r0, sp, #32
 80142c6:	f000 f907 	bl	80144d8 <rcl_node_get_default_options>
 80142ca:	a908      	add	r1, sp, #32
 80142cc:	4648      	mov	r0, r9
 80142ce:	2268      	movs	r2, #104	@ 0x68
 80142d0:	f005 fe09 	bl	8019ee6 <memcpy>
 80142d4:	6861      	ldr	r1, [r4, #4]
 80142d6:	6027      	str	r7, [r4, #0]
 80142d8:	4640      	mov	r0, r8
 80142da:	f000 f90b 	bl	80144f4 <rcl_node_options_copy>
 80142de:	2800      	cmp	r0, #0
 80142e0:	d158      	bne.n	8014394 <rcl_node_init+0x198>
 80142e2:	4628      	mov	r0, r5
 80142e4:	f7eb ffa6 	bl	8000234 <strlen>
 80142e8:	4428      	add	r0, r5
 80142ea:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80142ee:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80142f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80142f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80142f8:	9300      	str	r3, [sp, #0]
 80142fa:	bf0c      	ite	eq
 80142fc:	4b5f      	ldreq	r3, [pc, #380]	@ (801447c <rcl_node_init+0x280>)
 80142fe:	4b60      	ldrne	r3, [pc, #384]	@ (8014480 <rcl_node_init+0x284>)
 8014300:	9302      	str	r3, [sp, #8]
 8014302:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014306:	9301      	str	r3, [sp, #4]
 8014308:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801430c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014310:	f002 fc6e 	bl	8016bf0 <rcutils_format_string_limit>
 8014314:	6823      	ldr	r3, [r4, #0]
 8014316:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801431a:	6818      	ldr	r0, [r3, #0]
 801431c:	4631      	mov	r1, r6
 801431e:	3028      	adds	r0, #40	@ 0x28
 8014320:	462a      	mov	r2, r5
 8014322:	6866      	ldr	r6, [r4, #4]
 8014324:	f7fa f930 	bl	800e588 <rmw_create_node>
 8014328:	6863      	ldr	r3, [r4, #4]
 801432a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801432c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801432e:	2800      	cmp	r0, #0
 8014330:	d032      	beq.n	8014398 <rcl_node_init+0x19c>
 8014332:	f7fa f9bd 	bl	800e6b0 <rmw_node_get_graph_guard_condition>
 8014336:	4681      	mov	r9, r0
 8014338:	b360      	cbz	r0, 8014394 <rcl_node_init+0x198>
 801433a:	f8d8 3000 	ldr.w	r3, [r8]
 801433e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014342:	6866      	ldr	r6, [r4, #4]
 8014344:	2008      	movs	r0, #8
 8014346:	4798      	blx	r3
 8014348:	6863      	ldr	r3, [r4, #4]
 801434a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801434c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8014350:	f1bb 0f00 	cmp.w	fp, #0
 8014354:	d020      	beq.n	8014398 <rcl_node_init+0x19c>
 8014356:	a806      	add	r0, sp, #24
 8014358:	f004 fd9c 	bl	8018e94 <rcl_get_zero_initialized_guard_condition>
 801435c:	a806      	add	r0, sp, #24
 801435e:	c803      	ldmia	r0, {r0, r1}
 8014360:	6863      	ldr	r3, [r4, #4]
 8014362:	46c4      	mov	ip, r8
 8014364:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014368:	e88b 0003 	stmia.w	fp, {r0, r1}
 801436c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014370:	ae23      	add	r6, sp, #140	@ 0x8c
 8014372:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014374:	f8dc 3000 	ldr.w	r3, [ip]
 8014378:	6033      	str	r3, [r6, #0]
 801437a:	ab28      	add	r3, sp, #160	@ 0xa0
 801437c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014380:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014384:	4649      	mov	r1, r9
 8014386:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014388:	463a      	mov	r2, r7
 801438a:	4670      	mov	r0, lr
 801438c:	f004 fdd8 	bl	8018f40 <rcl_guard_condition_init_from_rmw>
 8014390:	4681      	mov	r9, r0
 8014392:	b328      	cbz	r0, 80143e0 <rcl_node_init+0x1e4>
 8014394:	6863      	ldr	r3, [r4, #4]
 8014396:	b1f3      	cbz	r3, 80143d6 <rcl_node_init+0x1da>
 8014398:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801439a:	b128      	cbz	r0, 80143a8 <rcl_node_init+0x1ac>
 801439c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80143a0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80143a4:	4798      	blx	r3
 80143a6:	6863      	ldr	r3, [r4, #4]
 80143a8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80143aa:	b110      	cbz	r0, 80143b2 <rcl_node_init+0x1b6>
 80143ac:	f7fa f904 	bl	800e5b8 <rmw_destroy_node>
 80143b0:	6863      	ldr	r3, [r4, #4]
 80143b2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80143b4:	b148      	cbz	r0, 80143ca <rcl_node_init+0x1ce>
 80143b6:	f004 fe23 	bl	8019000 <rcl_guard_condition_fini>
 80143ba:	6863      	ldr	r3, [r4, #4]
 80143bc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80143c0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80143c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80143c6:	4798      	blx	r3
 80143c8:	6863      	ldr	r3, [r4, #4]
 80143ca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80143ce:	4618      	mov	r0, r3
 80143d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80143d4:	4798      	blx	r3
 80143d6:	2300      	movs	r3, #0
 80143d8:	e9c4 3300 	strd	r3, r3, [r4]
 80143dc:	f04f 0901 	mov.w	r9, #1
 80143e0:	f1ba 0f00 	cmp.w	sl, #0
 80143e4:	d125      	bne.n	8014432 <rcl_node_init+0x236>
 80143e6:	e001      	b.n	80143ec <rcl_node_init+0x1f0>
 80143e8:	f04f 090b 	mov.w	r9, #11
 80143ec:	4648      	mov	r0, r9
 80143ee:	b029      	add	sp, #164	@ 0xa4
 80143f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143f4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80143f8:	e7f8      	b.n	80143ec <rcl_node_init+0x1f0>
 80143fa:	782b      	ldrb	r3, [r5, #0]
 80143fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80143fe:	f43f af42 	beq.w	8014286 <rcl_node_init+0x8a>
 8014402:	9503      	str	r5, [sp, #12]
 8014404:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	4b1e      	ldr	r3, [pc, #120]	@ (8014484 <rcl_node_init+0x288>)
 801440c:	9302      	str	r3, [sp, #8]
 801440e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014412:	9301      	str	r3, [sp, #4]
 8014414:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014418:	f002 fbea 	bl	8016bf0 <rcutils_format_string_limit>
 801441c:	4605      	mov	r5, r0
 801441e:	b340      	cbz	r0, 8014472 <rcl_node_init+0x276>
 8014420:	2200      	movs	r2, #0
 8014422:	a922      	add	r1, sp, #136	@ 0x88
 8014424:	9222      	str	r2, [sp, #136]	@ 0x88
 8014426:	f002 ffc7 	bl	80173b8 <rmw_validate_namespace>
 801442a:	4681      	mov	r9, r0
 801442c:	2800      	cmp	r0, #0
 801442e:	f43f af34 	beq.w	801429a <rcl_node_init+0x9e>
 8014432:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014436:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801443a:	4628      	mov	r0, r5
 801443c:	4798      	blx	r3
 801443e:	e7d5      	b.n	80143ec <rcl_node_init+0x1f0>
 8014440:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8014444:	4648      	mov	r0, r9
 8014446:	b029      	add	sp, #164	@ 0xa4
 8014448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801444c:	f04f 090a 	mov.w	r9, #10
 8014450:	f1ba 0f00 	cmp.w	sl, #0
 8014454:	d1ed      	bne.n	8014432 <rcl_node_init+0x236>
 8014456:	e7c9      	b.n	80143ec <rcl_node_init+0x1f0>
 8014458:	f003 f81e 	bl	8017498 <rmw_node_name_validation_result_string>
 801445c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8014460:	e7c4      	b.n	80143ec <rcl_node_init+0x1f0>
 8014462:	f002 ffbb 	bl	80173dc <rmw_namespace_validation_result_string>
 8014466:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801446a:	f1ba 0f00 	cmp.w	sl, #0
 801446e:	d1e0      	bne.n	8014432 <rcl_node_init+0x236>
 8014470:	e7bc      	b.n	80143ec <rcl_node_init+0x1f0>
 8014472:	f04f 090a 	mov.w	r9, #10
 8014476:	e7b9      	b.n	80143ec <rcl_node_init+0x1f0>
 8014478:	0801bb7c 	.word	0x0801bb7c
 801447c:	0801bba4 	.word	0x0801bba4
 8014480:	0801bb80 	.word	0x0801bb80
 8014484:	0801c3cc 	.word	0x0801c3cc

08014488 <rcl_node_is_valid>:
 8014488:	b130      	cbz	r0, 8014498 <rcl_node_is_valid+0x10>
 801448a:	6843      	ldr	r3, [r0, #4]
 801448c:	b123      	cbz	r3, 8014498 <rcl_node_is_valid+0x10>
 801448e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014490:	b113      	cbz	r3, 8014498 <rcl_node_is_valid+0x10>
 8014492:	6800      	ldr	r0, [r0, #0]
 8014494:	f7ff bd1c 	b.w	8013ed0 <rcl_context_is_valid>
 8014498:	2000      	movs	r0, #0
 801449a:	4770      	bx	lr

0801449c <rcl_node_get_name>:
 801449c:	b120      	cbz	r0, 80144a8 <rcl_node_get_name+0xc>
 801449e:	6840      	ldr	r0, [r0, #4]
 80144a0:	b110      	cbz	r0, 80144a8 <rcl_node_get_name+0xc>
 80144a2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80144a4:	b100      	cbz	r0, 80144a8 <rcl_node_get_name+0xc>
 80144a6:	6880      	ldr	r0, [r0, #8]
 80144a8:	4770      	bx	lr
 80144aa:	bf00      	nop

080144ac <rcl_node_get_namespace>:
 80144ac:	b120      	cbz	r0, 80144b8 <rcl_node_get_namespace+0xc>
 80144ae:	6840      	ldr	r0, [r0, #4]
 80144b0:	b110      	cbz	r0, 80144b8 <rcl_node_get_namespace+0xc>
 80144b2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80144b4:	b100      	cbz	r0, 80144b8 <rcl_node_get_namespace+0xc>
 80144b6:	68c0      	ldr	r0, [r0, #12]
 80144b8:	4770      	bx	lr
 80144ba:	bf00      	nop

080144bc <rcl_node_get_options>:
 80144bc:	b128      	cbz	r0, 80144ca <rcl_node_get_options+0xe>
 80144be:	6840      	ldr	r0, [r0, #4]
 80144c0:	b118      	cbz	r0, 80144ca <rcl_node_get_options+0xe>
 80144c2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	bf08      	it	eq
 80144c8:	2000      	moveq	r0, #0
 80144ca:	4770      	bx	lr

080144cc <rcl_node_get_rmw_handle>:
 80144cc:	b110      	cbz	r0, 80144d4 <rcl_node_get_rmw_handle+0x8>
 80144ce:	6840      	ldr	r0, [r0, #4]
 80144d0:	b100      	cbz	r0, 80144d4 <rcl_node_get_rmw_handle+0x8>
 80144d2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80144d4:	4770      	bx	lr
 80144d6:	bf00      	nop

080144d8 <rcl_node_get_default_options>:
 80144d8:	b510      	push	{r4, lr}
 80144da:	2268      	movs	r2, #104	@ 0x68
 80144dc:	4604      	mov	r4, r0
 80144de:	2100      	movs	r1, #0
 80144e0:	f005 fc38 	bl	8019d54 <memset>
 80144e4:	4620      	mov	r0, r4
 80144e6:	f7f9 fca7 	bl	800de38 <rcutils_get_default_allocator>
 80144ea:	2301      	movs	r3, #1
 80144ec:	7523      	strb	r3, [r4, #20]
 80144ee:	4620      	mov	r0, r4
 80144f0:	bd10      	pop	{r4, pc}
 80144f2:	bf00      	nop

080144f4 <rcl_node_options_copy>:
 80144f4:	b1d0      	cbz	r0, 801452c <rcl_node_options_copy+0x38>
 80144f6:	b570      	push	{r4, r5, r6, lr}
 80144f8:	460c      	mov	r4, r1
 80144fa:	b1a9      	cbz	r1, 8014528 <rcl_node_options_copy+0x34>
 80144fc:	4288      	cmp	r0, r1
 80144fe:	4684      	mov	ip, r0
 8014500:	d012      	beq.n	8014528 <rcl_node_options_copy+0x34>
 8014502:	4605      	mov	r5, r0
 8014504:	8a86      	ldrh	r6, [r0, #20]
 8014506:	468e      	mov	lr, r1
 8014508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801450a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801450e:	682b      	ldr	r3, [r5, #0]
 8014510:	f8ce 3000 	str.w	r3, [lr]
 8014514:	f10c 0118 	add.w	r1, ip, #24
 8014518:	2250      	movs	r2, #80	@ 0x50
 801451a:	82a6      	strh	r6, [r4, #20]
 801451c:	f104 0018 	add.w	r0, r4, #24
 8014520:	f005 fce1 	bl	8019ee6 <memcpy>
 8014524:	2000      	movs	r0, #0
 8014526:	bd70      	pop	{r4, r5, r6, pc}
 8014528:	200b      	movs	r0, #11
 801452a:	bd70      	pop	{r4, r5, r6, pc}
 801452c:	200b      	movs	r0, #11
 801452e:	4770      	bx	lr

08014530 <rcl_node_resolve_name>:
 8014530:	b082      	sub	sp, #8
 8014532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014536:	b091      	sub	sp, #68	@ 0x44
 8014538:	ac1a      	add	r4, sp, #104	@ 0x68
 801453a:	e884 000c 	stmia.w	r4, {r2, r3}
 801453e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014542:	2800      	cmp	r0, #0
 8014544:	d03b      	beq.n	80145be <rcl_node_resolve_name+0x8e>
 8014546:	460c      	mov	r4, r1
 8014548:	4605      	mov	r5, r0
 801454a:	f7ff ffb7 	bl	80144bc <rcl_node_get_options>
 801454e:	2800      	cmp	r0, #0
 8014550:	d037      	beq.n	80145c2 <rcl_node_resolve_name+0x92>
 8014552:	4628      	mov	r0, r5
 8014554:	f7ff ffa2 	bl	801449c <rcl_node_get_name>
 8014558:	4606      	mov	r6, r0
 801455a:	4628      	mov	r0, r5
 801455c:	f7ff ffa6 	bl	80144ac <rcl_node_get_namespace>
 8014560:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8014564:	4681      	mov	r9, r0
 8014566:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801456a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801456c:	46ac      	mov	ip, r5
 801456e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014572:	f8de 3000 	ldr.w	r3, [lr]
 8014576:	f8cc 3000 	str.w	r3, [ip]
 801457a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801457c:	b1fb      	cbz	r3, 80145be <rcl_node_resolve_name+0x8e>
 801457e:	468a      	mov	sl, r1
 8014580:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8014584:	f002 fc8c 	bl	8016ea0 <rcutils_get_zero_initialized_string_map>
 8014588:	ab10      	add	r3, sp, #64	@ 0x40
 801458a:	9008      	str	r0, [sp, #32]
 801458c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014590:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014594:	2100      	movs	r1, #0
 8014596:	e895 000c 	ldmia.w	r5, {r2, r3}
 801459a:	a808      	add	r0, sp, #32
 801459c:	f002 fcf8 	bl	8016f90 <rcutils_string_map_init>
 80145a0:	4607      	mov	r7, r0
 80145a2:	b180      	cbz	r0, 80145c6 <rcl_node_resolve_name+0x96>
 80145a4:	f7f9 fc64 	bl	800de70 <rcutils_get_error_string>
 80145a8:	f7f9 fc7a 	bl	800dea0 <rcutils_reset_error>
 80145ac:	2f0a      	cmp	r7, #10
 80145ae:	bf18      	it	ne
 80145b0:	2701      	movne	r7, #1
 80145b2:	4638      	mov	r0, r7
 80145b4:	b011      	add	sp, #68	@ 0x44
 80145b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145ba:	b002      	add	sp, #8
 80145bc:	4770      	bx	lr
 80145be:	270b      	movs	r7, #11
 80145c0:	e7f7      	b.n	80145b2 <rcl_node_resolve_name+0x82>
 80145c2:	2701      	movs	r7, #1
 80145c4:	e7f5      	b.n	80145b2 <rcl_node_resolve_name+0x82>
 80145c6:	9009      	str	r0, [sp, #36]	@ 0x24
 80145c8:	9007      	str	r0, [sp, #28]
 80145ca:	a808      	add	r0, sp, #32
 80145cc:	f004 fc5c 	bl	8018e88 <rcl_get_default_topic_name_substitutions>
 80145d0:	4607      	mov	r7, r0
 80145d2:	b1a8      	cbz	r0, 8014600 <rcl_node_resolve_name+0xd0>
 80145d4:	280a      	cmp	r0, #10
 80145d6:	9c07      	ldr	r4, [sp, #28]
 80145d8:	d000      	beq.n	80145dc <rcl_node_resolve_name+0xac>
 80145da:	2701      	movs	r7, #1
 80145dc:	a808      	add	r0, sp, #32
 80145de:	f002 fd17 	bl	8017010 <rcutils_string_map_fini>
 80145e2:	2800      	cmp	r0, #0
 80145e4:	d13d      	bne.n	8014662 <rcl_node_resolve_name+0x132>
 80145e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80145e8:	4659      	mov	r1, fp
 80145ea:	47d0      	blx	sl
 80145ec:	4659      	mov	r1, fp
 80145ee:	4620      	mov	r0, r4
 80145f0:	47d0      	blx	sl
 80145f2:	f1b8 0f00 	cmp.w	r8, #0
 80145f6:	d0dc      	beq.n	80145b2 <rcl_node_resolve_name+0x82>
 80145f8:	2f67      	cmp	r7, #103	@ 0x67
 80145fa:	bf08      	it	eq
 80145fc:	2768      	moveq	r7, #104	@ 0x68
 80145fe:	e7d8      	b.n	80145b2 <rcl_node_resolve_name+0x82>
 8014600:	ab09      	add	r3, sp, #36	@ 0x24
 8014602:	9305      	str	r3, [sp, #20]
 8014604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014606:	46ec      	mov	ip, sp
 8014608:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801460c:	682b      	ldr	r3, [r5, #0]
 801460e:	f8cc 3000 	str.w	r3, [ip]
 8014612:	464a      	mov	r2, r9
 8014614:	4631      	mov	r1, r6
 8014616:	4620      	mov	r0, r4
 8014618:	ab08      	add	r3, sp, #32
 801461a:	f004 fad7 	bl	8018bcc <rcl_expand_topic_name>
 801461e:	4607      	mov	r7, r0
 8014620:	b9b8      	cbnz	r0, 8014652 <rcl_node_resolve_name+0x122>
 8014622:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014624:	9009      	str	r0, [sp, #36]	@ 0x24
 8014626:	4602      	mov	r2, r0
 8014628:	a90a      	add	r1, sp, #40	@ 0x28
 801462a:	4620      	mov	r0, r4
 801462c:	f002 fe00 	bl	8017230 <rmw_validate_full_topic_name>
 8014630:	b988      	cbnz	r0, 8014656 <rcl_node_resolve_name+0x126>
 8014632:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014634:	b9d5      	cbnz	r5, 801466c <rcl_node_resolve_name+0x13c>
 8014636:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014638:	a808      	add	r0, sp, #32
 801463a:	601c      	str	r4, [r3, #0]
 801463c:	f002 fce8 	bl	8017010 <rcutils_string_map_fini>
 8014640:	4607      	mov	r7, r0
 8014642:	b1a8      	cbz	r0, 8014670 <rcl_node_resolve_name+0x140>
 8014644:	f7f9 fc14 	bl	800de70 <rcutils_get_error_string>
 8014648:	462c      	mov	r4, r5
 801464a:	f7f9 fc29 	bl	800dea0 <rcutils_reset_error>
 801464e:	2701      	movs	r7, #1
 8014650:	e7c9      	b.n	80145e6 <rcl_node_resolve_name+0xb6>
 8014652:	9c07      	ldr	r4, [sp, #28]
 8014654:	e7c2      	b.n	80145dc <rcl_node_resolve_name+0xac>
 8014656:	f7f9 fc0b 	bl	800de70 <rcutils_get_error_string>
 801465a:	2701      	movs	r7, #1
 801465c:	f7f9 fc20 	bl	800dea0 <rcutils_reset_error>
 8014660:	e7bc      	b.n	80145dc <rcl_node_resolve_name+0xac>
 8014662:	f7f9 fc05 	bl	800de70 <rcutils_get_error_string>
 8014666:	f7f9 fc1b 	bl	800dea0 <rcutils_reset_error>
 801466a:	e7bc      	b.n	80145e6 <rcl_node_resolve_name+0xb6>
 801466c:	2767      	movs	r7, #103	@ 0x67
 801466e:	e7b5      	b.n	80145dc <rcl_node_resolve_name+0xac>
 8014670:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014672:	4659      	mov	r1, fp
 8014674:	47d0      	blx	sl
 8014676:	4659      	mov	r1, fp
 8014678:	4638      	mov	r0, r7
 801467a:	47d0      	blx	sl
 801467c:	e799      	b.n	80145b2 <rcl_node_resolve_name+0x82>
 801467e:	bf00      	nop

08014680 <exact_match_lookup>:
 8014680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014682:	f102 0708 	add.w	r7, r2, #8
 8014686:	460b      	mov	r3, r1
 8014688:	4614      	mov	r4, r2
 801468a:	4606      	mov	r6, r0
 801468c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014690:	b085      	sub	sp, #20
 8014692:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014696:	4618      	mov	r0, r3
 8014698:	4919      	ldr	r1, [pc, #100]	@ (8014700 <exact_match_lookup+0x80>)
 801469a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801469e:	f002 fa99 	bl	8016bd4 <rcutils_join_path>
 80146a2:	7833      	ldrb	r3, [r6, #0]
 80146a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80146a6:	4605      	mov	r5, r0
 80146a8:	d023      	beq.n	80146f2 <exact_match_lookup+0x72>
 80146aa:	f104 030c 	add.w	r3, r4, #12
 80146ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80146b2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80146b6:	1c70      	adds	r0, r6, #1
 80146b8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80146bc:	f002 fa90 	bl	8016be0 <rcutils_to_native_path>
 80146c0:	4606      	mov	r6, r0
 80146c2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80146c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80146ca:	4631      	mov	r1, r6
 80146cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80146d0:	4628      	mov	r0, r5
 80146d2:	f002 fa7f 	bl	8016bd4 <rcutils_join_path>
 80146d6:	6862      	ldr	r2, [r4, #4]
 80146d8:	6921      	ldr	r1, [r4, #16]
 80146da:	4603      	mov	r3, r0
 80146dc:	4630      	mov	r0, r6
 80146de:	461e      	mov	r6, r3
 80146e0:	4790      	blx	r2
 80146e2:	4628      	mov	r0, r5
 80146e4:	6863      	ldr	r3, [r4, #4]
 80146e6:	6921      	ldr	r1, [r4, #16]
 80146e8:	4798      	blx	r3
 80146ea:	4635      	mov	r5, r6
 80146ec:	4628      	mov	r0, r5
 80146ee:	b005      	add	sp, #20
 80146f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146f2:	7873      	ldrb	r3, [r6, #1]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d1d8      	bne.n	80146aa <exact_match_lookup+0x2a>
 80146f8:	4628      	mov	r0, r5
 80146fa:	b005      	add	sp, #20
 80146fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146fe:	bf00      	nop
 8014700:	0801c414 	.word	0x0801c414

08014704 <rcl_get_secure_root>:
 8014704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014708:	b085      	sub	sp, #20
 801470a:	b168      	cbz	r0, 8014728 <rcl_get_secure_root+0x24>
 801470c:	4607      	mov	r7, r0
 801470e:	4608      	mov	r0, r1
 8014710:	460c      	mov	r4, r1
 8014712:	f7f9 fb9f 	bl	800de54 <rcutils_allocator_is_valid>
 8014716:	b138      	cbz	r0, 8014728 <rcl_get_secure_root+0x24>
 8014718:	2300      	movs	r3, #0
 801471a:	482d      	ldr	r0, [pc, #180]	@ (80147d0 <rcl_get_secure_root+0xcc>)
 801471c:	9303      	str	r3, [sp, #12]
 801471e:	a903      	add	r1, sp, #12
 8014720:	f002 fa3e 	bl	8016ba0 <rcutils_get_env>
 8014724:	4605      	mov	r5, r0
 8014726:	b120      	cbz	r0, 8014732 <rcl_get_secure_root+0x2e>
 8014728:	2500      	movs	r5, #0
 801472a:	4628      	mov	r0, r5
 801472c:	b005      	add	sp, #20
 801472e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014732:	9b03      	ldr	r3, [sp, #12]
 8014734:	781a      	ldrb	r2, [r3, #0]
 8014736:	2a00      	cmp	r2, #0
 8014738:	d0f6      	beq.n	8014728 <rcl_get_secure_root+0x24>
 801473a:	f104 090c 	add.w	r9, r4, #12
 801473e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014742:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014746:	4618      	mov	r0, r3
 8014748:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801474c:	f002 fb6a 	bl	8016e24 <rcutils_strdup>
 8014750:	4680      	mov	r8, r0
 8014752:	2800      	cmp	r0, #0
 8014754:	d0e8      	beq.n	8014728 <rcl_get_secure_root+0x24>
 8014756:	481f      	ldr	r0, [pc, #124]	@ (80147d4 <rcl_get_secure_root+0xd0>)
 8014758:	9503      	str	r5, [sp, #12]
 801475a:	a903      	add	r1, sp, #12
 801475c:	f002 fa20 	bl	8016ba0 <rcutils_get_env>
 8014760:	b160      	cbz	r0, 801477c <rcl_get_secure_root+0x78>
 8014762:	2600      	movs	r6, #0
 8014764:	6863      	ldr	r3, [r4, #4]
 8014766:	6921      	ldr	r1, [r4, #16]
 8014768:	4630      	mov	r0, r6
 801476a:	4798      	blx	r3
 801476c:	4640      	mov	r0, r8
 801476e:	6863      	ldr	r3, [r4, #4]
 8014770:	6921      	ldr	r1, [r4, #16]
 8014772:	4798      	blx	r3
 8014774:	4628      	mov	r0, r5
 8014776:	b005      	add	sp, #20
 8014778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801477c:	9b03      	ldr	r3, [sp, #12]
 801477e:	781e      	ldrb	r6, [r3, #0]
 8014780:	b1f6      	cbz	r6, 80147c0 <rcl_get_secure_root+0xbc>
 8014782:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014786:	e88d 0003 	stmia.w	sp, {r0, r1}
 801478a:	4618      	mov	r0, r3
 801478c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014790:	f002 fb48 	bl	8016e24 <rcutils_strdup>
 8014794:	4606      	mov	r6, r0
 8014796:	2800      	cmp	r0, #0
 8014798:	d0e3      	beq.n	8014762 <rcl_get_secure_root+0x5e>
 801479a:	4622      	mov	r2, r4
 801479c:	4641      	mov	r1, r8
 801479e:	f7ff ff6f 	bl	8014680 <exact_match_lookup>
 80147a2:	4605      	mov	r5, r0
 80147a4:	2d00      	cmp	r5, #0
 80147a6:	d0dd      	beq.n	8014764 <rcl_get_secure_root+0x60>
 80147a8:	4628      	mov	r0, r5
 80147aa:	f002 fa11 	bl	8016bd0 <rcutils_is_directory>
 80147ae:	4603      	mov	r3, r0
 80147b0:	2800      	cmp	r0, #0
 80147b2:	d1d7      	bne.n	8014764 <rcl_get_secure_root+0x60>
 80147b4:	4628      	mov	r0, r5
 80147b6:	6921      	ldr	r1, [r4, #16]
 80147b8:	461d      	mov	r5, r3
 80147ba:	6863      	ldr	r3, [r4, #4]
 80147bc:	4798      	blx	r3
 80147be:	e7d1      	b.n	8014764 <rcl_get_secure_root+0x60>
 80147c0:	4622      	mov	r2, r4
 80147c2:	4638      	mov	r0, r7
 80147c4:	4641      	mov	r1, r8
 80147c6:	f7ff ff5b 	bl	8014680 <exact_match_lookup>
 80147ca:	4605      	mov	r5, r0
 80147cc:	e7ea      	b.n	80147a4 <rcl_get_secure_root+0xa0>
 80147ce:	bf00      	nop
 80147d0:	0801c420 	.word	0x0801c420
 80147d4:	0801c438 	.word	0x0801c438

080147d8 <rcl_get_security_options_from_environment>:
 80147d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147dc:	b082      	sub	sp, #8
 80147de:	2300      	movs	r3, #0
 80147e0:	4606      	mov	r6, r0
 80147e2:	460f      	mov	r7, r1
 80147e4:	4820      	ldr	r0, [pc, #128]	@ (8014868 <rcl_get_security_options_from_environment+0x90>)
 80147e6:	9301      	str	r3, [sp, #4]
 80147e8:	a901      	add	r1, sp, #4
 80147ea:	4690      	mov	r8, r2
 80147ec:	f002 f9d8 	bl	8016ba0 <rcutils_get_env>
 80147f0:	b120      	cbz	r0, 80147fc <rcl_get_security_options_from_environment+0x24>
 80147f2:	2501      	movs	r5, #1
 80147f4:	4628      	mov	r0, r5
 80147f6:	b002      	add	sp, #8
 80147f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147fc:	491b      	ldr	r1, [pc, #108]	@ (801486c <rcl_get_security_options_from_environment+0x94>)
 80147fe:	4604      	mov	r4, r0
 8014800:	9801      	ldr	r0, [sp, #4]
 8014802:	f7eb fd0d 	bl	8000220 <strcmp>
 8014806:	4605      	mov	r5, r0
 8014808:	b9e8      	cbnz	r0, 8014846 <rcl_get_security_options_from_environment+0x6e>
 801480a:	9001      	str	r0, [sp, #4]
 801480c:	f1b8 0f00 	cmp.w	r8, #0
 8014810:	d020      	beq.n	8014854 <rcl_get_security_options_from_environment+0x7c>
 8014812:	4817      	ldr	r0, [pc, #92]	@ (8014870 <rcl_get_security_options_from_environment+0x98>)
 8014814:	a901      	add	r1, sp, #4
 8014816:	f002 f9c3 	bl	8016ba0 <rcutils_get_env>
 801481a:	2800      	cmp	r0, #0
 801481c:	d1e9      	bne.n	80147f2 <rcl_get_security_options_from_environment+0x1a>
 801481e:	4915      	ldr	r1, [pc, #84]	@ (8014874 <rcl_get_security_options_from_environment+0x9c>)
 8014820:	9801      	ldr	r0, [sp, #4]
 8014822:	f7eb fcfd 	bl	8000220 <strcmp>
 8014826:	fab0 f080 	clz	r0, r0
 801482a:	0940      	lsrs	r0, r0, #5
 801482c:	f888 0000 	strb.w	r0, [r8]
 8014830:	4639      	mov	r1, r7
 8014832:	4630      	mov	r0, r6
 8014834:	f7ff ff66 	bl	8014704 <rcl_get_secure_root>
 8014838:	b170      	cbz	r0, 8014858 <rcl_get_security_options_from_environment+0x80>
 801483a:	f8c8 0004 	str.w	r0, [r8, #4]
 801483e:	4628      	mov	r0, r5
 8014840:	b002      	add	sp, #8
 8014842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014846:	4625      	mov	r5, r4
 8014848:	4628      	mov	r0, r5
 801484a:	f888 4000 	strb.w	r4, [r8]
 801484e:	b002      	add	sp, #8
 8014850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014854:	250b      	movs	r5, #11
 8014856:	e7cd      	b.n	80147f4 <rcl_get_security_options_from_environment+0x1c>
 8014858:	f898 5000 	ldrb.w	r5, [r8]
 801485c:	f1a5 0501 	sub.w	r5, r5, #1
 8014860:	fab5 f585 	clz	r5, r5
 8014864:	096d      	lsrs	r5, r5, #5
 8014866:	e7c5      	b.n	80147f4 <rcl_get_security_options_from_environment+0x1c>
 8014868:	0801c3d8 	.word	0x0801c3d8
 801486c:	0801c3ec 	.word	0x0801c3ec
 8014870:	0801c3f4 	.word	0x0801c3f4
 8014874:	0801c40c 	.word	0x0801c40c

08014878 <rcl_get_zero_initialized_service>:
 8014878:	4b01      	ldr	r3, [pc, #4]	@ (8014880 <rcl_get_zero_initialized_service+0x8>)
 801487a:	6818      	ldr	r0, [r3, #0]
 801487c:	4770      	bx	lr
 801487e:	bf00      	nop
 8014880:	0801c458 	.word	0x0801c458

08014884 <rcl_service_init>:
 8014884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014888:	b089      	sub	sp, #36	@ 0x24
 801488a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801488c:	b1c5      	cbz	r5, 80148c0 <rcl_service_init+0x3c>
 801488e:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8014892:	4604      	mov	r4, r0
 8014894:	4648      	mov	r0, r9
 8014896:	4688      	mov	r8, r1
 8014898:	4617      	mov	r7, r2
 801489a:	461e      	mov	r6, r3
 801489c:	f7f9 fada 	bl	800de54 <rcutils_allocator_is_valid>
 80148a0:	b170      	cbz	r0, 80148c0 <rcl_service_init+0x3c>
 80148a2:	b16c      	cbz	r4, 80148c0 <rcl_service_init+0x3c>
 80148a4:	4640      	mov	r0, r8
 80148a6:	f7ff fdef 	bl	8014488 <rcl_node_is_valid>
 80148aa:	2800      	cmp	r0, #0
 80148ac:	d058      	beq.n	8014960 <rcl_service_init+0xdc>
 80148ae:	b13f      	cbz	r7, 80148c0 <rcl_service_init+0x3c>
 80148b0:	b136      	cbz	r6, 80148c0 <rcl_service_init+0x3c>
 80148b2:	6823      	ldr	r3, [r4, #0]
 80148b4:	b14b      	cbz	r3, 80148ca <rcl_service_init+0x46>
 80148b6:	2664      	movs	r6, #100	@ 0x64
 80148b8:	4630      	mov	r0, r6
 80148ba:	b009      	add	sp, #36	@ 0x24
 80148bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148c0:	260b      	movs	r6, #11
 80148c2:	4630      	mov	r0, r6
 80148c4:	b009      	add	sp, #36	@ 0x24
 80148c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148ca:	aa07      	add	r2, sp, #28
 80148cc:	9205      	str	r2, [sp, #20]
 80148ce:	2201      	movs	r2, #1
 80148d0:	9304      	str	r3, [sp, #16]
 80148d2:	9203      	str	r2, [sp, #12]
 80148d4:	9307      	str	r3, [sp, #28]
 80148d6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80148da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80148de:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80148e2:	4631      	mov	r1, r6
 80148e4:	e899 000c 	ldmia.w	r9, {r2, r3}
 80148e8:	4640      	mov	r0, r8
 80148ea:	f7ff fe21 	bl	8014530 <rcl_node_resolve_name>
 80148ee:	2800      	cmp	r0, #0
 80148f0:	d145      	bne.n	801497e <rcl_service_init+0xfa>
 80148f2:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80148f4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80148f6:	f44f 7088 	mov.w	r0, #272	@ 0x110
 80148fa:	4798      	blx	r3
 80148fc:	6020      	str	r0, [r4, #0]
 80148fe:	2800      	cmp	r0, #0
 8014900:	d043      	beq.n	801498a <rcl_service_init+0x106>
 8014902:	4640      	mov	r0, r8
 8014904:	f7ff fde2 	bl	80144cc <rcl_node_get_rmw_handle>
 8014908:	462b      	mov	r3, r5
 801490a:	9a07      	ldr	r2, [sp, #28]
 801490c:	6826      	ldr	r6, [r4, #0]
 801490e:	4639      	mov	r1, r7
 8014910:	f7fa f878 	bl	800ea04 <rmw_create_service>
 8014914:	6823      	ldr	r3, [r4, #0]
 8014916:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 801491a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801491e:	b330      	cbz	r0, 801496e <rcl_service_init+0xea>
 8014920:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8014924:	f7fa f994 	bl	800ec50 <rmw_service_request_subscription_get_actual_qos>
 8014928:	b9f8      	cbnz	r0, 801496a <rcl_service_init+0xe6>
 801492a:	6821      	ldr	r1, [r4, #0]
 801492c:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8014930:	31b8      	adds	r1, #184	@ 0xb8
 8014932:	f7fa f97d 	bl	800ec30 <rmw_service_response_publisher_get_actual_qos>
 8014936:	4606      	mov	r6, r0
 8014938:	b9b8      	cbnz	r0, 801496a <rcl_service_init+0xe6>
 801493a:	6820      	ldr	r0, [r4, #0]
 801493c:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8014940:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8014944:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8014948:	2268      	movs	r2, #104	@ 0x68
 801494a:	4629      	mov	r1, r5
 801494c:	f005 facb 	bl	8019ee6 <memcpy>
 8014950:	9807      	ldr	r0, [sp, #28]
 8014952:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8014954:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8014956:	4798      	blx	r3
 8014958:	4630      	mov	r0, r6
 801495a:	b009      	add	sp, #36	@ 0x24
 801495c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014960:	26c8      	movs	r6, #200	@ 0xc8
 8014962:	4630      	mov	r0, r6
 8014964:	b009      	add	sp, #36	@ 0x24
 8014966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801496a:	6823      	ldr	r3, [r4, #0]
 801496c:	b12b      	cbz	r3, 801497a <rcl_service_init+0xf6>
 801496e:	4618      	mov	r0, r3
 8014970:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8014972:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8014974:	4790      	blx	r2
 8014976:	2300      	movs	r3, #0
 8014978:	6023      	str	r3, [r4, #0]
 801497a:	2601      	movs	r6, #1
 801497c:	e7e8      	b.n	8014950 <rcl_service_init+0xcc>
 801497e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8014982:	2b01      	cmp	r3, #1
 8014984:	d903      	bls.n	801498e <rcl_service_init+0x10a>
 8014986:	280a      	cmp	r0, #10
 8014988:	d1f7      	bne.n	801497a <rcl_service_init+0xf6>
 801498a:	260a      	movs	r6, #10
 801498c:	e7e0      	b.n	8014950 <rcl_service_init+0xcc>
 801498e:	2668      	movs	r6, #104	@ 0x68
 8014990:	e7de      	b.n	8014950 <rcl_service_init+0xcc>
 8014992:	bf00      	nop

08014994 <rcl_service_get_default_options>:
 8014994:	b530      	push	{r4, r5, lr}
 8014996:	4d0f      	ldr	r5, [pc, #60]	@ (80149d4 <rcl_service_get_default_options+0x40>)
 8014998:	490f      	ldr	r1, [pc, #60]	@ (80149d8 <rcl_service_get_default_options+0x44>)
 801499a:	b087      	sub	sp, #28
 801499c:	4604      	mov	r4, r0
 801499e:	2250      	movs	r2, #80	@ 0x50
 80149a0:	4628      	mov	r0, r5
 80149a2:	f005 faa0 	bl	8019ee6 <memcpy>
 80149a6:	4668      	mov	r0, sp
 80149a8:	f7f9 fa46 	bl	800de38 <rcutils_get_default_allocator>
 80149ac:	46ec      	mov	ip, sp
 80149ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149b2:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80149b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149ba:	2268      	movs	r2, #104	@ 0x68
 80149bc:	f8dc 3000 	ldr.w	r3, [ip]
 80149c0:	f8ce 3000 	str.w	r3, [lr]
 80149c4:	4629      	mov	r1, r5
 80149c6:	4620      	mov	r0, r4
 80149c8:	f005 fa8d 	bl	8019ee6 <memcpy>
 80149cc:	4620      	mov	r0, r4
 80149ce:	b007      	add	sp, #28
 80149d0:	bd30      	pop	{r4, r5, pc}
 80149d2:	bf00      	nop
 80149d4:	2000b8e8 	.word	0x2000b8e8
 80149d8:	0801c460 	.word	0x0801c460

080149dc <rcl_service_get_rmw_handle>:
 80149dc:	b118      	cbz	r0, 80149e6 <rcl_service_get_rmw_handle+0xa>
 80149de:	6800      	ldr	r0, [r0, #0]
 80149e0:	b108      	cbz	r0, 80149e6 <rcl_service_get_rmw_handle+0xa>
 80149e2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80149e6:	4770      	bx	lr

080149e8 <rcl_take_request>:
 80149e8:	b570      	push	{r4, r5, r6, lr}
 80149ea:	468e      	mov	lr, r1
 80149ec:	460c      	mov	r4, r1
 80149ee:	4616      	mov	r6, r2
 80149f0:	4605      	mov	r5, r0
 80149f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149f6:	b08c      	sub	sp, #48	@ 0x30
 80149f8:	f10d 0c18 	add.w	ip, sp, #24
 80149fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a00:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014a04:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014a08:	b30d      	cbz	r5, 8014a4e <rcl_take_request+0x66>
 8014a0a:	682b      	ldr	r3, [r5, #0]
 8014a0c:	b1fb      	cbz	r3, 8014a4e <rcl_take_request+0x66>
 8014a0e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014a12:	b1e0      	cbz	r0, 8014a4e <rcl_take_request+0x66>
 8014a14:	b336      	cbz	r6, 8014a64 <rcl_take_request+0x7c>
 8014a16:	2300      	movs	r3, #0
 8014a18:	f88d 3007 	strb.w	r3, [sp, #7]
 8014a1c:	4632      	mov	r2, r6
 8014a1e:	f10d 0307 	add.w	r3, sp, #7
 8014a22:	a902      	add	r1, sp, #8
 8014a24:	f002 ff5a 	bl	80178dc <rmw_take_request>
 8014a28:	4605      	mov	r5, r0
 8014a2a:	b198      	cbz	r0, 8014a54 <rcl_take_request+0x6c>
 8014a2c:	280a      	cmp	r0, #10
 8014a2e:	bf18      	it	ne
 8014a30:	2501      	movne	r5, #1
 8014a32:	f10d 0e18 	add.w	lr, sp, #24
 8014a36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a3a:	46a4      	mov	ip, r4
 8014a3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a40:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014a44:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014a48:	4628      	mov	r0, r5
 8014a4a:	b00c      	add	sp, #48	@ 0x30
 8014a4c:	bd70      	pop	{r4, r5, r6, pc}
 8014a4e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8014a52:	e7ee      	b.n	8014a32 <rcl_take_request+0x4a>
 8014a54:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014a58:	f240 2359 	movw	r3, #601	@ 0x259
 8014a5c:	2a00      	cmp	r2, #0
 8014a5e:	bf08      	it	eq
 8014a60:	461d      	moveq	r5, r3
 8014a62:	e7e6      	b.n	8014a32 <rcl_take_request+0x4a>
 8014a64:	250b      	movs	r5, #11
 8014a66:	e7e4      	b.n	8014a32 <rcl_take_request+0x4a>

08014a68 <rcl_send_response>:
 8014a68:	b170      	cbz	r0, 8014a88 <rcl_send_response+0x20>
 8014a6a:	6800      	ldr	r0, [r0, #0]
 8014a6c:	b160      	cbz	r0, 8014a88 <rcl_send_response+0x20>
 8014a6e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014a72:	b148      	cbz	r0, 8014a88 <rcl_send_response+0x20>
 8014a74:	b159      	cbz	r1, 8014a8e <rcl_send_response+0x26>
 8014a76:	b510      	push	{r4, lr}
 8014a78:	b15a      	cbz	r2, 8014a92 <rcl_send_response+0x2a>
 8014a7a:	f002 ff8d 	bl	8017998 <rmw_send_response>
 8014a7e:	b110      	cbz	r0, 8014a86 <rcl_send_response+0x1e>
 8014a80:	2802      	cmp	r0, #2
 8014a82:	bf18      	it	ne
 8014a84:	2001      	movne	r0, #1
 8014a86:	bd10      	pop	{r4, pc}
 8014a88:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014a8c:	4770      	bx	lr
 8014a8e:	200b      	movs	r0, #11
 8014a90:	4770      	bx	lr
 8014a92:	200b      	movs	r0, #11
 8014a94:	bd10      	pop	{r4, pc}
 8014a96:	bf00      	nop

08014a98 <rcl_service_is_valid>:
 8014a98:	b130      	cbz	r0, 8014aa8 <rcl_service_is_valid+0x10>
 8014a9a:	6800      	ldr	r0, [r0, #0]
 8014a9c:	b120      	cbz	r0, 8014aa8 <rcl_service_is_valid+0x10>
 8014a9e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014aa2:	3800      	subs	r0, #0
 8014aa4:	bf18      	it	ne
 8014aa6:	2001      	movne	r0, #1
 8014aa8:	4770      	bx	lr
 8014aaa:	bf00      	nop

08014aac <rcl_take>:
 8014aac:	2800      	cmp	r0, #0
 8014aae:	d04a      	beq.n	8014b46 <rcl_take+0x9a>
 8014ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ab4:	4604      	mov	r4, r0
 8014ab6:	6800      	ldr	r0, [r0, #0]
 8014ab8:	b0a4      	sub	sp, #144	@ 0x90
 8014aba:	2800      	cmp	r0, #0
 8014abc:	d03b      	beq.n	8014b36 <rcl_take+0x8a>
 8014abe:	461f      	mov	r7, r3
 8014ac0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d036      	beq.n	8014b36 <rcl_take+0x8a>
 8014ac8:	460e      	mov	r6, r1
 8014aca:	2900      	cmp	r1, #0
 8014acc:	d039      	beq.n	8014b42 <rcl_take+0x96>
 8014ace:	4615      	mov	r5, r2
 8014ad0:	2a00      	cmp	r2, #0
 8014ad2:	d03c      	beq.n	8014b4e <rcl_take+0xa2>
 8014ad4:	a802      	add	r0, sp, #8
 8014ad6:	f002 fba3 	bl	8017220 <rmw_get_zero_initialized_message_info>
 8014ada:	f10d 0c08 	add.w	ip, sp, #8
 8014ade:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ae2:	46ae      	mov	lr, r5
 8014ae4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014ae8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014aec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014af0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014af4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014af8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8014afc:	f04f 0800 	mov.w	r8, #0
 8014b00:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8014b04:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8014b08:	6822      	ldr	r2, [r4, #0]
 8014b0a:	462b      	mov	r3, r5
 8014b0c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8014b10:	9700      	str	r7, [sp, #0]
 8014b12:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8014b16:	4631      	mov	r1, r6
 8014b18:	f002 ffe4 	bl	8017ae4 <rmw_take_with_info>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	b9c0      	cbnz	r0, 8014b52 <rcl_take+0xa6>
 8014b20:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8014b24:	f240 1291 	movw	r2, #401	@ 0x191
 8014b28:	2900      	cmp	r1, #0
 8014b2a:	bf08      	it	eq
 8014b2c:	4613      	moveq	r3, r2
 8014b2e:	4618      	mov	r0, r3
 8014b30:	b024      	add	sp, #144	@ 0x90
 8014b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b36:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	b024      	add	sp, #144	@ 0x90
 8014b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b42:	230b      	movs	r3, #11
 8014b44:	e7f3      	b.n	8014b2e <rcl_take+0x82>
 8014b46:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	4770      	bx	lr
 8014b4e:	ad14      	add	r5, sp, #80	@ 0x50
 8014b50:	e7c0      	b.n	8014ad4 <rcl_take+0x28>
 8014b52:	f7ff f99f 	bl	8013e94 <rcl_convert_rmw_ret_to_rcl_ret>
 8014b56:	4603      	mov	r3, r0
 8014b58:	e7e9      	b.n	8014b2e <rcl_take+0x82>
 8014b5a:	bf00      	nop

08014b5c <rcl_subscription_get_rmw_handle>:
 8014b5c:	b118      	cbz	r0, 8014b66 <rcl_subscription_get_rmw_handle+0xa>
 8014b5e:	6800      	ldr	r0, [r0, #0]
 8014b60:	b108      	cbz	r0, 8014b66 <rcl_subscription_get_rmw_handle+0xa>
 8014b62:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014b66:	4770      	bx	lr

08014b68 <rcl_subscription_is_valid>:
 8014b68:	b130      	cbz	r0, 8014b78 <rcl_subscription_is_valid+0x10>
 8014b6a:	6800      	ldr	r0, [r0, #0]
 8014b6c:	b120      	cbz	r0, 8014b78 <rcl_subscription_is_valid+0x10>
 8014b6e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014b72:	3800      	subs	r0, #0
 8014b74:	bf18      	it	ne
 8014b76:	2001      	movne	r0, #1
 8014b78:	4770      	bx	lr
 8014b7a:	bf00      	nop

08014b7c <rcl_get_system_time>:
 8014b7c:	4608      	mov	r0, r1
 8014b7e:	f7f9 b9ab 	b.w	800ded8 <rcutils_system_time_now>
 8014b82:	bf00      	nop

08014b84 <rcl_get_steady_time>:
 8014b84:	4608      	mov	r0, r1
 8014b86:	f7f9 b9cf 	b.w	800df28 <rcutils_steady_time_now>
 8014b8a:	bf00      	nop

08014b8c <rcl_get_ros_time>:
 8014b8c:	7a03      	ldrb	r3, [r0, #8]
 8014b8e:	b510      	push	{r4, lr}
 8014b90:	460c      	mov	r4, r1
 8014b92:	b133      	cbz	r3, 8014ba2 <rcl_get_ros_time+0x16>
 8014b94:	2105      	movs	r1, #5
 8014b96:	f001 ff5f 	bl	8016a58 <__atomic_load_8>
 8014b9a:	e9c4 0100 	strd	r0, r1, [r4]
 8014b9e:	2000      	movs	r0, #0
 8014ba0:	bd10      	pop	{r4, pc}
 8014ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ba6:	4608      	mov	r0, r1
 8014ba8:	f7f9 b996 	b.w	800ded8 <rcutils_system_time_now>

08014bac <rcl_clock_init>:
 8014bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bae:	4605      	mov	r5, r0
 8014bb0:	4610      	mov	r0, r2
 8014bb2:	4614      	mov	r4, r2
 8014bb4:	460e      	mov	r6, r1
 8014bb6:	f7f9 f94d 	bl	800de54 <rcutils_allocator_is_valid>
 8014bba:	b128      	cbz	r0, 8014bc8 <rcl_clock_init+0x1c>
 8014bbc:	2d03      	cmp	r5, #3
 8014bbe:	d803      	bhi.n	8014bc8 <rcl_clock_init+0x1c>
 8014bc0:	e8df f005 	tbb	[pc, r5]
 8014bc4:	06532e1d 	.word	0x06532e1d
 8014bc8:	f04f 0c0b 	mov.w	ip, #11
 8014bcc:	4660      	mov	r0, ip
 8014bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bd0:	2e00      	cmp	r6, #0
 8014bd2:	d0f9      	beq.n	8014bc8 <rcl_clock_init+0x1c>
 8014bd4:	2c00      	cmp	r4, #0
 8014bd6:	d0f7      	beq.n	8014bc8 <rcl_clock_init+0x1c>
 8014bd8:	2300      	movs	r3, #0
 8014bda:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014bde:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8014c94 <rcl_clock_init+0xe8>
 8014be2:	6133      	str	r3, [r6, #16]
 8014be4:	f106 0514 	add.w	r5, r6, #20
 8014be8:	469c      	mov	ip, r3
 8014bea:	2703      	movs	r7, #3
 8014bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014bf0:	6823      	ldr	r3, [r4, #0]
 8014bf2:	602b      	str	r3, [r5, #0]
 8014bf4:	7037      	strb	r7, [r6, #0]
 8014bf6:	f8c6 e00c 	str.w	lr, [r6, #12]
 8014bfa:	4660      	mov	r0, ip
 8014bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bfe:	2e00      	cmp	r6, #0
 8014c00:	d0e2      	beq.n	8014bc8 <rcl_clock_init+0x1c>
 8014c02:	2300      	movs	r3, #0
 8014c04:	7033      	strb	r3, [r6, #0]
 8014c06:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014c0a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014c0e:	469c      	mov	ip, r3
 8014c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c12:	f106 0514 	add.w	r5, r6, #20
 8014c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c18:	6823      	ldr	r3, [r4, #0]
 8014c1a:	602b      	str	r3, [r5, #0]
 8014c1c:	4660      	mov	r0, ip
 8014c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c20:	2e00      	cmp	r6, #0
 8014c22:	d0d1      	beq.n	8014bc8 <rcl_clock_init+0x1c>
 8014c24:	2c00      	cmp	r4, #0
 8014c26:	d0cf      	beq.n	8014bc8 <rcl_clock_init+0x1c>
 8014c28:	2700      	movs	r7, #0
 8014c2a:	7037      	strb	r7, [r6, #0]
 8014c2c:	46a4      	mov	ip, r4
 8014c2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c32:	f106 0514 	add.w	r5, r6, #20
 8014c36:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014c3a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c40:	f8dc 3000 	ldr.w	r3, [ip]
 8014c44:	602b      	str	r3, [r5, #0]
 8014c46:	6921      	ldr	r1, [r4, #16]
 8014c48:	6823      	ldr	r3, [r4, #0]
 8014c4a:	2010      	movs	r0, #16
 8014c4c:	4798      	blx	r3
 8014c4e:	6130      	str	r0, [r6, #16]
 8014c50:	b1d0      	cbz	r0, 8014c88 <rcl_clock_init+0xdc>
 8014c52:	2200      	movs	r2, #0
 8014c54:	2300      	movs	r3, #0
 8014c56:	e9c0 2300 	strd	r2, r3, [r0]
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	7207      	strb	r7, [r0, #8]
 8014c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8014c90 <rcl_clock_init+0xe4>)
 8014c60:	7033      	strb	r3, [r6, #0]
 8014c62:	46bc      	mov	ip, r7
 8014c64:	60f2      	str	r2, [r6, #12]
 8014c66:	4660      	mov	r0, ip
 8014c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c6a:	2e00      	cmp	r6, #0
 8014c6c:	d0ac      	beq.n	8014bc8 <rcl_clock_init+0x1c>
 8014c6e:	2c00      	cmp	r4, #0
 8014c70:	d0aa      	beq.n	8014bc8 <rcl_clock_init+0x1c>
 8014c72:	2300      	movs	r3, #0
 8014c74:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014c78:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8014c98 <rcl_clock_init+0xec>
 8014c7c:	6133      	str	r3, [r6, #16]
 8014c7e:	f106 0514 	add.w	r5, r6, #20
 8014c82:	469c      	mov	ip, r3
 8014c84:	2702      	movs	r7, #2
 8014c86:	e7b1      	b.n	8014bec <rcl_clock_init+0x40>
 8014c88:	f04f 0c0a 	mov.w	ip, #10
 8014c8c:	e79e      	b.n	8014bcc <rcl_clock_init+0x20>
 8014c8e:	bf00      	nop
 8014c90:	08014b8d 	.word	0x08014b8d
 8014c94:	08014b85 	.word	0x08014b85
 8014c98:	08014b7d 	.word	0x08014b7d

08014c9c <rcl_clock_get_now>:
 8014c9c:	b140      	cbz	r0, 8014cb0 <rcl_clock_get_now+0x14>
 8014c9e:	b139      	cbz	r1, 8014cb0 <rcl_clock_get_now+0x14>
 8014ca0:	7803      	ldrb	r3, [r0, #0]
 8014ca2:	b11b      	cbz	r3, 8014cac <rcl_clock_get_now+0x10>
 8014ca4:	68c3      	ldr	r3, [r0, #12]
 8014ca6:	b10b      	cbz	r3, 8014cac <rcl_clock_get_now+0x10>
 8014ca8:	6900      	ldr	r0, [r0, #16]
 8014caa:	4718      	bx	r3
 8014cac:	2001      	movs	r0, #1
 8014cae:	4770      	bx	lr
 8014cb0:	200b      	movs	r0, #11
 8014cb2:	4770      	bx	lr

08014cb4 <rcl_clock_add_jump_callback>:
 8014cb4:	b082      	sub	sp, #8
 8014cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cba:	a906      	add	r1, sp, #24
 8014cbc:	e881 000c 	stmia.w	r1, {r2, r3}
 8014cc0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8014cc4:	b320      	cbz	r0, 8014d10 <rcl_clock_add_jump_callback+0x5c>
 8014cc6:	4604      	mov	r4, r0
 8014cc8:	3014      	adds	r0, #20
 8014cca:	f7f9 f8c3 	bl	800de54 <rcutils_allocator_is_valid>
 8014cce:	b1f8      	cbz	r0, 8014d10 <rcl_clock_add_jump_callback+0x5c>
 8014cd0:	b1f6      	cbz	r6, 8014d10 <rcl_clock_add_jump_callback+0x5c>
 8014cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	db1b      	blt.n	8014d10 <rcl_clock_add_jump_callback+0x5c>
 8014cd8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014cdc:	2a01      	cmp	r2, #1
 8014cde:	f173 0300 	sbcs.w	r3, r3, #0
 8014ce2:	da15      	bge.n	8014d10 <rcl_clock_add_jump_callback+0x5c>
 8014ce4:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014ce8:	2f00      	cmp	r7, #0
 8014cea:	d042      	beq.n	8014d72 <rcl_clock_add_jump_callback+0xbe>
 8014cec:	2300      	movs	r3, #0
 8014cee:	4602      	mov	r2, r0
 8014cf0:	e003      	b.n	8014cfa <rcl_clock_add_jump_callback+0x46>
 8014cf2:	42bb      	cmp	r3, r7
 8014cf4:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8014cf8:	d011      	beq.n	8014d1e <rcl_clock_add_jump_callback+0x6a>
 8014cfa:	6811      	ldr	r1, [r2, #0]
 8014cfc:	42b1      	cmp	r1, r6
 8014cfe:	f103 0301 	add.w	r3, r3, #1
 8014d02:	d1f6      	bne.n	8014cf2 <rcl_clock_add_jump_callback+0x3e>
 8014d04:	6a11      	ldr	r1, [r2, #32]
 8014d06:	42a9      	cmp	r1, r5
 8014d08:	d1f3      	bne.n	8014cf2 <rcl_clock_add_jump_callback+0x3e>
 8014d0a:	f04f 0e01 	mov.w	lr, #1
 8014d0e:	e001      	b.n	8014d14 <rcl_clock_add_jump_callback+0x60>
 8014d10:	f04f 0e0b 	mov.w	lr, #11
 8014d14:	4670      	mov	r0, lr
 8014d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d1a:	b002      	add	sp, #8
 8014d1c:	4770      	bx	lr
 8014d1e:	3301      	adds	r3, #1
 8014d20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014d24:	00d9      	lsls	r1, r3, #3
 8014d26:	69e3      	ldr	r3, [r4, #28]
 8014d28:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014d2a:	4798      	blx	r3
 8014d2c:	b1f0      	cbz	r0, 8014d6c <rcl_clock_add_jump_callback+0xb8>
 8014d2e:	68a3      	ldr	r3, [r4, #8]
 8014d30:	6060      	str	r0, [r4, #4]
 8014d32:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014d36:	f10d 0c18 	add.w	ip, sp, #24
 8014d3a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8014d3e:	f103 0801 	add.w	r8, r3, #1
 8014d42:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8014d46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d4a:	f106 0708 	add.w	r7, r6, #8
 8014d4e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014d50:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014d54:	f04f 0e00 	mov.w	lr, #0
 8014d58:	e887 0003 	stmia.w	r7, {r0, r1}
 8014d5c:	6235      	str	r5, [r6, #32]
 8014d5e:	4670      	mov	r0, lr
 8014d60:	f8c4 8008 	str.w	r8, [r4, #8]
 8014d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d68:	b002      	add	sp, #8
 8014d6a:	4770      	bx	lr
 8014d6c:	f04f 0e0a 	mov.w	lr, #10
 8014d70:	e7d0      	b.n	8014d14 <rcl_clock_add_jump_callback+0x60>
 8014d72:	2128      	movs	r1, #40	@ 0x28
 8014d74:	e7d7      	b.n	8014d26 <rcl_clock_add_jump_callback+0x72>
 8014d76:	bf00      	nop

08014d78 <rcl_clock_remove_jump_callback>:
 8014d78:	2800      	cmp	r0, #0
 8014d7a:	d057      	beq.n	8014e2c <rcl_clock_remove_jump_callback+0xb4>
 8014d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d80:	4605      	mov	r5, r0
 8014d82:	3014      	adds	r0, #20
 8014d84:	4688      	mov	r8, r1
 8014d86:	4692      	mov	sl, r2
 8014d88:	f7f9 f864 	bl	800de54 <rcutils_allocator_is_valid>
 8014d8c:	2800      	cmp	r0, #0
 8014d8e:	d03b      	beq.n	8014e08 <rcl_clock_remove_jump_callback+0x90>
 8014d90:	f1b8 0f00 	cmp.w	r8, #0
 8014d94:	d038      	beq.n	8014e08 <rcl_clock_remove_jump_callback+0x90>
 8014d96:	68ae      	ldr	r6, [r5, #8]
 8014d98:	b166      	cbz	r6, 8014db4 <rcl_clock_remove_jump_callback+0x3c>
 8014d9a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014d9e:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8014da2:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8014da6:	464c      	mov	r4, r9
 8014da8:	6823      	ldr	r3, [r4, #0]
 8014daa:	4543      	cmp	r3, r8
 8014dac:	d005      	beq.n	8014dba <rcl_clock_remove_jump_callback+0x42>
 8014dae:	3428      	adds	r4, #40	@ 0x28
 8014db0:	42a7      	cmp	r7, r4
 8014db2:	d1f9      	bne.n	8014da8 <rcl_clock_remove_jump_callback+0x30>
 8014db4:	2001      	movs	r0, #1
 8014db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dba:	6a23      	ldr	r3, [r4, #32]
 8014dbc:	3428      	adds	r4, #40	@ 0x28
 8014dbe:	42bc      	cmp	r4, r7
 8014dc0:	d02d      	beq.n	8014e1e <rcl_clock_remove_jump_callback+0xa6>
 8014dc2:	4553      	cmp	r3, sl
 8014dc4:	d1f0      	bne.n	8014da8 <rcl_clock_remove_jump_callback+0x30>
 8014dc6:	46a6      	mov	lr, r4
 8014dc8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014dcc:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014dd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014dd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014dd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ddc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014de0:	3428      	adds	r4, #40	@ 0x28
 8014de2:	42a7      	cmp	r7, r4
 8014de4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014de8:	d1ed      	bne.n	8014dc6 <rcl_clock_remove_jump_callback+0x4e>
 8014dea:	3e01      	subs	r6, #1
 8014dec:	60ae      	str	r6, [r5, #8]
 8014dee:	b176      	cbz	r6, 8014e0e <rcl_clock_remove_jump_callback+0x96>
 8014df0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8014df4:	69eb      	ldr	r3, [r5, #28]
 8014df6:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014df8:	00f1      	lsls	r1, r6, #3
 8014dfa:	4648      	mov	r0, r9
 8014dfc:	4798      	blx	r3
 8014dfe:	b1b8      	cbz	r0, 8014e30 <rcl_clock_remove_jump_callback+0xb8>
 8014e00:	6068      	str	r0, [r5, #4]
 8014e02:	2000      	movs	r0, #0
 8014e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e08:	200b      	movs	r0, #11
 8014e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e0e:	4648      	mov	r0, r9
 8014e10:	69ab      	ldr	r3, [r5, #24]
 8014e12:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8014e14:	4798      	blx	r3
 8014e16:	606e      	str	r6, [r5, #4]
 8014e18:	4630      	mov	r0, r6
 8014e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e1e:	4553      	cmp	r3, sl
 8014e20:	d1c8      	bne.n	8014db4 <rcl_clock_remove_jump_callback+0x3c>
 8014e22:	3e01      	subs	r6, #1
 8014e24:	60ae      	str	r6, [r5, #8]
 8014e26:	2e00      	cmp	r6, #0
 8014e28:	d1e2      	bne.n	8014df0 <rcl_clock_remove_jump_callback+0x78>
 8014e2a:	e7f0      	b.n	8014e0e <rcl_clock_remove_jump_callback+0x96>
 8014e2c:	200b      	movs	r0, #11
 8014e2e:	4770      	bx	lr
 8014e30:	200a      	movs	r0, #10
 8014e32:	e7ea      	b.n	8014e0a <rcl_clock_remove_jump_callback+0x92>

08014e34 <_rcl_timer_time_jump>:
 8014e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e38:	4605      	mov	r5, r0
 8014e3a:	b084      	sub	sp, #16
 8014e3c:	4614      	mov	r4, r2
 8014e3e:	b131      	cbz	r1, 8014e4e <_rcl_timer_time_jump+0x1a>
 8014e40:	7803      	ldrb	r3, [r0, #0]
 8014e42:	3b02      	subs	r3, #2
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	d93f      	bls.n	8014ec8 <_rcl_timer_time_jump+0x94>
 8014e48:	b004      	add	sp, #16
 8014e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e4e:	6813      	ldr	r3, [r2, #0]
 8014e50:	a902      	add	r1, sp, #8
 8014e52:	6818      	ldr	r0, [r3, #0]
 8014e54:	f7ff ff22 	bl	8014c9c <rcl_clock_get_now>
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	d1f5      	bne.n	8014e48 <_rcl_timer_time_jump+0x14>
 8014e5c:	6820      	ldr	r0, [r4, #0]
 8014e5e:	2105      	movs	r1, #5
 8014e60:	3020      	adds	r0, #32
 8014e62:	f001 fdf9 	bl	8016a58 <__atomic_load_8>
 8014e66:	6823      	ldr	r3, [r4, #0]
 8014e68:	4681      	mov	r9, r0
 8014e6a:	4688      	mov	r8, r1
 8014e6c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8014e70:	2105      	movs	r1, #5
 8014e72:	f001 fdf1 	bl	8016a58 <__atomic_load_8>
 8014e76:	4607      	mov	r7, r0
 8014e78:	6820      	ldr	r0, [r4, #0]
 8014e7a:	460e      	mov	r6, r1
 8014e7c:	3018      	adds	r0, #24
 8014e7e:	2105      	movs	r1, #5
 8014e80:	f001 fdea 	bl	8016a58 <__atomic_load_8>
 8014e84:	782b      	ldrb	r3, [r5, #0]
 8014e86:	9a02      	ldr	r2, [sp, #8]
 8014e88:	3b02      	subs	r3, #2
 8014e8a:	2b01      	cmp	r3, #1
 8014e8c:	460d      	mov	r5, r1
 8014e8e:	9b03      	ldr	r3, [sp, #12]
 8014e90:	4682      	mov	sl, r0
 8014e92:	d937      	bls.n	8014f04 <_rcl_timer_time_jump+0xd0>
 8014e94:	42ba      	cmp	r2, r7
 8014e96:	eb73 0106 	sbcs.w	r1, r3, r6
 8014e9a:	da5f      	bge.n	8014f5c <_rcl_timer_time_jump+0x128>
 8014e9c:	454a      	cmp	r2, r9
 8014e9e:	eb73 0108 	sbcs.w	r1, r3, r8
 8014ea2:	dad1      	bge.n	8014e48 <_rcl_timer_time_jump+0x14>
 8014ea4:	6820      	ldr	r0, [r4, #0]
 8014ea6:	eb1a 0202 	adds.w	r2, sl, r2
 8014eaa:	eb43 0305 	adc.w	r3, r3, r5
 8014eae:	2505      	movs	r5, #5
 8014eb0:	3028      	adds	r0, #40	@ 0x28
 8014eb2:	9500      	str	r5, [sp, #0]
 8014eb4:	f001 fe06 	bl	8016ac4 <__atomic_store_8>
 8014eb8:	6820      	ldr	r0, [r4, #0]
 8014eba:	9500      	str	r5, [sp, #0]
 8014ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014ec0:	3020      	adds	r0, #32
 8014ec2:	f001 fdff 	bl	8016ac4 <__atomic_store_8>
 8014ec6:	e7bf      	b.n	8014e48 <_rcl_timer_time_jump+0x14>
 8014ec8:	6813      	ldr	r3, [r2, #0]
 8014eca:	a902      	add	r1, sp, #8
 8014ecc:	6818      	ldr	r0, [r3, #0]
 8014ece:	f7ff fee5 	bl	8014c9c <rcl_clock_get_now>
 8014ed2:	2800      	cmp	r0, #0
 8014ed4:	d1b8      	bne.n	8014e48 <_rcl_timer_time_jump+0x14>
 8014ed6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014eda:	4313      	orrs	r3, r2
 8014edc:	d0b4      	beq.n	8014e48 <_rcl_timer_time_jump+0x14>
 8014ede:	6820      	ldr	r0, [r4, #0]
 8014ee0:	2105      	movs	r1, #5
 8014ee2:	3028      	adds	r0, #40	@ 0x28
 8014ee4:	f001 fdb8 	bl	8016a58 <__atomic_load_8>
 8014ee8:	9d02      	ldr	r5, [sp, #8]
 8014eea:	9b03      	ldr	r3, [sp, #12]
 8014eec:	4602      	mov	r2, r0
 8014eee:	6820      	ldr	r0, [r4, #0]
 8014ef0:	1b52      	subs	r2, r2, r5
 8014ef2:	f04f 0405 	mov.w	r4, #5
 8014ef6:	9400      	str	r4, [sp, #0]
 8014ef8:	eb61 0303 	sbc.w	r3, r1, r3
 8014efc:	3030      	adds	r0, #48	@ 0x30
 8014efe:	f001 fde1 	bl	8016ac4 <__atomic_store_8>
 8014f02:	e7a1      	b.n	8014e48 <_rcl_timer_time_jump+0x14>
 8014f04:	4313      	orrs	r3, r2
 8014f06:	d09f      	beq.n	8014e48 <_rcl_timer_time_jump+0x14>
 8014f08:	6820      	ldr	r0, [r4, #0]
 8014f0a:	f04f 0805 	mov.w	r8, #5
 8014f0e:	2300      	movs	r3, #0
 8014f10:	f8cd 8000 	str.w	r8, [sp]
 8014f14:	3030      	adds	r0, #48	@ 0x30
 8014f16:	2200      	movs	r2, #0
 8014f18:	f001 fe0a 	bl	8016b30 <__atomic_exchange_8>
 8014f1c:	ea51 0300 	orrs.w	r3, r1, r0
 8014f20:	4606      	mov	r6, r0
 8014f22:	460f      	mov	r7, r1
 8014f24:	d090      	beq.n	8014e48 <_rcl_timer_time_jump+0x14>
 8014f26:	9a02      	ldr	r2, [sp, #8]
 8014f28:	9b03      	ldr	r3, [sp, #12]
 8014f2a:	f8cd 8000 	str.w	r8, [sp]
 8014f2e:	1a12      	subs	r2, r2, r0
 8014f30:	6820      	ldr	r0, [r4, #0]
 8014f32:	eb63 0301 	sbc.w	r3, r3, r1
 8014f36:	eb12 020a 	adds.w	r2, r2, sl
 8014f3a:	eb43 0305 	adc.w	r3, r3, r5
 8014f3e:	3028      	adds	r0, #40	@ 0x28
 8014f40:	f001 fdc0 	bl	8016ac4 <__atomic_store_8>
 8014f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014f48:	f8cd 8000 	str.w	r8, [sp]
 8014f4c:	6820      	ldr	r0, [r4, #0]
 8014f4e:	1b92      	subs	r2, r2, r6
 8014f50:	eb63 0307 	sbc.w	r3, r3, r7
 8014f54:	3020      	adds	r0, #32
 8014f56:	f001 fdb5 	bl	8016ac4 <__atomic_store_8>
 8014f5a:	e775      	b.n	8014e48 <_rcl_timer_time_jump+0x14>
 8014f5c:	6820      	ldr	r0, [r4, #0]
 8014f5e:	3008      	adds	r0, #8
 8014f60:	f004 f890 	bl	8019084 <rcl_trigger_guard_condition>
 8014f64:	e770      	b.n	8014e48 <_rcl_timer_time_jump+0x14>
 8014f66:	bf00      	nop

08014f68 <rcl_get_zero_initialized_timer>:
 8014f68:	4b01      	ldr	r3, [pc, #4]	@ (8014f70 <rcl_get_zero_initialized_timer+0x8>)
 8014f6a:	6818      	ldr	r0, [r3, #0]
 8014f6c:	4770      	bx	lr
 8014f6e:	bf00      	nop
 8014f70:	0801c4b0 	.word	0x0801c4b0
 8014f74:	00000000 	.word	0x00000000

08014f78 <rcl_timer_init>:
 8014f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f7c:	b0aa      	sub	sp, #168	@ 0xa8
 8014f7e:	4604      	mov	r4, r0
 8014f80:	a835      	add	r0, sp, #212	@ 0xd4
 8014f82:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8014f86:	460d      	mov	r5, r1
 8014f88:	4692      	mov	sl, r2
 8014f8a:	f7f8 ff63 	bl	800de54 <rcutils_allocator_is_valid>
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	d064      	beq.n	801505c <rcl_timer_init+0xe4>
 8014f92:	2c00      	cmp	r4, #0
 8014f94:	d062      	beq.n	801505c <rcl_timer_init+0xe4>
 8014f96:	2d00      	cmp	r5, #0
 8014f98:	d060      	beq.n	801505c <rcl_timer_init+0xe4>
 8014f9a:	2f00      	cmp	r7, #0
 8014f9c:	db5e      	blt.n	801505c <rcl_timer_init+0xe4>
 8014f9e:	6823      	ldr	r3, [r4, #0]
 8014fa0:	b123      	cbz	r3, 8014fac <rcl_timer_init+0x34>
 8014fa2:	2664      	movs	r6, #100	@ 0x64
 8014fa4:	4630      	mov	r0, r6
 8014fa6:	b02a      	add	sp, #168	@ 0xa8
 8014fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fac:	a908      	add	r1, sp, #32
 8014fae:	4628      	mov	r0, r5
 8014fb0:	f7ff fe74 	bl	8014c9c <rcl_clock_get_now>
 8014fb4:	4606      	mov	r6, r0
 8014fb6:	2800      	cmp	r0, #0
 8014fb8:	d1f4      	bne.n	8014fa4 <rcl_timer_init+0x2c>
 8014fba:	ae06      	add	r6, sp, #24
 8014fbc:	4630      	mov	r0, r6
 8014fbe:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8014fc2:	f003 ff67 	bl	8018e94 <rcl_get_zero_initialized_guard_condition>
 8014fc6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014fca:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8014fce:	ae0b      	add	r6, sp, #44	@ 0x2c
 8014fd0:	e889 0003 	stmia.w	r9, {r0, r1}
 8014fd4:	4630      	mov	r0, r6
 8014fd6:	f004 f839 	bl	801904c <rcl_guard_condition_get_default_options>
 8014fda:	ab0d      	add	r3, sp, #52	@ 0x34
 8014fdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014fe0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014fe4:	4651      	mov	r1, sl
 8014fe6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014fea:	4648      	mov	r0, r9
 8014fec:	f003 ff5c 	bl	8018ea8 <rcl_guard_condition_init>
 8014ff0:	4606      	mov	r6, r0
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	d1d6      	bne.n	8014fa4 <rcl_timer_init+0x2c>
 8014ff6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014ff8:	781b      	ldrb	r3, [r3, #0]
 8014ffa:	2b01      	cmp	r3, #1
 8014ffc:	d033      	beq.n	8015066 <rcl_timer_init+0xee>
 8014ffe:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8015000:	911a      	str	r1, [sp, #104]	@ 0x68
 8015002:	4642      	mov	r2, r8
 8015004:	463b      	mov	r3, r7
 8015006:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801500a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801500e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80150c0 <rcl_timer_init+0x148>
 8015012:	eb12 0008 	adds.w	r0, r2, r8
 8015016:	eb47 0103 	adc.w	r1, r7, r3
 801501a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 801501e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8015022:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8015026:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801502a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801502e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8015032:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015036:	f8de 3000 	ldr.w	r3, [lr]
 801503a:	f8cc 3000 	str.w	r3, [ip]
 801503e:	f04f 0a00 	mov.w	sl, #0
 8015042:	4619      	mov	r1, r3
 8015044:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8015048:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801504a:	2050      	movs	r0, #80	@ 0x50
 801504c:	4798      	blx	r3
 801504e:	6020      	str	r0, [r4, #0]
 8015050:	b358      	cbz	r0, 80150aa <rcl_timer_init+0x132>
 8015052:	2250      	movs	r2, #80	@ 0x50
 8015054:	a916      	add	r1, sp, #88	@ 0x58
 8015056:	f004 ff46 	bl	8019ee6 <memcpy>
 801505a:	e7a3      	b.n	8014fa4 <rcl_timer_init+0x2c>
 801505c:	260b      	movs	r6, #11
 801505e:	4630      	mov	r0, r6
 8015060:	b02a      	add	sp, #168	@ 0xa8
 8015062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015066:	2001      	movs	r0, #1
 8015068:	2100      	movs	r1, #0
 801506a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801506e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015072:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8015076:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801507a:	4a13      	ldr	r2, [pc, #76]	@ (80150c8 <rcl_timer_init+0x150>)
 801507c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8015080:	9405      	str	r4, [sp, #20]
 8015082:	9204      	str	r2, [sp, #16]
 8015084:	ab12      	add	r3, sp, #72	@ 0x48
 8015086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015088:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801508c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015090:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8015094:	4628      	mov	r0, r5
 8015096:	f7ff fe0d 	bl	8014cb4 <rcl_clock_add_jump_callback>
 801509a:	4682      	mov	sl, r0
 801509c:	2800      	cmp	r0, #0
 801509e:	d0ae      	beq.n	8014ffe <rcl_timer_init+0x86>
 80150a0:	4648      	mov	r0, r9
 80150a2:	f003 ffad 	bl	8019000 <rcl_guard_condition_fini>
 80150a6:	4656      	mov	r6, sl
 80150a8:	e77c      	b.n	8014fa4 <rcl_timer_init+0x2c>
 80150aa:	4648      	mov	r0, r9
 80150ac:	f003 ffa8 	bl	8019000 <rcl_guard_condition_fini>
 80150b0:	4905      	ldr	r1, [pc, #20]	@ (80150c8 <rcl_timer_init+0x150>)
 80150b2:	4622      	mov	r2, r4
 80150b4:	4628      	mov	r0, r5
 80150b6:	f7ff fe5f 	bl	8014d78 <rcl_clock_remove_jump_callback>
 80150ba:	260a      	movs	r6, #10
 80150bc:	e772      	b.n	8014fa4 <rcl_timer_init+0x2c>
 80150be:	bf00      	nop
	...
 80150c8:	08014e35 	.word	0x08014e35

080150cc <rcl_timer_call>:
 80150cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d0:	b087      	sub	sp, #28
 80150d2:	2800      	cmp	r0, #0
 80150d4:	d06d      	beq.n	80151b2 <rcl_timer_call+0xe6>
 80150d6:	6803      	ldr	r3, [r0, #0]
 80150d8:	4604      	mov	r4, r0
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d063      	beq.n	80151a6 <rcl_timer_call+0xda>
 80150de:	f3bf 8f5b 	dmb	ish
 80150e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80150e6:	f3bf 8f5b 	dmb	ish
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d150      	bne.n	8015190 <rcl_timer_call+0xc4>
 80150ee:	6803      	ldr	r3, [r0, #0]
 80150f0:	a904      	add	r1, sp, #16
 80150f2:	6818      	ldr	r0, [r3, #0]
 80150f4:	f7ff fdd2 	bl	8014c9c <rcl_clock_get_now>
 80150f8:	4605      	mov	r5, r0
 80150fa:	2800      	cmp	r0, #0
 80150fc:	d14a      	bne.n	8015194 <rcl_timer_call+0xc8>
 80150fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015102:	2b00      	cmp	r3, #0
 8015104:	db4a      	blt.n	801519c <rcl_timer_call+0xd0>
 8015106:	6820      	ldr	r0, [r4, #0]
 8015108:	f04f 0a05 	mov.w	sl, #5
 801510c:	f8cd a000 	str.w	sl, [sp]
 8015110:	3020      	adds	r0, #32
 8015112:	f001 fd0d 	bl	8016b30 <__atomic_exchange_8>
 8015116:	6823      	ldr	r3, [r4, #0]
 8015118:	f3bf 8f5b 	dmb	ish
 801511c:	4680      	mov	r8, r0
 801511e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8015122:	f3bf 8f5b 	dmb	ish
 8015126:	6820      	ldr	r0, [r4, #0]
 8015128:	4689      	mov	r9, r1
 801512a:	3028      	adds	r0, #40	@ 0x28
 801512c:	4651      	mov	r1, sl
 801512e:	f001 fc93 	bl	8016a58 <__atomic_load_8>
 8015132:	4606      	mov	r6, r0
 8015134:	6820      	ldr	r0, [r4, #0]
 8015136:	460f      	mov	r7, r1
 8015138:	3018      	adds	r0, #24
 801513a:	4651      	mov	r1, sl
 801513c:	f001 fc8c 	bl	8016a58 <__atomic_load_8>
 8015140:	1836      	adds	r6, r6, r0
 8015142:	4602      	mov	r2, r0
 8015144:	4682      	mov	sl, r0
 8015146:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801514a:	eb47 0701 	adc.w	r7, r7, r1
 801514e:	4286      	cmp	r6, r0
 8015150:	460b      	mov	r3, r1
 8015152:	eb77 010c 	sbcs.w	r1, r7, ip
 8015156:	da04      	bge.n	8015162 <rcl_timer_call+0x96>
 8015158:	ea53 0102 	orrs.w	r1, r3, r2
 801515c:	d12e      	bne.n	80151bc <rcl_timer_call+0xf0>
 801515e:	4606      	mov	r6, r0
 8015160:	4667      	mov	r7, ip
 8015162:	6820      	ldr	r0, [r4, #0]
 8015164:	2105      	movs	r1, #5
 8015166:	4632      	mov	r2, r6
 8015168:	463b      	mov	r3, r7
 801516a:	3028      	adds	r0, #40	@ 0x28
 801516c:	9100      	str	r1, [sp, #0]
 801516e:	f001 fca9 	bl	8016ac4 <__atomic_store_8>
 8015172:	f1bb 0f00 	cmp.w	fp, #0
 8015176:	d00d      	beq.n	8015194 <rcl_timer_call+0xc8>
 8015178:	9a04      	ldr	r2, [sp, #16]
 801517a:	9b05      	ldr	r3, [sp, #20]
 801517c:	ebb2 0208 	subs.w	r2, r2, r8
 8015180:	4620      	mov	r0, r4
 8015182:	eb63 0309 	sbc.w	r3, r3, r9
 8015186:	47d8      	blx	fp
 8015188:	4628      	mov	r0, r5
 801518a:	b007      	add	sp, #28
 801518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015190:	f240 3521 	movw	r5, #801	@ 0x321
 8015194:	4628      	mov	r0, r5
 8015196:	b007      	add	sp, #28
 8015198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801519c:	2501      	movs	r5, #1
 801519e:	4628      	mov	r0, r5
 80151a0:	b007      	add	sp, #28
 80151a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151a6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80151aa:	4628      	mov	r0, r5
 80151ac:	b007      	add	sp, #28
 80151ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151b2:	250b      	movs	r5, #11
 80151b4:	4628      	mov	r0, r5
 80151b6:	b007      	add	sp, #28
 80151b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151bc:	1b80      	subs	r0, r0, r6
 80151be:	eb6c 0107 	sbc.w	r1, ip, r7
 80151c2:	3801      	subs	r0, #1
 80151c4:	f161 0100 	sbc.w	r1, r1, #0
 80151c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80151cc:	f7eb fcfc 	bl	8000bc8 <__aeabi_ldivmod>
 80151d0:	9b02      	ldr	r3, [sp, #8]
 80151d2:	3001      	adds	r0, #1
 80151d4:	f141 0100 	adc.w	r1, r1, #0
 80151d8:	fb00 f303 	mul.w	r3, r0, r3
 80151dc:	fb01 330a 	mla	r3, r1, sl, r3
 80151e0:	fba0 0a0a 	umull	r0, sl, r0, sl
 80151e4:	1986      	adds	r6, r0, r6
 80151e6:	4453      	add	r3, sl
 80151e8:	eb43 0707 	adc.w	r7, r3, r7
 80151ec:	e7b9      	b.n	8015162 <rcl_timer_call+0x96>
 80151ee:	bf00      	nop

080151f0 <rcl_timer_is_ready>:
 80151f0:	b570      	push	{r4, r5, r6, lr}
 80151f2:	b082      	sub	sp, #8
 80151f4:	b378      	cbz	r0, 8015256 <rcl_timer_is_ready+0x66>
 80151f6:	6803      	ldr	r3, [r0, #0]
 80151f8:	4604      	mov	r4, r0
 80151fa:	b383      	cbz	r3, 801525e <rcl_timer_is_ready+0x6e>
 80151fc:	460d      	mov	r5, r1
 80151fe:	b351      	cbz	r1, 8015256 <rcl_timer_is_ready+0x66>
 8015200:	f3bf 8f5b 	dmb	ish
 8015204:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015208:	f3bf 8f5b 	dmb	ish
 801520c:	b953      	cbnz	r3, 8015224 <rcl_timer_is_ready+0x34>
 801520e:	6803      	ldr	r3, [r0, #0]
 8015210:	4669      	mov	r1, sp
 8015212:	6818      	ldr	r0, [r3, #0]
 8015214:	f7ff fd42 	bl	8014c9c <rcl_clock_get_now>
 8015218:	4606      	mov	r6, r0
 801521a:	b140      	cbz	r0, 801522e <rcl_timer_is_ready+0x3e>
 801521c:	f240 3321 	movw	r3, #801	@ 0x321
 8015220:	4298      	cmp	r0, r3
 8015222:	d101      	bne.n	8015228 <rcl_timer_is_ready+0x38>
 8015224:	2600      	movs	r6, #0
 8015226:	702e      	strb	r6, [r5, #0]
 8015228:	4630      	mov	r0, r6
 801522a:	b002      	add	sp, #8
 801522c:	bd70      	pop	{r4, r5, r6, pc}
 801522e:	6820      	ldr	r0, [r4, #0]
 8015230:	2105      	movs	r1, #5
 8015232:	3028      	adds	r0, #40	@ 0x28
 8015234:	f001 fc10 	bl	8016a58 <__atomic_load_8>
 8015238:	9b00      	ldr	r3, [sp, #0]
 801523a:	1ac0      	subs	r0, r0, r3
 801523c:	9b01      	ldr	r3, [sp, #4]
 801523e:	eb61 0103 	sbc.w	r1, r1, r3
 8015242:	2801      	cmp	r0, #1
 8015244:	f171 0300 	sbcs.w	r3, r1, #0
 8015248:	bfb4      	ite	lt
 801524a:	2301      	movlt	r3, #1
 801524c:	2300      	movge	r3, #0
 801524e:	4630      	mov	r0, r6
 8015250:	702b      	strb	r3, [r5, #0]
 8015252:	b002      	add	sp, #8
 8015254:	bd70      	pop	{r4, r5, r6, pc}
 8015256:	260b      	movs	r6, #11
 8015258:	4630      	mov	r0, r6
 801525a:	b002      	add	sp, #8
 801525c:	bd70      	pop	{r4, r5, r6, pc}
 801525e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8015262:	e7e1      	b.n	8015228 <rcl_timer_is_ready+0x38>

08015264 <rcl_timer_get_time_until_next_call>:
 8015264:	b570      	push	{r4, r5, r6, lr}
 8015266:	b082      	sub	sp, #8
 8015268:	b330      	cbz	r0, 80152b8 <rcl_timer_get_time_until_next_call+0x54>
 801526a:	6803      	ldr	r3, [r0, #0]
 801526c:	4604      	mov	r4, r0
 801526e:	b33b      	cbz	r3, 80152c0 <rcl_timer_get_time_until_next_call+0x5c>
 8015270:	460d      	mov	r5, r1
 8015272:	b309      	cbz	r1, 80152b8 <rcl_timer_get_time_until_next_call+0x54>
 8015274:	f3bf 8f5b 	dmb	ish
 8015278:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801527c:	f3bf 8f5b 	dmb	ish
 8015280:	b9ab      	cbnz	r3, 80152ae <rcl_timer_get_time_until_next_call+0x4a>
 8015282:	6803      	ldr	r3, [r0, #0]
 8015284:	4669      	mov	r1, sp
 8015286:	6818      	ldr	r0, [r3, #0]
 8015288:	f7ff fd08 	bl	8014c9c <rcl_clock_get_now>
 801528c:	4606      	mov	r6, r0
 801528e:	b958      	cbnz	r0, 80152a8 <rcl_timer_get_time_until_next_call+0x44>
 8015290:	6820      	ldr	r0, [r4, #0]
 8015292:	2105      	movs	r1, #5
 8015294:	3028      	adds	r0, #40	@ 0x28
 8015296:	f001 fbdf 	bl	8016a58 <__atomic_load_8>
 801529a:	9b00      	ldr	r3, [sp, #0]
 801529c:	1ac0      	subs	r0, r0, r3
 801529e:	9b01      	ldr	r3, [sp, #4]
 80152a0:	6028      	str	r0, [r5, #0]
 80152a2:	eb61 0103 	sbc.w	r1, r1, r3
 80152a6:	6069      	str	r1, [r5, #4]
 80152a8:	4630      	mov	r0, r6
 80152aa:	b002      	add	sp, #8
 80152ac:	bd70      	pop	{r4, r5, r6, pc}
 80152ae:	f240 3621 	movw	r6, #801	@ 0x321
 80152b2:	4630      	mov	r0, r6
 80152b4:	b002      	add	sp, #8
 80152b6:	bd70      	pop	{r4, r5, r6, pc}
 80152b8:	260b      	movs	r6, #11
 80152ba:	4630      	mov	r0, r6
 80152bc:	b002      	add	sp, #8
 80152be:	bd70      	pop	{r4, r5, r6, pc}
 80152c0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80152c4:	e7f0      	b.n	80152a8 <rcl_timer_get_time_until_next_call+0x44>
 80152c6:	bf00      	nop

080152c8 <rcl_timer_get_guard_condition>:
 80152c8:	b130      	cbz	r0, 80152d8 <rcl_timer_get_guard_condition+0x10>
 80152ca:	6800      	ldr	r0, [r0, #0]
 80152cc:	b120      	cbz	r0, 80152d8 <rcl_timer_get_guard_condition+0x10>
 80152ce:	68c3      	ldr	r3, [r0, #12]
 80152d0:	b10b      	cbz	r3, 80152d6 <rcl_timer_get_guard_condition+0xe>
 80152d2:	3008      	adds	r0, #8
 80152d4:	4770      	bx	lr
 80152d6:	4618      	mov	r0, r3
 80152d8:	4770      	bx	lr
 80152da:	bf00      	nop

080152dc <rcl_validate_enclave_name_with_size>:
 80152dc:	b378      	cbz	r0, 801533e <rcl_validate_enclave_name_with_size+0x62>
 80152de:	b570      	push	{r4, r5, r6, lr}
 80152e0:	4615      	mov	r5, r2
 80152e2:	b0c2      	sub	sp, #264	@ 0x108
 80152e4:	b302      	cbz	r2, 8015328 <rcl_validate_enclave_name_with_size+0x4c>
 80152e6:	461e      	mov	r6, r3
 80152e8:	466a      	mov	r2, sp
 80152ea:	ab01      	add	r3, sp, #4
 80152ec:	460c      	mov	r4, r1
 80152ee:	f002 f815 	bl	801731c <rmw_validate_namespace_with_size>
 80152f2:	4684      	mov	ip, r0
 80152f4:	b9e8      	cbnz	r0, 8015332 <rcl_validate_enclave_name_with_size+0x56>
 80152f6:	9b00      	ldr	r3, [sp, #0]
 80152f8:	b923      	cbnz	r3, 8015304 <rcl_validate_enclave_name_with_size+0x28>
 80152fa:	2300      	movs	r3, #0
 80152fc:	602b      	str	r3, [r5, #0]
 80152fe:	4660      	mov	r0, ip
 8015300:	b042      	add	sp, #264	@ 0x108
 8015302:	bd70      	pop	{r4, r5, r6, pc}
 8015304:	2b07      	cmp	r3, #7
 8015306:	d007      	beq.n	8015318 <rcl_validate_enclave_name_with_size+0x3c>
 8015308:	1e5a      	subs	r2, r3, #1
 801530a:	2a05      	cmp	r2, #5
 801530c:	d833      	bhi.n	8015376 <rcl_validate_enclave_name_with_size+0x9a>
 801530e:	e8df f002 	tbb	[pc, r2]
 8015312:	2c2f      	.short	0x2c2f
 8015314:	1a232629 	.word	0x1a232629
 8015318:	2cff      	cmp	r4, #255	@ 0xff
 801531a:	d9ee      	bls.n	80152fa <rcl_validate_enclave_name_with_size+0x1e>
 801531c:	602b      	str	r3, [r5, #0]
 801531e:	2e00      	cmp	r6, #0
 8015320:	d0ed      	beq.n	80152fe <rcl_validate_enclave_name_with_size+0x22>
 8015322:	23fe      	movs	r3, #254	@ 0xfe
 8015324:	6033      	str	r3, [r6, #0]
 8015326:	e7ea      	b.n	80152fe <rcl_validate_enclave_name_with_size+0x22>
 8015328:	f04f 0c0b 	mov.w	ip, #11
 801532c:	4660      	mov	r0, ip
 801532e:	b042      	add	sp, #264	@ 0x108
 8015330:	bd70      	pop	{r4, r5, r6, pc}
 8015332:	f7fe fdaf 	bl	8013e94 <rcl_convert_rmw_ret_to_rcl_ret>
 8015336:	4684      	mov	ip, r0
 8015338:	4660      	mov	r0, ip
 801533a:	b042      	add	sp, #264	@ 0x108
 801533c:	bd70      	pop	{r4, r5, r6, pc}
 801533e:	f04f 0c0b 	mov.w	ip, #11
 8015342:	4660      	mov	r0, ip
 8015344:	4770      	bx	lr
 8015346:	2306      	movs	r3, #6
 8015348:	602b      	str	r3, [r5, #0]
 801534a:	2e00      	cmp	r6, #0
 801534c:	d0d7      	beq.n	80152fe <rcl_validate_enclave_name_with_size+0x22>
 801534e:	9b01      	ldr	r3, [sp, #4]
 8015350:	6033      	str	r3, [r6, #0]
 8015352:	4660      	mov	r0, ip
 8015354:	b042      	add	sp, #264	@ 0x108
 8015356:	bd70      	pop	{r4, r5, r6, pc}
 8015358:	2305      	movs	r3, #5
 801535a:	602b      	str	r3, [r5, #0]
 801535c:	e7f5      	b.n	801534a <rcl_validate_enclave_name_with_size+0x6e>
 801535e:	2304      	movs	r3, #4
 8015360:	602b      	str	r3, [r5, #0]
 8015362:	e7f2      	b.n	801534a <rcl_validate_enclave_name_with_size+0x6e>
 8015364:	2303      	movs	r3, #3
 8015366:	602b      	str	r3, [r5, #0]
 8015368:	e7ef      	b.n	801534a <rcl_validate_enclave_name_with_size+0x6e>
 801536a:	2302      	movs	r3, #2
 801536c:	602b      	str	r3, [r5, #0]
 801536e:	e7ec      	b.n	801534a <rcl_validate_enclave_name_with_size+0x6e>
 8015370:	2301      	movs	r3, #1
 8015372:	602b      	str	r3, [r5, #0]
 8015374:	e7e9      	b.n	801534a <rcl_validate_enclave_name_with_size+0x6e>
 8015376:	4a04      	ldr	r2, [pc, #16]	@ (8015388 <rcl_validate_enclave_name_with_size+0xac>)
 8015378:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801537c:	a802      	add	r0, sp, #8
 801537e:	f001 fd25 	bl	8016dcc <rcutils_snprintf>
 8015382:	f04f 0c01 	mov.w	ip, #1
 8015386:	e7ba      	b.n	80152fe <rcl_validate_enclave_name_with_size+0x22>
 8015388:	0801c4b4 	.word	0x0801c4b4

0801538c <rcl_validate_enclave_name>:
 801538c:	b168      	cbz	r0, 80153aa <rcl_validate_enclave_name+0x1e>
 801538e:	b570      	push	{r4, r5, r6, lr}
 8015390:	460d      	mov	r5, r1
 8015392:	4616      	mov	r6, r2
 8015394:	4604      	mov	r4, r0
 8015396:	f7ea ff4d 	bl	8000234 <strlen>
 801539a:	4633      	mov	r3, r6
 801539c:	4601      	mov	r1, r0
 801539e:	462a      	mov	r2, r5
 80153a0:	4620      	mov	r0, r4
 80153a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153a6:	f7ff bf99 	b.w	80152dc <rcl_validate_enclave_name_with_size>
 80153aa:	200b      	movs	r0, #11
 80153ac:	4770      	bx	lr
 80153ae:	bf00      	nop

080153b0 <rcl_get_zero_initialized_wait_set>:
 80153b0:	b510      	push	{r4, lr}
 80153b2:	4c08      	ldr	r4, [pc, #32]	@ (80153d4 <rcl_get_zero_initialized_wait_set+0x24>)
 80153b4:	4686      	mov	lr, r0
 80153b6:	4684      	mov	ip, r0
 80153b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153ca:	6823      	ldr	r3, [r4, #0]
 80153cc:	f8cc 3000 	str.w	r3, [ip]
 80153d0:	4670      	mov	r0, lr
 80153d2:	bd10      	pop	{r4, pc}
 80153d4:	0801c514 	.word	0x0801c514

080153d8 <rcl_wait_set_is_valid>:
 80153d8:	b118      	cbz	r0, 80153e2 <rcl_wait_set_is_valid+0xa>
 80153da:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80153dc:	3800      	subs	r0, #0
 80153de:	bf18      	it	ne
 80153e0:	2001      	movne	r0, #1
 80153e2:	4770      	bx	lr

080153e4 <rcl_wait_set_fini>:
 80153e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153e8:	b082      	sub	sp, #8
 80153ea:	2800      	cmp	r0, #0
 80153ec:	f000 8095 	beq.w	801551a <rcl_wait_set_fini+0x136>
 80153f0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80153f2:	4604      	mov	r4, r0
 80153f4:	2e00      	cmp	r6, #0
 80153f6:	f000 808c 	beq.w	8015512 <rcl_wait_set_fini+0x12e>
 80153fa:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80153fc:	f002 fd48 	bl	8017e90 <rmw_destroy_wait_set>
 8015400:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015402:	1e06      	subs	r6, r0, #0
 8015404:	bf18      	it	ne
 8015406:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801540a:	2d00      	cmp	r5, #0
 801540c:	f000 8081 	beq.w	8015512 <rcl_wait_set_fini+0x12e>
 8015410:	6820      	ldr	r0, [r4, #0]
 8015412:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015416:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015418:	2700      	movs	r7, #0
 801541a:	6067      	str	r7, [r4, #4]
 801541c:	602f      	str	r7, [r5, #0]
 801541e:	b120      	cbz	r0, 801542a <rcl_wait_set_fini+0x46>
 8015420:	9101      	str	r1, [sp, #4]
 8015422:	47c0      	blx	r8
 8015424:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015426:	9901      	ldr	r1, [sp, #4]
 8015428:	6027      	str	r7, [r4, #0]
 801542a:	68a8      	ldr	r0, [r5, #8]
 801542c:	b120      	cbz	r0, 8015438 <rcl_wait_set_fini+0x54>
 801542e:	47c0      	blx	r8
 8015430:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015432:	2300      	movs	r3, #0
 8015434:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015438:	68a0      	ldr	r0, [r4, #8]
 801543a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801543c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801543e:	f04f 0800 	mov.w	r8, #0
 8015442:	f8c4 800c 	str.w	r8, [r4, #12]
 8015446:	f8c5 800c 	str.w	r8, [r5, #12]
 801544a:	b128      	cbz	r0, 8015458 <rcl_wait_set_fini+0x74>
 801544c:	47b8      	blx	r7
 801544e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015450:	f8c4 8008 	str.w	r8, [r4, #8]
 8015454:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015456:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015458:	6968      	ldr	r0, [r5, #20]
 801545a:	f04f 0800 	mov.w	r8, #0
 801545e:	f8c5 8010 	str.w	r8, [r5, #16]
 8015462:	b128      	cbz	r0, 8015470 <rcl_wait_set_fini+0x8c>
 8015464:	47b8      	blx	r7
 8015466:	f8c5 8014 	str.w	r8, [r5, #20]
 801546a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801546c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801546e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015470:	6920      	ldr	r0, [r4, #16]
 8015472:	f04f 0800 	mov.w	r8, #0
 8015476:	f8c4 8014 	str.w	r8, [r4, #20]
 801547a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801547e:	b128      	cbz	r0, 801548c <rcl_wait_set_fini+0xa8>
 8015480:	47b8      	blx	r7
 8015482:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015484:	f8c4 8010 	str.w	r8, [r4, #16]
 8015488:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801548a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801548c:	69a0      	ldr	r0, [r4, #24]
 801548e:	f04f 0800 	mov.w	r8, #0
 8015492:	f8c4 801c 	str.w	r8, [r4, #28]
 8015496:	f8c5 8018 	str.w	r8, [r5, #24]
 801549a:	b128      	cbz	r0, 80154a8 <rcl_wait_set_fini+0xc4>
 801549c:	9101      	str	r1, [sp, #4]
 801549e:	47b8      	blx	r7
 80154a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80154a2:	9901      	ldr	r1, [sp, #4]
 80154a4:	f8c4 8018 	str.w	r8, [r4, #24]
 80154a8:	6a28      	ldr	r0, [r5, #32]
 80154aa:	b120      	cbz	r0, 80154b6 <rcl_wait_set_fini+0xd2>
 80154ac:	47b8      	blx	r7
 80154ae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80154b0:	2300      	movs	r3, #0
 80154b2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80154b6:	6a20      	ldr	r0, [r4, #32]
 80154b8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80154bc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80154be:	2700      	movs	r7, #0
 80154c0:	6267      	str	r7, [r4, #36]	@ 0x24
 80154c2:	626f      	str	r7, [r5, #36]	@ 0x24
 80154c4:	b120      	cbz	r0, 80154d0 <rcl_wait_set_fini+0xec>
 80154c6:	9101      	str	r1, [sp, #4]
 80154c8:	47c0      	blx	r8
 80154ca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80154cc:	9901      	ldr	r1, [sp, #4]
 80154ce:	6227      	str	r7, [r4, #32]
 80154d0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80154d2:	b120      	cbz	r0, 80154de <rcl_wait_set_fini+0xfa>
 80154d4:	47c0      	blx	r8
 80154d6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80154d8:	2300      	movs	r3, #0
 80154da:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80154de:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80154e0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80154e4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80154e6:	2700      	movs	r7, #0
 80154e8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80154ea:	632f      	str	r7, [r5, #48]	@ 0x30
 80154ec:	b120      	cbz	r0, 80154f8 <rcl_wait_set_fini+0x114>
 80154ee:	9101      	str	r1, [sp, #4]
 80154f0:	47c0      	blx	r8
 80154f2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80154f4:	9901      	ldr	r1, [sp, #4]
 80154f6:	62a7      	str	r7, [r4, #40]	@ 0x28
 80154f8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80154fa:	b120      	cbz	r0, 8015506 <rcl_wait_set_fini+0x122>
 80154fc:	47c0      	blx	r8
 80154fe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015500:	2300      	movs	r3, #0
 8015502:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015506:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015508:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801550a:	4628      	mov	r0, r5
 801550c:	4798      	blx	r3
 801550e:	2300      	movs	r3, #0
 8015510:	6323      	str	r3, [r4, #48]	@ 0x30
 8015512:	4630      	mov	r0, r6
 8015514:	b002      	add	sp, #8
 8015516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801551a:	260b      	movs	r6, #11
 801551c:	4630      	mov	r0, r6
 801551e:	b002      	add	sp, #8
 8015520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015524 <rcl_wait_set_add_subscription>:
 8015524:	b318      	cbz	r0, 801556e <rcl_wait_set_add_subscription+0x4a>
 8015526:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015528:	b570      	push	{r4, r5, r6, lr}
 801552a:	4604      	mov	r4, r0
 801552c:	b30b      	cbz	r3, 8015572 <rcl_wait_set_add_subscription+0x4e>
 801552e:	b319      	cbz	r1, 8015578 <rcl_wait_set_add_subscription+0x54>
 8015530:	681d      	ldr	r5, [r3, #0]
 8015532:	6840      	ldr	r0, [r0, #4]
 8015534:	4285      	cmp	r5, r0
 8015536:	d217      	bcs.n	8015568 <rcl_wait_set_add_subscription+0x44>
 8015538:	6820      	ldr	r0, [r4, #0]
 801553a:	1c6e      	adds	r6, r5, #1
 801553c:	601e      	str	r6, [r3, #0]
 801553e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015542:	b102      	cbz	r2, 8015546 <rcl_wait_set_add_subscription+0x22>
 8015544:	6015      	str	r5, [r2, #0]
 8015546:	4608      	mov	r0, r1
 8015548:	f7ff fb08 	bl	8014b5c <rcl_subscription_get_rmw_handle>
 801554c:	b150      	cbz	r0, 8015564 <rcl_wait_set_add_subscription+0x40>
 801554e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015550:	6842      	ldr	r2, [r0, #4]
 8015552:	689b      	ldr	r3, [r3, #8]
 8015554:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015558:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801555a:	6853      	ldr	r3, [r2, #4]
 801555c:	3301      	adds	r3, #1
 801555e:	2000      	movs	r0, #0
 8015560:	6053      	str	r3, [r2, #4]
 8015562:	bd70      	pop	{r4, r5, r6, pc}
 8015564:	2001      	movs	r0, #1
 8015566:	bd70      	pop	{r4, r5, r6, pc}
 8015568:	f240 3086 	movw	r0, #902	@ 0x386
 801556c:	bd70      	pop	{r4, r5, r6, pc}
 801556e:	200b      	movs	r0, #11
 8015570:	4770      	bx	lr
 8015572:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015576:	bd70      	pop	{r4, r5, r6, pc}
 8015578:	200b      	movs	r0, #11
 801557a:	bd70      	pop	{r4, r5, r6, pc}

0801557c <rcl_wait_set_clear>:
 801557c:	2800      	cmp	r0, #0
 801557e:	d073      	beq.n	8015668 <rcl_wait_set_clear+0xec>
 8015580:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015582:	b510      	push	{r4, lr}
 8015584:	4604      	mov	r4, r0
 8015586:	2b00      	cmp	r3, #0
 8015588:	d070      	beq.n	801566c <rcl_wait_set_clear+0xf0>
 801558a:	6800      	ldr	r0, [r0, #0]
 801558c:	b138      	cbz	r0, 801559e <rcl_wait_set_clear+0x22>
 801558e:	6862      	ldr	r2, [r4, #4]
 8015590:	2100      	movs	r1, #0
 8015592:	0092      	lsls	r2, r2, #2
 8015594:	f004 fbde 	bl	8019d54 <memset>
 8015598:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801559a:	2200      	movs	r2, #0
 801559c:	601a      	str	r2, [r3, #0]
 801559e:	68a0      	ldr	r0, [r4, #8]
 80155a0:	b138      	cbz	r0, 80155b2 <rcl_wait_set_clear+0x36>
 80155a2:	68e2      	ldr	r2, [r4, #12]
 80155a4:	2100      	movs	r1, #0
 80155a6:	0092      	lsls	r2, r2, #2
 80155a8:	f004 fbd4 	bl	8019d54 <memset>
 80155ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155ae:	2200      	movs	r2, #0
 80155b0:	60da      	str	r2, [r3, #12]
 80155b2:	69a0      	ldr	r0, [r4, #24]
 80155b4:	b138      	cbz	r0, 80155c6 <rcl_wait_set_clear+0x4a>
 80155b6:	69e2      	ldr	r2, [r4, #28]
 80155b8:	2100      	movs	r1, #0
 80155ba:	0092      	lsls	r2, r2, #2
 80155bc:	f004 fbca 	bl	8019d54 <memset>
 80155c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155c2:	2200      	movs	r2, #0
 80155c4:	619a      	str	r2, [r3, #24]
 80155c6:	6a20      	ldr	r0, [r4, #32]
 80155c8:	b138      	cbz	r0, 80155da <rcl_wait_set_clear+0x5e>
 80155ca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80155cc:	2100      	movs	r1, #0
 80155ce:	0092      	lsls	r2, r2, #2
 80155d0:	f004 fbc0 	bl	8019d54 <memset>
 80155d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155d6:	2200      	movs	r2, #0
 80155d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80155da:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80155dc:	b138      	cbz	r0, 80155ee <rcl_wait_set_clear+0x72>
 80155de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80155e0:	2100      	movs	r1, #0
 80155e2:	0092      	lsls	r2, r2, #2
 80155e4:	f004 fbb6 	bl	8019d54 <memset>
 80155e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155ea:	2200      	movs	r2, #0
 80155ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80155ee:	6920      	ldr	r0, [r4, #16]
 80155f0:	b138      	cbz	r0, 8015602 <rcl_wait_set_clear+0x86>
 80155f2:	6962      	ldr	r2, [r4, #20]
 80155f4:	2100      	movs	r1, #0
 80155f6:	0092      	lsls	r2, r2, #2
 80155f8:	f004 fbac 	bl	8019d54 <memset>
 80155fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155fe:	2200      	movs	r2, #0
 8015600:	641a      	str	r2, [r3, #64]	@ 0x40
 8015602:	6898      	ldr	r0, [r3, #8]
 8015604:	b138      	cbz	r0, 8015616 <rcl_wait_set_clear+0x9a>
 8015606:	685a      	ldr	r2, [r3, #4]
 8015608:	2100      	movs	r1, #0
 801560a:	0092      	lsls	r2, r2, #2
 801560c:	f004 fba2 	bl	8019d54 <memset>
 8015610:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015612:	2200      	movs	r2, #0
 8015614:	605a      	str	r2, [r3, #4]
 8015616:	6958      	ldr	r0, [r3, #20]
 8015618:	b138      	cbz	r0, 801562a <rcl_wait_set_clear+0xae>
 801561a:	691a      	ldr	r2, [r3, #16]
 801561c:	2100      	movs	r1, #0
 801561e:	0092      	lsls	r2, r2, #2
 8015620:	f004 fb98 	bl	8019d54 <memset>
 8015624:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015626:	2200      	movs	r2, #0
 8015628:	611a      	str	r2, [r3, #16]
 801562a:	6a18      	ldr	r0, [r3, #32]
 801562c:	b138      	cbz	r0, 801563e <rcl_wait_set_clear+0xc2>
 801562e:	69da      	ldr	r2, [r3, #28]
 8015630:	2100      	movs	r1, #0
 8015632:	0092      	lsls	r2, r2, #2
 8015634:	f004 fb8e 	bl	8019d54 <memset>
 8015638:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801563a:	2200      	movs	r2, #0
 801563c:	61da      	str	r2, [r3, #28]
 801563e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015640:	b138      	cbz	r0, 8015652 <rcl_wait_set_clear+0xd6>
 8015642:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015644:	2100      	movs	r1, #0
 8015646:	0092      	lsls	r2, r2, #2
 8015648:	f004 fb84 	bl	8019d54 <memset>
 801564c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801564e:	2200      	movs	r2, #0
 8015650:	629a      	str	r2, [r3, #40]	@ 0x28
 8015652:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015654:	b138      	cbz	r0, 8015666 <rcl_wait_set_clear+0xea>
 8015656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015658:	2100      	movs	r1, #0
 801565a:	0092      	lsls	r2, r2, #2
 801565c:	f004 fb7a 	bl	8019d54 <memset>
 8015660:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015662:	2000      	movs	r0, #0
 8015664:	6358      	str	r0, [r3, #52]	@ 0x34
 8015666:	bd10      	pop	{r4, pc}
 8015668:	200b      	movs	r0, #11
 801566a:	4770      	bx	lr
 801566c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015670:	bd10      	pop	{r4, pc}
 8015672:	bf00      	nop

08015674 <rcl_wait_set_resize>:
 8015674:	2800      	cmp	r0, #0
 8015676:	f000 8185 	beq.w	8015984 <rcl_wait_set_resize+0x310>
 801567a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801567e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8015680:	b083      	sub	sp, #12
 8015682:	4605      	mov	r5, r0
 8015684:	2c00      	cmp	r4, #0
 8015686:	f000 817f 	beq.w	8015988 <rcl_wait_set_resize+0x314>
 801568a:	f04f 0900 	mov.w	r9, #0
 801568e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8015692:	461f      	mov	r7, r3
 8015694:	4688      	mov	r8, r1
 8015696:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801569a:	4616      	mov	r6, r2
 801569c:	f8c0 9004 	str.w	r9, [r0, #4]
 80156a0:	f8c4 9000 	str.w	r9, [r4]
 80156a4:	2900      	cmp	r1, #0
 80156a6:	f000 80bd 	beq.w	8015824 <rcl_wait_set_resize+0x1b0>
 80156aa:	008c      	lsls	r4, r1, #2
 80156ac:	6800      	ldr	r0, [r0, #0]
 80156ae:	9301      	str	r3, [sp, #4]
 80156b0:	4652      	mov	r2, sl
 80156b2:	4621      	mov	r1, r4
 80156b4:	4798      	blx	r3
 80156b6:	9b01      	ldr	r3, [sp, #4]
 80156b8:	6028      	str	r0, [r5, #0]
 80156ba:	2800      	cmp	r0, #0
 80156bc:	f000 80cb 	beq.w	8015856 <rcl_wait_set_resize+0x1e2>
 80156c0:	4622      	mov	r2, r4
 80156c2:	4649      	mov	r1, r9
 80156c4:	9301      	str	r3, [sp, #4]
 80156c6:	f004 fb45 	bl	8019d54 <memset>
 80156ca:	f8c5 8004 	str.w	r8, [r5, #4]
 80156ce:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80156d2:	9b01      	ldr	r3, [sp, #4]
 80156d4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80156d8:	f8c8 9004 	str.w	r9, [r8, #4]
 80156dc:	4652      	mov	r2, sl
 80156de:	4621      	mov	r1, r4
 80156e0:	4798      	blx	r3
 80156e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80156e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80156e8:	689b      	ldr	r3, [r3, #8]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	f000 80ac 	beq.w	8015848 <rcl_wait_set_resize+0x1d4>
 80156f0:	4622      	mov	r2, r4
 80156f2:	4649      	mov	r1, r9
 80156f4:	4618      	mov	r0, r3
 80156f6:	f004 fb2d 	bl	8019d54 <memset>
 80156fa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80156fc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015700:	f04f 0800 	mov.w	r8, #0
 8015704:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8015708:	f8c5 800c 	str.w	r8, [r5, #12]
 801570c:	f8c4 800c 	str.w	r8, [r4, #12]
 8015710:	2e00      	cmp	r6, #0
 8015712:	f040 80a4 	bne.w	801585e <rcl_wait_set_resize+0x1ea>
 8015716:	68a8      	ldr	r0, [r5, #8]
 8015718:	b128      	cbz	r0, 8015726 <rcl_wait_set_resize+0xb2>
 801571a:	4649      	mov	r1, r9
 801571c:	4790      	blx	r2
 801571e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015720:	60ae      	str	r6, [r5, #8]
 8015722:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015726:	f04f 0800 	mov.w	r8, #0
 801572a:	19f6      	adds	r6, r6, r7
 801572c:	f8c4 8010 	str.w	r8, [r4, #16]
 8015730:	f040 80ac 	bne.w	801588c <rcl_wait_set_resize+0x218>
 8015734:	6960      	ldr	r0, [r4, #20]
 8015736:	b130      	cbz	r0, 8015746 <rcl_wait_set_resize+0xd2>
 8015738:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801573a:	4649      	mov	r1, r9
 801573c:	4798      	blx	r3
 801573e:	6166      	str	r6, [r4, #20]
 8015740:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015742:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015746:	2600      	movs	r6, #0
 8015748:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801574c:	616e      	str	r6, [r5, #20]
 801574e:	6426      	str	r6, [r4, #64]	@ 0x40
 8015750:	2f00      	cmp	r7, #0
 8015752:	f040 80ad 	bne.w	80158b0 <rcl_wait_set_resize+0x23c>
 8015756:	6928      	ldr	r0, [r5, #16]
 8015758:	b138      	cbz	r0, 801576a <rcl_wait_set_resize+0xf6>
 801575a:	4649      	mov	r1, r9
 801575c:	47d0      	blx	sl
 801575e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015760:	612f      	str	r7, [r5, #16]
 8015762:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015766:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801576a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801576c:	2600      	movs	r6, #0
 801576e:	61ee      	str	r6, [r5, #28]
 8015770:	61a6      	str	r6, [r4, #24]
 8015772:	2b00      	cmp	r3, #0
 8015774:	f040 80af 	bne.w	80158d6 <rcl_wait_set_resize+0x262>
 8015778:	69a8      	ldr	r0, [r5, #24]
 801577a:	b120      	cbz	r0, 8015786 <rcl_wait_set_resize+0x112>
 801577c:	4649      	mov	r1, r9
 801577e:	47d0      	blx	sl
 8015780:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015782:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015784:	61ab      	str	r3, [r5, #24]
 8015786:	6a20      	ldr	r0, [r4, #32]
 8015788:	b128      	cbz	r0, 8015796 <rcl_wait_set_resize+0x122>
 801578a:	4649      	mov	r1, r9
 801578c:	47d0      	blx	sl
 801578e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015790:	2300      	movs	r3, #0
 8015792:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015798:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801579a:	2600      	movs	r6, #0
 801579c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80157a0:	626e      	str	r6, [r5, #36]	@ 0x24
 80157a2:	6266      	str	r6, [r4, #36]	@ 0x24
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	f000 80b6 	beq.w	8015916 <rcl_wait_set_resize+0x2a2>
 80157aa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80157ae:	6a28      	ldr	r0, [r5, #32]
 80157b0:	463a      	mov	r2, r7
 80157b2:	4651      	mov	r1, sl
 80157b4:	47c8      	blx	r9
 80157b6:	6228      	str	r0, [r5, #32]
 80157b8:	2800      	cmp	r0, #0
 80157ba:	d04c      	beq.n	8015856 <rcl_wait_set_resize+0x1e2>
 80157bc:	4652      	mov	r2, sl
 80157be:	4631      	mov	r1, r6
 80157c0:	f004 fac8 	bl	8019d54 <memset>
 80157c4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80157c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80157c8:	626b      	str	r3, [r5, #36]	@ 0x24
 80157ca:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80157cc:	62a6      	str	r6, [r4, #40]	@ 0x28
 80157ce:	463a      	mov	r2, r7
 80157d0:	4651      	mov	r1, sl
 80157d2:	47c8      	blx	r9
 80157d4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80157d6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80157d8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80157da:	2c00      	cmp	r4, #0
 80157dc:	f000 80f0 	beq.w	80159c0 <rcl_wait_set_resize+0x34c>
 80157e0:	4620      	mov	r0, r4
 80157e2:	4652      	mov	r2, sl
 80157e4:	4631      	mov	r1, r6
 80157e6:	f004 fab5 	bl	8019d54 <memset>
 80157ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80157ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80157ee:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80157f0:	2600      	movs	r6, #0
 80157f2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80157f6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80157f8:	6326      	str	r6, [r4, #48]	@ 0x30
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	f040 809d 	bne.w	801593a <rcl_wait_set_resize+0x2c6>
 8015800:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015802:	b120      	cbz	r0, 801580e <rcl_wait_set_resize+0x19a>
 8015804:	4639      	mov	r1, r7
 8015806:	47c0      	blx	r8
 8015808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801580a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801580c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801580e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015810:	b310      	cbz	r0, 8015858 <rcl_wait_set_resize+0x1e4>
 8015812:	4639      	mov	r1, r7
 8015814:	47c0      	blx	r8
 8015816:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015818:	2000      	movs	r0, #0
 801581a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801581e:	b003      	add	sp, #12
 8015820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015824:	6800      	ldr	r0, [r0, #0]
 8015826:	b120      	cbz	r0, 8015832 <rcl_wait_set_resize+0x1be>
 8015828:	4651      	mov	r1, sl
 801582a:	47d8      	blx	fp
 801582c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801582e:	f8c5 8000 	str.w	r8, [r5]
 8015832:	68a0      	ldr	r0, [r4, #8]
 8015834:	2800      	cmp	r0, #0
 8015836:	f43f af61 	beq.w	80156fc <rcl_wait_set_resize+0x88>
 801583a:	4651      	mov	r1, sl
 801583c:	47d8      	blx	fp
 801583e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015840:	2300      	movs	r3, #0
 8015842:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015846:	e759      	b.n	80156fc <rcl_wait_set_resize+0x88>
 8015848:	6828      	ldr	r0, [r5, #0]
 801584a:	9301      	str	r3, [sp, #4]
 801584c:	4651      	mov	r1, sl
 801584e:	47d8      	blx	fp
 8015850:	9b01      	ldr	r3, [sp, #4]
 8015852:	e9c5 3300 	strd	r3, r3, [r5]
 8015856:	200a      	movs	r0, #10
 8015858:	b003      	add	sp, #12
 801585a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801585e:	00b4      	lsls	r4, r6, #2
 8015860:	68a8      	ldr	r0, [r5, #8]
 8015862:	464a      	mov	r2, r9
 8015864:	4621      	mov	r1, r4
 8015866:	4798      	blx	r3
 8015868:	60a8      	str	r0, [r5, #8]
 801586a:	2800      	cmp	r0, #0
 801586c:	d0f3      	beq.n	8015856 <rcl_wait_set_resize+0x1e2>
 801586e:	4622      	mov	r2, r4
 8015870:	4641      	mov	r1, r8
 8015872:	f004 fa6f 	bl	8019d54 <memset>
 8015876:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015878:	60ee      	str	r6, [r5, #12]
 801587a:	f04f 0800 	mov.w	r8, #0
 801587e:	19f6      	adds	r6, r6, r7
 8015880:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015884:	f8c4 8010 	str.w	r8, [r4, #16]
 8015888:	f43f af54 	beq.w	8015734 <rcl_wait_set_resize+0xc0>
 801588c:	00b6      	lsls	r6, r6, #2
 801588e:	464a      	mov	r2, r9
 8015890:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015892:	6960      	ldr	r0, [r4, #20]
 8015894:	4631      	mov	r1, r6
 8015896:	4798      	blx	r3
 8015898:	4681      	mov	r9, r0
 801589a:	6160      	str	r0, [r4, #20]
 801589c:	2800      	cmp	r0, #0
 801589e:	d076      	beq.n	801598e <rcl_wait_set_resize+0x31a>
 80158a0:	4632      	mov	r2, r6
 80158a2:	4641      	mov	r1, r8
 80158a4:	f004 fa56 	bl	8019d54 <memset>
 80158a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80158aa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80158ae:	e74a      	b.n	8015746 <rcl_wait_set_resize+0xd2>
 80158b0:	00bc      	lsls	r4, r7, #2
 80158b2:	6928      	ldr	r0, [r5, #16]
 80158b4:	464a      	mov	r2, r9
 80158b6:	4621      	mov	r1, r4
 80158b8:	47c0      	blx	r8
 80158ba:	6128      	str	r0, [r5, #16]
 80158bc:	2800      	cmp	r0, #0
 80158be:	d0ca      	beq.n	8015856 <rcl_wait_set_resize+0x1e2>
 80158c0:	4622      	mov	r2, r4
 80158c2:	4631      	mov	r1, r6
 80158c4:	f004 fa46 	bl	8019d54 <memset>
 80158c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80158ca:	616f      	str	r7, [r5, #20]
 80158cc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80158d0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80158d4:	e749      	b.n	801576a <rcl_wait_set_resize+0xf6>
 80158d6:	009c      	lsls	r4, r3, #2
 80158d8:	69a8      	ldr	r0, [r5, #24]
 80158da:	464a      	mov	r2, r9
 80158dc:	4621      	mov	r1, r4
 80158de:	47c0      	blx	r8
 80158e0:	61a8      	str	r0, [r5, #24]
 80158e2:	2800      	cmp	r0, #0
 80158e4:	d0b7      	beq.n	8015856 <rcl_wait_set_resize+0x1e2>
 80158e6:	4622      	mov	r2, r4
 80158e8:	4631      	mov	r1, r6
 80158ea:	f004 fa33 	bl	8019d54 <memset>
 80158ee:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80158f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80158f2:	61eb      	str	r3, [r5, #28]
 80158f4:	6a38      	ldr	r0, [r7, #32]
 80158f6:	61fe      	str	r6, [r7, #28]
 80158f8:	464a      	mov	r2, r9
 80158fa:	4621      	mov	r1, r4
 80158fc:	47c0      	blx	r8
 80158fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015900:	6238      	str	r0, [r7, #32]
 8015902:	6a1f      	ldr	r7, [r3, #32]
 8015904:	2f00      	cmp	r7, #0
 8015906:	d054      	beq.n	80159b2 <rcl_wait_set_resize+0x33e>
 8015908:	4622      	mov	r2, r4
 801590a:	4631      	mov	r1, r6
 801590c:	4638      	mov	r0, r7
 801590e:	f004 fa21 	bl	8019d54 <memset>
 8015912:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015914:	e73f      	b.n	8015796 <rcl_wait_set_resize+0x122>
 8015916:	6a28      	ldr	r0, [r5, #32]
 8015918:	b120      	cbz	r0, 8015924 <rcl_wait_set_resize+0x2b0>
 801591a:	4639      	mov	r1, r7
 801591c:	47c0      	blx	r8
 801591e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015920:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015922:	622b      	str	r3, [r5, #32]
 8015924:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015926:	2800      	cmp	r0, #0
 8015928:	f43f af60 	beq.w	80157ec <rcl_wait_set_resize+0x178>
 801592c:	4639      	mov	r1, r7
 801592e:	47c0      	blx	r8
 8015930:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015932:	2300      	movs	r3, #0
 8015934:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015938:	e758      	b.n	80157ec <rcl_wait_set_resize+0x178>
 801593a:	009c      	lsls	r4, r3, #2
 801593c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801593e:	463a      	mov	r2, r7
 8015940:	4621      	mov	r1, r4
 8015942:	47c8      	blx	r9
 8015944:	62a8      	str	r0, [r5, #40]	@ 0x28
 8015946:	2800      	cmp	r0, #0
 8015948:	d085      	beq.n	8015856 <rcl_wait_set_resize+0x1e2>
 801594a:	4622      	mov	r2, r4
 801594c:	4631      	mov	r1, r6
 801594e:	f004 fa01 	bl	8019d54 <memset>
 8015952:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8015956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015958:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801595a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801595e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8015962:	463a      	mov	r2, r7
 8015964:	4621      	mov	r1, r4
 8015966:	47c8      	blx	r9
 8015968:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801596a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801596e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015970:	b36b      	cbz	r3, 80159ce <rcl_wait_set_resize+0x35a>
 8015972:	4622      	mov	r2, r4
 8015974:	4631      	mov	r1, r6
 8015976:	4618      	mov	r0, r3
 8015978:	f004 f9ec 	bl	8019d54 <memset>
 801597c:	4630      	mov	r0, r6
 801597e:	b003      	add	sp, #12
 8015980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015984:	200b      	movs	r0, #11
 8015986:	4770      	bx	lr
 8015988:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801598c:	e764      	b.n	8015858 <rcl_wait_set_resize+0x1e4>
 801598e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015990:	68a8      	ldr	r0, [r5, #8]
 8015992:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015996:	4798      	blx	r3
 8015998:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801599a:	6928      	ldr	r0, [r5, #16]
 801599c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801599e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80159a0:	f8c5 900c 	str.w	r9, [r5, #12]
 80159a4:	f8c5 9008 	str.w	r9, [r5, #8]
 80159a8:	4790      	blx	r2
 80159aa:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80159ae:	200a      	movs	r0, #10
 80159b0:	e752      	b.n	8015858 <rcl_wait_set_resize+0x1e4>
 80159b2:	69a8      	ldr	r0, [r5, #24]
 80159b4:	4649      	mov	r1, r9
 80159b6:	47d0      	blx	sl
 80159b8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80159bc:	200a      	movs	r0, #10
 80159be:	e74b      	b.n	8015858 <rcl_wait_set_resize+0x1e4>
 80159c0:	6a28      	ldr	r0, [r5, #32]
 80159c2:	4639      	mov	r1, r7
 80159c4:	47c0      	blx	r8
 80159c6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80159ca:	200a      	movs	r0, #10
 80159cc:	e744      	b.n	8015858 <rcl_wait_set_resize+0x1e4>
 80159ce:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80159d0:	9301      	str	r3, [sp, #4]
 80159d2:	4639      	mov	r1, r7
 80159d4:	47c0      	blx	r8
 80159d6:	9b01      	ldr	r3, [sp, #4]
 80159d8:	200a      	movs	r0, #10
 80159da:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80159de:	e73b      	b.n	8015858 <rcl_wait_set_resize+0x1e4>

080159e0 <rcl_wait_set_init>:
 80159e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159e4:	b084      	sub	sp, #16
 80159e6:	4604      	mov	r4, r0
 80159e8:	a810      	add	r0, sp, #64	@ 0x40
 80159ea:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80159ee:	460f      	mov	r7, r1
 80159f0:	4690      	mov	r8, r2
 80159f2:	4699      	mov	r9, r3
 80159f4:	f7f8 fa2e 	bl	800de54 <rcutils_allocator_is_valid>
 80159f8:	2800      	cmp	r0, #0
 80159fa:	d06b      	beq.n	8015ad4 <rcl_wait_set_init+0xf4>
 80159fc:	2c00      	cmp	r4, #0
 80159fe:	d069      	beq.n	8015ad4 <rcl_wait_set_init+0xf4>
 8015a00:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015a02:	b125      	cbz	r5, 8015a0e <rcl_wait_set_init+0x2e>
 8015a04:	2564      	movs	r5, #100	@ 0x64
 8015a06:	4628      	mov	r0, r5
 8015a08:	b004      	add	sp, #16
 8015a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a0e:	f1ba 0f00 	cmp.w	sl, #0
 8015a12:	d05f      	beq.n	8015ad4 <rcl_wait_set_init+0xf4>
 8015a14:	4650      	mov	r0, sl
 8015a16:	f7fe fa5b 	bl	8013ed0 <rcl_context_is_valid>
 8015a1a:	2800      	cmp	r0, #0
 8015a1c:	d067      	beq.n	8015aee <rcl_wait_set_init+0x10e>
 8015a1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015a20:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015a22:	205c      	movs	r0, #92	@ 0x5c
 8015a24:	4798      	blx	r3
 8015a26:	6320      	str	r0, [r4, #48]	@ 0x30
 8015a28:	2800      	cmp	r0, #0
 8015a2a:	d062      	beq.n	8015af2 <rcl_wait_set_init+0x112>
 8015a2c:	4629      	mov	r1, r5
 8015a2e:	225c      	movs	r2, #92	@ 0x5c
 8015a30:	f004 f990 	bl	8019d54 <memset>
 8015a34:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015a38:	eb03 0e02 	add.w	lr, r3, r2
 8015a3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a3e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015a40:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015a44:	449e      	add	lr, r3
 8015a46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015a4a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8015a4e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015a52:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015a56:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015a5a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8015a5e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8015a62:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015a66:	f8da a000 	ldr.w	sl, [sl]
 8015a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a6c:	44c6      	add	lr, r8
 8015a6e:	f8dc 3000 	ldr.w	r3, [ip]
 8015a72:	602b      	str	r3, [r5, #0]
 8015a74:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8015a78:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8015a7c:	f002 f9fe 	bl	8017e7c <rmw_create_wait_set>
 8015a80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a82:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015a84:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015a86:	b350      	cbz	r0, 8015ade <rcl_wait_set_init+0xfe>
 8015a88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a8a:	9302      	str	r3, [sp, #8]
 8015a8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a8e:	9301      	str	r3, [sp, #4]
 8015a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a92:	9300      	str	r3, [sp, #0]
 8015a94:	4642      	mov	r2, r8
 8015a96:	464b      	mov	r3, r9
 8015a98:	4639      	mov	r1, r7
 8015a9a:	4620      	mov	r0, r4
 8015a9c:	f7ff fdea 	bl	8015674 <rcl_wait_set_resize>
 8015aa0:	4605      	mov	r5, r0
 8015aa2:	2800      	cmp	r0, #0
 8015aa4:	d0af      	beq.n	8015a06 <rcl_wait_set_init+0x26>
 8015aa6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015aa8:	bb2b      	cbnz	r3, 8015af6 <rcl_wait_set_init+0x116>
 8015aaa:	2600      	movs	r6, #0
 8015aac:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015ab0:	9600      	str	r6, [sp, #0]
 8015ab2:	4633      	mov	r3, r6
 8015ab4:	4632      	mov	r2, r6
 8015ab6:	4631      	mov	r1, r6
 8015ab8:	4620      	mov	r0, r4
 8015aba:	f7ff fddb 	bl	8015674 <rcl_wait_set_resize>
 8015abe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015ac0:	2800      	cmp	r0, #0
 8015ac2:	d0a0      	beq.n	8015a06 <rcl_wait_set_init+0x26>
 8015ac4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015ac6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015ac8:	4798      	blx	r3
 8015aca:	4628      	mov	r0, r5
 8015acc:	6326      	str	r6, [r4, #48]	@ 0x30
 8015ace:	b004      	add	sp, #16
 8015ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ad4:	250b      	movs	r5, #11
 8015ad6:	4628      	mov	r0, r5
 8015ad8:	b004      	add	sp, #16
 8015ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ade:	2501      	movs	r5, #1
 8015ae0:	f002 f9d6 	bl	8017e90 <rmw_destroy_wait_set>
 8015ae4:	2800      	cmp	r0, #0
 8015ae6:	bf18      	it	ne
 8015ae8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015aec:	e7dd      	b.n	8015aaa <rcl_wait_set_init+0xca>
 8015aee:	2565      	movs	r5, #101	@ 0x65
 8015af0:	e789      	b.n	8015a06 <rcl_wait_set_init+0x26>
 8015af2:	250a      	movs	r5, #10
 8015af4:	e787      	b.n	8015a06 <rcl_wait_set_init+0x26>
 8015af6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015af8:	e7f2      	b.n	8015ae0 <rcl_wait_set_init+0x100>
 8015afa:	bf00      	nop

08015afc <rcl_wait_set_add_guard_condition>:
 8015afc:	b318      	cbz	r0, 8015b46 <rcl_wait_set_add_guard_condition+0x4a>
 8015afe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015b00:	b570      	push	{r4, r5, r6, lr}
 8015b02:	4604      	mov	r4, r0
 8015b04:	b30b      	cbz	r3, 8015b4a <rcl_wait_set_add_guard_condition+0x4e>
 8015b06:	b319      	cbz	r1, 8015b50 <rcl_wait_set_add_guard_condition+0x54>
 8015b08:	68dd      	ldr	r5, [r3, #12]
 8015b0a:	68c0      	ldr	r0, [r0, #12]
 8015b0c:	4285      	cmp	r5, r0
 8015b0e:	d217      	bcs.n	8015b40 <rcl_wait_set_add_guard_condition+0x44>
 8015b10:	68a0      	ldr	r0, [r4, #8]
 8015b12:	1c6e      	adds	r6, r5, #1
 8015b14:	60de      	str	r6, [r3, #12]
 8015b16:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015b1a:	b102      	cbz	r2, 8015b1e <rcl_wait_set_add_guard_condition+0x22>
 8015b1c:	6015      	str	r5, [r2, #0]
 8015b1e:	4608      	mov	r0, r1
 8015b20:	f003 fac0 	bl	80190a4 <rcl_guard_condition_get_rmw_handle>
 8015b24:	b150      	cbz	r0, 8015b3c <rcl_wait_set_add_guard_condition+0x40>
 8015b26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b28:	6842      	ldr	r2, [r0, #4]
 8015b2a:	695b      	ldr	r3, [r3, #20]
 8015b2c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b30:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015b32:	6913      	ldr	r3, [r2, #16]
 8015b34:	3301      	adds	r3, #1
 8015b36:	2000      	movs	r0, #0
 8015b38:	6113      	str	r3, [r2, #16]
 8015b3a:	bd70      	pop	{r4, r5, r6, pc}
 8015b3c:	2001      	movs	r0, #1
 8015b3e:	bd70      	pop	{r4, r5, r6, pc}
 8015b40:	f240 3086 	movw	r0, #902	@ 0x386
 8015b44:	bd70      	pop	{r4, r5, r6, pc}
 8015b46:	200b      	movs	r0, #11
 8015b48:	4770      	bx	lr
 8015b4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015b4e:	bd70      	pop	{r4, r5, r6, pc}
 8015b50:	200b      	movs	r0, #11
 8015b52:	bd70      	pop	{r4, r5, r6, pc}

08015b54 <rcl_wait_set_add_timer>:
 8015b54:	b328      	cbz	r0, 8015ba2 <rcl_wait_set_add_timer+0x4e>
 8015b56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015b58:	b570      	push	{r4, r5, r6, lr}
 8015b5a:	4604      	mov	r4, r0
 8015b5c:	b31b      	cbz	r3, 8015ba6 <rcl_wait_set_add_timer+0x52>
 8015b5e:	b329      	cbz	r1, 8015bac <rcl_wait_set_add_timer+0x58>
 8015b60:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015b62:	6965      	ldr	r5, [r4, #20]
 8015b64:	42a8      	cmp	r0, r5
 8015b66:	d219      	bcs.n	8015b9c <rcl_wait_set_add_timer+0x48>
 8015b68:	6925      	ldr	r5, [r4, #16]
 8015b6a:	1c46      	adds	r6, r0, #1
 8015b6c:	641e      	str	r6, [r3, #64]	@ 0x40
 8015b6e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015b72:	b102      	cbz	r2, 8015b76 <rcl_wait_set_add_timer+0x22>
 8015b74:	6010      	str	r0, [r2, #0]
 8015b76:	4608      	mov	r0, r1
 8015b78:	f7ff fba6 	bl	80152c8 <rcl_timer_get_guard_condition>
 8015b7c:	b168      	cbz	r0, 8015b9a <rcl_wait_set_add_timer+0x46>
 8015b7e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015b80:	68e3      	ldr	r3, [r4, #12]
 8015b82:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015b84:	3b01      	subs	r3, #1
 8015b86:	441d      	add	r5, r3
 8015b88:	f003 fa8c 	bl	80190a4 <rcl_guard_condition_get_rmw_handle>
 8015b8c:	b180      	cbz	r0, 8015bb0 <rcl_wait_set_add_timer+0x5c>
 8015b8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b90:	6842      	ldr	r2, [r0, #4]
 8015b92:	695b      	ldr	r3, [r3, #20]
 8015b94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b98:	2000      	movs	r0, #0
 8015b9a:	bd70      	pop	{r4, r5, r6, pc}
 8015b9c:	f240 3086 	movw	r0, #902	@ 0x386
 8015ba0:	bd70      	pop	{r4, r5, r6, pc}
 8015ba2:	200b      	movs	r0, #11
 8015ba4:	4770      	bx	lr
 8015ba6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015baa:	bd70      	pop	{r4, r5, r6, pc}
 8015bac:	200b      	movs	r0, #11
 8015bae:	bd70      	pop	{r4, r5, r6, pc}
 8015bb0:	2001      	movs	r0, #1
 8015bb2:	bd70      	pop	{r4, r5, r6, pc}

08015bb4 <rcl_wait_set_add_client>:
 8015bb4:	b318      	cbz	r0, 8015bfe <rcl_wait_set_add_client+0x4a>
 8015bb6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015bb8:	b570      	push	{r4, r5, r6, lr}
 8015bba:	4604      	mov	r4, r0
 8015bbc:	b30b      	cbz	r3, 8015c02 <rcl_wait_set_add_client+0x4e>
 8015bbe:	b319      	cbz	r1, 8015c08 <rcl_wait_set_add_client+0x54>
 8015bc0:	699d      	ldr	r5, [r3, #24]
 8015bc2:	69c0      	ldr	r0, [r0, #28]
 8015bc4:	4285      	cmp	r5, r0
 8015bc6:	d217      	bcs.n	8015bf8 <rcl_wait_set_add_client+0x44>
 8015bc8:	69a0      	ldr	r0, [r4, #24]
 8015bca:	1c6e      	adds	r6, r5, #1
 8015bcc:	619e      	str	r6, [r3, #24]
 8015bce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015bd2:	b102      	cbz	r2, 8015bd6 <rcl_wait_set_add_client+0x22>
 8015bd4:	6015      	str	r5, [r2, #0]
 8015bd6:	4608      	mov	r0, r1
 8015bd8:	f7fe f8ce 	bl	8013d78 <rcl_client_get_rmw_handle>
 8015bdc:	b150      	cbz	r0, 8015bf4 <rcl_wait_set_add_client+0x40>
 8015bde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015be0:	6842      	ldr	r2, [r0, #4]
 8015be2:	6a1b      	ldr	r3, [r3, #32]
 8015be4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015be8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015bea:	69d3      	ldr	r3, [r2, #28]
 8015bec:	3301      	adds	r3, #1
 8015bee:	2000      	movs	r0, #0
 8015bf0:	61d3      	str	r3, [r2, #28]
 8015bf2:	bd70      	pop	{r4, r5, r6, pc}
 8015bf4:	2001      	movs	r0, #1
 8015bf6:	bd70      	pop	{r4, r5, r6, pc}
 8015bf8:	f240 3086 	movw	r0, #902	@ 0x386
 8015bfc:	bd70      	pop	{r4, r5, r6, pc}
 8015bfe:	200b      	movs	r0, #11
 8015c00:	4770      	bx	lr
 8015c02:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015c06:	bd70      	pop	{r4, r5, r6, pc}
 8015c08:	200b      	movs	r0, #11
 8015c0a:	bd70      	pop	{r4, r5, r6, pc}

08015c0c <rcl_wait_set_add_service>:
 8015c0c:	b318      	cbz	r0, 8015c56 <rcl_wait_set_add_service+0x4a>
 8015c0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015c10:	b570      	push	{r4, r5, r6, lr}
 8015c12:	4604      	mov	r4, r0
 8015c14:	b30b      	cbz	r3, 8015c5a <rcl_wait_set_add_service+0x4e>
 8015c16:	b319      	cbz	r1, 8015c60 <rcl_wait_set_add_service+0x54>
 8015c18:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015c1a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015c1c:	4285      	cmp	r5, r0
 8015c1e:	d217      	bcs.n	8015c50 <rcl_wait_set_add_service+0x44>
 8015c20:	6a20      	ldr	r0, [r4, #32]
 8015c22:	1c6e      	adds	r6, r5, #1
 8015c24:	625e      	str	r6, [r3, #36]	@ 0x24
 8015c26:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015c2a:	b102      	cbz	r2, 8015c2e <rcl_wait_set_add_service+0x22>
 8015c2c:	6015      	str	r5, [r2, #0]
 8015c2e:	4608      	mov	r0, r1
 8015c30:	f7fe fed4 	bl	80149dc <rcl_service_get_rmw_handle>
 8015c34:	b150      	cbz	r0, 8015c4c <rcl_wait_set_add_service+0x40>
 8015c36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015c38:	6842      	ldr	r2, [r0, #4]
 8015c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c3c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015c40:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015c42:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015c44:	3301      	adds	r3, #1
 8015c46:	2000      	movs	r0, #0
 8015c48:	6293      	str	r3, [r2, #40]	@ 0x28
 8015c4a:	bd70      	pop	{r4, r5, r6, pc}
 8015c4c:	2001      	movs	r0, #1
 8015c4e:	bd70      	pop	{r4, r5, r6, pc}
 8015c50:	f240 3086 	movw	r0, #902	@ 0x386
 8015c54:	bd70      	pop	{r4, r5, r6, pc}
 8015c56:	200b      	movs	r0, #11
 8015c58:	4770      	bx	lr
 8015c5a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015c5e:	bd70      	pop	{r4, r5, r6, pc}
 8015c60:	200b      	movs	r0, #11
 8015c62:	bd70      	pop	{r4, r5, r6, pc}
 8015c64:	0000      	movs	r0, r0
	...

08015c68 <rcl_wait>:
 8015c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c6c:	ed2d 8b02 	vpush	{d8}
 8015c70:	b08d      	sub	sp, #52	@ 0x34
 8015c72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015c76:	2800      	cmp	r0, #0
 8015c78:	f000 8143 	beq.w	8015f02 <rcl_wait+0x29a>
 8015c7c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015c7e:	4605      	mov	r5, r0
 8015c80:	2e00      	cmp	r6, #0
 8015c82:	f000 8112 	beq.w	8015eaa <rcl_wait+0x242>
 8015c86:	6843      	ldr	r3, [r0, #4]
 8015c88:	b983      	cbnz	r3, 8015cac <rcl_wait+0x44>
 8015c8a:	68eb      	ldr	r3, [r5, #12]
 8015c8c:	b973      	cbnz	r3, 8015cac <rcl_wait+0x44>
 8015c8e:	696b      	ldr	r3, [r5, #20]
 8015c90:	b963      	cbnz	r3, 8015cac <rcl_wait+0x44>
 8015c92:	69eb      	ldr	r3, [r5, #28]
 8015c94:	b953      	cbnz	r3, 8015cac <rcl_wait+0x44>
 8015c96:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015c98:	b943      	cbnz	r3, 8015cac <rcl_wait+0x44>
 8015c9a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8015c9c:	b933      	cbnz	r3, 8015cac <rcl_wait+0x44>
 8015c9e:	f240 3085 	movw	r0, #901	@ 0x385
 8015ca2:	b00d      	add	sp, #52	@ 0x34
 8015ca4:	ecbd 8b02 	vpop	{d8}
 8015ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cac:	9b04      	ldr	r3, [sp, #16]
 8015cae:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015cb0:	2b01      	cmp	r3, #1
 8015cb2:	9b05      	ldr	r3, [sp, #20]
 8015cb4:	f173 0300 	sbcs.w	r3, r3, #0
 8015cb8:	f2c0 80f0 	blt.w	8015e9c <rcl_wait+0x234>
 8015cbc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015cc0:	4643      	mov	r3, r8
 8015cc2:	2a00      	cmp	r2, #0
 8015cc4:	f000 8133 	beq.w	8015f2e <rcl_wait+0x2c6>
 8015cc8:	2400      	movs	r4, #0
 8015cca:	4613      	mov	r3, r2
 8015ccc:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015f40 <rcl_wait+0x2d8>
 8015cd0:	46a2      	mov	sl, r4
 8015cd2:	46a3      	mov	fp, r4
 8015cd4:	f240 3921 	movw	r9, #801	@ 0x321
 8015cd8:	4632      	mov	r2, r6
 8015cda:	e014      	b.n	8015d06 <rcl_wait+0x9e>
 8015cdc:	2800      	cmp	r0, #0
 8015cde:	d1e0      	bne.n	8015ca2 <rcl_wait+0x3a>
 8015ce0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015ce4:	4542      	cmp	r2, r8
 8015ce6:	eb73 0107 	sbcs.w	r1, r3, r7
 8015cea:	da03      	bge.n	8015cf4 <rcl_wait+0x8c>
 8015cec:	4690      	mov	r8, r2
 8015cee:	461f      	mov	r7, r3
 8015cf0:	f04f 0b01 	mov.w	fp, #1
 8015cf4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015cf6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015cf8:	3401      	adds	r4, #1
 8015cfa:	f14a 0a00 	adc.w	sl, sl, #0
 8015cfe:	429c      	cmp	r4, r3
 8015d00:	f17a 0100 	sbcs.w	r1, sl, #0
 8015d04:	d228      	bcs.n	8015d58 <rcl_wait+0xf0>
 8015d06:	6928      	ldr	r0, [r5, #16]
 8015d08:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015d0c:	a908      	add	r1, sp, #32
 8015d0e:	00a6      	lsls	r6, r4, #2
 8015d10:	2800      	cmp	r0, #0
 8015d12:	d0f1      	beq.n	8015cf8 <rcl_wait+0x90>
 8015d14:	68eb      	ldr	r3, [r5, #12]
 8015d16:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015d1a:	4423      	add	r3, r4
 8015d1c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015d20:	f1be 0f00 	cmp.w	lr, #0
 8015d24:	d006      	beq.n	8015d34 <rcl_wait+0xcc>
 8015d26:	6913      	ldr	r3, [r2, #16]
 8015d28:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015d2c:	3301      	adds	r3, #1
 8015d2e:	6113      	str	r3, [r2, #16]
 8015d30:	692b      	ldr	r3, [r5, #16]
 8015d32:	5998      	ldr	r0, [r3, r6]
 8015d34:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015d38:	f7ff fa94 	bl	8015264 <rcl_timer_get_time_until_next_call>
 8015d3c:	4548      	cmp	r0, r9
 8015d3e:	d1cd      	bne.n	8015cdc <rcl_wait+0x74>
 8015d40:	692b      	ldr	r3, [r5, #16]
 8015d42:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015d44:	2100      	movs	r1, #0
 8015d46:	5199      	str	r1, [r3, r6]
 8015d48:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015d4a:	3401      	adds	r4, #1
 8015d4c:	f14a 0a00 	adc.w	sl, sl, #0
 8015d50:	429c      	cmp	r4, r3
 8015d52:	f17a 0100 	sbcs.w	r1, sl, #0
 8015d56:	d3d6      	bcc.n	8015d06 <rcl_wait+0x9e>
 8015d58:	4616      	mov	r6, r2
 8015d5a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015d5e:	4313      	orrs	r3, r2
 8015d60:	46d9      	mov	r9, fp
 8015d62:	f040 80a9 	bne.w	8015eb8 <rcl_wait+0x250>
 8015d66:	2300      	movs	r3, #0
 8015d68:	2200      	movs	r2, #0
 8015d6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015d6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015d72:	ab08      	add	r3, sp, #32
 8015d74:	9302      	str	r3, [sp, #8]
 8015d76:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8015d78:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8015d7c:	e9cd 3200 	strd	r3, r2, [sp]
 8015d80:	f106 0110 	add.w	r1, r6, #16
 8015d84:	f106 031c 	add.w	r3, r6, #28
 8015d88:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8015d8c:	1d30      	adds	r0, r6, #4
 8015d8e:	f001 fefd 	bl	8017b8c <rmw_wait>
 8015d92:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015d94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015d96:	4680      	mov	r8, r0
 8015d98:	b1ca      	cbz	r2, 8015dce <rcl_wait+0x166>
 8015d9a:	2400      	movs	r4, #0
 8015d9c:	4627      	mov	r7, r4
 8015d9e:	692a      	ldr	r2, [r5, #16]
 8015da0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8015da4:	f10d 011f 	add.w	r1, sp, #31
 8015da8:	00a6      	lsls	r6, r4, #2
 8015daa:	b160      	cbz	r0, 8015dc6 <rcl_wait+0x15e>
 8015dac:	f88d 701f 	strb.w	r7, [sp, #31]
 8015db0:	f7ff fa1e 	bl	80151f0 <rcl_timer_is_ready>
 8015db4:	2800      	cmp	r0, #0
 8015db6:	f47f af74 	bne.w	8015ca2 <rcl_wait+0x3a>
 8015dba:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015dbe:	b90b      	cbnz	r3, 8015dc4 <rcl_wait+0x15c>
 8015dc0:	692a      	ldr	r2, [r5, #16]
 8015dc2:	5193      	str	r3, [r2, r6]
 8015dc4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015dc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015dc8:	3401      	adds	r4, #1
 8015dca:	42a2      	cmp	r2, r4
 8015dcc:	d8e7      	bhi.n	8015d9e <rcl_wait+0x136>
 8015dce:	f038 0002 	bics.w	r0, r8, #2
 8015dd2:	f040 8090 	bne.w	8015ef6 <rcl_wait+0x28e>
 8015dd6:	686e      	ldr	r6, [r5, #4]
 8015dd8:	4602      	mov	r2, r0
 8015dda:	b91e      	cbnz	r6, 8015de4 <rcl_wait+0x17c>
 8015ddc:	e00d      	b.n	8015dfa <rcl_wait+0x192>
 8015dde:	3201      	adds	r2, #1
 8015de0:	42b2      	cmp	r2, r6
 8015de2:	d00a      	beq.n	8015dfa <rcl_wait+0x192>
 8015de4:	6899      	ldr	r1, [r3, #8]
 8015de6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015dea:	2900      	cmp	r1, #0
 8015dec:	d1f7      	bne.n	8015dde <rcl_wait+0x176>
 8015dee:	682c      	ldr	r4, [r5, #0]
 8015df0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015df4:	3201      	adds	r2, #1
 8015df6:	42b2      	cmp	r2, r6
 8015df8:	d1f4      	bne.n	8015de4 <rcl_wait+0x17c>
 8015dfa:	68ee      	ldr	r6, [r5, #12]
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	b91e      	cbnz	r6, 8015e08 <rcl_wait+0x1a0>
 8015e00:	e00d      	b.n	8015e1e <rcl_wait+0x1b6>
 8015e02:	3201      	adds	r2, #1
 8015e04:	42b2      	cmp	r2, r6
 8015e06:	d00a      	beq.n	8015e1e <rcl_wait+0x1b6>
 8015e08:	6959      	ldr	r1, [r3, #20]
 8015e0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015e0e:	2900      	cmp	r1, #0
 8015e10:	d1f7      	bne.n	8015e02 <rcl_wait+0x19a>
 8015e12:	68ac      	ldr	r4, [r5, #8]
 8015e14:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015e18:	3201      	adds	r2, #1
 8015e1a:	42b2      	cmp	r2, r6
 8015e1c:	d1f4      	bne.n	8015e08 <rcl_wait+0x1a0>
 8015e1e:	69ee      	ldr	r6, [r5, #28]
 8015e20:	2200      	movs	r2, #0
 8015e22:	b91e      	cbnz	r6, 8015e2c <rcl_wait+0x1c4>
 8015e24:	e00d      	b.n	8015e42 <rcl_wait+0x1da>
 8015e26:	3201      	adds	r2, #1
 8015e28:	42b2      	cmp	r2, r6
 8015e2a:	d00a      	beq.n	8015e42 <rcl_wait+0x1da>
 8015e2c:	6a19      	ldr	r1, [r3, #32]
 8015e2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015e32:	2900      	cmp	r1, #0
 8015e34:	d1f7      	bne.n	8015e26 <rcl_wait+0x1be>
 8015e36:	69ac      	ldr	r4, [r5, #24]
 8015e38:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015e3c:	3201      	adds	r2, #1
 8015e3e:	42b2      	cmp	r2, r6
 8015e40:	d1f4      	bne.n	8015e2c <rcl_wait+0x1c4>
 8015e42:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8015e44:	2200      	movs	r2, #0
 8015e46:	b91e      	cbnz	r6, 8015e50 <rcl_wait+0x1e8>
 8015e48:	e00d      	b.n	8015e66 <rcl_wait+0x1fe>
 8015e4a:	3201      	adds	r2, #1
 8015e4c:	4296      	cmp	r6, r2
 8015e4e:	d00a      	beq.n	8015e66 <rcl_wait+0x1fe>
 8015e50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015e52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015e56:	2900      	cmp	r1, #0
 8015e58:	d1f7      	bne.n	8015e4a <rcl_wait+0x1e2>
 8015e5a:	6a2c      	ldr	r4, [r5, #32]
 8015e5c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015e60:	3201      	adds	r2, #1
 8015e62:	4296      	cmp	r6, r2
 8015e64:	d1f4      	bne.n	8015e50 <rcl_wait+0x1e8>
 8015e66:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8015e68:	2200      	movs	r2, #0
 8015e6a:	b91e      	cbnz	r6, 8015e74 <rcl_wait+0x20c>
 8015e6c:	e00d      	b.n	8015e8a <rcl_wait+0x222>
 8015e6e:	3201      	adds	r2, #1
 8015e70:	42b2      	cmp	r2, r6
 8015e72:	d00a      	beq.n	8015e8a <rcl_wait+0x222>
 8015e74:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015e76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015e7a:	2900      	cmp	r1, #0
 8015e7c:	d1f7      	bne.n	8015e6e <rcl_wait+0x206>
 8015e7e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8015e80:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015e84:	3201      	adds	r2, #1
 8015e86:	42b2      	cmp	r2, r6
 8015e88:	d1f4      	bne.n	8015e74 <rcl_wait+0x20c>
 8015e8a:	f1b8 0f02 	cmp.w	r8, #2
 8015e8e:	f47f af08 	bne.w	8015ca2 <rcl_wait+0x3a>
 8015e92:	464b      	mov	r3, r9
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	bf08      	it	eq
 8015e98:	2002      	moveq	r0, #2
 8015e9a:	e702      	b.n	8015ca2 <rcl_wait+0x3a>
 8015e9c:	2a00      	cmp	r2, #0
 8015e9e:	d03a      	beq.n	8015f16 <rcl_wait+0x2ae>
 8015ea0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015ea4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015ea8:	e70e      	b.n	8015cc8 <rcl_wait+0x60>
 8015eaa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015eae:	b00d      	add	sp, #52	@ 0x34
 8015eb0:	ecbd 8b02 	vpop	{d8}
 8015eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eb8:	9b04      	ldr	r3, [sp, #16]
 8015eba:	2b01      	cmp	r3, #1
 8015ebc:	9b05      	ldr	r3, [sp, #20]
 8015ebe:	f173 0300 	sbcs.w	r3, r3, #0
 8015ec2:	db24      	blt.n	8015f0e <rcl_wait+0x2a6>
 8015ec4:	2f00      	cmp	r7, #0
 8015ec6:	bfbc      	itt	lt
 8015ec8:	f04f 0800 	movlt.w	r8, #0
 8015ecc:	4647      	movlt	r7, r8
 8015ece:	a31e      	add	r3, pc, #120	@ (adr r3, 8015f48 <rcl_wait+0x2e0>)
 8015ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ed4:	4640      	mov	r0, r8
 8015ed6:	4639      	mov	r1, r7
 8015ed8:	f7ea fe76 	bl	8000bc8 <__aeabi_ldivmod>
 8015edc:	a31a      	add	r3, pc, #104	@ (adr r3, 8015f48 <rcl_wait+0x2e0>)
 8015ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ee2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015ee6:	4640      	mov	r0, r8
 8015ee8:	4639      	mov	r1, r7
 8015eea:	f7ea fe6d 	bl	8000bc8 <__aeabi_ldivmod>
 8015eee:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015ef2:	ab08      	add	r3, sp, #32
 8015ef4:	e73e      	b.n	8015d74 <rcl_wait+0x10c>
 8015ef6:	2001      	movs	r0, #1
 8015ef8:	b00d      	add	sp, #52	@ 0x34
 8015efa:	ecbd 8b02 	vpop	{d8}
 8015efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f02:	200b      	movs	r0, #11
 8015f04:	b00d      	add	sp, #52	@ 0x34
 8015f06:	ecbd 8b02 	vpop	{d8}
 8015f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f0e:	465b      	mov	r3, fp
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d1d7      	bne.n	8015ec4 <rcl_wait+0x25c>
 8015f14:	e72e      	b.n	8015d74 <rcl_wait+0x10c>
 8015f16:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015f1a:	430b      	orrs	r3, r1
 8015f1c:	bf08      	it	eq
 8015f1e:	4691      	moveq	r9, r2
 8015f20:	f43f af21 	beq.w	8015d66 <rcl_wait+0xfe>
 8015f24:	9b04      	ldr	r3, [sp, #16]
 8015f26:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015f2a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015f2e:	2b01      	cmp	r3, #1
 8015f30:	9b05      	ldr	r3, [sp, #20]
 8015f32:	f173 0300 	sbcs.w	r3, r3, #0
 8015f36:	f04f 0300 	mov.w	r3, #0
 8015f3a:	4699      	mov	r9, r3
 8015f3c:	dac2      	bge.n	8015ec4 <rcl_wait+0x25c>
 8015f3e:	e719      	b.n	8015d74 <rcl_wait+0x10c>
 8015f40:	ffffffff 	.word	0xffffffff
 8015f44:	7fffffff 	.word	0x7fffffff
 8015f48:	3b9aca00 	.word	0x3b9aca00
 8015f4c:	00000000 	.word	0x00000000

08015f50 <rcl_action_take_goal_response>:
 8015f50:	2800      	cmp	r0, #0
 8015f52:	d039      	beq.n	8015fc8 <rcl_action_take_goal_response+0x78>
 8015f54:	b570      	push	{r4, r5, r6, lr}
 8015f56:	4604      	mov	r4, r0
 8015f58:	6800      	ldr	r0, [r0, #0]
 8015f5a:	b380      	cbz	r0, 8015fbe <rcl_action_take_goal_response+0x6e>
 8015f5c:	460d      	mov	r5, r1
 8015f5e:	4616      	mov	r6, r2
 8015f60:	f7fd ff8e 	bl	8013e80 <rcl_client_is_valid>
 8015f64:	b330      	cbz	r0, 8015fb4 <rcl_action_take_goal_response+0x64>
 8015f66:	6820      	ldr	r0, [r4, #0]
 8015f68:	3004      	adds	r0, #4
 8015f6a:	f7fd ff89 	bl	8013e80 <rcl_client_is_valid>
 8015f6e:	b308      	cbz	r0, 8015fb4 <rcl_action_take_goal_response+0x64>
 8015f70:	6820      	ldr	r0, [r4, #0]
 8015f72:	3008      	adds	r0, #8
 8015f74:	f7fd ff84 	bl	8013e80 <rcl_client_is_valid>
 8015f78:	b1e0      	cbz	r0, 8015fb4 <rcl_action_take_goal_response+0x64>
 8015f7a:	6820      	ldr	r0, [r4, #0]
 8015f7c:	300c      	adds	r0, #12
 8015f7e:	f7fe fdf3 	bl	8014b68 <rcl_subscription_is_valid>
 8015f82:	b1b8      	cbz	r0, 8015fb4 <rcl_action_take_goal_response+0x64>
 8015f84:	6820      	ldr	r0, [r4, #0]
 8015f86:	3010      	adds	r0, #16
 8015f88:	f7fe fdee 	bl	8014b68 <rcl_subscription_is_valid>
 8015f8c:	b190      	cbz	r0, 8015fb4 <rcl_action_take_goal_response+0x64>
 8015f8e:	b1cd      	cbz	r5, 8015fc4 <rcl_action_take_goal_response+0x74>
 8015f90:	b1c6      	cbz	r6, 8015fc4 <rcl_action_take_goal_response+0x74>
 8015f92:	6820      	ldr	r0, [r4, #0]
 8015f94:	4632      	mov	r2, r6
 8015f96:	4629      	mov	r1, r5
 8015f98:	f7fd ff2a 	bl	8013df0 <rcl_take_response>
 8015f9c:	b148      	cbz	r0, 8015fb2 <rcl_action_take_goal_response+0x62>
 8015f9e:	280a      	cmp	r0, #10
 8015fa0:	d007      	beq.n	8015fb2 <rcl_action_take_goal_response+0x62>
 8015fa2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015fa6:	f640 0337 	movw	r3, #2103	@ 0x837
 8015faa:	4290      	cmp	r0, r2
 8015fac:	bf0c      	ite	eq
 8015fae:	4618      	moveq	r0, r3
 8015fb0:	2001      	movne	r0, #1
 8015fb2:	bd70      	pop	{r4, r5, r6, pc}
 8015fb4:	f7f7 ff74 	bl	800dea0 <rcutils_reset_error>
 8015fb8:	f640 0036 	movw	r0, #2102	@ 0x836
 8015fbc:	bd70      	pop	{r4, r5, r6, pc}
 8015fbe:	f640 0036 	movw	r0, #2102	@ 0x836
 8015fc2:	bd70      	pop	{r4, r5, r6, pc}
 8015fc4:	200b      	movs	r0, #11
 8015fc6:	bd70      	pop	{r4, r5, r6, pc}
 8015fc8:	f640 0036 	movw	r0, #2102	@ 0x836
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop

08015fd0 <rcl_action_send_result_request>:
 8015fd0:	b390      	cbz	r0, 8016038 <rcl_action_send_result_request+0x68>
 8015fd2:	b570      	push	{r4, r5, r6, lr}
 8015fd4:	4604      	mov	r4, r0
 8015fd6:	6800      	ldr	r0, [r0, #0]
 8015fd8:	b348      	cbz	r0, 801602e <rcl_action_send_result_request+0x5e>
 8015fda:	460d      	mov	r5, r1
 8015fdc:	4616      	mov	r6, r2
 8015fde:	f7fd ff4f 	bl	8013e80 <rcl_client_is_valid>
 8015fe2:	b1f8      	cbz	r0, 8016024 <rcl_action_send_result_request+0x54>
 8015fe4:	6820      	ldr	r0, [r4, #0]
 8015fe6:	3004      	adds	r0, #4
 8015fe8:	f7fd ff4a 	bl	8013e80 <rcl_client_is_valid>
 8015fec:	b1d0      	cbz	r0, 8016024 <rcl_action_send_result_request+0x54>
 8015fee:	6820      	ldr	r0, [r4, #0]
 8015ff0:	3008      	adds	r0, #8
 8015ff2:	f7fd ff45 	bl	8013e80 <rcl_client_is_valid>
 8015ff6:	b1a8      	cbz	r0, 8016024 <rcl_action_send_result_request+0x54>
 8015ff8:	6820      	ldr	r0, [r4, #0]
 8015ffa:	300c      	adds	r0, #12
 8015ffc:	f7fe fdb4 	bl	8014b68 <rcl_subscription_is_valid>
 8016000:	b180      	cbz	r0, 8016024 <rcl_action_send_result_request+0x54>
 8016002:	6820      	ldr	r0, [r4, #0]
 8016004:	3010      	adds	r0, #16
 8016006:	f7fe fdaf 	bl	8014b68 <rcl_subscription_is_valid>
 801600a:	b158      	cbz	r0, 8016024 <rcl_action_send_result_request+0x54>
 801600c:	b195      	cbz	r5, 8016034 <rcl_action_send_result_request+0x64>
 801600e:	b18e      	cbz	r6, 8016034 <rcl_action_send_result_request+0x64>
 8016010:	6820      	ldr	r0, [r4, #0]
 8016012:	4632      	mov	r2, r6
 8016014:	4629      	mov	r1, r5
 8016016:	3008      	adds	r0, #8
 8016018:	f7fd feb4 	bl	8013d84 <rcl_send_request>
 801601c:	3800      	subs	r0, #0
 801601e:	bf18      	it	ne
 8016020:	2001      	movne	r0, #1
 8016022:	bd70      	pop	{r4, r5, r6, pc}
 8016024:	f7f7 ff3c 	bl	800dea0 <rcutils_reset_error>
 8016028:	f640 0036 	movw	r0, #2102	@ 0x836
 801602c:	bd70      	pop	{r4, r5, r6, pc}
 801602e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016032:	bd70      	pop	{r4, r5, r6, pc}
 8016034:	200b      	movs	r0, #11
 8016036:	bd70      	pop	{r4, r5, r6, pc}
 8016038:	f640 0036 	movw	r0, #2102	@ 0x836
 801603c:	4770      	bx	lr
 801603e:	bf00      	nop

08016040 <rcl_action_take_result_response>:
 8016040:	2800      	cmp	r0, #0
 8016042:	d03a      	beq.n	80160ba <rcl_action_take_result_response+0x7a>
 8016044:	b570      	push	{r4, r5, r6, lr}
 8016046:	4604      	mov	r4, r0
 8016048:	6800      	ldr	r0, [r0, #0]
 801604a:	b388      	cbz	r0, 80160b0 <rcl_action_take_result_response+0x70>
 801604c:	460d      	mov	r5, r1
 801604e:	4616      	mov	r6, r2
 8016050:	f7fd ff16 	bl	8013e80 <rcl_client_is_valid>
 8016054:	b338      	cbz	r0, 80160a6 <rcl_action_take_result_response+0x66>
 8016056:	6820      	ldr	r0, [r4, #0]
 8016058:	3004      	adds	r0, #4
 801605a:	f7fd ff11 	bl	8013e80 <rcl_client_is_valid>
 801605e:	b310      	cbz	r0, 80160a6 <rcl_action_take_result_response+0x66>
 8016060:	6820      	ldr	r0, [r4, #0]
 8016062:	3008      	adds	r0, #8
 8016064:	f7fd ff0c 	bl	8013e80 <rcl_client_is_valid>
 8016068:	b1e8      	cbz	r0, 80160a6 <rcl_action_take_result_response+0x66>
 801606a:	6820      	ldr	r0, [r4, #0]
 801606c:	300c      	adds	r0, #12
 801606e:	f7fe fd7b 	bl	8014b68 <rcl_subscription_is_valid>
 8016072:	b1c0      	cbz	r0, 80160a6 <rcl_action_take_result_response+0x66>
 8016074:	6820      	ldr	r0, [r4, #0]
 8016076:	3010      	adds	r0, #16
 8016078:	f7fe fd76 	bl	8014b68 <rcl_subscription_is_valid>
 801607c:	b198      	cbz	r0, 80160a6 <rcl_action_take_result_response+0x66>
 801607e:	b1d5      	cbz	r5, 80160b6 <rcl_action_take_result_response+0x76>
 8016080:	b1ce      	cbz	r6, 80160b6 <rcl_action_take_result_response+0x76>
 8016082:	6820      	ldr	r0, [r4, #0]
 8016084:	4632      	mov	r2, r6
 8016086:	4629      	mov	r1, r5
 8016088:	3008      	adds	r0, #8
 801608a:	f7fd feb1 	bl	8013df0 <rcl_take_response>
 801608e:	b148      	cbz	r0, 80160a4 <rcl_action_take_result_response+0x64>
 8016090:	280a      	cmp	r0, #10
 8016092:	d007      	beq.n	80160a4 <rcl_action_take_result_response+0x64>
 8016094:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016098:	f640 0337 	movw	r3, #2103	@ 0x837
 801609c:	4290      	cmp	r0, r2
 801609e:	bf0c      	ite	eq
 80160a0:	4618      	moveq	r0, r3
 80160a2:	2001      	movne	r0, #1
 80160a4:	bd70      	pop	{r4, r5, r6, pc}
 80160a6:	f7f7 fefb 	bl	800dea0 <rcutils_reset_error>
 80160aa:	f640 0036 	movw	r0, #2102	@ 0x836
 80160ae:	bd70      	pop	{r4, r5, r6, pc}
 80160b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80160b4:	bd70      	pop	{r4, r5, r6, pc}
 80160b6:	200b      	movs	r0, #11
 80160b8:	bd70      	pop	{r4, r5, r6, pc}
 80160ba:	f640 0036 	movw	r0, #2102	@ 0x836
 80160be:	4770      	bx	lr

080160c0 <rcl_action_take_cancel_response>:
 80160c0:	2800      	cmp	r0, #0
 80160c2:	d03a      	beq.n	801613a <rcl_action_take_cancel_response+0x7a>
 80160c4:	b570      	push	{r4, r5, r6, lr}
 80160c6:	4604      	mov	r4, r0
 80160c8:	6800      	ldr	r0, [r0, #0]
 80160ca:	b388      	cbz	r0, 8016130 <rcl_action_take_cancel_response+0x70>
 80160cc:	460d      	mov	r5, r1
 80160ce:	4616      	mov	r6, r2
 80160d0:	f7fd fed6 	bl	8013e80 <rcl_client_is_valid>
 80160d4:	b338      	cbz	r0, 8016126 <rcl_action_take_cancel_response+0x66>
 80160d6:	6820      	ldr	r0, [r4, #0]
 80160d8:	3004      	adds	r0, #4
 80160da:	f7fd fed1 	bl	8013e80 <rcl_client_is_valid>
 80160de:	b310      	cbz	r0, 8016126 <rcl_action_take_cancel_response+0x66>
 80160e0:	6820      	ldr	r0, [r4, #0]
 80160e2:	3008      	adds	r0, #8
 80160e4:	f7fd fecc 	bl	8013e80 <rcl_client_is_valid>
 80160e8:	b1e8      	cbz	r0, 8016126 <rcl_action_take_cancel_response+0x66>
 80160ea:	6820      	ldr	r0, [r4, #0]
 80160ec:	300c      	adds	r0, #12
 80160ee:	f7fe fd3b 	bl	8014b68 <rcl_subscription_is_valid>
 80160f2:	b1c0      	cbz	r0, 8016126 <rcl_action_take_cancel_response+0x66>
 80160f4:	6820      	ldr	r0, [r4, #0]
 80160f6:	3010      	adds	r0, #16
 80160f8:	f7fe fd36 	bl	8014b68 <rcl_subscription_is_valid>
 80160fc:	b198      	cbz	r0, 8016126 <rcl_action_take_cancel_response+0x66>
 80160fe:	b1d5      	cbz	r5, 8016136 <rcl_action_take_cancel_response+0x76>
 8016100:	b1ce      	cbz	r6, 8016136 <rcl_action_take_cancel_response+0x76>
 8016102:	6820      	ldr	r0, [r4, #0]
 8016104:	4632      	mov	r2, r6
 8016106:	4629      	mov	r1, r5
 8016108:	3004      	adds	r0, #4
 801610a:	f7fd fe71 	bl	8013df0 <rcl_take_response>
 801610e:	b148      	cbz	r0, 8016124 <rcl_action_take_cancel_response+0x64>
 8016110:	280a      	cmp	r0, #10
 8016112:	d007      	beq.n	8016124 <rcl_action_take_cancel_response+0x64>
 8016114:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016118:	f640 0337 	movw	r3, #2103	@ 0x837
 801611c:	4290      	cmp	r0, r2
 801611e:	bf0c      	ite	eq
 8016120:	4618      	moveq	r0, r3
 8016122:	2001      	movne	r0, #1
 8016124:	bd70      	pop	{r4, r5, r6, pc}
 8016126:	f7f7 febb 	bl	800dea0 <rcutils_reset_error>
 801612a:	f640 0036 	movw	r0, #2102	@ 0x836
 801612e:	bd70      	pop	{r4, r5, r6, pc}
 8016130:	f640 0036 	movw	r0, #2102	@ 0x836
 8016134:	bd70      	pop	{r4, r5, r6, pc}
 8016136:	200b      	movs	r0, #11
 8016138:	bd70      	pop	{r4, r5, r6, pc}
 801613a:	f640 0036 	movw	r0, #2102	@ 0x836
 801613e:	4770      	bx	lr

08016140 <rcl_action_take_feedback>:
 8016140:	2800      	cmp	r0, #0
 8016142:	d038      	beq.n	80161b6 <rcl_action_take_feedback+0x76>
 8016144:	b530      	push	{r4, r5, lr}
 8016146:	4604      	mov	r4, r0
 8016148:	6800      	ldr	r0, [r0, #0]
 801614a:	b091      	sub	sp, #68	@ 0x44
 801614c:	b378      	cbz	r0, 80161ae <rcl_action_take_feedback+0x6e>
 801614e:	460d      	mov	r5, r1
 8016150:	f7fd fe96 	bl	8013e80 <rcl_client_is_valid>
 8016154:	b328      	cbz	r0, 80161a2 <rcl_action_take_feedback+0x62>
 8016156:	6820      	ldr	r0, [r4, #0]
 8016158:	3004      	adds	r0, #4
 801615a:	f7fd fe91 	bl	8013e80 <rcl_client_is_valid>
 801615e:	b300      	cbz	r0, 80161a2 <rcl_action_take_feedback+0x62>
 8016160:	6820      	ldr	r0, [r4, #0]
 8016162:	3008      	adds	r0, #8
 8016164:	f7fd fe8c 	bl	8013e80 <rcl_client_is_valid>
 8016168:	b1d8      	cbz	r0, 80161a2 <rcl_action_take_feedback+0x62>
 801616a:	6820      	ldr	r0, [r4, #0]
 801616c:	300c      	adds	r0, #12
 801616e:	f7fe fcfb 	bl	8014b68 <rcl_subscription_is_valid>
 8016172:	b1b0      	cbz	r0, 80161a2 <rcl_action_take_feedback+0x62>
 8016174:	6820      	ldr	r0, [r4, #0]
 8016176:	3010      	adds	r0, #16
 8016178:	f7fe fcf6 	bl	8014b68 <rcl_subscription_is_valid>
 801617c:	b188      	cbz	r0, 80161a2 <rcl_action_take_feedback+0x62>
 801617e:	b1ed      	cbz	r5, 80161bc <rcl_action_take_feedback+0x7c>
 8016180:	6820      	ldr	r0, [r4, #0]
 8016182:	2300      	movs	r3, #0
 8016184:	466a      	mov	r2, sp
 8016186:	4629      	mov	r1, r5
 8016188:	300c      	adds	r0, #12
 801618a:	f7fe fc8f 	bl	8014aac <rcl_take>
 801618e:	b160      	cbz	r0, 80161aa <rcl_action_take_feedback+0x6a>
 8016190:	f240 1391 	movw	r3, #401	@ 0x191
 8016194:	4298      	cmp	r0, r3
 8016196:	d014      	beq.n	80161c2 <rcl_action_take_feedback+0x82>
 8016198:	280a      	cmp	r0, #10
 801619a:	bf18      	it	ne
 801619c:	2001      	movne	r0, #1
 801619e:	b011      	add	sp, #68	@ 0x44
 80161a0:	bd30      	pop	{r4, r5, pc}
 80161a2:	f7f7 fe7d 	bl	800dea0 <rcutils_reset_error>
 80161a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80161aa:	b011      	add	sp, #68	@ 0x44
 80161ac:	bd30      	pop	{r4, r5, pc}
 80161ae:	f640 0036 	movw	r0, #2102	@ 0x836
 80161b2:	b011      	add	sp, #68	@ 0x44
 80161b4:	bd30      	pop	{r4, r5, pc}
 80161b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80161ba:	4770      	bx	lr
 80161bc:	200b      	movs	r0, #11
 80161be:	b011      	add	sp, #68	@ 0x44
 80161c0:	bd30      	pop	{r4, r5, pc}
 80161c2:	f640 0037 	movw	r0, #2103	@ 0x837
 80161c6:	e7f0      	b.n	80161aa <rcl_action_take_feedback+0x6a>

080161c8 <rcl_action_wait_set_add_action_client>:
 80161c8:	2800      	cmp	r0, #0
 80161ca:	d048      	beq.n	801625e <rcl_action_wait_set_add_action_client+0x96>
 80161cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161ce:	460c      	mov	r4, r1
 80161d0:	2900      	cmp	r1, #0
 80161d2:	d03c      	beq.n	801624e <rcl_action_wait_set_add_action_client+0x86>
 80161d4:	4605      	mov	r5, r0
 80161d6:	6808      	ldr	r0, [r1, #0]
 80161d8:	2800      	cmp	r0, #0
 80161da:	d038      	beq.n	801624e <rcl_action_wait_set_add_action_client+0x86>
 80161dc:	4617      	mov	r7, r2
 80161de:	461e      	mov	r6, r3
 80161e0:	f7fd fe4e 	bl	8013e80 <rcl_client_is_valid>
 80161e4:	b3b0      	cbz	r0, 8016254 <rcl_action_wait_set_add_action_client+0x8c>
 80161e6:	6820      	ldr	r0, [r4, #0]
 80161e8:	3004      	adds	r0, #4
 80161ea:	f7fd fe49 	bl	8013e80 <rcl_client_is_valid>
 80161ee:	b388      	cbz	r0, 8016254 <rcl_action_wait_set_add_action_client+0x8c>
 80161f0:	6820      	ldr	r0, [r4, #0]
 80161f2:	3008      	adds	r0, #8
 80161f4:	f7fd fe44 	bl	8013e80 <rcl_client_is_valid>
 80161f8:	b360      	cbz	r0, 8016254 <rcl_action_wait_set_add_action_client+0x8c>
 80161fa:	6820      	ldr	r0, [r4, #0]
 80161fc:	300c      	adds	r0, #12
 80161fe:	f7fe fcb3 	bl	8014b68 <rcl_subscription_is_valid>
 8016202:	b338      	cbz	r0, 8016254 <rcl_action_wait_set_add_action_client+0x8c>
 8016204:	6820      	ldr	r0, [r4, #0]
 8016206:	3010      	adds	r0, #16
 8016208:	f7fe fcae 	bl	8014b68 <rcl_subscription_is_valid>
 801620c:	b310      	cbz	r0, 8016254 <rcl_action_wait_set_add_action_client+0x8c>
 801620e:	6821      	ldr	r1, [r4, #0]
 8016210:	4628      	mov	r0, r5
 8016212:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8016216:	f7ff fccd 	bl	8015bb4 <rcl_wait_set_add_client>
 801621a:	b9b8      	cbnz	r0, 801624c <rcl_action_wait_set_add_action_client+0x84>
 801621c:	6821      	ldr	r1, [r4, #0]
 801621e:	4628      	mov	r0, r5
 8016220:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8016224:	3104      	adds	r1, #4
 8016226:	f7ff fcc5 	bl	8015bb4 <rcl_wait_set_add_client>
 801622a:	b978      	cbnz	r0, 801624c <rcl_action_wait_set_add_action_client+0x84>
 801622c:	6821      	ldr	r1, [r4, #0]
 801622e:	4628      	mov	r0, r5
 8016230:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016234:	3108      	adds	r1, #8
 8016236:	f7ff fcbd 	bl	8015bb4 <rcl_wait_set_add_client>
 801623a:	b938      	cbnz	r0, 801624c <rcl_action_wait_set_add_action_client+0x84>
 801623c:	6821      	ldr	r1, [r4, #0]
 801623e:	4628      	mov	r0, r5
 8016240:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016244:	310c      	adds	r1, #12
 8016246:	f7ff f96d 	bl	8015524 <rcl_wait_set_add_subscription>
 801624a:	b158      	cbz	r0, 8016264 <rcl_action_wait_set_add_action_client+0x9c>
 801624c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801624e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016254:	f7f7 fe24 	bl	800dea0 <rcutils_reset_error>
 8016258:	f640 0036 	movw	r0, #2102	@ 0x836
 801625c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801625e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016262:	4770      	bx	lr
 8016264:	6821      	ldr	r1, [r4, #0]
 8016266:	4628      	mov	r0, r5
 8016268:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801626c:	3110      	adds	r1, #16
 801626e:	f7ff f959 	bl	8015524 <rcl_wait_set_add_subscription>
 8016272:	2800      	cmp	r0, #0
 8016274:	d1ea      	bne.n	801624c <rcl_action_wait_set_add_action_client+0x84>
 8016276:	b11f      	cbz	r7, 8016280 <rcl_action_wait_set_add_action_client+0xb8>
 8016278:	6823      	ldr	r3, [r4, #0]
 801627a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801627e:	603b      	str	r3, [r7, #0]
 8016280:	2e00      	cmp	r6, #0
 8016282:	d0e3      	beq.n	801624c <rcl_action_wait_set_add_action_client+0x84>
 8016284:	6823      	ldr	r3, [r4, #0]
 8016286:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801628a:	6033      	str	r3, [r6, #0]
 801628c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801628e:	bf00      	nop

08016290 <rcl_action_client_wait_set_get_entities_ready>:
 8016290:	2800      	cmp	r0, #0
 8016292:	f000 808d 	beq.w	80163b0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8016296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801629a:	460c      	mov	r4, r1
 801629c:	2900      	cmp	r1, #0
 801629e:	d077      	beq.n	8016390 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80162a0:	4605      	mov	r5, r0
 80162a2:	6808      	ldr	r0, [r1, #0]
 80162a4:	2800      	cmp	r0, #0
 80162a6:	d073      	beq.n	8016390 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80162a8:	4616      	mov	r6, r2
 80162aa:	461f      	mov	r7, r3
 80162ac:	f7fd fde8 	bl	8013e80 <rcl_client_is_valid>
 80162b0:	2800      	cmp	r0, #0
 80162b2:	d071      	beq.n	8016398 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80162b4:	6820      	ldr	r0, [r4, #0]
 80162b6:	3004      	adds	r0, #4
 80162b8:	f7fd fde2 	bl	8013e80 <rcl_client_is_valid>
 80162bc:	2800      	cmp	r0, #0
 80162be:	d06b      	beq.n	8016398 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80162c0:	6820      	ldr	r0, [r4, #0]
 80162c2:	3008      	adds	r0, #8
 80162c4:	f7fd fddc 	bl	8013e80 <rcl_client_is_valid>
 80162c8:	2800      	cmp	r0, #0
 80162ca:	d065      	beq.n	8016398 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80162cc:	6820      	ldr	r0, [r4, #0]
 80162ce:	300c      	adds	r0, #12
 80162d0:	f7fe fc4a 	bl	8014b68 <rcl_subscription_is_valid>
 80162d4:	2800      	cmp	r0, #0
 80162d6:	d05f      	beq.n	8016398 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80162d8:	6820      	ldr	r0, [r4, #0]
 80162da:	3010      	adds	r0, #16
 80162dc:	f7fe fc44 	bl	8014b68 <rcl_subscription_is_valid>
 80162e0:	2800      	cmp	r0, #0
 80162e2:	d059      	beq.n	8016398 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80162e4:	2e00      	cmp	r6, #0
 80162e6:	d060      	beq.n	80163aa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80162e8:	2f00      	cmp	r7, #0
 80162ea:	d05e      	beq.n	80163aa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80162ec:	9b06      	ldr	r3, [sp, #24]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d05b      	beq.n	80163aa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80162f2:	9b07      	ldr	r3, [sp, #28]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d058      	beq.n	80163aa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80162f8:	9b08      	ldr	r3, [sp, #32]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d055      	beq.n	80163aa <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80162fe:	6823      	ldr	r3, [r4, #0]
 8016300:	686a      	ldr	r2, [r5, #4]
 8016302:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8016306:	428a      	cmp	r2, r1
 8016308:	d94c      	bls.n	80163a4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801630a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801630e:	4282      	cmp	r2, r0
 8016310:	d948      	bls.n	80163a4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016312:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8016316:	69ea      	ldr	r2, [r5, #28]
 8016318:	42a2      	cmp	r2, r4
 801631a:	d943      	bls.n	80163a4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801631c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8016320:	4562      	cmp	r2, ip
 8016322:	d93f      	bls.n	80163a4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016324:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016328:	4572      	cmp	r2, lr
 801632a:	d93b      	bls.n	80163a4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801632c:	69aa      	ldr	r2, [r5, #24]
 801632e:	682d      	ldr	r5, [r5, #0]
 8016330:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8016334:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016338:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801633c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016340:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016344:	f103 0c0c 	add.w	ip, r3, #12
 8016348:	eba5 050c 	sub.w	r5, r5, ip
 801634c:	fab5 f585 	clz	r5, r5
 8016350:	096d      	lsrs	r5, r5, #5
 8016352:	7035      	strb	r5, [r6, #0]
 8016354:	f103 0510 	add.w	r5, r3, #16
 8016358:	1b64      	subs	r4, r4, r5
 801635a:	fab4 f484 	clz	r4, r4
 801635e:	0964      	lsrs	r4, r4, #5
 8016360:	703c      	strb	r4, [r7, #0]
 8016362:	eba3 0008 	sub.w	r0, r3, r8
 8016366:	1d1c      	adds	r4, r3, #4
 8016368:	3308      	adds	r3, #8
 801636a:	1ad3      	subs	r3, r2, r3
 801636c:	fab0 f080 	clz	r0, r0
 8016370:	9a06      	ldr	r2, [sp, #24]
 8016372:	0940      	lsrs	r0, r0, #5
 8016374:	1b09      	subs	r1, r1, r4
 8016376:	7010      	strb	r0, [r2, #0]
 8016378:	fab1 f181 	clz	r1, r1
 801637c:	9a07      	ldr	r2, [sp, #28]
 801637e:	0949      	lsrs	r1, r1, #5
 8016380:	7011      	strb	r1, [r2, #0]
 8016382:	fab3 f383 	clz	r3, r3
 8016386:	9a08      	ldr	r2, [sp, #32]
 8016388:	095b      	lsrs	r3, r3, #5
 801638a:	2000      	movs	r0, #0
 801638c:	7013      	strb	r3, [r2, #0]
 801638e:	e001      	b.n	8016394 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016390:	f640 0036 	movw	r0, #2102	@ 0x836
 8016394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016398:	f7f7 fd82 	bl	800dea0 <rcutils_reset_error>
 801639c:	f640 0036 	movw	r0, #2102	@ 0x836
 80163a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163a4:	2001      	movs	r0, #1
 80163a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163aa:	200b      	movs	r0, #11
 80163ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163b0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80163b4:	4770      	bx	lr
 80163b6:	bf00      	nop

080163b8 <rcl_action_take_goal_request>:
 80163b8:	2800      	cmp	r0, #0
 80163ba:	d039      	beq.n	8016430 <rcl_action_take_goal_request+0x78>
 80163bc:	b570      	push	{r4, r5, r6, lr}
 80163be:	4604      	mov	r4, r0
 80163c0:	6800      	ldr	r0, [r0, #0]
 80163c2:	b380      	cbz	r0, 8016426 <rcl_action_take_goal_request+0x6e>
 80163c4:	460d      	mov	r5, r1
 80163c6:	4616      	mov	r6, r2
 80163c8:	f7fe fb66 	bl	8014a98 <rcl_service_is_valid>
 80163cc:	b330      	cbz	r0, 801641c <rcl_action_take_goal_request+0x64>
 80163ce:	6820      	ldr	r0, [r4, #0]
 80163d0:	3004      	adds	r0, #4
 80163d2:	f7fe fb61 	bl	8014a98 <rcl_service_is_valid>
 80163d6:	b308      	cbz	r0, 801641c <rcl_action_take_goal_request+0x64>
 80163d8:	6820      	ldr	r0, [r4, #0]
 80163da:	3008      	adds	r0, #8
 80163dc:	f7fe fb5c 	bl	8014a98 <rcl_service_is_valid>
 80163e0:	b1e0      	cbz	r0, 801641c <rcl_action_take_goal_request+0x64>
 80163e2:	6820      	ldr	r0, [r4, #0]
 80163e4:	300c      	adds	r0, #12
 80163e6:	f7f6 fd43 	bl	800ce70 <rcl_publisher_is_valid>
 80163ea:	b1b8      	cbz	r0, 801641c <rcl_action_take_goal_request+0x64>
 80163ec:	6820      	ldr	r0, [r4, #0]
 80163ee:	3010      	adds	r0, #16
 80163f0:	f7f6 fd3e 	bl	800ce70 <rcl_publisher_is_valid>
 80163f4:	b190      	cbz	r0, 801641c <rcl_action_take_goal_request+0x64>
 80163f6:	b1cd      	cbz	r5, 801642c <rcl_action_take_goal_request+0x74>
 80163f8:	b1c6      	cbz	r6, 801642c <rcl_action_take_goal_request+0x74>
 80163fa:	6820      	ldr	r0, [r4, #0]
 80163fc:	4632      	mov	r2, r6
 80163fe:	4629      	mov	r1, r5
 8016400:	f7fe faf2 	bl	80149e8 <rcl_take_request>
 8016404:	b148      	cbz	r0, 801641a <rcl_action_take_goal_request+0x62>
 8016406:	280a      	cmp	r0, #10
 8016408:	d007      	beq.n	801641a <rcl_action_take_goal_request+0x62>
 801640a:	f240 2259 	movw	r2, #601	@ 0x259
 801640e:	f640 0399 	movw	r3, #2201	@ 0x899
 8016412:	4290      	cmp	r0, r2
 8016414:	bf0c      	ite	eq
 8016416:	4618      	moveq	r0, r3
 8016418:	2001      	movne	r0, #1
 801641a:	bd70      	pop	{r4, r5, r6, pc}
 801641c:	f7f7 fd40 	bl	800dea0 <rcutils_reset_error>
 8016420:	f640 0098 	movw	r0, #2200	@ 0x898
 8016424:	bd70      	pop	{r4, r5, r6, pc}
 8016426:	f640 0098 	movw	r0, #2200	@ 0x898
 801642a:	bd70      	pop	{r4, r5, r6, pc}
 801642c:	200b      	movs	r0, #11
 801642e:	bd70      	pop	{r4, r5, r6, pc}
 8016430:	f640 0098 	movw	r0, #2200	@ 0x898
 8016434:	4770      	bx	lr
 8016436:	bf00      	nop

08016438 <rcl_action_send_goal_response>:
 8016438:	b390      	cbz	r0, 80164a0 <rcl_action_send_goal_response+0x68>
 801643a:	b570      	push	{r4, r5, r6, lr}
 801643c:	4604      	mov	r4, r0
 801643e:	6800      	ldr	r0, [r0, #0]
 8016440:	b348      	cbz	r0, 8016496 <rcl_action_send_goal_response+0x5e>
 8016442:	460d      	mov	r5, r1
 8016444:	4616      	mov	r6, r2
 8016446:	f7fe fb27 	bl	8014a98 <rcl_service_is_valid>
 801644a:	b1f8      	cbz	r0, 801648c <rcl_action_send_goal_response+0x54>
 801644c:	6820      	ldr	r0, [r4, #0]
 801644e:	3004      	adds	r0, #4
 8016450:	f7fe fb22 	bl	8014a98 <rcl_service_is_valid>
 8016454:	b1d0      	cbz	r0, 801648c <rcl_action_send_goal_response+0x54>
 8016456:	6820      	ldr	r0, [r4, #0]
 8016458:	3008      	adds	r0, #8
 801645a:	f7fe fb1d 	bl	8014a98 <rcl_service_is_valid>
 801645e:	b1a8      	cbz	r0, 801648c <rcl_action_send_goal_response+0x54>
 8016460:	6820      	ldr	r0, [r4, #0]
 8016462:	300c      	adds	r0, #12
 8016464:	f7f6 fd04 	bl	800ce70 <rcl_publisher_is_valid>
 8016468:	b180      	cbz	r0, 801648c <rcl_action_send_goal_response+0x54>
 801646a:	6820      	ldr	r0, [r4, #0]
 801646c:	3010      	adds	r0, #16
 801646e:	f7f6 fcff 	bl	800ce70 <rcl_publisher_is_valid>
 8016472:	b158      	cbz	r0, 801648c <rcl_action_send_goal_response+0x54>
 8016474:	b195      	cbz	r5, 801649c <rcl_action_send_goal_response+0x64>
 8016476:	b18e      	cbz	r6, 801649c <rcl_action_send_goal_response+0x64>
 8016478:	6820      	ldr	r0, [r4, #0]
 801647a:	4632      	mov	r2, r6
 801647c:	4629      	mov	r1, r5
 801647e:	f7fe faf3 	bl	8014a68 <rcl_send_response>
 8016482:	b110      	cbz	r0, 801648a <rcl_action_send_goal_response+0x52>
 8016484:	2802      	cmp	r0, #2
 8016486:	bf18      	it	ne
 8016488:	2001      	movne	r0, #1
 801648a:	bd70      	pop	{r4, r5, r6, pc}
 801648c:	f7f7 fd08 	bl	800dea0 <rcutils_reset_error>
 8016490:	f640 0098 	movw	r0, #2200	@ 0x898
 8016494:	bd70      	pop	{r4, r5, r6, pc}
 8016496:	f640 0098 	movw	r0, #2200	@ 0x898
 801649a:	bd70      	pop	{r4, r5, r6, pc}
 801649c:	200b      	movs	r0, #11
 801649e:	bd70      	pop	{r4, r5, r6, pc}
 80164a0:	f640 0098 	movw	r0, #2200	@ 0x898
 80164a4:	4770      	bx	lr
 80164a6:	bf00      	nop

080164a8 <rcl_action_take_result_request>:
 80164a8:	2800      	cmp	r0, #0
 80164aa:	d03a      	beq.n	8016522 <rcl_action_take_result_request+0x7a>
 80164ac:	b570      	push	{r4, r5, r6, lr}
 80164ae:	4604      	mov	r4, r0
 80164b0:	6800      	ldr	r0, [r0, #0]
 80164b2:	b388      	cbz	r0, 8016518 <rcl_action_take_result_request+0x70>
 80164b4:	460d      	mov	r5, r1
 80164b6:	4616      	mov	r6, r2
 80164b8:	f7fe faee 	bl	8014a98 <rcl_service_is_valid>
 80164bc:	b338      	cbz	r0, 801650e <rcl_action_take_result_request+0x66>
 80164be:	6820      	ldr	r0, [r4, #0]
 80164c0:	3004      	adds	r0, #4
 80164c2:	f7fe fae9 	bl	8014a98 <rcl_service_is_valid>
 80164c6:	b310      	cbz	r0, 801650e <rcl_action_take_result_request+0x66>
 80164c8:	6820      	ldr	r0, [r4, #0]
 80164ca:	3008      	adds	r0, #8
 80164cc:	f7fe fae4 	bl	8014a98 <rcl_service_is_valid>
 80164d0:	b1e8      	cbz	r0, 801650e <rcl_action_take_result_request+0x66>
 80164d2:	6820      	ldr	r0, [r4, #0]
 80164d4:	300c      	adds	r0, #12
 80164d6:	f7f6 fccb 	bl	800ce70 <rcl_publisher_is_valid>
 80164da:	b1c0      	cbz	r0, 801650e <rcl_action_take_result_request+0x66>
 80164dc:	6820      	ldr	r0, [r4, #0]
 80164de:	3010      	adds	r0, #16
 80164e0:	f7f6 fcc6 	bl	800ce70 <rcl_publisher_is_valid>
 80164e4:	b198      	cbz	r0, 801650e <rcl_action_take_result_request+0x66>
 80164e6:	b1d5      	cbz	r5, 801651e <rcl_action_take_result_request+0x76>
 80164e8:	b1ce      	cbz	r6, 801651e <rcl_action_take_result_request+0x76>
 80164ea:	6820      	ldr	r0, [r4, #0]
 80164ec:	4632      	mov	r2, r6
 80164ee:	4629      	mov	r1, r5
 80164f0:	3008      	adds	r0, #8
 80164f2:	f7fe fa79 	bl	80149e8 <rcl_take_request>
 80164f6:	b148      	cbz	r0, 801650c <rcl_action_take_result_request+0x64>
 80164f8:	280a      	cmp	r0, #10
 80164fa:	d007      	beq.n	801650c <rcl_action_take_result_request+0x64>
 80164fc:	f240 2259 	movw	r2, #601	@ 0x259
 8016500:	f640 0399 	movw	r3, #2201	@ 0x899
 8016504:	4290      	cmp	r0, r2
 8016506:	bf0c      	ite	eq
 8016508:	4618      	moveq	r0, r3
 801650a:	2001      	movne	r0, #1
 801650c:	bd70      	pop	{r4, r5, r6, pc}
 801650e:	f7f7 fcc7 	bl	800dea0 <rcutils_reset_error>
 8016512:	f640 0098 	movw	r0, #2200	@ 0x898
 8016516:	bd70      	pop	{r4, r5, r6, pc}
 8016518:	f640 0098 	movw	r0, #2200	@ 0x898
 801651c:	bd70      	pop	{r4, r5, r6, pc}
 801651e:	200b      	movs	r0, #11
 8016520:	bd70      	pop	{r4, r5, r6, pc}
 8016522:	f640 0098 	movw	r0, #2200	@ 0x898
 8016526:	4770      	bx	lr

08016528 <rcl_action_take_cancel_request>:
 8016528:	2800      	cmp	r0, #0
 801652a:	d03a      	beq.n	80165a2 <rcl_action_take_cancel_request+0x7a>
 801652c:	b570      	push	{r4, r5, r6, lr}
 801652e:	4604      	mov	r4, r0
 8016530:	6800      	ldr	r0, [r0, #0]
 8016532:	b388      	cbz	r0, 8016598 <rcl_action_take_cancel_request+0x70>
 8016534:	460d      	mov	r5, r1
 8016536:	4616      	mov	r6, r2
 8016538:	f7fe faae 	bl	8014a98 <rcl_service_is_valid>
 801653c:	b338      	cbz	r0, 801658e <rcl_action_take_cancel_request+0x66>
 801653e:	6820      	ldr	r0, [r4, #0]
 8016540:	3004      	adds	r0, #4
 8016542:	f7fe faa9 	bl	8014a98 <rcl_service_is_valid>
 8016546:	b310      	cbz	r0, 801658e <rcl_action_take_cancel_request+0x66>
 8016548:	6820      	ldr	r0, [r4, #0]
 801654a:	3008      	adds	r0, #8
 801654c:	f7fe faa4 	bl	8014a98 <rcl_service_is_valid>
 8016550:	b1e8      	cbz	r0, 801658e <rcl_action_take_cancel_request+0x66>
 8016552:	6820      	ldr	r0, [r4, #0]
 8016554:	300c      	adds	r0, #12
 8016556:	f7f6 fc8b 	bl	800ce70 <rcl_publisher_is_valid>
 801655a:	b1c0      	cbz	r0, 801658e <rcl_action_take_cancel_request+0x66>
 801655c:	6820      	ldr	r0, [r4, #0]
 801655e:	3010      	adds	r0, #16
 8016560:	f7f6 fc86 	bl	800ce70 <rcl_publisher_is_valid>
 8016564:	b198      	cbz	r0, 801658e <rcl_action_take_cancel_request+0x66>
 8016566:	b1d5      	cbz	r5, 801659e <rcl_action_take_cancel_request+0x76>
 8016568:	b1ce      	cbz	r6, 801659e <rcl_action_take_cancel_request+0x76>
 801656a:	6820      	ldr	r0, [r4, #0]
 801656c:	4632      	mov	r2, r6
 801656e:	4629      	mov	r1, r5
 8016570:	3004      	adds	r0, #4
 8016572:	f7fe fa39 	bl	80149e8 <rcl_take_request>
 8016576:	b148      	cbz	r0, 801658c <rcl_action_take_cancel_request+0x64>
 8016578:	280a      	cmp	r0, #10
 801657a:	d007      	beq.n	801658c <rcl_action_take_cancel_request+0x64>
 801657c:	f240 2259 	movw	r2, #601	@ 0x259
 8016580:	f640 0399 	movw	r3, #2201	@ 0x899
 8016584:	4290      	cmp	r0, r2
 8016586:	bf0c      	ite	eq
 8016588:	4618      	moveq	r0, r3
 801658a:	2001      	movne	r0, #1
 801658c:	bd70      	pop	{r4, r5, r6, pc}
 801658e:	f7f7 fc87 	bl	800dea0 <rcutils_reset_error>
 8016592:	f640 0098 	movw	r0, #2200	@ 0x898
 8016596:	bd70      	pop	{r4, r5, r6, pc}
 8016598:	f640 0098 	movw	r0, #2200	@ 0x898
 801659c:	bd70      	pop	{r4, r5, r6, pc}
 801659e:	200b      	movs	r0, #11
 80165a0:	bd70      	pop	{r4, r5, r6, pc}
 80165a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80165a6:	4770      	bx	lr

080165a8 <rcl_action_send_cancel_response>:
 80165a8:	b398      	cbz	r0, 8016612 <rcl_action_send_cancel_response+0x6a>
 80165aa:	b570      	push	{r4, r5, r6, lr}
 80165ac:	4604      	mov	r4, r0
 80165ae:	6800      	ldr	r0, [r0, #0]
 80165b0:	b350      	cbz	r0, 8016608 <rcl_action_send_cancel_response+0x60>
 80165b2:	460d      	mov	r5, r1
 80165b4:	4616      	mov	r6, r2
 80165b6:	f7fe fa6f 	bl	8014a98 <rcl_service_is_valid>
 80165ba:	b300      	cbz	r0, 80165fe <rcl_action_send_cancel_response+0x56>
 80165bc:	6820      	ldr	r0, [r4, #0]
 80165be:	3004      	adds	r0, #4
 80165c0:	f7fe fa6a 	bl	8014a98 <rcl_service_is_valid>
 80165c4:	b1d8      	cbz	r0, 80165fe <rcl_action_send_cancel_response+0x56>
 80165c6:	6820      	ldr	r0, [r4, #0]
 80165c8:	3008      	adds	r0, #8
 80165ca:	f7fe fa65 	bl	8014a98 <rcl_service_is_valid>
 80165ce:	b1b0      	cbz	r0, 80165fe <rcl_action_send_cancel_response+0x56>
 80165d0:	6820      	ldr	r0, [r4, #0]
 80165d2:	300c      	adds	r0, #12
 80165d4:	f7f6 fc4c 	bl	800ce70 <rcl_publisher_is_valid>
 80165d8:	b188      	cbz	r0, 80165fe <rcl_action_send_cancel_response+0x56>
 80165da:	6820      	ldr	r0, [r4, #0]
 80165dc:	3010      	adds	r0, #16
 80165de:	f7f6 fc47 	bl	800ce70 <rcl_publisher_is_valid>
 80165e2:	b160      	cbz	r0, 80165fe <rcl_action_send_cancel_response+0x56>
 80165e4:	b19d      	cbz	r5, 801660e <rcl_action_send_cancel_response+0x66>
 80165e6:	b196      	cbz	r6, 801660e <rcl_action_send_cancel_response+0x66>
 80165e8:	6820      	ldr	r0, [r4, #0]
 80165ea:	4632      	mov	r2, r6
 80165ec:	4629      	mov	r1, r5
 80165ee:	3004      	adds	r0, #4
 80165f0:	f7fe fa3a 	bl	8014a68 <rcl_send_response>
 80165f4:	b110      	cbz	r0, 80165fc <rcl_action_send_cancel_response+0x54>
 80165f6:	2802      	cmp	r0, #2
 80165f8:	bf18      	it	ne
 80165fa:	2001      	movne	r0, #1
 80165fc:	bd70      	pop	{r4, r5, r6, pc}
 80165fe:	f7f7 fc4f 	bl	800dea0 <rcutils_reset_error>
 8016602:	f640 0098 	movw	r0, #2200	@ 0x898
 8016606:	bd70      	pop	{r4, r5, r6, pc}
 8016608:	f640 0098 	movw	r0, #2200	@ 0x898
 801660c:	bd70      	pop	{r4, r5, r6, pc}
 801660e:	200b      	movs	r0, #11
 8016610:	bd70      	pop	{r4, r5, r6, pc}
 8016612:	f640 0098 	movw	r0, #2200	@ 0x898
 8016616:	4770      	bx	lr

08016618 <rcl_action_wait_set_add_action_server>:
 8016618:	2800      	cmp	r0, #0
 801661a:	d04d      	beq.n	80166b8 <rcl_action_wait_set_add_action_server+0xa0>
 801661c:	b570      	push	{r4, r5, r6, lr}
 801661e:	460c      	mov	r4, r1
 8016620:	b159      	cbz	r1, 801663a <rcl_action_wait_set_add_action_server+0x22>
 8016622:	4605      	mov	r5, r0
 8016624:	6808      	ldr	r0, [r1, #0]
 8016626:	b140      	cbz	r0, 801663a <rcl_action_wait_set_add_action_server+0x22>
 8016628:	4616      	mov	r6, r2
 801662a:	f7fe fa35 	bl	8014a98 <rcl_service_is_valid>
 801662e:	b120      	cbz	r0, 801663a <rcl_action_wait_set_add_action_server+0x22>
 8016630:	6820      	ldr	r0, [r4, #0]
 8016632:	3004      	adds	r0, #4
 8016634:	f7fe fa30 	bl	8014a98 <rcl_service_is_valid>
 8016638:	b910      	cbnz	r0, 8016640 <rcl_action_wait_set_add_action_server+0x28>
 801663a:	f640 0098 	movw	r0, #2200	@ 0x898
 801663e:	bd70      	pop	{r4, r5, r6, pc}
 8016640:	6820      	ldr	r0, [r4, #0]
 8016642:	3008      	adds	r0, #8
 8016644:	f7fe fa28 	bl	8014a98 <rcl_service_is_valid>
 8016648:	2800      	cmp	r0, #0
 801664a:	d0f6      	beq.n	801663a <rcl_action_wait_set_add_action_server+0x22>
 801664c:	6820      	ldr	r0, [r4, #0]
 801664e:	300c      	adds	r0, #12
 8016650:	f7f6 fc26 	bl	800cea0 <rcl_publisher_is_valid_except_context>
 8016654:	2800      	cmp	r0, #0
 8016656:	d0f0      	beq.n	801663a <rcl_action_wait_set_add_action_server+0x22>
 8016658:	6820      	ldr	r0, [r4, #0]
 801665a:	3010      	adds	r0, #16
 801665c:	f7f6 fc20 	bl	800cea0 <rcl_publisher_is_valid_except_context>
 8016660:	2800      	cmp	r0, #0
 8016662:	d0ea      	beq.n	801663a <rcl_action_wait_set_add_action_server+0x22>
 8016664:	6821      	ldr	r1, [r4, #0]
 8016666:	4628      	mov	r0, r5
 8016668:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801666c:	f7ff face 	bl	8015c0c <rcl_wait_set_add_service>
 8016670:	2800      	cmp	r0, #0
 8016672:	d1e4      	bne.n	801663e <rcl_action_wait_set_add_action_server+0x26>
 8016674:	6821      	ldr	r1, [r4, #0]
 8016676:	4628      	mov	r0, r5
 8016678:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801667c:	3104      	adds	r1, #4
 801667e:	f7ff fac5 	bl	8015c0c <rcl_wait_set_add_service>
 8016682:	2800      	cmp	r0, #0
 8016684:	d1db      	bne.n	801663e <rcl_action_wait_set_add_action_server+0x26>
 8016686:	6821      	ldr	r1, [r4, #0]
 8016688:	4628      	mov	r0, r5
 801668a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801668e:	3108      	adds	r1, #8
 8016690:	f7ff fabc 	bl	8015c0c <rcl_wait_set_add_service>
 8016694:	2800      	cmp	r0, #0
 8016696:	d1d2      	bne.n	801663e <rcl_action_wait_set_add_action_server+0x26>
 8016698:	6821      	ldr	r1, [r4, #0]
 801669a:	4628      	mov	r0, r5
 801669c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80166a0:	3114      	adds	r1, #20
 80166a2:	f7ff fa57 	bl	8015b54 <rcl_wait_set_add_timer>
 80166a6:	2800      	cmp	r0, #0
 80166a8:	d1c9      	bne.n	801663e <rcl_action_wait_set_add_action_server+0x26>
 80166aa:	2e00      	cmp	r6, #0
 80166ac:	d0c7      	beq.n	801663e <rcl_action_wait_set_add_action_server+0x26>
 80166ae:	6823      	ldr	r3, [r4, #0]
 80166b0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80166b4:	6033      	str	r3, [r6, #0]
 80166b6:	bd70      	pop	{r4, r5, r6, pc}
 80166b8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80166bc:	4770      	bx	lr
 80166be:	bf00      	nop

080166c0 <rcl_action_server_wait_set_get_entities_ready>:
 80166c0:	2800      	cmp	r0, #0
 80166c2:	d05a      	beq.n	801677a <rcl_action_server_wait_set_get_entities_ready+0xba>
 80166c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166c6:	460c      	mov	r4, r1
 80166c8:	b161      	cbz	r1, 80166e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80166ca:	4605      	mov	r5, r0
 80166cc:	6808      	ldr	r0, [r1, #0]
 80166ce:	b148      	cbz	r0, 80166e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80166d0:	4616      	mov	r6, r2
 80166d2:	461f      	mov	r7, r3
 80166d4:	f7fe f9e0 	bl	8014a98 <rcl_service_is_valid>
 80166d8:	b120      	cbz	r0, 80166e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80166da:	6820      	ldr	r0, [r4, #0]
 80166dc:	3004      	adds	r0, #4
 80166de:	f7fe f9db 	bl	8014a98 <rcl_service_is_valid>
 80166e2:	b910      	cbnz	r0, 80166ea <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80166e4:	f640 0098 	movw	r0, #2200	@ 0x898
 80166e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166ea:	6820      	ldr	r0, [r4, #0]
 80166ec:	3008      	adds	r0, #8
 80166ee:	f7fe f9d3 	bl	8014a98 <rcl_service_is_valid>
 80166f2:	2800      	cmp	r0, #0
 80166f4:	d0f6      	beq.n	80166e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80166f6:	6820      	ldr	r0, [r4, #0]
 80166f8:	300c      	adds	r0, #12
 80166fa:	f7f6 fbd1 	bl	800cea0 <rcl_publisher_is_valid_except_context>
 80166fe:	2800      	cmp	r0, #0
 8016700:	d0f0      	beq.n	80166e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016702:	6820      	ldr	r0, [r4, #0]
 8016704:	3010      	adds	r0, #16
 8016706:	f7f6 fbcb 	bl	800cea0 <rcl_publisher_is_valid_except_context>
 801670a:	2800      	cmp	r0, #0
 801670c:	d0ea      	beq.n	80166e4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801670e:	b3be      	cbz	r6, 8016780 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016710:	b3b7      	cbz	r7, 8016780 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016712:	9b06      	ldr	r3, [sp, #24]
 8016714:	b3a3      	cbz	r3, 8016780 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016716:	9b07      	ldr	r3, [sp, #28]
 8016718:	b393      	cbz	r3, 8016780 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801671a:	6821      	ldr	r1, [r4, #0]
 801671c:	692a      	ldr	r2, [r5, #16]
 801671e:	6a2c      	ldr	r4, [r5, #32]
 8016720:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8016724:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8016728:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801672c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016730:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016734:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016738:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801673c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016740:	1a64      	subs	r4, r4, r1
 8016742:	fab4 f484 	clz	r4, r4
 8016746:	0964      	lsrs	r4, r4, #5
 8016748:	7034      	strb	r4, [r6, #0]
 801674a:	1d0c      	adds	r4, r1, #4
 801674c:	1b1b      	subs	r3, r3, r4
 801674e:	fab3 f383 	clz	r3, r3
 8016752:	095b      	lsrs	r3, r3, #5
 8016754:	f101 0408 	add.w	r4, r1, #8
 8016758:	703b      	strb	r3, [r7, #0]
 801675a:	f101 0314 	add.w	r3, r1, #20
 801675e:	1b01      	subs	r1, r0, r4
 8016760:	1ad3      	subs	r3, r2, r3
 8016762:	fab1 f181 	clz	r1, r1
 8016766:	9a06      	ldr	r2, [sp, #24]
 8016768:	0949      	lsrs	r1, r1, #5
 801676a:	7011      	strb	r1, [r2, #0]
 801676c:	fab3 f383 	clz	r3, r3
 8016770:	9a07      	ldr	r2, [sp, #28]
 8016772:	095b      	lsrs	r3, r3, #5
 8016774:	2000      	movs	r0, #0
 8016776:	7013      	strb	r3, [r2, #0]
 8016778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801677a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801677e:	4770      	bx	lr
 8016780:	200b      	movs	r0, #11
 8016782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016784 <_execute_event_handler>:
 8016784:	2002      	movs	r0, #2
 8016786:	4770      	bx	lr

08016788 <_cancel_goal_event_handler>:
 8016788:	2003      	movs	r0, #3
 801678a:	4770      	bx	lr

0801678c <_succeed_event_handler>:
 801678c:	2004      	movs	r0, #4
 801678e:	4770      	bx	lr

08016790 <_abort_event_handler>:
 8016790:	2006      	movs	r0, #6
 8016792:	4770      	bx	lr

08016794 <_canceled_event_handler>:
 8016794:	2005      	movs	r0, #5
 8016796:	4770      	bx	lr

08016798 <rcl_action_transition_goal_state>:
 8016798:	b2c2      	uxtb	r2, r0
 801679a:	2a06      	cmp	r2, #6
 801679c:	d80c      	bhi.n	80167b8 <rcl_action_transition_goal_state+0x20>
 801679e:	2904      	cmp	r1, #4
 80167a0:	d80a      	bhi.n	80167b8 <rcl_action_transition_goal_state+0x20>
 80167a2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80167a6:	b410      	push	{r4}
 80167a8:	1853      	adds	r3, r2, r1
 80167aa:	4c06      	ldr	r4, [pc, #24]	@ (80167c4 <rcl_action_transition_goal_state+0x2c>)
 80167ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80167b0:	b123      	cbz	r3, 80167bc <rcl_action_transition_goal_state+0x24>
 80167b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167b6:	4718      	bx	r3
 80167b8:	2000      	movs	r0, #0
 80167ba:	4770      	bx	lr
 80167bc:	2000      	movs	r0, #0
 80167be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167c2:	4770      	bx	lr
 80167c4:	0801c548 	.word	0x0801c548

080167c8 <rcl_action_get_zero_initialized_cancel_response>:
 80167c8:	b510      	push	{r4, lr}
 80167ca:	4c07      	ldr	r4, [pc, #28]	@ (80167e8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80167cc:	4686      	mov	lr, r0
 80167ce:	4684      	mov	ip, r0
 80167d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80167d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80167dc:	6823      	ldr	r3, [r4, #0]
 80167de:	f8cc 3000 	str.w	r3, [ip]
 80167e2:	4670      	mov	r0, lr
 80167e4:	bd10      	pop	{r4, pc}
 80167e6:	bf00      	nop
 80167e8:	0801c5d4 	.word	0x0801c5d4

080167ec <rclc_action_send_result_request>:
 80167ec:	b1d0      	cbz	r0, 8016824 <rclc_action_send_result_request+0x38>
 80167ee:	b500      	push	{lr}
 80167f0:	4684      	mov	ip, r0
 80167f2:	b087      	sub	sp, #28
 80167f4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80167f8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80167fc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016800:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8016804:	f10d 0e08 	add.w	lr, sp, #8
 8016808:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801680c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016810:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8016814:	a902      	add	r1, sp, #8
 8016816:	3010      	adds	r0, #16
 8016818:	f7ff fbda 	bl	8015fd0 <rcl_action_send_result_request>
 801681c:	b920      	cbnz	r0, 8016828 <rclc_action_send_result_request+0x3c>
 801681e:	b007      	add	sp, #28
 8016820:	f85d fb04 	ldr.w	pc, [sp], #4
 8016824:	200b      	movs	r0, #11
 8016826:	4770      	bx	lr
 8016828:	9001      	str	r0, [sp, #4]
 801682a:	f7f7 fb39 	bl	800dea0 <rcutils_reset_error>
 801682e:	9801      	ldr	r0, [sp, #4]
 8016830:	b007      	add	sp, #28
 8016832:	f85d fb04 	ldr.w	pc, [sp], #4
 8016836:	bf00      	nop

08016838 <rclc_action_take_goal_handle>:
 8016838:	b160      	cbz	r0, 8016854 <rclc_action_take_goal_handle+0x1c>
 801683a:	6883      	ldr	r3, [r0, #8]
 801683c:	b143      	cbz	r3, 8016850 <rclc_action_take_goal_handle+0x18>
 801683e:	6819      	ldr	r1, [r3, #0]
 8016840:	6081      	str	r1, [r0, #8]
 8016842:	2200      	movs	r2, #0
 8016844:	721a      	strb	r2, [r3, #8]
 8016846:	68c1      	ldr	r1, [r0, #12]
 8016848:	6019      	str	r1, [r3, #0]
 801684a:	621a      	str	r2, [r3, #32]
 801684c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801684e:	60c3      	str	r3, [r0, #12]
 8016850:	4618      	mov	r0, r3
 8016852:	4770      	bx	lr
 8016854:	4603      	mov	r3, r0
 8016856:	e7fb      	b.n	8016850 <rclc_action_take_goal_handle+0x18>

08016858 <rclc_action_remove_used_goal_handle>:
 8016858:	b180      	cbz	r0, 801687c <rclc_action_remove_used_goal_handle+0x24>
 801685a:	b179      	cbz	r1, 801687c <rclc_action_remove_used_goal_handle+0x24>
 801685c:	68c3      	ldr	r3, [r0, #12]
 801685e:	4299      	cmp	r1, r3
 8016860:	d00d      	beq.n	801687e <rclc_action_remove_used_goal_handle+0x26>
 8016862:	b12b      	cbz	r3, 8016870 <rclc_action_remove_used_goal_handle+0x18>
 8016864:	681a      	ldr	r2, [r3, #0]
 8016866:	4291      	cmp	r1, r2
 8016868:	d003      	beq.n	8016872 <rclc_action_remove_used_goal_handle+0x1a>
 801686a:	4613      	mov	r3, r2
 801686c:	2b00      	cmp	r3, #0
 801686e:	d1f9      	bne.n	8016864 <rclc_action_remove_used_goal_handle+0xc>
 8016870:	4770      	bx	lr
 8016872:	680a      	ldr	r2, [r1, #0]
 8016874:	601a      	str	r2, [r3, #0]
 8016876:	6883      	ldr	r3, [r0, #8]
 8016878:	600b      	str	r3, [r1, #0]
 801687a:	6081      	str	r1, [r0, #8]
 801687c:	4770      	bx	lr
 801687e:	680b      	ldr	r3, [r1, #0]
 8016880:	60c3      	str	r3, [r0, #12]
 8016882:	e7f8      	b.n	8016876 <rclc_action_remove_used_goal_handle+0x1e>

08016884 <rclc_action_find_goal_handle_by_uuid>:
 8016884:	b538      	push	{r3, r4, r5, lr}
 8016886:	b180      	cbz	r0, 80168aa <rclc_action_find_goal_handle_by_uuid+0x26>
 8016888:	460d      	mov	r5, r1
 801688a:	b181      	cbz	r1, 80168ae <rclc_action_find_goal_handle_by_uuid+0x2a>
 801688c:	68c4      	ldr	r4, [r0, #12]
 801688e:	b914      	cbnz	r4, 8016896 <rclc_action_find_goal_handle_by_uuid+0x12>
 8016890:	e009      	b.n	80168a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016892:	6824      	ldr	r4, [r4, #0]
 8016894:	b13c      	cbz	r4, 80168a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016896:	f104 0009 	add.w	r0, r4, #9
 801689a:	2210      	movs	r2, #16
 801689c:	4629      	mov	r1, r5
 801689e:	f003 fa2f 	bl	8019d00 <memcmp>
 80168a2:	2800      	cmp	r0, #0
 80168a4:	d1f5      	bne.n	8016892 <rclc_action_find_goal_handle_by_uuid+0xe>
 80168a6:	4620      	mov	r0, r4
 80168a8:	bd38      	pop	{r3, r4, r5, pc}
 80168aa:	4604      	mov	r4, r0
 80168ac:	e7fb      	b.n	80168a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80168ae:	460c      	mov	r4, r1
 80168b0:	e7f9      	b.n	80168a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80168b2:	bf00      	nop

080168b4 <rclc_action_find_first_handle_by_status>:
 80168b4:	b140      	cbz	r0, 80168c8 <rclc_action_find_first_handle_by_status+0x14>
 80168b6:	68c0      	ldr	r0, [r0, #12]
 80168b8:	b910      	cbnz	r0, 80168c0 <rclc_action_find_first_handle_by_status+0xc>
 80168ba:	e005      	b.n	80168c8 <rclc_action_find_first_handle_by_status+0x14>
 80168bc:	6800      	ldr	r0, [r0, #0]
 80168be:	b118      	cbz	r0, 80168c8 <rclc_action_find_first_handle_by_status+0x14>
 80168c0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80168c4:	428b      	cmp	r3, r1
 80168c6:	d1f9      	bne.n	80168bc <rclc_action_find_first_handle_by_status+0x8>
 80168c8:	4770      	bx	lr
 80168ca:	bf00      	nop

080168cc <rclc_action_find_first_terminated_handle>:
 80168cc:	b140      	cbz	r0, 80168e0 <rclc_action_find_first_terminated_handle+0x14>
 80168ce:	68c0      	ldr	r0, [r0, #12]
 80168d0:	b910      	cbnz	r0, 80168d8 <rclc_action_find_first_terminated_handle+0xc>
 80168d2:	e005      	b.n	80168e0 <rclc_action_find_first_terminated_handle+0x14>
 80168d4:	6800      	ldr	r0, [r0, #0]
 80168d6:	b118      	cbz	r0, 80168e0 <rclc_action_find_first_terminated_handle+0x14>
 80168d8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80168dc:	2b03      	cmp	r3, #3
 80168de:	ddf9      	ble.n	80168d4 <rclc_action_find_first_terminated_handle+0x8>
 80168e0:	4770      	bx	lr
 80168e2:	bf00      	nop

080168e4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80168e4:	b170      	cbz	r0, 8016904 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80168e6:	68c0      	ldr	r0, [r0, #12]
 80168e8:	b160      	cbz	r0, 8016904 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80168ea:	b410      	push	{r4}
 80168ec:	e001      	b.n	80168f2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80168ee:	6800      	ldr	r0, [r0, #0]
 80168f0:	b128      	cbz	r0, 80168fe <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80168f2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80168f6:	4299      	cmp	r1, r3
 80168f8:	bf08      	it	eq
 80168fa:	4294      	cmpeq	r4, r2
 80168fc:	d1f7      	bne.n	80168ee <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80168fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016902:	4770      	bx	lr
 8016904:	4770      	bx	lr
 8016906:	bf00      	nop

08016908 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016908:	b170      	cbz	r0, 8016928 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801690a:	68c0      	ldr	r0, [r0, #12]
 801690c:	b160      	cbz	r0, 8016928 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801690e:	b410      	push	{r4}
 8016910:	e001      	b.n	8016916 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016912:	6800      	ldr	r0, [r0, #0]
 8016914:	b128      	cbz	r0, 8016922 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016916:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801691a:	4299      	cmp	r1, r3
 801691c:	bf08      	it	eq
 801691e:	4294      	cmpeq	r4, r2
 8016920:	d1f7      	bne.n	8016912 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016926:	4770      	bx	lr
 8016928:	4770      	bx	lr
 801692a:	bf00      	nop

0801692c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801692c:	b170      	cbz	r0, 801694c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801692e:	68c0      	ldr	r0, [r0, #12]
 8016930:	b160      	cbz	r0, 801694c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016932:	b410      	push	{r4}
 8016934:	e001      	b.n	801693a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8016936:	6800      	ldr	r0, [r0, #0]
 8016938:	b128      	cbz	r0, 8016946 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801693a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801693e:	4299      	cmp	r1, r3
 8016940:	bf08      	it	eq
 8016942:	4294      	cmpeq	r4, r2
 8016944:	d1f7      	bne.n	8016936 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8016946:	f85d 4b04 	ldr.w	r4, [sp], #4
 801694a:	4770      	bx	lr
 801694c:	4770      	bx	lr
 801694e:	bf00      	nop

08016950 <rclc_action_find_first_handle_with_goal_response>:
 8016950:	b140      	cbz	r0, 8016964 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016952:	68c0      	ldr	r0, [r0, #12]
 8016954:	b910      	cbnz	r0, 801695c <rclc_action_find_first_handle_with_goal_response+0xc>
 8016956:	e005      	b.n	8016964 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016958:	6800      	ldr	r0, [r0, #0]
 801695a:	b118      	cbz	r0, 8016964 <rclc_action_find_first_handle_with_goal_response+0x14>
 801695c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d0f9      	beq.n	8016958 <rclc_action_find_first_handle_with_goal_response+0x8>
 8016964:	4770      	bx	lr
 8016966:	bf00      	nop

08016968 <rclc_action_find_first_handle_with_result_response>:
 8016968:	b140      	cbz	r0, 801697c <rclc_action_find_first_handle_with_result_response+0x14>
 801696a:	68c0      	ldr	r0, [r0, #12]
 801696c:	b910      	cbnz	r0, 8016974 <rclc_action_find_first_handle_with_result_response+0xc>
 801696e:	e005      	b.n	801697c <rclc_action_find_first_handle_with_result_response+0x14>
 8016970:	6800      	ldr	r0, [r0, #0]
 8016972:	b118      	cbz	r0, 801697c <rclc_action_find_first_handle_with_result_response+0x14>
 8016974:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8016978:	2b00      	cmp	r3, #0
 801697a:	d0f9      	beq.n	8016970 <rclc_action_find_first_handle_with_result_response+0x8>
 801697c:	4770      	bx	lr
 801697e:	bf00      	nop

08016980 <rclc_action_server_response_goal_request>:
 8016980:	b198      	cbz	r0, 80169aa <rclc_action_server_response_goal_request+0x2a>
 8016982:	b510      	push	{r4, lr}
 8016984:	6844      	ldr	r4, [r0, #4]
 8016986:	b086      	sub	sp, #24
 8016988:	2200      	movs	r2, #0
 801698a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801698e:	460b      	mov	r3, r1
 8016990:	9205      	str	r2, [sp, #20]
 8016992:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8016996:	aa03      	add	r2, sp, #12
 8016998:	f104 0010 	add.w	r0, r4, #16
 801699c:	f88d 300c 	strb.w	r3, [sp, #12]
 80169a0:	f7ff fd4a 	bl	8016438 <rcl_action_send_goal_response>
 80169a4:	b918      	cbnz	r0, 80169ae <rclc_action_server_response_goal_request+0x2e>
 80169a6:	b006      	add	sp, #24
 80169a8:	bd10      	pop	{r4, pc}
 80169aa:	200b      	movs	r0, #11
 80169ac:	4770      	bx	lr
 80169ae:	9001      	str	r0, [sp, #4]
 80169b0:	f7f7 fa76 	bl	800dea0 <rcutils_reset_error>
 80169b4:	9801      	ldr	r0, [sp, #4]
 80169b6:	b006      	add	sp, #24
 80169b8:	bd10      	pop	{r4, pc}
 80169ba:	bf00      	nop
 80169bc:	0000      	movs	r0, r0
	...

080169c0 <rclc_action_server_goal_cancel_accept>:
 80169c0:	b310      	cbz	r0, 8016a08 <rclc_action_server_goal_cancel_accept+0x48>
 80169c2:	b510      	push	{r4, lr}
 80169c4:	b090      	sub	sp, #64	@ 0x40
 80169c6:	4604      	mov	r4, r0
 80169c8:	a806      	add	r0, sp, #24
 80169ca:	f7ff fefd 	bl	80167c8 <rcl_action_get_zero_initialized_cancel_response>
 80169ce:	2300      	movs	r3, #0
 80169d0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80169d4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80169d8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80169dc:	f88d 3018 	strb.w	r3, [sp, #24]
 80169e0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80169e4:	f8cd d01c 	str.w	sp, [sp, #28]
 80169e8:	46ec      	mov	ip, sp
 80169ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169ee:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016a10 <rclc_action_server_goal_cancel_accept+0x50>
 80169f2:	6860      	ldr	r0, [r4, #4]
 80169f4:	aa06      	add	r2, sp, #24
 80169f6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80169fa:	3010      	adds	r0, #16
 80169fc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016a00:	f7ff fdd2 	bl	80165a8 <rcl_action_send_cancel_response>
 8016a04:	b010      	add	sp, #64	@ 0x40
 8016a06:	bd10      	pop	{r4, pc}
 8016a08:	200b      	movs	r0, #11
 8016a0a:	4770      	bx	lr
 8016a0c:	f3af 8000 	nop.w
 8016a10:	00000001 	.word	0x00000001
 8016a14:	00000001 	.word	0x00000001

08016a18 <rclc_action_server_goal_cancel_reject>:
 8016a18:	b082      	sub	sp, #8
 8016a1a:	b530      	push	{r4, r5, lr}
 8016a1c:	b08b      	sub	sp, #44	@ 0x2c
 8016a1e:	ac0e      	add	r4, sp, #56	@ 0x38
 8016a20:	e884 000c 	stmia.w	r4, {r2, r3}
 8016a24:	b188      	cbz	r0, 8016a4a <rclc_action_server_goal_cancel_reject+0x32>
 8016a26:	4604      	mov	r4, r0
 8016a28:	a801      	add	r0, sp, #4
 8016a2a:	460d      	mov	r5, r1
 8016a2c:	f7ff fecc 	bl	80167c8 <rcl_action_get_zero_initialized_cancel_response>
 8016a30:	aa01      	add	r2, sp, #4
 8016a32:	a90e      	add	r1, sp, #56	@ 0x38
 8016a34:	f104 0010 	add.w	r0, r4, #16
 8016a38:	f88d 5004 	strb.w	r5, [sp, #4]
 8016a3c:	f7ff fdb4 	bl	80165a8 <rcl_action_send_cancel_response>
 8016a40:	b00b      	add	sp, #44	@ 0x2c
 8016a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a46:	b002      	add	sp, #8
 8016a48:	4770      	bx	lr
 8016a4a:	200b      	movs	r0, #11
 8016a4c:	b00b      	add	sp, #44	@ 0x2c
 8016a4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a52:	b002      	add	sp, #8
 8016a54:	4770      	bx	lr
 8016a56:	bf00      	nop

08016a58 <__atomic_load_8>:
 8016a58:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016a5c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016a60:	4a15      	ldr	r2, [pc, #84]	@ (8016ab8 <__atomic_load_8+0x60>)
 8016a62:	4b16      	ldr	r3, [pc, #88]	@ (8016abc <__atomic_load_8+0x64>)
 8016a64:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016a68:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016a6c:	fb02 f101 	mul.w	r1, r2, r1
 8016a70:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016a74:	fba3 2301 	umull	r2, r3, r3, r1
 8016a78:	091b      	lsrs	r3, r3, #4
 8016a7a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8016a7e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8016a82:	b4d0      	push	{r4, r6, r7}
 8016a84:	4c0e      	ldr	r4, [pc, #56]	@ (8016ac0 <__atomic_load_8+0x68>)
 8016a86:	1ac9      	subs	r1, r1, r3
 8016a88:	1862      	adds	r2, r4, r1
 8016a8a:	f04f 0c01 	mov.w	ip, #1
 8016a8e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8016a92:	e8c2 cf46 	strexb	r6, ip, [r2]
 8016a96:	2e00      	cmp	r6, #0
 8016a98:	d1f9      	bne.n	8016a8e <__atomic_load_8+0x36>
 8016a9a:	f3bf 8f5b 	dmb	ish
 8016a9e:	b2db      	uxtb	r3, r3
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d1f4      	bne.n	8016a8e <__atomic_load_8+0x36>
 8016aa4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016aa8:	f3bf 8f5b 	dmb	ish
 8016aac:	5463      	strb	r3, [r4, r1]
 8016aae:	4630      	mov	r0, r6
 8016ab0:	4639      	mov	r1, r7
 8016ab2:	bcd0      	pop	{r4, r6, r7}
 8016ab4:	4770      	bx	lr
 8016ab6:	bf00      	nop
 8016ab8:	27d4eb2d 	.word	0x27d4eb2d
 8016abc:	b21642c9 	.word	0xb21642c9
 8016ac0:	2000b950 	.word	0x2000b950

08016ac4 <__atomic_store_8>:
 8016ac4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016ac8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016acc:	b570      	push	{r4, r5, r6, lr}
 8016ace:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016ad2:	4c14      	ldr	r4, [pc, #80]	@ (8016b24 <__atomic_store_8+0x60>)
 8016ad4:	4d14      	ldr	r5, [pc, #80]	@ (8016b28 <__atomic_store_8+0x64>)
 8016ad6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016ada:	fb04 f101 	mul.w	r1, r4, r1
 8016ade:	4c13      	ldr	r4, [pc, #76]	@ (8016b2c <__atomic_store_8+0x68>)
 8016ae0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016ae4:	fba4 4e01 	umull	r4, lr, r4, r1
 8016ae8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8016aec:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8016af0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8016af4:	eba1 0e0e 	sub.w	lr, r1, lr
 8016af8:	eb05 0c0e 	add.w	ip, r5, lr
 8016afc:	f04f 0401 	mov.w	r4, #1
 8016b00:	e8dc 1f4f 	ldrexb	r1, [ip]
 8016b04:	e8cc 4f46 	strexb	r6, r4, [ip]
 8016b08:	2e00      	cmp	r6, #0
 8016b0a:	d1f9      	bne.n	8016b00 <__atomic_store_8+0x3c>
 8016b0c:	f3bf 8f5b 	dmb	ish
 8016b10:	b2c9      	uxtb	r1, r1
 8016b12:	2900      	cmp	r1, #0
 8016b14:	d1f4      	bne.n	8016b00 <__atomic_store_8+0x3c>
 8016b16:	e9c0 2300 	strd	r2, r3, [r0]
 8016b1a:	f3bf 8f5b 	dmb	ish
 8016b1e:	f805 100e 	strb.w	r1, [r5, lr]
 8016b22:	bd70      	pop	{r4, r5, r6, pc}
 8016b24:	27d4eb2d 	.word	0x27d4eb2d
 8016b28:	2000b950 	.word	0x2000b950
 8016b2c:	b21642c9 	.word	0xb21642c9

08016b30 <__atomic_exchange_8>:
 8016b30:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8016b34:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8016b38:	4916      	ldr	r1, [pc, #88]	@ (8016b94 <__atomic_exchange_8+0x64>)
 8016b3a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8016b3e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8016b42:	fb01 fc0c 	mul.w	ip, r1, ip
 8016b46:	4914      	ldr	r1, [pc, #80]	@ (8016b98 <__atomic_exchange_8+0x68>)
 8016b48:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8016b4c:	b570      	push	{r4, r5, r6, lr}
 8016b4e:	4605      	mov	r5, r0
 8016b50:	fba1 010c 	umull	r0, r1, r1, ip
 8016b54:	0909      	lsrs	r1, r1, #4
 8016b56:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8016b5a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8016b5e:	4e0f      	ldr	r6, [pc, #60]	@ (8016b9c <__atomic_exchange_8+0x6c>)
 8016b60:	ebac 0c01 	sub.w	ip, ip, r1
 8016b64:	eb06 010c 	add.w	r1, r6, ip
 8016b68:	f04f 0e01 	mov.w	lr, #1
 8016b6c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8016b70:	e8c1 ef40 	strexb	r0, lr, [r1]
 8016b74:	2800      	cmp	r0, #0
 8016b76:	d1f9      	bne.n	8016b6c <__atomic_exchange_8+0x3c>
 8016b78:	f3bf 8f5b 	dmb	ish
 8016b7c:	b2e4      	uxtb	r4, r4
 8016b7e:	2c00      	cmp	r4, #0
 8016b80:	d1f4      	bne.n	8016b6c <__atomic_exchange_8+0x3c>
 8016b82:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016b86:	e9c5 2300 	strd	r2, r3, [r5]
 8016b8a:	f3bf 8f5b 	dmb	ish
 8016b8e:	f806 400c 	strb.w	r4, [r6, ip]
 8016b92:	bd70      	pop	{r4, r5, r6, pc}
 8016b94:	27d4eb2d 	.word	0x27d4eb2d
 8016b98:	b21642c9 	.word	0xb21642c9
 8016b9c:	2000b950 	.word	0x2000b950

08016ba0 <rcutils_get_env>:
 8016ba0:	b168      	cbz	r0, 8016bbe <rcutils_get_env+0x1e>
 8016ba2:	b510      	push	{r4, lr}
 8016ba4:	460c      	mov	r4, r1
 8016ba6:	b129      	cbz	r1, 8016bb4 <rcutils_get_env+0x14>
 8016ba8:	f002 fc18 	bl	80193dc <getenv>
 8016bac:	b120      	cbz	r0, 8016bb8 <rcutils_get_env+0x18>
 8016bae:	6020      	str	r0, [r4, #0]
 8016bb0:	2000      	movs	r0, #0
 8016bb2:	bd10      	pop	{r4, pc}
 8016bb4:	4803      	ldr	r0, [pc, #12]	@ (8016bc4 <rcutils_get_env+0x24>)
 8016bb6:	bd10      	pop	{r4, pc}
 8016bb8:	4b03      	ldr	r3, [pc, #12]	@ (8016bc8 <rcutils_get_env+0x28>)
 8016bba:	6023      	str	r3, [r4, #0]
 8016bbc:	bd10      	pop	{r4, pc}
 8016bbe:	4803      	ldr	r0, [pc, #12]	@ (8016bcc <rcutils_get_env+0x2c>)
 8016bc0:	4770      	bx	lr
 8016bc2:	bf00      	nop
 8016bc4:	0801c614 	.word	0x0801c614
 8016bc8:	0801c9ec 	.word	0x0801c9ec
 8016bcc:	0801c5f8 	.word	0x0801c5f8

08016bd0 <rcutils_is_directory>:
 8016bd0:	2000      	movs	r0, #0
 8016bd2:	4770      	bx	lr

08016bd4 <rcutils_join_path>:
 8016bd4:	b082      	sub	sp, #8
 8016bd6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016bda:	2000      	movs	r0, #0
 8016bdc:	b002      	add	sp, #8
 8016bde:	4770      	bx	lr

08016be0 <rcutils_to_native_path>:
 8016be0:	b084      	sub	sp, #16
 8016be2:	a801      	add	r0, sp, #4
 8016be4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016be8:	b004      	add	sp, #16
 8016bea:	2000      	movs	r0, #0
 8016bec:	4770      	bx	lr
 8016bee:	bf00      	nop

08016bf0 <rcutils_format_string_limit>:
 8016bf0:	b40f      	push	{r0, r1, r2, r3}
 8016bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bf4:	b083      	sub	sp, #12
 8016bf6:	ac08      	add	r4, sp, #32
 8016bf8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8016bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016bfe:	b34e      	cbz	r6, 8016c54 <rcutils_format_string_limit+0x64>
 8016c00:	a808      	add	r0, sp, #32
 8016c02:	f7f7 f927 	bl	800de54 <rcutils_allocator_is_valid>
 8016c06:	b328      	cbz	r0, 8016c54 <rcutils_format_string_limit+0x64>
 8016c08:	2100      	movs	r1, #0
 8016c0a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8016c0c:	4632      	mov	r2, r6
 8016c0e:	4608      	mov	r0, r1
 8016c10:	e9cd 3300 	strd	r3, r3, [sp]
 8016c14:	f000 f8f4 	bl	8016e00 <rcutils_vsnprintf>
 8016c18:	1c43      	adds	r3, r0, #1
 8016c1a:	4605      	mov	r5, r0
 8016c1c:	d01a      	beq.n	8016c54 <rcutils_format_string_limit+0x64>
 8016c1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016c20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016c22:	1c47      	adds	r7, r0, #1
 8016c24:	429f      	cmp	r7, r3
 8016c26:	bf84      	itt	hi
 8016c28:	461f      	movhi	r7, r3
 8016c2a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8016c2e:	4638      	mov	r0, r7
 8016c30:	9b08      	ldr	r3, [sp, #32]
 8016c32:	4798      	blx	r3
 8016c34:	4604      	mov	r4, r0
 8016c36:	b168      	cbz	r0, 8016c54 <rcutils_format_string_limit+0x64>
 8016c38:	9b01      	ldr	r3, [sp, #4]
 8016c3a:	4632      	mov	r2, r6
 8016c3c:	4639      	mov	r1, r7
 8016c3e:	f000 f8df 	bl	8016e00 <rcutils_vsnprintf>
 8016c42:	2800      	cmp	r0, #0
 8016c44:	db02      	blt.n	8016c4c <rcutils_format_string_limit+0x5c>
 8016c46:	2300      	movs	r3, #0
 8016c48:	5563      	strb	r3, [r4, r5]
 8016c4a:	e004      	b.n	8016c56 <rcutils_format_string_limit+0x66>
 8016c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c4e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016c50:	4620      	mov	r0, r4
 8016c52:	4798      	blx	r3
 8016c54:	2400      	movs	r4, #0
 8016c56:	4620      	mov	r0, r4
 8016c58:	b003      	add	sp, #12
 8016c5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016c5e:	b004      	add	sp, #16
 8016c60:	4770      	bx	lr
 8016c62:	bf00      	nop

08016c64 <rcutils_repl_str>:
 8016c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c68:	ed2d 8b02 	vpush	{d8}
 8016c6c:	b087      	sub	sp, #28
 8016c6e:	4680      	mov	r8, r0
 8016c70:	4608      	mov	r0, r1
 8016c72:	f8cd 8004 	str.w	r8, [sp, #4]
 8016c76:	ee08 2a10 	vmov	s16, r2
 8016c7a:	468a      	mov	sl, r1
 8016c7c:	4699      	mov	r9, r3
 8016c7e:	f7e9 fad9 	bl	8000234 <strlen>
 8016c82:	2600      	movs	r6, #0
 8016c84:	4647      	mov	r7, r8
 8016c86:	9002      	str	r0, [sp, #8]
 8016c88:	46b3      	mov	fp, r6
 8016c8a:	2510      	movs	r5, #16
 8016c8c:	46b0      	mov	r8, r6
 8016c8e:	e01d      	b.n	8016ccc <rcutils_repl_str+0x68>
 8016c90:	f10b 0b01 	add.w	fp, fp, #1
 8016c94:	455e      	cmp	r6, fp
 8016c96:	d211      	bcs.n	8016cbc <rcutils_repl_str+0x58>
 8016c98:	442e      	add	r6, r5
 8016c9a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016c9e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016ca2:	00b1      	lsls	r1, r6, #2
 8016ca4:	4798      	blx	r3
 8016ca6:	2800      	cmp	r0, #0
 8016ca8:	f000 8088 	beq.w	8016dbc <rcutils_repl_str+0x158>
 8016cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016cb0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8016cb4:	4680      	mov	r8, r0
 8016cb6:	bf28      	it	cs
 8016cb8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8016cbc:	9a01      	ldr	r2, [sp, #4]
 8016cbe:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016cc2:	1aa2      	subs	r2, r4, r2
 8016cc4:	f843 2c04 	str.w	r2, [r3, #-4]
 8016cc8:	9b02      	ldr	r3, [sp, #8]
 8016cca:	18e7      	adds	r7, r4, r3
 8016ccc:	4651      	mov	r1, sl
 8016cce:	4638      	mov	r0, r7
 8016cd0:	f003 f867 	bl	8019da2 <strstr>
 8016cd4:	4604      	mov	r4, r0
 8016cd6:	4640      	mov	r0, r8
 8016cd8:	2c00      	cmp	r4, #0
 8016cda:	d1d9      	bne.n	8016c90 <rcutils_repl_str+0x2c>
 8016cdc:	46b8      	mov	r8, r7
 8016cde:	4607      	mov	r7, r0
 8016ce0:	4640      	mov	r0, r8
 8016ce2:	f7e9 faa7 	bl	8000234 <strlen>
 8016ce6:	9b01      	ldr	r3, [sp, #4]
 8016ce8:	eba8 0303 	sub.w	r3, r8, r3
 8016cec:	181c      	adds	r4, r3, r0
 8016cee:	9404      	str	r4, [sp, #16]
 8016cf0:	f1bb 0f00 	cmp.w	fp, #0
 8016cf4:	d04a      	beq.n	8016d8c <rcutils_repl_str+0x128>
 8016cf6:	ee18 0a10 	vmov	r0, s16
 8016cfa:	f7e9 fa9b 	bl	8000234 <strlen>
 8016cfe:	9b02      	ldr	r3, [sp, #8]
 8016d00:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016d04:	1ac3      	subs	r3, r0, r3
 8016d06:	fb0b 4303 	mla	r3, fp, r3, r4
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	9305      	str	r3, [sp, #20]
 8016d0e:	4606      	mov	r6, r0
 8016d10:	f8d9 3000 	ldr.w	r3, [r9]
 8016d14:	1c50      	adds	r0, r2, #1
 8016d16:	4798      	blx	r3
 8016d18:	9003      	str	r0, [sp, #12]
 8016d1a:	2800      	cmp	r0, #0
 8016d1c:	d04f      	beq.n	8016dbe <rcutils_repl_str+0x15a>
 8016d1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016d22:	683a      	ldr	r2, [r7, #0]
 8016d24:	4641      	mov	r1, r8
 8016d26:	f003 f8de 	bl	8019ee6 <memcpy>
 8016d2a:	683d      	ldr	r5, [r7, #0]
 8016d2c:	9b03      	ldr	r3, [sp, #12]
 8016d2e:	9701      	str	r7, [sp, #4]
 8016d30:	46ba      	mov	sl, r7
 8016d32:	441d      	add	r5, r3
 8016d34:	9f02      	ldr	r7, [sp, #8]
 8016d36:	f8cd 9008 	str.w	r9, [sp, #8]
 8016d3a:	2401      	movs	r4, #1
 8016d3c:	46d1      	mov	r9, sl
 8016d3e:	ee18 aa10 	vmov	sl, s16
 8016d42:	e00a      	b.n	8016d5a <rcutils_repl_str+0xf6>
 8016d44:	f8d9 5000 	ldr.w	r5, [r9]
 8016d48:	1aaa      	subs	r2, r5, r2
 8016d4a:	1885      	adds	r5, r0, r2
 8016d4c:	f003 f8cb 	bl	8019ee6 <memcpy>
 8016d50:	45a3      	cmp	fp, r4
 8016d52:	f104 0201 	add.w	r2, r4, #1
 8016d56:	d935      	bls.n	8016dc4 <rcutils_repl_str+0x160>
 8016d58:	4614      	mov	r4, r2
 8016d5a:	4632      	mov	r2, r6
 8016d5c:	4651      	mov	r1, sl
 8016d5e:	4628      	mov	r0, r5
 8016d60:	f003 f8c1 	bl	8019ee6 <memcpy>
 8016d64:	f859 2b04 	ldr.w	r2, [r9], #4
 8016d68:	45a3      	cmp	fp, r4
 8016d6a:	443a      	add	r2, r7
 8016d6c:	eb05 0006 	add.w	r0, r5, r6
 8016d70:	eb08 0102 	add.w	r1, r8, r2
 8016d74:	d1e6      	bne.n	8016d44 <rcutils_repl_str+0xe0>
 8016d76:	9b04      	ldr	r3, [sp, #16]
 8016d78:	1a9a      	subs	r2, r3, r2
 8016d7a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016d7e:	f003 f8b2 	bl	8019ee6 <memcpy>
 8016d82:	9a03      	ldr	r2, [sp, #12]
 8016d84:	9905      	ldr	r1, [sp, #20]
 8016d86:	2300      	movs	r3, #0
 8016d88:	5453      	strb	r3, [r2, r1]
 8016d8a:	e00b      	b.n	8016da4 <rcutils_repl_str+0x140>
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	f8d9 3000 	ldr.w	r3, [r9]
 8016d92:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016d96:	3001      	adds	r0, #1
 8016d98:	4798      	blx	r3
 8016d9a:	9003      	str	r0, [sp, #12]
 8016d9c:	b110      	cbz	r0, 8016da4 <rcutils_repl_str+0x140>
 8016d9e:	9901      	ldr	r1, [sp, #4]
 8016da0:	f003 f899 	bl	8019ed6 <strcpy>
 8016da4:	4638      	mov	r0, r7
 8016da6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016daa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016dae:	4798      	blx	r3
 8016db0:	9803      	ldr	r0, [sp, #12]
 8016db2:	b007      	add	sp, #28
 8016db4:	ecbd 8b02 	vpop	{d8}
 8016db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dbc:	4647      	mov	r7, r8
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	9303      	str	r3, [sp, #12]
 8016dc2:	e7ef      	b.n	8016da4 <rcutils_repl_str+0x140>
 8016dc4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016dc8:	e7db      	b.n	8016d82 <rcutils_repl_str+0x11e>
 8016dca:	bf00      	nop

08016dcc <rcutils_snprintf>:
 8016dcc:	b40c      	push	{r2, r3}
 8016dce:	b530      	push	{r4, r5, lr}
 8016dd0:	b083      	sub	sp, #12
 8016dd2:	ab06      	add	r3, sp, #24
 8016dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016dd8:	9301      	str	r3, [sp, #4]
 8016dda:	b152      	cbz	r2, 8016df2 <rcutils_snprintf+0x26>
 8016ddc:	b138      	cbz	r0, 8016dee <rcutils_snprintf+0x22>
 8016dde:	b141      	cbz	r1, 8016df2 <rcutils_snprintf+0x26>
 8016de0:	f002 feec 	bl	8019bbc <vsniprintf>
 8016de4:	b003      	add	sp, #12
 8016de6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016dea:	b002      	add	sp, #8
 8016dec:	4770      	bx	lr
 8016dee:	2900      	cmp	r1, #0
 8016df0:	d0f6      	beq.n	8016de0 <rcutils_snprintf+0x14>
 8016df2:	f003 f843 	bl	8019e7c <__errno>
 8016df6:	2316      	movs	r3, #22
 8016df8:	6003      	str	r3, [r0, #0]
 8016dfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016dfe:	e7f1      	b.n	8016de4 <rcutils_snprintf+0x18>

08016e00 <rcutils_vsnprintf>:
 8016e00:	b570      	push	{r4, r5, r6, lr}
 8016e02:	b13a      	cbz	r2, 8016e14 <rcutils_vsnprintf+0x14>
 8016e04:	b120      	cbz	r0, 8016e10 <rcutils_vsnprintf+0x10>
 8016e06:	b129      	cbz	r1, 8016e14 <rcutils_vsnprintf+0x14>
 8016e08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e0c:	f002 bed6 	b.w	8019bbc <vsniprintf>
 8016e10:	2900      	cmp	r1, #0
 8016e12:	d0f9      	beq.n	8016e08 <rcutils_vsnprintf+0x8>
 8016e14:	f003 f832 	bl	8019e7c <__errno>
 8016e18:	2316      	movs	r3, #22
 8016e1a:	6003      	str	r3, [r0, #0]
 8016e1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016e20:	bd70      	pop	{r4, r5, r6, pc}
 8016e22:	bf00      	nop

08016e24 <rcutils_strdup>:
 8016e24:	b084      	sub	sp, #16
 8016e26:	b570      	push	{r4, r5, r6, lr}
 8016e28:	b082      	sub	sp, #8
 8016e2a:	ac07      	add	r4, sp, #28
 8016e2c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016e30:	4605      	mov	r5, r0
 8016e32:	b1b0      	cbz	r0, 8016e62 <rcutils_strdup+0x3e>
 8016e34:	f7e9 f9fe 	bl	8000234 <strlen>
 8016e38:	1c42      	adds	r2, r0, #1
 8016e3a:	9b07      	ldr	r3, [sp, #28]
 8016e3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016e3e:	9201      	str	r2, [sp, #4]
 8016e40:	4606      	mov	r6, r0
 8016e42:	4610      	mov	r0, r2
 8016e44:	4798      	blx	r3
 8016e46:	4604      	mov	r4, r0
 8016e48:	b128      	cbz	r0, 8016e56 <rcutils_strdup+0x32>
 8016e4a:	9a01      	ldr	r2, [sp, #4]
 8016e4c:	4629      	mov	r1, r5
 8016e4e:	f003 f84a 	bl	8019ee6 <memcpy>
 8016e52:	2300      	movs	r3, #0
 8016e54:	55a3      	strb	r3, [r4, r6]
 8016e56:	4620      	mov	r0, r4
 8016e58:	b002      	add	sp, #8
 8016e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e5e:	b004      	add	sp, #16
 8016e60:	4770      	bx	lr
 8016e62:	4604      	mov	r4, r0
 8016e64:	e7f7      	b.n	8016e56 <rcutils_strdup+0x32>
 8016e66:	bf00      	nop

08016e68 <rcutils_strndup>:
 8016e68:	b082      	sub	sp, #8
 8016e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e6c:	ac06      	add	r4, sp, #24
 8016e6e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016e72:	4605      	mov	r5, r0
 8016e74:	b188      	cbz	r0, 8016e9a <rcutils_strndup+0x32>
 8016e76:	1c4f      	adds	r7, r1, #1
 8016e78:	460e      	mov	r6, r1
 8016e7a:	4638      	mov	r0, r7
 8016e7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016e7e:	4790      	blx	r2
 8016e80:	4604      	mov	r4, r0
 8016e82:	b128      	cbz	r0, 8016e90 <rcutils_strndup+0x28>
 8016e84:	463a      	mov	r2, r7
 8016e86:	4629      	mov	r1, r5
 8016e88:	f003 f82d 	bl	8019ee6 <memcpy>
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	55a3      	strb	r3, [r4, r6]
 8016e90:	4620      	mov	r0, r4
 8016e92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016e96:	b002      	add	sp, #8
 8016e98:	4770      	bx	lr
 8016e9a:	4604      	mov	r4, r0
 8016e9c:	e7f8      	b.n	8016e90 <rcutils_strndup+0x28>
 8016e9e:	bf00      	nop

08016ea0 <rcutils_get_zero_initialized_string_map>:
 8016ea0:	4b01      	ldr	r3, [pc, #4]	@ (8016ea8 <rcutils_get_zero_initialized_string_map+0x8>)
 8016ea2:	2000      	movs	r0, #0
 8016ea4:	6018      	str	r0, [r3, #0]
 8016ea6:	4770      	bx	lr
 8016ea8:	2000b968 	.word	0x2000b968

08016eac <rcutils_string_map_reserve>:
 8016eac:	2800      	cmp	r0, #0
 8016eae:	d05f      	beq.n	8016f70 <rcutils_string_map_reserve+0xc4>
 8016eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb4:	460c      	mov	r4, r1
 8016eb6:	6801      	ldr	r1, [r0, #0]
 8016eb8:	b082      	sub	sp, #8
 8016eba:	4605      	mov	r5, r0
 8016ebc:	b129      	cbz	r1, 8016eca <rcutils_string_map_reserve+0x1e>
 8016ebe:	68cb      	ldr	r3, [r1, #12]
 8016ec0:	42a3      	cmp	r3, r4
 8016ec2:	d906      	bls.n	8016ed2 <rcutils_string_map_reserve+0x26>
 8016ec4:	461c      	mov	r4, r3
 8016ec6:	2900      	cmp	r1, #0
 8016ec8:	d1f9      	bne.n	8016ebe <rcutils_string_map_reserve+0x12>
 8016eca:	201f      	movs	r0, #31
 8016ecc:	b002      	add	sp, #8
 8016ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ed2:	688b      	ldr	r3, [r1, #8]
 8016ed4:	42a3      	cmp	r3, r4
 8016ed6:	d047      	beq.n	8016f68 <rcutils_string_map_reserve+0xbc>
 8016ed8:	6a0e      	ldr	r6, [r1, #32]
 8016eda:	2c00      	cmp	r4, #0
 8016edc:	d034      	beq.n	8016f48 <rcutils_string_map_reserve+0x9c>
 8016ede:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8016ee2:	d243      	bcs.n	8016f6c <rcutils_string_map_reserve+0xc0>
 8016ee4:	00a7      	lsls	r7, r4, #2
 8016ee6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8016eea:	6808      	ldr	r0, [r1, #0]
 8016eec:	4632      	mov	r2, r6
 8016eee:	4639      	mov	r1, r7
 8016ef0:	47c0      	blx	r8
 8016ef2:	2800      	cmp	r0, #0
 8016ef4:	d03a      	beq.n	8016f6c <rcutils_string_map_reserve+0xc0>
 8016ef6:	682b      	ldr	r3, [r5, #0]
 8016ef8:	4632      	mov	r2, r6
 8016efa:	6018      	str	r0, [r3, #0]
 8016efc:	4639      	mov	r1, r7
 8016efe:	6858      	ldr	r0, [r3, #4]
 8016f00:	47c0      	blx	r8
 8016f02:	2800      	cmp	r0, #0
 8016f04:	d032      	beq.n	8016f6c <rcutils_string_map_reserve+0xc0>
 8016f06:	682d      	ldr	r5, [r5, #0]
 8016f08:	68ab      	ldr	r3, [r5, #8]
 8016f0a:	6068      	str	r0, [r5, #4]
 8016f0c:	42a3      	cmp	r3, r4
 8016f0e:	d226      	bcs.n	8016f5e <rcutils_string_map_reserve+0xb2>
 8016f10:	682a      	ldr	r2, [r5, #0]
 8016f12:	eb00 0c07 	add.w	ip, r0, r7
 8016f16:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8016f1a:	45e6      	cmp	lr, ip
 8016f1c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016f20:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016f24:	d203      	bcs.n	8016f2e <rcutils_string_map_reserve+0x82>
 8016f26:	eb02 0c07 	add.w	ip, r2, r7
 8016f2a:	4566      	cmp	r6, ip
 8016f2c:	d322      	bcc.n	8016f74 <rcutils_string_map_reserve+0xc8>
 8016f2e:	1ae3      	subs	r3, r4, r3
 8016f30:	009a      	lsls	r2, r3, #2
 8016f32:	4670      	mov	r0, lr
 8016f34:	2100      	movs	r1, #0
 8016f36:	9201      	str	r2, [sp, #4]
 8016f38:	f002 ff0c 	bl	8019d54 <memset>
 8016f3c:	9a01      	ldr	r2, [sp, #4]
 8016f3e:	2100      	movs	r1, #0
 8016f40:	4630      	mov	r0, r6
 8016f42:	f002 ff07 	bl	8019d54 <memset>
 8016f46:	e00a      	b.n	8016f5e <rcutils_string_map_reserve+0xb2>
 8016f48:	694f      	ldr	r7, [r1, #20]
 8016f4a:	6808      	ldr	r0, [r1, #0]
 8016f4c:	4631      	mov	r1, r6
 8016f4e:	47b8      	blx	r7
 8016f50:	682b      	ldr	r3, [r5, #0]
 8016f52:	4631      	mov	r1, r6
 8016f54:	6858      	ldr	r0, [r3, #4]
 8016f56:	601c      	str	r4, [r3, #0]
 8016f58:	47b8      	blx	r7
 8016f5a:	682d      	ldr	r5, [r5, #0]
 8016f5c:	606c      	str	r4, [r5, #4]
 8016f5e:	2000      	movs	r0, #0
 8016f60:	60ac      	str	r4, [r5, #8]
 8016f62:	b002      	add	sp, #8
 8016f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f68:	2000      	movs	r0, #0
 8016f6a:	e7af      	b.n	8016ecc <rcutils_string_map_reserve+0x20>
 8016f6c:	200a      	movs	r0, #10
 8016f6e:	e7ad      	b.n	8016ecc <rcutils_string_map_reserve+0x20>
 8016f70:	200b      	movs	r0, #11
 8016f72:	4770      	bx	lr
 8016f74:	1f0b      	subs	r3, r1, #4
 8016f76:	4418      	add	r0, r3
 8016f78:	4413      	add	r3, r2
 8016f7a:	3a04      	subs	r2, #4
 8016f7c:	4417      	add	r7, r2
 8016f7e:	2200      	movs	r2, #0
 8016f80:	f843 2f04 	str.w	r2, [r3, #4]!
 8016f84:	42bb      	cmp	r3, r7
 8016f86:	f840 2f04 	str.w	r2, [r0, #4]!
 8016f8a:	d1f9      	bne.n	8016f80 <rcutils_string_map_reserve+0xd4>
 8016f8c:	e7e7      	b.n	8016f5e <rcutils_string_map_reserve+0xb2>
 8016f8e:	bf00      	nop

08016f90 <rcutils_string_map_init>:
 8016f90:	b082      	sub	sp, #8
 8016f92:	b570      	push	{r4, r5, r6, lr}
 8016f94:	ac04      	add	r4, sp, #16
 8016f96:	e884 000c 	stmia.w	r4, {r2, r3}
 8016f9a:	b380      	cbz	r0, 8016ffe <rcutils_string_map_init+0x6e>
 8016f9c:	6806      	ldr	r6, [r0, #0]
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	b12e      	cbz	r6, 8016fae <rcutils_string_map_init+0x1e>
 8016fa2:	251e      	movs	r5, #30
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016faa:	b002      	add	sp, #8
 8016fac:	4770      	bx	lr
 8016fae:	a804      	add	r0, sp, #16
 8016fb0:	460d      	mov	r5, r1
 8016fb2:	f7f6 ff4f 	bl	800de54 <rcutils_allocator_is_valid>
 8016fb6:	b310      	cbz	r0, 8016ffe <rcutils_string_map_init+0x6e>
 8016fb8:	9b04      	ldr	r3, [sp, #16]
 8016fba:	9908      	ldr	r1, [sp, #32]
 8016fbc:	2024      	movs	r0, #36	@ 0x24
 8016fbe:	4798      	blx	r3
 8016fc0:	6020      	str	r0, [r4, #0]
 8016fc2:	b310      	cbz	r0, 801700a <rcutils_string_map_init+0x7a>
 8016fc4:	f10d 0e10 	add.w	lr, sp, #16
 8016fc8:	e9c0 6600 	strd	r6, r6, [r0]
 8016fcc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016fd0:	f100 0c10 	add.w	ip, r0, #16
 8016fd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016fd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fdc:	f8de 3000 	ldr.w	r3, [lr]
 8016fe0:	f8cc 3000 	str.w	r3, [ip]
 8016fe4:	4629      	mov	r1, r5
 8016fe6:	4620      	mov	r0, r4
 8016fe8:	f7ff ff60 	bl	8016eac <rcutils_string_map_reserve>
 8016fec:	4605      	mov	r5, r0
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	d0d8      	beq.n	8016fa4 <rcutils_string_map_init+0x14>
 8016ff2:	9b05      	ldr	r3, [sp, #20]
 8016ff4:	9908      	ldr	r1, [sp, #32]
 8016ff6:	6820      	ldr	r0, [r4, #0]
 8016ff8:	4798      	blx	r3
 8016ffa:	6026      	str	r6, [r4, #0]
 8016ffc:	e7d2      	b.n	8016fa4 <rcutils_string_map_init+0x14>
 8016ffe:	250b      	movs	r5, #11
 8017000:	4628      	mov	r0, r5
 8017002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017006:	b002      	add	sp, #8
 8017008:	4770      	bx	lr
 801700a:	250a      	movs	r5, #10
 801700c:	e7ca      	b.n	8016fa4 <rcutils_string_map_init+0x14>
 801700e:	bf00      	nop

08017010 <rcutils_string_map_fini>:
 8017010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017014:	b082      	sub	sp, #8
 8017016:	2800      	cmp	r0, #0
 8017018:	d03a      	beq.n	8017090 <rcutils_string_map_fini+0x80>
 801701a:	6804      	ldr	r4, [r0, #0]
 801701c:	4606      	mov	r6, r0
 801701e:	2c00      	cmp	r4, #0
 8017020:	d032      	beq.n	8017088 <rcutils_string_map_fini+0x78>
 8017022:	68a3      	ldr	r3, [r4, #8]
 8017024:	b32b      	cbz	r3, 8017072 <rcutils_string_map_fini+0x62>
 8017026:	2500      	movs	r5, #0
 8017028:	6822      	ldr	r2, [r4, #0]
 801702a:	462f      	mov	r7, r5
 801702c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017030:	b1e0      	cbz	r0, 801706c <rcutils_string_map_fini+0x5c>
 8017032:	6a21      	ldr	r1, [r4, #32]
 8017034:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8017038:	9101      	str	r1, [sp, #4]
 801703a:	47c0      	blx	r8
 801703c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017040:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8017044:	9901      	ldr	r1, [sp, #4]
 8017046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801704a:	47c0      	blx	r8
 801704c:	68e3      	ldr	r3, [r4, #12]
 801704e:	6862      	ldr	r2, [r4, #4]
 8017050:	3b01      	subs	r3, #1
 8017052:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8017056:	60e3      	str	r3, [r4, #12]
 8017058:	6834      	ldr	r4, [r6, #0]
 801705a:	68a3      	ldr	r3, [r4, #8]
 801705c:	3501      	adds	r5, #1
 801705e:	429d      	cmp	r5, r3
 8017060:	d207      	bcs.n	8017072 <rcutils_string_map_fini+0x62>
 8017062:	6822      	ldr	r2, [r4, #0]
 8017064:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017068:	2800      	cmp	r0, #0
 801706a:	d1e2      	bne.n	8017032 <rcutils_string_map_fini+0x22>
 801706c:	3501      	adds	r5, #1
 801706e:	429d      	cmp	r5, r3
 8017070:	d3dc      	bcc.n	801702c <rcutils_string_map_fini+0x1c>
 8017072:	2100      	movs	r1, #0
 8017074:	4630      	mov	r0, r6
 8017076:	f7ff ff19 	bl	8016eac <rcutils_string_map_reserve>
 801707a:	4604      	mov	r4, r0
 801707c:	b920      	cbnz	r0, 8017088 <rcutils_string_map_fini+0x78>
 801707e:	6830      	ldr	r0, [r6, #0]
 8017080:	6943      	ldr	r3, [r0, #20]
 8017082:	6a01      	ldr	r1, [r0, #32]
 8017084:	4798      	blx	r3
 8017086:	6034      	str	r4, [r6, #0]
 8017088:	4620      	mov	r0, r4
 801708a:	b002      	add	sp, #8
 801708c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017090:	240b      	movs	r4, #11
 8017092:	4620      	mov	r0, r4
 8017094:	b002      	add	sp, #8
 8017096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801709a:	bf00      	nop

0801709c <rcutils_string_map_getn>:
 801709c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170a0:	b300      	cbz	r0, 80170e4 <rcutils_string_map_getn+0x48>
 80170a2:	6807      	ldr	r7, [r0, #0]
 80170a4:	b1ff      	cbz	r7, 80170e6 <rcutils_string_map_getn+0x4a>
 80170a6:	4688      	mov	r8, r1
 80170a8:	b1e1      	cbz	r1, 80170e4 <rcutils_string_map_getn+0x48>
 80170aa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80170ae:	683e      	ldr	r6, [r7, #0]
 80170b0:	f1ba 0f00 	cmp.w	sl, #0
 80170b4:	d016      	beq.n	80170e4 <rcutils_string_map_getn+0x48>
 80170b6:	4691      	mov	r9, r2
 80170b8:	3e04      	subs	r6, #4
 80170ba:	2400      	movs	r4, #0
 80170bc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80170c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80170c4:	4628      	mov	r0, r5
 80170c6:	3401      	adds	r4, #1
 80170c8:	b155      	cbz	r5, 80170e0 <rcutils_string_map_getn+0x44>
 80170ca:	f7e9 f8b3 	bl	8000234 <strlen>
 80170ce:	4548      	cmp	r0, r9
 80170d0:	4602      	mov	r2, r0
 80170d2:	4629      	mov	r1, r5
 80170d4:	bf38      	it	cc
 80170d6:	464a      	movcc	r2, r9
 80170d8:	4640      	mov	r0, r8
 80170da:	f002 fe50 	bl	8019d7e <strncmp>
 80170de:	b128      	cbz	r0, 80170ec <rcutils_string_map_getn+0x50>
 80170e0:	45a2      	cmp	sl, r4
 80170e2:	d1eb      	bne.n	80170bc <rcutils_string_map_getn+0x20>
 80170e4:	2700      	movs	r7, #0
 80170e6:	4638      	mov	r0, r7
 80170e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	f853 700b 	ldr.w	r7, [r3, fp]
 80170f2:	4638      	mov	r0, r7
 80170f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080170f8 <rmw_get_zero_initialized_context>:
 80170f8:	b510      	push	{r4, lr}
 80170fa:	4604      	mov	r4, r0
 80170fc:	3010      	adds	r0, #16
 80170fe:	f7f6 ff3b 	bl	800df78 <rmw_get_zero_initialized_init_options>
 8017102:	2300      	movs	r3, #0
 8017104:	2000      	movs	r0, #0
 8017106:	2100      	movs	r1, #0
 8017108:	e9c4 0100 	strd	r0, r1, [r4]
 801710c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8017110:	60a3      	str	r3, [r4, #8]
 8017112:	4620      	mov	r0, r4
 8017114:	bd10      	pop	{r4, pc}
 8017116:	bf00      	nop

08017118 <rmw_time_equal>:
 8017118:	b4f0      	push	{r4, r5, r6, r7}
 801711a:	b084      	sub	sp, #16
 801711c:	ac04      	add	r4, sp, #16
 801711e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017122:	4603      	mov	r3, r0
 8017124:	4924      	ldr	r1, [pc, #144]	@ (80171b8 <rmw_time_equal+0xa0>)
 8017126:	9e03      	ldr	r6, [sp, #12]
 8017128:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801712c:	2202      	movs	r2, #2
 801712e:	4299      	cmp	r1, r3
 8017130:	41aa      	sbcs	r2, r5
 8017132:	d330      	bcc.n	8017196 <rmw_time_equal+0x7e>
 8017134:	4c21      	ldr	r4, [pc, #132]	@ (80171bc <rmw_time_equal+0xa4>)
 8017136:	fba3 3204 	umull	r3, r2, r3, r4
 801713a:	fb04 2205 	mla	r2, r4, r5, r2
 801713e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017142:	43dd      	mvns	r5, r3
 8017144:	1a8c      	subs	r4, r1, r2
 8017146:	4285      	cmp	r5, r0
 8017148:	41b4      	sbcs	r4, r6
 801714a:	d332      	bcc.n	80171b2 <rmw_time_equal+0x9a>
 801714c:	eb10 0c03 	adds.w	ip, r0, r3
 8017150:	eb42 0106 	adc.w	r1, r2, r6
 8017154:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8017158:	4817      	ldr	r0, [pc, #92]	@ (80171b8 <rmw_time_equal+0xa0>)
 801715a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801715c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801715e:	2202      	movs	r2, #2
 8017160:	4298      	cmp	r0, r3
 8017162:	41b2      	sbcs	r2, r6
 8017164:	d31c      	bcc.n	80171a0 <rmw_time_equal+0x88>
 8017166:	4c15      	ldr	r4, [pc, #84]	@ (80171bc <rmw_time_equal+0xa4>)
 8017168:	fba3 3204 	umull	r3, r2, r3, r4
 801716c:	fb04 2206 	mla	r2, r4, r6, r2
 8017170:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017174:	43de      	mvns	r6, r3
 8017176:	1a84      	subs	r4, r0, r2
 8017178:	42ae      	cmp	r6, r5
 801717a:	41bc      	sbcs	r4, r7
 801717c:	d315      	bcc.n	80171aa <rmw_time_equal+0x92>
 801717e:	195b      	adds	r3, r3, r5
 8017180:	eb42 0207 	adc.w	r2, r2, r7
 8017184:	428a      	cmp	r2, r1
 8017186:	bf08      	it	eq
 8017188:	4563      	cmpeq	r3, ip
 801718a:	bf0c      	ite	eq
 801718c:	2001      	moveq	r0, #1
 801718e:	2000      	movne	r0, #0
 8017190:	b004      	add	sp, #16
 8017192:	bcf0      	pop	{r4, r5, r6, r7}
 8017194:	4770      	bx	lr
 8017196:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801719a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801719e:	e7d9      	b.n	8017154 <rmw_time_equal+0x3c>
 80171a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80171a4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80171a8:	e7ec      	b.n	8017184 <rmw_time_equal+0x6c>
 80171aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80171ae:	4602      	mov	r2, r0
 80171b0:	e7e8      	b.n	8017184 <rmw_time_equal+0x6c>
 80171b2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80171b6:	e7cd      	b.n	8017154 <rmw_time_equal+0x3c>
 80171b8:	25c17d04 	.word	0x25c17d04
 80171bc:	3b9aca00 	.word	0x3b9aca00

080171c0 <rmw_time_total_nsec>:
 80171c0:	b470      	push	{r4, r5, r6}
 80171c2:	b085      	sub	sp, #20
 80171c4:	ac04      	add	r4, sp, #16
 80171c6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80171ca:	4603      	mov	r3, r0
 80171cc:	4912      	ldr	r1, [pc, #72]	@ (8017218 <rmw_time_total_nsec+0x58>)
 80171ce:	9e03      	ldr	r6, [sp, #12]
 80171d0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80171d4:	2202      	movs	r2, #2
 80171d6:	4299      	cmp	r1, r3
 80171d8:	41aa      	sbcs	r2, r5
 80171da:	d311      	bcc.n	8017200 <rmw_time_total_nsec+0x40>
 80171dc:	4c0f      	ldr	r4, [pc, #60]	@ (801721c <rmw_time_total_nsec+0x5c>)
 80171de:	fba3 3204 	umull	r3, r2, r3, r4
 80171e2:	fb04 2205 	mla	r2, r4, r5, r2
 80171e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80171ea:	43dd      	mvns	r5, r3
 80171ec:	1a8c      	subs	r4, r1, r2
 80171ee:	4285      	cmp	r5, r0
 80171f0:	41b4      	sbcs	r4, r6
 80171f2:	d30c      	bcc.n	801720e <rmw_time_total_nsec+0x4e>
 80171f4:	1818      	adds	r0, r3, r0
 80171f6:	eb42 0106 	adc.w	r1, r2, r6
 80171fa:	b005      	add	sp, #20
 80171fc:	bc70      	pop	{r4, r5, r6}
 80171fe:	4770      	bx	lr
 8017200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017204:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017208:	b005      	add	sp, #20
 801720a:	bc70      	pop	{r4, r5, r6}
 801720c:	4770      	bx	lr
 801720e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017212:	b005      	add	sp, #20
 8017214:	bc70      	pop	{r4, r5, r6}
 8017216:	4770      	bx	lr
 8017218:	25c17d04 	.word	0x25c17d04
 801721c:	3b9aca00 	.word	0x3b9aca00

08017220 <rmw_get_zero_initialized_message_info>:
 8017220:	b510      	push	{r4, lr}
 8017222:	2240      	movs	r2, #64	@ 0x40
 8017224:	4604      	mov	r4, r0
 8017226:	2100      	movs	r1, #0
 8017228:	f002 fd94 	bl	8019d54 <memset>
 801722c:	4620      	mov	r0, r4
 801722e:	bd10      	pop	{r4, pc}

08017230 <rmw_validate_full_topic_name>:
 8017230:	2800      	cmp	r0, #0
 8017232:	d057      	beq.n	80172e4 <rmw_validate_full_topic_name+0xb4>
 8017234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017238:	460d      	mov	r5, r1
 801723a:	2900      	cmp	r1, #0
 801723c:	d054      	beq.n	80172e8 <rmw_validate_full_topic_name+0xb8>
 801723e:	4616      	mov	r6, r2
 8017240:	4604      	mov	r4, r0
 8017242:	f7e8 fff7 	bl	8000234 <strlen>
 8017246:	b148      	cbz	r0, 801725c <rmw_validate_full_topic_name+0x2c>
 8017248:	7823      	ldrb	r3, [r4, #0]
 801724a:	2b2f      	cmp	r3, #47	@ 0x2f
 801724c:	d00d      	beq.n	801726a <rmw_validate_full_topic_name+0x3a>
 801724e:	2302      	movs	r3, #2
 8017250:	602b      	str	r3, [r5, #0]
 8017252:	b13e      	cbz	r6, 8017264 <rmw_validate_full_topic_name+0x34>
 8017254:	2000      	movs	r0, #0
 8017256:	6030      	str	r0, [r6, #0]
 8017258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801725c:	2301      	movs	r3, #1
 801725e:	602b      	str	r3, [r5, #0]
 8017260:	2e00      	cmp	r6, #0
 8017262:	d1f7      	bne.n	8017254 <rmw_validate_full_topic_name+0x24>
 8017264:	2000      	movs	r0, #0
 8017266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801726a:	1e43      	subs	r3, r0, #1
 801726c:	5ce2      	ldrb	r2, [r4, r3]
 801726e:	2a2f      	cmp	r2, #47	@ 0x2f
 8017270:	d03c      	beq.n	80172ec <rmw_validate_full_topic_name+0xbc>
 8017272:	1e63      	subs	r3, r4, #1
 8017274:	eb03 0800 	add.w	r8, r3, r0
 8017278:	f1c4 0e01 	rsb	lr, r4, #1
 801727c:	eb0e 0703 	add.w	r7, lr, r3
 8017280:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017284:	f021 0220 	bic.w	r2, r1, #32
 8017288:	3a41      	subs	r2, #65	@ 0x41
 801728a:	2a19      	cmp	r2, #25
 801728c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8017290:	d90b      	bls.n	80172aa <rmw_validate_full_topic_name+0x7a>
 8017292:	295f      	cmp	r1, #95	@ 0x5f
 8017294:	d009      	beq.n	80172aa <rmw_validate_full_topic_name+0x7a>
 8017296:	f1bc 0f0a 	cmp.w	ip, #10
 801729a:	d906      	bls.n	80172aa <rmw_validate_full_topic_name+0x7a>
 801729c:	2304      	movs	r3, #4
 801729e:	602b      	str	r3, [r5, #0]
 80172a0:	2e00      	cmp	r6, #0
 80172a2:	d0df      	beq.n	8017264 <rmw_validate_full_topic_name+0x34>
 80172a4:	6037      	str	r7, [r6, #0]
 80172a6:	2000      	movs	r0, #0
 80172a8:	e7d6      	b.n	8017258 <rmw_validate_full_topic_name+0x28>
 80172aa:	4543      	cmp	r3, r8
 80172ac:	d1e6      	bne.n	801727c <rmw_validate_full_topic_name+0x4c>
 80172ae:	4f1a      	ldr	r7, [pc, #104]	@ (8017318 <rmw_validate_full_topic_name+0xe8>)
 80172b0:	2301      	movs	r3, #1
 80172b2:	e004      	b.n	80172be <rmw_validate_full_topic_name+0x8e>
 80172b4:	4298      	cmp	r0, r3
 80172b6:	f104 0401 	add.w	r4, r4, #1
 80172ba:	d91c      	bls.n	80172f6 <rmw_validate_full_topic_name+0xc6>
 80172bc:	4613      	mov	r3, r2
 80172be:	4298      	cmp	r0, r3
 80172c0:	f103 0201 	add.w	r2, r3, #1
 80172c4:	d0f6      	beq.n	80172b4 <rmw_validate_full_topic_name+0x84>
 80172c6:	7821      	ldrb	r1, [r4, #0]
 80172c8:	292f      	cmp	r1, #47	@ 0x2f
 80172ca:	d1f3      	bne.n	80172b4 <rmw_validate_full_topic_name+0x84>
 80172cc:	7861      	ldrb	r1, [r4, #1]
 80172ce:	292f      	cmp	r1, #47	@ 0x2f
 80172d0:	d01c      	beq.n	801730c <rmw_validate_full_topic_name+0xdc>
 80172d2:	5dc9      	ldrb	r1, [r1, r7]
 80172d4:	0749      	lsls	r1, r1, #29
 80172d6:	d5ed      	bpl.n	80172b4 <rmw_validate_full_topic_name+0x84>
 80172d8:	2206      	movs	r2, #6
 80172da:	602a      	str	r2, [r5, #0]
 80172dc:	2e00      	cmp	r6, #0
 80172de:	d0c1      	beq.n	8017264 <rmw_validate_full_topic_name+0x34>
 80172e0:	6033      	str	r3, [r6, #0]
 80172e2:	e7bf      	b.n	8017264 <rmw_validate_full_topic_name+0x34>
 80172e4:	200b      	movs	r0, #11
 80172e6:	4770      	bx	lr
 80172e8:	200b      	movs	r0, #11
 80172ea:	e7b5      	b.n	8017258 <rmw_validate_full_topic_name+0x28>
 80172ec:	2203      	movs	r2, #3
 80172ee:	602a      	str	r2, [r5, #0]
 80172f0:	2e00      	cmp	r6, #0
 80172f2:	d1f5      	bne.n	80172e0 <rmw_validate_full_topic_name+0xb0>
 80172f4:	e7b6      	b.n	8017264 <rmw_validate_full_topic_name+0x34>
 80172f6:	28f7      	cmp	r0, #247	@ 0xf7
 80172f8:	d802      	bhi.n	8017300 <rmw_validate_full_topic_name+0xd0>
 80172fa:	2000      	movs	r0, #0
 80172fc:	6028      	str	r0, [r5, #0]
 80172fe:	e7ab      	b.n	8017258 <rmw_validate_full_topic_name+0x28>
 8017300:	2307      	movs	r3, #7
 8017302:	602b      	str	r3, [r5, #0]
 8017304:	2e00      	cmp	r6, #0
 8017306:	d0ad      	beq.n	8017264 <rmw_validate_full_topic_name+0x34>
 8017308:	23f6      	movs	r3, #246	@ 0xf6
 801730a:	e7e9      	b.n	80172e0 <rmw_validate_full_topic_name+0xb0>
 801730c:	2205      	movs	r2, #5
 801730e:	602a      	str	r2, [r5, #0]
 8017310:	2e00      	cmp	r6, #0
 8017312:	d1e5      	bne.n	80172e0 <rmw_validate_full_topic_name+0xb0>
 8017314:	e7a6      	b.n	8017264 <rmw_validate_full_topic_name+0x34>
 8017316:	bf00      	nop
 8017318:	0801cb02 	.word	0x0801cb02

0801731c <rmw_validate_namespace_with_size>:
 801731c:	b340      	cbz	r0, 8017370 <rmw_validate_namespace_with_size+0x54>
 801731e:	b570      	push	{r4, r5, r6, lr}
 8017320:	4614      	mov	r4, r2
 8017322:	b0c2      	sub	sp, #264	@ 0x108
 8017324:	b332      	cbz	r2, 8017374 <rmw_validate_namespace_with_size+0x58>
 8017326:	2901      	cmp	r1, #1
 8017328:	460d      	mov	r5, r1
 801732a:	461e      	mov	r6, r3
 801732c:	d102      	bne.n	8017334 <rmw_validate_namespace_with_size+0x18>
 801732e:	7803      	ldrb	r3, [r0, #0]
 8017330:	2b2f      	cmp	r3, #47	@ 0x2f
 8017332:	d012      	beq.n	801735a <rmw_validate_namespace_with_size+0x3e>
 8017334:	aa01      	add	r2, sp, #4
 8017336:	4669      	mov	r1, sp
 8017338:	f7ff ff7a 	bl	8017230 <rmw_validate_full_topic_name>
 801733c:	b978      	cbnz	r0, 801735e <rmw_validate_namespace_with_size+0x42>
 801733e:	9b00      	ldr	r3, [sp, #0]
 8017340:	b14b      	cbz	r3, 8017356 <rmw_validate_namespace_with_size+0x3a>
 8017342:	2b07      	cmp	r3, #7
 8017344:	d007      	beq.n	8017356 <rmw_validate_namespace_with_size+0x3a>
 8017346:	1e5a      	subs	r2, r3, #1
 8017348:	2a05      	cmp	r2, #5
 801734a:	d82b      	bhi.n	80173a4 <rmw_validate_namespace_with_size+0x88>
 801734c:	e8df f002 	tbb	[pc, r2]
 8017350:	1e212427 	.word	0x1e212427
 8017354:	141b      	.short	0x141b
 8017356:	2df5      	cmp	r5, #245	@ 0xf5
 8017358:	d803      	bhi.n	8017362 <rmw_validate_namespace_with_size+0x46>
 801735a:	2000      	movs	r0, #0
 801735c:	6020      	str	r0, [r4, #0]
 801735e:	b042      	add	sp, #264	@ 0x108
 8017360:	bd70      	pop	{r4, r5, r6, pc}
 8017362:	2307      	movs	r3, #7
 8017364:	6023      	str	r3, [r4, #0]
 8017366:	2e00      	cmp	r6, #0
 8017368:	d0f9      	beq.n	801735e <rmw_validate_namespace_with_size+0x42>
 801736a:	23f4      	movs	r3, #244	@ 0xf4
 801736c:	6033      	str	r3, [r6, #0]
 801736e:	e7f6      	b.n	801735e <rmw_validate_namespace_with_size+0x42>
 8017370:	200b      	movs	r0, #11
 8017372:	4770      	bx	lr
 8017374:	200b      	movs	r0, #11
 8017376:	e7f2      	b.n	801735e <rmw_validate_namespace_with_size+0x42>
 8017378:	2306      	movs	r3, #6
 801737a:	6023      	str	r3, [r4, #0]
 801737c:	2e00      	cmp	r6, #0
 801737e:	d0ee      	beq.n	801735e <rmw_validate_namespace_with_size+0x42>
 8017380:	9b01      	ldr	r3, [sp, #4]
 8017382:	6033      	str	r3, [r6, #0]
 8017384:	e7eb      	b.n	801735e <rmw_validate_namespace_with_size+0x42>
 8017386:	2305      	movs	r3, #5
 8017388:	6023      	str	r3, [r4, #0]
 801738a:	e7f7      	b.n	801737c <rmw_validate_namespace_with_size+0x60>
 801738c:	2304      	movs	r3, #4
 801738e:	6023      	str	r3, [r4, #0]
 8017390:	e7f4      	b.n	801737c <rmw_validate_namespace_with_size+0x60>
 8017392:	2303      	movs	r3, #3
 8017394:	6023      	str	r3, [r4, #0]
 8017396:	e7f1      	b.n	801737c <rmw_validate_namespace_with_size+0x60>
 8017398:	2302      	movs	r3, #2
 801739a:	6023      	str	r3, [r4, #0]
 801739c:	e7ee      	b.n	801737c <rmw_validate_namespace_with_size+0x60>
 801739e:	2301      	movs	r3, #1
 80173a0:	6023      	str	r3, [r4, #0]
 80173a2:	e7eb      	b.n	801737c <rmw_validate_namespace_with_size+0x60>
 80173a4:	4a03      	ldr	r2, [pc, #12]	@ (80173b4 <rmw_validate_namespace_with_size+0x98>)
 80173a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80173aa:	a802      	add	r0, sp, #8
 80173ac:	f7ff fd0e 	bl	8016dcc <rcutils_snprintf>
 80173b0:	2001      	movs	r0, #1
 80173b2:	e7d4      	b.n	801735e <rmw_validate_namespace_with_size+0x42>
 80173b4:	0801c630 	.word	0x0801c630

080173b8 <rmw_validate_namespace>:
 80173b8:	b168      	cbz	r0, 80173d6 <rmw_validate_namespace+0x1e>
 80173ba:	b570      	push	{r4, r5, r6, lr}
 80173bc:	460d      	mov	r5, r1
 80173be:	4616      	mov	r6, r2
 80173c0:	4604      	mov	r4, r0
 80173c2:	f7e8 ff37 	bl	8000234 <strlen>
 80173c6:	4633      	mov	r3, r6
 80173c8:	4601      	mov	r1, r0
 80173ca:	462a      	mov	r2, r5
 80173cc:	4620      	mov	r0, r4
 80173ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173d2:	f7ff bfa3 	b.w	801731c <rmw_validate_namespace_with_size>
 80173d6:	200b      	movs	r0, #11
 80173d8:	4770      	bx	lr
 80173da:	bf00      	nop

080173dc <rmw_namespace_validation_result_string>:
 80173dc:	2807      	cmp	r0, #7
 80173de:	bf9a      	itte	ls
 80173e0:	4b02      	ldrls	r3, [pc, #8]	@ (80173ec <rmw_namespace_validation_result_string+0x10>)
 80173e2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80173e6:	4802      	ldrhi	r0, [pc, #8]	@ (80173f0 <rmw_namespace_validation_result_string+0x14>)
 80173e8:	4770      	bx	lr
 80173ea:	bf00      	nop
 80173ec:	0801c828 	.word	0x0801c828
 80173f0:	0801c680 	.word	0x0801c680

080173f4 <rmw_validate_node_name>:
 80173f4:	2800      	cmp	r0, #0
 80173f6:	d03b      	beq.n	8017470 <rmw_validate_node_name+0x7c>
 80173f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173fc:	460d      	mov	r5, r1
 80173fe:	2900      	cmp	r1, #0
 8017400:	d038      	beq.n	8017474 <rmw_validate_node_name+0x80>
 8017402:	4616      	mov	r6, r2
 8017404:	4604      	mov	r4, r0
 8017406:	f7e8 ff15 	bl	8000234 <strlen>
 801740a:	b1e0      	cbz	r0, 8017446 <rmw_validate_node_name+0x52>
 801740c:	1e63      	subs	r3, r4, #1
 801740e:	eb03 0800 	add.w	r8, r3, r0
 8017412:	f1c4 0101 	rsb	r1, r4, #1
 8017416:	18cf      	adds	r7, r1, r3
 8017418:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801741c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8017420:	f02e 0c20 	bic.w	ip, lr, #32
 8017424:	2a09      	cmp	r2, #9
 8017426:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801742a:	d914      	bls.n	8017456 <rmw_validate_node_name+0x62>
 801742c:	f1bc 0f19 	cmp.w	ip, #25
 8017430:	d911      	bls.n	8017456 <rmw_validate_node_name+0x62>
 8017432:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8017436:	d00e      	beq.n	8017456 <rmw_validate_node_name+0x62>
 8017438:	2302      	movs	r3, #2
 801743a:	602b      	str	r3, [r5, #0]
 801743c:	b106      	cbz	r6, 8017440 <rmw_validate_node_name+0x4c>
 801743e:	6037      	str	r7, [r6, #0]
 8017440:	2000      	movs	r0, #0
 8017442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017446:	2301      	movs	r3, #1
 8017448:	602b      	str	r3, [r5, #0]
 801744a:	2e00      	cmp	r6, #0
 801744c:	d0f8      	beq.n	8017440 <rmw_validate_node_name+0x4c>
 801744e:	2000      	movs	r0, #0
 8017450:	6030      	str	r0, [r6, #0]
 8017452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017456:	4543      	cmp	r3, r8
 8017458:	d1dd      	bne.n	8017416 <rmw_validate_node_name+0x22>
 801745a:	7822      	ldrb	r2, [r4, #0]
 801745c:	4b0d      	ldr	r3, [pc, #52]	@ (8017494 <rmw_validate_node_name+0xa0>)
 801745e:	5cd3      	ldrb	r3, [r2, r3]
 8017460:	f013 0304 	ands.w	r3, r3, #4
 8017464:	d110      	bne.n	8017488 <rmw_validate_node_name+0x94>
 8017466:	28ff      	cmp	r0, #255	@ 0xff
 8017468:	d806      	bhi.n	8017478 <rmw_validate_node_name+0x84>
 801746a:	602b      	str	r3, [r5, #0]
 801746c:	4618      	mov	r0, r3
 801746e:	e7e8      	b.n	8017442 <rmw_validate_node_name+0x4e>
 8017470:	200b      	movs	r0, #11
 8017472:	4770      	bx	lr
 8017474:	200b      	movs	r0, #11
 8017476:	e7e4      	b.n	8017442 <rmw_validate_node_name+0x4e>
 8017478:	2204      	movs	r2, #4
 801747a:	602a      	str	r2, [r5, #0]
 801747c:	2e00      	cmp	r6, #0
 801747e:	d0df      	beq.n	8017440 <rmw_validate_node_name+0x4c>
 8017480:	22fe      	movs	r2, #254	@ 0xfe
 8017482:	6032      	str	r2, [r6, #0]
 8017484:	4618      	mov	r0, r3
 8017486:	e7dc      	b.n	8017442 <rmw_validate_node_name+0x4e>
 8017488:	2303      	movs	r3, #3
 801748a:	602b      	str	r3, [r5, #0]
 801748c:	2e00      	cmp	r6, #0
 801748e:	d1de      	bne.n	801744e <rmw_validate_node_name+0x5a>
 8017490:	e7d6      	b.n	8017440 <rmw_validate_node_name+0x4c>
 8017492:	bf00      	nop
 8017494:	0801cb02 	.word	0x0801cb02

08017498 <rmw_node_name_validation_result_string>:
 8017498:	2804      	cmp	r0, #4
 801749a:	bf9a      	itte	ls
 801749c:	4b02      	ldrls	r3, [pc, #8]	@ (80174a8 <rmw_node_name_validation_result_string+0x10>)
 801749e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80174a2:	4802      	ldrhi	r0, [pc, #8]	@ (80174ac <rmw_node_name_validation_result_string+0x14>)
 80174a4:	4770      	bx	lr
 80174a6:	bf00      	nop
 80174a8:	0801c934 	.word	0x0801c934
 80174ac:	0801c848 	.word	0x0801c848

080174b0 <on_status>:
 80174b0:	b082      	sub	sp, #8
 80174b2:	b002      	add	sp, #8
 80174b4:	4770      	bx	lr
 80174b6:	bf00      	nop

080174b8 <on_topic>:
 80174b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174bc:	4a22      	ldr	r2, [pc, #136]	@ (8017548 <on_topic+0x90>)
 80174be:	b094      	sub	sp, #80	@ 0x50
 80174c0:	6812      	ldr	r2, [r2, #0]
 80174c2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80174c4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80174c8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80174cc:	b3c2      	cbz	r2, 8017540 <on_topic+0x88>
 80174ce:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80174d2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80174d6:	e001      	b.n	80174dc <on_topic+0x24>
 80174d8:	6852      	ldr	r2, [r2, #4]
 80174da:	b38a      	cbz	r2, 8017540 <on_topic+0x88>
 80174dc:	6894      	ldr	r4, [r2, #8]
 80174de:	8aa3      	ldrh	r3, [r4, #20]
 80174e0:	428b      	cmp	r3, r1
 80174e2:	d1f9      	bne.n	80174d8 <on_topic+0x20>
 80174e4:	7da3      	ldrb	r3, [r4, #22]
 80174e6:	4283      	cmp	r3, r0
 80174e8:	d1f6      	bne.n	80174d8 <on_topic+0x20>
 80174ea:	2248      	movs	r2, #72	@ 0x48
 80174ec:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80174f0:	4668      	mov	r0, sp
 80174f2:	f002 fcf8 	bl	8019ee6 <memcpy>
 80174f6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80174fa:	cb0c      	ldmia	r3, {r2, r3}
 80174fc:	4620      	mov	r0, r4
 80174fe:	f7f7 fe3f 	bl	800f180 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017502:	4607      	mov	r7, r0
 8017504:	b1e0      	cbz	r0, 8017540 <on_topic+0x88>
 8017506:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801750a:	4632      	mov	r2, r6
 801750c:	4628      	mov	r0, r5
 801750e:	f108 0110 	add.w	r1, r8, #16
 8017512:	f7f8 fe73 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 8017516:	b930      	cbnz	r0, 8017526 <on_topic+0x6e>
 8017518:	480c      	ldr	r0, [pc, #48]	@ (801754c <on_topic+0x94>)
 801751a:	4639      	mov	r1, r7
 801751c:	b014      	add	sp, #80	@ 0x50
 801751e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017522:	f000 b8bd 	b.w	80176a0 <put_memory>
 8017526:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801752a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801752e:	f7f7 fc25 	bl	800ed7c <rmw_uros_epoch_nanos>
 8017532:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017536:	2305      	movs	r3, #5
 8017538:	e942 0102 	strd	r0, r1, [r2, #-8]
 801753c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017540:	b014      	add	sp, #80	@ 0x50
 8017542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017546:	bf00      	nop
 8017548:	2000b8ac 	.word	0x2000b8ac
 801754c:	2000b89c 	.word	0x2000b89c

08017550 <on_request>:
 8017550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017554:	4823      	ldr	r0, [pc, #140]	@ (80175e4 <on_request+0x94>)
 8017556:	b094      	sub	sp, #80	@ 0x50
 8017558:	6800      	ldr	r0, [r0, #0]
 801755a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801755c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017560:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017562:	2800      	cmp	r0, #0
 8017564:	d03b      	beq.n	80175de <on_request+0x8e>
 8017566:	461d      	mov	r5, r3
 8017568:	e001      	b.n	801756e <on_request+0x1e>
 801756a:	6840      	ldr	r0, [r0, #4]
 801756c:	b3b8      	cbz	r0, 80175de <on_request+0x8e>
 801756e:	6884      	ldr	r4, [r0, #8]
 8017570:	8b21      	ldrh	r1, [r4, #24]
 8017572:	4291      	cmp	r1, r2
 8017574:	d1f9      	bne.n	801756a <on_request+0x1a>
 8017576:	2248      	movs	r2, #72	@ 0x48
 8017578:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801757c:	4668      	mov	r0, sp
 801757e:	f002 fcb2 	bl	8019ee6 <memcpy>
 8017582:	f104 0320 	add.w	r3, r4, #32
 8017586:	cb0c      	ldmia	r3, {r2, r3}
 8017588:	4620      	mov	r0, r4
 801758a:	f7f7 fdf9 	bl	800f180 <rmw_uxrce_get_static_input_buffer_for_entity>
 801758e:	4680      	mov	r8, r0
 8017590:	b328      	cbz	r0, 80175de <on_request+0x8e>
 8017592:	4638      	mov	r0, r7
 8017594:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017598:	4632      	mov	r2, r6
 801759a:	f107 0110 	add.w	r1, r7, #16
 801759e:	f7f8 fe2d 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 80175a2:	b930      	cbnz	r0, 80175b2 <on_request+0x62>
 80175a4:	4810      	ldr	r0, [pc, #64]	@ (80175e8 <on_request+0x98>)
 80175a6:	4641      	mov	r1, r8
 80175a8:	b014      	add	sp, #80	@ 0x50
 80175aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175ae:	f000 b877 	b.w	80176a0 <put_memory>
 80175b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80175b4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80175b8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80175bc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80175c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80175c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80175cc:	f7f7 fbd6 	bl	800ed7c <rmw_uros_epoch_nanos>
 80175d0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80175d4:	2303      	movs	r3, #3
 80175d6:	e942 0102 	strd	r0, r1, [r2, #-8]
 80175da:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80175de:	b014      	add	sp, #80	@ 0x50
 80175e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175e4:	2000b87c 	.word	0x2000b87c
 80175e8:	2000b89c 	.word	0x2000b89c

080175ec <on_reply>:
 80175ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175f0:	4821      	ldr	r0, [pc, #132]	@ (8017678 <on_reply+0x8c>)
 80175f2:	b094      	sub	sp, #80	@ 0x50
 80175f4:	6800      	ldr	r0, [r0, #0]
 80175f6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80175f8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80175fc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80175fe:	b3b8      	cbz	r0, 8017670 <on_reply+0x84>
 8017600:	461d      	mov	r5, r3
 8017602:	e001      	b.n	8017608 <on_reply+0x1c>
 8017604:	6840      	ldr	r0, [r0, #4]
 8017606:	b398      	cbz	r0, 8017670 <on_reply+0x84>
 8017608:	6884      	ldr	r4, [r0, #8]
 801760a:	8b21      	ldrh	r1, [r4, #24]
 801760c:	4291      	cmp	r1, r2
 801760e:	d1f9      	bne.n	8017604 <on_reply+0x18>
 8017610:	2248      	movs	r2, #72	@ 0x48
 8017612:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017616:	4668      	mov	r0, sp
 8017618:	f002 fc65 	bl	8019ee6 <memcpy>
 801761c:	f104 0320 	add.w	r3, r4, #32
 8017620:	cb0c      	ldmia	r3, {r2, r3}
 8017622:	4620      	mov	r0, r4
 8017624:	f7f7 fdac 	bl	800f180 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017628:	4680      	mov	r8, r0
 801762a:	b308      	cbz	r0, 8017670 <on_reply+0x84>
 801762c:	4638      	mov	r0, r7
 801762e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017632:	4632      	mov	r2, r6
 8017634:	f107 0110 	add.w	r1, r7, #16
 8017638:	f7f8 fde0 	bl	80101fc <ucdr_deserialize_array_uint8_t>
 801763c:	b930      	cbnz	r0, 801764c <on_reply+0x60>
 801763e:	480f      	ldr	r0, [pc, #60]	@ (801767c <on_reply+0x90>)
 8017640:	4641      	mov	r1, r8
 8017642:	b014      	add	sp, #80	@ 0x50
 8017644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017648:	f000 b82a 	b.w	80176a0 <put_memory>
 801764c:	2200      	movs	r2, #0
 801764e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017652:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017656:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801765a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801765e:	f7f7 fb8d 	bl	800ed7c <rmw_uros_epoch_nanos>
 8017662:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017666:	2304      	movs	r3, #4
 8017668:	e942 0102 	strd	r0, r1, [r2, #-8]
 801766c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017670:	b014      	add	sp, #80	@ 0x50
 8017672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017676:	bf00      	nop
 8017678:	20006ec4 	.word	0x20006ec4
 801767c:	2000b89c 	.word	0x2000b89c

08017680 <get_memory>:
 8017680:	4603      	mov	r3, r0
 8017682:	6840      	ldr	r0, [r0, #4]
 8017684:	b158      	cbz	r0, 801769e <get_memory+0x1e>
 8017686:	6842      	ldr	r2, [r0, #4]
 8017688:	605a      	str	r2, [r3, #4]
 801768a:	b10a      	cbz	r2, 8017690 <get_memory+0x10>
 801768c:	2100      	movs	r1, #0
 801768e:	6011      	str	r1, [r2, #0]
 8017690:	681a      	ldr	r2, [r3, #0]
 8017692:	6042      	str	r2, [r0, #4]
 8017694:	b102      	cbz	r2, 8017698 <get_memory+0x18>
 8017696:	6010      	str	r0, [r2, #0]
 8017698:	2200      	movs	r2, #0
 801769a:	6002      	str	r2, [r0, #0]
 801769c:	6018      	str	r0, [r3, #0]
 801769e:	4770      	bx	lr

080176a0 <put_memory>:
 80176a0:	680b      	ldr	r3, [r1, #0]
 80176a2:	b10b      	cbz	r3, 80176a8 <put_memory+0x8>
 80176a4:	684a      	ldr	r2, [r1, #4]
 80176a6:	605a      	str	r2, [r3, #4]
 80176a8:	684a      	ldr	r2, [r1, #4]
 80176aa:	b102      	cbz	r2, 80176ae <put_memory+0xe>
 80176ac:	6013      	str	r3, [r2, #0]
 80176ae:	6803      	ldr	r3, [r0, #0]
 80176b0:	428b      	cmp	r3, r1
 80176b2:	6843      	ldr	r3, [r0, #4]
 80176b4:	bf08      	it	eq
 80176b6:	6002      	streq	r2, [r0, #0]
 80176b8:	604b      	str	r3, [r1, #4]
 80176ba:	b103      	cbz	r3, 80176be <put_memory+0x1e>
 80176bc:	6019      	str	r1, [r3, #0]
 80176be:	2300      	movs	r3, #0
 80176c0:	600b      	str	r3, [r1, #0]
 80176c2:	6041      	str	r1, [r0, #4]
 80176c4:	4770      	bx	lr
 80176c6:	bf00      	nop

080176c8 <rmw_destroy_client>:
 80176c8:	b570      	push	{r4, r5, r6, lr}
 80176ca:	b128      	cbz	r0, 80176d8 <rmw_destroy_client+0x10>
 80176cc:	4604      	mov	r4, r0
 80176ce:	6800      	ldr	r0, [r0, #0]
 80176d0:	460d      	mov	r5, r1
 80176d2:	f7f7 ff65 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 80176d6:	b910      	cbnz	r0, 80176de <rmw_destroy_client+0x16>
 80176d8:	2401      	movs	r4, #1
 80176da:	4620      	mov	r0, r4
 80176dc:	bd70      	pop	{r4, r5, r6, pc}
 80176de:	6863      	ldr	r3, [r4, #4]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d0f9      	beq.n	80176d8 <rmw_destroy_client+0x10>
 80176e4:	2d00      	cmp	r5, #0
 80176e6:	d0f7      	beq.n	80176d8 <rmw_destroy_client+0x10>
 80176e8:	6828      	ldr	r0, [r5, #0]
 80176ea:	f7f7 ff59 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 80176ee:	2800      	cmp	r0, #0
 80176f0:	d0f2      	beq.n	80176d8 <rmw_destroy_client+0x10>
 80176f2:	686e      	ldr	r6, [r5, #4]
 80176f4:	2e00      	cmp	r6, #0
 80176f6:	d0ef      	beq.n	80176d8 <rmw_destroy_client+0x10>
 80176f8:	6864      	ldr	r4, [r4, #4]
 80176fa:	6932      	ldr	r2, [r6, #16]
 80176fc:	6920      	ldr	r0, [r4, #16]
 80176fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017702:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017706:	6819      	ldr	r1, [r3, #0]
 8017708:	f7f9 f99e 	bl	8010a48 <uxr_buffer_cancel_data>
 801770c:	4602      	mov	r2, r0
 801770e:	6920      	ldr	r0, [r4, #16]
 8017710:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017714:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017718:	f7f7 fe28 	bl	800f36c <run_xrce_session>
 801771c:	6920      	ldr	r0, [r4, #16]
 801771e:	6932      	ldr	r2, [r6, #16]
 8017720:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017724:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017728:	6819      	ldr	r1, [r3, #0]
 801772a:	f7f8 fecd 	bl	80104c8 <uxr_buffer_delete_entity>
 801772e:	4602      	mov	r2, r0
 8017730:	6920      	ldr	r0, [r4, #16]
 8017732:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017736:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801773a:	f7f7 fe17 	bl	800f36c <run_xrce_session>
 801773e:	2800      	cmp	r0, #0
 8017740:	4628      	mov	r0, r5
 8017742:	bf14      	ite	ne
 8017744:	2400      	movne	r4, #0
 8017746:	2402      	moveq	r4, #2
 8017748:	f7f7 fcf8 	bl	800f13c <rmw_uxrce_fini_client_memory>
 801774c:	e7c5      	b.n	80176da <rmw_destroy_client+0x12>
 801774e:	bf00      	nop

08017750 <rmw_get_implementation_identifier>:
 8017750:	4b01      	ldr	r3, [pc, #4]	@ (8017758 <rmw_get_implementation_identifier+0x8>)
 8017752:	6818      	ldr	r0, [r3, #0]
 8017754:	4770      	bx	lr
 8017756:	bf00      	nop
 8017758:	0801c960 	.word	0x0801c960

0801775c <create_topic>:
 801775c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017760:	4605      	mov	r5, r0
 8017762:	b084      	sub	sp, #16
 8017764:	4822      	ldr	r0, [pc, #136]	@ (80177f0 <create_topic+0x94>)
 8017766:	460f      	mov	r7, r1
 8017768:	4616      	mov	r6, r2
 801776a:	f7ff ff89 	bl	8017680 <get_memory>
 801776e:	4604      	mov	r4, r0
 8017770:	2800      	cmp	r0, #0
 8017772:	d039      	beq.n	80177e8 <create_topic+0x8c>
 8017774:	692b      	ldr	r3, [r5, #16]
 8017776:	6884      	ldr	r4, [r0, #8]
 8017778:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80177f8 <create_topic+0x9c>
 801777c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017780:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8017784:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8017788:	1c42      	adds	r2, r0, #1
 801778a:	2102      	movs	r1, #2
 801778c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8017790:	f7f9 f8f0 	bl	8010974 <uxr_object_id>
 8017794:	223c      	movs	r2, #60	@ 0x3c
 8017796:	6120      	str	r0, [r4, #16]
 8017798:	4641      	mov	r1, r8
 801779a:	4638      	mov	r0, r7
 801779c:	f7f7 fee6 	bl	800f56c <generate_topic_name>
 80177a0:	b1f0      	cbz	r0, 80177e0 <create_topic+0x84>
 80177a2:	4f14      	ldr	r7, [pc, #80]	@ (80177f4 <create_topic+0x98>)
 80177a4:	4630      	mov	r0, r6
 80177a6:	2264      	movs	r2, #100	@ 0x64
 80177a8:	4639      	mov	r1, r7
 80177aa:	f7f7 feaf 	bl	800f50c <generate_type_name>
 80177ae:	b1b8      	cbz	r0, 80177e0 <create_topic+0x84>
 80177b0:	6928      	ldr	r0, [r5, #16]
 80177b2:	2306      	movs	r3, #6
 80177b4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80177b8:	f8cd 8000 	str.w	r8, [sp]
 80177bc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80177c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80177c4:	6811      	ldr	r1, [r2, #0]
 80177c6:	696b      	ldr	r3, [r5, #20]
 80177c8:	6922      	ldr	r2, [r4, #16]
 80177ca:	f7f8 fefb 	bl	80105c4 <uxr_buffer_create_topic_bin>
 80177ce:	4602      	mov	r2, r0
 80177d0:	6928      	ldr	r0, [r5, #16]
 80177d2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80177d6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80177da:	f7f7 fdc7 	bl	800f36c <run_xrce_session>
 80177de:	b918      	cbnz	r0, 80177e8 <create_topic+0x8c>
 80177e0:	4620      	mov	r0, r4
 80177e2:	f7f7 fcc1 	bl	800f168 <rmw_uxrce_fini_topic_memory>
 80177e6:	2400      	movs	r4, #0
 80177e8:	4620      	mov	r0, r4
 80177ea:	b004      	add	sp, #16
 80177ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177f0:	2000b8bc 	.word	0x2000b8bc
 80177f4:	2000b9a8 	.word	0x2000b9a8
 80177f8:	2000b96c 	.word	0x2000b96c

080177fc <destroy_topic>:
 80177fc:	b538      	push	{r3, r4, r5, lr}
 80177fe:	6985      	ldr	r5, [r0, #24]
 8017800:	b1d5      	cbz	r5, 8017838 <destroy_topic+0x3c>
 8017802:	4604      	mov	r4, r0
 8017804:	6928      	ldr	r0, [r5, #16]
 8017806:	6922      	ldr	r2, [r4, #16]
 8017808:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801780c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017810:	6819      	ldr	r1, [r3, #0]
 8017812:	f7f8 fe59 	bl	80104c8 <uxr_buffer_delete_entity>
 8017816:	4602      	mov	r2, r0
 8017818:	6928      	ldr	r0, [r5, #16]
 801781a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801781e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017822:	f7f7 fda3 	bl	800f36c <run_xrce_session>
 8017826:	2800      	cmp	r0, #0
 8017828:	4620      	mov	r0, r4
 801782a:	bf14      	ite	ne
 801782c:	2400      	movne	r4, #0
 801782e:	2402      	moveq	r4, #2
 8017830:	f7f7 fc9a 	bl	800f168 <rmw_uxrce_fini_topic_memory>
 8017834:	4620      	mov	r0, r4
 8017836:	bd38      	pop	{r3, r4, r5, pc}
 8017838:	2401      	movs	r4, #1
 801783a:	4620      	mov	r0, r4
 801783c:	bd38      	pop	{r3, r4, r5, pc}
 801783e:	bf00      	nop

08017840 <rmw_send_request>:
 8017840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017844:	4604      	mov	r4, r0
 8017846:	6800      	ldr	r0, [r0, #0]
 8017848:	b08b      	sub	sp, #44	@ 0x2c
 801784a:	460e      	mov	r6, r1
 801784c:	4615      	mov	r5, r2
 801784e:	b128      	cbz	r0, 801785c <rmw_send_request+0x1c>
 8017850:	4b21      	ldr	r3, [pc, #132]	@ (80178d8 <rmw_send_request+0x98>)
 8017852:	6819      	ldr	r1, [r3, #0]
 8017854:	f7e8 fce4 	bl	8000220 <strcmp>
 8017858:	2800      	cmp	r0, #0
 801785a:	d139      	bne.n	80178d0 <rmw_send_request+0x90>
 801785c:	6864      	ldr	r4, [r4, #4]
 801785e:	6963      	ldr	r3, [r4, #20]
 8017860:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8017864:	689b      	ldr	r3, [r3, #8]
 8017866:	4798      	blx	r3
 8017868:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801786c:	4630      	mov	r0, r6
 801786e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017872:	4798      	blx	r3
 8017874:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017878:	9000      	str	r0, [sp, #0]
 801787a:	6922      	ldr	r2, [r4, #16]
 801787c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801787e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8017882:	ab02      	add	r3, sp, #8
 8017884:	f7fb f99a 	bl	8012bbc <uxr_prepare_output_stream>
 8017888:	2700      	movs	r7, #0
 801788a:	6028      	str	r0, [r5, #0]
 801788c:	606f      	str	r7, [r5, #4]
 801788e:	b198      	cbz	r0, 80178b8 <rmw_send_request+0x78>
 8017890:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017894:	a902      	add	r1, sp, #8
 8017896:	4630      	mov	r0, r6
 8017898:	4798      	blx	r3
 801789a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801789e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80178a2:	2b01      	cmp	r3, #1
 80178a4:	d00c      	beq.n	80178c0 <rmw_send_request+0x80>
 80178a6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80178a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80178ac:	f7f9 feb2 	bl	8011614 <uxr_run_session_until_confirm_delivery>
 80178b0:	4638      	mov	r0, r7
 80178b2:	b00b      	add	sp, #44	@ 0x2c
 80178b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178b8:	2001      	movs	r0, #1
 80178ba:	b00b      	add	sp, #44	@ 0x2c
 80178bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80178c4:	f7f9 fae6 	bl	8010e94 <uxr_flash_output_streams>
 80178c8:	4638      	mov	r0, r7
 80178ca:	b00b      	add	sp, #44	@ 0x2c
 80178cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178d0:	200c      	movs	r0, #12
 80178d2:	b00b      	add	sp, #44	@ 0x2c
 80178d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178d8:	0801c960 	.word	0x0801c960

080178dc <rmw_take_request>:
 80178dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178e0:	4605      	mov	r5, r0
 80178e2:	6800      	ldr	r0, [r0, #0]
 80178e4:	b089      	sub	sp, #36	@ 0x24
 80178e6:	460c      	mov	r4, r1
 80178e8:	4690      	mov	r8, r2
 80178ea:	461e      	mov	r6, r3
 80178ec:	b128      	cbz	r0, 80178fa <rmw_take_request+0x1e>
 80178ee:	4b28      	ldr	r3, [pc, #160]	@ (8017990 <rmw_take_request+0xb4>)
 80178f0:	6819      	ldr	r1, [r3, #0]
 80178f2:	f7e8 fc95 	bl	8000220 <strcmp>
 80178f6:	2800      	cmp	r0, #0
 80178f8:	d146      	bne.n	8017988 <rmw_take_request+0xac>
 80178fa:	b10e      	cbz	r6, 8017900 <rmw_take_request+0x24>
 80178fc:	2300      	movs	r3, #0
 80178fe:	7033      	strb	r3, [r6, #0]
 8017900:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017904:	f7f7 fcb4 	bl	800f270 <rmw_uxrce_clean_expired_static_input_buffer>
 8017908:	4648      	mov	r0, r9
 801790a:	f7f7 fc89 	bl	800f220 <rmw_uxrce_find_static_input_buffer_by_owner>
 801790e:	4607      	mov	r7, r0
 8017910:	b3b0      	cbz	r0, 8017980 <rmw_take_request+0xa4>
 8017912:	6885      	ldr	r5, [r0, #8]
 8017914:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017918:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801791c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017920:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017924:	7423      	strb	r3, [r4, #16]
 8017926:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801792a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801792e:	74e2      	strb	r2, [r4, #19]
 8017930:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017934:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017938:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801793c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017940:	61e1      	str	r1, [r4, #28]
 8017942:	6162      	str	r2, [r4, #20]
 8017944:	61a3      	str	r3, [r4, #24]
 8017946:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801794a:	689b      	ldr	r3, [r3, #8]
 801794c:	4798      	blx	r3
 801794e:	6844      	ldr	r4, [r0, #4]
 8017950:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8017954:	f105 0110 	add.w	r1, r5, #16
 8017958:	4668      	mov	r0, sp
 801795a:	f7f5 f825 	bl	800c9a8 <ucdr_init_buffer>
 801795e:	68e3      	ldr	r3, [r4, #12]
 8017960:	4641      	mov	r1, r8
 8017962:	4668      	mov	r0, sp
 8017964:	4798      	blx	r3
 8017966:	4639      	mov	r1, r7
 8017968:	4604      	mov	r4, r0
 801796a:	480a      	ldr	r0, [pc, #40]	@ (8017994 <rmw_take_request+0xb8>)
 801796c:	f7ff fe98 	bl	80176a0 <put_memory>
 8017970:	b106      	cbz	r6, 8017974 <rmw_take_request+0x98>
 8017972:	7034      	strb	r4, [r6, #0]
 8017974:	f084 0001 	eor.w	r0, r4, #1
 8017978:	b2c0      	uxtb	r0, r0
 801797a:	b009      	add	sp, #36	@ 0x24
 801797c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017980:	2001      	movs	r0, #1
 8017982:	b009      	add	sp, #36	@ 0x24
 8017984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017988:	200c      	movs	r0, #12
 801798a:	b009      	add	sp, #36	@ 0x24
 801798c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017990:	0801c960 	.word	0x0801c960
 8017994:	2000b89c 	.word	0x2000b89c

08017998 <rmw_send_response>:
 8017998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801799a:	4605      	mov	r5, r0
 801799c:	6800      	ldr	r0, [r0, #0]
 801799e:	b091      	sub	sp, #68	@ 0x44
 80179a0:	460c      	mov	r4, r1
 80179a2:	4616      	mov	r6, r2
 80179a4:	b128      	cbz	r0, 80179b2 <rmw_send_response+0x1a>
 80179a6:	4b29      	ldr	r3, [pc, #164]	@ (8017a4c <rmw_send_response+0xb4>)
 80179a8:	6819      	ldr	r1, [r3, #0]
 80179aa:	f7e8 fc39 	bl	8000220 <strcmp>
 80179ae:	2800      	cmp	r0, #0
 80179b0:	d141      	bne.n	8017a36 <rmw_send_response+0x9e>
 80179b2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80179b6:	9306      	str	r3, [sp, #24]
 80179b8:	4623      	mov	r3, r4
 80179ba:	9207      	str	r2, [sp, #28]
 80179bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179c0:	686d      	ldr	r5, [r5, #4]
 80179c2:	789b      	ldrb	r3, [r3, #2]
 80179c4:	68a1      	ldr	r1, [r4, #8]
 80179c6:	f88d 2017 	strb.w	r2, [sp, #23]
 80179ca:	f88d 3016 	strb.w	r3, [sp, #22]
 80179ce:	68e2      	ldr	r2, [r4, #12]
 80179d0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80179d4:	6860      	ldr	r0, [r4, #4]
 80179d6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80179da:	ab02      	add	r3, sp, #8
 80179dc:	c307      	stmia	r3!, {r0, r1, r2}
 80179de:	696b      	ldr	r3, [r5, #20]
 80179e0:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80179e2:	68db      	ldr	r3, [r3, #12]
 80179e4:	4798      	blx	r3
 80179e6:	6844      	ldr	r4, [r0, #4]
 80179e8:	4630      	mov	r0, r6
 80179ea:	6923      	ldr	r3, [r4, #16]
 80179ec:	4798      	blx	r3
 80179ee:	f100 0318 	add.w	r3, r0, #24
 80179f2:	6938      	ldr	r0, [r7, #16]
 80179f4:	9300      	str	r3, [sp, #0]
 80179f6:	692a      	ldr	r2, [r5, #16]
 80179f8:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80179fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80179fe:	ab08      	add	r3, sp, #32
 8017a00:	f7fb f8dc 	bl	8012bbc <uxr_prepare_output_stream>
 8017a04:	b910      	cbnz	r0, 8017a0c <rmw_send_response+0x74>
 8017a06:	2001      	movs	r0, #1
 8017a08:	b011      	add	sp, #68	@ 0x44
 8017a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a0c:	a902      	add	r1, sp, #8
 8017a0e:	a808      	add	r0, sp, #32
 8017a10:	f7fc f962 	bl	8013cd8 <uxr_serialize_SampleIdentity>
 8017a14:	68a3      	ldr	r3, [r4, #8]
 8017a16:	a908      	add	r1, sp, #32
 8017a18:	4630      	mov	r0, r6
 8017a1a:	4798      	blx	r3
 8017a1c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017a20:	6938      	ldr	r0, [r7, #16]
 8017a22:	2b01      	cmp	r3, #1
 8017a24:	d00a      	beq.n	8017a3c <rmw_send_response+0xa4>
 8017a26:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017a28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a2c:	f7f9 fdf2 	bl	8011614 <uxr_run_session_until_confirm_delivery>
 8017a30:	2000      	movs	r0, #0
 8017a32:	b011      	add	sp, #68	@ 0x44
 8017a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a36:	200c      	movs	r0, #12
 8017a38:	b011      	add	sp, #68	@ 0x44
 8017a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a40:	f7f9 fa28 	bl	8010e94 <uxr_flash_output_streams>
 8017a44:	2000      	movs	r0, #0
 8017a46:	b011      	add	sp, #68	@ 0x44
 8017a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a4a:	bf00      	nop
 8017a4c:	0801c960 	.word	0x0801c960

08017a50 <rmw_take_response>:
 8017a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a54:	4604      	mov	r4, r0
 8017a56:	6800      	ldr	r0, [r0, #0]
 8017a58:	b088      	sub	sp, #32
 8017a5a:	4688      	mov	r8, r1
 8017a5c:	4617      	mov	r7, r2
 8017a5e:	461d      	mov	r5, r3
 8017a60:	b120      	cbz	r0, 8017a6c <rmw_take_response+0x1c>
 8017a62:	4b1e      	ldr	r3, [pc, #120]	@ (8017adc <rmw_take_response+0x8c>)
 8017a64:	6819      	ldr	r1, [r3, #0]
 8017a66:	f7e8 fbdb 	bl	8000220 <strcmp>
 8017a6a:	bb78      	cbnz	r0, 8017acc <rmw_take_response+0x7c>
 8017a6c:	b10d      	cbz	r5, 8017a72 <rmw_take_response+0x22>
 8017a6e:	2300      	movs	r3, #0
 8017a70:	702b      	strb	r3, [r5, #0]
 8017a72:	6864      	ldr	r4, [r4, #4]
 8017a74:	f7f7 fbfc 	bl	800f270 <rmw_uxrce_clean_expired_static_input_buffer>
 8017a78:	4620      	mov	r0, r4
 8017a7a:	f7f7 fbd1 	bl	800f220 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017a7e:	4606      	mov	r6, r0
 8017a80:	b340      	cbz	r0, 8017ad4 <rmw_take_response+0x84>
 8017a82:	6963      	ldr	r3, [r4, #20]
 8017a84:	6884      	ldr	r4, [r0, #8]
 8017a86:	68db      	ldr	r3, [r3, #12]
 8017a88:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8017a8c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017a90:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8017a94:	4798      	blx	r3
 8017a96:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017a9a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8017a9e:	f104 0110 	add.w	r1, r4, #16
 8017aa2:	4668      	mov	r0, sp
 8017aa4:	f7f4 ff80 	bl	800c9a8 <ucdr_init_buffer>
 8017aa8:	4639      	mov	r1, r7
 8017aaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017aae:	4668      	mov	r0, sp
 8017ab0:	4798      	blx	r3
 8017ab2:	4631      	mov	r1, r6
 8017ab4:	4604      	mov	r4, r0
 8017ab6:	480a      	ldr	r0, [pc, #40]	@ (8017ae0 <rmw_take_response+0x90>)
 8017ab8:	f7ff fdf2 	bl	80176a0 <put_memory>
 8017abc:	b105      	cbz	r5, 8017ac0 <rmw_take_response+0x70>
 8017abe:	702c      	strb	r4, [r5, #0]
 8017ac0:	f084 0001 	eor.w	r0, r4, #1
 8017ac4:	b2c0      	uxtb	r0, r0
 8017ac6:	b008      	add	sp, #32
 8017ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017acc:	200c      	movs	r0, #12
 8017ace:	b008      	add	sp, #32
 8017ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ad4:	2001      	movs	r0, #1
 8017ad6:	b008      	add	sp, #32
 8017ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017adc:	0801c960 	.word	0x0801c960
 8017ae0:	2000b89c 	.word	0x2000b89c

08017ae4 <rmw_take_with_info>:
 8017ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ae6:	4604      	mov	r4, r0
 8017ae8:	6800      	ldr	r0, [r0, #0]
 8017aea:	b089      	sub	sp, #36	@ 0x24
 8017aec:	460f      	mov	r7, r1
 8017aee:	4615      	mov	r5, r2
 8017af0:	b128      	cbz	r0, 8017afe <rmw_take_with_info+0x1a>
 8017af2:	4b24      	ldr	r3, [pc, #144]	@ (8017b84 <rmw_take_with_info+0xa0>)
 8017af4:	6819      	ldr	r1, [r3, #0]
 8017af6:	f7e8 fb93 	bl	8000220 <strcmp>
 8017afa:	2800      	cmp	r0, #0
 8017afc:	d13e      	bne.n	8017b7c <rmw_take_with_info+0x98>
 8017afe:	b305      	cbz	r5, 8017b42 <rmw_take_with_info+0x5e>
 8017b00:	6864      	ldr	r4, [r4, #4]
 8017b02:	2300      	movs	r3, #0
 8017b04:	702b      	strb	r3, [r5, #0]
 8017b06:	f7f7 fbb3 	bl	800f270 <rmw_uxrce_clean_expired_static_input_buffer>
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	f7f7 fb88 	bl	800f220 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017b10:	4606      	mov	r6, r0
 8017b12:	b1f0      	cbz	r0, 8017b52 <rmw_take_with_info+0x6e>
 8017b14:	6881      	ldr	r1, [r0, #8]
 8017b16:	4668      	mov	r0, sp
 8017b18:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017b1c:	3110      	adds	r1, #16
 8017b1e:	f7f4 ff43 	bl	800c9a8 <ucdr_init_buffer>
 8017b22:	69a3      	ldr	r3, [r4, #24]
 8017b24:	4639      	mov	r1, r7
 8017b26:	68db      	ldr	r3, [r3, #12]
 8017b28:	4668      	mov	r0, sp
 8017b2a:	4798      	blx	r3
 8017b2c:	4631      	mov	r1, r6
 8017b2e:	4604      	mov	r4, r0
 8017b30:	4815      	ldr	r0, [pc, #84]	@ (8017b88 <rmw_take_with_info+0xa4>)
 8017b32:	f7ff fdb5 	bl	80176a0 <put_memory>
 8017b36:	702c      	strb	r4, [r5, #0]
 8017b38:	f084 0001 	eor.w	r0, r4, #1
 8017b3c:	b2c0      	uxtb	r0, r0
 8017b3e:	b009      	add	sp, #36	@ 0x24
 8017b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b42:	6864      	ldr	r4, [r4, #4]
 8017b44:	f7f7 fb94 	bl	800f270 <rmw_uxrce_clean_expired_static_input_buffer>
 8017b48:	4620      	mov	r0, r4
 8017b4a:	f7f7 fb69 	bl	800f220 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017b4e:	4605      	mov	r5, r0
 8017b50:	b910      	cbnz	r0, 8017b58 <rmw_take_with_info+0x74>
 8017b52:	2001      	movs	r0, #1
 8017b54:	b009      	add	sp, #36	@ 0x24
 8017b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b58:	68a9      	ldr	r1, [r5, #8]
 8017b5a:	4668      	mov	r0, sp
 8017b5c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017b60:	3110      	adds	r1, #16
 8017b62:	f7f4 ff21 	bl	800c9a8 <ucdr_init_buffer>
 8017b66:	69a3      	ldr	r3, [r4, #24]
 8017b68:	4639      	mov	r1, r7
 8017b6a:	68db      	ldr	r3, [r3, #12]
 8017b6c:	4668      	mov	r0, sp
 8017b6e:	4798      	blx	r3
 8017b70:	4629      	mov	r1, r5
 8017b72:	4604      	mov	r4, r0
 8017b74:	4804      	ldr	r0, [pc, #16]	@ (8017b88 <rmw_take_with_info+0xa4>)
 8017b76:	f7ff fd93 	bl	80176a0 <put_memory>
 8017b7a:	e7dd      	b.n	8017b38 <rmw_take_with_info+0x54>
 8017b7c:	200c      	movs	r0, #12
 8017b7e:	b009      	add	sp, #36	@ 0x24
 8017b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b82:	bf00      	nop
 8017b84:	0801c960 	.word	0x0801c960
 8017b88:	2000b89c 	.word	0x2000b89c

08017b8c <rmw_wait>:
 8017b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b90:	b089      	sub	sp, #36	@ 0x24
 8017b92:	4605      	mov	r5, r0
 8017b94:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017b96:	460e      	mov	r6, r1
 8017b98:	4698      	mov	r8, r3
 8017b9a:	4691      	mov	r9, r2
 8017b9c:	2a00      	cmp	r2, #0
 8017b9e:	f000 810a 	beq.w	8017db6 <rmw_wait+0x22a>
 8017ba2:	b16c      	cbz	r4, 8017bc0 <rmw_wait+0x34>
 8017ba4:	4bae      	ldr	r3, [pc, #696]	@ (8017e60 <rmw_wait+0x2d4>)
 8017ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ba8:	af04      	add	r7, sp, #16
 8017baa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8017bae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017bb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017bb6:	f7ff faaf 	bl	8017118 <rmw_time_equal>
 8017bba:	2800      	cmp	r0, #0
 8017bbc:	f000 8127 	beq.w	8017e0e <rmw_wait+0x282>
 8017bc0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017bc4:	f7f7 fb54 	bl	800f270 <rmw_uxrce_clean_expired_static_input_buffer>
 8017bc8:	4ba6      	ldr	r3, [pc, #664]	@ (8017e64 <rmw_wait+0x2d8>)
 8017bca:	681c      	ldr	r4, [r3, #0]
 8017bcc:	b14c      	cbz	r4, 8017be2 <rmw_wait+0x56>
 8017bce:	4623      	mov	r3, r4
 8017bd0:	2100      	movs	r1, #0
 8017bd2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017bd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017bda:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d1f7      	bne.n	8017bd2 <rmw_wait+0x46>
 8017be2:	f1b9 0f00 	cmp.w	r9, #0
 8017be6:	d011      	beq.n	8017c0c <rmw_wait+0x80>
 8017be8:	f8d9 1000 	ldr.w	r1, [r9]
 8017bec:	b171      	cbz	r1, 8017c0c <rmw_wait+0x80>
 8017bee:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	2001      	movs	r0, #1
 8017bf6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017bfa:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017bfc:	6912      	ldr	r2, [r2, #16]
 8017bfe:	3301      	adds	r3, #1
 8017c00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017c04:	4299      	cmp	r1, r3
 8017c06:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017c0a:	d1f4      	bne.n	8017bf6 <rmw_wait+0x6a>
 8017c0c:	f1b8 0f00 	cmp.w	r8, #0
 8017c10:	d011      	beq.n	8017c36 <rmw_wait+0xaa>
 8017c12:	f8d8 1000 	ldr.w	r1, [r8]
 8017c16:	b171      	cbz	r1, 8017c36 <rmw_wait+0xaa>
 8017c18:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	2001      	movs	r0, #1
 8017c20:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017c24:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017c26:	6912      	ldr	r2, [r2, #16]
 8017c28:	3301      	adds	r3, #1
 8017c2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017c2e:	4299      	cmp	r1, r3
 8017c30:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017c34:	d1f4      	bne.n	8017c20 <rmw_wait+0x94>
 8017c36:	b185      	cbz	r5, 8017c5a <rmw_wait+0xce>
 8017c38:	6829      	ldr	r1, [r5, #0]
 8017c3a:	b171      	cbz	r1, 8017c5a <rmw_wait+0xce>
 8017c3c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017c40:	2300      	movs	r3, #0
 8017c42:	2001      	movs	r0, #1
 8017c44:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017c48:	6a12      	ldr	r2, [r2, #32]
 8017c4a:	6912      	ldr	r2, [r2, #16]
 8017c4c:	3301      	adds	r3, #1
 8017c4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017c52:	4299      	cmp	r1, r3
 8017c54:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017c58:	d1f4      	bne.n	8017c44 <rmw_wait+0xb8>
 8017c5a:	b34c      	cbz	r4, 8017cb0 <rmw_wait+0x124>
 8017c5c:	4622      	mov	r2, r4
 8017c5e:	2300      	movs	r3, #0
 8017c60:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017c64:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017c68:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017c6c:	440b      	add	r3, r1
 8017c6e:	b2db      	uxtb	r3, r3
 8017c70:	2a00      	cmp	r2, #0
 8017c72:	d1f5      	bne.n	8017c60 <rmw_wait+0xd4>
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	f000 8084 	beq.w	8017d82 <rmw_wait+0x1f6>
 8017c7a:	1c7a      	adds	r2, r7, #1
 8017c7c:	d00d      	beq.n	8017c9a <rmw_wait+0x10e>
 8017c7e:	ee07 7a90 	vmov	s15, r7
 8017c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017c86:	ee07 3a90 	vmov	s15, r3
 8017c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017c92:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017c96:	ee17 7a90 	vmov	r7, s15
 8017c9a:	68a0      	ldr	r0, [r4, #8]
 8017c9c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017ca0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	f040 8090 	bne.w	8017dca <rmw_wait+0x23e>
 8017caa:	6864      	ldr	r4, [r4, #4]
 8017cac:	2c00      	cmp	r4, #0
 8017cae:	d1f4      	bne.n	8017c9a <rmw_wait+0x10e>
 8017cb0:	f1b9 0f00 	cmp.w	r9, #0
 8017cb4:	f000 80bc 	beq.w	8017e30 <rmw_wait+0x2a4>
 8017cb8:	f8d9 7000 	ldr.w	r7, [r9]
 8017cbc:	2f00      	cmp	r7, #0
 8017cbe:	f000 808e 	beq.w	8017dde <rmw_wait+0x252>
 8017cc2:	2400      	movs	r4, #0
 8017cc4:	4627      	mov	r7, r4
 8017cc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017cca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017cce:	f7f7 faa7 	bl	800f220 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017cd2:	2800      	cmp	r0, #0
 8017cd4:	d05f      	beq.n	8017d96 <rmw_wait+0x20a>
 8017cd6:	f8d9 3000 	ldr.w	r3, [r9]
 8017cda:	3401      	adds	r4, #1
 8017cdc:	42a3      	cmp	r3, r4
 8017cde:	f04f 0701 	mov.w	r7, #1
 8017ce2:	d8f0      	bhi.n	8017cc6 <rmw_wait+0x13a>
 8017ce4:	f1b8 0f00 	cmp.w	r8, #0
 8017ce8:	d012      	beq.n	8017d10 <rmw_wait+0x184>
 8017cea:	f8d8 3000 	ldr.w	r3, [r8]
 8017cee:	b17b      	cbz	r3, 8017d10 <rmw_wait+0x184>
 8017cf0:	2400      	movs	r4, #0
 8017cf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017cf6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017cfa:	f7f7 fa91 	bl	800f220 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017cfe:	2800      	cmp	r0, #0
 8017d00:	d051      	beq.n	8017da6 <rmw_wait+0x21a>
 8017d02:	f8d8 3000 	ldr.w	r3, [r8]
 8017d06:	3401      	adds	r4, #1
 8017d08:	42a3      	cmp	r3, r4
 8017d0a:	f04f 0701 	mov.w	r7, #1
 8017d0e:	d8f0      	bhi.n	8017cf2 <rmw_wait+0x166>
 8017d10:	b1dd      	cbz	r5, 8017d4a <rmw_wait+0x1be>
 8017d12:	682b      	ldr	r3, [r5, #0]
 8017d14:	b1cb      	cbz	r3, 8017d4a <rmw_wait+0x1be>
 8017d16:	2400      	movs	r4, #0
 8017d18:	686b      	ldr	r3, [r5, #4]
 8017d1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017d1e:	f7f7 fa7f 	bl	800f220 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017d22:	b158      	cbz	r0, 8017d3c <rmw_wait+0x1b0>
 8017d24:	682b      	ldr	r3, [r5, #0]
 8017d26:	3401      	adds	r4, #1
 8017d28:	42a3      	cmp	r3, r4
 8017d2a:	d969      	bls.n	8017e00 <rmw_wait+0x274>
 8017d2c:	686b      	ldr	r3, [r5, #4]
 8017d2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017d32:	2701      	movs	r7, #1
 8017d34:	f7f7 fa74 	bl	800f220 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017d38:	2800      	cmp	r0, #0
 8017d3a:	d1f3      	bne.n	8017d24 <rmw_wait+0x198>
 8017d3c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017d40:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017d44:	3401      	adds	r4, #1
 8017d46:	42a3      	cmp	r3, r4
 8017d48:	d8e6      	bhi.n	8017d18 <rmw_wait+0x18c>
 8017d4a:	b1a6      	cbz	r6, 8017d76 <rmw_wait+0x1ea>
 8017d4c:	6834      	ldr	r4, [r6, #0]
 8017d4e:	b194      	cbz	r4, 8017d76 <rmw_wait+0x1ea>
 8017d50:	2300      	movs	r3, #0
 8017d52:	461d      	mov	r5, r3
 8017d54:	e004      	b.n	8017d60 <rmw_wait+0x1d4>
 8017d56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017d5a:	3301      	adds	r3, #1
 8017d5c:	42a3      	cmp	r3, r4
 8017d5e:	d00a      	beq.n	8017d76 <rmw_wait+0x1ea>
 8017d60:	6870      	ldr	r0, [r6, #4]
 8017d62:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017d66:	7c0a      	ldrb	r2, [r1, #16]
 8017d68:	2a00      	cmp	r2, #0
 8017d6a:	d0f4      	beq.n	8017d56 <rmw_wait+0x1ca>
 8017d6c:	3301      	adds	r3, #1
 8017d6e:	42a3      	cmp	r3, r4
 8017d70:	740d      	strb	r5, [r1, #16]
 8017d72:	4617      	mov	r7, r2
 8017d74:	d1f4      	bne.n	8017d60 <rmw_wait+0x1d4>
 8017d76:	2f00      	cmp	r7, #0
 8017d78:	d03e      	beq.n	8017df8 <rmw_wait+0x26c>
 8017d7a:	2000      	movs	r0, #0
 8017d7c:	b009      	add	sp, #36	@ 0x24
 8017d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d82:	68a0      	ldr	r0, [r4, #8]
 8017d84:	2100      	movs	r1, #0
 8017d86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017d8a:	f7f9 fc09 	bl	80115a0 <uxr_run_session_timeout>
 8017d8e:	6864      	ldr	r4, [r4, #4]
 8017d90:	2c00      	cmp	r4, #0
 8017d92:	d1f6      	bne.n	8017d82 <rmw_wait+0x1f6>
 8017d94:	e78c      	b.n	8017cb0 <rmw_wait+0x124>
 8017d96:	e9d9 3200 	ldrd	r3, r2, [r9]
 8017d9a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017d9e:	3401      	adds	r4, #1
 8017da0:	42a3      	cmp	r3, r4
 8017da2:	d890      	bhi.n	8017cc6 <rmw_wait+0x13a>
 8017da4:	e79e      	b.n	8017ce4 <rmw_wait+0x158>
 8017da6:	e9d8 3200 	ldrd	r3, r2, [r8]
 8017daa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017dae:	3401      	adds	r4, #1
 8017db0:	429c      	cmp	r4, r3
 8017db2:	d39e      	bcc.n	8017cf2 <rmw_wait+0x166>
 8017db4:	e7ac      	b.n	8017d10 <rmw_wait+0x184>
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	f47f aef3 	bne.w	8017ba2 <rmw_wait+0x16>
 8017dbc:	2800      	cmp	r0, #0
 8017dbe:	f47f aef0 	bne.w	8017ba2 <rmw_wait+0x16>
 8017dc2:	2900      	cmp	r1, #0
 8017dc4:	f47f aeed 	bne.w	8017ba2 <rmw_wait+0x16>
 8017dc8:	e7d7      	b.n	8017d7a <rmw_wait+0x1ee>
 8017dca:	4639      	mov	r1, r7
 8017dcc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017dd0:	f7f9 fc00 	bl	80115d4 <uxr_run_session_until_data>
 8017dd4:	6864      	ldr	r4, [r4, #4]
 8017dd6:	2c00      	cmp	r4, #0
 8017dd8:	f47f af5f 	bne.w	8017c9a <rmw_wait+0x10e>
 8017ddc:	e768      	b.n	8017cb0 <rmw_wait+0x124>
 8017dde:	f1b8 0f00 	cmp.w	r8, #0
 8017de2:	d032      	beq.n	8017e4a <rmw_wait+0x2be>
 8017de4:	f8d8 3000 	ldr.w	r3, [r8]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d181      	bne.n	8017cf0 <rmw_wait+0x164>
 8017dec:	461f      	mov	r7, r3
 8017dee:	2d00      	cmp	r5, #0
 8017df0:	d18f      	bne.n	8017d12 <rmw_wait+0x186>
 8017df2:	462f      	mov	r7, r5
 8017df4:	2e00      	cmp	r6, #0
 8017df6:	d1a9      	bne.n	8017d4c <rmw_wait+0x1c0>
 8017df8:	2002      	movs	r0, #2
 8017dfa:	b009      	add	sp, #36	@ 0x24
 8017dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e00:	2e00      	cmp	r6, #0
 8017e02:	d0ba      	beq.n	8017d7a <rmw_wait+0x1ee>
 8017e04:	6834      	ldr	r4, [r6, #0]
 8017e06:	2701      	movs	r7, #1
 8017e08:	2c00      	cmp	r4, #0
 8017e0a:	d1a1      	bne.n	8017d50 <rmw_wait+0x1c4>
 8017e0c:	e7b5      	b.n	8017d7a <rmw_wait+0x1ee>
 8017e0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017e12:	f7ff f9d5 	bl	80171c0 <rmw_time_total_nsec>
 8017e16:	2300      	movs	r3, #0
 8017e18:	4a13      	ldr	r2, [pc, #76]	@ (8017e68 <rmw_wait+0x2dc>)
 8017e1a:	f7e8 ff25 	bl	8000c68 <__aeabi_uldivmod>
 8017e1e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017e22:	f171 0300 	sbcs.w	r3, r1, #0
 8017e26:	4607      	mov	r7, r0
 8017e28:	bfa8      	it	ge
 8017e2a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8017e2e:	e6c9      	b.n	8017bc4 <rmw_wait+0x38>
 8017e30:	f1b8 0f00 	cmp.w	r8, #0
 8017e34:	d009      	beq.n	8017e4a <rmw_wait+0x2be>
 8017e36:	f8d8 3000 	ldr.w	r3, [r8]
 8017e3a:	464f      	mov	r7, r9
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	f47f af57 	bne.w	8017cf0 <rmw_wait+0x164>
 8017e42:	2d00      	cmp	r5, #0
 8017e44:	f47f af65 	bne.w	8017d12 <rmw_wait+0x186>
 8017e48:	e7d3      	b.n	8017df2 <rmw_wait+0x266>
 8017e4a:	b17d      	cbz	r5, 8017e6c <rmw_wait+0x2e0>
 8017e4c:	682b      	ldr	r3, [r5, #0]
 8017e4e:	4647      	mov	r7, r8
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	f47f af60 	bne.w	8017d16 <rmw_wait+0x18a>
 8017e56:	2e00      	cmp	r6, #0
 8017e58:	f47f af78 	bne.w	8017d4c <rmw_wait+0x1c0>
 8017e5c:	e7cc      	b.n	8017df8 <rmw_wait+0x26c>
 8017e5e:	bf00      	nop
 8017e60:	0801b398 	.word	0x0801b398
 8017e64:	2000b88c 	.word	0x2000b88c
 8017e68:	000f4240 	.word	0x000f4240
 8017e6c:	2e00      	cmp	r6, #0
 8017e6e:	d0c3      	beq.n	8017df8 <rmw_wait+0x26c>
 8017e70:	6834      	ldr	r4, [r6, #0]
 8017e72:	462f      	mov	r7, r5
 8017e74:	2c00      	cmp	r4, #0
 8017e76:	f47f af6b 	bne.w	8017d50 <rmw_wait+0x1c4>
 8017e7a:	e7bd      	b.n	8017df8 <rmw_wait+0x26c>

08017e7c <rmw_create_wait_set>:
 8017e7c:	b508      	push	{r3, lr}
 8017e7e:	4803      	ldr	r0, [pc, #12]	@ (8017e8c <rmw_create_wait_set+0x10>)
 8017e80:	f7ff fbfe 	bl	8017680 <get_memory>
 8017e84:	b108      	cbz	r0, 8017e8a <rmw_create_wait_set+0xe>
 8017e86:	6880      	ldr	r0, [r0, #8]
 8017e88:	3010      	adds	r0, #16
 8017e8a:	bd08      	pop	{r3, pc}
 8017e8c:	2000b8cc 	.word	0x2000b8cc

08017e90 <rmw_destroy_wait_set>:
 8017e90:	b508      	push	{r3, lr}
 8017e92:	4b08      	ldr	r3, [pc, #32]	@ (8017eb4 <rmw_destroy_wait_set+0x24>)
 8017e94:	6819      	ldr	r1, [r3, #0]
 8017e96:	b911      	cbnz	r1, 8017e9e <rmw_destroy_wait_set+0xe>
 8017e98:	e00a      	b.n	8017eb0 <rmw_destroy_wait_set+0x20>
 8017e9a:	6849      	ldr	r1, [r1, #4]
 8017e9c:	b141      	cbz	r1, 8017eb0 <rmw_destroy_wait_set+0x20>
 8017e9e:	688b      	ldr	r3, [r1, #8]
 8017ea0:	3310      	adds	r3, #16
 8017ea2:	4298      	cmp	r0, r3
 8017ea4:	d1f9      	bne.n	8017e9a <rmw_destroy_wait_set+0xa>
 8017ea6:	4803      	ldr	r0, [pc, #12]	@ (8017eb4 <rmw_destroy_wait_set+0x24>)
 8017ea8:	f7ff fbfa 	bl	80176a0 <put_memory>
 8017eac:	2000      	movs	r0, #0
 8017eae:	bd08      	pop	{r3, pc}
 8017eb0:	2001      	movs	r0, #1
 8017eb2:	bd08      	pop	{r3, pc}
 8017eb4:	2000b8cc 	.word	0x2000b8cc

08017eb8 <sensor_msgs__msg__Imu__init>:
 8017eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ebc:	4605      	mov	r5, r0
 8017ebe:	b3c0      	cbz	r0, 8017f32 <sensor_msgs__msg__Imu__init+0x7a>
 8017ec0:	f000 f864 	bl	8017f8c <std_msgs__msg__Header__init>
 8017ec4:	4604      	mov	r4, r0
 8017ec6:	b310      	cbz	r0, 8017f0e <sensor_msgs__msg__Imu__init+0x56>
 8017ec8:	f105 0618 	add.w	r6, r5, #24
 8017ecc:	4630      	mov	r0, r6
 8017ece:	f000 f8b3 	bl	8018038 <geometry_msgs__msg__Quaternion__init>
 8017ed2:	4604      	mov	r4, r0
 8017ed4:	2800      	cmp	r0, #0
 8017ed6:	d040      	beq.n	8017f5a <sensor_msgs__msg__Imu__init+0xa2>
 8017ed8:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8017edc:	4638      	mov	r0, r7
 8017ede:	f7f7 ffd9 	bl	800fe94 <geometry_msgs__msg__Vector3__init>
 8017ee2:	4604      	mov	r4, r0
 8017ee4:	b348      	cbz	r0, 8017f3a <sensor_msgs__msg__Imu__init+0x82>
 8017ee6:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8017eea:	4640      	mov	r0, r8
 8017eec:	f7f7 ffd2 	bl	800fe94 <geometry_msgs__msg__Vector3__init>
 8017ef0:	4604      	mov	r4, r0
 8017ef2:	b9d8      	cbnz	r0, 8017f2c <sensor_msgs__msg__Imu__init+0x74>
 8017ef4:	4628      	mov	r0, r5
 8017ef6:	f000 f86d 	bl	8017fd4 <std_msgs__msg__Header__fini>
 8017efa:	4630      	mov	r0, r6
 8017efc:	f000 f8b0 	bl	8018060 <geometry_msgs__msg__Quaternion__fini>
 8017f00:	4638      	mov	r0, r7
 8017f02:	f7f7 ffcb 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 8017f06:	4640      	mov	r0, r8
 8017f08:	f7f7 ffc8 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 8017f0c:	e00e      	b.n	8017f2c <sensor_msgs__msg__Imu__init+0x74>
 8017f0e:	4628      	mov	r0, r5
 8017f10:	f000 f860 	bl	8017fd4 <std_msgs__msg__Header__fini>
 8017f14:	f105 0018 	add.w	r0, r5, #24
 8017f18:	f000 f8a2 	bl	8018060 <geometry_msgs__msg__Quaternion__fini>
 8017f1c:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8017f20:	f7f7 ffbc 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 8017f24:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017f28:	f7f7 ffb8 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 8017f2c:	4620      	mov	r0, r4
 8017f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f32:	4604      	mov	r4, r0
 8017f34:	4620      	mov	r0, r4
 8017f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f3a:	4628      	mov	r0, r5
 8017f3c:	f000 f84a 	bl	8017fd4 <std_msgs__msg__Header__fini>
 8017f40:	4630      	mov	r0, r6
 8017f42:	f000 f88d 	bl	8018060 <geometry_msgs__msg__Quaternion__fini>
 8017f46:	4638      	mov	r0, r7
 8017f48:	f7f7 ffa8 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 8017f4c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017f50:	f7f7 ffa4 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 8017f54:	4620      	mov	r0, r4
 8017f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f5a:	4628      	mov	r0, r5
 8017f5c:	f000 f83a 	bl	8017fd4 <std_msgs__msg__Header__fini>
 8017f60:	4630      	mov	r0, r6
 8017f62:	e7d9      	b.n	8017f18 <sensor_msgs__msg__Imu__init+0x60>

08017f64 <sensor_msgs__msg__Imu__fini>:
 8017f64:	b188      	cbz	r0, 8017f8a <sensor_msgs__msg__Imu__fini+0x26>
 8017f66:	b510      	push	{r4, lr}
 8017f68:	4604      	mov	r4, r0
 8017f6a:	f000 f833 	bl	8017fd4 <std_msgs__msg__Header__fini>
 8017f6e:	f104 0018 	add.w	r0, r4, #24
 8017f72:	f000 f875 	bl	8018060 <geometry_msgs__msg__Quaternion__fini>
 8017f76:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8017f7a:	f7f7 ff8f 	bl	800fe9c <geometry_msgs__msg__Vector3__fini>
 8017f7e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8017f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f86:	f7f7 bf89 	b.w	800fe9c <geometry_msgs__msg__Vector3__fini>
 8017f8a:	4770      	bx	lr

08017f8c <std_msgs__msg__Header__init>:
 8017f8c:	b570      	push	{r4, r5, r6, lr}
 8017f8e:	4605      	mov	r5, r0
 8017f90:	b1a8      	cbz	r0, 8017fbe <std_msgs__msg__Header__init+0x32>
 8017f92:	f000 f849 	bl	8018028 <builtin_interfaces__msg__Time__init>
 8017f96:	4604      	mov	r4, r0
 8017f98:	b140      	cbz	r0, 8017fac <std_msgs__msg__Header__init+0x20>
 8017f9a:	f105 0608 	add.w	r6, r5, #8
 8017f9e:	4630      	mov	r0, r6
 8017fa0:	f001 f990 	bl	80192c4 <rosidl_runtime_c__String__init>
 8017fa4:	4604      	mov	r4, r0
 8017fa6:	b168      	cbz	r0, 8017fc4 <std_msgs__msg__Header__init+0x38>
 8017fa8:	4620      	mov	r0, r4
 8017faa:	bd70      	pop	{r4, r5, r6, pc}
 8017fac:	4628      	mov	r0, r5
 8017fae:	f000 f83f 	bl	8018030 <builtin_interfaces__msg__Time__fini>
 8017fb2:	f105 0008 	add.w	r0, r5, #8
 8017fb6:	f001 f99b 	bl	80192f0 <rosidl_runtime_c__String__fini>
 8017fba:	4620      	mov	r0, r4
 8017fbc:	bd70      	pop	{r4, r5, r6, pc}
 8017fbe:	4604      	mov	r4, r0
 8017fc0:	4620      	mov	r0, r4
 8017fc2:	bd70      	pop	{r4, r5, r6, pc}
 8017fc4:	4628      	mov	r0, r5
 8017fc6:	f000 f833 	bl	8018030 <builtin_interfaces__msg__Time__fini>
 8017fca:	4630      	mov	r0, r6
 8017fcc:	f001 f990 	bl	80192f0 <rosidl_runtime_c__String__fini>
 8017fd0:	e7ea      	b.n	8017fa8 <std_msgs__msg__Header__init+0x1c>
 8017fd2:	bf00      	nop

08017fd4 <std_msgs__msg__Header__fini>:
 8017fd4:	b148      	cbz	r0, 8017fea <std_msgs__msg__Header__fini+0x16>
 8017fd6:	b510      	push	{r4, lr}
 8017fd8:	4604      	mov	r4, r0
 8017fda:	f000 f829 	bl	8018030 <builtin_interfaces__msg__Time__fini>
 8017fde:	f104 0008 	add.w	r0, r4, #8
 8017fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fe6:	f001 b983 	b.w	80192f0 <rosidl_runtime_c__String__fini>
 8017fea:	4770      	bx	lr

08017fec <std_srvs__srv__SetBool_Request__init>:
 8017fec:	3800      	subs	r0, #0
 8017fee:	bf18      	it	ne
 8017ff0:	2001      	movne	r0, #1
 8017ff2:	4770      	bx	lr

08017ff4 <std_srvs__srv__SetBool_Request__fini>:
 8017ff4:	4770      	bx	lr
 8017ff6:	bf00      	nop

08017ff8 <std_srvs__srv__SetBool_Response__init>:
 8017ff8:	b538      	push	{r3, r4, r5, lr}
 8017ffa:	b138      	cbz	r0, 801800c <std_srvs__srv__SetBool_Response__init+0x14>
 8017ffc:	1d05      	adds	r5, r0, #4
 8017ffe:	4628      	mov	r0, r5
 8018000:	f001 f960 	bl	80192c4 <rosidl_runtime_c__String__init>
 8018004:	4604      	mov	r4, r0
 8018006:	b120      	cbz	r0, 8018012 <std_srvs__srv__SetBool_Response__init+0x1a>
 8018008:	4620      	mov	r0, r4
 801800a:	bd38      	pop	{r3, r4, r5, pc}
 801800c:	4604      	mov	r4, r0
 801800e:	4620      	mov	r0, r4
 8018010:	bd38      	pop	{r3, r4, r5, pc}
 8018012:	4628      	mov	r0, r5
 8018014:	f001 f96c 	bl	80192f0 <rosidl_runtime_c__String__fini>
 8018018:	4620      	mov	r0, r4
 801801a:	bd38      	pop	{r3, r4, r5, pc}

0801801c <std_srvs__srv__SetBool_Response__fini>:
 801801c:	b110      	cbz	r0, 8018024 <std_srvs__srv__SetBool_Response__fini+0x8>
 801801e:	3004      	adds	r0, #4
 8018020:	f001 b966 	b.w	80192f0 <rosidl_runtime_c__String__fini>
 8018024:	4770      	bx	lr
 8018026:	bf00      	nop

08018028 <builtin_interfaces__msg__Time__init>:
 8018028:	3800      	subs	r0, #0
 801802a:	bf18      	it	ne
 801802c:	2001      	movne	r0, #1
 801802e:	4770      	bx	lr

08018030 <builtin_interfaces__msg__Time__fini>:
 8018030:	4770      	bx	lr
 8018032:	bf00      	nop
 8018034:	0000      	movs	r0, r0
	...

08018038 <geometry_msgs__msg__Quaternion__init>:
 8018038:	b160      	cbz	r0, 8018054 <geometry_msgs__msg__Quaternion__init+0x1c>
 801803a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8018058 <geometry_msgs__msg__Quaternion__init+0x20>
 801803e:	2200      	movs	r2, #0
 8018040:	2300      	movs	r3, #0
 8018042:	e9c0 2300 	strd	r2, r3, [r0]
 8018046:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801804a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801804e:	ed80 7b06 	vstr	d7, [r0, #24]
 8018052:	2001      	movs	r0, #1
 8018054:	4770      	bx	lr
 8018056:	bf00      	nop
 8018058:	00000000 	.word	0x00000000
 801805c:	3ff00000 	.word	0x3ff00000

08018060 <geometry_msgs__msg__Quaternion__fini>:
 8018060:	4770      	bx	lr
 8018062:	bf00      	nop

08018064 <ucdr_serialize_string>:
 8018064:	b510      	push	{r4, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	4604      	mov	r4, r0
 801806a:	4608      	mov	r0, r1
 801806c:	9101      	str	r1, [sp, #4]
 801806e:	f7e8 f8e1 	bl	8000234 <strlen>
 8018072:	9901      	ldr	r1, [sp, #4]
 8018074:	1c42      	adds	r2, r0, #1
 8018076:	4620      	mov	r0, r4
 8018078:	b002      	add	sp, #8
 801807a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801807e:	f7f8 b9cb 	b.w	8010418 <ucdr_serialize_sequence_char>
 8018082:	bf00      	nop

08018084 <ucdr_deserialize_string>:
 8018084:	b500      	push	{lr}
 8018086:	b083      	sub	sp, #12
 8018088:	ab01      	add	r3, sp, #4
 801808a:	f7f8 f9d7 	bl	801043c <ucdr_deserialize_sequence_char>
 801808e:	b003      	add	sp, #12
 8018090:	f85d fb04 	ldr.w	pc, [sp], #4

08018094 <uxr_init_input_best_effort_stream>:
 8018094:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018098:	8003      	strh	r3, [r0, #0]
 801809a:	4770      	bx	lr

0801809c <uxr_reset_input_best_effort_stream>:
 801809c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80180a0:	8003      	strh	r3, [r0, #0]
 80180a2:	4770      	bx	lr

080180a4 <uxr_receive_best_effort_message>:
 80180a4:	b538      	push	{r3, r4, r5, lr}
 80180a6:	4604      	mov	r4, r0
 80180a8:	8800      	ldrh	r0, [r0, #0]
 80180aa:	460d      	mov	r5, r1
 80180ac:	f000 fd42 	bl	8018b34 <uxr_seq_num_cmp>
 80180b0:	4603      	mov	r3, r0
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80180b8:	bfb8      	it	lt
 80180ba:	8025      	strhlt	r5, [r4, #0]
 80180bc:	bd38      	pop	{r3, r4, r5, pc}
 80180be:	bf00      	nop

080180c0 <on_full_input_buffer>:
 80180c0:	b570      	push	{r4, r5, r6, lr}
 80180c2:	4605      	mov	r5, r0
 80180c4:	460c      	mov	r4, r1
 80180c6:	682b      	ldr	r3, [r5, #0]
 80180c8:	6809      	ldr	r1, [r1, #0]
 80180ca:	8920      	ldrh	r0, [r4, #8]
 80180cc:	6862      	ldr	r2, [r4, #4]
 80180ce:	fbb2 f2f0 	udiv	r2, r2, r0
 80180d2:	eba3 0c01 	sub.w	ip, r3, r1
 80180d6:	fbbc fcf2 	udiv	ip, ip, r2
 80180da:	f10c 0c01 	add.w	ip, ip, #1
 80180de:	fa1f f38c 	uxth.w	r3, ip
 80180e2:	fbb3 f6f0 	udiv	r6, r3, r0
 80180e6:	fb00 3316 	mls	r3, r0, r6, r3
 80180ea:	b29b      	uxth	r3, r3
 80180ec:	fb02 f303 	mul.w	r3, r2, r3
 80180f0:	1d18      	adds	r0, r3, #4
 80180f2:	4408      	add	r0, r1
 80180f4:	7d26      	ldrb	r6, [r4, #20]
 80180f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80180fa:	b116      	cbz	r6, 8018102 <on_full_input_buffer+0x42>
 80180fc:	2600      	movs	r6, #0
 80180fe:	f840 6c04 	str.w	r6, [r0, #-4]
 8018102:	2a03      	cmp	r2, #3
 8018104:	d801      	bhi.n	801810a <on_full_input_buffer+0x4a>
 8018106:	2001      	movs	r0, #1
 8018108:	bd70      	pop	{r4, r5, r6, pc}
 801810a:	3308      	adds	r3, #8
 801810c:	4419      	add	r1, r3
 801810e:	4628      	mov	r0, r5
 8018110:	692b      	ldr	r3, [r5, #16]
 8018112:	3a04      	subs	r2, #4
 8018114:	f7f4 fc40 	bl	800c998 <ucdr_init_buffer_origin>
 8018118:	4628      	mov	r0, r5
 801811a:	4903      	ldr	r1, [pc, #12]	@ (8018128 <on_full_input_buffer+0x68>)
 801811c:	4622      	mov	r2, r4
 801811e:	f7f4 fc17 	bl	800c950 <ucdr_set_on_full_buffer_callback>
 8018122:	2000      	movs	r0, #0
 8018124:	bd70      	pop	{r4, r5, r6, pc}
 8018126:	bf00      	nop
 8018128:	080180c1 	.word	0x080180c1

0801812c <uxr_init_input_reliable_stream>:
 801812c:	b500      	push	{lr}
 801812e:	e9c0 1200 	strd	r1, r2, [r0]
 8018132:	f04f 0e00 	mov.w	lr, #0
 8018136:	9a01      	ldr	r2, [sp, #4]
 8018138:	8103      	strh	r3, [r0, #8]
 801813a:	6102      	str	r2, [r0, #16]
 801813c:	f880 e014 	strb.w	lr, [r0, #20]
 8018140:	b1d3      	cbz	r3, 8018178 <uxr_init_input_reliable_stream+0x4c>
 8018142:	f8c1 e000 	str.w	lr, [r1]
 8018146:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801814a:	f1bc 0f01 	cmp.w	ip, #1
 801814e:	d913      	bls.n	8018178 <uxr_init_input_reliable_stream+0x4c>
 8018150:	2301      	movs	r3, #1
 8018152:	fbb3 f1fc 	udiv	r1, r3, ip
 8018156:	fb0c 3111 	mls	r1, ip, r1, r3
 801815a:	b289      	uxth	r1, r1
 801815c:	6842      	ldr	r2, [r0, #4]
 801815e:	fbb2 f2fc 	udiv	r2, r2, ip
 8018162:	fb01 f202 	mul.w	r2, r1, r2
 8018166:	6801      	ldr	r1, [r0, #0]
 8018168:	f841 e002 	str.w	lr, [r1, r2]
 801816c:	3301      	adds	r3, #1
 801816e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018172:	b29b      	uxth	r3, r3
 8018174:	459c      	cmp	ip, r3
 8018176:	d8ec      	bhi.n	8018152 <uxr_init_input_reliable_stream+0x26>
 8018178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801817c:	60c3      	str	r3, [r0, #12]
 801817e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018182:	bf00      	nop

08018184 <uxr_reset_input_reliable_stream>:
 8018184:	8901      	ldrh	r1, [r0, #8]
 8018186:	b1e9      	cbz	r1, 80181c4 <uxr_reset_input_reliable_stream+0x40>
 8018188:	f04f 0c00 	mov.w	ip, #0
 801818c:	b500      	push	{lr}
 801818e:	4663      	mov	r3, ip
 8018190:	46e6      	mov	lr, ip
 8018192:	fbb3 f2f1 	udiv	r2, r3, r1
 8018196:	fb01 3312 	mls	r3, r1, r2, r3
 801819a:	b29b      	uxth	r3, r3
 801819c:	6842      	ldr	r2, [r0, #4]
 801819e:	fbb2 f2f1 	udiv	r2, r2, r1
 80181a2:	fb02 f303 	mul.w	r3, r2, r3
 80181a6:	6802      	ldr	r2, [r0, #0]
 80181a8:	f842 e003 	str.w	lr, [r2, r3]
 80181ac:	f10c 0c01 	add.w	ip, ip, #1
 80181b0:	8901      	ldrh	r1, [r0, #8]
 80181b2:	fa1f f38c 	uxth.w	r3, ip
 80181b6:	4299      	cmp	r1, r3
 80181b8:	d8eb      	bhi.n	8018192 <uxr_reset_input_reliable_stream+0xe>
 80181ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80181be:	60c3      	str	r3, [r0, #12]
 80181c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80181c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80181c8:	60c3      	str	r3, [r0, #12]
 80181ca:	4770      	bx	lr

080181cc <uxr_receive_reliable_message>:
 80181cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181d0:	4604      	mov	r4, r0
 80181d2:	460d      	mov	r5, r1
 80181d4:	8901      	ldrh	r1, [r0, #8]
 80181d6:	8980      	ldrh	r0, [r0, #12]
 80181d8:	4690      	mov	r8, r2
 80181da:	461f      	mov	r7, r3
 80181dc:	f000 fca2 	bl	8018b24 <uxr_seq_num_add>
 80181e0:	4629      	mov	r1, r5
 80181e2:	4606      	mov	r6, r0
 80181e4:	89a0      	ldrh	r0, [r4, #12]
 80181e6:	f000 fca5 	bl	8018b34 <uxr_seq_num_cmp>
 80181ea:	2800      	cmp	r0, #0
 80181ec:	db0a      	blt.n	8018204 <uxr_receive_reliable_message+0x38>
 80181ee:	2600      	movs	r6, #0
 80181f0:	89e0      	ldrh	r0, [r4, #14]
 80181f2:	4629      	mov	r1, r5
 80181f4:	f000 fc9e 	bl	8018b34 <uxr_seq_num_cmp>
 80181f8:	2800      	cmp	r0, #0
 80181fa:	da00      	bge.n	80181fe <uxr_receive_reliable_message+0x32>
 80181fc:	81e5      	strh	r5, [r4, #14]
 80181fe:	4630      	mov	r0, r6
 8018200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018204:	4630      	mov	r0, r6
 8018206:	4629      	mov	r1, r5
 8018208:	f000 fc94 	bl	8018b34 <uxr_seq_num_cmp>
 801820c:	2800      	cmp	r0, #0
 801820e:	dbee      	blt.n	80181ee <uxr_receive_reliable_message+0x22>
 8018210:	6923      	ldr	r3, [r4, #16]
 8018212:	4640      	mov	r0, r8
 8018214:	4798      	blx	r3
 8018216:	2101      	movs	r1, #1
 8018218:	4681      	mov	r9, r0
 801821a:	89a0      	ldrh	r0, [r4, #12]
 801821c:	f000 fc82 	bl	8018b24 <uxr_seq_num_add>
 8018220:	f1b9 0f00 	cmp.w	r9, #0
 8018224:	d101      	bne.n	801822a <uxr_receive_reliable_message+0x5e>
 8018226:	4285      	cmp	r5, r0
 8018228:	d047      	beq.n	80182ba <uxr_receive_reliable_message+0xee>
 801822a:	8922      	ldrh	r2, [r4, #8]
 801822c:	fbb5 f0f2 	udiv	r0, r5, r2
 8018230:	fb02 5010 	mls	r0, r2, r0, r5
 8018234:	b280      	uxth	r0, r0
 8018236:	6863      	ldr	r3, [r4, #4]
 8018238:	fbb3 f3f2 	udiv	r3, r3, r2
 801823c:	fb00 f303 	mul.w	r3, r0, r3
 8018240:	6820      	ldr	r0, [r4, #0]
 8018242:	3304      	adds	r3, #4
 8018244:	4418      	add	r0, r3
 8018246:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d1cf      	bne.n	80181ee <uxr_receive_reliable_message+0x22>
 801824e:	4641      	mov	r1, r8
 8018250:	463a      	mov	r2, r7
 8018252:	f001 fe48 	bl	8019ee6 <memcpy>
 8018256:	8921      	ldrh	r1, [r4, #8]
 8018258:	fbb5 f2f1 	udiv	r2, r5, r1
 801825c:	fb01 5212 	mls	r2, r1, r2, r5
 8018260:	b292      	uxth	r2, r2
 8018262:	6863      	ldr	r3, [r4, #4]
 8018264:	fbb3 f3f1 	udiv	r3, r3, r1
 8018268:	fb02 f303 	mul.w	r3, r2, r3
 801826c:	6822      	ldr	r2, [r4, #0]
 801826e:	50d7      	str	r7, [r2, r3]
 8018270:	9a08      	ldr	r2, [sp, #32]
 8018272:	2301      	movs	r3, #1
 8018274:	7013      	strb	r3, [r2, #0]
 8018276:	f1b9 0f00 	cmp.w	r9, #0
 801827a:	d0b8      	beq.n	80181ee <uxr_receive_reliable_message+0x22>
 801827c:	89a6      	ldrh	r6, [r4, #12]
 801827e:	4630      	mov	r0, r6
 8018280:	2101      	movs	r1, #1
 8018282:	f000 fc4f 	bl	8018b24 <uxr_seq_num_add>
 8018286:	8922      	ldrh	r2, [r4, #8]
 8018288:	6863      	ldr	r3, [r4, #4]
 801828a:	fbb3 f3f2 	udiv	r3, r3, r2
 801828e:	4606      	mov	r6, r0
 8018290:	fbb0 f0f2 	udiv	r0, r0, r2
 8018294:	fb02 6010 	mls	r0, r2, r0, r6
 8018298:	b280      	uxth	r0, r0
 801829a:	fb00 f303 	mul.w	r3, r0, r3
 801829e:	6820      	ldr	r0, [r4, #0]
 80182a0:	3304      	adds	r3, #4
 80182a2:	4418      	add	r0, r3
 80182a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d0a0      	beq.n	80181ee <uxr_receive_reliable_message+0x22>
 80182ac:	6923      	ldr	r3, [r4, #16]
 80182ae:	4798      	blx	r3
 80182b0:	2802      	cmp	r0, #2
 80182b2:	d008      	beq.n	80182c6 <uxr_receive_reliable_message+0xfa>
 80182b4:	2801      	cmp	r0, #1
 80182b6:	d0e2      	beq.n	801827e <uxr_receive_reliable_message+0xb2>
 80182b8:	e799      	b.n	80181ee <uxr_receive_reliable_message+0x22>
 80182ba:	9b08      	ldr	r3, [sp, #32]
 80182bc:	81a5      	strh	r5, [r4, #12]
 80182be:	2601      	movs	r6, #1
 80182c0:	f883 9000 	strb.w	r9, [r3]
 80182c4:	e794      	b.n	80181f0 <uxr_receive_reliable_message+0x24>
 80182c6:	2601      	movs	r6, #1
 80182c8:	e792      	b.n	80181f0 <uxr_receive_reliable_message+0x24>
 80182ca:	bf00      	nop

080182cc <uxr_next_input_reliable_buffer_available>:
 80182cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182d0:	4604      	mov	r4, r0
 80182d2:	460f      	mov	r7, r1
 80182d4:	8980      	ldrh	r0, [r0, #12]
 80182d6:	2101      	movs	r1, #1
 80182d8:	4690      	mov	r8, r2
 80182da:	f000 fc23 	bl	8018b24 <uxr_seq_num_add>
 80182de:	8922      	ldrh	r2, [r4, #8]
 80182e0:	fbb0 f6f2 	udiv	r6, r0, r2
 80182e4:	fb02 0616 	mls	r6, r2, r6, r0
 80182e8:	b2b6      	uxth	r6, r6
 80182ea:	6863      	ldr	r3, [r4, #4]
 80182ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80182f0:	fb06 f303 	mul.w	r3, r6, r3
 80182f4:	6826      	ldr	r6, [r4, #0]
 80182f6:	3304      	adds	r3, #4
 80182f8:	441e      	add	r6, r3
 80182fa:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80182fe:	f1b9 0f00 	cmp.w	r9, #0
 8018302:	d023      	beq.n	801834c <uxr_next_input_reliable_buffer_available+0x80>
 8018304:	6923      	ldr	r3, [r4, #16]
 8018306:	4605      	mov	r5, r0
 8018308:	4630      	mov	r0, r6
 801830a:	4798      	blx	r3
 801830c:	4682      	mov	sl, r0
 801830e:	b300      	cbz	r0, 8018352 <uxr_next_input_reliable_buffer_available+0x86>
 8018310:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018314:	2101      	movs	r1, #1
 8018316:	4650      	mov	r0, sl
 8018318:	f000 fc04 	bl	8018b24 <uxr_seq_num_add>
 801831c:	8921      	ldrh	r1, [r4, #8]
 801831e:	fbb0 f2f1 	udiv	r2, r0, r1
 8018322:	4682      	mov	sl, r0
 8018324:	fb01 0212 	mls	r2, r1, r2, r0
 8018328:	e9d4 0300 	ldrd	r0, r3, [r4]
 801832c:	b292      	uxth	r2, r2
 801832e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018332:	fb02 f303 	mul.w	r3, r2, r3
 8018336:	3304      	adds	r3, #4
 8018338:	4418      	add	r0, r3
 801833a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801833e:	b12b      	cbz	r3, 801834c <uxr_next_input_reliable_buffer_available+0x80>
 8018340:	6923      	ldr	r3, [r4, #16]
 8018342:	4798      	blx	r3
 8018344:	2802      	cmp	r0, #2
 8018346:	d01b      	beq.n	8018380 <uxr_next_input_reliable_buffer_available+0xb4>
 8018348:	2801      	cmp	r0, #1
 801834a:	d0e3      	beq.n	8018314 <uxr_next_input_reliable_buffer_available+0x48>
 801834c:	2000      	movs	r0, #0
 801834e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018352:	464a      	mov	r2, r9
 8018354:	4631      	mov	r1, r6
 8018356:	4638      	mov	r0, r7
 8018358:	f7f4 fb26 	bl	800c9a8 <ucdr_init_buffer>
 801835c:	8921      	ldrh	r1, [r4, #8]
 801835e:	fbb5 f2f1 	udiv	r2, r5, r1
 8018362:	fb01 5212 	mls	r2, r1, r2, r5
 8018366:	b292      	uxth	r2, r2
 8018368:	6863      	ldr	r3, [r4, #4]
 801836a:	fbb3 f3f1 	udiv	r3, r3, r1
 801836e:	fb02 f303 	mul.w	r3, r2, r3
 8018372:	6822      	ldr	r2, [r4, #0]
 8018374:	f842 a003 	str.w	sl, [r2, r3]
 8018378:	2001      	movs	r0, #1
 801837a:	81a5      	strh	r5, [r4, #12]
 801837c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018380:	8920      	ldrh	r0, [r4, #8]
 8018382:	fbb5 f3f0 	udiv	r3, r5, r0
 8018386:	fb00 5513 	mls	r5, r0, r3, r5
 801838a:	b2ad      	uxth	r5, r5
 801838c:	6863      	ldr	r3, [r4, #4]
 801838e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018392:	fb03 f505 	mul.w	r5, r3, r5
 8018396:	6823      	ldr	r3, [r4, #0]
 8018398:	2000      	movs	r0, #0
 801839a:	5158      	str	r0, [r3, r5]
 801839c:	eb06 0108 	add.w	r1, r6, r8
 80183a0:	eba9 0208 	sub.w	r2, r9, r8
 80183a4:	4638      	mov	r0, r7
 80183a6:	f7f4 faff 	bl	800c9a8 <ucdr_init_buffer>
 80183aa:	4638      	mov	r0, r7
 80183ac:	4903      	ldr	r1, [pc, #12]	@ (80183bc <uxr_next_input_reliable_buffer_available+0xf0>)
 80183ae:	4622      	mov	r2, r4
 80183b0:	f7f4 face 	bl	800c950 <ucdr_set_on_full_buffer_callback>
 80183b4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80183b8:	2001      	movs	r0, #1
 80183ba:	e7c8      	b.n	801834e <uxr_next_input_reliable_buffer_available+0x82>
 80183bc:	080180c1 	.word	0x080180c1

080183c0 <uxr_process_heartbeat>:
 80183c0:	b538      	push	{r3, r4, r5, lr}
 80183c2:	4611      	mov	r1, r2
 80183c4:	4604      	mov	r4, r0
 80183c6:	89c0      	ldrh	r0, [r0, #14]
 80183c8:	4615      	mov	r5, r2
 80183ca:	f000 fbb3 	bl	8018b34 <uxr_seq_num_cmp>
 80183ce:	2800      	cmp	r0, #0
 80183d0:	bfb8      	it	lt
 80183d2:	81e5      	strhlt	r5, [r4, #14]
 80183d4:	bd38      	pop	{r3, r4, r5, pc}
 80183d6:	bf00      	nop

080183d8 <uxr_compute_acknack>:
 80183d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183dc:	8903      	ldrh	r3, [r0, #8]
 80183de:	8985      	ldrh	r5, [r0, #12]
 80183e0:	4604      	mov	r4, r0
 80183e2:	460e      	mov	r6, r1
 80183e4:	b1d3      	cbz	r3, 801841c <uxr_compute_acknack+0x44>
 80183e6:	4628      	mov	r0, r5
 80183e8:	2701      	movs	r7, #1
 80183ea:	e003      	b.n	80183f4 <uxr_compute_acknack+0x1c>
 80183ec:	4567      	cmp	r7, ip
 80183ee:	d215      	bcs.n	801841c <uxr_compute_acknack+0x44>
 80183f0:	89a0      	ldrh	r0, [r4, #12]
 80183f2:	3701      	adds	r7, #1
 80183f4:	b2b9      	uxth	r1, r7
 80183f6:	f000 fb95 	bl	8018b24 <uxr_seq_num_add>
 80183fa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80183fe:	fbb0 f3fc 	udiv	r3, r0, ip
 8018402:	fb0c 0313 	mls	r3, ip, r3, r0
 8018406:	b29a      	uxth	r2, r3
 8018408:	e9d4 1300 	ldrd	r1, r3, [r4]
 801840c:	fbb3 f3fc 	udiv	r3, r3, ip
 8018410:	fb02 f303 	mul.w	r3, r2, r3
 8018414:	58cb      	ldr	r3, [r1, r3]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d1e8      	bne.n	80183ec <uxr_compute_acknack+0x14>
 801841a:	4605      	mov	r5, r0
 801841c:	8035      	strh	r5, [r6, #0]
 801841e:	2101      	movs	r1, #1
 8018420:	4628      	mov	r0, r5
 8018422:	89e7      	ldrh	r7, [r4, #14]
 8018424:	f000 fb82 	bl	8018b2c <uxr_seq_num_sub>
 8018428:	4601      	mov	r1, r0
 801842a:	4638      	mov	r0, r7
 801842c:	f000 fb7e 	bl	8018b2c <uxr_seq_num_sub>
 8018430:	4605      	mov	r5, r0
 8018432:	b318      	cbz	r0, 801847c <uxr_compute_acknack+0xa4>
 8018434:	f04f 0900 	mov.w	r9, #0
 8018438:	464f      	mov	r7, r9
 801843a:	f04f 0801 	mov.w	r8, #1
 801843e:	fa1f f189 	uxth.w	r1, r9
 8018442:	8830      	ldrh	r0, [r6, #0]
 8018444:	f000 fb6e 	bl	8018b24 <uxr_seq_num_add>
 8018448:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801844c:	fbb0 f3fc 	udiv	r3, r0, ip
 8018450:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018454:	fb03 001c 	mls	r0, r3, ip, r0
 8018458:	b283      	uxth	r3, r0
 801845a:	fbb2 f2fc 	udiv	r2, r2, ip
 801845e:	fb02 f303 	mul.w	r3, r2, r3
 8018462:	fa08 f209 	lsl.w	r2, r8, r9
 8018466:	58cb      	ldr	r3, [r1, r3]
 8018468:	f109 0901 	add.w	r9, r9, #1
 801846c:	b90b      	cbnz	r3, 8018472 <uxr_compute_acknack+0x9a>
 801846e:	4317      	orrs	r7, r2
 8018470:	b2bf      	uxth	r7, r7
 8018472:	454d      	cmp	r5, r9
 8018474:	d1e3      	bne.n	801843e <uxr_compute_acknack+0x66>
 8018476:	4638      	mov	r0, r7
 8018478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801847c:	4607      	mov	r7, r0
 801847e:	4638      	mov	r0, r7
 8018480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018484 <uxr_init_output_best_effort_stream>:
 8018484:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018488:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801848c:	6001      	str	r1, [r0, #0]
 801848e:	7303      	strb	r3, [r0, #12]
 8018490:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018494:	4770      	bx	lr
 8018496:	bf00      	nop

08018498 <uxr_reset_output_best_effort_stream>:
 8018498:	7b02      	ldrb	r2, [r0, #12]
 801849a:	6042      	str	r2, [r0, #4]
 801849c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80184a0:	81c3      	strh	r3, [r0, #14]
 80184a2:	4770      	bx	lr

080184a4 <uxr_prepare_best_effort_buffer_to_write>:
 80184a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184a6:	4604      	mov	r4, r0
 80184a8:	b083      	sub	sp, #12
 80184aa:	6840      	ldr	r0, [r0, #4]
 80184ac:	460d      	mov	r5, r1
 80184ae:	4616      	mov	r6, r2
 80184b0:	f7fa fac4 	bl	8012a3c <uxr_submessage_padding>
 80184b4:	6863      	ldr	r3, [r4, #4]
 80184b6:	4418      	add	r0, r3
 80184b8:	68a3      	ldr	r3, [r4, #8]
 80184ba:	1942      	adds	r2, r0, r5
 80184bc:	4293      	cmp	r3, r2
 80184be:	bf2c      	ite	cs
 80184c0:	2701      	movcs	r7, #1
 80184c2:	2700      	movcc	r7, #0
 80184c4:	d202      	bcs.n	80184cc <uxr_prepare_best_effort_buffer_to_write+0x28>
 80184c6:	4638      	mov	r0, r7
 80184c8:	b003      	add	sp, #12
 80184ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184cc:	9000      	str	r0, [sp, #0]
 80184ce:	6821      	ldr	r1, [r4, #0]
 80184d0:	4630      	mov	r0, r6
 80184d2:	2300      	movs	r3, #0
 80184d4:	f7f4 fa56 	bl	800c984 <ucdr_init_buffer_origin_offset>
 80184d8:	6861      	ldr	r1, [r4, #4]
 80184da:	4638      	mov	r0, r7
 80184dc:	4429      	add	r1, r5
 80184de:	6061      	str	r1, [r4, #4]
 80184e0:	b003      	add	sp, #12
 80184e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080184e4 <uxr_prepare_best_effort_buffer_to_send>:
 80184e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184e8:	4604      	mov	r4, r0
 80184ea:	461d      	mov	r5, r3
 80184ec:	6840      	ldr	r0, [r0, #4]
 80184ee:	7b23      	ldrb	r3, [r4, #12]
 80184f0:	4298      	cmp	r0, r3
 80184f2:	bf8c      	ite	hi
 80184f4:	2601      	movhi	r6, #1
 80184f6:	2600      	movls	r6, #0
 80184f8:	d802      	bhi.n	8018500 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80184fa:	4630      	mov	r0, r6
 80184fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018500:	4688      	mov	r8, r1
 8018502:	89e0      	ldrh	r0, [r4, #14]
 8018504:	2101      	movs	r1, #1
 8018506:	4617      	mov	r7, r2
 8018508:	f000 fb0c 	bl	8018b24 <uxr_seq_num_add>
 801850c:	6823      	ldr	r3, [r4, #0]
 801850e:	81e0      	strh	r0, [r4, #14]
 8018510:	8028      	strh	r0, [r5, #0]
 8018512:	f8c8 3000 	str.w	r3, [r8]
 8018516:	6863      	ldr	r3, [r4, #4]
 8018518:	603b      	str	r3, [r7, #0]
 801851a:	7b23      	ldrb	r3, [r4, #12]
 801851c:	6063      	str	r3, [r4, #4]
 801851e:	4630      	mov	r0, r6
 8018520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018524 <on_full_output_buffer>:
 8018524:	b538      	push	{r3, r4, r5, lr}
 8018526:	6802      	ldr	r2, [r0, #0]
 8018528:	460c      	mov	r4, r1
 801852a:	6809      	ldr	r1, [r1, #0]
 801852c:	8923      	ldrh	r3, [r4, #8]
 801852e:	eba2 0c01 	sub.w	ip, r2, r1
 8018532:	6862      	ldr	r2, [r4, #4]
 8018534:	fbb2 f2f3 	udiv	r2, r2, r3
 8018538:	fbbc fcf2 	udiv	ip, ip, r2
 801853c:	f10c 0c01 	add.w	ip, ip, #1
 8018540:	fa1f fc8c 	uxth.w	ip, ip
 8018544:	fbbc fef3 	udiv	lr, ip, r3
 8018548:	fb03 c31e 	mls	r3, r3, lr, ip
 801854c:	b29b      	uxth	r3, r3
 801854e:	fb02 f303 	mul.w	r3, r2, r3
 8018552:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018556:	58ca      	ldr	r2, [r1, r3]
 8018558:	4463      	add	r3, ip
 801855a:	eba2 020c 	sub.w	r2, r2, ip
 801855e:	3308      	adds	r3, #8
 8018560:	4605      	mov	r5, r0
 8018562:	4419      	add	r1, r3
 8018564:	3a04      	subs	r2, #4
 8018566:	6903      	ldr	r3, [r0, #16]
 8018568:	f7f4 fa16 	bl	800c998 <ucdr_init_buffer_origin>
 801856c:	4628      	mov	r0, r5
 801856e:	4903      	ldr	r1, [pc, #12]	@ (801857c <on_full_output_buffer+0x58>)
 8018570:	4622      	mov	r2, r4
 8018572:	f7f4 f9ed 	bl	800c950 <ucdr_set_on_full_buffer_callback>
 8018576:	2000      	movs	r0, #0
 8018578:	bd38      	pop	{r3, r4, r5, pc}
 801857a:	bf00      	nop
 801857c:	08018525 	.word	0x08018525

08018580 <uxr_init_output_reliable_stream>:
 8018580:	b410      	push	{r4}
 8018582:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018586:	8103      	strh	r3, [r0, #8]
 8018588:	e9c0 1200 	strd	r1, r2, [r0]
 801858c:	f880 c00c 	strb.w	ip, [r0, #12]
 8018590:	b1d3      	cbz	r3, 80185c8 <uxr_init_output_reliable_stream+0x48>
 8018592:	f8c1 c000 	str.w	ip, [r1]
 8018596:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801859a:	f1bc 0f01 	cmp.w	ip, #1
 801859e:	d913      	bls.n	80185c8 <uxr_init_output_reliable_stream+0x48>
 80185a0:	2301      	movs	r3, #1
 80185a2:	fbb3 f1fc 	udiv	r1, r3, ip
 80185a6:	fb0c 3111 	mls	r1, ip, r1, r3
 80185aa:	b289      	uxth	r1, r1
 80185ac:	6842      	ldr	r2, [r0, #4]
 80185ae:	6804      	ldr	r4, [r0, #0]
 80185b0:	fbb2 f2fc 	udiv	r2, r2, ip
 80185b4:	fb01 f202 	mul.w	r2, r1, r2
 80185b8:	7b01      	ldrb	r1, [r0, #12]
 80185ba:	50a1      	str	r1, [r4, r2]
 80185bc:	3301      	adds	r3, #1
 80185be:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80185c2:	b29b      	uxth	r3, r3
 80185c4:	459c      	cmp	ip, r3
 80185c6:	d8ec      	bhi.n	80185a2 <uxr_init_output_reliable_stream+0x22>
 80185c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80185cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80185d0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80185d4:	4905      	ldr	r1, [pc, #20]	@ (80185ec <uxr_init_output_reliable_stream+0x6c>)
 80185d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185da:	f8c0 100e 	str.w	r1, [r0, #14]
 80185de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80185e2:	2300      	movs	r3, #0
 80185e4:	8242      	strh	r2, [r0, #18]
 80185e6:	8403      	strh	r3, [r0, #32]
 80185e8:	4770      	bx	lr
 80185ea:	bf00      	nop
 80185ec:	ffff0000 	.word	0xffff0000

080185f0 <uxr_reset_output_reliable_stream>:
 80185f0:	8901      	ldrh	r1, [r0, #8]
 80185f2:	b1b1      	cbz	r1, 8018622 <uxr_reset_output_reliable_stream+0x32>
 80185f4:	f04f 0c00 	mov.w	ip, #0
 80185f8:	4663      	mov	r3, ip
 80185fa:	fbb3 f2f1 	udiv	r2, r3, r1
 80185fe:	fb01 3312 	mls	r3, r1, r2, r3
 8018602:	b29b      	uxth	r3, r3
 8018604:	6842      	ldr	r2, [r0, #4]
 8018606:	fbb2 f2f1 	udiv	r2, r2, r1
 801860a:	6801      	ldr	r1, [r0, #0]
 801860c:	fb02 f303 	mul.w	r3, r2, r3
 8018610:	7b02      	ldrb	r2, [r0, #12]
 8018612:	50ca      	str	r2, [r1, r3]
 8018614:	f10c 0c01 	add.w	ip, ip, #1
 8018618:	8901      	ldrh	r1, [r0, #8]
 801861a:	fa1f f38c 	uxth.w	r3, ip
 801861e:	4299      	cmp	r1, r3
 8018620:	d8eb      	bhi.n	80185fa <uxr_reset_output_reliable_stream+0xa>
 8018622:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018626:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801862a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801862e:	4904      	ldr	r1, [pc, #16]	@ (8018640 <uxr_reset_output_reliable_stream+0x50>)
 8018630:	f8c0 100e 	str.w	r1, [r0, #14]
 8018634:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018638:	2300      	movs	r3, #0
 801863a:	8242      	strh	r2, [r0, #18]
 801863c:	8403      	strh	r3, [r0, #32]
 801863e:	4770      	bx	lr
 8018640:	ffff0000 	.word	0xffff0000

08018644 <uxr_prepare_reliable_buffer_to_write>:
 8018644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018648:	4604      	mov	r4, r0
 801864a:	b091      	sub	sp, #68	@ 0x44
 801864c:	8900      	ldrh	r0, [r0, #8]
 801864e:	89e6      	ldrh	r6, [r4, #14]
 8018650:	6823      	ldr	r3, [r4, #0]
 8018652:	9204      	str	r2, [sp, #16]
 8018654:	fbb6 f2f0 	udiv	r2, r6, r0
 8018658:	fb00 6212 	mls	r2, r0, r2, r6
 801865c:	b292      	uxth	r2, r2
 801865e:	6865      	ldr	r5, [r4, #4]
 8018660:	fbb5 f5f0 	udiv	r5, r5, r0
 8018664:	fb05 3202 	mla	r2, r5, r2, r3
 8018668:	3204      	adds	r2, #4
 801866a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801866e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8018672:	9203      	str	r2, [sp, #12]
 8018674:	468b      	mov	fp, r1
 8018676:	1f2f      	subs	r7, r5, #4
 8018678:	2800      	cmp	r0, #0
 801867a:	f000 814c 	beq.w	8018916 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801867e:	f04f 0c00 	mov.w	ip, #0
 8018682:	46e2      	mov	sl, ip
 8018684:	4661      	mov	r1, ip
 8018686:	fbb1 f2f0 	udiv	r2, r1, r0
 801868a:	fb00 1212 	mls	r2, r0, r2, r1
 801868e:	b292      	uxth	r2, r2
 8018690:	fb05 f202 	mul.w	r2, r5, r2
 8018694:	f10c 0c01 	add.w	ip, ip, #1
 8018698:	589a      	ldr	r2, [r3, r2]
 801869a:	454a      	cmp	r2, r9
 801869c:	bf08      	it	eq
 801869e:	f10a 0a01 	addeq.w	sl, sl, #1
 80186a2:	fa1f f18c 	uxth.w	r1, ip
 80186a6:	bf08      	it	eq
 80186a8:	fa1f fa8a 	uxtheq.w	sl, sl
 80186ac:	4281      	cmp	r1, r0
 80186ae:	d3ea      	bcc.n	8018686 <uxr_prepare_reliable_buffer_to_write+0x42>
 80186b0:	4640      	mov	r0, r8
 80186b2:	2104      	movs	r1, #4
 80186b4:	f8cd a014 	str.w	sl, [sp, #20]
 80186b8:	f7f4 f97a 	bl	800c9b0 <ucdr_alignment>
 80186bc:	4480      	add	r8, r0
 80186be:	eb08 020b 	add.w	r2, r8, fp
 80186c2:	42ba      	cmp	r2, r7
 80186c4:	f240 80cd 	bls.w	8018862 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80186c8:	7b22      	ldrb	r2, [r4, #12]
 80186ca:	445a      	add	r2, fp
 80186cc:	42ba      	cmp	r2, r7
 80186ce:	f240 80b5 	bls.w	801883c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80186d2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80186d6:	33fc      	adds	r3, #252	@ 0xfc
 80186d8:	b2ba      	uxth	r2, r7
 80186da:	4413      	add	r3, r2
 80186dc:	b29b      	uxth	r3, r3
 80186de:	fb0a f903 	mul.w	r9, sl, r3
 80186e2:	45d9      	cmp	r9, fp
 80186e4:	9305      	str	r3, [sp, #20]
 80186e6:	9306      	str	r3, [sp, #24]
 80186e8:	f0c0 80b7 	bcc.w	801885a <uxr_prepare_reliable_buffer_to_write+0x216>
 80186ec:	f108 0304 	add.w	r3, r8, #4
 80186f0:	42bb      	cmp	r3, r7
 80186f2:	f080 80db 	bcs.w	80188ac <uxr_prepare_reliable_buffer_to_write+0x268>
 80186f6:	f1a2 0904 	sub.w	r9, r2, #4
 80186fa:	eba9 0908 	sub.w	r9, r9, r8
 80186fe:	9b05      	ldr	r3, [sp, #20]
 8018700:	fa1f f989 	uxth.w	r9, r9
 8018704:	ebab 0b09 	sub.w	fp, fp, r9
 8018708:	fbbb f2f3 	udiv	r2, fp, r3
 801870c:	fb03 b312 	mls	r3, r3, r2, fp
 8018710:	2b00      	cmp	r3, #0
 8018712:	f000 80c8 	beq.w	80188a6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8018716:	3201      	adds	r2, #1
 8018718:	b292      	uxth	r2, r2
 801871a:	9306      	str	r3, [sp, #24]
 801871c:	4552      	cmp	r2, sl
 801871e:	f200 809c 	bhi.w	801885a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018722:	f10d 0b20 	add.w	fp, sp, #32
 8018726:	2a00      	cmp	r2, #0
 8018728:	d042      	beq.n	80187b0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801872a:	f8cd 801c 	str.w	r8, [sp, #28]
 801872e:	f04f 0a00 	mov.w	sl, #0
 8018732:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018736:	9505      	str	r5, [sp, #20]
 8018738:	f10d 0b20 	add.w	fp, sp, #32
 801873c:	4615      	mov	r5, r2
 801873e:	e000      	b.n	8018742 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018740:	46c1      	mov	r9, r8
 8018742:	8920      	ldrh	r0, [r4, #8]
 8018744:	fbb6 f2f0 	udiv	r2, r6, r0
 8018748:	fb00 6112 	mls	r1, r0, r2, r6
 801874c:	b28a      	uxth	r2, r1
 801874e:	6863      	ldr	r3, [r4, #4]
 8018750:	fbb3 f1f0 	udiv	r1, r3, r0
 8018754:	6823      	ldr	r3, [r4, #0]
 8018756:	fb02 f101 	mul.w	r1, r2, r1
 801875a:	3104      	adds	r1, #4
 801875c:	4419      	add	r1, r3
 801875e:	4658      	mov	r0, fp
 8018760:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018764:	9200      	str	r2, [sp, #0]
 8018766:	2300      	movs	r3, #0
 8018768:	463a      	mov	r2, r7
 801876a:	f7f4 f90b 	bl	800c984 <ucdr_init_buffer_origin_offset>
 801876e:	464a      	mov	r2, r9
 8018770:	2300      	movs	r3, #0
 8018772:	210d      	movs	r1, #13
 8018774:	4658      	mov	r0, fp
 8018776:	f7fa f921 	bl	80129bc <uxr_buffer_submessage_header>
 801877a:	8921      	ldrh	r1, [r4, #8]
 801877c:	fbb6 f2f1 	udiv	r2, r6, r1
 8018780:	fb01 6212 	mls	r2, r1, r2, r6
 8018784:	b292      	uxth	r2, r2
 8018786:	6863      	ldr	r3, [r4, #4]
 8018788:	fbb3 f3f1 	udiv	r3, r3, r1
 801878c:	fb02 f303 	mul.w	r3, r2, r3
 8018790:	6822      	ldr	r2, [r4, #0]
 8018792:	4630      	mov	r0, r6
 8018794:	50d7      	str	r7, [r2, r3]
 8018796:	2101      	movs	r1, #1
 8018798:	f000 f9c4 	bl	8018b24 <uxr_seq_num_add>
 801879c:	f10a 0a01 	add.w	sl, sl, #1
 80187a0:	fa1f f38a 	uxth.w	r3, sl
 80187a4:	429d      	cmp	r5, r3
 80187a6:	4606      	mov	r6, r0
 80187a8:	d8ca      	bhi.n	8018740 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80187aa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80187ae:	9d05      	ldr	r5, [sp, #20]
 80187b0:	8920      	ldrh	r0, [r4, #8]
 80187b2:	fbb6 f3f0 	udiv	r3, r6, r0
 80187b6:	fb00 6313 	mls	r3, r0, r3, r6
 80187ba:	b299      	uxth	r1, r3
 80187bc:	6863      	ldr	r3, [r4, #4]
 80187be:	fbb3 f3f0 	udiv	r3, r3, r0
 80187c2:	fb01 f303 	mul.w	r3, r1, r3
 80187c6:	6821      	ldr	r1, [r4, #0]
 80187c8:	3304      	adds	r3, #4
 80187ca:	4419      	add	r1, r3
 80187cc:	463a      	mov	r2, r7
 80187ce:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80187d2:	9000      	str	r0, [sp, #0]
 80187d4:	2300      	movs	r3, #0
 80187d6:	4658      	mov	r0, fp
 80187d8:	f7f4 f8d4 	bl	800c984 <ucdr_init_buffer_origin_offset>
 80187dc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80187e0:	4658      	mov	r0, fp
 80187e2:	fa1f f289 	uxth.w	r2, r9
 80187e6:	2302      	movs	r3, #2
 80187e8:	210d      	movs	r1, #13
 80187ea:	f7fa f8e7 	bl	80129bc <uxr_buffer_submessage_header>
 80187ee:	9b03      	ldr	r3, [sp, #12]
 80187f0:	8927      	ldrh	r7, [r4, #8]
 80187f2:	7b20      	ldrb	r0, [r4, #12]
 80187f4:	f108 0104 	add.w	r1, r8, #4
 80187f8:	440b      	add	r3, r1
 80187fa:	4619      	mov	r1, r3
 80187fc:	fbb6 f3f7 	udiv	r3, r6, r7
 8018800:	fb07 6313 	mls	r3, r7, r3, r6
 8018804:	f1a5 0208 	sub.w	r2, r5, #8
 8018808:	b29d      	uxth	r5, r3
 801880a:	3004      	adds	r0, #4
 801880c:	6863      	ldr	r3, [r4, #4]
 801880e:	fbb3 f3f7 	udiv	r3, r3, r7
 8018812:	fb05 f303 	mul.w	r3, r5, r3
 8018816:	6825      	ldr	r5, [r4, #0]
 8018818:	4448      	add	r0, r9
 801881a:	50e8      	str	r0, [r5, r3]
 801881c:	9d04      	ldr	r5, [sp, #16]
 801881e:	eba2 0208 	sub.w	r2, r2, r8
 8018822:	4628      	mov	r0, r5
 8018824:	f7f4 f8c0 	bl	800c9a8 <ucdr_init_buffer>
 8018828:	4628      	mov	r0, r5
 801882a:	493c      	ldr	r1, [pc, #240]	@ (801891c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801882c:	4622      	mov	r2, r4
 801882e:	f7f4 f88f 	bl	800c950 <ucdr_set_on_full_buffer_callback>
 8018832:	2001      	movs	r0, #1
 8018834:	81e6      	strh	r6, [r4, #14]
 8018836:	b011      	add	sp, #68	@ 0x44
 8018838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801883c:	2101      	movs	r1, #1
 801883e:	89e0      	ldrh	r0, [r4, #14]
 8018840:	f000 f970 	bl	8018b24 <uxr_seq_num_add>
 8018844:	8921      	ldrh	r1, [r4, #8]
 8018846:	4605      	mov	r5, r0
 8018848:	8a60      	ldrh	r0, [r4, #18]
 801884a:	f000 f96b 	bl	8018b24 <uxr_seq_num_add>
 801884e:	4601      	mov	r1, r0
 8018850:	4628      	mov	r0, r5
 8018852:	f000 f96f 	bl	8018b34 <uxr_seq_num_cmp>
 8018856:	2800      	cmp	r0, #0
 8018858:	dd42      	ble.n	80188e0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801885a:	2000      	movs	r0, #0
 801885c:	b011      	add	sp, #68	@ 0x44
 801885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018862:	8921      	ldrh	r1, [r4, #8]
 8018864:	8a60      	ldrh	r0, [r4, #18]
 8018866:	9205      	str	r2, [sp, #20]
 8018868:	f000 f95c 	bl	8018b24 <uxr_seq_num_add>
 801886c:	4601      	mov	r1, r0
 801886e:	4630      	mov	r0, r6
 8018870:	f000 f960 	bl	8018b34 <uxr_seq_num_cmp>
 8018874:	2800      	cmp	r0, #0
 8018876:	9a05      	ldr	r2, [sp, #20]
 8018878:	dcef      	bgt.n	801885a <uxr_prepare_reliable_buffer_to_write+0x216>
 801887a:	8927      	ldrh	r7, [r4, #8]
 801887c:	fbb6 f3f7 	udiv	r3, r6, r7
 8018880:	fb07 6313 	mls	r3, r7, r3, r6
 8018884:	b29d      	uxth	r5, r3
 8018886:	6863      	ldr	r3, [r4, #4]
 8018888:	6824      	ldr	r4, [r4, #0]
 801888a:	fbb3 f3f7 	udiv	r3, r3, r7
 801888e:	fb05 f303 	mul.w	r3, r5, r3
 8018892:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018896:	50e2      	str	r2, [r4, r3]
 8018898:	2300      	movs	r3, #0
 801889a:	f8cd 8000 	str.w	r8, [sp]
 801889e:	f7f4 f871 	bl	800c984 <ucdr_init_buffer_origin_offset>
 80188a2:	2001      	movs	r0, #1
 80188a4:	e7da      	b.n	801885c <uxr_prepare_reliable_buffer_to_write+0x218>
 80188a6:	b293      	uxth	r3, r2
 80188a8:	461a      	mov	r2, r3
 80188aa:	e737      	b.n	801871c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80188ac:	4630      	mov	r0, r6
 80188ae:	2101      	movs	r1, #1
 80188b0:	9207      	str	r2, [sp, #28]
 80188b2:	f000 f937 	bl	8018b24 <uxr_seq_num_add>
 80188b6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80188ba:	fbb0 f1fc 	udiv	r1, r0, ip
 80188be:	fb0c 0111 	mls	r1, ip, r1, r0
 80188c2:	4606      	mov	r6, r0
 80188c4:	b288      	uxth	r0, r1
 80188c6:	6863      	ldr	r3, [r4, #4]
 80188c8:	fbb3 f1fc 	udiv	r1, r3, ip
 80188cc:	6823      	ldr	r3, [r4, #0]
 80188ce:	9a07      	ldr	r2, [sp, #28]
 80188d0:	fb00 f101 	mul.w	r1, r0, r1
 80188d4:	3104      	adds	r1, #4
 80188d6:	440b      	add	r3, r1
 80188d8:	9303      	str	r3, [sp, #12]
 80188da:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80188de:	e70a      	b.n	80186f6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80188e0:	8921      	ldrh	r1, [r4, #8]
 80188e2:	fbb5 f3f1 	udiv	r3, r5, r1
 80188e6:	fb01 5313 	mls	r3, r1, r3, r5
 80188ea:	b29a      	uxth	r2, r3
 80188ec:	6863      	ldr	r3, [r4, #4]
 80188ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80188f2:	6821      	ldr	r1, [r4, #0]
 80188f4:	9804      	ldr	r0, [sp, #16]
 80188f6:	fb02 f303 	mul.w	r3, r2, r3
 80188fa:	3304      	adds	r3, #4
 80188fc:	7b22      	ldrb	r2, [r4, #12]
 80188fe:	4419      	add	r1, r3
 8018900:	445a      	add	r2, fp
 8018902:	f841 2c04 	str.w	r2, [r1, #-4]
 8018906:	7b23      	ldrb	r3, [r4, #12]
 8018908:	9300      	str	r3, [sp, #0]
 801890a:	2300      	movs	r3, #0
 801890c:	f7f4 f83a 	bl	800c984 <ucdr_init_buffer_origin_offset>
 8018910:	81e5      	strh	r5, [r4, #14]
 8018912:	2001      	movs	r0, #1
 8018914:	e7a2      	b.n	801885c <uxr_prepare_reliable_buffer_to_write+0x218>
 8018916:	4682      	mov	sl, r0
 8018918:	e6ca      	b.n	80186b0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801891a:	bf00      	nop
 801891c:	08018525 	.word	0x08018525

08018920 <uxr_prepare_next_reliable_buffer_to_send>:
 8018920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018922:	4604      	mov	r4, r0
 8018924:	460f      	mov	r7, r1
 8018926:	8a00      	ldrh	r0, [r0, #16]
 8018928:	2101      	movs	r1, #1
 801892a:	4616      	mov	r6, r2
 801892c:	461d      	mov	r5, r3
 801892e:	f000 f8f9 	bl	8018b24 <uxr_seq_num_add>
 8018932:	8028      	strh	r0, [r5, #0]
 8018934:	8922      	ldrh	r2, [r4, #8]
 8018936:	fbb0 f3f2 	udiv	r3, r0, r2
 801893a:	fb02 0c13 	mls	ip, r2, r3, r0
 801893e:	fa1f fc8c 	uxth.w	ip, ip
 8018942:	6863      	ldr	r3, [r4, #4]
 8018944:	fbb3 f3f2 	udiv	r3, r3, r2
 8018948:	fb0c fc03 	mul.w	ip, ip, r3
 801894c:	6823      	ldr	r3, [r4, #0]
 801894e:	89e1      	ldrh	r1, [r4, #14]
 8018950:	f10c 0c04 	add.w	ip, ip, #4
 8018954:	4463      	add	r3, ip
 8018956:	603b      	str	r3, [r7, #0]
 8018958:	6823      	ldr	r3, [r4, #0]
 801895a:	449c      	add	ip, r3
 801895c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018960:	6033      	str	r3, [r6, #0]
 8018962:	f000 f8e7 	bl	8018b34 <uxr_seq_num_cmp>
 8018966:	2800      	cmp	r0, #0
 8018968:	dd01      	ble.n	801896e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801896a:	2000      	movs	r0, #0
 801896c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801896e:	7b23      	ldrb	r3, [r4, #12]
 8018970:	6832      	ldr	r2, [r6, #0]
 8018972:	429a      	cmp	r2, r3
 8018974:	d9f9      	bls.n	801896a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018976:	8a61      	ldrh	r1, [r4, #18]
 8018978:	8a20      	ldrh	r0, [r4, #16]
 801897a:	f000 f8d7 	bl	8018b2c <uxr_seq_num_sub>
 801897e:	8923      	ldrh	r3, [r4, #8]
 8018980:	4283      	cmp	r3, r0
 8018982:	d0f2      	beq.n	801896a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018984:	8828      	ldrh	r0, [r5, #0]
 8018986:	89e3      	ldrh	r3, [r4, #14]
 8018988:	8220      	strh	r0, [r4, #16]
 801898a:	4298      	cmp	r0, r3
 801898c:	d001      	beq.n	8018992 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801898e:	2001      	movs	r0, #1
 8018990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018992:	2101      	movs	r1, #1
 8018994:	f000 f8c6 	bl	8018b24 <uxr_seq_num_add>
 8018998:	81e0      	strh	r0, [r4, #14]
 801899a:	2001      	movs	r0, #1
 801899c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801899e:	bf00      	nop

080189a0 <uxr_update_output_stream_heartbeat_timestamp>:
 80189a0:	b570      	push	{r4, r5, r6, lr}
 80189a2:	8a01      	ldrh	r1, [r0, #16]
 80189a4:	4604      	mov	r4, r0
 80189a6:	8a40      	ldrh	r0, [r0, #18]
 80189a8:	4615      	mov	r5, r2
 80189aa:	461e      	mov	r6, r3
 80189ac:	f000 f8c2 	bl	8018b34 <uxr_seq_num_cmp>
 80189b0:	2800      	cmp	r0, #0
 80189b2:	db07      	blt.n	80189c4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80189b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80189b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80189bc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80189c0:	2000      	movs	r0, #0
 80189c2:	bd70      	pop	{r4, r5, r6, pc}
 80189c4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80189c8:	b940      	cbnz	r0, 80189dc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80189ca:	2301      	movs	r3, #1
 80189cc:	f884 3020 	strb.w	r3, [r4, #32]
 80189d0:	3564      	adds	r5, #100	@ 0x64
 80189d2:	f146 0600 	adc.w	r6, r6, #0
 80189d6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80189da:	bd70      	pop	{r4, r5, r6, pc}
 80189dc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80189e0:	4295      	cmp	r5, r2
 80189e2:	eb76 0303 	sbcs.w	r3, r6, r3
 80189e6:	bfa5      	ittet	ge
 80189e8:	3001      	addge	r0, #1
 80189ea:	f884 0020 	strbge.w	r0, [r4, #32]
 80189ee:	2000      	movlt	r0, #0
 80189f0:	2001      	movge	r0, #1
 80189f2:	e7ed      	b.n	80189d0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080189f4 <uxr_begin_output_nack_buffer_it>:
 80189f4:	8a40      	ldrh	r0, [r0, #18]
 80189f6:	4770      	bx	lr

080189f8 <uxr_next_reliable_nack_buffer_to_send>:
 80189f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189fc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8018a00:	b082      	sub	sp, #8
 8018a02:	f1b8 0f00 	cmp.w	r8, #0
 8018a06:	d011      	beq.n	8018a2c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8018a08:	4604      	mov	r4, r0
 8018a0a:	8818      	ldrh	r0, [r3, #0]
 8018a0c:	460e      	mov	r6, r1
 8018a0e:	4617      	mov	r7, r2
 8018a10:	461d      	mov	r5, r3
 8018a12:	2101      	movs	r1, #1
 8018a14:	f000 f886 	bl	8018b24 <uxr_seq_num_add>
 8018a18:	8028      	strh	r0, [r5, #0]
 8018a1a:	8a21      	ldrh	r1, [r4, #16]
 8018a1c:	f000 f88a 	bl	8018b34 <uxr_seq_num_cmp>
 8018a20:	2800      	cmp	r0, #0
 8018a22:	dd07      	ble.n	8018a34 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018a24:	f04f 0800 	mov.w	r8, #0
 8018a28:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8018a2c:	4640      	mov	r0, r8
 8018a2e:	b002      	add	sp, #8
 8018a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a34:	8921      	ldrh	r1, [r4, #8]
 8018a36:	8828      	ldrh	r0, [r5, #0]
 8018a38:	6823      	ldr	r3, [r4, #0]
 8018a3a:	fbb0 f2f1 	udiv	r2, r0, r1
 8018a3e:	fb01 0c12 	mls	ip, r1, r2, r0
 8018a42:	fa1f f28c 	uxth.w	r2, ip
 8018a46:	9301      	str	r3, [sp, #4]
 8018a48:	6863      	ldr	r3, [r4, #4]
 8018a4a:	fbb3 fcf1 	udiv	ip, r3, r1
 8018a4e:	9b01      	ldr	r3, [sp, #4]
 8018a50:	fb02 fc0c 	mul.w	ip, r2, ip
 8018a54:	f10c 0c04 	add.w	ip, ip, #4
 8018a58:	4463      	add	r3, ip
 8018a5a:	6033      	str	r3, [r6, #0]
 8018a5c:	6823      	ldr	r3, [r4, #0]
 8018a5e:	4463      	add	r3, ip
 8018a60:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018a64:	603b      	str	r3, [r7, #0]
 8018a66:	7b22      	ldrb	r2, [r4, #12]
 8018a68:	429a      	cmp	r2, r3
 8018a6a:	d0d2      	beq.n	8018a12 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018a6c:	4640      	mov	r0, r8
 8018a6e:	b002      	add	sp, #8
 8018a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a74 <uxr_process_acknack>:
 8018a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a76:	4604      	mov	r4, r0
 8018a78:	460e      	mov	r6, r1
 8018a7a:	4610      	mov	r0, r2
 8018a7c:	2101      	movs	r1, #1
 8018a7e:	f000 f855 	bl	8018b2c <uxr_seq_num_sub>
 8018a82:	8a61      	ldrh	r1, [r4, #18]
 8018a84:	f000 f852 	bl	8018b2c <uxr_seq_num_sub>
 8018a88:	b1c0      	cbz	r0, 8018abc <uxr_process_acknack+0x48>
 8018a8a:	4605      	mov	r5, r0
 8018a8c:	2700      	movs	r7, #0
 8018a8e:	2101      	movs	r1, #1
 8018a90:	8a60      	ldrh	r0, [r4, #18]
 8018a92:	f000 f847 	bl	8018b24 <uxr_seq_num_add>
 8018a96:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018a9a:	fbb0 f1fc 	udiv	r1, r0, ip
 8018a9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018aa2:	fb0c 0111 	mls	r1, ip, r1, r0
 8018aa6:	b289      	uxth	r1, r1
 8018aa8:	3701      	adds	r7, #1
 8018aaa:	fbb3 f3fc 	udiv	r3, r3, ip
 8018aae:	fb01 f303 	mul.w	r3, r1, r3
 8018ab2:	42bd      	cmp	r5, r7
 8018ab4:	7b21      	ldrb	r1, [r4, #12]
 8018ab6:	8260      	strh	r0, [r4, #18]
 8018ab8:	50d1      	str	r1, [r2, r3]
 8018aba:	d1e8      	bne.n	8018a8e <uxr_process_acknack+0x1a>
 8018abc:	3e00      	subs	r6, #0
 8018abe:	f04f 0300 	mov.w	r3, #0
 8018ac2:	bf18      	it	ne
 8018ac4:	2601      	movne	r6, #1
 8018ac6:	f884 3020 	strb.w	r3, [r4, #32]
 8018aca:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8018ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018ad0 <uxr_is_output_up_to_date>:
 8018ad0:	8a01      	ldrh	r1, [r0, #16]
 8018ad2:	8a40      	ldrh	r0, [r0, #18]
 8018ad4:	b508      	push	{r3, lr}
 8018ad6:	f000 f82d 	bl	8018b34 <uxr_seq_num_cmp>
 8018ada:	fab0 f080 	clz	r0, r0
 8018ade:	0940      	lsrs	r0, r0, #5
 8018ae0:	bd08      	pop	{r3, pc}
 8018ae2:	bf00      	nop

08018ae4 <get_available_free_slots>:
 8018ae4:	8902      	ldrh	r2, [r0, #8]
 8018ae6:	b1da      	cbz	r2, 8018b20 <get_available_free_slots+0x3c>
 8018ae8:	b530      	push	{r4, r5, lr}
 8018aea:	2100      	movs	r1, #0
 8018aec:	6843      	ldr	r3, [r0, #4]
 8018aee:	6805      	ldr	r5, [r0, #0]
 8018af0:	7b04      	ldrb	r4, [r0, #12]
 8018af2:	fbb3 fef2 	udiv	lr, r3, r2
 8018af6:	4608      	mov	r0, r1
 8018af8:	460b      	mov	r3, r1
 8018afa:	fbb3 fcf2 	udiv	ip, r3, r2
 8018afe:	fb02 331c 	mls	r3, r2, ip, r3
 8018b02:	b29b      	uxth	r3, r3
 8018b04:	fb0e f303 	mul.w	r3, lr, r3
 8018b08:	3101      	adds	r1, #1
 8018b0a:	f855 c003 	ldr.w	ip, [r5, r3]
 8018b0e:	4564      	cmp	r4, ip
 8018b10:	bf08      	it	eq
 8018b12:	3001      	addeq	r0, #1
 8018b14:	b28b      	uxth	r3, r1
 8018b16:	bf08      	it	eq
 8018b18:	b280      	uxtheq	r0, r0
 8018b1a:	4293      	cmp	r3, r2
 8018b1c:	d3ed      	bcc.n	8018afa <get_available_free_slots+0x16>
 8018b1e:	bd30      	pop	{r4, r5, pc}
 8018b20:	4610      	mov	r0, r2
 8018b22:	4770      	bx	lr

08018b24 <uxr_seq_num_add>:
 8018b24:	4408      	add	r0, r1
 8018b26:	b280      	uxth	r0, r0
 8018b28:	4770      	bx	lr
 8018b2a:	bf00      	nop

08018b2c <uxr_seq_num_sub>:
 8018b2c:	1a40      	subs	r0, r0, r1
 8018b2e:	b280      	uxth	r0, r0
 8018b30:	4770      	bx	lr
 8018b32:	bf00      	nop

08018b34 <uxr_seq_num_cmp>:
 8018b34:	4288      	cmp	r0, r1
 8018b36:	d011      	beq.n	8018b5c <uxr_seq_num_cmp+0x28>
 8018b38:	d309      	bcc.n	8018b4e <uxr_seq_num_cmp+0x1a>
 8018b3a:	4288      	cmp	r0, r1
 8018b3c:	d910      	bls.n	8018b60 <uxr_seq_num_cmp+0x2c>
 8018b3e:	1a40      	subs	r0, r0, r1
 8018b40:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018b44:	bfd4      	ite	le
 8018b46:	2001      	movle	r0, #1
 8018b48:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018b4c:	4770      	bx	lr
 8018b4e:	1a0b      	subs	r3, r1, r0
 8018b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018b54:	daf1      	bge.n	8018b3a <uxr_seq_num_cmp+0x6>
 8018b56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018b5a:	4770      	bx	lr
 8018b5c:	2000      	movs	r0, #0
 8018b5e:	4770      	bx	lr
 8018b60:	2001      	movs	r0, #1
 8018b62:	4770      	bx	lr

08018b64 <rcl_get_default_domain_id>:
 8018b64:	b530      	push	{r4, r5, lr}
 8018b66:	b083      	sub	sp, #12
 8018b68:	2300      	movs	r3, #0
 8018b6a:	9300      	str	r3, [sp, #0]
 8018b6c:	b1d0      	cbz	r0, 8018ba4 <rcl_get_default_domain_id+0x40>
 8018b6e:	4604      	mov	r4, r0
 8018b70:	4669      	mov	r1, sp
 8018b72:	4815      	ldr	r0, [pc, #84]	@ (8018bc8 <rcl_get_default_domain_id+0x64>)
 8018b74:	f7fe f814 	bl	8016ba0 <rcutils_get_env>
 8018b78:	4602      	mov	r2, r0
 8018b7a:	b110      	cbz	r0, 8018b82 <rcl_get_default_domain_id+0x1e>
 8018b7c:	2001      	movs	r0, #1
 8018b7e:	b003      	add	sp, #12
 8018b80:	bd30      	pop	{r4, r5, pc}
 8018b82:	9b00      	ldr	r3, [sp, #0]
 8018b84:	b18b      	cbz	r3, 8018baa <rcl_get_default_domain_id+0x46>
 8018b86:	7818      	ldrb	r0, [r3, #0]
 8018b88:	2800      	cmp	r0, #0
 8018b8a:	d0f8      	beq.n	8018b7e <rcl_get_default_domain_id+0x1a>
 8018b8c:	a901      	add	r1, sp, #4
 8018b8e:	4618      	mov	r0, r3
 8018b90:	9201      	str	r2, [sp, #4]
 8018b92:	f000 fe39 	bl	8019808 <strtoul>
 8018b96:	4605      	mov	r5, r0
 8018b98:	b150      	cbz	r0, 8018bb0 <rcl_get_default_domain_id+0x4c>
 8018b9a:	1c43      	adds	r3, r0, #1
 8018b9c:	d00d      	beq.n	8018bba <rcl_get_default_domain_id+0x56>
 8018b9e:	6025      	str	r5, [r4, #0]
 8018ba0:	2000      	movs	r0, #0
 8018ba2:	e7ec      	b.n	8018b7e <rcl_get_default_domain_id+0x1a>
 8018ba4:	200b      	movs	r0, #11
 8018ba6:	b003      	add	sp, #12
 8018ba8:	bd30      	pop	{r4, r5, pc}
 8018baa:	4618      	mov	r0, r3
 8018bac:	b003      	add	sp, #12
 8018bae:	bd30      	pop	{r4, r5, pc}
 8018bb0:	9b01      	ldr	r3, [sp, #4]
 8018bb2:	781b      	ldrb	r3, [r3, #0]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d0f2      	beq.n	8018b9e <rcl_get_default_domain_id+0x3a>
 8018bb8:	e7e0      	b.n	8018b7c <rcl_get_default_domain_id+0x18>
 8018bba:	f001 f95f 	bl	8019e7c <__errno>
 8018bbe:	6803      	ldr	r3, [r0, #0]
 8018bc0:	2b22      	cmp	r3, #34	@ 0x22
 8018bc2:	d1ec      	bne.n	8018b9e <rcl_get_default_domain_id+0x3a>
 8018bc4:	e7da      	b.n	8018b7c <rcl_get_default_domain_id+0x18>
 8018bc6:	bf00      	nop
 8018bc8:	0801c964 	.word	0x0801c964

08018bcc <rcl_expand_topic_name>:
 8018bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bd0:	b08b      	sub	sp, #44	@ 0x2c
 8018bd2:	9306      	str	r3, [sp, #24]
 8018bd4:	2800      	cmp	r0, #0
 8018bd6:	f000 80ad 	beq.w	8018d34 <rcl_expand_topic_name+0x168>
 8018bda:	460e      	mov	r6, r1
 8018bdc:	2900      	cmp	r1, #0
 8018bde:	f000 80a9 	beq.w	8018d34 <rcl_expand_topic_name+0x168>
 8018be2:	4617      	mov	r7, r2
 8018be4:	2a00      	cmp	r2, #0
 8018be6:	f000 80a5 	beq.w	8018d34 <rcl_expand_topic_name+0x168>
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	f000 80a2 	beq.w	8018d34 <rcl_expand_topic_name+0x168>
 8018bf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	f000 809e 	beq.w	8018d34 <rcl_expand_topic_name+0x168>
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	a909      	add	r1, sp, #36	@ 0x24
 8018bfc:	4680      	mov	r8, r0
 8018bfe:	f000 fa57 	bl	80190b0 <rcl_validate_topic_name>
 8018c02:	4604      	mov	r4, r0
 8018c04:	2800      	cmp	r0, #0
 8018c06:	f040 8096 	bne.w	8018d36 <rcl_expand_topic_name+0x16a>
 8018c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	f040 809a 	bne.w	8018d46 <rcl_expand_topic_name+0x17a>
 8018c12:	4602      	mov	r2, r0
 8018c14:	a909      	add	r1, sp, #36	@ 0x24
 8018c16:	4630      	mov	r0, r6
 8018c18:	f7fe fbec 	bl	80173f4 <rmw_validate_node_name>
 8018c1c:	2800      	cmp	r0, #0
 8018c1e:	f040 808e 	bne.w	8018d3e <rcl_expand_topic_name+0x172>
 8018c22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c24:	2a00      	cmp	r2, #0
 8018c26:	f040 8093 	bne.w	8018d50 <rcl_expand_topic_name+0x184>
 8018c2a:	a909      	add	r1, sp, #36	@ 0x24
 8018c2c:	4638      	mov	r0, r7
 8018c2e:	f7fe fbc3 	bl	80173b8 <rmw_validate_namespace>
 8018c32:	2800      	cmp	r0, #0
 8018c34:	f040 8083 	bne.w	8018d3e <rcl_expand_topic_name+0x172>
 8018c38:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018c3a:	2c00      	cmp	r4, #0
 8018c3c:	f040 80ed 	bne.w	8018e1a <rcl_expand_topic_name+0x24e>
 8018c40:	217b      	movs	r1, #123	@ 0x7b
 8018c42:	4640      	mov	r0, r8
 8018c44:	f001 f88e 	bl	8019d64 <strchr>
 8018c48:	f898 3000 	ldrb.w	r3, [r8]
 8018c4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8018c4e:	4605      	mov	r5, r0
 8018c50:	f000 809e 	beq.w	8018d90 <rcl_expand_topic_name+0x1c4>
 8018c54:	2b7e      	cmp	r3, #126	@ 0x7e
 8018c56:	f040 80a2 	bne.w	8018d9e <rcl_expand_topic_name+0x1d2>
 8018c5a:	4638      	mov	r0, r7
 8018c5c:	f7e7 faea 	bl	8000234 <strlen>
 8018c60:	4a82      	ldr	r2, [pc, #520]	@ (8018e6c <rcl_expand_topic_name+0x2a0>)
 8018c62:	4b83      	ldr	r3, [pc, #524]	@ (8018e70 <rcl_expand_topic_name+0x2a4>)
 8018c64:	2801      	cmp	r0, #1
 8018c66:	bf18      	it	ne
 8018c68:	4613      	movne	r3, r2
 8018c6a:	9302      	str	r3, [sp, #8]
 8018c6c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018c6e:	9300      	str	r3, [sp, #0]
 8018c70:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018c74:	f108 0301 	add.w	r3, r8, #1
 8018c78:	9305      	str	r3, [sp, #20]
 8018c7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018c7e:	9301      	str	r3, [sp, #4]
 8018c80:	ab14      	add	r3, sp, #80	@ 0x50
 8018c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018c84:	f7fd ffb4 	bl	8016bf0 <rcutils_format_string_limit>
 8018c88:	4682      	mov	sl, r0
 8018c8a:	2800      	cmp	r0, #0
 8018c8c:	f000 80c7 	beq.w	8018e1e <rcl_expand_topic_name+0x252>
 8018c90:	2d00      	cmp	r5, #0
 8018c92:	f000 80a2 	beq.w	8018dda <rcl_expand_topic_name+0x20e>
 8018c96:	217b      	movs	r1, #123	@ 0x7b
 8018c98:	f001 f864 	bl	8019d64 <strchr>
 8018c9c:	46d1      	mov	r9, sl
 8018c9e:	4605      	mov	r5, r0
 8018ca0:	9407      	str	r4, [sp, #28]
 8018ca2:	46d3      	mov	fp, sl
 8018ca4:	464c      	mov	r4, r9
 8018ca6:	2d00      	cmp	r5, #0
 8018ca8:	f000 80be 	beq.w	8018e28 <rcl_expand_topic_name+0x25c>
 8018cac:	217d      	movs	r1, #125	@ 0x7d
 8018cae:	4620      	mov	r0, r4
 8018cb0:	f001 f858 	bl	8019d64 <strchr>
 8018cb4:	eba0 0905 	sub.w	r9, r0, r5
 8018cb8:	f109 0a01 	add.w	sl, r9, #1
 8018cbc:	486d      	ldr	r0, [pc, #436]	@ (8018e74 <rcl_expand_topic_name+0x2a8>)
 8018cbe:	4652      	mov	r2, sl
 8018cc0:	4629      	mov	r1, r5
 8018cc2:	f001 f85c 	bl	8019d7e <strncmp>
 8018cc6:	2800      	cmp	r0, #0
 8018cc8:	d067      	beq.n	8018d9a <rcl_expand_topic_name+0x1ce>
 8018cca:	486b      	ldr	r0, [pc, #428]	@ (8018e78 <rcl_expand_topic_name+0x2ac>)
 8018ccc:	4652      	mov	r2, sl
 8018cce:	4629      	mov	r1, r5
 8018cd0:	f001 f855 	bl	8019d7e <strncmp>
 8018cd4:	b130      	cbz	r0, 8018ce4 <rcl_expand_topic_name+0x118>
 8018cd6:	4869      	ldr	r0, [pc, #420]	@ (8018e7c <rcl_expand_topic_name+0x2b0>)
 8018cd8:	4652      	mov	r2, sl
 8018cda:	4629      	mov	r1, r5
 8018cdc:	f001 f84f 	bl	8019d7e <strncmp>
 8018ce0:	2800      	cmp	r0, #0
 8018ce2:	d137      	bne.n	8018d54 <rcl_expand_topic_name+0x188>
 8018ce4:	46b9      	mov	r9, r7
 8018ce6:	ab16      	add	r3, sp, #88	@ 0x58
 8018ce8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018cec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018cf0:	ab14      	add	r3, sp, #80	@ 0x50
 8018cf2:	4628      	mov	r0, r5
 8018cf4:	cb0c      	ldmia	r3, {r2, r3}
 8018cf6:	4651      	mov	r1, sl
 8018cf8:	f7fe f8b6 	bl	8016e68 <rcutils_strndup>
 8018cfc:	4605      	mov	r5, r0
 8018cfe:	2800      	cmp	r0, #0
 8018d00:	f000 809c 	beq.w	8018e3c <rcl_expand_topic_name+0x270>
 8018d04:	464a      	mov	r2, r9
 8018d06:	4620      	mov	r0, r4
 8018d08:	ab14      	add	r3, sp, #80	@ 0x50
 8018d0a:	4629      	mov	r1, r5
 8018d0c:	f7fd ffaa 	bl	8016c64 <rcutils_repl_str>
 8018d10:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018d12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018d14:	4604      	mov	r4, r0
 8018d16:	4628      	mov	r0, r5
 8018d18:	4798      	blx	r3
 8018d1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018d1c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018d1e:	4658      	mov	r0, fp
 8018d20:	4798      	blx	r3
 8018d22:	2c00      	cmp	r4, #0
 8018d24:	d07b      	beq.n	8018e1e <rcl_expand_topic_name+0x252>
 8018d26:	217b      	movs	r1, #123	@ 0x7b
 8018d28:	4620      	mov	r0, r4
 8018d2a:	f001 f81b 	bl	8019d64 <strchr>
 8018d2e:	46a3      	mov	fp, r4
 8018d30:	4605      	mov	r5, r0
 8018d32:	e7b8      	b.n	8018ca6 <rcl_expand_topic_name+0xda>
 8018d34:	240b      	movs	r4, #11
 8018d36:	4620      	mov	r0, r4
 8018d38:	b00b      	add	sp, #44	@ 0x2c
 8018d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d3e:	f7fb f8a9 	bl	8013e94 <rcl_convert_rmw_ret_to_rcl_ret>
 8018d42:	4604      	mov	r4, r0
 8018d44:	e7f7      	b.n	8018d36 <rcl_expand_topic_name+0x16a>
 8018d46:	2467      	movs	r4, #103	@ 0x67
 8018d48:	4620      	mov	r0, r4
 8018d4a:	b00b      	add	sp, #44	@ 0x2c
 8018d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d50:	24c9      	movs	r4, #201	@ 0xc9
 8018d52:	e7f0      	b.n	8018d36 <rcl_expand_topic_name+0x16a>
 8018d54:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018d58:	9806      	ldr	r0, [sp, #24]
 8018d5a:	1c69      	adds	r1, r5, #1
 8018d5c:	f7fe f99e 	bl	801709c <rcutils_string_map_getn>
 8018d60:	4681      	mov	r9, r0
 8018d62:	2800      	cmp	r0, #0
 8018d64:	d1bf      	bne.n	8018ce6 <rcl_expand_topic_name+0x11a>
 8018d66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018d68:	aa16      	add	r2, sp, #88	@ 0x58
 8018d6a:	6018      	str	r0, [r3, #0]
 8018d6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8018d6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018d72:	ab14      	add	r3, sp, #80	@ 0x50
 8018d74:	cb0c      	ldmia	r3, {r2, r3}
 8018d76:	4651      	mov	r1, sl
 8018d78:	4628      	mov	r0, r5
 8018d7a:	f7fe f875 	bl	8016e68 <rcutils_strndup>
 8018d7e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018d80:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018d82:	4798      	blx	r3
 8018d84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018d86:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018d88:	4658      	mov	r0, fp
 8018d8a:	2469      	movs	r4, #105	@ 0x69
 8018d8c:	4798      	blx	r3
 8018d8e:	e7d2      	b.n	8018d36 <rcl_expand_topic_name+0x16a>
 8018d90:	2800      	cmp	r0, #0
 8018d92:	d05b      	beq.n	8018e4c <rcl_expand_topic_name+0x280>
 8018d94:	46c1      	mov	r9, r8
 8018d96:	46a2      	mov	sl, r4
 8018d98:	e782      	b.n	8018ca0 <rcl_expand_topic_name+0xd4>
 8018d9a:	46b1      	mov	r9, r6
 8018d9c:	e7a3      	b.n	8018ce6 <rcl_expand_topic_name+0x11a>
 8018d9e:	2800      	cmp	r0, #0
 8018da0:	d1f8      	bne.n	8018d94 <rcl_expand_topic_name+0x1c8>
 8018da2:	4638      	mov	r0, r7
 8018da4:	f7e7 fa46 	bl	8000234 <strlen>
 8018da8:	4a35      	ldr	r2, [pc, #212]	@ (8018e80 <rcl_expand_topic_name+0x2b4>)
 8018daa:	4b36      	ldr	r3, [pc, #216]	@ (8018e84 <rcl_expand_topic_name+0x2b8>)
 8018dac:	f8cd 8010 	str.w	r8, [sp, #16]
 8018db0:	2801      	cmp	r0, #1
 8018db2:	bf18      	it	ne
 8018db4:	4613      	movne	r3, r2
 8018db6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018dba:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018dbe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018dc0:	9703      	str	r7, [sp, #12]
 8018dc2:	9200      	str	r2, [sp, #0]
 8018dc4:	ab14      	add	r3, sp, #80	@ 0x50
 8018dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018dc8:	f7fd ff12 	bl	8016bf0 <rcutils_format_string_limit>
 8018dcc:	4682      	mov	sl, r0
 8018dce:	4653      	mov	r3, sl
 8018dd0:	b32b      	cbz	r3, 8018e1e <rcl_expand_topic_name+0x252>
 8018dd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018dd4:	f8c3 a000 	str.w	sl, [r3]
 8018dd8:	e7ad      	b.n	8018d36 <rcl_expand_topic_name+0x16a>
 8018dda:	f89a 3000 	ldrb.w	r3, [sl]
 8018dde:	2b2f      	cmp	r3, #47	@ 0x2f
 8018de0:	d0f7      	beq.n	8018dd2 <rcl_expand_topic_name+0x206>
 8018de2:	4638      	mov	r0, r7
 8018de4:	f7e7 fa26 	bl	8000234 <strlen>
 8018de8:	4a25      	ldr	r2, [pc, #148]	@ (8018e80 <rcl_expand_topic_name+0x2b4>)
 8018dea:	4b26      	ldr	r3, [pc, #152]	@ (8018e84 <rcl_expand_topic_name+0x2b8>)
 8018dec:	f8cd a010 	str.w	sl, [sp, #16]
 8018df0:	2801      	cmp	r0, #1
 8018df2:	bf18      	it	ne
 8018df4:	4613      	movne	r3, r2
 8018df6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018dfa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018dfe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018e00:	9703      	str	r7, [sp, #12]
 8018e02:	9200      	str	r2, [sp, #0]
 8018e04:	ab14      	add	r3, sp, #80	@ 0x50
 8018e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018e08:	f7fd fef2 	bl	8016bf0 <rcutils_format_string_limit>
 8018e0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018e0e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018e10:	4605      	mov	r5, r0
 8018e12:	4650      	mov	r0, sl
 8018e14:	4798      	blx	r3
 8018e16:	46aa      	mov	sl, r5
 8018e18:	e7d9      	b.n	8018dce <rcl_expand_topic_name+0x202>
 8018e1a:	24ca      	movs	r4, #202	@ 0xca
 8018e1c:	e78b      	b.n	8018d36 <rcl_expand_topic_name+0x16a>
 8018e1e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018e20:	2300      	movs	r3, #0
 8018e22:	6013      	str	r3, [r2, #0]
 8018e24:	240a      	movs	r4, #10
 8018e26:	e786      	b.n	8018d36 <rcl_expand_topic_name+0x16a>
 8018e28:	465b      	mov	r3, fp
 8018e2a:	9c07      	ldr	r4, [sp, #28]
 8018e2c:	46da      	mov	sl, fp
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d1d3      	bne.n	8018dda <rcl_expand_topic_name+0x20e>
 8018e32:	f898 3000 	ldrb.w	r3, [r8]
 8018e36:	2b2f      	cmp	r3, #47	@ 0x2f
 8018e38:	d0cb      	beq.n	8018dd2 <rcl_expand_topic_name+0x206>
 8018e3a:	e7b2      	b.n	8018da2 <rcl_expand_topic_name+0x1d6>
 8018e3c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018e40:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018e42:	6015      	str	r5, [r2, #0]
 8018e44:	4658      	mov	r0, fp
 8018e46:	4798      	blx	r3
 8018e48:	240a      	movs	r4, #10
 8018e4a:	e774      	b.n	8018d36 <rcl_expand_topic_name+0x16a>
 8018e4c:	ab17      	add	r3, sp, #92	@ 0x5c
 8018e4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018e52:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018e56:	ab14      	add	r3, sp, #80	@ 0x50
 8018e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018e5a:	4640      	mov	r0, r8
 8018e5c:	f7fd ffe2 	bl	8016e24 <rcutils_strdup>
 8018e60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018e62:	2800      	cmp	r0, #0
 8018e64:	6018      	str	r0, [r3, #0]
 8018e66:	bf08      	it	eq
 8018e68:	240a      	moveq	r4, #10
 8018e6a:	e764      	b.n	8018d36 <rcl_expand_topic_name+0x16a>
 8018e6c:	0801c974 	.word	0x0801c974
 8018e70:	0801bb94 	.word	0x0801bb94
 8018e74:	0801c97c 	.word	0x0801c97c
 8018e78:	0801c984 	.word	0x0801c984
 8018e7c:	0801c98c 	.word	0x0801c98c
 8018e80:	0801bb80 	.word	0x0801bb80
 8018e84:	0801bba4 	.word	0x0801bba4

08018e88 <rcl_get_default_topic_name_substitutions>:
 8018e88:	2800      	cmp	r0, #0
 8018e8a:	bf0c      	ite	eq
 8018e8c:	200b      	moveq	r0, #11
 8018e8e:	2000      	movne	r0, #0
 8018e90:	4770      	bx	lr
 8018e92:	bf00      	nop

08018e94 <rcl_get_zero_initialized_guard_condition>:
 8018e94:	4a03      	ldr	r2, [pc, #12]	@ (8018ea4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018e96:	4603      	mov	r3, r0
 8018e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	4770      	bx	lr
 8018ea4:	0801c998 	.word	0x0801c998

08018ea8 <rcl_guard_condition_init>:
 8018ea8:	b082      	sub	sp, #8
 8018eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eac:	b087      	sub	sp, #28
 8018eae:	ac0c      	add	r4, sp, #48	@ 0x30
 8018eb0:	e884 000c 	stmia.w	r4, {r2, r3}
 8018eb4:	46a6      	mov	lr, r4
 8018eb6:	460d      	mov	r5, r1
 8018eb8:	4604      	mov	r4, r0
 8018eba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018ebe:	f10d 0c04 	add.w	ip, sp, #4
 8018ec2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ec6:	f8de 3000 	ldr.w	r3, [lr]
 8018eca:	f8cc 3000 	str.w	r3, [ip]
 8018ece:	a801      	add	r0, sp, #4
 8018ed0:	f7f4 ffc0 	bl	800de54 <rcutils_allocator_is_valid>
 8018ed4:	b338      	cbz	r0, 8018f26 <rcl_guard_condition_init+0x7e>
 8018ed6:	b334      	cbz	r4, 8018f26 <rcl_guard_condition_init+0x7e>
 8018ed8:	6866      	ldr	r6, [r4, #4]
 8018eda:	b9ee      	cbnz	r6, 8018f18 <rcl_guard_condition_init+0x70>
 8018edc:	b31d      	cbz	r5, 8018f26 <rcl_guard_condition_init+0x7e>
 8018ede:	4628      	mov	r0, r5
 8018ee0:	f7fa fff6 	bl	8013ed0 <rcl_context_is_valid>
 8018ee4:	b308      	cbz	r0, 8018f2a <rcl_guard_condition_init+0x82>
 8018ee6:	9b01      	ldr	r3, [sp, #4]
 8018ee8:	9905      	ldr	r1, [sp, #20]
 8018eea:	201c      	movs	r0, #28
 8018eec:	4798      	blx	r3
 8018eee:	4607      	mov	r7, r0
 8018ef0:	6060      	str	r0, [r4, #4]
 8018ef2:	b310      	cbz	r0, 8018f3a <rcl_guard_condition_init+0x92>
 8018ef4:	6828      	ldr	r0, [r5, #0]
 8018ef6:	3028      	adds	r0, #40	@ 0x28
 8018ef8:	f000 f9ac 	bl	8019254 <rmw_create_guard_condition>
 8018efc:	6038      	str	r0, [r7, #0]
 8018efe:	6860      	ldr	r0, [r4, #4]
 8018f00:	6805      	ldr	r5, [r0, #0]
 8018f02:	b1a5      	cbz	r5, 8018f2e <rcl_guard_condition_init+0x86>
 8018f04:	2301      	movs	r3, #1
 8018f06:	ac01      	add	r4, sp, #4
 8018f08:	7103      	strb	r3, [r0, #4]
 8018f0a:	f100 0708 	add.w	r7, r0, #8
 8018f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f10:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018f12:	6823      	ldr	r3, [r4, #0]
 8018f14:	603b      	str	r3, [r7, #0]
 8018f16:	e000      	b.n	8018f1a <rcl_guard_condition_init+0x72>
 8018f18:	2664      	movs	r6, #100	@ 0x64
 8018f1a:	4630      	mov	r0, r6
 8018f1c:	b007      	add	sp, #28
 8018f1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018f22:	b002      	add	sp, #8
 8018f24:	4770      	bx	lr
 8018f26:	260b      	movs	r6, #11
 8018f28:	e7f7      	b.n	8018f1a <rcl_guard_condition_init+0x72>
 8018f2a:	2665      	movs	r6, #101	@ 0x65
 8018f2c:	e7f5      	b.n	8018f1a <rcl_guard_condition_init+0x72>
 8018f2e:	9b02      	ldr	r3, [sp, #8]
 8018f30:	9905      	ldr	r1, [sp, #20]
 8018f32:	4798      	blx	r3
 8018f34:	2601      	movs	r6, #1
 8018f36:	6065      	str	r5, [r4, #4]
 8018f38:	e7ef      	b.n	8018f1a <rcl_guard_condition_init+0x72>
 8018f3a:	260a      	movs	r6, #10
 8018f3c:	e7ed      	b.n	8018f1a <rcl_guard_condition_init+0x72>
 8018f3e:	bf00      	nop

08018f40 <rcl_guard_condition_init_from_rmw>:
 8018f40:	b082      	sub	sp, #8
 8018f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f46:	b086      	sub	sp, #24
 8018f48:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018f4c:	4604      	mov	r4, r0
 8018f4e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018f52:	460e      	mov	r6, r1
 8018f54:	4617      	mov	r7, r2
 8018f56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018f5a:	f10d 0e04 	add.w	lr, sp, #4
 8018f5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018f62:	f8dc 3000 	ldr.w	r3, [ip]
 8018f66:	f8ce 3000 	str.w	r3, [lr]
 8018f6a:	a801      	add	r0, sp, #4
 8018f6c:	f7f4 ff72 	bl	800de54 <rcutils_allocator_is_valid>
 8018f70:	b350      	cbz	r0, 8018fc8 <rcl_guard_condition_init_from_rmw+0x88>
 8018f72:	b34c      	cbz	r4, 8018fc8 <rcl_guard_condition_init_from_rmw+0x88>
 8018f74:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018f78:	f1b8 0f00 	cmp.w	r8, #0
 8018f7c:	d11e      	bne.n	8018fbc <rcl_guard_condition_init_from_rmw+0x7c>
 8018f7e:	b31f      	cbz	r7, 8018fc8 <rcl_guard_condition_init_from_rmw+0x88>
 8018f80:	4638      	mov	r0, r7
 8018f82:	f7fa ffa5 	bl	8013ed0 <rcl_context_is_valid>
 8018f86:	b328      	cbz	r0, 8018fd4 <rcl_guard_condition_init_from_rmw+0x94>
 8018f88:	9b01      	ldr	r3, [sp, #4]
 8018f8a:	9905      	ldr	r1, [sp, #20]
 8018f8c:	201c      	movs	r0, #28
 8018f8e:	4798      	blx	r3
 8018f90:	4605      	mov	r5, r0
 8018f92:	6060      	str	r0, [r4, #4]
 8018f94:	b358      	cbz	r0, 8018fee <rcl_guard_condition_init_from_rmw+0xae>
 8018f96:	b1fe      	cbz	r6, 8018fd8 <rcl_guard_condition_init_from_rmw+0x98>
 8018f98:	6006      	str	r6, [r0, #0]
 8018f9a:	f880 8004 	strb.w	r8, [r0, #4]
 8018f9e:	ac01      	add	r4, sp, #4
 8018fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018fa2:	f105 0c08 	add.w	ip, r5, #8
 8018fa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018faa:	6823      	ldr	r3, [r4, #0]
 8018fac:	f8cc 3000 	str.w	r3, [ip]
 8018fb0:	2000      	movs	r0, #0
 8018fb2:	b006      	add	sp, #24
 8018fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018fb8:	b002      	add	sp, #8
 8018fba:	4770      	bx	lr
 8018fbc:	2064      	movs	r0, #100	@ 0x64
 8018fbe:	b006      	add	sp, #24
 8018fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018fc4:	b002      	add	sp, #8
 8018fc6:	4770      	bx	lr
 8018fc8:	200b      	movs	r0, #11
 8018fca:	b006      	add	sp, #24
 8018fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018fd0:	b002      	add	sp, #8
 8018fd2:	4770      	bx	lr
 8018fd4:	2065      	movs	r0, #101	@ 0x65
 8018fd6:	e7f2      	b.n	8018fbe <rcl_guard_condition_init_from_rmw+0x7e>
 8018fd8:	6838      	ldr	r0, [r7, #0]
 8018fda:	3028      	adds	r0, #40	@ 0x28
 8018fdc:	f000 f93a 	bl	8019254 <rmw_create_guard_condition>
 8018fe0:	6028      	str	r0, [r5, #0]
 8018fe2:	6865      	ldr	r5, [r4, #4]
 8018fe4:	682e      	ldr	r6, [r5, #0]
 8018fe6:	b126      	cbz	r6, 8018ff2 <rcl_guard_condition_init_from_rmw+0xb2>
 8018fe8:	2301      	movs	r3, #1
 8018fea:	712b      	strb	r3, [r5, #4]
 8018fec:	e7d7      	b.n	8018f9e <rcl_guard_condition_init_from_rmw+0x5e>
 8018fee:	200a      	movs	r0, #10
 8018ff0:	e7e5      	b.n	8018fbe <rcl_guard_condition_init_from_rmw+0x7e>
 8018ff2:	4628      	mov	r0, r5
 8018ff4:	9b02      	ldr	r3, [sp, #8]
 8018ff6:	9905      	ldr	r1, [sp, #20]
 8018ff8:	4798      	blx	r3
 8018ffa:	6066      	str	r6, [r4, #4]
 8018ffc:	2001      	movs	r0, #1
 8018ffe:	e7de      	b.n	8018fbe <rcl_guard_condition_init_from_rmw+0x7e>

08019000 <rcl_guard_condition_fini>:
 8019000:	b570      	push	{r4, r5, r6, lr}
 8019002:	b082      	sub	sp, #8
 8019004:	b1f0      	cbz	r0, 8019044 <rcl_guard_condition_fini+0x44>
 8019006:	6843      	ldr	r3, [r0, #4]
 8019008:	4604      	mov	r4, r0
 801900a:	b163      	cbz	r3, 8019026 <rcl_guard_condition_fini+0x26>
 801900c:	6818      	ldr	r0, [r3, #0]
 801900e:	68de      	ldr	r6, [r3, #12]
 8019010:	6999      	ldr	r1, [r3, #24]
 8019012:	b160      	cbz	r0, 801902e <rcl_guard_condition_fini+0x2e>
 8019014:	791d      	ldrb	r5, [r3, #4]
 8019016:	b965      	cbnz	r5, 8019032 <rcl_guard_condition_fini+0x32>
 8019018:	4618      	mov	r0, r3
 801901a:	47b0      	blx	r6
 801901c:	2300      	movs	r3, #0
 801901e:	4628      	mov	r0, r5
 8019020:	6063      	str	r3, [r4, #4]
 8019022:	b002      	add	sp, #8
 8019024:	bd70      	pop	{r4, r5, r6, pc}
 8019026:	461d      	mov	r5, r3
 8019028:	4628      	mov	r0, r5
 801902a:	b002      	add	sp, #8
 801902c:	bd70      	pop	{r4, r5, r6, pc}
 801902e:	4605      	mov	r5, r0
 8019030:	e7f2      	b.n	8019018 <rcl_guard_condition_fini+0x18>
 8019032:	9101      	str	r1, [sp, #4]
 8019034:	f000 f922 	bl	801927c <rmw_destroy_guard_condition>
 8019038:	1e05      	subs	r5, r0, #0
 801903a:	6863      	ldr	r3, [r4, #4]
 801903c:	9901      	ldr	r1, [sp, #4]
 801903e:	bf18      	it	ne
 8019040:	2501      	movne	r5, #1
 8019042:	e7e9      	b.n	8019018 <rcl_guard_condition_fini+0x18>
 8019044:	250b      	movs	r5, #11
 8019046:	4628      	mov	r0, r5
 8019048:	b002      	add	sp, #8
 801904a:	bd70      	pop	{r4, r5, r6, pc}

0801904c <rcl_guard_condition_get_default_options>:
 801904c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801904e:	b087      	sub	sp, #28
 8019050:	4606      	mov	r6, r0
 8019052:	4668      	mov	r0, sp
 8019054:	f7f4 fef0 	bl	800de38 <rcutils_get_default_allocator>
 8019058:	4b09      	ldr	r3, [pc, #36]	@ (8019080 <rcl_guard_condition_get_default_options+0x34>)
 801905a:	46ee      	mov	lr, sp
 801905c:	469c      	mov	ip, r3
 801905e:	461d      	mov	r5, r3
 8019060:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019064:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801906a:	4634      	mov	r4, r6
 801906c:	f8de 7000 	ldr.w	r7, [lr]
 8019070:	f8cc 7000 	str.w	r7, [ip]
 8019074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019076:	4630      	mov	r0, r6
 8019078:	6027      	str	r7, [r4, #0]
 801907a:	b007      	add	sp, #28
 801907c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801907e:	bf00      	nop
 8019080:	2000ba0c 	.word	0x2000ba0c

08019084 <rcl_trigger_guard_condition>:
 8019084:	b148      	cbz	r0, 801909a <rcl_trigger_guard_condition+0x16>
 8019086:	b508      	push	{r3, lr}
 8019088:	6843      	ldr	r3, [r0, #4]
 801908a:	b143      	cbz	r3, 801909e <rcl_trigger_guard_condition+0x1a>
 801908c:	6818      	ldr	r0, [r3, #0]
 801908e:	f000 f909 	bl	80192a4 <rmw_trigger_guard_condition>
 8019092:	3800      	subs	r0, #0
 8019094:	bf18      	it	ne
 8019096:	2001      	movne	r0, #1
 8019098:	bd08      	pop	{r3, pc}
 801909a:	200b      	movs	r0, #11
 801909c:	4770      	bx	lr
 801909e:	200b      	movs	r0, #11
 80190a0:	bd08      	pop	{r3, pc}
 80190a2:	bf00      	nop

080190a4 <rcl_guard_condition_get_rmw_handle>:
 80190a4:	b110      	cbz	r0, 80190ac <rcl_guard_condition_get_rmw_handle+0x8>
 80190a6:	6840      	ldr	r0, [r0, #4]
 80190a8:	b100      	cbz	r0, 80190ac <rcl_guard_condition_get_rmw_handle+0x8>
 80190aa:	6800      	ldr	r0, [r0, #0]
 80190ac:	4770      	bx	lr
 80190ae:	bf00      	nop

080190b0 <rcl_validate_topic_name>:
 80190b0:	2800      	cmp	r0, #0
 80190b2:	d07a      	beq.n	80191aa <rcl_validate_topic_name+0xfa>
 80190b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190b8:	460e      	mov	r6, r1
 80190ba:	2900      	cmp	r1, #0
 80190bc:	d07c      	beq.n	80191b8 <rcl_validate_topic_name+0x108>
 80190be:	4617      	mov	r7, r2
 80190c0:	4605      	mov	r5, r0
 80190c2:	f7e7 f8b7 	bl	8000234 <strlen>
 80190c6:	b1b0      	cbz	r0, 80190f6 <rcl_validate_topic_name+0x46>
 80190c8:	f895 9000 	ldrb.w	r9, [r5]
 80190cc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8019250 <rcl_validate_topic_name+0x1a0>
 80190d0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80190d4:	f013 0304 	ands.w	r3, r3, #4
 80190d8:	d169      	bne.n	80191ae <rcl_validate_topic_name+0xfe>
 80190da:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80190de:	f815 2008 	ldrb.w	r2, [r5, r8]
 80190e2:	2a2f      	cmp	r2, #47	@ 0x2f
 80190e4:	d10e      	bne.n	8019104 <rcl_validate_topic_name+0x54>
 80190e6:	2202      	movs	r2, #2
 80190e8:	6032      	str	r2, [r6, #0]
 80190ea:	b36f      	cbz	r7, 8019148 <rcl_validate_topic_name+0x98>
 80190ec:	f8c7 8000 	str.w	r8, [r7]
 80190f0:	4618      	mov	r0, r3
 80190f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190f6:	2301      	movs	r3, #1
 80190f8:	6033      	str	r3, [r6, #0]
 80190fa:	b32f      	cbz	r7, 8019148 <rcl_validate_topic_name+0x98>
 80190fc:	2000      	movs	r0, #0
 80190fe:	6038      	str	r0, [r7, #0]
 8019100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019104:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8019108:	461c      	mov	r4, r3
 801910a:	4619      	mov	r1, r3
 801910c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019110:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019114:	f1be 0f09 	cmp.w	lr, #9
 8019118:	d919      	bls.n	801914e <rcl_validate_topic_name+0x9e>
 801911a:	f022 0e20 	bic.w	lr, r2, #32
 801911e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8019122:	f1be 0f19 	cmp.w	lr, #25
 8019126:	d912      	bls.n	801914e <rcl_validate_topic_name+0x9e>
 8019128:	2a5f      	cmp	r2, #95	@ 0x5f
 801912a:	d019      	beq.n	8019160 <rcl_validate_topic_name+0xb0>
 801912c:	2a2f      	cmp	r2, #47	@ 0x2f
 801912e:	d051      	beq.n	80191d4 <rcl_validate_topic_name+0x124>
 8019130:	2a7e      	cmp	r2, #126	@ 0x7e
 8019132:	d048      	beq.n	80191c6 <rcl_validate_topic_name+0x116>
 8019134:	2a7b      	cmp	r2, #123	@ 0x7b
 8019136:	d054      	beq.n	80191e2 <rcl_validate_topic_name+0x132>
 8019138:	2a7d      	cmp	r2, #125	@ 0x7d
 801913a:	d161      	bne.n	8019200 <rcl_validate_topic_name+0x150>
 801913c:	2c00      	cmp	r4, #0
 801913e:	d155      	bne.n	80191ec <rcl_validate_topic_name+0x13c>
 8019140:	2305      	movs	r3, #5
 8019142:	6033      	str	r3, [r6, #0]
 8019144:	b107      	cbz	r7, 8019148 <rcl_validate_topic_name+0x98>
 8019146:	6039      	str	r1, [r7, #0]
 8019148:	2000      	movs	r0, #0
 801914a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801914e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019152:	0752      	lsls	r2, r2, #29
 8019154:	d504      	bpl.n	8019160 <rcl_validate_topic_name+0xb0>
 8019156:	b11c      	cbz	r4, 8019160 <rcl_validate_topic_name+0xb0>
 8019158:	b111      	cbz	r1, 8019160 <rcl_validate_topic_name+0xb0>
 801915a:	1e4a      	subs	r2, r1, #1
 801915c:	429a      	cmp	r2, r3
 801915e:	d02d      	beq.n	80191bc <rcl_validate_topic_name+0x10c>
 8019160:	3101      	adds	r1, #1
 8019162:	4288      	cmp	r0, r1
 8019164:	d1d2      	bne.n	801910c <rcl_validate_topic_name+0x5c>
 8019166:	2c00      	cmp	r4, #0
 8019168:	d145      	bne.n	80191f6 <rcl_validate_topic_name+0x146>
 801916a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801916e:	d04f      	beq.n	8019210 <rcl_validate_topic_name+0x160>
 8019170:	4620      	mov	r0, r4
 8019172:	2301      	movs	r3, #1
 8019174:	e006      	b.n	8019184 <rcl_validate_topic_name+0xd4>
 8019176:	428b      	cmp	r3, r1
 8019178:	f105 0501 	add.w	r5, r5, #1
 801917c:	f103 0201 	add.w	r2, r3, #1
 8019180:	d236      	bcs.n	80191f0 <rcl_validate_topic_name+0x140>
 8019182:	4613      	mov	r3, r2
 8019184:	4580      	cmp	r8, r0
 8019186:	f100 0001 	add.w	r0, r0, #1
 801918a:	d0f4      	beq.n	8019176 <rcl_validate_topic_name+0xc6>
 801918c:	782a      	ldrb	r2, [r5, #0]
 801918e:	2a2f      	cmp	r2, #47	@ 0x2f
 8019190:	d1f1      	bne.n	8019176 <rcl_validate_topic_name+0xc6>
 8019192:	786a      	ldrb	r2, [r5, #1]
 8019194:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019198:	0754      	lsls	r4, r2, #29
 801919a:	d5ec      	bpl.n	8019176 <rcl_validate_topic_name+0xc6>
 801919c:	2204      	movs	r2, #4
 801919e:	6032      	str	r2, [r6, #0]
 80191a0:	2f00      	cmp	r7, #0
 80191a2:	d0d1      	beq.n	8019148 <rcl_validate_topic_name+0x98>
 80191a4:	603b      	str	r3, [r7, #0]
 80191a6:	2000      	movs	r0, #0
 80191a8:	e7aa      	b.n	8019100 <rcl_validate_topic_name+0x50>
 80191aa:	200b      	movs	r0, #11
 80191ac:	4770      	bx	lr
 80191ae:	2304      	movs	r3, #4
 80191b0:	6033      	str	r3, [r6, #0]
 80191b2:	2f00      	cmp	r7, #0
 80191b4:	d1a2      	bne.n	80190fc <rcl_validate_topic_name+0x4c>
 80191b6:	e7c7      	b.n	8019148 <rcl_validate_topic_name+0x98>
 80191b8:	200b      	movs	r0, #11
 80191ba:	e7a1      	b.n	8019100 <rcl_validate_topic_name+0x50>
 80191bc:	2309      	movs	r3, #9
 80191be:	6033      	str	r3, [r6, #0]
 80191c0:	2f00      	cmp	r7, #0
 80191c2:	d1c0      	bne.n	8019146 <rcl_validate_topic_name+0x96>
 80191c4:	e7c0      	b.n	8019148 <rcl_validate_topic_name+0x98>
 80191c6:	2900      	cmp	r1, #0
 80191c8:	d0ca      	beq.n	8019160 <rcl_validate_topic_name+0xb0>
 80191ca:	2306      	movs	r3, #6
 80191cc:	6033      	str	r3, [r6, #0]
 80191ce:	2f00      	cmp	r7, #0
 80191d0:	d1b9      	bne.n	8019146 <rcl_validate_topic_name+0x96>
 80191d2:	e7b9      	b.n	8019148 <rcl_validate_topic_name+0x98>
 80191d4:	2c00      	cmp	r4, #0
 80191d6:	d0c3      	beq.n	8019160 <rcl_validate_topic_name+0xb0>
 80191d8:	2308      	movs	r3, #8
 80191da:	6033      	str	r3, [r6, #0]
 80191dc:	2f00      	cmp	r7, #0
 80191de:	d1b2      	bne.n	8019146 <rcl_validate_topic_name+0x96>
 80191e0:	e7b2      	b.n	8019148 <rcl_validate_topic_name+0x98>
 80191e2:	2c00      	cmp	r4, #0
 80191e4:	d1f8      	bne.n	80191d8 <rcl_validate_topic_name+0x128>
 80191e6:	460b      	mov	r3, r1
 80191e8:	2401      	movs	r4, #1
 80191ea:	e7b9      	b.n	8019160 <rcl_validate_topic_name+0xb0>
 80191ec:	2400      	movs	r4, #0
 80191ee:	e7b7      	b.n	8019160 <rcl_validate_topic_name+0xb0>
 80191f0:	2000      	movs	r0, #0
 80191f2:	6030      	str	r0, [r6, #0]
 80191f4:	e784      	b.n	8019100 <rcl_validate_topic_name+0x50>
 80191f6:	2205      	movs	r2, #5
 80191f8:	6032      	str	r2, [r6, #0]
 80191fa:	2f00      	cmp	r7, #0
 80191fc:	d1d2      	bne.n	80191a4 <rcl_validate_topic_name+0xf4>
 80191fe:	e7a3      	b.n	8019148 <rcl_validate_topic_name+0x98>
 8019200:	2c00      	cmp	r4, #0
 8019202:	bf14      	ite	ne
 8019204:	2308      	movne	r3, #8
 8019206:	2303      	moveq	r3, #3
 8019208:	6033      	str	r3, [r6, #0]
 801920a:	2f00      	cmp	r7, #0
 801920c:	d19b      	bne.n	8019146 <rcl_validate_topic_name+0x96>
 801920e:	e79b      	b.n	8019148 <rcl_validate_topic_name+0x98>
 8019210:	2301      	movs	r3, #1
 8019212:	e00a      	b.n	801922a <rcl_validate_topic_name+0x17a>
 8019214:	2c01      	cmp	r4, #1
 8019216:	d013      	beq.n	8019240 <rcl_validate_topic_name+0x190>
 8019218:	4299      	cmp	r1, r3
 801921a:	f104 0401 	add.w	r4, r4, #1
 801921e:	f105 0501 	add.w	r5, r5, #1
 8019222:	f103 0201 	add.w	r2, r3, #1
 8019226:	d9e3      	bls.n	80191f0 <rcl_validate_topic_name+0x140>
 8019228:	4613      	mov	r3, r2
 801922a:	45a0      	cmp	r8, r4
 801922c:	d0f4      	beq.n	8019218 <rcl_validate_topic_name+0x168>
 801922e:	782a      	ldrb	r2, [r5, #0]
 8019230:	2a2f      	cmp	r2, #47	@ 0x2f
 8019232:	d1ef      	bne.n	8019214 <rcl_validate_topic_name+0x164>
 8019234:	786a      	ldrb	r2, [r5, #1]
 8019236:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801923a:	0752      	lsls	r2, r2, #29
 801923c:	d5ec      	bpl.n	8019218 <rcl_validate_topic_name+0x168>
 801923e:	e7ad      	b.n	801919c <rcl_validate_topic_name+0xec>
 8019240:	2307      	movs	r3, #7
 8019242:	6033      	str	r3, [r6, #0]
 8019244:	2f00      	cmp	r7, #0
 8019246:	f43f af7f 	beq.w	8019148 <rcl_validate_topic_name+0x98>
 801924a:	603c      	str	r4, [r7, #0]
 801924c:	2000      	movs	r0, #0
 801924e:	e757      	b.n	8019100 <rcl_validate_topic_name+0x50>
 8019250:	0801cb02 	.word	0x0801cb02

08019254 <rmw_create_guard_condition>:
 8019254:	b538      	push	{r3, r4, r5, lr}
 8019256:	4605      	mov	r5, r0
 8019258:	4807      	ldr	r0, [pc, #28]	@ (8019278 <rmw_create_guard_condition+0x24>)
 801925a:	f7fe fa11 	bl	8017680 <get_memory>
 801925e:	b148      	cbz	r0, 8019274 <rmw_create_guard_condition+0x20>
 8019260:	6884      	ldr	r4, [r0, #8]
 8019262:	2300      	movs	r3, #0
 8019264:	7423      	strb	r3, [r4, #16]
 8019266:	61e5      	str	r5, [r4, #28]
 8019268:	f7fe fa72 	bl	8017750 <rmw_get_implementation_identifier>
 801926c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019270:	f104 0014 	add.w	r0, r4, #20
 8019274:	bd38      	pop	{r3, r4, r5, pc}
 8019276:	bf00      	nop
 8019278:	2000b83c 	.word	0x2000b83c

0801927c <rmw_destroy_guard_condition>:
 801927c:	b508      	push	{r3, lr}
 801927e:	4b08      	ldr	r3, [pc, #32]	@ (80192a0 <rmw_destroy_guard_condition+0x24>)
 8019280:	6819      	ldr	r1, [r3, #0]
 8019282:	b911      	cbnz	r1, 801928a <rmw_destroy_guard_condition+0xe>
 8019284:	e00a      	b.n	801929c <rmw_destroy_guard_condition+0x20>
 8019286:	6849      	ldr	r1, [r1, #4]
 8019288:	b141      	cbz	r1, 801929c <rmw_destroy_guard_condition+0x20>
 801928a:	688b      	ldr	r3, [r1, #8]
 801928c:	3314      	adds	r3, #20
 801928e:	4298      	cmp	r0, r3
 8019290:	d1f9      	bne.n	8019286 <rmw_destroy_guard_condition+0xa>
 8019292:	4803      	ldr	r0, [pc, #12]	@ (80192a0 <rmw_destroy_guard_condition+0x24>)
 8019294:	f7fe fa04 	bl	80176a0 <put_memory>
 8019298:	2000      	movs	r0, #0
 801929a:	bd08      	pop	{r3, pc}
 801929c:	2001      	movs	r0, #1
 801929e:	bd08      	pop	{r3, pc}
 80192a0:	2000b83c 	.word	0x2000b83c

080192a4 <rmw_trigger_guard_condition>:
 80192a4:	b160      	cbz	r0, 80192c0 <rmw_trigger_guard_condition+0x1c>
 80192a6:	b510      	push	{r4, lr}
 80192a8:	4604      	mov	r4, r0
 80192aa:	6800      	ldr	r0, [r0, #0]
 80192ac:	f7f6 f978 	bl	800f5a0 <is_uxrce_rmw_identifier_valid>
 80192b0:	b908      	cbnz	r0, 80192b6 <rmw_trigger_guard_condition+0x12>
 80192b2:	2001      	movs	r0, #1
 80192b4:	bd10      	pop	{r4, pc}
 80192b6:	6863      	ldr	r3, [r4, #4]
 80192b8:	2201      	movs	r2, #1
 80192ba:	741a      	strb	r2, [r3, #16]
 80192bc:	2000      	movs	r0, #0
 80192be:	bd10      	pop	{r4, pc}
 80192c0:	2001      	movs	r0, #1
 80192c2:	4770      	bx	lr

080192c4 <rosidl_runtime_c__String__init>:
 80192c4:	b510      	push	{r4, lr}
 80192c6:	4604      	mov	r4, r0
 80192c8:	b086      	sub	sp, #24
 80192ca:	b170      	cbz	r0, 80192ea <rosidl_runtime_c__String__init+0x26>
 80192cc:	a801      	add	r0, sp, #4
 80192ce:	f7f4 fdb3 	bl	800de38 <rcutils_get_default_allocator>
 80192d2:	9b01      	ldr	r3, [sp, #4]
 80192d4:	9905      	ldr	r1, [sp, #20]
 80192d6:	2001      	movs	r0, #1
 80192d8:	4798      	blx	r3
 80192da:	6020      	str	r0, [r4, #0]
 80192dc:	b128      	cbz	r0, 80192ea <rosidl_runtime_c__String__init+0x26>
 80192de:	2100      	movs	r1, #0
 80192e0:	2201      	movs	r2, #1
 80192e2:	7001      	strb	r1, [r0, #0]
 80192e4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80192e8:	4610      	mov	r0, r2
 80192ea:	b006      	add	sp, #24
 80192ec:	bd10      	pop	{r4, pc}
 80192ee:	bf00      	nop

080192f0 <rosidl_runtime_c__String__fini>:
 80192f0:	b320      	cbz	r0, 801933c <rosidl_runtime_c__String__fini+0x4c>
 80192f2:	b510      	push	{r4, lr}
 80192f4:	6803      	ldr	r3, [r0, #0]
 80192f6:	b086      	sub	sp, #24
 80192f8:	4604      	mov	r4, r0
 80192fa:	b173      	cbz	r3, 801931a <rosidl_runtime_c__String__fini+0x2a>
 80192fc:	6883      	ldr	r3, [r0, #8]
 80192fe:	b1f3      	cbz	r3, 801933e <rosidl_runtime_c__String__fini+0x4e>
 8019300:	a801      	add	r0, sp, #4
 8019302:	f7f4 fd99 	bl	800de38 <rcutils_get_default_allocator>
 8019306:	9b02      	ldr	r3, [sp, #8]
 8019308:	9905      	ldr	r1, [sp, #20]
 801930a:	6820      	ldr	r0, [r4, #0]
 801930c:	4798      	blx	r3
 801930e:	2300      	movs	r3, #0
 8019310:	e9c4 3300 	strd	r3, r3, [r4]
 8019314:	60a3      	str	r3, [r4, #8]
 8019316:	b006      	add	sp, #24
 8019318:	bd10      	pop	{r4, pc}
 801931a:	6843      	ldr	r3, [r0, #4]
 801931c:	b9db      	cbnz	r3, 8019356 <rosidl_runtime_c__String__fini+0x66>
 801931e:	6883      	ldr	r3, [r0, #8]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d0f8      	beq.n	8019316 <rosidl_runtime_c__String__fini+0x26>
 8019324:	4b12      	ldr	r3, [pc, #72]	@ (8019370 <rosidl_runtime_c__String__fini+0x80>)
 8019326:	4813      	ldr	r0, [pc, #76]	@ (8019374 <rosidl_runtime_c__String__fini+0x84>)
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	2251      	movs	r2, #81	@ 0x51
 801932c:	68db      	ldr	r3, [r3, #12]
 801932e:	2101      	movs	r1, #1
 8019330:	f000 fb82 	bl	8019a38 <fwrite>
 8019334:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019338:	f000 f83e 	bl	80193b8 <exit>
 801933c:	4770      	bx	lr
 801933e:	4b0c      	ldr	r3, [pc, #48]	@ (8019370 <rosidl_runtime_c__String__fini+0x80>)
 8019340:	480d      	ldr	r0, [pc, #52]	@ (8019378 <rosidl_runtime_c__String__fini+0x88>)
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	224c      	movs	r2, #76	@ 0x4c
 8019346:	68db      	ldr	r3, [r3, #12]
 8019348:	2101      	movs	r1, #1
 801934a:	f000 fb75 	bl	8019a38 <fwrite>
 801934e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019352:	f000 f831 	bl	80193b8 <exit>
 8019356:	4b06      	ldr	r3, [pc, #24]	@ (8019370 <rosidl_runtime_c__String__fini+0x80>)
 8019358:	4808      	ldr	r0, [pc, #32]	@ (801937c <rosidl_runtime_c__String__fini+0x8c>)
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	224e      	movs	r2, #78	@ 0x4e
 801935e:	68db      	ldr	r3, [r3, #12]
 8019360:	2101      	movs	r1, #1
 8019362:	f000 fb69 	bl	8019a38 <fwrite>
 8019366:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801936a:	f000 f825 	bl	80193b8 <exit>
 801936e:	bf00      	nop
 8019370:	200009c0 	.word	0x200009c0
 8019374:	0801ca40 	.word	0x0801ca40
 8019378:	0801c9a0 	.word	0x0801c9a0
 801937c:	0801c9f0 	.word	0x0801c9f0

08019380 <calloc>:
 8019380:	4b02      	ldr	r3, [pc, #8]	@ (801938c <calloc+0xc>)
 8019382:	460a      	mov	r2, r1
 8019384:	4601      	mov	r1, r0
 8019386:	6818      	ldr	r0, [r3, #0]
 8019388:	f000 b802 	b.w	8019390 <_calloc_r>
 801938c:	200009c0 	.word	0x200009c0

08019390 <_calloc_r>:
 8019390:	b570      	push	{r4, r5, r6, lr}
 8019392:	fba1 5402 	umull	r5, r4, r1, r2
 8019396:	b93c      	cbnz	r4, 80193a8 <_calloc_r+0x18>
 8019398:	4629      	mov	r1, r5
 801939a:	f000 f899 	bl	80194d0 <_malloc_r>
 801939e:	4606      	mov	r6, r0
 80193a0:	b928      	cbnz	r0, 80193ae <_calloc_r+0x1e>
 80193a2:	2600      	movs	r6, #0
 80193a4:	4630      	mov	r0, r6
 80193a6:	bd70      	pop	{r4, r5, r6, pc}
 80193a8:	220c      	movs	r2, #12
 80193aa:	6002      	str	r2, [r0, #0]
 80193ac:	e7f9      	b.n	80193a2 <_calloc_r+0x12>
 80193ae:	462a      	mov	r2, r5
 80193b0:	4621      	mov	r1, r4
 80193b2:	f000 fccf 	bl	8019d54 <memset>
 80193b6:	e7f5      	b.n	80193a4 <_calloc_r+0x14>

080193b8 <exit>:
 80193b8:	b508      	push	{r3, lr}
 80193ba:	4b06      	ldr	r3, [pc, #24]	@ (80193d4 <exit+0x1c>)
 80193bc:	4604      	mov	r4, r0
 80193be:	b113      	cbz	r3, 80193c6 <exit+0xe>
 80193c0:	2100      	movs	r1, #0
 80193c2:	f3af 8000 	nop.w
 80193c6:	4b04      	ldr	r3, [pc, #16]	@ (80193d8 <exit+0x20>)
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	b103      	cbz	r3, 80193ce <exit+0x16>
 80193cc:	4798      	blx	r3
 80193ce:	4620      	mov	r0, r4
 80193d0:	f7e9 f9f0 	bl	80027b4 <_exit>
 80193d4:	00000000 	.word	0x00000000
 80193d8:	2000bb60 	.word	0x2000bb60

080193dc <getenv>:
 80193dc:	b507      	push	{r0, r1, r2, lr}
 80193de:	4b04      	ldr	r3, [pc, #16]	@ (80193f0 <getenv+0x14>)
 80193e0:	4601      	mov	r1, r0
 80193e2:	aa01      	add	r2, sp, #4
 80193e4:	6818      	ldr	r0, [r3, #0]
 80193e6:	f000 f805 	bl	80193f4 <_findenv_r>
 80193ea:	b003      	add	sp, #12
 80193ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80193f0:	200009c0 	.word	0x200009c0

080193f4 <_findenv_r>:
 80193f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193f8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019468 <_findenv_r+0x74>
 80193fc:	4606      	mov	r6, r0
 80193fe:	4689      	mov	r9, r1
 8019400:	4617      	mov	r7, r2
 8019402:	f000 fd9d 	bl	8019f40 <__env_lock>
 8019406:	f8da 4000 	ldr.w	r4, [sl]
 801940a:	b134      	cbz	r4, 801941a <_findenv_r+0x26>
 801940c:	464b      	mov	r3, r9
 801940e:	4698      	mov	r8, r3
 8019410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019414:	b13a      	cbz	r2, 8019426 <_findenv_r+0x32>
 8019416:	2a3d      	cmp	r2, #61	@ 0x3d
 8019418:	d1f9      	bne.n	801940e <_findenv_r+0x1a>
 801941a:	4630      	mov	r0, r6
 801941c:	f000 fd96 	bl	8019f4c <__env_unlock>
 8019420:	2000      	movs	r0, #0
 8019422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019426:	eba8 0809 	sub.w	r8, r8, r9
 801942a:	46a3      	mov	fp, r4
 801942c:	f854 0b04 	ldr.w	r0, [r4], #4
 8019430:	2800      	cmp	r0, #0
 8019432:	d0f2      	beq.n	801941a <_findenv_r+0x26>
 8019434:	4642      	mov	r2, r8
 8019436:	4649      	mov	r1, r9
 8019438:	f000 fca1 	bl	8019d7e <strncmp>
 801943c:	2800      	cmp	r0, #0
 801943e:	d1f4      	bne.n	801942a <_findenv_r+0x36>
 8019440:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019444:	eb03 0508 	add.w	r5, r3, r8
 8019448:	f813 3008 	ldrb.w	r3, [r3, r8]
 801944c:	2b3d      	cmp	r3, #61	@ 0x3d
 801944e:	d1ec      	bne.n	801942a <_findenv_r+0x36>
 8019450:	f8da 3000 	ldr.w	r3, [sl]
 8019454:	ebab 0303 	sub.w	r3, fp, r3
 8019458:	109b      	asrs	r3, r3, #2
 801945a:	4630      	mov	r0, r6
 801945c:	603b      	str	r3, [r7, #0]
 801945e:	f000 fd75 	bl	8019f4c <__env_unlock>
 8019462:	1c68      	adds	r0, r5, #1
 8019464:	e7dd      	b.n	8019422 <_findenv_r+0x2e>
 8019466:	bf00      	nop
 8019468:	20000000 	.word	0x20000000

0801946c <malloc>:
 801946c:	4b02      	ldr	r3, [pc, #8]	@ (8019478 <malloc+0xc>)
 801946e:	4601      	mov	r1, r0
 8019470:	6818      	ldr	r0, [r3, #0]
 8019472:	f000 b82d 	b.w	80194d0 <_malloc_r>
 8019476:	bf00      	nop
 8019478:	200009c0 	.word	0x200009c0

0801947c <free>:
 801947c:	4b02      	ldr	r3, [pc, #8]	@ (8019488 <free+0xc>)
 801947e:	4601      	mov	r1, r0
 8019480:	6818      	ldr	r0, [r3, #0]
 8019482:	f000 bd69 	b.w	8019f58 <_free_r>
 8019486:	bf00      	nop
 8019488:	200009c0 	.word	0x200009c0

0801948c <sbrk_aligned>:
 801948c:	b570      	push	{r4, r5, r6, lr}
 801948e:	4e0f      	ldr	r6, [pc, #60]	@ (80194cc <sbrk_aligned+0x40>)
 8019490:	460c      	mov	r4, r1
 8019492:	6831      	ldr	r1, [r6, #0]
 8019494:	4605      	mov	r5, r0
 8019496:	b911      	cbnz	r1, 801949e <sbrk_aligned+0x12>
 8019498:	f000 fcce 	bl	8019e38 <_sbrk_r>
 801949c:	6030      	str	r0, [r6, #0]
 801949e:	4621      	mov	r1, r4
 80194a0:	4628      	mov	r0, r5
 80194a2:	f000 fcc9 	bl	8019e38 <_sbrk_r>
 80194a6:	1c43      	adds	r3, r0, #1
 80194a8:	d103      	bne.n	80194b2 <sbrk_aligned+0x26>
 80194aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80194ae:	4620      	mov	r0, r4
 80194b0:	bd70      	pop	{r4, r5, r6, pc}
 80194b2:	1cc4      	adds	r4, r0, #3
 80194b4:	f024 0403 	bic.w	r4, r4, #3
 80194b8:	42a0      	cmp	r0, r4
 80194ba:	d0f8      	beq.n	80194ae <sbrk_aligned+0x22>
 80194bc:	1a21      	subs	r1, r4, r0
 80194be:	4628      	mov	r0, r5
 80194c0:	f000 fcba 	bl	8019e38 <_sbrk_r>
 80194c4:	3001      	adds	r0, #1
 80194c6:	d1f2      	bne.n	80194ae <sbrk_aligned+0x22>
 80194c8:	e7ef      	b.n	80194aa <sbrk_aligned+0x1e>
 80194ca:	bf00      	nop
 80194cc:	2000ba20 	.word	0x2000ba20

080194d0 <_malloc_r>:
 80194d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194d4:	1ccd      	adds	r5, r1, #3
 80194d6:	f025 0503 	bic.w	r5, r5, #3
 80194da:	3508      	adds	r5, #8
 80194dc:	2d0c      	cmp	r5, #12
 80194de:	bf38      	it	cc
 80194e0:	250c      	movcc	r5, #12
 80194e2:	2d00      	cmp	r5, #0
 80194e4:	4606      	mov	r6, r0
 80194e6:	db01      	blt.n	80194ec <_malloc_r+0x1c>
 80194e8:	42a9      	cmp	r1, r5
 80194ea:	d904      	bls.n	80194f6 <_malloc_r+0x26>
 80194ec:	230c      	movs	r3, #12
 80194ee:	6033      	str	r3, [r6, #0]
 80194f0:	2000      	movs	r0, #0
 80194f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80195cc <_malloc_r+0xfc>
 80194fa:	f000 f869 	bl	80195d0 <__malloc_lock>
 80194fe:	f8d8 3000 	ldr.w	r3, [r8]
 8019502:	461c      	mov	r4, r3
 8019504:	bb44      	cbnz	r4, 8019558 <_malloc_r+0x88>
 8019506:	4629      	mov	r1, r5
 8019508:	4630      	mov	r0, r6
 801950a:	f7ff ffbf 	bl	801948c <sbrk_aligned>
 801950e:	1c43      	adds	r3, r0, #1
 8019510:	4604      	mov	r4, r0
 8019512:	d158      	bne.n	80195c6 <_malloc_r+0xf6>
 8019514:	f8d8 4000 	ldr.w	r4, [r8]
 8019518:	4627      	mov	r7, r4
 801951a:	2f00      	cmp	r7, #0
 801951c:	d143      	bne.n	80195a6 <_malloc_r+0xd6>
 801951e:	2c00      	cmp	r4, #0
 8019520:	d04b      	beq.n	80195ba <_malloc_r+0xea>
 8019522:	6823      	ldr	r3, [r4, #0]
 8019524:	4639      	mov	r1, r7
 8019526:	4630      	mov	r0, r6
 8019528:	eb04 0903 	add.w	r9, r4, r3
 801952c:	f000 fc84 	bl	8019e38 <_sbrk_r>
 8019530:	4581      	cmp	r9, r0
 8019532:	d142      	bne.n	80195ba <_malloc_r+0xea>
 8019534:	6821      	ldr	r1, [r4, #0]
 8019536:	1a6d      	subs	r5, r5, r1
 8019538:	4629      	mov	r1, r5
 801953a:	4630      	mov	r0, r6
 801953c:	f7ff ffa6 	bl	801948c <sbrk_aligned>
 8019540:	3001      	adds	r0, #1
 8019542:	d03a      	beq.n	80195ba <_malloc_r+0xea>
 8019544:	6823      	ldr	r3, [r4, #0]
 8019546:	442b      	add	r3, r5
 8019548:	6023      	str	r3, [r4, #0]
 801954a:	f8d8 3000 	ldr.w	r3, [r8]
 801954e:	685a      	ldr	r2, [r3, #4]
 8019550:	bb62      	cbnz	r2, 80195ac <_malloc_r+0xdc>
 8019552:	f8c8 7000 	str.w	r7, [r8]
 8019556:	e00f      	b.n	8019578 <_malloc_r+0xa8>
 8019558:	6822      	ldr	r2, [r4, #0]
 801955a:	1b52      	subs	r2, r2, r5
 801955c:	d420      	bmi.n	80195a0 <_malloc_r+0xd0>
 801955e:	2a0b      	cmp	r2, #11
 8019560:	d917      	bls.n	8019592 <_malloc_r+0xc2>
 8019562:	1961      	adds	r1, r4, r5
 8019564:	42a3      	cmp	r3, r4
 8019566:	6025      	str	r5, [r4, #0]
 8019568:	bf18      	it	ne
 801956a:	6059      	strne	r1, [r3, #4]
 801956c:	6863      	ldr	r3, [r4, #4]
 801956e:	bf08      	it	eq
 8019570:	f8c8 1000 	streq.w	r1, [r8]
 8019574:	5162      	str	r2, [r4, r5]
 8019576:	604b      	str	r3, [r1, #4]
 8019578:	4630      	mov	r0, r6
 801957a:	f000 f82f 	bl	80195dc <__malloc_unlock>
 801957e:	f104 000b 	add.w	r0, r4, #11
 8019582:	1d23      	adds	r3, r4, #4
 8019584:	f020 0007 	bic.w	r0, r0, #7
 8019588:	1ac2      	subs	r2, r0, r3
 801958a:	bf1c      	itt	ne
 801958c:	1a1b      	subne	r3, r3, r0
 801958e:	50a3      	strne	r3, [r4, r2]
 8019590:	e7af      	b.n	80194f2 <_malloc_r+0x22>
 8019592:	6862      	ldr	r2, [r4, #4]
 8019594:	42a3      	cmp	r3, r4
 8019596:	bf0c      	ite	eq
 8019598:	f8c8 2000 	streq.w	r2, [r8]
 801959c:	605a      	strne	r2, [r3, #4]
 801959e:	e7eb      	b.n	8019578 <_malloc_r+0xa8>
 80195a0:	4623      	mov	r3, r4
 80195a2:	6864      	ldr	r4, [r4, #4]
 80195a4:	e7ae      	b.n	8019504 <_malloc_r+0x34>
 80195a6:	463c      	mov	r4, r7
 80195a8:	687f      	ldr	r7, [r7, #4]
 80195aa:	e7b6      	b.n	801951a <_malloc_r+0x4a>
 80195ac:	461a      	mov	r2, r3
 80195ae:	685b      	ldr	r3, [r3, #4]
 80195b0:	42a3      	cmp	r3, r4
 80195b2:	d1fb      	bne.n	80195ac <_malloc_r+0xdc>
 80195b4:	2300      	movs	r3, #0
 80195b6:	6053      	str	r3, [r2, #4]
 80195b8:	e7de      	b.n	8019578 <_malloc_r+0xa8>
 80195ba:	230c      	movs	r3, #12
 80195bc:	6033      	str	r3, [r6, #0]
 80195be:	4630      	mov	r0, r6
 80195c0:	f000 f80c 	bl	80195dc <__malloc_unlock>
 80195c4:	e794      	b.n	80194f0 <_malloc_r+0x20>
 80195c6:	6005      	str	r5, [r0, #0]
 80195c8:	e7d6      	b.n	8019578 <_malloc_r+0xa8>
 80195ca:	bf00      	nop
 80195cc:	2000ba24 	.word	0x2000ba24

080195d0 <__malloc_lock>:
 80195d0:	4801      	ldr	r0, [pc, #4]	@ (80195d8 <__malloc_lock+0x8>)
 80195d2:	f000 bc7e 	b.w	8019ed2 <__retarget_lock_acquire_recursive>
 80195d6:	bf00      	nop
 80195d8:	2000bb69 	.word	0x2000bb69

080195dc <__malloc_unlock>:
 80195dc:	4801      	ldr	r0, [pc, #4]	@ (80195e4 <__malloc_unlock+0x8>)
 80195de:	f000 bc79 	b.w	8019ed4 <__retarget_lock_release_recursive>
 80195e2:	bf00      	nop
 80195e4:	2000bb69 	.word	0x2000bb69

080195e8 <srand>:
 80195e8:	b538      	push	{r3, r4, r5, lr}
 80195ea:	4b10      	ldr	r3, [pc, #64]	@ (801962c <srand+0x44>)
 80195ec:	681d      	ldr	r5, [r3, #0]
 80195ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80195f0:	4604      	mov	r4, r0
 80195f2:	b9b3      	cbnz	r3, 8019622 <srand+0x3a>
 80195f4:	2018      	movs	r0, #24
 80195f6:	f7ff ff39 	bl	801946c <malloc>
 80195fa:	4602      	mov	r2, r0
 80195fc:	6328      	str	r0, [r5, #48]	@ 0x30
 80195fe:	b920      	cbnz	r0, 801960a <srand+0x22>
 8019600:	4b0b      	ldr	r3, [pc, #44]	@ (8019630 <srand+0x48>)
 8019602:	480c      	ldr	r0, [pc, #48]	@ (8019634 <srand+0x4c>)
 8019604:	2146      	movs	r1, #70	@ 0x46
 8019606:	f000 fc7d 	bl	8019f04 <__assert_func>
 801960a:	490b      	ldr	r1, [pc, #44]	@ (8019638 <srand+0x50>)
 801960c:	4b0b      	ldr	r3, [pc, #44]	@ (801963c <srand+0x54>)
 801960e:	e9c0 1300 	strd	r1, r3, [r0]
 8019612:	4b0b      	ldr	r3, [pc, #44]	@ (8019640 <srand+0x58>)
 8019614:	6083      	str	r3, [r0, #8]
 8019616:	230b      	movs	r3, #11
 8019618:	8183      	strh	r3, [r0, #12]
 801961a:	2100      	movs	r1, #0
 801961c:	2001      	movs	r0, #1
 801961e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019622:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019624:	2200      	movs	r2, #0
 8019626:	611c      	str	r4, [r3, #16]
 8019628:	615a      	str	r2, [r3, #20]
 801962a:	bd38      	pop	{r3, r4, r5, pc}
 801962c:	200009c0 	.word	0x200009c0
 8019630:	0801ca92 	.word	0x0801ca92
 8019634:	0801caa9 	.word	0x0801caa9
 8019638:	abcd330e 	.word	0xabcd330e
 801963c:	e66d1234 	.word	0xe66d1234
 8019640:	0005deec 	.word	0x0005deec

08019644 <rand>:
 8019644:	4b16      	ldr	r3, [pc, #88]	@ (80196a0 <rand+0x5c>)
 8019646:	b510      	push	{r4, lr}
 8019648:	681c      	ldr	r4, [r3, #0]
 801964a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801964c:	b9b3      	cbnz	r3, 801967c <rand+0x38>
 801964e:	2018      	movs	r0, #24
 8019650:	f7ff ff0c 	bl	801946c <malloc>
 8019654:	4602      	mov	r2, r0
 8019656:	6320      	str	r0, [r4, #48]	@ 0x30
 8019658:	b920      	cbnz	r0, 8019664 <rand+0x20>
 801965a:	4b12      	ldr	r3, [pc, #72]	@ (80196a4 <rand+0x60>)
 801965c:	4812      	ldr	r0, [pc, #72]	@ (80196a8 <rand+0x64>)
 801965e:	2152      	movs	r1, #82	@ 0x52
 8019660:	f000 fc50 	bl	8019f04 <__assert_func>
 8019664:	4911      	ldr	r1, [pc, #68]	@ (80196ac <rand+0x68>)
 8019666:	4b12      	ldr	r3, [pc, #72]	@ (80196b0 <rand+0x6c>)
 8019668:	e9c0 1300 	strd	r1, r3, [r0]
 801966c:	4b11      	ldr	r3, [pc, #68]	@ (80196b4 <rand+0x70>)
 801966e:	6083      	str	r3, [r0, #8]
 8019670:	230b      	movs	r3, #11
 8019672:	8183      	strh	r3, [r0, #12]
 8019674:	2100      	movs	r1, #0
 8019676:	2001      	movs	r0, #1
 8019678:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801967c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801967e:	480e      	ldr	r0, [pc, #56]	@ (80196b8 <rand+0x74>)
 8019680:	690b      	ldr	r3, [r1, #16]
 8019682:	694c      	ldr	r4, [r1, #20]
 8019684:	4a0d      	ldr	r2, [pc, #52]	@ (80196bc <rand+0x78>)
 8019686:	4358      	muls	r0, r3
 8019688:	fb02 0004 	mla	r0, r2, r4, r0
 801968c:	fba3 3202 	umull	r3, r2, r3, r2
 8019690:	3301      	adds	r3, #1
 8019692:	eb40 0002 	adc.w	r0, r0, r2
 8019696:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801969a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801969e:	bd10      	pop	{r4, pc}
 80196a0:	200009c0 	.word	0x200009c0
 80196a4:	0801ca92 	.word	0x0801ca92
 80196a8:	0801caa9 	.word	0x0801caa9
 80196ac:	abcd330e 	.word	0xabcd330e
 80196b0:	e66d1234 	.word	0xe66d1234
 80196b4:	0005deec 	.word	0x0005deec
 80196b8:	5851f42d 	.word	0x5851f42d
 80196bc:	4c957f2d 	.word	0x4c957f2d

080196c0 <realloc>:
 80196c0:	4b02      	ldr	r3, [pc, #8]	@ (80196cc <realloc+0xc>)
 80196c2:	460a      	mov	r2, r1
 80196c4:	4601      	mov	r1, r0
 80196c6:	6818      	ldr	r0, [r3, #0]
 80196c8:	f000 b802 	b.w	80196d0 <_realloc_r>
 80196cc:	200009c0 	.word	0x200009c0

080196d0 <_realloc_r>:
 80196d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196d4:	4680      	mov	r8, r0
 80196d6:	4615      	mov	r5, r2
 80196d8:	460c      	mov	r4, r1
 80196da:	b921      	cbnz	r1, 80196e6 <_realloc_r+0x16>
 80196dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196e0:	4611      	mov	r1, r2
 80196e2:	f7ff bef5 	b.w	80194d0 <_malloc_r>
 80196e6:	b92a      	cbnz	r2, 80196f4 <_realloc_r+0x24>
 80196e8:	f000 fc36 	bl	8019f58 <_free_r>
 80196ec:	2400      	movs	r4, #0
 80196ee:	4620      	mov	r0, r4
 80196f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196f4:	f000 fc7a 	bl	8019fec <_malloc_usable_size_r>
 80196f8:	4285      	cmp	r5, r0
 80196fa:	4606      	mov	r6, r0
 80196fc:	d802      	bhi.n	8019704 <_realloc_r+0x34>
 80196fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019702:	d8f4      	bhi.n	80196ee <_realloc_r+0x1e>
 8019704:	4629      	mov	r1, r5
 8019706:	4640      	mov	r0, r8
 8019708:	f7ff fee2 	bl	80194d0 <_malloc_r>
 801970c:	4607      	mov	r7, r0
 801970e:	2800      	cmp	r0, #0
 8019710:	d0ec      	beq.n	80196ec <_realloc_r+0x1c>
 8019712:	42b5      	cmp	r5, r6
 8019714:	462a      	mov	r2, r5
 8019716:	4621      	mov	r1, r4
 8019718:	bf28      	it	cs
 801971a:	4632      	movcs	r2, r6
 801971c:	f000 fbe3 	bl	8019ee6 <memcpy>
 8019720:	4621      	mov	r1, r4
 8019722:	4640      	mov	r0, r8
 8019724:	f000 fc18 	bl	8019f58 <_free_r>
 8019728:	463c      	mov	r4, r7
 801972a:	e7e0      	b.n	80196ee <_realloc_r+0x1e>

0801972c <_strtoul_l.constprop.0>:
 801972c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019730:	4e34      	ldr	r6, [pc, #208]	@ (8019804 <_strtoul_l.constprop.0+0xd8>)
 8019732:	4686      	mov	lr, r0
 8019734:	460d      	mov	r5, r1
 8019736:	4628      	mov	r0, r5
 8019738:	f815 4b01 	ldrb.w	r4, [r5], #1
 801973c:	5d37      	ldrb	r7, [r6, r4]
 801973e:	f017 0708 	ands.w	r7, r7, #8
 8019742:	d1f8      	bne.n	8019736 <_strtoul_l.constprop.0+0xa>
 8019744:	2c2d      	cmp	r4, #45	@ 0x2d
 8019746:	d12f      	bne.n	80197a8 <_strtoul_l.constprop.0+0x7c>
 8019748:	782c      	ldrb	r4, [r5, #0]
 801974a:	2701      	movs	r7, #1
 801974c:	1c85      	adds	r5, r0, #2
 801974e:	f033 0010 	bics.w	r0, r3, #16
 8019752:	d109      	bne.n	8019768 <_strtoul_l.constprop.0+0x3c>
 8019754:	2c30      	cmp	r4, #48	@ 0x30
 8019756:	d12c      	bne.n	80197b2 <_strtoul_l.constprop.0+0x86>
 8019758:	7828      	ldrb	r0, [r5, #0]
 801975a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801975e:	2858      	cmp	r0, #88	@ 0x58
 8019760:	d127      	bne.n	80197b2 <_strtoul_l.constprop.0+0x86>
 8019762:	786c      	ldrb	r4, [r5, #1]
 8019764:	2310      	movs	r3, #16
 8019766:	3502      	adds	r5, #2
 8019768:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801976c:	2600      	movs	r6, #0
 801976e:	fbb8 f8f3 	udiv	r8, r8, r3
 8019772:	fb03 f908 	mul.w	r9, r3, r8
 8019776:	ea6f 0909 	mvn.w	r9, r9
 801977a:	4630      	mov	r0, r6
 801977c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019780:	f1bc 0f09 	cmp.w	ip, #9
 8019784:	d81c      	bhi.n	80197c0 <_strtoul_l.constprop.0+0x94>
 8019786:	4664      	mov	r4, ip
 8019788:	42a3      	cmp	r3, r4
 801978a:	dd2a      	ble.n	80197e2 <_strtoul_l.constprop.0+0xb6>
 801978c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019790:	d007      	beq.n	80197a2 <_strtoul_l.constprop.0+0x76>
 8019792:	4580      	cmp	r8, r0
 8019794:	d322      	bcc.n	80197dc <_strtoul_l.constprop.0+0xb0>
 8019796:	d101      	bne.n	801979c <_strtoul_l.constprop.0+0x70>
 8019798:	45a1      	cmp	r9, r4
 801979a:	db1f      	blt.n	80197dc <_strtoul_l.constprop.0+0xb0>
 801979c:	fb00 4003 	mla	r0, r0, r3, r4
 80197a0:	2601      	movs	r6, #1
 80197a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80197a6:	e7e9      	b.n	801977c <_strtoul_l.constprop.0+0x50>
 80197a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80197aa:	bf04      	itt	eq
 80197ac:	782c      	ldrbeq	r4, [r5, #0]
 80197ae:	1c85      	addeq	r5, r0, #2
 80197b0:	e7cd      	b.n	801974e <_strtoul_l.constprop.0+0x22>
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d1d8      	bne.n	8019768 <_strtoul_l.constprop.0+0x3c>
 80197b6:	2c30      	cmp	r4, #48	@ 0x30
 80197b8:	bf0c      	ite	eq
 80197ba:	2308      	moveq	r3, #8
 80197bc:	230a      	movne	r3, #10
 80197be:	e7d3      	b.n	8019768 <_strtoul_l.constprop.0+0x3c>
 80197c0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80197c4:	f1bc 0f19 	cmp.w	ip, #25
 80197c8:	d801      	bhi.n	80197ce <_strtoul_l.constprop.0+0xa2>
 80197ca:	3c37      	subs	r4, #55	@ 0x37
 80197cc:	e7dc      	b.n	8019788 <_strtoul_l.constprop.0+0x5c>
 80197ce:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80197d2:	f1bc 0f19 	cmp.w	ip, #25
 80197d6:	d804      	bhi.n	80197e2 <_strtoul_l.constprop.0+0xb6>
 80197d8:	3c57      	subs	r4, #87	@ 0x57
 80197da:	e7d5      	b.n	8019788 <_strtoul_l.constprop.0+0x5c>
 80197dc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80197e0:	e7df      	b.n	80197a2 <_strtoul_l.constprop.0+0x76>
 80197e2:	1c73      	adds	r3, r6, #1
 80197e4:	d106      	bne.n	80197f4 <_strtoul_l.constprop.0+0xc8>
 80197e6:	2322      	movs	r3, #34	@ 0x22
 80197e8:	f8ce 3000 	str.w	r3, [lr]
 80197ec:	4630      	mov	r0, r6
 80197ee:	b932      	cbnz	r2, 80197fe <_strtoul_l.constprop.0+0xd2>
 80197f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197f4:	b107      	cbz	r7, 80197f8 <_strtoul_l.constprop.0+0xcc>
 80197f6:	4240      	negs	r0, r0
 80197f8:	2a00      	cmp	r2, #0
 80197fa:	d0f9      	beq.n	80197f0 <_strtoul_l.constprop.0+0xc4>
 80197fc:	b106      	cbz	r6, 8019800 <_strtoul_l.constprop.0+0xd4>
 80197fe:	1e69      	subs	r1, r5, #1
 8019800:	6011      	str	r1, [r2, #0]
 8019802:	e7f5      	b.n	80197f0 <_strtoul_l.constprop.0+0xc4>
 8019804:	0801cb02 	.word	0x0801cb02

08019808 <strtoul>:
 8019808:	4613      	mov	r3, r2
 801980a:	460a      	mov	r2, r1
 801980c:	4601      	mov	r1, r0
 801980e:	4802      	ldr	r0, [pc, #8]	@ (8019818 <strtoul+0x10>)
 8019810:	6800      	ldr	r0, [r0, #0]
 8019812:	f7ff bf8b 	b.w	801972c <_strtoul_l.constprop.0>
 8019816:	bf00      	nop
 8019818:	200009c0 	.word	0x200009c0

0801981c <std>:
 801981c:	2300      	movs	r3, #0
 801981e:	b510      	push	{r4, lr}
 8019820:	4604      	mov	r4, r0
 8019822:	e9c0 3300 	strd	r3, r3, [r0]
 8019826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801982a:	6083      	str	r3, [r0, #8]
 801982c:	8181      	strh	r1, [r0, #12]
 801982e:	6643      	str	r3, [r0, #100]	@ 0x64
 8019830:	81c2      	strh	r2, [r0, #14]
 8019832:	6183      	str	r3, [r0, #24]
 8019834:	4619      	mov	r1, r3
 8019836:	2208      	movs	r2, #8
 8019838:	305c      	adds	r0, #92	@ 0x5c
 801983a:	f000 fa8b 	bl	8019d54 <memset>
 801983e:	4b0d      	ldr	r3, [pc, #52]	@ (8019874 <std+0x58>)
 8019840:	6263      	str	r3, [r4, #36]	@ 0x24
 8019842:	4b0d      	ldr	r3, [pc, #52]	@ (8019878 <std+0x5c>)
 8019844:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019846:	4b0d      	ldr	r3, [pc, #52]	@ (801987c <std+0x60>)
 8019848:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801984a:	4b0d      	ldr	r3, [pc, #52]	@ (8019880 <std+0x64>)
 801984c:	6323      	str	r3, [r4, #48]	@ 0x30
 801984e:	4b0d      	ldr	r3, [pc, #52]	@ (8019884 <std+0x68>)
 8019850:	6224      	str	r4, [r4, #32]
 8019852:	429c      	cmp	r4, r3
 8019854:	d006      	beq.n	8019864 <std+0x48>
 8019856:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801985a:	4294      	cmp	r4, r2
 801985c:	d002      	beq.n	8019864 <std+0x48>
 801985e:	33d0      	adds	r3, #208	@ 0xd0
 8019860:	429c      	cmp	r4, r3
 8019862:	d105      	bne.n	8019870 <std+0x54>
 8019864:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801986c:	f000 bb30 	b.w	8019ed0 <__retarget_lock_init_recursive>
 8019870:	bd10      	pop	{r4, pc}
 8019872:	bf00      	nop
 8019874:	08019ae1 	.word	0x08019ae1
 8019878:	08019b03 	.word	0x08019b03
 801987c:	08019b3b 	.word	0x08019b3b
 8019880:	08019b5f 	.word	0x08019b5f
 8019884:	2000ba28 	.word	0x2000ba28

08019888 <stdio_exit_handler>:
 8019888:	4a02      	ldr	r2, [pc, #8]	@ (8019894 <stdio_exit_handler+0xc>)
 801988a:	4903      	ldr	r1, [pc, #12]	@ (8019898 <stdio_exit_handler+0x10>)
 801988c:	4803      	ldr	r0, [pc, #12]	@ (801989c <stdio_exit_handler+0x14>)
 801988e:	f000 b869 	b.w	8019964 <_fwalk_sglue>
 8019892:	bf00      	nop
 8019894:	200009b4 	.word	0x200009b4
 8019898:	0801a955 	.word	0x0801a955
 801989c:	200009c4 	.word	0x200009c4

080198a0 <cleanup_stdio>:
 80198a0:	6841      	ldr	r1, [r0, #4]
 80198a2:	4b0c      	ldr	r3, [pc, #48]	@ (80198d4 <cleanup_stdio+0x34>)
 80198a4:	4299      	cmp	r1, r3
 80198a6:	b510      	push	{r4, lr}
 80198a8:	4604      	mov	r4, r0
 80198aa:	d001      	beq.n	80198b0 <cleanup_stdio+0x10>
 80198ac:	f001 f852 	bl	801a954 <_fflush_r>
 80198b0:	68a1      	ldr	r1, [r4, #8]
 80198b2:	4b09      	ldr	r3, [pc, #36]	@ (80198d8 <cleanup_stdio+0x38>)
 80198b4:	4299      	cmp	r1, r3
 80198b6:	d002      	beq.n	80198be <cleanup_stdio+0x1e>
 80198b8:	4620      	mov	r0, r4
 80198ba:	f001 f84b 	bl	801a954 <_fflush_r>
 80198be:	68e1      	ldr	r1, [r4, #12]
 80198c0:	4b06      	ldr	r3, [pc, #24]	@ (80198dc <cleanup_stdio+0x3c>)
 80198c2:	4299      	cmp	r1, r3
 80198c4:	d004      	beq.n	80198d0 <cleanup_stdio+0x30>
 80198c6:	4620      	mov	r0, r4
 80198c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198cc:	f001 b842 	b.w	801a954 <_fflush_r>
 80198d0:	bd10      	pop	{r4, pc}
 80198d2:	bf00      	nop
 80198d4:	2000ba28 	.word	0x2000ba28
 80198d8:	2000ba90 	.word	0x2000ba90
 80198dc:	2000baf8 	.word	0x2000baf8

080198e0 <global_stdio_init.part.0>:
 80198e0:	b510      	push	{r4, lr}
 80198e2:	4b0b      	ldr	r3, [pc, #44]	@ (8019910 <global_stdio_init.part.0+0x30>)
 80198e4:	4c0b      	ldr	r4, [pc, #44]	@ (8019914 <global_stdio_init.part.0+0x34>)
 80198e6:	4a0c      	ldr	r2, [pc, #48]	@ (8019918 <global_stdio_init.part.0+0x38>)
 80198e8:	601a      	str	r2, [r3, #0]
 80198ea:	4620      	mov	r0, r4
 80198ec:	2200      	movs	r2, #0
 80198ee:	2104      	movs	r1, #4
 80198f0:	f7ff ff94 	bl	801981c <std>
 80198f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80198f8:	2201      	movs	r2, #1
 80198fa:	2109      	movs	r1, #9
 80198fc:	f7ff ff8e 	bl	801981c <std>
 8019900:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019904:	2202      	movs	r2, #2
 8019906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801990a:	2112      	movs	r1, #18
 801990c:	f7ff bf86 	b.w	801981c <std>
 8019910:	2000bb60 	.word	0x2000bb60
 8019914:	2000ba28 	.word	0x2000ba28
 8019918:	08019889 	.word	0x08019889

0801991c <__sfp_lock_acquire>:
 801991c:	4801      	ldr	r0, [pc, #4]	@ (8019924 <__sfp_lock_acquire+0x8>)
 801991e:	f000 bad8 	b.w	8019ed2 <__retarget_lock_acquire_recursive>
 8019922:	bf00      	nop
 8019924:	2000bb6a 	.word	0x2000bb6a

08019928 <__sfp_lock_release>:
 8019928:	4801      	ldr	r0, [pc, #4]	@ (8019930 <__sfp_lock_release+0x8>)
 801992a:	f000 bad3 	b.w	8019ed4 <__retarget_lock_release_recursive>
 801992e:	bf00      	nop
 8019930:	2000bb6a 	.word	0x2000bb6a

08019934 <__sinit>:
 8019934:	b510      	push	{r4, lr}
 8019936:	4604      	mov	r4, r0
 8019938:	f7ff fff0 	bl	801991c <__sfp_lock_acquire>
 801993c:	6a23      	ldr	r3, [r4, #32]
 801993e:	b11b      	cbz	r3, 8019948 <__sinit+0x14>
 8019940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019944:	f7ff bff0 	b.w	8019928 <__sfp_lock_release>
 8019948:	4b04      	ldr	r3, [pc, #16]	@ (801995c <__sinit+0x28>)
 801994a:	6223      	str	r3, [r4, #32]
 801994c:	4b04      	ldr	r3, [pc, #16]	@ (8019960 <__sinit+0x2c>)
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d1f5      	bne.n	8019940 <__sinit+0xc>
 8019954:	f7ff ffc4 	bl	80198e0 <global_stdio_init.part.0>
 8019958:	e7f2      	b.n	8019940 <__sinit+0xc>
 801995a:	bf00      	nop
 801995c:	080198a1 	.word	0x080198a1
 8019960:	2000bb60 	.word	0x2000bb60

08019964 <_fwalk_sglue>:
 8019964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019968:	4607      	mov	r7, r0
 801996a:	4688      	mov	r8, r1
 801996c:	4614      	mov	r4, r2
 801996e:	2600      	movs	r6, #0
 8019970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019974:	f1b9 0901 	subs.w	r9, r9, #1
 8019978:	d505      	bpl.n	8019986 <_fwalk_sglue+0x22>
 801997a:	6824      	ldr	r4, [r4, #0]
 801997c:	2c00      	cmp	r4, #0
 801997e:	d1f7      	bne.n	8019970 <_fwalk_sglue+0xc>
 8019980:	4630      	mov	r0, r6
 8019982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019986:	89ab      	ldrh	r3, [r5, #12]
 8019988:	2b01      	cmp	r3, #1
 801998a:	d907      	bls.n	801999c <_fwalk_sglue+0x38>
 801998c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019990:	3301      	adds	r3, #1
 8019992:	d003      	beq.n	801999c <_fwalk_sglue+0x38>
 8019994:	4629      	mov	r1, r5
 8019996:	4638      	mov	r0, r7
 8019998:	47c0      	blx	r8
 801999a:	4306      	orrs	r6, r0
 801999c:	3568      	adds	r5, #104	@ 0x68
 801999e:	e7e9      	b.n	8019974 <_fwalk_sglue+0x10>

080199a0 <_fwrite_r>:
 80199a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199a4:	9c08      	ldr	r4, [sp, #32]
 80199a6:	468a      	mov	sl, r1
 80199a8:	4690      	mov	r8, r2
 80199aa:	fb02 f903 	mul.w	r9, r2, r3
 80199ae:	4606      	mov	r6, r0
 80199b0:	b118      	cbz	r0, 80199ba <_fwrite_r+0x1a>
 80199b2:	6a03      	ldr	r3, [r0, #32]
 80199b4:	b90b      	cbnz	r3, 80199ba <_fwrite_r+0x1a>
 80199b6:	f7ff ffbd 	bl	8019934 <__sinit>
 80199ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80199bc:	07dd      	lsls	r5, r3, #31
 80199be:	d405      	bmi.n	80199cc <_fwrite_r+0x2c>
 80199c0:	89a3      	ldrh	r3, [r4, #12]
 80199c2:	0598      	lsls	r0, r3, #22
 80199c4:	d402      	bmi.n	80199cc <_fwrite_r+0x2c>
 80199c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80199c8:	f000 fa83 	bl	8019ed2 <__retarget_lock_acquire_recursive>
 80199cc:	89a3      	ldrh	r3, [r4, #12]
 80199ce:	0719      	lsls	r1, r3, #28
 80199d0:	d516      	bpl.n	8019a00 <_fwrite_r+0x60>
 80199d2:	6923      	ldr	r3, [r4, #16]
 80199d4:	b1a3      	cbz	r3, 8019a00 <_fwrite_r+0x60>
 80199d6:	2500      	movs	r5, #0
 80199d8:	454d      	cmp	r5, r9
 80199da:	d01f      	beq.n	8019a1c <_fwrite_r+0x7c>
 80199dc:	68a7      	ldr	r7, [r4, #8]
 80199de:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80199e2:	3f01      	subs	r7, #1
 80199e4:	2f00      	cmp	r7, #0
 80199e6:	60a7      	str	r7, [r4, #8]
 80199e8:	da04      	bge.n	80199f4 <_fwrite_r+0x54>
 80199ea:	69a3      	ldr	r3, [r4, #24]
 80199ec:	429f      	cmp	r7, r3
 80199ee:	db0f      	blt.n	8019a10 <_fwrite_r+0x70>
 80199f0:	290a      	cmp	r1, #10
 80199f2:	d00d      	beq.n	8019a10 <_fwrite_r+0x70>
 80199f4:	6823      	ldr	r3, [r4, #0]
 80199f6:	1c5a      	adds	r2, r3, #1
 80199f8:	6022      	str	r2, [r4, #0]
 80199fa:	7019      	strb	r1, [r3, #0]
 80199fc:	3501      	adds	r5, #1
 80199fe:	e7eb      	b.n	80199d8 <_fwrite_r+0x38>
 8019a00:	4621      	mov	r1, r4
 8019a02:	4630      	mov	r0, r6
 8019a04:	f000 f926 	bl	8019c54 <__swsetup_r>
 8019a08:	2800      	cmp	r0, #0
 8019a0a:	d0e4      	beq.n	80199d6 <_fwrite_r+0x36>
 8019a0c:	2500      	movs	r5, #0
 8019a0e:	e005      	b.n	8019a1c <_fwrite_r+0x7c>
 8019a10:	4622      	mov	r2, r4
 8019a12:	4630      	mov	r0, r6
 8019a14:	f000 f8e0 	bl	8019bd8 <__swbuf_r>
 8019a18:	3001      	adds	r0, #1
 8019a1a:	d1ef      	bne.n	80199fc <_fwrite_r+0x5c>
 8019a1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019a1e:	07da      	lsls	r2, r3, #31
 8019a20:	d405      	bmi.n	8019a2e <_fwrite_r+0x8e>
 8019a22:	89a3      	ldrh	r3, [r4, #12]
 8019a24:	059b      	lsls	r3, r3, #22
 8019a26:	d402      	bmi.n	8019a2e <_fwrite_r+0x8e>
 8019a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019a2a:	f000 fa53 	bl	8019ed4 <__retarget_lock_release_recursive>
 8019a2e:	fbb5 f0f8 	udiv	r0, r5, r8
 8019a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019a38 <fwrite>:
 8019a38:	b507      	push	{r0, r1, r2, lr}
 8019a3a:	9300      	str	r3, [sp, #0]
 8019a3c:	4613      	mov	r3, r2
 8019a3e:	460a      	mov	r2, r1
 8019a40:	4601      	mov	r1, r0
 8019a42:	4803      	ldr	r0, [pc, #12]	@ (8019a50 <fwrite+0x18>)
 8019a44:	6800      	ldr	r0, [r0, #0]
 8019a46:	f7ff ffab 	bl	80199a0 <_fwrite_r>
 8019a4a:	b003      	add	sp, #12
 8019a4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a50:	200009c0 	.word	0x200009c0

08019a54 <iprintf>:
 8019a54:	b40f      	push	{r0, r1, r2, r3}
 8019a56:	b507      	push	{r0, r1, r2, lr}
 8019a58:	4906      	ldr	r1, [pc, #24]	@ (8019a74 <iprintf+0x20>)
 8019a5a:	ab04      	add	r3, sp, #16
 8019a5c:	6808      	ldr	r0, [r1, #0]
 8019a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a62:	6881      	ldr	r1, [r0, #8]
 8019a64:	9301      	str	r3, [sp, #4]
 8019a66:	f000 fc4b 	bl	801a300 <_vfiprintf_r>
 8019a6a:	b003      	add	sp, #12
 8019a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a70:	b004      	add	sp, #16
 8019a72:	4770      	bx	lr
 8019a74:	200009c0 	.word	0x200009c0

08019a78 <sniprintf>:
 8019a78:	b40c      	push	{r2, r3}
 8019a7a:	b530      	push	{r4, r5, lr}
 8019a7c:	4b17      	ldr	r3, [pc, #92]	@ (8019adc <sniprintf+0x64>)
 8019a7e:	1e0c      	subs	r4, r1, #0
 8019a80:	681d      	ldr	r5, [r3, #0]
 8019a82:	b09d      	sub	sp, #116	@ 0x74
 8019a84:	da08      	bge.n	8019a98 <sniprintf+0x20>
 8019a86:	238b      	movs	r3, #139	@ 0x8b
 8019a88:	602b      	str	r3, [r5, #0]
 8019a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019a8e:	b01d      	add	sp, #116	@ 0x74
 8019a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a94:	b002      	add	sp, #8
 8019a96:	4770      	bx	lr
 8019a98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019a9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019aa0:	bf14      	ite	ne
 8019aa2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019aa6:	4623      	moveq	r3, r4
 8019aa8:	9304      	str	r3, [sp, #16]
 8019aaa:	9307      	str	r3, [sp, #28]
 8019aac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019ab0:	9002      	str	r0, [sp, #8]
 8019ab2:	9006      	str	r0, [sp, #24]
 8019ab4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ab8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019aba:	ab21      	add	r3, sp, #132	@ 0x84
 8019abc:	a902      	add	r1, sp, #8
 8019abe:	4628      	mov	r0, r5
 8019ac0:	9301      	str	r3, [sp, #4]
 8019ac2:	f000 faf7 	bl	801a0b4 <_svfiprintf_r>
 8019ac6:	1c43      	adds	r3, r0, #1
 8019ac8:	bfbc      	itt	lt
 8019aca:	238b      	movlt	r3, #139	@ 0x8b
 8019acc:	602b      	strlt	r3, [r5, #0]
 8019ace:	2c00      	cmp	r4, #0
 8019ad0:	d0dd      	beq.n	8019a8e <sniprintf+0x16>
 8019ad2:	9b02      	ldr	r3, [sp, #8]
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	701a      	strb	r2, [r3, #0]
 8019ad8:	e7d9      	b.n	8019a8e <sniprintf+0x16>
 8019ada:	bf00      	nop
 8019adc:	200009c0 	.word	0x200009c0

08019ae0 <__sread>:
 8019ae0:	b510      	push	{r4, lr}
 8019ae2:	460c      	mov	r4, r1
 8019ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ae8:	f000 f994 	bl	8019e14 <_read_r>
 8019aec:	2800      	cmp	r0, #0
 8019aee:	bfab      	itete	ge
 8019af0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019af2:	89a3      	ldrhlt	r3, [r4, #12]
 8019af4:	181b      	addge	r3, r3, r0
 8019af6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019afa:	bfac      	ite	ge
 8019afc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019afe:	81a3      	strhlt	r3, [r4, #12]
 8019b00:	bd10      	pop	{r4, pc}

08019b02 <__swrite>:
 8019b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b06:	461f      	mov	r7, r3
 8019b08:	898b      	ldrh	r3, [r1, #12]
 8019b0a:	05db      	lsls	r3, r3, #23
 8019b0c:	4605      	mov	r5, r0
 8019b0e:	460c      	mov	r4, r1
 8019b10:	4616      	mov	r6, r2
 8019b12:	d505      	bpl.n	8019b20 <__swrite+0x1e>
 8019b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b18:	2302      	movs	r3, #2
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	f000 f968 	bl	8019df0 <_lseek_r>
 8019b20:	89a3      	ldrh	r3, [r4, #12]
 8019b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019b2a:	81a3      	strh	r3, [r4, #12]
 8019b2c:	4632      	mov	r2, r6
 8019b2e:	463b      	mov	r3, r7
 8019b30:	4628      	mov	r0, r5
 8019b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b36:	f000 b98f 	b.w	8019e58 <_write_r>

08019b3a <__sseek>:
 8019b3a:	b510      	push	{r4, lr}
 8019b3c:	460c      	mov	r4, r1
 8019b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b42:	f000 f955 	bl	8019df0 <_lseek_r>
 8019b46:	1c43      	adds	r3, r0, #1
 8019b48:	89a3      	ldrh	r3, [r4, #12]
 8019b4a:	bf15      	itete	ne
 8019b4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019b4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019b52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019b56:	81a3      	strheq	r3, [r4, #12]
 8019b58:	bf18      	it	ne
 8019b5a:	81a3      	strhne	r3, [r4, #12]
 8019b5c:	bd10      	pop	{r4, pc}

08019b5e <__sclose>:
 8019b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b62:	f000 b935 	b.w	8019dd0 <_close_r>

08019b66 <_vsniprintf_r>:
 8019b66:	b530      	push	{r4, r5, lr}
 8019b68:	4614      	mov	r4, r2
 8019b6a:	2c00      	cmp	r4, #0
 8019b6c:	b09b      	sub	sp, #108	@ 0x6c
 8019b6e:	4605      	mov	r5, r0
 8019b70:	461a      	mov	r2, r3
 8019b72:	da05      	bge.n	8019b80 <_vsniprintf_r+0x1a>
 8019b74:	238b      	movs	r3, #139	@ 0x8b
 8019b76:	6003      	str	r3, [r0, #0]
 8019b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b7c:	b01b      	add	sp, #108	@ 0x6c
 8019b7e:	bd30      	pop	{r4, r5, pc}
 8019b80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019b84:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019b88:	bf14      	ite	ne
 8019b8a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019b8e:	4623      	moveq	r3, r4
 8019b90:	9302      	str	r3, [sp, #8]
 8019b92:	9305      	str	r3, [sp, #20]
 8019b94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019b98:	9100      	str	r1, [sp, #0]
 8019b9a:	9104      	str	r1, [sp, #16]
 8019b9c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019ba0:	4669      	mov	r1, sp
 8019ba2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019ba4:	f000 fa86 	bl	801a0b4 <_svfiprintf_r>
 8019ba8:	1c43      	adds	r3, r0, #1
 8019baa:	bfbc      	itt	lt
 8019bac:	238b      	movlt	r3, #139	@ 0x8b
 8019bae:	602b      	strlt	r3, [r5, #0]
 8019bb0:	2c00      	cmp	r4, #0
 8019bb2:	d0e3      	beq.n	8019b7c <_vsniprintf_r+0x16>
 8019bb4:	9b00      	ldr	r3, [sp, #0]
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	701a      	strb	r2, [r3, #0]
 8019bba:	e7df      	b.n	8019b7c <_vsniprintf_r+0x16>

08019bbc <vsniprintf>:
 8019bbc:	b507      	push	{r0, r1, r2, lr}
 8019bbe:	9300      	str	r3, [sp, #0]
 8019bc0:	4613      	mov	r3, r2
 8019bc2:	460a      	mov	r2, r1
 8019bc4:	4601      	mov	r1, r0
 8019bc6:	4803      	ldr	r0, [pc, #12]	@ (8019bd4 <vsniprintf+0x18>)
 8019bc8:	6800      	ldr	r0, [r0, #0]
 8019bca:	f7ff ffcc 	bl	8019b66 <_vsniprintf_r>
 8019bce:	b003      	add	sp, #12
 8019bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8019bd4:	200009c0 	.word	0x200009c0

08019bd8 <__swbuf_r>:
 8019bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bda:	460e      	mov	r6, r1
 8019bdc:	4614      	mov	r4, r2
 8019bde:	4605      	mov	r5, r0
 8019be0:	b118      	cbz	r0, 8019bea <__swbuf_r+0x12>
 8019be2:	6a03      	ldr	r3, [r0, #32]
 8019be4:	b90b      	cbnz	r3, 8019bea <__swbuf_r+0x12>
 8019be6:	f7ff fea5 	bl	8019934 <__sinit>
 8019bea:	69a3      	ldr	r3, [r4, #24]
 8019bec:	60a3      	str	r3, [r4, #8]
 8019bee:	89a3      	ldrh	r3, [r4, #12]
 8019bf0:	071a      	lsls	r2, r3, #28
 8019bf2:	d501      	bpl.n	8019bf8 <__swbuf_r+0x20>
 8019bf4:	6923      	ldr	r3, [r4, #16]
 8019bf6:	b943      	cbnz	r3, 8019c0a <__swbuf_r+0x32>
 8019bf8:	4621      	mov	r1, r4
 8019bfa:	4628      	mov	r0, r5
 8019bfc:	f000 f82a 	bl	8019c54 <__swsetup_r>
 8019c00:	b118      	cbz	r0, 8019c0a <__swbuf_r+0x32>
 8019c02:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019c06:	4638      	mov	r0, r7
 8019c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c0a:	6823      	ldr	r3, [r4, #0]
 8019c0c:	6922      	ldr	r2, [r4, #16]
 8019c0e:	1a98      	subs	r0, r3, r2
 8019c10:	6963      	ldr	r3, [r4, #20]
 8019c12:	b2f6      	uxtb	r6, r6
 8019c14:	4283      	cmp	r3, r0
 8019c16:	4637      	mov	r7, r6
 8019c18:	dc05      	bgt.n	8019c26 <__swbuf_r+0x4e>
 8019c1a:	4621      	mov	r1, r4
 8019c1c:	4628      	mov	r0, r5
 8019c1e:	f000 fe99 	bl	801a954 <_fflush_r>
 8019c22:	2800      	cmp	r0, #0
 8019c24:	d1ed      	bne.n	8019c02 <__swbuf_r+0x2a>
 8019c26:	68a3      	ldr	r3, [r4, #8]
 8019c28:	3b01      	subs	r3, #1
 8019c2a:	60a3      	str	r3, [r4, #8]
 8019c2c:	6823      	ldr	r3, [r4, #0]
 8019c2e:	1c5a      	adds	r2, r3, #1
 8019c30:	6022      	str	r2, [r4, #0]
 8019c32:	701e      	strb	r6, [r3, #0]
 8019c34:	6962      	ldr	r2, [r4, #20]
 8019c36:	1c43      	adds	r3, r0, #1
 8019c38:	429a      	cmp	r2, r3
 8019c3a:	d004      	beq.n	8019c46 <__swbuf_r+0x6e>
 8019c3c:	89a3      	ldrh	r3, [r4, #12]
 8019c3e:	07db      	lsls	r3, r3, #31
 8019c40:	d5e1      	bpl.n	8019c06 <__swbuf_r+0x2e>
 8019c42:	2e0a      	cmp	r6, #10
 8019c44:	d1df      	bne.n	8019c06 <__swbuf_r+0x2e>
 8019c46:	4621      	mov	r1, r4
 8019c48:	4628      	mov	r0, r5
 8019c4a:	f000 fe83 	bl	801a954 <_fflush_r>
 8019c4e:	2800      	cmp	r0, #0
 8019c50:	d0d9      	beq.n	8019c06 <__swbuf_r+0x2e>
 8019c52:	e7d6      	b.n	8019c02 <__swbuf_r+0x2a>

08019c54 <__swsetup_r>:
 8019c54:	b538      	push	{r3, r4, r5, lr}
 8019c56:	4b29      	ldr	r3, [pc, #164]	@ (8019cfc <__swsetup_r+0xa8>)
 8019c58:	4605      	mov	r5, r0
 8019c5a:	6818      	ldr	r0, [r3, #0]
 8019c5c:	460c      	mov	r4, r1
 8019c5e:	b118      	cbz	r0, 8019c68 <__swsetup_r+0x14>
 8019c60:	6a03      	ldr	r3, [r0, #32]
 8019c62:	b90b      	cbnz	r3, 8019c68 <__swsetup_r+0x14>
 8019c64:	f7ff fe66 	bl	8019934 <__sinit>
 8019c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c6c:	0719      	lsls	r1, r3, #28
 8019c6e:	d422      	bmi.n	8019cb6 <__swsetup_r+0x62>
 8019c70:	06da      	lsls	r2, r3, #27
 8019c72:	d407      	bmi.n	8019c84 <__swsetup_r+0x30>
 8019c74:	2209      	movs	r2, #9
 8019c76:	602a      	str	r2, [r5, #0]
 8019c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019c7c:	81a3      	strh	r3, [r4, #12]
 8019c7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019c82:	e033      	b.n	8019cec <__swsetup_r+0x98>
 8019c84:	0758      	lsls	r0, r3, #29
 8019c86:	d512      	bpl.n	8019cae <__swsetup_r+0x5a>
 8019c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c8a:	b141      	cbz	r1, 8019c9e <__swsetup_r+0x4a>
 8019c8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019c90:	4299      	cmp	r1, r3
 8019c92:	d002      	beq.n	8019c9a <__swsetup_r+0x46>
 8019c94:	4628      	mov	r0, r5
 8019c96:	f000 f95f 	bl	8019f58 <_free_r>
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8019c9e:	89a3      	ldrh	r3, [r4, #12]
 8019ca0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019ca4:	81a3      	strh	r3, [r4, #12]
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	6063      	str	r3, [r4, #4]
 8019caa:	6923      	ldr	r3, [r4, #16]
 8019cac:	6023      	str	r3, [r4, #0]
 8019cae:	89a3      	ldrh	r3, [r4, #12]
 8019cb0:	f043 0308 	orr.w	r3, r3, #8
 8019cb4:	81a3      	strh	r3, [r4, #12]
 8019cb6:	6923      	ldr	r3, [r4, #16]
 8019cb8:	b94b      	cbnz	r3, 8019cce <__swsetup_r+0x7a>
 8019cba:	89a3      	ldrh	r3, [r4, #12]
 8019cbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019cc4:	d003      	beq.n	8019cce <__swsetup_r+0x7a>
 8019cc6:	4621      	mov	r1, r4
 8019cc8:	4628      	mov	r0, r5
 8019cca:	f000 fea3 	bl	801aa14 <__smakebuf_r>
 8019cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019cd2:	f013 0201 	ands.w	r2, r3, #1
 8019cd6:	d00a      	beq.n	8019cee <__swsetup_r+0x9a>
 8019cd8:	2200      	movs	r2, #0
 8019cda:	60a2      	str	r2, [r4, #8]
 8019cdc:	6962      	ldr	r2, [r4, #20]
 8019cde:	4252      	negs	r2, r2
 8019ce0:	61a2      	str	r2, [r4, #24]
 8019ce2:	6922      	ldr	r2, [r4, #16]
 8019ce4:	b942      	cbnz	r2, 8019cf8 <__swsetup_r+0xa4>
 8019ce6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019cea:	d1c5      	bne.n	8019c78 <__swsetup_r+0x24>
 8019cec:	bd38      	pop	{r3, r4, r5, pc}
 8019cee:	0799      	lsls	r1, r3, #30
 8019cf0:	bf58      	it	pl
 8019cf2:	6962      	ldrpl	r2, [r4, #20]
 8019cf4:	60a2      	str	r2, [r4, #8]
 8019cf6:	e7f4      	b.n	8019ce2 <__swsetup_r+0x8e>
 8019cf8:	2000      	movs	r0, #0
 8019cfa:	e7f7      	b.n	8019cec <__swsetup_r+0x98>
 8019cfc:	200009c0 	.word	0x200009c0

08019d00 <memcmp>:
 8019d00:	b510      	push	{r4, lr}
 8019d02:	3901      	subs	r1, #1
 8019d04:	4402      	add	r2, r0
 8019d06:	4290      	cmp	r0, r2
 8019d08:	d101      	bne.n	8019d0e <memcmp+0xe>
 8019d0a:	2000      	movs	r0, #0
 8019d0c:	e005      	b.n	8019d1a <memcmp+0x1a>
 8019d0e:	7803      	ldrb	r3, [r0, #0]
 8019d10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019d14:	42a3      	cmp	r3, r4
 8019d16:	d001      	beq.n	8019d1c <memcmp+0x1c>
 8019d18:	1b18      	subs	r0, r3, r4
 8019d1a:	bd10      	pop	{r4, pc}
 8019d1c:	3001      	adds	r0, #1
 8019d1e:	e7f2      	b.n	8019d06 <memcmp+0x6>

08019d20 <memmove>:
 8019d20:	4288      	cmp	r0, r1
 8019d22:	b510      	push	{r4, lr}
 8019d24:	eb01 0402 	add.w	r4, r1, r2
 8019d28:	d902      	bls.n	8019d30 <memmove+0x10>
 8019d2a:	4284      	cmp	r4, r0
 8019d2c:	4623      	mov	r3, r4
 8019d2e:	d807      	bhi.n	8019d40 <memmove+0x20>
 8019d30:	1e43      	subs	r3, r0, #1
 8019d32:	42a1      	cmp	r1, r4
 8019d34:	d008      	beq.n	8019d48 <memmove+0x28>
 8019d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019d3e:	e7f8      	b.n	8019d32 <memmove+0x12>
 8019d40:	4402      	add	r2, r0
 8019d42:	4601      	mov	r1, r0
 8019d44:	428a      	cmp	r2, r1
 8019d46:	d100      	bne.n	8019d4a <memmove+0x2a>
 8019d48:	bd10      	pop	{r4, pc}
 8019d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019d52:	e7f7      	b.n	8019d44 <memmove+0x24>

08019d54 <memset>:
 8019d54:	4402      	add	r2, r0
 8019d56:	4603      	mov	r3, r0
 8019d58:	4293      	cmp	r3, r2
 8019d5a:	d100      	bne.n	8019d5e <memset+0xa>
 8019d5c:	4770      	bx	lr
 8019d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8019d62:	e7f9      	b.n	8019d58 <memset+0x4>

08019d64 <strchr>:
 8019d64:	b2c9      	uxtb	r1, r1
 8019d66:	4603      	mov	r3, r0
 8019d68:	4618      	mov	r0, r3
 8019d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d6e:	b112      	cbz	r2, 8019d76 <strchr+0x12>
 8019d70:	428a      	cmp	r2, r1
 8019d72:	d1f9      	bne.n	8019d68 <strchr+0x4>
 8019d74:	4770      	bx	lr
 8019d76:	2900      	cmp	r1, #0
 8019d78:	bf18      	it	ne
 8019d7a:	2000      	movne	r0, #0
 8019d7c:	4770      	bx	lr

08019d7e <strncmp>:
 8019d7e:	b510      	push	{r4, lr}
 8019d80:	b16a      	cbz	r2, 8019d9e <strncmp+0x20>
 8019d82:	3901      	subs	r1, #1
 8019d84:	1884      	adds	r4, r0, r2
 8019d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019d8e:	429a      	cmp	r2, r3
 8019d90:	d103      	bne.n	8019d9a <strncmp+0x1c>
 8019d92:	42a0      	cmp	r0, r4
 8019d94:	d001      	beq.n	8019d9a <strncmp+0x1c>
 8019d96:	2a00      	cmp	r2, #0
 8019d98:	d1f5      	bne.n	8019d86 <strncmp+0x8>
 8019d9a:	1ad0      	subs	r0, r2, r3
 8019d9c:	bd10      	pop	{r4, pc}
 8019d9e:	4610      	mov	r0, r2
 8019da0:	e7fc      	b.n	8019d9c <strncmp+0x1e>

08019da2 <strstr>:
 8019da2:	780a      	ldrb	r2, [r1, #0]
 8019da4:	b570      	push	{r4, r5, r6, lr}
 8019da6:	b96a      	cbnz	r2, 8019dc4 <strstr+0x22>
 8019da8:	bd70      	pop	{r4, r5, r6, pc}
 8019daa:	429a      	cmp	r2, r3
 8019dac:	d109      	bne.n	8019dc2 <strstr+0x20>
 8019dae:	460c      	mov	r4, r1
 8019db0:	4605      	mov	r5, r0
 8019db2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d0f6      	beq.n	8019da8 <strstr+0x6>
 8019dba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019dbe:	429e      	cmp	r6, r3
 8019dc0:	d0f7      	beq.n	8019db2 <strstr+0x10>
 8019dc2:	3001      	adds	r0, #1
 8019dc4:	7803      	ldrb	r3, [r0, #0]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d1ef      	bne.n	8019daa <strstr+0x8>
 8019dca:	4618      	mov	r0, r3
 8019dcc:	e7ec      	b.n	8019da8 <strstr+0x6>
	...

08019dd0 <_close_r>:
 8019dd0:	b538      	push	{r3, r4, r5, lr}
 8019dd2:	4d06      	ldr	r5, [pc, #24]	@ (8019dec <_close_r+0x1c>)
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	4604      	mov	r4, r0
 8019dd8:	4608      	mov	r0, r1
 8019dda:	602b      	str	r3, [r5, #0]
 8019ddc:	f7e8 fd2e 	bl	800283c <_close>
 8019de0:	1c43      	adds	r3, r0, #1
 8019de2:	d102      	bne.n	8019dea <_close_r+0x1a>
 8019de4:	682b      	ldr	r3, [r5, #0]
 8019de6:	b103      	cbz	r3, 8019dea <_close_r+0x1a>
 8019de8:	6023      	str	r3, [r4, #0]
 8019dea:	bd38      	pop	{r3, r4, r5, pc}
 8019dec:	2000bb64 	.word	0x2000bb64

08019df0 <_lseek_r>:
 8019df0:	b538      	push	{r3, r4, r5, lr}
 8019df2:	4d07      	ldr	r5, [pc, #28]	@ (8019e10 <_lseek_r+0x20>)
 8019df4:	4604      	mov	r4, r0
 8019df6:	4608      	mov	r0, r1
 8019df8:	4611      	mov	r1, r2
 8019dfa:	2200      	movs	r2, #0
 8019dfc:	602a      	str	r2, [r5, #0]
 8019dfe:	461a      	mov	r2, r3
 8019e00:	f7e8 fd43 	bl	800288a <_lseek>
 8019e04:	1c43      	adds	r3, r0, #1
 8019e06:	d102      	bne.n	8019e0e <_lseek_r+0x1e>
 8019e08:	682b      	ldr	r3, [r5, #0]
 8019e0a:	b103      	cbz	r3, 8019e0e <_lseek_r+0x1e>
 8019e0c:	6023      	str	r3, [r4, #0]
 8019e0e:	bd38      	pop	{r3, r4, r5, pc}
 8019e10:	2000bb64 	.word	0x2000bb64

08019e14 <_read_r>:
 8019e14:	b538      	push	{r3, r4, r5, lr}
 8019e16:	4d07      	ldr	r5, [pc, #28]	@ (8019e34 <_read_r+0x20>)
 8019e18:	4604      	mov	r4, r0
 8019e1a:	4608      	mov	r0, r1
 8019e1c:	4611      	mov	r1, r2
 8019e1e:	2200      	movs	r2, #0
 8019e20:	602a      	str	r2, [r5, #0]
 8019e22:	461a      	mov	r2, r3
 8019e24:	f7e8 fcd1 	bl	80027ca <_read>
 8019e28:	1c43      	adds	r3, r0, #1
 8019e2a:	d102      	bne.n	8019e32 <_read_r+0x1e>
 8019e2c:	682b      	ldr	r3, [r5, #0]
 8019e2e:	b103      	cbz	r3, 8019e32 <_read_r+0x1e>
 8019e30:	6023      	str	r3, [r4, #0]
 8019e32:	bd38      	pop	{r3, r4, r5, pc}
 8019e34:	2000bb64 	.word	0x2000bb64

08019e38 <_sbrk_r>:
 8019e38:	b538      	push	{r3, r4, r5, lr}
 8019e3a:	4d06      	ldr	r5, [pc, #24]	@ (8019e54 <_sbrk_r+0x1c>)
 8019e3c:	2300      	movs	r3, #0
 8019e3e:	4604      	mov	r4, r0
 8019e40:	4608      	mov	r0, r1
 8019e42:	602b      	str	r3, [r5, #0]
 8019e44:	f7e8 fd2e 	bl	80028a4 <_sbrk>
 8019e48:	1c43      	adds	r3, r0, #1
 8019e4a:	d102      	bne.n	8019e52 <_sbrk_r+0x1a>
 8019e4c:	682b      	ldr	r3, [r5, #0]
 8019e4e:	b103      	cbz	r3, 8019e52 <_sbrk_r+0x1a>
 8019e50:	6023      	str	r3, [r4, #0]
 8019e52:	bd38      	pop	{r3, r4, r5, pc}
 8019e54:	2000bb64 	.word	0x2000bb64

08019e58 <_write_r>:
 8019e58:	b538      	push	{r3, r4, r5, lr}
 8019e5a:	4d07      	ldr	r5, [pc, #28]	@ (8019e78 <_write_r+0x20>)
 8019e5c:	4604      	mov	r4, r0
 8019e5e:	4608      	mov	r0, r1
 8019e60:	4611      	mov	r1, r2
 8019e62:	2200      	movs	r2, #0
 8019e64:	602a      	str	r2, [r5, #0]
 8019e66:	461a      	mov	r2, r3
 8019e68:	f7e8 fccc 	bl	8002804 <_write>
 8019e6c:	1c43      	adds	r3, r0, #1
 8019e6e:	d102      	bne.n	8019e76 <_write_r+0x1e>
 8019e70:	682b      	ldr	r3, [r5, #0]
 8019e72:	b103      	cbz	r3, 8019e76 <_write_r+0x1e>
 8019e74:	6023      	str	r3, [r4, #0]
 8019e76:	bd38      	pop	{r3, r4, r5, pc}
 8019e78:	2000bb64 	.word	0x2000bb64

08019e7c <__errno>:
 8019e7c:	4b01      	ldr	r3, [pc, #4]	@ (8019e84 <__errno+0x8>)
 8019e7e:	6818      	ldr	r0, [r3, #0]
 8019e80:	4770      	bx	lr
 8019e82:	bf00      	nop
 8019e84:	200009c0 	.word	0x200009c0

08019e88 <__libc_init_array>:
 8019e88:	b570      	push	{r4, r5, r6, lr}
 8019e8a:	4d0d      	ldr	r5, [pc, #52]	@ (8019ec0 <__libc_init_array+0x38>)
 8019e8c:	4c0d      	ldr	r4, [pc, #52]	@ (8019ec4 <__libc_init_array+0x3c>)
 8019e8e:	1b64      	subs	r4, r4, r5
 8019e90:	10a4      	asrs	r4, r4, #2
 8019e92:	2600      	movs	r6, #0
 8019e94:	42a6      	cmp	r6, r4
 8019e96:	d109      	bne.n	8019eac <__libc_init_array+0x24>
 8019e98:	4d0b      	ldr	r5, [pc, #44]	@ (8019ec8 <__libc_init_array+0x40>)
 8019e9a:	4c0c      	ldr	r4, [pc, #48]	@ (8019ecc <__libc_init_array+0x44>)
 8019e9c:	f001 f9d6 	bl	801b24c <_init>
 8019ea0:	1b64      	subs	r4, r4, r5
 8019ea2:	10a4      	asrs	r4, r4, #2
 8019ea4:	2600      	movs	r6, #0
 8019ea6:	42a6      	cmp	r6, r4
 8019ea8:	d105      	bne.n	8019eb6 <__libc_init_array+0x2e>
 8019eaa:	bd70      	pop	{r4, r5, r6, pc}
 8019eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8019eb0:	4798      	blx	r3
 8019eb2:	3601      	adds	r6, #1
 8019eb4:	e7ee      	b.n	8019e94 <__libc_init_array+0xc>
 8019eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019eba:	4798      	blx	r3
 8019ebc:	3601      	adds	r6, #1
 8019ebe:	e7f2      	b.n	8019ea6 <__libc_init_array+0x1e>
 8019ec0:	0801ccf0 	.word	0x0801ccf0
 8019ec4:	0801ccf0 	.word	0x0801ccf0
 8019ec8:	0801ccf0 	.word	0x0801ccf0
 8019ecc:	0801cd04 	.word	0x0801cd04

08019ed0 <__retarget_lock_init_recursive>:
 8019ed0:	4770      	bx	lr

08019ed2 <__retarget_lock_acquire_recursive>:
 8019ed2:	4770      	bx	lr

08019ed4 <__retarget_lock_release_recursive>:
 8019ed4:	4770      	bx	lr

08019ed6 <strcpy>:
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019edc:	f803 2b01 	strb.w	r2, [r3], #1
 8019ee0:	2a00      	cmp	r2, #0
 8019ee2:	d1f9      	bne.n	8019ed8 <strcpy+0x2>
 8019ee4:	4770      	bx	lr

08019ee6 <memcpy>:
 8019ee6:	440a      	add	r2, r1
 8019ee8:	4291      	cmp	r1, r2
 8019eea:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019eee:	d100      	bne.n	8019ef2 <memcpy+0xc>
 8019ef0:	4770      	bx	lr
 8019ef2:	b510      	push	{r4, lr}
 8019ef4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ef8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019efc:	4291      	cmp	r1, r2
 8019efe:	d1f9      	bne.n	8019ef4 <memcpy+0xe>
 8019f00:	bd10      	pop	{r4, pc}
	...

08019f04 <__assert_func>:
 8019f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019f06:	4614      	mov	r4, r2
 8019f08:	461a      	mov	r2, r3
 8019f0a:	4b09      	ldr	r3, [pc, #36]	@ (8019f30 <__assert_func+0x2c>)
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	4605      	mov	r5, r0
 8019f10:	68d8      	ldr	r0, [r3, #12]
 8019f12:	b954      	cbnz	r4, 8019f2a <__assert_func+0x26>
 8019f14:	4b07      	ldr	r3, [pc, #28]	@ (8019f34 <__assert_func+0x30>)
 8019f16:	461c      	mov	r4, r3
 8019f18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019f1c:	9100      	str	r1, [sp, #0]
 8019f1e:	462b      	mov	r3, r5
 8019f20:	4905      	ldr	r1, [pc, #20]	@ (8019f38 <__assert_func+0x34>)
 8019f22:	f000 fd3f 	bl	801a9a4 <fiprintf>
 8019f26:	f000 fdd3 	bl	801aad0 <abort>
 8019f2a:	4b04      	ldr	r3, [pc, #16]	@ (8019f3c <__assert_func+0x38>)
 8019f2c:	e7f4      	b.n	8019f18 <__assert_func+0x14>
 8019f2e:	bf00      	nop
 8019f30:	200009c0 	.word	0x200009c0
 8019f34:	0801cc3d 	.word	0x0801cc3d
 8019f38:	0801cc0f 	.word	0x0801cc0f
 8019f3c:	0801cc02 	.word	0x0801cc02

08019f40 <__env_lock>:
 8019f40:	4801      	ldr	r0, [pc, #4]	@ (8019f48 <__env_lock+0x8>)
 8019f42:	f7ff bfc6 	b.w	8019ed2 <__retarget_lock_acquire_recursive>
 8019f46:	bf00      	nop
 8019f48:	2000bb68 	.word	0x2000bb68

08019f4c <__env_unlock>:
 8019f4c:	4801      	ldr	r0, [pc, #4]	@ (8019f54 <__env_unlock+0x8>)
 8019f4e:	f7ff bfc1 	b.w	8019ed4 <__retarget_lock_release_recursive>
 8019f52:	bf00      	nop
 8019f54:	2000bb68 	.word	0x2000bb68

08019f58 <_free_r>:
 8019f58:	b538      	push	{r3, r4, r5, lr}
 8019f5a:	4605      	mov	r5, r0
 8019f5c:	2900      	cmp	r1, #0
 8019f5e:	d041      	beq.n	8019fe4 <_free_r+0x8c>
 8019f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f64:	1f0c      	subs	r4, r1, #4
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	bfb8      	it	lt
 8019f6a:	18e4      	addlt	r4, r4, r3
 8019f6c:	f7ff fb30 	bl	80195d0 <__malloc_lock>
 8019f70:	4a1d      	ldr	r2, [pc, #116]	@ (8019fe8 <_free_r+0x90>)
 8019f72:	6813      	ldr	r3, [r2, #0]
 8019f74:	b933      	cbnz	r3, 8019f84 <_free_r+0x2c>
 8019f76:	6063      	str	r3, [r4, #4]
 8019f78:	6014      	str	r4, [r2, #0]
 8019f7a:	4628      	mov	r0, r5
 8019f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f80:	f7ff bb2c 	b.w	80195dc <__malloc_unlock>
 8019f84:	42a3      	cmp	r3, r4
 8019f86:	d908      	bls.n	8019f9a <_free_r+0x42>
 8019f88:	6820      	ldr	r0, [r4, #0]
 8019f8a:	1821      	adds	r1, r4, r0
 8019f8c:	428b      	cmp	r3, r1
 8019f8e:	bf01      	itttt	eq
 8019f90:	6819      	ldreq	r1, [r3, #0]
 8019f92:	685b      	ldreq	r3, [r3, #4]
 8019f94:	1809      	addeq	r1, r1, r0
 8019f96:	6021      	streq	r1, [r4, #0]
 8019f98:	e7ed      	b.n	8019f76 <_free_r+0x1e>
 8019f9a:	461a      	mov	r2, r3
 8019f9c:	685b      	ldr	r3, [r3, #4]
 8019f9e:	b10b      	cbz	r3, 8019fa4 <_free_r+0x4c>
 8019fa0:	42a3      	cmp	r3, r4
 8019fa2:	d9fa      	bls.n	8019f9a <_free_r+0x42>
 8019fa4:	6811      	ldr	r1, [r2, #0]
 8019fa6:	1850      	adds	r0, r2, r1
 8019fa8:	42a0      	cmp	r0, r4
 8019faa:	d10b      	bne.n	8019fc4 <_free_r+0x6c>
 8019fac:	6820      	ldr	r0, [r4, #0]
 8019fae:	4401      	add	r1, r0
 8019fb0:	1850      	adds	r0, r2, r1
 8019fb2:	4283      	cmp	r3, r0
 8019fb4:	6011      	str	r1, [r2, #0]
 8019fb6:	d1e0      	bne.n	8019f7a <_free_r+0x22>
 8019fb8:	6818      	ldr	r0, [r3, #0]
 8019fba:	685b      	ldr	r3, [r3, #4]
 8019fbc:	6053      	str	r3, [r2, #4]
 8019fbe:	4408      	add	r0, r1
 8019fc0:	6010      	str	r0, [r2, #0]
 8019fc2:	e7da      	b.n	8019f7a <_free_r+0x22>
 8019fc4:	d902      	bls.n	8019fcc <_free_r+0x74>
 8019fc6:	230c      	movs	r3, #12
 8019fc8:	602b      	str	r3, [r5, #0]
 8019fca:	e7d6      	b.n	8019f7a <_free_r+0x22>
 8019fcc:	6820      	ldr	r0, [r4, #0]
 8019fce:	1821      	adds	r1, r4, r0
 8019fd0:	428b      	cmp	r3, r1
 8019fd2:	bf04      	itt	eq
 8019fd4:	6819      	ldreq	r1, [r3, #0]
 8019fd6:	685b      	ldreq	r3, [r3, #4]
 8019fd8:	6063      	str	r3, [r4, #4]
 8019fda:	bf04      	itt	eq
 8019fdc:	1809      	addeq	r1, r1, r0
 8019fde:	6021      	streq	r1, [r4, #0]
 8019fe0:	6054      	str	r4, [r2, #4]
 8019fe2:	e7ca      	b.n	8019f7a <_free_r+0x22>
 8019fe4:	bd38      	pop	{r3, r4, r5, pc}
 8019fe6:	bf00      	nop
 8019fe8:	2000ba24 	.word	0x2000ba24

08019fec <_malloc_usable_size_r>:
 8019fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ff0:	1f18      	subs	r0, r3, #4
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	bfbc      	itt	lt
 8019ff6:	580b      	ldrlt	r3, [r1, r0]
 8019ff8:	18c0      	addlt	r0, r0, r3
 8019ffa:	4770      	bx	lr

08019ffc <__ssputs_r>:
 8019ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a000:	688e      	ldr	r6, [r1, #8]
 801a002:	461f      	mov	r7, r3
 801a004:	42be      	cmp	r6, r7
 801a006:	680b      	ldr	r3, [r1, #0]
 801a008:	4682      	mov	sl, r0
 801a00a:	460c      	mov	r4, r1
 801a00c:	4690      	mov	r8, r2
 801a00e:	d82d      	bhi.n	801a06c <__ssputs_r+0x70>
 801a010:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a014:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a018:	d026      	beq.n	801a068 <__ssputs_r+0x6c>
 801a01a:	6965      	ldr	r5, [r4, #20]
 801a01c:	6909      	ldr	r1, [r1, #16]
 801a01e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a022:	eba3 0901 	sub.w	r9, r3, r1
 801a026:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a02a:	1c7b      	adds	r3, r7, #1
 801a02c:	444b      	add	r3, r9
 801a02e:	106d      	asrs	r5, r5, #1
 801a030:	429d      	cmp	r5, r3
 801a032:	bf38      	it	cc
 801a034:	461d      	movcc	r5, r3
 801a036:	0553      	lsls	r3, r2, #21
 801a038:	d527      	bpl.n	801a08a <__ssputs_r+0x8e>
 801a03a:	4629      	mov	r1, r5
 801a03c:	f7ff fa48 	bl	80194d0 <_malloc_r>
 801a040:	4606      	mov	r6, r0
 801a042:	b360      	cbz	r0, 801a09e <__ssputs_r+0xa2>
 801a044:	6921      	ldr	r1, [r4, #16]
 801a046:	464a      	mov	r2, r9
 801a048:	f7ff ff4d 	bl	8019ee6 <memcpy>
 801a04c:	89a3      	ldrh	r3, [r4, #12]
 801a04e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a056:	81a3      	strh	r3, [r4, #12]
 801a058:	6126      	str	r6, [r4, #16]
 801a05a:	6165      	str	r5, [r4, #20]
 801a05c:	444e      	add	r6, r9
 801a05e:	eba5 0509 	sub.w	r5, r5, r9
 801a062:	6026      	str	r6, [r4, #0]
 801a064:	60a5      	str	r5, [r4, #8]
 801a066:	463e      	mov	r6, r7
 801a068:	42be      	cmp	r6, r7
 801a06a:	d900      	bls.n	801a06e <__ssputs_r+0x72>
 801a06c:	463e      	mov	r6, r7
 801a06e:	6820      	ldr	r0, [r4, #0]
 801a070:	4632      	mov	r2, r6
 801a072:	4641      	mov	r1, r8
 801a074:	f7ff fe54 	bl	8019d20 <memmove>
 801a078:	68a3      	ldr	r3, [r4, #8]
 801a07a:	1b9b      	subs	r3, r3, r6
 801a07c:	60a3      	str	r3, [r4, #8]
 801a07e:	6823      	ldr	r3, [r4, #0]
 801a080:	4433      	add	r3, r6
 801a082:	6023      	str	r3, [r4, #0]
 801a084:	2000      	movs	r0, #0
 801a086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a08a:	462a      	mov	r2, r5
 801a08c:	f7ff fb20 	bl	80196d0 <_realloc_r>
 801a090:	4606      	mov	r6, r0
 801a092:	2800      	cmp	r0, #0
 801a094:	d1e0      	bne.n	801a058 <__ssputs_r+0x5c>
 801a096:	6921      	ldr	r1, [r4, #16]
 801a098:	4650      	mov	r0, sl
 801a09a:	f7ff ff5d 	bl	8019f58 <_free_r>
 801a09e:	230c      	movs	r3, #12
 801a0a0:	f8ca 3000 	str.w	r3, [sl]
 801a0a4:	89a3      	ldrh	r3, [r4, #12]
 801a0a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a0aa:	81a3      	strh	r3, [r4, #12]
 801a0ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a0b0:	e7e9      	b.n	801a086 <__ssputs_r+0x8a>
	...

0801a0b4 <_svfiprintf_r>:
 801a0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0b8:	4698      	mov	r8, r3
 801a0ba:	898b      	ldrh	r3, [r1, #12]
 801a0bc:	061b      	lsls	r3, r3, #24
 801a0be:	b09d      	sub	sp, #116	@ 0x74
 801a0c0:	4607      	mov	r7, r0
 801a0c2:	460d      	mov	r5, r1
 801a0c4:	4614      	mov	r4, r2
 801a0c6:	d510      	bpl.n	801a0ea <_svfiprintf_r+0x36>
 801a0c8:	690b      	ldr	r3, [r1, #16]
 801a0ca:	b973      	cbnz	r3, 801a0ea <_svfiprintf_r+0x36>
 801a0cc:	2140      	movs	r1, #64	@ 0x40
 801a0ce:	f7ff f9ff 	bl	80194d0 <_malloc_r>
 801a0d2:	6028      	str	r0, [r5, #0]
 801a0d4:	6128      	str	r0, [r5, #16]
 801a0d6:	b930      	cbnz	r0, 801a0e6 <_svfiprintf_r+0x32>
 801a0d8:	230c      	movs	r3, #12
 801a0da:	603b      	str	r3, [r7, #0]
 801a0dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a0e0:	b01d      	add	sp, #116	@ 0x74
 801a0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0e6:	2340      	movs	r3, #64	@ 0x40
 801a0e8:	616b      	str	r3, [r5, #20]
 801a0ea:	2300      	movs	r3, #0
 801a0ec:	9309      	str	r3, [sp, #36]	@ 0x24
 801a0ee:	2320      	movs	r3, #32
 801a0f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a0f4:	f8cd 800c 	str.w	r8, [sp, #12]
 801a0f8:	2330      	movs	r3, #48	@ 0x30
 801a0fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a298 <_svfiprintf_r+0x1e4>
 801a0fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a102:	f04f 0901 	mov.w	r9, #1
 801a106:	4623      	mov	r3, r4
 801a108:	469a      	mov	sl, r3
 801a10a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a10e:	b10a      	cbz	r2, 801a114 <_svfiprintf_r+0x60>
 801a110:	2a25      	cmp	r2, #37	@ 0x25
 801a112:	d1f9      	bne.n	801a108 <_svfiprintf_r+0x54>
 801a114:	ebba 0b04 	subs.w	fp, sl, r4
 801a118:	d00b      	beq.n	801a132 <_svfiprintf_r+0x7e>
 801a11a:	465b      	mov	r3, fp
 801a11c:	4622      	mov	r2, r4
 801a11e:	4629      	mov	r1, r5
 801a120:	4638      	mov	r0, r7
 801a122:	f7ff ff6b 	bl	8019ffc <__ssputs_r>
 801a126:	3001      	adds	r0, #1
 801a128:	f000 80a7 	beq.w	801a27a <_svfiprintf_r+0x1c6>
 801a12c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a12e:	445a      	add	r2, fp
 801a130:	9209      	str	r2, [sp, #36]	@ 0x24
 801a132:	f89a 3000 	ldrb.w	r3, [sl]
 801a136:	2b00      	cmp	r3, #0
 801a138:	f000 809f 	beq.w	801a27a <_svfiprintf_r+0x1c6>
 801a13c:	2300      	movs	r3, #0
 801a13e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a146:	f10a 0a01 	add.w	sl, sl, #1
 801a14a:	9304      	str	r3, [sp, #16]
 801a14c:	9307      	str	r3, [sp, #28]
 801a14e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a152:	931a      	str	r3, [sp, #104]	@ 0x68
 801a154:	4654      	mov	r4, sl
 801a156:	2205      	movs	r2, #5
 801a158:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a15c:	484e      	ldr	r0, [pc, #312]	@ (801a298 <_svfiprintf_r+0x1e4>)
 801a15e:	f7e6 f877 	bl	8000250 <memchr>
 801a162:	9a04      	ldr	r2, [sp, #16]
 801a164:	b9d8      	cbnz	r0, 801a19e <_svfiprintf_r+0xea>
 801a166:	06d0      	lsls	r0, r2, #27
 801a168:	bf44      	itt	mi
 801a16a:	2320      	movmi	r3, #32
 801a16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a170:	0711      	lsls	r1, r2, #28
 801a172:	bf44      	itt	mi
 801a174:	232b      	movmi	r3, #43	@ 0x2b
 801a176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a17a:	f89a 3000 	ldrb.w	r3, [sl]
 801a17e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a180:	d015      	beq.n	801a1ae <_svfiprintf_r+0xfa>
 801a182:	9a07      	ldr	r2, [sp, #28]
 801a184:	4654      	mov	r4, sl
 801a186:	2000      	movs	r0, #0
 801a188:	f04f 0c0a 	mov.w	ip, #10
 801a18c:	4621      	mov	r1, r4
 801a18e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a192:	3b30      	subs	r3, #48	@ 0x30
 801a194:	2b09      	cmp	r3, #9
 801a196:	d94b      	bls.n	801a230 <_svfiprintf_r+0x17c>
 801a198:	b1b0      	cbz	r0, 801a1c8 <_svfiprintf_r+0x114>
 801a19a:	9207      	str	r2, [sp, #28]
 801a19c:	e014      	b.n	801a1c8 <_svfiprintf_r+0x114>
 801a19e:	eba0 0308 	sub.w	r3, r0, r8
 801a1a2:	fa09 f303 	lsl.w	r3, r9, r3
 801a1a6:	4313      	orrs	r3, r2
 801a1a8:	9304      	str	r3, [sp, #16]
 801a1aa:	46a2      	mov	sl, r4
 801a1ac:	e7d2      	b.n	801a154 <_svfiprintf_r+0xa0>
 801a1ae:	9b03      	ldr	r3, [sp, #12]
 801a1b0:	1d19      	adds	r1, r3, #4
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	9103      	str	r1, [sp, #12]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	bfbb      	ittet	lt
 801a1ba:	425b      	neglt	r3, r3
 801a1bc:	f042 0202 	orrlt.w	r2, r2, #2
 801a1c0:	9307      	strge	r3, [sp, #28]
 801a1c2:	9307      	strlt	r3, [sp, #28]
 801a1c4:	bfb8      	it	lt
 801a1c6:	9204      	strlt	r2, [sp, #16]
 801a1c8:	7823      	ldrb	r3, [r4, #0]
 801a1ca:	2b2e      	cmp	r3, #46	@ 0x2e
 801a1cc:	d10a      	bne.n	801a1e4 <_svfiprintf_r+0x130>
 801a1ce:	7863      	ldrb	r3, [r4, #1]
 801a1d0:	2b2a      	cmp	r3, #42	@ 0x2a
 801a1d2:	d132      	bne.n	801a23a <_svfiprintf_r+0x186>
 801a1d4:	9b03      	ldr	r3, [sp, #12]
 801a1d6:	1d1a      	adds	r2, r3, #4
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	9203      	str	r2, [sp, #12]
 801a1dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a1e0:	3402      	adds	r4, #2
 801a1e2:	9305      	str	r3, [sp, #20]
 801a1e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a2a8 <_svfiprintf_r+0x1f4>
 801a1e8:	7821      	ldrb	r1, [r4, #0]
 801a1ea:	2203      	movs	r2, #3
 801a1ec:	4650      	mov	r0, sl
 801a1ee:	f7e6 f82f 	bl	8000250 <memchr>
 801a1f2:	b138      	cbz	r0, 801a204 <_svfiprintf_r+0x150>
 801a1f4:	9b04      	ldr	r3, [sp, #16]
 801a1f6:	eba0 000a 	sub.w	r0, r0, sl
 801a1fa:	2240      	movs	r2, #64	@ 0x40
 801a1fc:	4082      	lsls	r2, r0
 801a1fe:	4313      	orrs	r3, r2
 801a200:	3401      	adds	r4, #1
 801a202:	9304      	str	r3, [sp, #16]
 801a204:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a208:	4824      	ldr	r0, [pc, #144]	@ (801a29c <_svfiprintf_r+0x1e8>)
 801a20a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a20e:	2206      	movs	r2, #6
 801a210:	f7e6 f81e 	bl	8000250 <memchr>
 801a214:	2800      	cmp	r0, #0
 801a216:	d036      	beq.n	801a286 <_svfiprintf_r+0x1d2>
 801a218:	4b21      	ldr	r3, [pc, #132]	@ (801a2a0 <_svfiprintf_r+0x1ec>)
 801a21a:	bb1b      	cbnz	r3, 801a264 <_svfiprintf_r+0x1b0>
 801a21c:	9b03      	ldr	r3, [sp, #12]
 801a21e:	3307      	adds	r3, #7
 801a220:	f023 0307 	bic.w	r3, r3, #7
 801a224:	3308      	adds	r3, #8
 801a226:	9303      	str	r3, [sp, #12]
 801a228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a22a:	4433      	add	r3, r6
 801a22c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a22e:	e76a      	b.n	801a106 <_svfiprintf_r+0x52>
 801a230:	fb0c 3202 	mla	r2, ip, r2, r3
 801a234:	460c      	mov	r4, r1
 801a236:	2001      	movs	r0, #1
 801a238:	e7a8      	b.n	801a18c <_svfiprintf_r+0xd8>
 801a23a:	2300      	movs	r3, #0
 801a23c:	3401      	adds	r4, #1
 801a23e:	9305      	str	r3, [sp, #20]
 801a240:	4619      	mov	r1, r3
 801a242:	f04f 0c0a 	mov.w	ip, #10
 801a246:	4620      	mov	r0, r4
 801a248:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a24c:	3a30      	subs	r2, #48	@ 0x30
 801a24e:	2a09      	cmp	r2, #9
 801a250:	d903      	bls.n	801a25a <_svfiprintf_r+0x1a6>
 801a252:	2b00      	cmp	r3, #0
 801a254:	d0c6      	beq.n	801a1e4 <_svfiprintf_r+0x130>
 801a256:	9105      	str	r1, [sp, #20]
 801a258:	e7c4      	b.n	801a1e4 <_svfiprintf_r+0x130>
 801a25a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a25e:	4604      	mov	r4, r0
 801a260:	2301      	movs	r3, #1
 801a262:	e7f0      	b.n	801a246 <_svfiprintf_r+0x192>
 801a264:	ab03      	add	r3, sp, #12
 801a266:	9300      	str	r3, [sp, #0]
 801a268:	462a      	mov	r2, r5
 801a26a:	4b0e      	ldr	r3, [pc, #56]	@ (801a2a4 <_svfiprintf_r+0x1f0>)
 801a26c:	a904      	add	r1, sp, #16
 801a26e:	4638      	mov	r0, r7
 801a270:	f3af 8000 	nop.w
 801a274:	1c42      	adds	r2, r0, #1
 801a276:	4606      	mov	r6, r0
 801a278:	d1d6      	bne.n	801a228 <_svfiprintf_r+0x174>
 801a27a:	89ab      	ldrh	r3, [r5, #12]
 801a27c:	065b      	lsls	r3, r3, #25
 801a27e:	f53f af2d 	bmi.w	801a0dc <_svfiprintf_r+0x28>
 801a282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a284:	e72c      	b.n	801a0e0 <_svfiprintf_r+0x2c>
 801a286:	ab03      	add	r3, sp, #12
 801a288:	9300      	str	r3, [sp, #0]
 801a28a:	462a      	mov	r2, r5
 801a28c:	4b05      	ldr	r3, [pc, #20]	@ (801a2a4 <_svfiprintf_r+0x1f0>)
 801a28e:	a904      	add	r1, sp, #16
 801a290:	4638      	mov	r0, r7
 801a292:	f000 f9bb 	bl	801a60c <_printf_i>
 801a296:	e7ed      	b.n	801a274 <_svfiprintf_r+0x1c0>
 801a298:	0801cc3e 	.word	0x0801cc3e
 801a29c:	0801cc48 	.word	0x0801cc48
 801a2a0:	00000000 	.word	0x00000000
 801a2a4:	08019ffd 	.word	0x08019ffd
 801a2a8:	0801cc44 	.word	0x0801cc44

0801a2ac <__sfputc_r>:
 801a2ac:	6893      	ldr	r3, [r2, #8]
 801a2ae:	3b01      	subs	r3, #1
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	b410      	push	{r4}
 801a2b4:	6093      	str	r3, [r2, #8]
 801a2b6:	da08      	bge.n	801a2ca <__sfputc_r+0x1e>
 801a2b8:	6994      	ldr	r4, [r2, #24]
 801a2ba:	42a3      	cmp	r3, r4
 801a2bc:	db01      	blt.n	801a2c2 <__sfputc_r+0x16>
 801a2be:	290a      	cmp	r1, #10
 801a2c0:	d103      	bne.n	801a2ca <__sfputc_r+0x1e>
 801a2c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2c6:	f7ff bc87 	b.w	8019bd8 <__swbuf_r>
 801a2ca:	6813      	ldr	r3, [r2, #0]
 801a2cc:	1c58      	adds	r0, r3, #1
 801a2ce:	6010      	str	r0, [r2, #0]
 801a2d0:	7019      	strb	r1, [r3, #0]
 801a2d2:	4608      	mov	r0, r1
 801a2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2d8:	4770      	bx	lr

0801a2da <__sfputs_r>:
 801a2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2dc:	4606      	mov	r6, r0
 801a2de:	460f      	mov	r7, r1
 801a2e0:	4614      	mov	r4, r2
 801a2e2:	18d5      	adds	r5, r2, r3
 801a2e4:	42ac      	cmp	r4, r5
 801a2e6:	d101      	bne.n	801a2ec <__sfputs_r+0x12>
 801a2e8:	2000      	movs	r0, #0
 801a2ea:	e007      	b.n	801a2fc <__sfputs_r+0x22>
 801a2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2f0:	463a      	mov	r2, r7
 801a2f2:	4630      	mov	r0, r6
 801a2f4:	f7ff ffda 	bl	801a2ac <__sfputc_r>
 801a2f8:	1c43      	adds	r3, r0, #1
 801a2fa:	d1f3      	bne.n	801a2e4 <__sfputs_r+0xa>
 801a2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a300 <_vfiprintf_r>:
 801a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a304:	460d      	mov	r5, r1
 801a306:	b09d      	sub	sp, #116	@ 0x74
 801a308:	4614      	mov	r4, r2
 801a30a:	4698      	mov	r8, r3
 801a30c:	4606      	mov	r6, r0
 801a30e:	b118      	cbz	r0, 801a318 <_vfiprintf_r+0x18>
 801a310:	6a03      	ldr	r3, [r0, #32]
 801a312:	b90b      	cbnz	r3, 801a318 <_vfiprintf_r+0x18>
 801a314:	f7ff fb0e 	bl	8019934 <__sinit>
 801a318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a31a:	07d9      	lsls	r1, r3, #31
 801a31c:	d405      	bmi.n	801a32a <_vfiprintf_r+0x2a>
 801a31e:	89ab      	ldrh	r3, [r5, #12]
 801a320:	059a      	lsls	r2, r3, #22
 801a322:	d402      	bmi.n	801a32a <_vfiprintf_r+0x2a>
 801a324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a326:	f7ff fdd4 	bl	8019ed2 <__retarget_lock_acquire_recursive>
 801a32a:	89ab      	ldrh	r3, [r5, #12]
 801a32c:	071b      	lsls	r3, r3, #28
 801a32e:	d501      	bpl.n	801a334 <_vfiprintf_r+0x34>
 801a330:	692b      	ldr	r3, [r5, #16]
 801a332:	b99b      	cbnz	r3, 801a35c <_vfiprintf_r+0x5c>
 801a334:	4629      	mov	r1, r5
 801a336:	4630      	mov	r0, r6
 801a338:	f7ff fc8c 	bl	8019c54 <__swsetup_r>
 801a33c:	b170      	cbz	r0, 801a35c <_vfiprintf_r+0x5c>
 801a33e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a340:	07dc      	lsls	r4, r3, #31
 801a342:	d504      	bpl.n	801a34e <_vfiprintf_r+0x4e>
 801a344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a348:	b01d      	add	sp, #116	@ 0x74
 801a34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a34e:	89ab      	ldrh	r3, [r5, #12]
 801a350:	0598      	lsls	r0, r3, #22
 801a352:	d4f7      	bmi.n	801a344 <_vfiprintf_r+0x44>
 801a354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a356:	f7ff fdbd 	bl	8019ed4 <__retarget_lock_release_recursive>
 801a35a:	e7f3      	b.n	801a344 <_vfiprintf_r+0x44>
 801a35c:	2300      	movs	r3, #0
 801a35e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a360:	2320      	movs	r3, #32
 801a362:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a366:	f8cd 800c 	str.w	r8, [sp, #12]
 801a36a:	2330      	movs	r3, #48	@ 0x30
 801a36c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a51c <_vfiprintf_r+0x21c>
 801a370:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a374:	f04f 0901 	mov.w	r9, #1
 801a378:	4623      	mov	r3, r4
 801a37a:	469a      	mov	sl, r3
 801a37c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a380:	b10a      	cbz	r2, 801a386 <_vfiprintf_r+0x86>
 801a382:	2a25      	cmp	r2, #37	@ 0x25
 801a384:	d1f9      	bne.n	801a37a <_vfiprintf_r+0x7a>
 801a386:	ebba 0b04 	subs.w	fp, sl, r4
 801a38a:	d00b      	beq.n	801a3a4 <_vfiprintf_r+0xa4>
 801a38c:	465b      	mov	r3, fp
 801a38e:	4622      	mov	r2, r4
 801a390:	4629      	mov	r1, r5
 801a392:	4630      	mov	r0, r6
 801a394:	f7ff ffa1 	bl	801a2da <__sfputs_r>
 801a398:	3001      	adds	r0, #1
 801a39a:	f000 80a7 	beq.w	801a4ec <_vfiprintf_r+0x1ec>
 801a39e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a3a0:	445a      	add	r2, fp
 801a3a2:	9209      	str	r2, [sp, #36]	@ 0x24
 801a3a4:	f89a 3000 	ldrb.w	r3, [sl]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	f000 809f 	beq.w	801a4ec <_vfiprintf_r+0x1ec>
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a3b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a3b8:	f10a 0a01 	add.w	sl, sl, #1
 801a3bc:	9304      	str	r3, [sp, #16]
 801a3be:	9307      	str	r3, [sp, #28]
 801a3c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a3c4:	931a      	str	r3, [sp, #104]	@ 0x68
 801a3c6:	4654      	mov	r4, sl
 801a3c8:	2205      	movs	r2, #5
 801a3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3ce:	4853      	ldr	r0, [pc, #332]	@ (801a51c <_vfiprintf_r+0x21c>)
 801a3d0:	f7e5 ff3e 	bl	8000250 <memchr>
 801a3d4:	9a04      	ldr	r2, [sp, #16]
 801a3d6:	b9d8      	cbnz	r0, 801a410 <_vfiprintf_r+0x110>
 801a3d8:	06d1      	lsls	r1, r2, #27
 801a3da:	bf44      	itt	mi
 801a3dc:	2320      	movmi	r3, #32
 801a3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a3e2:	0713      	lsls	r3, r2, #28
 801a3e4:	bf44      	itt	mi
 801a3e6:	232b      	movmi	r3, #43	@ 0x2b
 801a3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a3ec:	f89a 3000 	ldrb.w	r3, [sl]
 801a3f0:	2b2a      	cmp	r3, #42	@ 0x2a
 801a3f2:	d015      	beq.n	801a420 <_vfiprintf_r+0x120>
 801a3f4:	9a07      	ldr	r2, [sp, #28]
 801a3f6:	4654      	mov	r4, sl
 801a3f8:	2000      	movs	r0, #0
 801a3fa:	f04f 0c0a 	mov.w	ip, #10
 801a3fe:	4621      	mov	r1, r4
 801a400:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a404:	3b30      	subs	r3, #48	@ 0x30
 801a406:	2b09      	cmp	r3, #9
 801a408:	d94b      	bls.n	801a4a2 <_vfiprintf_r+0x1a2>
 801a40a:	b1b0      	cbz	r0, 801a43a <_vfiprintf_r+0x13a>
 801a40c:	9207      	str	r2, [sp, #28]
 801a40e:	e014      	b.n	801a43a <_vfiprintf_r+0x13a>
 801a410:	eba0 0308 	sub.w	r3, r0, r8
 801a414:	fa09 f303 	lsl.w	r3, r9, r3
 801a418:	4313      	orrs	r3, r2
 801a41a:	9304      	str	r3, [sp, #16]
 801a41c:	46a2      	mov	sl, r4
 801a41e:	e7d2      	b.n	801a3c6 <_vfiprintf_r+0xc6>
 801a420:	9b03      	ldr	r3, [sp, #12]
 801a422:	1d19      	adds	r1, r3, #4
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	9103      	str	r1, [sp, #12]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	bfbb      	ittet	lt
 801a42c:	425b      	neglt	r3, r3
 801a42e:	f042 0202 	orrlt.w	r2, r2, #2
 801a432:	9307      	strge	r3, [sp, #28]
 801a434:	9307      	strlt	r3, [sp, #28]
 801a436:	bfb8      	it	lt
 801a438:	9204      	strlt	r2, [sp, #16]
 801a43a:	7823      	ldrb	r3, [r4, #0]
 801a43c:	2b2e      	cmp	r3, #46	@ 0x2e
 801a43e:	d10a      	bne.n	801a456 <_vfiprintf_r+0x156>
 801a440:	7863      	ldrb	r3, [r4, #1]
 801a442:	2b2a      	cmp	r3, #42	@ 0x2a
 801a444:	d132      	bne.n	801a4ac <_vfiprintf_r+0x1ac>
 801a446:	9b03      	ldr	r3, [sp, #12]
 801a448:	1d1a      	adds	r2, r3, #4
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	9203      	str	r2, [sp, #12]
 801a44e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a452:	3402      	adds	r4, #2
 801a454:	9305      	str	r3, [sp, #20]
 801a456:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a52c <_vfiprintf_r+0x22c>
 801a45a:	7821      	ldrb	r1, [r4, #0]
 801a45c:	2203      	movs	r2, #3
 801a45e:	4650      	mov	r0, sl
 801a460:	f7e5 fef6 	bl	8000250 <memchr>
 801a464:	b138      	cbz	r0, 801a476 <_vfiprintf_r+0x176>
 801a466:	9b04      	ldr	r3, [sp, #16]
 801a468:	eba0 000a 	sub.w	r0, r0, sl
 801a46c:	2240      	movs	r2, #64	@ 0x40
 801a46e:	4082      	lsls	r2, r0
 801a470:	4313      	orrs	r3, r2
 801a472:	3401      	adds	r4, #1
 801a474:	9304      	str	r3, [sp, #16]
 801a476:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a47a:	4829      	ldr	r0, [pc, #164]	@ (801a520 <_vfiprintf_r+0x220>)
 801a47c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a480:	2206      	movs	r2, #6
 801a482:	f7e5 fee5 	bl	8000250 <memchr>
 801a486:	2800      	cmp	r0, #0
 801a488:	d03f      	beq.n	801a50a <_vfiprintf_r+0x20a>
 801a48a:	4b26      	ldr	r3, [pc, #152]	@ (801a524 <_vfiprintf_r+0x224>)
 801a48c:	bb1b      	cbnz	r3, 801a4d6 <_vfiprintf_r+0x1d6>
 801a48e:	9b03      	ldr	r3, [sp, #12]
 801a490:	3307      	adds	r3, #7
 801a492:	f023 0307 	bic.w	r3, r3, #7
 801a496:	3308      	adds	r3, #8
 801a498:	9303      	str	r3, [sp, #12]
 801a49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a49c:	443b      	add	r3, r7
 801a49e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a4a0:	e76a      	b.n	801a378 <_vfiprintf_r+0x78>
 801a4a2:	fb0c 3202 	mla	r2, ip, r2, r3
 801a4a6:	460c      	mov	r4, r1
 801a4a8:	2001      	movs	r0, #1
 801a4aa:	e7a8      	b.n	801a3fe <_vfiprintf_r+0xfe>
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	3401      	adds	r4, #1
 801a4b0:	9305      	str	r3, [sp, #20]
 801a4b2:	4619      	mov	r1, r3
 801a4b4:	f04f 0c0a 	mov.w	ip, #10
 801a4b8:	4620      	mov	r0, r4
 801a4ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4be:	3a30      	subs	r2, #48	@ 0x30
 801a4c0:	2a09      	cmp	r2, #9
 801a4c2:	d903      	bls.n	801a4cc <_vfiprintf_r+0x1cc>
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d0c6      	beq.n	801a456 <_vfiprintf_r+0x156>
 801a4c8:	9105      	str	r1, [sp, #20]
 801a4ca:	e7c4      	b.n	801a456 <_vfiprintf_r+0x156>
 801a4cc:	fb0c 2101 	mla	r1, ip, r1, r2
 801a4d0:	4604      	mov	r4, r0
 801a4d2:	2301      	movs	r3, #1
 801a4d4:	e7f0      	b.n	801a4b8 <_vfiprintf_r+0x1b8>
 801a4d6:	ab03      	add	r3, sp, #12
 801a4d8:	9300      	str	r3, [sp, #0]
 801a4da:	462a      	mov	r2, r5
 801a4dc:	4b12      	ldr	r3, [pc, #72]	@ (801a528 <_vfiprintf_r+0x228>)
 801a4de:	a904      	add	r1, sp, #16
 801a4e0:	4630      	mov	r0, r6
 801a4e2:	f3af 8000 	nop.w
 801a4e6:	4607      	mov	r7, r0
 801a4e8:	1c78      	adds	r0, r7, #1
 801a4ea:	d1d6      	bne.n	801a49a <_vfiprintf_r+0x19a>
 801a4ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a4ee:	07d9      	lsls	r1, r3, #31
 801a4f0:	d405      	bmi.n	801a4fe <_vfiprintf_r+0x1fe>
 801a4f2:	89ab      	ldrh	r3, [r5, #12]
 801a4f4:	059a      	lsls	r2, r3, #22
 801a4f6:	d402      	bmi.n	801a4fe <_vfiprintf_r+0x1fe>
 801a4f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a4fa:	f7ff fceb 	bl	8019ed4 <__retarget_lock_release_recursive>
 801a4fe:	89ab      	ldrh	r3, [r5, #12]
 801a500:	065b      	lsls	r3, r3, #25
 801a502:	f53f af1f 	bmi.w	801a344 <_vfiprintf_r+0x44>
 801a506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a508:	e71e      	b.n	801a348 <_vfiprintf_r+0x48>
 801a50a:	ab03      	add	r3, sp, #12
 801a50c:	9300      	str	r3, [sp, #0]
 801a50e:	462a      	mov	r2, r5
 801a510:	4b05      	ldr	r3, [pc, #20]	@ (801a528 <_vfiprintf_r+0x228>)
 801a512:	a904      	add	r1, sp, #16
 801a514:	4630      	mov	r0, r6
 801a516:	f000 f879 	bl	801a60c <_printf_i>
 801a51a:	e7e4      	b.n	801a4e6 <_vfiprintf_r+0x1e6>
 801a51c:	0801cc3e 	.word	0x0801cc3e
 801a520:	0801cc48 	.word	0x0801cc48
 801a524:	00000000 	.word	0x00000000
 801a528:	0801a2db 	.word	0x0801a2db
 801a52c:	0801cc44 	.word	0x0801cc44

0801a530 <_printf_common>:
 801a530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a534:	4616      	mov	r6, r2
 801a536:	4698      	mov	r8, r3
 801a538:	688a      	ldr	r2, [r1, #8]
 801a53a:	690b      	ldr	r3, [r1, #16]
 801a53c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a540:	4293      	cmp	r3, r2
 801a542:	bfb8      	it	lt
 801a544:	4613      	movlt	r3, r2
 801a546:	6033      	str	r3, [r6, #0]
 801a548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a54c:	4607      	mov	r7, r0
 801a54e:	460c      	mov	r4, r1
 801a550:	b10a      	cbz	r2, 801a556 <_printf_common+0x26>
 801a552:	3301      	adds	r3, #1
 801a554:	6033      	str	r3, [r6, #0]
 801a556:	6823      	ldr	r3, [r4, #0]
 801a558:	0699      	lsls	r1, r3, #26
 801a55a:	bf42      	ittt	mi
 801a55c:	6833      	ldrmi	r3, [r6, #0]
 801a55e:	3302      	addmi	r3, #2
 801a560:	6033      	strmi	r3, [r6, #0]
 801a562:	6825      	ldr	r5, [r4, #0]
 801a564:	f015 0506 	ands.w	r5, r5, #6
 801a568:	d106      	bne.n	801a578 <_printf_common+0x48>
 801a56a:	f104 0a19 	add.w	sl, r4, #25
 801a56e:	68e3      	ldr	r3, [r4, #12]
 801a570:	6832      	ldr	r2, [r6, #0]
 801a572:	1a9b      	subs	r3, r3, r2
 801a574:	42ab      	cmp	r3, r5
 801a576:	dc26      	bgt.n	801a5c6 <_printf_common+0x96>
 801a578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a57c:	6822      	ldr	r2, [r4, #0]
 801a57e:	3b00      	subs	r3, #0
 801a580:	bf18      	it	ne
 801a582:	2301      	movne	r3, #1
 801a584:	0692      	lsls	r2, r2, #26
 801a586:	d42b      	bmi.n	801a5e0 <_printf_common+0xb0>
 801a588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a58c:	4641      	mov	r1, r8
 801a58e:	4638      	mov	r0, r7
 801a590:	47c8      	blx	r9
 801a592:	3001      	adds	r0, #1
 801a594:	d01e      	beq.n	801a5d4 <_printf_common+0xa4>
 801a596:	6823      	ldr	r3, [r4, #0]
 801a598:	6922      	ldr	r2, [r4, #16]
 801a59a:	f003 0306 	and.w	r3, r3, #6
 801a59e:	2b04      	cmp	r3, #4
 801a5a0:	bf02      	ittt	eq
 801a5a2:	68e5      	ldreq	r5, [r4, #12]
 801a5a4:	6833      	ldreq	r3, [r6, #0]
 801a5a6:	1aed      	subeq	r5, r5, r3
 801a5a8:	68a3      	ldr	r3, [r4, #8]
 801a5aa:	bf0c      	ite	eq
 801a5ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a5b0:	2500      	movne	r5, #0
 801a5b2:	4293      	cmp	r3, r2
 801a5b4:	bfc4      	itt	gt
 801a5b6:	1a9b      	subgt	r3, r3, r2
 801a5b8:	18ed      	addgt	r5, r5, r3
 801a5ba:	2600      	movs	r6, #0
 801a5bc:	341a      	adds	r4, #26
 801a5be:	42b5      	cmp	r5, r6
 801a5c0:	d11a      	bne.n	801a5f8 <_printf_common+0xc8>
 801a5c2:	2000      	movs	r0, #0
 801a5c4:	e008      	b.n	801a5d8 <_printf_common+0xa8>
 801a5c6:	2301      	movs	r3, #1
 801a5c8:	4652      	mov	r2, sl
 801a5ca:	4641      	mov	r1, r8
 801a5cc:	4638      	mov	r0, r7
 801a5ce:	47c8      	blx	r9
 801a5d0:	3001      	adds	r0, #1
 801a5d2:	d103      	bne.n	801a5dc <_printf_common+0xac>
 801a5d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5dc:	3501      	adds	r5, #1
 801a5de:	e7c6      	b.n	801a56e <_printf_common+0x3e>
 801a5e0:	18e1      	adds	r1, r4, r3
 801a5e2:	1c5a      	adds	r2, r3, #1
 801a5e4:	2030      	movs	r0, #48	@ 0x30
 801a5e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a5ea:	4422      	add	r2, r4
 801a5ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a5f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a5f4:	3302      	adds	r3, #2
 801a5f6:	e7c7      	b.n	801a588 <_printf_common+0x58>
 801a5f8:	2301      	movs	r3, #1
 801a5fa:	4622      	mov	r2, r4
 801a5fc:	4641      	mov	r1, r8
 801a5fe:	4638      	mov	r0, r7
 801a600:	47c8      	blx	r9
 801a602:	3001      	adds	r0, #1
 801a604:	d0e6      	beq.n	801a5d4 <_printf_common+0xa4>
 801a606:	3601      	adds	r6, #1
 801a608:	e7d9      	b.n	801a5be <_printf_common+0x8e>
	...

0801a60c <_printf_i>:
 801a60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a610:	7e0f      	ldrb	r7, [r1, #24]
 801a612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a614:	2f78      	cmp	r7, #120	@ 0x78
 801a616:	4691      	mov	r9, r2
 801a618:	4680      	mov	r8, r0
 801a61a:	460c      	mov	r4, r1
 801a61c:	469a      	mov	sl, r3
 801a61e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a622:	d807      	bhi.n	801a634 <_printf_i+0x28>
 801a624:	2f62      	cmp	r7, #98	@ 0x62
 801a626:	d80a      	bhi.n	801a63e <_printf_i+0x32>
 801a628:	2f00      	cmp	r7, #0
 801a62a:	f000 80d2 	beq.w	801a7d2 <_printf_i+0x1c6>
 801a62e:	2f58      	cmp	r7, #88	@ 0x58
 801a630:	f000 80b9 	beq.w	801a7a6 <_printf_i+0x19a>
 801a634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a63c:	e03a      	b.n	801a6b4 <_printf_i+0xa8>
 801a63e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a642:	2b15      	cmp	r3, #21
 801a644:	d8f6      	bhi.n	801a634 <_printf_i+0x28>
 801a646:	a101      	add	r1, pc, #4	@ (adr r1, 801a64c <_printf_i+0x40>)
 801a648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a64c:	0801a6a5 	.word	0x0801a6a5
 801a650:	0801a6b9 	.word	0x0801a6b9
 801a654:	0801a635 	.word	0x0801a635
 801a658:	0801a635 	.word	0x0801a635
 801a65c:	0801a635 	.word	0x0801a635
 801a660:	0801a635 	.word	0x0801a635
 801a664:	0801a6b9 	.word	0x0801a6b9
 801a668:	0801a635 	.word	0x0801a635
 801a66c:	0801a635 	.word	0x0801a635
 801a670:	0801a635 	.word	0x0801a635
 801a674:	0801a635 	.word	0x0801a635
 801a678:	0801a7b9 	.word	0x0801a7b9
 801a67c:	0801a6e3 	.word	0x0801a6e3
 801a680:	0801a773 	.word	0x0801a773
 801a684:	0801a635 	.word	0x0801a635
 801a688:	0801a635 	.word	0x0801a635
 801a68c:	0801a7db 	.word	0x0801a7db
 801a690:	0801a635 	.word	0x0801a635
 801a694:	0801a6e3 	.word	0x0801a6e3
 801a698:	0801a635 	.word	0x0801a635
 801a69c:	0801a635 	.word	0x0801a635
 801a6a0:	0801a77b 	.word	0x0801a77b
 801a6a4:	6833      	ldr	r3, [r6, #0]
 801a6a6:	1d1a      	adds	r2, r3, #4
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	6032      	str	r2, [r6, #0]
 801a6ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a6b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a6b4:	2301      	movs	r3, #1
 801a6b6:	e09d      	b.n	801a7f4 <_printf_i+0x1e8>
 801a6b8:	6833      	ldr	r3, [r6, #0]
 801a6ba:	6820      	ldr	r0, [r4, #0]
 801a6bc:	1d19      	adds	r1, r3, #4
 801a6be:	6031      	str	r1, [r6, #0]
 801a6c0:	0606      	lsls	r6, r0, #24
 801a6c2:	d501      	bpl.n	801a6c8 <_printf_i+0xbc>
 801a6c4:	681d      	ldr	r5, [r3, #0]
 801a6c6:	e003      	b.n	801a6d0 <_printf_i+0xc4>
 801a6c8:	0645      	lsls	r5, r0, #25
 801a6ca:	d5fb      	bpl.n	801a6c4 <_printf_i+0xb8>
 801a6cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a6d0:	2d00      	cmp	r5, #0
 801a6d2:	da03      	bge.n	801a6dc <_printf_i+0xd0>
 801a6d4:	232d      	movs	r3, #45	@ 0x2d
 801a6d6:	426d      	negs	r5, r5
 801a6d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a6dc:	4859      	ldr	r0, [pc, #356]	@ (801a844 <_printf_i+0x238>)
 801a6de:	230a      	movs	r3, #10
 801a6e0:	e011      	b.n	801a706 <_printf_i+0xfa>
 801a6e2:	6821      	ldr	r1, [r4, #0]
 801a6e4:	6833      	ldr	r3, [r6, #0]
 801a6e6:	0608      	lsls	r0, r1, #24
 801a6e8:	f853 5b04 	ldr.w	r5, [r3], #4
 801a6ec:	d402      	bmi.n	801a6f4 <_printf_i+0xe8>
 801a6ee:	0649      	lsls	r1, r1, #25
 801a6f0:	bf48      	it	mi
 801a6f2:	b2ad      	uxthmi	r5, r5
 801a6f4:	2f6f      	cmp	r7, #111	@ 0x6f
 801a6f6:	4853      	ldr	r0, [pc, #332]	@ (801a844 <_printf_i+0x238>)
 801a6f8:	6033      	str	r3, [r6, #0]
 801a6fa:	bf14      	ite	ne
 801a6fc:	230a      	movne	r3, #10
 801a6fe:	2308      	moveq	r3, #8
 801a700:	2100      	movs	r1, #0
 801a702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a706:	6866      	ldr	r6, [r4, #4]
 801a708:	60a6      	str	r6, [r4, #8]
 801a70a:	2e00      	cmp	r6, #0
 801a70c:	bfa2      	ittt	ge
 801a70e:	6821      	ldrge	r1, [r4, #0]
 801a710:	f021 0104 	bicge.w	r1, r1, #4
 801a714:	6021      	strge	r1, [r4, #0]
 801a716:	b90d      	cbnz	r5, 801a71c <_printf_i+0x110>
 801a718:	2e00      	cmp	r6, #0
 801a71a:	d04b      	beq.n	801a7b4 <_printf_i+0x1a8>
 801a71c:	4616      	mov	r6, r2
 801a71e:	fbb5 f1f3 	udiv	r1, r5, r3
 801a722:	fb03 5711 	mls	r7, r3, r1, r5
 801a726:	5dc7      	ldrb	r7, [r0, r7]
 801a728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a72c:	462f      	mov	r7, r5
 801a72e:	42bb      	cmp	r3, r7
 801a730:	460d      	mov	r5, r1
 801a732:	d9f4      	bls.n	801a71e <_printf_i+0x112>
 801a734:	2b08      	cmp	r3, #8
 801a736:	d10b      	bne.n	801a750 <_printf_i+0x144>
 801a738:	6823      	ldr	r3, [r4, #0]
 801a73a:	07df      	lsls	r7, r3, #31
 801a73c:	d508      	bpl.n	801a750 <_printf_i+0x144>
 801a73e:	6923      	ldr	r3, [r4, #16]
 801a740:	6861      	ldr	r1, [r4, #4]
 801a742:	4299      	cmp	r1, r3
 801a744:	bfde      	ittt	le
 801a746:	2330      	movle	r3, #48	@ 0x30
 801a748:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a74c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a750:	1b92      	subs	r2, r2, r6
 801a752:	6122      	str	r2, [r4, #16]
 801a754:	f8cd a000 	str.w	sl, [sp]
 801a758:	464b      	mov	r3, r9
 801a75a:	aa03      	add	r2, sp, #12
 801a75c:	4621      	mov	r1, r4
 801a75e:	4640      	mov	r0, r8
 801a760:	f7ff fee6 	bl	801a530 <_printf_common>
 801a764:	3001      	adds	r0, #1
 801a766:	d14a      	bne.n	801a7fe <_printf_i+0x1f2>
 801a768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a76c:	b004      	add	sp, #16
 801a76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a772:	6823      	ldr	r3, [r4, #0]
 801a774:	f043 0320 	orr.w	r3, r3, #32
 801a778:	6023      	str	r3, [r4, #0]
 801a77a:	4833      	ldr	r0, [pc, #204]	@ (801a848 <_printf_i+0x23c>)
 801a77c:	2778      	movs	r7, #120	@ 0x78
 801a77e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a782:	6823      	ldr	r3, [r4, #0]
 801a784:	6831      	ldr	r1, [r6, #0]
 801a786:	061f      	lsls	r7, r3, #24
 801a788:	f851 5b04 	ldr.w	r5, [r1], #4
 801a78c:	d402      	bmi.n	801a794 <_printf_i+0x188>
 801a78e:	065f      	lsls	r7, r3, #25
 801a790:	bf48      	it	mi
 801a792:	b2ad      	uxthmi	r5, r5
 801a794:	6031      	str	r1, [r6, #0]
 801a796:	07d9      	lsls	r1, r3, #31
 801a798:	bf44      	itt	mi
 801a79a:	f043 0320 	orrmi.w	r3, r3, #32
 801a79e:	6023      	strmi	r3, [r4, #0]
 801a7a0:	b11d      	cbz	r5, 801a7aa <_printf_i+0x19e>
 801a7a2:	2310      	movs	r3, #16
 801a7a4:	e7ac      	b.n	801a700 <_printf_i+0xf4>
 801a7a6:	4827      	ldr	r0, [pc, #156]	@ (801a844 <_printf_i+0x238>)
 801a7a8:	e7e9      	b.n	801a77e <_printf_i+0x172>
 801a7aa:	6823      	ldr	r3, [r4, #0]
 801a7ac:	f023 0320 	bic.w	r3, r3, #32
 801a7b0:	6023      	str	r3, [r4, #0]
 801a7b2:	e7f6      	b.n	801a7a2 <_printf_i+0x196>
 801a7b4:	4616      	mov	r6, r2
 801a7b6:	e7bd      	b.n	801a734 <_printf_i+0x128>
 801a7b8:	6833      	ldr	r3, [r6, #0]
 801a7ba:	6825      	ldr	r5, [r4, #0]
 801a7bc:	6961      	ldr	r1, [r4, #20]
 801a7be:	1d18      	adds	r0, r3, #4
 801a7c0:	6030      	str	r0, [r6, #0]
 801a7c2:	062e      	lsls	r6, r5, #24
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	d501      	bpl.n	801a7cc <_printf_i+0x1c0>
 801a7c8:	6019      	str	r1, [r3, #0]
 801a7ca:	e002      	b.n	801a7d2 <_printf_i+0x1c6>
 801a7cc:	0668      	lsls	r0, r5, #25
 801a7ce:	d5fb      	bpl.n	801a7c8 <_printf_i+0x1bc>
 801a7d0:	8019      	strh	r1, [r3, #0]
 801a7d2:	2300      	movs	r3, #0
 801a7d4:	6123      	str	r3, [r4, #16]
 801a7d6:	4616      	mov	r6, r2
 801a7d8:	e7bc      	b.n	801a754 <_printf_i+0x148>
 801a7da:	6833      	ldr	r3, [r6, #0]
 801a7dc:	1d1a      	adds	r2, r3, #4
 801a7de:	6032      	str	r2, [r6, #0]
 801a7e0:	681e      	ldr	r6, [r3, #0]
 801a7e2:	6862      	ldr	r2, [r4, #4]
 801a7e4:	2100      	movs	r1, #0
 801a7e6:	4630      	mov	r0, r6
 801a7e8:	f7e5 fd32 	bl	8000250 <memchr>
 801a7ec:	b108      	cbz	r0, 801a7f2 <_printf_i+0x1e6>
 801a7ee:	1b80      	subs	r0, r0, r6
 801a7f0:	6060      	str	r0, [r4, #4]
 801a7f2:	6863      	ldr	r3, [r4, #4]
 801a7f4:	6123      	str	r3, [r4, #16]
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a7fc:	e7aa      	b.n	801a754 <_printf_i+0x148>
 801a7fe:	6923      	ldr	r3, [r4, #16]
 801a800:	4632      	mov	r2, r6
 801a802:	4649      	mov	r1, r9
 801a804:	4640      	mov	r0, r8
 801a806:	47d0      	blx	sl
 801a808:	3001      	adds	r0, #1
 801a80a:	d0ad      	beq.n	801a768 <_printf_i+0x15c>
 801a80c:	6823      	ldr	r3, [r4, #0]
 801a80e:	079b      	lsls	r3, r3, #30
 801a810:	d413      	bmi.n	801a83a <_printf_i+0x22e>
 801a812:	68e0      	ldr	r0, [r4, #12]
 801a814:	9b03      	ldr	r3, [sp, #12]
 801a816:	4298      	cmp	r0, r3
 801a818:	bfb8      	it	lt
 801a81a:	4618      	movlt	r0, r3
 801a81c:	e7a6      	b.n	801a76c <_printf_i+0x160>
 801a81e:	2301      	movs	r3, #1
 801a820:	4632      	mov	r2, r6
 801a822:	4649      	mov	r1, r9
 801a824:	4640      	mov	r0, r8
 801a826:	47d0      	blx	sl
 801a828:	3001      	adds	r0, #1
 801a82a:	d09d      	beq.n	801a768 <_printf_i+0x15c>
 801a82c:	3501      	adds	r5, #1
 801a82e:	68e3      	ldr	r3, [r4, #12]
 801a830:	9903      	ldr	r1, [sp, #12]
 801a832:	1a5b      	subs	r3, r3, r1
 801a834:	42ab      	cmp	r3, r5
 801a836:	dcf2      	bgt.n	801a81e <_printf_i+0x212>
 801a838:	e7eb      	b.n	801a812 <_printf_i+0x206>
 801a83a:	2500      	movs	r5, #0
 801a83c:	f104 0619 	add.w	r6, r4, #25
 801a840:	e7f5      	b.n	801a82e <_printf_i+0x222>
 801a842:	bf00      	nop
 801a844:	0801cc4f 	.word	0x0801cc4f
 801a848:	0801cc60 	.word	0x0801cc60

0801a84c <__sflush_r>:
 801a84c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a854:	0716      	lsls	r6, r2, #28
 801a856:	4605      	mov	r5, r0
 801a858:	460c      	mov	r4, r1
 801a85a:	d454      	bmi.n	801a906 <__sflush_r+0xba>
 801a85c:	684b      	ldr	r3, [r1, #4]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	dc02      	bgt.n	801a868 <__sflush_r+0x1c>
 801a862:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a864:	2b00      	cmp	r3, #0
 801a866:	dd48      	ble.n	801a8fa <__sflush_r+0xae>
 801a868:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a86a:	2e00      	cmp	r6, #0
 801a86c:	d045      	beq.n	801a8fa <__sflush_r+0xae>
 801a86e:	2300      	movs	r3, #0
 801a870:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a874:	682f      	ldr	r7, [r5, #0]
 801a876:	6a21      	ldr	r1, [r4, #32]
 801a878:	602b      	str	r3, [r5, #0]
 801a87a:	d030      	beq.n	801a8de <__sflush_r+0x92>
 801a87c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a87e:	89a3      	ldrh	r3, [r4, #12]
 801a880:	0759      	lsls	r1, r3, #29
 801a882:	d505      	bpl.n	801a890 <__sflush_r+0x44>
 801a884:	6863      	ldr	r3, [r4, #4]
 801a886:	1ad2      	subs	r2, r2, r3
 801a888:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a88a:	b10b      	cbz	r3, 801a890 <__sflush_r+0x44>
 801a88c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a88e:	1ad2      	subs	r2, r2, r3
 801a890:	2300      	movs	r3, #0
 801a892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a894:	6a21      	ldr	r1, [r4, #32]
 801a896:	4628      	mov	r0, r5
 801a898:	47b0      	blx	r6
 801a89a:	1c43      	adds	r3, r0, #1
 801a89c:	89a3      	ldrh	r3, [r4, #12]
 801a89e:	d106      	bne.n	801a8ae <__sflush_r+0x62>
 801a8a0:	6829      	ldr	r1, [r5, #0]
 801a8a2:	291d      	cmp	r1, #29
 801a8a4:	d82b      	bhi.n	801a8fe <__sflush_r+0xb2>
 801a8a6:	4a2a      	ldr	r2, [pc, #168]	@ (801a950 <__sflush_r+0x104>)
 801a8a8:	410a      	asrs	r2, r1
 801a8aa:	07d6      	lsls	r6, r2, #31
 801a8ac:	d427      	bmi.n	801a8fe <__sflush_r+0xb2>
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	6062      	str	r2, [r4, #4]
 801a8b2:	04d9      	lsls	r1, r3, #19
 801a8b4:	6922      	ldr	r2, [r4, #16]
 801a8b6:	6022      	str	r2, [r4, #0]
 801a8b8:	d504      	bpl.n	801a8c4 <__sflush_r+0x78>
 801a8ba:	1c42      	adds	r2, r0, #1
 801a8bc:	d101      	bne.n	801a8c2 <__sflush_r+0x76>
 801a8be:	682b      	ldr	r3, [r5, #0]
 801a8c0:	b903      	cbnz	r3, 801a8c4 <__sflush_r+0x78>
 801a8c2:	6560      	str	r0, [r4, #84]	@ 0x54
 801a8c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a8c6:	602f      	str	r7, [r5, #0]
 801a8c8:	b1b9      	cbz	r1, 801a8fa <__sflush_r+0xae>
 801a8ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a8ce:	4299      	cmp	r1, r3
 801a8d0:	d002      	beq.n	801a8d8 <__sflush_r+0x8c>
 801a8d2:	4628      	mov	r0, r5
 801a8d4:	f7ff fb40 	bl	8019f58 <_free_r>
 801a8d8:	2300      	movs	r3, #0
 801a8da:	6363      	str	r3, [r4, #52]	@ 0x34
 801a8dc:	e00d      	b.n	801a8fa <__sflush_r+0xae>
 801a8de:	2301      	movs	r3, #1
 801a8e0:	4628      	mov	r0, r5
 801a8e2:	47b0      	blx	r6
 801a8e4:	4602      	mov	r2, r0
 801a8e6:	1c50      	adds	r0, r2, #1
 801a8e8:	d1c9      	bne.n	801a87e <__sflush_r+0x32>
 801a8ea:	682b      	ldr	r3, [r5, #0]
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d0c6      	beq.n	801a87e <__sflush_r+0x32>
 801a8f0:	2b1d      	cmp	r3, #29
 801a8f2:	d001      	beq.n	801a8f8 <__sflush_r+0xac>
 801a8f4:	2b16      	cmp	r3, #22
 801a8f6:	d11e      	bne.n	801a936 <__sflush_r+0xea>
 801a8f8:	602f      	str	r7, [r5, #0]
 801a8fa:	2000      	movs	r0, #0
 801a8fc:	e022      	b.n	801a944 <__sflush_r+0xf8>
 801a8fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a902:	b21b      	sxth	r3, r3
 801a904:	e01b      	b.n	801a93e <__sflush_r+0xf2>
 801a906:	690f      	ldr	r7, [r1, #16]
 801a908:	2f00      	cmp	r7, #0
 801a90a:	d0f6      	beq.n	801a8fa <__sflush_r+0xae>
 801a90c:	0793      	lsls	r3, r2, #30
 801a90e:	680e      	ldr	r6, [r1, #0]
 801a910:	bf08      	it	eq
 801a912:	694b      	ldreq	r3, [r1, #20]
 801a914:	600f      	str	r7, [r1, #0]
 801a916:	bf18      	it	ne
 801a918:	2300      	movne	r3, #0
 801a91a:	eba6 0807 	sub.w	r8, r6, r7
 801a91e:	608b      	str	r3, [r1, #8]
 801a920:	f1b8 0f00 	cmp.w	r8, #0
 801a924:	dde9      	ble.n	801a8fa <__sflush_r+0xae>
 801a926:	6a21      	ldr	r1, [r4, #32]
 801a928:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a92a:	4643      	mov	r3, r8
 801a92c:	463a      	mov	r2, r7
 801a92e:	4628      	mov	r0, r5
 801a930:	47b0      	blx	r6
 801a932:	2800      	cmp	r0, #0
 801a934:	dc08      	bgt.n	801a948 <__sflush_r+0xfc>
 801a936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a93e:	81a3      	strh	r3, [r4, #12]
 801a940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a948:	4407      	add	r7, r0
 801a94a:	eba8 0800 	sub.w	r8, r8, r0
 801a94e:	e7e7      	b.n	801a920 <__sflush_r+0xd4>
 801a950:	dfbffffe 	.word	0xdfbffffe

0801a954 <_fflush_r>:
 801a954:	b538      	push	{r3, r4, r5, lr}
 801a956:	690b      	ldr	r3, [r1, #16]
 801a958:	4605      	mov	r5, r0
 801a95a:	460c      	mov	r4, r1
 801a95c:	b913      	cbnz	r3, 801a964 <_fflush_r+0x10>
 801a95e:	2500      	movs	r5, #0
 801a960:	4628      	mov	r0, r5
 801a962:	bd38      	pop	{r3, r4, r5, pc}
 801a964:	b118      	cbz	r0, 801a96e <_fflush_r+0x1a>
 801a966:	6a03      	ldr	r3, [r0, #32]
 801a968:	b90b      	cbnz	r3, 801a96e <_fflush_r+0x1a>
 801a96a:	f7fe ffe3 	bl	8019934 <__sinit>
 801a96e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d0f3      	beq.n	801a95e <_fflush_r+0xa>
 801a976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a978:	07d0      	lsls	r0, r2, #31
 801a97a:	d404      	bmi.n	801a986 <_fflush_r+0x32>
 801a97c:	0599      	lsls	r1, r3, #22
 801a97e:	d402      	bmi.n	801a986 <_fflush_r+0x32>
 801a980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a982:	f7ff faa6 	bl	8019ed2 <__retarget_lock_acquire_recursive>
 801a986:	4628      	mov	r0, r5
 801a988:	4621      	mov	r1, r4
 801a98a:	f7ff ff5f 	bl	801a84c <__sflush_r>
 801a98e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a990:	07da      	lsls	r2, r3, #31
 801a992:	4605      	mov	r5, r0
 801a994:	d4e4      	bmi.n	801a960 <_fflush_r+0xc>
 801a996:	89a3      	ldrh	r3, [r4, #12]
 801a998:	059b      	lsls	r3, r3, #22
 801a99a:	d4e1      	bmi.n	801a960 <_fflush_r+0xc>
 801a99c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a99e:	f7ff fa99 	bl	8019ed4 <__retarget_lock_release_recursive>
 801a9a2:	e7dd      	b.n	801a960 <_fflush_r+0xc>

0801a9a4 <fiprintf>:
 801a9a4:	b40e      	push	{r1, r2, r3}
 801a9a6:	b503      	push	{r0, r1, lr}
 801a9a8:	4601      	mov	r1, r0
 801a9aa:	ab03      	add	r3, sp, #12
 801a9ac:	4805      	ldr	r0, [pc, #20]	@ (801a9c4 <fiprintf+0x20>)
 801a9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9b2:	6800      	ldr	r0, [r0, #0]
 801a9b4:	9301      	str	r3, [sp, #4]
 801a9b6:	f7ff fca3 	bl	801a300 <_vfiprintf_r>
 801a9ba:	b002      	add	sp, #8
 801a9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801a9c0:	b003      	add	sp, #12
 801a9c2:	4770      	bx	lr
 801a9c4:	200009c0 	.word	0x200009c0

0801a9c8 <__swhatbuf_r>:
 801a9c8:	b570      	push	{r4, r5, r6, lr}
 801a9ca:	460c      	mov	r4, r1
 801a9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9d0:	2900      	cmp	r1, #0
 801a9d2:	b096      	sub	sp, #88	@ 0x58
 801a9d4:	4615      	mov	r5, r2
 801a9d6:	461e      	mov	r6, r3
 801a9d8:	da0d      	bge.n	801a9f6 <__swhatbuf_r+0x2e>
 801a9da:	89a3      	ldrh	r3, [r4, #12]
 801a9dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a9e0:	f04f 0100 	mov.w	r1, #0
 801a9e4:	bf14      	ite	ne
 801a9e6:	2340      	movne	r3, #64	@ 0x40
 801a9e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a9ec:	2000      	movs	r0, #0
 801a9ee:	6031      	str	r1, [r6, #0]
 801a9f0:	602b      	str	r3, [r5, #0]
 801a9f2:	b016      	add	sp, #88	@ 0x58
 801a9f4:	bd70      	pop	{r4, r5, r6, pc}
 801a9f6:	466a      	mov	r2, sp
 801a9f8:	f000 f848 	bl	801aa8c <_fstat_r>
 801a9fc:	2800      	cmp	r0, #0
 801a9fe:	dbec      	blt.n	801a9da <__swhatbuf_r+0x12>
 801aa00:	9901      	ldr	r1, [sp, #4]
 801aa02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801aa06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801aa0a:	4259      	negs	r1, r3
 801aa0c:	4159      	adcs	r1, r3
 801aa0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801aa12:	e7eb      	b.n	801a9ec <__swhatbuf_r+0x24>

0801aa14 <__smakebuf_r>:
 801aa14:	898b      	ldrh	r3, [r1, #12]
 801aa16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aa18:	079d      	lsls	r5, r3, #30
 801aa1a:	4606      	mov	r6, r0
 801aa1c:	460c      	mov	r4, r1
 801aa1e:	d507      	bpl.n	801aa30 <__smakebuf_r+0x1c>
 801aa20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801aa24:	6023      	str	r3, [r4, #0]
 801aa26:	6123      	str	r3, [r4, #16]
 801aa28:	2301      	movs	r3, #1
 801aa2a:	6163      	str	r3, [r4, #20]
 801aa2c:	b003      	add	sp, #12
 801aa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa30:	ab01      	add	r3, sp, #4
 801aa32:	466a      	mov	r2, sp
 801aa34:	f7ff ffc8 	bl	801a9c8 <__swhatbuf_r>
 801aa38:	9f00      	ldr	r7, [sp, #0]
 801aa3a:	4605      	mov	r5, r0
 801aa3c:	4639      	mov	r1, r7
 801aa3e:	4630      	mov	r0, r6
 801aa40:	f7fe fd46 	bl	80194d0 <_malloc_r>
 801aa44:	b948      	cbnz	r0, 801aa5a <__smakebuf_r+0x46>
 801aa46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa4a:	059a      	lsls	r2, r3, #22
 801aa4c:	d4ee      	bmi.n	801aa2c <__smakebuf_r+0x18>
 801aa4e:	f023 0303 	bic.w	r3, r3, #3
 801aa52:	f043 0302 	orr.w	r3, r3, #2
 801aa56:	81a3      	strh	r3, [r4, #12]
 801aa58:	e7e2      	b.n	801aa20 <__smakebuf_r+0xc>
 801aa5a:	89a3      	ldrh	r3, [r4, #12]
 801aa5c:	6020      	str	r0, [r4, #0]
 801aa5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801aa62:	81a3      	strh	r3, [r4, #12]
 801aa64:	9b01      	ldr	r3, [sp, #4]
 801aa66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801aa6a:	b15b      	cbz	r3, 801aa84 <__smakebuf_r+0x70>
 801aa6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aa70:	4630      	mov	r0, r6
 801aa72:	f000 f81d 	bl	801aab0 <_isatty_r>
 801aa76:	b128      	cbz	r0, 801aa84 <__smakebuf_r+0x70>
 801aa78:	89a3      	ldrh	r3, [r4, #12]
 801aa7a:	f023 0303 	bic.w	r3, r3, #3
 801aa7e:	f043 0301 	orr.w	r3, r3, #1
 801aa82:	81a3      	strh	r3, [r4, #12]
 801aa84:	89a3      	ldrh	r3, [r4, #12]
 801aa86:	431d      	orrs	r5, r3
 801aa88:	81a5      	strh	r5, [r4, #12]
 801aa8a:	e7cf      	b.n	801aa2c <__smakebuf_r+0x18>

0801aa8c <_fstat_r>:
 801aa8c:	b538      	push	{r3, r4, r5, lr}
 801aa8e:	4d07      	ldr	r5, [pc, #28]	@ (801aaac <_fstat_r+0x20>)
 801aa90:	2300      	movs	r3, #0
 801aa92:	4604      	mov	r4, r0
 801aa94:	4608      	mov	r0, r1
 801aa96:	4611      	mov	r1, r2
 801aa98:	602b      	str	r3, [r5, #0]
 801aa9a:	f7e7 fedb 	bl	8002854 <_fstat>
 801aa9e:	1c43      	adds	r3, r0, #1
 801aaa0:	d102      	bne.n	801aaa8 <_fstat_r+0x1c>
 801aaa2:	682b      	ldr	r3, [r5, #0]
 801aaa4:	b103      	cbz	r3, 801aaa8 <_fstat_r+0x1c>
 801aaa6:	6023      	str	r3, [r4, #0]
 801aaa8:	bd38      	pop	{r3, r4, r5, pc}
 801aaaa:	bf00      	nop
 801aaac:	2000bb64 	.word	0x2000bb64

0801aab0 <_isatty_r>:
 801aab0:	b538      	push	{r3, r4, r5, lr}
 801aab2:	4d06      	ldr	r5, [pc, #24]	@ (801aacc <_isatty_r+0x1c>)
 801aab4:	2300      	movs	r3, #0
 801aab6:	4604      	mov	r4, r0
 801aab8:	4608      	mov	r0, r1
 801aaba:	602b      	str	r3, [r5, #0]
 801aabc:	f7e7 feda 	bl	8002874 <_isatty>
 801aac0:	1c43      	adds	r3, r0, #1
 801aac2:	d102      	bne.n	801aaca <_isatty_r+0x1a>
 801aac4:	682b      	ldr	r3, [r5, #0]
 801aac6:	b103      	cbz	r3, 801aaca <_isatty_r+0x1a>
 801aac8:	6023      	str	r3, [r4, #0]
 801aaca:	bd38      	pop	{r3, r4, r5, pc}
 801aacc:	2000bb64 	.word	0x2000bb64

0801aad0 <abort>:
 801aad0:	b508      	push	{r3, lr}
 801aad2:	2006      	movs	r0, #6
 801aad4:	f000 f82c 	bl	801ab30 <raise>
 801aad8:	2001      	movs	r0, #1
 801aada:	f7e7 fe6b 	bl	80027b4 <_exit>

0801aade <_raise_r>:
 801aade:	291f      	cmp	r1, #31
 801aae0:	b538      	push	{r3, r4, r5, lr}
 801aae2:	4605      	mov	r5, r0
 801aae4:	460c      	mov	r4, r1
 801aae6:	d904      	bls.n	801aaf2 <_raise_r+0x14>
 801aae8:	2316      	movs	r3, #22
 801aaea:	6003      	str	r3, [r0, #0]
 801aaec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aaf0:	bd38      	pop	{r3, r4, r5, pc}
 801aaf2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801aaf4:	b112      	cbz	r2, 801aafc <_raise_r+0x1e>
 801aaf6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aafa:	b94b      	cbnz	r3, 801ab10 <_raise_r+0x32>
 801aafc:	4628      	mov	r0, r5
 801aafe:	f000 f831 	bl	801ab64 <_getpid_r>
 801ab02:	4622      	mov	r2, r4
 801ab04:	4601      	mov	r1, r0
 801ab06:	4628      	mov	r0, r5
 801ab08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab0c:	f000 b818 	b.w	801ab40 <_kill_r>
 801ab10:	2b01      	cmp	r3, #1
 801ab12:	d00a      	beq.n	801ab2a <_raise_r+0x4c>
 801ab14:	1c59      	adds	r1, r3, #1
 801ab16:	d103      	bne.n	801ab20 <_raise_r+0x42>
 801ab18:	2316      	movs	r3, #22
 801ab1a:	6003      	str	r3, [r0, #0]
 801ab1c:	2001      	movs	r0, #1
 801ab1e:	e7e7      	b.n	801aaf0 <_raise_r+0x12>
 801ab20:	2100      	movs	r1, #0
 801ab22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ab26:	4620      	mov	r0, r4
 801ab28:	4798      	blx	r3
 801ab2a:	2000      	movs	r0, #0
 801ab2c:	e7e0      	b.n	801aaf0 <_raise_r+0x12>
	...

0801ab30 <raise>:
 801ab30:	4b02      	ldr	r3, [pc, #8]	@ (801ab3c <raise+0xc>)
 801ab32:	4601      	mov	r1, r0
 801ab34:	6818      	ldr	r0, [r3, #0]
 801ab36:	f7ff bfd2 	b.w	801aade <_raise_r>
 801ab3a:	bf00      	nop
 801ab3c:	200009c0 	.word	0x200009c0

0801ab40 <_kill_r>:
 801ab40:	b538      	push	{r3, r4, r5, lr}
 801ab42:	4d07      	ldr	r5, [pc, #28]	@ (801ab60 <_kill_r+0x20>)
 801ab44:	2300      	movs	r3, #0
 801ab46:	4604      	mov	r4, r0
 801ab48:	4608      	mov	r0, r1
 801ab4a:	4611      	mov	r1, r2
 801ab4c:	602b      	str	r3, [r5, #0]
 801ab4e:	f7e7 fe21 	bl	8002794 <_kill>
 801ab52:	1c43      	adds	r3, r0, #1
 801ab54:	d102      	bne.n	801ab5c <_kill_r+0x1c>
 801ab56:	682b      	ldr	r3, [r5, #0]
 801ab58:	b103      	cbz	r3, 801ab5c <_kill_r+0x1c>
 801ab5a:	6023      	str	r3, [r4, #0]
 801ab5c:	bd38      	pop	{r3, r4, r5, pc}
 801ab5e:	bf00      	nop
 801ab60:	2000bb64 	.word	0x2000bb64

0801ab64 <_getpid_r>:
 801ab64:	f7e7 be0e 	b.w	8002784 <_getpid>

0801ab68 <atan2>:
 801ab68:	f000 baaa 	b.w	801b0c0 <__ieee754_atan2>

0801ab6c <sqrt>:
 801ab6c:	b538      	push	{r3, r4, r5, lr}
 801ab6e:	ed2d 8b02 	vpush	{d8}
 801ab72:	ec55 4b10 	vmov	r4, r5, d0
 801ab76:	f000 f9c7 	bl	801af08 <__ieee754_sqrt>
 801ab7a:	4622      	mov	r2, r4
 801ab7c:	462b      	mov	r3, r5
 801ab7e:	4620      	mov	r0, r4
 801ab80:	4629      	mov	r1, r5
 801ab82:	eeb0 8a40 	vmov.f32	s16, s0
 801ab86:	eef0 8a60 	vmov.f32	s17, s1
 801ab8a:	f7e6 f807 	bl	8000b9c <__aeabi_dcmpun>
 801ab8e:	b990      	cbnz	r0, 801abb6 <sqrt+0x4a>
 801ab90:	2200      	movs	r2, #0
 801ab92:	2300      	movs	r3, #0
 801ab94:	4620      	mov	r0, r4
 801ab96:	4629      	mov	r1, r5
 801ab98:	f7e5 ffd8 	bl	8000b4c <__aeabi_dcmplt>
 801ab9c:	b158      	cbz	r0, 801abb6 <sqrt+0x4a>
 801ab9e:	f7ff f96d 	bl	8019e7c <__errno>
 801aba2:	2321      	movs	r3, #33	@ 0x21
 801aba4:	6003      	str	r3, [r0, #0]
 801aba6:	2200      	movs	r2, #0
 801aba8:	2300      	movs	r3, #0
 801abaa:	4610      	mov	r0, r2
 801abac:	4619      	mov	r1, r3
 801abae:	f7e5 fe85 	bl	80008bc <__aeabi_ddiv>
 801abb2:	ec41 0b18 	vmov	d8, r0, r1
 801abb6:	eeb0 0a48 	vmov.f32	s0, s16
 801abba:	eef0 0a68 	vmov.f32	s1, s17
 801abbe:	ecbd 8b02 	vpop	{d8}
 801abc2:	bd38      	pop	{r3, r4, r5, pc}
 801abc4:	0000      	movs	r0, r0
	...

0801abc8 <atan>:
 801abc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abcc:	ec55 4b10 	vmov	r4, r5, d0
 801abd0:	4bbf      	ldr	r3, [pc, #764]	@ (801aed0 <atan+0x308>)
 801abd2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801abd6:	429e      	cmp	r6, r3
 801abd8:	46ab      	mov	fp, r5
 801abda:	d918      	bls.n	801ac0e <atan+0x46>
 801abdc:	4bbd      	ldr	r3, [pc, #756]	@ (801aed4 <atan+0x30c>)
 801abde:	429e      	cmp	r6, r3
 801abe0:	d801      	bhi.n	801abe6 <atan+0x1e>
 801abe2:	d109      	bne.n	801abf8 <atan+0x30>
 801abe4:	b144      	cbz	r4, 801abf8 <atan+0x30>
 801abe6:	4622      	mov	r2, r4
 801abe8:	462b      	mov	r3, r5
 801abea:	4620      	mov	r0, r4
 801abec:	4629      	mov	r1, r5
 801abee:	f7e5 fb85 	bl	80002fc <__adddf3>
 801abf2:	4604      	mov	r4, r0
 801abf4:	460d      	mov	r5, r1
 801abf6:	e006      	b.n	801ac06 <atan+0x3e>
 801abf8:	f1bb 0f00 	cmp.w	fp, #0
 801abfc:	f340 812b 	ble.w	801ae56 <atan+0x28e>
 801ac00:	a597      	add	r5, pc, #604	@ (adr r5, 801ae60 <atan+0x298>)
 801ac02:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ac06:	ec45 4b10 	vmov	d0, r4, r5
 801ac0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac0e:	4bb2      	ldr	r3, [pc, #712]	@ (801aed8 <atan+0x310>)
 801ac10:	429e      	cmp	r6, r3
 801ac12:	d813      	bhi.n	801ac3c <atan+0x74>
 801ac14:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801ac18:	429e      	cmp	r6, r3
 801ac1a:	d80c      	bhi.n	801ac36 <atan+0x6e>
 801ac1c:	a392      	add	r3, pc, #584	@ (adr r3, 801ae68 <atan+0x2a0>)
 801ac1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac22:	4620      	mov	r0, r4
 801ac24:	4629      	mov	r1, r5
 801ac26:	f7e5 fb69 	bl	80002fc <__adddf3>
 801ac2a:	4bac      	ldr	r3, [pc, #688]	@ (801aedc <atan+0x314>)
 801ac2c:	2200      	movs	r2, #0
 801ac2e:	f7e5 ffab 	bl	8000b88 <__aeabi_dcmpgt>
 801ac32:	2800      	cmp	r0, #0
 801ac34:	d1e7      	bne.n	801ac06 <atan+0x3e>
 801ac36:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801ac3a:	e029      	b.n	801ac90 <atan+0xc8>
 801ac3c:	f000 f95c 	bl	801aef8 <fabs>
 801ac40:	4ba7      	ldr	r3, [pc, #668]	@ (801aee0 <atan+0x318>)
 801ac42:	429e      	cmp	r6, r3
 801ac44:	ec55 4b10 	vmov	r4, r5, d0
 801ac48:	f200 80bc 	bhi.w	801adc4 <atan+0x1fc>
 801ac4c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801ac50:	429e      	cmp	r6, r3
 801ac52:	f200 809e 	bhi.w	801ad92 <atan+0x1ca>
 801ac56:	4622      	mov	r2, r4
 801ac58:	462b      	mov	r3, r5
 801ac5a:	4620      	mov	r0, r4
 801ac5c:	4629      	mov	r1, r5
 801ac5e:	f7e5 fb4d 	bl	80002fc <__adddf3>
 801ac62:	4b9e      	ldr	r3, [pc, #632]	@ (801aedc <atan+0x314>)
 801ac64:	2200      	movs	r2, #0
 801ac66:	f7e5 fb47 	bl	80002f8 <__aeabi_dsub>
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	4606      	mov	r6, r0
 801ac6e:	460f      	mov	r7, r1
 801ac70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ac74:	4620      	mov	r0, r4
 801ac76:	4629      	mov	r1, r5
 801ac78:	f7e5 fb40 	bl	80002fc <__adddf3>
 801ac7c:	4602      	mov	r2, r0
 801ac7e:	460b      	mov	r3, r1
 801ac80:	4630      	mov	r0, r6
 801ac82:	4639      	mov	r1, r7
 801ac84:	f7e5 fe1a 	bl	80008bc <__aeabi_ddiv>
 801ac88:	f04f 0a00 	mov.w	sl, #0
 801ac8c:	4604      	mov	r4, r0
 801ac8e:	460d      	mov	r5, r1
 801ac90:	4622      	mov	r2, r4
 801ac92:	462b      	mov	r3, r5
 801ac94:	4620      	mov	r0, r4
 801ac96:	4629      	mov	r1, r5
 801ac98:	f7e5 fce6 	bl	8000668 <__aeabi_dmul>
 801ac9c:	4602      	mov	r2, r0
 801ac9e:	460b      	mov	r3, r1
 801aca0:	4680      	mov	r8, r0
 801aca2:	4689      	mov	r9, r1
 801aca4:	f7e5 fce0 	bl	8000668 <__aeabi_dmul>
 801aca8:	a371      	add	r3, pc, #452	@ (adr r3, 801ae70 <atan+0x2a8>)
 801acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acae:	4606      	mov	r6, r0
 801acb0:	460f      	mov	r7, r1
 801acb2:	f7e5 fcd9 	bl	8000668 <__aeabi_dmul>
 801acb6:	a370      	add	r3, pc, #448	@ (adr r3, 801ae78 <atan+0x2b0>)
 801acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acbc:	f7e5 fb1e 	bl	80002fc <__adddf3>
 801acc0:	4632      	mov	r2, r6
 801acc2:	463b      	mov	r3, r7
 801acc4:	f7e5 fcd0 	bl	8000668 <__aeabi_dmul>
 801acc8:	a36d      	add	r3, pc, #436	@ (adr r3, 801ae80 <atan+0x2b8>)
 801acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acce:	f7e5 fb15 	bl	80002fc <__adddf3>
 801acd2:	4632      	mov	r2, r6
 801acd4:	463b      	mov	r3, r7
 801acd6:	f7e5 fcc7 	bl	8000668 <__aeabi_dmul>
 801acda:	a36b      	add	r3, pc, #428	@ (adr r3, 801ae88 <atan+0x2c0>)
 801acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace0:	f7e5 fb0c 	bl	80002fc <__adddf3>
 801ace4:	4632      	mov	r2, r6
 801ace6:	463b      	mov	r3, r7
 801ace8:	f7e5 fcbe 	bl	8000668 <__aeabi_dmul>
 801acec:	a368      	add	r3, pc, #416	@ (adr r3, 801ae90 <atan+0x2c8>)
 801acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf2:	f7e5 fb03 	bl	80002fc <__adddf3>
 801acf6:	4632      	mov	r2, r6
 801acf8:	463b      	mov	r3, r7
 801acfa:	f7e5 fcb5 	bl	8000668 <__aeabi_dmul>
 801acfe:	a366      	add	r3, pc, #408	@ (adr r3, 801ae98 <atan+0x2d0>)
 801ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad04:	f7e5 fafa 	bl	80002fc <__adddf3>
 801ad08:	4642      	mov	r2, r8
 801ad0a:	464b      	mov	r3, r9
 801ad0c:	f7e5 fcac 	bl	8000668 <__aeabi_dmul>
 801ad10:	a363      	add	r3, pc, #396	@ (adr r3, 801aea0 <atan+0x2d8>)
 801ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad16:	4680      	mov	r8, r0
 801ad18:	4689      	mov	r9, r1
 801ad1a:	4630      	mov	r0, r6
 801ad1c:	4639      	mov	r1, r7
 801ad1e:	f7e5 fca3 	bl	8000668 <__aeabi_dmul>
 801ad22:	a361      	add	r3, pc, #388	@ (adr r3, 801aea8 <atan+0x2e0>)
 801ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad28:	f7e5 fae6 	bl	80002f8 <__aeabi_dsub>
 801ad2c:	4632      	mov	r2, r6
 801ad2e:	463b      	mov	r3, r7
 801ad30:	f7e5 fc9a 	bl	8000668 <__aeabi_dmul>
 801ad34:	a35e      	add	r3, pc, #376	@ (adr r3, 801aeb0 <atan+0x2e8>)
 801ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad3a:	f7e5 fadd 	bl	80002f8 <__aeabi_dsub>
 801ad3e:	4632      	mov	r2, r6
 801ad40:	463b      	mov	r3, r7
 801ad42:	f7e5 fc91 	bl	8000668 <__aeabi_dmul>
 801ad46:	a35c      	add	r3, pc, #368	@ (adr r3, 801aeb8 <atan+0x2f0>)
 801ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad4c:	f7e5 fad4 	bl	80002f8 <__aeabi_dsub>
 801ad50:	4632      	mov	r2, r6
 801ad52:	463b      	mov	r3, r7
 801ad54:	f7e5 fc88 	bl	8000668 <__aeabi_dmul>
 801ad58:	a359      	add	r3, pc, #356	@ (adr r3, 801aec0 <atan+0x2f8>)
 801ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad5e:	f7e5 facb 	bl	80002f8 <__aeabi_dsub>
 801ad62:	4632      	mov	r2, r6
 801ad64:	463b      	mov	r3, r7
 801ad66:	f7e5 fc7f 	bl	8000668 <__aeabi_dmul>
 801ad6a:	4602      	mov	r2, r0
 801ad6c:	460b      	mov	r3, r1
 801ad6e:	4640      	mov	r0, r8
 801ad70:	4649      	mov	r1, r9
 801ad72:	f7e5 fac3 	bl	80002fc <__adddf3>
 801ad76:	4622      	mov	r2, r4
 801ad78:	462b      	mov	r3, r5
 801ad7a:	f7e5 fc75 	bl	8000668 <__aeabi_dmul>
 801ad7e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801ad82:	4602      	mov	r2, r0
 801ad84:	460b      	mov	r3, r1
 801ad86:	d148      	bne.n	801ae1a <atan+0x252>
 801ad88:	4620      	mov	r0, r4
 801ad8a:	4629      	mov	r1, r5
 801ad8c:	f7e5 fab4 	bl	80002f8 <__aeabi_dsub>
 801ad90:	e72f      	b.n	801abf2 <atan+0x2a>
 801ad92:	4b52      	ldr	r3, [pc, #328]	@ (801aedc <atan+0x314>)
 801ad94:	2200      	movs	r2, #0
 801ad96:	4620      	mov	r0, r4
 801ad98:	4629      	mov	r1, r5
 801ad9a:	f7e5 faad 	bl	80002f8 <__aeabi_dsub>
 801ad9e:	4b4f      	ldr	r3, [pc, #316]	@ (801aedc <atan+0x314>)
 801ada0:	4606      	mov	r6, r0
 801ada2:	460f      	mov	r7, r1
 801ada4:	2200      	movs	r2, #0
 801ada6:	4620      	mov	r0, r4
 801ada8:	4629      	mov	r1, r5
 801adaa:	f7e5 faa7 	bl	80002fc <__adddf3>
 801adae:	4602      	mov	r2, r0
 801adb0:	460b      	mov	r3, r1
 801adb2:	4630      	mov	r0, r6
 801adb4:	4639      	mov	r1, r7
 801adb6:	f7e5 fd81 	bl	80008bc <__aeabi_ddiv>
 801adba:	f04f 0a01 	mov.w	sl, #1
 801adbe:	4604      	mov	r4, r0
 801adc0:	460d      	mov	r5, r1
 801adc2:	e765      	b.n	801ac90 <atan+0xc8>
 801adc4:	4b47      	ldr	r3, [pc, #284]	@ (801aee4 <atan+0x31c>)
 801adc6:	429e      	cmp	r6, r3
 801adc8:	d21c      	bcs.n	801ae04 <atan+0x23c>
 801adca:	4b47      	ldr	r3, [pc, #284]	@ (801aee8 <atan+0x320>)
 801adcc:	2200      	movs	r2, #0
 801adce:	4620      	mov	r0, r4
 801add0:	4629      	mov	r1, r5
 801add2:	f7e5 fa91 	bl	80002f8 <__aeabi_dsub>
 801add6:	4b44      	ldr	r3, [pc, #272]	@ (801aee8 <atan+0x320>)
 801add8:	4606      	mov	r6, r0
 801adda:	460f      	mov	r7, r1
 801addc:	2200      	movs	r2, #0
 801adde:	4620      	mov	r0, r4
 801ade0:	4629      	mov	r1, r5
 801ade2:	f7e5 fc41 	bl	8000668 <__aeabi_dmul>
 801ade6:	4b3d      	ldr	r3, [pc, #244]	@ (801aedc <atan+0x314>)
 801ade8:	2200      	movs	r2, #0
 801adea:	f7e5 fa87 	bl	80002fc <__adddf3>
 801adee:	4602      	mov	r2, r0
 801adf0:	460b      	mov	r3, r1
 801adf2:	4630      	mov	r0, r6
 801adf4:	4639      	mov	r1, r7
 801adf6:	f7e5 fd61 	bl	80008bc <__aeabi_ddiv>
 801adfa:	f04f 0a02 	mov.w	sl, #2
 801adfe:	4604      	mov	r4, r0
 801ae00:	460d      	mov	r5, r1
 801ae02:	e745      	b.n	801ac90 <atan+0xc8>
 801ae04:	4622      	mov	r2, r4
 801ae06:	462b      	mov	r3, r5
 801ae08:	4938      	ldr	r1, [pc, #224]	@ (801aeec <atan+0x324>)
 801ae0a:	2000      	movs	r0, #0
 801ae0c:	f7e5 fd56 	bl	80008bc <__aeabi_ddiv>
 801ae10:	f04f 0a03 	mov.w	sl, #3
 801ae14:	4604      	mov	r4, r0
 801ae16:	460d      	mov	r5, r1
 801ae18:	e73a      	b.n	801ac90 <atan+0xc8>
 801ae1a:	4b35      	ldr	r3, [pc, #212]	@ (801aef0 <atan+0x328>)
 801ae1c:	4e35      	ldr	r6, [pc, #212]	@ (801aef4 <atan+0x32c>)
 801ae1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ae22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae26:	f7e5 fa67 	bl	80002f8 <__aeabi_dsub>
 801ae2a:	4622      	mov	r2, r4
 801ae2c:	462b      	mov	r3, r5
 801ae2e:	f7e5 fa63 	bl	80002f8 <__aeabi_dsub>
 801ae32:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801ae36:	4602      	mov	r2, r0
 801ae38:	460b      	mov	r3, r1
 801ae3a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801ae3e:	f7e5 fa5b 	bl	80002f8 <__aeabi_dsub>
 801ae42:	f1bb 0f00 	cmp.w	fp, #0
 801ae46:	4604      	mov	r4, r0
 801ae48:	460d      	mov	r5, r1
 801ae4a:	f6bf aedc 	bge.w	801ac06 <atan+0x3e>
 801ae4e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ae52:	461d      	mov	r5, r3
 801ae54:	e6d7      	b.n	801ac06 <atan+0x3e>
 801ae56:	a51c      	add	r5, pc, #112	@ (adr r5, 801aec8 <atan+0x300>)
 801ae58:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ae5c:	e6d3      	b.n	801ac06 <atan+0x3e>
 801ae5e:	bf00      	nop
 801ae60:	54442d18 	.word	0x54442d18
 801ae64:	3ff921fb 	.word	0x3ff921fb
 801ae68:	8800759c 	.word	0x8800759c
 801ae6c:	7e37e43c 	.word	0x7e37e43c
 801ae70:	e322da11 	.word	0xe322da11
 801ae74:	3f90ad3a 	.word	0x3f90ad3a
 801ae78:	24760deb 	.word	0x24760deb
 801ae7c:	3fa97b4b 	.word	0x3fa97b4b
 801ae80:	a0d03d51 	.word	0xa0d03d51
 801ae84:	3fb10d66 	.word	0x3fb10d66
 801ae88:	c54c206e 	.word	0xc54c206e
 801ae8c:	3fb745cd 	.word	0x3fb745cd
 801ae90:	920083ff 	.word	0x920083ff
 801ae94:	3fc24924 	.word	0x3fc24924
 801ae98:	5555550d 	.word	0x5555550d
 801ae9c:	3fd55555 	.word	0x3fd55555
 801aea0:	2c6a6c2f 	.word	0x2c6a6c2f
 801aea4:	bfa2b444 	.word	0xbfa2b444
 801aea8:	52defd9a 	.word	0x52defd9a
 801aeac:	3fadde2d 	.word	0x3fadde2d
 801aeb0:	af749a6d 	.word	0xaf749a6d
 801aeb4:	3fb3b0f2 	.word	0x3fb3b0f2
 801aeb8:	fe231671 	.word	0xfe231671
 801aebc:	3fbc71c6 	.word	0x3fbc71c6
 801aec0:	9998ebc4 	.word	0x9998ebc4
 801aec4:	3fc99999 	.word	0x3fc99999
 801aec8:	54442d18 	.word	0x54442d18
 801aecc:	bff921fb 	.word	0xbff921fb
 801aed0:	440fffff 	.word	0x440fffff
 801aed4:	7ff00000 	.word	0x7ff00000
 801aed8:	3fdbffff 	.word	0x3fdbffff
 801aedc:	3ff00000 	.word	0x3ff00000
 801aee0:	3ff2ffff 	.word	0x3ff2ffff
 801aee4:	40038000 	.word	0x40038000
 801aee8:	3ff80000 	.word	0x3ff80000
 801aeec:	bff00000 	.word	0xbff00000
 801aef0:	0801cc78 	.word	0x0801cc78
 801aef4:	0801cc98 	.word	0x0801cc98

0801aef8 <fabs>:
 801aef8:	ec51 0b10 	vmov	r0, r1, d0
 801aefc:	4602      	mov	r2, r0
 801aefe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801af02:	ec43 2b10 	vmov	d0, r2, r3
 801af06:	4770      	bx	lr

0801af08 <__ieee754_sqrt>:
 801af08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af0c:	4a68      	ldr	r2, [pc, #416]	@ (801b0b0 <__ieee754_sqrt+0x1a8>)
 801af0e:	ec55 4b10 	vmov	r4, r5, d0
 801af12:	43aa      	bics	r2, r5
 801af14:	462b      	mov	r3, r5
 801af16:	4621      	mov	r1, r4
 801af18:	d110      	bne.n	801af3c <__ieee754_sqrt+0x34>
 801af1a:	4622      	mov	r2, r4
 801af1c:	4620      	mov	r0, r4
 801af1e:	4629      	mov	r1, r5
 801af20:	f7e5 fba2 	bl	8000668 <__aeabi_dmul>
 801af24:	4602      	mov	r2, r0
 801af26:	460b      	mov	r3, r1
 801af28:	4620      	mov	r0, r4
 801af2a:	4629      	mov	r1, r5
 801af2c:	f7e5 f9e6 	bl	80002fc <__adddf3>
 801af30:	4604      	mov	r4, r0
 801af32:	460d      	mov	r5, r1
 801af34:	ec45 4b10 	vmov	d0, r4, r5
 801af38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af3c:	2d00      	cmp	r5, #0
 801af3e:	dc0e      	bgt.n	801af5e <__ieee754_sqrt+0x56>
 801af40:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801af44:	4322      	orrs	r2, r4
 801af46:	d0f5      	beq.n	801af34 <__ieee754_sqrt+0x2c>
 801af48:	b19d      	cbz	r5, 801af72 <__ieee754_sqrt+0x6a>
 801af4a:	4622      	mov	r2, r4
 801af4c:	4620      	mov	r0, r4
 801af4e:	4629      	mov	r1, r5
 801af50:	f7e5 f9d2 	bl	80002f8 <__aeabi_dsub>
 801af54:	4602      	mov	r2, r0
 801af56:	460b      	mov	r3, r1
 801af58:	f7e5 fcb0 	bl	80008bc <__aeabi_ddiv>
 801af5c:	e7e8      	b.n	801af30 <__ieee754_sqrt+0x28>
 801af5e:	152a      	asrs	r2, r5, #20
 801af60:	d115      	bne.n	801af8e <__ieee754_sqrt+0x86>
 801af62:	2000      	movs	r0, #0
 801af64:	e009      	b.n	801af7a <__ieee754_sqrt+0x72>
 801af66:	0acb      	lsrs	r3, r1, #11
 801af68:	3a15      	subs	r2, #21
 801af6a:	0549      	lsls	r1, r1, #21
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d0fa      	beq.n	801af66 <__ieee754_sqrt+0x5e>
 801af70:	e7f7      	b.n	801af62 <__ieee754_sqrt+0x5a>
 801af72:	462a      	mov	r2, r5
 801af74:	e7fa      	b.n	801af6c <__ieee754_sqrt+0x64>
 801af76:	005b      	lsls	r3, r3, #1
 801af78:	3001      	adds	r0, #1
 801af7a:	02dc      	lsls	r4, r3, #11
 801af7c:	d5fb      	bpl.n	801af76 <__ieee754_sqrt+0x6e>
 801af7e:	1e44      	subs	r4, r0, #1
 801af80:	1b12      	subs	r2, r2, r4
 801af82:	f1c0 0420 	rsb	r4, r0, #32
 801af86:	fa21 f404 	lsr.w	r4, r1, r4
 801af8a:	4323      	orrs	r3, r4
 801af8c:	4081      	lsls	r1, r0
 801af8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801af92:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801af96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801af9a:	07d2      	lsls	r2, r2, #31
 801af9c:	bf5c      	itt	pl
 801af9e:	005b      	lslpl	r3, r3, #1
 801afa0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801afa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801afa8:	bf58      	it	pl
 801afaa:	0049      	lslpl	r1, r1, #1
 801afac:	2600      	movs	r6, #0
 801afae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801afb2:	106d      	asrs	r5, r5, #1
 801afb4:	0049      	lsls	r1, r1, #1
 801afb6:	2016      	movs	r0, #22
 801afb8:	4632      	mov	r2, r6
 801afba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801afbe:	1917      	adds	r7, r2, r4
 801afc0:	429f      	cmp	r7, r3
 801afc2:	bfde      	ittt	le
 801afc4:	193a      	addle	r2, r7, r4
 801afc6:	1bdb      	suble	r3, r3, r7
 801afc8:	1936      	addle	r6, r6, r4
 801afca:	0fcf      	lsrs	r7, r1, #31
 801afcc:	3801      	subs	r0, #1
 801afce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801afd2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801afd6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801afda:	d1f0      	bne.n	801afbe <__ieee754_sqrt+0xb6>
 801afdc:	4604      	mov	r4, r0
 801afde:	2720      	movs	r7, #32
 801afe0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801afe4:	429a      	cmp	r2, r3
 801afe6:	eb00 0e0c 	add.w	lr, r0, ip
 801afea:	db02      	blt.n	801aff2 <__ieee754_sqrt+0xea>
 801afec:	d113      	bne.n	801b016 <__ieee754_sqrt+0x10e>
 801afee:	458e      	cmp	lr, r1
 801aff0:	d811      	bhi.n	801b016 <__ieee754_sqrt+0x10e>
 801aff2:	f1be 0f00 	cmp.w	lr, #0
 801aff6:	eb0e 000c 	add.w	r0, lr, ip
 801affa:	da42      	bge.n	801b082 <__ieee754_sqrt+0x17a>
 801affc:	2800      	cmp	r0, #0
 801affe:	db40      	blt.n	801b082 <__ieee754_sqrt+0x17a>
 801b000:	f102 0801 	add.w	r8, r2, #1
 801b004:	1a9b      	subs	r3, r3, r2
 801b006:	458e      	cmp	lr, r1
 801b008:	bf88      	it	hi
 801b00a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801b00e:	eba1 010e 	sub.w	r1, r1, lr
 801b012:	4464      	add	r4, ip
 801b014:	4642      	mov	r2, r8
 801b016:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801b01a:	3f01      	subs	r7, #1
 801b01c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801b020:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b024:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801b028:	d1dc      	bne.n	801afe4 <__ieee754_sqrt+0xdc>
 801b02a:	4319      	orrs	r1, r3
 801b02c:	d01b      	beq.n	801b066 <__ieee754_sqrt+0x15e>
 801b02e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801b0b4 <__ieee754_sqrt+0x1ac>
 801b032:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801b0b8 <__ieee754_sqrt+0x1b0>
 801b036:	e9da 0100 	ldrd	r0, r1, [sl]
 801b03a:	e9db 2300 	ldrd	r2, r3, [fp]
 801b03e:	f7e5 f95b 	bl	80002f8 <__aeabi_dsub>
 801b042:	e9da 8900 	ldrd	r8, r9, [sl]
 801b046:	4602      	mov	r2, r0
 801b048:	460b      	mov	r3, r1
 801b04a:	4640      	mov	r0, r8
 801b04c:	4649      	mov	r1, r9
 801b04e:	f7e5 fd87 	bl	8000b60 <__aeabi_dcmple>
 801b052:	b140      	cbz	r0, 801b066 <__ieee754_sqrt+0x15e>
 801b054:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801b058:	e9da 0100 	ldrd	r0, r1, [sl]
 801b05c:	e9db 2300 	ldrd	r2, r3, [fp]
 801b060:	d111      	bne.n	801b086 <__ieee754_sqrt+0x17e>
 801b062:	3601      	adds	r6, #1
 801b064:	463c      	mov	r4, r7
 801b066:	1072      	asrs	r2, r6, #1
 801b068:	0863      	lsrs	r3, r4, #1
 801b06a:	07f1      	lsls	r1, r6, #31
 801b06c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801b070:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801b074:	bf48      	it	mi
 801b076:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801b07a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801b07e:	4618      	mov	r0, r3
 801b080:	e756      	b.n	801af30 <__ieee754_sqrt+0x28>
 801b082:	4690      	mov	r8, r2
 801b084:	e7be      	b.n	801b004 <__ieee754_sqrt+0xfc>
 801b086:	f7e5 f939 	bl	80002fc <__adddf3>
 801b08a:	e9da 8900 	ldrd	r8, r9, [sl]
 801b08e:	4602      	mov	r2, r0
 801b090:	460b      	mov	r3, r1
 801b092:	4640      	mov	r0, r8
 801b094:	4649      	mov	r1, r9
 801b096:	f7e5 fd59 	bl	8000b4c <__aeabi_dcmplt>
 801b09a:	b120      	cbz	r0, 801b0a6 <__ieee754_sqrt+0x19e>
 801b09c:	1ca0      	adds	r0, r4, #2
 801b09e:	bf08      	it	eq
 801b0a0:	3601      	addeq	r6, #1
 801b0a2:	3402      	adds	r4, #2
 801b0a4:	e7df      	b.n	801b066 <__ieee754_sqrt+0x15e>
 801b0a6:	1c63      	adds	r3, r4, #1
 801b0a8:	f023 0401 	bic.w	r4, r3, #1
 801b0ac:	e7db      	b.n	801b066 <__ieee754_sqrt+0x15e>
 801b0ae:	bf00      	nop
 801b0b0:	7ff00000 	.word	0x7ff00000
 801b0b4:	20000a18 	.word	0x20000a18
 801b0b8:	20000a10 	.word	0x20000a10
 801b0bc:	00000000 	.word	0x00000000

0801b0c0 <__ieee754_atan2>:
 801b0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0c4:	ec57 6b11 	vmov	r6, r7, d1
 801b0c8:	4273      	negs	r3, r6
 801b0ca:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801b248 <__ieee754_atan2+0x188>
 801b0ce:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801b0d2:	4333      	orrs	r3, r6
 801b0d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801b0d8:	4543      	cmp	r3, r8
 801b0da:	ec51 0b10 	vmov	r0, r1, d0
 801b0de:	4635      	mov	r5, r6
 801b0e0:	d809      	bhi.n	801b0f6 <__ieee754_atan2+0x36>
 801b0e2:	4244      	negs	r4, r0
 801b0e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801b0e8:	4304      	orrs	r4, r0
 801b0ea:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801b0ee:	4544      	cmp	r4, r8
 801b0f0:	468e      	mov	lr, r1
 801b0f2:	4681      	mov	r9, r0
 801b0f4:	d907      	bls.n	801b106 <__ieee754_atan2+0x46>
 801b0f6:	4632      	mov	r2, r6
 801b0f8:	463b      	mov	r3, r7
 801b0fa:	f7e5 f8ff 	bl	80002fc <__adddf3>
 801b0fe:	ec41 0b10 	vmov	d0, r0, r1
 801b102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b106:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801b10a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801b10e:	4334      	orrs	r4, r6
 801b110:	d103      	bne.n	801b11a <__ieee754_atan2+0x5a>
 801b112:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b116:	f7ff bd57 	b.w	801abc8 <atan>
 801b11a:	17bc      	asrs	r4, r7, #30
 801b11c:	f004 0402 	and.w	r4, r4, #2
 801b120:	ea53 0909 	orrs.w	r9, r3, r9
 801b124:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801b128:	d107      	bne.n	801b13a <__ieee754_atan2+0x7a>
 801b12a:	2c02      	cmp	r4, #2
 801b12c:	d05f      	beq.n	801b1ee <__ieee754_atan2+0x12e>
 801b12e:	2c03      	cmp	r4, #3
 801b130:	d1e5      	bne.n	801b0fe <__ieee754_atan2+0x3e>
 801b132:	a141      	add	r1, pc, #260	@ (adr r1, 801b238 <__ieee754_atan2+0x178>)
 801b134:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b138:	e7e1      	b.n	801b0fe <__ieee754_atan2+0x3e>
 801b13a:	4315      	orrs	r5, r2
 801b13c:	d106      	bne.n	801b14c <__ieee754_atan2+0x8c>
 801b13e:	f1be 0f00 	cmp.w	lr, #0
 801b142:	da5f      	bge.n	801b204 <__ieee754_atan2+0x144>
 801b144:	a13e      	add	r1, pc, #248	@ (adr r1, 801b240 <__ieee754_atan2+0x180>)
 801b146:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b14a:	e7d8      	b.n	801b0fe <__ieee754_atan2+0x3e>
 801b14c:	4542      	cmp	r2, r8
 801b14e:	d10f      	bne.n	801b170 <__ieee754_atan2+0xb0>
 801b150:	4293      	cmp	r3, r2
 801b152:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801b156:	d107      	bne.n	801b168 <__ieee754_atan2+0xa8>
 801b158:	2c02      	cmp	r4, #2
 801b15a:	d84c      	bhi.n	801b1f6 <__ieee754_atan2+0x136>
 801b15c:	4b34      	ldr	r3, [pc, #208]	@ (801b230 <__ieee754_atan2+0x170>)
 801b15e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b162:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b166:	e7ca      	b.n	801b0fe <__ieee754_atan2+0x3e>
 801b168:	2c02      	cmp	r4, #2
 801b16a:	d848      	bhi.n	801b1fe <__ieee754_atan2+0x13e>
 801b16c:	4b31      	ldr	r3, [pc, #196]	@ (801b234 <__ieee754_atan2+0x174>)
 801b16e:	e7f6      	b.n	801b15e <__ieee754_atan2+0x9e>
 801b170:	4543      	cmp	r3, r8
 801b172:	d0e4      	beq.n	801b13e <__ieee754_atan2+0x7e>
 801b174:	1a9b      	subs	r3, r3, r2
 801b176:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801b17a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b17e:	da1e      	bge.n	801b1be <__ieee754_atan2+0xfe>
 801b180:	2f00      	cmp	r7, #0
 801b182:	da01      	bge.n	801b188 <__ieee754_atan2+0xc8>
 801b184:	323c      	adds	r2, #60	@ 0x3c
 801b186:	db1e      	blt.n	801b1c6 <__ieee754_atan2+0x106>
 801b188:	4632      	mov	r2, r6
 801b18a:	463b      	mov	r3, r7
 801b18c:	f7e5 fb96 	bl	80008bc <__aeabi_ddiv>
 801b190:	ec41 0b10 	vmov	d0, r0, r1
 801b194:	f7ff feb0 	bl	801aef8 <fabs>
 801b198:	f7ff fd16 	bl	801abc8 <atan>
 801b19c:	ec51 0b10 	vmov	r0, r1, d0
 801b1a0:	2c01      	cmp	r4, #1
 801b1a2:	d013      	beq.n	801b1cc <__ieee754_atan2+0x10c>
 801b1a4:	2c02      	cmp	r4, #2
 801b1a6:	d015      	beq.n	801b1d4 <__ieee754_atan2+0x114>
 801b1a8:	2c00      	cmp	r4, #0
 801b1aa:	d0a8      	beq.n	801b0fe <__ieee754_atan2+0x3e>
 801b1ac:	a318      	add	r3, pc, #96	@ (adr r3, 801b210 <__ieee754_atan2+0x150>)
 801b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b2:	f7e5 f8a1 	bl	80002f8 <__aeabi_dsub>
 801b1b6:	a318      	add	r3, pc, #96	@ (adr r3, 801b218 <__ieee754_atan2+0x158>)
 801b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1bc:	e014      	b.n	801b1e8 <__ieee754_atan2+0x128>
 801b1be:	a118      	add	r1, pc, #96	@ (adr r1, 801b220 <__ieee754_atan2+0x160>)
 801b1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b1c4:	e7ec      	b.n	801b1a0 <__ieee754_atan2+0xe0>
 801b1c6:	2000      	movs	r0, #0
 801b1c8:	2100      	movs	r1, #0
 801b1ca:	e7e9      	b.n	801b1a0 <__ieee754_atan2+0xe0>
 801b1cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b1d0:	4619      	mov	r1, r3
 801b1d2:	e794      	b.n	801b0fe <__ieee754_atan2+0x3e>
 801b1d4:	a30e      	add	r3, pc, #56	@ (adr r3, 801b210 <__ieee754_atan2+0x150>)
 801b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1da:	f7e5 f88d 	bl	80002f8 <__aeabi_dsub>
 801b1de:	4602      	mov	r2, r0
 801b1e0:	460b      	mov	r3, r1
 801b1e2:	a10d      	add	r1, pc, #52	@ (adr r1, 801b218 <__ieee754_atan2+0x158>)
 801b1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b1e8:	f7e5 f886 	bl	80002f8 <__aeabi_dsub>
 801b1ec:	e787      	b.n	801b0fe <__ieee754_atan2+0x3e>
 801b1ee:	a10a      	add	r1, pc, #40	@ (adr r1, 801b218 <__ieee754_atan2+0x158>)
 801b1f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b1f4:	e783      	b.n	801b0fe <__ieee754_atan2+0x3e>
 801b1f6:	a10c      	add	r1, pc, #48	@ (adr r1, 801b228 <__ieee754_atan2+0x168>)
 801b1f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b1fc:	e77f      	b.n	801b0fe <__ieee754_atan2+0x3e>
 801b1fe:	2000      	movs	r0, #0
 801b200:	2100      	movs	r1, #0
 801b202:	e77c      	b.n	801b0fe <__ieee754_atan2+0x3e>
 801b204:	a106      	add	r1, pc, #24	@ (adr r1, 801b220 <__ieee754_atan2+0x160>)
 801b206:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b20a:	e778      	b.n	801b0fe <__ieee754_atan2+0x3e>
 801b20c:	f3af 8000 	nop.w
 801b210:	33145c07 	.word	0x33145c07
 801b214:	3ca1a626 	.word	0x3ca1a626
 801b218:	54442d18 	.word	0x54442d18
 801b21c:	400921fb 	.word	0x400921fb
 801b220:	54442d18 	.word	0x54442d18
 801b224:	3ff921fb 	.word	0x3ff921fb
 801b228:	54442d18 	.word	0x54442d18
 801b22c:	3fe921fb 	.word	0x3fe921fb
 801b230:	0801ccd0 	.word	0x0801ccd0
 801b234:	0801ccb8 	.word	0x0801ccb8
 801b238:	54442d18 	.word	0x54442d18
 801b23c:	c00921fb 	.word	0xc00921fb
 801b240:	54442d18 	.word	0x54442d18
 801b244:	bff921fb 	.word	0xbff921fb
 801b248:	7ff00000 	.word	0x7ff00000

0801b24c <_init>:
 801b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b24e:	bf00      	nop
 801b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b252:	bc08      	pop	{r3}
 801b254:	469e      	mov	lr, r3
 801b256:	4770      	bx	lr

0801b258 <_fini>:
 801b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b25a:	bf00      	nop
 801b25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b25e:	bc08      	pop	{r3}
 801b260:	469e      	mov	lr, r3
 801b262:	4770      	bx	lr
