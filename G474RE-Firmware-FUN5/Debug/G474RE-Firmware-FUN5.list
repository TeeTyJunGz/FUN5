
G474RE-Firmware-FUN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f4ac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002210  0801f690  0801f690  00020690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080218a0  080218a0  00023e30  2**0
                  CONTENTS
  4 .ARM          00000008  080218a0  080218a0  000228a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080218a8  080218a8  00023e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  080218a8  080218a8  000228a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080218c4  080218c4  000228c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000e30  20000000  080218c8  00023000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b864  20000e30  080226f8  00023e30  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c694  080226f8  00024694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023e30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d89f  00000000  00000000  00023e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e4a  00000000  00000000  000516ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002328  00000000  00000000  00057550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b33  00000000  00000000  00059878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000305b5  00000000  00000000  0005b3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d9f7  00000000  00000000  0008b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012e239  00000000  00000000  000b9357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001e7590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a630  00000000  00000000  001e7608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001f1c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000e30 	.word	0x20000e30
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801f674 	.word	0x0801f674

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000e34 	.word	0x20000e34
 800021c:	0801f674 	.word	0x0801f674

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c86:	f000 b9b5 	b.w	8000ff4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d1c:	f000 b96a 	b.w	8000ff4 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	@ 0x30
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f01d f8b5 	bl	801e180 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001016:	4b39      	ldr	r3, [pc, #228]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001018:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800101c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800101e:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001020:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <MX_ADC1_Init+0x104>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001032:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001038:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <MX_ADC1_Init+0x104>)
 800103a:	2201      	movs	r2, #1
 800103c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103e:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001040:	2204      	movs	r2, #4
 8001042:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001046:	2200      	movs	r2, #0
 8001048:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800104a:	4b2c      	ldr	r3, [pc, #176]	@ (80010fc <MX_ADC1_Init+0x104>)
 800104c:	2201      	movs	r2, #1
 800104e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001052:	2202      	movs	r2, #2
 8001054:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105e:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001064:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001066:	2200      	movs	r2, #0
 8001068:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800106a:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <MX_ADC1_Init+0x104>)
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001072:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001074:	2200      	movs	r2, #0
 8001076:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001078:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <MX_ADC1_Init+0x104>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001080:	481e      	ldr	r0, [pc, #120]	@ (80010fc <MX_ADC1_Init+0x104>)
 8001082:	f003 fdfd 	bl	8004c80 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800108c:	f002 fe42 	bl	8003d14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	4818      	ldr	r0, [pc, #96]	@ (80010fc <MX_ADC1_Init+0x104>)
 800109c:	f005 f9b8 	bl	8006410 <HAL_ADCEx_MultiModeConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010a6:	f002 fe35 	bl	8003d14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <MX_ADC1_Init+0x108>)
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ae:	2306      	movs	r3, #6
 80010b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010b2:	2307      	movs	r3, #7
 80010b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b6:	237f      	movs	r3, #127	@ 0x7f
 80010b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ba:	2304      	movs	r3, #4
 80010bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	480d      	ldr	r0, [pc, #52]	@ (80010fc <MX_ADC1_Init+0x104>)
 80010c8:	f004 faf2 	bl	80056b0 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80010d2:	f002 fe1f 	bl	8003d14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MX_ADC1_Init+0x10c>)
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010da:	230c      	movs	r3, #12
 80010dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	@ (80010fc <MX_ADC1_Init+0x104>)
 80010e4:	f004 fae4 	bl	80056b0 <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80010ee:	f002 fe11 	bl	8003d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	@ 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000e4c 	.word	0x20000e4c
 8001100:	04300002 	.word	0x04300002
 8001104:	08600004 	.word	0x08600004

08001108 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09e      	sub	sp, #120	@ 0x78
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	2254      	movs	r2, #84	@ 0x54
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f01d f829 	bl	801e180 <memset>
  if(adcHandle->Instance==ADC1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001136:	d167      	bne.n	8001208 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001138:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800113c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800113e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001142:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4618      	mov	r0, r3
 800114a:	f007 fe1d 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001154:	f002 fdde 	bl	8003d14 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001158:	4b2d      	ldr	r3, [pc, #180]	@ (8001210 <HAL_ADC_MspInit+0x108>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115c:	4a2c      	ldr	r2, [pc, #176]	@ (8001210 <HAL_ADC_MspInit+0x108>)
 800115e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001162:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001164:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <HAL_ADC_MspInit+0x108>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <HAL_ADC_MspInit+0x108>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001174:	4a26      	ldr	r2, [pc, #152]	@ (8001210 <HAL_ADC_MspInit+0x108>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <HAL_ADC_MspInit+0x108>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001188:	2303      	movs	r3, #3
 800118a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118c:	2303      	movs	r3, #3
 800118e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119e:	f005 fe5d 	bl	8006e5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001218 <HAL_ADC_MspInit+0x110>)
 80011a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011aa:	2205      	movs	r2, #5
 80011ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b4:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ba:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c0:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011d2:	2220      	movs	r2, #32
 80011d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011dc:	480d      	ldr	r0, [pc, #52]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011de:	f005 faff 	bl	80067e0 <HAL_DMA_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80011e8:	f002 fd94 	bl	8003d14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80011f2:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <HAL_ADC_MspInit+0x10c>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2105      	movs	r1, #5
 80011fc:	2012      	movs	r0, #18
 80011fe:	f005 fac7 	bl	8006790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001202:	2012      	movs	r0, #18
 8001204:	f005 fade 	bl	80067c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001208:	bf00      	nop
 800120a:	3778      	adds	r7, #120	@ 0x78
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	20000eb8 	.word	0x20000eb8
 8001218:	40020030 	.word	0x40020030

0800121c <lowPassFilter>:

void ADC_Averaged();
void Read_Buttons();
float map_adc_to_output(int adc_value);

double lowPassFilter(float previousFiltered, float raw, float beta) {
 800121c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	ed87 0a03 	vstr	s0, [r7, #12]
 8001228:	edc7 0a02 	vstr	s1, [r7, #8]
 800122c:	ed87 1a01 	vstr	s2, [r7, #4]
    return beta * previousFiltered + (1.0 - beta) * raw;
 8001230:	ed97 7a01 	vldr	s14, [r7, #4]
 8001234:	edd7 7a03 	vldr	s15, [r7, #12]
 8001238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123c:	ee17 0a90 	vmov	r0, s15
 8001240:	f7ff f9ba 	bl	80005b8 <__aeabi_f2d>
 8001244:	4604      	mov	r4, r0
 8001246:	460d      	mov	r5, r1
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff f9b5 	bl	80005b8 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	f04f 0000 	mov.w	r0, #0
 8001256:	4911      	ldr	r1, [pc, #68]	@ (800129c <lowPassFilter+0x80>)
 8001258:	f7ff f84e 	bl	80002f8 <__aeabi_dsub>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4690      	mov	r8, r2
 8001262:	4699      	mov	r9, r3
 8001264:	68b8      	ldr	r0, [r7, #8]
 8001266:	f7ff f9a7 	bl	80005b8 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4640      	mov	r0, r8
 8001270:	4649      	mov	r1, r9
 8001272:	f7ff f9f9 	bl	8000668 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7ff f83d 	bl	80002fc <__adddf3>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	ec43 2b17 	vmov	d7, r2, r3
}
 800128a:	eeb0 0a47 	vmov.f32	s0, s14
 800128e:	eef0 0a67 	vmov.f32	s1, s15
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800129a:	bf00      	nop
 800129c:	3ff00000 	.word	0x3ff00000

080012a0 <highPassFilter>:
double highPassFilter(float currentFiltered, float raw, float lastRaw, float alpha) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80012aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80012ae:	ed87 1a01 	vstr	s2, [r7, #4]
 80012b2:	edc7 1a00 	vstr	s3, [r7]
    return alpha * (currentFiltered + raw - lastRaw);
 80012b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80012ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80012be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012ca:	edd7 7a00 	vldr	s15, [r7]
 80012ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d2:	ee17 0a90 	vmov	r0, s15
 80012d6:	f7ff f96f 	bl	80005b8 <__aeabi_f2d>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	ec43 2b17 	vmov	d7, r2, r3
}
 80012e2:	eeb0 0a47 	vmov.f32	s0, s14
 80012e6:	eef0 0a67 	vmov.f32	s1, s15
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <calculate_gyro_angles>:

void calculate_gyro_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT) {
 80012f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012f4:	b08e      	sub	sp, #56	@ 0x38
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 80012fc:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001300:	ed87 2b08 	vstr	d2, [r7, #32]
 8001304:	ed87 3b06 	vstr	d3, [r7, #24]
 8001308:	ed87 4b04 	vstr	d4, [r7, #16]
 800130c:	ed87 5b02 	vstr	d5, [r7, #8]
 8001310:	ed87 6a01 	vstr	s12, [r7, #4]

	rotation_gyro.roll += (Gx * RAD_TO_DEG) * DT;
 8001314:	4b5e      	ldr	r3, [pc, #376]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 8001316:	e9d3 4500 	ldrd	r4, r5, [r3]
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b5d      	ldr	r3, [pc, #372]	@ (8001494 <calculate_gyro_angles+0x1a4>)
 8001320:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001324:	f7ff f9a0 	bl	8000668 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	a355      	add	r3, pc, #340	@ (adr r3, 8001488 <calculate_gyro_angles+0x198>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7ff fac1 	bl	80008bc <__aeabi_ddiv>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4690      	mov	r8, r2
 8001340:	4699      	mov	r9, r3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff f938 	bl	80005b8 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4640      	mov	r0, r8
 800134e:	4649      	mov	r1, r9
 8001350:	f7ff f98a 	bl	8000668 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4620      	mov	r0, r4
 800135a:	4629      	mov	r1, r5
 800135c:	f7fe ffce 	bl	80002fc <__adddf3>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	494a      	ldr	r1, [pc, #296]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 8001366:	e9c1 2300 	strd	r2, r3, [r1]
	rotation_gyro.pitch += (Gy * RAD_TO_DEG) * DT;
 800136a:	4b49      	ldr	r3, [pc, #292]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 800136c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	4b47      	ldr	r3, [pc, #284]	@ (8001494 <calculate_gyro_angles+0x1a4>)
 8001376:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800137a:	f7ff f975 	bl	8000668 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	a340      	add	r3, pc, #256	@ (adr r3, 8001488 <calculate_gyro_angles+0x198>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff fa96 	bl	80008bc <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4690      	mov	r8, r2
 8001396:	4699      	mov	r9, r3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff f90d 	bl	80005b8 <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4640      	mov	r0, r8
 80013a4:	4649      	mov	r1, r9
 80013a6:	f7ff f95f 	bl	8000668 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4620      	mov	r0, r4
 80013b0:	4629      	mov	r1, r5
 80013b2:	f7fe ffa3 	bl	80002fc <__adddf3>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4935      	ldr	r1, [pc, #212]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 80013bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rotation_gyro.yaw += (Gz * RAD_TO_DEG) * DT;
 80013c0:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 80013c2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	4b32      	ldr	r3, [pc, #200]	@ (8001494 <calculate_gyro_angles+0x1a4>)
 80013cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013d0:	f7ff f94a 	bl	8000668 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	a32a      	add	r3, pc, #168	@ (adr r3, 8001488 <calculate_gyro_angles+0x198>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff fa6b 	bl	80008bc <__aeabi_ddiv>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4690      	mov	r8, r2
 80013ec:	4699      	mov	r9, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff f8e2 	bl	80005b8 <__aeabi_f2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4640      	mov	r0, r8
 80013fa:	4649      	mov	r1, r9
 80013fc:	f7ff f934 	bl	8000668 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7fe ff78 	bl	80002fc <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	491f      	ldr	r1, [pc, #124]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 8001412:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_gyro.yaw > 180.0){
 8001416:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 8001418:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <calculate_gyro_angles+0x1a4>)
 8001422:	f7ff fbb1 	bl	8000b88 <__aeabi_dcmpgt>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00d      	beq.n	8001448 <calculate_gyro_angles+0x158>
    	rotation_gyro.yaw -= 360.0;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 800142e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <calculate_gyro_angles+0x1a8>)
 8001438:	f7fe ff5e 	bl	80002f8 <__aeabi_dsub>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4913      	ldr	r1, [pc, #76]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 8001442:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_gyro.yaw < -180.0){
    	rotation_gyro.yaw += 360.0;
    }
}
 8001446:	e018      	b.n	800147a <calculate_gyro_angles+0x18a>
    else if (rotation_gyro.yaw < -180.0){
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 800144a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <calculate_gyro_angles+0x1ac>)
 8001454:	f7ff fb7a 	bl	8000b4c <__aeabi_dcmplt>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d100      	bne.n	8001460 <calculate_gyro_angles+0x170>
}
 800145e:	e00c      	b.n	800147a <calculate_gyro_angles+0x18a>
    	rotation_gyro.yaw += 360.0;
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 8001462:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <calculate_gyro_angles+0x1a8>)
 800146c:	f7fe ff46 	bl	80002fc <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4906      	ldr	r1, [pc, #24]	@ (8001490 <calculate_gyro_angles+0x1a0>)
 8001476:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800147a:	bf00      	nop
 800147c:	3738      	adds	r7, #56	@ 0x38
 800147e:	46bd      	mov	sp, r7
 8001480:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	54442d18 	.word	0x54442d18
 800148c:	400921fb 	.word	0x400921fb
 8001490:	20001300 	.word	0x20001300
 8001494:	40668000 	.word	0x40668000
 8001498:	40768000 	.word	0x40768000
 800149c:	c0668000 	.word	0xc0668000

080014a0 <calculate_accl_angles>:

void calculate_accl_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT) {
 80014a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a4:	b094      	sub	sp, #80	@ 0x50
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 80014ac:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 80014b0:	ed87 2b08 	vstr	d2, [r7, #32]
 80014b4:	ed87 3b06 	vstr	d3, [r7, #24]
 80014b8:	ed87 4b04 	vstr	d4, [r7, #16]
 80014bc:	ed87 5b02 	vstr	d5, [r7, #8]
 80014c0:	ed87 6a01 	vstr	s12, [r7, #4]

    double roll_acc = atan2(Ay, Az) * RAD_TO_DEG;
 80014c4:	ed97 1b08 	vldr	d1, [r7, #32]
 80014c8:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80014cc:	f01d fd62 	bl	801ef94 <atan2>
 80014d0:	ec51 0b10 	vmov	r0, r1, d0
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b63      	ldr	r3, [pc, #396]	@ (8001668 <calculate_accl_angles+0x1c8>)
 80014da:	f7ff f8c5 	bl	8000668 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	a35e      	add	r3, pc, #376	@ (adr r3, 8001660 <calculate_accl_angles+0x1c0>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7ff f9e6 	bl	80008bc <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double pitch_acc = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * RAD_TO_DEG;
 80014f8:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80014fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014fc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001504:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001508:	f7ff f8ae 	bl	8000668 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4690      	mov	r8, r2
 8001512:	4699      	mov	r9, r3
 8001514:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001518:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800151c:	f7ff f8a4 	bl	8000668 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4640      	mov	r0, r8
 8001526:	4649      	mov	r1, r9
 8001528:	f7fe fee8 	bl	80002fc <__adddf3>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	ec43 2b17 	vmov	d7, r2, r3
 8001534:	eeb0 0a47 	vmov.f32	s0, s14
 8001538:	eef0 0a67 	vmov.f32	s1, s15
 800153c:	f01d fd2c 	bl	801ef98 <sqrt>
 8001540:	eeb0 7a40 	vmov.f32	s14, s0
 8001544:	eef0 7a60 	vmov.f32	s15, s1
 8001548:	eeb0 1a47 	vmov.f32	s2, s14
 800154c:	eef0 1a67 	vmov.f32	s3, s15
 8001550:	ec45 4b10 	vmov	d0, r4, r5
 8001554:	f01d fd1e 	bl	801ef94 <atan2>
 8001558:	ec51 0b10 	vmov	r0, r1, d0
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b41      	ldr	r3, [pc, #260]	@ (8001668 <calculate_accl_angles+0x1c8>)
 8001562:	f7ff f881 	bl	8000668 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	a33c      	add	r3, pc, #240	@ (adr r3, 8001660 <calculate_accl_angles+0x1c0>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f9a2 	bl	80008bc <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double yaw_acc = (Gz * RAD_TO_DEG) * DT;
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <calculate_accl_angles+0x1c8>)
 8001586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800158a:	f7ff f86d 	bl	8000668 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	a332      	add	r3, pc, #200	@ (adr r3, 8001660 <calculate_accl_angles+0x1c0>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff f98e 	bl	80008bc <__aeabi_ddiv>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4614      	mov	r4, r2
 80015a6:	461d      	mov	r5, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff f805 	bl	80005b8 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7ff f857 	bl	8000668 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    rotation_accl.roll = roll_acc;
 80015c2:	492a      	ldr	r1, [pc, #168]	@ (800166c <calculate_accl_angles+0x1cc>)
 80015c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015c8:	e9c1 2300 	strd	r2, r3, [r1]
    rotation_accl.pitch = pitch_acc;
 80015cc:	4927      	ldr	r1, [pc, #156]	@ (800166c <calculate_accl_angles+0x1cc>)
 80015ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80015d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    rotation_accl.yaw += yaw_acc;
 80015d6:	4b25      	ldr	r3, [pc, #148]	@ (800166c <calculate_accl_angles+0x1cc>)
 80015d8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80015dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80015e0:	f7fe fe8c 	bl	80002fc <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4920      	ldr	r1, [pc, #128]	@ (800166c <calculate_accl_angles+0x1cc>)
 80015ea:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_accl.yaw > 180.0){
 80015ee:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <calculate_accl_angles+0x1cc>)
 80015f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <calculate_accl_angles+0x1c8>)
 80015fa:	f7ff fac5 	bl	8000b88 <__aeabi_dcmpgt>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00d      	beq.n	8001620 <calculate_accl_angles+0x180>
    	rotation_accl.yaw -= 360.0;
 8001604:	4b19      	ldr	r3, [pc, #100]	@ (800166c <calculate_accl_angles+0x1cc>)
 8001606:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <calculate_accl_angles+0x1d0>)
 8001610:	f7fe fe72 	bl	80002f8 <__aeabi_dsub>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4914      	ldr	r1, [pc, #80]	@ (800166c <calculate_accl_angles+0x1cc>)
 800161a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_accl.yaw < -180.0){
    	rotation_accl.yaw += 360.0;
    }
}
 800161e:	e018      	b.n	8001652 <calculate_accl_angles+0x1b2>
    else if (rotation_accl.yaw < -180.0){
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <calculate_accl_angles+0x1cc>)
 8001622:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <calculate_accl_angles+0x1d4>)
 800162c:	f7ff fa8e 	bl	8000b4c <__aeabi_dcmplt>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d100      	bne.n	8001638 <calculate_accl_angles+0x198>
}
 8001636:	e00c      	b.n	8001652 <calculate_accl_angles+0x1b2>
    	rotation_accl.yaw += 360.0;
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <calculate_accl_angles+0x1cc>)
 800163a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <calculate_accl_angles+0x1d0>)
 8001644:	f7fe fe5a 	bl	80002fc <__adddf3>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4907      	ldr	r1, [pc, #28]	@ (800166c <calculate_accl_angles+0x1cc>)
 800164e:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001652:	bf00      	nop
 8001654:	3750      	adds	r7, #80	@ 0x50
 8001656:	46bd      	mov	sp, r7
 8001658:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800165c:	f3af 8000 	nop.w
 8001660:	54442d18 	.word	0x54442d18
 8001664:	400921fb 	.word	0x400921fb
 8001668:	40668000 	.word	0x40668000
 800166c:	20001318 	.word	0x20001318
 8001670:	40768000 	.word	0x40768000
 8001674:	c0668000 	.word	0xc0668000

08001678 <calculate_comp_angles>:

void calculate_comp_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT){
 8001678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800167c:	b09e      	sub	sp, #120	@ 0x78
 800167e:	af00      	add	r7, sp, #0
 8001680:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001684:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001688:	ed87 2b08 	vstr	d2, [r7, #32]
 800168c:	ed87 3b06 	vstr	d3, [r7, #24]
 8001690:	ed87 4b04 	vstr	d4, [r7, #16]
 8001694:	ed87 5b02 	vstr	d5, [r7, #8]
 8001698:	ed87 6a01 	vstr	s12, [r7, #4]
    double roll_acc = atan(Ay / sqrt(Ax * Ax + Az * Az)) * RAD_TO_DEG;
 800169c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80016a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80016a4:	f7fe ffe0 	bl	8000668 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4690      	mov	r8, r2
 80016ae:	4699      	mov	r9, r3
 80016b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016b8:	f7fe ffd6 	bl	8000668 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4640      	mov	r0, r8
 80016c2:	4649      	mov	r1, r9
 80016c4:	f7fe fe1a 	bl	80002fc <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	ec43 2b17 	vmov	d7, r2, r3
 80016d0:	eeb0 0a47 	vmov.f32	s0, s14
 80016d4:	eef0 0a67 	vmov.f32	s1, s15
 80016d8:	f01d fc5e 	bl	801ef98 <sqrt>
 80016dc:	ec53 2b10 	vmov	r2, r3, d0
 80016e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016e4:	f7ff f8ea 	bl	80008bc <__aeabi_ddiv>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	ec43 2b17 	vmov	d7, r2, r3
 80016f0:	eeb0 0a47 	vmov.f32	s0, s14
 80016f4:	eef0 0a67 	vmov.f32	s1, s15
 80016f8:	f01d fc7a 	bl	801eff0 <atan>
 80016fc:	ec51 0b10 	vmov	r0, r1, d0
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4bbc      	ldr	r3, [pc, #752]	@ (80019f8 <calculate_comp_angles+0x380>)
 8001706:	f7fe ffaf 	bl	8000668 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	a3b7      	add	r3, pc, #732	@ (adr r3, 80019f0 <calculate_comp_angles+0x378>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7ff f8d0 	bl	80008bc <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    double pitch_acc = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * RAD_TO_DEG;
 8001724:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001728:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800172c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001730:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001734:	f7fe ff98 	bl	8000668 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4690      	mov	r8, r2
 800173e:	4699      	mov	r9, r3
 8001740:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001744:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001748:	f7fe ff8e 	bl	8000668 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4640      	mov	r0, r8
 8001752:	4649      	mov	r1, r9
 8001754:	f7fe fdd2 	bl	80002fc <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	ec43 2b17 	vmov	d7, r2, r3
 8001760:	eeb0 0a47 	vmov.f32	s0, s14
 8001764:	eef0 0a67 	vmov.f32	s1, s15
 8001768:	f01d fc16 	bl	801ef98 <sqrt>
 800176c:	eeb0 7a40 	vmov.f32	s14, s0
 8001770:	eef0 7a60 	vmov.f32	s15, s1
 8001774:	eeb0 1a47 	vmov.f32	s2, s14
 8001778:	eef0 1a67 	vmov.f32	s3, s15
 800177c:	ec45 4b10 	vmov	d0, r4, r5
 8001780:	f01d fc08 	bl	801ef94 <atan2>
 8001784:	ec51 0b10 	vmov	r0, r1, d0
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b9a      	ldr	r3, [pc, #616]	@ (80019f8 <calculate_comp_angles+0x380>)
 800178e:	f7fe ff6b 	bl	8000668 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	a395      	add	r3, pc, #596	@ (adr r3, 80019f0 <calculate_comp_angles+0x378>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7ff f88c 	bl	80008bc <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

    double roll_acc_fill = lowPassFilter(prev_acc_roll, roll_acc, LOW_PASS_BETA);
 80017ac:	4b93      	ldr	r3, [pc, #588]	@ (80019fc <calculate_comp_angles+0x384>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff fa07 	bl	8000bc8 <__aeabi_d2f>
 80017ba:	4604      	mov	r4, r0
 80017bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80017c0:	f7ff fa02 	bl	8000bc8 <__aeabi_d2f>
 80017c4:	4603      	mov	r3, r0
 80017c6:	ed9f 1a8e 	vldr	s2, [pc, #568]	@ 8001a00 <calculate_comp_angles+0x388>
 80017ca:	ee00 3a90 	vmov	s1, r3
 80017ce:	ee00 4a10 	vmov	s0, r4
 80017d2:	f7ff fd23 	bl	800121c <lowPassFilter>
 80017d6:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
    double pitch_acc_fill = lowPassFilter(prev_acc_pitch, pitch_acc, LOW_PASS_BETA);
 80017da:	4b8a      	ldr	r3, [pc, #552]	@ (8001a04 <calculate_comp_angles+0x38c>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f9f0 	bl	8000bc8 <__aeabi_d2f>
 80017e8:	4604      	mov	r4, r0
 80017ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80017ee:	f7ff f9eb 	bl	8000bc8 <__aeabi_d2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 8001a00 <calculate_comp_angles+0x388>
 80017f8:	ee00 3a90 	vmov	s1, r3
 80017fc:	ee00 4a10 	vmov	s0, r4
 8001800:	f7ff fd0c 	bl	800121c <lowPassFilter>
 8001804:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58

    prev_acc_roll = roll_acc_fill;
 8001808:	497c      	ldr	r1, [pc, #496]	@ (80019fc <calculate_comp_angles+0x384>)
 800180a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800180e:	e9c1 2300 	strd	r2, r3, [r1]
    prev_acc_pitch = pitch_acc_fill;
 8001812:	497c      	ldr	r1, [pc, #496]	@ (8001a04 <calculate_comp_angles+0x38c>)
 8001814:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001818:	e9c1 2300 	strd	r2, r3, [r1]

    double gyro_roll = rotation_comp.roll + Gx * DT;
 800181c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a08 <calculate_comp_angles+0x390>)
 800181e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7fe fec8 	bl	80005b8 <__aeabi_f2d>
 8001828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800182c:	f7fe ff1c 	bl	8000668 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fd60 	bl	80002fc <__adddf3>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double gyro_pitch = rotation_comp.pitch + Gy * DT;
 8001844:	4b70      	ldr	r3, [pc, #448]	@ (8001a08 <calculate_comp_angles+0x390>)
 8001846:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7fe feb4 	bl	80005b8 <__aeabi_f2d>
 8001850:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001854:	f7fe ff08 	bl	8000668 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4620      	mov	r0, r4
 800185e:	4629      	mov	r1, r5
 8001860:	f7fe fd4c 	bl	80002fc <__adddf3>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    double gyro_roll_fill = highPassFilter(rotation_comp.roll, gyro_roll, prev_gyroX, HIGH_PASS_ALPHA);
 800186c:	4b66      	ldr	r3, [pc, #408]	@ (8001a08 <calculate_comp_angles+0x390>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f7ff f9a7 	bl	8000bc8 <__aeabi_d2f>
 800187a:	4604      	mov	r4, r0
 800187c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001880:	f7ff f9a2 	bl	8000bc8 <__aeabi_d2f>
 8001884:	4605      	mov	r5, r0
 8001886:	4b61      	ldr	r3, [pc, #388]	@ (8001a0c <calculate_comp_angles+0x394>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f99a 	bl	8000bc8 <__aeabi_d2f>
 8001894:	4603      	mov	r3, r0
 8001896:	eddf 1a5e 	vldr	s3, [pc, #376]	@ 8001a10 <calculate_comp_angles+0x398>
 800189a:	ee01 3a10 	vmov	s2, r3
 800189e:	ee00 5a90 	vmov	s1, r5
 80018a2:	ee00 4a10 	vmov	s0, r4
 80018a6:	f7ff fcfb 	bl	80012a0 <highPassFilter>
 80018aa:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double gyro_pitch_fill = highPassFilter(rotation_comp.pitch, gyro_pitch, prev_gyroY, HIGH_PASS_ALPHA);
 80018ae:	4b56      	ldr	r3, [pc, #344]	@ (8001a08 <calculate_comp_angles+0x390>)
 80018b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f986 	bl	8000bc8 <__aeabi_d2f>
 80018bc:	4604      	mov	r4, r0
 80018be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80018c2:	f7ff f981 	bl	8000bc8 <__aeabi_d2f>
 80018c6:	4605      	mov	r5, r0
 80018c8:	4b52      	ldr	r3, [pc, #328]	@ (8001a14 <calculate_comp_angles+0x39c>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7ff f979 	bl	8000bc8 <__aeabi_d2f>
 80018d6:	4603      	mov	r3, r0
 80018d8:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 8001a10 <calculate_comp_angles+0x398>
 80018dc:	ee01 3a10 	vmov	s2, r3
 80018e0:	ee00 5a90 	vmov	s1, r5
 80018e4:	ee00 4a10 	vmov	s0, r4
 80018e8:	f7ff fcda 	bl	80012a0 <highPassFilter>
 80018ec:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

    prev_gyroX = Gx;
 80018f0:	4946      	ldr	r1, [pc, #280]	@ (8001a0c <calculate_comp_angles+0x394>)
 80018f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018f6:	e9c1 2300 	strd	r2, r3, [r1]
    prev_gyroY = Gy;
 80018fa:	4946      	ldr	r1, [pc, #280]	@ (8001a14 <calculate_comp_angles+0x39c>)
 80018fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001900:	e9c1 2300 	strd	r2, r3, [r1]

    rotation_comp.roll = ALPHA * gyro_roll_fill + (1 - ALPHA) * roll_acc_fill;
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b43      	ldr	r3, [pc, #268]	@ (8001a18 <calculate_comp_angles+0x3a0>)
 800190a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800190e:	f7fe feab 	bl	8000668 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4614      	mov	r4, r2
 8001918:	461d      	mov	r5, r3
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a18 <calculate_comp_angles+0x3a0>)
 8001920:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001924:	f7fe fea0 	bl	8000668 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fce4 	bl	80002fc <__adddf3>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4933      	ldr	r1, [pc, #204]	@ (8001a08 <calculate_comp_angles+0x390>)
 800193a:	e9c1 2300 	strd	r2, r3, [r1]
    rotation_comp.pitch = ALPHA * gyro_pitch_fill + (1 - ALPHA) * pitch_acc_fill;
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b35      	ldr	r3, [pc, #212]	@ (8001a18 <calculate_comp_angles+0x3a0>)
 8001944:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001948:	f7fe fe8e 	bl	8000668 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4614      	mov	r4, r2
 8001952:	461d      	mov	r5, r3
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b2f      	ldr	r3, [pc, #188]	@ (8001a18 <calculate_comp_angles+0x3a0>)
 800195a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800195e:	f7fe fe83 	bl	8000668 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fcc7 	bl	80002fc <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4925      	ldr	r1, [pc, #148]	@ (8001a08 <calculate_comp_angles+0x390>)
 8001974:	e9c1 2302 	strd	r2, r3, [r1, #8]
    rotation_comp.yaw += (Gz * RAD_TO_DEG) * DT;
 8001978:	4b23      	ldr	r3, [pc, #140]	@ (8001a08 <calculate_comp_angles+0x390>)
 800197a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <calculate_comp_angles+0x380>)
 8001984:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001988:	f7fe fe6e 	bl	8000668 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	a316      	add	r3, pc, #88	@ (adr r3, 80019f0 <calculate_comp_angles+0x378>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe ff8f 	bl	80008bc <__aeabi_ddiv>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4690      	mov	r8, r2
 80019a4:	4699      	mov	r9, r3
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7fe fe06 	bl	80005b8 <__aeabi_f2d>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4640      	mov	r0, r8
 80019b2:	4649      	mov	r1, r9
 80019b4:	f7fe fe58 	bl	8000668 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4620      	mov	r0, r4
 80019be:	4629      	mov	r1, r5
 80019c0:	f7fe fc9c 	bl	80002fc <__adddf3>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	490f      	ldr	r1, [pc, #60]	@ (8001a08 <calculate_comp_angles+0x390>)
 80019ca:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_comp.yaw > 180.0){
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <calculate_comp_angles+0x390>)
 80019d0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <calculate_comp_angles+0x380>)
 80019da:	f7ff f8d5 	bl	8000b88 <__aeabi_dcmpgt>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d024      	beq.n	8001a2e <calculate_comp_angles+0x3b6>
    	rotation_comp.yaw -= 360.0;
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <calculate_comp_angles+0x390>)
 80019e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	e015      	b.n	8001a1c <calculate_comp_angles+0x3a4>
 80019f0:	54442d18 	.word	0x54442d18
 80019f4:	400921fb 	.word	0x400921fb
 80019f8:	40668000 	.word	0x40668000
 80019fc:	20001418 	.word	0x20001418
 8001a00:	3f666666 	.word	0x3f666666
 8001a04:	20001420 	.word	0x20001420
 8001a08:	20001330 	.word	0x20001330
 8001a0c:	20001428 	.word	0x20001428
 8001a10:	3f4ccccd 	.word	0x3f4ccccd
 8001a14:	20001430 	.word	0x20001430
 8001a18:	3fe00000 	.word	0x3fe00000
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <calculate_comp_angles+0x3f4>)
 8001a1e:	f7fe fc6b 	bl	80002f8 <__aeabi_dsub>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4912      	ldr	r1, [pc, #72]	@ (8001a70 <calculate_comp_angles+0x3f8>)
 8001a28:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_comp.yaw < -180.0){
    	rotation_comp.yaw += 360.0;
    }

}
 8001a2c:	e018      	b.n	8001a60 <calculate_comp_angles+0x3e8>
    else if (rotation_comp.yaw < -180.0){
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <calculate_comp_angles+0x3f8>)
 8001a30:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <calculate_comp_angles+0x3fc>)
 8001a3a:	f7ff f887 	bl	8000b4c <__aeabi_dcmplt>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d100      	bne.n	8001a46 <calculate_comp_angles+0x3ce>
}
 8001a44:	e00c      	b.n	8001a60 <calculate_comp_angles+0x3e8>
    	rotation_comp.yaw += 360.0;
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <calculate_comp_angles+0x3f8>)
 8001a48:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <calculate_comp_angles+0x3f4>)
 8001a52:	f7fe fc53 	bl	80002fc <__adddf3>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4905      	ldr	r1, [pc, #20]	@ (8001a70 <calculate_comp_angles+0x3f8>)
 8001a5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001a60:	bf00      	nop
 8001a62:	3778      	adds	r7, #120	@ 0x78
 8001a64:	46bd      	mov	sp, r7
 8001a66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40768000 	.word	0x40768000
 8001a70:	20001330 	.word	0x20001330
 8001a74:	c0668000 	.word	0xc0668000

08001a78 <calculate_kalm_angles>:
void calculate_kalm_angles(double Ax, double Ay, double Az, double Gx, double Gy, double Gz, float DT) {
 8001a78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a7c:	b096      	sub	sp, #88	@ 0x58
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001a84:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8001a88:	ed87 2b08 	vstr	d2, [r7, #32]
 8001a8c:	ed87 3b06 	vstr	d3, [r7, #24]
 8001a90:	ed87 4b04 	vstr	d4, [r7, #16]
 8001a94:	ed87 5b02 	vstr	d5, [r7, #8]
 8001a98:	ed87 6a01 	vstr	s12, [r7, #4]

	double angleX = atan(Ay / sqrt(Ax * Ax + Az * Az)) * RAD_TO_DEG;
 8001a9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001aa0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001aa4:	f7fe fde0 	bl	8000668 <__aeabi_dmul>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4690      	mov	r8, r2
 8001aae:	4699      	mov	r9, r3
 8001ab0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ab4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ab8:	f7fe fdd6 	bl	8000668 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4640      	mov	r0, r8
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	f7fe fc1a 	bl	80002fc <__adddf3>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	ec43 2b17 	vmov	d7, r2, r3
 8001ad0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad4:	eef0 0a67 	vmov.f32	s1, s15
 8001ad8:	f01d fa5e 	bl	801ef98 <sqrt>
 8001adc:	ec53 2b10 	vmov	r2, r3, d0
 8001ae0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ae4:	f7fe feea 	bl	80008bc <__aeabi_ddiv>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	ec43 2b17 	vmov	d7, r2, r3
 8001af0:	eeb0 0a47 	vmov.f32	s0, s14
 8001af4:	eef0 0a67 	vmov.f32	s1, s15
 8001af8:	f01d fa7a 	bl	801eff0 <atan>
 8001afc:	ec51 0b10 	vmov	r0, r1, d0
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b70      	ldr	r3, [pc, #448]	@ (8001cc8 <calculate_kalm_angles+0x250>)
 8001b06:	f7fe fdaf 	bl	8000668 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	a36b      	add	r3, pc, #428	@ (adr r3, 8001cc0 <calculate_kalm_angles+0x248>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fed0 	bl	80008bc <__aeabi_ddiv>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double angleY = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * RAD_TO_DEG;
 8001b24:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b28:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001b2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b34:	f7fe fd98 	bl	8000668 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4690      	mov	r8, r2
 8001b3e:	4699      	mov	r9, r3
 8001b40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b48:	f7fe fd8e 	bl	8000668 <__aeabi_dmul>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4640      	mov	r0, r8
 8001b52:	4649      	mov	r1, r9
 8001b54:	f7fe fbd2 	bl	80002fc <__adddf3>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	ec43 2b17 	vmov	d7, r2, r3
 8001b60:	eeb0 0a47 	vmov.f32	s0, s14
 8001b64:	eef0 0a67 	vmov.f32	s1, s15
 8001b68:	f01d fa16 	bl	801ef98 <sqrt>
 8001b6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b70:	eef0 7a60 	vmov.f32	s15, s1
 8001b74:	eeb0 1a47 	vmov.f32	s2, s14
 8001b78:	eef0 1a67 	vmov.f32	s3, s15
 8001b7c:	ec45 4b10 	vmov	d0, r4, r5
 8001b80:	f01d fa08 	bl	801ef94 <atan2>
 8001b84:	ec51 0b10 	vmov	r0, r1, d0
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	4b4e      	ldr	r3, [pc, #312]	@ (8001cc8 <calculate_kalm_angles+0x250>)
 8001b8e:	f7fe fd6b 	bl	8000668 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	a349      	add	r3, pc, #292	@ (adr r3, 8001cc0 <calculate_kalm_angles+0x248>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fe8c 	bl	80008bc <__aeabi_ddiv>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	double ratedX = Gx;
 8001bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double ratedY = Gy;
 8001bb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bb8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	rotation_kalm.roll = Kalman_Angle(&kalmanX, angleX, ratedX, DT);
 8001bbc:	ed97 2a01 	vldr	s4, [r7, #4]
 8001bc0:	ed97 1b10 	vldr	d1, [r7, #64]	@ 0x40
 8001bc4:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8001bc8:	4840      	ldr	r0, [pc, #256]	@ (8001ccc <calculate_kalm_angles+0x254>)
 8001bca:	f000 f8dd 	bl	8001d88 <Kalman_Angle>
 8001bce:	eeb0 7a40 	vmov.f32	s14, s0
 8001bd2:	eef0 7a60 	vmov.f32	s15, s1
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd0 <calculate_kalm_angles+0x258>)
 8001bd8:	ed83 7b00 	vstr	d7, [r3]
	rotation_kalm.pitch = Kalman_Angle(&kalmanY, angleY, ratedY, DT);
 8001bdc:	ed97 2a01 	vldr	s4, [r7, #4]
 8001be0:	ed97 1b0e 	vldr	d1, [r7, #56]	@ 0x38
 8001be4:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001be8:	483a      	ldr	r0, [pc, #232]	@ (8001cd4 <calculate_kalm_angles+0x25c>)
 8001bea:	f000 f8cd 	bl	8001d88 <Kalman_Angle>
 8001bee:	eeb0 7a40 	vmov.f32	s14, s0
 8001bf2:	eef0 7a60 	vmov.f32	s15, s1
 8001bf6:	4b36      	ldr	r3, [pc, #216]	@ (8001cd0 <calculate_kalm_angles+0x258>)
 8001bf8:	ed83 7b02 	vstr	d7, [r3, #8]
	rotation_kalm.yaw += (Gz * RAD_TO_DEG) * DT;
 8001bfc:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <calculate_kalm_angles+0x258>)
 8001bfe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	4b30      	ldr	r3, [pc, #192]	@ (8001cc8 <calculate_kalm_angles+0x250>)
 8001c08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c0c:	f7fe fd2c 	bl	8000668 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	a329      	add	r3, pc, #164	@ (adr r3, 8001cc0 <calculate_kalm_angles+0x248>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fe4d 	bl	80008bc <__aeabi_ddiv>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4690      	mov	r8, r2
 8001c28:	4699      	mov	r9, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fcc4 	bl	80005b8 <__aeabi_f2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4640      	mov	r0, r8
 8001c36:	4649      	mov	r1, r9
 8001c38:	f7fe fd16 	bl	8000668 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4620      	mov	r0, r4
 8001c42:	4629      	mov	r1, r5
 8001c44:	f7fe fb5a 	bl	80002fc <__adddf3>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4920      	ldr	r1, [pc, #128]	@ (8001cd0 <calculate_kalm_angles+0x258>)
 8001c4e:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if (rotation_kalm.yaw > 180.0){
 8001c52:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd0 <calculate_kalm_angles+0x258>)
 8001c54:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <calculate_kalm_angles+0x250>)
 8001c5e:	f7fe ff93 	bl	8000b88 <__aeabi_dcmpgt>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00d      	beq.n	8001c84 <calculate_kalm_angles+0x20c>
    	rotation_kalm.yaw -= 360.0;
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <calculate_kalm_angles+0x258>)
 8001c6a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <calculate_kalm_angles+0x260>)
 8001c74:	f7fe fb40 	bl	80002f8 <__aeabi_dsub>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4914      	ldr	r1, [pc, #80]	@ (8001cd0 <calculate_kalm_angles+0x258>)
 8001c7e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    else if (rotation_kalm.yaw < -180.0){
    	rotation_kalm.yaw += 360.0;
    }
}
 8001c82:	e018      	b.n	8001cb6 <calculate_kalm_angles+0x23e>
    else if (rotation_kalm.yaw < -180.0){
 8001c84:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <calculate_kalm_angles+0x258>)
 8001c86:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <calculate_kalm_angles+0x264>)
 8001c90:	f7fe ff5c 	bl	8000b4c <__aeabi_dcmplt>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d100      	bne.n	8001c9c <calculate_kalm_angles+0x224>
}
 8001c9a:	e00c      	b.n	8001cb6 <calculate_kalm_angles+0x23e>
    	rotation_kalm.yaw += 360.0;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <calculate_kalm_angles+0x258>)
 8001c9e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <calculate_kalm_angles+0x260>)
 8001ca8:	f7fe fb28 	bl	80002fc <__adddf3>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4907      	ldr	r1, [pc, #28]	@ (8001cd0 <calculate_kalm_angles+0x258>)
 8001cb2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001cb6:	bf00      	nop
 8001cb8:	3758      	adds	r7, #88	@ 0x58
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cc0:	54442d18 	.word	0x54442d18
 8001cc4:	400921fb 	.word	0x400921fb
 8001cc8:	40668000 	.word	0x40668000
 8001ccc:	20001378 	.word	0x20001378
 8001cd0:	20001348 	.word	0x20001348
 8001cd4:	200013c8 	.word	0x200013c8
 8001cd8:	40768000 	.word	0x40768000
 8001cdc:	c0668000 	.word	0xc0668000

08001ce0 <Kalman_Init>:

void Kalman_Init(KalmanFilter_t* kf) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    kf->Q_angle = 0.001f;
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	a321      	add	r3, pc, #132	@ (adr r3, 8001d70 <Kalman_Init+0x90>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	e9c1 2300 	strd	r2, r3, [r1]
    kf->Q_bias  = 0.003f;
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	a320      	add	r3, pc, #128	@ (adr r3, 8001d78 <Kalman_Init+0x98>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    kf->R_measure = 0.03f;
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	a31f      	add	r3, pc, #124	@ (adr r3, 8001d80 <Kalman_Init+0xa0>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	e9c1 2304 	strd	r2, r3, [r1, #16]

    kf->angle = 0.0f;
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9c1 2306 	strd	r2, r3, [r1, #24]
    kf->bias = 0.0f;
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9c1 2308 	strd	r2, r3, [r1, #32]

    kf->P[0][0] = 0.0f;
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kf->P[0][1] = 0.0f;
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kf->P[1][0] = 0.0f;
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    kf->P[1][1] = 0.0f;
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	f3af 8000 	nop.w
 8001d70:	e0000000 	.word	0xe0000000
 8001d74:	3f50624d 	.word	0x3f50624d
 8001d78:	c0000000 	.word	0xc0000000
 8001d7c:	3f689374 	.word	0x3f689374
 8001d80:	e0000000 	.word	0xe0000000
 8001d84:	3f9eb851 	.word	0x3f9eb851

08001d88 <Kalman_Angle>:

double Kalman_Angle(KalmanFilter_t* kf, double new_angle, double new_rate, float DT){
 8001d88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d8c:	b092      	sub	sp, #72	@ 0x48
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6178      	str	r0, [r7, #20]
 8001d92:	ed87 0b02 	vstr	d0, [r7, #8]
 8001d96:	ed87 1b00 	vstr	d1, [r7]
 8001d9a:	ed87 2a04 	vstr	s4, [r7, #16]

    kf->rate = new_rate - kf->bias;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001da8:	f7fe faa6 	bl	80002f8 <__aeabi_dsub>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	6979      	ldr	r1, [r7, #20]
 8001db2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    kf->angle += DT * kf->rate;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001dbc:	6938      	ldr	r0, [r7, #16]
 8001dbe:	f7fe fbfb 	bl	80005b8 <__aeabi_f2d>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001dc8:	f7fe fc4e 	bl	8000668 <__aeabi_dmul>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	f7fe fa92 	bl	80002fc <__adddf3>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	6979      	ldr	r1, [r7, #20]
 8001dde:	e9c1 2306 	strd	r2, r3, [r1, #24]

    kf->P[0][0] += DT * (DT * kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + kf->Q_angle);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001de8:	6938      	ldr	r0, [r7, #16]
 8001dea:	f7fe fbe5 	bl	80005b8 <__aeabi_f2d>
 8001dee:	4680      	mov	r8, r0
 8001df0:	4689      	mov	r9, r1
 8001df2:	6938      	ldr	r0, [r7, #16]
 8001df4:	f7fe fbe0 	bl	80005b8 <__aeabi_f2d>
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001dfe:	f7fe fc33 	bl	8000668 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001e10:	f7fe fa72 	bl	80002f8 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001e22:	f7fe fa69 	bl	80002f8 <__aeabi_dsub>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fa62 	bl	80002fc <__adddf3>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4640      	mov	r0, r8
 8001e3e:	4649      	mov	r1, r9
 8001e40:	f7fe fc12 	bl	8000668 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4620      	mov	r0, r4
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f7fe fa56 	bl	80002fc <__adddf3>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	6979      	ldr	r1, [r7, #20]
 8001e56:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kf->P[0][1] -= DT * kf->P[1][1];
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001e60:	6938      	ldr	r0, [r7, #16]
 8001e62:	f7fe fba9 	bl	80005b8 <__aeabi_f2d>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001e6c:	f7fe fbfc 	bl	8000668 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe fa3e 	bl	80002f8 <__aeabi_dsub>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	6979      	ldr	r1, [r7, #20]
 8001e82:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kf->P[1][0] -= DT * kf->P[1][1];
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001e8c:	6938      	ldr	r0, [r7, #16]
 8001e8e:	f7fe fb93 	bl	80005b8 <__aeabi_f2d>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001e98:	f7fe fbe6 	bl	8000668 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	f7fe fa28 	bl	80002f8 <__aeabi_dsub>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	6979      	ldr	r1, [r7, #20]
 8001eae:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    kf->P[1][1] += kf->Q_bias * DT;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001ebe:	6938      	ldr	r0, [r7, #16]
 8001ec0:	f7fe fb7a 	bl	80005b8 <__aeabi_f2d>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4640      	mov	r0, r8
 8001eca:	4649      	mov	r1, r9
 8001ecc:	f7fe fbcc 	bl	8000668 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	f7fe fa10 	bl	80002fc <__adddf3>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	6979      	ldr	r1, [r7, #20]
 8001ee2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    double S = kf->P[0][0] + kf->R_measure;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ef2:	f7fe fa03 	bl	80002fc <__adddf3>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double K[2];
    K[0] = kf->P[0][0] / S;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001f04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f08:	f7fe fcd8 	bl	80008bc <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	e9c7 2306 	strd	r2, r3, [r7, #24]
    K[1] = kf->P[1][0] / S;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f1e:	f7fe fccd 	bl	80008bc <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	e9c7 2308 	strd	r2, r3, [r7, #32]

    double y = new_angle - kf->angle;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f34:	f7fe f9e0 	bl	80002f8 <__aeabi_dsub>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    kf->angle += K[0] * y;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001f46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f4a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f4e:	f7fe fb8b 	bl	8000668 <__aeabi_dmul>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4620      	mov	r0, r4
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f7fe f9cf 	bl	80002fc <__adddf3>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	6979      	ldr	r1, [r7, #20]
 8001f64:	e9c1 2306 	strd	r2, r3, [r1, #24]
    kf->bias += K[1] * y;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001f6e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f76:	f7fe fb77 	bl	8000668 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe f9bb 	bl	80002fc <__adddf3>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	6979      	ldr	r1, [r7, #20]
 8001f8c:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = kf->P[0][0];
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001f96:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double P01_temp = kf->P[0][1];
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001fa0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    kf->P[0][0] -= K[0] * P00_temp;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001faa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001fb2:	f7fe fb59 	bl	8000668 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4620      	mov	r0, r4
 8001fbc:	4629      	mov	r1, r5
 8001fbe:	f7fe f99b 	bl	80002f8 <__aeabi_dsub>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	6979      	ldr	r1, [r7, #20]
 8001fc8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kf->P[0][1] -= K[0] * P01_temp;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001fd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fda:	f7fe fb45 	bl	8000668 <__aeabi_dmul>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	f7fe f987 	bl	80002f8 <__aeabi_dsub>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	6979      	ldr	r1, [r7, #20]
 8001ff0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kf->P[1][0] -= K[1] * P00_temp;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001ffa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ffe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002002:	f7fe fb31 	bl	8000668 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4620      	mov	r0, r4
 800200c:	4629      	mov	r1, r5
 800200e:	f7fe f973 	bl	80002f8 <__aeabi_dsub>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	6979      	ldr	r1, [r7, #20]
 8002018:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    kf->P[1][1] -= K[1] * P01_temp;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 8002022:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800202a:	f7fe fb1d 	bl	8000668 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4620      	mov	r0, r4
 8002034:	4629      	mov	r1, r5
 8002036:	f7fe f95f 	bl	80002f8 <__aeabi_dsub>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	6979      	ldr	r1, [r7, #20]
 8002040:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    return kf->angle;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800204a:	ec43 2b17 	vmov	d7, r2, r3
}
 800204e:	eeb0 0a47 	vmov.f32	s0, s14
 8002052:	eef0 0a67 	vmov.f32	s1, s15
 8002056:	3748      	adds	r7, #72	@ 0x48
 8002058:	46bd      	mov	sp, r7
 800205a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002060 <map_adc_to_output>:

float map_adc_to_output(int adc_value) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	float mapped = ((adc_value - ADC_MIN) * (OUTPUT_MAX - OUTPUT_MIN) / (ADC_MAX - ADC_MIN)) + OUTPUT_MIN;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002072:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002076:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80020d0 <map_adc_to_output+0x70>
 800207a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800207e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002086:	edc7 7a03 	vstr	s15, [r7, #12]
	float output = (fabs(mapped) < 0.03) ? 0.0 : mapped;
 800208a:	edd7 7a03 	vldr	s15, [r7, #12]
 800208e:	eef0 7ae7 	vabs.f32	s15, s15
 8002092:	ee17 0a90 	vmov	r0, s15
 8002096:	f7fe fa8f 	bl	80005b8 <__aeabi_f2d>
 800209a:	a30b      	add	r3, pc, #44	@ (adr r3, 80020c8 <map_adc_to_output+0x68>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe fd54 	bl	8000b4c <__aeabi_dcmplt>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <map_adc_to_output+0x50>
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e000      	b.n	80020b2 <map_adc_to_output+0x52>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	60bb      	str	r3, [r7, #8]
	return output;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	ee07 3a90 	vmov	s15, r3
}
 80020ba:	eeb0 0a67 	vmov.f32	s0, s15
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	f3af 8000 	nop.w
 80020c8:	eb851eb8 	.word	0xeb851eb8
 80020cc:	3f9eb851 	.word	0x3f9eb851
 80020d0:	457ff000 	.word	0x457ff000
 80020d4:	00000000 	.word	0x00000000

080020d8 <timer_callback>:

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80020d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020dc:	ed2d 8b04 	vpush	{d8-d9}
 80020e0:	b0ba      	sub	sp, #232	@ 0xe8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8660 	beq.w	8002db2 <timer_callback+0xcda>
		if (main_Mode == 1)
 80020f2:	4bb3      	ldr	r3, [pc, #716]	@ (80023c0 <timer_callback+0x2e8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	f040 823c 	bne.w	8002574 <timer_callback+0x49c>
		{
			uint32_t i2cError = HAL_I2C_GetError(&hi2c1);
 80020fc:	48b1      	ldr	r0, [pc, #708]	@ (80023c4 <timer_callback+0x2ec>)
 80020fe:	f005 fc6b 	bl	80079d8 <HAL_I2C_GetError>
 8002102:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
			if (i2cError == HAL_I2C_ERROR_NONE){
 8002106:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 8213 	bne.w	8002536 <timer_callback+0x45e>
				if (is_calib || on_calib){
 8002110:	4bad      	ldr	r3, [pc, #692]	@ (80023c8 <timer_callback+0x2f0>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d104      	bne.n	8002122 <timer_callback+0x4a>
 8002118:	4bac      	ldr	r3, [pc, #688]	@ (80023cc <timer_callback+0x2f4>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 863f 	beq.w	8002da0 <timer_callback+0xcc8>
					MPU6050_Read_All(&hi2c1, &MPU6050);
 8002122:	49ab      	ldr	r1, [pc, #684]	@ (80023d0 <timer_callback+0x2f8>)
 8002124:	48a7      	ldr	r0, [pc, #668]	@ (80023c4 <timer_callback+0x2ec>)
 8002126:	f009 fa07 	bl	800b538 <MPU6050_Read_All>

					double Ax = (GRAVITY * MPU6050.Ax) - accl_offset.x;
 800212a:	4ba9      	ldr	r3, [pc, #676]	@ (80023d0 <timer_callback+0x2f8>)
 800212c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002130:	a39f      	add	r3, pc, #636	@ (adr r3, 80023b0 <timer_callback+0x2d8>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe fa97 	bl	8000668 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	4ba4      	ldr	r3, [pc, #656]	@ (80023d4 <timer_callback+0x2fc>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	f7fe f8d6 	bl	80002f8 <__aeabi_dsub>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
					double Ay = (GRAVITY * MPU6050.Ay) - accl_offset.y;
 8002154:	4b9e      	ldr	r3, [pc, #632]	@ (80023d0 <timer_callback+0x2f8>)
 8002156:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800215a:	a395      	add	r3, pc, #596	@ (adr r3, 80023b0 <timer_callback+0x2d8>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fa82 	bl	8000668 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	4b99      	ldr	r3, [pc, #612]	@ (80023d4 <timer_callback+0x2fc>)
 800216e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002172:	f7fe f8c1 	bl	80002f8 <__aeabi_dsub>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
					double Az = (GRAVITY * MPU6050.Az) - accl_offset.z;
 800217e:	4b94      	ldr	r3, [pc, #592]	@ (80023d0 <timer_callback+0x2f8>)
 8002180:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002184:	a38a      	add	r3, pc, #552	@ (adr r3, 80023b0 <timer_callback+0x2d8>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fa6d 	bl	8000668 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	4b8f      	ldr	r3, [pc, #572]	@ (80023d4 <timer_callback+0x2fc>)
 8002198:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800219c:	f7fe f8ac 	bl	80002f8 <__aeabi_dsub>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

					double Gx = (DEG_TO_RAD * MPU6050.Gx) - gyro_offset.x;
 80021a8:	4b89      	ldr	r3, [pc, #548]	@ (80023d0 <timer_callback+0x2f8>)
 80021aa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80021ae:	a382      	add	r3, pc, #520	@ (adr r3, 80023b8 <timer_callback+0x2e0>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f7fe fa58 	bl	8000668 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	4b85      	ldr	r3, [pc, #532]	@ (80023d8 <timer_callback+0x300>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe f897 	bl	80002f8 <__aeabi_dsub>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
					double Gy = (DEG_TO_RAD * MPU6050.Gy) - gyro_offset.y;
 80021d2:	4b7f      	ldr	r3, [pc, #508]	@ (80023d0 <timer_callback+0x2f8>)
 80021d4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80021d8:	a377      	add	r3, pc, #476	@ (adr r3, 80023b8 <timer_callback+0x2e0>)
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f7fe fa43 	bl	8000668 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4610      	mov	r0, r2
 80021e8:	4619      	mov	r1, r3
 80021ea:	4b7b      	ldr	r3, [pc, #492]	@ (80023d8 <timer_callback+0x300>)
 80021ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021f0:	f7fe f882 	bl	80002f8 <__aeabi_dsub>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
					double Gz = (DEG_TO_RAD * MPU6050.Gz) - gyro_offset.z;
 80021fc:	4b74      	ldr	r3, [pc, #464]	@ (80023d0 <timer_callback+0x2f8>)
 80021fe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002202:	a36d      	add	r3, pc, #436	@ (adr r3, 80023b8 <timer_callback+0x2e0>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f7fe fa2e 	bl	8000668 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	4b70      	ldr	r3, [pc, #448]	@ (80023d8 <timer_callback+0x300>)
 8002216:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800221a:	f7fe f86d 	bl	80002f8 <__aeabi_dsub>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

					mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8002226:	f011 fcc9 	bl	8013bbc <rmw_uros_epoch_millis>
 800222a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	f7fe fd19 	bl	8000c68 <__aeabi_ldivmod>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4b68      	ldr	r3, [pc, #416]	@ (80023dc <timer_callback+0x304>)
 800223c:	601a      	str	r2, [r3, #0]
					mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 800223e:	f011 fccb 	bl	8013bd8 <rmw_uros_epoch_nanos>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4b65      	ldr	r3, [pc, #404]	@ (80023dc <timer_callback+0x304>)
 8002248:	605a      	str	r2, [r3, #4]

					mpu6050_msg.linear_acceleration.x = Ax;
 800224a:	4964      	ldr	r1, [pc, #400]	@ (80023dc <timer_callback+0x304>)
 800224c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002250:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
					mpu6050_msg.linear_acceleration.y = Ay;
 8002254:	4961      	ldr	r1, [pc, #388]	@ (80023dc <timer_callback+0x304>)
 8002256:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800225a:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
					mpu6050_msg.linear_acceleration.z = Az;
 800225e:	495f      	ldr	r1, [pc, #380]	@ (80023dc <timer_callback+0x304>)
 8002260:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002264:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

					mpu6050_msg.angular_velocity.x = Gx;
 8002268:	495c      	ldr	r1, [pc, #368]	@ (80023dc <timer_callback+0x304>)
 800226a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800226e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
					mpu6050_msg.angular_velocity.y = Gy;
 8002272:	495a      	ldr	r1, [pc, #360]	@ (80023dc <timer_callback+0x304>)
 8002274:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002278:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
					mpu6050_msg.angular_velocity.z = Gz;
 800227c:	4957      	ldr	r1, [pc, #348]	@ (80023dc <timer_callback+0x304>)
 800227e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002282:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

					rcl_ret_t ret = rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL);
 8002286:	2200      	movs	r2, #0
 8002288:	4954      	ldr	r1, [pc, #336]	@ (80023dc <timer_callback+0x304>)
 800228a:	4855      	ldr	r0, [pc, #340]	@ (80023e0 <timer_callback+0x308>)
 800228c:	f00e fdb6 	bl	8010dfc <rcl_publish>
 8002290:	64f8      	str	r0, [r7, #76]	@ 0x4c
					if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8002292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d004      	beq.n	80022a2 <timer_callback+0x1ca>
 8002298:	f240 1189 	movw	r1, #393	@ 0x189
 800229c:	4851      	ldr	r0, [pc, #324]	@ (80023e4 <timer_callback+0x30c>)
 800229e:	f01b fdef 	bl	801de80 <iprintf>

					rotation_real.roll = MPU6050.KalmanAngleX;
 80022a2:	4b4b      	ldr	r3, [pc, #300]	@ (80023d0 <timer_callback+0x2f8>)
 80022a4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80022a8:	494f      	ldr	r1, [pc, #316]	@ (80023e8 <timer_callback+0x310>)
 80022aa:	e9c1 2300 	strd	r2, r3, [r1]
					rotation_real.pitch = MPU6050.KalmanAngleY;
 80022ae:	4b48      	ldr	r3, [pc, #288]	@ (80023d0 <timer_callback+0x2f8>)
 80022b0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80022b4:	494c      	ldr	r1, [pc, #304]	@ (80023e8 <timer_callback+0x310>)
 80022b6:	e9c1 2302 	strd	r2, r3, [r1, #8]

					calculate_gyro_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 80022ba:	a33d      	add	r3, pc, #244	@ (adr r3, 80023b0 <timer_callback+0x2d8>)
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80022c4:	f7fe fafa 	bl	80008bc <__aeabi_ddiv>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	ec43 2b18 	vmov	d8, r2, r3
 80022d0:	a337      	add	r3, pc, #220	@ (adr r3, 80023b0 <timer_callback+0x2d8>)
 80022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80022da:	f7fe faef 	bl	80008bc <__aeabi_ddiv>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	ec43 2b19 	vmov	d9, r2, r3
 80022e6:	a332      	add	r3, pc, #200	@ (adr r3, 80023b0 <timer_callback+0x2d8>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80022f0:	f7fe fae4 	bl	80008bc <__aeabi_ddiv>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	ec43 2b17 	vmov	d7, r2, r3
 80022fc:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 80023ec <timer_callback+0x314>
 8002300:	ed97 5b14 	vldr	d5, [r7, #80]	@ 0x50
 8002304:	ed97 4b16 	vldr	d4, [r7, #88]	@ 0x58
 8002308:	ed97 3b18 	vldr	d3, [r7, #96]	@ 0x60
 800230c:	eeb0 2a47 	vmov.f32	s4, s14
 8002310:	eef0 2a67 	vmov.f32	s5, s15
 8002314:	eeb0 1a49 	vmov.f32	s2, s18
 8002318:	eef0 1a69 	vmov.f32	s3, s19
 800231c:	eeb0 0a48 	vmov.f32	s0, s16
 8002320:	eef0 0a68 	vmov.f32	s1, s17
 8002324:	f7fe ffe4 	bl	80012f0 <calculate_gyro_angles>
					calculate_accl_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8002328:	a321      	add	r3, pc, #132	@ (adr r3, 80023b0 <timer_callback+0x2d8>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002332:	f7fe fac3 	bl	80008bc <__aeabi_ddiv>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	ec43 2b18 	vmov	d8, r2, r3
 800233e:	a31c      	add	r3, pc, #112	@ (adr r3, 80023b0 <timer_callback+0x2d8>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002348:	f7fe fab8 	bl	80008bc <__aeabi_ddiv>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	ec43 2b19 	vmov	d9, r2, r3
 8002354:	a316      	add	r3, pc, #88	@ (adr r3, 80023b0 <timer_callback+0x2d8>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800235e:	f7fe faad 	bl	80008bc <__aeabi_ddiv>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	ec43 2b17 	vmov	d7, r2, r3
 800236a:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 80023ec <timer_callback+0x314>
 800236e:	ed97 5b14 	vldr	d5, [r7, #80]	@ 0x50
 8002372:	ed97 4b16 	vldr	d4, [r7, #88]	@ 0x58
 8002376:	ed97 3b18 	vldr	d3, [r7, #96]	@ 0x60
 800237a:	eeb0 2a47 	vmov.f32	s4, s14
 800237e:	eef0 2a67 	vmov.f32	s5, s15
 8002382:	eeb0 1a49 	vmov.f32	s2, s18
 8002386:	eef0 1a69 	vmov.f32	s3, s19
 800238a:	eeb0 0a48 	vmov.f32	s0, s16
 800238e:	eef0 0a68 	vmov.f32	s1, s17
 8002392:	f7ff f885 	bl	80014a0 <calculate_accl_angles>
					calculate_comp_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8002396:	a306      	add	r3, pc, #24	@ (adr r3, 80023b0 <timer_callback+0x2d8>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80023a0:	f7fe fa8c 	bl	80008bc <__aeabi_ddiv>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	ec43 2b18 	vmov	d8, r2, r3
 80023ac:	e020      	b.n	80023f0 <timer_callback+0x318>
 80023ae:	bf00      	nop
 80023b0:	3a92a305 	.word	0x3a92a305
 80023b4:	40239d01 	.word	0x40239d01
 80023b8:	a2529d39 	.word	0xa2529d39
 80023bc:	3f91df46 	.word	0x3f91df46
 80023c0:	200014f4 	.word	0x200014f4
 80023c4:	20005060 	.word	0x20005060
 80023c8:	20001438 	.word	0x20001438
 80023cc:	20001439 	.word	0x20001439
 80023d0:	20001270 	.word	0x20001270
 80023d4:	200012d0 	.word	0x200012d0
 80023d8:	200012e8 	.word	0x200012e8
 80023dc:	20000f28 	.word	0x20000f28
 80023e0:	20000f20 	.word	0x20000f20
 80023e4:	0801f69c 	.word	0x0801f69c
 80023e8:	20001360 	.word	0x20001360
 80023ec:	3c23d70a 	.word	0x3c23d70a
 80023f0:	a387      	add	r3, pc, #540	@ (adr r3, 8002610 <timer_callback+0x538>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80023fa:	f7fe fa5f 	bl	80008bc <__aeabi_ddiv>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	ec43 2b19 	vmov	d9, r2, r3
 8002406:	a382      	add	r3, pc, #520	@ (adr r3, 8002610 <timer_callback+0x538>)
 8002408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002410:	f7fe fa54 	bl	80008bc <__aeabi_ddiv>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	ec43 2b17 	vmov	d7, r2, r3
 800241c:	ed9f 6a80 	vldr	s12, [pc, #512]	@ 8002620 <timer_callback+0x548>
 8002420:	ed97 5b14 	vldr	d5, [r7, #80]	@ 0x50
 8002424:	ed97 4b16 	vldr	d4, [r7, #88]	@ 0x58
 8002428:	ed97 3b18 	vldr	d3, [r7, #96]	@ 0x60
 800242c:	eeb0 2a47 	vmov.f32	s4, s14
 8002430:	eef0 2a67 	vmov.f32	s5, s15
 8002434:	eeb0 1a49 	vmov.f32	s2, s18
 8002438:	eef0 1a69 	vmov.f32	s3, s19
 800243c:	eeb0 0a48 	vmov.f32	s0, s16
 8002440:	eef0 0a68 	vmov.f32	s1, s17
 8002444:	f7ff f918 	bl	8001678 <calculate_comp_angles>
					calculate_kalm_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8002448:	a371      	add	r3, pc, #452	@ (adr r3, 8002610 <timer_callback+0x538>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002452:	f7fe fa33 	bl	80008bc <__aeabi_ddiv>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	ec43 2b18 	vmov	d8, r2, r3
 800245e:	a36c      	add	r3, pc, #432	@ (adr r3, 8002610 <timer_callback+0x538>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002468:	f7fe fa28 	bl	80008bc <__aeabi_ddiv>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	ec43 2b19 	vmov	d9, r2, r3
 8002474:	a366      	add	r3, pc, #408	@ (adr r3, 8002610 <timer_callback+0x538>)
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800247e:	f7fe fa1d 	bl	80008bc <__aeabi_ddiv>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	ec43 2b17 	vmov	d7, r2, r3
 800248a:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 8002620 <timer_callback+0x548>
 800248e:	ed97 5b14 	vldr	d5, [r7, #80]	@ 0x50
 8002492:	ed97 4b16 	vldr	d4, [r7, #88]	@ 0x58
 8002496:	ed97 3b18 	vldr	d3, [r7, #96]	@ 0x60
 800249a:	eeb0 2a47 	vmov.f32	s4, s14
 800249e:	eef0 2a67 	vmov.f32	s5, s15
 80024a2:	eeb0 1a49 	vmov.f32	s2, s18
 80024a6:	eef0 1a69 	vmov.f32	s3, s19
 80024aa:	eeb0 0a48 	vmov.f32	s0, s16
 80024ae:	eef0 0a68 	vmov.f32	s1, s17
 80024b2:	f7ff fae1 	bl	8001a78 <calculate_kalm_angles>

					cmd_vel_msg.linear.x = rotation_comp.roll * DEG_TO_RAD;
 80024b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002624 <timer_callback+0x54c>)
 80024b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024bc:	a356      	add	r3, pc, #344	@ (adr r3, 8002618 <timer_callback+0x540>)
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	f7fe f8d1 	bl	8000668 <__aeabi_dmul>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	4b55      	ldr	r3, [pc, #340]	@ (8002628 <timer_callback+0x550>)
 80024d4:	f7fe f9f2 	bl	80008bc <__aeabi_ddiv>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4953      	ldr	r1, [pc, #332]	@ (800262c <timer_callback+0x554>)
 80024de:	e9c1 2300 	strd	r2, r3, [r1]
					cmd_vel_msg.angular.z = -(rotation_comp.pitch * DEG_TO_RAD);
 80024e2:	4b50      	ldr	r3, [pc, #320]	@ (8002624 <timer_callback+0x54c>)
 80024e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024e8:	a34b      	add	r3, pc, #300	@ (adr r3, 8002618 <timer_callback+0x540>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fe f8bb 	bl	8000668 <__aeabi_dmul>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002628 <timer_callback+0x550>)
 8002500:	f7fe f9dc 	bl	80008bc <__aeabi_ddiv>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4690      	mov	r8, r2
 800250a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800250e:	4b47      	ldr	r3, [pc, #284]	@ (800262c <timer_callback+0x554>)
 8002510:	e9c3 890a 	strd	r8, r9, [r3, #40]	@ 0x28

					rcl_ret_t rett = rcl_publish(&cmd_vel_publisher, &cmd_vel_msg, NULL);
 8002514:	2200      	movs	r2, #0
 8002516:	4945      	ldr	r1, [pc, #276]	@ (800262c <timer_callback+0x554>)
 8002518:	4845      	ldr	r0, [pc, #276]	@ (8002630 <timer_callback+0x558>)
 800251a:	f00e fc6f 	bl	8010dfc <rcl_publish>
 800251e:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (rett != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8002520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 843c 	beq.w	8002da0 <timer_callback+0xcc8>
 8002528:	f240 1197 	movw	r1, #407	@ 0x197
 800252c:	4841      	ldr	r0, [pc, #260]	@ (8002634 <timer_callback+0x55c>)
 800252e:	f01b fca7 	bl	801de80 <iprintf>
 8002532:	f000 bc35 	b.w	8002da0 <timer_callback+0xcc8>
				}
			}
			else
			{
				static uint32_t timestamp = 0;
				if (timestamp <= HAL_GetTick()){
 8002536:	f002 f931 	bl	800479c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	4b3e      	ldr	r3, [pc, #248]	@ (8002638 <timer_callback+0x560>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	f0c0 842d 	bcc.w	8002da0 <timer_callback+0xcc8>
					timestamp = HAL_GetTick() + 1000;
 8002546:	f002 f929 	bl	800479c <HAL_GetTick>
 800254a:	4603      	mov	r3, r0
 800254c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002550:	4a39      	ldr	r2, [pc, #228]	@ (8002638 <timer_callback+0x560>)
 8002552:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002554:	2120      	movs	r1, #32
 8002556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800255a:	f004 ff13 	bl	8007384 <HAL_GPIO_TogglePin>
					HAL_I2C_DeInit(&hi2c1);
 800255e:	4837      	ldr	r0, [pc, #220]	@ (800263c <timer_callback+0x564>)
 8002560:	f004 ffdd 	bl	800751e <HAL_I2C_DeInit>
					HAL_I2C_Init(&hi2c1);
 8002564:	4835      	ldr	r0, [pc, #212]	@ (800263c <timer_callback+0x564>)
 8002566:	f004 ff3f 	bl	80073e8 <HAL_I2C_Init>
					MPU6050_Init(&hi2c1);
 800256a:	4834      	ldr	r0, [pc, #208]	@ (800263c <timer_callback+0x564>)
 800256c:	f008 ff8a 	bl	800b484 <MPU6050_Init>
 8002570:	f000 bc16 	b.w	8002da0 <timer_callback+0xcc8>
				}
			}
		}

		else if (main_Mode == 0)
 8002574:	4b32      	ldr	r3, [pc, #200]	@ (8002640 <timer_callback+0x568>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f040 8203 	bne.w	8002984 <timer_callback+0x8ac>
		{
			if (joy.B == GPIO_PIN_RESET && state_keep_B == 0)
 800257e:	4b31      	ldr	r3, [pc, #196]	@ (8002644 <timer_callback+0x56c>)
 8002580:	785b      	ldrb	r3, [r3, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <timer_callback+0x4ce>
 8002586:	4b30      	ldr	r3, [pc, #192]	@ (8002648 <timer_callback+0x570>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10b      	bne.n	80025a6 <timer_callback+0x4ce>
			{
				wait++;
 800258e:	4b2f      	ldr	r3, [pc, #188]	@ (800264c <timer_callback+0x574>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4b2d      	ldr	r3, [pc, #180]	@ (800264c <timer_callback+0x574>)
 8002598:	701a      	strb	r2, [r3, #0]
				state_keep_B = 1;
 800259a:	4b2b      	ldr	r3, [pc, #172]	@ (8002648 <timer_callback+0x570>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 80025a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <timer_callback+0x578>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
			}

			if (joy.B == GPIO_PIN_SET && state_keep_B == 1 && B_count == 0 && wait > 0)
 80025a6:	4b27      	ldr	r3, [pc, #156]	@ (8002644 <timer_callback+0x56c>)
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d15e      	bne.n	800266c <timer_callback+0x594>
 80025ae:	4b26      	ldr	r3, [pc, #152]	@ (8002648 <timer_callback+0x570>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d15a      	bne.n	800266c <timer_callback+0x594>
 80025b6:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <timer_callback+0x57c>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d156      	bne.n	800266c <timer_callback+0x594>
 80025be:	4b23      	ldr	r3, [pc, #140]	@ (800264c <timer_callback+0x574>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d052      	beq.n	800266c <timer_callback+0x594>
			{
				keyboard_request.mode.data = "TOB";
 80025c6:	4b24      	ldr	r3, [pc, #144]	@ (8002658 <timer_callback+0x580>)
 80025c8:	4a24      	ldr	r2, [pc, #144]	@ (800265c <timer_callback+0x584>)
 80025ca:	601a      	str	r2, [r3, #0]

				int64_t sq_num;
				rcl_ret_t ret = rcl_send_request(&robot_controller_client, &keyboard_request, &sq_num);
 80025cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025d0:	461a      	mov	r2, r3
 80025d2:	4921      	ldr	r1, [pc, #132]	@ (8002658 <timer_callback+0x580>)
 80025d4:	4822      	ldr	r0, [pc, #136]	@ (8002660 <timer_callback+0x588>)
 80025d6:	f00d ff6d 	bl	80104b4 <rcl_send_request>
 80025da:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

				if (ret != RCL_RET_OK) cq++;
 80025de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <timer_callback+0x51a>
 80025e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <timer_callback+0x58c>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <timer_callback+0x58c>)
 80025f0:	801a      	strh	r2, [r3, #0]

				B_count = 1;
 80025f2:	4b18      	ldr	r3, [pc, #96]	@ (8002654 <timer_callback+0x57c>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
				D_count = 0;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <timer_callback+0x590>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
				state_keep_B = 0;
 80025fe:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <timer_callback+0x570>)
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <timer_callback+0x578>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
			{
 800260a:	e05e      	b.n	80026ca <timer_callback+0x5f2>
 800260c:	f3af 8000 	nop.w
 8002610:	3a92a305 	.word	0x3a92a305
 8002614:	40239d01 	.word	0x40239d01
 8002618:	54442d18 	.word	0x54442d18
 800261c:	400921fb 	.word	0x400921fb
 8002620:	3c23d70a 	.word	0x3c23d70a
 8002624:	20001330 	.word	0x20001330
 8002628:	40668000 	.word	0x40668000
 800262c:	20001070 	.word	0x20001070
 8002630:	20001068 	.word	0x20001068
 8002634:	0801f69c 	.word	0x0801f69c
 8002638:	20004440 	.word	0x20004440
 800263c:	20005060 	.word	0x20005060
 8002640:	200014f4 	.word	0x200014f4
 8002644:	200014ec 	.word	0x200014ec
 8002648:	200014f8 	.word	0x200014f8
 800264c:	200014fc 	.word	0x200014fc
 8002650:	200014fd 	.word	0x200014fd
 8002654:	200014f9 	.word	0x200014f9
 8002658:	20001238 	.word	0x20001238
 800265c:	0801f6b8 	.word	0x0801f6b8
 8002660:	20001234 	.word	0x20001234
 8002664:	200012ce 	.word	0x200012ce
 8002668:	200014fb 	.word	0x200014fb
			}

			else if (joy.B == GPIO_PIN_SET && state_keep_B == 1 && B_count == 1 && wait >= 2)
 800266c:	4b87      	ldr	r3, [pc, #540]	@ (800288c <timer_callback+0x7b4>)
 800266e:	785b      	ldrb	r3, [r3, #1]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d12a      	bne.n	80026ca <timer_callback+0x5f2>
 8002674:	4b86      	ldr	r3, [pc, #536]	@ (8002890 <timer_callback+0x7b8>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d126      	bne.n	80026ca <timer_callback+0x5f2>
 800267c:	4b85      	ldr	r3, [pc, #532]	@ (8002894 <timer_callback+0x7bc>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d122      	bne.n	80026ca <timer_callback+0x5f2>
 8002684:	4b84      	ldr	r3, [pc, #528]	@ (8002898 <timer_callback+0x7c0>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d91e      	bls.n	80026ca <timer_callback+0x5f2>
			{
				keyboard_request.mode.data = "AUT";
 800268c:	4b83      	ldr	r3, [pc, #524]	@ (800289c <timer_callback+0x7c4>)
 800268e:	4a84      	ldr	r2, [pc, #528]	@ (80028a0 <timer_callback+0x7c8>)
 8002690:	601a      	str	r2, [r3, #0]

				int64_t sq_num;
				rcl_ret_t ret = rcl_send_request(&robot_controller_client, &keyboard_request, &sq_num);
 8002692:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002696:	461a      	mov	r2, r3
 8002698:	4980      	ldr	r1, [pc, #512]	@ (800289c <timer_callback+0x7c4>)
 800269a:	4882      	ldr	r0, [pc, #520]	@ (80028a4 <timer_callback+0x7cc>)
 800269c:	f00d ff0a 	bl	80104b4 <rcl_send_request>
 80026a0:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

				if (ret != RCL_RET_OK) cq++;
 80026a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <timer_callback+0x5e0>
 80026ac:	4b7e      	ldr	r3, [pc, #504]	@ (80028a8 <timer_callback+0x7d0>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b7c      	ldr	r3, [pc, #496]	@ (80028a8 <timer_callback+0x7d0>)
 80026b6:	801a      	strh	r2, [r3, #0]

				B_count = 0;
 80026b8:	4b76      	ldr	r3, [pc, #472]	@ (8002894 <timer_callback+0x7bc>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
				state_keep_B = 0;
 80026be:	4b74      	ldr	r3, [pc, #464]	@ (8002890 <timer_callback+0x7b8>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 80026c4:	4b79      	ldr	r3, [pc, #484]	@ (80028ac <timer_callback+0x7d4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
			}

			if (joy.D == GPIO_PIN_RESET)
 80026ca:	4b70      	ldr	r3, [pc, #448]	@ (800288c <timer_callback+0x7b4>)
 80026cc:	78db      	ldrb	r3, [r3, #3]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <timer_callback+0x612>
			{
				wait++;
 80026d2:	4b71      	ldr	r3, [pc, #452]	@ (8002898 <timer_callback+0x7c0>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b6f      	ldr	r3, [pc, #444]	@ (8002898 <timer_callback+0x7c0>)
 80026dc:	701a      	strb	r2, [r3, #0]
				state_keep_D  = 1;
 80026de:	4b74      	ldr	r3, [pc, #464]	@ (80028b0 <timer_callback+0x7d8>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 80026e4:	4b71      	ldr	r3, [pc, #452]	@ (80028ac <timer_callback+0x7d4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
			}

			if (joy.D == GPIO_PIN_SET && state_keep_D == 1 && B_count == 1 && D_count == 0 && wait > 2)
 80026ea:	4b68      	ldr	r3, [pc, #416]	@ (800288c <timer_callback+0x7b4>)
 80026ec:	78db      	ldrb	r3, [r3, #3]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d142      	bne.n	8002778 <timer_callback+0x6a0>
 80026f2:	4b6f      	ldr	r3, [pc, #444]	@ (80028b0 <timer_callback+0x7d8>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d13e      	bne.n	8002778 <timer_callback+0x6a0>
 80026fa:	4b66      	ldr	r3, [pc, #408]	@ (8002894 <timer_callback+0x7bc>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d13a      	bne.n	8002778 <timer_callback+0x6a0>
 8002702:	4b6c      	ldr	r3, [pc, #432]	@ (80028b4 <timer_callback+0x7dc>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d136      	bne.n	8002778 <timer_callback+0x6a0>
 800270a:	4b63      	ldr	r3, [pc, #396]	@ (8002898 <timer_callback+0x7c0>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d932      	bls.n	8002778 <timer_callback+0x6a0>
			{
				keyboard_request.mode.data = "TOE";
 8002712:	4b62      	ldr	r3, [pc, #392]	@ (800289c <timer_callback+0x7c4>)
 8002714:	4a68      	ldr	r2, [pc, #416]	@ (80028b8 <timer_callback+0x7e0>)
 8002716:	601a      	str	r2, [r3, #0]

				int64_t sq_numI;
				rcl_ret_t ret = rcl_send_request(&robot_controller_client, &keyboard_request, &sq_numI);
 8002718:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800271c:	461a      	mov	r2, r3
 800271e:	495f      	ldr	r1, [pc, #380]	@ (800289c <timer_callback+0x7c4>)
 8002720:	4860      	ldr	r0, [pc, #384]	@ (80028a4 <timer_callback+0x7cc>)
 8002722:	f00d fec7 	bl	80104b4 <rcl_send_request>
 8002726:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
				if (ret != RCL_RET_OK) cq++;
 800272a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <timer_callback+0x666>
 8002732:	4b5d      	ldr	r3, [pc, #372]	@ (80028a8 <timer_callback+0x7d0>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b5b      	ldr	r3, [pc, #364]	@ (80028a8 <timer_callback+0x7d0>)
 800273c:	801a      	strh	r2, [r3, #0]

				int64_t sq_numII;
				rcl_ret_t rett = rcl_send_request(&robot_controller_Ref_client, &keyboard_request, &sq_numII);
 800273e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002742:	461a      	mov	r2, r3
 8002744:	4955      	ldr	r1, [pc, #340]	@ (800289c <timer_callback+0x7c4>)
 8002746:	485d      	ldr	r0, [pc, #372]	@ (80028bc <timer_callback+0x7e4>)
 8002748:	f00d feb4 	bl	80104b4 <rcl_send_request>
 800274c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
				if (rett != RCL_RET_OK) cq++;
 8002750:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <timer_callback+0x68c>
 8002758:	4b53      	ldr	r3, [pc, #332]	@ (80028a8 <timer_callback+0x7d0>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b51      	ldr	r3, [pc, #324]	@ (80028a8 <timer_callback+0x7d0>)
 8002762:	801a      	strh	r2, [r3, #0]

				D_count = 1;
 8002764:	4b53      	ldr	r3, [pc, #332]	@ (80028b4 <timer_callback+0x7dc>)
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
				state_keep_D = 0;
 800276a:	4b51      	ldr	r3, [pc, #324]	@ (80028b0 <timer_callback+0x7d8>)
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 8002770:	4b4e      	ldr	r3, [pc, #312]	@ (80028ac <timer_callback+0x7d4>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
			{
 8002776:	e045      	b.n	8002804 <timer_callback+0x72c>
			}

			else if (joy.D == GPIO_PIN_SET && state_keep_D == 1 && B_count == 1 && D_count == 1 && wait > 2)
 8002778:	4b44      	ldr	r3, [pc, #272]	@ (800288c <timer_callback+0x7b4>)
 800277a:	78db      	ldrb	r3, [r3, #3]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d141      	bne.n	8002804 <timer_callback+0x72c>
 8002780:	4b4b      	ldr	r3, [pc, #300]	@ (80028b0 <timer_callback+0x7d8>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d13d      	bne.n	8002804 <timer_callback+0x72c>
 8002788:	4b42      	ldr	r3, [pc, #264]	@ (8002894 <timer_callback+0x7bc>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d139      	bne.n	8002804 <timer_callback+0x72c>
 8002790:	4b48      	ldr	r3, [pc, #288]	@ (80028b4 <timer_callback+0x7dc>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d135      	bne.n	8002804 <timer_callback+0x72c>
 8002798:	4b3f      	ldr	r3, [pc, #252]	@ (8002898 <timer_callback+0x7c0>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d931      	bls.n	8002804 <timer_callback+0x72c>
			{
				keyboard_request.mode.data = "TOB";
 80027a0:	4b3e      	ldr	r3, [pc, #248]	@ (800289c <timer_callback+0x7c4>)
 80027a2:	4a47      	ldr	r2, [pc, #284]	@ (80028c0 <timer_callback+0x7e8>)
 80027a4:	601a      	str	r2, [r3, #0]

				int64_t sq_numI;
				rcl_ret_t ret = rcl_send_request(&robot_controller_client, &keyboard_request, &sq_numI);
 80027a6:	f107 0320 	add.w	r3, r7, #32
 80027aa:	461a      	mov	r2, r3
 80027ac:	493b      	ldr	r1, [pc, #236]	@ (800289c <timer_callback+0x7c4>)
 80027ae:	483d      	ldr	r0, [pc, #244]	@ (80028a4 <timer_callback+0x7cc>)
 80027b0:	f00d fe80 	bl	80104b4 <rcl_send_request>
 80027b4:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
				if (ret != RCL_RET_OK) cq++;
 80027b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <timer_callback+0x6f4>
 80027c0:	4b39      	ldr	r3, [pc, #228]	@ (80028a8 <timer_callback+0x7d0>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	4b37      	ldr	r3, [pc, #220]	@ (80028a8 <timer_callback+0x7d0>)
 80027ca:	801a      	strh	r2, [r3, #0]

				int64_t sq_numII;
				rcl_ret_t rett = rcl_send_request(&robot_controller_Ref_client, &keyboard_request, &sq_numII);
 80027cc:	f107 0318 	add.w	r3, r7, #24
 80027d0:	461a      	mov	r2, r3
 80027d2:	4932      	ldr	r1, [pc, #200]	@ (800289c <timer_callback+0x7c4>)
 80027d4:	4839      	ldr	r0, [pc, #228]	@ (80028bc <timer_callback+0x7e4>)
 80027d6:	f00d fe6d 	bl	80104b4 <rcl_send_request>
 80027da:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
				if (rett != RCL_RET_OK) cq++;
 80027de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <timer_callback+0x71a>
 80027e6:	4b30      	ldr	r3, [pc, #192]	@ (80028a8 <timer_callback+0x7d0>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	4b2e      	ldr	r3, [pc, #184]	@ (80028a8 <timer_callback+0x7d0>)
 80027f0:	801a      	strh	r2, [r3, #0]

				D_count = 0;
 80027f2:	4b30      	ldr	r3, [pc, #192]	@ (80028b4 <timer_callback+0x7dc>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
				state_keep_D = 0;
 80027f8:	4b2d      	ldr	r3, [pc, #180]	@ (80028b0 <timer_callback+0x7d8>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
				state_keep_K = 0;
 80027fe:	4b2b      	ldr	r3, [pc, #172]	@ (80028ac <timer_callback+0x7d4>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
			}

			if (joy.K == GPIO_PIN_RESET)
 8002804:	4b21      	ldr	r3, [pc, #132]	@ (800288c <timer_callback+0x7b4>)
 8002806:	791b      	ldrb	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d108      	bne.n	800281e <timer_callback+0x746>
			{
				wait++;
 800280c:	4b22      	ldr	r3, [pc, #136]	@ (8002898 <timer_callback+0x7c0>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <timer_callback+0x7c0>)
 8002816:	701a      	strb	r2, [r3, #0]
				state_keep_K  = 1;
 8002818:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <timer_callback+0x7d4>)
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
			}

			if (joy.K == GPIO_PIN_SET && state_keep_K == 1 && wait > 2)
 800281e:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <timer_callback+0x7b4>)
 8002820:	791b      	ldrb	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d11d      	bne.n	8002862 <timer_callback+0x78a>
 8002826:	4b21      	ldr	r3, [pc, #132]	@ (80028ac <timer_callback+0x7d4>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d119      	bne.n	8002862 <timer_callback+0x78a>
 800282e:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <timer_callback+0x7c0>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d915      	bls.n	8002862 <timer_callback+0x78a>
			{
				int64_t sq_numI;
				rcl_ret_t ret = rcl_send_request(&robot_controller_saved_client, &save_request, &sq_numI);
 8002836:	f107 0310 	add.w	r3, r7, #16
 800283a:	461a      	mov	r2, r3
 800283c:	4921      	ldr	r1, [pc, #132]	@ (80028c4 <timer_callback+0x7ec>)
 800283e:	4822      	ldr	r0, [pc, #136]	@ (80028c8 <timer_callback+0x7f0>)
 8002840:	f00d fe38 	bl	80104b4 <rcl_send_request>
 8002844:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				if (ret != RCL_RET_OK) cq++;
 8002848:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <timer_callback+0x784>
 8002850:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <timer_callback+0x7d0>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <timer_callback+0x7d0>)
 800285a:	801a      	strh	r2, [r3, #0]

				state_keep_K = 0;
 800285c:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <timer_callback+0x7d4>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
			}

			ADC_Averaged();
 8002862:	f000 fb63 	bl	8002f2c <ADC_Averaged>
			Read_Buttons();
 8002866:	f000 fbad 	bl	8002fc4 <Read_Buttons>

			float zp = (joy.A == GPIO_PIN_SET) ? 0 : 0.2;
 800286a:	4b08      	ldr	r3, [pc, #32]	@ (800288c <timer_callback+0x7b4>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <timer_callback+0x7a0>
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e000      	b.n	800287a <timer_callback+0x7a2>
 8002878:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <timer_callback+0x7f4>)
 800287a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			float zm = (joy.C == GPIO_PIN_SET) ? 0 : -0.2;
 800287e:	4b03      	ldr	r3, [pc, #12]	@ (800288c <timer_callback+0x7b4>)
 8002880:	789b      	ldrb	r3, [r3, #2]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d124      	bne.n	80028d0 <timer_callback+0x7f8>
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e022      	b.n	80028d2 <timer_callback+0x7fa>
 800288c:	200014ec 	.word	0x200014ec
 8002890:	200014f8 	.word	0x200014f8
 8002894:	200014f9 	.word	0x200014f9
 8002898:	200014fc 	.word	0x200014fc
 800289c:	20001238 	.word	0x20001238
 80028a0:	0801f6bc 	.word	0x0801f6bc
 80028a4:	20001234 	.word	0x20001234
 80028a8:	200012ce 	.word	0x200012ce
 80028ac:	200014fd 	.word	0x200014fd
 80028b0:	200014fa 	.word	0x200014fa
 80028b4:	200014fb 	.word	0x200014fb
 80028b8:	0801f6c0 	.word	0x0801f6c0
 80028bc:	20001260 	.word	0x20001260
 80028c0:	0801f6b8 	.word	0x0801f6b8
 80028c4:	20001268 	.word	0x20001268
 80028c8:	20001264 	.word	0x20001264
 80028cc:	3e4ccccd 	.word	0x3e4ccccd
 80028d0:	4b27      	ldr	r3, [pc, #156]	@ (8002970 <timer_callback+0x898>)
 80028d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

			cmd_vel_msg.linear.x = (map_adc_to_output(ADC_Average[1])) * 0.2;
 80028d6:	4b27      	ldr	r3, [pc, #156]	@ (8002974 <timer_callback+0x89c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fbc0 	bl	8002060 <map_adc_to_output>
 80028e0:	ee10 3a10 	vmov	r3, s0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fe67 	bl	80005b8 <__aeabi_f2d>
 80028ea:	a31f      	add	r3, pc, #124	@ (adr r3, 8002968 <timer_callback+0x890>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f7fd feba 	bl	8000668 <__aeabi_dmul>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	491f      	ldr	r1, [pc, #124]	@ (8002978 <timer_callback+0x8a0>)
 80028fa:	e9c1 2300 	strd	r2, r3, [r1]
			cmd_vel_msg.linear.y = (map_adc_to_output(ADC_Average[0])) * 0.2;
 80028fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002974 <timer_callback+0x89c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fbac 	bl	8002060 <map_adc_to_output>
 8002908:	ee10 3a10 	vmov	r3, s0
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fe53 	bl	80005b8 <__aeabi_f2d>
 8002912:	a315      	add	r3, pc, #84	@ (adr r3, 8002968 <timer_callback+0x890>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd fea6 	bl	8000668 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4915      	ldr	r1, [pc, #84]	@ (8002978 <timer_callback+0x8a0>)
 8002922:	e9c1 2302 	strd	r2, r3, [r1, #8]
			cmd_vel_msg.linear.z = zp + zm;
 8002926:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 800292a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800292e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002932:	ee17 0a90 	vmov	r0, s15
 8002936:	f7fd fe3f 	bl	80005b8 <__aeabi_f2d>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	490e      	ldr	r1, [pc, #56]	@ (8002978 <timer_callback+0x8a0>)
 8002940:	e9c1 2304 	strd	r2, r3, [r1, #16]

			rcl_ret_t rett = rcl_publish(&cmd_vel_publisher, &cmd_vel_msg, NULL);
 8002944:	2200      	movs	r2, #0
 8002946:	490c      	ldr	r1, [pc, #48]	@ (8002978 <timer_callback+0x8a0>)
 8002948:	480c      	ldr	r0, [pc, #48]	@ (800297c <timer_callback+0x8a4>)
 800294a:	f00e fa57 	bl	8010dfc <rcl_publish>
 800294e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
			if (rett != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8002952:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8222 	beq.w	8002da0 <timer_callback+0xcc8>
 800295c:	f240 2111 	movw	r1, #529	@ 0x211
 8002960:	4807      	ldr	r0, [pc, #28]	@ (8002980 <timer_callback+0x8a8>)
 8002962:	f01b fa8d 	bl	801de80 <iprintf>
 8002966:	e21b      	b.n	8002da0 <timer_callback+0xcc8>
 8002968:	9999999a 	.word	0x9999999a
 800296c:	3fc99999 	.word	0x3fc99999
 8002970:	be4ccccd 	.word	0xbe4ccccd
 8002974:	200014dc 	.word	0x200014dc
 8002978:	20001070 	.word	0x20001070
 800297c:	20001068 	.word	0x20001068
 8002980:	0801f69c 	.word	0x0801f69c
		}

		else if (main_Mode == 2)
 8002984:	4bb6      	ldr	r3, [pc, #728]	@ (8002c60 <timer_callback+0xb88>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b02      	cmp	r3, #2
 800298a:	f040 8209 	bne.w	8002da0 <timer_callback+0xcc8>
		{
			uint32_t i2cError = HAL_I2C_GetError(&hi2c1);
 800298e:	48b5      	ldr	r0, [pc, #724]	@ (8002c64 <timer_callback+0xb8c>)
 8002990:	f005 f822 	bl	80079d8 <HAL_I2C_GetError>
 8002994:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
			if (i2cError == HAL_I2C_ERROR_NONE){
 8002998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 81b9 	bne.w	8002d14 <timer_callback+0xc3c>
				if (is_calib || on_calib){
 80029a2:	4bb1      	ldr	r3, [pc, #708]	@ (8002c68 <timer_callback+0xb90>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <timer_callback+0x8dc>
 80029aa:	4bb0      	ldr	r3, [pc, #704]	@ (8002c6c <timer_callback+0xb94>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 81cc 	beq.w	8002d4c <timer_callback+0xc74>
					MPU6050_Read_All(&hi2c1, &MPU6050);
 80029b4:	49ae      	ldr	r1, [pc, #696]	@ (8002c70 <timer_callback+0xb98>)
 80029b6:	48ab      	ldr	r0, [pc, #684]	@ (8002c64 <timer_callback+0xb8c>)
 80029b8:	f008 fdbe 	bl	800b538 <MPU6050_Read_All>

					double Ax = (GRAVITY * MPU6050.Ax) - accl_offset.x;
 80029bc:	4bac      	ldr	r3, [pc, #688]	@ (8002c70 <timer_callback+0xb98>)
 80029be:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80029c2:	a3a3      	add	r3, pc, #652	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd fe4e 	bl	8000668 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	4ba7      	ldr	r3, [pc, #668]	@ (8002c74 <timer_callback+0xb9c>)
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f7fd fc8d 	bl	80002f8 <__aeabi_dsub>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
					double Ay = (GRAVITY * MPU6050.Ay) - accl_offset.y;
 80029e6:	4ba2      	ldr	r3, [pc, #648]	@ (8002c70 <timer_callback+0xb98>)
 80029e8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80029ec:	a398      	add	r3, pc, #608	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 80029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f2:	f7fd fe39 	bl	8000668 <__aeabi_dmul>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	4b9d      	ldr	r3, [pc, #628]	@ (8002c74 <timer_callback+0xb9c>)
 8002a00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a04:	f7fd fc78 	bl	80002f8 <__aeabi_dsub>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
					double Az = (GRAVITY * MPU6050.Az) - accl_offset.z;
 8002a10:	4b97      	ldr	r3, [pc, #604]	@ (8002c70 <timer_callback+0xb98>)
 8002a12:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a16:	a38e      	add	r3, pc, #568	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fe24 	bl	8000668 <__aeabi_dmul>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	4b92      	ldr	r3, [pc, #584]	@ (8002c74 <timer_callback+0xb9c>)
 8002a2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a2e:	f7fd fc63 	bl	80002f8 <__aeabi_dsub>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

					double Gx = (DEG_TO_RAD * MPU6050.Gx) - gyro_offset.x;
 8002a3a:	4b8d      	ldr	r3, [pc, #564]	@ (8002c70 <timer_callback+0xb98>)
 8002a3c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002a40:	a385      	add	r3, pc, #532	@ (adr r3, 8002c58 <timer_callback+0xb80>)
 8002a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a46:	f7fd fe0f 	bl	8000668 <__aeabi_dmul>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	4b89      	ldr	r3, [pc, #548]	@ (8002c78 <timer_callback+0xba0>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f7fd fc4e 	bl	80002f8 <__aeabi_dsub>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
					double Gy = (DEG_TO_RAD * MPU6050.Gy) - gyro_offset.y;
 8002a64:	4b82      	ldr	r3, [pc, #520]	@ (8002c70 <timer_callback+0xb98>)
 8002a66:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002a6a:	a37b      	add	r3, pc, #492	@ (adr r3, 8002c58 <timer_callback+0xb80>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fdfa 	bl	8000668 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c78 <timer_callback+0xba0>)
 8002a7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a82:	f7fd fc39 	bl	80002f8 <__aeabi_dsub>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
					double Gz = (DEG_TO_RAD * MPU6050.Gz) - gyro_offset.z;
 8002a8e:	4b78      	ldr	r3, [pc, #480]	@ (8002c70 <timer_callback+0xb98>)
 8002a90:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002a94:	a370      	add	r3, pc, #448	@ (adr r3, 8002c58 <timer_callback+0xb80>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f7fd fde5 	bl	8000668 <__aeabi_dmul>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4b74      	ldr	r3, [pc, #464]	@ (8002c78 <timer_callback+0xba0>)
 8002aa8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002aac:	f7fd fc24 	bl	80002f8 <__aeabi_dsub>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

					mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 8002ab8:	f011 f880 	bl	8013bbc <rmw_uros_epoch_millis>
 8002abc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	f7fe f8d0 	bl	8000c68 <__aeabi_ldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4b6b      	ldr	r3, [pc, #428]	@ (8002c7c <timer_callback+0xba4>)
 8002ace:	601a      	str	r2, [r3, #0]
					mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 8002ad0:	f011 f882 	bl	8013bd8 <rmw_uros_epoch_nanos>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4b68      	ldr	r3, [pc, #416]	@ (8002c7c <timer_callback+0xba4>)
 8002ada:	605a      	str	r2, [r3, #4]

					mpu6050_msg.linear_acceleration.x = Ax;
 8002adc:	4967      	ldr	r1, [pc, #412]	@ (8002c7c <timer_callback+0xba4>)
 8002ade:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8002ae2:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
					mpu6050_msg.linear_acceleration.y = Ay;
 8002ae6:	4965      	ldr	r1, [pc, #404]	@ (8002c7c <timer_callback+0xba4>)
 8002ae8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8002aec:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
					mpu6050_msg.linear_acceleration.z = Az;
 8002af0:	4962      	ldr	r1, [pc, #392]	@ (8002c7c <timer_callback+0xba4>)
 8002af2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8002af6:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

					mpu6050_msg.angular_velocity.x = Gx;
 8002afa:	4960      	ldr	r1, [pc, #384]	@ (8002c7c <timer_callback+0xba4>)
 8002afc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8002b00:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
					mpu6050_msg.angular_velocity.y = Gy;
 8002b04:	495d      	ldr	r1, [pc, #372]	@ (8002c7c <timer_callback+0xba4>)
 8002b06:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8002b0a:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
					mpu6050_msg.angular_velocity.z = Gz;
 8002b0e:	495b      	ldr	r1, [pc, #364]	@ (8002c7c <timer_callback+0xba4>)
 8002b10:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002b14:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

					rotation_real.roll = MPU6050.KalmanAngleX;
 8002b18:	4b55      	ldr	r3, [pc, #340]	@ (8002c70 <timer_callback+0xb98>)
 8002b1a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002b1e:	4958      	ldr	r1, [pc, #352]	@ (8002c80 <timer_callback+0xba8>)
 8002b20:	e9c1 2300 	strd	r2, r3, [r1]
					rotation_real.pitch = MPU6050.KalmanAngleY;
 8002b24:	4b52      	ldr	r3, [pc, #328]	@ (8002c70 <timer_callback+0xb98>)
 8002b26:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002b2a:	4955      	ldr	r1, [pc, #340]	@ (8002c80 <timer_callback+0xba8>)
 8002b2c:	e9c1 2302 	strd	r2, r3, [r1, #8]

					calculate_gyro_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8002b30:	a347      	add	r3, pc, #284	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8002b3a:	f7fd febf 	bl	80008bc <__aeabi_ddiv>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	ec43 2b18 	vmov	d8, r2, r3
 8002b46:	a342      	add	r3, pc, #264	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8002b50:	f7fd feb4 	bl	80008bc <__aeabi_ddiv>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	ec43 2b19 	vmov	d9, r2, r3
 8002b5c:	a33c      	add	r3, pc, #240	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b66:	f7fd fea9 	bl	80008bc <__aeabi_ddiv>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	ec43 2b17 	vmov	d7, r2, r3
 8002b72:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8002c84 <timer_callback+0xbac>
 8002b76:	ed97 5b2c 	vldr	d5, [r7, #176]	@ 0xb0
 8002b7a:	ed97 4b2e 	vldr	d4, [r7, #184]	@ 0xb8
 8002b7e:	ed97 3b30 	vldr	d3, [r7, #192]	@ 0xc0
 8002b82:	eeb0 2a47 	vmov.f32	s4, s14
 8002b86:	eef0 2a67 	vmov.f32	s5, s15
 8002b8a:	eeb0 1a49 	vmov.f32	s2, s18
 8002b8e:	eef0 1a69 	vmov.f32	s3, s19
 8002b92:	eeb0 0a48 	vmov.f32	s0, s16
 8002b96:	eef0 0a68 	vmov.f32	s1, s17
 8002b9a:	f7fe fba9 	bl	80012f0 <calculate_gyro_angles>
					calculate_accl_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8002b9e:	a32c      	add	r3, pc, #176	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8002ba8:	f7fd fe88 	bl	80008bc <__aeabi_ddiv>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	ec43 2b18 	vmov	d8, r2, r3
 8002bb4:	a326      	add	r3, pc, #152	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8002bbe:	f7fd fe7d 	bl	80008bc <__aeabi_ddiv>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	ec43 2b19 	vmov	d9, r2, r3
 8002bca:	a321      	add	r3, pc, #132	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bd4:	f7fd fe72 	bl	80008bc <__aeabi_ddiv>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	ec43 2b17 	vmov	d7, r2, r3
 8002be0:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8002c84 <timer_callback+0xbac>
 8002be4:	ed97 5b2c 	vldr	d5, [r7, #176]	@ 0xb0
 8002be8:	ed97 4b2e 	vldr	d4, [r7, #184]	@ 0xb8
 8002bec:	ed97 3b30 	vldr	d3, [r7, #192]	@ 0xc0
 8002bf0:	eeb0 2a47 	vmov.f32	s4, s14
 8002bf4:	eef0 2a67 	vmov.f32	s5, s15
 8002bf8:	eeb0 1a49 	vmov.f32	s2, s18
 8002bfc:	eef0 1a69 	vmov.f32	s3, s19
 8002c00:	eeb0 0a48 	vmov.f32	s0, s16
 8002c04:	eef0 0a68 	vmov.f32	s1, s17
 8002c08:	f7fe fc4a 	bl	80014a0 <calculate_accl_angles>
					calculate_kalm_angles(Ax/GRAVITY, Ay/GRAVITY, Az/GRAVITY, Gx, Gy, Gz, 0.01);
 8002c0c:	a310      	add	r3, pc, #64	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 8002c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c12:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8002c16:	f7fd fe51 	bl	80008bc <__aeabi_ddiv>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	ec43 2b18 	vmov	d8, r2, r3
 8002c22:	a30b      	add	r3, pc, #44	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8002c2c:	f7fd fe46 	bl	80008bc <__aeabi_ddiv>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	ec43 2b19 	vmov	d9, r2, r3
 8002c38:	a305      	add	r3, pc, #20	@ (adr r3, 8002c50 <timer_callback+0xb78>)
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c42:	f7fd fe3b 	bl	80008bc <__aeabi_ddiv>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	ec43 2b17 	vmov	d7, r2, r3
 8002c4e:	e01b      	b.n	8002c88 <timer_callback+0xbb0>
 8002c50:	3a92a305 	.word	0x3a92a305
 8002c54:	40239d01 	.word	0x40239d01
 8002c58:	a2529d39 	.word	0xa2529d39
 8002c5c:	3f91df46 	.word	0x3f91df46
 8002c60:	200014f4 	.word	0x200014f4
 8002c64:	20005060 	.word	0x20005060
 8002c68:	20001438 	.word	0x20001438
 8002c6c:	20001439 	.word	0x20001439
 8002c70:	20001270 	.word	0x20001270
 8002c74:	200012d0 	.word	0x200012d0
 8002c78:	200012e8 	.word	0x200012e8
 8002c7c:	20000f28 	.word	0x20000f28
 8002c80:	20001360 	.word	0x20001360
 8002c84:	3c23d70a 	.word	0x3c23d70a
 8002c88:	ed1f 6a02 	vldr	s12, [pc, #-8]	@ 8002c84 <timer_callback+0xbac>
 8002c8c:	ed97 5b2c 	vldr	d5, [r7, #176]	@ 0xb0
 8002c90:	ed97 4b2e 	vldr	d4, [r7, #184]	@ 0xb8
 8002c94:	ed97 3b30 	vldr	d3, [r7, #192]	@ 0xc0
 8002c98:	eeb0 2a47 	vmov.f32	s4, s14
 8002c9c:	eef0 2a67 	vmov.f32	s5, s15
 8002ca0:	eeb0 1a49 	vmov.f32	s2, s18
 8002ca4:	eef0 1a69 	vmov.f32	s3, s19
 8002ca8:	eeb0 0a48 	vmov.f32	s0, s16
 8002cac:	eef0 0a68 	vmov.f32	s1, s17
 8002cb0:	f7fe fee2 	bl	8001a78 <calculate_kalm_angles>

					cmd_vel_msg.linear.x = rotation_kalm.roll * DEG_TO_RAD;
 8002cb4:	4b46      	ldr	r3, [pc, #280]	@ (8002dd0 <timer_callback+0xcf8>)
 8002cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cba:	a341      	add	r3, pc, #260	@ (adr r3, 8002dc0 <timer_callback+0xce8>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd fcd2 	bl	8000668 <__aeabi_dmul>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	4b40      	ldr	r3, [pc, #256]	@ (8002dd4 <timer_callback+0xcfc>)
 8002cd2:	f7fd fdf3 	bl	80008bc <__aeabi_ddiv>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	493f      	ldr	r1, [pc, #252]	@ (8002dd8 <timer_callback+0xd00>)
 8002cdc:	e9c1 2300 	strd	r2, r3, [r1]
					cmd_vel_msg.angular.z = -(rotation_kalm.pitch * DEG_TO_RAD);
 8002ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd0 <timer_callback+0xcf8>)
 8002ce2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ce6:	a336      	add	r3, pc, #216	@ (adr r3, 8002dc0 <timer_callback+0xce8>)
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f7fd fcbc 	bl	8000668 <__aeabi_dmul>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	4b35      	ldr	r3, [pc, #212]	@ (8002dd4 <timer_callback+0xcfc>)
 8002cfe:	f7fd fddd 	bl	80008bc <__aeabi_ddiv>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4614      	mov	r4, r2
 8002d08:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002d0c:	4b32      	ldr	r3, [pc, #200]	@ (8002dd8 <timer_callback+0xd00>)
 8002d0e:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
 8002d12:	e01b      	b.n	8002d4c <timer_callback+0xc74>
				}
			}
			else
			{
				static uint32_t timestamp = 0;
				if (timestamp <= HAL_GetTick()){
 8002d14:	f001 fd42 	bl	800479c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b30      	ldr	r3, [pc, #192]	@ (8002ddc <timer_callback+0xd04>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d314      	bcc.n	8002d4c <timer_callback+0xc74>
					timestamp = HAL_GetTick() + 1000;
 8002d22:	f001 fd3b 	bl	800479c <HAL_GetTick>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ddc <timer_callback+0xd04>)
 8002d2e:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002d30:	2120      	movs	r1, #32
 8002d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d36:	f004 fb25 	bl	8007384 <HAL_GPIO_TogglePin>
					HAL_I2C_DeInit(&hi2c1);
 8002d3a:	4829      	ldr	r0, [pc, #164]	@ (8002de0 <timer_callback+0xd08>)
 8002d3c:	f004 fbef 	bl	800751e <HAL_I2C_DeInit>
					HAL_I2C_Init(&hi2c1);
 8002d40:	4827      	ldr	r0, [pc, #156]	@ (8002de0 <timer_callback+0xd08>)
 8002d42:	f004 fb51 	bl	80073e8 <HAL_I2C_Init>
					MPU6050_Init(&hi2c1);
 8002d46:	4826      	ldr	r0, [pc, #152]	@ (8002de0 <timer_callback+0xd08>)
 8002d48:	f008 fb9c 	bl	800b484 <MPU6050_Init>
				}
			}

			ADC_Averaged();
 8002d4c:	f000 f8ee 	bl	8002f2c <ADC_Averaged>

			cmd_vell_msg.linear.x = (map_adc_to_output(ADC_Average[1])) * 0.2;
 8002d50:	4b24      	ldr	r3, [pc, #144]	@ (8002de4 <timer_callback+0xd0c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f983 	bl	8002060 <map_adc_to_output>
 8002d5a:	ee10 3a10 	vmov	r3, s0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fc2a 	bl	80005b8 <__aeabi_f2d>
 8002d64:	a318      	add	r3, pc, #96	@ (adr r3, 8002dc8 <timer_callback+0xcf0>)
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	f7fd fc7d 	bl	8000668 <__aeabi_dmul>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	491d      	ldr	r1, [pc, #116]	@ (8002de8 <timer_callback+0xd10>)
 8002d74:	e9c1 2300 	strd	r2, r3, [r1]
			cmd_vell_msg.linear.y = (map_adc_to_output(ADC_Average[0])) * 0.2;
 8002d78:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <timer_callback+0xd0c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f96f 	bl	8002060 <map_adc_to_output>
 8002d82:	ee10 3a10 	vmov	r3, s0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fc16 	bl	80005b8 <__aeabi_f2d>
 8002d8c:	a30e      	add	r3, pc, #56	@ (adr r3, 8002dc8 <timer_callback+0xcf0>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f7fd fc69 	bl	8000668 <__aeabi_dmul>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4913      	ldr	r1, [pc, #76]	@ (8002de8 <timer_callback+0xd10>)
 8002d9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
//			if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
//			rcl_ret_t rett = rcl_publish(&cmd_vel_II_publisher, &cmd_vel_II_msg, NULL);
//			if (rett != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
		}

	    HAL_IWDG_Refresh(&hiwdg);
 8002da0:	4812      	ldr	r0, [pc, #72]	@ (8002dec <timer_callback+0xd14>)
 8002da2:	f005 f9cd 	bl	8008140 <HAL_IWDG_Refresh>
	    cc++;
 8002da6:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <timer_callback+0xd18>)
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <timer_callback+0xd18>)
 8002db0:	801a      	strh	r2, [r3, #0]
	}
}
 8002db2:	bf00      	nop
 8002db4:	37e8      	adds	r7, #232	@ 0xe8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	ecbd 8b04 	vpop	{d8-d9}
 8002dbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dc0:	54442d18 	.word	0x54442d18
 8002dc4:	400921fb 	.word	0x400921fb
 8002dc8:	9999999a 	.word	0x9999999a
 8002dcc:	3fc99999 	.word	0x3fc99999
 8002dd0:	20001348 	.word	0x20001348
 8002dd4:	40668000 	.word	0x40668000
 8002dd8:	20001070 	.word	0x20001070
 8002ddc:	20004444 	.word	0x20004444
 8002de0:	20005060 	.word	0x20005060
 8002de4:	200014dc 	.word	0x200014dc
 8002de8:	200010a0 	.word	0x200010a0
 8002dec:	200050b4 	.word	0x200050b4
 8002df0:	200012c8 	.word	0x200012c8

08002df4 <imu_calib_service_callback>:

void imu_calib_service_callback(const void * request_msg, void * response_msg){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  imu_interfaces__srv__ImuCalibration_Request * req_in =
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	617b      	str	r3, [r7, #20]
    (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
  imu_interfaces__srv__ImuCalibration_Response * res_in =
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	613b      	str	r3, [r7, #16]
    (imu_interfaces__srv__ImuCalibration_Response *) response_msg;

  size_t accl_size = sizeof(req_in->imu_calib.linear_acceleration_covariance);
 8002e06:	2348      	movs	r3, #72	@ 0x48
 8002e08:	60fb      	str	r3, [r7, #12]
  size_t gyro_size = sizeof(req_in->imu_calib.angular_velocity_covariance);
 8002e0a:	2348      	movs	r3, #72	@ 0x48
 8002e0c:	60bb      	str	r3, [r7, #8]
  memcpy(mpu6050_msg.linear_acceleration_covariance, req_in->imu_calib.linear_acceleration_covariance, accl_size);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	33f8      	adds	r3, #248	@ 0xf8
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4619      	mov	r1, r3
 8002e16:	481e      	ldr	r0, [pc, #120]	@ (8002e90 <imu_calib_service_callback+0x9c>)
 8002e18:	f01b fa7b 	bl	801e312 <memcpy>
  memcpy(mpu6050_msg.angular_velocity_covariance, req_in->imu_calib.angular_velocity_covariance, gyro_size);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3398      	adds	r3, #152	@ 0x98
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	4619      	mov	r1, r3
 8002e24:	481b      	ldr	r0, [pc, #108]	@ (8002e94 <imu_calib_service_callback+0xa0>)
 8002e26:	f01b fa74 	bl	801e312 <memcpy>

  accl_offset.x = req_in->imu_calib.linear_acceleration.x;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002e30:	4919      	ldr	r1, [pc, #100]	@ (8002e98 <imu_calib_service_callback+0xa4>)
 8002e32:	e9c1 2300 	strd	r2, r3, [r1]
  accl_offset.y = req_in->imu_calib.linear_acceleration.y;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8002e3c:	4916      	ldr	r1, [pc, #88]	@ (8002e98 <imu_calib_service_callback+0xa4>)
 8002e3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  accl_offset.z = req_in->imu_calib.linear_acceleration.z;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8002e48:	4913      	ldr	r1, [pc, #76]	@ (8002e98 <imu_calib_service_callback+0xa4>)
 8002e4a:	e9c1 2304 	strd	r2, r3, [r1, #16]

  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002e54:	4911      	ldr	r1, [pc, #68]	@ (8002e9c <imu_calib_service_callback+0xa8>)
 8002e56:	e9c1 2300 	strd	r2, r3, [r1]
  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002e60:	490e      	ldr	r1, [pc, #56]	@ (8002e9c <imu_calib_service_callback+0xa8>)
 8002e62:	e9c1 2302 	strd	r2, r3, [r1, #8]
  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002e6c:	490b      	ldr	r1, [pc, #44]	@ (8002e9c <imu_calib_service_callback+0xa8>)
 8002e6e:	e9c1 2304 	strd	r2, r3, [r1, #16]

  is_calib = true;
 8002e72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <imu_calib_service_callback+0xac>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
  res_in->success = true;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002e7e:	2120      	movs	r1, #32
 8002e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e84:	f004 fa7e 	bl	8007384 <HAL_GPIO_TogglePin>

}
 8002e88:	bf00      	nop
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20001020 	.word	0x20001020
 8002e94:	20000fc0 	.word	0x20000fc0
 8002e98:	200012d0 	.word	0x200012d0
 8002e9c:	200012e8 	.word	0x200012e8
 8002ea0:	20001438 	.word	0x20001438

08002ea4 <imu_status_service_callback>:

void imu_status_service_callback(const void * request_msg, void * response_msg){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  std_srvs__srv__SetBool_Request * req_in =
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	617b      	str	r3, [r7, #20]
    (std_srvs__srv__SetBool_Request *) request_msg;
  std_srvs__srv__SetBool_Response * res_in =
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	613b      	str	r3, [r7, #16]
    (std_srvs__srv__SetBool_Response *) response_msg;

  if (req_in->data){
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d020      	beq.n	8002f00 <imu_status_service_callback+0x5c>
	  uint32_t i2cError = HAL_I2C_GetError(&hi2c1);
 8002ebe:	4815      	ldr	r0, [pc, #84]	@ (8002f14 <imu_status_service_callback+0x70>)
 8002ec0:	f004 fd8a 	bl	80079d8 <HAL_I2C_GetError>
 8002ec4:	60f8      	str	r0, [r7, #12]
	  if (i2cError == HAL_I2C_ERROR_NONE) {
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10c      	bne.n	8002ee6 <imu_status_service_callback+0x42>
	      res_in->success = true;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is connected.";
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4a10      	ldr	r2, [pc, #64]	@ (8002f18 <imu_status_service_callback+0x74>)
 8002ed6:	605a      	str	r2, [r3, #4]
		  cs++;
 8002ed8:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <imu_status_service_callback+0x78>)
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <imu_status_service_callback+0x78>)
 8002ee2:	801a      	strh	r2, [r3, #0]
  else{
      res_in->success = false;
      res_in->message.data = "Request false.";
  }

}
 8002ee4:	e012      	b.n	8002f0c <imu_status_service_callback+0x68>
	      res_in->success = false;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
	      res_in->message.data = "MPU6050 is not connect, Error with I2C interfaces.";
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4a0c      	ldr	r2, [pc, #48]	@ (8002f20 <imu_status_service_callback+0x7c>)
 8002ef0:	605a      	str	r2, [r3, #4]
		  ct++;
 8002ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <imu_status_service_callback+0x80>)
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <imu_status_service_callback+0x80>)
 8002efc:	801a      	strh	r2, [r3, #0]
}
 8002efe:	e005      	b.n	8002f0c <imu_status_service_callback+0x68>
      res_in->success = false;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
      res_in->message.data = "Request false.";
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4a07      	ldr	r2, [pc, #28]	@ (8002f28 <imu_status_service_callback+0x84>)
 8002f0a:	605a      	str	r2, [r3, #4]
}
 8002f0c:	bf00      	nop
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20005060 	.word	0x20005060
 8002f18:	0801f6c4 	.word	0x0801f6c4
 8002f1c:	200012ca 	.word	0x200012ca
 8002f20:	0801f6dc 	.word	0x0801f6dc
 8002f24:	200012cc 	.word	0x200012cc
 8002f28:	0801f710 	.word	0x0801f710

08002f2c <ADC_Averaged>:

void ADC_Averaged()
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
	for (int i = 0; i < 40; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	e017      	b.n	8002f68 <ADC_Averaged+0x3c>
	{
		ADC_SumAPot[0] += ADCBuffer[2*i];
 8002f38:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb4 <ADC_Averaged+0x88>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	0052      	lsls	r2, r2, #1
 8002f40:	491d      	ldr	r1, [pc, #116]	@ (8002fb8 <ADC_Averaged+0x8c>)
 8002f42:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002f46:	4413      	add	r3, r2
 8002f48:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb4 <ADC_Averaged+0x88>)
 8002f4a:	6013      	str	r3, [r2, #0]
		ADC_SumAPot[1] += ADCBuffer[1+(2*i)];
 8002f4c:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <ADC_Averaged+0x88>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	0052      	lsls	r2, r2, #1
 8002f54:	3201      	adds	r2, #1
 8002f56:	4918      	ldr	r1, [pc, #96]	@ (8002fb8 <ADC_Averaged+0x8c>)
 8002f58:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	4a15      	ldr	r2, [pc, #84]	@ (8002fb4 <ADC_Averaged+0x88>)
 8002f60:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 40; i++)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3301      	adds	r3, #1
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b27      	cmp	r3, #39	@ 0x27
 8002f6c:	dde4      	ble.n	8002f38 <ADC_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	e015      	b.n	8002fa0 <ADC_Averaged+0x74>
	{
		ADC_Average[i] = ADC_SumAPot[i] / 40;
 8002f74:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb4 <ADC_Averaged+0x88>)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002fbc <ADC_Averaged+0x90>)
 8002f7e:	fb82 1203 	smull	r1, r2, r2, r3
 8002f82:	1112      	asrs	r2, r2, #4
 8002f84:	17db      	asrs	r3, r3, #31
 8002f86:	1ad2      	subs	r2, r2, r3
 8002f88:	490d      	ldr	r1, [pc, #52]	@ (8002fc0 <ADC_Averaged+0x94>)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ADC_SumAPot[i] = 0;
 8002f90:	4a08      	ldr	r2, [pc, #32]	@ (8002fb4 <ADC_Averaged+0x88>)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2100      	movs	r1, #0
 8002f96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	dde6      	ble.n	8002f74 <ADC_Averaged+0x48>
	}
}
 8002fa6:	bf00      	nop
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	200014e4 	.word	0x200014e4
 8002fb8:	2000143c 	.word	0x2000143c
 8002fbc:	66666667 	.word	0x66666667
 8002fc0:	200014dc 	.word	0x200014dc

08002fc4 <Read_Buttons>:

void Read_Buttons()
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
	joy.A = HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin);
 8002fc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fd0:	f004 f9a8 	bl	8007324 <HAL_GPIO_ReadPin>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <Read_Buttons+0x60>)
 8002fda:	701a      	strb	r2, [r3, #0]
	joy.B = HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin);
 8002fdc:	2108      	movs	r1, #8
 8002fde:	4812      	ldr	r0, [pc, #72]	@ (8003028 <Read_Buttons+0x64>)
 8002fe0:	f004 f9a0 	bl	8007324 <HAL_GPIO_ReadPin>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8003024 <Read_Buttons+0x60>)
 8002fea:	705a      	strb	r2, [r3, #1]
	joy.C = HAL_GPIO_ReadPin(C_GPIO_Port, C_Pin);
 8002fec:	2120      	movs	r1, #32
 8002fee:	480e      	ldr	r0, [pc, #56]	@ (8003028 <Read_Buttons+0x64>)
 8002ff0:	f004 f998 	bl	8007324 <HAL_GPIO_ReadPin>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <Read_Buttons+0x60>)
 8002ffa:	709a      	strb	r2, [r3, #2]
	joy.D = HAL_GPIO_ReadPin(D_GPIO_Port, D_Pin);
 8002ffc:	2110      	movs	r1, #16
 8002ffe:	480a      	ldr	r0, [pc, #40]	@ (8003028 <Read_Buttons+0x64>)
 8003000:	f004 f990 	bl	8007324 <HAL_GPIO_ReadPin>
 8003004:	4603      	mov	r3, r0
 8003006:	461a      	mov	r2, r3
 8003008:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <Read_Buttons+0x60>)
 800300a:	70da      	strb	r2, [r3, #3]
	joy.K = HAL_GPIO_ReadPin(K_GPIO_Port, K_Pin);
 800300c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003014:	f004 f986 	bl	8007324 <HAL_GPIO_ReadPin>
 8003018:	4603      	mov	r3, r0
 800301a:	461a      	mov	r2, r3
 800301c:	4b01      	ldr	r3, [pc, #4]	@ (8003024 <Read_Buttons+0x60>)
 800301e:	711a      	strb	r2, [r3, #4]
}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200014ec 	.word	0x200014ec
 8003028:	48000400 	.word	0x48000400

0800302c <HAL_GPIO_EXTI_Callback>:
//    (robotic_interfaces__srv__Keyboard_Response *) response_msg;

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10)
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800303c:	d10e      	bne.n	800305c <HAL_GPIO_EXTI_Callback+0x30>
	{
		if (main_Mode == 0) main_Mode = 1;
 800303e:	4b0a      	ldr	r3, [pc, #40]	@ (8003068 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <HAL_GPIO_EXTI_Callback+0x22>
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
		else if (main_Mode == 1) main_Mode = 0;
//		else if (main_Mode == 2) main_Mode = 0;
	}
}
 800304c:	e006      	b.n	800305c <HAL_GPIO_EXTI_Callback+0x30>
		else if (main_Mode == 1) main_Mode = 0;
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d102      	bne.n	800305c <HAL_GPIO_EXTI_Callback+0x30>
 8003056:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	200014f4 	.word	0x200014f4

0800306c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  while (MPU6050_Init(&hi2c1) == 1);
 8003070:	bf00      	nop
 8003072:	481a      	ldr	r0, [pc, #104]	@ (80030dc <MX_FREERTOS_Init+0x70>)
 8003074:	f008 fa06 	bl	800b484 <MPU6050_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d0f9      	beq.n	8003072 <MX_FREERTOS_Init+0x6>
  Kalman_Init(&kalmanX);
 800307e:	4818      	ldr	r0, [pc, #96]	@ (80030e0 <MX_FREERTOS_Init+0x74>)
 8003080:	f7fe fe2e 	bl	8001ce0 <Kalman_Init>
  Kalman_Init(&kalmanY);
 8003084:	4817      	ldr	r0, [pc, #92]	@ (80030e4 <MX_FREERTOS_Init+0x78>)
 8003086:	f7fe fe2b 	bl	8001ce0 <Kalman_Init>
  rotation_comp.roll = 0;
 800308a:	4917      	ldr	r1, [pc, #92]	@ (80030e8 <MX_FREERTOS_Init+0x7c>)
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9c1 2300 	strd	r2, r3, [r1]
  rotation_comp.pitch = 0;
 8003098:	4913      	ldr	r1, [pc, #76]	@ (80030e8 <MX_FREERTOS_Init+0x7c>)
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rotation_comp.yaw = 0;
 80030a6:	4910      	ldr	r1, [pc, #64]	@ (80030e8 <MX_FREERTOS_Init+0x7c>)
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80030b4:	217f      	movs	r1, #127	@ 0x7f
 80030b6:	480d      	ldr	r0, [pc, #52]	@ (80030ec <MX_FREERTOS_Init+0x80>)
 80030b8:	f003 f916 	bl	80062e8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 80);
 80030bc:	2250      	movs	r2, #80	@ 0x50
 80030be:	490c      	ldr	r1, [pc, #48]	@ (80030f0 <MX_FREERTOS_Init+0x84>)
 80030c0:	480a      	ldr	r0, [pc, #40]	@ (80030ec <MX_FREERTOS_Init+0x80>)
 80030c2:	f001 ff99 	bl	8004ff8 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80030c6:	4a0b      	ldr	r2, [pc, #44]	@ (80030f4 <MX_FREERTOS_Init+0x88>)
 80030c8:	2100      	movs	r1, #0
 80030ca:	480b      	ldr	r0, [pc, #44]	@ (80030f8 <MX_FREERTOS_Init+0x8c>)
 80030cc:	f008 fe04 	bl	800bcd8 <osThreadNew>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4a0a      	ldr	r2, [pc, #40]	@ (80030fc <MX_FREERTOS_Init+0x90>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20005060 	.word	0x20005060
 80030e0:	20001378 	.word	0x20001378
 80030e4:	200013c8 	.word	0x200013c8
 80030e8:	20001330 	.word	0x20001330
 80030ec:	20000e4c 	.word	0x20000e4c
 80030f0:	2000143c 	.word	0x2000143c
 80030f4:	0801f7f0 	.word	0x0801f7f0
 80030f8:	08003101 	.word	0x08003101
 80030fc:	20001500 	.word	0x20001500

08003100 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003104:	b0f2      	sub	sp, #456	@ 0x1c8
 8003106:	af02      	add	r7, sp, #8
 8003108:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800310c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003110:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 8003112:	4b9e      	ldr	r3, [pc, #632]	@ (800338c <StartDefaultTask+0x28c>)
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	4b9e      	ldr	r3, [pc, #632]	@ (8003390 <StartDefaultTask+0x290>)
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	4b9e      	ldr	r3, [pc, #632]	@ (8003394 <StartDefaultTask+0x294>)
 800311c:	4a9e      	ldr	r2, [pc, #632]	@ (8003398 <StartDefaultTask+0x298>)
 800311e:	499f      	ldr	r1, [pc, #636]	@ (800339c <StartDefaultTask+0x29c>)
 8003120:	2001      	movs	r0, #1
 8003122:	f00f fbe1 	bl	80128e8 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8003126:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 800312a:	4618      	mov	r0, r3
 800312c:	f00e fe78 	bl	8011e20 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8003130:	4b9b      	ldr	r3, [pc, #620]	@ (80033a0 <StartDefaultTask+0x2a0>)
 8003132:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.deallocate = microros_deallocate;
 8003136:	4b9b      	ldr	r3, [pc, #620]	@ (80033a4 <StartDefaultTask+0x2a4>)
 8003138:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.reallocate = microros_reallocate;
 800313c:	4b9a      	ldr	r3, [pc, #616]	@ (80033a8 <StartDefaultTask+0x2a8>)
 800313e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8003142:	4b9a      	ldr	r3, [pc, #616]	@ (80033ac <StartDefaultTask+0x2ac>)
 8003144:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8003148:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 800314c:	4618      	mov	r0, r3
 800314e:	f00e fe75 	bl	8011e3c <rcutils_set_default_allocator>
 8003152:	4603      	mov	r3, r0
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <StartDefaultTask+0x68>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800315e:	f240 3105 	movw	r1, #773	@ 0x305
 8003162:	4893      	ldr	r0, [pc, #588]	@ (80033b0 <StartDefaultTask+0x2b0>)
 8003164:	f01a fe8c 	bl	801de80 <iprintf>
	}

	GPIO_PinState B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8003168:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800316c:	4891      	ldr	r0, [pc, #580]	@ (80033b4 <StartDefaultTask+0x2b4>)
 800316e:	f004 f8d9 	bl	8007324 <HAL_GPIO_ReadPin>
 8003172:	4603      	mov	r3, r0
 8003174:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(10);
 8003178:	4b8f      	ldr	r3, [pc, #572]	@ (80033b8 <StartDefaultTask+0x2b8>)
 800317a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
	const int timeout_ms = 5000;
 800317e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003182:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
	int executor_num = 3;
 8003186:	2303      	movs	r3, #3
 8003188:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

	// Get message type support
	const rosidl_message_type_support_t * imu_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu);
 800318c:	f011 fb9a 	bl	80148c4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8003190:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac

	const rosidl_message_type_support_t * cmd_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist);
 8003194:	f00b fb00 	bl	800e798 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8003198:	f8c7 01a8 	str.w	r0, [r7, #424]	@ 0x1a8

	const rosidl_service_type_support_t * imu_calib_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration);
 800319c:	f00b fc38 	bl	800ea10 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 80031a0:	f8c7 01a4 	str.w	r0, [r7, #420]	@ 0x1a4

	const rosidl_service_type_support_t * imu_status_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool);
 80031a4:	f011 fdb4 	bl	8014d10 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 80031a8:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0

	const rosidl_service_type_support_t * keyboard_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(robotic_interfaces, srv, Keyboard);
 80031ac:	f011 f932 	bl	8014414 <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard>
 80031b0:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

	const rosidl_service_type_support_t * trigger_type_support =
	  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, Trigger);
 80031b4:	f011 fdcc 	bl	8014d50 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger>
 80031b8:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

	allocator = rcl_get_default_allocator();
 80031bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031c0:	f5a3 748a 	sub.w	r4, r3, #276	@ 0x114
 80031c4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80031c8:	4618      	mov	r0, r3
 80031ca:	f00e fe55 	bl	8011e78 <rcutils_get_default_allocator>
 80031ce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031d6:	461d      	mov	r5, r3
 80031d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 80031e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031e4:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 80031e8:	463b      	mov	r3, r7
 80031ea:	4618      	mov	r0, r3
 80031ec:	f00e f9c8 	bl	8011580 <rclc_executor_get_zero_initialized_executor>
 80031f0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031f4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80031f8:	4620      	mov	r0, r4
 80031fa:	4619      	mov	r1, r3
 80031fc:	2388      	movs	r3, #136	@ 0x88
 80031fe:	461a      	mov	r2, r3
 8003200:	f01b f887 	bl	801e312 <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 8003204:	f00d f9de 	bl	80105c4 <rcl_get_zero_initialized_init_options>
 8003208:	4602      	mov	r2, r0
 800320a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800320e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003212:	601a      	str	r2, [r3, #0]

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8003214:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003218:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800321c:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8003220:	466d      	mov	r5, sp
 8003222:	f103 020c 	add.w	r2, r3, #12
 8003226:	e892 0003 	ldmia.w	r2, {r0, r1}
 800322a:	e885 0003 	stmia.w	r5, {r0, r1}
 800322e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003230:	4620      	mov	r0, r4
 8003232:	f00d f9c9 	bl	80105c8 <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 69));
 8003236:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800323a:	2145      	movs	r1, #69	@ 0x45
 800323c:	4618      	mov	r0, r3
 800323e:	f00d fabf 	bl	80107c0 <rcl_init_options_set_domain_id>

	//create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8003242:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8003246:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 800324a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	2200      	movs	r2, #0
 8003254:	2100      	movs	r1, #0
 8003256:	f00e fc9f 	bl	8011b98 <rclc_support_init_with_options>

	//create timer
	rclc_timer_init_default(&mpu6050_timer, &support, timer_period, timer_callback);
 800325a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800325e:	2200      	movs	r2, #0
 8003260:	4698      	mov	r8, r3
 8003262:	4691      	mov	r9, r2
 8003264:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 8003268:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 800326c:	4b53      	ldr	r3, [pc, #332]	@ (80033bc <StartDefaultTask+0x2bc>)
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	f00e fd9c 	bl	8011db0 <rclc_timer_init_default>

	// create node
	rclc_node_init_default(&node, "G474RE_MPU6050_node", "", &support);
 8003278:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 800327c:	4a50      	ldr	r2, [pc, #320]	@ (80033c0 <StartDefaultTask+0x2c0>)
 800327e:	4951      	ldr	r1, [pc, #324]	@ (80033c4 <StartDefaultTask+0x2c4>)
 8003280:	4851      	ldr	r0, [pc, #324]	@ (80033c8 <StartDefaultTask+0x2c8>)
 8003282:	f00e fcbd 	bl	8011c00 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_best_effort(&mpu6050_publisher, &node, imu_type_support, "mpu6050_publisher");
 8003286:	4b51      	ldr	r3, [pc, #324]	@ (80033cc <StartDefaultTask+0x2cc>)
 8003288:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800328c:	494e      	ldr	r1, [pc, #312]	@ (80033c8 <StartDefaultTask+0x2c8>)
 800328e:	4850      	ldr	r0, [pc, #320]	@ (80033d0 <StartDefaultTask+0x2d0>)
 8003290:	f00e fd26 	bl	8011ce0 <rclc_publisher_init_best_effort>
	rclc_publisher_init_default(&cmd_vel_publisher, &node, cmd_type_support, "cmd_vel");
 8003294:	4b4f      	ldr	r3, [pc, #316]	@ (80033d4 <StartDefaultTask+0x2d4>)
 8003296:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 800329a:	494b      	ldr	r1, [pc, #300]	@ (80033c8 <StartDefaultTask+0x2c8>)
 800329c:	484e      	ldr	r0, [pc, #312]	@ (80033d8 <StartDefaultTask+0x2d8>)
 800329e:	f00e fceb 	bl	8011c78 <rclc_publisher_init_default>
//	rclc_publisher_init_default(&cmd_vell_publisher, &node, cmd_type_support, "cmd_vell");
	//create subscriber


	//create service server
	if (B1 == GPIO_PIN_RESET) {
 80032a2:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10c      	bne.n	80032c4 <StartDefaultTask+0x1c4>
		rclc_service_init_default(&imu_calibration_server, &node, imu_calib_type_support, "imu_calibration");
 80032aa:	4b4c      	ldr	r3, [pc, #304]	@ (80033dc <StartDefaultTask+0x2dc>)
 80032ac:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80032b0:	4945      	ldr	r1, [pc, #276]	@ (80033c8 <StartDefaultTask+0x2c8>)
 80032b2:	484b      	ldr	r0, [pc, #300]	@ (80033e0 <StartDefaultTask+0x2e0>)
 80032b4:	f00e fd48 	bl	8011d48 <rclc_service_init_default>
		executor_num++;
 80032b8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80032bc:	3301      	adds	r3, #1
 80032be:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80032c2:	e002      	b.n	80032ca <StartDefaultTask+0x1ca>
	}
	else{
		on_calib = true;
 80032c4:	4b47      	ldr	r3, [pc, #284]	@ (80033e4 <StartDefaultTask+0x2e4>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	701a      	strb	r2, [r3, #0]
	}

	rclc_service_init_default(&imu_status_server, &node, imu_status_type_support, "imu/status");
 80032ca:	4b47      	ldr	r3, [pc, #284]	@ (80033e8 <StartDefaultTask+0x2e8>)
 80032cc:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80032d0:	493d      	ldr	r1, [pc, #244]	@ (80033c8 <StartDefaultTask+0x2c8>)
 80032d2:	4846      	ldr	r0, [pc, #280]	@ (80033ec <StartDefaultTask+0x2ec>)
 80032d4:	f00e fd38 	bl	8011d48 <rclc_service_init_default>

	//create service client
	rclc_client_init_default(&robot_controller_client, &node, keyboard_type_support, "Mode");
 80032d8:	4b45      	ldr	r3, [pc, #276]	@ (80033f0 <StartDefaultTask+0x2f0>)
 80032da:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80032de:	493a      	ldr	r1, [pc, #232]	@ (80033c8 <StartDefaultTask+0x2c8>)
 80032e0:	4844      	ldr	r0, [pc, #272]	@ (80033f4 <StartDefaultTask+0x2f4>)
 80032e2:	f00d fdd1 	bl	8010e88 <rclc_client_init_default>
	rclc_client_init_default(&robot_controller_Ref_client, &node, keyboard_type_support, "Ref");
 80032e6:	4b44      	ldr	r3, [pc, #272]	@ (80033f8 <StartDefaultTask+0x2f8>)
 80032e8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80032ec:	4936      	ldr	r1, [pc, #216]	@ (80033c8 <StartDefaultTask+0x2c8>)
 80032ee:	4843      	ldr	r0, [pc, #268]	@ (80033fc <StartDefaultTask+0x2fc>)
 80032f0:	f00d fdca 	bl	8010e88 <rclc_client_init_default>
	rclc_client_init_default(&robot_controller_saved_client, &node, trigger_type_support, "SavePath");
 80032f4:	4b42      	ldr	r3, [pc, #264]	@ (8003400 <StartDefaultTask+0x300>)
 80032f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80032fa:	4933      	ldr	r1, [pc, #204]	@ (80033c8 <StartDefaultTask+0x2c8>)
 80032fc:	4841      	ldr	r0, [pc, #260]	@ (8003404 <StartDefaultTask+0x304>)
 80032fe:	f00d fdc3 	bl	8010e88 <rclc_client_init_default>

	//create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 8003302:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003306:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800330a:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 800330e:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8003312:	f00e f941 	bl	8011598 <rclc_executor_init>

	rclc_executor_add_timer(&executor, &mpu6050_timer);
 8003316:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800331a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f00e f9a9 	bl	8011678 <rclc_executor_add_timer>
	if (B1 == GPIO_PIN_RESET) rclc_executor_add_service(&executor, &imu_calibration_server, &imu_calibration_request, &imu_calibration_response, imu_calib_service_callback);
 8003326:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 800332a:	2b00      	cmp	r3, #0
 800332c:	d108      	bne.n	8003340 <StartDefaultTask+0x240>
 800332e:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8003332:	4b35      	ldr	r3, [pc, #212]	@ (8003408 <StartDefaultTask+0x308>)
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	4b35      	ldr	r3, [pc, #212]	@ (800340c <StartDefaultTask+0x30c>)
 8003338:	4a35      	ldr	r2, [pc, #212]	@ (8003410 <StartDefaultTask+0x310>)
 800333a:	4929      	ldr	r1, [pc, #164]	@ (80033e0 <StartDefaultTask+0x2e0>)
 800333c:	f00e f9c6 	bl	80116cc <rclc_executor_add_service>
	rclc_executor_add_service(&executor, &imu_status_server, &imu_status_request, &imu_status_response, imu_status_service_callback);
 8003340:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8003344:	4b33      	ldr	r3, [pc, #204]	@ (8003414 <StartDefaultTask+0x314>)
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	4b33      	ldr	r3, [pc, #204]	@ (8003418 <StartDefaultTask+0x318>)
 800334a:	4a34      	ldr	r2, [pc, #208]	@ (800341c <StartDefaultTask+0x31c>)
 800334c:	4927      	ldr	r1, [pc, #156]	@ (80033ec <StartDefaultTask+0x2ec>)
 800334e:	f00e f9bd 	bl	80116cc <rclc_executor_add_service>

	rclc_executor_spin(&executor);
 8003352:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003356:	4618      	mov	r0, r3
 8003358:	f00e fbde 	bl	8011b18 <rclc_executor_spin>

	rmw_uros_sync_session(timeout_ms);
 800335c:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 8003360:	f010 fc48 	bl	8013bf4 <rmw_uros_sync_session>

	//create message
	mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8003364:	4c2e      	ldr	r4, [pc, #184]	@ (8003420 <StartDefaultTask+0x320>)
 8003366:	463b      	mov	r3, r7
 8003368:	492e      	ldr	r1, [pc, #184]	@ (8003424 <StartDefaultTask+0x324>)
 800336a:	4618      	mov	r0, r3
 800336c:	f00b fc40 	bl	800ebf0 <micro_ros_string_utilities_init>
 8003370:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003374:	f5a3 72e0 	sub.w	r2, r3, #448	@ 0x1c0
 8003378:	f104 0308 	add.w	r3, r4, #8
 800337c:	ca07      	ldmia	r2, {r0, r1, r2}
 800337e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for(;;)
	{
		osDelay(10);
 8003382:	200a      	movs	r0, #10
 8003384:	f008 fd3a 	bl	800bdfc <osDelay>
 8003388:	e7fb      	b.n	8003382 <StartDefaultTask+0x282>
 800338a:	bf00      	nop
 800338c:	0800464d 	.word	0x0800464d
 8003390:	080045e9 	.word	0x080045e9
 8003394:	080045c9 	.word	0x080045c9
 8003398:	0800459d 	.word	0x0800459d
 800339c:	20005120 	.word	0x20005120
 80033a0:	08003d21 	.word	0x08003d21
 80033a4:	08003d65 	.word	0x08003d65
 80033a8:	08003d9d 	.word	0x08003d9d
 80033ac:	08003e09 	.word	0x08003e09
 80033b0:	0801f720 	.word	0x0801f720
 80033b4:	48000800 	.word	0x48000800
 80033b8:	00989680 	.word	0x00989680
 80033bc:	080020d9 	.word	0x080020d9
 80033c0:	0801f748 	.word	0x0801f748
 80033c4:	0801f74c 	.word	0x0801f74c
 80033c8:	20000f18 	.word	0x20000f18
 80033cc:	0801f760 	.word	0x0801f760
 80033d0:	20000f20 	.word	0x20000f20
 80033d4:	0801f774 	.word	0x0801f774
 80033d8:	20001068 	.word	0x20001068
 80033dc:	0801f77c 	.word	0x0801f77c
 80033e0:	200010d0 	.word	0x200010d0
 80033e4:	20001439 	.word	0x20001439
 80033e8:	0801f78c 	.word	0x0801f78c
 80033ec:	2000121c 	.word	0x2000121c
 80033f0:	0801f798 	.word	0x0801f798
 80033f4:	20001234 	.word	0x20001234
 80033f8:	0801f7a0 	.word	0x0801f7a0
 80033fc:	20001260 	.word	0x20001260
 8003400:	0801f7a4 	.word	0x0801f7a4
 8003404:	20001264 	.word	0x20001264
 8003408:	08002df5 	.word	0x08002df5
 800340c:	20001218 	.word	0x20001218
 8003410:	200010d8 	.word	0x200010d8
 8003414:	08002ea5 	.word	0x08002ea5
 8003418:	20001224 	.word	0x20001224
 800341c:	20001220 	.word	0x20001220
 8003420:	20000f28 	.word	0x20000f28
 8003424:	0801f7b0 	.word	0x0801f7b0

08003428 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	@ 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003434:	f009 fd24 	bl	800ce80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003438:	4b5a      	ldr	r3, [pc, #360]	@ (80035a4 <pvPortMallocMicroROS+0x17c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8003440:	f000 f986 	bl	8003750 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003444:	4b58      	ldr	r3, [pc, #352]	@ (80035a8 <pvPortMallocMicroROS+0x180>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	f040 8090 	bne.w	8003572 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01e      	beq.n	8003496 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003458:	2208      	movs	r2, #8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	2b00      	cmp	r3, #0
 8003468:	d015      	beq.n	8003496 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f023 0307 	bic.w	r3, r3, #7
 8003470:	3308      	adds	r3, #8
 8003472:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	e7fd      	b.n	8003492 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d06a      	beq.n	8003572 <pvPortMallocMicroROS+0x14a>
 800349c:	4b43      	ldr	r3, [pc, #268]	@ (80035ac <pvPortMallocMicroROS+0x184>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d865      	bhi.n	8003572 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80034a6:	4b42      	ldr	r3, [pc, #264]	@ (80035b0 <pvPortMallocMicroROS+0x188>)
 80034a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80034aa:	4b41      	ldr	r3, [pc, #260]	@ (80035b0 <pvPortMallocMicroROS+0x188>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034b0:	e004      	b.n	80034bc <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d903      	bls.n	80034ce <pvPortMallocMicroROS+0xa6>
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f1      	bne.n	80034b2 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80034ce:	4b35      	ldr	r3, [pc, #212]	@ (80035a4 <pvPortMallocMicroROS+0x17c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d04c      	beq.n	8003572 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2208      	movs	r2, #8
 80034de:	4413      	add	r3, r2
 80034e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	1ad2      	subs	r2, r2, r3
 80034f2:	2308      	movs	r3, #8
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d920      	bls.n	800353c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4413      	add	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	613b      	str	r3, [r7, #16]
}
 800351e:	bf00      	nop
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	1ad2      	subs	r2, r2, r3
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003536:	69b8      	ldr	r0, [r7, #24]
 8003538:	f000 f96c 	bl	8003814 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800353c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ac <pvPortMallocMicroROS+0x184>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	4a19      	ldr	r2, [pc, #100]	@ (80035ac <pvPortMallocMicroROS+0x184>)
 8003548:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800354a:	4b18      	ldr	r3, [pc, #96]	@ (80035ac <pvPortMallocMicroROS+0x184>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b19      	ldr	r3, [pc, #100]	@ (80035b4 <pvPortMallocMicroROS+0x18c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d203      	bcs.n	800355e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003556:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <pvPortMallocMicroROS+0x184>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a16      	ldr	r2, [pc, #88]	@ (80035b4 <pvPortMallocMicroROS+0x18c>)
 800355c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <pvPortMallocMicroROS+0x180>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	431a      	orrs	r2, r3
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003572:	f009 fc93 	bl	800ce9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	60fb      	str	r3, [r7, #12]
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8003598:	69fb      	ldr	r3, [r7, #28]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3728      	adds	r7, #40	@ 0x28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20005050 	.word	0x20005050
 80035a8:	2000505c 	.word	0x2000505c
 80035ac:	20005054 	.word	0x20005054
 80035b0:	20005048 	.word	0x20005048
 80035b4:	20005058 	.word	0x20005058

080035b8 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d04a      	beq.n	8003660 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80035ca:	2308      	movs	r3, #8
 80035cc:	425b      	negs	r3, r3
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4413      	add	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	4b22      	ldr	r3, [pc, #136]	@ (8003668 <vPortFreeMicroROS+0xb0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <vPortFreeMicroROS+0x46>
	__asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	60fb      	str	r3, [r7, #12]
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	e7fd      	b.n	80035fa <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <vPortFreeMicroROS+0x66>
	__asm volatile
 8003606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	60bb      	str	r3, [r7, #8]
}
 8003618:	bf00      	nop
 800361a:	bf00      	nop
 800361c:	e7fd      	b.n	800361a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <vPortFreeMicroROS+0xb0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d019      	beq.n	8003660 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d115      	bne.n	8003660 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <vPortFreeMicroROS+0xb0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	43db      	mvns	r3, r3
 800363e:	401a      	ands	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003644:	f009 fc1c 	bl	800ce80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4b07      	ldr	r3, [pc, #28]	@ (800366c <vPortFreeMicroROS+0xb4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4413      	add	r3, r2
 8003652:	4a06      	ldr	r2, [pc, #24]	@ (800366c <vPortFreeMicroROS+0xb4>)
 8003654:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003656:	6938      	ldr	r0, [r7, #16]
 8003658:	f000 f8dc 	bl	8003814 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800365c:	f009 fc1e 	bl	800ce9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003660:	bf00      	nop
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	2000505c 	.word	0x2000505c
 800366c:	20005054 	.word	0x20005054

08003670 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800367c:	2308      	movs	r3, #8
 800367e:	425b      	negs	r3, r3
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4413      	add	r3, r2
 8003684:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <getBlockSize+0x38>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	43db      	mvns	r3, r3
 8003694:	4013      	ands	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]

	return count;
 8003698:	68fb      	ldr	r3, [r7, #12]
}
 800369a:	4618      	mov	r0, r3
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	2000505c 	.word	0x2000505c

080036ac <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80036b6:	f009 fbe3 	bl	800ce80 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80036ba:	6838      	ldr	r0, [r7, #0]
 80036bc:	f7ff feb4 	bl	8003428 <pvPortMallocMicroROS>
 80036c0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d017      	beq.n	80036f8 <pvPortReallocMicroROS+0x4c>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d014      	beq.n	80036f8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ffce 	bl	8003670 <getBlockSize>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2208      	movs	r2, #8
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d201      	bcs.n	80036e8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	68b8      	ldr	r0, [r7, #8]
 80036ee:	f01a fe10 	bl	801e312 <memcpy>

		vPortFreeMicroROS(pv);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ff60 	bl	80035b8 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80036f8:	f009 fbd0 	bl	800ce9c <xTaskResumeAll>

	return newmem;
 80036fc:	68bb      	ldr	r3, [r7, #8]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8003710:	f009 fbb6 	bl	800ce80 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	fb02 f303 	mul.w	r3, r2, r3
 800371c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7ff fe82 	bl	8003428 <pvPortMallocMicroROS>
 8003724:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	613b      	str	r3, [r7, #16]

  	while(count--)
 800372a:	e004      	b.n	8003736 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	613a      	str	r2, [r7, #16]
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	1e5a      	subs	r2, r3, #1
 800373a:	617a      	str	r2, [r7, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f5      	bne.n	800372c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8003740:	f009 fbac 	bl	800ce9c <xTaskResumeAll>
  	return mem;
 8003744:	68fb      	ldr	r3, [r7, #12]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003756:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800375a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800375c:	4b27      	ldr	r3, [pc, #156]	@ (80037fc <prvHeapInit+0xac>)
 800375e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3307      	adds	r3, #7
 800376e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0307 	bic.w	r3, r3, #7
 8003776:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	4a1f      	ldr	r2, [pc, #124]	@ (80037fc <prvHeapInit+0xac>)
 8003780:	4413      	add	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003788:	4a1d      	ldr	r2, [pc, #116]	@ (8003800 <prvHeapInit+0xb0>)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800378e:	4b1c      	ldr	r3, [pc, #112]	@ (8003800 <prvHeapInit+0xb0>)
 8003790:	2200      	movs	r2, #0
 8003792:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	4413      	add	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800379c:	2208      	movs	r2, #8
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0307 	bic.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a15      	ldr	r2, [pc, #84]	@ (8003804 <prvHeapInit+0xb4>)
 80037b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80037b2:	4b14      	ldr	r3, [pc, #80]	@ (8003804 <prvHeapInit+0xb4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2200      	movs	r2, #0
 80037b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80037ba:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <prvHeapInit+0xb4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	1ad2      	subs	r2, r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <prvHeapInit+0xb4>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003808 <prvHeapInit+0xb8>)
 80037de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a09      	ldr	r2, [pc, #36]	@ (800380c <prvHeapInit+0xbc>)
 80037e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037e8:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <prvHeapInit+0xc0>)
 80037ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80037ee:	601a      	str	r2, [r3, #0]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	20004448 	.word	0x20004448
 8003800:	20005048 	.word	0x20005048
 8003804:	20005050 	.word	0x20005050
 8003808:	20005058 	.word	0x20005058
 800380c:	20005054 	.word	0x20005054
 8003810:	2000505c 	.word	0x2000505c

08003814 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800381c:	4b28      	ldr	r3, [pc, #160]	@ (80038c0 <prvInsertBlockIntoFreeList+0xac>)
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e002      	b.n	8003828 <prvInsertBlockIntoFreeList+0x14>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d8f7      	bhi.n	8003822 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4413      	add	r3, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	d108      	bne.n	8003856 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	441a      	add	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	441a      	add	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d118      	bne.n	800389c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <prvInsertBlockIntoFreeList+0xb0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d00d      	beq.n	8003892 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	441a      	add	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e008      	b.n	80038a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003892:	4b0c      	ldr	r3, [pc, #48]	@ (80038c4 <prvInsertBlockIntoFreeList+0xb0>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e003      	b.n	80038a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d002      	beq.n	80038b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20005048 	.word	0x20005048
 80038c4:	20005050 	.word	0x20005050

080038c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80038ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <MX_DMA_Init+0x70>)
 80038d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d2:	4a19      	ldr	r2, [pc, #100]	@ (8003938 <MX_DMA_Init+0x70>)
 80038d4:	f043 0304 	orr.w	r3, r3, #4
 80038d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80038da:	4b17      	ldr	r3, [pc, #92]	@ (8003938 <MX_DMA_Init+0x70>)
 80038dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038e6:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <MX_DMA_Init+0x70>)
 80038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ea:	4a13      	ldr	r2, [pc, #76]	@ (8003938 <MX_DMA_Init+0x70>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80038f2:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <MX_DMA_Init+0x70>)
 80038f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80038fe:	2200      	movs	r2, #0
 8003900:	2105      	movs	r1, #5
 8003902:	200b      	movs	r0, #11
 8003904:	f002 ff44 	bl	8006790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003908:	200b      	movs	r0, #11
 800390a:	f002 ff5b 	bl	80067c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800390e:	2200      	movs	r2, #0
 8003910:	2105      	movs	r1, #5
 8003912:	200c      	movs	r0, #12
 8003914:	f002 ff3c 	bl	8006790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003918:	200c      	movs	r0, #12
 800391a:	f002 ff53 	bl	80067c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800391e:	2200      	movs	r2, #0
 8003920:	2105      	movs	r1, #5
 8003922:	200d      	movs	r0, #13
 8003924:	f002 ff34 	bl	8006790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003928:	200d      	movs	r0, #13
 800392a:	f002 ff4b 	bl	80067c4 <HAL_NVIC_EnableIRQ>

}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000

0800393c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	@ 0x28
 8003940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003942:	f107 0314 	add.w	r3, r7, #20
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003952:	4b43      	ldr	r3, [pc, #268]	@ (8003a60 <MX_GPIO_Init+0x124>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003956:	4a42      	ldr	r2, [pc, #264]	@ (8003a60 <MX_GPIO_Init+0x124>)
 8003958:	f043 0304 	orr.w	r3, r3, #4
 800395c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800395e:	4b40      	ldr	r3, [pc, #256]	@ (8003a60 <MX_GPIO_Init+0x124>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800396a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a60 <MX_GPIO_Init+0x124>)
 800396c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a60 <MX_GPIO_Init+0x124>)
 8003970:	f043 0320 	orr.w	r3, r3, #32
 8003974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003976:	4b3a      	ldr	r3, [pc, #232]	@ (8003a60 <MX_GPIO_Init+0x124>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	4b37      	ldr	r3, [pc, #220]	@ (8003a60 <MX_GPIO_Init+0x124>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003986:	4a36      	ldr	r2, [pc, #216]	@ (8003a60 <MX_GPIO_Init+0x124>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800398e:	4b34      	ldr	r3, [pc, #208]	@ (8003a60 <MX_GPIO_Init+0x124>)
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800399a:	4b31      	ldr	r3, [pc, #196]	@ (8003a60 <MX_GPIO_Init+0x124>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399e:	4a30      	ldr	r2, [pc, #192]	@ (8003a60 <MX_GPIO_Init+0x124>)
 80039a0:	f043 0302 	orr.w	r3, r3, #2
 80039a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003a60 <MX_GPIO_Init+0x124>)
 80039a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	607b      	str	r3, [r7, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80039b2:	2200      	movs	r2, #0
 80039b4:	2120      	movs	r1, #32
 80039b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039ba:	f003 fccb 	bl	8007354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80039be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80039c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	4619      	mov	r1, r3
 80039d4:	4823      	ldr	r0, [pc, #140]	@ (8003a64 <MX_GPIO_Init+0x128>)
 80039d6:	f003 fa41 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80039da:	2320      	movs	r3, #32
 80039dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039de:	2301      	movs	r3, #1
 80039e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e6:	2300      	movs	r3, #0
 80039e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	4619      	mov	r1, r3
 80039f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039f4:	f003 fa32 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E_Pin;
 80039f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E_GPIO_Port, &GPIO_InitStruct);
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4816      	ldr	r0, [pc, #88]	@ (8003a68 <MX_GPIO_Init+0x12c>)
 8003a10:	f003 fa24 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = F_Pin|K_Pin|A_Pin;
 8003a14:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a22:	f107 0314 	add.w	r3, r7, #20
 8003a26:	4619      	mov	r1, r3
 8003a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a2c:	f003 fa16 	bl	8006e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = B_Pin|D_Pin|C_Pin;
 8003a30:	2338      	movs	r3, #56	@ 0x38
 8003a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a3c:	f107 0314 	add.w	r3, r7, #20
 8003a40:	4619      	mov	r1, r3
 8003a42:	4809      	ldr	r0, [pc, #36]	@ (8003a68 <MX_GPIO_Init+0x12c>)
 8003a44:	f003 fa0a 	bl	8006e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2105      	movs	r1, #5
 8003a4c:	2028      	movs	r0, #40	@ 0x28
 8003a4e:	f002 fe9f 	bl	8006790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a52:	2028      	movs	r0, #40	@ 0x28
 8003a54:	f002 feb6 	bl	80067c4 <HAL_NVIC_EnableIRQ>

}
 8003a58:	bf00      	nop
 8003a5a:	3728      	adds	r7, #40	@ 0x28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	48000800 	.word	0x48000800
 8003a68:	48000400 	.word	0x48000400

08003a6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003a72:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae4 <MX_I2C1_Init+0x78>)
 8003a74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8003a76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003a78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae8 <MX_I2C1_Init+0x7c>)
 8003a7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a82:	4b17      	ldr	r3, [pc, #92]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a88:	4b15      	ldr	r3, [pc, #84]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a94:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003aa6:	480e      	ldr	r0, [pc, #56]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003aa8:	f003 fc9e 	bl	80073e8 <HAL_I2C_Init>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ab2:	f000 f92f 	bl	8003d14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4809      	ldr	r0, [pc, #36]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003aba:	f004 fa5b 	bl	8007f74 <HAL_I2CEx_ConfigAnalogFilter>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ac4:	f000 f926 	bl	8003d14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4805      	ldr	r0, [pc, #20]	@ (8003ae0 <MX_I2C1_Init+0x74>)
 8003acc:	f004 fa9d 	bl	800800a <HAL_I2CEx_ConfigDigitalFilter>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003ad6:	f000 f91d 	bl	8003d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20005060 	.word	0x20005060
 8003ae4:	40005400 	.word	0x40005400
 8003ae8:	40621236 	.word	0x40621236

08003aec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b09e      	sub	sp, #120	@ 0x78
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b04:	f107 0310 	add.w	r3, r7, #16
 8003b08:	2254      	movs	r2, #84	@ 0x54
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f01a fb37 	bl	801e180 <memset>
  if(i2cHandle->Instance==I2C1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1f      	ldr	r2, [pc, #124]	@ (8003b94 <HAL_I2C_MspInit+0xa8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d136      	bne.n	8003b8a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003b1c:	2340      	movs	r3, #64	@ 0x40
 8003b1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b24:	f107 0310 	add.w	r3, r7, #16
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f005 f92d 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003b34:	f000 f8ee 	bl	8003d14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b38:	4b17      	ldr	r3, [pc, #92]	@ (8003b98 <HAL_I2C_MspInit+0xac>)
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3c:	4a16      	ldr	r2, [pc, #88]	@ (8003b98 <HAL_I2C_MspInit+0xac>)
 8003b3e:	f043 0302 	orr.w	r3, r3, #2
 8003b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b44:	4b14      	ldr	r3, [pc, #80]	@ (8003b98 <HAL_I2C_MspInit+0xac>)
 8003b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b54:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b56:	2312      	movs	r3, #18
 8003b58:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b62:	2304      	movs	r3, #4
 8003b64:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b66:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	480b      	ldr	r0, [pc, #44]	@ (8003b9c <HAL_I2C_MspInit+0xb0>)
 8003b6e:	f003 f975 	bl	8006e5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b72:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <HAL_I2C_MspInit+0xac>)
 8003b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b76:	4a08      	ldr	r2, [pc, #32]	@ (8003b98 <HAL_I2C_MspInit+0xac>)
 8003b78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b7e:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <HAL_I2C_MspInit+0xac>)
 8003b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3778      	adds	r7, #120	@ 0x78
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40005400 	.word	0x40005400
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	48000400 	.word	0x48000400

08003ba0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0b      	ldr	r2, [pc, #44]	@ (8003bdc <HAL_I2C_MspDeInit+0x3c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10f      	bne.n	8003bd2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <HAL_I2C_MspDeInit+0x40>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003be0 <HAL_I2C_MspDeInit+0x40>)
 8003bb8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bbc:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003bbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bc2:	4808      	ldr	r0, [pc, #32]	@ (8003be4 <HAL_I2C_MspDeInit+0x44>)
 8003bc4:	f003 facc 	bl	8007160 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003bc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bcc:	4805      	ldr	r0, [pc, #20]	@ (8003be4 <HAL_I2C_MspDeInit+0x44>)
 8003bce:	f003 fac7 	bl	8007160 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40005400 	.word	0x40005400
 8003be0:	40021000 	.word	0x40021000
 8003be4:	48000400 	.word	0x48000400

08003be8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <MX_IWDG_Init+0x34>)
 8003bee:	4a0c      	ldr	r2, [pc, #48]	@ (8003c20 <MX_IWDG_Init+0x38>)
 8003bf0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <MX_IWDG_Init+0x34>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8003bf8:	4b08      	ldr	r3, [pc, #32]	@ (8003c1c <MX_IWDG_Init+0x34>)
 8003bfa:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8003bfe:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8003c00:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <MX_IWDG_Init+0x34>)
 8003c02:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8003c06:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003c08:	4804      	ldr	r0, [pc, #16]	@ (8003c1c <MX_IWDG_Init+0x34>)
 8003c0a:	f004 fa4a 	bl	80080a2 <HAL_IWDG_Init>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8003c14:	f000 f87e 	bl	8003d14 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003c18:	bf00      	nop
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	200050b4 	.word	0x200050b4
 8003c20:	40003000 	.word	0x40003000

08003c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c28:	f000 fd8d 	bl	8004746 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c2c:	f000 f814 	bl	8003c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c30:	f7ff fe84 	bl	800393c <MX_GPIO_Init>
  MX_DMA_Init();
 8003c34:	f7ff fe48 	bl	80038c8 <MX_DMA_Init>
  MX_I2C1_Init();
 8003c38:	f7ff ff18 	bl	8003a6c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8003c3c:	f000 fba6 	bl	800438c <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 8003c40:	f7ff ffd2 	bl	8003be8 <MX_IWDG_Init>
  MX_ADC1_Init();
 8003c44:	f7fd f9d8 	bl	8000ff8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003c48:	f007 fffc 	bl	800bc44 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003c4c:	f7ff fa0e 	bl	800306c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003c50:	f008 f81c 	bl	800bc8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003c54:	bf00      	nop
 8003c56:	e7fd      	b.n	8003c54 <main+0x30>

08003c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b094      	sub	sp, #80	@ 0x50
 8003c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c5e:	f107 0318 	add.w	r3, r7, #24
 8003c62:	2238      	movs	r2, #56	@ 0x38
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f01a fa8a 	bl	801e180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c6c:	1d3b      	adds	r3, r7, #4
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	60da      	str	r2, [r3, #12]
 8003c78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f004 fa70 	bl	8008160 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003c80:	2309      	movs	r3, #9
 8003c82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c88:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c92:	2303      	movs	r3, #3
 8003c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8003c96:	2306      	movs	r3, #6
 8003c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003c9a:	2355      	movs	r3, #85	@ 0x55
 8003c9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003caa:	f107 0318 	add.w	r3, r7, #24
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f004 fb0a 	bl	80082c8 <HAL_RCC_OscConfig>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003cba:	f000 f82b 	bl	8003d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cbe:	230f      	movs	r3, #15
 8003cc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003cd2:	1d3b      	adds	r3, r7, #4
 8003cd4:	2104      	movs	r1, #4
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f004 fe08 	bl	80088ec <HAL_RCC_ClockConfig>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003ce2:	f000 f817 	bl	8003d14 <Error_Handler>
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	3750      	adds	r7, #80	@ 0x50
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a04      	ldr	r2, [pc, #16]	@ (8003d10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003d02:	f000 fd39 	bl	8004778 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40012c00 	.word	0x40012c00

08003d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d18:	b672      	cpsid	i
}
 8003d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <Error_Handler+0x8>

08003d20 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <microros_allocate+0x3c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <microros_allocate+0x3c>)
 8003d38:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003d3a:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <microros_allocate+0x40>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <microros_allocate+0x40>)
 8003d48:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fb6c 	bl	8003428 <pvPortMallocMicroROS>
 8003d50:	4603      	mov	r3, r0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	200050c4 	.word	0x200050c4
 8003d60:	200050c8 	.word	0x200050c8

08003d64 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00c      	beq.n	8003d8e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff fc7b 	bl	8003670 <getBlockSize>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4a06      	ldr	r2, [pc, #24]	@ (8003d98 <microros_deallocate+0x34>)
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b04      	ldr	r3, [pc, #16]	@ (8003d98 <microros_deallocate+0x34>)
 8003d86:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fc15 	bl	80035b8 <vPortFreeMicroROS>
  }
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200050c8 	.word	0x200050c8

08003d9c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003da8:	4b15      	ldr	r3, [pc, #84]	@ (8003e00 <microros_reallocate+0x64>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4413      	add	r3, r2
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b12      	ldr	r3, [pc, #72]	@ (8003e00 <microros_reallocate+0x64>)
 8003db6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003db8:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <microros_reallocate+0x68>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e04 <microros_reallocate+0x68>)
 8003dc6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8003dce:	68b8      	ldr	r0, [r7, #8]
 8003dd0:	f7ff fb2a 	bl	8003428 <pvPortMallocMicroROS>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	e00e      	b.n	8003df6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff fc49 	bl	8003670 <getBlockSize>
 8003dde:	4603      	mov	r3, r0
 8003de0:	4a08      	ldr	r2, [pc, #32]	@ (8003e04 <microros_reallocate+0x68>)
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <microros_reallocate+0x68>)
 8003dea:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff fc5c 	bl	80036ac <pvPortReallocMicroROS>
 8003df4:	4603      	mov	r3, r0
  }
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	200050c4 	.word	0x200050c4
 8003e04:	200050c8 	.word	0x200050c8

08003e08 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	fb02 f303 	mul.w	r3, r2, r3
 8003e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003e50 <microros_zero_allocate+0x48>)
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <microros_zero_allocate+0x48>)
 8003e26:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
 8003e30:	4a08      	ldr	r2, [pc, #32]	@ (8003e54 <microros_zero_allocate+0x4c>)
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	4413      	add	r3, r2
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <microros_zero_allocate+0x4c>)
 8003e3a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff fc61 	bl	8003706 <pvPortCallocMicroROS>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200050c4 	.word	0x200050c4
 8003e54:	200050c8 	.word	0x200050c8

08003e58 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8003e6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e6e:	a320      	add	r3, pc, #128	@ (adr r3, 8003ef0 <UTILS_NanosecondsToTimespec+0x98>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f7fc fef8 	bl	8000c68 <__aeabi_ldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003e82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e86:	a31a      	add	r3, pc, #104	@ (adr r3, 8003ef0 <UTILS_NanosecondsToTimespec+0x98>)
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f7fc feec 	bl	8000c68 <__aeabi_ldivmod>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	da20      	bge.n	8003ede <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4a11      	ldr	r2, [pc, #68]	@ (8003ee8 <UTILS_NanosecondsToTimespec+0x90>)
 8003ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8003ea6:	1712      	asrs	r2, r2, #28
 8003ea8:	17db      	asrs	r3, r3, #31
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	6979      	ldr	r1, [r7, #20]
 8003eb8:	17c8      	asrs	r0, r1, #31
 8003eba:	460c      	mov	r4, r1
 8003ebc:	4605      	mov	r5, r0
 8003ebe:	ebb2 0804 	subs.w	r8, r2, r4
 8003ec2:	eb63 0905 	sbc.w	r9, r3, r5
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4906      	ldr	r1, [pc, #24]	@ (8003eec <UTILS_NanosecondsToTimespec+0x94>)
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	441a      	add	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	609a      	str	r2, [r3, #8]
    }
}
 8003ede:	bf00      	nop
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ee8:	44b82fa1 	.word	0x44b82fa1
 8003eec:	3b9aca00 	.word	0x3b9aca00
 8003ef0:	3b9aca00 	.word	0x3b9aca00
 8003ef4:	00000000 	.word	0x00000000

08003ef8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003efc:	b08e      	sub	sp, #56	@ 0x38
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f02:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003f04:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003f08:	2300      	movs	r3, #0
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8003f1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f009 fa38 	bl	800d394 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f26:	17da      	asrs	r2, r3, #31
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	61fa      	str	r2, [r7, #28]
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	69b9      	ldr	r1, [r7, #24]
 8003f36:	000b      	movs	r3, r1
 8003f38:	2200      	movs	r2, #0
 8003f3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8003f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f40:	2200      	movs	r2, #0
 8003f42:	461c      	mov	r4, r3
 8003f44:	4615      	mov	r5, r2
 8003f46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003f4a:	1911      	adds	r1, r2, r4
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	416b      	adcs	r3, r5
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003f56:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8003f5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	f04f 0400 	mov.w	r4, #0
 8003f66:	f04f 0500 	mov.w	r5, #0
 8003f6a:	015d      	lsls	r5, r3, #5
 8003f6c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003f70:	0154      	lsls	r4, r2, #5
 8003f72:	4622      	mov	r2, r4
 8003f74:	462b      	mov	r3, r5
 8003f76:	ebb2 0800 	subs.w	r8, r2, r0
 8003f7a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003f8a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003f8e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003f92:	4690      	mov	r8, r2
 8003f94:	4699      	mov	r9, r3
 8003f96:	eb18 0a00 	adds.w	sl, r8, r0
 8003f9a:	eb49 0b01 	adc.w	fp, r9, r1
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003faa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fb2:	ebb2 040a 	subs.w	r4, r2, sl
 8003fb6:	603c      	str	r4, [r7, #0]
 8003fb8:	eb63 030b 	sbc.w	r3, r3, fp
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	181b      	adds	r3, r3, r0
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	462b      	mov	r3, r5
 8003fca:	eb41 0303 	adc.w	r3, r1, r3
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fd6:	f7ff ff3f 	bl	8003e58 <UTILS_NanosecondsToTimespec>

    return 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3738      	adds	r7, #56	@ 0x38
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fee:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <HAL_MspInit+0x50>)
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff2:	4a11      	ldr	r2, [pc, #68]	@ (8004038 <HAL_MspInit+0x50>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <HAL_MspInit+0x50>)
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <HAL_MspInit+0x50>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400a:	4a0b      	ldr	r2, [pc, #44]	@ (8004038 <HAL_MspInit+0x50>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004010:	6593      	str	r3, [r2, #88]	@ 0x58
 8004012:	4b09      	ldr	r3, [pc, #36]	@ (8004038 <HAL_MspInit+0x50>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800401e:	2200      	movs	r2, #0
 8004020:	210f      	movs	r1, #15
 8004022:	f06f 0001 	mvn.w	r0, #1
 8004026:	f002 fbb3 	bl	8006790 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800402a:	f004 f93d 	bl	80082a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000

0800403c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08c      	sub	sp, #48	@ 0x30
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800404c:	4b2c      	ldr	r3, [pc, #176]	@ (8004100 <HAL_InitTick+0xc4>)
 800404e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004050:	4a2b      	ldr	r2, [pc, #172]	@ (8004100 <HAL_InitTick+0xc4>)
 8004052:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004056:	6613      	str	r3, [r2, #96]	@ 0x60
 8004058:	4b29      	ldr	r3, [pc, #164]	@ (8004100 <HAL_InitTick+0xc4>)
 800405a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004064:	f107 020c 	add.w	r2, r7, #12
 8004068:	f107 0310 	add.w	r3, r7, #16
 800406c:	4611      	mov	r1, r2
 800406e:	4618      	mov	r0, r3
 8004070:	f004 fe12 	bl	8008c98 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004074:	f004 fdfa 	bl	8008c6c <HAL_RCC_GetPCLK2Freq>
 8004078:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800407a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407c:	4a21      	ldr	r2, [pc, #132]	@ (8004104 <HAL_InitTick+0xc8>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	0c9b      	lsrs	r3, r3, #18
 8004084:	3b01      	subs	r3, #1
 8004086:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004088:	4b1f      	ldr	r3, [pc, #124]	@ (8004108 <HAL_InitTick+0xcc>)
 800408a:	4a20      	ldr	r2, [pc, #128]	@ (800410c <HAL_InitTick+0xd0>)
 800408c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800408e:	4b1e      	ldr	r3, [pc, #120]	@ (8004108 <HAL_InitTick+0xcc>)
 8004090:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004094:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004096:	4a1c      	ldr	r2, [pc, #112]	@ (8004108 <HAL_InitTick+0xcc>)
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800409c:	4b1a      	ldr	r3, [pc, #104]	@ (8004108 <HAL_InitTick+0xcc>)
 800409e:	2200      	movs	r2, #0
 80040a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a2:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <HAL_InitTick+0xcc>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80040a8:	4817      	ldr	r0, [pc, #92]	@ (8004108 <HAL_InitTick+0xcc>)
 80040aa:	f005 f8bb 	bl	8009224 <HAL_TIM_Base_Init>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80040b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d11b      	bne.n	80040f4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80040bc:	4812      	ldr	r0, [pc, #72]	@ (8004108 <HAL_InitTick+0xcc>)
 80040be:	f005 f913 	bl	80092e8 <HAL_TIM_Base_Start_IT>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80040c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d111      	bne.n	80040f4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80040d0:	2019      	movs	r0, #25
 80040d2:	f002 fb77 	bl	80067c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b0f      	cmp	r3, #15
 80040da:	d808      	bhi.n	80040ee <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80040dc:	2200      	movs	r2, #0
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	2019      	movs	r0, #25
 80040e2:	f002 fb55 	bl	8006790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004110 <HAL_InitTick+0xd4>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	e002      	b.n	80040f4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80040f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3730      	adds	r7, #48	@ 0x30
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	431bde83 	.word	0x431bde83
 8004108:	200050cc 	.word	0x200050cc
 800410c:	40012c00 	.word	0x40012c00
 8004110:	20000008 	.word	0x20000008

08004114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <NMI_Handler+0x4>

0800411c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <HardFault_Handler+0x4>

08004124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <MemManage_Handler+0x4>

0800412c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004130:	bf00      	nop
 8004132:	e7fd      	b.n	8004130 <BusFault_Handler+0x4>

08004134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <UsageFault_Handler+0x4>

0800413c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004150:	4802      	ldr	r0, [pc, #8]	@ (800415c <DMA1_Channel1_IRQHandler+0x10>)
 8004152:	f002 fd28 	bl	8006ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	200051b4 	.word	0x200051b4

08004160 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004164:	4802      	ldr	r0, [pc, #8]	@ (8004170 <DMA1_Channel2_IRQHandler+0x10>)
 8004166:	f002 fd1e 	bl	8006ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20005214 	.word	0x20005214

08004174 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004178:	4802      	ldr	r0, [pc, #8]	@ (8004184 <DMA1_Channel3_IRQHandler+0x10>)
 800417a:	f002 fd14 	bl	8006ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000eb8 	.word	0x20000eb8

08004188 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800418c:	4802      	ldr	r0, [pc, #8]	@ (8004198 <ADC1_2_IRQHandler+0x10>)
 800418e:	f001 f807 	bl	80051a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000e4c 	.word	0x20000e4c

0800419c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041a0:	4802      	ldr	r0, [pc, #8]	@ (80041ac <TIM1_UP_TIM16_IRQHandler+0x10>)
 80041a2:	f005 f919 	bl	80093d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200050cc 	.word	0x200050cc

080041b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_Pin);
 80041b4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80041b8:	f003 f8fe 	bl	80073b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80041bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80041c0:	f003 f8fa 	bl	80073b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041c4:	bf00      	nop
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80041cc:	4802      	ldr	r0, [pc, #8]	@ (80041d8 <LPUART1_IRQHandler+0x10>)
 80041ce:	f005 fd27 	bl	8009c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20005120 	.word	0x20005120

080041dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return 1;
 80041e0:	2301      	movs	r3, #1
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <_kill>:

int _kill(int pid, int sig)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041f6:	f01a f857 	bl	801e2a8 <__errno>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2216      	movs	r2, #22
 80041fe:	601a      	str	r2, [r3, #0]
  return -1;
 8004200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <_exit>:

void _exit (int status)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004214:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff ffe7 	bl	80041ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800421e:	bf00      	nop
 8004220:	e7fd      	b.n	800421e <_exit+0x12>

08004222 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b086      	sub	sp, #24
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e00a      	b.n	800424a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004234:	f3af 8000 	nop.w
 8004238:	4601      	mov	r1, r0
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	60ba      	str	r2, [r7, #8]
 8004240:	b2ca      	uxtb	r2, r1
 8004242:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	3301      	adds	r3, #1
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	429a      	cmp	r2, r3
 8004250:	dbf0      	blt.n	8004234 <_read+0x12>
  }

  return len;
 8004252:	687b      	ldr	r3, [r7, #4]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e009      	b.n	8004282 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	60ba      	str	r2, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3301      	adds	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	dbf1      	blt.n	800426e <_write+0x12>
  }
  return len;
 800428a:	687b      	ldr	r3, [r7, #4]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_close>:

int _close(int file)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800429c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042bc:	605a      	str	r2, [r3, #4]
  return 0;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <_isatty>:

int _isatty(int file)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042d4:	2301      	movs	r3, #1
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004304:	4a14      	ldr	r2, [pc, #80]	@ (8004358 <_sbrk+0x5c>)
 8004306:	4b15      	ldr	r3, [pc, #84]	@ (800435c <_sbrk+0x60>)
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004310:	4b13      	ldr	r3, [pc, #76]	@ (8004360 <_sbrk+0x64>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004318:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <_sbrk+0x64>)
 800431a:	4a12      	ldr	r2, [pc, #72]	@ (8004364 <_sbrk+0x68>)
 800431c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800431e:	4b10      	ldr	r3, [pc, #64]	@ (8004360 <_sbrk+0x64>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	429a      	cmp	r2, r3
 800432a:	d207      	bcs.n	800433c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800432c:	f019 ffbc 	bl	801e2a8 <__errno>
 8004330:	4603      	mov	r3, r0
 8004332:	220c      	movs	r2, #12
 8004334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800433a:	e009      	b.n	8004350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800433c:	4b08      	ldr	r3, [pc, #32]	@ (8004360 <_sbrk+0x64>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004342:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <_sbrk+0x64>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4413      	add	r3, r2
 800434a:	4a05      	ldr	r2, [pc, #20]	@ (8004360 <_sbrk+0x64>)
 800434c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800434e:	68fb      	ldr	r3, [r7, #12]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20020000 	.word	0x20020000
 800435c:	00000400 	.word	0x00000400
 8004360:	2000511c 	.word	0x2000511c
 8004364:	2000c698 	.word	0x2000c698

08004368 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800436c:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <SystemInit+0x20>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	4a05      	ldr	r2, [pc, #20]	@ (8004388 <SystemInit+0x20>)
 8004374:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800437c:	bf00      	nop
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	e000ed00 	.word	0xe000ed00

0800438c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004390:	4b20      	ldr	r3, [pc, #128]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 8004392:	4a21      	ldr	r2, [pc, #132]	@ (8004418 <MX_LPUART1_UART_Init+0x8c>)
 8004394:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8004396:	4b1f      	ldr	r3, [pc, #124]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 8004398:	4a20      	ldr	r2, [pc, #128]	@ (800441c <MX_LPUART1_UART_Init+0x90>)
 800439a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800439c:	4b1d      	ldr	r3, [pc, #116]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 800439e:	2200      	movs	r2, #0
 80043a0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80043a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80043a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80043ae:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 80043b0:	220c      	movs	r2, #12
 80043b2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043b4:	4b17      	ldr	r3, [pc, #92]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043ba:	4b16      	ldr	r3, [pc, #88]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 80043bc:	2200      	movs	r2, #0
 80043be:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043c0:	4b14      	ldr	r3, [pc, #80]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043c6:	4b13      	ldr	r3, [pc, #76]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80043cc:	4811      	ldr	r0, [pc, #68]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 80043ce:	f005 fa75 	bl	80098bc <HAL_UART_Init>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80043d8:	f7ff fc9c 	bl	8003d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043dc:	2100      	movs	r1, #0
 80043de:	480d      	ldr	r0, [pc, #52]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 80043e0:	f006 ff85 	bl	800b2ee <HAL_UARTEx_SetTxFifoThreshold>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80043ea:	f7ff fc93 	bl	8003d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043ee:	2100      	movs	r1, #0
 80043f0:	4808      	ldr	r0, [pc, #32]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 80043f2:	f006 ffba 	bl	800b36a <HAL_UARTEx_SetRxFifoThreshold>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80043fc:	f7ff fc8a 	bl	8003d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004400:	4804      	ldr	r0, [pc, #16]	@ (8004414 <MX_LPUART1_UART_Init+0x88>)
 8004402:	f006 ff3b 	bl	800b27c <HAL_UARTEx_DisableFifoMode>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800440c:	f7ff fc82 	bl	8003d14 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004410:	bf00      	nop
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20005120 	.word	0x20005120
 8004418:	40008000 	.word	0x40008000
 800441c:	001e8480 	.word	0x001e8480

08004420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b09e      	sub	sp, #120	@ 0x78
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004428:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004438:	f107 0310 	add.w	r3, r7, #16
 800443c:	2254      	movs	r2, #84	@ 0x54
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f019 fe9d 	bl	801e180 <memset>
  if(uartHandle->Instance==LPUART1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a4e      	ldr	r2, [pc, #312]	@ (8004584 <HAL_UART_MspInit+0x164>)
 800444c:	4293      	cmp	r3, r2
 800444e:	f040 8094 	bne.w	800457a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004452:	2320      	movs	r3, #32
 8004454:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004456:	2300      	movs	r3, #0
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800445a:	f107 0310 	add.w	r3, r7, #16
 800445e:	4618      	mov	r0, r3
 8004460:	f004 fc92 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800446a:	f7ff fc53 	bl	8003d14 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800446e:	4b46      	ldr	r3, [pc, #280]	@ (8004588 <HAL_UART_MspInit+0x168>)
 8004470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004472:	4a45      	ldr	r2, [pc, #276]	@ (8004588 <HAL_UART_MspInit+0x168>)
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800447a:	4b43      	ldr	r3, [pc, #268]	@ (8004588 <HAL_UART_MspInit+0x168>)
 800447c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004486:	4b40      	ldr	r3, [pc, #256]	@ (8004588 <HAL_UART_MspInit+0x168>)
 8004488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448a:	4a3f      	ldr	r2, [pc, #252]	@ (8004588 <HAL_UART_MspInit+0x168>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004492:	4b3d      	ldr	r3, [pc, #244]	@ (8004588 <HAL_UART_MspInit+0x168>)
 8004494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800449e:	230c      	movs	r3, #12
 80044a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a2:	2302      	movs	r3, #2
 80044a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044aa:	2300      	movs	r3, #0
 80044ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80044ae:	230c      	movs	r3, #12
 80044b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80044b6:	4619      	mov	r1, r3
 80044b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044bc:	f002 fcce 	bl	8006e5c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80044c0:	4b32      	ldr	r3, [pc, #200]	@ (800458c <HAL_UART_MspInit+0x16c>)
 80044c2:	4a33      	ldr	r2, [pc, #204]	@ (8004590 <HAL_UART_MspInit+0x170>)
 80044c4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80044c6:	4b31      	ldr	r3, [pc, #196]	@ (800458c <HAL_UART_MspInit+0x16c>)
 80044c8:	2222      	movs	r2, #34	@ 0x22
 80044ca:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044cc:	4b2f      	ldr	r3, [pc, #188]	@ (800458c <HAL_UART_MspInit+0x16c>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044d2:	4b2e      	ldr	r3, [pc, #184]	@ (800458c <HAL_UART_MspInit+0x16c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044d8:	4b2c      	ldr	r3, [pc, #176]	@ (800458c <HAL_UART_MspInit+0x16c>)
 80044da:	2280      	movs	r2, #128	@ 0x80
 80044dc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044de:	4b2b      	ldr	r3, [pc, #172]	@ (800458c <HAL_UART_MspInit+0x16c>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044e4:	4b29      	ldr	r3, [pc, #164]	@ (800458c <HAL_UART_MspInit+0x16c>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80044ea:	4b28      	ldr	r3, [pc, #160]	@ (800458c <HAL_UART_MspInit+0x16c>)
 80044ec:	2220      	movs	r2, #32
 80044ee:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80044f0:	4b26      	ldr	r3, [pc, #152]	@ (800458c <HAL_UART_MspInit+0x16c>)
 80044f2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80044f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80044f8:	4824      	ldr	r0, [pc, #144]	@ (800458c <HAL_UART_MspInit+0x16c>)
 80044fa:	f002 f971 	bl	80067e0 <HAL_DMA_Init>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8004504:	f7ff fc06 	bl	8003d14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a20      	ldr	r2, [pc, #128]	@ (800458c <HAL_UART_MspInit+0x16c>)
 800450c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004510:	4a1e      	ldr	r2, [pc, #120]	@ (800458c <HAL_UART_MspInit+0x16c>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8004516:	4b1f      	ldr	r3, [pc, #124]	@ (8004594 <HAL_UART_MspInit+0x174>)
 8004518:	4a1f      	ldr	r2, [pc, #124]	@ (8004598 <HAL_UART_MspInit+0x178>)
 800451a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800451c:	4b1d      	ldr	r3, [pc, #116]	@ (8004594 <HAL_UART_MspInit+0x174>)
 800451e:	2223      	movs	r2, #35	@ 0x23
 8004520:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004522:	4b1c      	ldr	r3, [pc, #112]	@ (8004594 <HAL_UART_MspInit+0x174>)
 8004524:	2210      	movs	r2, #16
 8004526:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004528:	4b1a      	ldr	r3, [pc, #104]	@ (8004594 <HAL_UART_MspInit+0x174>)
 800452a:	2200      	movs	r2, #0
 800452c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800452e:	4b19      	ldr	r3, [pc, #100]	@ (8004594 <HAL_UART_MspInit+0x174>)
 8004530:	2280      	movs	r2, #128	@ 0x80
 8004532:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004534:	4b17      	ldr	r3, [pc, #92]	@ (8004594 <HAL_UART_MspInit+0x174>)
 8004536:	2200      	movs	r2, #0
 8004538:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800453a:	4b16      	ldr	r3, [pc, #88]	@ (8004594 <HAL_UART_MspInit+0x174>)
 800453c:	2200      	movs	r2, #0
 800453e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004540:	4b14      	ldr	r3, [pc, #80]	@ (8004594 <HAL_UART_MspInit+0x174>)
 8004542:	2200      	movs	r2, #0
 8004544:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004546:	4b13      	ldr	r3, [pc, #76]	@ (8004594 <HAL_UART_MspInit+0x174>)
 8004548:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800454c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800454e:	4811      	ldr	r0, [pc, #68]	@ (8004594 <HAL_UART_MspInit+0x174>)
 8004550:	f002 f946 	bl	80067e0 <HAL_DMA_Init>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 800455a:	f7ff fbdb 	bl	8003d14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a0c      	ldr	r2, [pc, #48]	@ (8004594 <HAL_UART_MspInit+0x174>)
 8004562:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004564:	4a0b      	ldr	r2, [pc, #44]	@ (8004594 <HAL_UART_MspInit+0x174>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800456a:	2200      	movs	r2, #0
 800456c:	2105      	movs	r1, #5
 800456e:	205b      	movs	r0, #91	@ 0x5b
 8004570:	f002 f90e 	bl	8006790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004574:	205b      	movs	r0, #91	@ 0x5b
 8004576:	f002 f925 	bl	80067c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800457a:	bf00      	nop
 800457c:	3778      	adds	r7, #120	@ 0x78
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40008000 	.word	0x40008000
 8004588:	40021000 	.word	0x40021000
 800458c:	200051b4 	.word	0x200051b4
 8004590:	40020008 	.word	0x40020008
 8004594:	20005214 	.word	0x20005214
 8004598:	4002001c 	.word	0x4002001c

0800459c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80045aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80045ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045b0:	4904      	ldr	r1, [pc, #16]	@ (80045c4 <cubemx_transport_open+0x28>)
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f005 fa52 	bl	8009a5c <HAL_UART_Receive_DMA>
    return true;
 80045b8:	2301      	movs	r3, #1
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20005274 	.word	0x20005274

080045c8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80045d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f005 fa8b 	bl	8009af4 <HAL_UART_DMAStop>
    return true;
 80045de:	2301      	movs	r3, #1
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80045fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004604:	2b20      	cmp	r3, #32
 8004606:	d11b      	bne.n	8004640 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	b29b      	uxth	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	6978      	ldr	r0, [r7, #20]
 8004612:	f005 f9a3 	bl	800995c <HAL_UART_Transmit_DMA>
 8004616:	4603      	mov	r3, r0
 8004618:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800461a:	e002      	b.n	8004622 <cubemx_transport_write+0x3a>
            osDelay(1);
 800461c:	2001      	movs	r0, #1
 800461e:	f007 fbed 	bl	800bdfc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8004622:	7cfb      	ldrb	r3, [r7, #19]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <cubemx_transport_write+0x4a>
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462e:	2b20      	cmp	r3, #32
 8004630:	d1f4      	bne.n	800461c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8004632:	7cfb      	ldrb	r3, [r7, #19]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <cubemx_transport_write+0x54>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	e002      	b.n	8004642 <cubemx_transport_write+0x5a>
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8004640:	2300      	movs	r3, #0
    }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8004660:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004666:	b672      	cpsid	i
}
 8004668:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004678:	4a1b      	ldr	r2, [pc, #108]	@ (80046e8 <cubemx_transport_read+0x9c>)
 800467a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800467c:	b662      	cpsie	i
}
 800467e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	3301      	adds	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8004686:	2001      	movs	r0, #1
 8004688:	f007 fbb8 	bl	800bdfc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800468c:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <cubemx_transport_read+0xa0>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b15      	ldr	r3, [pc, #84]	@ (80046e8 <cubemx_transport_read+0x9c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d103      	bne.n	80046a0 <cubemx_transport_read+0x54>
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	dbe2      	blt.n	8004666 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80046a4:	e011      	b.n	80046ca <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80046a6:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <cubemx_transport_read+0xa0>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	440b      	add	r3, r1
 80046b0:	490f      	ldr	r1, [pc, #60]	@ (80046f0 <cubemx_transport_read+0xa4>)
 80046b2:	5c8a      	ldrb	r2, [r1, r2]
 80046b4:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80046b6:	4b0d      	ldr	r3, [pc, #52]	@ (80046ec <cubemx_transport_read+0xa0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3301      	adds	r3, #1
 80046bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046c0:	4a0a      	ldr	r2, [pc, #40]	@ (80046ec <cubemx_transport_read+0xa0>)
 80046c2:	6013      	str	r3, [r2, #0]
        wrote++;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	3301      	adds	r3, #1
 80046c8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80046ca:	4b08      	ldr	r3, [pc, #32]	@ (80046ec <cubemx_transport_read+0xa0>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <cubemx_transport_read+0x9c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d003      	beq.n	80046de <cubemx_transport_read+0x92>
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d3e3      	bcc.n	80046a6 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 80046de:	69bb      	ldr	r3, [r7, #24]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20005a78 	.word	0x20005a78
 80046ec:	20005a74 	.word	0x20005a74
 80046f0:	20005274 	.word	0x20005274

080046f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80046f4:	480d      	ldr	r0, [pc, #52]	@ (800472c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80046f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80046f8:	f7ff fe36 	bl	8004368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046fc:	480c      	ldr	r0, [pc, #48]	@ (8004730 <LoopForever+0x6>)
  ldr r1, =_edata
 80046fe:	490d      	ldr	r1, [pc, #52]	@ (8004734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004700:	4a0d      	ldr	r2, [pc, #52]	@ (8004738 <LoopForever+0xe>)
  movs r3, #0
 8004702:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004704:	e002      	b.n	800470c <LoopCopyDataInit>

08004706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800470a:	3304      	adds	r3, #4

0800470c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800470c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800470e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004710:	d3f9      	bcc.n	8004706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004712:	4a0a      	ldr	r2, [pc, #40]	@ (800473c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004714:	4c0a      	ldr	r4, [pc, #40]	@ (8004740 <LoopForever+0x16>)
  movs r3, #0
 8004716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004718:	e001      	b.n	800471e <LoopFillZerobss>

0800471a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800471a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800471c:	3204      	adds	r2, #4

0800471e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800471e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004720:	d3fb      	bcc.n	800471a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004722:	f019 fdc7 	bl	801e2b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004726:	f7ff fa7d 	bl	8003c24 <main>

0800472a <LoopForever>:

LoopForever:
    b LoopForever
 800472a:	e7fe      	b.n	800472a <LoopForever>
  ldr   r0, =_estack
 800472c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004734:	20000e30 	.word	0x20000e30
  ldr r2, =_sidata
 8004738:	080218c8 	.word	0x080218c8
  ldr r2, =_sbss
 800473c:	20000e30 	.word	0x20000e30
  ldr r4, =_ebss
 8004740:	2000c694 	.word	0x2000c694

08004744 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004744:	e7fe      	b.n	8004744 <ADC3_IRQHandler>

08004746 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004750:	2003      	movs	r0, #3
 8004752:	f002 f812 	bl	800677a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004756:	200f      	movs	r0, #15
 8004758:	f7ff fc70 	bl	800403c <HAL_InitTick>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	71fb      	strb	r3, [r7, #7]
 8004766:	e001      	b.n	800476c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004768:	f7ff fc3e 	bl	8003fe8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800476c:	79fb      	ldrb	r3, [r7, #7]

}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800477c:	4b05      	ldr	r3, [pc, #20]	@ (8004794 <HAL_IncTick+0x1c>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <HAL_IncTick+0x20>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4413      	add	r3, r2
 8004786:	4a03      	ldr	r2, [pc, #12]	@ (8004794 <HAL_IncTick+0x1c>)
 8004788:	6013      	str	r3, [r2, #0]
}
 800478a:	bf00      	nop
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	20005a7c 	.word	0x20005a7c
 8004798:	2000000c 	.word	0x2000000c

0800479c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return uwTick;
 80047a0:	4b03      	ldr	r3, [pc, #12]	@ (80047b0 <HAL_GetTick+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20005a7c 	.word	0x20005a7c

080047b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	609a      	str	r2, [r3, #8]
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	609a      	str	r2, [r3, #8]
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3360      	adds	r3, #96	@ 0x60
 800482e:	461a      	mov	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b08      	ldr	r3, [pc, #32]	@ (8004860 <LL_ADC_SetOffset+0x44>)
 800483e:	4013      	ands	r3, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	4313      	orrs	r3, r2
 800484c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	03fff000 	.word	0x03fff000

08004864 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3360      	adds	r3, #96	@ 0x60
 8004872:	461a      	mov	r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3360      	adds	r3, #96	@ 0x60
 80048a0:	461a      	mov	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	431a      	orrs	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b087      	sub	sp, #28
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3360      	adds	r3, #96	@ 0x60
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3360      	adds	r3, #96	@ 0x60
 800490c:	461a      	mov	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	431a      	orrs	r2, r3
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	615a      	str	r2, [r3, #20]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800497e:	b480      	push	{r7}
 8004980:	b087      	sub	sp, #28
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3330      	adds	r3, #48	@ 0x30
 800498e:	461a      	mov	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	4413      	add	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	211f      	movs	r1, #31
 80049aa:	fa01 f303 	lsl.w	r3, r1, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	401a      	ands	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	0e9b      	lsrs	r3, r3, #26
 80049b6:	f003 011f 	and.w	r1, r3, #31
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	431a      	orrs	r2, r3
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3314      	adds	r3, #20
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	0e5b      	lsrs	r3, r3, #25
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	4413      	add	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	0d1b      	lsrs	r3, r3, #20
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2107      	movs	r1, #7
 8004a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	401a      	ands	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	0d1b      	lsrs	r3, r3, #20
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a40:	431a      	orrs	r2, r3
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	401a      	ands	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f003 0318 	and.w	r3, r3, #24
 8004a76:	4908      	ldr	r1, [pc, #32]	@ (8004a98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a78:	40d9      	lsrs	r1, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	400b      	ands	r3, r1
 8004a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a82:	431a      	orrs	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	0007ffff 	.word	0x0007ffff

08004a9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004ae4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6093      	str	r3, [r2, #8]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b0c:	d101      	bne.n	8004b12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004b30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b5c:	d101      	bne.n	8004b62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b84:	f043 0201 	orr.w	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bac:	f043 0202 	orr.w	r2, r3, #2
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <LL_ADC_IsEnabled+0x18>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <LL_ADC_IsEnabled+0x1a>
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d101      	bne.n	8004bfe <LL_ADC_IsDisableOngoing+0x18>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <LL_ADC_IsDisableOngoing+0x1a>
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c20:	f043 0204 	orr.w	r2, r3, #4
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d101      	bne.n	8004c4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d101      	bne.n	8004c72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c80:	b590      	push	{r4, r7, lr}
 8004c82:	b089      	sub	sp, #36	@ 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e1a9      	b.n	8004fee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d109      	bne.n	8004cbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7fc fa2d 	bl	8001108 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff ff19 	bl	8004af8 <LL_ADC_IsDeepPowerDownEnabled>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff feff 	bl	8004ad4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff ff34 	bl	8004b48 <LL_ADC_IsInternalRegulatorEnabled>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d115      	bne.n	8004d12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff ff18 	bl	8004b20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cf0:	4b9c      	ldr	r3, [pc, #624]	@ (8004f64 <HAL_ADC_Init+0x2e4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	4a9c      	ldr	r2, [pc, #624]	@ (8004f68 <HAL_ADC_Init+0x2e8>)
 8004cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfc:	099b      	lsrs	r3, r3, #6
 8004cfe:	3301      	adds	r3, #1
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d04:	e002      	b.n	8004d0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f9      	bne.n	8004d06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff ff16 	bl	8004b48 <LL_ADC_IsInternalRegulatorEnabled>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10d      	bne.n	8004d3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d26:	f043 0210 	orr.w	r2, r3, #16
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d32:	f043 0201 	orr.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff ff76 	bl	8004c34 <LL_ADC_REG_IsConversionOngoing>
 8004d48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f040 8142 	bne.w	8004fdc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f040 813e 	bne.w	8004fdc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004d68:	f043 0202 	orr.w	r2, r3, #2
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff ff23 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d141      	bne.n	8004e04 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d88:	d004      	beq.n	8004d94 <HAL_ADC_Init+0x114>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a77      	ldr	r2, [pc, #476]	@ (8004f6c <HAL_ADC_Init+0x2ec>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d10f      	bne.n	8004db4 <HAL_ADC_Init+0x134>
 8004d94:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d98:	f7ff ff12 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	4873      	ldr	r0, [pc, #460]	@ (8004f6c <HAL_ADC_Init+0x2ec>)
 8004da0:	f7ff ff0e 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4323      	orrs	r3, r4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bf0c      	ite	eq
 8004dac:	2301      	moveq	r3, #1
 8004dae:	2300      	movne	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e012      	b.n	8004dda <HAL_ADC_Init+0x15a>
 8004db4:	486e      	ldr	r0, [pc, #440]	@ (8004f70 <HAL_ADC_Init+0x2f0>)
 8004db6:	f7ff ff03 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004dba:	4604      	mov	r4, r0
 8004dbc:	486d      	ldr	r0, [pc, #436]	@ (8004f74 <HAL_ADC_Init+0x2f4>)
 8004dbe:	f7ff feff 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	431c      	orrs	r4, r3
 8004dc6:	486c      	ldr	r0, [pc, #432]	@ (8004f78 <HAL_ADC_Init+0x2f8>)
 8004dc8:	f7ff fefa 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4323      	orrs	r3, r4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d012      	beq.n	8004e04 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004de6:	d004      	beq.n	8004df2 <HAL_ADC_Init+0x172>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a5f      	ldr	r2, [pc, #380]	@ (8004f6c <HAL_ADC_Init+0x2ec>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <HAL_ADC_Init+0x176>
 8004df2:	4a62      	ldr	r2, [pc, #392]	@ (8004f7c <HAL_ADC_Init+0x2fc>)
 8004df4:	e000      	b.n	8004df8 <HAL_ADC_Init+0x178>
 8004df6:	4a62      	ldr	r2, [pc, #392]	@ (8004f80 <HAL_ADC_Init+0x300>)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	f7ff fcd8 	bl	80047b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	7f5b      	ldrb	r3, [r3, #29]
 8004e08:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e0e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004e14:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004e1a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e22:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d106      	bne.n	8004e40 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	3b01      	subs	r3, #1
 8004e38:	045b      	lsls	r3, r3, #17
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d009      	beq.n	8004e5c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e54:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	4b48      	ldr	r3, [pc, #288]	@ (8004f84 <HAL_ADC_Init+0x304>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	69b9      	ldr	r1, [r7, #24]
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fee5 	bl	8004c5a <LL_ADC_INJ_IsConversionOngoing>
 8004e90:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d17f      	bne.n	8004f98 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d17c      	bne.n	8004f98 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ea2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004eaa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eba:	f023 0302 	bic.w	r3, r3, #2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	69b9      	ldr	r1, [r7, #24]
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d017      	beq.n	8004f00 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ede:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ee8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004eec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6911      	ldr	r1, [r2, #16]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004efe:	e013      	b.n	8004f28 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004f0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f24:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d12a      	bne.n	8004f88 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f3c:	f023 0304 	bic.w	r3, r3, #4
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f48:	4311      	orrs	r1, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f4e:	4311      	orrs	r1, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f54:	430a      	orrs	r2, r1
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	611a      	str	r2, [r3, #16]
 8004f62:	e019      	b.n	8004f98 <HAL_ADC_Init+0x318>
 8004f64:	20000004 	.word	0x20000004
 8004f68:	053e2d63 	.word	0x053e2d63
 8004f6c:	50000100 	.word	0x50000100
 8004f70:	50000400 	.word	0x50000400
 8004f74:	50000500 	.word	0x50000500
 8004f78:	50000600 	.word	0x50000600
 8004f7c:	50000300 	.word	0x50000300
 8004f80:	50000700 	.word	0x50000700
 8004f84:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0201 	bic.w	r2, r2, #1
 8004f96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d10c      	bne.n	8004fba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa6:	f023 010f 	bic.w	r1, r3, #15
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	1e5a      	subs	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fb8:	e007      	b.n	8004fca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 020f 	bic.w	r2, r2, #15
 8004fc8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	f043 0201 	orr.w	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fda:	e007      	b.n	8004fec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe0:	f043 0210 	orr.w	r2, r3, #16
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3724      	adds	r7, #36	@ 0x24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd90      	pop	{r4, r7, pc}
 8004ff6:	bf00      	nop

08004ff8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800500c:	d004      	beq.n	8005018 <HAL_ADC_Start_DMA+0x20>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a5a      	ldr	r2, [pc, #360]	@ (800517c <HAL_ADC_Start_DMA+0x184>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d101      	bne.n	800501c <HAL_ADC_Start_DMA+0x24>
 8005018:	4b59      	ldr	r3, [pc, #356]	@ (8005180 <HAL_ADC_Start_DMA+0x188>)
 800501a:	e000      	b.n	800501e <HAL_ADC_Start_DMA+0x26>
 800501c:	4b59      	ldr	r3, [pc, #356]	@ (8005184 <HAL_ADC_Start_DMA+0x18c>)
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fd3c 	bl	8004a9c <LL_ADC_GetMultimode>
 8005024:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fe02 	bl	8004c34 <LL_ADC_REG_IsConversionOngoing>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 809b 	bne.w	800516e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_ADC_Start_DMA+0x4e>
 8005042:	2302      	movs	r3, #2
 8005044:	e096      	b.n	8005174 <HAL_ADC_Start_DMA+0x17c>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a4d      	ldr	r2, [pc, #308]	@ (8005188 <HAL_ADC_Start_DMA+0x190>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d008      	beq.n	800506a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b05      	cmp	r3, #5
 8005062:	d002      	beq.n	800506a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b09      	cmp	r3, #9
 8005068:	d17a      	bne.n	8005160 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 ff60 	bl	8005f30 <ADC_Enable>
 8005070:	4603      	mov	r3, r0
 8005072:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005074:	7dfb      	ldrb	r3, [r7, #23]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d16d      	bne.n	8005156 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a3a      	ldr	r2, [pc, #232]	@ (800517c <HAL_ADC_Start_DMA+0x184>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_ADC_Start_DMA+0xb4>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a3b      	ldr	r2, [pc, #236]	@ (800518c <HAL_ADC_Start_DMA+0x194>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d002      	beq.n	80050a8 <HAL_ADC_Start_DMA+0xb0>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	e003      	b.n	80050b0 <HAL_ADC_Start_DMA+0xb8>
 80050a8:	4b39      	ldr	r3, [pc, #228]	@ (8005190 <HAL_ADC_Start_DMA+0x198>)
 80050aa:	e001      	b.n	80050b0 <HAL_ADC_Start_DMA+0xb8>
 80050ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d002      	beq.n	80050be <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d105      	bne.n	80050ca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050da:	f023 0206 	bic.w	r2, r3, #6
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80050e2:	e002      	b.n	80050ea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ee:	4a29      	ldr	r2, [pc, #164]	@ (8005194 <HAL_ADC_Start_DMA+0x19c>)
 80050f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f6:	4a28      	ldr	r2, [pc, #160]	@ (8005198 <HAL_ADC_Start_DMA+0x1a0>)
 80050f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fe:	4a27      	ldr	r2, [pc, #156]	@ (800519c <HAL_ADC_Start_DMA+0x1a4>)
 8005100:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	221c      	movs	r2, #28
 8005108:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0210 	orr.w	r2, r2, #16
 8005120:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3340      	adds	r3, #64	@ 0x40
 800513c:	4619      	mov	r1, r3
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f001 fbf5 	bl	8006930 <HAL_DMA_Start_IT>
 8005146:	4603      	mov	r3, r0
 8005148:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fd5c 	bl	8004c0c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005154:	e00d      	b.n	8005172 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800515e:	e008      	b.n	8005172 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800516c:	e001      	b.n	8005172 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800516e:	2302      	movs	r3, #2
 8005170:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005172:	7dfb      	ldrb	r3, [r7, #23]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	50000100 	.word	0x50000100
 8005180:	50000300 	.word	0x50000300
 8005184:	50000700 	.word	0x50000700
 8005188:	50000600 	.word	0x50000600
 800518c:	50000500 	.word	0x50000500
 8005190:	50000400 	.word	0x50000400
 8005194:	0800611b 	.word	0x0800611b
 8005198:	080061f3 	.word	0x080061f3
 800519c:	0800620f 	.word	0x0800620f

080051a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	@ 0x28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051c4:	d004      	beq.n	80051d0 <HAL_ADC_IRQHandler+0x30>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a8e      	ldr	r2, [pc, #568]	@ (8005404 <HAL_ADC_IRQHandler+0x264>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d101      	bne.n	80051d4 <HAL_ADC_IRQHandler+0x34>
 80051d0:	4b8d      	ldr	r3, [pc, #564]	@ (8005408 <HAL_ADC_IRQHandler+0x268>)
 80051d2:	e000      	b.n	80051d6 <HAL_ADC_IRQHandler+0x36>
 80051d4:	4b8d      	ldr	r3, [pc, #564]	@ (800540c <HAL_ADC_IRQHandler+0x26c>)
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff fc60 	bl	8004a9c <LL_ADC_GetMultimode>
 80051dc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d017      	beq.n	8005218 <HAL_ADC_IRQHandler+0x78>
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d012      	beq.n	8005218 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d105      	bne.n	800520a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005202:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f001 f8f6 	bl	80063fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2202      	movs	r2, #2
 8005216:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <HAL_ADC_IRQHandler+0x8c>
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10b      	bne.n	8005244 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8094 	beq.w	8005360 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 808e 	beq.w	8005360 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005254:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fb79 	bl	8004958 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d072      	beq.n	8005352 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a64      	ldr	r2, [pc, #400]	@ (8005404 <HAL_ADC_IRQHandler+0x264>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <HAL_ADC_IRQHandler+0xea>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a65      	ldr	r2, [pc, #404]	@ (8005410 <HAL_ADC_IRQHandler+0x270>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d002      	beq.n	8005286 <HAL_ADC_IRQHandler+0xe6>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	e003      	b.n	800528e <HAL_ADC_IRQHandler+0xee>
 8005286:	4b63      	ldr	r3, [pc, #396]	@ (8005414 <HAL_ADC_IRQHandler+0x274>)
 8005288:	e001      	b.n	800528e <HAL_ADC_IRQHandler+0xee>
 800528a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	4293      	cmp	r3, r2
 8005294:	d008      	beq.n	80052a8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b05      	cmp	r3, #5
 80052a0:	d002      	beq.n	80052a8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b09      	cmp	r3, #9
 80052a6:	d104      	bne.n	80052b2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	623b      	str	r3, [r7, #32]
 80052b0:	e014      	b.n	80052dc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a53      	ldr	r2, [pc, #332]	@ (8005404 <HAL_ADC_IRQHandler+0x264>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_ADC_IRQHandler+0x130>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a53      	ldr	r2, [pc, #332]	@ (8005410 <HAL_ADC_IRQHandler+0x270>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d002      	beq.n	80052cc <HAL_ADC_IRQHandler+0x12c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	e003      	b.n	80052d4 <HAL_ADC_IRQHandler+0x134>
 80052cc:	4b51      	ldr	r3, [pc, #324]	@ (8005414 <HAL_ADC_IRQHandler+0x274>)
 80052ce:	e001      	b.n	80052d4 <HAL_ADC_IRQHandler+0x134>
 80052d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80052d4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d135      	bne.n	8005352 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d12e      	bne.n	8005352 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fc9b 	bl	8004c34 <LL_ADC_REG_IsConversionOngoing>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d11a      	bne.n	800533a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 020c 	bic.w	r2, r2, #12
 8005312:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005318:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005324:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d112      	bne.n	8005352 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005330:	f043 0201 	orr.w	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005338:	e00b      	b.n	8005352 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800533e:	f043 0210 	orr.w	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800534a:	f043 0201 	orr.w	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f984 	bl	8005660 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	220c      	movs	r2, #12
 800535e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <HAL_ADC_IRQHandler+0x1d4>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80b3 	beq.w	80054e6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80ad 	beq.w	80054e6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	d105      	bne.n	80053a4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800539c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff fb14 	bl	80049d6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80053ae:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff facf 	bl	8004958 <LL_ADC_REG_IsTriggerSourceSWStart>
 80053ba:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a10      	ldr	r2, [pc, #64]	@ (8005404 <HAL_ADC_IRQHandler+0x264>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d009      	beq.n	80053da <HAL_ADC_IRQHandler+0x23a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a11      	ldr	r2, [pc, #68]	@ (8005410 <HAL_ADC_IRQHandler+0x270>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d002      	beq.n	80053d6 <HAL_ADC_IRQHandler+0x236>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	e003      	b.n	80053de <HAL_ADC_IRQHandler+0x23e>
 80053d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005414 <HAL_ADC_IRQHandler+0x274>)
 80053d8:	e001      	b.n	80053de <HAL_ADC_IRQHandler+0x23e>
 80053da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d008      	beq.n	80053f8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b06      	cmp	r3, #6
 80053f0:	d002      	beq.n	80053f8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b07      	cmp	r3, #7
 80053f6:	d10f      	bne.n	8005418 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	623b      	str	r3, [r7, #32]
 8005400:	e01f      	b.n	8005442 <HAL_ADC_IRQHandler+0x2a2>
 8005402:	bf00      	nop
 8005404:	50000100 	.word	0x50000100
 8005408:	50000300 	.word	0x50000300
 800540c:	50000700 	.word	0x50000700
 8005410:	50000500 	.word	0x50000500
 8005414:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a8b      	ldr	r2, [pc, #556]	@ (800564c <HAL_ADC_IRQHandler+0x4ac>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_ADC_IRQHandler+0x296>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a8a      	ldr	r2, [pc, #552]	@ (8005650 <HAL_ADC_IRQHandler+0x4b0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d002      	beq.n	8005432 <HAL_ADC_IRQHandler+0x292>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	e003      	b.n	800543a <HAL_ADC_IRQHandler+0x29a>
 8005432:	4b88      	ldr	r3, [pc, #544]	@ (8005654 <HAL_ADC_IRQHandler+0x4b4>)
 8005434:	e001      	b.n	800543a <HAL_ADC_IRQHandler+0x29a>
 8005436:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800543a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d047      	beq.n	80054d8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_ADC_IRQHandler+0x2c2>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d03f      	beq.n	80054d8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800545e:	2b00      	cmp	r3, #0
 8005460:	d13a      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546c:	2b40      	cmp	r3, #64	@ 0x40
 800546e:	d133      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d12e      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fbeb 	bl	8004c5a <LL_ADC_INJ_IsConversionOngoing>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11a      	bne.n	80054c0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005498:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800549e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d112      	bne.n	80054d8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054be:	e00b      	b.n	80054d8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c4:	f043 0210 	orr.w	r2, r3, #16
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d0:	f043 0201 	orr.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 ff67 	bl	80063ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2260      	movs	r2, #96	@ 0x60
 80054e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d011      	beq.n	8005514 <HAL_ADC_IRQHandler+0x374>
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f8be 	bl	8005688 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2280      	movs	r2, #128	@ 0x80
 8005512:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d012      	beq.n	8005544 <HAL_ADC_IRQHandler+0x3a4>
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00d      	beq.n	8005544 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 ff4d 	bl	80063d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005542:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800554a:	2b00      	cmp	r3, #0
 800554c:	d012      	beq.n	8005574 <HAL_ADC_IRQHandler+0x3d4>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00d      	beq.n	8005574 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 ff3f 	bl	80063e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005572:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b00      	cmp	r3, #0
 800557c:	d043      	beq.n	8005606 <HAL_ADC_IRQHandler+0x466>
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b00      	cmp	r3, #0
 8005586:	d03e      	beq.n	8005606 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8005590:	2301      	movs	r3, #1
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
 8005594:	e021      	b.n	80055da <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055a4:	d004      	beq.n	80055b0 <HAL_ADC_IRQHandler+0x410>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a28      	ldr	r2, [pc, #160]	@ (800564c <HAL_ADC_IRQHandler+0x4ac>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d101      	bne.n	80055b4 <HAL_ADC_IRQHandler+0x414>
 80055b0:	4b29      	ldr	r3, [pc, #164]	@ (8005658 <HAL_ADC_IRQHandler+0x4b8>)
 80055b2:	e000      	b.n	80055b6 <HAL_ADC_IRQHandler+0x416>
 80055b4:	4b29      	ldr	r3, [pc, #164]	@ (800565c <HAL_ADC_IRQHandler+0x4bc>)
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fa7e 	bl	8004ab8 <LL_ADC_GetMultiDMATransfer>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80055c2:	2301      	movs	r3, #1
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c6:	e008      	b.n	80055da <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80055d6:	2301      	movs	r3, #1
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d10e      	bne.n	80055fe <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f0:	f043 0202 	orr.w	r2, r3, #2
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f84f 	bl	800569c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2210      	movs	r2, #16
 8005604:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800560c:	2b00      	cmp	r3, #0
 800560e:	d018      	beq.n	8005642 <HAL_ADC_IRQHandler+0x4a2>
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005616:	2b00      	cmp	r3, #0
 8005618:	d013      	beq.n	8005642 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800561e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800562a:	f043 0208 	orr.w	r2, r3, #8
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800563a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 febf 	bl	80063c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005642:	bf00      	nop
 8005644:	3728      	adds	r7, #40	@ 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	50000100 	.word	0x50000100
 8005650:	50000500 	.word	0x50000500
 8005654:	50000400 	.word	0x50000400
 8005658:	50000300 	.word	0x50000300
 800565c:	50000700 	.word	0x50000700

08005660 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b0b6      	sub	sp, #216	@ 0xd8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d102      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x24>
 80056ce:	2302      	movs	r3, #2
 80056d0:	f000 bc13 	b.w	8005efa <HAL_ADC_ConfigChannel+0x84a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff faa7 	bl	8004c34 <LL_ADC_REG_IsConversionOngoing>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f040 83f3 	bne.w	8005ed4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6859      	ldr	r1, [r3, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f7ff f93f 	bl	800497e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff fa95 	bl	8004c34 <LL_ADC_REG_IsConversionOngoing>
 800570a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff faa1 	bl	8004c5a <LL_ADC_INJ_IsConversionOngoing>
 8005718:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800571c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005720:	2b00      	cmp	r3, #0
 8005722:	f040 81d9 	bne.w	8005ad8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005726:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800572a:	2b00      	cmp	r3, #0
 800572c:	f040 81d4 	bne.w	8005ad8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005738:	d10f      	bne.n	800575a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2200      	movs	r2, #0
 8005744:	4619      	mov	r1, r3
 8005746:	f7ff f959 	bl	80049fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff f8ed 	bl	8004932 <LL_ADC_SetSamplingTimeCommonConfig>
 8005758:	e00e      	b.n	8005778 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	461a      	mov	r2, r3
 8005768:	f7ff f948 	bl	80049fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff f8dd 	bl	8004932 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	08db      	lsrs	r3, r3, #3
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b04      	cmp	r3, #4
 8005798:	d022      	beq.n	80057e0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6919      	ldr	r1, [r3, #16]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80057aa:	f7ff f837 	bl	800481c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6919      	ldr	r1, [r3, #16]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7ff f883 	bl	80048c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d102      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x126>
 80057d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057d4:	e000      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x128>
 80057d6:	2300      	movs	r3, #0
 80057d8:	461a      	mov	r2, r3
 80057da:	f7ff f88f 	bl	80048fc <LL_ADC_SetOffsetSaturation>
 80057de:	e17b      	b.n	8005ad8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff f83c 	bl	8004864 <LL_ADC_GetOffsetChannel>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10a      	bne.n	800580c <HAL_ADC_ConfigChannel+0x15c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff f831 	bl	8004864 <LL_ADC_GetOffsetChannel>
 8005802:	4603      	mov	r3, r0
 8005804:	0e9b      	lsrs	r3, r3, #26
 8005806:	f003 021f 	and.w	r2, r3, #31
 800580a:	e01e      	b.n	800584a <HAL_ADC_ConfigChannel+0x19a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2100      	movs	r1, #0
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff f826 	bl	8004864 <LL_ADC_GetOffsetChannel>
 8005818:	4603      	mov	r3, r0
 800581a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005822:	fa93 f3a3 	rbit	r3, r3
 8005826:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800582a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800582e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800583a:	2320      	movs	r3, #32
 800583c:	e004      	b.n	8005848 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800583e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005842:	fab3 f383 	clz	r3, r3
 8005846:	b2db      	uxtb	r3, r3
 8005848:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005852:	2b00      	cmp	r3, #0
 8005854:	d105      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x1b2>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	0e9b      	lsrs	r3, r3, #26
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	e018      	b.n	8005894 <HAL_ADC_ConfigChannel+0x1e4>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800586e:	fa93 f3a3 	rbit	r3, r3
 8005872:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800587a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800587e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005886:	2320      	movs	r3, #32
 8005888:	e004      	b.n	8005894 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800588a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800588e:	fab3 f383 	clz	r3, r3
 8005892:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005894:	429a      	cmp	r2, r3
 8005896:	d106      	bne.n	80058a6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2200      	movs	r2, #0
 800589e:	2100      	movs	r1, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fff5 	bl	8004890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2101      	movs	r1, #1
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe ffd9 	bl	8004864 <LL_ADC_GetOffsetChannel>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <HAL_ADC_ConfigChannel+0x222>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2101      	movs	r1, #1
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe ffce 	bl	8004864 <LL_ADC_GetOffsetChannel>
 80058c8:	4603      	mov	r3, r0
 80058ca:	0e9b      	lsrs	r3, r3, #26
 80058cc:	f003 021f 	and.w	r2, r3, #31
 80058d0:	e01e      	b.n	8005910 <HAL_ADC_ConfigChannel+0x260>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2101      	movs	r1, #1
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe ffc3 	bl	8004864 <LL_ADC_GetOffsetChannel>
 80058de:	4603      	mov	r3, r0
 80058e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80058e8:	fa93 f3a3 	rbit	r3, r3
 80058ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80058f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80058f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005900:	2320      	movs	r3, #32
 8005902:	e004      	b.n	800590e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005908:	fab3 f383 	clz	r3, r3
 800590c:	b2db      	uxtb	r3, r3
 800590e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005918:	2b00      	cmp	r3, #0
 800591a:	d105      	bne.n	8005928 <HAL_ADC_ConfigChannel+0x278>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	0e9b      	lsrs	r3, r3, #26
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	e018      	b.n	800595a <HAL_ADC_ConfigChannel+0x2aa>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005930:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005934:	fa93 f3a3 	rbit	r3, r3
 8005938:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800593c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005940:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005944:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800594c:	2320      	movs	r3, #32
 800594e:	e004      	b.n	800595a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005950:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005954:	fab3 f383 	clz	r3, r3
 8005958:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800595a:	429a      	cmp	r2, r3
 800595c:	d106      	bne.n	800596c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2200      	movs	r2, #0
 8005964:	2101      	movs	r1, #1
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe ff92 	bl	8004890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2102      	movs	r1, #2
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe ff76 	bl	8004864 <LL_ADC_GetOffsetChannel>
 8005978:	4603      	mov	r3, r0
 800597a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <HAL_ADC_ConfigChannel+0x2e8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2102      	movs	r1, #2
 8005988:	4618      	mov	r0, r3
 800598a:	f7fe ff6b 	bl	8004864 <LL_ADC_GetOffsetChannel>
 800598e:	4603      	mov	r3, r0
 8005990:	0e9b      	lsrs	r3, r3, #26
 8005992:	f003 021f 	and.w	r2, r3, #31
 8005996:	e01e      	b.n	80059d6 <HAL_ADC_ConfigChannel+0x326>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2102      	movs	r1, #2
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe ff60 	bl	8004864 <LL_ADC_GetOffsetChannel>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059ae:	fa93 f3a3 	rbit	r3, r3
 80059b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80059b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80059be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80059c6:	2320      	movs	r3, #32
 80059c8:	e004      	b.n	80059d4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80059ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80059ce:	fab3 f383 	clz	r3, r3
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d105      	bne.n	80059ee <HAL_ADC_ConfigChannel+0x33e>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	0e9b      	lsrs	r3, r3, #26
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	e016      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x36c>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059fa:	fa93 f3a3 	rbit	r3, r3
 80059fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005a00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005a0e:	2320      	movs	r3, #32
 8005a10:	e004      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a16:	fab3 f383 	clz	r3, r3
 8005a1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d106      	bne.n	8005a2e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2102      	movs	r1, #2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe ff31 	bl	8004890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2103      	movs	r1, #3
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe ff15 	bl	8004864 <LL_ADC_GetOffsetChannel>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <HAL_ADC_ConfigChannel+0x3aa>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2103      	movs	r1, #3
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe ff0a 	bl	8004864 <LL_ADC_GetOffsetChannel>
 8005a50:	4603      	mov	r3, r0
 8005a52:	0e9b      	lsrs	r3, r3, #26
 8005a54:	f003 021f 	and.w	r2, r3, #31
 8005a58:	e017      	b.n	8005a8a <HAL_ADC_ConfigChannel+0x3da>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2103      	movs	r1, #3
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe feff 	bl	8004864 <LL_ADC_GetOffsetChannel>
 8005a66:	4603      	mov	r3, r0
 8005a68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a6c:	fa93 f3a3 	rbit	r3, r3
 8005a70:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a74:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005a76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	e003      	b.n	8005a88 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005a80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a82:	fab3 f383 	clz	r3, r3
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d105      	bne.n	8005aa2 <HAL_ADC_ConfigChannel+0x3f2>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	0e9b      	lsrs	r3, r3, #26
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	e011      	b.n	8005ac6 <HAL_ADC_ConfigChannel+0x416>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aaa:	fa93 f3a3 	rbit	r3, r3
 8005aae:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ab2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005aba:	2320      	movs	r3, #32
 8005abc:	e003      	b.n	8005ac6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ac0:	fab3 f383 	clz	r3, r3
 8005ac4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d106      	bne.n	8005ad8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2103      	movs	r1, #3
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe fedc 	bl	8004890 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff f86f 	bl	8004bc0 <LL_ADC_IsEnabled>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f040 813d 	bne.w	8005d64 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6819      	ldr	r1, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	461a      	mov	r2, r3
 8005af8:	f7fe ffac 	bl	8004a54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	4aa2      	ldr	r2, [pc, #648]	@ (8005d8c <HAL_ADC_ConfigChannel+0x6dc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	f040 812e 	bne.w	8005d64 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <HAL_ADC_ConfigChannel+0x480>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	0e9b      	lsrs	r3, r3, #26
 8005b1e:	3301      	adds	r3, #1
 8005b20:	f003 031f 	and.w	r3, r3, #31
 8005b24:	2b09      	cmp	r3, #9
 8005b26:	bf94      	ite	ls
 8005b28:	2301      	movls	r3, #1
 8005b2a:	2300      	movhi	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e019      	b.n	8005b64 <HAL_ADC_ConfigChannel+0x4b4>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b38:	fa93 f3a3 	rbit	r3, r3
 8005b3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005b3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b40:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005b48:	2320      	movs	r3, #32
 8005b4a:	e003      	b.n	8005b54 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005b4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b4e:	fab3 f383 	clz	r3, r3
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	3301      	adds	r3, #1
 8005b56:	f003 031f 	and.w	r3, r3, #31
 8005b5a:	2b09      	cmp	r3, #9
 8005b5c:	bf94      	ite	ls
 8005b5e:	2301      	movls	r3, #1
 8005b60:	2300      	movhi	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d079      	beq.n	8005c5c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d107      	bne.n	8005b84 <HAL_ADC_ConfigChannel+0x4d4>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	0e9b      	lsrs	r3, r3, #26
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	069b      	lsls	r3, r3, #26
 8005b7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b82:	e015      	b.n	8005bb0 <HAL_ADC_ConfigChannel+0x500>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b8c:	fa93 f3a3 	rbit	r3, r3
 8005b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b94:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005b9c:	2320      	movs	r3, #32
 8005b9e:	e003      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba2:	fab3 f383 	clz	r3, r3
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	3301      	adds	r3, #1
 8005baa:	069b      	lsls	r3, r3, #26
 8005bac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <HAL_ADC_ConfigChannel+0x520>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	0e9b      	lsrs	r3, r3, #26
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2101      	movs	r1, #1
 8005bca:	fa01 f303 	lsl.w	r3, r1, r3
 8005bce:	e017      	b.n	8005c00 <HAL_ADC_ConfigChannel+0x550>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bd8:	fa93 f3a3 	rbit	r3, r3
 8005bdc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005be8:	2320      	movs	r3, #32
 8005bea:	e003      	b.n	8005bf4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bee:	fab3 f383 	clz	r3, r3
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005c00:	ea42 0103 	orr.w	r1, r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <HAL_ADC_ConfigChannel+0x576>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	0e9b      	lsrs	r3, r3, #26
 8005c16:	3301      	adds	r3, #1
 8005c18:	f003 021f 	and.w	r2, r3, #31
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	4413      	add	r3, r2
 8005c22:	051b      	lsls	r3, r3, #20
 8005c24:	e018      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x5a8>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2e:	fa93 f3a3 	rbit	r3, r3
 8005c32:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005c3e:	2320      	movs	r3, #32
 8005c40:	e003      	b.n	8005c4a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c44:	fab3 f383 	clz	r3, r3
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	f003 021f 	and.w	r2, r3, #31
 8005c50:	4613      	mov	r3, r2
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	4413      	add	r3, r2
 8005c56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	e07e      	b.n	8005d5a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <HAL_ADC_ConfigChannel+0x5c8>
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	0e9b      	lsrs	r3, r3, #26
 8005c6e:	3301      	adds	r3, #1
 8005c70:	069b      	lsls	r3, r3, #26
 8005c72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c76:	e015      	b.n	8005ca4 <HAL_ADC_ConfigChannel+0x5f4>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c80:	fa93 f3a3 	rbit	r3, r3
 8005c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c88:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005c90:	2320      	movs	r3, #32
 8005c92:	e003      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c96:	fab3 f383 	clz	r3, r3
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	069b      	lsls	r3, r3, #26
 8005ca0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_ADC_ConfigChannel+0x614>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	0e9b      	lsrs	r3, r3, #26
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc2:	e017      	b.n	8005cf4 <HAL_ADC_ConfigChannel+0x644>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	fa93 f3a3 	rbit	r3, r3
 8005cd0:	61fb      	str	r3, [r7, #28]
  return result;
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005cdc:	2320      	movs	r3, #32
 8005cde:	e003      	b.n	8005ce8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	fab3 f383 	clz	r3, r3
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	3301      	adds	r3, #1
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2101      	movs	r1, #1
 8005cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf4:	ea42 0103 	orr.w	r1, r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10d      	bne.n	8005d20 <HAL_ADC_ConfigChannel+0x670>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	0e9b      	lsrs	r3, r3, #26
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	f003 021f 	and.w	r2, r3, #31
 8005d10:	4613      	mov	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4413      	add	r3, r2
 8005d16:	3b1e      	subs	r3, #30
 8005d18:	051b      	lsls	r3, r3, #20
 8005d1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d1e:	e01b      	b.n	8005d58 <HAL_ADC_ConfigChannel+0x6a8>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	fa93 f3a3 	rbit	r3, r3
 8005d2c:	613b      	str	r3, [r7, #16]
  return result;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005d38:	2320      	movs	r3, #32
 8005d3a:	e003      	b.n	8005d44 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	fab3 f383 	clz	r3, r3
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	3301      	adds	r3, #1
 8005d46:	f003 021f 	and.w	r2, r3, #31
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	4413      	add	r3, r2
 8005d50:	3b1e      	subs	r3, #30
 8005d52:	051b      	lsls	r3, r3, #20
 8005d54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d58:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d5e:	4619      	mov	r1, r3
 8005d60:	f7fe fe4c 	bl	80049fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4b09      	ldr	r3, [pc, #36]	@ (8005d90 <HAL_ADC_ConfigChannel+0x6e0>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 80be 	beq.w	8005eee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d7a:	d004      	beq.n	8005d86 <HAL_ADC_ConfigChannel+0x6d6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a04      	ldr	r2, [pc, #16]	@ (8005d94 <HAL_ADC_ConfigChannel+0x6e4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d10a      	bne.n	8005d9c <HAL_ADC_ConfigChannel+0x6ec>
 8005d86:	4b04      	ldr	r3, [pc, #16]	@ (8005d98 <HAL_ADC_ConfigChannel+0x6e8>)
 8005d88:	e009      	b.n	8005d9e <HAL_ADC_ConfigChannel+0x6ee>
 8005d8a:	bf00      	nop
 8005d8c:	407f0000 	.word	0x407f0000
 8005d90:	80080000 	.word	0x80080000
 8005d94:	50000100 	.word	0x50000100
 8005d98:	50000300 	.word	0x50000300
 8005d9c:	4b59      	ldr	r3, [pc, #356]	@ (8005f04 <HAL_ADC_ConfigChannel+0x854>)
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fd2e 	bl	8004800 <LL_ADC_GetCommonPathInternalCh>
 8005da4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a56      	ldr	r2, [pc, #344]	@ (8005f08 <HAL_ADC_ConfigChannel+0x858>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_ADC_ConfigChannel+0x70c>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a55      	ldr	r2, [pc, #340]	@ (8005f0c <HAL_ADC_ConfigChannel+0x85c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d13a      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d134      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dd0:	d005      	beq.n	8005dde <HAL_ADC_ConfigChannel+0x72e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4e      	ldr	r2, [pc, #312]	@ (8005f10 <HAL_ADC_ConfigChannel+0x860>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	f040 8085 	bne.w	8005ee8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005de6:	d004      	beq.n	8005df2 <HAL_ADC_ConfigChannel+0x742>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a49      	ldr	r2, [pc, #292]	@ (8005f14 <HAL_ADC_ConfigChannel+0x864>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <HAL_ADC_ConfigChannel+0x746>
 8005df2:	4a49      	ldr	r2, [pc, #292]	@ (8005f18 <HAL_ADC_ConfigChannel+0x868>)
 8005df4:	e000      	b.n	8005df8 <HAL_ADC_ConfigChannel+0x748>
 8005df6:	4a43      	ldr	r2, [pc, #268]	@ (8005f04 <HAL_ADC_ConfigChannel+0x854>)
 8005df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f7fe fce9 	bl	80047da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e08:	4b44      	ldr	r3, [pc, #272]	@ (8005f1c <HAL_ADC_ConfigChannel+0x86c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	099b      	lsrs	r3, r3, #6
 8005e0e:	4a44      	ldr	r2, [pc, #272]	@ (8005f20 <HAL_ADC_ConfigChannel+0x870>)
 8005e10:	fba2 2303 	umull	r2, r3, r2, r3
 8005e14:	099b      	lsrs	r3, r3, #6
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	4613      	mov	r3, r2
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005e22:	e002      	b.n	8005e2a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1f9      	bne.n	8005e24 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e30:	e05a      	b.n	8005ee8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a3b      	ldr	r2, [pc, #236]	@ (8005f24 <HAL_ADC_ConfigChannel+0x874>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d125      	bne.n	8005e88 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11f      	bne.n	8005e88 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a31      	ldr	r2, [pc, #196]	@ (8005f14 <HAL_ADC_ConfigChannel+0x864>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d104      	bne.n	8005e5c <HAL_ADC_ConfigChannel+0x7ac>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a34      	ldr	r2, [pc, #208]	@ (8005f28 <HAL_ADC_ConfigChannel+0x878>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d047      	beq.n	8005eec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e64:	d004      	beq.n	8005e70 <HAL_ADC_ConfigChannel+0x7c0>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005f14 <HAL_ADC_ConfigChannel+0x864>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d101      	bne.n	8005e74 <HAL_ADC_ConfigChannel+0x7c4>
 8005e70:	4a29      	ldr	r2, [pc, #164]	@ (8005f18 <HAL_ADC_ConfigChannel+0x868>)
 8005e72:	e000      	b.n	8005e76 <HAL_ADC_ConfigChannel+0x7c6>
 8005e74:	4a23      	ldr	r2, [pc, #140]	@ (8005f04 <HAL_ADC_ConfigChannel+0x854>)
 8005e76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f7fe fcaa 	bl	80047da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e86:	e031      	b.n	8005eec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a27      	ldr	r2, [pc, #156]	@ (8005f2c <HAL_ADC_ConfigChannel+0x87c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d12d      	bne.n	8005eee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d127      	bne.n	8005eee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f14 <HAL_ADC_ConfigChannel+0x864>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d022      	beq.n	8005eee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eb0:	d004      	beq.n	8005ebc <HAL_ADC_ConfigChannel+0x80c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a17      	ldr	r2, [pc, #92]	@ (8005f14 <HAL_ADC_ConfigChannel+0x864>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d101      	bne.n	8005ec0 <HAL_ADC_ConfigChannel+0x810>
 8005ebc:	4a16      	ldr	r2, [pc, #88]	@ (8005f18 <HAL_ADC_ConfigChannel+0x868>)
 8005ebe:	e000      	b.n	8005ec2 <HAL_ADC_ConfigChannel+0x812>
 8005ec0:	4a10      	ldr	r2, [pc, #64]	@ (8005f04 <HAL_ADC_ConfigChannel+0x854>)
 8005ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ec6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f7fe fc84 	bl	80047da <LL_ADC_SetCommonPathInternalCh>
 8005ed2:	e00c      	b.n	8005eee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005ee6:	e002      	b.n	8005eee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ee8:	bf00      	nop
 8005eea:	e000      	b.n	8005eee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005eec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ef6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	37d8      	adds	r7, #216	@ 0xd8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	50000700 	.word	0x50000700
 8005f08:	c3210000 	.word	0xc3210000
 8005f0c:	90c00010 	.word	0x90c00010
 8005f10:	50000600 	.word	0x50000600
 8005f14:	50000100 	.word	0x50000100
 8005f18:	50000300 	.word	0x50000300
 8005f1c:	20000004 	.word	0x20000004
 8005f20:	053e2d63 	.word	0x053e2d63
 8005f24:	c7520000 	.word	0xc7520000
 8005f28:	50000500 	.word	0x50000500
 8005f2c:	cb840000 	.word	0xcb840000

08005f30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe fe3d 	bl	8004bc0 <LL_ADC_IsEnabled>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d176      	bne.n	800603a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	4b3c      	ldr	r3, [pc, #240]	@ (8006044 <ADC_Enable+0x114>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5e:	f043 0210 	orr.w	r2, r3, #16
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f6a:	f043 0201 	orr.w	r2, r3, #1
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e062      	b.n	800603c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fdf8 	bl	8004b70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f88:	d004      	beq.n	8005f94 <ADC_Enable+0x64>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8006048 <ADC_Enable+0x118>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d101      	bne.n	8005f98 <ADC_Enable+0x68>
 8005f94:	4b2d      	ldr	r3, [pc, #180]	@ (800604c <ADC_Enable+0x11c>)
 8005f96:	e000      	b.n	8005f9a <ADC_Enable+0x6a>
 8005f98:	4b2d      	ldr	r3, [pc, #180]	@ (8006050 <ADC_Enable+0x120>)
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe fc30 	bl	8004800 <LL_ADC_GetCommonPathInternalCh>
 8005fa0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005fa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d013      	beq.n	8005fd2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005faa:	4b2a      	ldr	r3, [pc, #168]	@ (8006054 <ADC_Enable+0x124>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	099b      	lsrs	r3, r3, #6
 8005fb0:	4a29      	ldr	r2, [pc, #164]	@ (8006058 <ADC_Enable+0x128>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	099b      	lsrs	r3, r3, #6
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	4613      	mov	r3, r2
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005fc4:	e002      	b.n	8005fcc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f9      	bne.n	8005fc6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005fd2:	f7fe fbe3 	bl	800479c <HAL_GetTick>
 8005fd6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fd8:	e028      	b.n	800602c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fdee 	bl	8004bc0 <LL_ADC_IsEnabled>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d104      	bne.n	8005ff4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fdbe 	bl	8004b70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ff4:	f7fe fbd2 	bl	800479c <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d914      	bls.n	800602c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b01      	cmp	r3, #1
 800600e:	d00d      	beq.n	800602c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006014:	f043 0210 	orr.w	r2, r3, #16
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006020:	f043 0201 	orr.w	r2, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e007      	b.n	800603c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b01      	cmp	r3, #1
 8006038:	d1cf      	bne.n	8005fda <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	8000003f 	.word	0x8000003f
 8006048:	50000100 	.word	0x50000100
 800604c:	50000300 	.word	0x50000300
 8006050:	50000700 	.word	0x50000700
 8006054:	20000004 	.word	0x20000004
 8006058:	053e2d63 	.word	0x053e2d63

0800605c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe fdbc 	bl	8004be6 <LL_ADC_IsDisableOngoing>
 800606e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe fda3 	bl	8004bc0 <LL_ADC_IsEnabled>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d047      	beq.n	8006110 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d144      	bne.n	8006110 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 030d 	and.w	r3, r3, #13
 8006090:	2b01      	cmp	r3, #1
 8006092:	d10c      	bne.n	80060ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe fd7d 	bl	8004b98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2203      	movs	r2, #3
 80060a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80060a6:	f7fe fb79 	bl	800479c <HAL_GetTick>
 80060aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80060ac:	e029      	b.n	8006102 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b2:	f043 0210 	orr.w	r2, r3, #16
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060be:	f043 0201 	orr.w	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e023      	b.n	8006112 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80060ca:	f7fe fb67 	bl	800479c <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d914      	bls.n	8006102 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ea:	f043 0210 	orr.w	r2, r3, #16
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060f6:	f043 0201 	orr.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e007      	b.n	8006112 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1dc      	bne.n	80060ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006126:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800612c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006130:	2b00      	cmp	r3, #0
 8006132:	d14b      	bne.n	80061cc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d021      	beq.n	8006192 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fc00 	bl	8004958 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d032      	beq.n	80061c4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d12b      	bne.n	80061c4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006170:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d11f      	bne.n	80061c4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006188:	f043 0201 	orr.w	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006190:	e018      	b.n	80061c4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d111      	bne.n	80061c4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d105      	bne.n	80061c4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061bc:	f043 0201 	orr.w	r2, r3, #1
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff fa4b 	bl	8005660 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80061ca:	e00e      	b.n	80061ea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff fa5f 	bl	800569c <HAL_ADC_ErrorCallback>
}
 80061de:	e004      	b.n	80061ea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4798      	blx	r3
}
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff fa37 	bl	8005674 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006220:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622c:	f043 0204 	orr.w	r2, r3, #4
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff fa31 	bl	800569c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <LL_ADC_IsEnabled>:
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <LL_ADC_IsEnabled+0x18>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <LL_ADC_IsEnabled+0x1a>
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <LL_ADC_StartCalibration>:
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800627a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006284:	4313      	orrs	r3, r2
 8006286:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	609a      	str	r2, [r3, #8]
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <LL_ADC_IsCalibrationOnGoing>:
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062ae:	d101      	bne.n	80062b4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80062b0:	2301      	movs	r3, #1
 80062b2:	e000      	b.n	80062b6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d101      	bne.n	80062da <LL_ADC_REG_IsConversionOngoing+0x18>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_ADCEx_Calibration_Start+0x1c>
 8006300:	2302      	movs	r3, #2
 8006302:	e04d      	b.n	80063a0 <HAL_ADCEx_Calibration_Start+0xb8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff fea5 	bl	800605c <ADC_Disable>
 8006312:	4603      	mov	r3, r0
 8006314:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d136      	bne.n	800638a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006320:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006324:	f023 0302 	bic.w	r3, r3, #2
 8006328:	f043 0202 	orr.w	r2, r3, #2
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff ff96 	bl	8006268 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800633c:	e014      	b.n	8006368 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	3301      	adds	r3, #1
 8006342:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4a18      	ldr	r2, [pc, #96]	@ (80063a8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d90d      	bls.n	8006368 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006350:	f023 0312 	bic.w	r3, r3, #18
 8006354:	f043 0210 	orr.w	r2, r3, #16
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e01b      	b.n	80063a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff ff94 	bl	800629a <LL_ADC_IsCalibrationOnGoing>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e2      	bne.n	800633e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637c:	f023 0303 	bic.w	r3, r3, #3
 8006380:	f043 0201 	orr.w	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006388:	e005      	b.n	8006396 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800638e:	f043 0210 	orr.w	r2, r3, #16
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800639e:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	0004de01 	.word	0x0004de01

080063ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006410:	b590      	push	{r4, r7, lr}
 8006412:	b0a1      	sub	sp, #132	@ 0x84
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800642a:	2302      	movs	r3, #2
 800642c:	e0e7      	b.n	80065fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006436:	2300      	movs	r3, #0
 8006438:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800643a:	2300      	movs	r3, #0
 800643c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006446:	d102      	bne.n	800644e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006448:	4b6f      	ldr	r3, [pc, #444]	@ (8006608 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800644a:	60bb      	str	r3, [r7, #8]
 800644c:	e009      	b.n	8006462 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a6e      	ldr	r2, [pc, #440]	@ (800660c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d102      	bne.n	800645e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006458:	4b6d      	ldr	r3, [pc, #436]	@ (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800645a:	60bb      	str	r3, [r7, #8]
 800645c:	e001      	b.n	8006462 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800645e:	2300      	movs	r3, #0
 8006460:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646c:	f043 0220 	orr.w	r2, r3, #32
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0be      	b.n	80065fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff ff1d 	bl	80062c2 <LL_ADC_REG_IsConversionOngoing>
 8006488:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff ff17 	bl	80062c2 <LL_ADC_REG_IsConversionOngoing>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	f040 80a0 	bne.w	80065dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800649c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f040 809c 	bne.w	80065dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064ac:	d004      	beq.n	80064b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a55      	ldr	r2, [pc, #340]	@ (8006608 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d101      	bne.n	80064bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80064b8:	4b56      	ldr	r3, [pc, #344]	@ (8006614 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80064ba:	e000      	b.n	80064be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80064bc:	4b56      	ldr	r3, [pc, #344]	@ (8006618 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80064be:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d04b      	beq.n	8006560 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80064c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	6859      	ldr	r1, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80064da:	035b      	lsls	r3, r3, #13
 80064dc:	430b      	orrs	r3, r1
 80064de:	431a      	orrs	r2, r3
 80064e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064ec:	d004      	beq.n	80064f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a45      	ldr	r2, [pc, #276]	@ (8006608 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d10f      	bne.n	8006518 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80064f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80064fc:	f7ff fea1 	bl	8006242 <LL_ADC_IsEnabled>
 8006500:	4604      	mov	r4, r0
 8006502:	4841      	ldr	r0, [pc, #260]	@ (8006608 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006504:	f7ff fe9d 	bl	8006242 <LL_ADC_IsEnabled>
 8006508:	4603      	mov	r3, r0
 800650a:	4323      	orrs	r3, r4
 800650c:	2b00      	cmp	r3, #0
 800650e:	bf0c      	ite	eq
 8006510:	2301      	moveq	r3, #1
 8006512:	2300      	movne	r3, #0
 8006514:	b2db      	uxtb	r3, r3
 8006516:	e012      	b.n	800653e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006518:	483c      	ldr	r0, [pc, #240]	@ (800660c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800651a:	f7ff fe92 	bl	8006242 <LL_ADC_IsEnabled>
 800651e:	4604      	mov	r4, r0
 8006520:	483b      	ldr	r0, [pc, #236]	@ (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006522:	f7ff fe8e 	bl	8006242 <LL_ADC_IsEnabled>
 8006526:	4603      	mov	r3, r0
 8006528:	431c      	orrs	r4, r3
 800652a:	483c      	ldr	r0, [pc, #240]	@ (800661c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800652c:	f7ff fe89 	bl	8006242 <LL_ADC_IsEnabled>
 8006530:	4603      	mov	r3, r0
 8006532:	4323      	orrs	r3, r4
 8006534:	2b00      	cmp	r3, #0
 8006536:	bf0c      	ite	eq
 8006538:	2301      	moveq	r3, #1
 800653a:	2300      	movne	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d056      	beq.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800654a:	f023 030f 	bic.w	r3, r3, #15
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	6811      	ldr	r1, [r2, #0]
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	6892      	ldr	r2, [r2, #8]
 8006556:	430a      	orrs	r2, r1
 8006558:	431a      	orrs	r2, r3
 800655a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800655c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800655e:	e047      	b.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006568:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800656a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006574:	d004      	beq.n	8006580 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a23      	ldr	r2, [pc, #140]	@ (8006608 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d10f      	bne.n	80065a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006580:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006584:	f7ff fe5d 	bl	8006242 <LL_ADC_IsEnabled>
 8006588:	4604      	mov	r4, r0
 800658a:	481f      	ldr	r0, [pc, #124]	@ (8006608 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800658c:	f7ff fe59 	bl	8006242 <LL_ADC_IsEnabled>
 8006590:	4603      	mov	r3, r0
 8006592:	4323      	orrs	r3, r4
 8006594:	2b00      	cmp	r3, #0
 8006596:	bf0c      	ite	eq
 8006598:	2301      	moveq	r3, #1
 800659a:	2300      	movne	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	e012      	b.n	80065c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80065a0:	481a      	ldr	r0, [pc, #104]	@ (800660c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80065a2:	f7ff fe4e 	bl	8006242 <LL_ADC_IsEnabled>
 80065a6:	4604      	mov	r4, r0
 80065a8:	4819      	ldr	r0, [pc, #100]	@ (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80065aa:	f7ff fe4a 	bl	8006242 <LL_ADC_IsEnabled>
 80065ae:	4603      	mov	r3, r0
 80065b0:	431c      	orrs	r4, r3
 80065b2:	481a      	ldr	r0, [pc, #104]	@ (800661c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80065b4:	f7ff fe45 	bl	8006242 <LL_ADC_IsEnabled>
 80065b8:	4603      	mov	r3, r0
 80065ba:	4323      	orrs	r3, r4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bf0c      	ite	eq
 80065c0:	2301      	moveq	r3, #1
 80065c2:	2300      	movne	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d012      	beq.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80065ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80065d2:	f023 030f 	bic.w	r3, r3, #15
 80065d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80065d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80065da:	e009      	b.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e0:	f043 0220 	orr.w	r2, r3, #32
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80065ee:	e000      	b.n	80065f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80065f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80065fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3784      	adds	r7, #132	@ 0x84
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}
 8006606:	bf00      	nop
 8006608:	50000100 	.word	0x50000100
 800660c:	50000400 	.word	0x50000400
 8006610:	50000500 	.word	0x50000500
 8006614:	50000300 	.word	0x50000300
 8006618:	50000700 	.word	0x50000700
 800661c:	50000600 	.word	0x50000600

08006620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006630:	4b0c      	ldr	r3, [pc, #48]	@ (8006664 <__NVIC_SetPriorityGrouping+0x44>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800663c:	4013      	ands	r3, r2
 800663e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800664c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006652:	4a04      	ldr	r2, [pc, #16]	@ (8006664 <__NVIC_SetPriorityGrouping+0x44>)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	60d3      	str	r3, [r2, #12]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	e000ed00 	.word	0xe000ed00

08006668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800666c:	4b04      	ldr	r3, [pc, #16]	@ (8006680 <__NVIC_GetPriorityGrouping+0x18>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	0a1b      	lsrs	r3, r3, #8
 8006672:	f003 0307 	and.w	r3, r3, #7
}
 8006676:	4618      	mov	r0, r3
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	e000ed00 	.word	0xe000ed00

08006684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800668e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	db0b      	blt.n	80066ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	f003 021f 	and.w	r2, r3, #31
 800669c:	4907      	ldr	r1, [pc, #28]	@ (80066bc <__NVIC_EnableIRQ+0x38>)
 800669e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	2001      	movs	r0, #1
 80066a6:	fa00 f202 	lsl.w	r2, r0, r2
 80066aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	e000e100 	.word	0xe000e100

080066c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	6039      	str	r1, [r7, #0]
 80066ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	db0a      	blt.n	80066ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	490c      	ldr	r1, [pc, #48]	@ (800670c <__NVIC_SetPriority+0x4c>)
 80066da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066de:	0112      	lsls	r2, r2, #4
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	440b      	add	r3, r1
 80066e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066e8:	e00a      	b.n	8006700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	4908      	ldr	r1, [pc, #32]	@ (8006710 <__NVIC_SetPriority+0x50>)
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	3b04      	subs	r3, #4
 80066f8:	0112      	lsls	r2, r2, #4
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	440b      	add	r3, r1
 80066fe:	761a      	strb	r2, [r3, #24]
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	e000e100 	.word	0xe000e100
 8006710:	e000ed00 	.word	0xe000ed00

08006714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006714:	b480      	push	{r7}
 8006716:	b089      	sub	sp, #36	@ 0x24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f1c3 0307 	rsb	r3, r3, #7
 800672e:	2b04      	cmp	r3, #4
 8006730:	bf28      	it	cs
 8006732:	2304      	movcs	r3, #4
 8006734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3304      	adds	r3, #4
 800673a:	2b06      	cmp	r3, #6
 800673c:	d902      	bls.n	8006744 <NVIC_EncodePriority+0x30>
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3b03      	subs	r3, #3
 8006742:	e000      	b.n	8006746 <NVIC_EncodePriority+0x32>
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006748:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43da      	mvns	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	401a      	ands	r2, r3
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800675c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	fa01 f303 	lsl.w	r3, r1, r3
 8006766:	43d9      	mvns	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800676c:	4313      	orrs	r3, r2
         );
}
 800676e:	4618      	mov	r0, r3
 8006770:	3724      	adds	r7, #36	@ 0x24
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff ff4c 	bl	8006620 <__NVIC_SetPriorityGrouping>
}
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800679e:	f7ff ff63 	bl	8006668 <__NVIC_GetPriorityGrouping>
 80067a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	6978      	ldr	r0, [r7, #20]
 80067aa:	f7ff ffb3 	bl	8006714 <NVIC_EncodePriority>
 80067ae:	4602      	mov	r2, r0
 80067b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b4:	4611      	mov	r1, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff ff82 	bl	80066c0 <__NVIC_SetPriority>
}
 80067bc:	bf00      	nop
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff ff56 	bl	8006684 <__NVIC_EnableIRQ>
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e08d      	b.n	800690e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	4b47      	ldr	r3, [pc, #284]	@ (8006918 <HAL_DMA_Init+0x138>)
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d80f      	bhi.n	800681e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	4b45      	ldr	r3, [pc, #276]	@ (800691c <HAL_DMA_Init+0x13c>)
 8006806:	4413      	add	r3, r2
 8006808:	4a45      	ldr	r2, [pc, #276]	@ (8006920 <HAL_DMA_Init+0x140>)
 800680a:	fba2 2303 	umull	r2, r3, r2, r3
 800680e:	091b      	lsrs	r3, r3, #4
 8006810:	009a      	lsls	r2, r3, #2
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a42      	ldr	r2, [pc, #264]	@ (8006924 <HAL_DMA_Init+0x144>)
 800681a:	641a      	str	r2, [r3, #64]	@ 0x40
 800681c:	e00e      	b.n	800683c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	4b40      	ldr	r3, [pc, #256]	@ (8006928 <HAL_DMA_Init+0x148>)
 8006826:	4413      	add	r3, r2
 8006828:	4a3d      	ldr	r2, [pc, #244]	@ (8006920 <HAL_DMA_Init+0x140>)
 800682a:	fba2 2303 	umull	r2, r3, r2, r3
 800682e:	091b      	lsrs	r3, r3, #4
 8006830:	009a      	lsls	r2, r3, #2
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a3c      	ldr	r2, [pc, #240]	@ (800692c <HAL_DMA_Init+0x14c>)
 800683a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006856:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800686c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fa82 	bl	8006d98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800689c:	d102      	bne.n	80068a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80068b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d010      	beq.n	80068e4 <HAL_DMA_Init+0x104>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d80c      	bhi.n	80068e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 faa2 	bl	8006e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	e008      	b.n	80068f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	40020407 	.word	0x40020407
 800691c:	bffdfff8 	.word	0xbffdfff8
 8006920:	cccccccd 	.word	0xcccccccd
 8006924:	40020000 	.word	0x40020000
 8006928:	bffdfbf8 	.word	0xbffdfbf8
 800692c:	40020400 	.word	0x40020400

08006930 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_DMA_Start_IT+0x20>
 800694c:	2302      	movs	r3, #2
 800694e:	e066      	b.n	8006a1e <HAL_DMA_Start_IT+0xee>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	d155      	bne.n	8006a10 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0201 	bic.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	68b9      	ldr	r1, [r7, #8]
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f9c7 	bl	8006d1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006992:	2b00      	cmp	r3, #0
 8006994:	d008      	beq.n	80069a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 020e 	orr.w	r2, r2, #14
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	e00f      	b.n	80069c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0204 	bic.w	r2, r2, #4
 80069b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 020a 	orr.w	r2, r2, #10
 80069c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d007      	beq.n	80069e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0201 	orr.w	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e005      	b.n	8006a1c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d005      	beq.n	8006a4a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2204      	movs	r2, #4
 8006a42:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	73fb      	strb	r3, [r7, #15]
 8006a48:	e037      	b.n	8006aba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 020e 	bic.w	r2, r2, #14
 8006a58:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a68:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0201 	bic.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7e:	f003 021f 	and.w	r2, r3, #31
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a86:	2101      	movs	r1, #1
 8006a88:	fa01 f202 	lsl.w	r2, r1, r2
 8006a8c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006a96:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00c      	beq.n	8006aba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006aae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006ab8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d00d      	beq.n	8006b0c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2204      	movs	r2, #4
 8006af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	73fb      	strb	r3, [r7, #15]
 8006b0a:	e047      	b.n	8006b9c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 020e 	bic.w	r2, r2, #14
 8006b1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0201 	bic.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b40:	f003 021f 	and.w	r2, r3, #31
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b48:	2101      	movs	r1, #1
 8006b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b4e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00c      	beq.n	8006b7c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006b7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4798      	blx	r3
    }
  }
  return status;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc2:	f003 031f 	and.w	r3, r3, #31
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	409a      	lsls	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d026      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x7a>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d021      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d107      	bne.n	8006bfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0204 	bic.w	r2, r2, #4
 8006bf8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfe:	f003 021f 	and.w	r2, r3, #31
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c06:	2104      	movs	r1, #4
 8006c08:	fa01 f202 	lsl.w	r2, r1, r2
 8006c0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d071      	beq.n	8006cfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006c1e:	e06c      	b.n	8006cfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2202      	movs	r2, #2
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d02e      	beq.n	8006c92 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d029      	beq.n	8006c92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10b      	bne.n	8006c64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 020a 	bic.w	r2, r2, #10
 8006c5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c68:	f003 021f 	and.w	r2, r3, #31
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c70:	2102      	movs	r1, #2
 8006c72:	fa01 f202 	lsl.w	r2, r1, r2
 8006c76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d038      	beq.n	8006cfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006c90:	e033      	b.n	8006cfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	2208      	movs	r2, #8
 8006c9c:	409a      	lsls	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d02a      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f003 0308 	and.w	r3, r3, #8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d025      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 020e 	bic.w	r2, r2, #14
 8006cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc4:	f003 021f 	and.w	r2, r3, #31
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ccc:	2101      	movs	r1, #1
 8006cce:	fa01 f202 	lsl.w	r2, r1, r2
 8006cd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006cfa:	bf00      	nop
 8006cfc:	bf00      	nop
}
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006d32:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d004      	beq.n	8006d46 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006d44:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4a:	f003 021f 	and.w	r2, r3, #31
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d52:	2101      	movs	r1, #1
 8006d54:	fa01 f202 	lsl.w	r2, r1, r2
 8006d58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b10      	cmp	r3, #16
 8006d68:	d108      	bne.n	8006d7c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006d7a:	e007      	b.n	8006d8c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	60da      	str	r2, [r3, #12]
}
 8006d8c:	bf00      	nop
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	4b16      	ldr	r3, [pc, #88]	@ (8006e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d802      	bhi.n	8006db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006dac:	4b15      	ldr	r3, [pc, #84]	@ (8006e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	e001      	b.n	8006db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006db2:	4b15      	ldr	r3, [pc, #84]	@ (8006e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006db4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	3b08      	subs	r3, #8
 8006dc2:	4a12      	ldr	r2, [pc, #72]	@ (8006e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc8:	091b      	lsrs	r3, r3, #4
 8006dca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd0:	089b      	lsrs	r3, r3, #2
 8006dd2:	009a      	lsls	r2, r3, #2
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a0b      	ldr	r2, [pc, #44]	@ (8006e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006de2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f003 031f 	and.w	r3, r3, #31
 8006dea:	2201      	movs	r2, #1
 8006dec:	409a      	lsls	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40020407 	.word	0x40020407
 8006e04:	40020800 	.word	0x40020800
 8006e08:	40020820 	.word	0x40020820
 8006e0c:	cccccccd 	.word	0xcccccccd
 8006e10:	40020880 	.word	0x40020880

08006e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4b0b      	ldr	r3, [pc, #44]	@ (8006e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a08      	ldr	r2, [pc, #32]	@ (8006e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006e36:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	2201      	movs	r2, #1
 8006e42:	409a      	lsls	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006e48:	bf00      	nop
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	1000823f 	.word	0x1000823f
 8006e58:	40020940 	.word	0x40020940

08006e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006e6a:	e15a      	b.n	8007122 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	2101      	movs	r1, #1
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	fa01 f303 	lsl.w	r3, r1, r3
 8006e78:	4013      	ands	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 814c 	beq.w	800711c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d005      	beq.n	8006e9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d130      	bne.n	8006efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eac:	43db      	mvns	r3, r3
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	43db      	mvns	r3, r3
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	091b      	lsrs	r3, r3, #4
 8006ee8:	f003 0201 	and.w	r2, r3, #1
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d017      	beq.n	8006f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	2203      	movs	r2, #3
 8006f16:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1a:	43db      	mvns	r3, r3
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d123      	bne.n	8006f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	08da      	lsrs	r2, r3, #3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3208      	adds	r2, #8
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	220f      	movs	r2, #15
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	43db      	mvns	r3, r3
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4013      	ands	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	691a      	ldr	r2, [r3, #16]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	08da      	lsrs	r2, r3, #3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3208      	adds	r2, #8
 8006f88:	6939      	ldr	r1, [r7, #16]
 8006f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	2203      	movs	r2, #3
 8006f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f003 0203 	and.w	r2, r3, #3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 80a6 	beq.w	800711c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8007140 <HAL_GPIO_Init+0x2e4>)
 8006fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8007140 <HAL_GPIO_Init+0x2e4>)
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	6613      	str	r3, [r2, #96]	@ 0x60
 8006fdc:	4b58      	ldr	r3, [pc, #352]	@ (8007140 <HAL_GPIO_Init+0x2e4>)
 8006fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fe8:	4a56      	ldr	r2, [pc, #344]	@ (8007144 <HAL_GPIO_Init+0x2e8>)
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	089b      	lsrs	r3, r3, #2
 8006fee:	3302      	adds	r3, #2
 8006ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f003 0303 	and.w	r3, r3, #3
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	220f      	movs	r2, #15
 8007000:	fa02 f303 	lsl.w	r3, r2, r3
 8007004:	43db      	mvns	r3, r3
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	4013      	ands	r3, r2
 800700a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007012:	d01f      	beq.n	8007054 <HAL_GPIO_Init+0x1f8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a4c      	ldr	r2, [pc, #304]	@ (8007148 <HAL_GPIO_Init+0x2ec>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d019      	beq.n	8007050 <HAL_GPIO_Init+0x1f4>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a4b      	ldr	r2, [pc, #300]	@ (800714c <HAL_GPIO_Init+0x2f0>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d013      	beq.n	800704c <HAL_GPIO_Init+0x1f0>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a4a      	ldr	r2, [pc, #296]	@ (8007150 <HAL_GPIO_Init+0x2f4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00d      	beq.n	8007048 <HAL_GPIO_Init+0x1ec>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a49      	ldr	r2, [pc, #292]	@ (8007154 <HAL_GPIO_Init+0x2f8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d007      	beq.n	8007044 <HAL_GPIO_Init+0x1e8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a48      	ldr	r2, [pc, #288]	@ (8007158 <HAL_GPIO_Init+0x2fc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d101      	bne.n	8007040 <HAL_GPIO_Init+0x1e4>
 800703c:	2305      	movs	r3, #5
 800703e:	e00a      	b.n	8007056 <HAL_GPIO_Init+0x1fa>
 8007040:	2306      	movs	r3, #6
 8007042:	e008      	b.n	8007056 <HAL_GPIO_Init+0x1fa>
 8007044:	2304      	movs	r3, #4
 8007046:	e006      	b.n	8007056 <HAL_GPIO_Init+0x1fa>
 8007048:	2303      	movs	r3, #3
 800704a:	e004      	b.n	8007056 <HAL_GPIO_Init+0x1fa>
 800704c:	2302      	movs	r3, #2
 800704e:	e002      	b.n	8007056 <HAL_GPIO_Init+0x1fa>
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <HAL_GPIO_Init+0x1fa>
 8007054:	2300      	movs	r3, #0
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	f002 0203 	and.w	r2, r2, #3
 800705c:	0092      	lsls	r2, r2, #2
 800705e:	4093      	lsls	r3, r2
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007066:	4937      	ldr	r1, [pc, #220]	@ (8007144 <HAL_GPIO_Init+0x2e8>)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	089b      	lsrs	r3, r3, #2
 800706c:	3302      	adds	r3, #2
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007074:	4b39      	ldr	r3, [pc, #228]	@ (800715c <HAL_GPIO_Init+0x300>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	43db      	mvns	r3, r3
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4013      	ands	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007098:	4a30      	ldr	r2, [pc, #192]	@ (800715c <HAL_GPIO_Init+0x300>)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800709e:	4b2f      	ldr	r3, [pc, #188]	@ (800715c <HAL_GPIO_Init+0x300>)
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	43db      	mvns	r3, r3
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4013      	ands	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80070c2:	4a26      	ldr	r2, [pc, #152]	@ (800715c <HAL_GPIO_Init+0x300>)
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80070c8:	4b24      	ldr	r3, [pc, #144]	@ (800715c <HAL_GPIO_Init+0x300>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	43db      	mvns	r3, r3
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	4013      	ands	r3, r2
 80070d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80070ec:	4a1b      	ldr	r2, [pc, #108]	@ (800715c <HAL_GPIO_Init+0x300>)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80070f2:	4b1a      	ldr	r3, [pc, #104]	@ (800715c <HAL_GPIO_Init+0x300>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	43db      	mvns	r3, r3
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	4013      	ands	r3, r2
 8007100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007116:	4a11      	ldr	r2, [pc, #68]	@ (800715c <HAL_GPIO_Init+0x300>)
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	3301      	adds	r3, #1
 8007120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	fa22 f303 	lsr.w	r3, r2, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	f47f ae9d 	bne.w	8006e6c <HAL_GPIO_Init+0x10>
  }
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	40021000 	.word	0x40021000
 8007144:	40010000 	.word	0x40010000
 8007148:	48000400 	.word	0x48000400
 800714c:	48000800 	.word	0x48000800
 8007150:	48000c00 	.word	0x48000c00
 8007154:	48001000 	.word	0x48001000
 8007158:	48001400 	.word	0x48001400
 800715c:	40010400 	.word	0x40010400

08007160 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800716a:	2300      	movs	r3, #0
 800716c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800716e:	e0bd      	b.n	80072ec <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007170:	2201      	movs	r2, #1
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	4013      	ands	r3, r2
 800717c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 80b0 	beq.w	80072e6 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8007186:	4a60      	ldr	r2, [pc, #384]	@ (8007308 <HAL_GPIO_DeInit+0x1a8>)
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	089b      	lsrs	r3, r3, #2
 800718c:	3302      	adds	r3, #2
 800718e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007192:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	220f      	movs	r2, #15
 800719e:	fa02 f303 	lsl.w	r3, r2, r3
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4013      	ands	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80071ae:	d01f      	beq.n	80071f0 <HAL_GPIO_DeInit+0x90>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a56      	ldr	r2, [pc, #344]	@ (800730c <HAL_GPIO_DeInit+0x1ac>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d019      	beq.n	80071ec <HAL_GPIO_DeInit+0x8c>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a55      	ldr	r2, [pc, #340]	@ (8007310 <HAL_GPIO_DeInit+0x1b0>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d013      	beq.n	80071e8 <HAL_GPIO_DeInit+0x88>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a54      	ldr	r2, [pc, #336]	@ (8007314 <HAL_GPIO_DeInit+0x1b4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00d      	beq.n	80071e4 <HAL_GPIO_DeInit+0x84>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a53      	ldr	r2, [pc, #332]	@ (8007318 <HAL_GPIO_DeInit+0x1b8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d007      	beq.n	80071e0 <HAL_GPIO_DeInit+0x80>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a52      	ldr	r2, [pc, #328]	@ (800731c <HAL_GPIO_DeInit+0x1bc>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d101      	bne.n	80071dc <HAL_GPIO_DeInit+0x7c>
 80071d8:	2305      	movs	r3, #5
 80071da:	e00a      	b.n	80071f2 <HAL_GPIO_DeInit+0x92>
 80071dc:	2306      	movs	r3, #6
 80071de:	e008      	b.n	80071f2 <HAL_GPIO_DeInit+0x92>
 80071e0:	2304      	movs	r3, #4
 80071e2:	e006      	b.n	80071f2 <HAL_GPIO_DeInit+0x92>
 80071e4:	2303      	movs	r3, #3
 80071e6:	e004      	b.n	80071f2 <HAL_GPIO_DeInit+0x92>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e002      	b.n	80071f2 <HAL_GPIO_DeInit+0x92>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <HAL_GPIO_DeInit+0x92>
 80071f0:	2300      	movs	r3, #0
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	f002 0203 	and.w	r2, r2, #3
 80071f8:	0092      	lsls	r2, r2, #2
 80071fa:	4093      	lsls	r3, r2
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d132      	bne.n	8007268 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007202:	4b47      	ldr	r3, [pc, #284]	@ (8007320 <HAL_GPIO_DeInit+0x1c0>)
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	43db      	mvns	r3, r3
 800720a:	4945      	ldr	r1, [pc, #276]	@ (8007320 <HAL_GPIO_DeInit+0x1c0>)
 800720c:	4013      	ands	r3, r2
 800720e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007210:	4b43      	ldr	r3, [pc, #268]	@ (8007320 <HAL_GPIO_DeInit+0x1c0>)
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	43db      	mvns	r3, r3
 8007218:	4941      	ldr	r1, [pc, #260]	@ (8007320 <HAL_GPIO_DeInit+0x1c0>)
 800721a:	4013      	ands	r3, r2
 800721c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800721e:	4b40      	ldr	r3, [pc, #256]	@ (8007320 <HAL_GPIO_DeInit+0x1c0>)
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	43db      	mvns	r3, r3
 8007226:	493e      	ldr	r1, [pc, #248]	@ (8007320 <HAL_GPIO_DeInit+0x1c0>)
 8007228:	4013      	ands	r3, r2
 800722a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800722c:	4b3c      	ldr	r3, [pc, #240]	@ (8007320 <HAL_GPIO_DeInit+0x1c0>)
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	43db      	mvns	r3, r3
 8007234:	493a      	ldr	r1, [pc, #232]	@ (8007320 <HAL_GPIO_DeInit+0x1c0>)
 8007236:	4013      	ands	r3, r2
 8007238:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f003 0303 	and.w	r3, r3, #3
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	220f      	movs	r2, #15
 8007244:	fa02 f303 	lsl.w	r3, r2, r3
 8007248:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800724a:	4a2f      	ldr	r2, [pc, #188]	@ (8007308 <HAL_GPIO_DeInit+0x1a8>)
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	089b      	lsrs	r3, r3, #2
 8007250:	3302      	adds	r3, #2
 8007252:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	43da      	mvns	r2, r3
 800725a:	482b      	ldr	r0, [pc, #172]	@ (8007308 <HAL_GPIO_DeInit+0x1a8>)
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	089b      	lsrs	r3, r3, #2
 8007260:	400a      	ands	r2, r1
 8007262:	3302      	adds	r3, #2
 8007264:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	2103      	movs	r1, #3
 8007272:	fa01 f303 	lsl.w	r3, r1, r3
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	08da      	lsrs	r2, r3, #3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3208      	adds	r2, #8
 8007284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	220f      	movs	r2, #15
 8007292:	fa02 f303 	lsl.w	r3, r2, r3
 8007296:	43db      	mvns	r3, r3
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	08d2      	lsrs	r2, r2, #3
 800729c:	4019      	ands	r1, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3208      	adds	r2, #8
 80072a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	2103      	movs	r1, #3
 80072b0:	fa01 f303 	lsl.w	r3, r1, r3
 80072b4:	43db      	mvns	r3, r3
 80072b6:	401a      	ands	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	2101      	movs	r1, #1
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	fa01 f303 	lsl.w	r3, r1, r3
 80072c8:	43db      	mvns	r3, r3
 80072ca:	401a      	ands	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	2103      	movs	r1, #3
 80072da:	fa01 f303 	lsl.w	r3, r1, r3
 80072de:	43db      	mvns	r3, r3
 80072e0:	401a      	ands	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	3301      	adds	r3, #1
 80072ea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	fa22 f303 	lsr.w	r3, r2, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f47f af3b 	bne.w	8007170 <HAL_GPIO_DeInit+0x10>
  }
}
 80072fa:	bf00      	nop
 80072fc:	bf00      	nop
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40010000 	.word	0x40010000
 800730c:	48000400 	.word	0x48000400
 8007310:	48000800 	.word	0x48000800
 8007314:	48000c00 	.word	0x48000c00
 8007318:	48001000 	.word	0x48001000
 800731c:	48001400 	.word	0x48001400
 8007320:	40010400 	.word	0x40010400

08007324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691a      	ldr	r2, [r3, #16]
 8007334:	887b      	ldrh	r3, [r7, #2]
 8007336:	4013      	ands	r3, r2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800733c:	2301      	movs	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
 8007340:	e001      	b.n	8007346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007346:	7bfb      	ldrb	r3, [r7, #15]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	807b      	strh	r3, [r7, #2]
 8007360:	4613      	mov	r3, r2
 8007362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007364:	787b      	ldrb	r3, [r7, #1]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800736a:	887a      	ldrh	r2, [r7, #2]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007370:	e002      	b.n	8007378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007372:	887a      	ldrh	r2, [r7, #2]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007396:	887a      	ldrh	r2, [r7, #2]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4013      	ands	r3, r2
 800739c:	041a      	lsls	r2, r3, #16
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	43d9      	mvns	r1, r3
 80073a2:	887b      	ldrh	r3, [r7, #2]
 80073a4:	400b      	ands	r3, r1
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	619a      	str	r2, [r3, #24]
}
 80073ac:	bf00      	nop
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80073c2:	4b08      	ldr	r3, [pc, #32]	@ (80073e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073c4:	695a      	ldr	r2, [r3, #20]
 80073c6:	88fb      	ldrh	r3, [r7, #6]
 80073c8:	4013      	ands	r3, r2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d006      	beq.n	80073dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073ce:	4a05      	ldr	r2, [pc, #20]	@ (80073e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073d0:	88fb      	ldrh	r3, [r7, #6]
 80073d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073d4:	88fb      	ldrh	r3, [r7, #6]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fb fe28 	bl	800302c <HAL_GPIO_EXTI_Callback>
  }
}
 80073dc:	bf00      	nop
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	40010400 	.word	0x40010400

080073e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e08d      	b.n	8007516 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d106      	bne.n	8007414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fc fb6c 	bl	8003aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2224      	movs	r2, #36	@ 0x24
 8007418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0201 	bic.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007438:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007448:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d107      	bne.n	8007462 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800745e:	609a      	str	r2, [r3, #8]
 8007460:	e006      	b.n	8007470 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800746e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d108      	bne.n	800748a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007486:	605a      	str	r2, [r3, #4]
 8007488:	e007      	b.n	800749a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007498:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6812      	ldr	r2, [r2, #0]
 80074a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80074a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691a      	ldr	r2, [r3, #16]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	69d9      	ldr	r1, [r3, #28]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a1a      	ldr	r2, [r3, #32]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0201 	orr.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e021      	b.n	8007574 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2224      	movs	r2, #36	@ 0x24
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0201 	bic.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fc fb29 	bl	8003ba0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af02      	add	r7, sp, #8
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	4608      	mov	r0, r1
 8007586:	4611      	mov	r1, r2
 8007588:	461a      	mov	r2, r3
 800758a:	4603      	mov	r3, r0
 800758c:	817b      	strh	r3, [r7, #10]
 800758e:	460b      	mov	r3, r1
 8007590:	813b      	strh	r3, [r7, #8]
 8007592:	4613      	mov	r3, r2
 8007594:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b20      	cmp	r3, #32
 80075a0:	f040 80f9 	bne.w	8007796 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <HAL_I2C_Mem_Write+0x34>
 80075aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d105      	bne.n	80075bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e0ed      	b.n	8007798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d101      	bne.n	80075ca <HAL_I2C_Mem_Write+0x4e>
 80075c6:	2302      	movs	r3, #2
 80075c8:	e0e6      	b.n	8007798 <HAL_I2C_Mem_Write+0x21c>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075d2:	f7fd f8e3 	bl	800479c <HAL_GetTick>
 80075d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	2319      	movs	r3, #25
 80075de:	2201      	movs	r2, #1
 80075e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 facf 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e0d1      	b.n	8007798 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2221      	movs	r2, #33	@ 0x21
 80075f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2240      	movs	r2, #64	@ 0x40
 8007600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a3a      	ldr	r2, [r7, #32]
 800760e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007614:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800761c:	88f8      	ldrh	r0, [r7, #6]
 800761e:	893a      	ldrh	r2, [r7, #8]
 8007620:	8979      	ldrh	r1, [r7, #10]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	9301      	str	r3, [sp, #4]
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	4603      	mov	r3, r0
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 f9df 	bl	80079f0 <I2C_RequestMemoryWrite>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e0a9      	b.n	8007798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007648:	b29b      	uxth	r3, r3
 800764a:	2bff      	cmp	r3, #255	@ 0xff
 800764c:	d90e      	bls.n	800766c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	22ff      	movs	r2, #255	@ 0xff
 8007652:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007658:	b2da      	uxtb	r2, r3
 800765a:	8979      	ldrh	r1, [r7, #10]
 800765c:	2300      	movs	r3, #0
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 fc53 	bl	8007f10 <I2C_TransferConfig>
 800766a:	e00f      	b.n	800768c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800767a:	b2da      	uxtb	r2, r3
 800767c:	8979      	ldrh	r1, [r7, #10]
 800767e:	2300      	movs	r3, #0
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fc42 	bl	8007f10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fad2 	bl	8007c3a <I2C_WaitOnTXISFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e07b      	b.n	8007798 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a4:	781a      	ldrb	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d034      	beq.n	8007744 <HAL_I2C_Mem_Write+0x1c8>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d130      	bne.n	8007744 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e8:	2200      	movs	r2, #0
 80076ea:	2180      	movs	r1, #128	@ 0x80
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 fa4b 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e04d      	b.n	8007798 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007700:	b29b      	uxth	r3, r3
 8007702:	2bff      	cmp	r3, #255	@ 0xff
 8007704:	d90e      	bls.n	8007724 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	22ff      	movs	r2, #255	@ 0xff
 800770a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007710:	b2da      	uxtb	r2, r3
 8007712:	8979      	ldrh	r1, [r7, #10]
 8007714:	2300      	movs	r3, #0
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fbf7 	bl	8007f10 <I2C_TransferConfig>
 8007722:	e00f      	b.n	8007744 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007732:	b2da      	uxtb	r2, r3
 8007734:	8979      	ldrh	r1, [r7, #10]
 8007736:	2300      	movs	r3, #0
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fbe6 	bl	8007f10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d19e      	bne.n	800768c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fab8 	bl	8007cc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e01a      	b.n	8007798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2220      	movs	r2, #32
 8007768:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6859      	ldr	r1, [r3, #4]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	4b0a      	ldr	r3, [pc, #40]	@ (80077a0 <HAL_I2C_Mem_Write+0x224>)
 8007776:	400b      	ands	r3, r1
 8007778:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2220      	movs	r2, #32
 800777e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	e000      	b.n	8007798 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007796:	2302      	movs	r3, #2
  }
}
 8007798:	4618      	mov	r0, r3
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	fe00e800 	.word	0xfe00e800

080077a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af02      	add	r7, sp, #8
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	4608      	mov	r0, r1
 80077ae:	4611      	mov	r1, r2
 80077b0:	461a      	mov	r2, r3
 80077b2:	4603      	mov	r3, r0
 80077b4:	817b      	strh	r3, [r7, #10]
 80077b6:	460b      	mov	r3, r1
 80077b8:	813b      	strh	r3, [r7, #8]
 80077ba:	4613      	mov	r3, r2
 80077bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	f040 80fd 	bne.w	80079c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <HAL_I2C_Mem_Read+0x34>
 80077d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d105      	bne.n	80077e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e0f1      	b.n	80079c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d101      	bne.n	80077f2 <HAL_I2C_Mem_Read+0x4e>
 80077ee:	2302      	movs	r3, #2
 80077f0:	e0ea      	b.n	80079c8 <HAL_I2C_Mem_Read+0x224>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077fa:	f7fc ffcf 	bl	800479c <HAL_GetTick>
 80077fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	2319      	movs	r3, #25
 8007806:	2201      	movs	r2, #1
 8007808:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f9bb 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e0d5      	b.n	80079c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2222      	movs	r2, #34	@ 0x22
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2240      	movs	r2, #64	@ 0x40
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6a3a      	ldr	r2, [r7, #32]
 8007836:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800783c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007844:	88f8      	ldrh	r0, [r7, #6]
 8007846:	893a      	ldrh	r2, [r7, #8]
 8007848:	8979      	ldrh	r1, [r7, #10]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	4603      	mov	r3, r0
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 f91f 	bl	8007a98 <I2C_RequestMemoryRead>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e0ad      	b.n	80079c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007870:	b29b      	uxth	r3, r3
 8007872:	2bff      	cmp	r3, #255	@ 0xff
 8007874:	d90e      	bls.n	8007894 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	22ff      	movs	r2, #255	@ 0xff
 800787a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007880:	b2da      	uxtb	r2, r3
 8007882:	8979      	ldrh	r1, [r7, #10]
 8007884:	4b52      	ldr	r3, [pc, #328]	@ (80079d0 <HAL_I2C_Mem_Read+0x22c>)
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 fb3f 	bl	8007f10 <I2C_TransferConfig>
 8007892:	e00f      	b.n	80078b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007898:	b29a      	uxth	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	8979      	ldrh	r1, [r7, #10]
 80078a6:	4b4a      	ldr	r3, [pc, #296]	@ (80079d0 <HAL_I2C_Mem_Read+0x22c>)
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 fb2e 	bl	8007f10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ba:	2200      	movs	r2, #0
 80078bc:	2104      	movs	r1, #4
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f962 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e07c      	b.n	80079c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d8:	b2d2      	uxtb	r2, r2
 80078da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3b01      	subs	r3, #1
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d034      	beq.n	8007974 <HAL_I2C_Mem_Read+0x1d0>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800790e:	2b00      	cmp	r3, #0
 8007910:	d130      	bne.n	8007974 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007918:	2200      	movs	r2, #0
 800791a:	2180      	movs	r1, #128	@ 0x80
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f933 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e04d      	b.n	80079c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007930:	b29b      	uxth	r3, r3
 8007932:	2bff      	cmp	r3, #255	@ 0xff
 8007934:	d90e      	bls.n	8007954 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	22ff      	movs	r2, #255	@ 0xff
 800793a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007940:	b2da      	uxtb	r2, r3
 8007942:	8979      	ldrh	r1, [r7, #10]
 8007944:	2300      	movs	r3, #0
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 fadf 	bl	8007f10 <I2C_TransferConfig>
 8007952:	e00f      	b.n	8007974 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007958:	b29a      	uxth	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007962:	b2da      	uxtb	r2, r3
 8007964:	8979      	ldrh	r1, [r7, #10]
 8007966:	2300      	movs	r3, #0
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 face 	bl	8007f10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d19a      	bne.n	80078b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f9a0 	bl	8007cc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e01a      	b.n	80079c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2220      	movs	r2, #32
 8007998:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6859      	ldr	r1, [r3, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	4b0b      	ldr	r3, [pc, #44]	@ (80079d4 <HAL_I2C_Mem_Read+0x230>)
 80079a6:	400b      	ands	r3, r1
 80079a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	e000      	b.n	80079c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80079c6:	2302      	movs	r3, #2
  }
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	80002400 	.word	0x80002400
 80079d4:	fe00e800 	.word	0xfe00e800

080079d8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	461a      	mov	r2, r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	817b      	strh	r3, [r7, #10]
 8007a02:	460b      	mov	r3, r1
 8007a04:	813b      	strh	r3, [r7, #8]
 8007a06:	4613      	mov	r3, r2
 8007a08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	8979      	ldrh	r1, [r7, #10]
 8007a10:	4b20      	ldr	r3, [pc, #128]	@ (8007a94 <I2C_RequestMemoryWrite+0xa4>)
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 fa79 	bl	8007f10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	69b9      	ldr	r1, [r7, #24]
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 f909 	bl	8007c3a <I2C_WaitOnTXISFlagUntilTimeout>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e02c      	b.n	8007a8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d105      	bne.n	8007a44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a38:	893b      	ldrh	r3, [r7, #8]
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a42:	e015      	b.n	8007a70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a44:	893b      	ldrh	r3, [r7, #8]
 8007a46:	0a1b      	lsrs	r3, r3, #8
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	69b9      	ldr	r1, [r7, #24]
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 f8ef 	bl	8007c3a <I2C_WaitOnTXISFlagUntilTimeout>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e012      	b.n	8007a8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a66:	893b      	ldrh	r3, [r7, #8]
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	2200      	movs	r2, #0
 8007a78:	2180      	movs	r1, #128	@ 0x80
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f884 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	80002000 	.word	0x80002000

08007a98 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	4611      	mov	r1, r2
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	817b      	strh	r3, [r7, #10]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	813b      	strh	r3, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	8979      	ldrh	r1, [r7, #10]
 8007ab8:	4b20      	ldr	r3, [pc, #128]	@ (8007b3c <I2C_RequestMemoryRead+0xa4>)
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	2300      	movs	r3, #0
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 fa26 	bl	8007f10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ac4:	69fa      	ldr	r2, [r7, #28]
 8007ac6:	69b9      	ldr	r1, [r7, #24]
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f8b6 	bl	8007c3a <I2C_WaitOnTXISFlagUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e02c      	b.n	8007b32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ad8:	88fb      	ldrh	r3, [r7, #6]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d105      	bne.n	8007aea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ade:	893b      	ldrh	r3, [r7, #8]
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ae8:	e015      	b.n	8007b16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007aea:	893b      	ldrh	r3, [r7, #8]
 8007aec:	0a1b      	lsrs	r3, r3, #8
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	69b9      	ldr	r1, [r7, #24]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f89c 	bl	8007c3a <I2C_WaitOnTXISFlagUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e012      	b.n	8007b32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b0c:	893b      	ldrh	r3, [r7, #8]
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2140      	movs	r1, #64	@ 0x40
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 f831 	bl	8007b88 <I2C_WaitOnFlagUntilTimeout>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e000      	b.n	8007b32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	80002000 	.word	0x80002000

08007b40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d103      	bne.n	8007b5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d007      	beq.n	8007b7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699a      	ldr	r2, [r3, #24]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	619a      	str	r2, [r3, #24]
  }
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	4613      	mov	r3, r2
 8007b96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b98:	e03b      	b.n	8007c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 f8d6 	bl	8007d50 <I2C_IsErrorOccurred>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e041      	b.n	8007c32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bb4:	d02d      	beq.n	8007c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb6:	f7fc fdf1 	bl	800479c <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d302      	bcc.n	8007bcc <I2C_WaitOnFlagUntilTimeout+0x44>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d122      	bne.n	8007c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	bf0c      	ite	eq
 8007bdc:	2301      	moveq	r3, #1
 8007bde:	2300      	movne	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	461a      	mov	r2, r3
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d113      	bne.n	8007c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bee:	f043 0220 	orr.w	r2, r3, #32
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e00f      	b.n	8007c32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	699a      	ldr	r2, [r3, #24]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	bf0c      	ite	eq
 8007c22:	2301      	moveq	r3, #1
 8007c24:	2300      	movne	r3, #0
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d0b4      	beq.n	8007b9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c46:	e033      	b.n	8007cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f87f 	bl	8007d50 <I2C_IsErrorOccurred>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e031      	b.n	8007cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c62:	d025      	beq.n	8007cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c64:	f7fc fd9a 	bl	800479c <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d302      	bcc.n	8007c7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d11a      	bne.n	8007cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d013      	beq.n	8007cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c8c:	f043 0220 	orr.w	r2, r3, #32
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e007      	b.n	8007cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d1c4      	bne.n	8007c48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cd4:	e02f      	b.n	8007d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 f838 	bl	8007d50 <I2C_IsErrorOccurred>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e02d      	b.n	8007d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cea:	f7fc fd57 	bl	800479c <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d302      	bcc.n	8007d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d11a      	bne.n	8007d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d013      	beq.n	8007d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d12:	f043 0220 	orr.w	r2, r3, #32
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e007      	b.n	8007d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	f003 0320 	and.w	r3, r3, #32
 8007d40:	2b20      	cmp	r3, #32
 8007d42:	d1c8      	bne.n	8007cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	@ 0x28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d068      	beq.n	8007e4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2210      	movs	r2, #16
 8007d82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d84:	e049      	b.n	8007e1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d8c:	d045      	beq.n	8007e1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d8e:	f7fc fd05 	bl	800479c <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d302      	bcc.n	8007da4 <I2C_IsErrorOccurred+0x54>
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d13a      	bne.n	8007e1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007db6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dc6:	d121      	bne.n	8007e0c <I2C_IsErrorOccurred+0xbc>
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dce:	d01d      	beq.n	8007e0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007dd0:	7cfb      	ldrb	r3, [r7, #19]
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	d01a      	beq.n	8007e0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007de4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007de6:	f7fc fcd9 	bl	800479c <HAL_GetTick>
 8007dea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dec:	e00e      	b.n	8007e0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007dee:	f7fc fcd5 	bl	800479c <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	2b19      	cmp	r3, #25
 8007dfa:	d907      	bls.n	8007e0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	f043 0320 	orr.w	r3, r3, #32
 8007e02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007e0a:	e006      	b.n	8007e1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	d1e9      	bne.n	8007dee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	f003 0320 	and.w	r3, r3, #32
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	d003      	beq.n	8007e30 <I2C_IsErrorOccurred+0xe0>
 8007e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0aa      	beq.n	8007d86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d103      	bne.n	8007e40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	f043 0304 	orr.w	r3, r3, #4
 8007e46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00b      	beq.n	8007e78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	f043 0301 	orr.w	r3, r3, #1
 8007e66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00b      	beq.n	8007e9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	f043 0308 	orr.w	r3, r3, #8
 8007e88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007e92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	f043 0302 	orr.w	r3, r3, #2
 8007eaa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007eb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d01c      	beq.n	8007efe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff fe3b 	bl	8007b40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6859      	ldr	r1, [r3, #4]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8007f0c <I2C_IsErrorOccurred+0x1bc>)
 8007ed6:	400b      	ands	r3, r1
 8007ed8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007efe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3728      	adds	r7, #40	@ 0x28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	fe00e800 	.word	0xfe00e800

08007f10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	607b      	str	r3, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	817b      	strh	r3, [r7, #10]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f22:	897b      	ldrh	r3, [r7, #10]
 8007f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f28:	7a7b      	ldrb	r3, [r7, #9]
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	0d5b      	lsrs	r3, r3, #21
 8007f4a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007f4e:	4b08      	ldr	r3, [pc, #32]	@ (8007f70 <I2C_TransferConfig+0x60>)
 8007f50:	430b      	orrs	r3, r1
 8007f52:	43db      	mvns	r3, r3
 8007f54:	ea02 0103 	and.w	r1, r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007f62:	bf00      	nop
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	03ff63ff 	.word	0x03ff63ff

08007f74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	d138      	bne.n	8007ffc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e032      	b.n	8007ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2224      	movs	r2, #36	@ 0x24
 8007fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0201 	bic.w	r2, r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007fc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6819      	ldr	r1, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0201 	orr.w	r2, r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e000      	b.n	8007ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
  }
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800800a:	b480      	push	{r7}
 800800c:	b085      	sub	sp, #20
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b20      	cmp	r3, #32
 800801e:	d139      	bne.n	8008094 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008026:	2b01      	cmp	r3, #1
 8008028:	d101      	bne.n	800802e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800802a:	2302      	movs	r3, #2
 800802c:	e033      	b.n	8008096 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2224      	movs	r2, #36	@ 0x24
 800803a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0201 	bic.w	r2, r2, #1
 800804c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800805c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	021b      	lsls	r3, r3, #8
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f042 0201 	orr.w	r2, r2, #1
 800807e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2220      	movs	r2, #32
 8008084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	e000      	b.n	8008096 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008094:	2302      	movs	r3, #2
  }
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e041      	b.n	8008138 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80080bc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f245 5255 	movw	r2, #21845	@ 0x5555
 80080c6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6852      	ldr	r2, [r2, #4]
 80080d0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6892      	ldr	r2, [r2, #8]
 80080da:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80080dc:	f7fc fb5e 	bl	800479c <HAL_GetTick>
 80080e0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80080e2:	e00f      	b.n	8008104 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80080e4:	f7fc fb5a 	bl	800479c <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b31      	cmp	r3, #49	@ 0x31
 80080f0:	d908      	bls.n	8008104 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e019      	b.n	8008138 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e8      	bne.n	80080e4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	691a      	ldr	r2, [r3, #16]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	429a      	cmp	r2, r3
 800811e:	d005      	beq.n	800812c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	68d2      	ldr	r2, [r2, #12]
 8008128:	611a      	str	r2, [r3, #16]
 800812a:	e004      	b.n	8008136 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8008134:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8008150:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d141      	bne.n	80081f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800816e:	4b4b      	ldr	r3, [pc, #300]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800817a:	d131      	bne.n	80081e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800817c:	4b47      	ldr	r3, [pc, #284]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800817e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008182:	4a46      	ldr	r2, [pc, #280]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008188:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800818c:	4b43      	ldr	r3, [pc, #268]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008194:	4a41      	ldr	r2, [pc, #260]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008196:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800819a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800819c:	4b40      	ldr	r3, [pc, #256]	@ (80082a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2232      	movs	r2, #50	@ 0x32
 80081a2:	fb02 f303 	mul.w	r3, r2, r3
 80081a6:	4a3f      	ldr	r2, [pc, #252]	@ (80082a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80081a8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ac:	0c9b      	lsrs	r3, r3, #18
 80081ae:	3301      	adds	r3, #1
 80081b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081b2:	e002      	b.n	80081ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081ba:	4b38      	ldr	r3, [pc, #224]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081c6:	d102      	bne.n	80081ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f2      	bne.n	80081b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80081ce:	4b33      	ldr	r3, [pc, #204]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081da:	d158      	bne.n	800828e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e057      	b.n	8008290 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081e0:	4b2e      	ldr	r3, [pc, #184]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081e6:	4a2d      	ldr	r2, [pc, #180]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80081f0:	e04d      	b.n	800828e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f8:	d141      	bne.n	800827e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80081fa:	4b28      	ldr	r3, [pc, #160]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008206:	d131      	bne.n	800826c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008208:	4b24      	ldr	r3, [pc, #144]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800820a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800820e:	4a23      	ldr	r2, [pc, #140]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008214:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008218:	4b20      	ldr	r3, [pc, #128]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008220:	4a1e      	ldr	r2, [pc, #120]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008222:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008226:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008228:	4b1d      	ldr	r3, [pc, #116]	@ (80082a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2232      	movs	r2, #50	@ 0x32
 800822e:	fb02 f303 	mul.w	r3, r2, r3
 8008232:	4a1c      	ldr	r2, [pc, #112]	@ (80082a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008234:	fba2 2303 	umull	r2, r3, r2, r3
 8008238:	0c9b      	lsrs	r3, r3, #18
 800823a:	3301      	adds	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800823e:	e002      	b.n	8008246 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3b01      	subs	r3, #1
 8008244:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008246:	4b15      	ldr	r3, [pc, #84]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800824e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008252:	d102      	bne.n	800825a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1f2      	bne.n	8008240 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800825a:	4b10      	ldr	r3, [pc, #64]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008266:	d112      	bne.n	800828e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e011      	b.n	8008290 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800826c:	4b0b      	ldr	r3, [pc, #44]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800826e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008272:	4a0a      	ldr	r2, [pc, #40]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008278:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800827c:	e007      	b.n	800828e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800827e:	4b07      	ldr	r3, [pc, #28]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008286:	4a05      	ldr	r2, [pc, #20]	@ (800829c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008288:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800828c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	40007000 	.word	0x40007000
 80082a0:	20000004 	.word	0x20000004
 80082a4:	431bde83 	.word	0x431bde83

080082a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80082a8:	b480      	push	{r7}
 80082aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80082ac:	4b05      	ldr	r3, [pc, #20]	@ (80082c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	4a04      	ldr	r2, [pc, #16]	@ (80082c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80082b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80082b6:	6093      	str	r3, [r2, #8]
}
 80082b8:	bf00      	nop
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	40007000 	.word	0x40007000

080082c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e2fe      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d075      	beq.n	80083d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082e6:	4b97      	ldr	r3, [pc, #604]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f003 030c 	and.w	r3, r3, #12
 80082ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082f0:	4b94      	ldr	r3, [pc, #592]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f003 0303 	and.w	r3, r3, #3
 80082f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b0c      	cmp	r3, #12
 80082fe:	d102      	bne.n	8008306 <HAL_RCC_OscConfig+0x3e>
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2b03      	cmp	r3, #3
 8008304:	d002      	beq.n	800830c <HAL_RCC_OscConfig+0x44>
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	2b08      	cmp	r3, #8
 800830a:	d10b      	bne.n	8008324 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800830c:	4b8d      	ldr	r3, [pc, #564]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d05b      	beq.n	80083d0 <HAL_RCC_OscConfig+0x108>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d157      	bne.n	80083d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e2d9      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800832c:	d106      	bne.n	800833c <HAL_RCC_OscConfig+0x74>
 800832e:	4b85      	ldr	r3, [pc, #532]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a84      	ldr	r2, [pc, #528]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	e01d      	b.n	8008378 <HAL_RCC_OscConfig+0xb0>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008344:	d10c      	bne.n	8008360 <HAL_RCC_OscConfig+0x98>
 8008346:	4b7f      	ldr	r3, [pc, #508]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a7e      	ldr	r2, [pc, #504]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 800834c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008350:	6013      	str	r3, [r2, #0]
 8008352:	4b7c      	ldr	r3, [pc, #496]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a7b      	ldr	r2, [pc, #492]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	e00b      	b.n	8008378 <HAL_RCC_OscConfig+0xb0>
 8008360:	4b78      	ldr	r3, [pc, #480]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a77      	ldr	r2, [pc, #476]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	4b75      	ldr	r3, [pc, #468]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a74      	ldr	r2, [pc, #464]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d013      	beq.n	80083a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008380:	f7fc fa0c 	bl	800479c <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008388:	f7fc fa08 	bl	800479c <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b64      	cmp	r3, #100	@ 0x64
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e29e      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800839a:	4b6a      	ldr	r3, [pc, #424]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0f0      	beq.n	8008388 <HAL_RCC_OscConfig+0xc0>
 80083a6:	e014      	b.n	80083d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a8:	f7fc f9f8 	bl	800479c <HAL_GetTick>
 80083ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083ae:	e008      	b.n	80083c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083b0:	f7fc f9f4 	bl	800479c <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b64      	cmp	r3, #100	@ 0x64
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e28a      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083c2:	4b60      	ldr	r3, [pc, #384]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1f0      	bne.n	80083b0 <HAL_RCC_OscConfig+0xe8>
 80083ce:	e000      	b.n	80083d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d075      	beq.n	80084ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083de:	4b59      	ldr	r3, [pc, #356]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 030c 	and.w	r3, r3, #12
 80083e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083e8:	4b56      	ldr	r3, [pc, #344]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f003 0303 	and.w	r3, r3, #3
 80083f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	2b0c      	cmp	r3, #12
 80083f6:	d102      	bne.n	80083fe <HAL_RCC_OscConfig+0x136>
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d002      	beq.n	8008404 <HAL_RCC_OscConfig+0x13c>
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	2b04      	cmp	r3, #4
 8008402:	d11f      	bne.n	8008444 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008404:	4b4f      	ldr	r3, [pc, #316]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_RCC_OscConfig+0x154>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e25d      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800841c:	4b49      	ldr	r3, [pc, #292]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	061b      	lsls	r3, r3, #24
 800842a:	4946      	ldr	r1, [pc, #280]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 800842c:	4313      	orrs	r3, r2
 800842e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008430:	4b45      	ldr	r3, [pc, #276]	@ (8008548 <HAL_RCC_OscConfig+0x280>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4618      	mov	r0, r3
 8008436:	f7fb fe01 	bl	800403c <HAL_InitTick>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d043      	beq.n	80084c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e249      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d023      	beq.n	8008494 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800844c:	4b3d      	ldr	r3, [pc, #244]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a3c      	ldr	r2, [pc, #240]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008458:	f7fc f9a0 	bl	800479c <HAL_GetTick>
 800845c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008460:	f7fc f99c 	bl	800479c <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e232      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008472:	4b34      	ldr	r3, [pc, #208]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0f0      	beq.n	8008460 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800847e:	4b31      	ldr	r3, [pc, #196]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	061b      	lsls	r3, r3, #24
 800848c:	492d      	ldr	r1, [pc, #180]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 800848e:	4313      	orrs	r3, r2
 8008490:	604b      	str	r3, [r1, #4]
 8008492:	e01a      	b.n	80084ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008494:	4b2b      	ldr	r3, [pc, #172]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a2a      	ldr	r2, [pc, #168]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 800849a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800849e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a0:	f7fc f97c 	bl	800479c <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084a8:	f7fc f978 	bl	800479c <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e20e      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084ba:	4b22      	ldr	r3, [pc, #136]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1f0      	bne.n	80084a8 <HAL_RCC_OscConfig+0x1e0>
 80084c6:	e000      	b.n	80084ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d041      	beq.n	800855a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d01c      	beq.n	8008518 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084de:	4b19      	ldr	r3, [pc, #100]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 80084e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084e4:	4a17      	ldr	r2, [pc, #92]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 80084e6:	f043 0301 	orr.w	r3, r3, #1
 80084ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ee:	f7fc f955 	bl	800479c <HAL_GetTick>
 80084f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084f4:	e008      	b.n	8008508 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084f6:	f7fc f951 	bl	800479c <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e1e7      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008508:	4b0e      	ldr	r3, [pc, #56]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 800850a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0ef      	beq.n	80084f6 <HAL_RCC_OscConfig+0x22e>
 8008516:	e020      	b.n	800855a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008518:	4b0a      	ldr	r3, [pc, #40]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 800851a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800851e:	4a09      	ldr	r2, [pc, #36]	@ (8008544 <HAL_RCC_OscConfig+0x27c>)
 8008520:	f023 0301 	bic.w	r3, r3, #1
 8008524:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008528:	f7fc f938 	bl	800479c <HAL_GetTick>
 800852c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800852e:	e00d      	b.n	800854c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008530:	f7fc f934 	bl	800479c <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b02      	cmp	r3, #2
 800853c:	d906      	bls.n	800854c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e1ca      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
 8008542:	bf00      	nop
 8008544:	40021000 	.word	0x40021000
 8008548:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800854c:	4b8c      	ldr	r3, [pc, #560]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 800854e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1ea      	bne.n	8008530 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0304 	and.w	r3, r3, #4
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 80a6 	beq.w	80086b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008568:	2300      	movs	r3, #0
 800856a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800856c:	4b84      	ldr	r3, [pc, #528]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 800856e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <HAL_RCC_OscConfig+0x2b4>
 8008578:	2301      	movs	r3, #1
 800857a:	e000      	b.n	800857e <HAL_RCC_OscConfig+0x2b6>
 800857c:	2300      	movs	r3, #0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00d      	beq.n	800859e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008582:	4b7f      	ldr	r3, [pc, #508]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008586:	4a7e      	ldr	r2, [pc, #504]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800858c:	6593      	str	r3, [r2, #88]	@ 0x58
 800858e:	4b7c      	ldr	r3, [pc, #496]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800859a:	2301      	movs	r3, #1
 800859c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800859e:	4b79      	ldr	r3, [pc, #484]	@ (8008784 <HAL_RCC_OscConfig+0x4bc>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d118      	bne.n	80085dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085aa:	4b76      	ldr	r3, [pc, #472]	@ (8008784 <HAL_RCC_OscConfig+0x4bc>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a75      	ldr	r2, [pc, #468]	@ (8008784 <HAL_RCC_OscConfig+0x4bc>)
 80085b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085b6:	f7fc f8f1 	bl	800479c <HAL_GetTick>
 80085ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085bc:	e008      	b.n	80085d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085be:	f7fc f8ed 	bl	800479c <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d901      	bls.n	80085d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e183      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085d0:	4b6c      	ldr	r3, [pc, #432]	@ (8008784 <HAL_RCC_OscConfig+0x4bc>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0f0      	beq.n	80085be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d108      	bne.n	80085f6 <HAL_RCC_OscConfig+0x32e>
 80085e4:	4b66      	ldr	r3, [pc, #408]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 80085e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ea:	4a65      	ldr	r2, [pc, #404]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 80085ec:	f043 0301 	orr.w	r3, r3, #1
 80085f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80085f4:	e024      	b.n	8008640 <HAL_RCC_OscConfig+0x378>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	2b05      	cmp	r3, #5
 80085fc:	d110      	bne.n	8008620 <HAL_RCC_OscConfig+0x358>
 80085fe:	4b60      	ldr	r3, [pc, #384]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008604:	4a5e      	ldr	r2, [pc, #376]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008606:	f043 0304 	orr.w	r3, r3, #4
 800860a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800860e:	4b5c      	ldr	r3, [pc, #368]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008614:	4a5a      	ldr	r2, [pc, #360]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008616:	f043 0301 	orr.w	r3, r3, #1
 800861a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800861e:	e00f      	b.n	8008640 <HAL_RCC_OscConfig+0x378>
 8008620:	4b57      	ldr	r3, [pc, #348]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008626:	4a56      	ldr	r2, [pc, #344]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008628:	f023 0301 	bic.w	r3, r3, #1
 800862c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008630:	4b53      	ldr	r3, [pc, #332]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008636:	4a52      	ldr	r2, [pc, #328]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008638:	f023 0304 	bic.w	r3, r3, #4
 800863c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d016      	beq.n	8008676 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008648:	f7fc f8a8 	bl	800479c <HAL_GetTick>
 800864c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800864e:	e00a      	b.n	8008666 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008650:	f7fc f8a4 	bl	800479c <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800865e:	4293      	cmp	r3, r2
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e138      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008666:	4b46      	ldr	r3, [pc, #280]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866c:	f003 0302 	and.w	r3, r3, #2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0ed      	beq.n	8008650 <HAL_RCC_OscConfig+0x388>
 8008674:	e015      	b.n	80086a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008676:	f7fc f891 	bl	800479c <HAL_GetTick>
 800867a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800867c:	e00a      	b.n	8008694 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800867e:	f7fc f88d 	bl	800479c <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800868c:	4293      	cmp	r3, r2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e121      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008694:	4b3a      	ldr	r3, [pc, #232]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1ed      	bne.n	800867e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80086a2:	7ffb      	ldrb	r3, [r7, #31]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d105      	bne.n	80086b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086a8:	4b35      	ldr	r3, [pc, #212]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 80086aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ac:	4a34      	ldr	r2, [pc, #208]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 80086ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0320 	and.w	r3, r3, #32
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d03c      	beq.n	800873a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d01c      	beq.n	8008702 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 80086ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d8:	f7fc f860 	bl	800479c <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086de:	e008      	b.n	80086f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086e0:	f7fc f85c 	bl	800479c <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e0f2      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086f2:	4b23      	ldr	r3, [pc, #140]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 80086f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0ef      	beq.n	80086e0 <HAL_RCC_OscConfig+0x418>
 8008700:	e01b      	b.n	800873a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008702:	4b1f      	ldr	r3, [pc, #124]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008704:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008708:	4a1d      	ldr	r2, [pc, #116]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 800870a:	f023 0301 	bic.w	r3, r3, #1
 800870e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008712:	f7fc f843 	bl	800479c <HAL_GetTick>
 8008716:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008718:	e008      	b.n	800872c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800871a:	f7fc f83f 	bl	800479c <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	2b02      	cmp	r3, #2
 8008726:	d901      	bls.n	800872c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e0d5      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800872c:	4b14      	ldr	r3, [pc, #80]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 800872e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1ef      	bne.n	800871a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 80c9 	beq.w	80088d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008744:	4b0e      	ldr	r3, [pc, #56]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f003 030c 	and.w	r3, r3, #12
 800874c:	2b0c      	cmp	r3, #12
 800874e:	f000 8083 	beq.w	8008858 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	2b02      	cmp	r3, #2
 8008758:	d15e      	bne.n	8008818 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800875a:	4b09      	ldr	r3, [pc, #36]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a08      	ldr	r2, [pc, #32]	@ (8008780 <HAL_RCC_OscConfig+0x4b8>)
 8008760:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008766:	f7fc f819 	bl	800479c <HAL_GetTick>
 800876a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800876c:	e00c      	b.n	8008788 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800876e:	f7fc f815 	bl	800479c <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	d905      	bls.n	8008788 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e0ab      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
 8008780:	40021000 	.word	0x40021000
 8008784:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008788:	4b55      	ldr	r3, [pc, #340]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1ec      	bne.n	800876e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008794:	4b52      	ldr	r3, [pc, #328]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 8008796:	68da      	ldr	r2, [r3, #12]
 8008798:	4b52      	ldr	r3, [pc, #328]	@ (80088e4 <HAL_RCC_OscConfig+0x61c>)
 800879a:	4013      	ands	r3, r2
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6a11      	ldr	r1, [r2, #32]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80087a4:	3a01      	subs	r2, #1
 80087a6:	0112      	lsls	r2, r2, #4
 80087a8:	4311      	orrs	r1, r2
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80087ae:	0212      	lsls	r2, r2, #8
 80087b0:	4311      	orrs	r1, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80087b6:	0852      	lsrs	r2, r2, #1
 80087b8:	3a01      	subs	r2, #1
 80087ba:	0552      	lsls	r2, r2, #21
 80087bc:	4311      	orrs	r1, r2
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80087c2:	0852      	lsrs	r2, r2, #1
 80087c4:	3a01      	subs	r2, #1
 80087c6:	0652      	lsls	r2, r2, #25
 80087c8:	4311      	orrs	r1, r2
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80087ce:	06d2      	lsls	r2, r2, #27
 80087d0:	430a      	orrs	r2, r1
 80087d2:	4943      	ldr	r1, [pc, #268]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087d8:	4b41      	ldr	r3, [pc, #260]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a40      	ldr	r2, [pc, #256]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 80087de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087e4:	4b3e      	ldr	r3, [pc, #248]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	4a3d      	ldr	r2, [pc, #244]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 80087ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f0:	f7fb ffd4 	bl	800479c <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087f8:	f7fb ffd0 	bl	800479c <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e066      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800880a:	4b35      	ldr	r3, [pc, #212]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0x530>
 8008816:	e05e      	b.n	80088d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008818:	4b31      	ldr	r3, [pc, #196]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a30      	ldr	r2, [pc, #192]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 800881e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008824:	f7fb ffba 	bl	800479c <HAL_GetTick>
 8008828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800882a:	e008      	b.n	800883e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800882c:	f7fb ffb6 	bl	800479c <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d901      	bls.n	800883e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e04c      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800883e:	4b28      	ldr	r3, [pc, #160]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1f0      	bne.n	800882c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800884a:	4b25      	ldr	r3, [pc, #148]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	4924      	ldr	r1, [pc, #144]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 8008850:	4b25      	ldr	r3, [pc, #148]	@ (80088e8 <HAL_RCC_OscConfig+0x620>)
 8008852:	4013      	ands	r3, r2
 8008854:	60cb      	str	r3, [r1, #12]
 8008856:	e03e      	b.n	80088d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e039      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008864:	4b1e      	ldr	r3, [pc, #120]	@ (80088e0 <HAL_RCC_OscConfig+0x618>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f003 0203 	and.w	r2, r3, #3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	429a      	cmp	r2, r3
 8008876:	d12c      	bne.n	80088d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008882:	3b01      	subs	r3, #1
 8008884:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008886:	429a      	cmp	r2, r3
 8008888:	d123      	bne.n	80088d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008894:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008896:	429a      	cmp	r2, r3
 8008898:	d11b      	bne.n	80088d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d113      	bne.n	80088d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b4:	085b      	lsrs	r3, r3, #1
 80088b6:	3b01      	subs	r3, #1
 80088b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d109      	bne.n	80088d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	3b01      	subs	r3, #1
 80088cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d001      	beq.n	80088d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e000      	b.n	80088d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3720      	adds	r7, #32
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	40021000 	.word	0x40021000
 80088e4:	019f800c 	.word	0x019f800c
 80088e8:	feeefffc 	.word	0xfeeefffc

080088ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80088f6:	2300      	movs	r3, #0
 80088f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e11e      	b.n	8008b42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008904:	4b91      	ldr	r3, [pc, #580]	@ (8008b4c <HAL_RCC_ClockConfig+0x260>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 030f 	and.w	r3, r3, #15
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	429a      	cmp	r2, r3
 8008910:	d910      	bls.n	8008934 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008912:	4b8e      	ldr	r3, [pc, #568]	@ (8008b4c <HAL_RCC_ClockConfig+0x260>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f023 020f 	bic.w	r2, r3, #15
 800891a:	498c      	ldr	r1, [pc, #560]	@ (8008b4c <HAL_RCC_ClockConfig+0x260>)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	4313      	orrs	r3, r2
 8008920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008922:	4b8a      	ldr	r3, [pc, #552]	@ (8008b4c <HAL_RCC_ClockConfig+0x260>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 030f 	and.w	r3, r3, #15
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	429a      	cmp	r2, r3
 800892e:	d001      	beq.n	8008934 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e106      	b.n	8008b42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	2b00      	cmp	r3, #0
 800893e:	d073      	beq.n	8008a28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	2b03      	cmp	r3, #3
 8008946:	d129      	bne.n	800899c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008948:	4b81      	ldr	r3, [pc, #516]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e0f4      	b.n	8008b42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008958:	f000 f9d0 	bl	8008cfc <RCC_GetSysClockFreqFromPLLSource>
 800895c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	4a7c      	ldr	r2, [pc, #496]	@ (8008b54 <HAL_RCC_ClockConfig+0x268>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d93f      	bls.n	80089e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008966:	4b7a      	ldr	r3, [pc, #488]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d009      	beq.n	8008986 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800897a:	2b00      	cmp	r3, #0
 800897c:	d033      	beq.n	80089e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008982:	2b00      	cmp	r3, #0
 8008984:	d12f      	bne.n	80089e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008986:	4b72      	ldr	r3, [pc, #456]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800898e:	4a70      	ldr	r2, [pc, #448]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008994:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008996:	2380      	movs	r3, #128	@ 0x80
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	e024      	b.n	80089e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d107      	bne.n	80089b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089a4:	4b6a      	ldr	r3, [pc, #424]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d109      	bne.n	80089c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e0c6      	b.n	8008b42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089b4:	4b66      	ldr	r3, [pc, #408]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e0be      	b.n	8008b42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80089c4:	f000 f8ce 	bl	8008b64 <HAL_RCC_GetSysClockFreq>
 80089c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	4a61      	ldr	r2, [pc, #388]	@ (8008b54 <HAL_RCC_ClockConfig+0x268>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d909      	bls.n	80089e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80089d2:	4b5f      	ldr	r3, [pc, #380]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089da:	4a5d      	ldr	r2, [pc, #372]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 80089dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80089e2:	2380      	movs	r3, #128	@ 0x80
 80089e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089e6:	4b5a      	ldr	r3, [pc, #360]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f023 0203 	bic.w	r2, r3, #3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	4957      	ldr	r1, [pc, #348]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089f8:	f7fb fed0 	bl	800479c <HAL_GetTick>
 80089fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089fe:	e00a      	b.n	8008a16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a00:	f7fb fecc 	bl	800479c <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e095      	b.n	8008b42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a16:	4b4e      	ldr	r3, [pc, #312]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f003 020c 	and.w	r2, r3, #12
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d1eb      	bne.n	8008a00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0302 	and.w	r3, r3, #2
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d023      	beq.n	8008a7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a40:	4b43      	ldr	r3, [pc, #268]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	4a42      	ldr	r2, [pc, #264]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008a46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008a4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d007      	beq.n	8008a68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008a58:	4b3d      	ldr	r3, [pc, #244]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a60:	4a3b      	ldr	r2, [pc, #236]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008a62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008a66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a68:	4b39      	ldr	r3, [pc, #228]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	4936      	ldr	r1, [pc, #216]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	608b      	str	r3, [r1, #8]
 8008a7a:	e008      	b.n	8008a8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2b80      	cmp	r3, #128	@ 0x80
 8008a80:	d105      	bne.n	8008a8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008a82:	4b33      	ldr	r3, [pc, #204]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	4a32      	ldr	r2, [pc, #200]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008a88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8008b4c <HAL_RCC_ClockConfig+0x260>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d21d      	bcs.n	8008ad8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8008b4c <HAL_RCC_ClockConfig+0x260>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f023 020f 	bic.w	r2, r3, #15
 8008aa4:	4929      	ldr	r1, [pc, #164]	@ (8008b4c <HAL_RCC_ClockConfig+0x260>)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008aac:	f7fb fe76 	bl	800479c <HAL_GetTick>
 8008ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ab2:	e00a      	b.n	8008aca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ab4:	f7fb fe72 	bl	800479c <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d901      	bls.n	8008aca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e03b      	b.n	8008b42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aca:	4b20      	ldr	r3, [pc, #128]	@ (8008b4c <HAL_RCC_ClockConfig+0x260>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 030f 	and.w	r3, r3, #15
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d1ed      	bne.n	8008ab4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d008      	beq.n	8008af6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	4917      	ldr	r1, [pc, #92]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0308 	and.w	r3, r3, #8
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d009      	beq.n	8008b16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b02:	4b13      	ldr	r3, [pc, #76]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	490f      	ldr	r1, [pc, #60]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b16:	f000 f825 	bl	8008b64 <HAL_RCC_GetSysClockFreq>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b50 <HAL_RCC_ClockConfig+0x264>)
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	091b      	lsrs	r3, r3, #4
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	490c      	ldr	r1, [pc, #48]	@ (8008b58 <HAL_RCC_ClockConfig+0x26c>)
 8008b28:	5ccb      	ldrb	r3, [r1, r3]
 8008b2a:	f003 031f 	and.w	r3, r3, #31
 8008b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b32:	4a0a      	ldr	r2, [pc, #40]	@ (8008b5c <HAL_RCC_ClockConfig+0x270>)
 8008b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008b36:	4b0a      	ldr	r3, [pc, #40]	@ (8008b60 <HAL_RCC_ClockConfig+0x274>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fb fa7e 	bl	800403c <HAL_InitTick>
 8008b40:	4603      	mov	r3, r0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	40022000 	.word	0x40022000
 8008b50:	40021000 	.word	0x40021000
 8008b54:	04c4b400 	.word	0x04c4b400
 8008b58:	0801f814 	.word	0x0801f814
 8008b5c:	20000004 	.word	0x20000004
 8008b60:	20000008 	.word	0x20000008

08008b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f003 030c 	and.w	r3, r3, #12
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d102      	bne.n	8008b7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008b76:	4b2a      	ldr	r3, [pc, #168]	@ (8008c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008b78:	613b      	str	r3, [r7, #16]
 8008b7a:	e047      	b.n	8008c0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008b7c:	4b27      	ldr	r3, [pc, #156]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f003 030c 	and.w	r3, r3, #12
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d102      	bne.n	8008b8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b88:	4b26      	ldr	r3, [pc, #152]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008b8a:	613b      	str	r3, [r7, #16]
 8008b8c:	e03e      	b.n	8008c0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008b8e:	4b23      	ldr	r3, [pc, #140]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 030c 	and.w	r3, r3, #12
 8008b96:	2b0c      	cmp	r3, #12
 8008b98:	d136      	bne.n	8008c08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b9a:	4b20      	ldr	r3, [pc, #128]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	091b      	lsrs	r3, r3, #4
 8008baa:	f003 030f 	and.w	r3, r3, #15
 8008bae:	3301      	adds	r3, #1
 8008bb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d10c      	bne.n	8008bd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc0:	4a16      	ldr	r2, [pc, #88]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bc2:	68d2      	ldr	r2, [r2, #12]
 8008bc4:	0a12      	lsrs	r2, r2, #8
 8008bc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008bca:	fb02 f303 	mul.w	r3, r2, r3
 8008bce:	617b      	str	r3, [r7, #20]
      break;
 8008bd0:	e00c      	b.n	8008bec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008bd2:	4a13      	ldr	r2, [pc, #76]	@ (8008c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bda:	4a10      	ldr	r2, [pc, #64]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bdc:	68d2      	ldr	r2, [r2, #12]
 8008bde:	0a12      	lsrs	r2, r2, #8
 8008be0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008be4:	fb02 f303 	mul.w	r3, r2, r3
 8008be8:	617b      	str	r3, [r7, #20]
      break;
 8008bea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008bec:	4b0b      	ldr	r3, [pc, #44]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	0e5b      	lsrs	r3, r3, #25
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c04:	613b      	str	r3, [r7, #16]
 8008c06:	e001      	b.n	8008c0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008c0c:	693b      	ldr	r3, [r7, #16]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	40021000 	.word	0x40021000
 8008c20:	00f42400 	.word	0x00f42400
 8008c24:	016e3600 	.word	0x016e3600

08008c28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c2c:	4b03      	ldr	r3, [pc, #12]	@ (8008c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	20000004 	.word	0x20000004

08008c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008c44:	f7ff fff0 	bl	8008c28 <HAL_RCC_GetHCLKFreq>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	f003 0307 	and.w	r3, r3, #7
 8008c54:	4904      	ldr	r1, [pc, #16]	@ (8008c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c56:	5ccb      	ldrb	r3, [r1, r3]
 8008c58:	f003 031f 	and.w	r3, r3, #31
 8008c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	40021000 	.word	0x40021000
 8008c68:	0801f824 	.word	0x0801f824

08008c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008c70:	f7ff ffda 	bl	8008c28 <HAL_RCC_GetHCLKFreq>
 8008c74:	4602      	mov	r2, r0
 8008c76:	4b06      	ldr	r3, [pc, #24]	@ (8008c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	0adb      	lsrs	r3, r3, #11
 8008c7c:	f003 0307 	and.w	r3, r3, #7
 8008c80:	4904      	ldr	r1, [pc, #16]	@ (8008c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c82:	5ccb      	ldrb	r3, [r1, r3]
 8008c84:	f003 031f 	and.w	r3, r3, #31
 8008c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	40021000 	.word	0x40021000
 8008c94:	0801f824 	.word	0x0801f824

08008c98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	220f      	movs	r2, #15
 8008ca6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008ca8:	4b12      	ldr	r3, [pc, #72]	@ (8008cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f003 0203 	and.w	r2, r3, #3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8008cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008ccc:	4b09      	ldr	r3, [pc, #36]	@ (8008cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	08db      	lsrs	r3, r3, #3
 8008cd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008cda:	4b07      	ldr	r3, [pc, #28]	@ (8008cf8 <HAL_RCC_GetClockConfig+0x60>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 020f 	and.w	r2, r3, #15
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	601a      	str	r2, [r3, #0]
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	40021000 	.word	0x40021000
 8008cf8:	40022000 	.word	0x40022000

08008cfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d02:	4b1e      	ldr	r3, [pc, #120]	@ (8008d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8008d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	091b      	lsrs	r3, r3, #4
 8008d12:	f003 030f 	and.w	r3, r3, #15
 8008d16:	3301      	adds	r3, #1
 8008d18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d10c      	bne.n	8008d3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d20:	4a17      	ldr	r2, [pc, #92]	@ (8008d80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d28:	4a14      	ldr	r2, [pc, #80]	@ (8008d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d2a:	68d2      	ldr	r2, [r2, #12]
 8008d2c:	0a12      	lsrs	r2, r2, #8
 8008d2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008d32:	fb02 f303 	mul.w	r3, r2, r3
 8008d36:	617b      	str	r3, [r7, #20]
    break;
 8008d38:	e00c      	b.n	8008d54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d3a:	4a12      	ldr	r2, [pc, #72]	@ (8008d84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d42:	4a0e      	ldr	r2, [pc, #56]	@ (8008d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d44:	68d2      	ldr	r2, [r2, #12]
 8008d46:	0a12      	lsrs	r2, r2, #8
 8008d48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	617b      	str	r3, [r7, #20]
    break;
 8008d52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008d54:	4b09      	ldr	r3, [pc, #36]	@ (8008d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	0e5b      	lsrs	r3, r3, #25
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	3301      	adds	r3, #1
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008d6e:	687b      	ldr	r3, [r7, #4]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	40021000 	.word	0x40021000
 8008d80:	016e3600 	.word	0x016e3600
 8008d84:	00f42400 	.word	0x00f42400

08008d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d90:	2300      	movs	r3, #0
 8008d92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d94:	2300      	movs	r3, #0
 8008d96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 8098 	beq.w	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008da6:	2300      	movs	r3, #0
 8008da8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008daa:	4b43      	ldr	r3, [pc, #268]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10d      	bne.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008db6:	4b40      	ldr	r3, [pc, #256]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dba:	4a3f      	ldr	r2, [pc, #252]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dca:	60bb      	str	r3, [r7, #8]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a39      	ldr	r2, [pc, #228]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ddc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008dde:	f7fb fcdd 	bl	800479c <HAL_GetTick>
 8008de2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008de4:	e009      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008de6:	f7fb fcd9 	bl	800479c <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d902      	bls.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	74fb      	strb	r3, [r7, #19]
        break;
 8008df8:	e005      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dfa:	4b30      	ldr	r3, [pc, #192]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0ef      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008e06:	7cfb      	ldrb	r3, [r7, #19]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d159      	bne.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d01e      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d019      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e28:	4b23      	ldr	r3, [pc, #140]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e34:	4b20      	ldr	r3, [pc, #128]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e44:	4b1c      	ldr	r3, [pc, #112]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008e54:	4a18      	ldr	r2, [pc, #96]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d016      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e66:	f7fb fc99 	bl	800479c <HAL_GetTick>
 8008e6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e6c:	e00b      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e6e:	f7fb fc95 	bl	800479c <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d902      	bls.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	74fb      	strb	r3, [r7, #19]
            break;
 8008e84:	e006      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e86:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0ec      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008e94:	7cfb      	ldrb	r3, [r7, #19]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10b      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e9a:	4b07      	ldr	r3, [pc, #28]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ea0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ea8:	4903      	ldr	r1, [pc, #12]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008eb0:	e008      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008eb2:	7cfb      	ldrb	r3, [r7, #19]
 8008eb4:	74bb      	strb	r3, [r7, #18]
 8008eb6:	e005      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008eb8:	40021000 	.word	0x40021000
 8008ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec0:	7cfb      	ldrb	r3, [r7, #19]
 8008ec2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ec4:	7c7b      	ldrb	r3, [r7, #17]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d105      	bne.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eca:	4ba7      	ldr	r3, [pc, #668]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ece:	4aa6      	ldr	r2, [pc, #664]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ed4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00a      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ee2:	4ba1      	ldr	r3, [pc, #644]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ee8:	f023 0203 	bic.w	r2, r3, #3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	499d      	ldr	r1, [pc, #628]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00a      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f04:	4b98      	ldr	r3, [pc, #608]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f0a:	f023 020c 	bic.w	r2, r3, #12
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	4995      	ldr	r1, [pc, #596]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0304 	and.w	r3, r3, #4
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f26:	4b90      	ldr	r3, [pc, #576]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	498c      	ldr	r1, [pc, #560]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00a      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f48:	4b87      	ldr	r3, [pc, #540]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	4984      	ldr	r1, [pc, #528]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0310 	and.w	r3, r3, #16
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	497b      	ldr	r1, [pc, #492]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0320 	and.w	r3, r3, #32
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00a      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f8c:	4b76      	ldr	r3, [pc, #472]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	4973      	ldr	r1, [pc, #460]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fae:	4b6e      	ldr	r3, [pc, #440]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	496a      	ldr	r1, [pc, #424]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008fd0:	4b65      	ldr	r3, [pc, #404]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fd6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	4962      	ldr	r1, [pc, #392]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ff8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009000:	4959      	ldr	r1, [pc, #356]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009002:	4313      	orrs	r3, r2
 8009004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00a      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009014:	4b54      	ldr	r3, [pc, #336]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009016:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800901a:	f023 0203 	bic.w	r2, r3, #3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	4951      	ldr	r1, [pc, #324]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009024:	4313      	orrs	r3, r2
 8009026:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009036:	4b4c      	ldr	r3, [pc, #304]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800903c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009044:	4948      	ldr	r1, [pc, #288]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009046:	4313      	orrs	r3, r2
 8009048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009054:	2b00      	cmp	r3, #0
 8009056:	d015      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009058:	4b43      	ldr	r3, [pc, #268]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800905a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800905e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009066:	4940      	ldr	r1, [pc, #256]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009068:	4313      	orrs	r3, r2
 800906a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009076:	d105      	bne.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009078:	4b3b      	ldr	r3, [pc, #236]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	4a3a      	ldr	r2, [pc, #232]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800907e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009082:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800908c:	2b00      	cmp	r3, #0
 800908e:	d015      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009090:	4b35      	ldr	r3, [pc, #212]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009096:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800909e:	4932      	ldr	r1, [pc, #200]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090ae:	d105      	bne.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090b0:	4b2d      	ldr	r3, [pc, #180]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	4a2c      	ldr	r2, [pc, #176]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090ba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d015      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80090c8:	4b27      	ldr	r3, [pc, #156]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d6:	4924      	ldr	r1, [pc, #144]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090e6:	d105      	bne.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	4a1e      	ldr	r2, [pc, #120]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d015      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009100:	4b19      	ldr	r3, [pc, #100]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009106:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800910e:	4916      	ldr	r1, [pc, #88]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009110:	4313      	orrs	r3, r2
 8009112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800911a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800911e:	d105      	bne.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009120:	4b11      	ldr	r3, [pc, #68]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	4a10      	ldr	r2, [pc, #64]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800912a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d019      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009138:	4b0b      	ldr	r3, [pc, #44]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800913a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800913e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009146:	4908      	ldr	r1, [pc, #32]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009148:	4313      	orrs	r3, r2
 800914a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009156:	d109      	bne.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009158:	4b03      	ldr	r3, [pc, #12]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	4a02      	ldr	r2, [pc, #8]	@ (8009168 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800915e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009162:	60d3      	str	r3, [r2, #12]
 8009164:	e002      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009166:	bf00      	nop
 8009168:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d015      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009178:	4b29      	ldr	r3, [pc, #164]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800917a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800917e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009186:	4926      	ldr	r1, [pc, #152]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009188:	4313      	orrs	r3, r2
 800918a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009196:	d105      	bne.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009198:	4b21      	ldr	r3, [pc, #132]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	4a20      	ldr	r2, [pc, #128]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800919e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d015      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80091b0:	4b1b      	ldr	r3, [pc, #108]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091be:	4918      	ldr	r1, [pc, #96]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ce:	d105      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80091d0:	4b13      	ldr	r3, [pc, #76]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	4a12      	ldr	r2, [pc, #72]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d015      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80091e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80091ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091f6:	490a      	ldr	r1, [pc, #40]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009206:	d105      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009208:	4b05      	ldr	r3, [pc, #20]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	4a04      	ldr	r2, [pc, #16]	@ (8009220 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800920e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009212:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009214:	7cbb      	ldrb	r3, [r7, #18]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	40021000 	.word	0x40021000

08009224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e049      	b.n	80092ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f841 	bl	80092d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2202      	movs	r2, #2
 8009254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	3304      	adds	r3, #4
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	f000 fa30 	bl	80096c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
	...

080092e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d001      	beq.n	8009300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e054      	b.n	80093aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68da      	ldr	r2, [r3, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 0201 	orr.w	r2, r2, #1
 8009316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a26      	ldr	r2, [pc, #152]	@ (80093b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d022      	beq.n	8009368 <HAL_TIM_Base_Start_IT+0x80>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800932a:	d01d      	beq.n	8009368 <HAL_TIM_Base_Start_IT+0x80>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a22      	ldr	r2, [pc, #136]	@ (80093bc <HAL_TIM_Base_Start_IT+0xd4>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d018      	beq.n	8009368 <HAL_TIM_Base_Start_IT+0x80>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a21      	ldr	r2, [pc, #132]	@ (80093c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d013      	beq.n	8009368 <HAL_TIM_Base_Start_IT+0x80>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a1f      	ldr	r2, [pc, #124]	@ (80093c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d00e      	beq.n	8009368 <HAL_TIM_Base_Start_IT+0x80>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a1e      	ldr	r2, [pc, #120]	@ (80093c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d009      	beq.n	8009368 <HAL_TIM_Base_Start_IT+0x80>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a1c      	ldr	r2, [pc, #112]	@ (80093cc <HAL_TIM_Base_Start_IT+0xe4>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d004      	beq.n	8009368 <HAL_TIM_Base_Start_IT+0x80>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a1b      	ldr	r2, [pc, #108]	@ (80093d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d115      	bne.n	8009394 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	4b19      	ldr	r3, [pc, #100]	@ (80093d4 <HAL_TIM_Base_Start_IT+0xec>)
 8009370:	4013      	ands	r3, r2
 8009372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2b06      	cmp	r3, #6
 8009378:	d015      	beq.n	80093a6 <HAL_TIM_Base_Start_IT+0xbe>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009380:	d011      	beq.n	80093a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f042 0201 	orr.w	r2, r2, #1
 8009390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009392:	e008      	b.n	80093a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0201 	orr.w	r2, r2, #1
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	e000      	b.n	80093a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	40012c00 	.word	0x40012c00
 80093bc:	40000400 	.word	0x40000400
 80093c0:	40000800 	.word	0x40000800
 80093c4:	40000c00 	.word	0x40000c00
 80093c8:	40013400 	.word	0x40013400
 80093cc:	40014000 	.word	0x40014000
 80093d0:	40015000 	.word	0x40015000
 80093d4:	00010007 	.word	0x00010007

080093d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d020      	beq.n	800943c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f003 0302 	and.w	r3, r3, #2
 8009400:	2b00      	cmp	r3, #0
 8009402:	d01b      	beq.n	800943c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f06f 0202 	mvn.w	r2, #2
 800940c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f931 	bl	800968a <HAL_TIM_IC_CaptureCallback>
 8009428:	e005      	b.n	8009436 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f923 	bl	8009676 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f934 	bl	800969e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	f003 0304 	and.w	r3, r3, #4
 8009442:	2b00      	cmp	r3, #0
 8009444:	d020      	beq.n	8009488 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f003 0304 	and.w	r3, r3, #4
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01b      	beq.n	8009488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f06f 0204 	mvn.w	r2, #4
 8009458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2202      	movs	r2, #2
 800945e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f90b 	bl	800968a <HAL_TIM_IC_CaptureCallback>
 8009474:	e005      	b.n	8009482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f8fd 	bl	8009676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f90e 	bl	800969e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	f003 0308 	and.w	r3, r3, #8
 800948e:	2b00      	cmp	r3, #0
 8009490:	d020      	beq.n	80094d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f003 0308 	and.w	r3, r3, #8
 8009498:	2b00      	cmp	r3, #0
 800949a:	d01b      	beq.n	80094d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f06f 0208 	mvn.w	r2, #8
 80094a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2204      	movs	r2, #4
 80094aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f8e5 	bl	800968a <HAL_TIM_IC_CaptureCallback>
 80094c0:	e005      	b.n	80094ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f8d7 	bl	8009676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f8e8 	bl	800969e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	f003 0310 	and.w	r3, r3, #16
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d020      	beq.n	8009520 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f003 0310 	and.w	r3, r3, #16
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d01b      	beq.n	8009520 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f06f 0210 	mvn.w	r2, #16
 80094f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2208      	movs	r2, #8
 80094f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009502:	2b00      	cmp	r3, #0
 8009504:	d003      	beq.n	800950e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f8bf 	bl	800968a <HAL_TIM_IC_CaptureCallback>
 800950c:	e005      	b.n	800951a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f8b1 	bl	8009676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f8c2 	bl	800969e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00c      	beq.n	8009544 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d007      	beq.n	8009544 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f06f 0201 	mvn.w	r2, #1
 800953c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7fa fbd6 	bl	8003cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800954a:	2b00      	cmp	r3, #0
 800954c:	d104      	bne.n	8009558 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00c      	beq.n	8009572 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800955e:	2b00      	cmp	r3, #0
 8009560:	d007      	beq.n	8009572 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800956a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f969 	bl	8009844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00c      	beq.n	8009596 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009582:	2b00      	cmp	r3, #0
 8009584:	d007      	beq.n	8009596 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800958e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f961 	bl	8009858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00c      	beq.n	80095ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d007      	beq.n	80095ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80095b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f87c 	bl	80096b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00c      	beq.n	80095de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d007      	beq.n	80095de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f06f 0220 	mvn.w	r2, #32
 80095d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f929 	bl	8009830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00c      	beq.n	8009602 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d007      	beq.n	8009602 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80095fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f935 	bl	800986c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00c      	beq.n	8009626 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d007      	beq.n	8009626 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800961e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f92d 	bl	8009880 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00c      	beq.n	800964a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d007      	beq.n	800964a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f925 	bl	8009894 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00c      	beq.n	800966e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d007      	beq.n	800966e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f91d 	bl	80098a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009692:	bf00      	nop
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096ba:	bf00      	nop
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
	...

080096c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a4c      	ldr	r2, [pc, #304]	@ (800980c <TIM_Base_SetConfig+0x144>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d017      	beq.n	8009710 <TIM_Base_SetConfig+0x48>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096e6:	d013      	beq.n	8009710 <TIM_Base_SetConfig+0x48>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a49      	ldr	r2, [pc, #292]	@ (8009810 <TIM_Base_SetConfig+0x148>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d00f      	beq.n	8009710 <TIM_Base_SetConfig+0x48>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a48      	ldr	r2, [pc, #288]	@ (8009814 <TIM_Base_SetConfig+0x14c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d00b      	beq.n	8009710 <TIM_Base_SetConfig+0x48>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a47      	ldr	r2, [pc, #284]	@ (8009818 <TIM_Base_SetConfig+0x150>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d007      	beq.n	8009710 <TIM_Base_SetConfig+0x48>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a46      	ldr	r2, [pc, #280]	@ (800981c <TIM_Base_SetConfig+0x154>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d003      	beq.n	8009710 <TIM_Base_SetConfig+0x48>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a45      	ldr	r2, [pc, #276]	@ (8009820 <TIM_Base_SetConfig+0x158>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d108      	bne.n	8009722 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	4313      	orrs	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a39      	ldr	r2, [pc, #228]	@ (800980c <TIM_Base_SetConfig+0x144>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d023      	beq.n	8009772 <TIM_Base_SetConfig+0xaa>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009730:	d01f      	beq.n	8009772 <TIM_Base_SetConfig+0xaa>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a36      	ldr	r2, [pc, #216]	@ (8009810 <TIM_Base_SetConfig+0x148>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d01b      	beq.n	8009772 <TIM_Base_SetConfig+0xaa>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a35      	ldr	r2, [pc, #212]	@ (8009814 <TIM_Base_SetConfig+0x14c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d017      	beq.n	8009772 <TIM_Base_SetConfig+0xaa>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a34      	ldr	r2, [pc, #208]	@ (8009818 <TIM_Base_SetConfig+0x150>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d013      	beq.n	8009772 <TIM_Base_SetConfig+0xaa>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a33      	ldr	r2, [pc, #204]	@ (800981c <TIM_Base_SetConfig+0x154>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d00f      	beq.n	8009772 <TIM_Base_SetConfig+0xaa>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a33      	ldr	r2, [pc, #204]	@ (8009824 <TIM_Base_SetConfig+0x15c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d00b      	beq.n	8009772 <TIM_Base_SetConfig+0xaa>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a32      	ldr	r2, [pc, #200]	@ (8009828 <TIM_Base_SetConfig+0x160>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d007      	beq.n	8009772 <TIM_Base_SetConfig+0xaa>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a31      	ldr	r2, [pc, #196]	@ (800982c <TIM_Base_SetConfig+0x164>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d003      	beq.n	8009772 <TIM_Base_SetConfig+0xaa>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a2c      	ldr	r2, [pc, #176]	@ (8009820 <TIM_Base_SetConfig+0x158>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d108      	bne.n	8009784 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	4313      	orrs	r3, r2
 8009782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	4313      	orrs	r3, r2
 8009790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	689a      	ldr	r2, [r3, #8]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a18      	ldr	r2, [pc, #96]	@ (800980c <TIM_Base_SetConfig+0x144>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d013      	beq.n	80097d8 <TIM_Base_SetConfig+0x110>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a1a      	ldr	r2, [pc, #104]	@ (800981c <TIM_Base_SetConfig+0x154>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d00f      	beq.n	80097d8 <TIM_Base_SetConfig+0x110>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a1a      	ldr	r2, [pc, #104]	@ (8009824 <TIM_Base_SetConfig+0x15c>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00b      	beq.n	80097d8 <TIM_Base_SetConfig+0x110>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a19      	ldr	r2, [pc, #100]	@ (8009828 <TIM_Base_SetConfig+0x160>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d007      	beq.n	80097d8 <TIM_Base_SetConfig+0x110>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a18      	ldr	r2, [pc, #96]	@ (800982c <TIM_Base_SetConfig+0x164>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d003      	beq.n	80097d8 <TIM_Base_SetConfig+0x110>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a13      	ldr	r2, [pc, #76]	@ (8009820 <TIM_Base_SetConfig+0x158>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d103      	bne.n	80097e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d105      	bne.n	80097fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	f023 0201 	bic.w	r2, r3, #1
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	611a      	str	r2, [r3, #16]
  }
}
 80097fe:	bf00      	nop
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	40012c00 	.word	0x40012c00
 8009810:	40000400 	.word	0x40000400
 8009814:	40000800 	.word	0x40000800
 8009818:	40000c00 	.word	0x40000c00
 800981c:	40013400 	.word	0x40013400
 8009820:	40015000 	.word	0x40015000
 8009824:	40014000 	.word	0x40014000
 8009828:	40014400 	.word	0x40014400
 800982c:	40014800 	.word	0x40014800

08009830 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e042      	b.n	8009954 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d106      	bne.n	80098e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7fa fd9d 	bl	8004420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2224      	movs	r2, #36	@ 0x24
 80098ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0201 	bic.w	r2, r2, #1
 80098fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f001 f806 	bl	800a918 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fd07 	bl	800a320 <UART_SetConfig>
 8009912:	4603      	mov	r3, r0
 8009914:	2b01      	cmp	r3, #1
 8009916:	d101      	bne.n	800991c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e01b      	b.n	8009954 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800992a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689a      	ldr	r2, [r3, #8]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800993a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0201 	orr.w	r2, r2, #1
 800994a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 f885 	bl	800aa5c <UART_CheckIdleState>
 8009952:	4603      	mov	r3, r0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08a      	sub	sp, #40	@ 0x28
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	4613      	mov	r3, r2
 8009968:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009970:	2b20      	cmp	r3, #32
 8009972:	d167      	bne.n	8009a44 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <HAL_UART_Transmit_DMA+0x24>
 800997a:	88fb      	ldrh	r3, [r7, #6]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e060      	b.n	8009a46 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	88fa      	ldrh	r2, [r7, #6]
 800998e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	88fa      	ldrh	r2, [r7, #6]
 8009996:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2221      	movs	r2, #33	@ 0x21
 80099a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d028      	beq.n	8009a04 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099b6:	4a26      	ldr	r2, [pc, #152]	@ (8009a50 <HAL_UART_Transmit_DMA+0xf4>)
 80099b8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099be:	4a25      	ldr	r2, [pc, #148]	@ (8009a54 <HAL_UART_Transmit_DMA+0xf8>)
 80099c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099c6:	4a24      	ldr	r2, [pc, #144]	@ (8009a58 <HAL_UART_Transmit_DMA+0xfc>)
 80099c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099ce:	2200      	movs	r2, #0
 80099d0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099da:	4619      	mov	r1, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3328      	adds	r3, #40	@ 0x28
 80099e2:	461a      	mov	r2, r3
 80099e4:	88fb      	ldrh	r3, [r7, #6]
 80099e6:	f7fc ffa3 	bl	8006930 <HAL_DMA_Start_IT>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d009      	beq.n	8009a04 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2210      	movs	r2, #16
 80099f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2220      	movs	r2, #32
 80099fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e020      	b.n	8009a46 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2240      	movs	r2, #64	@ 0x40
 8009a0a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3308      	adds	r3, #8
 8009a12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	e853 3f00 	ldrex	r3, [r3]
 8009a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3308      	adds	r3, #8
 8009a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a2c:	623a      	str	r2, [r7, #32]
 8009a2e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	69f9      	ldr	r1, [r7, #28]
 8009a32:	6a3a      	ldr	r2, [r7, #32]
 8009a34:	e841 2300 	strex	r3, r2, [r1]
 8009a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e5      	bne.n	8009a0c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	e000      	b.n	8009a46 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009a44:	2302      	movs	r3, #2
  }
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3728      	adds	r7, #40	@ 0x28
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	0800af27 	.word	0x0800af27
 8009a54:	0800afc1 	.word	0x0800afc1
 8009a58:	0800b147 	.word	0x0800b147

08009a5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08a      	sub	sp, #40	@ 0x28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	4613      	mov	r3, r2
 8009a68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a70:	2b20      	cmp	r3, #32
 8009a72:	d137      	bne.n	8009ae4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <HAL_UART_Receive_DMA+0x24>
 8009a7a:	88fb      	ldrh	r3, [r7, #6]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e030      	b.n	8009ae6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a18      	ldr	r2, [pc, #96]	@ (8009af0 <HAL_UART_Receive_DMA+0x94>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d01f      	beq.n	8009ad4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d018      	beq.n	8009ad4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	e853 3f00 	ldrex	r3, [r3]
 8009aae:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	461a      	mov	r2, r3
 8009abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac0:	623b      	str	r3, [r7, #32]
 8009ac2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac4:	69f9      	ldr	r1, [r7, #28]
 8009ac6:	6a3a      	ldr	r2, [r7, #32]
 8009ac8:	e841 2300 	strex	r3, r2, [r1]
 8009acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1e6      	bne.n	8009aa2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ad4:	88fb      	ldrh	r3, [r7, #6]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	68b9      	ldr	r1, [r7, #8]
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f001 f8d6 	bl	800ac8c <UART_Start_Receive_DMA>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	e000      	b.n	8009ae6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ae4:	2302      	movs	r3, #2
  }
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3728      	adds	r7, #40	@ 0x28
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	40008000 	.word	0x40008000

08009af4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b090      	sub	sp, #64	@ 0x40
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b0a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b16:	2b80      	cmp	r3, #128	@ 0x80
 8009b18:	d139      	bne.n	8009b8e <HAL_UART_DMAStop+0x9a>
 8009b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1c:	2b21      	cmp	r3, #33	@ 0x21
 8009b1e:	d136      	bne.n	8009b8e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3308      	adds	r3, #8
 8009b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	e853 3f00 	ldrex	r3, [r3]
 8009b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b48:	e841 2300 	strex	r3, r2, [r1]
 8009b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e5      	bne.n	8009b20 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d015      	beq.n	8009b88 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fc ff60 	bl	8006a26 <HAL_DMA_Abort>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00d      	beq.n	8009b88 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fd f8c7 	bl	8006d04 <HAL_DMA_GetError>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d105      	bne.n	8009b88 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2210      	movs	r2, #16
 8009b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e047      	b.n	8009c18 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 f925 	bl	800add8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b98:	2b40      	cmp	r3, #64	@ 0x40
 8009b9a:	d13c      	bne.n	8009c16 <HAL_UART_DMAStop+0x122>
 8009b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9e:	2b22      	cmp	r3, #34	@ 0x22
 8009ba0:	d139      	bne.n	8009c16 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	e853 3f00 	ldrex	r3, [r3]
 8009bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bc2:	61ba      	str	r2, [r7, #24]
 8009bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc6:	6979      	ldr	r1, [r7, #20]
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	e841 2300 	strex	r3, r2, [r1]
 8009bce:	613b      	str	r3, [r7, #16]
   return(result);
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e5      	bne.n	8009ba2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d017      	beq.n	8009c10 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fc ff1d 	bl	8006a26 <HAL_DMA_Abort>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00e      	beq.n	8009c10 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fd f883 	bl	8006d04 <HAL_DMA_GetError>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	d105      	bne.n	8009c10 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2210      	movs	r2, #16
 8009c08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e003      	b.n	8009c18 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 f922 	bl	800ae5a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3740      	adds	r7, #64	@ 0x40
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b0ba      	sub	sp, #232	@ 0xe8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009c4a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009c4e:	4013      	ands	r3, r2
 8009c50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009c54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d11b      	bne.n	8009c94 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c60:	f003 0320 	and.w	r3, r3, #32
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d015      	beq.n	8009c94 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d105      	bne.n	8009c80 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d009      	beq.n	8009c94 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 8300 	beq.w	800a28a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	4798      	blx	r3
      }
      return;
 8009c92:	e2fa      	b.n	800a28a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f000 8123 	beq.w	8009ee4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009c9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009ca2:	4b8d      	ldr	r3, [pc, #564]	@ (8009ed8 <HAL_UART_IRQHandler+0x2b8>)
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009caa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009cae:	4b8b      	ldr	r3, [pc, #556]	@ (8009edc <HAL_UART_IRQHandler+0x2bc>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 8116 	beq.w	8009ee4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d011      	beq.n	8009ce8 <HAL_UART_IRQHandler+0xc8>
 8009cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cde:	f043 0201 	orr.w	r2, r3, #1
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cec:	f003 0302 	and.w	r3, r3, #2
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d011      	beq.n	8009d18 <HAL_UART_IRQHandler+0xf8>
 8009cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00b      	beq.n	8009d18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2202      	movs	r2, #2
 8009d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d0e:	f043 0204 	orr.w	r2, r3, #4
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d011      	beq.n	8009d48 <HAL_UART_IRQHandler+0x128>
 8009d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00b      	beq.n	8009d48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2204      	movs	r2, #4
 8009d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d3e:	f043 0202 	orr.w	r2, r3, #2
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d4c:	f003 0308 	and.w	r3, r3, #8
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d017      	beq.n	8009d84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d58:	f003 0320 	and.w	r3, r3, #32
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d105      	bne.n	8009d6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009d64:	4b5c      	ldr	r3, [pc, #368]	@ (8009ed8 <HAL_UART_IRQHandler+0x2b8>)
 8009d66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00b      	beq.n	8009d84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2208      	movs	r2, #8
 8009d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d7a:	f043 0208 	orr.w	r2, r3, #8
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d012      	beq.n	8009db6 <HAL_UART_IRQHandler+0x196>
 8009d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00c      	beq.n	8009db6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dac:	f043 0220 	orr.w	r2, r3, #32
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8266 	beq.w	800a28e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc6:	f003 0320 	and.w	r3, r3, #32
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d013      	beq.n	8009df6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dd2:	f003 0320 	and.w	r3, r3, #32
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d105      	bne.n	8009de6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d007      	beq.n	8009df6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dfc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e0a:	2b40      	cmp	r3, #64	@ 0x40
 8009e0c:	d005      	beq.n	8009e1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d054      	beq.n	8009ec4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 f81d 	bl	800ae5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e2a:	2b40      	cmp	r3, #64	@ 0x40
 8009e2c:	d146      	bne.n	8009ebc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3308      	adds	r3, #8
 8009e34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3308      	adds	r3, #8
 8009e56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009e5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009e66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009e6a:	e841 2300 	strex	r3, r2, [r1]
 8009e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1d9      	bne.n	8009e2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d017      	beq.n	8009eb4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e8a:	4a15      	ldr	r2, [pc, #84]	@ (8009ee0 <HAL_UART_IRQHandler+0x2c0>)
 8009e8c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fc fe1f 	bl	8006ad8 <HAL_DMA_Abort_IT>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d019      	beq.n	8009ed4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009eae:	4610      	mov	r0, r2
 8009eb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb2:	e00f      	b.n	8009ed4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fa1d 	bl	800a2f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eba:	e00b      	b.n	8009ed4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fa19 	bl	800a2f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec2:	e007      	b.n	8009ed4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fa15 	bl	800a2f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009ed2:	e1dc      	b.n	800a28e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ed4:	bf00      	nop
    return;
 8009ed6:	e1da      	b.n	800a28e <HAL_UART_IRQHandler+0x66e>
 8009ed8:	10000001 	.word	0x10000001
 8009edc:	04000120 	.word	0x04000120
 8009ee0:	0800b1c7 	.word	0x0800b1c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	f040 8170 	bne.w	800a1ce <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ef2:	f003 0310 	and.w	r3, r3, #16
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 8169 	beq.w	800a1ce <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f00:	f003 0310 	and.w	r3, r3, #16
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 8162 	beq.w	800a1ce <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2210      	movs	r2, #16
 8009f10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f1c:	2b40      	cmp	r3, #64	@ 0x40
 8009f1e:	f040 80d8 	bne.w	800a0d2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f000 80af 	beq.w	800a098 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f44:	429a      	cmp	r2, r3
 8009f46:	f080 80a7 	bcs.w	800a098 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0320 	and.w	r3, r3, #32
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f040 8087 	bne.w	800a076 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f74:	e853 3f00 	ldrex	r3, [r3]
 8009f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1da      	bne.n	8009f68 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fbc:	e853 3f00 	ldrex	r3, [r3]
 8009fc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009fc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fc4:	f023 0301 	bic.w	r3, r3, #1
 8009fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3308      	adds	r3, #8
 8009fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009fd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009fda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009fde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009fe2:	e841 2300 	strex	r3, r2, [r1]
 8009fe6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e1      	bne.n	8009fb2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3308      	adds	r3, #8
 8009ff4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a004:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3308      	adds	r3, #8
 800a00e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a012:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a014:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a018:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e3      	bne.n	8009fee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2220      	movs	r2, #32
 800a02a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a044:	f023 0310 	bic.w	r3, r3, #16
 800a048:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	461a      	mov	r2, r3
 800a052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a056:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a058:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a05c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1e4      	bne.n	800a034 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a070:	4618      	mov	r0, r3
 800a072:	f7fc fcd8 	bl	8006a26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2202      	movs	r2, #2
 800a07a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a088:	b29b      	uxth	r3, r3
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	4619      	mov	r1, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f939 	bl	800a308 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a096:	e0fc      	b.n	800a292 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a09e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	f040 80f5 	bne.w	800a292 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0320 	and.w	r3, r3, #32
 800a0b6:	2b20      	cmp	r3, #32
 800a0b8:	f040 80eb 	bne.w	800a292 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2202      	movs	r2, #2
 800a0c0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f91c 	bl	800a308 <HAL_UARTEx_RxEventCallback>
      return;
 800a0d0:	e0df      	b.n	800a292 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f000 80d1 	beq.w	800a296 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a0f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 80cc 	beq.w	800a296 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a106:	e853 3f00 	ldrex	r3, [r3]
 800a10a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a10e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a112:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a120:	647b      	str	r3, [r7, #68]	@ 0x44
 800a122:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a124:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a128:	e841 2300 	strex	r3, r2, [r1]
 800a12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a12e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1e4      	bne.n	800a0fe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3308      	adds	r3, #8
 800a13a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13e:	e853 3f00 	ldrex	r3, [r3]
 800a142:	623b      	str	r3, [r7, #32]
   return(result);
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a14a:	f023 0301 	bic.w	r3, r3, #1
 800a14e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3308      	adds	r3, #8
 800a158:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a15c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a15e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a160:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a164:	e841 2300 	strex	r3, r2, [r1]
 800a168:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e1      	bne.n	800a134 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2220      	movs	r2, #32
 800a174:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	60fb      	str	r3, [r7, #12]
   return(result);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f023 0310 	bic.w	r3, r3, #16
 800a198:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a1a6:	61fb      	str	r3, [r7, #28]
 800a1a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	69b9      	ldr	r1, [r7, #24]
 800a1ac:	69fa      	ldr	r2, [r7, #28]
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	617b      	str	r3, [r7, #20]
   return(result);
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e4      	bne.n	800a184 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2202      	movs	r2, #2
 800a1be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f89e 	bl	800a308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1cc:	e063      	b.n	800a296 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00e      	beq.n	800a1f8 <HAL_UART_IRQHandler+0x5d8>
 800a1da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d008      	beq.n	800a1f8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a1ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f001 f825 	bl	800b240 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1f6:	e051      	b.n	800a29c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a1f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a200:	2b00      	cmp	r3, #0
 800a202:	d014      	beq.n	800a22e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d105      	bne.n	800a21c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d008      	beq.n	800a22e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a220:	2b00      	cmp	r3, #0
 800a222:	d03a      	beq.n	800a29a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	4798      	blx	r3
    }
    return;
 800a22c:	e035      	b.n	800a29a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a236:	2b00      	cmp	r3, #0
 800a238:	d009      	beq.n	800a24e <HAL_UART_IRQHandler+0x62e>
 800a23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a23e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 ffcf 	bl	800b1ea <UART_EndTransmit_IT>
    return;
 800a24c:	e026      	b.n	800a29c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a252:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d009      	beq.n	800a26e <HAL_UART_IRQHandler+0x64e>
 800a25a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a25e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fffe 	bl	800b268 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a26c:	e016      	b.n	800a29c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a272:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a276:	2b00      	cmp	r3, #0
 800a278:	d010      	beq.n	800a29c <HAL_UART_IRQHandler+0x67c>
 800a27a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	da0c      	bge.n	800a29c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 ffe6 	bl	800b254 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a288:	e008      	b.n	800a29c <HAL_UART_IRQHandler+0x67c>
      return;
 800a28a:	bf00      	nop
 800a28c:	e006      	b.n	800a29c <HAL_UART_IRQHandler+0x67c>
    return;
 800a28e:	bf00      	nop
 800a290:	e004      	b.n	800a29c <HAL_UART_IRQHandler+0x67c>
      return;
 800a292:	bf00      	nop
 800a294:	e002      	b.n	800a29c <HAL_UART_IRQHandler+0x67c>
      return;
 800a296:	bf00      	nop
 800a298:	e000      	b.n	800a29c <HAL_UART_IRQHandler+0x67c>
    return;
 800a29a:	bf00      	nop
  }
}
 800a29c:	37e8      	adds	r7, #232	@ 0xe8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop

0800a2a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a324:	b08c      	sub	sp, #48	@ 0x30
 800a326:	af00      	add	r7, sp, #0
 800a328:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	431a      	orrs	r2, r3
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	431a      	orrs	r2, r3
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	69db      	ldr	r3, [r3, #28]
 800a344:	4313      	orrs	r3, r2
 800a346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	4baa      	ldr	r3, [pc, #680]	@ (800a5f8 <UART_SetConfig+0x2d8>)
 800a350:	4013      	ands	r3, r2
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	6812      	ldr	r2, [r2, #0]
 800a356:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a358:	430b      	orrs	r3, r1
 800a35a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	68da      	ldr	r2, [r3, #12]
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a9f      	ldr	r2, [pc, #636]	@ (800a5fc <UART_SetConfig+0x2dc>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d004      	beq.n	800a38c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a388:	4313      	orrs	r3, r2
 800a38a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a396:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	6812      	ldr	r2, [r2, #0]
 800a39e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3a0:	430b      	orrs	r3, r1
 800a3a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3aa:	f023 010f 	bic.w	r1, r3, #15
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a90      	ldr	r2, [pc, #576]	@ (800a600 <UART_SetConfig+0x2e0>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d125      	bne.n	800a410 <UART_SetConfig+0xf0>
 800a3c4:	4b8f      	ldr	r3, [pc, #572]	@ (800a604 <UART_SetConfig+0x2e4>)
 800a3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3ca:	f003 0303 	and.w	r3, r3, #3
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	d81a      	bhi.n	800a408 <UART_SetConfig+0xe8>
 800a3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d8 <UART_SetConfig+0xb8>)
 800a3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d8:	0800a3e9 	.word	0x0800a3e9
 800a3dc:	0800a3f9 	.word	0x0800a3f9
 800a3e0:	0800a3f1 	.word	0x0800a3f1
 800a3e4:	0800a401 	.word	0x0800a401
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ee:	e116      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3f6:	e112      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a3f8:	2304      	movs	r3, #4
 800a3fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3fe:	e10e      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a400:	2308      	movs	r3, #8
 800a402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a406:	e10a      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a408:	2310      	movs	r3, #16
 800a40a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a40e:	e106      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a7c      	ldr	r2, [pc, #496]	@ (800a608 <UART_SetConfig+0x2e8>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d138      	bne.n	800a48c <UART_SetConfig+0x16c>
 800a41a:	4b7a      	ldr	r3, [pc, #488]	@ (800a604 <UART_SetConfig+0x2e4>)
 800a41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a420:	f003 030c 	and.w	r3, r3, #12
 800a424:	2b0c      	cmp	r3, #12
 800a426:	d82d      	bhi.n	800a484 <UART_SetConfig+0x164>
 800a428:	a201      	add	r2, pc, #4	@ (adr r2, 800a430 <UART_SetConfig+0x110>)
 800a42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42e:	bf00      	nop
 800a430:	0800a465 	.word	0x0800a465
 800a434:	0800a485 	.word	0x0800a485
 800a438:	0800a485 	.word	0x0800a485
 800a43c:	0800a485 	.word	0x0800a485
 800a440:	0800a475 	.word	0x0800a475
 800a444:	0800a485 	.word	0x0800a485
 800a448:	0800a485 	.word	0x0800a485
 800a44c:	0800a485 	.word	0x0800a485
 800a450:	0800a46d 	.word	0x0800a46d
 800a454:	0800a485 	.word	0x0800a485
 800a458:	0800a485 	.word	0x0800a485
 800a45c:	0800a485 	.word	0x0800a485
 800a460:	0800a47d 	.word	0x0800a47d
 800a464:	2300      	movs	r3, #0
 800a466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a46a:	e0d8      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a46c:	2302      	movs	r3, #2
 800a46e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a472:	e0d4      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a474:	2304      	movs	r3, #4
 800a476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a47a:	e0d0      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a47c:	2308      	movs	r3, #8
 800a47e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a482:	e0cc      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a484:	2310      	movs	r3, #16
 800a486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a48a:	e0c8      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a5e      	ldr	r2, [pc, #376]	@ (800a60c <UART_SetConfig+0x2ec>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d125      	bne.n	800a4e2 <UART_SetConfig+0x1c2>
 800a496:	4b5b      	ldr	r3, [pc, #364]	@ (800a604 <UART_SetConfig+0x2e4>)
 800a498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a49c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a4a0:	2b30      	cmp	r3, #48	@ 0x30
 800a4a2:	d016      	beq.n	800a4d2 <UART_SetConfig+0x1b2>
 800a4a4:	2b30      	cmp	r3, #48	@ 0x30
 800a4a6:	d818      	bhi.n	800a4da <UART_SetConfig+0x1ba>
 800a4a8:	2b20      	cmp	r3, #32
 800a4aa:	d00a      	beq.n	800a4c2 <UART_SetConfig+0x1a2>
 800a4ac:	2b20      	cmp	r3, #32
 800a4ae:	d814      	bhi.n	800a4da <UART_SetConfig+0x1ba>
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <UART_SetConfig+0x19a>
 800a4b4:	2b10      	cmp	r3, #16
 800a4b6:	d008      	beq.n	800a4ca <UART_SetConfig+0x1aa>
 800a4b8:	e00f      	b.n	800a4da <UART_SetConfig+0x1ba>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4c0:	e0ad      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4c8:	e0a9      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a4ca:	2304      	movs	r3, #4
 800a4cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4d0:	e0a5      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a4d2:	2308      	movs	r3, #8
 800a4d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4d8:	e0a1      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a4da:	2310      	movs	r3, #16
 800a4dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4e0:	e09d      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a4a      	ldr	r2, [pc, #296]	@ (800a610 <UART_SetConfig+0x2f0>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d125      	bne.n	800a538 <UART_SetConfig+0x218>
 800a4ec:	4b45      	ldr	r3, [pc, #276]	@ (800a604 <UART_SetConfig+0x2e4>)
 800a4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a4f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a4f8:	d016      	beq.n	800a528 <UART_SetConfig+0x208>
 800a4fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800a4fc:	d818      	bhi.n	800a530 <UART_SetConfig+0x210>
 800a4fe:	2b80      	cmp	r3, #128	@ 0x80
 800a500:	d00a      	beq.n	800a518 <UART_SetConfig+0x1f8>
 800a502:	2b80      	cmp	r3, #128	@ 0x80
 800a504:	d814      	bhi.n	800a530 <UART_SetConfig+0x210>
 800a506:	2b00      	cmp	r3, #0
 800a508:	d002      	beq.n	800a510 <UART_SetConfig+0x1f0>
 800a50a:	2b40      	cmp	r3, #64	@ 0x40
 800a50c:	d008      	beq.n	800a520 <UART_SetConfig+0x200>
 800a50e:	e00f      	b.n	800a530 <UART_SetConfig+0x210>
 800a510:	2300      	movs	r3, #0
 800a512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a516:	e082      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a518:	2302      	movs	r3, #2
 800a51a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a51e:	e07e      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a520:	2304      	movs	r3, #4
 800a522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a526:	e07a      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a528:	2308      	movs	r3, #8
 800a52a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a52e:	e076      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a530:	2310      	movs	r3, #16
 800a532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a536:	e072      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a35      	ldr	r2, [pc, #212]	@ (800a614 <UART_SetConfig+0x2f4>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d12a      	bne.n	800a598 <UART_SetConfig+0x278>
 800a542:	4b30      	ldr	r3, [pc, #192]	@ (800a604 <UART_SetConfig+0x2e4>)
 800a544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a548:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a54c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a550:	d01a      	beq.n	800a588 <UART_SetConfig+0x268>
 800a552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a556:	d81b      	bhi.n	800a590 <UART_SetConfig+0x270>
 800a558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a55c:	d00c      	beq.n	800a578 <UART_SetConfig+0x258>
 800a55e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a562:	d815      	bhi.n	800a590 <UART_SetConfig+0x270>
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <UART_SetConfig+0x250>
 800a568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a56c:	d008      	beq.n	800a580 <UART_SetConfig+0x260>
 800a56e:	e00f      	b.n	800a590 <UART_SetConfig+0x270>
 800a570:	2300      	movs	r3, #0
 800a572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a576:	e052      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a578:	2302      	movs	r3, #2
 800a57a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a57e:	e04e      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a580:	2304      	movs	r3, #4
 800a582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a586:	e04a      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a588:	2308      	movs	r3, #8
 800a58a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a58e:	e046      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a590:	2310      	movs	r3, #16
 800a592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a596:	e042      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a17      	ldr	r2, [pc, #92]	@ (800a5fc <UART_SetConfig+0x2dc>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d13a      	bne.n	800a618 <UART_SetConfig+0x2f8>
 800a5a2:	4b18      	ldr	r3, [pc, #96]	@ (800a604 <UART_SetConfig+0x2e4>)
 800a5a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a5ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a5b0:	d01a      	beq.n	800a5e8 <UART_SetConfig+0x2c8>
 800a5b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a5b6:	d81b      	bhi.n	800a5f0 <UART_SetConfig+0x2d0>
 800a5b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5bc:	d00c      	beq.n	800a5d8 <UART_SetConfig+0x2b8>
 800a5be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5c2:	d815      	bhi.n	800a5f0 <UART_SetConfig+0x2d0>
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d003      	beq.n	800a5d0 <UART_SetConfig+0x2b0>
 800a5c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5cc:	d008      	beq.n	800a5e0 <UART_SetConfig+0x2c0>
 800a5ce:	e00f      	b.n	800a5f0 <UART_SetConfig+0x2d0>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5d6:	e022      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a5d8:	2302      	movs	r3, #2
 800a5da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5de:	e01e      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a5e0:	2304      	movs	r3, #4
 800a5e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5e6:	e01a      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a5e8:	2308      	movs	r3, #8
 800a5ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ee:	e016      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5f6:	e012      	b.n	800a61e <UART_SetConfig+0x2fe>
 800a5f8:	cfff69f3 	.word	0xcfff69f3
 800a5fc:	40008000 	.word	0x40008000
 800a600:	40013800 	.word	0x40013800
 800a604:	40021000 	.word	0x40021000
 800a608:	40004400 	.word	0x40004400
 800a60c:	40004800 	.word	0x40004800
 800a610:	40004c00 	.word	0x40004c00
 800a614:	40005000 	.word	0x40005000
 800a618:	2310      	movs	r3, #16
 800a61a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4aae      	ldr	r2, [pc, #696]	@ (800a8dc <UART_SetConfig+0x5bc>)
 800a624:	4293      	cmp	r3, r2
 800a626:	f040 8097 	bne.w	800a758 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a62a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a62e:	2b08      	cmp	r3, #8
 800a630:	d823      	bhi.n	800a67a <UART_SetConfig+0x35a>
 800a632:	a201      	add	r2, pc, #4	@ (adr r2, 800a638 <UART_SetConfig+0x318>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a65d 	.word	0x0800a65d
 800a63c:	0800a67b 	.word	0x0800a67b
 800a640:	0800a665 	.word	0x0800a665
 800a644:	0800a67b 	.word	0x0800a67b
 800a648:	0800a66b 	.word	0x0800a66b
 800a64c:	0800a67b 	.word	0x0800a67b
 800a650:	0800a67b 	.word	0x0800a67b
 800a654:	0800a67b 	.word	0x0800a67b
 800a658:	0800a673 	.word	0x0800a673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a65c:	f7fe faf0 	bl	8008c40 <HAL_RCC_GetPCLK1Freq>
 800a660:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a662:	e010      	b.n	800a686 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a664:	4b9e      	ldr	r3, [pc, #632]	@ (800a8e0 <UART_SetConfig+0x5c0>)
 800a666:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a668:	e00d      	b.n	800a686 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a66a:	f7fe fa7b 	bl	8008b64 <HAL_RCC_GetSysClockFreq>
 800a66e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a670:	e009      	b.n	800a686 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a678:	e005      	b.n	800a686 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a67a:	2300      	movs	r3, #0
 800a67c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a684:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 8130 	beq.w	800a8ee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a692:	4a94      	ldr	r2, [pc, #592]	@ (800a8e4 <UART_SetConfig+0x5c4>)
 800a694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a698:	461a      	mov	r2, r3
 800a69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	4413      	add	r3, r2
 800a6ac:	69ba      	ldr	r2, [r7, #24]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d305      	bcc.n	800a6be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6b8:	69ba      	ldr	r2, [r7, #24]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d903      	bls.n	800a6c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a6c4:	e113      	b.n	800a8ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	60bb      	str	r3, [r7, #8]
 800a6cc:	60fa      	str	r2, [r7, #12]
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d2:	4a84      	ldr	r2, [pc, #528]	@ (800a8e4 <UART_SetConfig+0x5c4>)
 800a6d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	2200      	movs	r2, #0
 800a6dc:	603b      	str	r3, [r7, #0]
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6e8:	f7f6 fb0e 	bl	8000d08 <__aeabi_uldivmod>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	f04f 0200 	mov.w	r2, #0
 800a6f8:	f04f 0300 	mov.w	r3, #0
 800a6fc:	020b      	lsls	r3, r1, #8
 800a6fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a702:	0202      	lsls	r2, r0, #8
 800a704:	6979      	ldr	r1, [r7, #20]
 800a706:	6849      	ldr	r1, [r1, #4]
 800a708:	0849      	lsrs	r1, r1, #1
 800a70a:	2000      	movs	r0, #0
 800a70c:	460c      	mov	r4, r1
 800a70e:	4605      	mov	r5, r0
 800a710:	eb12 0804 	adds.w	r8, r2, r4
 800a714:	eb43 0905 	adc.w	r9, r3, r5
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	469a      	mov	sl, r3
 800a720:	4693      	mov	fp, r2
 800a722:	4652      	mov	r2, sl
 800a724:	465b      	mov	r3, fp
 800a726:	4640      	mov	r0, r8
 800a728:	4649      	mov	r1, r9
 800a72a:	f7f6 faed 	bl	8000d08 <__aeabi_uldivmod>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	4613      	mov	r3, r2
 800a734:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a73c:	d308      	bcc.n	800a750 <UART_SetConfig+0x430>
 800a73e:	6a3b      	ldr	r3, [r7, #32]
 800a740:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a744:	d204      	bcs.n	800a750 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6a3a      	ldr	r2, [r7, #32]
 800a74c:	60da      	str	r2, [r3, #12]
 800a74e:	e0ce      	b.n	800a8ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a756:	e0ca      	b.n	800a8ee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a760:	d166      	bne.n	800a830 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a762:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a766:	2b08      	cmp	r3, #8
 800a768:	d827      	bhi.n	800a7ba <UART_SetConfig+0x49a>
 800a76a:	a201      	add	r2, pc, #4	@ (adr r2, 800a770 <UART_SetConfig+0x450>)
 800a76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a770:	0800a795 	.word	0x0800a795
 800a774:	0800a79d 	.word	0x0800a79d
 800a778:	0800a7a5 	.word	0x0800a7a5
 800a77c:	0800a7bb 	.word	0x0800a7bb
 800a780:	0800a7ab 	.word	0x0800a7ab
 800a784:	0800a7bb 	.word	0x0800a7bb
 800a788:	0800a7bb 	.word	0x0800a7bb
 800a78c:	0800a7bb 	.word	0x0800a7bb
 800a790:	0800a7b3 	.word	0x0800a7b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a794:	f7fe fa54 	bl	8008c40 <HAL_RCC_GetPCLK1Freq>
 800a798:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a79a:	e014      	b.n	800a7c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a79c:	f7fe fa66 	bl	8008c6c <HAL_RCC_GetPCLK2Freq>
 800a7a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7a2:	e010      	b.n	800a7c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7a4:	4b4e      	ldr	r3, [pc, #312]	@ (800a8e0 <UART_SetConfig+0x5c0>)
 800a7a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7a8:	e00d      	b.n	800a7c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7aa:	f7fe f9db 	bl	8008b64 <HAL_RCC_GetSysClockFreq>
 800a7ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7b0:	e009      	b.n	800a7c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7b8:	e005      	b.n	800a7c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a7c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 8090 	beq.w	800a8ee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d2:	4a44      	ldr	r2, [pc, #272]	@ (800a8e4 <UART_SetConfig+0x5c4>)
 800a7d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7e0:	005a      	lsls	r2, r3, #1
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	085b      	lsrs	r3, r3, #1
 800a7e8:	441a      	add	r2, r3
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	2b0f      	cmp	r3, #15
 800a7f8:	d916      	bls.n	800a828 <UART_SetConfig+0x508>
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a800:	d212      	bcs.n	800a828 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	b29b      	uxth	r3, r3
 800a806:	f023 030f 	bic.w	r3, r3, #15
 800a80a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a80c:	6a3b      	ldr	r3, [r7, #32]
 800a80e:	085b      	lsrs	r3, r3, #1
 800a810:	b29b      	uxth	r3, r3
 800a812:	f003 0307 	and.w	r3, r3, #7
 800a816:	b29a      	uxth	r2, r3
 800a818:	8bfb      	ldrh	r3, [r7, #30]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	8bfa      	ldrh	r2, [r7, #30]
 800a824:	60da      	str	r2, [r3, #12]
 800a826:	e062      	b.n	800a8ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a82e:	e05e      	b.n	800a8ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a830:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a834:	2b08      	cmp	r3, #8
 800a836:	d828      	bhi.n	800a88a <UART_SetConfig+0x56a>
 800a838:	a201      	add	r2, pc, #4	@ (adr r2, 800a840 <UART_SetConfig+0x520>)
 800a83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83e:	bf00      	nop
 800a840:	0800a865 	.word	0x0800a865
 800a844:	0800a86d 	.word	0x0800a86d
 800a848:	0800a875 	.word	0x0800a875
 800a84c:	0800a88b 	.word	0x0800a88b
 800a850:	0800a87b 	.word	0x0800a87b
 800a854:	0800a88b 	.word	0x0800a88b
 800a858:	0800a88b 	.word	0x0800a88b
 800a85c:	0800a88b 	.word	0x0800a88b
 800a860:	0800a883 	.word	0x0800a883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a864:	f7fe f9ec 	bl	8008c40 <HAL_RCC_GetPCLK1Freq>
 800a868:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a86a:	e014      	b.n	800a896 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a86c:	f7fe f9fe 	bl	8008c6c <HAL_RCC_GetPCLK2Freq>
 800a870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a872:	e010      	b.n	800a896 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a874:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e0 <UART_SetConfig+0x5c0>)
 800a876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a878:	e00d      	b.n	800a896 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a87a:	f7fe f973 	bl	8008b64 <HAL_RCC_GetSysClockFreq>
 800a87e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a880:	e009      	b.n	800a896 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a888:	e005      	b.n	800a896 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a88a:	2300      	movs	r3, #0
 800a88c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a894:	bf00      	nop
    }

    if (pclk != 0U)
 800a896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d028      	beq.n	800a8ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a0:	4a10      	ldr	r2, [pc, #64]	@ (800a8e4 <UART_SetConfig+0x5c4>)
 800a8a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	085b      	lsrs	r3, r3, #1
 800a8b4:	441a      	add	r2, r3
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	2b0f      	cmp	r3, #15
 800a8c4:	d910      	bls.n	800a8e8 <UART_SetConfig+0x5c8>
 800a8c6:	6a3b      	ldr	r3, [r7, #32]
 800a8c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8cc:	d20c      	bcs.n	800a8e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	60da      	str	r2, [r3, #12]
 800a8d8:	e009      	b.n	800a8ee <UART_SetConfig+0x5ce>
 800a8da:	bf00      	nop
 800a8dc:	40008000 	.word	0x40008000
 800a8e0:	00f42400 	.word	0x00f42400
 800a8e4:	0801f82c 	.word	0x0801f82c
      }
      else
      {
        ret = HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2200      	movs	r2, #0
 800a902:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2200      	movs	r2, #0
 800a908:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a90a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3730      	adds	r7, #48	@ 0x30
 800a912:	46bd      	mov	sp, r7
 800a914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a924:	f003 0308 	and.w	r3, r3, #8
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00a      	beq.n	800a942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a968:	f003 0302 	and.w	r3, r3, #2
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00a      	beq.n	800a986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a98a:	f003 0304 	and.w	r3, r3, #4
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ac:	f003 0310 	and.w	r3, r3, #16
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00a      	beq.n	800a9ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ce:	f003 0320 	and.w	r3, r3, #32
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00a      	beq.n	800a9ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d01a      	beq.n	800aa2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa16:	d10a      	bne.n	800aa2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00a      	beq.n	800aa50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	605a      	str	r2, [r3, #4]
  }
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b098      	sub	sp, #96	@ 0x60
 800aa60:	af02      	add	r7, sp, #8
 800aa62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa6c:	f7f9 fe96 	bl	800479c <HAL_GetTick>
 800aa70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 0308 	and.w	r3, r3, #8
 800aa7c:	2b08      	cmp	r3, #8
 800aa7e:	d12f      	bne.n	800aae0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f88e 	bl	800abb0 <UART_WaitOnFlagUntilTimeout>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d022      	beq.n	800aae0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa2:	e853 3f00 	ldrex	r3, [r3]
 800aaa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aaa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaae:	653b      	str	r3, [r7, #80]	@ 0x50
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	461a      	mov	r2, r3
 800aab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aab8:	647b      	str	r3, [r7, #68]	@ 0x44
 800aaba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aabe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aac0:	e841 2300 	strex	r3, r2, [r1]
 800aac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1e6      	bne.n	800aa9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2220      	movs	r2, #32
 800aad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aadc:	2303      	movs	r3, #3
 800aade:	e063      	b.n	800aba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 0304 	and.w	r3, r3, #4
 800aaea:	2b04      	cmp	r3, #4
 800aaec:	d149      	bne.n	800ab82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f857 	bl	800abb0 <UART_WaitOnFlagUntilTimeout>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d03c      	beq.n	800ab82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab10:	e853 3f00 	ldrex	r3, [r3]
 800ab14:	623b      	str	r3, [r7, #32]
   return(result);
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	461a      	mov	r2, r3
 800ab24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab26:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab2e:	e841 2300 	strex	r3, r2, [r1]
 800ab32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d1e6      	bne.n	800ab08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3308      	adds	r3, #8
 800ab40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	e853 3f00 	ldrex	r3, [r3]
 800ab48:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f023 0301 	bic.w	r3, r3, #1
 800ab50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3308      	adds	r3, #8
 800ab58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab5a:	61fa      	str	r2, [r7, #28]
 800ab5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5e:	69b9      	ldr	r1, [r7, #24]
 800ab60:	69fa      	ldr	r2, [r7, #28]
 800ab62:	e841 2300 	strex	r3, r2, [r1]
 800ab66:	617b      	str	r3, [r7, #20]
   return(result);
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1e5      	bne.n	800ab3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2220      	movs	r2, #32
 800ab72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e012      	b.n	800aba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2220      	movs	r2, #32
 800ab86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3758      	adds	r7, #88	@ 0x58
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	603b      	str	r3, [r7, #0]
 800abbc:	4613      	mov	r3, r2
 800abbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abc0:	e04f      	b.n	800ac62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abc8:	d04b      	beq.n	800ac62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abca:	f7f9 fde7 	bl	800479c <HAL_GetTick>
 800abce:	4602      	mov	r2, r0
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	69ba      	ldr	r2, [r7, #24]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d302      	bcc.n	800abe0 <UART_WaitOnFlagUntilTimeout+0x30>
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d101      	bne.n	800abe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e04e      	b.n	800ac82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0304 	and.w	r3, r3, #4
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d037      	beq.n	800ac62 <UART_WaitOnFlagUntilTimeout+0xb2>
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2b80      	cmp	r3, #128	@ 0x80
 800abf6:	d034      	beq.n	800ac62 <UART_WaitOnFlagUntilTimeout+0xb2>
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2b40      	cmp	r3, #64	@ 0x40
 800abfc:	d031      	beq.n	800ac62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	69db      	ldr	r3, [r3, #28]
 800ac04:	f003 0308 	and.w	r3, r3, #8
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d110      	bne.n	800ac2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2208      	movs	r2, #8
 800ac12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f000 f920 	bl	800ae5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2208      	movs	r2, #8
 800ac1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e029      	b.n	800ac82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac3c:	d111      	bne.n	800ac62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 f906 	bl	800ae5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2220      	movs	r2, #32
 800ac52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e00f      	b.n	800ac82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	69da      	ldr	r2, [r3, #28]
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	bf0c      	ite	eq
 800ac72:	2301      	moveq	r3, #1
 800ac74:	2300      	movne	r3, #0
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	461a      	mov	r2, r3
 800ac7a:	79fb      	ldrb	r3, [r7, #7]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d0a0      	beq.n	800abc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
	...

0800ac8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b096      	sub	sp, #88	@ 0x58
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	4613      	mov	r3, r2
 800ac98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	88fa      	ldrh	r2, [r7, #6]
 800aca4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2222      	movs	r2, #34	@ 0x22
 800acb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d02d      	beq.n	800ad1e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acc8:	4a40      	ldr	r2, [pc, #256]	@ (800adcc <UART_Start_Receive_DMA+0x140>)
 800acca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acd2:	4a3f      	ldr	r2, [pc, #252]	@ (800add0 <UART_Start_Receive_DMA+0x144>)
 800acd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acdc:	4a3d      	ldr	r2, [pc, #244]	@ (800add4 <UART_Start_Receive_DMA+0x148>)
 800acde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ace6:	2200      	movs	r2, #0
 800ace8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3324      	adds	r3, #36	@ 0x24
 800acf6:	4619      	mov	r1, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acfc:	461a      	mov	r2, r3
 800acfe:	88fb      	ldrh	r3, [r7, #6]
 800ad00:	f7fb fe16 	bl	8006930 <HAL_DMA_Start_IT>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d009      	beq.n	800ad1e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2210      	movs	r2, #16
 800ad0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2220      	movs	r2, #32
 800ad16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e051      	b.n	800adc2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d018      	beq.n	800ad58 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad2e:	e853 3f00 	ldrex	r3, [r3]
 800ad32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad3a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	461a      	mov	r2, r3
 800ad42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad46:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad48:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ad4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad4c:	e841 2300 	strex	r3, r2, [r1]
 800ad50:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ad52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e6      	bne.n	800ad26 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3308      	adds	r3, #8
 800ad5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6a:	f043 0301 	orr.w	r3, r3, #1
 800ad6e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3308      	adds	r3, #8
 800ad76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad78:	637a      	str	r2, [r7, #52]	@ 0x34
 800ad7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ad86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e5      	bne.n	800ad58 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3308      	adds	r3, #8
 800ad92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	e853 3f00 	ldrex	r3, [r3]
 800ad9a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ada2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3308      	adds	r3, #8
 800adaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800adac:	623a      	str	r2, [r7, #32]
 800adae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb0:	69f9      	ldr	r1, [r7, #28]
 800adb2:	6a3a      	ldr	r2, [r7, #32]
 800adb4:	e841 2300 	strex	r3, r2, [r1]
 800adb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1e5      	bne.n	800ad8c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3758      	adds	r7, #88	@ 0x58
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	0800afdd 	.word	0x0800afdd
 800add0:	0800b109 	.word	0x0800b109
 800add4:	0800b147 	.word	0x0800b147

0800add8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800add8:	b480      	push	{r7}
 800adda:	b08f      	sub	sp, #60	@ 0x3c
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade6:	6a3b      	ldr	r3, [r7, #32]
 800ade8:	e853 3f00 	ldrex	r3, [r3]
 800adec:	61fb      	str	r3, [r7, #28]
   return(result);
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800adf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae00:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae06:	e841 2300 	strex	r3, r2, [r1]
 800ae0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1e6      	bne.n	800ade0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3308      	adds	r3, #8
 800ae18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	e853 3f00 	ldrex	r3, [r3]
 800ae20:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ae28:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3308      	adds	r3, #8
 800ae30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae32:	61ba      	str	r2, [r7, #24]
 800ae34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae36:	6979      	ldr	r1, [r7, #20]
 800ae38:	69ba      	ldr	r2, [r7, #24]
 800ae3a:	e841 2300 	strex	r3, r2, [r1]
 800ae3e:	613b      	str	r3, [r7, #16]
   return(result);
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1e5      	bne.n	800ae12 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2220      	movs	r2, #32
 800ae4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ae4e:	bf00      	nop
 800ae50:	373c      	adds	r7, #60	@ 0x3c
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr

0800ae5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae5a:	b480      	push	{r7}
 800ae5c:	b095      	sub	sp, #84	@ 0x54
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae6a:	e853 3f00 	ldrex	r3, [r3]
 800ae6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae80:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae88:	e841 2300 	strex	r3, r2, [r1]
 800ae8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1e6      	bne.n	800ae62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3308      	adds	r3, #8
 800ae9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	e853 3f00 	ldrex	r3, [r3]
 800aea2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aeaa:	f023 0301 	bic.w	r3, r3, #1
 800aeae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aeb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aeba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aec0:	e841 2300 	strex	r3, r2, [r1]
 800aec4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e3      	bne.n	800ae94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d118      	bne.n	800af06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	e853 3f00 	ldrex	r3, [r3]
 800aee0:	60bb      	str	r3, [r7, #8]
   return(result);
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f023 0310 	bic.w	r3, r3, #16
 800aee8:	647b      	str	r3, [r7, #68]	@ 0x44
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aef2:	61bb      	str	r3, [r7, #24]
 800aef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef6:	6979      	ldr	r1, [r7, #20]
 800aef8:	69ba      	ldr	r2, [r7, #24]
 800aefa:	e841 2300 	strex	r3, r2, [r1]
 800aefe:	613b      	str	r3, [r7, #16]
   return(result);
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1e6      	bne.n	800aed4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2220      	movs	r2, #32
 800af0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af1a:	bf00      	nop
 800af1c:	3754      	adds	r7, #84	@ 0x54
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b090      	sub	sp, #64	@ 0x40
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af32:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 0320 	and.w	r3, r3, #32
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d137      	bne.n	800afb2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800af42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af44:	2200      	movs	r2, #0
 800af46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	3308      	adds	r3, #8
 800af50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af54:	e853 3f00 	ldrex	r3, [r3]
 800af58:	623b      	str	r3, [r7, #32]
   return(result);
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af60:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3308      	adds	r3, #8
 800af68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af6a:	633a      	str	r2, [r7, #48]	@ 0x30
 800af6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af72:	e841 2300 	strex	r3, r2, [r1]
 800af76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1e5      	bne.n	800af4a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	e853 3f00 	ldrex	r3, [r3]
 800af8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af92:	637b      	str	r3, [r7, #52]	@ 0x34
 800af94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	461a      	mov	r2, r3
 800af9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af9c:	61fb      	str	r3, [r7, #28]
 800af9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa0:	69b9      	ldr	r1, [r7, #24]
 800afa2:	69fa      	ldr	r2, [r7, #28]
 800afa4:	e841 2300 	strex	r3, r2, [r1]
 800afa8:	617b      	str	r3, [r7, #20]
   return(result);
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1e6      	bne.n	800af7e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afb0:	e002      	b.n	800afb8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800afb2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800afb4:	f7ff f976 	bl	800a2a4 <HAL_UART_TxCpltCallback>
}
 800afb8:	bf00      	nop
 800afba:	3740      	adds	r7, #64	@ 0x40
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afcc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f7ff f972 	bl	800a2b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afd4:	bf00      	nop
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b09c      	sub	sp, #112	@ 0x70
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 0320 	and.w	r3, r3, #32
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d171      	bne.n	800b0dc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800aff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800affa:	2200      	movs	r2, #0
 800affc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b008:	e853 3f00 	ldrex	r3, [r3]
 800b00c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b00e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b014:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b01e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b020:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b022:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b024:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b026:	e841 2300 	strex	r3, r2, [r1]
 800b02a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b02c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1e6      	bne.n	800b000 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	3308      	adds	r3, #8
 800b038:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03c:	e853 3f00 	ldrex	r3, [r3]
 800b040:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b044:	f023 0301 	bic.w	r3, r3, #1
 800b048:	667b      	str	r3, [r7, #100]	@ 0x64
 800b04a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3308      	adds	r3, #8
 800b050:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b052:	647a      	str	r2, [r7, #68]	@ 0x44
 800b054:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b056:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b05a:	e841 2300 	strex	r3, r2, [r1]
 800b05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1e5      	bne.n	800b032 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b066:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3308      	adds	r3, #8
 800b06c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b070:	e853 3f00 	ldrex	r3, [r3]
 800b074:	623b      	str	r3, [r7, #32]
   return(result);
 800b076:	6a3b      	ldr	r3, [r7, #32]
 800b078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b07c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b07e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3308      	adds	r3, #8
 800b084:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b086:	633a      	str	r2, [r7, #48]	@ 0x30
 800b088:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b08c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b08e:	e841 2300 	strex	r3, r2, [r1]
 800b092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1e5      	bne.n	800b066 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b09a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b09c:	2220      	movs	r2, #32
 800b09e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d118      	bne.n	800b0dc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	e853 3f00 	ldrex	r3, [r3]
 800b0b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 0310 	bic.w	r3, r3, #16
 800b0be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0c8:	61fb      	str	r3, [r7, #28]
 800b0ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0cc:	69b9      	ldr	r1, [r7, #24]
 800b0ce:	69fa      	ldr	r2, [r7, #28]
 800b0d0:	e841 2300 	strex	r3, r2, [r1]
 800b0d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1e6      	bne.n	800b0aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0de:	2200      	movs	r2, #0
 800b0e0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d107      	bne.n	800b0fa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b0f4:	f7ff f908 	bl	800a308 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0f8:	e002      	b.n	800b100 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b0fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b0fc:	f7ff f8e6 	bl	800a2cc <HAL_UART_RxCpltCallback>
}
 800b100:	bf00      	nop
 800b102:	3770      	adds	r7, #112	@ 0x70
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b114:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2201      	movs	r2, #1
 800b11a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b120:	2b01      	cmp	r3, #1
 800b122:	d109      	bne.n	800b138 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b12a:	085b      	lsrs	r3, r3, #1
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	4619      	mov	r1, r3
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7ff f8e9 	bl	800a308 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b136:	e002      	b.n	800b13e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7ff f8d1 	bl	800a2e0 <HAL_UART_RxHalfCpltCallback>
}
 800b13e:	bf00      	nop
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b086      	sub	sp, #24
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b152:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b15a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b162:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b16e:	2b80      	cmp	r3, #128	@ 0x80
 800b170:	d109      	bne.n	800b186 <UART_DMAError+0x40>
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	2b21      	cmp	r3, #33	@ 0x21
 800b176:	d106      	bne.n	800b186 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b180:	6978      	ldr	r0, [r7, #20]
 800b182:	f7ff fe29 	bl	800add8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b190:	2b40      	cmp	r3, #64	@ 0x40
 800b192:	d109      	bne.n	800b1a8 <UART_DMAError+0x62>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2b22      	cmp	r3, #34	@ 0x22
 800b198:	d106      	bne.n	800b1a8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b1a2:	6978      	ldr	r0, [r7, #20]
 800b1a4:	f7ff fe59 	bl	800ae5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ae:	f043 0210 	orr.w	r2, r3, #16
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1b8:	6978      	ldr	r0, [r7, #20]
 800b1ba:	f7ff f89b 	bl	800a2f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1be:	bf00      	nop
 800b1c0:	3718      	adds	r7, #24
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f7ff f889 	bl	800a2f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1e2:	bf00      	nop
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b088      	sub	sp, #32
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	e853 3f00 	ldrex	r3, [r3]
 800b1fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b206:	61fb      	str	r3, [r7, #28]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	461a      	mov	r2, r3
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	61bb      	str	r3, [r7, #24]
 800b212:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b214:	6979      	ldr	r1, [r7, #20]
 800b216:	69ba      	ldr	r2, [r7, #24]
 800b218:	e841 2300 	strex	r3, r2, [r1]
 800b21c:	613b      	str	r3, [r7, #16]
   return(result);
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1e6      	bne.n	800b1f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2220      	movs	r2, #32
 800b228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7ff f836 	bl	800a2a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b238:	bf00      	nop
 800b23a:	3720      	adds	r7, #32
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d101      	bne.n	800b292 <HAL_UARTEx_DisableFifoMode+0x16>
 800b28e:	2302      	movs	r3, #2
 800b290:	e027      	b.n	800b2e2 <HAL_UARTEx_DisableFifoMode+0x66>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2201      	movs	r2, #1
 800b296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2224      	movs	r2, #36	@ 0x24
 800b29e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f022 0201 	bic.w	r2, r2, #1
 800b2b8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b2c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2220      	movs	r2, #32
 800b2d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3714      	adds	r7, #20
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr

0800b2ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b084      	sub	sp, #16
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d101      	bne.n	800b306 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b302:	2302      	movs	r3, #2
 800b304:	e02d      	b.n	800b362 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2224      	movs	r2, #36	@ 0x24
 800b312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f022 0201 	bic.w	r2, r2, #1
 800b32c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	683a      	ldr	r2, [r7, #0]
 800b33e:	430a      	orrs	r2, r1
 800b340:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f850 	bl	800b3e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2220      	movs	r2, #32
 800b354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d101      	bne.n	800b382 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b37e:	2302      	movs	r3, #2
 800b380:	e02d      	b.n	800b3de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2224      	movs	r2, #36	@ 0x24
 800b38e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f022 0201 	bic.w	r2, r2, #1
 800b3a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	430a      	orrs	r2, r1
 800b3bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f812 	bl	800b3e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2220      	movs	r2, #32
 800b3d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
	...

0800b3e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d108      	bne.n	800b40a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b408:	e031      	b.n	800b46e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b40a:	2308      	movs	r3, #8
 800b40c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b40e:	2308      	movs	r3, #8
 800b410:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	0e5b      	lsrs	r3, r3, #25
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	f003 0307 	and.w	r3, r3, #7
 800b420:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	0f5b      	lsrs	r3, r3, #29
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	f003 0307 	and.w	r3, r3, #7
 800b430:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b432:	7bbb      	ldrb	r3, [r7, #14]
 800b434:	7b3a      	ldrb	r2, [r7, #12]
 800b436:	4911      	ldr	r1, [pc, #68]	@ (800b47c <UARTEx_SetNbDataToProcess+0x94>)
 800b438:	5c8a      	ldrb	r2, [r1, r2]
 800b43a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b43e:	7b3a      	ldrb	r2, [r7, #12]
 800b440:	490f      	ldr	r1, [pc, #60]	@ (800b480 <UARTEx_SetNbDataToProcess+0x98>)
 800b442:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b444:	fb93 f3f2 	sdiv	r3, r3, r2
 800b448:	b29a      	uxth	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	7b7a      	ldrb	r2, [r7, #13]
 800b454:	4909      	ldr	r1, [pc, #36]	@ (800b47c <UARTEx_SetNbDataToProcess+0x94>)
 800b456:	5c8a      	ldrb	r2, [r1, r2]
 800b458:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b45c:	7b7a      	ldrb	r2, [r7, #13]
 800b45e:	4908      	ldr	r1, [pc, #32]	@ (800b480 <UARTEx_SetNbDataToProcess+0x98>)
 800b460:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b462:	fb93 f3f2 	sdiv	r3, r3, r2
 800b466:	b29a      	uxth	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b46e:	bf00      	nop
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	0801f844 	.word	0x0801f844
 800b480:	0801f84c 	.word	0x0801f84c

0800b484 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af04      	add	r7, sp, #16
 800b48a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800b48c:	2364      	movs	r3, #100	@ 0x64
 800b48e:	9302      	str	r3, [sp, #8]
 800b490:	2301      	movs	r3, #1
 800b492:	9301      	str	r3, [sp, #4]
 800b494:	f107 030f 	add.w	r3, r7, #15
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	2301      	movs	r3, #1
 800b49c:	2275      	movs	r2, #117	@ 0x75
 800b49e:	21d0      	movs	r1, #208	@ 0xd0
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7fc f97f 	bl	80077a4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800b4a6:	7bfb      	ldrb	r3, [r7, #15]
 800b4a8:	2b68      	cmp	r3, #104	@ 0x68
 800b4aa:	d13d      	bne.n	800b528 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800b4b0:	2364      	movs	r3, #100	@ 0x64
 800b4b2:	9302      	str	r3, [sp, #8]
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	f107 030e 	add.w	r3, r7, #14
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	2301      	movs	r3, #1
 800b4c0:	226b      	movs	r2, #107	@ 0x6b
 800b4c2:	21d0      	movs	r1, #208	@ 0xd0
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7fc f859 	bl	800757c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800b4ca:	2307      	movs	r3, #7
 800b4cc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800b4ce:	2364      	movs	r3, #100	@ 0x64
 800b4d0:	9302      	str	r3, [sp, #8]
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	f107 030e 	add.w	r3, r7, #14
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	2301      	movs	r3, #1
 800b4de:	2219      	movs	r2, #25
 800b4e0:	21d0      	movs	r1, #208	@ 0xd0
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f7fc f84a 	bl	800757c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800b4ec:	2364      	movs	r3, #100	@ 0x64
 800b4ee:	9302      	str	r3, [sp, #8]
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	f107 030e 	add.w	r3, r7, #14
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	221c      	movs	r2, #28
 800b4fe:	21d0      	movs	r1, #208	@ 0xd0
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7fc f83b 	bl	800757c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800b506:	2300      	movs	r3, #0
 800b508:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800b50a:	2364      	movs	r3, #100	@ 0x64
 800b50c:	9302      	str	r3, [sp, #8]
 800b50e:	2301      	movs	r3, #1
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	f107 030e 	add.w	r3, r7, #14
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	2301      	movs	r3, #1
 800b51a:	221b      	movs	r2, #27
 800b51c:	21d0      	movs	r1, #208	@ 0xd0
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f7fc f82c 	bl	800757c <HAL_I2C_Mem_Write>
        return 0;
 800b524:	2300      	movs	r3, #0
 800b526:	e000      	b.n	800b52a <MPU6050_Init+0xa6>
    }
    return 1;
 800b528:	2301      	movs	r3, #1
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	0000      	movs	r0, r0
 800b534:	0000      	movs	r0, r0
	...

0800b538 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 800b538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b53c:	b094      	sub	sp, #80	@ 0x50
 800b53e:	af04      	add	r7, sp, #16
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800b544:	2364      	movs	r3, #100	@ 0x64
 800b546:	9302      	str	r3, [sp, #8]
 800b548:	230e      	movs	r3, #14
 800b54a:	9301      	str	r3, [sp, #4]
 800b54c:	f107 0308 	add.w	r3, r7, #8
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	2301      	movs	r3, #1
 800b554:	223b      	movs	r2, #59	@ 0x3b
 800b556:	21d0      	movs	r1, #208	@ 0xd0
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7fc f923 	bl	80077a4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800b55e:	7a3b      	ldrb	r3, [r7, #8]
 800b560:	021b      	lsls	r3, r3, #8
 800b562:	b21a      	sxth	r2, r3
 800b564:	7a7b      	ldrb	r3, [r7, #9]
 800b566:	b21b      	sxth	r3, r3
 800b568:	4313      	orrs	r3, r2
 800b56a:	b21a      	sxth	r2, r3
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800b570:	7abb      	ldrb	r3, [r7, #10]
 800b572:	021b      	lsls	r3, r3, #8
 800b574:	b21a      	sxth	r2, r3
 800b576:	7afb      	ldrb	r3, [r7, #11]
 800b578:	b21b      	sxth	r3, r3
 800b57a:	4313      	orrs	r3, r2
 800b57c:	b21a      	sxth	r2, r3
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800b582:	7b3b      	ldrb	r3, [r7, #12]
 800b584:	021b      	lsls	r3, r3, #8
 800b586:	b21a      	sxth	r2, r3
 800b588:	7b7b      	ldrb	r3, [r7, #13]
 800b58a:	b21b      	sxth	r3, r3
 800b58c:	4313      	orrs	r3, r2
 800b58e:	b21a      	sxth	r2, r3
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800b594:	7bbb      	ldrb	r3, [r7, #14]
 800b596:	021b      	lsls	r3, r3, #8
 800b598:	b21a      	sxth	r2, r3
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
 800b59c:	b21b      	sxth	r3, r3
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800b5a2:	7c3b      	ldrb	r3, [r7, #16]
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	b21a      	sxth	r2, r3
 800b5a8:	7c7b      	ldrb	r3, [r7, #17]
 800b5aa:	b21b      	sxth	r3, r3
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	b21a      	sxth	r2, r3
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800b5b4:	7cbb      	ldrb	r3, [r7, #18]
 800b5b6:	021b      	lsls	r3, r3, #8
 800b5b8:	b21a      	sxth	r2, r3
 800b5ba:	7cfb      	ldrb	r3, [r7, #19]
 800b5bc:	b21b      	sxth	r3, r3
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	b21a      	sxth	r2, r3
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800b5c6:	7d3b      	ldrb	r3, [r7, #20]
 800b5c8:	021b      	lsls	r3, r3, #8
 800b5ca:	b21a      	sxth	r2, r3
 800b5cc:	7d7b      	ldrb	r3, [r7, #21]
 800b5ce:	b21b      	sxth	r3, r3
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	b21a      	sxth	r2, r3
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7f4 ffd8 	bl	8000594 <__aeabi_i2d>
 800b5e4:	f04f 0200 	mov.w	r2, #0
 800b5e8:	4bbd      	ldr	r3, [pc, #756]	@ (800b8e0 <MPU6050_Read_All+0x3a8>)
 800b5ea:	f7f5 f967 	bl	80008bc <__aeabi_ddiv>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	6839      	ldr	r1, [r7, #0]
 800b5f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7f4 ffc8 	bl	8000594 <__aeabi_i2d>
 800b604:	f04f 0200 	mov.w	r2, #0
 800b608:	4bb5      	ldr	r3, [pc, #724]	@ (800b8e0 <MPU6050_Read_All+0x3a8>)
 800b60a:	f7f5 f957 	bl	80008bc <__aeabi_ddiv>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b61e:	4618      	mov	r0, r3
 800b620:	f7f4 ffb8 	bl	8000594 <__aeabi_i2d>
 800b624:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b8c8 <MPU6050_Read_All+0x390>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	f7f5 f947 	bl	80008bc <__aeabi_ddiv>
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 800b638:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b63c:	ee07 3a90 	vmov	s15, r3
 800b640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b644:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 800b8e4 <MPU6050_Read_All+0x3ac>
 800b648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b64c:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 800b8e8 <MPU6050_Read_All+0x3b0>
 800b650:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800b660:	4618      	mov	r0, r3
 800b662:	f7f4 ff97 	bl	8000594 <__aeabi_i2d>
 800b666:	a39a      	add	r3, pc, #616	@ (adr r3, 800b8d0 <MPU6050_Read_All+0x398>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	f7f5 f926 	bl	80008bc <__aeabi_ddiv>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	6839      	ldr	r1, [r7, #0]
 800b676:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800b680:	4618      	mov	r0, r3
 800b682:	f7f4 ff87 	bl	8000594 <__aeabi_i2d>
 800b686:	a392      	add	r3, pc, #584	@ (adr r3, 800b8d0 <MPU6050_Read_All+0x398>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	f7f5 f916 	bl	80008bc <__aeabi_ddiv>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	6839      	ldr	r1, [r7, #0]
 800b696:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7f4 ff77 	bl	8000594 <__aeabi_i2d>
 800b6a6:	a38a      	add	r3, pc, #552	@ (adr r3, 800b8d0 <MPU6050_Read_All+0x398>)
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	f7f5 f906 	bl	80008bc <__aeabi_ddiv>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800b6ba:	f7f9 f86f 	bl	800479c <HAL_GetTick>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	4b8a      	ldr	r3, [pc, #552]	@ (800b8ec <MPU6050_Read_All+0x3b4>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7f4 ff54 	bl	8000574 <__aeabi_ui2d>
 800b6cc:	f04f 0200 	mov.w	r2, #0
 800b6d0:	4b87      	ldr	r3, [pc, #540]	@ (800b8f0 <MPU6050_Read_All+0x3b8>)
 800b6d2:	f7f5 f8f3 	bl	80008bc <__aeabi_ddiv>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	460b      	mov	r3, r1
 800b6da:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 800b6de:	f7f9 f85d 	bl	800479c <HAL_GetTick>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	4a81      	ldr	r2, [pc, #516]	@ (800b8ec <MPU6050_Read_All+0x3b4>)
 800b6e6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6f6:	fb03 f202 	mul.w	r2, r3, r2
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b700:	4619      	mov	r1, r3
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b708:	fb01 f303 	mul.w	r3, r1, r3
 800b70c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800b70e:	4618      	mov	r0, r3
 800b710:	f7f4 ff40 	bl	8000594 <__aeabi_i2d>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	ec43 2b10 	vmov	d0, r2, r3
 800b71c:	f013 fc3c 	bl	801ef98 <sqrt>
 800b720:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 800b724:	f04f 0200 	mov.w	r2, #0
 800b728:	f04f 0300 	mov.w	r3, #0
 800b72c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b730:	f7f5 fa02 	bl	8000b38 <__aeabi_dcmpeq>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d11f      	bne.n	800b77a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b740:	4618      	mov	r0, r3
 800b742:	f7f4 ff27 	bl	8000594 <__aeabi_i2d>
 800b746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b74a:	f7f5 f8b7 	bl	80008bc <__aeabi_ddiv>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	ec43 2b17 	vmov	d7, r2, r3
 800b756:	eeb0 0a47 	vmov.f32	s0, s14
 800b75a:	eef0 0a67 	vmov.f32	s1, s15
 800b75e:	f013 fc47 	bl	801eff0 <atan>
 800b762:	ec51 0b10 	vmov	r0, r1, d0
 800b766:	a35c      	add	r3, pc, #368	@ (adr r3, 800b8d8 <MPU6050_Read_All+0x3a0>)
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	f7f4 ff7c 	bl	8000668 <__aeabi_dmul>
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800b778:	e005      	b.n	800b786 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800b77a:	f04f 0200 	mov.w	r2, #0
 800b77e:	f04f 0300 	mov.w	r3, #0
 800b782:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b78c:	425b      	negs	r3, r3
 800b78e:	4618      	mov	r0, r3
 800b790:	f7f4 ff00 	bl	8000594 <__aeabi_i2d>
 800b794:	4682      	mov	sl, r0
 800b796:	468b      	mov	fp, r1
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7f4 fef8 	bl	8000594 <__aeabi_i2d>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	ec43 2b11 	vmov	d1, r2, r3
 800b7ac:	ec4b ab10 	vmov	d0, sl, fp
 800b7b0:	f013 fbf0 	bl	801ef94 <atan2>
 800b7b4:	ec51 0b10 	vmov	r0, r1, d0
 800b7b8:	a347      	add	r3, pc, #284	@ (adr r3, 800b8d8 <MPU6050_Read_All+0x3a0>)
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f7f4 ff53 	bl	8000668 <__aeabi_dmul>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800b7ca:	f04f 0200 	mov.w	r2, #0
 800b7ce:	4b49      	ldr	r3, [pc, #292]	@ (800b8f4 <MPU6050_Read_All+0x3bc>)
 800b7d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b7d4:	f7f5 f9ba 	bl	8000b4c <__aeabi_dcmplt>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00a      	beq.n	800b7f4 <MPU6050_Read_All+0x2bc>
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800b7e4:	f04f 0200 	mov.w	r2, #0
 800b7e8:	4b43      	ldr	r3, [pc, #268]	@ (800b8f8 <MPU6050_Read_All+0x3c0>)
 800b7ea:	f7f5 f9cd 	bl	8000b88 <__aeabi_dcmpgt>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d114      	bne.n	800b81e <MPU6050_Read_All+0x2e6>
 800b7f4:	f04f 0200 	mov.w	r2, #0
 800b7f8:	4b3f      	ldr	r3, [pc, #252]	@ (800b8f8 <MPU6050_Read_All+0x3c0>)
 800b7fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b7fe:	f7f5 f9c3 	bl	8000b88 <__aeabi_dcmpgt>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d015      	beq.n	800b834 <MPU6050_Read_All+0x2fc>
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800b80e:	f04f 0200 	mov.w	r2, #0
 800b812:	4b38      	ldr	r3, [pc, #224]	@ (800b8f4 <MPU6050_Read_All+0x3bc>)
 800b814:	f7f5 f99a 	bl	8000b4c <__aeabi_dcmplt>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00a      	beq.n	800b834 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800b81e:	4937      	ldr	r1, [pc, #220]	@ (800b8fc <MPU6050_Read_All+0x3c4>)
 800b820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b824:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b82e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800b832:	e014      	b.n	800b85e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800b83a:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800b83e:	eeb0 1a47 	vmov.f32	s2, s14
 800b842:	eef0 1a67 	vmov.f32	s3, s15
 800b846:	ed97 0b06 	vldr	d0, [r7, #24]
 800b84a:	482c      	ldr	r0, [pc, #176]	@ (800b8fc <MPU6050_Read_All+0x3c4>)
 800b84c:	f000 f85a 	bl	800b904 <Kalman_getAngle>
 800b850:	eeb0 7a40 	vmov.f32	s14, s0
 800b854:	eef0 7a60 	vmov.f32	s15, s1
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800b864:	4690      	mov	r8, r2
 800b866:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800b86a:	f04f 0200 	mov.w	r2, #0
 800b86e:	4b22      	ldr	r3, [pc, #136]	@ (800b8f8 <MPU6050_Read_All+0x3c0>)
 800b870:	4640      	mov	r0, r8
 800b872:	4649      	mov	r1, r9
 800b874:	f7f5 f988 	bl	8000b88 <__aeabi_dcmpgt>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d008      	beq.n	800b890 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800b884:	4614      	mov	r4, r2
 800b886:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800b896:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800b89a:	eeb0 1a47 	vmov.f32	s2, s14
 800b89e:	eef0 1a67 	vmov.f32	s3, s15
 800b8a2:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800b8a6:	4816      	ldr	r0, [pc, #88]	@ (800b900 <MPU6050_Read_All+0x3c8>)
 800b8a8:	f000 f82c 	bl	800b904 <Kalman_getAngle>
 800b8ac:	eeb0 7a40 	vmov.f32	s14, s0
 800b8b0:	eef0 7a60 	vmov.f32	s15, s1
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800b8ba:	bf00      	nop
 800b8bc:	3740      	adds	r7, #64	@ 0x40
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8c4:	f3af 8000 	nop.w
 800b8c8:	00000000 	.word	0x00000000
 800b8cc:	40cc2900 	.word	0x40cc2900
 800b8d0:	00000000 	.word	0x00000000
 800b8d4:	40606000 	.word	0x40606000
 800b8d8:	1a63c1f8 	.word	0x1a63c1f8
 800b8dc:	404ca5dc 	.word	0x404ca5dc
 800b8e0:	40d00000 	.word	0x40d00000
 800b8e4:	43aa0000 	.word	0x43aa0000
 800b8e8:	42121eb8 	.word	0x42121eb8
 800b8ec:	20005a80 	.word	0x20005a80
 800b8f0:	408f4000 	.word	0x408f4000
 800b8f4:	c0568000 	.word	0xc0568000
 800b8f8:	40568000 	.word	0x40568000
 800b8fc:	20000058 	.word	0x20000058
 800b900:	20000010 	.word	0x20000010

0800b904 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800b904:	b5b0      	push	{r4, r5, r7, lr}
 800b906:	b096      	sub	sp, #88	@ 0x58
 800b908:	af00      	add	r7, sp, #0
 800b90a:	61f8      	str	r0, [r7, #28]
 800b90c:	ed87 0b04 	vstr	d0, [r7, #16]
 800b910:	ed87 1b02 	vstr	d1, [r7, #8]
 800b914:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b91e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b922:	f7f4 fce9 	bl	80002f8 <__aeabi_dsub>
 800b926:	4602      	mov	r2, r0
 800b928:	460b      	mov	r3, r1
 800b92a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800b934:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b93c:	f7f4 fe94 	bl	8000668 <__aeabi_dmul>
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	4620      	mov	r0, r4
 800b946:	4629      	mov	r1, r5
 800b948:	f7f4 fcd8 	bl	80002fc <__adddf3>
 800b94c:	4602      	mov	r2, r0
 800b94e:	460b      	mov	r3, r1
 800b950:	69f9      	ldr	r1, [r7, #28]
 800b952:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800b962:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b966:	f7f4 fe7f 	bl	8000668 <__aeabi_dmul>
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
 800b96e:	4610      	mov	r0, r2
 800b970:	4619      	mov	r1, r3
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800b978:	f7f4 fcbe 	bl	80002f8 <__aeabi_dsub>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4610      	mov	r0, r2
 800b982:	4619      	mov	r1, r3
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b98a:	f7f4 fcb5 	bl	80002f8 <__aeabi_dsub>
 800b98e:	4602      	mov	r2, r0
 800b990:	460b      	mov	r3, r1
 800b992:	4610      	mov	r0, r2
 800b994:	4619      	mov	r1, r3
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	f7f4 fcae 	bl	80002fc <__adddf3>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9ac:	f7f4 fe5c 	bl	8000668 <__aeabi_dmul>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7f4 fca0 	bl	80002fc <__adddf3>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	69f9      	ldr	r1, [r7, #28]
 800b9c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800b9d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9d6:	f7f4 fe47 	bl	8000668 <__aeabi_dmul>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4620      	mov	r0, r4
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	f7f4 fc89 	bl	80002f8 <__aeabi_dsub>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	69f9      	ldr	r1, [r7, #28]
 800b9ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800b9fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba00:	f7f4 fe32 	bl	8000668 <__aeabi_dmul>
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	4620      	mov	r0, r4
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	f7f4 fc74 	bl	80002f8 <__aeabi_dsub>
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	69f9      	ldr	r1, [r7, #28]
 800ba16:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ba26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba2a:	f7f4 fe1d 	bl	8000668 <__aeabi_dmul>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	4620      	mov	r0, r4
 800ba34:	4629      	mov	r1, r5
 800ba36:	f7f4 fc61 	bl	80002fc <__adddf3>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	69f9      	ldr	r1, [r7, #28]
 800ba40:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ba50:	f7f4 fc54 	bl	80002fc <__adddf3>
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800ba62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ba66:	f7f4 ff29 	bl	80008bc <__aeabi_ddiv>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ba78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ba7c:	f7f4 ff1e 	bl	80008bc <__aeabi_ddiv>
 800ba80:	4602      	mov	r2, r0
 800ba82:	460b      	mov	r3, r1
 800ba84:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800ba8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ba92:	f7f4 fc31 	bl	80002f8 <__aeabi_dsub>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800baa4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800baa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800baac:	f7f4 fddc 	bl	8000668 <__aeabi_dmul>
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	4620      	mov	r0, r4
 800bab6:	4629      	mov	r1, r5
 800bab8:	f7f4 fc20 	bl	80002fc <__adddf3>
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	69f9      	ldr	r1, [r7, #28]
 800bac2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800bacc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bad0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bad4:	f7f4 fdc8 	bl	8000668 <__aeabi_dmul>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	4620      	mov	r0, r4
 800bade:	4629      	mov	r1, r5
 800bae0:	f7f4 fc0c 	bl	80002fc <__adddf3>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	69f9      	ldr	r1, [r7, #28]
 800baea:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800baf4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800bafe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800bb08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bb0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bb10:	f7f4 fdaa 	bl	8000668 <__aeabi_dmul>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4620      	mov	r0, r4
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	f7f4 fbec 	bl	80002f8 <__aeabi_dsub>
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	69f9      	ldr	r1, [r7, #28]
 800bb26:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800bb30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bb34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bb38:	f7f4 fd96 	bl	8000668 <__aeabi_dmul>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4620      	mov	r0, r4
 800bb42:	4629      	mov	r1, r5
 800bb44:	f7f4 fbd8 	bl	80002f8 <__aeabi_dsub>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	69f9      	ldr	r1, [r7, #28]
 800bb4e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800bb58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bb5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bb60:	f7f4 fd82 	bl	8000668 <__aeabi_dmul>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4620      	mov	r0, r4
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	f7f4 fbc4 	bl	80002f8 <__aeabi_dsub>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	69f9      	ldr	r1, [r7, #28]
 800bb76:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800bb80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bb84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800bb88:	f7f4 fd6e 	bl	8000668 <__aeabi_dmul>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4620      	mov	r0, r4
 800bb92:	4629      	mov	r1, r5
 800bb94:	f7f4 fbb0 	bl	80002f8 <__aeabi_dsub>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	69f9      	ldr	r1, [r7, #28]
 800bb9e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800bba8:	ec43 2b17 	vmov	d7, r2, r3
};
 800bbac:	eeb0 0a47 	vmov.f32	s0, s14
 800bbb0:	eef0 0a67 	vmov.f32	s1, s15
 800bbb4:	3758      	adds	r7, #88	@ 0x58
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bbbc <__NVIC_SetPriority>:
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	6039      	str	r1, [r7, #0]
 800bbc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	db0a      	blt.n	800bbe6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	490c      	ldr	r1, [pc, #48]	@ (800bc08 <__NVIC_SetPriority+0x4c>)
 800bbd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbda:	0112      	lsls	r2, r2, #4
 800bbdc:	b2d2      	uxtb	r2, r2
 800bbde:	440b      	add	r3, r1
 800bbe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bbe4:	e00a      	b.n	800bbfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	4908      	ldr	r1, [pc, #32]	@ (800bc0c <__NVIC_SetPriority+0x50>)
 800bbec:	79fb      	ldrb	r3, [r7, #7]
 800bbee:	f003 030f 	and.w	r3, r3, #15
 800bbf2:	3b04      	subs	r3, #4
 800bbf4:	0112      	lsls	r2, r2, #4
 800bbf6:	b2d2      	uxtb	r2, r2
 800bbf8:	440b      	add	r3, r1
 800bbfa:	761a      	strb	r2, [r3, #24]
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	e000e100 	.word	0xe000e100
 800bc0c:	e000ed00 	.word	0xe000ed00

0800bc10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bc10:	b580      	push	{r7, lr}
 800bc12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bc14:	4b05      	ldr	r3, [pc, #20]	@ (800bc2c <SysTick_Handler+0x1c>)
 800bc16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bc18:	f001 fd40 	bl	800d69c <xTaskGetSchedulerState>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d001      	beq.n	800bc26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bc22:	f002 fb39 	bl	800e298 <xPortSysTickHandler>
  }
}
 800bc26:	bf00      	nop
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	e000e010 	.word	0xe000e010

0800bc30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bc30:	b580      	push	{r7, lr}
 800bc32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bc34:	2100      	movs	r1, #0
 800bc36:	f06f 0004 	mvn.w	r0, #4
 800bc3a:	f7ff ffbf 	bl	800bbbc <__NVIC_SetPriority>
#endif
}
 800bc3e:	bf00      	nop
 800bc40:	bd80      	pop	{r7, pc}
	...

0800bc44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc4a:	f3ef 8305 	mrs	r3, IPSR
 800bc4e:	603b      	str	r3, [r7, #0]
  return(result);
 800bc50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d003      	beq.n	800bc5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bc56:	f06f 0305 	mvn.w	r3, #5
 800bc5a:	607b      	str	r3, [r7, #4]
 800bc5c:	e00c      	b.n	800bc78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bc5e:	4b0a      	ldr	r3, [pc, #40]	@ (800bc88 <osKernelInitialize+0x44>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d105      	bne.n	800bc72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc66:	4b08      	ldr	r3, [pc, #32]	@ (800bc88 <osKernelInitialize+0x44>)
 800bc68:	2201      	movs	r2, #1
 800bc6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	607b      	str	r3, [r7, #4]
 800bc70:	e002      	b.n	800bc78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bc72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc78:	687b      	ldr	r3, [r7, #4]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	370c      	adds	r7, #12
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	20005a84 	.word	0x20005a84

0800bc8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc92:	f3ef 8305 	mrs	r3, IPSR
 800bc96:	603b      	str	r3, [r7, #0]
  return(result);
 800bc98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d003      	beq.n	800bca6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bc9e:	f06f 0305 	mvn.w	r3, #5
 800bca2:	607b      	str	r3, [r7, #4]
 800bca4:	e010      	b.n	800bcc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bca6:	4b0b      	ldr	r3, [pc, #44]	@ (800bcd4 <osKernelStart+0x48>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d109      	bne.n	800bcc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bcae:	f7ff ffbf 	bl	800bc30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bcb2:	4b08      	ldr	r3, [pc, #32]	@ (800bcd4 <osKernelStart+0x48>)
 800bcb4:	2202      	movs	r2, #2
 800bcb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bcb8:	f001 f87a 	bl	800cdb0 <vTaskStartScheduler>
      stat = osOK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	607b      	str	r3, [r7, #4]
 800bcc0:	e002      	b.n	800bcc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bcc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bcc8:	687b      	ldr	r3, [r7, #4]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20005a84 	.word	0x20005a84

0800bcd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08e      	sub	sp, #56	@ 0x38
 800bcdc:	af04      	add	r7, sp, #16
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bce4:	2300      	movs	r3, #0
 800bce6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bce8:	f3ef 8305 	mrs	r3, IPSR
 800bcec:	617b      	str	r3, [r7, #20]
  return(result);
 800bcee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d17e      	bne.n	800bdf2 <osThreadNew+0x11a>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d07b      	beq.n	800bdf2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bcfa:	2380      	movs	r3, #128	@ 0x80
 800bcfc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bcfe:	2318      	movs	r3, #24
 800bd00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bd02:	2300      	movs	r3, #0
 800bd04:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bd06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d045      	beq.n	800bd9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d002      	beq.n	800bd20 <osThreadNew+0x48>
        name = attr->name;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	699b      	ldr	r3, [r3, #24]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	699b      	ldr	r3, [r3, #24]
 800bd2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d008      	beq.n	800bd46 <osThreadNew+0x6e>
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	2b38      	cmp	r3, #56	@ 0x38
 800bd38:	d805      	bhi.n	800bd46 <osThreadNew+0x6e>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	f003 0301 	and.w	r3, r3, #1
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d001      	beq.n	800bd4a <osThreadNew+0x72>
        return (NULL);
 800bd46:	2300      	movs	r3, #0
 800bd48:	e054      	b.n	800bdf4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d003      	beq.n	800bd5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	089b      	lsrs	r3, r3, #2
 800bd58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d00e      	beq.n	800bd80 <osThreadNew+0xa8>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	2b5b      	cmp	r3, #91	@ 0x5b
 800bd68:	d90a      	bls.n	800bd80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d006      	beq.n	800bd80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d002      	beq.n	800bd80 <osThreadNew+0xa8>
        mem = 1;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	61bb      	str	r3, [r7, #24]
 800bd7e:	e010      	b.n	800bda2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10c      	bne.n	800bda2 <osThreadNew+0xca>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d108      	bne.n	800bda2 <osThreadNew+0xca>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d104      	bne.n	800bda2 <osThreadNew+0xca>
          mem = 0;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	61bb      	str	r3, [r7, #24]
 800bd9c:	e001      	b.n	800bda2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d110      	bne.n	800bdca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bdb0:	9202      	str	r2, [sp, #8]
 800bdb2:	9301      	str	r3, [sp, #4]
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	6a3a      	ldr	r2, [r7, #32]
 800bdbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 fe1a 	bl	800c9f8 <xTaskCreateStatic>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	613b      	str	r3, [r7, #16]
 800bdc8:	e013      	b.n	800bdf2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d110      	bne.n	800bdf2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bdd0:	6a3b      	ldr	r3, [r7, #32]
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	f107 0310 	add.w	r3, r7, #16
 800bdd8:	9301      	str	r3, [sp, #4]
 800bdda:	69fb      	ldr	r3, [r7, #28]
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f000 fe68 	bl	800cab8 <xTaskCreate>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d001      	beq.n	800bdf2 <osThreadNew+0x11a>
            hTask = NULL;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bdf2:	693b      	ldr	r3, [r7, #16]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3728      	adds	r7, #40	@ 0x28
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be04:	f3ef 8305 	mrs	r3, IPSR
 800be08:	60bb      	str	r3, [r7, #8]
  return(result);
 800be0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d003      	beq.n	800be18 <osDelay+0x1c>
    stat = osErrorISR;
 800be10:	f06f 0305 	mvn.w	r3, #5
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	e007      	b.n	800be28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800be18:	2300      	movs	r3, #0
 800be1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <osDelay+0x2c>
      vTaskDelay(ticks);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 ff8e 	bl	800cd44 <vTaskDelay>
    }
  }

  return (stat);
 800be28:	68fb      	ldr	r3, [r7, #12]
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
	...

0800be34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4a07      	ldr	r2, [pc, #28]	@ (800be60 <vApplicationGetIdleTaskMemory+0x2c>)
 800be44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	4a06      	ldr	r2, [pc, #24]	@ (800be64 <vApplicationGetIdleTaskMemory+0x30>)
 800be4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2280      	movs	r2, #128	@ 0x80
 800be50:	601a      	str	r2, [r3, #0]
}
 800be52:	bf00      	nop
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	20005a88 	.word	0x20005a88
 800be64:	20005ae4 	.word	0x20005ae4

0800be68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	4a07      	ldr	r2, [pc, #28]	@ (800be94 <vApplicationGetTimerTaskMemory+0x2c>)
 800be78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	4a06      	ldr	r2, [pc, #24]	@ (800be98 <vApplicationGetTimerTaskMemory+0x30>)
 800be7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be86:	601a      	str	r2, [r3, #0]
}
 800be88:	bf00      	nop
 800be8a:	3714      	adds	r7, #20
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr
 800be94:	20005ce4 	.word	0x20005ce4
 800be98:	20005d40 	.word	0x20005d40

0800be9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f103 0208 	add.w	r2, r3, #8
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800beb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f103 0208 	add.w	r2, r3, #8
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f103 0208 	add.w	r2, r3, #8
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bed0:	bf00      	nop
 800bed2:	370c      	adds	r7, #12
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800beea:	bf00      	nop
 800beec:	370c      	adds	r7, #12
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bef6:	b480      	push	{r7}
 800bef8:	b085      	sub	sp, #20
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	689a      	ldr	r2, [r3, #8]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	683a      	ldr	r2, [r7, #0]
 800bf1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	683a      	ldr	r2, [r7, #0]
 800bf20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	1c5a      	adds	r2, r3, #1
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	601a      	str	r2, [r3, #0]
}
 800bf32:	bf00      	nop
 800bf34:	3714      	adds	r7, #20
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf3e:	b480      	push	{r7}
 800bf40:	b085      	sub	sp, #20
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf54:	d103      	bne.n	800bf5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	e00c      	b.n	800bf78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	3308      	adds	r3, #8
 800bf62:	60fb      	str	r3, [r7, #12]
 800bf64:	e002      	b.n	800bf6c <vListInsert+0x2e>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	60fb      	str	r3, [r7, #12]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d2f6      	bcs.n	800bf66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	1c5a      	adds	r2, r3, #1
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	601a      	str	r2, [r3, #0]
}
 800bfa4:	bf00      	nop
 800bfa6:	3714      	adds	r7, #20
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	6892      	ldr	r2, [r2, #8]
 800bfc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	6852      	ldr	r2, [r2, #4]
 800bfd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d103      	bne.n	800bfe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	689a      	ldr	r2, [r3, #8]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	1e5a      	subs	r2, r3, #1
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10b      	bne.n	800c030 <xQueueGenericReset+0x2c>
	__asm volatile
 800c018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c01c:	f383 8811 	msr	BASEPRI, r3
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	60bb      	str	r3, [r7, #8]
}
 800c02a:	bf00      	nop
 800c02c:	bf00      	nop
 800c02e:	e7fd      	b.n	800c02c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c030:	f002 f8a2 	bl	800e178 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c03c:	68f9      	ldr	r1, [r7, #12]
 800c03e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c040:	fb01 f303 	mul.w	r3, r1, r3
 800c044:	441a      	add	r2, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2200      	movs	r2, #0
 800c04e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c060:	3b01      	subs	r3, #1
 800c062:	68f9      	ldr	r1, [r7, #12]
 800c064:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c066:	fb01 f303 	mul.w	r3, r1, r3
 800c06a:	441a      	add	r2, r3
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	22ff      	movs	r2, #255	@ 0xff
 800c074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	22ff      	movs	r2, #255	@ 0xff
 800c07c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d114      	bne.n	800c0b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d01a      	beq.n	800c0c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3310      	adds	r3, #16
 800c092:	4618      	mov	r0, r3
 800c094:	f001 f91a 	bl	800d2cc <xTaskRemoveFromEventList>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d012      	beq.n	800c0c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c09e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d4 <xQueueGenericReset+0xd0>)
 800c0a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	e009      	b.n	800c0c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	3310      	adds	r3, #16
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7ff fef1 	bl	800be9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	3324      	adds	r3, #36	@ 0x24
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7ff feec 	bl	800be9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0c4:	f002 f88a 	bl	800e1dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0c8:	2301      	movs	r3, #1
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	e000ed04 	.word	0xe000ed04

0800c0d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b08e      	sub	sp, #56	@ 0x38
 800c0dc:	af02      	add	r7, sp, #8
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10b      	bne.n	800c104 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f0:	f383 8811 	msr	BASEPRI, r3
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c0fe:	bf00      	nop
 800c100:	bf00      	nop
 800c102:	e7fd      	b.n	800c100 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d10b      	bne.n	800c122 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c11c:	bf00      	nop
 800c11e:	bf00      	nop
 800c120:	e7fd      	b.n	800c11e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <xQueueGenericCreateStatic+0x56>
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <xQueueGenericCreateStatic+0x5a>
 800c12e:	2301      	movs	r3, #1
 800c130:	e000      	b.n	800c134 <xQueueGenericCreateStatic+0x5c>
 800c132:	2300      	movs	r3, #0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10b      	bne.n	800c150 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	623b      	str	r3, [r7, #32]
}
 800c14a:	bf00      	nop
 800c14c:	bf00      	nop
 800c14e:	e7fd      	b.n	800c14c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d102      	bne.n	800c15c <xQueueGenericCreateStatic+0x84>
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d101      	bne.n	800c160 <xQueueGenericCreateStatic+0x88>
 800c15c:	2301      	movs	r3, #1
 800c15e:	e000      	b.n	800c162 <xQueueGenericCreateStatic+0x8a>
 800c160:	2300      	movs	r3, #0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10b      	bne.n	800c17e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	61fb      	str	r3, [r7, #28]
}
 800c178:	bf00      	nop
 800c17a:	bf00      	nop
 800c17c:	e7fd      	b.n	800c17a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c17e:	2350      	movs	r3, #80	@ 0x50
 800c180:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2b50      	cmp	r3, #80	@ 0x50
 800c186:	d00b      	beq.n	800c1a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	61bb      	str	r3, [r7, #24]
}
 800c19a:	bf00      	nop
 800c19c:	bf00      	nop
 800c19e:	e7fd      	b.n	800c19c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c1a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00d      	beq.n	800c1c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	68b9      	ldr	r1, [r7, #8]
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f000 f805 	bl	800c1d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3730      	adds	r7, #48	@ 0x30
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	60f8      	str	r0, [r7, #12]
 800c1da:	60b9      	str	r1, [r7, #8]
 800c1dc:	607a      	str	r2, [r7, #4]
 800c1de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d103      	bne.n	800c1ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	69ba      	ldr	r2, [r7, #24]
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	e002      	b.n	800c1f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	68fa      	ldr	r2, [r7, #12]
 800c1f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c200:	2101      	movs	r1, #1
 800c202:	69b8      	ldr	r0, [r7, #24]
 800c204:	f7ff fefe 	bl	800c004 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	78fa      	ldrb	r2, [r7, #3]
 800c20c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c210:	bf00      	nop
 800c212:	3710      	adds	r7, #16
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08e      	sub	sp, #56	@ 0x38
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	607a      	str	r2, [r7, #4]
 800c224:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c226:	2300      	movs	r3, #0
 800c228:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10b      	bne.n	800c24c <xQueueGenericSend+0x34>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c246:	bf00      	nop
 800c248:	bf00      	nop
 800c24a:	e7fd      	b.n	800c248 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d103      	bne.n	800c25a <xQueueGenericSend+0x42>
 800c252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c256:	2b00      	cmp	r3, #0
 800c258:	d101      	bne.n	800c25e <xQueueGenericSend+0x46>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e000      	b.n	800c260 <xQueueGenericSend+0x48>
 800c25e:	2300      	movs	r3, #0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10b      	bne.n	800c27c <xQueueGenericSend+0x64>
	__asm volatile
 800c264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c268:	f383 8811 	msr	BASEPRI, r3
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	f3bf 8f4f 	dsb	sy
 800c274:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c276:	bf00      	nop
 800c278:	bf00      	nop
 800c27a:	e7fd      	b.n	800c278 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d103      	bne.n	800c28a <xQueueGenericSend+0x72>
 800c282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c286:	2b01      	cmp	r3, #1
 800c288:	d101      	bne.n	800c28e <xQueueGenericSend+0x76>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e000      	b.n	800c290 <xQueueGenericSend+0x78>
 800c28e:	2300      	movs	r3, #0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10b      	bne.n	800c2ac <xQueueGenericSend+0x94>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c298:	f383 8811 	msr	BASEPRI, r3
 800c29c:	f3bf 8f6f 	isb	sy
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	623b      	str	r3, [r7, #32]
}
 800c2a6:	bf00      	nop
 800c2a8:	bf00      	nop
 800c2aa:	e7fd      	b.n	800c2a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2ac:	f001 f9f6 	bl	800d69c <xTaskGetSchedulerState>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d102      	bne.n	800c2bc <xQueueGenericSend+0xa4>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d101      	bne.n	800c2c0 <xQueueGenericSend+0xa8>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e000      	b.n	800c2c2 <xQueueGenericSend+0xaa>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10b      	bne.n	800c2de <xQueueGenericSend+0xc6>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	61fb      	str	r3, [r7, #28]
}
 800c2d8:	bf00      	nop
 800c2da:	bf00      	nop
 800c2dc:	e7fd      	b.n	800c2da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2de:	f001 ff4b 	bl	800e178 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d302      	bcc.n	800c2f4 <xQueueGenericSend+0xdc>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d129      	bne.n	800c348 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	68b9      	ldr	r1, [r7, #8]
 800c2f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c2fa:	f000 fa0f 	bl	800c71c <prvCopyDataToQueue>
 800c2fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c304:	2b00      	cmp	r3, #0
 800c306:	d010      	beq.n	800c32a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30a:	3324      	adds	r3, #36	@ 0x24
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 ffdd 	bl	800d2cc <xTaskRemoveFromEventList>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d013      	beq.n	800c340 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c318:	4b3f      	ldr	r3, [pc, #252]	@ (800c418 <xQueueGenericSend+0x200>)
 800c31a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c31e:	601a      	str	r2, [r3, #0]
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	e00a      	b.n	800c340 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d007      	beq.n	800c340 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c330:	4b39      	ldr	r3, [pc, #228]	@ (800c418 <xQueueGenericSend+0x200>)
 800c332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c336:	601a      	str	r2, [r3, #0]
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c340:	f001 ff4c 	bl	800e1dc <vPortExitCritical>
				return pdPASS;
 800c344:	2301      	movs	r3, #1
 800c346:	e063      	b.n	800c410 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d103      	bne.n	800c356 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c34e:	f001 ff45 	bl	800e1dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c352:	2300      	movs	r3, #0
 800c354:	e05c      	b.n	800c410 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d106      	bne.n	800c36a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c35c:	f107 0314 	add.w	r3, r7, #20
 800c360:	4618      	mov	r0, r3
 800c362:	f001 f83f 	bl	800d3e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c366:	2301      	movs	r3, #1
 800c368:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c36a:	f001 ff37 	bl	800e1dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c36e:	f000 fd87 	bl	800ce80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c372:	f001 ff01 	bl	800e178 <vPortEnterCritical>
 800c376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c378:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c37c:	b25b      	sxtb	r3, r3
 800c37e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c382:	d103      	bne.n	800c38c <xQueueGenericSend+0x174>
 800c384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c392:	b25b      	sxtb	r3, r3
 800c394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c398:	d103      	bne.n	800c3a2 <xQueueGenericSend+0x18a>
 800c39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39c:	2200      	movs	r2, #0
 800c39e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3a2:	f001 ff1b 	bl	800e1dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3a6:	1d3a      	adds	r2, r7, #4
 800c3a8:	f107 0314 	add.w	r3, r7, #20
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f001 f82e 	bl	800d410 <xTaskCheckForTimeOut>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d124      	bne.n	800c404 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c3ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3bc:	f000 faa6 	bl	800c90c <prvIsQueueFull>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d018      	beq.n	800c3f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c8:	3310      	adds	r3, #16
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 ff2a 	bl	800d228 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c3d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3d6:	f000 fa31 	bl	800c83c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c3da:	f000 fd5f 	bl	800ce9c <xTaskResumeAll>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f47f af7c 	bne.w	800c2de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c3e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c418 <xQueueGenericSend+0x200>)
 800c3e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	f3bf 8f6f 	isb	sy
 800c3f6:	e772      	b.n	800c2de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c3f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3fa:	f000 fa1f 	bl	800c83c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3fe:	f000 fd4d 	bl	800ce9c <xTaskResumeAll>
 800c402:	e76c      	b.n	800c2de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c406:	f000 fa19 	bl	800c83c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c40a:	f000 fd47 	bl	800ce9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c40e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c410:	4618      	mov	r0, r3
 800c412:	3738      	adds	r7, #56	@ 0x38
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	e000ed04 	.word	0xe000ed04

0800c41c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b090      	sub	sp, #64	@ 0x40
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
 800c428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10b      	bne.n	800c44c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	e7fd      	b.n	800c448 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d103      	bne.n	800c45a <xQueueGenericSendFromISR+0x3e>
 800c452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <xQueueGenericSendFromISR+0x42>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e000      	b.n	800c460 <xQueueGenericSendFromISR+0x44>
 800c45e:	2300      	movs	r3, #0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d10b      	bne.n	800c47c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c468:	f383 8811 	msr	BASEPRI, r3
 800c46c:	f3bf 8f6f 	isb	sy
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c476:	bf00      	nop
 800c478:	bf00      	nop
 800c47a:	e7fd      	b.n	800c478 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d103      	bne.n	800c48a <xQueueGenericSendFromISR+0x6e>
 800c482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c486:	2b01      	cmp	r3, #1
 800c488:	d101      	bne.n	800c48e <xQueueGenericSendFromISR+0x72>
 800c48a:	2301      	movs	r3, #1
 800c48c:	e000      	b.n	800c490 <xQueueGenericSendFromISR+0x74>
 800c48e:	2300      	movs	r3, #0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10b      	bne.n	800c4ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	623b      	str	r3, [r7, #32]
}
 800c4a6:	bf00      	nop
 800c4a8:	bf00      	nop
 800c4aa:	e7fd      	b.n	800c4a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4ac:	f001 ff44 	bl	800e338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c4b0:	f3ef 8211 	mrs	r2, BASEPRI
 800c4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	61fa      	str	r2, [r7, #28]
 800c4c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c4c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d302      	bcc.n	800c4de <xQueueGenericSendFromISR+0xc2>
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d12f      	bne.n	800c53e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	68b9      	ldr	r1, [r7, #8]
 800c4f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c4f4:	f000 f912 	bl	800c71c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c4f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c4fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c500:	d112      	bne.n	800c528 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c506:	2b00      	cmp	r3, #0
 800c508:	d016      	beq.n	800c538 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50c:	3324      	adds	r3, #36	@ 0x24
 800c50e:	4618      	mov	r0, r3
 800c510:	f000 fedc 	bl	800d2cc <xTaskRemoveFromEventList>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00e      	beq.n	800c538 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00b      	beq.n	800c538 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	601a      	str	r2, [r3, #0]
 800c526:	e007      	b.n	800c538 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c528:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c52c:	3301      	adds	r3, #1
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	b25a      	sxtb	r2, r3
 800c532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c538:	2301      	movs	r3, #1
 800c53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c53c:	e001      	b.n	800c542 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c53e:	2300      	movs	r3, #0
 800c540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c544:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c54c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c54e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c550:	4618      	mov	r0, r3
 800c552:	3740      	adds	r7, #64	@ 0x40
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08c      	sub	sp, #48	@ 0x30
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c564:	2300      	movs	r3, #0
 800c566:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10b      	bne.n	800c58a <xQueueReceive+0x32>
	__asm volatile
 800c572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	623b      	str	r3, [r7, #32]
}
 800c584:	bf00      	nop
 800c586:	bf00      	nop
 800c588:	e7fd      	b.n	800c586 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d103      	bne.n	800c598 <xQueueReceive+0x40>
 800c590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <xQueueReceive+0x44>
 800c598:	2301      	movs	r3, #1
 800c59a:	e000      	b.n	800c59e <xQueueReceive+0x46>
 800c59c:	2300      	movs	r3, #0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10b      	bne.n	800c5ba <xQueueReceive+0x62>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	61fb      	str	r3, [r7, #28]
}
 800c5b4:	bf00      	nop
 800c5b6:	bf00      	nop
 800c5b8:	e7fd      	b.n	800c5b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5ba:	f001 f86f 	bl	800d69c <xTaskGetSchedulerState>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d102      	bne.n	800c5ca <xQueueReceive+0x72>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <xQueueReceive+0x76>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e000      	b.n	800c5d0 <xQueueReceive+0x78>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10b      	bne.n	800c5ec <xQueueReceive+0x94>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	61bb      	str	r3, [r7, #24]
}
 800c5e6:	bf00      	nop
 800c5e8:	bf00      	nop
 800c5ea:	e7fd      	b.n	800c5e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5ec:	f001 fdc4 	bl	800e178 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d01f      	beq.n	800c63c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5fc:	68b9      	ldr	r1, [r7, #8]
 800c5fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c600:	f000 f8f6 	bl	800c7f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c606:	1e5a      	subs	r2, r3, #1
 800c608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00f      	beq.n	800c634 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c616:	3310      	adds	r3, #16
 800c618:	4618      	mov	r0, r3
 800c61a:	f000 fe57 	bl	800d2cc <xTaskRemoveFromEventList>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d007      	beq.n	800c634 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c624:	4b3c      	ldr	r3, [pc, #240]	@ (800c718 <xQueueReceive+0x1c0>)
 800c626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c634:	f001 fdd2 	bl	800e1dc <vPortExitCritical>
				return pdPASS;
 800c638:	2301      	movs	r3, #1
 800c63a:	e069      	b.n	800c710 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d103      	bne.n	800c64a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c642:	f001 fdcb 	bl	800e1dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c646:	2300      	movs	r3, #0
 800c648:	e062      	b.n	800c710 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d106      	bne.n	800c65e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c650:	f107 0310 	add.w	r3, r7, #16
 800c654:	4618      	mov	r0, r3
 800c656:	f000 fec5 	bl	800d3e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c65a:	2301      	movs	r3, #1
 800c65c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c65e:	f001 fdbd 	bl	800e1dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c662:	f000 fc0d 	bl	800ce80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c666:	f001 fd87 	bl	800e178 <vPortEnterCritical>
 800c66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c66c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c670:	b25b      	sxtb	r3, r3
 800c672:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c676:	d103      	bne.n	800c680 <xQueueReceive+0x128>
 800c678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c67a:	2200      	movs	r2, #0
 800c67c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c686:	b25b      	sxtb	r3, r3
 800c688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c68c:	d103      	bne.n	800c696 <xQueueReceive+0x13e>
 800c68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c690:	2200      	movs	r2, #0
 800c692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c696:	f001 fda1 	bl	800e1dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c69a:	1d3a      	adds	r2, r7, #4
 800c69c:	f107 0310 	add.w	r3, r7, #16
 800c6a0:	4611      	mov	r1, r2
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 feb4 	bl	800d410 <xTaskCheckForTimeOut>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d123      	bne.n	800c6f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6b0:	f000 f916 	bl	800c8e0 <prvIsQueueEmpty>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d017      	beq.n	800c6ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6bc:	3324      	adds	r3, #36	@ 0x24
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f000 fdb0 	bl	800d228 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6ca:	f000 f8b7 	bl	800c83c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6ce:	f000 fbe5 	bl	800ce9c <xTaskResumeAll>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d189      	bne.n	800c5ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c6d8:	4b0f      	ldr	r3, [pc, #60]	@ (800c718 <xQueueReceive+0x1c0>)
 800c6da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6de:	601a      	str	r2, [r3, #0]
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	e780      	b.n	800c5ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c6ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6ec:	f000 f8a6 	bl	800c83c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6f0:	f000 fbd4 	bl	800ce9c <xTaskResumeAll>
 800c6f4:	e77a      	b.n	800c5ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c6f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6f8:	f000 f8a0 	bl	800c83c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6fc:	f000 fbce 	bl	800ce9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c700:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c702:	f000 f8ed 	bl	800c8e0 <prvIsQueueEmpty>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f43f af6f 	beq.w	800c5ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c70e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c710:	4618      	mov	r0, r3
 800c712:	3730      	adds	r7, #48	@ 0x30
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	e000ed04 	.word	0xe000ed04

0800c71c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c728:	2300      	movs	r3, #0
 800c72a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c730:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10d      	bne.n	800c756 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d14d      	bne.n	800c7de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	4618      	mov	r0, r3
 800c748:	f000 ffc6 	bl	800d6d8 <xTaskPriorityDisinherit>
 800c74c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2200      	movs	r2, #0
 800c752:	609a      	str	r2, [r3, #8]
 800c754:	e043      	b.n	800c7de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d119      	bne.n	800c790 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6858      	ldr	r0, [r3, #4]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c764:	461a      	mov	r2, r3
 800c766:	68b9      	ldr	r1, [r7, #8]
 800c768:	f011 fdd3 	bl	801e312 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c774:	441a      	add	r2, r3
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	429a      	cmp	r2, r3
 800c784:	d32b      	bcc.n	800c7de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	605a      	str	r2, [r3, #4]
 800c78e:	e026      	b.n	800c7de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	68d8      	ldr	r0, [r3, #12]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c798:	461a      	mov	r2, r3
 800c79a:	68b9      	ldr	r1, [r7, #8]
 800c79c:	f011 fdb9 	bl	801e312 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	68da      	ldr	r2, [r3, #12]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7a8:	425b      	negs	r3, r3
 800c7aa:	441a      	add	r2, r3
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	68da      	ldr	r2, [r3, #12]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d207      	bcs.n	800c7cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	689a      	ldr	r2, [r3, #8]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	441a      	add	r2, r3
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d105      	bne.n	800c7de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d002      	beq.n	800c7de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	1c5a      	adds	r2, r3, #1
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c7e6:	697b      	ldr	r3, [r7, #20]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3718      	adds	r7, #24
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d018      	beq.n	800c834 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	68da      	ldr	r2, [r3, #12]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c80a:	441a      	add	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	68da      	ldr	r2, [r3, #12]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d303      	bcc.n	800c824 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	68d9      	ldr	r1, [r3, #12]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c82c:	461a      	mov	r2, r3
 800c82e:	6838      	ldr	r0, [r7, #0]
 800c830:	f011 fd6f 	bl	801e312 <memcpy>
	}
}
 800c834:	bf00      	nop
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c844:	f001 fc98 	bl	800e178 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c84e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c850:	e011      	b.n	800c876 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c856:	2b00      	cmp	r3, #0
 800c858:	d012      	beq.n	800c880 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	3324      	adds	r3, #36	@ 0x24
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 fd34 	bl	800d2cc <xTaskRemoveFromEventList>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c86a:	f000 fe35 	bl	800d4d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
 800c870:	3b01      	subs	r3, #1
 800c872:	b2db      	uxtb	r3, r3
 800c874:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	dce9      	bgt.n	800c852 <prvUnlockQueue+0x16>
 800c87e:	e000      	b.n	800c882 <prvUnlockQueue+0x46>
					break;
 800c880:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	22ff      	movs	r2, #255	@ 0xff
 800c886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c88a:	f001 fca7 	bl	800e1dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c88e:	f001 fc73 	bl	800e178 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c898:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c89a:	e011      	b.n	800c8c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d012      	beq.n	800c8ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	3310      	adds	r3, #16
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f000 fd0f 	bl	800d2cc <xTaskRemoveFromEventList>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d001      	beq.n	800c8b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c8b4:	f000 fe10 	bl	800d4d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c8b8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c8c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	dce9      	bgt.n	800c89c <prvUnlockQueue+0x60>
 800c8c8:	e000      	b.n	800c8cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c8ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	22ff      	movs	r2, #255	@ 0xff
 800c8d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c8d4:	f001 fc82 	bl	800e1dc <vPortExitCritical>
}
 800c8d8:	bf00      	nop
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8e8:	f001 fc46 	bl	800e178 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d102      	bne.n	800c8fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	60fb      	str	r3, [r7, #12]
 800c8f8:	e001      	b.n	800c8fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8fe:	f001 fc6d 	bl	800e1dc <vPortExitCritical>

	return xReturn;
 800c902:	68fb      	ldr	r3, [r7, #12]
}
 800c904:	4618      	mov	r0, r3
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c914:	f001 fc30 	bl	800e178 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c920:	429a      	cmp	r2, r3
 800c922:	d102      	bne.n	800c92a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c924:	2301      	movs	r3, #1
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	e001      	b.n	800c92e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c92a:	2300      	movs	r3, #0
 800c92c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c92e:	f001 fc55 	bl	800e1dc <vPortExitCritical>

	return xReturn;
 800c932:	68fb      	ldr	r3, [r7, #12]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c946:	2300      	movs	r3, #0
 800c948:	60fb      	str	r3, [r7, #12]
 800c94a:	e014      	b.n	800c976 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c94c:	4a0f      	ldr	r2, [pc, #60]	@ (800c98c <vQueueAddToRegistry+0x50>)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d10b      	bne.n	800c970 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c958:	490c      	ldr	r1, [pc, #48]	@ (800c98c <vQueueAddToRegistry+0x50>)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	683a      	ldr	r2, [r7, #0]
 800c95e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c962:	4a0a      	ldr	r2, [pc, #40]	@ (800c98c <vQueueAddToRegistry+0x50>)
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	00db      	lsls	r3, r3, #3
 800c968:	4413      	add	r3, r2
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c96e:	e006      	b.n	800c97e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	3301      	adds	r3, #1
 800c974:	60fb      	str	r3, [r7, #12]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2b07      	cmp	r3, #7
 800c97a:	d9e7      	bls.n	800c94c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c97c:	bf00      	nop
 800c97e:	bf00      	nop
 800c980:	3714      	adds	r7, #20
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	20006140 	.word	0x20006140

0800c990 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c9a0:	f001 fbea 	bl	800e178 <vPortEnterCritical>
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c9aa:	b25b      	sxtb	r3, r3
 800c9ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9b0:	d103      	bne.n	800c9ba <vQueueWaitForMessageRestricted+0x2a>
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9c0:	b25b      	sxtb	r3, r3
 800c9c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9c6:	d103      	bne.n	800c9d0 <vQueueWaitForMessageRestricted+0x40>
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c9d0:	f001 fc04 	bl	800e1dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d106      	bne.n	800c9ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	3324      	adds	r3, #36	@ 0x24
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	68b9      	ldr	r1, [r7, #8]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 fc45 	bl	800d274 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c9ea:	6978      	ldr	r0, [r7, #20]
 800c9ec:	f7ff ff26 	bl	800c83c <prvUnlockQueue>
	}
 800c9f0:	bf00      	nop
 800c9f2:	3718      	adds	r7, #24
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08e      	sub	sp, #56	@ 0x38
 800c9fc:	af04      	add	r7, sp, #16
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
 800ca04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ca06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10b      	bne.n	800ca24 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	623b      	str	r3, [r7, #32]
}
 800ca1e:	bf00      	nop
 800ca20:	bf00      	nop
 800ca22:	e7fd      	b.n	800ca20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ca24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d10b      	bne.n	800ca42 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ca2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	61fb      	str	r3, [r7, #28]
}
 800ca3c:	bf00      	nop
 800ca3e:	bf00      	nop
 800ca40:	e7fd      	b.n	800ca3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca42:	235c      	movs	r3, #92	@ 0x5c
 800ca44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	2b5c      	cmp	r3, #92	@ 0x5c
 800ca4a:	d00b      	beq.n	800ca64 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	61bb      	str	r3, [r7, #24]
}
 800ca5e:	bf00      	nop
 800ca60:	bf00      	nop
 800ca62:	e7fd      	b.n	800ca60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d01e      	beq.n	800caaa <xTaskCreateStatic+0xb2>
 800ca6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d01b      	beq.n	800caaa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7e:	2202      	movs	r2, #2
 800ca80:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca84:	2300      	movs	r3, #0
 800ca86:	9303      	str	r3, [sp, #12]
 800ca88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8a:	9302      	str	r3, [sp, #8]
 800ca8c:	f107 0314 	add.w	r3, r7, #20
 800ca90:	9301      	str	r3, [sp, #4]
 800ca92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	68b9      	ldr	r1, [r7, #8]
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f000 f850 	bl	800cb42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800caa4:	f000 f8de 	bl	800cc64 <prvAddNewTaskToReadyList>
 800caa8:	e001      	b.n	800caae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800caaa:	2300      	movs	r3, #0
 800caac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800caae:	697b      	ldr	r3, [r7, #20]
	}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3728      	adds	r7, #40	@ 0x28
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08c      	sub	sp, #48	@ 0x30
 800cabc:	af04      	add	r7, sp, #16
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	603b      	str	r3, [r7, #0]
 800cac4:	4613      	mov	r3, r2
 800cac6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cac8:	88fb      	ldrh	r3, [r7, #6]
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4618      	mov	r0, r3
 800cace:	f001 fc75 	bl	800e3bc <pvPortMalloc>
 800cad2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00e      	beq.n	800caf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cada:	205c      	movs	r0, #92	@ 0x5c
 800cadc:	f001 fc6e 	bl	800e3bc <pvPortMalloc>
 800cae0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d003      	beq.n	800caf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	697a      	ldr	r2, [r7, #20]
 800caec:	631a      	str	r2, [r3, #48]	@ 0x30
 800caee:	e005      	b.n	800cafc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800caf0:	6978      	ldr	r0, [r7, #20]
 800caf2:	f001 fd31 	bl	800e558 <vPortFree>
 800caf6:	e001      	b.n	800cafc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800caf8:	2300      	movs	r3, #0
 800cafa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d017      	beq.n	800cb32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb0a:	88fa      	ldrh	r2, [r7, #6]
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9303      	str	r3, [sp, #12]
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	9302      	str	r3, [sp, #8]
 800cb14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb16:	9301      	str	r3, [sp, #4]
 800cb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	68b9      	ldr	r1, [r7, #8]
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f000 f80e 	bl	800cb42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb26:	69f8      	ldr	r0, [r7, #28]
 800cb28:	f000 f89c 	bl	800cc64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	61bb      	str	r3, [r7, #24]
 800cb30:	e002      	b.n	800cb38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb38:	69bb      	ldr	r3, [r7, #24]
	}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3720      	adds	r7, #32
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b088      	sub	sp, #32
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	607a      	str	r2, [r7, #4]
 800cb4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	461a      	mov	r2, r3
 800cb5a:	21a5      	movs	r1, #165	@ 0xa5
 800cb5c:	f011 fb10 	bl	801e180 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4413      	add	r3, r2
 800cb70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	f023 0307 	bic.w	r3, r3, #7
 800cb78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	f003 0307 	and.w	r3, r3, #7
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00b      	beq.n	800cb9c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	617b      	str	r3, [r7, #20]
}
 800cb96:	bf00      	nop
 800cb98:	bf00      	nop
 800cb9a:	e7fd      	b.n	800cb98 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d01f      	beq.n	800cbe2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cba2:	2300      	movs	r3, #0
 800cba4:	61fb      	str	r3, [r7, #28]
 800cba6:	e012      	b.n	800cbce <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cba8:	68ba      	ldr	r2, [r7, #8]
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	4413      	add	r3, r2
 800cbae:	7819      	ldrb	r1, [r3, #0]
 800cbb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	3334      	adds	r3, #52	@ 0x34
 800cbb8:	460a      	mov	r2, r1
 800cbba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d006      	beq.n	800cbd6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	61fb      	str	r3, [r7, #28]
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	2b0f      	cmp	r3, #15
 800cbd2:	d9e9      	bls.n	800cba8 <prvInitialiseNewTask+0x66>
 800cbd4:	e000      	b.n	800cbd8 <prvInitialiseNewTask+0x96>
			{
				break;
 800cbd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cbe0:	e003      	b.n	800cbea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbec:	2b37      	cmp	r3, #55	@ 0x37
 800cbee:	d901      	bls.n	800cbf4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbf0:	2337      	movs	r3, #55	@ 0x37
 800cbf2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbf8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbfe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc02:	2200      	movs	r2, #0
 800cc04:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc08:	3304      	adds	r3, #4
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7ff f966 	bl	800bedc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc12:	3318      	adds	r3, #24
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7ff f961 	bl	800bedc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc2e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc32:	2200      	movs	r2, #0
 800cc34:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc3e:	683a      	ldr	r2, [r7, #0]
 800cc40:	68f9      	ldr	r1, [r7, #12]
 800cc42:	69b8      	ldr	r0, [r7, #24]
 800cc44:	f001 f966 	bl	800df14 <pxPortInitialiseStack>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d002      	beq.n	800cc5a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc5a:	bf00      	nop
 800cc5c:	3720      	adds	r7, #32
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
	...

0800cc64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc6c:	f001 fa84 	bl	800e178 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc70:	4b2d      	ldr	r3, [pc, #180]	@ (800cd28 <prvAddNewTaskToReadyList+0xc4>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3301      	adds	r3, #1
 800cc76:	4a2c      	ldr	r2, [pc, #176]	@ (800cd28 <prvAddNewTaskToReadyList+0xc4>)
 800cc78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc7a:	4b2c      	ldr	r3, [pc, #176]	@ (800cd2c <prvAddNewTaskToReadyList+0xc8>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d109      	bne.n	800cc96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc82:	4a2a      	ldr	r2, [pc, #168]	@ (800cd2c <prvAddNewTaskToReadyList+0xc8>)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc88:	4b27      	ldr	r3, [pc, #156]	@ (800cd28 <prvAddNewTaskToReadyList+0xc4>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d110      	bne.n	800ccb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc90:	f000 fc46 	bl	800d520 <prvInitialiseTaskLists>
 800cc94:	e00d      	b.n	800ccb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc96:	4b26      	ldr	r3, [pc, #152]	@ (800cd30 <prvAddNewTaskToReadyList+0xcc>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d109      	bne.n	800ccb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc9e:	4b23      	ldr	r3, [pc, #140]	@ (800cd2c <prvAddNewTaskToReadyList+0xc8>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d802      	bhi.n	800ccb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ccac:	4a1f      	ldr	r2, [pc, #124]	@ (800cd2c <prvAddNewTaskToReadyList+0xc8>)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ccb2:	4b20      	ldr	r3, [pc, #128]	@ (800cd34 <prvAddNewTaskToReadyList+0xd0>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	4a1e      	ldr	r2, [pc, #120]	@ (800cd34 <prvAddNewTaskToReadyList+0xd0>)
 800ccba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ccbc:	4b1d      	ldr	r3, [pc, #116]	@ (800cd34 <prvAddNewTaskToReadyList+0xd0>)
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccc8:	4b1b      	ldr	r3, [pc, #108]	@ (800cd38 <prvAddNewTaskToReadyList+0xd4>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d903      	bls.n	800ccd8 <prvAddNewTaskToReadyList+0x74>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd4:	4a18      	ldr	r2, [pc, #96]	@ (800cd38 <prvAddNewTaskToReadyList+0xd4>)
 800ccd6:	6013      	str	r3, [r2, #0]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccdc:	4613      	mov	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4a15      	ldr	r2, [pc, #84]	@ (800cd3c <prvAddNewTaskToReadyList+0xd8>)
 800cce6:	441a      	add	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	3304      	adds	r3, #4
 800ccec:	4619      	mov	r1, r3
 800ccee:	4610      	mov	r0, r2
 800ccf0:	f7ff f901 	bl	800bef6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ccf4:	f001 fa72 	bl	800e1dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ccf8:	4b0d      	ldr	r3, [pc, #52]	@ (800cd30 <prvAddNewTaskToReadyList+0xcc>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00e      	beq.n	800cd1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd00:	4b0a      	ldr	r3, [pc, #40]	@ (800cd2c <prvAddNewTaskToReadyList+0xc8>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d207      	bcs.n	800cd1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd0e:	4b0c      	ldr	r3, [pc, #48]	@ (800cd40 <prvAddNewTaskToReadyList+0xdc>)
 800cd10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd14:	601a      	str	r2, [r3, #0]
 800cd16:	f3bf 8f4f 	dsb	sy
 800cd1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd1e:	bf00      	nop
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	20006654 	.word	0x20006654
 800cd2c:	20006180 	.word	0x20006180
 800cd30:	20006660 	.word	0x20006660
 800cd34:	20006670 	.word	0x20006670
 800cd38:	2000665c 	.word	0x2000665c
 800cd3c:	20006184 	.word	0x20006184
 800cd40:	e000ed04 	.word	0xe000ed04

0800cd44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d018      	beq.n	800cd88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd56:	4b14      	ldr	r3, [pc, #80]	@ (800cda8 <vTaskDelay+0x64>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00b      	beq.n	800cd76 <vTaskDelay+0x32>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	60bb      	str	r3, [r7, #8]
}
 800cd70:	bf00      	nop
 800cd72:	bf00      	nop
 800cd74:	e7fd      	b.n	800cd72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cd76:	f000 f883 	bl	800ce80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 fd1b 	bl	800d7b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd82:	f000 f88b 	bl	800ce9c <xTaskResumeAll>
 800cd86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d107      	bne.n	800cd9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cd8e:	4b07      	ldr	r3, [pc, #28]	@ (800cdac <vTaskDelay+0x68>)
 800cd90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd9e:	bf00      	nop
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	2000667c 	.word	0x2000667c
 800cdac:	e000ed04 	.word	0xe000ed04

0800cdb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b08a      	sub	sp, #40	@ 0x28
 800cdb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cdbe:	463a      	mov	r2, r7
 800cdc0:	1d39      	adds	r1, r7, #4
 800cdc2:	f107 0308 	add.w	r3, r7, #8
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7ff f834 	bl	800be34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cdcc:	6839      	ldr	r1, [r7, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	9202      	str	r2, [sp, #8]
 800cdd4:	9301      	str	r3, [sp, #4]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	2300      	movs	r3, #0
 800cddc:	460a      	mov	r2, r1
 800cdde:	4922      	ldr	r1, [pc, #136]	@ (800ce68 <vTaskStartScheduler+0xb8>)
 800cde0:	4822      	ldr	r0, [pc, #136]	@ (800ce6c <vTaskStartScheduler+0xbc>)
 800cde2:	f7ff fe09 	bl	800c9f8 <xTaskCreateStatic>
 800cde6:	4603      	mov	r3, r0
 800cde8:	4a21      	ldr	r2, [pc, #132]	@ (800ce70 <vTaskStartScheduler+0xc0>)
 800cdea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cdec:	4b20      	ldr	r3, [pc, #128]	@ (800ce70 <vTaskStartScheduler+0xc0>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d002      	beq.n	800cdfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	617b      	str	r3, [r7, #20]
 800cdf8:	e001      	b.n	800cdfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d102      	bne.n	800ce0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ce04:	f000 fd2c 	bl	800d860 <xTimerCreateTimerTask>
 800ce08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d116      	bne.n	800ce3e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ce10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	f3bf 8f6f 	isb	sy
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	613b      	str	r3, [r7, #16]
}
 800ce22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce24:	4b13      	ldr	r3, [pc, #76]	@ (800ce74 <vTaskStartScheduler+0xc4>)
 800ce26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce2c:	4b12      	ldr	r3, [pc, #72]	@ (800ce78 <vTaskStartScheduler+0xc8>)
 800ce2e:	2201      	movs	r2, #1
 800ce30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce32:	4b12      	ldr	r3, [pc, #72]	@ (800ce7c <vTaskStartScheduler+0xcc>)
 800ce34:	2200      	movs	r2, #0
 800ce36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce38:	f001 f8fa 	bl	800e030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce3c:	e00f      	b.n	800ce5e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce44:	d10b      	bne.n	800ce5e <vTaskStartScheduler+0xae>
	__asm volatile
 800ce46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce4a:	f383 8811 	msr	BASEPRI, r3
 800ce4e:	f3bf 8f6f 	isb	sy
 800ce52:	f3bf 8f4f 	dsb	sy
 800ce56:	60fb      	str	r3, [r7, #12]
}
 800ce58:	bf00      	nop
 800ce5a:	bf00      	nop
 800ce5c:	e7fd      	b.n	800ce5a <vTaskStartScheduler+0xaa>
}
 800ce5e:	bf00      	nop
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	0801f7bc 	.word	0x0801f7bc
 800ce6c:	0800d4f1 	.word	0x0800d4f1
 800ce70:	20006678 	.word	0x20006678
 800ce74:	20006674 	.word	0x20006674
 800ce78:	20006660 	.word	0x20006660
 800ce7c:	20006658 	.word	0x20006658

0800ce80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce80:	b480      	push	{r7}
 800ce82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce84:	4b04      	ldr	r3, [pc, #16]	@ (800ce98 <vTaskSuspendAll+0x18>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	4a03      	ldr	r2, [pc, #12]	@ (800ce98 <vTaskSuspendAll+0x18>)
 800ce8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce8e:	bf00      	nop
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	2000667c 	.word	0x2000667c

0800ce9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cea2:	2300      	movs	r3, #0
 800cea4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cea6:	2300      	movs	r3, #0
 800cea8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ceaa:	4b42      	ldr	r3, [pc, #264]	@ (800cfb4 <xTaskResumeAll+0x118>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d10b      	bne.n	800ceca <xTaskResumeAll+0x2e>
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	603b      	str	r3, [r7, #0]
}
 800cec4:	bf00      	nop
 800cec6:	bf00      	nop
 800cec8:	e7fd      	b.n	800cec6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ceca:	f001 f955 	bl	800e178 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cece:	4b39      	ldr	r3, [pc, #228]	@ (800cfb4 <xTaskResumeAll+0x118>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	3b01      	subs	r3, #1
 800ced4:	4a37      	ldr	r2, [pc, #220]	@ (800cfb4 <xTaskResumeAll+0x118>)
 800ced6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ced8:	4b36      	ldr	r3, [pc, #216]	@ (800cfb4 <xTaskResumeAll+0x118>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d162      	bne.n	800cfa6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cee0:	4b35      	ldr	r3, [pc, #212]	@ (800cfb8 <xTaskResumeAll+0x11c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d05e      	beq.n	800cfa6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cee8:	e02f      	b.n	800cf4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceea:	4b34      	ldr	r3, [pc, #208]	@ (800cfbc <xTaskResumeAll+0x120>)
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3318      	adds	r3, #24
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7ff f85a 	bl	800bfb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	3304      	adds	r3, #4
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7ff f855 	bl	800bfb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf0a:	4b2d      	ldr	r3, [pc, #180]	@ (800cfc0 <xTaskResumeAll+0x124>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d903      	bls.n	800cf1a <xTaskResumeAll+0x7e>
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf16:	4a2a      	ldr	r2, [pc, #168]	@ (800cfc0 <xTaskResumeAll+0x124>)
 800cf18:	6013      	str	r3, [r2, #0]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf1e:	4613      	mov	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	4413      	add	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4a27      	ldr	r2, [pc, #156]	@ (800cfc4 <xTaskResumeAll+0x128>)
 800cf28:	441a      	add	r2, r3
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3304      	adds	r3, #4
 800cf2e:	4619      	mov	r1, r3
 800cf30:	4610      	mov	r0, r2
 800cf32:	f7fe ffe0 	bl	800bef6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf3a:	4b23      	ldr	r3, [pc, #140]	@ (800cfc8 <xTaskResumeAll+0x12c>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d302      	bcc.n	800cf4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cf44:	4b21      	ldr	r3, [pc, #132]	@ (800cfcc <xTaskResumeAll+0x130>)
 800cf46:	2201      	movs	r2, #1
 800cf48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf4a:	4b1c      	ldr	r3, [pc, #112]	@ (800cfbc <xTaskResumeAll+0x120>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1cb      	bne.n	800ceea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf58:	f000 fb80 	bl	800d65c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cf5c:	4b1c      	ldr	r3, [pc, #112]	@ (800cfd0 <xTaskResumeAll+0x134>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d010      	beq.n	800cf8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf68:	f000 f846 	bl	800cff8 <xTaskIncrementTick>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d002      	beq.n	800cf78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cf72:	4b16      	ldr	r3, [pc, #88]	@ (800cfcc <xTaskResumeAll+0x130>)
 800cf74:	2201      	movs	r2, #1
 800cf76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1f1      	bne.n	800cf68 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cf84:	4b12      	ldr	r3, [pc, #72]	@ (800cfd0 <xTaskResumeAll+0x134>)
 800cf86:	2200      	movs	r2, #0
 800cf88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf8a:	4b10      	ldr	r3, [pc, #64]	@ (800cfcc <xTaskResumeAll+0x130>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d009      	beq.n	800cfa6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf92:	2301      	movs	r3, #1
 800cf94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf96:	4b0f      	ldr	r3, [pc, #60]	@ (800cfd4 <xTaskResumeAll+0x138>)
 800cf98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf9c:	601a      	str	r2, [r3, #0]
 800cf9e:	f3bf 8f4f 	dsb	sy
 800cfa2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfa6:	f001 f919 	bl	800e1dc <vPortExitCritical>

	return xAlreadyYielded;
 800cfaa:	68bb      	ldr	r3, [r7, #8]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	2000667c 	.word	0x2000667c
 800cfb8:	20006654 	.word	0x20006654
 800cfbc:	20006614 	.word	0x20006614
 800cfc0:	2000665c 	.word	0x2000665c
 800cfc4:	20006184 	.word	0x20006184
 800cfc8:	20006180 	.word	0x20006180
 800cfcc:	20006668 	.word	0x20006668
 800cfd0:	20006664 	.word	0x20006664
 800cfd4:	e000ed04 	.word	0xe000ed04

0800cfd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cfde:	4b05      	ldr	r3, [pc, #20]	@ (800cff4 <xTaskGetTickCount+0x1c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cfe4:	687b      	ldr	r3, [r7, #4]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	20006658 	.word	0x20006658

0800cff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cffe:	2300      	movs	r3, #0
 800d000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d002:	4b4f      	ldr	r3, [pc, #316]	@ (800d140 <xTaskIncrementTick+0x148>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	f040 8090 	bne.w	800d12c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d00c:	4b4d      	ldr	r3, [pc, #308]	@ (800d144 <xTaskIncrementTick+0x14c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	3301      	adds	r3, #1
 800d012:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d014:	4a4b      	ldr	r2, [pc, #300]	@ (800d144 <xTaskIncrementTick+0x14c>)
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d121      	bne.n	800d064 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d020:	4b49      	ldr	r3, [pc, #292]	@ (800d148 <xTaskIncrementTick+0x150>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00b      	beq.n	800d042 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d02a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	603b      	str	r3, [r7, #0]
}
 800d03c:	bf00      	nop
 800d03e:	bf00      	nop
 800d040:	e7fd      	b.n	800d03e <xTaskIncrementTick+0x46>
 800d042:	4b41      	ldr	r3, [pc, #260]	@ (800d148 <xTaskIncrementTick+0x150>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	60fb      	str	r3, [r7, #12]
 800d048:	4b40      	ldr	r3, [pc, #256]	@ (800d14c <xTaskIncrementTick+0x154>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a3e      	ldr	r2, [pc, #248]	@ (800d148 <xTaskIncrementTick+0x150>)
 800d04e:	6013      	str	r3, [r2, #0]
 800d050:	4a3e      	ldr	r2, [pc, #248]	@ (800d14c <xTaskIncrementTick+0x154>)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6013      	str	r3, [r2, #0]
 800d056:	4b3e      	ldr	r3, [pc, #248]	@ (800d150 <xTaskIncrementTick+0x158>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3301      	adds	r3, #1
 800d05c:	4a3c      	ldr	r2, [pc, #240]	@ (800d150 <xTaskIncrementTick+0x158>)
 800d05e:	6013      	str	r3, [r2, #0]
 800d060:	f000 fafc 	bl	800d65c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d064:	4b3b      	ldr	r3, [pc, #236]	@ (800d154 <xTaskIncrementTick+0x15c>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d349      	bcc.n	800d102 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d06e:	4b36      	ldr	r3, [pc, #216]	@ (800d148 <xTaskIncrementTick+0x150>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d104      	bne.n	800d082 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d078:	4b36      	ldr	r3, [pc, #216]	@ (800d154 <xTaskIncrementTick+0x15c>)
 800d07a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d07e:	601a      	str	r2, [r3, #0]
					break;
 800d080:	e03f      	b.n	800d102 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d082:	4b31      	ldr	r3, [pc, #196]	@ (800d148 <xTaskIncrementTick+0x150>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d092:	693a      	ldr	r2, [r7, #16]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	429a      	cmp	r2, r3
 800d098:	d203      	bcs.n	800d0a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d09a:	4a2e      	ldr	r2, [pc, #184]	@ (800d154 <xTaskIncrementTick+0x15c>)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d0a0:	e02f      	b.n	800d102 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fe ff82 	bl	800bfb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d004      	beq.n	800d0be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	3318      	adds	r3, #24
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7fe ff79 	bl	800bfb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0c2:	4b25      	ldr	r3, [pc, #148]	@ (800d158 <xTaskIncrementTick+0x160>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d903      	bls.n	800d0d2 <xTaskIncrementTick+0xda>
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ce:	4a22      	ldr	r2, [pc, #136]	@ (800d158 <xTaskIncrementTick+0x160>)
 800d0d0:	6013      	str	r3, [r2, #0]
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	4413      	add	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4a1f      	ldr	r2, [pc, #124]	@ (800d15c <xTaskIncrementTick+0x164>)
 800d0e0:	441a      	add	r2, r3
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	f7fe ff04 	bl	800bef6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800d160 <xTaskIncrementTick+0x168>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d3b8      	bcc.n	800d06e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d100:	e7b5      	b.n	800d06e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d102:	4b17      	ldr	r3, [pc, #92]	@ (800d160 <xTaskIncrementTick+0x168>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d108:	4914      	ldr	r1, [pc, #80]	@ (800d15c <xTaskIncrementTick+0x164>)
 800d10a:	4613      	mov	r3, r2
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	4413      	add	r3, r2
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	440b      	add	r3, r1
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b01      	cmp	r3, #1
 800d118:	d901      	bls.n	800d11e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d11a:	2301      	movs	r3, #1
 800d11c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d11e:	4b11      	ldr	r3, [pc, #68]	@ (800d164 <xTaskIncrementTick+0x16c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d007      	beq.n	800d136 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d126:	2301      	movs	r3, #1
 800d128:	617b      	str	r3, [r7, #20]
 800d12a:	e004      	b.n	800d136 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d12c:	4b0e      	ldr	r3, [pc, #56]	@ (800d168 <xTaskIncrementTick+0x170>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3301      	adds	r3, #1
 800d132:	4a0d      	ldr	r2, [pc, #52]	@ (800d168 <xTaskIncrementTick+0x170>)
 800d134:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d136:	697b      	ldr	r3, [r7, #20]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3718      	adds	r7, #24
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	2000667c 	.word	0x2000667c
 800d144:	20006658 	.word	0x20006658
 800d148:	2000660c 	.word	0x2000660c
 800d14c:	20006610 	.word	0x20006610
 800d150:	2000666c 	.word	0x2000666c
 800d154:	20006674 	.word	0x20006674
 800d158:	2000665c 	.word	0x2000665c
 800d15c:	20006184 	.word	0x20006184
 800d160:	20006180 	.word	0x20006180
 800d164:	20006668 	.word	0x20006668
 800d168:	20006664 	.word	0x20006664

0800d16c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d172:	4b28      	ldr	r3, [pc, #160]	@ (800d214 <vTaskSwitchContext+0xa8>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d003      	beq.n	800d182 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d17a:	4b27      	ldr	r3, [pc, #156]	@ (800d218 <vTaskSwitchContext+0xac>)
 800d17c:	2201      	movs	r2, #1
 800d17e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d180:	e042      	b.n	800d208 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800d182:	4b25      	ldr	r3, [pc, #148]	@ (800d218 <vTaskSwitchContext+0xac>)
 800d184:	2200      	movs	r2, #0
 800d186:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d188:	4b24      	ldr	r3, [pc, #144]	@ (800d21c <vTaskSwitchContext+0xb0>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	60fb      	str	r3, [r7, #12]
 800d18e:	e011      	b.n	800d1b4 <vTaskSwitchContext+0x48>
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d10b      	bne.n	800d1ae <vTaskSwitchContext+0x42>
	__asm volatile
 800d196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	607b      	str	r3, [r7, #4]
}
 800d1a8:	bf00      	nop
 800d1aa:	bf00      	nop
 800d1ac:	e7fd      	b.n	800d1aa <vTaskSwitchContext+0x3e>
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	60fb      	str	r3, [r7, #12]
 800d1b4:	491a      	ldr	r1, [pc, #104]	@ (800d220 <vTaskSwitchContext+0xb4>)
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4413      	add	r3, r2
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	440b      	add	r3, r1
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d0e3      	beq.n	800d190 <vTaskSwitchContext+0x24>
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	4413      	add	r3, r2
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	4a13      	ldr	r2, [pc, #76]	@ (800d220 <vTaskSwitchContext+0xb4>)
 800d1d4:	4413      	add	r3, r2
 800d1d6:	60bb      	str	r3, [r7, #8]
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	685a      	ldr	r2, [r3, #4]
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	605a      	str	r2, [r3, #4]
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	685a      	ldr	r2, [r3, #4]
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	3308      	adds	r3, #8
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d104      	bne.n	800d1f8 <vTaskSwitchContext+0x8c>
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	685a      	ldr	r2, [r3, #4]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	605a      	str	r2, [r3, #4]
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	4a09      	ldr	r2, [pc, #36]	@ (800d224 <vTaskSwitchContext+0xb8>)
 800d200:	6013      	str	r3, [r2, #0]
 800d202:	4a06      	ldr	r2, [pc, #24]	@ (800d21c <vTaskSwitchContext+0xb0>)
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6013      	str	r3, [r2, #0]
}
 800d208:	bf00      	nop
 800d20a:	3714      	adds	r7, #20
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	2000667c 	.word	0x2000667c
 800d218:	20006668 	.word	0x20006668
 800d21c:	2000665c 	.word	0x2000665c
 800d220:	20006184 	.word	0x20006184
 800d224:	20006180 	.word	0x20006180

0800d228 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d10b      	bne.n	800d250 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	60fb      	str	r3, [r7, #12]
}
 800d24a:	bf00      	nop
 800d24c:	bf00      	nop
 800d24e:	e7fd      	b.n	800d24c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d250:	4b07      	ldr	r3, [pc, #28]	@ (800d270 <vTaskPlaceOnEventList+0x48>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3318      	adds	r3, #24
 800d256:	4619      	mov	r1, r3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7fe fe70 	bl	800bf3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d25e:	2101      	movs	r1, #1
 800d260:	6838      	ldr	r0, [r7, #0]
 800d262:	f000 faa9 	bl	800d7b8 <prvAddCurrentTaskToDelayedList>
}
 800d266:	bf00      	nop
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20006180 	.word	0x20006180

0800d274 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10b      	bne.n	800d29e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28a:	f383 8811 	msr	BASEPRI, r3
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	617b      	str	r3, [r7, #20]
}
 800d298:	bf00      	nop
 800d29a:	bf00      	nop
 800d29c:	e7fd      	b.n	800d29a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d29e:	4b0a      	ldr	r3, [pc, #40]	@ (800d2c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	3318      	adds	r3, #24
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f7fe fe25 	bl	800bef6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d002      	beq.n	800d2b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d2b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d2b8:	6879      	ldr	r1, [r7, #4]
 800d2ba:	68b8      	ldr	r0, [r7, #8]
 800d2bc:	f000 fa7c 	bl	800d7b8 <prvAddCurrentTaskToDelayedList>
	}
 800d2c0:	bf00      	nop
 800d2c2:	3718      	adds	r7, #24
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	20006180 	.word	0x20006180

0800d2cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d10b      	bne.n	800d2fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	60fb      	str	r3, [r7, #12]
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop
 800d2f8:	e7fd      	b.n	800d2f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	3318      	adds	r3, #24
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fe fe56 	bl	800bfb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d304:	4b1d      	ldr	r3, [pc, #116]	@ (800d37c <xTaskRemoveFromEventList+0xb0>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d11d      	bne.n	800d348 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	3304      	adds	r3, #4
 800d310:	4618      	mov	r0, r3
 800d312:	f7fe fe4d 	bl	800bfb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d31a:	4b19      	ldr	r3, [pc, #100]	@ (800d380 <xTaskRemoveFromEventList+0xb4>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d903      	bls.n	800d32a <xTaskRemoveFromEventList+0x5e>
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d326:	4a16      	ldr	r2, [pc, #88]	@ (800d380 <xTaskRemoveFromEventList+0xb4>)
 800d328:	6013      	str	r3, [r2, #0]
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d32e:	4613      	mov	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4a13      	ldr	r2, [pc, #76]	@ (800d384 <xTaskRemoveFromEventList+0xb8>)
 800d338:	441a      	add	r2, r3
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	3304      	adds	r3, #4
 800d33e:	4619      	mov	r1, r3
 800d340:	4610      	mov	r0, r2
 800d342:	f7fe fdd8 	bl	800bef6 <vListInsertEnd>
 800d346:	e005      	b.n	800d354 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	3318      	adds	r3, #24
 800d34c:	4619      	mov	r1, r3
 800d34e:	480e      	ldr	r0, [pc, #56]	@ (800d388 <xTaskRemoveFromEventList+0xbc>)
 800d350:	f7fe fdd1 	bl	800bef6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d358:	4b0c      	ldr	r3, [pc, #48]	@ (800d38c <xTaskRemoveFromEventList+0xc0>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d35e:	429a      	cmp	r2, r3
 800d360:	d905      	bls.n	800d36e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d362:	2301      	movs	r3, #1
 800d364:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d366:	4b0a      	ldr	r3, [pc, #40]	@ (800d390 <xTaskRemoveFromEventList+0xc4>)
 800d368:	2201      	movs	r2, #1
 800d36a:	601a      	str	r2, [r3, #0]
 800d36c:	e001      	b.n	800d372 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d36e:	2300      	movs	r3, #0
 800d370:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d372:	697b      	ldr	r3, [r7, #20]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3718      	adds	r7, #24
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	2000667c 	.word	0x2000667c
 800d380:	2000665c 	.word	0x2000665c
 800d384:	20006184 	.word	0x20006184
 800d388:	20006614 	.word	0x20006614
 800d38c:	20006180 	.word	0x20006180
 800d390:	20006668 	.word	0x20006668

0800d394 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d10b      	bne.n	800d3ba <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	60fb      	str	r3, [r7, #12]
}
 800d3b4:	bf00      	nop
 800d3b6:	bf00      	nop
 800d3b8:	e7fd      	b.n	800d3b6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d3ba:	f000 fedd 	bl	800e178 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d3be:	4b07      	ldr	r3, [pc, #28]	@ (800d3dc <vTaskSetTimeOutState+0x48>)
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d3c6:	4b06      	ldr	r3, [pc, #24]	@ (800d3e0 <vTaskSetTimeOutState+0x4c>)
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d3ce:	f000 ff05 	bl	800e1dc <vPortExitCritical>
}
 800d3d2:	bf00      	nop
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	2000666c 	.word	0x2000666c
 800d3e0:	20006658 	.word	0x20006658

0800d3e4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d3ec:	4b06      	ldr	r3, [pc, #24]	@ (800d408 <vTaskInternalSetTimeOutState+0x24>)
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d3f4:	4b05      	ldr	r3, [pc, #20]	@ (800d40c <vTaskInternalSetTimeOutState+0x28>)
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	605a      	str	r2, [r3, #4]
}
 800d3fc:	bf00      	nop
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	2000666c 	.word	0x2000666c
 800d40c:	20006658 	.word	0x20006658

0800d410 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b088      	sub	sp, #32
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d10b      	bne.n	800d438 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d424:	f383 8811 	msr	BASEPRI, r3
 800d428:	f3bf 8f6f 	isb	sy
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	613b      	str	r3, [r7, #16]
}
 800d432:	bf00      	nop
 800d434:	bf00      	nop
 800d436:	e7fd      	b.n	800d434 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10b      	bne.n	800d456 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	60fb      	str	r3, [r7, #12]
}
 800d450:	bf00      	nop
 800d452:	bf00      	nop
 800d454:	e7fd      	b.n	800d452 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d456:	f000 fe8f 	bl	800e178 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d45a:	4b1d      	ldr	r3, [pc, #116]	@ (800d4d0 <xTaskCheckForTimeOut+0xc0>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	69ba      	ldr	r2, [r7, #24]
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d472:	d102      	bne.n	800d47a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d474:	2300      	movs	r3, #0
 800d476:	61fb      	str	r3, [r7, #28]
 800d478:	e023      	b.n	800d4c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	4b15      	ldr	r3, [pc, #84]	@ (800d4d4 <xTaskCheckForTimeOut+0xc4>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	429a      	cmp	r2, r3
 800d484:	d007      	beq.n	800d496 <xTaskCheckForTimeOut+0x86>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	69ba      	ldr	r2, [r7, #24]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d302      	bcc.n	800d496 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d490:	2301      	movs	r3, #1
 800d492:	61fb      	str	r3, [r7, #28]
 800d494:	e015      	b.n	800d4c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	697a      	ldr	r2, [r7, #20]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d20b      	bcs.n	800d4b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	1ad2      	subs	r2, r2, r3
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7ff ff99 	bl	800d3e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	61fb      	str	r3, [r7, #28]
 800d4b6:	e004      	b.n	800d4c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d4c2:	f000 fe8b 	bl	800e1dc <vPortExitCritical>

	return xReturn;
 800d4c6:	69fb      	ldr	r3, [r7, #28]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3720      	adds	r7, #32
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	20006658 	.word	0x20006658
 800d4d4:	2000666c 	.word	0x2000666c

0800d4d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d4d8:	b480      	push	{r7}
 800d4da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d4dc:	4b03      	ldr	r3, [pc, #12]	@ (800d4ec <vTaskMissedYield+0x14>)
 800d4de:	2201      	movs	r2, #1
 800d4e0:	601a      	str	r2, [r3, #0]
}
 800d4e2:	bf00      	nop
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	20006668 	.word	0x20006668

0800d4f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d4f8:	f000 f852 	bl	800d5a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d4fc:	4b06      	ldr	r3, [pc, #24]	@ (800d518 <prvIdleTask+0x28>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d9f9      	bls.n	800d4f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d504:	4b05      	ldr	r3, [pc, #20]	@ (800d51c <prvIdleTask+0x2c>)
 800d506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d514:	e7f0      	b.n	800d4f8 <prvIdleTask+0x8>
 800d516:	bf00      	nop
 800d518:	20006184 	.word	0x20006184
 800d51c:	e000ed04 	.word	0xe000ed04

0800d520 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d526:	2300      	movs	r3, #0
 800d528:	607b      	str	r3, [r7, #4]
 800d52a:	e00c      	b.n	800d546 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	4613      	mov	r3, r2
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	4413      	add	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	4a12      	ldr	r2, [pc, #72]	@ (800d580 <prvInitialiseTaskLists+0x60>)
 800d538:	4413      	add	r3, r2
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe fcae 	bl	800be9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	3301      	adds	r3, #1
 800d544:	607b      	str	r3, [r7, #4]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2b37      	cmp	r3, #55	@ 0x37
 800d54a:	d9ef      	bls.n	800d52c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d54c:	480d      	ldr	r0, [pc, #52]	@ (800d584 <prvInitialiseTaskLists+0x64>)
 800d54e:	f7fe fca5 	bl	800be9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d552:	480d      	ldr	r0, [pc, #52]	@ (800d588 <prvInitialiseTaskLists+0x68>)
 800d554:	f7fe fca2 	bl	800be9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d558:	480c      	ldr	r0, [pc, #48]	@ (800d58c <prvInitialiseTaskLists+0x6c>)
 800d55a:	f7fe fc9f 	bl	800be9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d55e:	480c      	ldr	r0, [pc, #48]	@ (800d590 <prvInitialiseTaskLists+0x70>)
 800d560:	f7fe fc9c 	bl	800be9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d564:	480b      	ldr	r0, [pc, #44]	@ (800d594 <prvInitialiseTaskLists+0x74>)
 800d566:	f7fe fc99 	bl	800be9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d56a:	4b0b      	ldr	r3, [pc, #44]	@ (800d598 <prvInitialiseTaskLists+0x78>)
 800d56c:	4a05      	ldr	r2, [pc, #20]	@ (800d584 <prvInitialiseTaskLists+0x64>)
 800d56e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d570:	4b0a      	ldr	r3, [pc, #40]	@ (800d59c <prvInitialiseTaskLists+0x7c>)
 800d572:	4a05      	ldr	r2, [pc, #20]	@ (800d588 <prvInitialiseTaskLists+0x68>)
 800d574:	601a      	str	r2, [r3, #0]
}
 800d576:	bf00      	nop
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	20006184 	.word	0x20006184
 800d584:	200065e4 	.word	0x200065e4
 800d588:	200065f8 	.word	0x200065f8
 800d58c:	20006614 	.word	0x20006614
 800d590:	20006628 	.word	0x20006628
 800d594:	20006640 	.word	0x20006640
 800d598:	2000660c 	.word	0x2000660c
 800d59c:	20006610 	.word	0x20006610

0800d5a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5a6:	e019      	b.n	800d5dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d5a8:	f000 fde6 	bl	800e178 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5ac:	4b10      	ldr	r3, [pc, #64]	@ (800d5f0 <prvCheckTasksWaitingTermination+0x50>)
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	3304      	adds	r3, #4
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fe fcf9 	bl	800bfb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d5be:	4b0d      	ldr	r3, [pc, #52]	@ (800d5f4 <prvCheckTasksWaitingTermination+0x54>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	3b01      	subs	r3, #1
 800d5c4:	4a0b      	ldr	r2, [pc, #44]	@ (800d5f4 <prvCheckTasksWaitingTermination+0x54>)
 800d5c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d5c8:	4b0b      	ldr	r3, [pc, #44]	@ (800d5f8 <prvCheckTasksWaitingTermination+0x58>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	3b01      	subs	r3, #1
 800d5ce:	4a0a      	ldr	r2, [pc, #40]	@ (800d5f8 <prvCheckTasksWaitingTermination+0x58>)
 800d5d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d5d2:	f000 fe03 	bl	800e1dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f810 	bl	800d5fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5dc:	4b06      	ldr	r3, [pc, #24]	@ (800d5f8 <prvCheckTasksWaitingTermination+0x58>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d1e1      	bne.n	800d5a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d5e4:	bf00      	nop
 800d5e6:	bf00      	nop
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	20006628 	.word	0x20006628
 800d5f4:	20006654 	.word	0x20006654
 800d5f8:	2000663c 	.word	0x2000663c

0800d5fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d108      	bne.n	800d620 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d612:	4618      	mov	r0, r3
 800d614:	f000 ffa0 	bl	800e558 <vPortFree>
				vPortFree( pxTCB );
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 ff9d 	bl	800e558 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d61e:	e019      	b.n	800d654 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d626:	2b01      	cmp	r3, #1
 800d628:	d103      	bne.n	800d632 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 ff94 	bl	800e558 <vPortFree>
	}
 800d630:	e010      	b.n	800d654 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d00b      	beq.n	800d654 <prvDeleteTCB+0x58>
	__asm volatile
 800d63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	60fb      	str	r3, [r7, #12]
}
 800d64e:	bf00      	nop
 800d650:	bf00      	nop
 800d652:	e7fd      	b.n	800d650 <prvDeleteTCB+0x54>
	}
 800d654:	bf00      	nop
 800d656:	3710      	adds	r7, #16
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d662:	4b0c      	ldr	r3, [pc, #48]	@ (800d694 <prvResetNextTaskUnblockTime+0x38>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d104      	bne.n	800d676 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d66c:	4b0a      	ldr	r3, [pc, #40]	@ (800d698 <prvResetNextTaskUnblockTime+0x3c>)
 800d66e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d672:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d674:	e008      	b.n	800d688 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d676:	4b07      	ldr	r3, [pc, #28]	@ (800d694 <prvResetNextTaskUnblockTime+0x38>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	4a04      	ldr	r2, [pc, #16]	@ (800d698 <prvResetNextTaskUnblockTime+0x3c>)
 800d686:	6013      	str	r3, [r2, #0]
}
 800d688:	bf00      	nop
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	2000660c 	.word	0x2000660c
 800d698:	20006674 	.word	0x20006674

0800d69c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d6a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d6d0 <xTaskGetSchedulerState+0x34>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d102      	bne.n	800d6b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	607b      	str	r3, [r7, #4]
 800d6ae:	e008      	b.n	800d6c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6b0:	4b08      	ldr	r3, [pc, #32]	@ (800d6d4 <xTaskGetSchedulerState+0x38>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d102      	bne.n	800d6be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d6b8:	2302      	movs	r3, #2
 800d6ba:	607b      	str	r3, [r7, #4]
 800d6bc:	e001      	b.n	800d6c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d6c2:	687b      	ldr	r3, [r7, #4]
	}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	20006660 	.word	0x20006660
 800d6d4:	2000667c 	.word	0x2000667c

0800d6d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b086      	sub	sp, #24
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d058      	beq.n	800d7a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d6ee:	4b2f      	ldr	r3, [pc, #188]	@ (800d7ac <xTaskPriorityDisinherit+0xd4>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	693a      	ldr	r2, [r7, #16]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d00b      	beq.n	800d710 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6fc:	f383 8811 	msr	BASEPRI, r3
 800d700:	f3bf 8f6f 	isb	sy
 800d704:	f3bf 8f4f 	dsb	sy
 800d708:	60fb      	str	r3, [r7, #12]
}
 800d70a:	bf00      	nop
 800d70c:	bf00      	nop
 800d70e:	e7fd      	b.n	800d70c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10b      	bne.n	800d730 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	60bb      	str	r3, [r7, #8]
}
 800d72a:	bf00      	nop
 800d72c:	bf00      	nop
 800d72e:	e7fd      	b.n	800d72c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d734:	1e5a      	subs	r2, r3, #1
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d742:	429a      	cmp	r2, r3
 800d744:	d02c      	beq.n	800d7a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d128      	bne.n	800d7a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	3304      	adds	r3, #4
 800d752:	4618      	mov	r0, r3
 800d754:	f7fe fc2c 	bl	800bfb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d764:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d770:	4b0f      	ldr	r3, [pc, #60]	@ (800d7b0 <xTaskPriorityDisinherit+0xd8>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	429a      	cmp	r2, r3
 800d776:	d903      	bls.n	800d780 <xTaskPriorityDisinherit+0xa8>
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d77c:	4a0c      	ldr	r2, [pc, #48]	@ (800d7b0 <xTaskPriorityDisinherit+0xd8>)
 800d77e:	6013      	str	r3, [r2, #0]
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d784:	4613      	mov	r3, r2
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	4413      	add	r3, r2
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	4a09      	ldr	r2, [pc, #36]	@ (800d7b4 <xTaskPriorityDisinherit+0xdc>)
 800d78e:	441a      	add	r2, r3
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	3304      	adds	r3, #4
 800d794:	4619      	mov	r1, r3
 800d796:	4610      	mov	r0, r2
 800d798:	f7fe fbad 	bl	800bef6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d79c:	2301      	movs	r3, #1
 800d79e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7a0:	697b      	ldr	r3, [r7, #20]
	}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3718      	adds	r7, #24
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	20006180 	.word	0x20006180
 800d7b0:	2000665c 	.word	0x2000665c
 800d7b4:	20006184 	.word	0x20006184

0800d7b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d7c2:	4b21      	ldr	r3, [pc, #132]	@ (800d848 <prvAddCurrentTaskToDelayedList+0x90>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7c8:	4b20      	ldr	r3, [pc, #128]	@ (800d84c <prvAddCurrentTaskToDelayedList+0x94>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	3304      	adds	r3, #4
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fe fbee 	bl	800bfb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7da:	d10a      	bne.n	800d7f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d007      	beq.n	800d7f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7e2:	4b1a      	ldr	r3, [pc, #104]	@ (800d84c <prvAddCurrentTaskToDelayedList+0x94>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	3304      	adds	r3, #4
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	4819      	ldr	r0, [pc, #100]	@ (800d850 <prvAddCurrentTaskToDelayedList+0x98>)
 800d7ec:	f7fe fb83 	bl	800bef6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d7f0:	e026      	b.n	800d840 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d7f2:	68fa      	ldr	r2, [r7, #12]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d7fa:	4b14      	ldr	r3, [pc, #80]	@ (800d84c <prvAddCurrentTaskToDelayedList+0x94>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	429a      	cmp	r2, r3
 800d808:	d209      	bcs.n	800d81e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d80a:	4b12      	ldr	r3, [pc, #72]	@ (800d854 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	4b0f      	ldr	r3, [pc, #60]	@ (800d84c <prvAddCurrentTaskToDelayedList+0x94>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	3304      	adds	r3, #4
 800d814:	4619      	mov	r1, r3
 800d816:	4610      	mov	r0, r2
 800d818:	f7fe fb91 	bl	800bf3e <vListInsert>
}
 800d81c:	e010      	b.n	800d840 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d81e:	4b0e      	ldr	r3, [pc, #56]	@ (800d858 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	4b0a      	ldr	r3, [pc, #40]	@ (800d84c <prvAddCurrentTaskToDelayedList+0x94>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3304      	adds	r3, #4
 800d828:	4619      	mov	r1, r3
 800d82a:	4610      	mov	r0, r2
 800d82c:	f7fe fb87 	bl	800bf3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d830:	4b0a      	ldr	r3, [pc, #40]	@ (800d85c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	68ba      	ldr	r2, [r7, #8]
 800d836:	429a      	cmp	r2, r3
 800d838:	d202      	bcs.n	800d840 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d83a:	4a08      	ldr	r2, [pc, #32]	@ (800d85c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	6013      	str	r3, [r2, #0]
}
 800d840:	bf00      	nop
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	20006658 	.word	0x20006658
 800d84c:	20006180 	.word	0x20006180
 800d850:	20006640 	.word	0x20006640
 800d854:	20006610 	.word	0x20006610
 800d858:	2000660c 	.word	0x2000660c
 800d85c:	20006674 	.word	0x20006674

0800d860 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b08a      	sub	sp, #40	@ 0x28
 800d864:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d866:	2300      	movs	r3, #0
 800d868:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d86a:	f000 fb13 	bl	800de94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d86e:	4b1d      	ldr	r3, [pc, #116]	@ (800d8e4 <xTimerCreateTimerTask+0x84>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d021      	beq.n	800d8ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d876:	2300      	movs	r3, #0
 800d878:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d87a:	2300      	movs	r3, #0
 800d87c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d87e:	1d3a      	adds	r2, r7, #4
 800d880:	f107 0108 	add.w	r1, r7, #8
 800d884:	f107 030c 	add.w	r3, r7, #12
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fe faed 	bl	800be68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d88e:	6879      	ldr	r1, [r7, #4]
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	68fa      	ldr	r2, [r7, #12]
 800d894:	9202      	str	r2, [sp, #8]
 800d896:	9301      	str	r3, [sp, #4]
 800d898:	2302      	movs	r3, #2
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	2300      	movs	r3, #0
 800d89e:	460a      	mov	r2, r1
 800d8a0:	4911      	ldr	r1, [pc, #68]	@ (800d8e8 <xTimerCreateTimerTask+0x88>)
 800d8a2:	4812      	ldr	r0, [pc, #72]	@ (800d8ec <xTimerCreateTimerTask+0x8c>)
 800d8a4:	f7ff f8a8 	bl	800c9f8 <xTaskCreateStatic>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	4a11      	ldr	r2, [pc, #68]	@ (800d8f0 <xTimerCreateTimerTask+0x90>)
 800d8ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d8ae:	4b10      	ldr	r3, [pc, #64]	@ (800d8f0 <xTimerCreateTimerTask+0x90>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d001      	beq.n	800d8ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10b      	bne.n	800d8d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	613b      	str	r3, [r7, #16]
}
 800d8d2:	bf00      	nop
 800d8d4:	bf00      	nop
 800d8d6:	e7fd      	b.n	800d8d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d8d8:	697b      	ldr	r3, [r7, #20]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3718      	adds	r7, #24
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	200066b0 	.word	0x200066b0
 800d8e8:	0801f7c4 	.word	0x0801f7c4
 800d8ec:	0800da2d 	.word	0x0800da2d
 800d8f0:	200066b4 	.word	0x200066b4

0800d8f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08a      	sub	sp, #40	@ 0x28
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d902:	2300      	movs	r3, #0
 800d904:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d10b      	bne.n	800d924 <xTimerGenericCommand+0x30>
	__asm volatile
 800d90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d910:	f383 8811 	msr	BASEPRI, r3
 800d914:	f3bf 8f6f 	isb	sy
 800d918:	f3bf 8f4f 	dsb	sy
 800d91c:	623b      	str	r3, [r7, #32]
}
 800d91e:	bf00      	nop
 800d920:	bf00      	nop
 800d922:	e7fd      	b.n	800d920 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d924:	4b19      	ldr	r3, [pc, #100]	@ (800d98c <xTimerGenericCommand+0x98>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d02a      	beq.n	800d982 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	2b05      	cmp	r3, #5
 800d93c:	dc18      	bgt.n	800d970 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d93e:	f7ff fead 	bl	800d69c <xTaskGetSchedulerState>
 800d942:	4603      	mov	r3, r0
 800d944:	2b02      	cmp	r3, #2
 800d946:	d109      	bne.n	800d95c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d948:	4b10      	ldr	r3, [pc, #64]	@ (800d98c <xTimerGenericCommand+0x98>)
 800d94a:	6818      	ldr	r0, [r3, #0]
 800d94c:	f107 0110 	add.w	r1, r7, #16
 800d950:	2300      	movs	r3, #0
 800d952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d954:	f7fe fc60 	bl	800c218 <xQueueGenericSend>
 800d958:	6278      	str	r0, [r7, #36]	@ 0x24
 800d95a:	e012      	b.n	800d982 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d95c:	4b0b      	ldr	r3, [pc, #44]	@ (800d98c <xTimerGenericCommand+0x98>)
 800d95e:	6818      	ldr	r0, [r3, #0]
 800d960:	f107 0110 	add.w	r1, r7, #16
 800d964:	2300      	movs	r3, #0
 800d966:	2200      	movs	r2, #0
 800d968:	f7fe fc56 	bl	800c218 <xQueueGenericSend>
 800d96c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d96e:	e008      	b.n	800d982 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d970:	4b06      	ldr	r3, [pc, #24]	@ (800d98c <xTimerGenericCommand+0x98>)
 800d972:	6818      	ldr	r0, [r3, #0]
 800d974:	f107 0110 	add.w	r1, r7, #16
 800d978:	2300      	movs	r3, #0
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	f7fe fd4e 	bl	800c41c <xQueueGenericSendFromISR>
 800d980:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d984:	4618      	mov	r0, r3
 800d986:	3728      	adds	r7, #40	@ 0x28
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	200066b0 	.word	0x200066b0

0800d990 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b088      	sub	sp, #32
 800d994:	af02      	add	r7, sp, #8
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d99a:	4b23      	ldr	r3, [pc, #140]	@ (800da28 <prvProcessExpiredTimer+0x98>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fe fb01 	bl	800bfb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d9b4:	f003 0304 	and.w	r3, r3, #4
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d023      	beq.n	800da04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	699a      	ldr	r2, [r3, #24]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	18d1      	adds	r1, r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	683a      	ldr	r2, [r7, #0]
 800d9c8:	6978      	ldr	r0, [r7, #20]
 800d9ca:	f000 f8d5 	bl	800db78 <prvInsertTimerInActiveList>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d020      	beq.n	800da16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	2300      	movs	r3, #0
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	2100      	movs	r1, #0
 800d9de:	6978      	ldr	r0, [r7, #20]
 800d9e0:	f7ff ff88 	bl	800d8f4 <xTimerGenericCommand>
 800d9e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d114      	bne.n	800da16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9f0:	f383 8811 	msr	BASEPRI, r3
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	60fb      	str	r3, [r7, #12]
}
 800d9fe:	bf00      	nop
 800da00:	bf00      	nop
 800da02:	e7fd      	b.n	800da00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da0a:	f023 0301 	bic.w	r3, r3, #1
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	6a1b      	ldr	r3, [r3, #32]
 800da1a:	6978      	ldr	r0, [r7, #20]
 800da1c:	4798      	blx	r3
}
 800da1e:	bf00      	nop
 800da20:	3718      	adds	r7, #24
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	200066a8 	.word	0x200066a8

0800da2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da34:	f107 0308 	add.w	r3, r7, #8
 800da38:	4618      	mov	r0, r3
 800da3a:	f000 f859 	bl	800daf0 <prvGetNextExpireTime>
 800da3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	4619      	mov	r1, r3
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f000 f805 	bl	800da54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da4a:	f000 f8d7 	bl	800dbfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da4e:	bf00      	nop
 800da50:	e7f0      	b.n	800da34 <prvTimerTask+0x8>
	...

0800da54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da5e:	f7ff fa0f 	bl	800ce80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da62:	f107 0308 	add.w	r3, r7, #8
 800da66:	4618      	mov	r0, r3
 800da68:	f000 f866 	bl	800db38 <prvSampleTimeNow>
 800da6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d130      	bne.n	800dad6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d10a      	bne.n	800da90 <prvProcessTimerOrBlockTask+0x3c>
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d806      	bhi.n	800da90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da82:	f7ff fa0b 	bl	800ce9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da86:	68f9      	ldr	r1, [r7, #12]
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7ff ff81 	bl	800d990 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800da8e:	e024      	b.n	800dada <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d008      	beq.n	800daa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800da96:	4b13      	ldr	r3, [pc, #76]	@ (800dae4 <prvProcessTimerOrBlockTask+0x90>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d101      	bne.n	800daa4 <prvProcessTimerOrBlockTask+0x50>
 800daa0:	2301      	movs	r3, #1
 800daa2:	e000      	b.n	800daa6 <prvProcessTimerOrBlockTask+0x52>
 800daa4:	2300      	movs	r3, #0
 800daa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800daa8:	4b0f      	ldr	r3, [pc, #60]	@ (800dae8 <prvProcessTimerOrBlockTask+0x94>)
 800daaa:	6818      	ldr	r0, [r3, #0]
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	683a      	ldr	r2, [r7, #0]
 800dab4:	4619      	mov	r1, r3
 800dab6:	f7fe ff6b 	bl	800c990 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800daba:	f7ff f9ef 	bl	800ce9c <xTaskResumeAll>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d10a      	bne.n	800dada <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dac4:	4b09      	ldr	r3, [pc, #36]	@ (800daec <prvProcessTimerOrBlockTask+0x98>)
 800dac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daca:	601a      	str	r2, [r3, #0]
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	f3bf 8f6f 	isb	sy
}
 800dad4:	e001      	b.n	800dada <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dad6:	f7ff f9e1 	bl	800ce9c <xTaskResumeAll>
}
 800dada:	bf00      	nop
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	200066ac 	.word	0x200066ac
 800dae8:	200066b0 	.word	0x200066b0
 800daec:	e000ed04 	.word	0xe000ed04

0800daf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800daf8:	4b0e      	ldr	r3, [pc, #56]	@ (800db34 <prvGetNextExpireTime+0x44>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d101      	bne.n	800db06 <prvGetNextExpireTime+0x16>
 800db02:	2201      	movs	r2, #1
 800db04:	e000      	b.n	800db08 <prvGetNextExpireTime+0x18>
 800db06:	2200      	movs	r2, #0
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d105      	bne.n	800db20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db14:	4b07      	ldr	r3, [pc, #28]	@ (800db34 <prvGetNextExpireTime+0x44>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	60fb      	str	r3, [r7, #12]
 800db1e:	e001      	b.n	800db24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db20:	2300      	movs	r3, #0
 800db22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db24:	68fb      	ldr	r3, [r7, #12]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3714      	adds	r7, #20
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	200066a8 	.word	0x200066a8

0800db38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db40:	f7ff fa4a 	bl	800cfd8 <xTaskGetTickCount>
 800db44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db46:	4b0b      	ldr	r3, [pc, #44]	@ (800db74 <prvSampleTimeNow+0x3c>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d205      	bcs.n	800db5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db50:	f000 f93a 	bl	800ddc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	e002      	b.n	800db62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db62:	4a04      	ldr	r2, [pc, #16]	@ (800db74 <prvSampleTimeNow+0x3c>)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db68:	68fb      	ldr	r3, [r7, #12]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3710      	adds	r7, #16
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	200066b8 	.word	0x200066b8

0800db78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b086      	sub	sp, #24
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
 800db84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db86:	2300      	movs	r3, #0
 800db88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	68ba      	ldr	r2, [r7, #8]
 800db8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800db96:	68ba      	ldr	r2, [r7, #8]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d812      	bhi.n	800dbc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	1ad2      	subs	r2, r2, r3
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	699b      	ldr	r3, [r3, #24]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d302      	bcc.n	800dbb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dbac:	2301      	movs	r3, #1
 800dbae:	617b      	str	r3, [r7, #20]
 800dbb0:	e01b      	b.n	800dbea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dbb2:	4b10      	ldr	r3, [pc, #64]	@ (800dbf4 <prvInsertTimerInActiveList+0x7c>)
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	4619      	mov	r1, r3
 800dbbc:	4610      	mov	r0, r2
 800dbbe:	f7fe f9be 	bl	800bf3e <vListInsert>
 800dbc2:	e012      	b.n	800dbea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d206      	bcs.n	800dbda <prvInsertTimerInActiveList+0x62>
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d302      	bcc.n	800dbda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	617b      	str	r3, [r7, #20]
 800dbd8:	e007      	b.n	800dbea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbda:	4b07      	ldr	r3, [pc, #28]	@ (800dbf8 <prvInsertTimerInActiveList+0x80>)
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	f7fe f9aa 	bl	800bf3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dbea:	697b      	ldr	r3, [r7, #20]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3718      	adds	r7, #24
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	200066ac 	.word	0x200066ac
 800dbf8:	200066a8 	.word	0x200066a8

0800dbfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b08e      	sub	sp, #56	@ 0x38
 800dc00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc02:	e0ce      	b.n	800dda2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	da19      	bge.n	800dc3e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc0a:	1d3b      	adds	r3, r7, #4
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d10b      	bne.n	800dc2e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800dc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc1a:	f383 8811 	msr	BASEPRI, r3
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	f3bf 8f4f 	dsb	sy
 800dc26:	61fb      	str	r3, [r7, #28]
}
 800dc28:	bf00      	nop
 800dc2a:	bf00      	nop
 800dc2c:	e7fd      	b.n	800dc2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc34:	6850      	ldr	r0, [r2, #4]
 800dc36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc38:	6892      	ldr	r2, [r2, #8]
 800dc3a:	4611      	mov	r1, r2
 800dc3c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	f2c0 80ae 	blt.w	800dda2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc4c:	695b      	ldr	r3, [r3, #20]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d004      	beq.n	800dc5c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc54:	3304      	adds	r3, #4
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fe f9aa 	bl	800bfb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc5c:	463b      	mov	r3, r7
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7ff ff6a 	bl	800db38 <prvSampleTimeNow>
 800dc64:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2b09      	cmp	r3, #9
 800dc6a:	f200 8097 	bhi.w	800dd9c <prvProcessReceivedCommands+0x1a0>
 800dc6e:	a201      	add	r2, pc, #4	@ (adr r2, 800dc74 <prvProcessReceivedCommands+0x78>)
 800dc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc74:	0800dc9d 	.word	0x0800dc9d
 800dc78:	0800dc9d 	.word	0x0800dc9d
 800dc7c:	0800dc9d 	.word	0x0800dc9d
 800dc80:	0800dd13 	.word	0x0800dd13
 800dc84:	0800dd27 	.word	0x0800dd27
 800dc88:	0800dd73 	.word	0x0800dd73
 800dc8c:	0800dc9d 	.word	0x0800dc9d
 800dc90:	0800dc9d 	.word	0x0800dc9d
 800dc94:	0800dd13 	.word	0x0800dd13
 800dc98:	0800dd27 	.word	0x0800dd27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dca2:	f043 0301 	orr.w	r3, r3, #1
 800dca6:	b2da      	uxtb	r2, r3
 800dca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcb2:	699b      	ldr	r3, [r3, #24]
 800dcb4:	18d1      	adds	r1, r2, r3
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcbc:	f7ff ff5c 	bl	800db78 <prvInsertTimerInActiveList>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d06c      	beq.n	800dda0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc8:	6a1b      	ldr	r3, [r3, #32]
 800dcca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dccc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcd4:	f003 0304 	and.w	r3, r3, #4
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d061      	beq.n	800dda0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce0:	699b      	ldr	r3, [r3, #24]
 800dce2:	441a      	add	r2, r3
 800dce4:	2300      	movs	r3, #0
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	2300      	movs	r3, #0
 800dcea:	2100      	movs	r1, #0
 800dcec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcee:	f7ff fe01 	bl	800d8f4 <xTimerGenericCommand>
 800dcf2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dcf4:	6a3b      	ldr	r3, [r7, #32]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d152      	bne.n	800dda0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800dcfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	61bb      	str	r3, [r7, #24]
}
 800dd0c:	bf00      	nop
 800dd0e:	bf00      	nop
 800dd10:	e7fd      	b.n	800dd0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd18:	f023 0301 	bic.w	r3, r3, #1
 800dd1c:	b2da      	uxtb	r2, r3
 800dd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dd24:	e03d      	b.n	800dda2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd2c:	f043 0301 	orr.w	r3, r3, #1
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd38:	68ba      	ldr	r2, [r7, #8]
 800dd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd40:	699b      	ldr	r3, [r3, #24]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d10b      	bne.n	800dd5e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800dd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd4a:	f383 8811 	msr	BASEPRI, r3
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f3bf 8f4f 	dsb	sy
 800dd56:	617b      	str	r3, [r7, #20]
}
 800dd58:	bf00      	nop
 800dd5a:	bf00      	nop
 800dd5c:	e7fd      	b.n	800dd5a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd60:	699a      	ldr	r2, [r3, #24]
 800dd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd64:	18d1      	adds	r1, r2, r3
 800dd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd6c:	f7ff ff04 	bl	800db78 <prvInsertTimerInActiveList>
					break;
 800dd70:	e017      	b.n	800dda2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd78:	f003 0302 	and.w	r3, r3, #2
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d103      	bne.n	800dd88 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800dd80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd82:	f000 fbe9 	bl	800e558 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dd86:	e00c      	b.n	800dda2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd8e:	f023 0301 	bic.w	r3, r3, #1
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dd9a:	e002      	b.n	800dda2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dd9c:	bf00      	nop
 800dd9e:	e000      	b.n	800dda2 <prvProcessReceivedCommands+0x1a6>
					break;
 800dda0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dda2:	4b08      	ldr	r3, [pc, #32]	@ (800ddc4 <prvProcessReceivedCommands+0x1c8>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	1d39      	adds	r1, r7, #4
 800dda8:	2200      	movs	r2, #0
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fe fbd4 	bl	800c558 <xQueueReceive>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	f47f af26 	bne.w	800dc04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ddb8:	bf00      	nop
 800ddba:	bf00      	nop
 800ddbc:	3730      	adds	r7, #48	@ 0x30
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	200066b0 	.word	0x200066b0

0800ddc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b088      	sub	sp, #32
 800ddcc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddce:	e049      	b.n	800de64 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddd0:	4b2e      	ldr	r3, [pc, #184]	@ (800de8c <prvSwitchTimerLists+0xc4>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddda:	4b2c      	ldr	r3, [pc, #176]	@ (800de8c <prvSwitchTimerLists+0xc4>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	3304      	adds	r3, #4
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fe f8e1 	bl	800bfb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	6a1b      	ldr	r3, [r3, #32]
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddfc:	f003 0304 	and.w	r3, r3, #4
 800de00:	2b00      	cmp	r3, #0
 800de02:	d02f      	beq.n	800de64 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	699b      	ldr	r3, [r3, #24]
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	4413      	add	r3, r2
 800de0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de0e:	68ba      	ldr	r2, [r7, #8]
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	429a      	cmp	r2, r3
 800de14:	d90e      	bls.n	800de34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	68fa      	ldr	r2, [r7, #12]
 800de20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de22:	4b1a      	ldr	r3, [pc, #104]	@ (800de8c <prvSwitchTimerLists+0xc4>)
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	3304      	adds	r3, #4
 800de2a:	4619      	mov	r1, r3
 800de2c:	4610      	mov	r0, r2
 800de2e:	f7fe f886 	bl	800bf3e <vListInsert>
 800de32:	e017      	b.n	800de64 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de34:	2300      	movs	r3, #0
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	2300      	movs	r3, #0
 800de3a:	693a      	ldr	r2, [r7, #16]
 800de3c:	2100      	movs	r1, #0
 800de3e:	68f8      	ldr	r0, [r7, #12]
 800de40:	f7ff fd58 	bl	800d8f4 <xTimerGenericCommand>
 800de44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10b      	bne.n	800de64 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800de4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de50:	f383 8811 	msr	BASEPRI, r3
 800de54:	f3bf 8f6f 	isb	sy
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	603b      	str	r3, [r7, #0]
}
 800de5e:	bf00      	nop
 800de60:	bf00      	nop
 800de62:	e7fd      	b.n	800de60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de64:	4b09      	ldr	r3, [pc, #36]	@ (800de8c <prvSwitchTimerLists+0xc4>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d1b0      	bne.n	800ddd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de6e:	4b07      	ldr	r3, [pc, #28]	@ (800de8c <prvSwitchTimerLists+0xc4>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de74:	4b06      	ldr	r3, [pc, #24]	@ (800de90 <prvSwitchTimerLists+0xc8>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a04      	ldr	r2, [pc, #16]	@ (800de8c <prvSwitchTimerLists+0xc4>)
 800de7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de7c:	4a04      	ldr	r2, [pc, #16]	@ (800de90 <prvSwitchTimerLists+0xc8>)
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	6013      	str	r3, [r2, #0]
}
 800de82:	bf00      	nop
 800de84:	3718      	adds	r7, #24
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	200066a8 	.word	0x200066a8
 800de90:	200066ac 	.word	0x200066ac

0800de94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de9a:	f000 f96d 	bl	800e178 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800de9e:	4b15      	ldr	r3, [pc, #84]	@ (800def4 <prvCheckForValidListAndQueue+0x60>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d120      	bne.n	800dee8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dea6:	4814      	ldr	r0, [pc, #80]	@ (800def8 <prvCheckForValidListAndQueue+0x64>)
 800dea8:	f7fd fff8 	bl	800be9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800deac:	4813      	ldr	r0, [pc, #76]	@ (800defc <prvCheckForValidListAndQueue+0x68>)
 800deae:	f7fd fff5 	bl	800be9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800deb2:	4b13      	ldr	r3, [pc, #76]	@ (800df00 <prvCheckForValidListAndQueue+0x6c>)
 800deb4:	4a10      	ldr	r2, [pc, #64]	@ (800def8 <prvCheckForValidListAndQueue+0x64>)
 800deb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800deb8:	4b12      	ldr	r3, [pc, #72]	@ (800df04 <prvCheckForValidListAndQueue+0x70>)
 800deba:	4a10      	ldr	r2, [pc, #64]	@ (800defc <prvCheckForValidListAndQueue+0x68>)
 800debc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800debe:	2300      	movs	r3, #0
 800dec0:	9300      	str	r3, [sp, #0]
 800dec2:	4b11      	ldr	r3, [pc, #68]	@ (800df08 <prvCheckForValidListAndQueue+0x74>)
 800dec4:	4a11      	ldr	r2, [pc, #68]	@ (800df0c <prvCheckForValidListAndQueue+0x78>)
 800dec6:	2110      	movs	r1, #16
 800dec8:	200a      	movs	r0, #10
 800deca:	f7fe f905 	bl	800c0d8 <xQueueGenericCreateStatic>
 800dece:	4603      	mov	r3, r0
 800ded0:	4a08      	ldr	r2, [pc, #32]	@ (800def4 <prvCheckForValidListAndQueue+0x60>)
 800ded2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ded4:	4b07      	ldr	r3, [pc, #28]	@ (800def4 <prvCheckForValidListAndQueue+0x60>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d005      	beq.n	800dee8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dedc:	4b05      	ldr	r3, [pc, #20]	@ (800def4 <prvCheckForValidListAndQueue+0x60>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	490b      	ldr	r1, [pc, #44]	@ (800df10 <prvCheckForValidListAndQueue+0x7c>)
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fe fd2a 	bl	800c93c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dee8:	f000 f978 	bl	800e1dc <vPortExitCritical>
}
 800deec:	bf00      	nop
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	200066b0 	.word	0x200066b0
 800def8:	20006680 	.word	0x20006680
 800defc:	20006694 	.word	0x20006694
 800df00:	200066a8 	.word	0x200066a8
 800df04:	200066ac 	.word	0x200066ac
 800df08:	2000675c 	.word	0x2000675c
 800df0c:	200066bc 	.word	0x200066bc
 800df10:	0801f7cc 	.word	0x0801f7cc

0800df14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	3b04      	subs	r3, #4
 800df24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800df2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	3b04      	subs	r3, #4
 800df32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	f023 0201 	bic.w	r2, r3, #1
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	3b04      	subs	r3, #4
 800df42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df44:	4a0c      	ldr	r2, [pc, #48]	@ (800df78 <pxPortInitialiseStack+0x64>)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	3b14      	subs	r3, #20
 800df4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	3b04      	subs	r3, #4
 800df5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f06f 0202 	mvn.w	r2, #2
 800df62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	3b20      	subs	r3, #32
 800df68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df6a:	68fb      	ldr	r3, [r7, #12]
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3714      	adds	r7, #20
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr
 800df78:	0800df7d 	.word	0x0800df7d

0800df7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df7c:	b480      	push	{r7}
 800df7e:	b085      	sub	sp, #20
 800df80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df82:	2300      	movs	r3, #0
 800df84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df86:	4b13      	ldr	r3, [pc, #76]	@ (800dfd4 <prvTaskExitError+0x58>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df8e:	d00b      	beq.n	800dfa8 <prvTaskExitError+0x2c>
	__asm volatile
 800df90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	60fb      	str	r3, [r7, #12]
}
 800dfa2:	bf00      	nop
 800dfa4:	bf00      	nop
 800dfa6:	e7fd      	b.n	800dfa4 <prvTaskExitError+0x28>
	__asm volatile
 800dfa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfac:	f383 8811 	msr	BASEPRI, r3
 800dfb0:	f3bf 8f6f 	isb	sy
 800dfb4:	f3bf 8f4f 	dsb	sy
 800dfb8:	60bb      	str	r3, [r7, #8]
}
 800dfba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dfbc:	bf00      	nop
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d0fc      	beq.n	800dfbe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dfc4:	bf00      	nop
 800dfc6:	bf00      	nop
 800dfc8:	3714      	adds	r7, #20
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	200000a0 	.word	0x200000a0
	...

0800dfe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dfe0:	4b07      	ldr	r3, [pc, #28]	@ (800e000 <pxCurrentTCBConst2>)
 800dfe2:	6819      	ldr	r1, [r3, #0]
 800dfe4:	6808      	ldr	r0, [r1, #0]
 800dfe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfea:	f380 8809 	msr	PSP, r0
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	f04f 0000 	mov.w	r0, #0
 800dff6:	f380 8811 	msr	BASEPRI, r0
 800dffa:	4770      	bx	lr
 800dffc:	f3af 8000 	nop.w

0800e000 <pxCurrentTCBConst2>:
 800e000:	20006180 	.word	0x20006180
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e004:	bf00      	nop
 800e006:	bf00      	nop

0800e008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e008:	4808      	ldr	r0, [pc, #32]	@ (800e02c <prvPortStartFirstTask+0x24>)
 800e00a:	6800      	ldr	r0, [r0, #0]
 800e00c:	6800      	ldr	r0, [r0, #0]
 800e00e:	f380 8808 	msr	MSP, r0
 800e012:	f04f 0000 	mov.w	r0, #0
 800e016:	f380 8814 	msr	CONTROL, r0
 800e01a:	b662      	cpsie	i
 800e01c:	b661      	cpsie	f
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	df00      	svc	0
 800e028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e02a:	bf00      	nop
 800e02c:	e000ed08 	.word	0xe000ed08

0800e030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e036:	4b47      	ldr	r3, [pc, #284]	@ (800e154 <xPortStartScheduler+0x124>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a47      	ldr	r2, [pc, #284]	@ (800e158 <xPortStartScheduler+0x128>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d10b      	bne.n	800e058 <xPortStartScheduler+0x28>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	613b      	str	r3, [r7, #16]
}
 800e052:	bf00      	nop
 800e054:	bf00      	nop
 800e056:	e7fd      	b.n	800e054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e058:	4b3e      	ldr	r3, [pc, #248]	@ (800e154 <xPortStartScheduler+0x124>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a3f      	ldr	r2, [pc, #252]	@ (800e15c <xPortStartScheduler+0x12c>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d10b      	bne.n	800e07a <xPortStartScheduler+0x4a>
	__asm volatile
 800e062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	60fb      	str	r3, [r7, #12]
}
 800e074:	bf00      	nop
 800e076:	bf00      	nop
 800e078:	e7fd      	b.n	800e076 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e07a:	4b39      	ldr	r3, [pc, #228]	@ (800e160 <xPortStartScheduler+0x130>)
 800e07c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	b2db      	uxtb	r3, r3
 800e084:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	22ff      	movs	r2, #255	@ 0xff
 800e08a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	b2db      	uxtb	r3, r3
 800e092:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e094:	78fb      	ldrb	r3, [r7, #3]
 800e096:	b2db      	uxtb	r3, r3
 800e098:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	4b31      	ldr	r3, [pc, #196]	@ (800e164 <xPortStartScheduler+0x134>)
 800e0a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e0a2:	4b31      	ldr	r3, [pc, #196]	@ (800e168 <xPortStartScheduler+0x138>)
 800e0a4:	2207      	movs	r2, #7
 800e0a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0a8:	e009      	b.n	800e0be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e0aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e168 <xPortStartScheduler+0x138>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e168 <xPortStartScheduler+0x138>)
 800e0b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e0b4:	78fb      	ldrb	r3, [r7, #3]
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	005b      	lsls	r3, r3, #1
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0be:	78fb      	ldrb	r3, [r7, #3]
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0c6:	2b80      	cmp	r3, #128	@ 0x80
 800e0c8:	d0ef      	beq.n	800e0aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e0ca:	4b27      	ldr	r3, [pc, #156]	@ (800e168 <xPortStartScheduler+0x138>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f1c3 0307 	rsb	r3, r3, #7
 800e0d2:	2b04      	cmp	r3, #4
 800e0d4:	d00b      	beq.n	800e0ee <xPortStartScheduler+0xbe>
	__asm volatile
 800e0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0da:	f383 8811 	msr	BASEPRI, r3
 800e0de:	f3bf 8f6f 	isb	sy
 800e0e2:	f3bf 8f4f 	dsb	sy
 800e0e6:	60bb      	str	r3, [r7, #8]
}
 800e0e8:	bf00      	nop
 800e0ea:	bf00      	nop
 800e0ec:	e7fd      	b.n	800e0ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e0ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e168 <xPortStartScheduler+0x138>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	021b      	lsls	r3, r3, #8
 800e0f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e168 <xPortStartScheduler+0x138>)
 800e0f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e0f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e168 <xPortStartScheduler+0x138>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e100:	4a19      	ldr	r2, [pc, #100]	@ (800e168 <xPortStartScheduler+0x138>)
 800e102:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	b2da      	uxtb	r2, r3
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e10c:	4b17      	ldr	r3, [pc, #92]	@ (800e16c <xPortStartScheduler+0x13c>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a16      	ldr	r2, [pc, #88]	@ (800e16c <xPortStartScheduler+0x13c>)
 800e112:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e116:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e118:	4b14      	ldr	r3, [pc, #80]	@ (800e16c <xPortStartScheduler+0x13c>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a13      	ldr	r2, [pc, #76]	@ (800e16c <xPortStartScheduler+0x13c>)
 800e11e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e122:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e124:	f000 f8da 	bl	800e2dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e128:	4b11      	ldr	r3, [pc, #68]	@ (800e170 <xPortStartScheduler+0x140>)
 800e12a:	2200      	movs	r2, #0
 800e12c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e12e:	f000 f8f9 	bl	800e324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e132:	4b10      	ldr	r3, [pc, #64]	@ (800e174 <xPortStartScheduler+0x144>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4a0f      	ldr	r2, [pc, #60]	@ (800e174 <xPortStartScheduler+0x144>)
 800e138:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e13c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e13e:	f7ff ff63 	bl	800e008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e142:	f7ff f813 	bl	800d16c <vTaskSwitchContext>
	prvTaskExitError();
 800e146:	f7ff ff19 	bl	800df7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3718      	adds	r7, #24
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	e000ed00 	.word	0xe000ed00
 800e158:	410fc271 	.word	0x410fc271
 800e15c:	410fc270 	.word	0x410fc270
 800e160:	e000e400 	.word	0xe000e400
 800e164:	200067ac 	.word	0x200067ac
 800e168:	200067b0 	.word	0x200067b0
 800e16c:	e000ed20 	.word	0xe000ed20
 800e170:	200000a0 	.word	0x200000a0
 800e174:	e000ef34 	.word	0xe000ef34

0800e178 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
	__asm volatile
 800e17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	607b      	str	r3, [r7, #4]
}
 800e190:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e192:	4b10      	ldr	r3, [pc, #64]	@ (800e1d4 <vPortEnterCritical+0x5c>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	3301      	adds	r3, #1
 800e198:	4a0e      	ldr	r2, [pc, #56]	@ (800e1d4 <vPortEnterCritical+0x5c>)
 800e19a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e19c:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d4 <vPortEnterCritical+0x5c>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d110      	bne.n	800e1c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e1a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e1d8 <vPortEnterCritical+0x60>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d00b      	beq.n	800e1c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b2:	f383 8811 	msr	BASEPRI, r3
 800e1b6:	f3bf 8f6f 	isb	sy
 800e1ba:	f3bf 8f4f 	dsb	sy
 800e1be:	603b      	str	r3, [r7, #0]
}
 800e1c0:	bf00      	nop
 800e1c2:	bf00      	nop
 800e1c4:	e7fd      	b.n	800e1c2 <vPortEnterCritical+0x4a>
	}
}
 800e1c6:	bf00      	nop
 800e1c8:	370c      	adds	r7, #12
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	200000a0 	.word	0x200000a0
 800e1d8:	e000ed04 	.word	0xe000ed04

0800e1dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e1e2:	4b12      	ldr	r3, [pc, #72]	@ (800e22c <vPortExitCritical+0x50>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d10b      	bne.n	800e202 <vPortExitCritical+0x26>
	__asm volatile
 800e1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ee:	f383 8811 	msr	BASEPRI, r3
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	607b      	str	r3, [r7, #4]
}
 800e1fc:	bf00      	nop
 800e1fe:	bf00      	nop
 800e200:	e7fd      	b.n	800e1fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e202:	4b0a      	ldr	r3, [pc, #40]	@ (800e22c <vPortExitCritical+0x50>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	3b01      	subs	r3, #1
 800e208:	4a08      	ldr	r2, [pc, #32]	@ (800e22c <vPortExitCritical+0x50>)
 800e20a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e20c:	4b07      	ldr	r3, [pc, #28]	@ (800e22c <vPortExitCritical+0x50>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d105      	bne.n	800e220 <vPortExitCritical+0x44>
 800e214:	2300      	movs	r3, #0
 800e216:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	f383 8811 	msr	BASEPRI, r3
}
 800e21e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e220:	bf00      	nop
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr
 800e22c:	200000a0 	.word	0x200000a0

0800e230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e230:	f3ef 8009 	mrs	r0, PSP
 800e234:	f3bf 8f6f 	isb	sy
 800e238:	4b15      	ldr	r3, [pc, #84]	@ (800e290 <pxCurrentTCBConst>)
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	f01e 0f10 	tst.w	lr, #16
 800e240:	bf08      	it	eq
 800e242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24a:	6010      	str	r0, [r2, #0]
 800e24c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e250:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e254:	f380 8811 	msr	BASEPRI, r0
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	f3bf 8f6f 	isb	sy
 800e260:	f7fe ff84 	bl	800d16c <vTaskSwitchContext>
 800e264:	f04f 0000 	mov.w	r0, #0
 800e268:	f380 8811 	msr	BASEPRI, r0
 800e26c:	bc09      	pop	{r0, r3}
 800e26e:	6819      	ldr	r1, [r3, #0]
 800e270:	6808      	ldr	r0, [r1, #0]
 800e272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e276:	f01e 0f10 	tst.w	lr, #16
 800e27a:	bf08      	it	eq
 800e27c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e280:	f380 8809 	msr	PSP, r0
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	f3af 8000 	nop.w

0800e290 <pxCurrentTCBConst>:
 800e290:	20006180 	.word	0x20006180
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e294:	bf00      	nop
 800e296:	bf00      	nop

0800e298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
	__asm volatile
 800e29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a2:	f383 8811 	msr	BASEPRI, r3
 800e2a6:	f3bf 8f6f 	isb	sy
 800e2aa:	f3bf 8f4f 	dsb	sy
 800e2ae:	607b      	str	r3, [r7, #4]
}
 800e2b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e2b2:	f7fe fea1 	bl	800cff8 <xTaskIncrementTick>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d003      	beq.n	800e2c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e2bc:	4b06      	ldr	r3, [pc, #24]	@ (800e2d8 <xPortSysTickHandler+0x40>)
 800e2be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	f383 8811 	msr	BASEPRI, r3
}
 800e2ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e2d0:	bf00      	nop
 800e2d2:	3708      	adds	r7, #8
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	e000ed04 	.word	0xe000ed04

0800e2dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e2dc:	b480      	push	{r7}
 800e2de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e2e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e310 <vPortSetupTimerInterrupt+0x34>)
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e2e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e314 <vPortSetupTimerInterrupt+0x38>)
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e2ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e318 <vPortSetupTimerInterrupt+0x3c>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a0a      	ldr	r2, [pc, #40]	@ (800e31c <vPortSetupTimerInterrupt+0x40>)
 800e2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2f6:	099b      	lsrs	r3, r3, #6
 800e2f8:	4a09      	ldr	r2, [pc, #36]	@ (800e320 <vPortSetupTimerInterrupt+0x44>)
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e2fe:	4b04      	ldr	r3, [pc, #16]	@ (800e310 <vPortSetupTimerInterrupt+0x34>)
 800e300:	2207      	movs	r2, #7
 800e302:	601a      	str	r2, [r3, #0]
}
 800e304:	bf00      	nop
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr
 800e30e:	bf00      	nop
 800e310:	e000e010 	.word	0xe000e010
 800e314:	e000e018 	.word	0xe000e018
 800e318:	20000004 	.word	0x20000004
 800e31c:	10624dd3 	.word	0x10624dd3
 800e320:	e000e014 	.word	0xe000e014

0800e324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e324:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e334 <vPortEnableVFP+0x10>
 800e328:	6801      	ldr	r1, [r0, #0]
 800e32a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e32e:	6001      	str	r1, [r0, #0]
 800e330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e332:	bf00      	nop
 800e334:	e000ed88 	.word	0xe000ed88

0800e338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e33e:	f3ef 8305 	mrs	r3, IPSR
 800e342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2b0f      	cmp	r3, #15
 800e348:	d915      	bls.n	800e376 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e34a:	4a18      	ldr	r2, [pc, #96]	@ (800e3ac <vPortValidateInterruptPriority+0x74>)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	4413      	add	r3, r2
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e354:	4b16      	ldr	r3, [pc, #88]	@ (800e3b0 <vPortValidateInterruptPriority+0x78>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	7afa      	ldrb	r2, [r7, #11]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d20b      	bcs.n	800e376 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	607b      	str	r3, [r7, #4]
}
 800e370:	bf00      	nop
 800e372:	bf00      	nop
 800e374:	e7fd      	b.n	800e372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e376:	4b0f      	ldr	r3, [pc, #60]	@ (800e3b4 <vPortValidateInterruptPriority+0x7c>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e37e:	4b0e      	ldr	r3, [pc, #56]	@ (800e3b8 <vPortValidateInterruptPriority+0x80>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	429a      	cmp	r2, r3
 800e384:	d90b      	bls.n	800e39e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	603b      	str	r3, [r7, #0]
}
 800e398:	bf00      	nop
 800e39a:	bf00      	nop
 800e39c:	e7fd      	b.n	800e39a <vPortValidateInterruptPriority+0x62>
	}
 800e39e:	bf00      	nop
 800e3a0:	3714      	adds	r7, #20
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	e000e3f0 	.word	0xe000e3f0
 800e3b0:	200067ac 	.word	0x200067ac
 800e3b4:	e000ed0c 	.word	0xe000ed0c
 800e3b8:	200067b0 	.word	0x200067b0

0800e3bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b08a      	sub	sp, #40	@ 0x28
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e3c8:	f7fe fd5a 	bl	800ce80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e3cc:	4b5c      	ldr	r3, [pc, #368]	@ (800e540 <pvPortMalloc+0x184>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e3d4:	f000 f924 	bl	800e620 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e3d8:	4b5a      	ldr	r3, [pc, #360]	@ (800e544 <pvPortMalloc+0x188>)
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4013      	ands	r3, r2
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f040 8095 	bne.w	800e510 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d01e      	beq.n	800e42a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e3ec:	2208      	movs	r2, #8
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f003 0307 	and.w	r3, r3, #7
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d015      	beq.n	800e42a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f023 0307 	bic.w	r3, r3, #7
 800e404:	3308      	adds	r3, #8
 800e406:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f003 0307 	and.w	r3, r3, #7
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00b      	beq.n	800e42a <pvPortMalloc+0x6e>
	__asm volatile
 800e412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	617b      	str	r3, [r7, #20]
}
 800e424:	bf00      	nop
 800e426:	bf00      	nop
 800e428:	e7fd      	b.n	800e426 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d06f      	beq.n	800e510 <pvPortMalloc+0x154>
 800e430:	4b45      	ldr	r3, [pc, #276]	@ (800e548 <pvPortMalloc+0x18c>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	429a      	cmp	r2, r3
 800e438:	d86a      	bhi.n	800e510 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e43a:	4b44      	ldr	r3, [pc, #272]	@ (800e54c <pvPortMalloc+0x190>)
 800e43c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e43e:	4b43      	ldr	r3, [pc, #268]	@ (800e54c <pvPortMalloc+0x190>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e444:	e004      	b.n	800e450 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e448:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	429a      	cmp	r2, r3
 800e458:	d903      	bls.n	800e462 <pvPortMalloc+0xa6>
 800e45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1f1      	bne.n	800e446 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e462:	4b37      	ldr	r3, [pc, #220]	@ (800e540 <pvPortMalloc+0x184>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e468:	429a      	cmp	r2, r3
 800e46a:	d051      	beq.n	800e510 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e46c:	6a3b      	ldr	r3, [r7, #32]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2208      	movs	r2, #8
 800e472:	4413      	add	r3, r2
 800e474:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	6a3b      	ldr	r3, [r7, #32]
 800e47c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e480:	685a      	ldr	r2, [r3, #4]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	1ad2      	subs	r2, r2, r3
 800e486:	2308      	movs	r3, #8
 800e488:	005b      	lsls	r3, r3, #1
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d920      	bls.n	800e4d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e48e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4413      	add	r3, r2
 800e494:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	f003 0307 	and.w	r3, r3, #7
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00b      	beq.n	800e4b8 <pvPortMalloc+0xfc>
	__asm volatile
 800e4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a4:	f383 8811 	msr	BASEPRI, r3
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	613b      	str	r3, [r7, #16]
}
 800e4b2:	bf00      	nop
 800e4b4:	bf00      	nop
 800e4b6:	e7fd      	b.n	800e4b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ba:	685a      	ldr	r2, [r3, #4]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	1ad2      	subs	r2, r2, r3
 800e4c0:	69bb      	ldr	r3, [r7, #24]
 800e4c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e4ca:	69b8      	ldr	r0, [r7, #24]
 800e4cc:	f000 f90a 	bl	800e6e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e4d0:	4b1d      	ldr	r3, [pc, #116]	@ (800e548 <pvPortMalloc+0x18c>)
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	1ad3      	subs	r3, r2, r3
 800e4da:	4a1b      	ldr	r2, [pc, #108]	@ (800e548 <pvPortMalloc+0x18c>)
 800e4dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e4de:	4b1a      	ldr	r3, [pc, #104]	@ (800e548 <pvPortMalloc+0x18c>)
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	4b1b      	ldr	r3, [pc, #108]	@ (800e550 <pvPortMalloc+0x194>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d203      	bcs.n	800e4f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e4ea:	4b17      	ldr	r3, [pc, #92]	@ (800e548 <pvPortMalloc+0x18c>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4a18      	ldr	r2, [pc, #96]	@ (800e550 <pvPortMalloc+0x194>)
 800e4f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f4:	685a      	ldr	r2, [r3, #4]
 800e4f6:	4b13      	ldr	r3, [pc, #76]	@ (800e544 <pvPortMalloc+0x188>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	431a      	orrs	r2, r3
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e502:	2200      	movs	r2, #0
 800e504:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e506:	4b13      	ldr	r3, [pc, #76]	@ (800e554 <pvPortMalloc+0x198>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	3301      	adds	r3, #1
 800e50c:	4a11      	ldr	r2, [pc, #68]	@ (800e554 <pvPortMalloc+0x198>)
 800e50e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e510:	f7fe fcc4 	bl	800ce9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	f003 0307 	and.w	r3, r3, #7
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00b      	beq.n	800e536 <pvPortMalloc+0x17a>
	__asm volatile
 800e51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	60fb      	str	r3, [r7, #12]
}
 800e530:	bf00      	nop
 800e532:	bf00      	nop
 800e534:	e7fd      	b.n	800e532 <pvPortMalloc+0x176>
	return pvReturn;
 800e536:	69fb      	ldr	r3, [r7, #28]
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3728      	adds	r7, #40	@ 0x28
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	200073bc 	.word	0x200073bc
 800e544:	200073d0 	.word	0x200073d0
 800e548:	200073c0 	.word	0x200073c0
 800e54c:	200073b4 	.word	0x200073b4
 800e550:	200073c4 	.word	0x200073c4
 800e554:	200073c8 	.word	0x200073c8

0800e558 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b086      	sub	sp, #24
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d04f      	beq.n	800e60a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e56a:	2308      	movs	r3, #8
 800e56c:	425b      	negs	r3, r3
 800e56e:	697a      	ldr	r2, [r7, #20]
 800e570:	4413      	add	r3, r2
 800e572:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	685a      	ldr	r2, [r3, #4]
 800e57c:	4b25      	ldr	r3, [pc, #148]	@ (800e614 <vPortFree+0xbc>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4013      	ands	r3, r2
 800e582:	2b00      	cmp	r3, #0
 800e584:	d10b      	bne.n	800e59e <vPortFree+0x46>
	__asm volatile
 800e586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58a:	f383 8811 	msr	BASEPRI, r3
 800e58e:	f3bf 8f6f 	isb	sy
 800e592:	f3bf 8f4f 	dsb	sy
 800e596:	60fb      	str	r3, [r7, #12]
}
 800e598:	bf00      	nop
 800e59a:	bf00      	nop
 800e59c:	e7fd      	b.n	800e59a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00b      	beq.n	800e5be <vPortFree+0x66>
	__asm volatile
 800e5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5aa:	f383 8811 	msr	BASEPRI, r3
 800e5ae:	f3bf 8f6f 	isb	sy
 800e5b2:	f3bf 8f4f 	dsb	sy
 800e5b6:	60bb      	str	r3, [r7, #8]
}
 800e5b8:	bf00      	nop
 800e5ba:	bf00      	nop
 800e5bc:	e7fd      	b.n	800e5ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	4b14      	ldr	r3, [pc, #80]	@ (800e614 <vPortFree+0xbc>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4013      	ands	r3, r2
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d01e      	beq.n	800e60a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d11a      	bne.n	800e60a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	685a      	ldr	r2, [r3, #4]
 800e5d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e614 <vPortFree+0xbc>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	43db      	mvns	r3, r3
 800e5de:	401a      	ands	r2, r3
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e5e4:	f7fe fc4c 	bl	800ce80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	685a      	ldr	r2, [r3, #4]
 800e5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e618 <vPortFree+0xc0>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	4a09      	ldr	r2, [pc, #36]	@ (800e618 <vPortFree+0xc0>)
 800e5f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e5f6:	6938      	ldr	r0, [r7, #16]
 800e5f8:	f000 f874 	bl	800e6e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e5fc:	4b07      	ldr	r3, [pc, #28]	@ (800e61c <vPortFree+0xc4>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	3301      	adds	r3, #1
 800e602:	4a06      	ldr	r2, [pc, #24]	@ (800e61c <vPortFree+0xc4>)
 800e604:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e606:	f7fe fc49 	bl	800ce9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e60a:	bf00      	nop
 800e60c:	3718      	adds	r7, #24
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	200073d0 	.word	0x200073d0
 800e618:	200073c0 	.word	0x200073c0
 800e61c:	200073cc 	.word	0x200073cc

0800e620 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e620:	b480      	push	{r7}
 800e622:	b085      	sub	sp, #20
 800e624:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e626:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800e62a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e62c:	4b27      	ldr	r3, [pc, #156]	@ (800e6cc <prvHeapInit+0xac>)
 800e62e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f003 0307 	and.w	r3, r3, #7
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00c      	beq.n	800e654 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3307      	adds	r3, #7
 800e63e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f023 0307 	bic.w	r3, r3, #7
 800e646:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e648:	68ba      	ldr	r2, [r7, #8]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	1ad3      	subs	r3, r2, r3
 800e64e:	4a1f      	ldr	r2, [pc, #124]	@ (800e6cc <prvHeapInit+0xac>)
 800e650:	4413      	add	r3, r2
 800e652:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e658:	4a1d      	ldr	r2, [pc, #116]	@ (800e6d0 <prvHeapInit+0xb0>)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e65e:	4b1c      	ldr	r3, [pc, #112]	@ (800e6d0 <prvHeapInit+0xb0>)
 800e660:	2200      	movs	r2, #0
 800e662:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	68ba      	ldr	r2, [r7, #8]
 800e668:	4413      	add	r3, r2
 800e66a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e66c:	2208      	movs	r2, #8
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	1a9b      	subs	r3, r3, r2
 800e672:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f023 0307 	bic.w	r3, r3, #7
 800e67a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	4a15      	ldr	r2, [pc, #84]	@ (800e6d4 <prvHeapInit+0xb4>)
 800e680:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e682:	4b14      	ldr	r3, [pc, #80]	@ (800e6d4 <prvHeapInit+0xb4>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2200      	movs	r2, #0
 800e688:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e68a:	4b12      	ldr	r3, [pc, #72]	@ (800e6d4 <prvHeapInit+0xb4>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2200      	movs	r2, #0
 800e690:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	68fa      	ldr	r2, [r7, #12]
 800e69a:	1ad2      	subs	r2, r2, r3
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6a0:	4b0c      	ldr	r3, [pc, #48]	@ (800e6d4 <prvHeapInit+0xb4>)
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	4a0a      	ldr	r2, [pc, #40]	@ (800e6d8 <prvHeapInit+0xb8>)
 800e6ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	4a09      	ldr	r2, [pc, #36]	@ (800e6dc <prvHeapInit+0xbc>)
 800e6b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6b8:	4b09      	ldr	r3, [pc, #36]	@ (800e6e0 <prvHeapInit+0xc0>)
 800e6ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e6be:	601a      	str	r2, [r3, #0]
}
 800e6c0:	bf00      	nop
 800e6c2:	3714      	adds	r7, #20
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr
 800e6cc:	200067b4 	.word	0x200067b4
 800e6d0:	200073b4 	.word	0x200073b4
 800e6d4:	200073bc 	.word	0x200073bc
 800e6d8:	200073c4 	.word	0x200073c4
 800e6dc:	200073c0 	.word	0x200073c0
 800e6e0:	200073d0 	.word	0x200073d0

0800e6e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e6ec:	4b28      	ldr	r3, [pc, #160]	@ (800e790 <prvInsertBlockIntoFreeList+0xac>)
 800e6ee:	60fb      	str	r3, [r7, #12]
 800e6f0:	e002      	b.n	800e6f8 <prvInsertBlockIntoFreeList+0x14>
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	60fb      	str	r3, [r7, #12]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d8f7      	bhi.n	800e6f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	4413      	add	r3, r2
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	429a      	cmp	r2, r3
 800e712:	d108      	bne.n	800e726 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	685a      	ldr	r2, [r3, #4]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	441a      	add	r2, r3
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	68ba      	ldr	r2, [r7, #8]
 800e730:	441a      	add	r2, r3
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	429a      	cmp	r2, r3
 800e738:	d118      	bne.n	800e76c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	4b15      	ldr	r3, [pc, #84]	@ (800e794 <prvInsertBlockIntoFreeList+0xb0>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	429a      	cmp	r2, r3
 800e744:	d00d      	beq.n	800e762 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	685a      	ldr	r2, [r3, #4]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	441a      	add	r2, r3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	601a      	str	r2, [r3, #0]
 800e760:	e008      	b.n	800e774 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e762:	4b0c      	ldr	r3, [pc, #48]	@ (800e794 <prvInsertBlockIntoFreeList+0xb0>)
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	601a      	str	r2, [r3, #0]
 800e76a:	e003      	b.n	800e774 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d002      	beq.n	800e782 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e782:	bf00      	nop
 800e784:	3714      	adds	r7, #20
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr
 800e78e:	bf00      	nop
 800e790:	200073b4 	.word	0x200073b4
 800e794:	200073bc 	.word	0x200073bc

0800e798 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800e798:	4b04      	ldr	r3, [pc, #16]	@ (800e7ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	b10a      	cbz	r2, 800e7a2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800e79e:	4803      	ldr	r0, [pc, #12]	@ (800e7ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800e7a0:	4770      	bx	lr
 800e7a2:	4a03      	ldr	r2, [pc, #12]	@ (800e7b0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800e7a4:	4801      	ldr	r0, [pc, #4]	@ (800e7ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800e7a6:	6812      	ldr	r2, [r2, #0]
 800e7a8:	601a      	str	r2, [r3, #0]
 800e7aa:	4770      	bx	lr
 800e7ac:	200000ac 	.word	0x200000ac
 800e7b0:	20000634 	.word	0x20000634

0800e7b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800e7b4:	4a02      	ldr	r2, [pc, #8]	@ (800e7c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800e7b6:	4b03      	ldr	r3, [pc, #12]	@ (800e7c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800e7b8:	6812      	ldr	r2, [r2, #0]
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	20000634 	.word	0x20000634
 800e7c4:	200000ac 	.word	0x200000ac

0800e7c8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800e7c8:	f006 bd6c 	b.w	80152a4 <geometry_msgs__msg__Twist__init>

0800e7cc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800e7cc:	f006 bd8e 	b.w	80152ec <geometry_msgs__msg__Twist__fini>

0800e7d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800e7d0:	b510      	push	{r4, lr}
 800e7d2:	f000 f819 	bl	800e808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e7d6:	4c07      	ldr	r4, [pc, #28]	@ (800e7f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800e7d8:	60e0      	str	r0, [r4, #12]
 800e7da:	f000 f815 	bl	800e808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e7de:	4b06      	ldr	r3, [pc, #24]	@ (800e7f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800e7e0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	b10a      	cbz	r2, 800e7ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800e7e6:	4804      	ldr	r0, [pc, #16]	@ (800e7f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800e7e8:	bd10      	pop	{r4, pc}
 800e7ea:	4a04      	ldr	r2, [pc, #16]	@ (800e7fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800e7ec:	4802      	ldr	r0, [pc, #8]	@ (800e7f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800e7ee:	6812      	ldr	r2, [r2, #0]
 800e7f0:	601a      	str	r2, [r3, #0]
 800e7f2:	bd10      	pop	{r4, pc}
 800e7f4:	200000b8 	.word	0x200000b8
 800e7f8:	20000130 	.word	0x20000130
 800e7fc:	20000638 	.word	0x20000638

0800e800 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800e800:	f006 bd80 	b.w	8015304 <geometry_msgs__msg__Vector3__init>

0800e804 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800e804:	f006 bd82 	b.w	801530c <geometry_msgs__msg__Vector3__fini>

0800e808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800e808:	4b04      	ldr	r3, [pc, #16]	@ (800e81c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	b10a      	cbz	r2, 800e812 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800e80e:	4803      	ldr	r0, [pc, #12]	@ (800e81c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e810:	4770      	bx	lr
 800e812:	4a03      	ldr	r2, [pc, #12]	@ (800e820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800e814:	4801      	ldr	r0, [pc, #4]	@ (800e81c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e816:	6812      	ldr	r2, [r2, #0]
 800e818:	601a      	str	r2, [r3, #0]
 800e81a:	4770      	bx	lr
 800e81c:	200001f0 	.word	0x200001f0
 800e820:	20000638 	.word	0x20000638

0800e824 <get_serialized_size_geometry_msgs__msg__Twist>:
 800e824:	b570      	push	{r4, r5, r6, lr}
 800e826:	4604      	mov	r4, r0
 800e828:	b148      	cbz	r0, 800e83e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800e82a:	460d      	mov	r5, r1
 800e82c:	f000 f860 	bl	800e8f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e830:	4606      	mov	r6, r0
 800e832:	1829      	adds	r1, r5, r0
 800e834:	f104 0018 	add.w	r0, r4, #24
 800e838:	f000 f85a 	bl	800e8f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e83c:	4430      	add	r0, r6
 800e83e:	bd70      	pop	{r4, r5, r6, pc}

0800e840 <_Twist__cdr_deserialize>:
 800e840:	b570      	push	{r4, r5, r6, lr}
 800e842:	460c      	mov	r4, r1
 800e844:	b189      	cbz	r1, 800e86a <_Twist__cdr_deserialize+0x2a>
 800e846:	4605      	mov	r5, r0
 800e848:	f000 f8de 	bl	800ea08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e84c:	6843      	ldr	r3, [r0, #4]
 800e84e:	4621      	mov	r1, r4
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	4628      	mov	r0, r5
 800e854:	4798      	blx	r3
 800e856:	f000 f8d7 	bl	800ea08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e85a:	6843      	ldr	r3, [r0, #4]
 800e85c:	f104 0118 	add.w	r1, r4, #24
 800e860:	4628      	mov	r0, r5
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e868:	4718      	bx	r3
 800e86a:	4608      	mov	r0, r1
 800e86c:	bd70      	pop	{r4, r5, r6, pc}
 800e86e:	bf00      	nop

0800e870 <_Twist__cdr_serialize>:
 800e870:	b510      	push	{r4, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	9101      	str	r1, [sp, #4]
 800e876:	b190      	cbz	r0, 800e89e <_Twist__cdr_serialize+0x2e>
 800e878:	4604      	mov	r4, r0
 800e87a:	f000 f8c5 	bl	800ea08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e87e:	6843      	ldr	r3, [r0, #4]
 800e880:	9901      	ldr	r1, [sp, #4]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	4620      	mov	r0, r4
 800e886:	4798      	blx	r3
 800e888:	f000 f8be 	bl	800ea08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e88c:	6843      	ldr	r3, [r0, #4]
 800e88e:	9901      	ldr	r1, [sp, #4]
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	f104 0018 	add.w	r0, r4, #24
 800e896:	b002      	add	sp, #8
 800e898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e89c:	4718      	bx	r3
 800e89e:	b002      	add	sp, #8
 800e8a0:	bd10      	pop	{r4, pc}
 800e8a2:	bf00      	nop

0800e8a4 <_Twist__get_serialized_size>:
 800e8a4:	b538      	push	{r3, r4, r5, lr}
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	b148      	cbz	r0, 800e8be <_Twist__get_serialized_size+0x1a>
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	f000 f820 	bl	800e8f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e8b0:	4605      	mov	r5, r0
 800e8b2:	4601      	mov	r1, r0
 800e8b4:	f104 0018 	add.w	r0, r4, #24
 800e8b8:	f000 f81a 	bl	800e8f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e8bc:	4428      	add	r0, r5
 800e8be:	bd38      	pop	{r3, r4, r5, pc}

0800e8c0 <_Twist__max_serialized_size>:
 800e8c0:	b510      	push	{r4, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	f10d 0007 	add.w	r0, sp, #7
 800e8cc:	f88d 3007 	strb.w	r3, [sp, #7]
 800e8d0:	f000 f87e 	bl	800e9d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	4601      	mov	r1, r0
 800e8d8:	f10d 0007 	add.w	r0, sp, #7
 800e8dc:	f000 f878 	bl	800e9d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800e8e0:	4420      	add	r0, r4
 800e8e2:	b002      	add	sp, #8
 800e8e4:	bd10      	pop	{r4, pc}
 800e8e6:	bf00      	nop

0800e8e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800e8e8:	4800      	ldr	r0, [pc, #0]	@ (800e8ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800e8ea:	4770      	bx	lr
 800e8ec:	200001fc 	.word	0x200001fc

0800e8f0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800e8f0:	b1b8      	cbz	r0, 800e922 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800e8f2:	b538      	push	{r3, r4, r5, lr}
 800e8f4:	460d      	mov	r5, r1
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	2108      	movs	r1, #8
 800e8fa:	f001 fcb1 	bl	8010260 <ucdr_alignment>
 800e8fe:	f105 0308 	add.w	r3, r5, #8
 800e902:	181c      	adds	r4, r3, r0
 800e904:	2108      	movs	r1, #8
 800e906:	4620      	mov	r0, r4
 800e908:	f001 fcaa 	bl	8010260 <ucdr_alignment>
 800e90c:	3008      	adds	r0, #8
 800e90e:	4404      	add	r4, r0
 800e910:	2108      	movs	r1, #8
 800e912:	4620      	mov	r0, r4
 800e914:	f001 fca4 	bl	8010260 <ucdr_alignment>
 800e918:	f1c5 0508 	rsb	r5, r5, #8
 800e91c:	4428      	add	r0, r5
 800e91e:	4420      	add	r0, r4
 800e920:	bd38      	pop	{r3, r4, r5, pc}
 800e922:	4770      	bx	lr

0800e924 <_Vector3__cdr_deserialize>:
 800e924:	b538      	push	{r3, r4, r5, lr}
 800e926:	460c      	mov	r4, r1
 800e928:	b171      	cbz	r1, 800e948 <_Vector3__cdr_deserialize+0x24>
 800e92a:	4605      	mov	r5, r0
 800e92c:	f001 faac 	bl	800fe88 <ucdr_deserialize_double>
 800e930:	f104 0108 	add.w	r1, r4, #8
 800e934:	4628      	mov	r0, r5
 800e936:	f001 faa7 	bl	800fe88 <ucdr_deserialize_double>
 800e93a:	f104 0110 	add.w	r1, r4, #16
 800e93e:	4628      	mov	r0, r5
 800e940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e944:	f001 baa0 	b.w	800fe88 <ucdr_deserialize_double>
 800e948:	4608      	mov	r0, r1
 800e94a:	bd38      	pop	{r3, r4, r5, pc}

0800e94c <_Vector3__cdr_serialize>:
 800e94c:	b198      	cbz	r0, 800e976 <_Vector3__cdr_serialize+0x2a>
 800e94e:	b538      	push	{r3, r4, r5, lr}
 800e950:	ed90 0b00 	vldr	d0, [r0]
 800e954:	460d      	mov	r5, r1
 800e956:	4604      	mov	r4, r0
 800e958:	4608      	mov	r0, r1
 800e95a:	f001 f8f3 	bl	800fb44 <ucdr_serialize_double>
 800e95e:	ed94 0b02 	vldr	d0, [r4, #8]
 800e962:	4628      	mov	r0, r5
 800e964:	f001 f8ee 	bl	800fb44 <ucdr_serialize_double>
 800e968:	ed94 0b04 	vldr	d0, [r4, #16]
 800e96c:	4628      	mov	r0, r5
 800e96e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e972:	f001 b8e7 	b.w	800fb44 <ucdr_serialize_double>
 800e976:	4770      	bx	lr

0800e978 <_Vector3__get_serialized_size>:
 800e978:	b198      	cbz	r0, 800e9a2 <_Vector3__get_serialized_size+0x2a>
 800e97a:	b510      	push	{r4, lr}
 800e97c:	2108      	movs	r1, #8
 800e97e:	2000      	movs	r0, #0
 800e980:	f001 fc6e 	bl	8010260 <ucdr_alignment>
 800e984:	f100 0408 	add.w	r4, r0, #8
 800e988:	2108      	movs	r1, #8
 800e98a:	4620      	mov	r0, r4
 800e98c:	f001 fc68 	bl	8010260 <ucdr_alignment>
 800e990:	3008      	adds	r0, #8
 800e992:	4404      	add	r4, r0
 800e994:	2108      	movs	r1, #8
 800e996:	4620      	mov	r0, r4
 800e998:	f001 fc62 	bl	8010260 <ucdr_alignment>
 800e99c:	3008      	adds	r0, #8
 800e99e:	4420      	add	r0, r4
 800e9a0:	bd10      	pop	{r4, pc}
 800e9a2:	4770      	bx	lr

0800e9a4 <_Vector3__max_serialized_size>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	2108      	movs	r1, #8
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	f001 fc59 	bl	8010260 <ucdr_alignment>
 800e9ae:	f100 0508 	add.w	r5, r0, #8
 800e9b2:	2108      	movs	r1, #8
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	f001 fc53 	bl	8010260 <ucdr_alignment>
 800e9ba:	f100 0408 	add.w	r4, r0, #8
 800e9be:	442c      	add	r4, r5
 800e9c0:	2108      	movs	r1, #8
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f001 fc4c 	bl	8010260 <ucdr_alignment>
 800e9c8:	3008      	adds	r0, #8
 800e9ca:	4420      	add	r0, r4
 800e9cc:	bd38      	pop	{r3, r4, r5, pc}
 800e9ce:	bf00      	nop

0800e9d0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800e9d0:	b570      	push	{r4, r5, r6, lr}
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	460c      	mov	r4, r1
 800e9d6:	7003      	strb	r3, [r0, #0]
 800e9d8:	2108      	movs	r1, #8
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f001 fc40 	bl	8010260 <ucdr_alignment>
 800e9e0:	f104 0508 	add.w	r5, r4, #8
 800e9e4:	1946      	adds	r6, r0, r5
 800e9e6:	2108      	movs	r1, #8
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	f001 fc39 	bl	8010260 <ucdr_alignment>
 800e9ee:	f100 0508 	add.w	r5, r0, #8
 800e9f2:	4435      	add	r5, r6
 800e9f4:	2108      	movs	r1, #8
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	f001 fc32 	bl	8010260 <ucdr_alignment>
 800e9fc:	f1c4 0408 	rsb	r4, r4, #8
 800ea00:	4420      	add	r0, r4
 800ea02:	4428      	add	r0, r5
 800ea04:	bd70      	pop	{r4, r5, r6, pc}
 800ea06:	bf00      	nop

0800ea08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ea08:	4800      	ldr	r0, [pc, #0]	@ (800ea0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800ea0a:	4770      	bx	lr
 800ea0c:	20000224 	.word	0x20000224

0800ea10 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800ea10:	4b04      	ldr	r3, [pc, #16]	@ (800ea24 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	b10a      	cbz	r2, 800ea1a <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800ea16:	4803      	ldr	r0, [pc, #12]	@ (800ea24 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800ea18:	4770      	bx	lr
 800ea1a:	4a03      	ldr	r2, [pc, #12]	@ (800ea28 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800ea1c:	4801      	ldr	r0, [pc, #4]	@ (800ea24 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800ea1e:	6812      	ldr	r2, [r2, #0]
 800ea20:	601a      	str	r2, [r3, #0]
 800ea22:	4770      	bx	lr
 800ea24:	20000254 	.word	0x20000254
 800ea28:	20000634 	.word	0x20000634

0800ea2c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800ea2c:	4b04      	ldr	r3, [pc, #16]	@ (800ea40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800ea2e:	4805      	ldr	r0, [pc, #20]	@ (800ea44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800ea30:	4905      	ldr	r1, [pc, #20]	@ (800ea48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800ea32:	4a06      	ldr	r2, [pc, #24]	@ (800ea4c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	6003      	str	r3, [r0, #0]
 800ea38:	600b      	str	r3, [r1, #0]
 800ea3a:	6013      	str	r3, [r2, #0]
 800ea3c:	4770      	bx	lr
 800ea3e:	bf00      	nop
 800ea40:	20000634 	.word	0x20000634
 800ea44:	20000270 	.word	0x20000270
 800ea48:	2000027c 	.word	0x2000027c
 800ea4c:	20000254 	.word	0x20000254

0800ea50 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800ea50:	f006 bd28 	b.w	80154a4 <imu_interfaces__srv__ImuCalibration_Request__init>

0800ea54 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800ea54:	f006 bd38 	b.w	80154c8 <imu_interfaces__srv__ImuCalibration_Request__fini>

0800ea58 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800ea58:	f006 bd3a 	b.w	80154d0 <imu_interfaces__srv__ImuCalibration_Response__init>

0800ea5c <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800ea5c:	f006 bd3c 	b.w	80154d8 <imu_interfaces__srv__ImuCalibration_Response__fini>

0800ea60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800ea60:	b508      	push	{r3, lr}
 800ea62:	f005 ff99 	bl	8014998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800ea66:	4b06      	ldr	r3, [pc, #24]	@ (800ea80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800ea68:	4906      	ldr	r1, [pc, #24]	@ (800ea84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	60c8      	str	r0, [r1, #12]
 800ea6e:	b10a      	cbz	r2, 800ea74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800ea70:	4803      	ldr	r0, [pc, #12]	@ (800ea80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800ea72:	bd08      	pop	{r3, pc}
 800ea74:	4a04      	ldr	r2, [pc, #16]	@ (800ea88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800ea76:	4802      	ldr	r0, [pc, #8]	@ (800ea80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800ea78:	6812      	ldr	r2, [r2, #0]
 800ea7a:	601a      	str	r2, [r3, #0]
 800ea7c:	bd08      	pop	{r3, pc}
 800ea7e:	bf00      	nop
 800ea80:	200002c4 	.word	0x200002c4
 800ea84:	20000288 	.word	0x20000288
 800ea88:	20000638 	.word	0x20000638

0800ea8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800ea8c:	4b04      	ldr	r3, [pc, #16]	@ (800eaa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	b10a      	cbz	r2, 800ea96 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800ea92:	4803      	ldr	r0, [pc, #12]	@ (800eaa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800ea94:	4770      	bx	lr
 800ea96:	4a03      	ldr	r2, [pc, #12]	@ (800eaa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800ea98:	4801      	ldr	r0, [pc, #4]	@ (800eaa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800ea9a:	6812      	ldr	r2, [r2, #0]
 800ea9c:	601a      	str	r2, [r3, #0]
 800ea9e:	4770      	bx	lr
 800eaa0:	2000030c 	.word	0x2000030c
 800eaa4:	20000638 	.word	0x20000638

0800eaa8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800eaa8:	4b16      	ldr	r3, [pc, #88]	@ (800eb04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	b510      	push	{r4, lr}
 800eaae:	b132      	cbz	r2, 800eabe <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800eab0:	685c      	ldr	r4, [r3, #4]
 800eab2:	68a3      	ldr	r3, [r4, #8]
 800eab4:	b153      	cbz	r3, 800eacc <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800eab6:	68e3      	ldr	r3, [r4, #12]
 800eab8:	b1a3      	cbz	r3, 800eae4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800eaba:	4812      	ldr	r0, [pc, #72]	@ (800eb04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800eabc:	bd10      	pop	{r4, pc}
 800eabe:	4a12      	ldr	r2, [pc, #72]	@ (800eb08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800eac0:	685c      	ldr	r4, [r3, #4]
 800eac2:	6812      	ldr	r2, [r2, #0]
 800eac4:	601a      	str	r2, [r3, #0]
 800eac6:	68a3      	ldr	r3, [r4, #8]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d1f4      	bne.n	800eab6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800eacc:	f005 ff64 	bl	8014998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800ead0:	4b0e      	ldr	r3, [pc, #56]	@ (800eb0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800ead2:	490f      	ldr	r1, [pc, #60]	@ (800eb10 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	60c8      	str	r0, [r1, #12]
 800ead8:	b17a      	cbz	r2, 800eafa <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	60a3      	str	r3, [r4, #8]
 800eade:	68e3      	ldr	r3, [r4, #12]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1ea      	bne.n	800eaba <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800eae4:	4b0b      	ldr	r3, [pc, #44]	@ (800eb14 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	b11a      	cbz	r2, 800eaf2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	4805      	ldr	r0, [pc, #20]	@ (800eb04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800eaee:	60e3      	str	r3, [r4, #12]
 800eaf0:	bd10      	pop	{r4, pc}
 800eaf2:	4a05      	ldr	r2, [pc, #20]	@ (800eb08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800eaf4:	6812      	ldr	r2, [r2, #0]
 800eaf6:	601a      	str	r2, [r3, #0]
 800eaf8:	e7f7      	b.n	800eaea <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800eafa:	4a03      	ldr	r2, [pc, #12]	@ (800eb08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800eafc:	6812      	ldr	r2, [r2, #0]
 800eafe:	601a      	str	r2, [r3, #0]
 800eb00:	e7eb      	b.n	800eada <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800eb02:	bf00      	nop
 800eb04:	20000328 	.word	0x20000328
 800eb08:	20000638 	.word	0x20000638
 800eb0c:	200002c4 	.word	0x200002c4
 800eb10:	20000288 	.word	0x20000288
 800eb14:	2000030c 	.word	0x2000030c

0800eb18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800eb18:	4800      	ldr	r0, [pc, #0]	@ (800eb1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800eb1a:	4770      	bx	lr
 800eb1c:	20000350 	.word	0x20000350

0800eb20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800eb20:	4800      	ldr	r0, [pc, #0]	@ (800eb24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800eb22:	4770      	bx	lr
 800eb24:	2000035c 	.word	0x2000035c

0800eb28 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800eb28:	b108      	cbz	r0, 800eb2e <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800eb2a:	f005 bf87 	b.w	8014a3c <get_serialized_size_sensor_msgs__msg__Imu>
 800eb2e:	4770      	bx	lr

0800eb30 <_ImuCalibration_Request__max_serialized_size>:
 800eb30:	b500      	push	{lr}
 800eb32:	b083      	sub	sp, #12
 800eb34:	2301      	movs	r3, #1
 800eb36:	2100      	movs	r1, #0
 800eb38:	f10d 0007 	add.w	r0, sp, #7
 800eb3c:	f88d 3007 	strb.w	r3, [sp, #7]
 800eb40:	f005 fffa 	bl	8014b38 <max_serialized_size_sensor_msgs__msg__Imu>
 800eb44:	b003      	add	sp, #12
 800eb46:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb4a:	bf00      	nop

0800eb4c <_ImuCalibration_Response__max_serialized_size>:
 800eb4c:	b508      	push	{r3, lr}
 800eb4e:	2101      	movs	r1, #1
 800eb50:	2000      	movs	r0, #0
 800eb52:	f001 fb85 	bl	8010260 <ucdr_alignment>
 800eb56:	3001      	adds	r0, #1
 800eb58:	bd08      	pop	{r3, pc}
 800eb5a:	bf00      	nop

0800eb5c <_ImuCalibration_Response__cdr_deserialize>:
 800eb5c:	b109      	cbz	r1, 800eb62 <_ImuCalibration_Response__cdr_deserialize+0x6>
 800eb5e:	f000 b881 	b.w	800ec64 <ucdr_deserialize_bool>
 800eb62:	4608      	mov	r0, r1
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop

0800eb68 <_ImuCalibration_Request__get_serialized_size>:
 800eb68:	b110      	cbz	r0, 800eb70 <_ImuCalibration_Request__get_serialized_size+0x8>
 800eb6a:	2100      	movs	r1, #0
 800eb6c:	f005 bf66 	b.w	8014a3c <get_serialized_size_sensor_msgs__msg__Imu>
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop

0800eb74 <_ImuCalibration_Request__cdr_deserialize>:
 800eb74:	b570      	push	{r4, r5, r6, lr}
 800eb76:	460c      	mov	r4, r1
 800eb78:	b149      	cbz	r1, 800eb8e <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	f006 f816 	bl	8014bac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800eb80:	6843      	ldr	r3, [r0, #4]
 800eb82:	4621      	mov	r1, r4
 800eb84:	4628      	mov	r0, r5
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb8c:	4718      	bx	r3
 800eb8e:	4608      	mov	r0, r1
 800eb90:	bd70      	pop	{r4, r5, r6, pc}
 800eb92:	bf00      	nop

0800eb94 <_ImuCalibration_Request__cdr_serialize>:
 800eb94:	b158      	cbz	r0, 800ebae <_ImuCalibration_Request__cdr_serialize+0x1a>
 800eb96:	b570      	push	{r4, r5, r6, lr}
 800eb98:	460d      	mov	r5, r1
 800eb9a:	4604      	mov	r4, r0
 800eb9c:	f006 f806 	bl	8014bac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800eba0:	6843      	ldr	r3, [r0, #4]
 800eba2:	4629      	mov	r1, r5
 800eba4:	4620      	mov	r0, r4
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebac:	4718      	bx	r3
 800ebae:	4770      	bx	lr

0800ebb0 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800ebb0:	b138      	cbz	r0, 800ebc2 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800ebb2:	b508      	push	{r3, lr}
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	2101      	movs	r1, #1
 800ebba:	f001 fb51 	bl	8010260 <ucdr_alignment>
 800ebbe:	3001      	adds	r0, #1
 800ebc0:	bd08      	pop	{r3, pc}
 800ebc2:	4770      	bx	lr

0800ebc4 <_ImuCalibration_Response__cdr_serialize>:
 800ebc4:	460a      	mov	r2, r1
 800ebc6:	b118      	cbz	r0, 800ebd0 <_ImuCalibration_Response__cdr_serialize+0xc>
 800ebc8:	7801      	ldrb	r1, [r0, #0]
 800ebca:	4610      	mov	r0, r2
 800ebcc:	f000 b834 	b.w	800ec38 <ucdr_serialize_bool>
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop

0800ebd4 <_ImuCalibration_Response__get_serialized_size>:
 800ebd4:	b130      	cbz	r0, 800ebe4 <_ImuCalibration_Response__get_serialized_size+0x10>
 800ebd6:	b508      	push	{r3, lr}
 800ebd8:	2101      	movs	r1, #1
 800ebda:	2000      	movs	r0, #0
 800ebdc:	f001 fb40 	bl	8010260 <ucdr_alignment>
 800ebe0:	3001      	adds	r0, #1
 800ebe2:	bd08      	pop	{r3, pc}
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop

0800ebe8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800ebe8:	4800      	ldr	r0, [pc, #0]	@ (800ebec <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800ebea:	4770      	bx	lr
 800ebec:	20000344 	.word	0x20000344

0800ebf0 <micro_ros_string_utilities_init>:
 800ebf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf4:	b086      	sub	sp, #24
 800ebf6:	460f      	mov	r7, r1
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	a801      	add	r0, sp, #4
 800ebfc:	f003 f93c 	bl	8011e78 <rcutils_get_default_allocator>
 800ec00:	4638      	mov	r0, r7
 800ec02:	f7f1 fb17 	bl	8000234 <strlen>
 800ec06:	f100 0801 	add.w	r8, r0, #1
 800ec0a:	9b01      	ldr	r3, [sp, #4]
 800ec0c:	9905      	ldr	r1, [sp, #20]
 800ec0e:	4605      	mov	r5, r0
 800ec10:	4640      	mov	r0, r8
 800ec12:	4798      	blx	r3
 800ec14:	4642      	mov	r2, r8
 800ec16:	4606      	mov	r6, r0
 800ec18:	2100      	movs	r1, #0
 800ec1a:	f00f fab1 	bl	801e180 <memset>
 800ec1e:	462a      	mov	r2, r5
 800ec20:	4639      	mov	r1, r7
 800ec22:	4630      	mov	r0, r6
 800ec24:	f00f fb75 	bl	801e312 <memcpy>
 800ec28:	4620      	mov	r0, r4
 800ec2a:	e9c4 6500 	strd	r6, r5, [r4]
 800ec2e:	f8c4 8008 	str.w	r8, [r4, #8]
 800ec32:	b006      	add	sp, #24
 800ec34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec38 <ucdr_serialize_bool>:
 800ec38:	b538      	push	{r3, r4, r5, lr}
 800ec3a:	460d      	mov	r5, r1
 800ec3c:	2101      	movs	r1, #1
 800ec3e:	4604      	mov	r4, r0
 800ec40:	f001 fac2 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800ec44:	b148      	cbz	r0, 800ec5a <ucdr_serialize_bool+0x22>
 800ec46:	68a3      	ldr	r3, [r4, #8]
 800ec48:	701d      	strb	r5, [r3, #0]
 800ec4a:	68a2      	ldr	r2, [r4, #8]
 800ec4c:	6923      	ldr	r3, [r4, #16]
 800ec4e:	2101      	movs	r1, #1
 800ec50:	440a      	add	r2, r1
 800ec52:	440b      	add	r3, r1
 800ec54:	60a2      	str	r2, [r4, #8]
 800ec56:	6123      	str	r3, [r4, #16]
 800ec58:	7561      	strb	r1, [r4, #21]
 800ec5a:	7da0      	ldrb	r0, [r4, #22]
 800ec5c:	f080 0001 	eor.w	r0, r0, #1
 800ec60:	bd38      	pop	{r3, r4, r5, pc}
 800ec62:	bf00      	nop

0800ec64 <ucdr_deserialize_bool>:
 800ec64:	b538      	push	{r3, r4, r5, lr}
 800ec66:	460d      	mov	r5, r1
 800ec68:	2101      	movs	r1, #1
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	f001 faac 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800ec70:	b160      	cbz	r0, 800ec8c <ucdr_deserialize_bool+0x28>
 800ec72:	68a2      	ldr	r2, [r4, #8]
 800ec74:	6923      	ldr	r3, [r4, #16]
 800ec76:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ec7a:	3900      	subs	r1, #0
 800ec7c:	bf18      	it	ne
 800ec7e:	2101      	movne	r1, #1
 800ec80:	7029      	strb	r1, [r5, #0]
 800ec82:	3301      	adds	r3, #1
 800ec84:	2101      	movs	r1, #1
 800ec86:	60a2      	str	r2, [r4, #8]
 800ec88:	6123      	str	r3, [r4, #16]
 800ec8a:	7561      	strb	r1, [r4, #21]
 800ec8c:	7da0      	ldrb	r0, [r4, #22]
 800ec8e:	f080 0001 	eor.w	r0, r0, #1
 800ec92:	bd38      	pop	{r3, r4, r5, pc}

0800ec94 <ucdr_serialize_uint8_t>:
 800ec94:	b538      	push	{r3, r4, r5, lr}
 800ec96:	460d      	mov	r5, r1
 800ec98:	2101      	movs	r1, #1
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	f001 fa94 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800eca0:	b148      	cbz	r0, 800ecb6 <ucdr_serialize_uint8_t+0x22>
 800eca2:	68a3      	ldr	r3, [r4, #8]
 800eca4:	701d      	strb	r5, [r3, #0]
 800eca6:	68a2      	ldr	r2, [r4, #8]
 800eca8:	6923      	ldr	r3, [r4, #16]
 800ecaa:	2101      	movs	r1, #1
 800ecac:	440a      	add	r2, r1
 800ecae:	440b      	add	r3, r1
 800ecb0:	60a2      	str	r2, [r4, #8]
 800ecb2:	6123      	str	r3, [r4, #16]
 800ecb4:	7561      	strb	r1, [r4, #21]
 800ecb6:	7da0      	ldrb	r0, [r4, #22]
 800ecb8:	f080 0001 	eor.w	r0, r0, #1
 800ecbc:	bd38      	pop	{r3, r4, r5, pc}
 800ecbe:	bf00      	nop

0800ecc0 <ucdr_deserialize_uint8_t>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	460d      	mov	r5, r1
 800ecc4:	2101      	movs	r1, #1
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	f001 fa7e 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800eccc:	b150      	cbz	r0, 800ece4 <ucdr_deserialize_uint8_t+0x24>
 800ecce:	68a3      	ldr	r3, [r4, #8]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	702b      	strb	r3, [r5, #0]
 800ecd4:	68a2      	ldr	r2, [r4, #8]
 800ecd6:	6923      	ldr	r3, [r4, #16]
 800ecd8:	2101      	movs	r1, #1
 800ecda:	440a      	add	r2, r1
 800ecdc:	440b      	add	r3, r1
 800ecde:	60a2      	str	r2, [r4, #8]
 800ece0:	6123      	str	r3, [r4, #16]
 800ece2:	7561      	strb	r1, [r4, #21]
 800ece4:	7da0      	ldrb	r0, [r4, #22]
 800ece6:	f080 0001 	eor.w	r0, r0, #1
 800ecea:	bd38      	pop	{r3, r4, r5, pc}

0800ecec <ucdr_serialize_uint16_t>:
 800ecec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf0:	b082      	sub	sp, #8
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	2102      	movs	r1, #2
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ecfc:	f001 fab8 	bl	8010270 <ucdr_buffer_alignment>
 800ed00:	4601      	mov	r1, r0
 800ed02:	4620      	mov	r0, r4
 800ed04:	7d67      	ldrb	r7, [r4, #21]
 800ed06:	f001 faf7 	bl	80102f8 <ucdr_advance_buffer>
 800ed0a:	2102      	movs	r1, #2
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	f001 fa4f 	bl	80101b0 <ucdr_check_buffer_available_for>
 800ed12:	bb78      	cbnz	r0, 800ed74 <ucdr_serialize_uint16_t+0x88>
 800ed14:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ed18:	42ab      	cmp	r3, r5
 800ed1a:	d926      	bls.n	800ed6a <ucdr_serialize_uint16_t+0x7e>
 800ed1c:	1b5e      	subs	r6, r3, r5
 800ed1e:	60a3      	str	r3, [r4, #8]
 800ed20:	6923      	ldr	r3, [r4, #16]
 800ed22:	f1c6 0802 	rsb	r8, r6, #2
 800ed26:	4433      	add	r3, r6
 800ed28:	6123      	str	r3, [r4, #16]
 800ed2a:	4641      	mov	r1, r8
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	f001 fa4b 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800ed32:	2800      	cmp	r0, #0
 800ed34:	d03b      	beq.n	800edae <ucdr_serialize_uint16_t+0xc2>
 800ed36:	7d23      	ldrb	r3, [r4, #20]
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d04a      	beq.n	800edd2 <ucdr_serialize_uint16_t+0xe6>
 800ed3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ed40:	702b      	strb	r3, [r5, #0]
 800ed42:	2e00      	cmp	r6, #0
 800ed44:	d040      	beq.n	800edc8 <ucdr_serialize_uint16_t+0xdc>
 800ed46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ed4a:	706b      	strb	r3, [r5, #1]
 800ed4c:	6923      	ldr	r3, [r4, #16]
 800ed4e:	68a2      	ldr	r2, [r4, #8]
 800ed50:	7da0      	ldrb	r0, [r4, #22]
 800ed52:	3302      	adds	r3, #2
 800ed54:	1b9e      	subs	r6, r3, r6
 800ed56:	4442      	add	r2, r8
 800ed58:	2302      	movs	r3, #2
 800ed5a:	f080 0001 	eor.w	r0, r0, #1
 800ed5e:	60a2      	str	r2, [r4, #8]
 800ed60:	6126      	str	r6, [r4, #16]
 800ed62:	7563      	strb	r3, [r4, #21]
 800ed64:	b002      	add	sp, #8
 800ed66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed6a:	2102      	movs	r1, #2
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f001 fa2b 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800ed72:	b190      	cbz	r0, 800ed9a <ucdr_serialize_uint16_t+0xae>
 800ed74:	7d23      	ldrb	r3, [r4, #20]
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	68a3      	ldr	r3, [r4, #8]
 800ed7a:	d014      	beq.n	800eda6 <ucdr_serialize_uint16_t+0xba>
 800ed7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ed80:	701a      	strb	r2, [r3, #0]
 800ed82:	68a3      	ldr	r3, [r4, #8]
 800ed84:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed88:	705a      	strb	r2, [r3, #1]
 800ed8a:	68a2      	ldr	r2, [r4, #8]
 800ed8c:	6923      	ldr	r3, [r4, #16]
 800ed8e:	3202      	adds	r2, #2
 800ed90:	3302      	adds	r3, #2
 800ed92:	2102      	movs	r1, #2
 800ed94:	60a2      	str	r2, [r4, #8]
 800ed96:	6123      	str	r3, [r4, #16]
 800ed98:	7561      	strb	r1, [r4, #21]
 800ed9a:	7da0      	ldrb	r0, [r4, #22]
 800ed9c:	f080 0001 	eor.w	r0, r0, #1
 800eda0:	b002      	add	sp, #8
 800eda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800edaa:	801a      	strh	r2, [r3, #0]
 800edac:	e7ed      	b.n	800ed8a <ucdr_serialize_uint16_t+0x9e>
 800edae:	68a2      	ldr	r2, [r4, #8]
 800edb0:	6923      	ldr	r3, [r4, #16]
 800edb2:	7da0      	ldrb	r0, [r4, #22]
 800edb4:	7567      	strb	r7, [r4, #21]
 800edb6:	1b92      	subs	r2, r2, r6
 800edb8:	1b9b      	subs	r3, r3, r6
 800edba:	f080 0001 	eor.w	r0, r0, #1
 800edbe:	60a2      	str	r2, [r4, #8]
 800edc0:	6123      	str	r3, [r4, #16]
 800edc2:	b002      	add	sp, #8
 800edc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc8:	68a3      	ldr	r3, [r4, #8]
 800edca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800edce:	701a      	strb	r2, [r3, #0]
 800edd0:	e7bc      	b.n	800ed4c <ucdr_serialize_uint16_t+0x60>
 800edd2:	4628      	mov	r0, r5
 800edd4:	f10d 0506 	add.w	r5, sp, #6
 800edd8:	4629      	mov	r1, r5
 800edda:	4632      	mov	r2, r6
 800eddc:	f00f fa99 	bl	801e312 <memcpy>
 800ede0:	68a0      	ldr	r0, [r4, #8]
 800ede2:	4642      	mov	r2, r8
 800ede4:	19a9      	adds	r1, r5, r6
 800ede6:	f00f fa94 	bl	801e312 <memcpy>
 800edea:	e7af      	b.n	800ed4c <ucdr_serialize_uint16_t+0x60>

0800edec <ucdr_serialize_endian_uint16_t>:
 800edec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edf0:	b083      	sub	sp, #12
 800edf2:	460d      	mov	r5, r1
 800edf4:	2102      	movs	r1, #2
 800edf6:	4604      	mov	r4, r0
 800edf8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800edfc:	f001 fa38 	bl	8010270 <ucdr_buffer_alignment>
 800ee00:	4601      	mov	r1, r0
 800ee02:	4620      	mov	r0, r4
 800ee04:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ee08:	f001 fa76 	bl	80102f8 <ucdr_advance_buffer>
 800ee0c:	2102      	movs	r1, #2
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f001 f9ce 	bl	80101b0 <ucdr_check_buffer_available_for>
 800ee14:	bb70      	cbnz	r0, 800ee74 <ucdr_serialize_endian_uint16_t+0x88>
 800ee16:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ee1a:	42be      	cmp	r6, r7
 800ee1c:	d925      	bls.n	800ee6a <ucdr_serialize_endian_uint16_t+0x7e>
 800ee1e:	6923      	ldr	r3, [r4, #16]
 800ee20:	60a6      	str	r6, [r4, #8]
 800ee22:	1bf6      	subs	r6, r6, r7
 800ee24:	4433      	add	r3, r6
 800ee26:	f1c6 0902 	rsb	r9, r6, #2
 800ee2a:	6123      	str	r3, [r4, #16]
 800ee2c:	4649      	mov	r1, r9
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f001 f9ca 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d039      	beq.n	800eeac <ucdr_serialize_endian_uint16_t+0xc0>
 800ee38:	2d01      	cmp	r5, #1
 800ee3a:	d04a      	beq.n	800eed2 <ucdr_serialize_endian_uint16_t+0xe6>
 800ee3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee40:	703b      	strb	r3, [r7, #0]
 800ee42:	2e00      	cmp	r6, #0
 800ee44:	d040      	beq.n	800eec8 <ucdr_serialize_endian_uint16_t+0xdc>
 800ee46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee4a:	707b      	strb	r3, [r7, #1]
 800ee4c:	6923      	ldr	r3, [r4, #16]
 800ee4e:	68a2      	ldr	r2, [r4, #8]
 800ee50:	7da0      	ldrb	r0, [r4, #22]
 800ee52:	3302      	adds	r3, #2
 800ee54:	444a      	add	r2, r9
 800ee56:	1b9b      	subs	r3, r3, r6
 800ee58:	2102      	movs	r1, #2
 800ee5a:	f080 0001 	eor.w	r0, r0, #1
 800ee5e:	60a2      	str	r2, [r4, #8]
 800ee60:	6123      	str	r3, [r4, #16]
 800ee62:	7561      	strb	r1, [r4, #21]
 800ee64:	b003      	add	sp, #12
 800ee66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee6a:	2102      	movs	r1, #2
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	f001 f9ab 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800ee72:	b188      	cbz	r0, 800ee98 <ucdr_serialize_endian_uint16_t+0xac>
 800ee74:	2d01      	cmp	r5, #1
 800ee76:	68a3      	ldr	r3, [r4, #8]
 800ee78:	d014      	beq.n	800eea4 <ucdr_serialize_endian_uint16_t+0xb8>
 800ee7a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ee7e:	701a      	strb	r2, [r3, #0]
 800ee80:	68a3      	ldr	r3, [r4, #8]
 800ee82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee86:	705a      	strb	r2, [r3, #1]
 800ee88:	68a2      	ldr	r2, [r4, #8]
 800ee8a:	6923      	ldr	r3, [r4, #16]
 800ee8c:	3202      	adds	r2, #2
 800ee8e:	3302      	adds	r3, #2
 800ee90:	2102      	movs	r1, #2
 800ee92:	60a2      	str	r2, [r4, #8]
 800ee94:	6123      	str	r3, [r4, #16]
 800ee96:	7561      	strb	r1, [r4, #21]
 800ee98:	7da0      	ldrb	r0, [r4, #22]
 800ee9a:	f080 0001 	eor.w	r0, r0, #1
 800ee9e:	b003      	add	sp, #12
 800eea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eea4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eea8:	801a      	strh	r2, [r3, #0]
 800eeaa:	e7ed      	b.n	800ee88 <ucdr_serialize_endian_uint16_t+0x9c>
 800eeac:	68a2      	ldr	r2, [r4, #8]
 800eeae:	6923      	ldr	r3, [r4, #16]
 800eeb0:	7da0      	ldrb	r0, [r4, #22]
 800eeb2:	f884 8015 	strb.w	r8, [r4, #21]
 800eeb6:	1b92      	subs	r2, r2, r6
 800eeb8:	1b9b      	subs	r3, r3, r6
 800eeba:	f080 0001 	eor.w	r0, r0, #1
 800eebe:	60a2      	str	r2, [r4, #8]
 800eec0:	6123      	str	r3, [r4, #16]
 800eec2:	b003      	add	sp, #12
 800eec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eec8:	68a3      	ldr	r3, [r4, #8]
 800eeca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eece:	701a      	strb	r2, [r3, #0]
 800eed0:	e7bc      	b.n	800ee4c <ucdr_serialize_endian_uint16_t+0x60>
 800eed2:	f10d 0506 	add.w	r5, sp, #6
 800eed6:	4629      	mov	r1, r5
 800eed8:	4632      	mov	r2, r6
 800eeda:	4638      	mov	r0, r7
 800eedc:	f00f fa19 	bl	801e312 <memcpy>
 800eee0:	68a0      	ldr	r0, [r4, #8]
 800eee2:	464a      	mov	r2, r9
 800eee4:	19a9      	adds	r1, r5, r6
 800eee6:	f00f fa14 	bl	801e312 <memcpy>
 800eeea:	e7af      	b.n	800ee4c <ucdr_serialize_endian_uint16_t+0x60>

0800eeec <ucdr_deserialize_uint16_t>:
 800eeec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef0:	460d      	mov	r5, r1
 800eef2:	2102      	movs	r1, #2
 800eef4:	4604      	mov	r4, r0
 800eef6:	f001 f9bb 	bl	8010270 <ucdr_buffer_alignment>
 800eefa:	4601      	mov	r1, r0
 800eefc:	4620      	mov	r0, r4
 800eefe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ef02:	f001 f9f9 	bl	80102f8 <ucdr_advance_buffer>
 800ef06:	2102      	movs	r1, #2
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f001 f951 	bl	80101b0 <ucdr_check_buffer_available_for>
 800ef0e:	bb60      	cbnz	r0, 800ef6a <ucdr_deserialize_uint16_t+0x7e>
 800ef10:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ef14:	42be      	cmp	r6, r7
 800ef16:	d923      	bls.n	800ef60 <ucdr_deserialize_uint16_t+0x74>
 800ef18:	6923      	ldr	r3, [r4, #16]
 800ef1a:	60a6      	str	r6, [r4, #8]
 800ef1c:	1bf6      	subs	r6, r6, r7
 800ef1e:	4433      	add	r3, r6
 800ef20:	f1c6 0902 	rsb	r9, r6, #2
 800ef24:	6123      	str	r3, [r4, #16]
 800ef26:	4649      	mov	r1, r9
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f001 f94d 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d034      	beq.n	800ef9c <ucdr_deserialize_uint16_t+0xb0>
 800ef32:	7d23      	ldrb	r3, [r4, #20]
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d042      	beq.n	800efbe <ucdr_deserialize_uint16_t+0xd2>
 800ef38:	787b      	ldrb	r3, [r7, #1]
 800ef3a:	702b      	strb	r3, [r5, #0]
 800ef3c:	2e00      	cmp	r6, #0
 800ef3e:	d03a      	beq.n	800efb6 <ucdr_deserialize_uint16_t+0xca>
 800ef40:	783b      	ldrb	r3, [r7, #0]
 800ef42:	706b      	strb	r3, [r5, #1]
 800ef44:	6923      	ldr	r3, [r4, #16]
 800ef46:	68a2      	ldr	r2, [r4, #8]
 800ef48:	7da0      	ldrb	r0, [r4, #22]
 800ef4a:	2102      	movs	r1, #2
 800ef4c:	3302      	adds	r3, #2
 800ef4e:	444a      	add	r2, r9
 800ef50:	1b9b      	subs	r3, r3, r6
 800ef52:	7561      	strb	r1, [r4, #21]
 800ef54:	60a2      	str	r2, [r4, #8]
 800ef56:	6123      	str	r3, [r4, #16]
 800ef58:	f080 0001 	eor.w	r0, r0, #1
 800ef5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef60:	2102      	movs	r1, #2
 800ef62:	4620      	mov	r0, r4
 800ef64:	f001 f930 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800ef68:	b180      	cbz	r0, 800ef8c <ucdr_deserialize_uint16_t+0xa0>
 800ef6a:	7d23      	ldrb	r3, [r4, #20]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	68a3      	ldr	r3, [r4, #8]
 800ef70:	d011      	beq.n	800ef96 <ucdr_deserialize_uint16_t+0xaa>
 800ef72:	785b      	ldrb	r3, [r3, #1]
 800ef74:	702b      	strb	r3, [r5, #0]
 800ef76:	68a3      	ldr	r3, [r4, #8]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	706b      	strb	r3, [r5, #1]
 800ef7c:	68a2      	ldr	r2, [r4, #8]
 800ef7e:	6923      	ldr	r3, [r4, #16]
 800ef80:	3202      	adds	r2, #2
 800ef82:	3302      	adds	r3, #2
 800ef84:	2102      	movs	r1, #2
 800ef86:	60a2      	str	r2, [r4, #8]
 800ef88:	6123      	str	r3, [r4, #16]
 800ef8a:	7561      	strb	r1, [r4, #21]
 800ef8c:	7da0      	ldrb	r0, [r4, #22]
 800ef8e:	f080 0001 	eor.w	r0, r0, #1
 800ef92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	802b      	strh	r3, [r5, #0]
 800ef9a:	e7ef      	b.n	800ef7c <ucdr_deserialize_uint16_t+0x90>
 800ef9c:	68a2      	ldr	r2, [r4, #8]
 800ef9e:	6923      	ldr	r3, [r4, #16]
 800efa0:	7da0      	ldrb	r0, [r4, #22]
 800efa2:	f884 8015 	strb.w	r8, [r4, #21]
 800efa6:	1b92      	subs	r2, r2, r6
 800efa8:	1b9b      	subs	r3, r3, r6
 800efaa:	60a2      	str	r2, [r4, #8]
 800efac:	6123      	str	r3, [r4, #16]
 800efae:	f080 0001 	eor.w	r0, r0, #1
 800efb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efb6:	68a3      	ldr	r3, [r4, #8]
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	706b      	strb	r3, [r5, #1]
 800efbc:	e7c2      	b.n	800ef44 <ucdr_deserialize_uint16_t+0x58>
 800efbe:	4639      	mov	r1, r7
 800efc0:	4632      	mov	r2, r6
 800efc2:	4628      	mov	r0, r5
 800efc4:	f00f f9a5 	bl	801e312 <memcpy>
 800efc8:	68a1      	ldr	r1, [r4, #8]
 800efca:	464a      	mov	r2, r9
 800efcc:	19a8      	adds	r0, r5, r6
 800efce:	f00f f9a0 	bl	801e312 <memcpy>
 800efd2:	e7b7      	b.n	800ef44 <ucdr_deserialize_uint16_t+0x58>

0800efd4 <ucdr_deserialize_endian_uint16_t>:
 800efd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efd8:	460e      	mov	r6, r1
 800efda:	2102      	movs	r1, #2
 800efdc:	4604      	mov	r4, r0
 800efde:	4615      	mov	r5, r2
 800efe0:	f001 f946 	bl	8010270 <ucdr_buffer_alignment>
 800efe4:	4601      	mov	r1, r0
 800efe6:	4620      	mov	r0, r4
 800efe8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800efec:	f001 f984 	bl	80102f8 <ucdr_advance_buffer>
 800eff0:	2102      	movs	r1, #2
 800eff2:	4620      	mov	r0, r4
 800eff4:	f001 f8dc 	bl	80101b0 <ucdr_check_buffer_available_for>
 800eff8:	bb70      	cbnz	r0, 800f058 <ucdr_deserialize_endian_uint16_t+0x84>
 800effa:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800effe:	4547      	cmp	r7, r8
 800f000:	d925      	bls.n	800f04e <ucdr_deserialize_endian_uint16_t+0x7a>
 800f002:	6923      	ldr	r3, [r4, #16]
 800f004:	60a7      	str	r7, [r4, #8]
 800f006:	eba7 0708 	sub.w	r7, r7, r8
 800f00a:	443b      	add	r3, r7
 800f00c:	f1c7 0a02 	rsb	sl, r7, #2
 800f010:	6123      	str	r3, [r4, #16]
 800f012:	4651      	mov	r1, sl
 800f014:	4620      	mov	r0, r4
 800f016:	f001 f8d7 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f01a:	2800      	cmp	r0, #0
 800f01c:	d034      	beq.n	800f088 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f01e:	2e01      	cmp	r6, #1
 800f020:	d043      	beq.n	800f0aa <ucdr_deserialize_endian_uint16_t+0xd6>
 800f022:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f026:	702b      	strb	r3, [r5, #0]
 800f028:	2f00      	cmp	r7, #0
 800f02a:	d03a      	beq.n	800f0a2 <ucdr_deserialize_endian_uint16_t+0xce>
 800f02c:	f898 3000 	ldrb.w	r3, [r8]
 800f030:	706b      	strb	r3, [r5, #1]
 800f032:	6923      	ldr	r3, [r4, #16]
 800f034:	68a2      	ldr	r2, [r4, #8]
 800f036:	7da0      	ldrb	r0, [r4, #22]
 800f038:	2102      	movs	r1, #2
 800f03a:	3302      	adds	r3, #2
 800f03c:	4452      	add	r2, sl
 800f03e:	1bdb      	subs	r3, r3, r7
 800f040:	7561      	strb	r1, [r4, #21]
 800f042:	60a2      	str	r2, [r4, #8]
 800f044:	6123      	str	r3, [r4, #16]
 800f046:	f080 0001 	eor.w	r0, r0, #1
 800f04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f04e:	2102      	movs	r1, #2
 800f050:	4620      	mov	r0, r4
 800f052:	f001 f8b9 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f056:	b178      	cbz	r0, 800f078 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f058:	2e01      	cmp	r6, #1
 800f05a:	68a3      	ldr	r3, [r4, #8]
 800f05c:	d011      	beq.n	800f082 <ucdr_deserialize_endian_uint16_t+0xae>
 800f05e:	785b      	ldrb	r3, [r3, #1]
 800f060:	702b      	strb	r3, [r5, #0]
 800f062:	68a3      	ldr	r3, [r4, #8]
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	706b      	strb	r3, [r5, #1]
 800f068:	68a2      	ldr	r2, [r4, #8]
 800f06a:	6923      	ldr	r3, [r4, #16]
 800f06c:	3202      	adds	r2, #2
 800f06e:	3302      	adds	r3, #2
 800f070:	2102      	movs	r1, #2
 800f072:	60a2      	str	r2, [r4, #8]
 800f074:	6123      	str	r3, [r4, #16]
 800f076:	7561      	strb	r1, [r4, #21]
 800f078:	7da0      	ldrb	r0, [r4, #22]
 800f07a:	f080 0001 	eor.w	r0, r0, #1
 800f07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f082:	881b      	ldrh	r3, [r3, #0]
 800f084:	802b      	strh	r3, [r5, #0]
 800f086:	e7ef      	b.n	800f068 <ucdr_deserialize_endian_uint16_t+0x94>
 800f088:	68a2      	ldr	r2, [r4, #8]
 800f08a:	6923      	ldr	r3, [r4, #16]
 800f08c:	7da0      	ldrb	r0, [r4, #22]
 800f08e:	f884 9015 	strb.w	r9, [r4, #21]
 800f092:	1bd2      	subs	r2, r2, r7
 800f094:	1bdb      	subs	r3, r3, r7
 800f096:	60a2      	str	r2, [r4, #8]
 800f098:	6123      	str	r3, [r4, #16]
 800f09a:	f080 0001 	eor.w	r0, r0, #1
 800f09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a2:	68a3      	ldr	r3, [r4, #8]
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	706b      	strb	r3, [r5, #1]
 800f0a8:	e7c3      	b.n	800f032 <ucdr_deserialize_endian_uint16_t+0x5e>
 800f0aa:	4641      	mov	r1, r8
 800f0ac:	463a      	mov	r2, r7
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	f00f f92f 	bl	801e312 <memcpy>
 800f0b4:	68a1      	ldr	r1, [r4, #8]
 800f0b6:	4652      	mov	r2, sl
 800f0b8:	19e8      	adds	r0, r5, r7
 800f0ba:	f00f f92a 	bl	801e312 <memcpy>
 800f0be:	e7b8      	b.n	800f032 <ucdr_deserialize_endian_uint16_t+0x5e>

0800f0c0 <ucdr_serialize_uint32_t>:
 800f0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c4:	b082      	sub	sp, #8
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	9101      	str	r1, [sp, #4]
 800f0ca:	2104      	movs	r1, #4
 800f0cc:	f001 f8d0 	bl	8010270 <ucdr_buffer_alignment>
 800f0d0:	4601      	mov	r1, r0
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	7d67      	ldrb	r7, [r4, #21]
 800f0d6:	f001 f90f 	bl	80102f8 <ucdr_advance_buffer>
 800f0da:	2104      	movs	r1, #4
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f001 f867 	bl	80101b0 <ucdr_check_buffer_available_for>
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	d139      	bne.n	800f15a <ucdr_serialize_uint32_t+0x9a>
 800f0e6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f0ea:	42ab      	cmp	r3, r5
 800f0ec:	d930      	bls.n	800f150 <ucdr_serialize_uint32_t+0x90>
 800f0ee:	1b5e      	subs	r6, r3, r5
 800f0f0:	60a3      	str	r3, [r4, #8]
 800f0f2:	6923      	ldr	r3, [r4, #16]
 800f0f4:	f1c6 0804 	rsb	r8, r6, #4
 800f0f8:	4433      	add	r3, r6
 800f0fa:	6123      	str	r3, [r4, #16]
 800f0fc:	4641      	mov	r1, r8
 800f0fe:	4620      	mov	r0, r4
 800f100:	f001 f862 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f104:	2800      	cmp	r0, #0
 800f106:	d04c      	beq.n	800f1a2 <ucdr_serialize_uint32_t+0xe2>
 800f108:	7d23      	ldrb	r3, [r4, #20]
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d063      	beq.n	800f1d6 <ucdr_serialize_uint32_t+0x116>
 800f10e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f112:	702b      	strb	r3, [r5, #0]
 800f114:	2e00      	cmp	r6, #0
 800f116:	d051      	beq.n	800f1bc <ucdr_serialize_uint32_t+0xfc>
 800f118:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f11c:	706b      	strb	r3, [r5, #1]
 800f11e:	2e01      	cmp	r6, #1
 800f120:	d050      	beq.n	800f1c4 <ucdr_serialize_uint32_t+0x104>
 800f122:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f126:	70ab      	strb	r3, [r5, #2]
 800f128:	2e02      	cmp	r6, #2
 800f12a:	d04f      	beq.n	800f1cc <ucdr_serialize_uint32_t+0x10c>
 800f12c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f130:	70eb      	strb	r3, [r5, #3]
 800f132:	6923      	ldr	r3, [r4, #16]
 800f134:	68a2      	ldr	r2, [r4, #8]
 800f136:	7da0      	ldrb	r0, [r4, #22]
 800f138:	3304      	adds	r3, #4
 800f13a:	1b9e      	subs	r6, r3, r6
 800f13c:	4442      	add	r2, r8
 800f13e:	2304      	movs	r3, #4
 800f140:	f080 0001 	eor.w	r0, r0, #1
 800f144:	60a2      	str	r2, [r4, #8]
 800f146:	6126      	str	r6, [r4, #16]
 800f148:	7563      	strb	r3, [r4, #21]
 800f14a:	b002      	add	sp, #8
 800f14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f150:	2104      	movs	r1, #4
 800f152:	4620      	mov	r0, r4
 800f154:	f001 f838 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f158:	b1d0      	cbz	r0, 800f190 <ucdr_serialize_uint32_t+0xd0>
 800f15a:	7d23      	ldrb	r3, [r4, #20]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	68a3      	ldr	r3, [r4, #8]
 800f160:	d01c      	beq.n	800f19c <ucdr_serialize_uint32_t+0xdc>
 800f162:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f166:	701a      	strb	r2, [r3, #0]
 800f168:	68a3      	ldr	r3, [r4, #8]
 800f16a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f16e:	705a      	strb	r2, [r3, #1]
 800f170:	68a3      	ldr	r3, [r4, #8]
 800f172:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f176:	709a      	strb	r2, [r3, #2]
 800f178:	68a3      	ldr	r3, [r4, #8]
 800f17a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f17e:	70da      	strb	r2, [r3, #3]
 800f180:	68a2      	ldr	r2, [r4, #8]
 800f182:	6923      	ldr	r3, [r4, #16]
 800f184:	3204      	adds	r2, #4
 800f186:	3304      	adds	r3, #4
 800f188:	2104      	movs	r1, #4
 800f18a:	60a2      	str	r2, [r4, #8]
 800f18c:	6123      	str	r3, [r4, #16]
 800f18e:	7561      	strb	r1, [r4, #21]
 800f190:	7da0      	ldrb	r0, [r4, #22]
 800f192:	f080 0001 	eor.w	r0, r0, #1
 800f196:	b002      	add	sp, #8
 800f198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f19c:	9a01      	ldr	r2, [sp, #4]
 800f19e:	601a      	str	r2, [r3, #0]
 800f1a0:	e7ee      	b.n	800f180 <ucdr_serialize_uint32_t+0xc0>
 800f1a2:	68a2      	ldr	r2, [r4, #8]
 800f1a4:	6923      	ldr	r3, [r4, #16]
 800f1a6:	7da0      	ldrb	r0, [r4, #22]
 800f1a8:	7567      	strb	r7, [r4, #21]
 800f1aa:	1b92      	subs	r2, r2, r6
 800f1ac:	1b9b      	subs	r3, r3, r6
 800f1ae:	f080 0001 	eor.w	r0, r0, #1
 800f1b2:	60a2      	str	r2, [r4, #8]
 800f1b4:	6123      	str	r3, [r4, #16]
 800f1b6:	b002      	add	sp, #8
 800f1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1bc:	68a3      	ldr	r3, [r4, #8]
 800f1be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f1c2:	701a      	strb	r2, [r3, #0]
 800f1c4:	68a3      	ldr	r3, [r4, #8]
 800f1c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f1ca:	701a      	strb	r2, [r3, #0]
 800f1cc:	68a3      	ldr	r3, [r4, #8]
 800f1ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f1d2:	701a      	strb	r2, [r3, #0]
 800f1d4:	e7ad      	b.n	800f132 <ucdr_serialize_uint32_t+0x72>
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	ad01      	add	r5, sp, #4
 800f1da:	4629      	mov	r1, r5
 800f1dc:	4632      	mov	r2, r6
 800f1de:	f00f f898 	bl	801e312 <memcpy>
 800f1e2:	68a0      	ldr	r0, [r4, #8]
 800f1e4:	4642      	mov	r2, r8
 800f1e6:	19a9      	adds	r1, r5, r6
 800f1e8:	f00f f893 	bl	801e312 <memcpy>
 800f1ec:	e7a1      	b.n	800f132 <ucdr_serialize_uint32_t+0x72>
 800f1ee:	bf00      	nop

0800f1f0 <ucdr_serialize_endian_uint32_t>:
 800f1f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1f4:	b083      	sub	sp, #12
 800f1f6:	460d      	mov	r5, r1
 800f1f8:	2104      	movs	r1, #4
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	9201      	str	r2, [sp, #4]
 800f1fe:	f001 f837 	bl	8010270 <ucdr_buffer_alignment>
 800f202:	4601      	mov	r1, r0
 800f204:	4620      	mov	r0, r4
 800f206:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f20a:	f001 f875 	bl	80102f8 <ucdr_advance_buffer>
 800f20e:	2104      	movs	r1, #4
 800f210:	4620      	mov	r0, r4
 800f212:	f000 ffcd 	bl	80101b0 <ucdr_check_buffer_available_for>
 800f216:	2800      	cmp	r0, #0
 800f218:	d138      	bne.n	800f28c <ucdr_serialize_endian_uint32_t+0x9c>
 800f21a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f21e:	42b7      	cmp	r7, r6
 800f220:	d92f      	bls.n	800f282 <ucdr_serialize_endian_uint32_t+0x92>
 800f222:	6923      	ldr	r3, [r4, #16]
 800f224:	60a7      	str	r7, [r4, #8]
 800f226:	1bbf      	subs	r7, r7, r6
 800f228:	443b      	add	r3, r7
 800f22a:	f1c7 0904 	rsb	r9, r7, #4
 800f22e:	6123      	str	r3, [r4, #16]
 800f230:	4649      	mov	r1, r9
 800f232:	4620      	mov	r0, r4
 800f234:	f000 ffc8 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f238:	2800      	cmp	r0, #0
 800f23a:	d04a      	beq.n	800f2d2 <ucdr_serialize_endian_uint32_t+0xe2>
 800f23c:	2d01      	cmp	r5, #1
 800f23e:	d063      	beq.n	800f308 <ucdr_serialize_endian_uint32_t+0x118>
 800f240:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f244:	7033      	strb	r3, [r6, #0]
 800f246:	2f00      	cmp	r7, #0
 800f248:	d051      	beq.n	800f2ee <ucdr_serialize_endian_uint32_t+0xfe>
 800f24a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f24e:	7073      	strb	r3, [r6, #1]
 800f250:	2f01      	cmp	r7, #1
 800f252:	d050      	beq.n	800f2f6 <ucdr_serialize_endian_uint32_t+0x106>
 800f254:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f258:	70b3      	strb	r3, [r6, #2]
 800f25a:	2f02      	cmp	r7, #2
 800f25c:	d04f      	beq.n	800f2fe <ucdr_serialize_endian_uint32_t+0x10e>
 800f25e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f262:	70f3      	strb	r3, [r6, #3]
 800f264:	6923      	ldr	r3, [r4, #16]
 800f266:	68a2      	ldr	r2, [r4, #8]
 800f268:	7da0      	ldrb	r0, [r4, #22]
 800f26a:	3304      	adds	r3, #4
 800f26c:	444a      	add	r2, r9
 800f26e:	1bdb      	subs	r3, r3, r7
 800f270:	2104      	movs	r1, #4
 800f272:	f080 0001 	eor.w	r0, r0, #1
 800f276:	60a2      	str	r2, [r4, #8]
 800f278:	6123      	str	r3, [r4, #16]
 800f27a:	7561      	strb	r1, [r4, #21]
 800f27c:	b003      	add	sp, #12
 800f27e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f282:	2104      	movs	r1, #4
 800f284:	4620      	mov	r0, r4
 800f286:	f000 ff9f 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f28a:	b1c8      	cbz	r0, 800f2c0 <ucdr_serialize_endian_uint32_t+0xd0>
 800f28c:	2d01      	cmp	r5, #1
 800f28e:	68a3      	ldr	r3, [r4, #8]
 800f290:	d01c      	beq.n	800f2cc <ucdr_serialize_endian_uint32_t+0xdc>
 800f292:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f296:	701a      	strb	r2, [r3, #0]
 800f298:	68a3      	ldr	r3, [r4, #8]
 800f29a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f29e:	705a      	strb	r2, [r3, #1]
 800f2a0:	68a3      	ldr	r3, [r4, #8]
 800f2a2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f2a6:	709a      	strb	r2, [r3, #2]
 800f2a8:	68a3      	ldr	r3, [r4, #8]
 800f2aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f2ae:	70da      	strb	r2, [r3, #3]
 800f2b0:	68a2      	ldr	r2, [r4, #8]
 800f2b2:	6923      	ldr	r3, [r4, #16]
 800f2b4:	3204      	adds	r2, #4
 800f2b6:	3304      	adds	r3, #4
 800f2b8:	2104      	movs	r1, #4
 800f2ba:	60a2      	str	r2, [r4, #8]
 800f2bc:	6123      	str	r3, [r4, #16]
 800f2be:	7561      	strb	r1, [r4, #21]
 800f2c0:	7da0      	ldrb	r0, [r4, #22]
 800f2c2:	f080 0001 	eor.w	r0, r0, #1
 800f2c6:	b003      	add	sp, #12
 800f2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2cc:	9a01      	ldr	r2, [sp, #4]
 800f2ce:	601a      	str	r2, [r3, #0]
 800f2d0:	e7ee      	b.n	800f2b0 <ucdr_serialize_endian_uint32_t+0xc0>
 800f2d2:	68a2      	ldr	r2, [r4, #8]
 800f2d4:	6923      	ldr	r3, [r4, #16]
 800f2d6:	7da0      	ldrb	r0, [r4, #22]
 800f2d8:	f884 8015 	strb.w	r8, [r4, #21]
 800f2dc:	1bd2      	subs	r2, r2, r7
 800f2de:	1bdb      	subs	r3, r3, r7
 800f2e0:	f080 0001 	eor.w	r0, r0, #1
 800f2e4:	60a2      	str	r2, [r4, #8]
 800f2e6:	6123      	str	r3, [r4, #16]
 800f2e8:	b003      	add	sp, #12
 800f2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2ee:	68a3      	ldr	r3, [r4, #8]
 800f2f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2f4:	701a      	strb	r2, [r3, #0]
 800f2f6:	68a3      	ldr	r3, [r4, #8]
 800f2f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f2fc:	701a      	strb	r2, [r3, #0]
 800f2fe:	68a3      	ldr	r3, [r4, #8]
 800f300:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f304:	701a      	strb	r2, [r3, #0]
 800f306:	e7ad      	b.n	800f264 <ucdr_serialize_endian_uint32_t+0x74>
 800f308:	ad01      	add	r5, sp, #4
 800f30a:	4629      	mov	r1, r5
 800f30c:	463a      	mov	r2, r7
 800f30e:	4630      	mov	r0, r6
 800f310:	f00e ffff 	bl	801e312 <memcpy>
 800f314:	68a0      	ldr	r0, [r4, #8]
 800f316:	464a      	mov	r2, r9
 800f318:	19e9      	adds	r1, r5, r7
 800f31a:	f00e fffa 	bl	801e312 <memcpy>
 800f31e:	e7a1      	b.n	800f264 <ucdr_serialize_endian_uint32_t+0x74>

0800f320 <ucdr_deserialize_uint32_t>:
 800f320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f324:	460d      	mov	r5, r1
 800f326:	2104      	movs	r1, #4
 800f328:	4604      	mov	r4, r0
 800f32a:	f000 ffa1 	bl	8010270 <ucdr_buffer_alignment>
 800f32e:	4601      	mov	r1, r0
 800f330:	4620      	mov	r0, r4
 800f332:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f336:	f000 ffdf 	bl	80102f8 <ucdr_advance_buffer>
 800f33a:	2104      	movs	r1, #4
 800f33c:	4620      	mov	r0, r4
 800f33e:	f000 ff37 	bl	80101b0 <ucdr_check_buffer_available_for>
 800f342:	2800      	cmp	r0, #0
 800f344:	d138      	bne.n	800f3b8 <ucdr_deserialize_uint32_t+0x98>
 800f346:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f34a:	42b7      	cmp	r7, r6
 800f34c:	d92f      	bls.n	800f3ae <ucdr_deserialize_uint32_t+0x8e>
 800f34e:	6923      	ldr	r3, [r4, #16]
 800f350:	60a7      	str	r7, [r4, #8]
 800f352:	1bbf      	subs	r7, r7, r6
 800f354:	443b      	add	r3, r7
 800f356:	f1c7 0904 	rsb	r9, r7, #4
 800f35a:	6123      	str	r3, [r4, #16]
 800f35c:	4649      	mov	r1, r9
 800f35e:	4620      	mov	r0, r4
 800f360:	f000 ff32 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f364:	2800      	cmp	r0, #0
 800f366:	d046      	beq.n	800f3f6 <ucdr_deserialize_uint32_t+0xd6>
 800f368:	7d23      	ldrb	r3, [r4, #20]
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d05c      	beq.n	800f428 <ucdr_deserialize_uint32_t+0x108>
 800f36e:	78f3      	ldrb	r3, [r6, #3]
 800f370:	702b      	strb	r3, [r5, #0]
 800f372:	2f00      	cmp	r7, #0
 800f374:	d04c      	beq.n	800f410 <ucdr_deserialize_uint32_t+0xf0>
 800f376:	78b3      	ldrb	r3, [r6, #2]
 800f378:	706b      	strb	r3, [r5, #1]
 800f37a:	2f01      	cmp	r7, #1
 800f37c:	f105 0302 	add.w	r3, r5, #2
 800f380:	d04a      	beq.n	800f418 <ucdr_deserialize_uint32_t+0xf8>
 800f382:	7873      	ldrb	r3, [r6, #1]
 800f384:	70ab      	strb	r3, [r5, #2]
 800f386:	2f02      	cmp	r7, #2
 800f388:	f105 0303 	add.w	r3, r5, #3
 800f38c:	d048      	beq.n	800f420 <ucdr_deserialize_uint32_t+0x100>
 800f38e:	7833      	ldrb	r3, [r6, #0]
 800f390:	70eb      	strb	r3, [r5, #3]
 800f392:	6923      	ldr	r3, [r4, #16]
 800f394:	68a2      	ldr	r2, [r4, #8]
 800f396:	7da0      	ldrb	r0, [r4, #22]
 800f398:	2104      	movs	r1, #4
 800f39a:	3304      	adds	r3, #4
 800f39c:	444a      	add	r2, r9
 800f39e:	1bdb      	subs	r3, r3, r7
 800f3a0:	7561      	strb	r1, [r4, #21]
 800f3a2:	60a2      	str	r2, [r4, #8]
 800f3a4:	6123      	str	r3, [r4, #16]
 800f3a6:	f080 0001 	eor.w	r0, r0, #1
 800f3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ae:	2104      	movs	r1, #4
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f000 ff09 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f3b6:	b1b0      	cbz	r0, 800f3e6 <ucdr_deserialize_uint32_t+0xc6>
 800f3b8:	7d23      	ldrb	r3, [r4, #20]
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	68a3      	ldr	r3, [r4, #8]
 800f3be:	d017      	beq.n	800f3f0 <ucdr_deserialize_uint32_t+0xd0>
 800f3c0:	78db      	ldrb	r3, [r3, #3]
 800f3c2:	702b      	strb	r3, [r5, #0]
 800f3c4:	68a3      	ldr	r3, [r4, #8]
 800f3c6:	789b      	ldrb	r3, [r3, #2]
 800f3c8:	706b      	strb	r3, [r5, #1]
 800f3ca:	68a3      	ldr	r3, [r4, #8]
 800f3cc:	785b      	ldrb	r3, [r3, #1]
 800f3ce:	70ab      	strb	r3, [r5, #2]
 800f3d0:	68a3      	ldr	r3, [r4, #8]
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	70eb      	strb	r3, [r5, #3]
 800f3d6:	68a2      	ldr	r2, [r4, #8]
 800f3d8:	6923      	ldr	r3, [r4, #16]
 800f3da:	3204      	adds	r2, #4
 800f3dc:	3304      	adds	r3, #4
 800f3de:	2104      	movs	r1, #4
 800f3e0:	60a2      	str	r2, [r4, #8]
 800f3e2:	6123      	str	r3, [r4, #16]
 800f3e4:	7561      	strb	r1, [r4, #21]
 800f3e6:	7da0      	ldrb	r0, [r4, #22]
 800f3e8:	f080 0001 	eor.w	r0, r0, #1
 800f3ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	602b      	str	r3, [r5, #0]
 800f3f4:	e7ef      	b.n	800f3d6 <ucdr_deserialize_uint32_t+0xb6>
 800f3f6:	68a2      	ldr	r2, [r4, #8]
 800f3f8:	6923      	ldr	r3, [r4, #16]
 800f3fa:	7da0      	ldrb	r0, [r4, #22]
 800f3fc:	f884 8015 	strb.w	r8, [r4, #21]
 800f400:	1bd2      	subs	r2, r2, r7
 800f402:	1bdb      	subs	r3, r3, r7
 800f404:	60a2      	str	r2, [r4, #8]
 800f406:	6123      	str	r3, [r4, #16]
 800f408:	f080 0001 	eor.w	r0, r0, #1
 800f40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f410:	68a3      	ldr	r3, [r4, #8]
 800f412:	789b      	ldrb	r3, [r3, #2]
 800f414:	706b      	strb	r3, [r5, #1]
 800f416:	1cab      	adds	r3, r5, #2
 800f418:	68a2      	ldr	r2, [r4, #8]
 800f41a:	7852      	ldrb	r2, [r2, #1]
 800f41c:	f803 2b01 	strb.w	r2, [r3], #1
 800f420:	68a2      	ldr	r2, [r4, #8]
 800f422:	7812      	ldrb	r2, [r2, #0]
 800f424:	701a      	strb	r2, [r3, #0]
 800f426:	e7b4      	b.n	800f392 <ucdr_deserialize_uint32_t+0x72>
 800f428:	4631      	mov	r1, r6
 800f42a:	463a      	mov	r2, r7
 800f42c:	4628      	mov	r0, r5
 800f42e:	f00e ff70 	bl	801e312 <memcpy>
 800f432:	68a1      	ldr	r1, [r4, #8]
 800f434:	464a      	mov	r2, r9
 800f436:	19e8      	adds	r0, r5, r7
 800f438:	f00e ff6b 	bl	801e312 <memcpy>
 800f43c:	e7a9      	b.n	800f392 <ucdr_deserialize_uint32_t+0x72>
 800f43e:	bf00      	nop

0800f440 <ucdr_deserialize_endian_uint32_t>:
 800f440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f444:	460e      	mov	r6, r1
 800f446:	2104      	movs	r1, #4
 800f448:	4604      	mov	r4, r0
 800f44a:	4615      	mov	r5, r2
 800f44c:	f000 ff10 	bl	8010270 <ucdr_buffer_alignment>
 800f450:	4601      	mov	r1, r0
 800f452:	4620      	mov	r0, r4
 800f454:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f458:	f000 ff4e 	bl	80102f8 <ucdr_advance_buffer>
 800f45c:	2104      	movs	r1, #4
 800f45e:	4620      	mov	r0, r4
 800f460:	f000 fea6 	bl	80101b0 <ucdr_check_buffer_available_for>
 800f464:	2800      	cmp	r0, #0
 800f466:	d13c      	bne.n	800f4e2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800f468:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f46c:	42bb      	cmp	r3, r7
 800f46e:	d933      	bls.n	800f4d8 <ucdr_deserialize_endian_uint32_t+0x98>
 800f470:	eba3 0807 	sub.w	r8, r3, r7
 800f474:	60a3      	str	r3, [r4, #8]
 800f476:	6923      	ldr	r3, [r4, #16]
 800f478:	f1c8 0a04 	rsb	sl, r8, #4
 800f47c:	4443      	add	r3, r8
 800f47e:	6123      	str	r3, [r4, #16]
 800f480:	4651      	mov	r1, sl
 800f482:	4620      	mov	r0, r4
 800f484:	f000 fea0 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f488:	2800      	cmp	r0, #0
 800f48a:	d048      	beq.n	800f51e <ucdr_deserialize_endian_uint32_t+0xde>
 800f48c:	2e01      	cmp	r6, #1
 800f48e:	d061      	beq.n	800f554 <ucdr_deserialize_endian_uint32_t+0x114>
 800f490:	78fb      	ldrb	r3, [r7, #3]
 800f492:	702b      	strb	r3, [r5, #0]
 800f494:	f1b8 0f00 	cmp.w	r8, #0
 800f498:	d050      	beq.n	800f53c <ucdr_deserialize_endian_uint32_t+0xfc>
 800f49a:	78bb      	ldrb	r3, [r7, #2]
 800f49c:	706b      	strb	r3, [r5, #1]
 800f49e:	f1b8 0f01 	cmp.w	r8, #1
 800f4a2:	f105 0302 	add.w	r3, r5, #2
 800f4a6:	d04d      	beq.n	800f544 <ucdr_deserialize_endian_uint32_t+0x104>
 800f4a8:	787b      	ldrb	r3, [r7, #1]
 800f4aa:	70ab      	strb	r3, [r5, #2]
 800f4ac:	f1b8 0f02 	cmp.w	r8, #2
 800f4b0:	f105 0303 	add.w	r3, r5, #3
 800f4b4:	d04a      	beq.n	800f54c <ucdr_deserialize_endian_uint32_t+0x10c>
 800f4b6:	783b      	ldrb	r3, [r7, #0]
 800f4b8:	70eb      	strb	r3, [r5, #3]
 800f4ba:	6923      	ldr	r3, [r4, #16]
 800f4bc:	68a2      	ldr	r2, [r4, #8]
 800f4be:	7da0      	ldrb	r0, [r4, #22]
 800f4c0:	2104      	movs	r1, #4
 800f4c2:	3304      	adds	r3, #4
 800f4c4:	4452      	add	r2, sl
 800f4c6:	eba3 0308 	sub.w	r3, r3, r8
 800f4ca:	7561      	strb	r1, [r4, #21]
 800f4cc:	60a2      	str	r2, [r4, #8]
 800f4ce:	6123      	str	r3, [r4, #16]
 800f4d0:	f080 0001 	eor.w	r0, r0, #1
 800f4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4d8:	2104      	movs	r1, #4
 800f4da:	4620      	mov	r0, r4
 800f4dc:	f000 fe74 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f4e0:	b1a8      	cbz	r0, 800f50e <ucdr_deserialize_endian_uint32_t+0xce>
 800f4e2:	2e01      	cmp	r6, #1
 800f4e4:	68a3      	ldr	r3, [r4, #8]
 800f4e6:	d017      	beq.n	800f518 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f4e8:	78db      	ldrb	r3, [r3, #3]
 800f4ea:	702b      	strb	r3, [r5, #0]
 800f4ec:	68a3      	ldr	r3, [r4, #8]
 800f4ee:	789b      	ldrb	r3, [r3, #2]
 800f4f0:	706b      	strb	r3, [r5, #1]
 800f4f2:	68a3      	ldr	r3, [r4, #8]
 800f4f4:	785b      	ldrb	r3, [r3, #1]
 800f4f6:	70ab      	strb	r3, [r5, #2]
 800f4f8:	68a3      	ldr	r3, [r4, #8]
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	70eb      	strb	r3, [r5, #3]
 800f4fe:	68a2      	ldr	r2, [r4, #8]
 800f500:	6923      	ldr	r3, [r4, #16]
 800f502:	3204      	adds	r2, #4
 800f504:	3304      	adds	r3, #4
 800f506:	2104      	movs	r1, #4
 800f508:	60a2      	str	r2, [r4, #8]
 800f50a:	6123      	str	r3, [r4, #16]
 800f50c:	7561      	strb	r1, [r4, #21]
 800f50e:	7da0      	ldrb	r0, [r4, #22]
 800f510:	f080 0001 	eor.w	r0, r0, #1
 800f514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	602b      	str	r3, [r5, #0]
 800f51c:	e7ef      	b.n	800f4fe <ucdr_deserialize_endian_uint32_t+0xbe>
 800f51e:	68a2      	ldr	r2, [r4, #8]
 800f520:	6923      	ldr	r3, [r4, #16]
 800f522:	7da0      	ldrb	r0, [r4, #22]
 800f524:	f884 9015 	strb.w	r9, [r4, #21]
 800f528:	eba2 0208 	sub.w	r2, r2, r8
 800f52c:	eba3 0308 	sub.w	r3, r3, r8
 800f530:	60a2      	str	r2, [r4, #8]
 800f532:	6123      	str	r3, [r4, #16]
 800f534:	f080 0001 	eor.w	r0, r0, #1
 800f538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f53c:	68a3      	ldr	r3, [r4, #8]
 800f53e:	789b      	ldrb	r3, [r3, #2]
 800f540:	706b      	strb	r3, [r5, #1]
 800f542:	1cab      	adds	r3, r5, #2
 800f544:	68a2      	ldr	r2, [r4, #8]
 800f546:	7852      	ldrb	r2, [r2, #1]
 800f548:	f803 2b01 	strb.w	r2, [r3], #1
 800f54c:	68a2      	ldr	r2, [r4, #8]
 800f54e:	7812      	ldrb	r2, [r2, #0]
 800f550:	701a      	strb	r2, [r3, #0]
 800f552:	e7b2      	b.n	800f4ba <ucdr_deserialize_endian_uint32_t+0x7a>
 800f554:	4639      	mov	r1, r7
 800f556:	4642      	mov	r2, r8
 800f558:	4628      	mov	r0, r5
 800f55a:	f00e feda 	bl	801e312 <memcpy>
 800f55e:	68a1      	ldr	r1, [r4, #8]
 800f560:	4652      	mov	r2, sl
 800f562:	eb05 0008 	add.w	r0, r5, r8
 800f566:	f00e fed4 	bl	801e312 <memcpy>
 800f56a:	e7a6      	b.n	800f4ba <ucdr_deserialize_endian_uint32_t+0x7a>

0800f56c <ucdr_serialize_uint64_t>:
 800f56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f570:	2108      	movs	r1, #8
 800f572:	b082      	sub	sp, #8
 800f574:	4604      	mov	r4, r0
 800f576:	e9cd 2300 	strd	r2, r3, [sp]
 800f57a:	f000 fe79 	bl	8010270 <ucdr_buffer_alignment>
 800f57e:	4601      	mov	r1, r0
 800f580:	4620      	mov	r0, r4
 800f582:	7d67      	ldrb	r7, [r4, #21]
 800f584:	f000 feb8 	bl	80102f8 <ucdr_advance_buffer>
 800f588:	2108      	movs	r1, #8
 800f58a:	4620      	mov	r0, r4
 800f58c:	f000 fe10 	bl	80101b0 <ucdr_check_buffer_available_for>
 800f590:	2800      	cmp	r0, #0
 800f592:	d14e      	bne.n	800f632 <ucdr_serialize_uint64_t+0xc6>
 800f594:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f598:	42ab      	cmp	r3, r5
 800f59a:	d945      	bls.n	800f628 <ucdr_serialize_uint64_t+0xbc>
 800f59c:	1b5e      	subs	r6, r3, r5
 800f59e:	60a3      	str	r3, [r4, #8]
 800f5a0:	6923      	ldr	r3, [r4, #16]
 800f5a2:	f1c6 0808 	rsb	r8, r6, #8
 800f5a6:	4433      	add	r3, r6
 800f5a8:	6123      	str	r3, [r4, #16]
 800f5aa:	4641      	mov	r1, r8
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f000 fe0b 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	d074      	beq.n	800f6a0 <ucdr_serialize_uint64_t+0x134>
 800f5b6:	7d23      	ldrb	r3, [r4, #20]
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	f000 809b 	beq.w	800f6f4 <ucdr_serialize_uint64_t+0x188>
 800f5be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5c2:	702b      	strb	r3, [r5, #0]
 800f5c4:	2e00      	cmp	r6, #0
 800f5c6:	d078      	beq.n	800f6ba <ucdr_serialize_uint64_t+0x14e>
 800f5c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5cc:	706b      	strb	r3, [r5, #1]
 800f5ce:	2e01      	cmp	r6, #1
 800f5d0:	d077      	beq.n	800f6c2 <ucdr_serialize_uint64_t+0x156>
 800f5d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f5d6:	70ab      	strb	r3, [r5, #2]
 800f5d8:	2e02      	cmp	r6, #2
 800f5da:	d076      	beq.n	800f6ca <ucdr_serialize_uint64_t+0x15e>
 800f5dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f5e0:	70eb      	strb	r3, [r5, #3]
 800f5e2:	2e03      	cmp	r6, #3
 800f5e4:	d075      	beq.n	800f6d2 <ucdr_serialize_uint64_t+0x166>
 800f5e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f5ea:	712b      	strb	r3, [r5, #4]
 800f5ec:	2e04      	cmp	r6, #4
 800f5ee:	d074      	beq.n	800f6da <ucdr_serialize_uint64_t+0x16e>
 800f5f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f5f4:	716b      	strb	r3, [r5, #5]
 800f5f6:	2e05      	cmp	r6, #5
 800f5f8:	d073      	beq.n	800f6e2 <ucdr_serialize_uint64_t+0x176>
 800f5fa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f5fe:	71ab      	strb	r3, [r5, #6]
 800f600:	2e06      	cmp	r6, #6
 800f602:	d072      	beq.n	800f6ea <ucdr_serialize_uint64_t+0x17e>
 800f604:	f89d 3000 	ldrb.w	r3, [sp]
 800f608:	71eb      	strb	r3, [r5, #7]
 800f60a:	6923      	ldr	r3, [r4, #16]
 800f60c:	68a2      	ldr	r2, [r4, #8]
 800f60e:	7da0      	ldrb	r0, [r4, #22]
 800f610:	3308      	adds	r3, #8
 800f612:	1b9e      	subs	r6, r3, r6
 800f614:	4442      	add	r2, r8
 800f616:	2308      	movs	r3, #8
 800f618:	f080 0001 	eor.w	r0, r0, #1
 800f61c:	60a2      	str	r2, [r4, #8]
 800f61e:	6126      	str	r6, [r4, #16]
 800f620:	7563      	strb	r3, [r4, #21]
 800f622:	b002      	add	sp, #8
 800f624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f628:	2108      	movs	r1, #8
 800f62a:	4620      	mov	r0, r4
 800f62c:	f000 fdcc 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f630:	b350      	cbz	r0, 800f688 <ucdr_serialize_uint64_t+0x11c>
 800f632:	7d23      	ldrb	r3, [r4, #20]
 800f634:	2b01      	cmp	r3, #1
 800f636:	d02d      	beq.n	800f694 <ucdr_serialize_uint64_t+0x128>
 800f638:	68a3      	ldr	r3, [r4, #8]
 800f63a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f63e:	701a      	strb	r2, [r3, #0]
 800f640:	68a3      	ldr	r3, [r4, #8]
 800f642:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f646:	705a      	strb	r2, [r3, #1]
 800f648:	68a3      	ldr	r3, [r4, #8]
 800f64a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f64e:	709a      	strb	r2, [r3, #2]
 800f650:	68a3      	ldr	r3, [r4, #8]
 800f652:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f656:	70da      	strb	r2, [r3, #3]
 800f658:	68a3      	ldr	r3, [r4, #8]
 800f65a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f65e:	711a      	strb	r2, [r3, #4]
 800f660:	68a3      	ldr	r3, [r4, #8]
 800f662:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f666:	715a      	strb	r2, [r3, #5]
 800f668:	68a3      	ldr	r3, [r4, #8]
 800f66a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f66e:	719a      	strb	r2, [r3, #6]
 800f670:	68a3      	ldr	r3, [r4, #8]
 800f672:	f89d 2000 	ldrb.w	r2, [sp]
 800f676:	71da      	strb	r2, [r3, #7]
 800f678:	68a2      	ldr	r2, [r4, #8]
 800f67a:	6923      	ldr	r3, [r4, #16]
 800f67c:	3208      	adds	r2, #8
 800f67e:	3308      	adds	r3, #8
 800f680:	2108      	movs	r1, #8
 800f682:	60a2      	str	r2, [r4, #8]
 800f684:	6123      	str	r3, [r4, #16]
 800f686:	7561      	strb	r1, [r4, #21]
 800f688:	7da0      	ldrb	r0, [r4, #22]
 800f68a:	f080 0001 	eor.w	r0, r0, #1
 800f68e:	b002      	add	sp, #8
 800f690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f694:	466b      	mov	r3, sp
 800f696:	cb03      	ldmia	r3!, {r0, r1}
 800f698:	68a3      	ldr	r3, [r4, #8]
 800f69a:	6018      	str	r0, [r3, #0]
 800f69c:	6059      	str	r1, [r3, #4]
 800f69e:	e7eb      	b.n	800f678 <ucdr_serialize_uint64_t+0x10c>
 800f6a0:	68a2      	ldr	r2, [r4, #8]
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	7da0      	ldrb	r0, [r4, #22]
 800f6a6:	7567      	strb	r7, [r4, #21]
 800f6a8:	1b92      	subs	r2, r2, r6
 800f6aa:	1b9b      	subs	r3, r3, r6
 800f6ac:	f080 0001 	eor.w	r0, r0, #1
 800f6b0:	60a2      	str	r2, [r4, #8]
 800f6b2:	6123      	str	r3, [r4, #16]
 800f6b4:	b002      	add	sp, #8
 800f6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ba:	68a3      	ldr	r3, [r4, #8]
 800f6bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6c0:	701a      	strb	r2, [r3, #0]
 800f6c2:	68a3      	ldr	r3, [r4, #8]
 800f6c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f6c8:	701a      	strb	r2, [r3, #0]
 800f6ca:	68a3      	ldr	r3, [r4, #8]
 800f6cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6d0:	701a      	strb	r2, [r3, #0]
 800f6d2:	68a3      	ldr	r3, [r4, #8]
 800f6d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f6d8:	701a      	strb	r2, [r3, #0]
 800f6da:	68a3      	ldr	r3, [r4, #8]
 800f6dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f6e0:	701a      	strb	r2, [r3, #0]
 800f6e2:	68a3      	ldr	r3, [r4, #8]
 800f6e4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f6e8:	701a      	strb	r2, [r3, #0]
 800f6ea:	68a3      	ldr	r3, [r4, #8]
 800f6ec:	f89d 2000 	ldrb.w	r2, [sp]
 800f6f0:	701a      	strb	r2, [r3, #0]
 800f6f2:	e78a      	b.n	800f60a <ucdr_serialize_uint64_t+0x9e>
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	466d      	mov	r5, sp
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	4632      	mov	r2, r6
 800f6fc:	f00e fe09 	bl	801e312 <memcpy>
 800f700:	68a0      	ldr	r0, [r4, #8]
 800f702:	4642      	mov	r2, r8
 800f704:	19a9      	adds	r1, r5, r6
 800f706:	f00e fe04 	bl	801e312 <memcpy>
 800f70a:	e77e      	b.n	800f60a <ucdr_serialize_uint64_t+0x9e>

0800f70c <ucdr_serialize_int16_t>:
 800f70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f710:	b082      	sub	sp, #8
 800f712:	460b      	mov	r3, r1
 800f714:	2102      	movs	r1, #2
 800f716:	4604      	mov	r4, r0
 800f718:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f71c:	f000 fda8 	bl	8010270 <ucdr_buffer_alignment>
 800f720:	4601      	mov	r1, r0
 800f722:	4620      	mov	r0, r4
 800f724:	7d67      	ldrb	r7, [r4, #21]
 800f726:	f000 fde7 	bl	80102f8 <ucdr_advance_buffer>
 800f72a:	2102      	movs	r1, #2
 800f72c:	4620      	mov	r0, r4
 800f72e:	f000 fd3f 	bl	80101b0 <ucdr_check_buffer_available_for>
 800f732:	bb78      	cbnz	r0, 800f794 <ucdr_serialize_int16_t+0x88>
 800f734:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f738:	42ab      	cmp	r3, r5
 800f73a:	d926      	bls.n	800f78a <ucdr_serialize_int16_t+0x7e>
 800f73c:	1b5e      	subs	r6, r3, r5
 800f73e:	60a3      	str	r3, [r4, #8]
 800f740:	6923      	ldr	r3, [r4, #16]
 800f742:	f1c6 0802 	rsb	r8, r6, #2
 800f746:	4433      	add	r3, r6
 800f748:	6123      	str	r3, [r4, #16]
 800f74a:	4641      	mov	r1, r8
 800f74c:	4620      	mov	r0, r4
 800f74e:	f000 fd3b 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f752:	2800      	cmp	r0, #0
 800f754:	d03b      	beq.n	800f7ce <ucdr_serialize_int16_t+0xc2>
 800f756:	7d23      	ldrb	r3, [r4, #20]
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d04a      	beq.n	800f7f2 <ucdr_serialize_int16_t+0xe6>
 800f75c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f760:	702b      	strb	r3, [r5, #0]
 800f762:	2e00      	cmp	r6, #0
 800f764:	d040      	beq.n	800f7e8 <ucdr_serialize_int16_t+0xdc>
 800f766:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f76a:	706b      	strb	r3, [r5, #1]
 800f76c:	6923      	ldr	r3, [r4, #16]
 800f76e:	68a2      	ldr	r2, [r4, #8]
 800f770:	7da0      	ldrb	r0, [r4, #22]
 800f772:	3302      	adds	r3, #2
 800f774:	1b9e      	subs	r6, r3, r6
 800f776:	4442      	add	r2, r8
 800f778:	2302      	movs	r3, #2
 800f77a:	f080 0001 	eor.w	r0, r0, #1
 800f77e:	60a2      	str	r2, [r4, #8]
 800f780:	6126      	str	r6, [r4, #16]
 800f782:	7563      	strb	r3, [r4, #21]
 800f784:	b002      	add	sp, #8
 800f786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f78a:	2102      	movs	r1, #2
 800f78c:	4620      	mov	r0, r4
 800f78e:	f000 fd1b 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f792:	b190      	cbz	r0, 800f7ba <ucdr_serialize_int16_t+0xae>
 800f794:	7d23      	ldrb	r3, [r4, #20]
 800f796:	2b01      	cmp	r3, #1
 800f798:	68a3      	ldr	r3, [r4, #8]
 800f79a:	d014      	beq.n	800f7c6 <ucdr_serialize_int16_t+0xba>
 800f79c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f7a0:	701a      	strb	r2, [r3, #0]
 800f7a2:	68a3      	ldr	r3, [r4, #8]
 800f7a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7a8:	705a      	strb	r2, [r3, #1]
 800f7aa:	68a2      	ldr	r2, [r4, #8]
 800f7ac:	6923      	ldr	r3, [r4, #16]
 800f7ae:	3202      	adds	r2, #2
 800f7b0:	3302      	adds	r3, #2
 800f7b2:	2102      	movs	r1, #2
 800f7b4:	60a2      	str	r2, [r4, #8]
 800f7b6:	6123      	str	r3, [r4, #16]
 800f7b8:	7561      	strb	r1, [r4, #21]
 800f7ba:	7da0      	ldrb	r0, [r4, #22]
 800f7bc:	f080 0001 	eor.w	r0, r0, #1
 800f7c0:	b002      	add	sp, #8
 800f7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f7ca:	801a      	strh	r2, [r3, #0]
 800f7cc:	e7ed      	b.n	800f7aa <ucdr_serialize_int16_t+0x9e>
 800f7ce:	68a2      	ldr	r2, [r4, #8]
 800f7d0:	6923      	ldr	r3, [r4, #16]
 800f7d2:	7da0      	ldrb	r0, [r4, #22]
 800f7d4:	7567      	strb	r7, [r4, #21]
 800f7d6:	1b92      	subs	r2, r2, r6
 800f7d8:	1b9b      	subs	r3, r3, r6
 800f7da:	f080 0001 	eor.w	r0, r0, #1
 800f7de:	60a2      	str	r2, [r4, #8]
 800f7e0:	6123      	str	r3, [r4, #16]
 800f7e2:	b002      	add	sp, #8
 800f7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7e8:	68a3      	ldr	r3, [r4, #8]
 800f7ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7ee:	701a      	strb	r2, [r3, #0]
 800f7f0:	e7bc      	b.n	800f76c <ucdr_serialize_int16_t+0x60>
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	f10d 0506 	add.w	r5, sp, #6
 800f7f8:	4629      	mov	r1, r5
 800f7fa:	4632      	mov	r2, r6
 800f7fc:	f00e fd89 	bl	801e312 <memcpy>
 800f800:	68a0      	ldr	r0, [r4, #8]
 800f802:	4642      	mov	r2, r8
 800f804:	19a9      	adds	r1, r5, r6
 800f806:	f00e fd84 	bl	801e312 <memcpy>
 800f80a:	e7af      	b.n	800f76c <ucdr_serialize_int16_t+0x60>

0800f80c <ucdr_deserialize_int16_t>:
 800f80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f810:	460d      	mov	r5, r1
 800f812:	2102      	movs	r1, #2
 800f814:	4604      	mov	r4, r0
 800f816:	f000 fd2b 	bl	8010270 <ucdr_buffer_alignment>
 800f81a:	4601      	mov	r1, r0
 800f81c:	4620      	mov	r0, r4
 800f81e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f822:	f000 fd69 	bl	80102f8 <ucdr_advance_buffer>
 800f826:	2102      	movs	r1, #2
 800f828:	4620      	mov	r0, r4
 800f82a:	f000 fcc1 	bl	80101b0 <ucdr_check_buffer_available_for>
 800f82e:	bb60      	cbnz	r0, 800f88a <ucdr_deserialize_int16_t+0x7e>
 800f830:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f834:	42be      	cmp	r6, r7
 800f836:	d923      	bls.n	800f880 <ucdr_deserialize_int16_t+0x74>
 800f838:	6923      	ldr	r3, [r4, #16]
 800f83a:	60a6      	str	r6, [r4, #8]
 800f83c:	1bf6      	subs	r6, r6, r7
 800f83e:	4433      	add	r3, r6
 800f840:	f1c6 0902 	rsb	r9, r6, #2
 800f844:	6123      	str	r3, [r4, #16]
 800f846:	4649      	mov	r1, r9
 800f848:	4620      	mov	r0, r4
 800f84a:	f000 fcbd 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f84e:	2800      	cmp	r0, #0
 800f850:	d034      	beq.n	800f8bc <ucdr_deserialize_int16_t+0xb0>
 800f852:	7d23      	ldrb	r3, [r4, #20]
 800f854:	2b01      	cmp	r3, #1
 800f856:	d042      	beq.n	800f8de <ucdr_deserialize_int16_t+0xd2>
 800f858:	787b      	ldrb	r3, [r7, #1]
 800f85a:	702b      	strb	r3, [r5, #0]
 800f85c:	2e00      	cmp	r6, #0
 800f85e:	d03a      	beq.n	800f8d6 <ucdr_deserialize_int16_t+0xca>
 800f860:	783b      	ldrb	r3, [r7, #0]
 800f862:	706b      	strb	r3, [r5, #1]
 800f864:	6923      	ldr	r3, [r4, #16]
 800f866:	68a2      	ldr	r2, [r4, #8]
 800f868:	7da0      	ldrb	r0, [r4, #22]
 800f86a:	2102      	movs	r1, #2
 800f86c:	3302      	adds	r3, #2
 800f86e:	444a      	add	r2, r9
 800f870:	1b9b      	subs	r3, r3, r6
 800f872:	7561      	strb	r1, [r4, #21]
 800f874:	60a2      	str	r2, [r4, #8]
 800f876:	6123      	str	r3, [r4, #16]
 800f878:	f080 0001 	eor.w	r0, r0, #1
 800f87c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f880:	2102      	movs	r1, #2
 800f882:	4620      	mov	r0, r4
 800f884:	f000 fca0 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f888:	b180      	cbz	r0, 800f8ac <ucdr_deserialize_int16_t+0xa0>
 800f88a:	7d23      	ldrb	r3, [r4, #20]
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	68a3      	ldr	r3, [r4, #8]
 800f890:	d011      	beq.n	800f8b6 <ucdr_deserialize_int16_t+0xaa>
 800f892:	785b      	ldrb	r3, [r3, #1]
 800f894:	702b      	strb	r3, [r5, #0]
 800f896:	68a3      	ldr	r3, [r4, #8]
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	706b      	strb	r3, [r5, #1]
 800f89c:	68a2      	ldr	r2, [r4, #8]
 800f89e:	6923      	ldr	r3, [r4, #16]
 800f8a0:	3202      	adds	r2, #2
 800f8a2:	3302      	adds	r3, #2
 800f8a4:	2102      	movs	r1, #2
 800f8a6:	60a2      	str	r2, [r4, #8]
 800f8a8:	6123      	str	r3, [r4, #16]
 800f8aa:	7561      	strb	r1, [r4, #21]
 800f8ac:	7da0      	ldrb	r0, [r4, #22]
 800f8ae:	f080 0001 	eor.w	r0, r0, #1
 800f8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8b6:	881b      	ldrh	r3, [r3, #0]
 800f8b8:	802b      	strh	r3, [r5, #0]
 800f8ba:	e7ef      	b.n	800f89c <ucdr_deserialize_int16_t+0x90>
 800f8bc:	68a2      	ldr	r2, [r4, #8]
 800f8be:	6923      	ldr	r3, [r4, #16]
 800f8c0:	7da0      	ldrb	r0, [r4, #22]
 800f8c2:	f884 8015 	strb.w	r8, [r4, #21]
 800f8c6:	1b92      	subs	r2, r2, r6
 800f8c8:	1b9b      	subs	r3, r3, r6
 800f8ca:	60a2      	str	r2, [r4, #8]
 800f8cc:	6123      	str	r3, [r4, #16]
 800f8ce:	f080 0001 	eor.w	r0, r0, #1
 800f8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8d6:	68a3      	ldr	r3, [r4, #8]
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	706b      	strb	r3, [r5, #1]
 800f8dc:	e7c2      	b.n	800f864 <ucdr_deserialize_int16_t+0x58>
 800f8de:	4639      	mov	r1, r7
 800f8e0:	4632      	mov	r2, r6
 800f8e2:	4628      	mov	r0, r5
 800f8e4:	f00e fd15 	bl	801e312 <memcpy>
 800f8e8:	68a1      	ldr	r1, [r4, #8]
 800f8ea:	464a      	mov	r2, r9
 800f8ec:	19a8      	adds	r0, r5, r6
 800f8ee:	f00e fd10 	bl	801e312 <memcpy>
 800f8f2:	e7b7      	b.n	800f864 <ucdr_deserialize_int16_t+0x58>

0800f8f4 <ucdr_serialize_int32_t>:
 800f8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8f8:	b082      	sub	sp, #8
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	9101      	str	r1, [sp, #4]
 800f8fe:	2104      	movs	r1, #4
 800f900:	f000 fcb6 	bl	8010270 <ucdr_buffer_alignment>
 800f904:	4601      	mov	r1, r0
 800f906:	4620      	mov	r0, r4
 800f908:	7d67      	ldrb	r7, [r4, #21]
 800f90a:	f000 fcf5 	bl	80102f8 <ucdr_advance_buffer>
 800f90e:	2104      	movs	r1, #4
 800f910:	4620      	mov	r0, r4
 800f912:	f000 fc4d 	bl	80101b0 <ucdr_check_buffer_available_for>
 800f916:	2800      	cmp	r0, #0
 800f918:	d139      	bne.n	800f98e <ucdr_serialize_int32_t+0x9a>
 800f91a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f91e:	42ab      	cmp	r3, r5
 800f920:	d930      	bls.n	800f984 <ucdr_serialize_int32_t+0x90>
 800f922:	1b5e      	subs	r6, r3, r5
 800f924:	60a3      	str	r3, [r4, #8]
 800f926:	6923      	ldr	r3, [r4, #16]
 800f928:	f1c6 0804 	rsb	r8, r6, #4
 800f92c:	4433      	add	r3, r6
 800f92e:	6123      	str	r3, [r4, #16]
 800f930:	4641      	mov	r1, r8
 800f932:	4620      	mov	r0, r4
 800f934:	f000 fc48 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f938:	2800      	cmp	r0, #0
 800f93a:	d04c      	beq.n	800f9d6 <ucdr_serialize_int32_t+0xe2>
 800f93c:	7d23      	ldrb	r3, [r4, #20]
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d063      	beq.n	800fa0a <ucdr_serialize_int32_t+0x116>
 800f942:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f946:	702b      	strb	r3, [r5, #0]
 800f948:	2e00      	cmp	r6, #0
 800f94a:	d051      	beq.n	800f9f0 <ucdr_serialize_int32_t+0xfc>
 800f94c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f950:	706b      	strb	r3, [r5, #1]
 800f952:	2e01      	cmp	r6, #1
 800f954:	d050      	beq.n	800f9f8 <ucdr_serialize_int32_t+0x104>
 800f956:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f95a:	70ab      	strb	r3, [r5, #2]
 800f95c:	2e02      	cmp	r6, #2
 800f95e:	d04f      	beq.n	800fa00 <ucdr_serialize_int32_t+0x10c>
 800f960:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f964:	70eb      	strb	r3, [r5, #3]
 800f966:	6923      	ldr	r3, [r4, #16]
 800f968:	68a2      	ldr	r2, [r4, #8]
 800f96a:	7da0      	ldrb	r0, [r4, #22]
 800f96c:	3304      	adds	r3, #4
 800f96e:	1b9e      	subs	r6, r3, r6
 800f970:	4442      	add	r2, r8
 800f972:	2304      	movs	r3, #4
 800f974:	f080 0001 	eor.w	r0, r0, #1
 800f978:	60a2      	str	r2, [r4, #8]
 800f97a:	6126      	str	r6, [r4, #16]
 800f97c:	7563      	strb	r3, [r4, #21]
 800f97e:	b002      	add	sp, #8
 800f980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f984:	2104      	movs	r1, #4
 800f986:	4620      	mov	r0, r4
 800f988:	f000 fc1e 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800f98c:	b1d0      	cbz	r0, 800f9c4 <ucdr_serialize_int32_t+0xd0>
 800f98e:	7d23      	ldrb	r3, [r4, #20]
 800f990:	2b01      	cmp	r3, #1
 800f992:	68a3      	ldr	r3, [r4, #8]
 800f994:	d01c      	beq.n	800f9d0 <ucdr_serialize_int32_t+0xdc>
 800f996:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f99a:	701a      	strb	r2, [r3, #0]
 800f99c:	68a3      	ldr	r3, [r4, #8]
 800f99e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9a2:	705a      	strb	r2, [r3, #1]
 800f9a4:	68a3      	ldr	r3, [r4, #8]
 800f9a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f9aa:	709a      	strb	r2, [r3, #2]
 800f9ac:	68a3      	ldr	r3, [r4, #8]
 800f9ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f9b2:	70da      	strb	r2, [r3, #3]
 800f9b4:	68a2      	ldr	r2, [r4, #8]
 800f9b6:	6923      	ldr	r3, [r4, #16]
 800f9b8:	3204      	adds	r2, #4
 800f9ba:	3304      	adds	r3, #4
 800f9bc:	2104      	movs	r1, #4
 800f9be:	60a2      	str	r2, [r4, #8]
 800f9c0:	6123      	str	r3, [r4, #16]
 800f9c2:	7561      	strb	r1, [r4, #21]
 800f9c4:	7da0      	ldrb	r0, [r4, #22]
 800f9c6:	f080 0001 	eor.w	r0, r0, #1
 800f9ca:	b002      	add	sp, #8
 800f9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d0:	9a01      	ldr	r2, [sp, #4]
 800f9d2:	601a      	str	r2, [r3, #0]
 800f9d4:	e7ee      	b.n	800f9b4 <ucdr_serialize_int32_t+0xc0>
 800f9d6:	68a2      	ldr	r2, [r4, #8]
 800f9d8:	6923      	ldr	r3, [r4, #16]
 800f9da:	7da0      	ldrb	r0, [r4, #22]
 800f9dc:	7567      	strb	r7, [r4, #21]
 800f9de:	1b92      	subs	r2, r2, r6
 800f9e0:	1b9b      	subs	r3, r3, r6
 800f9e2:	f080 0001 	eor.w	r0, r0, #1
 800f9e6:	60a2      	str	r2, [r4, #8]
 800f9e8:	6123      	str	r3, [r4, #16]
 800f9ea:	b002      	add	sp, #8
 800f9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f0:	68a3      	ldr	r3, [r4, #8]
 800f9f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9f6:	701a      	strb	r2, [r3, #0]
 800f9f8:	68a3      	ldr	r3, [r4, #8]
 800f9fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f9fe:	701a      	strb	r2, [r3, #0]
 800fa00:	68a3      	ldr	r3, [r4, #8]
 800fa02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa06:	701a      	strb	r2, [r3, #0]
 800fa08:	e7ad      	b.n	800f966 <ucdr_serialize_int32_t+0x72>
 800fa0a:	4628      	mov	r0, r5
 800fa0c:	ad01      	add	r5, sp, #4
 800fa0e:	4629      	mov	r1, r5
 800fa10:	4632      	mov	r2, r6
 800fa12:	f00e fc7e 	bl	801e312 <memcpy>
 800fa16:	68a0      	ldr	r0, [r4, #8]
 800fa18:	4642      	mov	r2, r8
 800fa1a:	19a9      	adds	r1, r5, r6
 800fa1c:	f00e fc79 	bl	801e312 <memcpy>
 800fa20:	e7a1      	b.n	800f966 <ucdr_serialize_int32_t+0x72>
 800fa22:	bf00      	nop

0800fa24 <ucdr_deserialize_int32_t>:
 800fa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa28:	460d      	mov	r5, r1
 800fa2a:	2104      	movs	r1, #4
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	f000 fc1f 	bl	8010270 <ucdr_buffer_alignment>
 800fa32:	4601      	mov	r1, r0
 800fa34:	4620      	mov	r0, r4
 800fa36:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fa3a:	f000 fc5d 	bl	80102f8 <ucdr_advance_buffer>
 800fa3e:	2104      	movs	r1, #4
 800fa40:	4620      	mov	r0, r4
 800fa42:	f000 fbb5 	bl	80101b0 <ucdr_check_buffer_available_for>
 800fa46:	2800      	cmp	r0, #0
 800fa48:	d138      	bne.n	800fabc <ucdr_deserialize_int32_t+0x98>
 800fa4a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fa4e:	42b7      	cmp	r7, r6
 800fa50:	d92f      	bls.n	800fab2 <ucdr_deserialize_int32_t+0x8e>
 800fa52:	6923      	ldr	r3, [r4, #16]
 800fa54:	60a7      	str	r7, [r4, #8]
 800fa56:	1bbf      	subs	r7, r7, r6
 800fa58:	443b      	add	r3, r7
 800fa5a:	f1c7 0904 	rsb	r9, r7, #4
 800fa5e:	6123      	str	r3, [r4, #16]
 800fa60:	4649      	mov	r1, r9
 800fa62:	4620      	mov	r0, r4
 800fa64:	f000 fbb0 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	d046      	beq.n	800fafa <ucdr_deserialize_int32_t+0xd6>
 800fa6c:	7d23      	ldrb	r3, [r4, #20]
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d05c      	beq.n	800fb2c <ucdr_deserialize_int32_t+0x108>
 800fa72:	78f3      	ldrb	r3, [r6, #3]
 800fa74:	702b      	strb	r3, [r5, #0]
 800fa76:	2f00      	cmp	r7, #0
 800fa78:	d04c      	beq.n	800fb14 <ucdr_deserialize_int32_t+0xf0>
 800fa7a:	78b3      	ldrb	r3, [r6, #2]
 800fa7c:	706b      	strb	r3, [r5, #1]
 800fa7e:	2f01      	cmp	r7, #1
 800fa80:	f105 0302 	add.w	r3, r5, #2
 800fa84:	d04a      	beq.n	800fb1c <ucdr_deserialize_int32_t+0xf8>
 800fa86:	7873      	ldrb	r3, [r6, #1]
 800fa88:	70ab      	strb	r3, [r5, #2]
 800fa8a:	2f02      	cmp	r7, #2
 800fa8c:	f105 0303 	add.w	r3, r5, #3
 800fa90:	d048      	beq.n	800fb24 <ucdr_deserialize_int32_t+0x100>
 800fa92:	7833      	ldrb	r3, [r6, #0]
 800fa94:	70eb      	strb	r3, [r5, #3]
 800fa96:	6923      	ldr	r3, [r4, #16]
 800fa98:	68a2      	ldr	r2, [r4, #8]
 800fa9a:	7da0      	ldrb	r0, [r4, #22]
 800fa9c:	2104      	movs	r1, #4
 800fa9e:	3304      	adds	r3, #4
 800faa0:	444a      	add	r2, r9
 800faa2:	1bdb      	subs	r3, r3, r7
 800faa4:	7561      	strb	r1, [r4, #21]
 800faa6:	60a2      	str	r2, [r4, #8]
 800faa8:	6123      	str	r3, [r4, #16]
 800faaa:	f080 0001 	eor.w	r0, r0, #1
 800faae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fab2:	2104      	movs	r1, #4
 800fab4:	4620      	mov	r0, r4
 800fab6:	f000 fb87 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800faba:	b1b0      	cbz	r0, 800faea <ucdr_deserialize_int32_t+0xc6>
 800fabc:	7d23      	ldrb	r3, [r4, #20]
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	68a3      	ldr	r3, [r4, #8]
 800fac2:	d017      	beq.n	800faf4 <ucdr_deserialize_int32_t+0xd0>
 800fac4:	78db      	ldrb	r3, [r3, #3]
 800fac6:	702b      	strb	r3, [r5, #0]
 800fac8:	68a3      	ldr	r3, [r4, #8]
 800faca:	789b      	ldrb	r3, [r3, #2]
 800facc:	706b      	strb	r3, [r5, #1]
 800face:	68a3      	ldr	r3, [r4, #8]
 800fad0:	785b      	ldrb	r3, [r3, #1]
 800fad2:	70ab      	strb	r3, [r5, #2]
 800fad4:	68a3      	ldr	r3, [r4, #8]
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	70eb      	strb	r3, [r5, #3]
 800fada:	68a2      	ldr	r2, [r4, #8]
 800fadc:	6923      	ldr	r3, [r4, #16]
 800fade:	3204      	adds	r2, #4
 800fae0:	3304      	adds	r3, #4
 800fae2:	2104      	movs	r1, #4
 800fae4:	60a2      	str	r2, [r4, #8]
 800fae6:	6123      	str	r3, [r4, #16]
 800fae8:	7561      	strb	r1, [r4, #21]
 800faea:	7da0      	ldrb	r0, [r4, #22]
 800faec:	f080 0001 	eor.w	r0, r0, #1
 800faf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	602b      	str	r3, [r5, #0]
 800faf8:	e7ef      	b.n	800fada <ucdr_deserialize_int32_t+0xb6>
 800fafa:	68a2      	ldr	r2, [r4, #8]
 800fafc:	6923      	ldr	r3, [r4, #16]
 800fafe:	7da0      	ldrb	r0, [r4, #22]
 800fb00:	f884 8015 	strb.w	r8, [r4, #21]
 800fb04:	1bd2      	subs	r2, r2, r7
 800fb06:	1bdb      	subs	r3, r3, r7
 800fb08:	60a2      	str	r2, [r4, #8]
 800fb0a:	6123      	str	r3, [r4, #16]
 800fb0c:	f080 0001 	eor.w	r0, r0, #1
 800fb10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb14:	68a3      	ldr	r3, [r4, #8]
 800fb16:	789b      	ldrb	r3, [r3, #2]
 800fb18:	706b      	strb	r3, [r5, #1]
 800fb1a:	1cab      	adds	r3, r5, #2
 800fb1c:	68a2      	ldr	r2, [r4, #8]
 800fb1e:	7852      	ldrb	r2, [r2, #1]
 800fb20:	f803 2b01 	strb.w	r2, [r3], #1
 800fb24:	68a2      	ldr	r2, [r4, #8]
 800fb26:	7812      	ldrb	r2, [r2, #0]
 800fb28:	701a      	strb	r2, [r3, #0]
 800fb2a:	e7b4      	b.n	800fa96 <ucdr_deserialize_int32_t+0x72>
 800fb2c:	4631      	mov	r1, r6
 800fb2e:	463a      	mov	r2, r7
 800fb30:	4628      	mov	r0, r5
 800fb32:	f00e fbee 	bl	801e312 <memcpy>
 800fb36:	68a1      	ldr	r1, [r4, #8]
 800fb38:	464a      	mov	r2, r9
 800fb3a:	19e8      	adds	r0, r5, r7
 800fb3c:	f00e fbe9 	bl	801e312 <memcpy>
 800fb40:	e7a9      	b.n	800fa96 <ucdr_deserialize_int32_t+0x72>
 800fb42:	bf00      	nop

0800fb44 <ucdr_serialize_double>:
 800fb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb48:	2108      	movs	r1, #8
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	4604      	mov	r4, r0
 800fb4e:	ed8d 0b00 	vstr	d0, [sp]
 800fb52:	f000 fb8d 	bl	8010270 <ucdr_buffer_alignment>
 800fb56:	4601      	mov	r1, r0
 800fb58:	4620      	mov	r0, r4
 800fb5a:	7d67      	ldrb	r7, [r4, #21]
 800fb5c:	f000 fbcc 	bl	80102f8 <ucdr_advance_buffer>
 800fb60:	2108      	movs	r1, #8
 800fb62:	4620      	mov	r0, r4
 800fb64:	f000 fb24 	bl	80101b0 <ucdr_check_buffer_available_for>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d14e      	bne.n	800fc0a <ucdr_serialize_double+0xc6>
 800fb6c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fb70:	42ab      	cmp	r3, r5
 800fb72:	d945      	bls.n	800fc00 <ucdr_serialize_double+0xbc>
 800fb74:	1b5e      	subs	r6, r3, r5
 800fb76:	60a3      	str	r3, [r4, #8]
 800fb78:	6923      	ldr	r3, [r4, #16]
 800fb7a:	f1c6 0808 	rsb	r8, r6, #8
 800fb7e:	4433      	add	r3, r6
 800fb80:	6123      	str	r3, [r4, #16]
 800fb82:	4641      	mov	r1, r8
 800fb84:	4620      	mov	r0, r4
 800fb86:	f000 fb1f 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d074      	beq.n	800fc78 <ucdr_serialize_double+0x134>
 800fb8e:	7d23      	ldrb	r3, [r4, #20]
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	f000 809b 	beq.w	800fccc <ucdr_serialize_double+0x188>
 800fb96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fb9a:	702b      	strb	r3, [r5, #0]
 800fb9c:	2e00      	cmp	r6, #0
 800fb9e:	d078      	beq.n	800fc92 <ucdr_serialize_double+0x14e>
 800fba0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fba4:	706b      	strb	r3, [r5, #1]
 800fba6:	2e01      	cmp	r6, #1
 800fba8:	d077      	beq.n	800fc9a <ucdr_serialize_double+0x156>
 800fbaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fbae:	70ab      	strb	r3, [r5, #2]
 800fbb0:	2e02      	cmp	r6, #2
 800fbb2:	d076      	beq.n	800fca2 <ucdr_serialize_double+0x15e>
 800fbb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fbb8:	70eb      	strb	r3, [r5, #3]
 800fbba:	2e03      	cmp	r6, #3
 800fbbc:	d075      	beq.n	800fcaa <ucdr_serialize_double+0x166>
 800fbbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fbc2:	712b      	strb	r3, [r5, #4]
 800fbc4:	2e04      	cmp	r6, #4
 800fbc6:	d074      	beq.n	800fcb2 <ucdr_serialize_double+0x16e>
 800fbc8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fbcc:	716b      	strb	r3, [r5, #5]
 800fbce:	2e05      	cmp	r6, #5
 800fbd0:	d073      	beq.n	800fcba <ucdr_serialize_double+0x176>
 800fbd2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fbd6:	71ab      	strb	r3, [r5, #6]
 800fbd8:	2e06      	cmp	r6, #6
 800fbda:	d072      	beq.n	800fcc2 <ucdr_serialize_double+0x17e>
 800fbdc:	f89d 3000 	ldrb.w	r3, [sp]
 800fbe0:	71eb      	strb	r3, [r5, #7]
 800fbe2:	6923      	ldr	r3, [r4, #16]
 800fbe4:	68a2      	ldr	r2, [r4, #8]
 800fbe6:	7da0      	ldrb	r0, [r4, #22]
 800fbe8:	3308      	adds	r3, #8
 800fbea:	1b9e      	subs	r6, r3, r6
 800fbec:	4442      	add	r2, r8
 800fbee:	2308      	movs	r3, #8
 800fbf0:	f080 0001 	eor.w	r0, r0, #1
 800fbf4:	60a2      	str	r2, [r4, #8]
 800fbf6:	6126      	str	r6, [r4, #16]
 800fbf8:	7563      	strb	r3, [r4, #21]
 800fbfa:	b002      	add	sp, #8
 800fbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc00:	2108      	movs	r1, #8
 800fc02:	4620      	mov	r0, r4
 800fc04:	f000 fae0 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800fc08:	b350      	cbz	r0, 800fc60 <ucdr_serialize_double+0x11c>
 800fc0a:	7d23      	ldrb	r3, [r4, #20]
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d02d      	beq.n	800fc6c <ucdr_serialize_double+0x128>
 800fc10:	68a3      	ldr	r3, [r4, #8]
 800fc12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc16:	701a      	strb	r2, [r3, #0]
 800fc18:	68a3      	ldr	r3, [r4, #8]
 800fc1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc1e:	705a      	strb	r2, [r3, #1]
 800fc20:	68a3      	ldr	r3, [r4, #8]
 800fc22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fc26:	709a      	strb	r2, [r3, #2]
 800fc28:	68a3      	ldr	r3, [r4, #8]
 800fc2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fc2e:	70da      	strb	r2, [r3, #3]
 800fc30:	68a3      	ldr	r3, [r4, #8]
 800fc32:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fc36:	711a      	strb	r2, [r3, #4]
 800fc38:	68a3      	ldr	r3, [r4, #8]
 800fc3a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fc3e:	715a      	strb	r2, [r3, #5]
 800fc40:	68a3      	ldr	r3, [r4, #8]
 800fc42:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fc46:	719a      	strb	r2, [r3, #6]
 800fc48:	68a3      	ldr	r3, [r4, #8]
 800fc4a:	f89d 2000 	ldrb.w	r2, [sp]
 800fc4e:	71da      	strb	r2, [r3, #7]
 800fc50:	68a2      	ldr	r2, [r4, #8]
 800fc52:	6923      	ldr	r3, [r4, #16]
 800fc54:	3208      	adds	r2, #8
 800fc56:	3308      	adds	r3, #8
 800fc58:	2108      	movs	r1, #8
 800fc5a:	60a2      	str	r2, [r4, #8]
 800fc5c:	6123      	str	r3, [r4, #16]
 800fc5e:	7561      	strb	r1, [r4, #21]
 800fc60:	7da0      	ldrb	r0, [r4, #22]
 800fc62:	f080 0001 	eor.w	r0, r0, #1
 800fc66:	b002      	add	sp, #8
 800fc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc6c:	466b      	mov	r3, sp
 800fc6e:	cb03      	ldmia	r3!, {r0, r1}
 800fc70:	68a3      	ldr	r3, [r4, #8]
 800fc72:	6018      	str	r0, [r3, #0]
 800fc74:	6059      	str	r1, [r3, #4]
 800fc76:	e7eb      	b.n	800fc50 <ucdr_serialize_double+0x10c>
 800fc78:	68a2      	ldr	r2, [r4, #8]
 800fc7a:	6923      	ldr	r3, [r4, #16]
 800fc7c:	7da0      	ldrb	r0, [r4, #22]
 800fc7e:	7567      	strb	r7, [r4, #21]
 800fc80:	1b92      	subs	r2, r2, r6
 800fc82:	1b9b      	subs	r3, r3, r6
 800fc84:	f080 0001 	eor.w	r0, r0, #1
 800fc88:	60a2      	str	r2, [r4, #8]
 800fc8a:	6123      	str	r3, [r4, #16]
 800fc8c:	b002      	add	sp, #8
 800fc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc92:	68a3      	ldr	r3, [r4, #8]
 800fc94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc98:	701a      	strb	r2, [r3, #0]
 800fc9a:	68a3      	ldr	r3, [r4, #8]
 800fc9c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fca0:	701a      	strb	r2, [r3, #0]
 800fca2:	68a3      	ldr	r3, [r4, #8]
 800fca4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fca8:	701a      	strb	r2, [r3, #0]
 800fcaa:	68a3      	ldr	r3, [r4, #8]
 800fcac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fcb0:	701a      	strb	r2, [r3, #0]
 800fcb2:	68a3      	ldr	r3, [r4, #8]
 800fcb4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fcb8:	701a      	strb	r2, [r3, #0]
 800fcba:	68a3      	ldr	r3, [r4, #8]
 800fcbc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fcc0:	701a      	strb	r2, [r3, #0]
 800fcc2:	68a3      	ldr	r3, [r4, #8]
 800fcc4:	f89d 2000 	ldrb.w	r2, [sp]
 800fcc8:	701a      	strb	r2, [r3, #0]
 800fcca:	e78a      	b.n	800fbe2 <ucdr_serialize_double+0x9e>
 800fccc:	4628      	mov	r0, r5
 800fcce:	466d      	mov	r5, sp
 800fcd0:	4629      	mov	r1, r5
 800fcd2:	4632      	mov	r2, r6
 800fcd4:	f00e fb1d 	bl	801e312 <memcpy>
 800fcd8:	68a0      	ldr	r0, [r4, #8]
 800fcda:	4642      	mov	r2, r8
 800fcdc:	19a9      	adds	r1, r5, r6
 800fcde:	f00e fb18 	bl	801e312 <memcpy>
 800fce2:	e77e      	b.n	800fbe2 <ucdr_serialize_double+0x9e>

0800fce4 <ucdr_serialize_endian_double>:
 800fce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fce8:	460e      	mov	r6, r1
 800fcea:	b083      	sub	sp, #12
 800fcec:	2108      	movs	r1, #8
 800fcee:	4604      	mov	r4, r0
 800fcf0:	ed8d 0b00 	vstr	d0, [sp]
 800fcf4:	f000 fabc 	bl	8010270 <ucdr_buffer_alignment>
 800fcf8:	4601      	mov	r1, r0
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fd00:	f000 fafa 	bl	80102f8 <ucdr_advance_buffer>
 800fd04:	2108      	movs	r1, #8
 800fd06:	4620      	mov	r0, r4
 800fd08:	f000 fa52 	bl	80101b0 <ucdr_check_buffer_available_for>
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	d14d      	bne.n	800fdac <ucdr_serialize_endian_double+0xc8>
 800fd10:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800fd14:	42bd      	cmp	r5, r7
 800fd16:	d944      	bls.n	800fda2 <ucdr_serialize_endian_double+0xbe>
 800fd18:	6923      	ldr	r3, [r4, #16]
 800fd1a:	60a5      	str	r5, [r4, #8]
 800fd1c:	1bed      	subs	r5, r5, r7
 800fd1e:	442b      	add	r3, r5
 800fd20:	f1c5 0908 	rsb	r9, r5, #8
 800fd24:	6123      	str	r3, [r4, #16]
 800fd26:	4649      	mov	r1, r9
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f000 fa4d 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d072      	beq.n	800fe18 <ucdr_serialize_endian_double+0x134>
 800fd32:	2e01      	cmp	r6, #1
 800fd34:	f000 809b 	beq.w	800fe6e <ucdr_serialize_endian_double+0x18a>
 800fd38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fd3c:	703b      	strb	r3, [r7, #0]
 800fd3e:	2d00      	cmp	r5, #0
 800fd40:	d078      	beq.n	800fe34 <ucdr_serialize_endian_double+0x150>
 800fd42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fd46:	707b      	strb	r3, [r7, #1]
 800fd48:	2d01      	cmp	r5, #1
 800fd4a:	d077      	beq.n	800fe3c <ucdr_serialize_endian_double+0x158>
 800fd4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fd50:	70bb      	strb	r3, [r7, #2]
 800fd52:	2d02      	cmp	r5, #2
 800fd54:	d076      	beq.n	800fe44 <ucdr_serialize_endian_double+0x160>
 800fd56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fd5a:	70fb      	strb	r3, [r7, #3]
 800fd5c:	2d03      	cmp	r5, #3
 800fd5e:	d075      	beq.n	800fe4c <ucdr_serialize_endian_double+0x168>
 800fd60:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fd64:	713b      	strb	r3, [r7, #4]
 800fd66:	2d04      	cmp	r5, #4
 800fd68:	d074      	beq.n	800fe54 <ucdr_serialize_endian_double+0x170>
 800fd6a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fd6e:	717b      	strb	r3, [r7, #5]
 800fd70:	2d05      	cmp	r5, #5
 800fd72:	d073      	beq.n	800fe5c <ucdr_serialize_endian_double+0x178>
 800fd74:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fd78:	71bb      	strb	r3, [r7, #6]
 800fd7a:	2d06      	cmp	r5, #6
 800fd7c:	d072      	beq.n	800fe64 <ucdr_serialize_endian_double+0x180>
 800fd7e:	f89d 3000 	ldrb.w	r3, [sp]
 800fd82:	71fb      	strb	r3, [r7, #7]
 800fd84:	6923      	ldr	r3, [r4, #16]
 800fd86:	68a2      	ldr	r2, [r4, #8]
 800fd88:	7da0      	ldrb	r0, [r4, #22]
 800fd8a:	3308      	adds	r3, #8
 800fd8c:	1b5d      	subs	r5, r3, r5
 800fd8e:	444a      	add	r2, r9
 800fd90:	2308      	movs	r3, #8
 800fd92:	f080 0001 	eor.w	r0, r0, #1
 800fd96:	60a2      	str	r2, [r4, #8]
 800fd98:	6125      	str	r5, [r4, #16]
 800fd9a:	7563      	strb	r3, [r4, #21]
 800fd9c:	b003      	add	sp, #12
 800fd9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fda2:	2108      	movs	r1, #8
 800fda4:	4620      	mov	r0, r4
 800fda6:	f000 fa0f 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800fdaa:	b348      	cbz	r0, 800fe00 <ucdr_serialize_endian_double+0x11c>
 800fdac:	2e01      	cmp	r6, #1
 800fdae:	d02d      	beq.n	800fe0c <ucdr_serialize_endian_double+0x128>
 800fdb0:	68a3      	ldr	r3, [r4, #8]
 800fdb2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fdb6:	701a      	strb	r2, [r3, #0]
 800fdb8:	68a3      	ldr	r3, [r4, #8]
 800fdba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fdbe:	705a      	strb	r2, [r3, #1]
 800fdc0:	68a3      	ldr	r3, [r4, #8]
 800fdc2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fdc6:	709a      	strb	r2, [r3, #2]
 800fdc8:	68a3      	ldr	r3, [r4, #8]
 800fdca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fdce:	70da      	strb	r2, [r3, #3]
 800fdd0:	68a3      	ldr	r3, [r4, #8]
 800fdd2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fdd6:	711a      	strb	r2, [r3, #4]
 800fdd8:	68a3      	ldr	r3, [r4, #8]
 800fdda:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fdde:	715a      	strb	r2, [r3, #5]
 800fde0:	68a3      	ldr	r3, [r4, #8]
 800fde2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fde6:	719a      	strb	r2, [r3, #6]
 800fde8:	68a3      	ldr	r3, [r4, #8]
 800fdea:	f89d 2000 	ldrb.w	r2, [sp]
 800fdee:	71da      	strb	r2, [r3, #7]
 800fdf0:	68a2      	ldr	r2, [r4, #8]
 800fdf2:	6923      	ldr	r3, [r4, #16]
 800fdf4:	3208      	adds	r2, #8
 800fdf6:	3308      	adds	r3, #8
 800fdf8:	2108      	movs	r1, #8
 800fdfa:	60a2      	str	r2, [r4, #8]
 800fdfc:	6123      	str	r3, [r4, #16]
 800fdfe:	7561      	strb	r1, [r4, #21]
 800fe00:	7da0      	ldrb	r0, [r4, #22]
 800fe02:	f080 0001 	eor.w	r0, r0, #1
 800fe06:	b003      	add	sp, #12
 800fe08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe0c:	466b      	mov	r3, sp
 800fe0e:	cb03      	ldmia	r3!, {r0, r1}
 800fe10:	68a3      	ldr	r3, [r4, #8]
 800fe12:	6018      	str	r0, [r3, #0]
 800fe14:	6059      	str	r1, [r3, #4]
 800fe16:	e7eb      	b.n	800fdf0 <ucdr_serialize_endian_double+0x10c>
 800fe18:	68a2      	ldr	r2, [r4, #8]
 800fe1a:	6923      	ldr	r3, [r4, #16]
 800fe1c:	7da0      	ldrb	r0, [r4, #22]
 800fe1e:	f884 8015 	strb.w	r8, [r4, #21]
 800fe22:	1b52      	subs	r2, r2, r5
 800fe24:	1b5b      	subs	r3, r3, r5
 800fe26:	f080 0001 	eor.w	r0, r0, #1
 800fe2a:	60a2      	str	r2, [r4, #8]
 800fe2c:	6123      	str	r3, [r4, #16]
 800fe2e:	b003      	add	sp, #12
 800fe30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe34:	68a3      	ldr	r3, [r4, #8]
 800fe36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe3a:	701a      	strb	r2, [r3, #0]
 800fe3c:	68a3      	ldr	r3, [r4, #8]
 800fe3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe42:	701a      	strb	r2, [r3, #0]
 800fe44:	68a3      	ldr	r3, [r4, #8]
 800fe46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe4a:	701a      	strb	r2, [r3, #0]
 800fe4c:	68a3      	ldr	r3, [r4, #8]
 800fe4e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fe52:	701a      	strb	r2, [r3, #0]
 800fe54:	68a3      	ldr	r3, [r4, #8]
 800fe56:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fe5a:	701a      	strb	r2, [r3, #0]
 800fe5c:	68a3      	ldr	r3, [r4, #8]
 800fe5e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fe62:	701a      	strb	r2, [r3, #0]
 800fe64:	68a3      	ldr	r3, [r4, #8]
 800fe66:	f89d 2000 	ldrb.w	r2, [sp]
 800fe6a:	701a      	strb	r2, [r3, #0]
 800fe6c:	e78a      	b.n	800fd84 <ucdr_serialize_endian_double+0xa0>
 800fe6e:	466e      	mov	r6, sp
 800fe70:	4631      	mov	r1, r6
 800fe72:	462a      	mov	r2, r5
 800fe74:	4638      	mov	r0, r7
 800fe76:	f00e fa4c 	bl	801e312 <memcpy>
 800fe7a:	68a0      	ldr	r0, [r4, #8]
 800fe7c:	464a      	mov	r2, r9
 800fe7e:	1971      	adds	r1, r6, r5
 800fe80:	f00e fa47 	bl	801e312 <memcpy>
 800fe84:	e77e      	b.n	800fd84 <ucdr_serialize_endian_double+0xa0>
 800fe86:	bf00      	nop

0800fe88 <ucdr_deserialize_double>:
 800fe88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	2108      	movs	r1, #8
 800fe90:	4604      	mov	r4, r0
 800fe92:	f000 f9ed 	bl	8010270 <ucdr_buffer_alignment>
 800fe96:	4601      	mov	r1, r0
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fe9e:	f000 fa2b 	bl	80102f8 <ucdr_advance_buffer>
 800fea2:	2108      	movs	r1, #8
 800fea4:	4620      	mov	r0, r4
 800fea6:	f000 f983 	bl	80101b0 <ucdr_check_buffer_available_for>
 800feaa:	2800      	cmp	r0, #0
 800feac:	d151      	bne.n	800ff52 <ucdr_deserialize_double+0xca>
 800feae:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800feb2:	42be      	cmp	r6, r7
 800feb4:	d948      	bls.n	800ff48 <ucdr_deserialize_double+0xc0>
 800feb6:	6923      	ldr	r3, [r4, #16]
 800feb8:	60a6      	str	r6, [r4, #8]
 800feba:	1bf6      	subs	r6, r6, r7
 800febc:	4433      	add	r3, r6
 800febe:	f1c6 0808 	rsb	r8, r6, #8
 800fec2:	6123      	str	r3, [r4, #16]
 800fec4:	4641      	mov	r1, r8
 800fec6:	4620      	mov	r0, r4
 800fec8:	f000 f97e 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800fecc:	2800      	cmp	r0, #0
 800fece:	d06d      	beq.n	800ffac <ucdr_deserialize_double+0x124>
 800fed0:	7d23      	ldrb	r3, [r4, #20]
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	f000 8093 	beq.w	800fffe <ucdr_deserialize_double+0x176>
 800fed8:	79fb      	ldrb	r3, [r7, #7]
 800feda:	702b      	strb	r3, [r5, #0]
 800fedc:	2e00      	cmp	r6, #0
 800fede:	d072      	beq.n	800ffc6 <ucdr_deserialize_double+0x13e>
 800fee0:	79bb      	ldrb	r3, [r7, #6]
 800fee2:	706b      	strb	r3, [r5, #1]
 800fee4:	2e01      	cmp	r6, #1
 800fee6:	f105 0302 	add.w	r3, r5, #2
 800feea:	d070      	beq.n	800ffce <ucdr_deserialize_double+0x146>
 800feec:	797b      	ldrb	r3, [r7, #5]
 800feee:	70ab      	strb	r3, [r5, #2]
 800fef0:	2e02      	cmp	r6, #2
 800fef2:	f105 0303 	add.w	r3, r5, #3
 800fef6:	d06e      	beq.n	800ffd6 <ucdr_deserialize_double+0x14e>
 800fef8:	793b      	ldrb	r3, [r7, #4]
 800fefa:	70eb      	strb	r3, [r5, #3]
 800fefc:	2e03      	cmp	r6, #3
 800fefe:	f105 0304 	add.w	r3, r5, #4
 800ff02:	d06c      	beq.n	800ffde <ucdr_deserialize_double+0x156>
 800ff04:	78fb      	ldrb	r3, [r7, #3]
 800ff06:	712b      	strb	r3, [r5, #4]
 800ff08:	2e04      	cmp	r6, #4
 800ff0a:	f105 0305 	add.w	r3, r5, #5
 800ff0e:	d06a      	beq.n	800ffe6 <ucdr_deserialize_double+0x15e>
 800ff10:	78bb      	ldrb	r3, [r7, #2]
 800ff12:	716b      	strb	r3, [r5, #5]
 800ff14:	2e05      	cmp	r6, #5
 800ff16:	f105 0306 	add.w	r3, r5, #6
 800ff1a:	d068      	beq.n	800ffee <ucdr_deserialize_double+0x166>
 800ff1c:	787b      	ldrb	r3, [r7, #1]
 800ff1e:	71ab      	strb	r3, [r5, #6]
 800ff20:	2e06      	cmp	r6, #6
 800ff22:	f105 0307 	add.w	r3, r5, #7
 800ff26:	d066      	beq.n	800fff6 <ucdr_deserialize_double+0x16e>
 800ff28:	783b      	ldrb	r3, [r7, #0]
 800ff2a:	71eb      	strb	r3, [r5, #7]
 800ff2c:	6923      	ldr	r3, [r4, #16]
 800ff2e:	68a2      	ldr	r2, [r4, #8]
 800ff30:	7da0      	ldrb	r0, [r4, #22]
 800ff32:	3308      	adds	r3, #8
 800ff34:	1b9e      	subs	r6, r3, r6
 800ff36:	2308      	movs	r3, #8
 800ff38:	4442      	add	r2, r8
 800ff3a:	7563      	strb	r3, [r4, #21]
 800ff3c:	60a2      	str	r2, [r4, #8]
 800ff3e:	6126      	str	r6, [r4, #16]
 800ff40:	f080 0001 	eor.w	r0, r0, #1
 800ff44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff48:	2108      	movs	r1, #8
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f000 f93c 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 800ff50:	b310      	cbz	r0, 800ff98 <ucdr_deserialize_double+0x110>
 800ff52:	7d23      	ldrb	r3, [r4, #20]
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	68a3      	ldr	r3, [r4, #8]
 800ff58:	d023      	beq.n	800ffa2 <ucdr_deserialize_double+0x11a>
 800ff5a:	79db      	ldrb	r3, [r3, #7]
 800ff5c:	702b      	strb	r3, [r5, #0]
 800ff5e:	68a3      	ldr	r3, [r4, #8]
 800ff60:	799b      	ldrb	r3, [r3, #6]
 800ff62:	706b      	strb	r3, [r5, #1]
 800ff64:	68a3      	ldr	r3, [r4, #8]
 800ff66:	795b      	ldrb	r3, [r3, #5]
 800ff68:	70ab      	strb	r3, [r5, #2]
 800ff6a:	68a3      	ldr	r3, [r4, #8]
 800ff6c:	791b      	ldrb	r3, [r3, #4]
 800ff6e:	70eb      	strb	r3, [r5, #3]
 800ff70:	68a3      	ldr	r3, [r4, #8]
 800ff72:	78db      	ldrb	r3, [r3, #3]
 800ff74:	712b      	strb	r3, [r5, #4]
 800ff76:	68a3      	ldr	r3, [r4, #8]
 800ff78:	789b      	ldrb	r3, [r3, #2]
 800ff7a:	716b      	strb	r3, [r5, #5]
 800ff7c:	68a3      	ldr	r3, [r4, #8]
 800ff7e:	785b      	ldrb	r3, [r3, #1]
 800ff80:	71ab      	strb	r3, [r5, #6]
 800ff82:	68a3      	ldr	r3, [r4, #8]
 800ff84:	781b      	ldrb	r3, [r3, #0]
 800ff86:	71eb      	strb	r3, [r5, #7]
 800ff88:	68a2      	ldr	r2, [r4, #8]
 800ff8a:	6923      	ldr	r3, [r4, #16]
 800ff8c:	3208      	adds	r2, #8
 800ff8e:	3308      	adds	r3, #8
 800ff90:	2108      	movs	r1, #8
 800ff92:	60a2      	str	r2, [r4, #8]
 800ff94:	6123      	str	r3, [r4, #16]
 800ff96:	7561      	strb	r1, [r4, #21]
 800ff98:	7da0      	ldrb	r0, [r4, #22]
 800ff9a:	f080 0001 	eor.w	r0, r0, #1
 800ff9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	606b      	str	r3, [r5, #4]
 800ffa8:	602a      	str	r2, [r5, #0]
 800ffaa:	e7ed      	b.n	800ff88 <ucdr_deserialize_double+0x100>
 800ffac:	68a2      	ldr	r2, [r4, #8]
 800ffae:	6923      	ldr	r3, [r4, #16]
 800ffb0:	7da0      	ldrb	r0, [r4, #22]
 800ffb2:	f884 9015 	strb.w	r9, [r4, #21]
 800ffb6:	1b92      	subs	r2, r2, r6
 800ffb8:	1b9b      	subs	r3, r3, r6
 800ffba:	60a2      	str	r2, [r4, #8]
 800ffbc:	6123      	str	r3, [r4, #16]
 800ffbe:	f080 0001 	eor.w	r0, r0, #1
 800ffc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffc6:	68a3      	ldr	r3, [r4, #8]
 800ffc8:	799b      	ldrb	r3, [r3, #6]
 800ffca:	706b      	strb	r3, [r5, #1]
 800ffcc:	1cab      	adds	r3, r5, #2
 800ffce:	68a2      	ldr	r2, [r4, #8]
 800ffd0:	7952      	ldrb	r2, [r2, #5]
 800ffd2:	f803 2b01 	strb.w	r2, [r3], #1
 800ffd6:	68a2      	ldr	r2, [r4, #8]
 800ffd8:	7912      	ldrb	r2, [r2, #4]
 800ffda:	f803 2b01 	strb.w	r2, [r3], #1
 800ffde:	68a2      	ldr	r2, [r4, #8]
 800ffe0:	78d2      	ldrb	r2, [r2, #3]
 800ffe2:	f803 2b01 	strb.w	r2, [r3], #1
 800ffe6:	68a2      	ldr	r2, [r4, #8]
 800ffe8:	7892      	ldrb	r2, [r2, #2]
 800ffea:	f803 2b01 	strb.w	r2, [r3], #1
 800ffee:	68a2      	ldr	r2, [r4, #8]
 800fff0:	7852      	ldrb	r2, [r2, #1]
 800fff2:	f803 2b01 	strb.w	r2, [r3], #1
 800fff6:	68a2      	ldr	r2, [r4, #8]
 800fff8:	7812      	ldrb	r2, [r2, #0]
 800fffa:	701a      	strb	r2, [r3, #0]
 800fffc:	e796      	b.n	800ff2c <ucdr_deserialize_double+0xa4>
 800fffe:	4639      	mov	r1, r7
 8010000:	4632      	mov	r2, r6
 8010002:	4628      	mov	r0, r5
 8010004:	f00e f985 	bl	801e312 <memcpy>
 8010008:	68a1      	ldr	r1, [r4, #8]
 801000a:	4642      	mov	r2, r8
 801000c:	19a8      	adds	r0, r5, r6
 801000e:	f00e f980 	bl	801e312 <memcpy>
 8010012:	e78b      	b.n	800ff2c <ucdr_deserialize_double+0xa4>

08010014 <ucdr_deserialize_endian_double>:
 8010014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010018:	460f      	mov	r7, r1
 801001a:	2108      	movs	r1, #8
 801001c:	4604      	mov	r4, r0
 801001e:	4615      	mov	r5, r2
 8010020:	f000 f926 	bl	8010270 <ucdr_buffer_alignment>
 8010024:	4601      	mov	r1, r0
 8010026:	4620      	mov	r0, r4
 8010028:	f894 9015 	ldrb.w	r9, [r4, #21]
 801002c:	f000 f964 	bl	80102f8 <ucdr_advance_buffer>
 8010030:	2108      	movs	r1, #8
 8010032:	4620      	mov	r0, r4
 8010034:	f000 f8bc 	bl	80101b0 <ucdr_check_buffer_available_for>
 8010038:	2800      	cmp	r0, #0
 801003a:	d159      	bne.n	80100f0 <ucdr_deserialize_endian_double+0xdc>
 801003c:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8010040:	4546      	cmp	r6, r8
 8010042:	d950      	bls.n	80100e6 <ucdr_deserialize_endian_double+0xd2>
 8010044:	6923      	ldr	r3, [r4, #16]
 8010046:	60a6      	str	r6, [r4, #8]
 8010048:	eba6 0608 	sub.w	r6, r6, r8
 801004c:	4433      	add	r3, r6
 801004e:	f1c6 0a08 	rsb	sl, r6, #8
 8010052:	6123      	str	r3, [r4, #16]
 8010054:	4651      	mov	r1, sl
 8010056:	4620      	mov	r0, r4
 8010058:	f000 f8b6 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 801005c:	2800      	cmp	r0, #0
 801005e:	d073      	beq.n	8010148 <ucdr_deserialize_endian_double+0x134>
 8010060:	2f01      	cmp	r7, #1
 8010062:	f000 809a 	beq.w	801019a <ucdr_deserialize_endian_double+0x186>
 8010066:	f898 3007 	ldrb.w	r3, [r8, #7]
 801006a:	702b      	strb	r3, [r5, #0]
 801006c:	2e00      	cmp	r6, #0
 801006e:	d078      	beq.n	8010162 <ucdr_deserialize_endian_double+0x14e>
 8010070:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010074:	706b      	strb	r3, [r5, #1]
 8010076:	2e01      	cmp	r6, #1
 8010078:	f105 0302 	add.w	r3, r5, #2
 801007c:	d075      	beq.n	801016a <ucdr_deserialize_endian_double+0x156>
 801007e:	f898 3005 	ldrb.w	r3, [r8, #5]
 8010082:	70ab      	strb	r3, [r5, #2]
 8010084:	2e02      	cmp	r6, #2
 8010086:	f105 0303 	add.w	r3, r5, #3
 801008a:	d072      	beq.n	8010172 <ucdr_deserialize_endian_double+0x15e>
 801008c:	f898 3004 	ldrb.w	r3, [r8, #4]
 8010090:	70eb      	strb	r3, [r5, #3]
 8010092:	2e03      	cmp	r6, #3
 8010094:	f105 0304 	add.w	r3, r5, #4
 8010098:	d06f      	beq.n	801017a <ucdr_deserialize_endian_double+0x166>
 801009a:	f898 3003 	ldrb.w	r3, [r8, #3]
 801009e:	712b      	strb	r3, [r5, #4]
 80100a0:	2e04      	cmp	r6, #4
 80100a2:	f105 0305 	add.w	r3, r5, #5
 80100a6:	d06c      	beq.n	8010182 <ucdr_deserialize_endian_double+0x16e>
 80100a8:	f898 3002 	ldrb.w	r3, [r8, #2]
 80100ac:	716b      	strb	r3, [r5, #5]
 80100ae:	2e05      	cmp	r6, #5
 80100b0:	f105 0306 	add.w	r3, r5, #6
 80100b4:	d069      	beq.n	801018a <ucdr_deserialize_endian_double+0x176>
 80100b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80100ba:	71ab      	strb	r3, [r5, #6]
 80100bc:	2e06      	cmp	r6, #6
 80100be:	f105 0307 	add.w	r3, r5, #7
 80100c2:	d066      	beq.n	8010192 <ucdr_deserialize_endian_double+0x17e>
 80100c4:	f898 3000 	ldrb.w	r3, [r8]
 80100c8:	71eb      	strb	r3, [r5, #7]
 80100ca:	6923      	ldr	r3, [r4, #16]
 80100cc:	68a2      	ldr	r2, [r4, #8]
 80100ce:	7da0      	ldrb	r0, [r4, #22]
 80100d0:	3308      	adds	r3, #8
 80100d2:	1b9e      	subs	r6, r3, r6
 80100d4:	2308      	movs	r3, #8
 80100d6:	4452      	add	r2, sl
 80100d8:	7563      	strb	r3, [r4, #21]
 80100da:	60a2      	str	r2, [r4, #8]
 80100dc:	6126      	str	r6, [r4, #16]
 80100de:	f080 0001 	eor.w	r0, r0, #1
 80100e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100e6:	2108      	movs	r1, #8
 80100e8:	4620      	mov	r0, r4
 80100ea:	f000 f86d 	bl	80101c8 <ucdr_check_final_buffer_behavior>
 80100ee:	b308      	cbz	r0, 8010134 <ucdr_deserialize_endian_double+0x120>
 80100f0:	2f01      	cmp	r7, #1
 80100f2:	68a3      	ldr	r3, [r4, #8]
 80100f4:	d023      	beq.n	801013e <ucdr_deserialize_endian_double+0x12a>
 80100f6:	79db      	ldrb	r3, [r3, #7]
 80100f8:	702b      	strb	r3, [r5, #0]
 80100fa:	68a3      	ldr	r3, [r4, #8]
 80100fc:	799b      	ldrb	r3, [r3, #6]
 80100fe:	706b      	strb	r3, [r5, #1]
 8010100:	68a3      	ldr	r3, [r4, #8]
 8010102:	795b      	ldrb	r3, [r3, #5]
 8010104:	70ab      	strb	r3, [r5, #2]
 8010106:	68a3      	ldr	r3, [r4, #8]
 8010108:	791b      	ldrb	r3, [r3, #4]
 801010a:	70eb      	strb	r3, [r5, #3]
 801010c:	68a3      	ldr	r3, [r4, #8]
 801010e:	78db      	ldrb	r3, [r3, #3]
 8010110:	712b      	strb	r3, [r5, #4]
 8010112:	68a3      	ldr	r3, [r4, #8]
 8010114:	789b      	ldrb	r3, [r3, #2]
 8010116:	716b      	strb	r3, [r5, #5]
 8010118:	68a3      	ldr	r3, [r4, #8]
 801011a:	785b      	ldrb	r3, [r3, #1]
 801011c:	71ab      	strb	r3, [r5, #6]
 801011e:	68a3      	ldr	r3, [r4, #8]
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	71eb      	strb	r3, [r5, #7]
 8010124:	68a2      	ldr	r2, [r4, #8]
 8010126:	6923      	ldr	r3, [r4, #16]
 8010128:	3208      	adds	r2, #8
 801012a:	3308      	adds	r3, #8
 801012c:	2108      	movs	r1, #8
 801012e:	60a2      	str	r2, [r4, #8]
 8010130:	6123      	str	r3, [r4, #16]
 8010132:	7561      	strb	r1, [r4, #21]
 8010134:	7da0      	ldrb	r0, [r4, #22]
 8010136:	f080 0001 	eor.w	r0, r0, #1
 801013a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	606b      	str	r3, [r5, #4]
 8010144:	602a      	str	r2, [r5, #0]
 8010146:	e7ed      	b.n	8010124 <ucdr_deserialize_endian_double+0x110>
 8010148:	68a2      	ldr	r2, [r4, #8]
 801014a:	6923      	ldr	r3, [r4, #16]
 801014c:	7da0      	ldrb	r0, [r4, #22]
 801014e:	f884 9015 	strb.w	r9, [r4, #21]
 8010152:	1b92      	subs	r2, r2, r6
 8010154:	1b9b      	subs	r3, r3, r6
 8010156:	60a2      	str	r2, [r4, #8]
 8010158:	6123      	str	r3, [r4, #16]
 801015a:	f080 0001 	eor.w	r0, r0, #1
 801015e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010162:	68a3      	ldr	r3, [r4, #8]
 8010164:	799b      	ldrb	r3, [r3, #6]
 8010166:	706b      	strb	r3, [r5, #1]
 8010168:	1cab      	adds	r3, r5, #2
 801016a:	68a2      	ldr	r2, [r4, #8]
 801016c:	7952      	ldrb	r2, [r2, #5]
 801016e:	f803 2b01 	strb.w	r2, [r3], #1
 8010172:	68a2      	ldr	r2, [r4, #8]
 8010174:	7912      	ldrb	r2, [r2, #4]
 8010176:	f803 2b01 	strb.w	r2, [r3], #1
 801017a:	68a2      	ldr	r2, [r4, #8]
 801017c:	78d2      	ldrb	r2, [r2, #3]
 801017e:	f803 2b01 	strb.w	r2, [r3], #1
 8010182:	68a2      	ldr	r2, [r4, #8]
 8010184:	7892      	ldrb	r2, [r2, #2]
 8010186:	f803 2b01 	strb.w	r2, [r3], #1
 801018a:	68a2      	ldr	r2, [r4, #8]
 801018c:	7852      	ldrb	r2, [r2, #1]
 801018e:	f803 2b01 	strb.w	r2, [r3], #1
 8010192:	68a2      	ldr	r2, [r4, #8]
 8010194:	7812      	ldrb	r2, [r2, #0]
 8010196:	701a      	strb	r2, [r3, #0]
 8010198:	e797      	b.n	80100ca <ucdr_deserialize_endian_double+0xb6>
 801019a:	4641      	mov	r1, r8
 801019c:	4632      	mov	r2, r6
 801019e:	4628      	mov	r0, r5
 80101a0:	f00e f8b7 	bl	801e312 <memcpy>
 80101a4:	68a1      	ldr	r1, [r4, #8]
 80101a6:	4652      	mov	r2, sl
 80101a8:	19a8      	adds	r0, r5, r6
 80101aa:	f00e f8b2 	bl	801e312 <memcpy>
 80101ae:	e78c      	b.n	80100ca <ucdr_deserialize_endian_double+0xb6>

080101b0 <ucdr_check_buffer_available_for>:
 80101b0:	7d83      	ldrb	r3, [r0, #22]
 80101b2:	b93b      	cbnz	r3, 80101c4 <ucdr_check_buffer_available_for+0x14>
 80101b4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80101b8:	4419      	add	r1, r3
 80101ba:	4288      	cmp	r0, r1
 80101bc:	bf34      	ite	cc
 80101be:	2000      	movcc	r0, #0
 80101c0:	2001      	movcs	r0, #1
 80101c2:	4770      	bx	lr
 80101c4:	2000      	movs	r0, #0
 80101c6:	4770      	bx	lr

080101c8 <ucdr_check_final_buffer_behavior>:
 80101c8:	7d83      	ldrb	r3, [r0, #22]
 80101ca:	b943      	cbnz	r3, 80101de <ucdr_check_final_buffer_behavior+0x16>
 80101cc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80101d0:	4291      	cmp	r1, r2
 80101d2:	b510      	push	{r4, lr}
 80101d4:	4604      	mov	r4, r0
 80101d6:	d205      	bcs.n	80101e4 <ucdr_check_final_buffer_behavior+0x1c>
 80101d8:	2301      	movs	r3, #1
 80101da:	4618      	mov	r0, r3
 80101dc:	bd10      	pop	{r4, pc}
 80101de:	2300      	movs	r3, #0
 80101e0:	4618      	mov	r0, r3
 80101e2:	4770      	bx	lr
 80101e4:	6982      	ldr	r2, [r0, #24]
 80101e6:	b13a      	cbz	r2, 80101f8 <ucdr_check_final_buffer_behavior+0x30>
 80101e8:	69c1      	ldr	r1, [r0, #28]
 80101ea:	4790      	blx	r2
 80101ec:	f080 0301 	eor.w	r3, r0, #1
 80101f0:	b2db      	uxtb	r3, r3
 80101f2:	75a0      	strb	r0, [r4, #22]
 80101f4:	4618      	mov	r0, r3
 80101f6:	bd10      	pop	{r4, pc}
 80101f8:	2001      	movs	r0, #1
 80101fa:	75a0      	strb	r0, [r4, #22]
 80101fc:	e7fa      	b.n	80101f4 <ucdr_check_final_buffer_behavior+0x2c>
 80101fe:	bf00      	nop

08010200 <ucdr_set_on_full_buffer_callback>:
 8010200:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010204:	4770      	bx	lr
 8010206:	bf00      	nop

08010208 <ucdr_init_buffer_origin_offset_endian>:
 8010208:	b410      	push	{r4}
 801020a:	9c01      	ldr	r4, [sp, #4]
 801020c:	6001      	str	r1, [r0, #0]
 801020e:	440a      	add	r2, r1
 8010210:	6042      	str	r2, [r0, #4]
 8010212:	190a      	adds	r2, r1, r4
 8010214:	441c      	add	r4, r3
 8010216:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801021a:	6082      	str	r2, [r0, #8]
 801021c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010220:	7503      	strb	r3, [r0, #20]
 8010222:	2200      	movs	r2, #0
 8010224:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010228:	f85d 4b04 	ldr.w	r4, [sp], #4
 801022c:	7542      	strb	r2, [r0, #21]
 801022e:	7582      	strb	r2, [r0, #22]
 8010230:	4770      	bx	lr
 8010232:	bf00      	nop

08010234 <ucdr_init_buffer_origin_offset>:
 8010234:	b510      	push	{r4, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	9c04      	ldr	r4, [sp, #16]
 801023a:	9400      	str	r4, [sp, #0]
 801023c:	2401      	movs	r4, #1
 801023e:	9401      	str	r4, [sp, #4]
 8010240:	f7ff ffe2 	bl	8010208 <ucdr_init_buffer_origin_offset_endian>
 8010244:	b002      	add	sp, #8
 8010246:	bd10      	pop	{r4, pc}

08010248 <ucdr_init_buffer_origin>:
 8010248:	b510      	push	{r4, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	2400      	movs	r4, #0
 801024e:	9400      	str	r4, [sp, #0]
 8010250:	f7ff fff0 	bl	8010234 <ucdr_init_buffer_origin_offset>
 8010254:	b002      	add	sp, #8
 8010256:	bd10      	pop	{r4, pc}

08010258 <ucdr_init_buffer>:
 8010258:	2300      	movs	r3, #0
 801025a:	f7ff bff5 	b.w	8010248 <ucdr_init_buffer_origin>
 801025e:	bf00      	nop

08010260 <ucdr_alignment>:
 8010260:	fbb0 f3f1 	udiv	r3, r0, r1
 8010264:	fb03 0011 	mls	r0, r3, r1, r0
 8010268:	1a08      	subs	r0, r1, r0
 801026a:	3901      	subs	r1, #1
 801026c:	4008      	ands	r0, r1
 801026e:	4770      	bx	lr

08010270 <ucdr_buffer_alignment>:
 8010270:	7d43      	ldrb	r3, [r0, #21]
 8010272:	428b      	cmp	r3, r1
 8010274:	d208      	bcs.n	8010288 <ucdr_buffer_alignment+0x18>
 8010276:	6900      	ldr	r0, [r0, #16]
 8010278:	fbb0 f3f1 	udiv	r3, r0, r1
 801027c:	fb01 0013 	mls	r0, r1, r3, r0
 8010280:	1a08      	subs	r0, r1, r0
 8010282:	3901      	subs	r1, #1
 8010284:	4008      	ands	r0, r1
 8010286:	4770      	bx	lr
 8010288:	2000      	movs	r0, #0
 801028a:	4770      	bx	lr

0801028c <ucdr_align_to>:
 801028c:	b538      	push	{r3, r4, r5, lr}
 801028e:	4604      	mov	r4, r0
 8010290:	460d      	mov	r5, r1
 8010292:	f7ff ffed 	bl	8010270 <ucdr_buffer_alignment>
 8010296:	68a3      	ldr	r3, [r4, #8]
 8010298:	6921      	ldr	r1, [r4, #16]
 801029a:	7565      	strb	r5, [r4, #21]
 801029c:	181a      	adds	r2, r3, r0
 801029e:	6863      	ldr	r3, [r4, #4]
 80102a0:	4293      	cmp	r3, r2
 80102a2:	4408      	add	r0, r1
 80102a4:	bf28      	it	cs
 80102a6:	4613      	movcs	r3, r2
 80102a8:	6120      	str	r0, [r4, #16]
 80102aa:	60a3      	str	r3, [r4, #8]
 80102ac:	bd38      	pop	{r3, r4, r5, pc}
 80102ae:	bf00      	nop

080102b0 <ucdr_buffer_length>:
 80102b0:	6882      	ldr	r2, [r0, #8]
 80102b2:	6800      	ldr	r0, [r0, #0]
 80102b4:	1a10      	subs	r0, r2, r0
 80102b6:	4770      	bx	lr

080102b8 <ucdr_buffer_remaining>:
 80102b8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80102bc:	1a10      	subs	r0, r2, r0
 80102be:	4770      	bx	lr

080102c0 <ucdr_check_final_buffer_behavior_array>:
 80102c0:	b538      	push	{r3, r4, r5, lr}
 80102c2:	7d83      	ldrb	r3, [r0, #22]
 80102c4:	b963      	cbnz	r3, 80102e0 <ucdr_check_final_buffer_behavior_array+0x20>
 80102c6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	4604      	mov	r4, r0
 80102ce:	460d      	mov	r5, r1
 80102d0:	d308      	bcc.n	80102e4 <ucdr_check_final_buffer_behavior_array+0x24>
 80102d2:	b139      	cbz	r1, 80102e4 <ucdr_check_final_buffer_behavior_array+0x24>
 80102d4:	6983      	ldr	r3, [r0, #24]
 80102d6:	b163      	cbz	r3, 80102f2 <ucdr_check_final_buffer_behavior_array+0x32>
 80102d8:	69c1      	ldr	r1, [r0, #28]
 80102da:	4798      	blx	r3
 80102dc:	75a0      	strb	r0, [r4, #22]
 80102de:	b108      	cbz	r0, 80102e4 <ucdr_check_final_buffer_behavior_array+0x24>
 80102e0:	2000      	movs	r0, #0
 80102e2:	bd38      	pop	{r3, r4, r5, pc}
 80102e4:	4620      	mov	r0, r4
 80102e6:	f7ff ffe7 	bl	80102b8 <ucdr_buffer_remaining>
 80102ea:	42a8      	cmp	r0, r5
 80102ec:	bf28      	it	cs
 80102ee:	4628      	movcs	r0, r5
 80102f0:	bd38      	pop	{r3, r4, r5, pc}
 80102f2:	2301      	movs	r3, #1
 80102f4:	7583      	strb	r3, [r0, #22]
 80102f6:	e7f3      	b.n	80102e0 <ucdr_check_final_buffer_behavior_array+0x20>

080102f8 <ucdr_advance_buffer>:
 80102f8:	b538      	push	{r3, r4, r5, lr}
 80102fa:	4604      	mov	r4, r0
 80102fc:	460d      	mov	r5, r1
 80102fe:	f7ff ff57 	bl	80101b0 <ucdr_check_buffer_available_for>
 8010302:	b178      	cbz	r0, 8010324 <ucdr_advance_buffer+0x2c>
 8010304:	6923      	ldr	r3, [r4, #16]
 8010306:	68a2      	ldr	r2, [r4, #8]
 8010308:	442b      	add	r3, r5
 801030a:	6123      	str	r3, [r4, #16]
 801030c:	2301      	movs	r3, #1
 801030e:	442a      	add	r2, r5
 8010310:	7563      	strb	r3, [r4, #21]
 8010312:	60a2      	str	r2, [r4, #8]
 8010314:	bd38      	pop	{r3, r4, r5, pc}
 8010316:	68a2      	ldr	r2, [r4, #8]
 8010318:	6923      	ldr	r3, [r4, #16]
 801031a:	4402      	add	r2, r0
 801031c:	4403      	add	r3, r0
 801031e:	1a2d      	subs	r5, r5, r0
 8010320:	60a2      	str	r2, [r4, #8]
 8010322:	6123      	str	r3, [r4, #16]
 8010324:	4629      	mov	r1, r5
 8010326:	2201      	movs	r2, #1
 8010328:	4620      	mov	r0, r4
 801032a:	f7ff ffc9 	bl	80102c0 <ucdr_check_final_buffer_behavior_array>
 801032e:	2800      	cmp	r0, #0
 8010330:	d1f1      	bne.n	8010316 <ucdr_advance_buffer+0x1e>
 8010332:	2301      	movs	r3, #1
 8010334:	7563      	strb	r3, [r4, #21]
 8010336:	bd38      	pop	{r3, r4, r5, pc}

08010338 <rcl_get_zero_initialized_client>:
 8010338:	4b01      	ldr	r3, [pc, #4]	@ (8010340 <rcl_get_zero_initialized_client+0x8>)
 801033a:	6818      	ldr	r0, [r3, #0]
 801033c:	4770      	bx	lr
 801033e:	bf00      	nop
 8010340:	0801fde4 	.word	0x0801fde4

08010344 <rcl_client_init>:
 8010344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010348:	b089      	sub	sp, #36	@ 0x24
 801034a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801034c:	b1c5      	cbz	r5, 8010380 <rcl_client_init+0x3c>
 801034e:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8010352:	4604      	mov	r4, r0
 8010354:	4648      	mov	r0, r9
 8010356:	4688      	mov	r8, r1
 8010358:	4617      	mov	r7, r2
 801035a:	461e      	mov	r6, r3
 801035c:	f001 fd9a 	bl	8011e94 <rcutils_allocator_is_valid>
 8010360:	b170      	cbz	r0, 8010380 <rcl_client_init+0x3c>
 8010362:	b16c      	cbz	r4, 8010380 <rcl_client_init+0x3c>
 8010364:	4640      	mov	r0, r8
 8010366:	f000 fb83 	bl	8010a70 <rcl_node_is_valid>
 801036a:	2800      	cmp	r0, #0
 801036c:	d05e      	beq.n	801042c <rcl_client_init+0xe8>
 801036e:	b13f      	cbz	r7, 8010380 <rcl_client_init+0x3c>
 8010370:	b136      	cbz	r6, 8010380 <rcl_client_init+0x3c>
 8010372:	6823      	ldr	r3, [r4, #0]
 8010374:	b14b      	cbz	r3, 801038a <rcl_client_init+0x46>
 8010376:	2664      	movs	r6, #100	@ 0x64
 8010378:	4630      	mov	r0, r6
 801037a:	b009      	add	sp, #36	@ 0x24
 801037c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010380:	260b      	movs	r6, #11
 8010382:	4630      	mov	r0, r6
 8010384:	b009      	add	sp, #36	@ 0x24
 8010386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801038a:	aa07      	add	r2, sp, #28
 801038c:	9205      	str	r2, [sp, #20]
 801038e:	2201      	movs	r2, #1
 8010390:	9304      	str	r3, [sp, #16]
 8010392:	9203      	str	r2, [sp, #12]
 8010394:	9307      	str	r3, [sp, #28]
 8010396:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 801039a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801039e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80103a2:	4631      	mov	r1, r6
 80103a4:	e899 000c 	ldmia.w	r9, {r2, r3}
 80103a8:	4640      	mov	r0, r8
 80103aa:	f000 fbb5 	bl	8010b18 <rcl_node_resolve_name>
 80103ae:	2800      	cmp	r0, #0
 80103b0:	d14b      	bne.n	801044a <rcl_client_init+0x106>
 80103b2:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80103b4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80103b6:	f44f 708c 	mov.w	r0, #280	@ 0x118
 80103ba:	4798      	blx	r3
 80103bc:	6020      	str	r0, [r4, #0]
 80103be:	2800      	cmp	r0, #0
 80103c0:	d049      	beq.n	8010456 <rcl_client_init+0x112>
 80103c2:	4640      	mov	r0, r8
 80103c4:	f000 fb76 	bl	8010ab4 <rcl_node_get_rmw_handle>
 80103c8:	462b      	mov	r3, r5
 80103ca:	9a07      	ldr	r2, [sp, #28]
 80103cc:	6826      	ldr	r6, [r4, #0]
 80103ce:	4639      	mov	r1, r7
 80103d0:	f002 faa0 	bl	8012914 <rmw_create_client>
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 80103da:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80103de:	b360      	cbz	r0, 801043a <rcl_client_init+0xf6>
 80103e0:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80103e4:	f002 fbac 	bl	8012b40 <rmw_client_request_publisher_get_actual_qos>
 80103e8:	bb28      	cbnz	r0, 8010436 <rcl_client_init+0xf2>
 80103ea:	6821      	ldr	r1, [r4, #0]
 80103ec:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 80103f0:	31b8      	adds	r1, #184	@ 0xb8
 80103f2:	f002 fbb5 	bl	8012b60 <rmw_client_response_subscription_get_actual_qos>
 80103f6:	4606      	mov	r6, r0
 80103f8:	b9e8      	cbnz	r0, 8010436 <rcl_client_init+0xf2>
 80103fa:	6823      	ldr	r3, [r4, #0]
 80103fc:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8010400:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 8010404:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
 8010408:	4629      	mov	r1, r5
 801040a:	4618      	mov	r0, r3
 801040c:	2268      	movs	r2, #104	@ 0x68
 801040e:	f00d ff80 	bl	801e312 <memcpy>
 8010412:	2100      	movs	r1, #0
 8010414:	4603      	mov	r3, r0
 8010416:	2000      	movs	r0, #0
 8010418:	e9c3 0144 	strd	r0, r1, [r3, #272]	@ 0x110
 801041c:	9807      	ldr	r0, [sp, #28]
 801041e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8010420:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8010422:	4798      	blx	r3
 8010424:	4630      	mov	r0, r6
 8010426:	b009      	add	sp, #36	@ 0x24
 8010428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801042c:	26c8      	movs	r6, #200	@ 0xc8
 801042e:	4630      	mov	r0, r6
 8010430:	b009      	add	sp, #36	@ 0x24
 8010432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010436:	6823      	ldr	r3, [r4, #0]
 8010438:	b12b      	cbz	r3, 8010446 <rcl_client_init+0x102>
 801043a:	4618      	mov	r0, r3
 801043c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 801043e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8010440:	4790      	blx	r2
 8010442:	2300      	movs	r3, #0
 8010444:	6023      	str	r3, [r4, #0]
 8010446:	2601      	movs	r6, #1
 8010448:	e7e8      	b.n	801041c <rcl_client_init+0xd8>
 801044a:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 801044e:	2b01      	cmp	r3, #1
 8010450:	d903      	bls.n	801045a <rcl_client_init+0x116>
 8010452:	280a      	cmp	r0, #10
 8010454:	d1f7      	bne.n	8010446 <rcl_client_init+0x102>
 8010456:	260a      	movs	r6, #10
 8010458:	e7e0      	b.n	801041c <rcl_client_init+0xd8>
 801045a:	2668      	movs	r6, #104	@ 0x68
 801045c:	e7de      	b.n	801041c <rcl_client_init+0xd8>
 801045e:	bf00      	nop

08010460 <rcl_client_get_default_options>:
 8010460:	b530      	push	{r4, r5, lr}
 8010462:	4d0f      	ldr	r5, [pc, #60]	@ (80104a0 <rcl_client_get_default_options+0x40>)
 8010464:	490f      	ldr	r1, [pc, #60]	@ (80104a4 <rcl_client_get_default_options+0x44>)
 8010466:	b087      	sub	sp, #28
 8010468:	4604      	mov	r4, r0
 801046a:	2250      	movs	r2, #80	@ 0x50
 801046c:	4628      	mov	r0, r5
 801046e:	f00d ff50 	bl	801e312 <memcpy>
 8010472:	4668      	mov	r0, sp
 8010474:	f001 fd00 	bl	8011e78 <rcutils_get_default_allocator>
 8010478:	46ec      	mov	ip, sp
 801047a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801047e:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8010482:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010486:	2268      	movs	r2, #104	@ 0x68
 8010488:	f8dc 3000 	ldr.w	r3, [ip]
 801048c:	f8ce 3000 	str.w	r3, [lr]
 8010490:	4629      	mov	r1, r5
 8010492:	4620      	mov	r0, r4
 8010494:	f00d ff3d 	bl	801e312 <memcpy>
 8010498:	4620      	mov	r0, r4
 801049a:	b007      	add	sp, #28
 801049c:	bd30      	pop	{r4, r5, pc}
 801049e:	bf00      	nop
 80104a0:	200073d8 	.word	0x200073d8
 80104a4:	0801fde8 	.word	0x0801fde8

080104a8 <rcl_client_get_rmw_handle>:
 80104a8:	b118      	cbz	r0, 80104b2 <rcl_client_get_rmw_handle+0xa>
 80104aa:	6800      	ldr	r0, [r0, #0]
 80104ac:	b108      	cbz	r0, 80104b2 <rcl_client_get_rmw_handle+0xa>
 80104ae:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80104b2:	4770      	bx	lr

080104b4 <rcl_send_request>:
 80104b4:	b570      	push	{r4, r5, r6, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	b1e8      	cbz	r0, 80104f6 <rcl_send_request+0x42>
 80104ba:	4604      	mov	r4, r0
 80104bc:	6800      	ldr	r0, [r0, #0]
 80104be:	b1d0      	cbz	r0, 80104f6 <rcl_send_request+0x42>
 80104c0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80104c4:	b1bb      	cbz	r3, 80104f6 <rcl_send_request+0x42>
 80104c6:	460e      	mov	r6, r1
 80104c8:	b1d1      	cbz	r1, 8010500 <rcl_send_request+0x4c>
 80104ca:	4615      	mov	r5, r2
 80104cc:	b1c2      	cbz	r2, 8010500 <rcl_send_request+0x4c>
 80104ce:	2105      	movs	r1, #5
 80104d0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80104d4:	f001 fcec 	bl	8011eb0 <__atomic_load_8>
 80104d8:	6823      	ldr	r3, [r4, #0]
 80104da:	e9c5 0100 	strd	r0, r1, [r5]
 80104de:	462a      	mov	r2, r5
 80104e0:	4631      	mov	r1, r6
 80104e2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80104e6:	f003 f869 	bl	80135bc <rmw_send_request>
 80104ea:	4606      	mov	r6, r0
 80104ec:	b160      	cbz	r0, 8010508 <rcl_send_request+0x54>
 80104ee:	2601      	movs	r6, #1
 80104f0:	4630      	mov	r0, r6
 80104f2:	b002      	add	sp, #8
 80104f4:	bd70      	pop	{r4, r5, r6, pc}
 80104f6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80104fa:	4630      	mov	r0, r6
 80104fc:	b002      	add	sp, #8
 80104fe:	bd70      	pop	{r4, r5, r6, pc}
 8010500:	260b      	movs	r6, #11
 8010502:	4630      	mov	r0, r6
 8010504:	b002      	add	sp, #8
 8010506:	bd70      	pop	{r4, r5, r6, pc}
 8010508:	6820      	ldr	r0, [r4, #0]
 801050a:	2105      	movs	r1, #5
 801050c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010510:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010514:	9100      	str	r1, [sp, #0]
 8010516:	f001 fd37 	bl	8011f88 <__atomic_exchange_8>
 801051a:	4630      	mov	r0, r6
 801051c:	b002      	add	sp, #8
 801051e:	bd70      	pop	{r4, r5, r6, pc}

08010520 <rcl_take_response>:
 8010520:	b570      	push	{r4, r5, r6, lr}
 8010522:	468e      	mov	lr, r1
 8010524:	460c      	mov	r4, r1
 8010526:	4616      	mov	r6, r2
 8010528:	4605      	mov	r5, r0
 801052a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801052e:	b08c      	sub	sp, #48	@ 0x30
 8010530:	f10d 0c18 	add.w	ip, sp, #24
 8010534:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010538:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801053c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010540:	b35d      	cbz	r5, 801059a <rcl_take_response+0x7a>
 8010542:	682b      	ldr	r3, [r5, #0]
 8010544:	b34b      	cbz	r3, 801059a <rcl_take_response+0x7a>
 8010546:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801054a:	b330      	cbz	r0, 801059a <rcl_take_response+0x7a>
 801054c:	b346      	cbz	r6, 80105a0 <rcl_take_response+0x80>
 801054e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80105a8 <rcl_take_response+0x88>
 8010552:	2300      	movs	r3, #0
 8010554:	f88d 3007 	strb.w	r3, [sp, #7]
 8010558:	4632      	mov	r2, r6
 801055a:	f10d 0307 	add.w	r3, sp, #7
 801055e:	a902      	add	r1, sp, #8
 8010560:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010564:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010568:	f003 f930 	bl	80137cc <rmw_take_response>
 801056c:	4605      	mov	r5, r0
 801056e:	b9c8      	cbnz	r0, 80105a4 <rcl_take_response+0x84>
 8010570:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010574:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8010578:	2a00      	cmp	r2, #0
 801057a:	bf08      	it	eq
 801057c:	461d      	moveq	r5, r3
 801057e:	f10d 0e18 	add.w	lr, sp, #24
 8010582:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010586:	46a4      	mov	ip, r4
 8010588:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801058c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010590:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010594:	4628      	mov	r0, r5
 8010596:	b00c      	add	sp, #48	@ 0x30
 8010598:	bd70      	pop	{r4, r5, r6, pc}
 801059a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801059e:	e7ee      	b.n	801057e <rcl_take_response+0x5e>
 80105a0:	250b      	movs	r5, #11
 80105a2:	e7ec      	b.n	801057e <rcl_take_response+0x5e>
 80105a4:	2501      	movs	r5, #1
 80105a6:	e7ea      	b.n	801057e <rcl_take_response+0x5e>
	...

080105b0 <rcl_client_is_valid>:
 80105b0:	b130      	cbz	r0, 80105c0 <rcl_client_is_valid+0x10>
 80105b2:	6800      	ldr	r0, [r0, #0]
 80105b4:	b120      	cbz	r0, 80105c0 <rcl_client_is_valid+0x10>
 80105b6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80105ba:	3800      	subs	r0, #0
 80105bc:	bf18      	it	ne
 80105be:	2001      	movne	r0, #1
 80105c0:	4770      	bx	lr
 80105c2:	bf00      	nop

080105c4 <rcl_get_zero_initialized_init_options>:
 80105c4:	2000      	movs	r0, #0
 80105c6:	4770      	bx	lr

080105c8 <rcl_init_options_init>:
 80105c8:	b084      	sub	sp, #16
 80105ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105cc:	b097      	sub	sp, #92	@ 0x5c
 80105ce:	ae1d      	add	r6, sp, #116	@ 0x74
 80105d0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80105d4:	2800      	cmp	r0, #0
 80105d6:	d058      	beq.n	801068a <rcl_init_options_init+0xc2>
 80105d8:	6803      	ldr	r3, [r0, #0]
 80105da:	4605      	mov	r5, r0
 80105dc:	b133      	cbz	r3, 80105ec <rcl_init_options_init+0x24>
 80105de:	2464      	movs	r4, #100	@ 0x64
 80105e0:	4620      	mov	r0, r4
 80105e2:	b017      	add	sp, #92	@ 0x5c
 80105e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80105e8:	b004      	add	sp, #16
 80105ea:	4770      	bx	lr
 80105ec:	4630      	mov	r0, r6
 80105ee:	f001 fc51 	bl	8011e94 <rcutils_allocator_is_valid>
 80105f2:	2800      	cmp	r0, #0
 80105f4:	d049      	beq.n	801068a <rcl_init_options_init+0xc2>
 80105f6:	46b4      	mov	ip, r6
 80105f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80105fc:	ac11      	add	r4, sp, #68	@ 0x44
 80105fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010600:	f8dc 3000 	ldr.w	r3, [ip]
 8010604:	6023      	str	r3, [r4, #0]
 8010606:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010608:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801060a:	2050      	movs	r0, #80	@ 0x50
 801060c:	4798      	blx	r3
 801060e:	4604      	mov	r4, r0
 8010610:	6028      	str	r0, [r5, #0]
 8010612:	2800      	cmp	r0, #0
 8010614:	d03b      	beq.n	801068e <rcl_init_options_init+0xc6>
 8010616:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801061a:	4686      	mov	lr, r0
 801061c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010620:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010624:	f8dc 3000 	ldr.w	r3, [ip]
 8010628:	f8ce 3000 	str.w	r3, [lr]
 801062c:	a802      	add	r0, sp, #8
 801062e:	f002 f803 	bl	8012638 <rmw_get_zero_initialized_init_options>
 8010632:	f10d 0e08 	add.w	lr, sp, #8
 8010636:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801063a:	f104 0c18 	add.w	ip, r4, #24
 801063e:	682f      	ldr	r7, [r5, #0]
 8010640:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010644:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010648:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801064c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010650:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010654:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010658:	ac20      	add	r4, sp, #128	@ 0x80
 801065a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801065e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010662:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010666:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801066a:	f107 0018 	add.w	r0, r7, #24
 801066e:	f002 fa8d 	bl	8012b8c <rmw_init_options_init>
 8010672:	4604      	mov	r4, r0
 8010674:	2800      	cmp	r0, #0
 8010676:	d0b3      	beq.n	80105e0 <rcl_init_options_init+0x18>
 8010678:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801067a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801067c:	6828      	ldr	r0, [r5, #0]
 801067e:	4798      	blx	r3
 8010680:	4620      	mov	r0, r4
 8010682:	f008 fe21 	bl	80192c8 <rcl_convert_rmw_ret_to_rcl_ret>
 8010686:	4604      	mov	r4, r0
 8010688:	e7aa      	b.n	80105e0 <rcl_init_options_init+0x18>
 801068a:	240b      	movs	r4, #11
 801068c:	e7a8      	b.n	80105e0 <rcl_init_options_init+0x18>
 801068e:	240a      	movs	r4, #10
 8010690:	e7a6      	b.n	80105e0 <rcl_init_options_init+0x18>
 8010692:	bf00      	nop

08010694 <rcl_init_options_fini>:
 8010694:	b530      	push	{r4, r5, lr}
 8010696:	b087      	sub	sp, #28
 8010698:	b1f0      	cbz	r0, 80106d8 <rcl_init_options_fini+0x44>
 801069a:	6803      	ldr	r3, [r0, #0]
 801069c:	4604      	mov	r4, r0
 801069e:	b1db      	cbz	r3, 80106d8 <rcl_init_options_fini+0x44>
 80106a0:	469c      	mov	ip, r3
 80106a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80106a6:	f10d 0e04 	add.w	lr, sp, #4
 80106aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80106ae:	f8dc 3000 	ldr.w	r3, [ip]
 80106b2:	f8ce 3000 	str.w	r3, [lr]
 80106b6:	a801      	add	r0, sp, #4
 80106b8:	f001 fbec 	bl	8011e94 <rcutils_allocator_is_valid>
 80106bc:	b160      	cbz	r0, 80106d8 <rcl_init_options_fini+0x44>
 80106be:	6820      	ldr	r0, [r4, #0]
 80106c0:	3018      	adds	r0, #24
 80106c2:	f002 fb13 	bl	8012cec <rmw_init_options_fini>
 80106c6:	4605      	mov	r5, r0
 80106c8:	b950      	cbnz	r0, 80106e0 <rcl_init_options_fini+0x4c>
 80106ca:	6820      	ldr	r0, [r4, #0]
 80106cc:	9b02      	ldr	r3, [sp, #8]
 80106ce:	9905      	ldr	r1, [sp, #20]
 80106d0:	4798      	blx	r3
 80106d2:	4628      	mov	r0, r5
 80106d4:	b007      	add	sp, #28
 80106d6:	bd30      	pop	{r4, r5, pc}
 80106d8:	250b      	movs	r5, #11
 80106da:	4628      	mov	r0, r5
 80106dc:	b007      	add	sp, #28
 80106de:	bd30      	pop	{r4, r5, pc}
 80106e0:	f008 fdf2 	bl	80192c8 <rcl_convert_rmw_ret_to_rcl_ret>
 80106e4:	4605      	mov	r5, r0
 80106e6:	e7f8      	b.n	80106da <rcl_init_options_fini+0x46>

080106e8 <rcl_init_options_copy>:
 80106e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ec:	b094      	sub	sp, #80	@ 0x50
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d058      	beq.n	80107a4 <rcl_init_options_copy+0xbc>
 80106f2:	4604      	mov	r4, r0
 80106f4:	6800      	ldr	r0, [r0, #0]
 80106f6:	2800      	cmp	r0, #0
 80106f8:	d054      	beq.n	80107a4 <rcl_init_options_copy+0xbc>
 80106fa:	460e      	mov	r6, r1
 80106fc:	f001 fbca 	bl	8011e94 <rcutils_allocator_is_valid>
 8010700:	2800      	cmp	r0, #0
 8010702:	d04f      	beq.n	80107a4 <rcl_init_options_copy+0xbc>
 8010704:	2e00      	cmp	r6, #0
 8010706:	d04d      	beq.n	80107a4 <rcl_init_options_copy+0xbc>
 8010708:	6833      	ldr	r3, [r6, #0]
 801070a:	b123      	cbz	r3, 8010716 <rcl_init_options_copy+0x2e>
 801070c:	2464      	movs	r4, #100	@ 0x64
 801070e:	4620      	mov	r0, r4
 8010710:	b014      	add	sp, #80	@ 0x50
 8010712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010716:	6827      	ldr	r7, [r4, #0]
 8010718:	46bc      	mov	ip, r7
 801071a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801071e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8010720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010722:	f8dc 3000 	ldr.w	r3, [ip]
 8010726:	f8d7 8000 	ldr.w	r8, [r7]
 801072a:	602b      	str	r3, [r5, #0]
 801072c:	4619      	mov	r1, r3
 801072e:	2050      	movs	r0, #80	@ 0x50
 8010730:	47c0      	blx	r8
 8010732:	4605      	mov	r5, r0
 8010734:	6030      	str	r0, [r6, #0]
 8010736:	b3d0      	cbz	r0, 80107ae <rcl_init_options_copy+0xc6>
 8010738:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801073c:	4686      	mov	lr, r0
 801073e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010742:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010746:	f8dc 3000 	ldr.w	r3, [ip]
 801074a:	f8ce 3000 	str.w	r3, [lr]
 801074e:	4668      	mov	r0, sp
 8010750:	f001 ff72 	bl	8012638 <rmw_get_zero_initialized_init_options>
 8010754:	46ee      	mov	lr, sp
 8010756:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801075a:	f105 0c18 	add.w	ip, r5, #24
 801075e:	6824      	ldr	r4, [r4, #0]
 8010760:	6835      	ldr	r5, [r6, #0]
 8010762:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010766:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801076a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801076e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010772:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010776:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801077a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801077e:	f104 0018 	add.w	r0, r4, #24
 8010782:	f105 0118 	add.w	r1, r5, #24
 8010786:	f002 fa69 	bl	8012c5c <rmw_init_options_copy>
 801078a:	4604      	mov	r4, r0
 801078c:	2800      	cmp	r0, #0
 801078e:	d0be      	beq.n	801070e <rcl_init_options_copy+0x26>
 8010790:	f001 fc4a 	bl	8012028 <rcutils_get_error_string>
 8010794:	f001 fc60 	bl	8012058 <rcutils_reset_error>
 8010798:	4630      	mov	r0, r6
 801079a:	f7ff ff7b 	bl	8010694 <rcl_init_options_fini>
 801079e:	b140      	cbz	r0, 80107b2 <rcl_init_options_copy+0xca>
 80107a0:	4604      	mov	r4, r0
 80107a2:	e7b4      	b.n	801070e <rcl_init_options_copy+0x26>
 80107a4:	240b      	movs	r4, #11
 80107a6:	4620      	mov	r0, r4
 80107a8:	b014      	add	sp, #80	@ 0x50
 80107aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ae:	240a      	movs	r4, #10
 80107b0:	e7ad      	b.n	801070e <rcl_init_options_copy+0x26>
 80107b2:	4620      	mov	r0, r4
 80107b4:	b014      	add	sp, #80	@ 0x50
 80107b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107ba:	f008 bd85 	b.w	80192c8 <rcl_convert_rmw_ret_to_rcl_ret>
 80107be:	bf00      	nop

080107c0 <rcl_init_options_set_domain_id>:
 80107c0:	b120      	cbz	r0, 80107cc <rcl_init_options_set_domain_id+0xc>
 80107c2:	6803      	ldr	r3, [r0, #0]
 80107c4:	b113      	cbz	r3, 80107cc <rcl_init_options_set_domain_id+0xc>
 80107c6:	6259      	str	r1, [r3, #36]	@ 0x24
 80107c8:	2000      	movs	r0, #0
 80107ca:	4770      	bx	lr
 80107cc:	200b      	movs	r0, #11
 80107ce:	4770      	bx	lr

080107d0 <rcl_get_zero_initialized_node>:
 80107d0:	4a03      	ldr	r2, [pc, #12]	@ (80107e0 <rcl_get_zero_initialized_node+0x10>)
 80107d2:	4603      	mov	r3, r0
 80107d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80107dc:	4618      	mov	r0, r3
 80107de:	4770      	bx	lr
 80107e0:	0801fe54 	.word	0x0801fe54

080107e4 <rcl_node_init>:
 80107e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107e8:	b0a9      	sub	sp, #164	@ 0xa4
 80107ea:	4604      	mov	r4, r0
 80107ec:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80107f0:	a823      	add	r0, sp, #140	@ 0x8c
 80107f2:	460e      	mov	r6, r1
 80107f4:	4615      	mov	r5, r2
 80107f6:	461f      	mov	r7, r3
 80107f8:	f009 f82a 	bl	8019850 <rcl_guard_condition_get_default_options>
 80107fc:	f1b8 0f00 	cmp.w	r8, #0
 8010800:	f000 80e6 	beq.w	80109d0 <rcl_node_init+0x1ec>
 8010804:	4640      	mov	r0, r8
 8010806:	f001 fb45 	bl	8011e94 <rcutils_allocator_is_valid>
 801080a:	2800      	cmp	r0, #0
 801080c:	f000 80e0 	beq.w	80109d0 <rcl_node_init+0x1ec>
 8010810:	2e00      	cmp	r6, #0
 8010812:	f000 80dd 	beq.w	80109d0 <rcl_node_init+0x1ec>
 8010816:	2d00      	cmp	r5, #0
 8010818:	f000 80da 	beq.w	80109d0 <rcl_node_init+0x1ec>
 801081c:	2c00      	cmp	r4, #0
 801081e:	f000 80d7 	beq.w	80109d0 <rcl_node_init+0x1ec>
 8010822:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010826:	f1b9 0f00 	cmp.w	r9, #0
 801082a:	f040 80fd 	bne.w	8010a28 <rcl_node_init+0x244>
 801082e:	2f00      	cmp	r7, #0
 8010830:	f000 80ce 	beq.w	80109d0 <rcl_node_init+0x1ec>
 8010834:	4638      	mov	r0, r7
 8010836:	f008 fd65 	bl	8019304 <rcl_context_is_valid>
 801083a:	4682      	mov	sl, r0
 801083c:	2800      	cmp	r0, #0
 801083e:	f000 80cd 	beq.w	80109dc <rcl_node_init+0x1f8>
 8010842:	464a      	mov	r2, r9
 8010844:	a922      	add	r1, sp, #136	@ 0x88
 8010846:	4630      	mov	r0, r6
 8010848:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 801084c:	f001 ffee 	bl	801282c <rmw_validate_node_name>
 8010850:	4681      	mov	r9, r0
 8010852:	2800      	cmp	r0, #0
 8010854:	f040 80be 	bne.w	80109d4 <rcl_node_init+0x1f0>
 8010858:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801085a:	2800      	cmp	r0, #0
 801085c:	f040 80f0 	bne.w	8010a40 <rcl_node_init+0x25c>
 8010860:	4628      	mov	r0, r5
 8010862:	f7ef fce7 	bl	8000234 <strlen>
 8010866:	2800      	cmp	r0, #0
 8010868:	f040 80bb 	bne.w	80109e2 <rcl_node_init+0x1fe>
 801086c:	4d7c      	ldr	r5, [pc, #496]	@ (8010a60 <rcl_node_init+0x27c>)
 801086e:	a922      	add	r1, sp, #136	@ 0x88
 8010870:	2200      	movs	r2, #0
 8010872:	4628      	mov	r0, r5
 8010874:	f001 ffbc 	bl	80127f0 <rmw_validate_namespace>
 8010878:	4681      	mov	r9, r0
 801087a:	2800      	cmp	r0, #0
 801087c:	f040 80aa 	bne.w	80109d4 <rcl_node_init+0x1f0>
 8010880:	4682      	mov	sl, r0
 8010882:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8010884:	2800      	cmp	r0, #0
 8010886:	f040 80e0 	bne.w	8010a4a <rcl_node_init+0x266>
 801088a:	f8d8 3000 	ldr.w	r3, [r8]
 801088e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010892:	2078      	movs	r0, #120	@ 0x78
 8010894:	4798      	blx	r3
 8010896:	4681      	mov	r9, r0
 8010898:	6060      	str	r0, [r4, #4]
 801089a:	2800      	cmp	r0, #0
 801089c:	f000 80ca 	beq.w	8010a34 <rcl_node_init+0x250>
 80108a0:	2200      	movs	r2, #0
 80108a2:	2300      	movs	r3, #0
 80108a4:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80108a8:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80108ac:	a808      	add	r0, sp, #32
 80108ae:	f000 f907 	bl	8010ac0 <rcl_node_get_default_options>
 80108b2:	a908      	add	r1, sp, #32
 80108b4:	4648      	mov	r0, r9
 80108b6:	2268      	movs	r2, #104	@ 0x68
 80108b8:	f00d fd2b 	bl	801e312 <memcpy>
 80108bc:	6861      	ldr	r1, [r4, #4]
 80108be:	6027      	str	r7, [r4, #0]
 80108c0:	4640      	mov	r0, r8
 80108c2:	f000 f90b 	bl	8010adc <rcl_node_options_copy>
 80108c6:	2800      	cmp	r0, #0
 80108c8:	d158      	bne.n	801097c <rcl_node_init+0x198>
 80108ca:	4628      	mov	r0, r5
 80108cc:	f7ef fcb2 	bl	8000234 <strlen>
 80108d0:	4428      	add	r0, r5
 80108d2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80108d6:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80108da:	2b2f      	cmp	r3, #47	@ 0x2f
 80108dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80108e0:	9300      	str	r3, [sp, #0]
 80108e2:	bf0c      	ite	eq
 80108e4:	4b5f      	ldreq	r3, [pc, #380]	@ (8010a64 <rcl_node_init+0x280>)
 80108e6:	4b60      	ldrne	r3, [pc, #384]	@ (8010a68 <rcl_node_init+0x284>)
 80108e8:	9302      	str	r3, [sp, #8]
 80108ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80108ee:	9301      	str	r3, [sp, #4]
 80108f0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80108f4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80108f8:	f001 fbca 	bl	8012090 <rcutils_format_string_limit>
 80108fc:	6823      	ldr	r3, [r4, #0]
 80108fe:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8010902:	6818      	ldr	r0, [r3, #0]
 8010904:	4631      	mov	r1, r6
 8010906:	3028      	adds	r0, #40	@ 0x28
 8010908:	462a      	mov	r2, r5
 801090a:	6866      	ldr	r6, [r4, #4]
 801090c:	f002 fc18 	bl	8013140 <rmw_create_node>
 8010910:	6863      	ldr	r3, [r4, #4]
 8010912:	66b0      	str	r0, [r6, #104]	@ 0x68
 8010914:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010916:	2800      	cmp	r0, #0
 8010918:	d032      	beq.n	8010980 <rcl_node_init+0x19c>
 801091a:	f002 fca5 	bl	8013268 <rmw_node_get_graph_guard_condition>
 801091e:	4681      	mov	r9, r0
 8010920:	b360      	cbz	r0, 801097c <rcl_node_init+0x198>
 8010922:	f8d8 3000 	ldr.w	r3, [r8]
 8010926:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801092a:	6866      	ldr	r6, [r4, #4]
 801092c:	2008      	movs	r0, #8
 801092e:	4798      	blx	r3
 8010930:	6863      	ldr	r3, [r4, #4]
 8010932:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8010934:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8010938:	f1bb 0f00 	cmp.w	fp, #0
 801093c:	d020      	beq.n	8010980 <rcl_node_init+0x19c>
 801093e:	a806      	add	r0, sp, #24
 8010940:	f008 feaa 	bl	8019698 <rcl_get_zero_initialized_guard_condition>
 8010944:	a806      	add	r0, sp, #24
 8010946:	c803      	ldmia	r0, {r0, r1}
 8010948:	6863      	ldr	r3, [r4, #4]
 801094a:	46c4      	mov	ip, r8
 801094c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8010950:	e88b 0003 	stmia.w	fp, {r0, r1}
 8010954:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010958:	ae23      	add	r6, sp, #140	@ 0x8c
 801095a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801095c:	f8dc 3000 	ldr.w	r3, [ip]
 8010960:	6033      	str	r3, [r6, #0]
 8010962:	ab28      	add	r3, sp, #160	@ 0xa0
 8010964:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010968:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801096c:	4649      	mov	r1, r9
 801096e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010970:	463a      	mov	r2, r7
 8010972:	4670      	mov	r0, lr
 8010974:	f008 fee6 	bl	8019744 <rcl_guard_condition_init_from_rmw>
 8010978:	4681      	mov	r9, r0
 801097a:	b328      	cbz	r0, 80109c8 <rcl_node_init+0x1e4>
 801097c:	6863      	ldr	r3, [r4, #4]
 801097e:	b1f3      	cbz	r3, 80109be <rcl_node_init+0x1da>
 8010980:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010982:	b128      	cbz	r0, 8010990 <rcl_node_init+0x1ac>
 8010984:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010988:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801098c:	4798      	blx	r3
 801098e:	6863      	ldr	r3, [r4, #4]
 8010990:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010992:	b110      	cbz	r0, 801099a <rcl_node_init+0x1b6>
 8010994:	f002 fbec 	bl	8013170 <rmw_destroy_node>
 8010998:	6863      	ldr	r3, [r4, #4]
 801099a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801099c:	b148      	cbz	r0, 80109b2 <rcl_node_init+0x1ce>
 801099e:	f008 ff31 	bl	8019804 <rcl_guard_condition_fini>
 80109a2:	6863      	ldr	r3, [r4, #4]
 80109a4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80109a8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80109aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80109ae:	4798      	blx	r3
 80109b0:	6863      	ldr	r3, [r4, #4]
 80109b2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80109bc:	4798      	blx	r3
 80109be:	2300      	movs	r3, #0
 80109c0:	e9c4 3300 	strd	r3, r3, [r4]
 80109c4:	f04f 0901 	mov.w	r9, #1
 80109c8:	f1ba 0f00 	cmp.w	sl, #0
 80109cc:	d125      	bne.n	8010a1a <rcl_node_init+0x236>
 80109ce:	e001      	b.n	80109d4 <rcl_node_init+0x1f0>
 80109d0:	f04f 090b 	mov.w	r9, #11
 80109d4:	4648      	mov	r0, r9
 80109d6:	b029      	add	sp, #164	@ 0xa4
 80109d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109dc:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80109e0:	e7f8      	b.n	80109d4 <rcl_node_init+0x1f0>
 80109e2:	782b      	ldrb	r3, [r5, #0]
 80109e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80109e6:	f43f af42 	beq.w	801086e <rcl_node_init+0x8a>
 80109ea:	9503      	str	r5, [sp, #12]
 80109ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	4b1e      	ldr	r3, [pc, #120]	@ (8010a6c <rcl_node_init+0x288>)
 80109f4:	9302      	str	r3, [sp, #8]
 80109f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80109fa:	9301      	str	r3, [sp, #4]
 80109fc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010a00:	f001 fb46 	bl	8012090 <rcutils_format_string_limit>
 8010a04:	4605      	mov	r5, r0
 8010a06:	b340      	cbz	r0, 8010a5a <rcl_node_init+0x276>
 8010a08:	2200      	movs	r2, #0
 8010a0a:	a922      	add	r1, sp, #136	@ 0x88
 8010a0c:	9222      	str	r2, [sp, #136]	@ 0x88
 8010a0e:	f001 feef 	bl	80127f0 <rmw_validate_namespace>
 8010a12:	4681      	mov	r9, r0
 8010a14:	2800      	cmp	r0, #0
 8010a16:	f43f af34 	beq.w	8010882 <rcl_node_init+0x9e>
 8010a1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010a1e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010a22:	4628      	mov	r0, r5
 8010a24:	4798      	blx	r3
 8010a26:	e7d5      	b.n	80109d4 <rcl_node_init+0x1f0>
 8010a28:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8010a2c:	4648      	mov	r0, r9
 8010a2e:	b029      	add	sp, #164	@ 0xa4
 8010a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a34:	f04f 090a 	mov.w	r9, #10
 8010a38:	f1ba 0f00 	cmp.w	sl, #0
 8010a3c:	d1ed      	bne.n	8010a1a <rcl_node_init+0x236>
 8010a3e:	e7c9      	b.n	80109d4 <rcl_node_init+0x1f0>
 8010a40:	f001 ff46 	bl	80128d0 <rmw_node_name_validation_result_string>
 8010a44:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8010a48:	e7c4      	b.n	80109d4 <rcl_node_init+0x1f0>
 8010a4a:	f001 fee3 	bl	8012814 <rmw_namespace_validation_result_string>
 8010a4e:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8010a52:	f1ba 0f00 	cmp.w	sl, #0
 8010a56:	d1e0      	bne.n	8010a1a <rcl_node_init+0x236>
 8010a58:	e7bc      	b.n	80109d4 <rcl_node_init+0x1f0>
 8010a5a:	f04f 090a 	mov.w	r9, #10
 8010a5e:	e7b9      	b.n	80109d4 <rcl_node_init+0x1f0>
 8010a60:	0801fe3c 	.word	0x0801fe3c
 8010a64:	0801fe44 	.word	0x0801fe44
 8010a68:	0801fe4c 	.word	0x0801fe4c
 8010a6c:	0801fe40 	.word	0x0801fe40

08010a70 <rcl_node_is_valid>:
 8010a70:	b130      	cbz	r0, 8010a80 <rcl_node_is_valid+0x10>
 8010a72:	6843      	ldr	r3, [r0, #4]
 8010a74:	b123      	cbz	r3, 8010a80 <rcl_node_is_valid+0x10>
 8010a76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010a78:	b113      	cbz	r3, 8010a80 <rcl_node_is_valid+0x10>
 8010a7a:	6800      	ldr	r0, [r0, #0]
 8010a7c:	f008 bc42 	b.w	8019304 <rcl_context_is_valid>
 8010a80:	2000      	movs	r0, #0
 8010a82:	4770      	bx	lr

08010a84 <rcl_node_get_name>:
 8010a84:	b120      	cbz	r0, 8010a90 <rcl_node_get_name+0xc>
 8010a86:	6840      	ldr	r0, [r0, #4]
 8010a88:	b110      	cbz	r0, 8010a90 <rcl_node_get_name+0xc>
 8010a8a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010a8c:	b100      	cbz	r0, 8010a90 <rcl_node_get_name+0xc>
 8010a8e:	6880      	ldr	r0, [r0, #8]
 8010a90:	4770      	bx	lr
 8010a92:	bf00      	nop

08010a94 <rcl_node_get_namespace>:
 8010a94:	b120      	cbz	r0, 8010aa0 <rcl_node_get_namespace+0xc>
 8010a96:	6840      	ldr	r0, [r0, #4]
 8010a98:	b110      	cbz	r0, 8010aa0 <rcl_node_get_namespace+0xc>
 8010a9a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010a9c:	b100      	cbz	r0, 8010aa0 <rcl_node_get_namespace+0xc>
 8010a9e:	68c0      	ldr	r0, [r0, #12]
 8010aa0:	4770      	bx	lr
 8010aa2:	bf00      	nop

08010aa4 <rcl_node_get_options>:
 8010aa4:	b128      	cbz	r0, 8010ab2 <rcl_node_get_options+0xe>
 8010aa6:	6840      	ldr	r0, [r0, #4]
 8010aa8:	b118      	cbz	r0, 8010ab2 <rcl_node_get_options+0xe>
 8010aaa:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	bf08      	it	eq
 8010ab0:	2000      	moveq	r0, #0
 8010ab2:	4770      	bx	lr

08010ab4 <rcl_node_get_rmw_handle>:
 8010ab4:	b110      	cbz	r0, 8010abc <rcl_node_get_rmw_handle+0x8>
 8010ab6:	6840      	ldr	r0, [r0, #4]
 8010ab8:	b100      	cbz	r0, 8010abc <rcl_node_get_rmw_handle+0x8>
 8010aba:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop

08010ac0 <rcl_node_get_default_options>:
 8010ac0:	b510      	push	{r4, lr}
 8010ac2:	2268      	movs	r2, #104	@ 0x68
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	f00d fb5a 	bl	801e180 <memset>
 8010acc:	4620      	mov	r0, r4
 8010ace:	f001 f9d3 	bl	8011e78 <rcutils_get_default_allocator>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	7523      	strb	r3, [r4, #20]
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	bd10      	pop	{r4, pc}
 8010ada:	bf00      	nop

08010adc <rcl_node_options_copy>:
 8010adc:	b1d0      	cbz	r0, 8010b14 <rcl_node_options_copy+0x38>
 8010ade:	b570      	push	{r4, r5, r6, lr}
 8010ae0:	460c      	mov	r4, r1
 8010ae2:	b1a9      	cbz	r1, 8010b10 <rcl_node_options_copy+0x34>
 8010ae4:	4288      	cmp	r0, r1
 8010ae6:	4684      	mov	ip, r0
 8010ae8:	d012      	beq.n	8010b10 <rcl_node_options_copy+0x34>
 8010aea:	4605      	mov	r5, r0
 8010aec:	8a86      	ldrh	r6, [r0, #20]
 8010aee:	468e      	mov	lr, r1
 8010af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010af2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010af6:	682b      	ldr	r3, [r5, #0]
 8010af8:	f8ce 3000 	str.w	r3, [lr]
 8010afc:	f10c 0118 	add.w	r1, ip, #24
 8010b00:	2250      	movs	r2, #80	@ 0x50
 8010b02:	82a6      	strh	r6, [r4, #20]
 8010b04:	f104 0018 	add.w	r0, r4, #24
 8010b08:	f00d fc03 	bl	801e312 <memcpy>
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	bd70      	pop	{r4, r5, r6, pc}
 8010b10:	200b      	movs	r0, #11
 8010b12:	bd70      	pop	{r4, r5, r6, pc}
 8010b14:	200b      	movs	r0, #11
 8010b16:	4770      	bx	lr

08010b18 <rcl_node_resolve_name>:
 8010b18:	b082      	sub	sp, #8
 8010b1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1e:	b091      	sub	sp, #68	@ 0x44
 8010b20:	ac1a      	add	r4, sp, #104	@ 0x68
 8010b22:	e884 000c 	stmia.w	r4, {r2, r3}
 8010b26:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	d03b      	beq.n	8010ba6 <rcl_node_resolve_name+0x8e>
 8010b2e:	460c      	mov	r4, r1
 8010b30:	4605      	mov	r5, r0
 8010b32:	f7ff ffb7 	bl	8010aa4 <rcl_node_get_options>
 8010b36:	2800      	cmp	r0, #0
 8010b38:	d037      	beq.n	8010baa <rcl_node_resolve_name+0x92>
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	f7ff ffa2 	bl	8010a84 <rcl_node_get_name>
 8010b40:	4606      	mov	r6, r0
 8010b42:	4628      	mov	r0, r5
 8010b44:	f7ff ffa6 	bl	8010a94 <rcl_node_get_namespace>
 8010b48:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010b4c:	4681      	mov	r9, r0
 8010b4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010b52:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010b54:	46ac      	mov	ip, r5
 8010b56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b5a:	f8de 3000 	ldr.w	r3, [lr]
 8010b5e:	f8cc 3000 	str.w	r3, [ip]
 8010b62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010b64:	b1fb      	cbz	r3, 8010ba6 <rcl_node_resolve_name+0x8e>
 8010b66:	468a      	mov	sl, r1
 8010b68:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010b6c:	f001 fbe8 	bl	8012340 <rcutils_get_zero_initialized_string_map>
 8010b70:	ab10      	add	r3, sp, #64	@ 0x40
 8010b72:	9008      	str	r0, [sp, #32]
 8010b74:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010b78:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010b7c:	2100      	movs	r1, #0
 8010b7e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010b82:	a808      	add	r0, sp, #32
 8010b84:	f001 fc54 	bl	8012430 <rcutils_string_map_init>
 8010b88:	4607      	mov	r7, r0
 8010b8a:	b180      	cbz	r0, 8010bae <rcl_node_resolve_name+0x96>
 8010b8c:	f001 fa4c 	bl	8012028 <rcutils_get_error_string>
 8010b90:	f001 fa62 	bl	8012058 <rcutils_reset_error>
 8010b94:	2f0a      	cmp	r7, #10
 8010b96:	bf18      	it	ne
 8010b98:	2701      	movne	r7, #1
 8010b9a:	4638      	mov	r0, r7
 8010b9c:	b011      	add	sp, #68	@ 0x44
 8010b9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba2:	b002      	add	sp, #8
 8010ba4:	4770      	bx	lr
 8010ba6:	270b      	movs	r7, #11
 8010ba8:	e7f7      	b.n	8010b9a <rcl_node_resolve_name+0x82>
 8010baa:	2701      	movs	r7, #1
 8010bac:	e7f5      	b.n	8010b9a <rcl_node_resolve_name+0x82>
 8010bae:	9009      	str	r0, [sp, #36]	@ 0x24
 8010bb0:	9007      	str	r0, [sp, #28]
 8010bb2:	a808      	add	r0, sp, #32
 8010bb4:	f008 fd6a 	bl	801968c <rcl_get_default_topic_name_substitutions>
 8010bb8:	4607      	mov	r7, r0
 8010bba:	b1a8      	cbz	r0, 8010be8 <rcl_node_resolve_name+0xd0>
 8010bbc:	280a      	cmp	r0, #10
 8010bbe:	9c07      	ldr	r4, [sp, #28]
 8010bc0:	d000      	beq.n	8010bc4 <rcl_node_resolve_name+0xac>
 8010bc2:	2701      	movs	r7, #1
 8010bc4:	a808      	add	r0, sp, #32
 8010bc6:	f001 fc73 	bl	80124b0 <rcutils_string_map_fini>
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d13d      	bne.n	8010c4a <rcl_node_resolve_name+0x132>
 8010bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010bd0:	4659      	mov	r1, fp
 8010bd2:	47d0      	blx	sl
 8010bd4:	4659      	mov	r1, fp
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	47d0      	blx	sl
 8010bda:	f1b8 0f00 	cmp.w	r8, #0
 8010bde:	d0dc      	beq.n	8010b9a <rcl_node_resolve_name+0x82>
 8010be0:	2f67      	cmp	r7, #103	@ 0x67
 8010be2:	bf08      	it	eq
 8010be4:	2768      	moveq	r7, #104	@ 0x68
 8010be6:	e7d8      	b.n	8010b9a <rcl_node_resolve_name+0x82>
 8010be8:	ab09      	add	r3, sp, #36	@ 0x24
 8010bea:	9305      	str	r3, [sp, #20]
 8010bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010bee:	46ec      	mov	ip, sp
 8010bf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bf4:	682b      	ldr	r3, [r5, #0]
 8010bf6:	f8cc 3000 	str.w	r3, [ip]
 8010bfa:	464a      	mov	r2, r9
 8010bfc:	4631      	mov	r1, r6
 8010bfe:	4620      	mov	r0, r4
 8010c00:	ab08      	add	r3, sp, #32
 8010c02:	f008 fbe5 	bl	80193d0 <rcl_expand_topic_name>
 8010c06:	4607      	mov	r7, r0
 8010c08:	b9b8      	cbnz	r0, 8010c3a <rcl_node_resolve_name+0x122>
 8010c0a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010c0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8010c0e:	4602      	mov	r2, r0
 8010c10:	a90a      	add	r1, sp, #40	@ 0x28
 8010c12:	4620      	mov	r0, r4
 8010c14:	f001 fd28 	bl	8012668 <rmw_validate_full_topic_name>
 8010c18:	b988      	cbnz	r0, 8010c3e <rcl_node_resolve_name+0x126>
 8010c1a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010c1c:	b9d5      	cbnz	r5, 8010c54 <rcl_node_resolve_name+0x13c>
 8010c1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010c20:	a808      	add	r0, sp, #32
 8010c22:	601c      	str	r4, [r3, #0]
 8010c24:	f001 fc44 	bl	80124b0 <rcutils_string_map_fini>
 8010c28:	4607      	mov	r7, r0
 8010c2a:	b1a8      	cbz	r0, 8010c58 <rcl_node_resolve_name+0x140>
 8010c2c:	f001 f9fc 	bl	8012028 <rcutils_get_error_string>
 8010c30:	462c      	mov	r4, r5
 8010c32:	f001 fa11 	bl	8012058 <rcutils_reset_error>
 8010c36:	2701      	movs	r7, #1
 8010c38:	e7c9      	b.n	8010bce <rcl_node_resolve_name+0xb6>
 8010c3a:	9c07      	ldr	r4, [sp, #28]
 8010c3c:	e7c2      	b.n	8010bc4 <rcl_node_resolve_name+0xac>
 8010c3e:	f001 f9f3 	bl	8012028 <rcutils_get_error_string>
 8010c42:	2701      	movs	r7, #1
 8010c44:	f001 fa08 	bl	8012058 <rcutils_reset_error>
 8010c48:	e7bc      	b.n	8010bc4 <rcl_node_resolve_name+0xac>
 8010c4a:	f001 f9ed 	bl	8012028 <rcutils_get_error_string>
 8010c4e:	f001 fa03 	bl	8012058 <rcutils_reset_error>
 8010c52:	e7bc      	b.n	8010bce <rcl_node_resolve_name+0xb6>
 8010c54:	2767      	movs	r7, #103	@ 0x67
 8010c56:	e7b5      	b.n	8010bc4 <rcl_node_resolve_name+0xac>
 8010c58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c5a:	4659      	mov	r1, fp
 8010c5c:	47d0      	blx	sl
 8010c5e:	4659      	mov	r1, fp
 8010c60:	4638      	mov	r0, r7
 8010c62:	47d0      	blx	sl
 8010c64:	e799      	b.n	8010b9a <rcl_node_resolve_name+0x82>
 8010c66:	bf00      	nop

08010c68 <rcl_get_zero_initialized_publisher>:
 8010c68:	4b01      	ldr	r3, [pc, #4]	@ (8010c70 <rcl_get_zero_initialized_publisher+0x8>)
 8010c6a:	6818      	ldr	r0, [r3, #0]
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop
 8010c70:	0801fe5c 	.word	0x0801fe5c

08010c74 <rcl_publisher_init>:
 8010c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c78:	b088      	sub	sp, #32
 8010c7a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010c7c:	2d00      	cmp	r5, #0
 8010c7e:	d069      	beq.n	8010d54 <rcl_publisher_init+0xe0>
 8010c80:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8010c84:	4604      	mov	r4, r0
 8010c86:	4648      	mov	r0, r9
 8010c88:	460e      	mov	r6, r1
 8010c8a:	4690      	mov	r8, r2
 8010c8c:	461f      	mov	r7, r3
 8010c8e:	f001 f901 	bl	8011e94 <rcutils_allocator_is_valid>
 8010c92:	2800      	cmp	r0, #0
 8010c94:	d05e      	beq.n	8010d54 <rcl_publisher_init+0xe0>
 8010c96:	2c00      	cmp	r4, #0
 8010c98:	d05c      	beq.n	8010d54 <rcl_publisher_init+0xe0>
 8010c9a:	f8d4 a000 	ldr.w	sl, [r4]
 8010c9e:	f1ba 0f00 	cmp.w	sl, #0
 8010ca2:	d004      	beq.n	8010cae <rcl_publisher_init+0x3a>
 8010ca4:	2764      	movs	r7, #100	@ 0x64
 8010ca6:	4638      	mov	r0, r7
 8010ca8:	b008      	add	sp, #32
 8010caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cae:	4630      	mov	r0, r6
 8010cb0:	f7ff fede 	bl	8010a70 <rcl_node_is_valid>
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	d052      	beq.n	8010d5e <rcl_publisher_init+0xea>
 8010cb8:	f1b8 0f00 	cmp.w	r8, #0
 8010cbc:	d04a      	beq.n	8010d54 <rcl_publisher_init+0xe0>
 8010cbe:	2f00      	cmp	r7, #0
 8010cc0:	d048      	beq.n	8010d54 <rcl_publisher_init+0xe0>
 8010cc2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8010cc6:	aa07      	add	r2, sp, #28
 8010cc8:	9205      	str	r2, [sp, #20]
 8010cca:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8010cce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010cd2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010cd6:	f8cd a01c 	str.w	sl, [sp, #28]
 8010cda:	4639      	mov	r1, r7
 8010cdc:	e899 000c 	ldmia.w	r9, {r2, r3}
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f7ff ff19 	bl	8010b18 <rcl_node_resolve_name>
 8010ce6:	4607      	mov	r7, r0
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	d14f      	bne.n	8010d8c <rcl_publisher_init+0x118>
 8010cec:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8010cee:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8010cf0:	20c8      	movs	r0, #200	@ 0xc8
 8010cf2:	4798      	blx	r3
 8010cf4:	6020      	str	r0, [r4, #0]
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	d04e      	beq.n	8010d98 <rcl_publisher_init+0x124>
 8010cfa:	4630      	mov	r0, r6
 8010cfc:	f7ff feda 	bl	8010ab4 <rcl_node_get_rmw_handle>
 8010d00:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8010d04:	9300      	str	r3, [sp, #0]
 8010d06:	9a07      	ldr	r2, [sp, #28]
 8010d08:	6827      	ldr	r7, [r4, #0]
 8010d0a:	462b      	mov	r3, r5
 8010d0c:	4641      	mov	r1, r8
 8010d0e:	f002 fb15 	bl	801333c <rmw_create_publisher>
 8010d12:	6823      	ldr	r3, [r4, #0]
 8010d14:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8010d18:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8010d1c:	b370      	cbz	r0, 8010d7c <rcl_publisher_init+0x108>
 8010d1e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8010d22:	f002 fbe9 	bl	80134f8 <rmw_publisher_get_actual_qos>
 8010d26:	6823      	ldr	r3, [r4, #0]
 8010d28:	4607      	mov	r7, r0
 8010d2a:	b9d0      	cbnz	r0, 8010d62 <rcl_publisher_init+0xee>
 8010d2c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8010d30:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8010d34:	4629      	mov	r1, r5
 8010d36:	2270      	movs	r2, #112	@ 0x70
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f00d faea 	bl	801e312 <memcpy>
 8010d3e:	6832      	ldr	r2, [r6, #0]
 8010d40:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8010d44:	9807      	ldr	r0, [sp, #28]
 8010d46:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8010d48:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8010d4a:	4798      	blx	r3
 8010d4c:	4638      	mov	r0, r7
 8010d4e:	b008      	add	sp, #32
 8010d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d54:	270b      	movs	r7, #11
 8010d56:	4638      	mov	r0, r7
 8010d58:	b008      	add	sp, #32
 8010d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d5e:	27c8      	movs	r7, #200	@ 0xc8
 8010d60:	e7a1      	b.n	8010ca6 <rcl_publisher_init+0x32>
 8010d62:	b18b      	cbz	r3, 8010d88 <rcl_publisher_init+0x114>
 8010d64:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8010d68:	b142      	cbz	r2, 8010d7c <rcl_publisher_init+0x108>
 8010d6a:	4630      	mov	r0, r6
 8010d6c:	f7ff fea2 	bl	8010ab4 <rcl_node_get_rmw_handle>
 8010d70:	6823      	ldr	r3, [r4, #0]
 8010d72:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8010d76:	f002 fbcf 	bl	8013518 <rmw_destroy_publisher>
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8010d7e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8010d80:	4618      	mov	r0, r3
 8010d82:	4790      	blx	r2
 8010d84:	2300      	movs	r3, #0
 8010d86:	6023      	str	r3, [r4, #0]
 8010d88:	2701      	movs	r7, #1
 8010d8a:	e7db      	b.n	8010d44 <rcl_publisher_init+0xd0>
 8010d8c:	2867      	cmp	r0, #103	@ 0x67
 8010d8e:	d0d9      	beq.n	8010d44 <rcl_publisher_init+0xd0>
 8010d90:	2869      	cmp	r0, #105	@ 0x69
 8010d92:	d003      	beq.n	8010d9c <rcl_publisher_init+0x128>
 8010d94:	280a      	cmp	r0, #10
 8010d96:	d1f7      	bne.n	8010d88 <rcl_publisher_init+0x114>
 8010d98:	270a      	movs	r7, #10
 8010d9a:	e7d3      	b.n	8010d44 <rcl_publisher_init+0xd0>
 8010d9c:	2767      	movs	r7, #103	@ 0x67
 8010d9e:	e7d1      	b.n	8010d44 <rcl_publisher_init+0xd0>

08010da0 <rcl_publisher_get_default_options>:
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	4d14      	ldr	r5, [pc, #80]	@ (8010df4 <rcl_publisher_get_default_options+0x54>)
 8010da4:	4914      	ldr	r1, [pc, #80]	@ (8010df8 <rcl_publisher_get_default_options+0x58>)
 8010da6:	b088      	sub	sp, #32
 8010da8:	4604      	mov	r4, r0
 8010daa:	2250      	movs	r2, #80	@ 0x50
 8010dac:	4628      	mov	r0, r5
 8010dae:	f00d fab0 	bl	801e312 <memcpy>
 8010db2:	a802      	add	r0, sp, #8
 8010db4:	f001 f860 	bl	8011e78 <rcutils_get_default_allocator>
 8010db8:	f10d 0c08 	add.w	ip, sp, #8
 8010dbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010dc0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8010dc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010dc8:	466e      	mov	r6, sp
 8010dca:	f8dc 3000 	ldr.w	r3, [ip]
 8010dce:	f8ce 3000 	str.w	r3, [lr]
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	f001 fc40 	bl	8012658 <rmw_get_default_publisher_options>
 8010dd8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010ddc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8010de0:	e883 0003 	stmia.w	r3, {r0, r1}
 8010de4:	2270      	movs	r2, #112	@ 0x70
 8010de6:	4629      	mov	r1, r5
 8010de8:	4620      	mov	r0, r4
 8010dea:	f00d fa92 	bl	801e312 <memcpy>
 8010dee:	4620      	mov	r0, r4
 8010df0:	b008      	add	sp, #32
 8010df2:	bd70      	pop	{r4, r5, r6, pc}
 8010df4:	20007440 	.word	0x20007440
 8010df8:	0801fe60 	.word	0x0801fe60

08010dfc <rcl_publish>:
 8010dfc:	b1f8      	cbz	r0, 8010e3e <rcl_publish+0x42>
 8010dfe:	6803      	ldr	r3, [r0, #0]
 8010e00:	b570      	push	{r4, r5, r6, lr}
 8010e02:	4604      	mov	r4, r0
 8010e04:	b1b3      	cbz	r3, 8010e34 <rcl_publish+0x38>
 8010e06:	4616      	mov	r6, r2
 8010e08:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8010e0c:	b192      	cbz	r2, 8010e34 <rcl_publish+0x38>
 8010e0e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8010e12:	460d      	mov	r5, r1
 8010e14:	f008 fa76 	bl	8019304 <rcl_context_is_valid>
 8010e18:	b160      	cbz	r0, 8010e34 <rcl_publish+0x38>
 8010e1a:	6823      	ldr	r3, [r4, #0]
 8010e1c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8010e20:	b140      	cbz	r0, 8010e34 <rcl_publish+0x38>
 8010e22:	b155      	cbz	r5, 8010e3a <rcl_publish+0x3e>
 8010e24:	4632      	mov	r2, r6
 8010e26:	4629      	mov	r1, r5
 8010e28:	f002 fa28 	bl	801327c <rmw_publish>
 8010e2c:	3800      	subs	r0, #0
 8010e2e:	bf18      	it	ne
 8010e30:	2001      	movne	r0, #1
 8010e32:	bd70      	pop	{r4, r5, r6, pc}
 8010e34:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8010e38:	bd70      	pop	{r4, r5, r6, pc}
 8010e3a:	200b      	movs	r0, #11
 8010e3c:	bd70      	pop	{r4, r5, r6, pc}
 8010e3e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8010e42:	4770      	bx	lr

08010e44 <rcl_publisher_is_valid>:
 8010e44:	b1a0      	cbz	r0, 8010e70 <rcl_publisher_is_valid+0x2c>
 8010e46:	6803      	ldr	r3, [r0, #0]
 8010e48:	b510      	push	{r4, lr}
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	b173      	cbz	r3, 8010e6c <rcl_publisher_is_valid+0x28>
 8010e4e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8010e52:	b15a      	cbz	r2, 8010e6c <rcl_publisher_is_valid+0x28>
 8010e54:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8010e58:	f008 fa54 	bl	8019304 <rcl_context_is_valid>
 8010e5c:	b130      	cbz	r0, 8010e6c <rcl_publisher_is_valid+0x28>
 8010e5e:	6823      	ldr	r3, [r4, #0]
 8010e60:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8010e64:	3800      	subs	r0, #0
 8010e66:	bf18      	it	ne
 8010e68:	2001      	movne	r0, #1
 8010e6a:	bd10      	pop	{r4, pc}
 8010e6c:	2000      	movs	r0, #0
 8010e6e:	bd10      	pop	{r4, pc}
 8010e70:	2000      	movs	r0, #0
 8010e72:	4770      	bx	lr

08010e74 <rcl_publisher_is_valid_except_context>:
 8010e74:	b130      	cbz	r0, 8010e84 <rcl_publisher_is_valid_except_context+0x10>
 8010e76:	6800      	ldr	r0, [r0, #0]
 8010e78:	b120      	cbz	r0, 8010e84 <rcl_publisher_is_valid_except_context+0x10>
 8010e7a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8010e7e:	3800      	subs	r0, #0
 8010e80:	bf18      	it	ne
 8010e82:	2001      	movne	r0, #1
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop

08010e88 <rclc_client_init_default>:
 8010e88:	b368      	cbz	r0, 8010ee6 <rclc_client_init_default+0x5e>
 8010e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e8e:	460d      	mov	r5, r1
 8010e90:	b09e      	sub	sp, #120	@ 0x78
 8010e92:	b321      	cbz	r1, 8010ede <rclc_client_init_default+0x56>
 8010e94:	4616      	mov	r6, r2
 8010e96:	b312      	cbz	r2, 8010ede <rclc_client_init_default+0x56>
 8010e98:	461f      	mov	r7, r3
 8010e9a:	b303      	cbz	r3, 8010ede <rclc_client_init_default+0x56>
 8010e9c:	4604      	mov	r4, r0
 8010e9e:	f7ff fa4b 	bl	8010338 <rcl_get_zero_initialized_client>
 8010ea2:	f10d 0810 	add.w	r8, sp, #16
 8010ea6:	6020      	str	r0, [r4, #0]
 8010ea8:	4640      	mov	r0, r8
 8010eaa:	f7ff fad9 	bl	8010460 <rcl_client_get_default_options>
 8010eae:	490f      	ldr	r1, [pc, #60]	@ (8010eec <rclc_client_init_default+0x64>)
 8010eb0:	2250      	movs	r2, #80	@ 0x50
 8010eb2:	4640      	mov	r0, r8
 8010eb4:	f00d fa2d 	bl	801e312 <memcpy>
 8010eb8:	f8cd 8000 	str.w	r8, [sp]
 8010ebc:	463b      	mov	r3, r7
 8010ebe:	4632      	mov	r2, r6
 8010ec0:	4629      	mov	r1, r5
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f7ff fa3e 	bl	8010344 <rcl_client_init>
 8010ec8:	b910      	cbnz	r0, 8010ed0 <rclc_client_init_default+0x48>
 8010eca:	b01e      	add	sp, #120	@ 0x78
 8010ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ed0:	9003      	str	r0, [sp, #12]
 8010ed2:	f001 f8c1 	bl	8012058 <rcutils_reset_error>
 8010ed6:	9803      	ldr	r0, [sp, #12]
 8010ed8:	b01e      	add	sp, #120	@ 0x78
 8010eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ede:	200b      	movs	r0, #11
 8010ee0:	b01e      	add	sp, #120	@ 0x78
 8010ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee6:	200b      	movs	r0, #11
 8010ee8:	4770      	bx	lr
 8010eea:	bf00      	nop
 8010eec:	0801feb0 	.word	0x0801feb0

08010ef0 <_rclc_check_for_new_data>:
 8010ef0:	2800      	cmp	r0, #0
 8010ef2:	d046      	beq.n	8010f82 <_rclc_check_for_new_data+0x92>
 8010ef4:	b510      	push	{r4, lr}
 8010ef6:	7802      	ldrb	r2, [r0, #0]
 8010ef8:	b084      	sub	sp, #16
 8010efa:	4603      	mov	r3, r0
 8010efc:	2a0a      	cmp	r2, #10
 8010efe:	d842      	bhi.n	8010f86 <_rclc_check_for_new_data+0x96>
 8010f00:	e8df f002 	tbb	[pc, r2]
 8010f04:	14181212 	.word	0x14181212
 8010f08:	06060614 	.word	0x06060614
 8010f0c:	2e1a      	.short	0x2e1a
 8010f0e:	16          	.byte	0x16
 8010f0f:	00          	.byte	0x00
 8010f10:	6a0a      	ldr	r2, [r1, #32]
 8010f12:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010f14:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010f18:	2000      	movs	r0, #0
 8010f1a:	1a12      	subs	r2, r2, r0
 8010f1c:	bf18      	it	ne
 8010f1e:	2201      	movne	r2, #1
 8010f20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8010f24:	b004      	add	sp, #16
 8010f26:	bd10      	pop	{r4, pc}
 8010f28:	680a      	ldr	r2, [r1, #0]
 8010f2a:	e7f2      	b.n	8010f12 <_rclc_check_for_new_data+0x22>
 8010f2c:	698a      	ldr	r2, [r1, #24]
 8010f2e:	e7f0      	b.n	8010f12 <_rclc_check_for_new_data+0x22>
 8010f30:	688a      	ldr	r2, [r1, #8]
 8010f32:	e7ee      	b.n	8010f12 <_rclc_check_for_new_data+0x22>
 8010f34:	690a      	ldr	r2, [r1, #16]
 8010f36:	e7ec      	b.n	8010f12 <_rclc_check_for_new_data+0x22>
 8010f38:	685c      	ldr	r4, [r3, #4]
 8010f3a:	4608      	mov	r0, r1
 8010f3c:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8010f40:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8010f44:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8010f48:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010f4c:	9300      	str	r3, [sp, #0]
 8010f4e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8010f52:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8010f56:	f104 0110 	add.w	r1, r4, #16
 8010f5a:	f00a fca9 	bl	801b8b0 <rcl_action_client_wait_set_get_entities_ready>
 8010f5e:	e7e1      	b.n	8010f24 <_rclc_check_for_new_data+0x34>
 8010f60:	685c      	ldr	r4, [r3, #4]
 8010f62:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8010f66:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8010f6a:	e9cd 3200 	strd	r3, r2, [sp]
 8010f6e:	4608      	mov	r0, r1
 8010f70:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8010f74:	f104 0220 	add.w	r2, r4, #32
 8010f78:	f104 0110 	add.w	r1, r4, #16
 8010f7c:	f00a feb0 	bl	801bce0 <rcl_action_server_wait_set_get_entities_ready>
 8010f80:	e7d0      	b.n	8010f24 <_rclc_check_for_new_data+0x34>
 8010f82:	200b      	movs	r0, #11
 8010f84:	4770      	bx	lr
 8010f86:	2001      	movs	r0, #1
 8010f88:	e7cc      	b.n	8010f24 <_rclc_check_for_new_data+0x34>
 8010f8a:	bf00      	nop

08010f8c <_rclc_take_new_data>:
 8010f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f8e:	b09b      	sub	sp, #108	@ 0x6c
 8010f90:	2800      	cmp	r0, #0
 8010f92:	f000 8088 	beq.w	80110a6 <_rclc_take_new_data+0x11a>
 8010f96:	7803      	ldrb	r3, [r0, #0]
 8010f98:	4604      	mov	r4, r0
 8010f9a:	2b0a      	cmp	r3, #10
 8010f9c:	f200 8167 	bhi.w	801126e <_rclc_take_new_data+0x2e2>
 8010fa0:	e8df f003 	tbb	[pc, r3]
 8010fa4:	44152d2d 	.word	0x44152d2d
 8010fa8:	19191944 	.word	0x19191944
 8010fac:	065a      	.short	0x065a
 8010fae:	15          	.byte	0x15
 8010faf:	00          	.byte	0x00
 8010fb0:	6840      	ldr	r0, [r0, #4]
 8010fb2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	f040 80b2 	bne.w	8011120 <_rclc_take_new_data+0x194>
 8010fbc:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	f040 80e4 	bne.w	801118e <_rclc_take_new_data+0x202>
 8010fc6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d16f      	bne.n	80110ae <_rclc_take_new_data+0x122>
 8010fce:	2500      	movs	r5, #0
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	b01b      	add	sp, #108	@ 0x6c
 8010fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fd6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8010fd8:	6a0b      	ldr	r3, [r1, #32]
 8010fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d0f5      	beq.n	8010fce <_rclc_take_new_data+0x42>
 8010fe2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8010fe6:	f104 0110 	add.w	r1, r4, #16
 8010fea:	f008 ff3d 	bl	8019e68 <rcl_take_request>
 8010fee:	4605      	mov	r5, r0
 8010ff0:	2800      	cmp	r0, #0
 8010ff2:	d0ec      	beq.n	8010fce <_rclc_take_new_data+0x42>
 8010ff4:	f240 2359 	movw	r3, #601	@ 0x259
 8010ff8:	4298      	cmp	r0, r3
 8010ffa:	d013      	beq.n	8011024 <_rclc_take_new_data+0x98>
 8010ffc:	e029      	b.n	8011052 <_rclc_take_new_data+0xc6>
 8010ffe:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8011000:	680b      	ldr	r3, [r1, #0]
 8011002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d0e1      	beq.n	8010fce <_rclc_take_new_data+0x42>
 801100a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 801100e:	2300      	movs	r3, #0
 8011010:	aa0a      	add	r2, sp, #40	@ 0x28
 8011012:	f008 ff8b 	bl	8019f2c <rcl_take>
 8011016:	4605      	mov	r5, r0
 8011018:	2800      	cmp	r0, #0
 801101a:	d0d9      	beq.n	8010fd0 <_rclc_take_new_data+0x44>
 801101c:	f240 1391 	movw	r3, #401	@ 0x191
 8011020:	4298      	cmp	r0, r3
 8011022:	d116      	bne.n	8011052 <_rclc_take_new_data+0xc6>
 8011024:	2300      	movs	r3, #0
 8011026:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 801102a:	e7d1      	b.n	8010fd0 <_rclc_take_new_data+0x44>
 801102c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801102e:	698b      	ldr	r3, [r1, #24]
 8011030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d0ca      	beq.n	8010fce <_rclc_take_new_data+0x42>
 8011038:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 801103c:	f104 0110 	add.w	r1, r4, #16
 8011040:	f7ff fa6e 	bl	8010520 <rcl_take_response>
 8011044:	4605      	mov	r5, r0
 8011046:	2800      	cmp	r0, #0
 8011048:	d0c1      	beq.n	8010fce <_rclc_take_new_data+0x42>
 801104a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801104e:	4298      	cmp	r0, r3
 8011050:	d0be      	beq.n	8010fd0 <_rclc_take_new_data+0x44>
 8011052:	f001 f801 	bl	8012058 <rcutils_reset_error>
 8011056:	e7bb      	b.n	8010fd0 <_rclc_take_new_data+0x44>
 8011058:	6840      	ldr	r0, [r0, #4]
 801105a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801105e:	2b00      	cmp	r3, #0
 8011060:	d17d      	bne.n	801115e <_rclc_take_new_data+0x1d2>
 8011062:	69c3      	ldr	r3, [r0, #28]
 8011064:	b11b      	cbz	r3, 801106e <_rclc_take_new_data+0xe2>
 8011066:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801106a:	2b00      	cmp	r3, #0
 801106c:	d144      	bne.n	80110f8 <_rclc_take_new_data+0x16c>
 801106e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011072:	2b00      	cmp	r3, #0
 8011074:	f040 80ac 	bne.w	80111d0 <_rclc_take_new_data+0x244>
 8011078:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 801107c:	2b00      	cmp	r3, #0
 801107e:	d0a6      	beq.n	8010fce <_rclc_take_new_data+0x42>
 8011080:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8011082:	a90a      	add	r1, sp, #40	@ 0x28
 8011084:	3010      	adds	r0, #16
 8011086:	f00a faeb 	bl	801b660 <rcl_action_take_result_response>
 801108a:	4605      	mov	r5, r0
 801108c:	2800      	cmp	r0, #0
 801108e:	d1e0      	bne.n	8011052 <_rclc_take_new_data+0xc6>
 8011090:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011094:	6860      	ldr	r0, [r4, #4]
 8011096:	f00a ff47 	bl	801bf28 <rclc_action_find_handle_by_result_request_sequence_number>
 801109a:	2800      	cmp	r0, #0
 801109c:	d098      	beq.n	8010fd0 <_rclc_take_new_data+0x44>
 801109e:	2301      	movs	r3, #1
 80110a0:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80110a4:	e794      	b.n	8010fd0 <_rclc_take_new_data+0x44>
 80110a6:	250b      	movs	r5, #11
 80110a8:	4628      	mov	r0, r5
 80110aa:	b01b      	add	sp, #108	@ 0x6c
 80110ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110ae:	ae04      	add	r6, sp, #16
 80110b0:	aa0a      	add	r2, sp, #40	@ 0x28
 80110b2:	3010      	adds	r0, #16
 80110b4:	4631      	mov	r1, r6
 80110b6:	f00a fd47 	bl	801bb48 <rcl_action_take_cancel_request>
 80110ba:	4605      	mov	r5, r0
 80110bc:	2800      	cmp	r0, #0
 80110be:	d1c8      	bne.n	8011052 <_rclc_take_new_data+0xc6>
 80110c0:	6860      	ldr	r0, [r4, #4]
 80110c2:	a90a      	add	r1, sp, #40	@ 0x28
 80110c4:	f00a feee 	bl	801bea4 <rclc_action_find_goal_handle_by_uuid>
 80110c8:	4607      	mov	r7, r0
 80110ca:	2800      	cmp	r0, #0
 80110cc:	f000 80bb 	beq.w	8011246 <_rclc_take_new_data+0x2ba>
 80110d0:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80110d4:	2101      	movs	r1, #1
 80110d6:	f00a fe6f 	bl	801bdb8 <rcl_action_transition_goal_state>
 80110da:	2803      	cmp	r0, #3
 80110dc:	4684      	mov	ip, r0
 80110de:	f040 80a7 	bne.w	8011230 <_rclc_take_new_data+0x2a4>
 80110e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80110e4:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80110e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80110ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80110f2:	f887 c008 	strb.w	ip, [r7, #8]
 80110f6:	e76b      	b.n	8010fd0 <_rclc_take_new_data+0x44>
 80110f8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80110fa:	3010      	adds	r0, #16
 80110fc:	f00a fb30 	bl	801b760 <rcl_action_take_feedback>
 8011100:	4605      	mov	r5, r0
 8011102:	2800      	cmp	r0, #0
 8011104:	d1a5      	bne.n	8011052 <_rclc_take_new_data+0xc6>
 8011106:	6860      	ldr	r0, [r4, #4]
 8011108:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801110a:	f00a fecb 	bl	801bea4 <rclc_action_find_goal_handle_by_uuid>
 801110e:	4603      	mov	r3, r0
 8011110:	2800      	cmp	r0, #0
 8011112:	f000 80a3 	beq.w	801125c <_rclc_take_new_data+0x2d0>
 8011116:	2201      	movs	r2, #1
 8011118:	6860      	ldr	r0, [r4, #4]
 801111a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 801111e:	e7a6      	b.n	801106e <_rclc_take_new_data+0xe2>
 8011120:	f00a fe9a 	bl	801be58 <rclc_action_take_goal_handle>
 8011124:	4606      	mov	r6, r0
 8011126:	6860      	ldr	r0, [r4, #4]
 8011128:	2e00      	cmp	r6, #0
 801112a:	f43f af47 	beq.w	8010fbc <_rclc_take_new_data+0x30>
 801112e:	6070      	str	r0, [r6, #4]
 8011130:	69f2      	ldr	r2, [r6, #28]
 8011132:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8011136:	3010      	adds	r0, #16
 8011138:	f00a fc4e 	bl	801b9d8 <rcl_action_take_goal_request>
 801113c:	4605      	mov	r5, r0
 801113e:	2800      	cmp	r0, #0
 8011140:	f040 808e 	bne.w	8011260 <_rclc_take_new_data+0x2d4>
 8011144:	69f7      	ldr	r7, [r6, #28]
 8011146:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011148:	7235      	strb	r5, [r6, #8]
 801114a:	f8c6 0009 	str.w	r0, [r6, #9]
 801114e:	f8c6 100d 	str.w	r1, [r6, #13]
 8011152:	6860      	ldr	r0, [r4, #4]
 8011154:	f8c6 2011 	str.w	r2, [r6, #17]
 8011158:	f8c6 3015 	str.w	r3, [r6, #21]
 801115c:	e72e      	b.n	8010fbc <_rclc_take_new_data+0x30>
 801115e:	aa04      	add	r2, sp, #16
 8011160:	a90a      	add	r1, sp, #40	@ 0x28
 8011162:	3010      	adds	r0, #16
 8011164:	f00a fa04 	bl	801b570 <rcl_action_take_goal_response>
 8011168:	4605      	mov	r5, r0
 801116a:	2800      	cmp	r0, #0
 801116c:	f47f af71 	bne.w	8011052 <_rclc_take_new_data+0xc6>
 8011170:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011174:	6860      	ldr	r0, [r4, #4]
 8011176:	f00a fec5 	bl	801bf04 <rclc_action_find_handle_by_goal_request_sequence_number>
 801117a:	b130      	cbz	r0, 801118a <_rclc_take_new_data+0x1fe>
 801117c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8011180:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8011184:	2201      	movs	r2, #1
 8011186:	f880 2020 	strb.w	r2, [r0, #32]
 801118a:	6860      	ldr	r0, [r4, #4]
 801118c:	e769      	b.n	8011062 <_rclc_take_new_data+0xd6>
 801118e:	aa04      	add	r2, sp, #16
 8011190:	3010      	adds	r0, #16
 8011192:	a90a      	add	r1, sp, #40	@ 0x28
 8011194:	f00a fc98 	bl	801bac8 <rcl_action_take_result_request>
 8011198:	4605      	mov	r5, r0
 801119a:	2800      	cmp	r0, #0
 801119c:	f47f af59 	bne.w	8011052 <_rclc_take_new_data+0xc6>
 80111a0:	6860      	ldr	r0, [r4, #4]
 80111a2:	a904      	add	r1, sp, #16
 80111a4:	f00a fe7e 	bl	801bea4 <rclc_action_find_goal_handle_by_uuid>
 80111a8:	4607      	mov	r7, r0
 80111aa:	b160      	cbz	r0, 80111c6 <_rclc_take_new_data+0x23a>
 80111ac:	ad0a      	add	r5, sp, #40	@ 0x28
 80111ae:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80111b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80111b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80111b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80111ba:	f04f 0c02 	mov.w	ip, #2
 80111be:	e886 0003 	stmia.w	r6, {r0, r1}
 80111c2:	f887 c008 	strb.w	ip, [r7, #8]
 80111c6:	6860      	ldr	r0, [r4, #4]
 80111c8:	2300      	movs	r3, #0
 80111ca:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 80111ce:	e6fa      	b.n	8010fc6 <_rclc_take_new_data+0x3a>
 80111d0:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80111d4:	a90a      	add	r1, sp, #40	@ 0x28
 80111d6:	3010      	adds	r0, #16
 80111d8:	f00a fa82 	bl	801b6e0 <rcl_action_take_cancel_response>
 80111dc:	4605      	mov	r5, r0
 80111de:	2800      	cmp	r0, #0
 80111e0:	f47f af37 	bne.w	8011052 <_rclc_take_new_data+0xc6>
 80111e4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80111e8:	6860      	ldr	r0, [r4, #4]
 80111ea:	f00a feaf 	bl	801bf4c <rclc_action_find_handle_by_cancel_request_sequence_number>
 80111ee:	4606      	mov	r6, r0
 80111f0:	6860      	ldr	r0, [r4, #4]
 80111f2:	2e00      	cmp	r6, #0
 80111f4:	f43f af40 	beq.w	8011078 <_rclc_take_new_data+0xec>
 80111f8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80111fa:	2701      	movs	r7, #1
 80111fc:	84b7      	strh	r7, [r6, #36]	@ 0x24
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f43f af3a 	beq.w	8011078 <_rclc_take_new_data+0xec>
 8011204:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011206:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801120a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801120e:	f00a fe49 	bl	801bea4 <rclc_action_find_goal_handle_by_uuid>
 8011212:	b138      	cbz	r0, 8011224 <_rclc_take_new_data+0x298>
 8011214:	6860      	ldr	r0, [r4, #4]
 8011216:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8011218:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 801121c:	3501      	adds	r5, #1
 801121e:	42ab      	cmp	r3, r5
 8011220:	d8f0      	bhi.n	8011204 <_rclc_take_new_data+0x278>
 8011222:	e729      	b.n	8011078 <_rclc_take_new_data+0xec>
 8011224:	6860      	ldr	r0, [r4, #4]
 8011226:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8011228:	3501      	adds	r5, #1
 801122a:	42ab      	cmp	r3, r5
 801122c:	d8ea      	bhi.n	8011204 <_rclc_take_new_data+0x278>
 801122e:	e723      	b.n	8011078 <_rclc_take_new_data+0xec>
 8011230:	ab06      	add	r3, sp, #24
 8011232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011234:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011238:	2103      	movs	r1, #3
 801123a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801123e:	6860      	ldr	r0, [r4, #4]
 8011240:	f00a fefa 	bl	801c038 <rclc_action_server_goal_cancel_reject>
 8011244:	e6c4      	b.n	8010fd0 <_rclc_take_new_data+0x44>
 8011246:	ab06      	add	r3, sp, #24
 8011248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801124a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801124e:	2102      	movs	r1, #2
 8011250:	e896 000c 	ldmia.w	r6, {r2, r3}
 8011254:	6860      	ldr	r0, [r4, #4]
 8011256:	f00a feef 	bl	801c038 <rclc_action_server_goal_cancel_reject>
 801125a:	e6b9      	b.n	8010fd0 <_rclc_take_new_data+0x44>
 801125c:	6860      	ldr	r0, [r4, #4]
 801125e:	e706      	b.n	801106e <_rclc_take_new_data+0xe2>
 8011260:	6860      	ldr	r0, [r4, #4]
 8011262:	4631      	mov	r1, r6
 8011264:	f00a fe08 	bl	801be78 <rclc_action_remove_used_goal_handle>
 8011268:	f000 fef6 	bl	8012058 <rcutils_reset_error>
 801126c:	e6b0      	b.n	8010fd0 <_rclc_take_new_data+0x44>
 801126e:	2501      	movs	r5, #1
 8011270:	e6ae      	b.n	8010fd0 <_rclc_take_new_data+0x44>
 8011272:	bf00      	nop

08011274 <_rclc_execute.part.0>:
 8011274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011276:	7803      	ldrb	r3, [r0, #0]
 8011278:	b087      	sub	sp, #28
 801127a:	4604      	mov	r4, r0
 801127c:	2b0a      	cmp	r3, #10
 801127e:	f200 8136 	bhi.w	80114ee <_rclc_execute.part.0+0x27a>
 8011282:	e8df f003 	tbb	[pc, r3]
 8011286:	435e      	.short	0x435e
 8011288:	06a1664f 	.word	0x06a1664f
 801128c:	6c1e0606 	.word	0x6c1e0606
 8011290:	59          	.byte	0x59
 8011291:	00          	.byte	0x00
 8011292:	2b06      	cmp	r3, #6
 8011294:	f000 8122 	beq.w	80114dc <_rclc_execute.part.0+0x268>
 8011298:	2b07      	cmp	r3, #7
 801129a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801129c:	f040 8118 	bne.w	80114d0 <_rclc_execute.part.0+0x25c>
 80112a0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 80112a4:	6880      	ldr	r0, [r0, #8]
 80112a6:	4798      	blx	r3
 80112a8:	f104 0110 	add.w	r1, r4, #16
 80112ac:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80112ae:	6860      	ldr	r0, [r4, #4]
 80112b0:	f008 fe1a 	bl	8019ee8 <rcl_send_response>
 80112b4:	2800      	cmp	r0, #0
 80112b6:	d033      	beq.n	8011320 <_rclc_execute.part.0+0xac>
 80112b8:	9005      	str	r0, [sp, #20]
 80112ba:	f000 fecd 	bl	8012058 <rcutils_reset_error>
 80112be:	9805      	ldr	r0, [sp, #20]
 80112c0:	e02e      	b.n	8011320 <_rclc_execute.part.0+0xac>
 80112c2:	6840      	ldr	r0, [r0, #4]
 80112c4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f000 8086 	beq.w	80113da <_rclc_execute.part.0+0x166>
 80112ce:	2600      	movs	r6, #0
 80112d0:	2701      	movs	r7, #1
 80112d2:	e004      	b.n	80112de <_rclc_execute.part.0+0x6a>
 80112d4:	f00a fd9a 	bl	801be0c <rclc_action_send_result_request>
 80112d8:	b998      	cbnz	r0, 8011302 <_rclc_execute.part.0+0x8e>
 80112da:	722f      	strb	r7, [r5, #8]
 80112dc:	6860      	ldr	r0, [r4, #4]
 80112de:	f00a fe47 	bl	801bf70 <rclc_action_find_first_handle_with_goal_response>
 80112e2:	4605      	mov	r5, r0
 80112e4:	2800      	cmp	r0, #0
 80112e6:	d077      	beq.n	80113d8 <_rclc_execute.part.0+0x164>
 80112e8:	6863      	ldr	r3, [r4, #4]
 80112ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80112ec:	699b      	ldr	r3, [r3, #24]
 80112ee:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80112f2:	f885 6020 	strb.w	r6, [r5, #32]
 80112f6:	4798      	blx	r3
 80112f8:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80112fc:	4628      	mov	r0, r5
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d1e8      	bne.n	80112d4 <_rclc_execute.part.0+0x60>
 8011302:	6860      	ldr	r0, [r4, #4]
 8011304:	4629      	mov	r1, r5
 8011306:	f00a fdb7 	bl	801be78 <rclc_action_remove_used_goal_handle>
 801130a:	e7e7      	b.n	80112dc <_rclc_execute.part.0+0x68>
 801130c:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8011310:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8011314:	2d00      	cmp	r5, #0
 8011316:	f000 80c9 	beq.w	80114ac <_rclc_execute.part.0+0x238>
 801131a:	6880      	ldr	r0, [r0, #8]
 801131c:	4798      	blx	r3
 801131e:	2000      	movs	r0, #0
 8011320:	b007      	add	sp, #28
 8011322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011324:	6840      	ldr	r0, [r0, #4]
 8011326:	f009 f911 	bl	801a54c <rcl_timer_call>
 801132a:	f240 3321 	movw	r3, #801	@ 0x321
 801132e:	4298      	cmp	r0, r3
 8011330:	d004      	beq.n	801133c <_rclc_execute.part.0+0xc8>
 8011332:	2800      	cmp	r0, #0
 8011334:	d0f4      	beq.n	8011320 <_rclc_execute.part.0+0xac>
 8011336:	e7bf      	b.n	80112b8 <_rclc_execute.part.0+0x44>
 8011338:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801133a:	4798      	blx	r3
 801133c:	2000      	movs	r0, #0
 801133e:	b007      	add	sp, #28
 8011340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011342:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8011346:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011348:	b925      	cbnz	r5, 8011354 <_rclc_execute.part.0+0xe0>
 801134a:	4628      	mov	r0, r5
 801134c:	4798      	blx	r3
 801134e:	4628      	mov	r0, r5
 8011350:	e7e6      	b.n	8011320 <_rclc_execute.part.0+0xac>
 8011352:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011354:	68a0      	ldr	r0, [r4, #8]
 8011356:	4798      	blx	r3
 8011358:	2000      	movs	r0, #0
 801135a:	b007      	add	sp, #28
 801135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801135e:	6840      	ldr	r0, [r0, #4]
 8011360:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8011364:	bb3b      	cbnz	r3, 80113b6 <_rclc_execute.part.0+0x142>
 8011366:	f890 3020 	ldrb.w	r3, [r0, #32]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d07b      	beq.n	8011466 <_rclc_execute.part.0+0x1f2>
 801136e:	f640 0634 	movw	r6, #2100	@ 0x834
 8011372:	2701      	movs	r7, #1
 8011374:	e007      	b.n	8011386 <_rclc_execute.part.0+0x112>
 8011376:	4628      	mov	r0, r5
 8011378:	f00a fe12 	bl	801bfa0 <rclc_action_server_response_goal_request>
 801137c:	6860      	ldr	r0, [r4, #4]
 801137e:	4629      	mov	r1, r5
 8011380:	f00a fd7a 	bl	801be78 <rclc_action_remove_used_goal_handle>
 8011384:	6860      	ldr	r0, [r4, #4]
 8011386:	2100      	movs	r1, #0
 8011388:	f00a fda4 	bl	801bed4 <rclc_action_find_first_handle_by_status>
 801138c:	4605      	mov	r5, r0
 801138e:	2800      	cmp	r0, #0
 8011390:	d066      	beq.n	8011460 <_rclc_execute.part.0+0x1ec>
 8011392:	6863      	ldr	r3, [r4, #4]
 8011394:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011396:	699b      	ldr	r3, [r3, #24]
 8011398:	4798      	blx	r3
 801139a:	42b0      	cmp	r0, r6
 801139c:	f04f 0100 	mov.w	r1, #0
 80113a0:	d1e9      	bne.n	8011376 <_rclc_execute.part.0+0x102>
 80113a2:	2101      	movs	r1, #1
 80113a4:	4628      	mov	r0, r5
 80113a6:	f00a fdfb 	bl	801bfa0 <rclc_action_server_response_goal_request>
 80113aa:	722f      	strb	r7, [r5, #8]
 80113ac:	e7ea      	b.n	8011384 <_rclc_execute.part.0+0x110>
 80113ae:	6848      	ldr	r0, [r1, #4]
 80113b0:	f00a fd62 	bl	801be78 <rclc_action_remove_used_goal_handle>
 80113b4:	6860      	ldr	r0, [r4, #4]
 80113b6:	f00a fd99 	bl	801beec <rclc_action_find_first_terminated_handle>
 80113ba:	4601      	mov	r1, r0
 80113bc:	2800      	cmp	r0, #0
 80113be:	d1f6      	bne.n	80113ae <_rclc_execute.part.0+0x13a>
 80113c0:	6860      	ldr	r0, [r4, #4]
 80113c2:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80113c6:	e7ce      	b.n	8011366 <_rclc_execute.part.0+0xf2>
 80113c8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80113ca:	6880      	ldr	r0, [r0, #8]
 80113cc:	f104 0110 	add.w	r1, r4, #16
 80113d0:	4798      	blx	r3
 80113d2:	2000      	movs	r0, #0
 80113d4:	b007      	add	sp, #28
 80113d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113d8:	6860      	ldr	r0, [r4, #4]
 80113da:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80113de:	b18b      	cbz	r3, 8011404 <_rclc_execute.part.0+0x190>
 80113e0:	68c5      	ldr	r5, [r0, #12]
 80113e2:	b32d      	cbz	r5, 8011430 <_rclc_execute.part.0+0x1bc>
 80113e4:	2600      	movs	r6, #0
 80113e6:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80113ea:	b143      	cbz	r3, 80113fe <_rclc_execute.part.0+0x18a>
 80113ec:	69c3      	ldr	r3, [r0, #28]
 80113ee:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80113f2:	b123      	cbz	r3, 80113fe <_rclc_execute.part.0+0x18a>
 80113f4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80113f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80113f8:	4628      	mov	r0, r5
 80113fa:	4798      	blx	r3
 80113fc:	6860      	ldr	r0, [r4, #4]
 80113fe:	682d      	ldr	r5, [r5, #0]
 8011400:	2d00      	cmp	r5, #0
 8011402:	d1f0      	bne.n	80113e6 <_rclc_execute.part.0+0x172>
 8011404:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011408:	b193      	cbz	r3, 8011430 <_rclc_execute.part.0+0x1bc>
 801140a:	68c5      	ldr	r5, [r0, #12]
 801140c:	b185      	cbz	r5, 8011430 <_rclc_execute.part.0+0x1bc>
 801140e:	2600      	movs	r6, #0
 8011410:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8011414:	b14b      	cbz	r3, 801142a <_rclc_execute.part.0+0x1b6>
 8011416:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011418:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 801141c:	b12b      	cbz	r3, 801142a <_rclc_execute.part.0+0x1b6>
 801141e:	4628      	mov	r0, r5
 8011420:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8011424:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011426:	4798      	blx	r3
 8011428:	6860      	ldr	r0, [r4, #4]
 801142a:	682d      	ldr	r5, [r5, #0]
 801142c:	2d00      	cmp	r5, #0
 801142e:	d1ef      	bne.n	8011410 <_rclc_execute.part.0+0x19c>
 8011430:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8011434:	2b00      	cmp	r3, #0
 8011436:	d081      	beq.n	801133c <_rclc_execute.part.0+0xc8>
 8011438:	2700      	movs	r7, #0
 801143a:	e00b      	b.n	8011454 <_rclc_execute.part.0+0x1e0>
 801143c:	6863      	ldr	r3, [r4, #4]
 801143e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011440:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011442:	6a1e      	ldr	r6, [r3, #32]
 8011444:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8011448:	47b0      	blx	r6
 801144a:	6860      	ldr	r0, [r4, #4]
 801144c:	4629      	mov	r1, r5
 801144e:	f00a fd13 	bl	801be78 <rclc_action_remove_used_goal_handle>
 8011452:	6860      	ldr	r0, [r4, #4]
 8011454:	f00a fd98 	bl	801bf88 <rclc_action_find_first_handle_with_result_response>
 8011458:	4605      	mov	r5, r0
 801145a:	2800      	cmp	r0, #0
 801145c:	d1ee      	bne.n	801143c <_rclc_execute.part.0+0x1c8>
 801145e:	e76d      	b.n	801133c <_rclc_execute.part.0+0xc8>
 8011460:	6860      	ldr	r0, [r4, #4]
 8011462:	f880 5020 	strb.w	r5, [r0, #32]
 8011466:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801146a:	2b00      	cmp	r3, #0
 801146c:	f43f af66 	beq.w	801133c <_rclc_execute.part.0+0xc8>
 8011470:	68c5      	ldr	r5, [r0, #12]
 8011472:	b1b5      	cbz	r5, 80114a2 <_rclc_execute.part.0+0x22e>
 8011474:	2602      	movs	r6, #2
 8011476:	e001      	b.n	801147c <_rclc_execute.part.0+0x208>
 8011478:	682d      	ldr	r5, [r5, #0]
 801147a:	b195      	cbz	r5, 80114a2 <_rclc_execute.part.0+0x22e>
 801147c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8011480:	2b03      	cmp	r3, #3
 8011482:	d1f9      	bne.n	8011478 <_rclc_execute.part.0+0x204>
 8011484:	69c3      	ldr	r3, [r0, #28]
 8011486:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011488:	4628      	mov	r0, r5
 801148a:	4798      	blx	r3
 801148c:	4603      	mov	r3, r0
 801148e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8011492:	4628      	mov	r0, r5
 8011494:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8011498:	b163      	cbz	r3, 80114b4 <_rclc_execute.part.0+0x240>
 801149a:	f00a fda1 	bl	801bfe0 <rclc_action_server_goal_cancel_accept>
 801149e:	6860      	ldr	r0, [r4, #4]
 80114a0:	e7ea      	b.n	8011478 <_rclc_execute.part.0+0x204>
 80114a2:	2300      	movs	r3, #0
 80114a4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80114a8:	4618      	mov	r0, r3
 80114aa:	e739      	b.n	8011320 <_rclc_execute.part.0+0xac>
 80114ac:	4628      	mov	r0, r5
 80114ae:	4798      	blx	r3
 80114b0:	4628      	mov	r0, r5
 80114b2:	e735      	b.n	8011320 <_rclc_execute.part.0+0xac>
 80114b4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80114b6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80114ba:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 80114be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114c2:	6860      	ldr	r0, [r4, #4]
 80114c4:	2101      	movs	r1, #1
 80114c6:	f00a fdb7 	bl	801c038 <rclc_action_server_goal_cancel_reject>
 80114ca:	722e      	strb	r6, [r5, #8]
 80114cc:	6860      	ldr	r0, [r4, #4]
 80114ce:	e7d3      	b.n	8011478 <_rclc_execute.part.0+0x204>
 80114d0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80114d2:	6880      	ldr	r0, [r0, #8]
 80114d4:	4798      	blx	r3
 80114d6:	f104 0110 	add.w	r1, r4, #16
 80114da:	e6e7      	b.n	80112ac <_rclc_execute.part.0+0x38>
 80114dc:	f100 0110 	add.w	r1, r0, #16
 80114e0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80114e2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80114e4:	6880      	ldr	r0, [r0, #8]
 80114e6:	9105      	str	r1, [sp, #20]
 80114e8:	4798      	blx	r3
 80114ea:	9905      	ldr	r1, [sp, #20]
 80114ec:	e6de      	b.n	80112ac <_rclc_execute.part.0+0x38>
 80114ee:	2001      	movs	r0, #1
 80114f0:	e716      	b.n	8011320 <_rclc_execute.part.0+0xac>
 80114f2:	bf00      	nop

080114f4 <rclc_executor_trigger_any>:
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d03f      	beq.n	8011578 <rclc_executor_trigger_any+0x84>
 80114f8:	2900      	cmp	r1, #0
 80114fa:	d03e      	beq.n	801157a <rclc_executor_trigger_any+0x86>
 80114fc:	4603      	mov	r3, r0
 80114fe:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8011502:	2200      	movs	r2, #0
 8011504:	2800      	cmp	r0, #0
 8011506:	d037      	beq.n	8011578 <rclc_executor_trigger_any+0x84>
 8011508:	b430      	push	{r4, r5}
 801150a:	f893 c000 	ldrb.w	ip, [r3]
 801150e:	f1bc 0f08 	cmp.w	ip, #8
 8011512:	d11e      	bne.n	8011552 <rclc_executor_trigger_any+0x5e>
 8011514:	685c      	ldr	r4, [r3, #4]
 8011516:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8011518:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 801151c:	d105      	bne.n	801152a <rclc_executor_trigger_any+0x36>
 801151e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8011522:	b910      	cbnz	r0, 801152a <rclc_executor_trigger_any+0x36>
 8011524:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8011528:	b128      	cbz	r0, 8011536 <rclc_executor_trigger_any+0x42>
 801152a:	bc30      	pop	{r4, r5}
 801152c:	4770      	bx	lr
 801152e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8011532:	2800      	cmp	r0, #0
 8011534:	d1f9      	bne.n	801152a <rclc_executor_trigger_any+0x36>
 8011536:	3201      	adds	r2, #1
 8011538:	4291      	cmp	r1, r2
 801153a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 801153e:	d018      	beq.n	8011572 <rclc_executor_trigger_any+0x7e>
 8011540:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8011544:	2800      	cmp	r0, #0
 8011546:	d0f0      	beq.n	801152a <rclc_executor_trigger_any+0x36>
 8011548:	f893 c000 	ldrb.w	ip, [r3]
 801154c:	f1bc 0f08 	cmp.w	ip, #8
 8011550:	d0e0      	beq.n	8011514 <rclc_executor_trigger_any+0x20>
 8011552:	f1bc 0f09 	cmp.w	ip, #9
 8011556:	d1ea      	bne.n	801152e <rclc_executor_trigger_any+0x3a>
 8011558:	685c      	ldr	r4, [r3, #4]
 801155a:	6a25      	ldr	r5, [r4, #32]
 801155c:	2d00      	cmp	r5, #0
 801155e:	d1e4      	bne.n	801152a <rclc_executor_trigger_any+0x36>
 8011560:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8011564:	2800      	cmp	r0, #0
 8011566:	d1e0      	bne.n	801152a <rclc_executor_trigger_any+0x36>
 8011568:	3201      	adds	r2, #1
 801156a:	4291      	cmp	r1, r2
 801156c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8011570:	d1e6      	bne.n	8011540 <rclc_executor_trigger_any+0x4c>
 8011572:	2000      	movs	r0, #0
 8011574:	bc30      	pop	{r4, r5}
 8011576:	4770      	bx	lr
 8011578:	4770      	bx	lr
 801157a:	4608      	mov	r0, r1
 801157c:	4770      	bx	lr
 801157e:	bf00      	nop

08011580 <rclc_executor_get_zero_initialized_executor>:
 8011580:	b510      	push	{r4, lr}
 8011582:	4903      	ldr	r1, [pc, #12]	@ (8011590 <rclc_executor_get_zero_initialized_executor+0x10>)
 8011584:	4604      	mov	r4, r0
 8011586:	2288      	movs	r2, #136	@ 0x88
 8011588:	f00c fec3 	bl	801e312 <memcpy>
 801158c:	4620      	mov	r0, r4
 801158e:	bd10      	pop	{r4, pc}
 8011590:	0801ff00 	.word	0x0801ff00
 8011594:	00000000 	.word	0x00000000

08011598 <rclc_executor_init>:
 8011598:	2800      	cmp	r0, #0
 801159a:	d05f      	beq.n	801165c <rclc_executor_init+0xc4>
 801159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a0:	460c      	mov	r4, r1
 80115a2:	b0b0      	sub	sp, #192	@ 0xc0
 80115a4:	2900      	cmp	r1, #0
 80115a6:	d051      	beq.n	801164c <rclc_executor_init+0xb4>
 80115a8:	4605      	mov	r5, r0
 80115aa:	4618      	mov	r0, r3
 80115ac:	4616      	mov	r6, r2
 80115ae:	461f      	mov	r7, r3
 80115b0:	f000 fc70 	bl	8011e94 <rcutils_allocator_is_valid>
 80115b4:	2800      	cmp	r0, #0
 80115b6:	d049      	beq.n	801164c <rclc_executor_init+0xb4>
 80115b8:	2e00      	cmp	r6, #0
 80115ba:	d047      	beq.n	801164c <rclc_executor_init+0xb4>
 80115bc:	492c      	ldr	r1, [pc, #176]	@ (8011670 <rclc_executor_init+0xd8>)
 80115be:	2288      	movs	r2, #136	@ 0x88
 80115c0:	a80e      	add	r0, sp, #56	@ 0x38
 80115c2:	f00c fea6 	bl	801e312 <memcpy>
 80115c6:	a90e      	add	r1, sp, #56	@ 0x38
 80115c8:	2288      	movs	r2, #136	@ 0x88
 80115ca:	4628      	mov	r0, r5
 80115cc:	f00c fea1 	bl	801e312 <memcpy>
 80115d0:	602c      	str	r4, [r5, #0]
 80115d2:	4668      	mov	r0, sp
 80115d4:	60ae      	str	r6, [r5, #8]
 80115d6:	466c      	mov	r4, sp
 80115d8:	f009 f9fc 	bl	801a9d4 <rcl_get_zero_initialized_wait_set>
 80115dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115de:	f105 0c14 	add.w	ip, r5, #20
 80115e2:	f8d7 8000 	ldr.w	r8, [r7]
 80115e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115f6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8011668 <rclc_executor_init+0xd0>
 80115fa:	6823      	ldr	r3, [r4, #0]
 80115fc:	f8cc 3000 	str.w	r3, [ip]
 8011600:	6939      	ldr	r1, [r7, #16]
 8011602:	612f      	str	r7, [r5, #16]
 8011604:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8011608:	01b0      	lsls	r0, r6, #6
 801160a:	47c0      	blx	r8
 801160c:	6068      	str	r0, [r5, #4]
 801160e:	b338      	cbz	r0, 8011660 <rclc_executor_init+0xc8>
 8011610:	2400      	movs	r4, #0
 8011612:	e000      	b.n	8011616 <rclc_executor_init+0x7e>
 8011614:	6868      	ldr	r0, [r5, #4]
 8011616:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 801161a:	4631      	mov	r1, r6
 801161c:	3401      	adds	r4, #1
 801161e:	f000 faa3 	bl	8011b68 <rclc_executor_handle_init>
 8011622:	42a6      	cmp	r6, r4
 8011624:	d1f6      	bne.n	8011614 <rclc_executor_init+0x7c>
 8011626:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 801162a:	f000 fa93 	bl	8011b54 <rclc_executor_handle_counters_zero_init>
 801162e:	4a11      	ldr	r2, [pc, #68]	@ (8011674 <rclc_executor_init+0xdc>)
 8011630:	686b      	ldr	r3, [r5, #4]
 8011632:	2000      	movs	r0, #0
 8011634:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8011638:	b163      	cbz	r3, 8011654 <rclc_executor_init+0xbc>
 801163a:	692b      	ldr	r3, [r5, #16]
 801163c:	b153      	cbz	r3, 8011654 <rclc_executor_init+0xbc>
 801163e:	68ab      	ldr	r3, [r5, #8]
 8011640:	b143      	cbz	r3, 8011654 <rclc_executor_init+0xbc>
 8011642:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8011646:	b030      	add	sp, #192	@ 0xc0
 8011648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801164c:	200b      	movs	r0, #11
 801164e:	b030      	add	sp, #192	@ 0xc0
 8011650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011654:	4618      	mov	r0, r3
 8011656:	b030      	add	sp, #192	@ 0xc0
 8011658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801165c:	200b      	movs	r0, #11
 801165e:	4770      	bx	lr
 8011660:	200a      	movs	r0, #10
 8011662:	e7f4      	b.n	801164e <rclc_executor_init+0xb6>
 8011664:	f3af 8000 	nop.w
 8011668:	3b9aca00 	.word	0x3b9aca00
 801166c:	00000000 	.word	0x00000000
 8011670:	0801ff00 	.word	0x0801ff00
 8011674:	080114f5 	.word	0x080114f5

08011678 <rclc_executor_add_timer>:
 8011678:	b300      	cbz	r0, 80116bc <rclc_executor_add_timer+0x44>
 801167a:	b1f9      	cbz	r1, 80116bc <rclc_executor_add_timer+0x44>
 801167c:	b538      	push	{r3, r4, r5, lr}
 801167e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8011682:	4293      	cmp	r3, r2
 8011684:	4604      	mov	r4, r0
 8011686:	d301      	bcc.n	801168c <rclc_executor_add_timer+0x14>
 8011688:	2001      	movs	r0, #1
 801168a:	bd38      	pop	{r3, r4, r5, pc}
 801168c:	6840      	ldr	r0, [r0, #4]
 801168e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 8011692:	019d      	lsls	r5, r3, #6
 8011694:	6051      	str	r1, [r2, #4]
 8011696:	2102      	movs	r1, #2
 8011698:	5341      	strh	r1, [r0, r5]
 801169a:	3301      	adds	r3, #1
 801169c:	2000      	movs	r0, #0
 801169e:	2101      	movs	r1, #1
 80116a0:	f104 0514 	add.w	r5, r4, #20
 80116a4:	62d0      	str	r0, [r2, #44]	@ 0x2c
 80116a6:	8711      	strh	r1, [r2, #56]	@ 0x38
 80116a8:	4628      	mov	r0, r5
 80116aa:	60e3      	str	r3, [r4, #12]
 80116ac:	f009 f9a6 	bl	801a9fc <rcl_wait_set_is_valid>
 80116b0:	b930      	cbnz	r0, 80116c0 <rclc_executor_add_timer+0x48>
 80116b2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80116b4:	3301      	adds	r3, #1
 80116b6:	2000      	movs	r0, #0
 80116b8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80116ba:	bd38      	pop	{r3, r4, r5, pc}
 80116bc:	200b      	movs	r0, #11
 80116be:	4770      	bx	lr
 80116c0:	4628      	mov	r0, r5
 80116c2:	f009 f9a1 	bl	801aa08 <rcl_wait_set_fini>
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d0f3      	beq.n	80116b2 <rclc_executor_add_timer+0x3a>
 80116ca:	bd38      	pop	{r3, r4, r5, pc}

080116cc <rclc_executor_add_service>:
 80116cc:	b370      	cbz	r0, 801172c <rclc_executor_add_service+0x60>
 80116ce:	b369      	cbz	r1, 801172c <rclc_executor_add_service+0x60>
 80116d0:	b362      	cbz	r2, 801172c <rclc_executor_add_service+0x60>
 80116d2:	b35b      	cbz	r3, 801172c <rclc_executor_add_service+0x60>
 80116d4:	b538      	push	{r3, r4, r5, lr}
 80116d6:	4604      	mov	r4, r0
 80116d8:	9804      	ldr	r0, [sp, #16]
 80116da:	b378      	cbz	r0, 801173c <rclc_executor_add_service+0x70>
 80116dc:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 80116e0:	42a8      	cmp	r0, r5
 80116e2:	d301      	bcc.n	80116e8 <rclc_executor_add_service+0x1c>
 80116e4:	2001      	movs	r0, #1
 80116e6:	bd38      	pop	{r3, r4, r5, pc}
 80116e8:	6865      	ldr	r5, [r4, #4]
 80116ea:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 80116ee:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 80116f2:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 80116f6:	9b04      	ldr	r3, [sp, #16]
 80116f8:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 80116fc:	2305      	movs	r3, #5
 80116fe:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8011702:	3001      	adds	r0, #1
 8011704:	f825 300e 	strh.w	r3, [r5, lr]
 8011708:	2201      	movs	r2, #1
 801170a:	2300      	movs	r3, #0
 801170c:	f104 0514 	add.w	r5, r4, #20
 8011710:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 8011714:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 8011718:	60e0      	str	r0, [r4, #12]
 801171a:	4628      	mov	r0, r5
 801171c:	f009 f96e 	bl	801a9fc <rcl_wait_set_is_valid>
 8011720:	b930      	cbnz	r0, 8011730 <rclc_executor_add_service+0x64>
 8011722:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8011724:	3301      	adds	r3, #1
 8011726:	2000      	movs	r0, #0
 8011728:	6563      	str	r3, [r4, #84]	@ 0x54
 801172a:	bd38      	pop	{r3, r4, r5, pc}
 801172c:	200b      	movs	r0, #11
 801172e:	4770      	bx	lr
 8011730:	4628      	mov	r0, r5
 8011732:	f009 f969 	bl	801aa08 <rcl_wait_set_fini>
 8011736:	2800      	cmp	r0, #0
 8011738:	d0f3      	beq.n	8011722 <rclc_executor_add_service+0x56>
 801173a:	e7d4      	b.n	80116e6 <rclc_executor_add_service+0x1a>
 801173c:	200b      	movs	r0, #11
 801173e:	bd38      	pop	{r3, r4, r5, pc}

08011740 <rclc_executor_prepare>:
 8011740:	2800      	cmp	r0, #0
 8011742:	d044      	beq.n	80117ce <rclc_executor_prepare+0x8e>
 8011744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011746:	f100 0514 	add.w	r5, r0, #20
 801174a:	b09b      	sub	sp, #108	@ 0x6c
 801174c:	4604      	mov	r4, r0
 801174e:	4628      	mov	r0, r5
 8011750:	f009 f954 	bl	801a9fc <rcl_wait_set_is_valid>
 8011754:	b110      	cbz	r0, 801175c <rclc_executor_prepare+0x1c>
 8011756:	2000      	movs	r0, #0
 8011758:	b01b      	add	sp, #108	@ 0x6c
 801175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801175c:	4628      	mov	r0, r5
 801175e:	f009 f953 	bl	801aa08 <rcl_wait_set_fini>
 8011762:	2800      	cmp	r0, #0
 8011764:	d130      	bne.n	80117c8 <rclc_executor_prepare+0x88>
 8011766:	a80c      	add	r0, sp, #48	@ 0x30
 8011768:	f009 f934 	bl	801a9d4 <rcl_get_zero_initialized_wait_set>
 801176c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8011770:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011774:	46ae      	mov	lr, r5
 8011776:	6927      	ldr	r7, [r4, #16]
 8011778:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801177c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011780:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011784:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011788:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801178c:	f8dc 3000 	ldr.w	r3, [ip]
 8011790:	f8ce 3000 	str.w	r3, [lr]
 8011794:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011796:	ae04      	add	r6, sp, #16
 8011798:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	6822      	ldr	r2, [r4, #0]
 801179e:	6033      	str	r3, [r6, #0]
 80117a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80117a2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80117a4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80117a8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 80117ac:	e9cd 2100 	strd	r2, r1, [sp]
 80117b0:	4628      	mov	r0, r5
 80117b2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80117b4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80117b6:	f009 fc25 	bl	801b004 <rcl_wait_set_init>
 80117ba:	2800      	cmp	r0, #0
 80117bc:	d0cc      	beq.n	8011758 <rclc_executor_prepare+0x18>
 80117be:	900b      	str	r0, [sp, #44]	@ 0x2c
 80117c0:	f000 fc4a 	bl	8012058 <rcutils_reset_error>
 80117c4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80117c6:	e7c7      	b.n	8011758 <rclc_executor_prepare+0x18>
 80117c8:	f000 fc46 	bl	8012058 <rcutils_reset_error>
 80117cc:	e7cb      	b.n	8011766 <rclc_executor_prepare+0x26>
 80117ce:	200b      	movs	r0, #11
 80117d0:	4770      	bx	lr
 80117d2:	bf00      	nop

080117d4 <rclc_executor_spin_some.part.0>:
 80117d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d8:	f100 0614 	add.w	r6, r0, #20
 80117dc:	b083      	sub	sp, #12
 80117de:	4691      	mov	r9, r2
 80117e0:	4698      	mov	r8, r3
 80117e2:	4605      	mov	r5, r0
 80117e4:	f7ff ffac 	bl	8011740 <rclc_executor_prepare>
 80117e8:	4630      	mov	r0, r6
 80117ea:	f009 f9d9 	bl	801aba0 <rcl_wait_set_clear>
 80117ee:	4607      	mov	r7, r0
 80117f0:	2800      	cmp	r0, #0
 80117f2:	f040 80ed 	bne.w	80119d0 <rclc_executor_spin_some.part.0+0x1fc>
 80117f6:	68ab      	ldr	r3, [r5, #8]
 80117f8:	4604      	mov	r4, r0
 80117fa:	b303      	cbz	r3, 801183e <rclc_executor_spin_some.part.0+0x6a>
 80117fc:	6869      	ldr	r1, [r5, #4]
 80117fe:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8011802:	01a2      	lsls	r2, r4, #6
 8011804:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8011808:	b1cb      	cbz	r3, 801183e <rclc_executor_spin_some.part.0+0x6a>
 801180a:	5c8b      	ldrb	r3, [r1, r2]
 801180c:	2b0a      	cmp	r3, #10
 801180e:	f200 80d8 	bhi.w	80119c2 <rclc_executor_spin_some.part.0+0x1ee>
 8011812:	e8df f003 	tbb	[pc, r3]
 8011816:	9c9c      	.short	0x9c9c
 8011818:	068c8ca7 	.word	0x068c8ca7
 801181c:	bdc90606 	.word	0xbdc90606
 8011820:	b2          	.byte	0xb2
 8011821:	00          	.byte	0x00
 8011822:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011826:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801182a:	4630      	mov	r0, r6
 801182c:	f009 fd00 	bl	801b230 <rcl_wait_set_add_service>
 8011830:	2800      	cmp	r0, #0
 8011832:	f040 8086 	bne.w	8011942 <rclc_executor_spin_some.part.0+0x16e>
 8011836:	68ab      	ldr	r3, [r5, #8]
 8011838:	3401      	adds	r4, #1
 801183a:	429c      	cmp	r4, r3
 801183c:	d3de      	bcc.n	80117fc <rclc_executor_spin_some.part.0+0x28>
 801183e:	4643      	mov	r3, r8
 8011840:	464a      	mov	r2, r9
 8011842:	4630      	mov	r0, r6
 8011844:	f009 fd20 	bl	801b288 <rcl_wait>
 8011848:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 801184c:	2b00      	cmp	r3, #0
 801184e:	f000 80c7 	beq.w	80119e0 <rclc_executor_spin_some.part.0+0x20c>
 8011852:	2b01      	cmp	r3, #1
 8011854:	f040 80b5 	bne.w	80119c2 <rclc_executor_spin_some.part.0+0x1ee>
 8011858:	68ab      	ldr	r3, [r5, #8]
 801185a:	2b00      	cmp	r3, #0
 801185c:	f000 8159 	beq.w	8011b12 <rclc_executor_spin_some.part.0+0x33e>
 8011860:	2400      	movs	r4, #0
 8011862:	46a0      	mov	r8, r4
 8011864:	f240 1991 	movw	r9, #401	@ 0x191
 8011868:	e00a      	b.n	8011880 <rclc_executor_spin_some.part.0+0xac>
 801186a:	f7ff fb41 	bl	8010ef0 <_rclc_check_for_new_data>
 801186e:	4604      	mov	r4, r0
 8011870:	b110      	cbz	r0, 8011878 <rclc_executor_spin_some.part.0+0xa4>
 8011872:	4548      	cmp	r0, r9
 8011874:	f040 80b2 	bne.w	80119dc <rclc_executor_spin_some.part.0+0x208>
 8011878:	68ab      	ldr	r3, [r5, #8]
 801187a:	4598      	cmp	r8, r3
 801187c:	f080 8126 	bcs.w	8011acc <rclc_executor_spin_some.part.0+0x2f8>
 8011880:	686a      	ldr	r2, [r5, #4]
 8011882:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8011886:	4631      	mov	r1, r6
 8011888:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801188c:	f108 0801 	add.w	r8, r8, #1
 8011890:	f1bc 0f00 	cmp.w	ip, #0
 8011894:	d1e9      	bne.n	801186a <rclc_executor_spin_some.part.0+0x96>
 8011896:	4619      	mov	r1, r3
 8011898:	4610      	mov	r0, r2
 801189a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801189e:	4798      	blx	r3
 80118a0:	2800      	cmp	r0, #0
 80118a2:	f000 809b 	beq.w	80119dc <rclc_executor_spin_some.part.0+0x208>
 80118a6:	68ab      	ldr	r3, [r5, #8]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	f000 8097 	beq.w	80119dc <rclc_executor_spin_some.part.0+0x208>
 80118ae:	f04f 0800 	mov.w	r8, #0
 80118b2:	f240 1991 	movw	r9, #401	@ 0x191
 80118b6:	e009      	b.n	80118cc <rclc_executor_spin_some.part.0+0xf8>
 80118b8:	f7ff fb68 	bl	8010f8c <_rclc_take_new_data>
 80118bc:	4604      	mov	r4, r0
 80118be:	b110      	cbz	r0, 80118c6 <rclc_executor_spin_some.part.0+0xf2>
 80118c0:	4548      	cmp	r0, r9
 80118c2:	f040 808b 	bne.w	80119dc <rclc_executor_spin_some.part.0+0x208>
 80118c6:	68ab      	ldr	r3, [r5, #8]
 80118c8:	4598      	cmp	r8, r3
 80118ca:	d209      	bcs.n	80118e0 <rclc_executor_spin_some.part.0+0x10c>
 80118cc:	6868      	ldr	r0, [r5, #4]
 80118ce:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80118d2:	4631      	mov	r1, r6
 80118d4:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80118d8:	f108 0801 	add.w	r8, r8, #1
 80118dc:	2a00      	cmp	r2, #0
 80118de:	d1eb      	bne.n	80118b8 <rclc_executor_spin_some.part.0+0xe4>
 80118e0:	2600      	movs	r6, #0
 80118e2:	b97b      	cbnz	r3, 8011904 <rclc_executor_spin_some.part.0+0x130>
 80118e4:	e07a      	b.n	80119dc <rclc_executor_spin_some.part.0+0x208>
 80118e6:	f812 200c 	ldrb.w	r2, [r2, ip]
 80118ea:	2a08      	cmp	r2, #8
 80118ec:	f000 80fd 	beq.w	8011aea <rclc_executor_spin_some.part.0+0x316>
 80118f0:	2a09      	cmp	r2, #9
 80118f2:	f000 80ef 	beq.w	8011ad4 <rclc_executor_spin_some.part.0+0x300>
 80118f6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 80118fa:	b98a      	cbnz	r2, 8011920 <rclc_executor_spin_some.part.0+0x14c>
 80118fc:	3601      	adds	r6, #1
 80118fe:	429e      	cmp	r6, r3
 8011900:	d262      	bcs.n	80119c8 <rclc_executor_spin_some.part.0+0x1f4>
 8011902:	2400      	movs	r4, #0
 8011904:	686a      	ldr	r2, [r5, #4]
 8011906:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801190a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 801190e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8011912:	2900      	cmp	r1, #0
 8011914:	d062      	beq.n	80119dc <rclc_executor_spin_some.part.0+0x208>
 8011916:	7841      	ldrb	r1, [r0, #1]
 8011918:	2900      	cmp	r1, #0
 801191a:	d0e4      	beq.n	80118e6 <rclc_executor_spin_some.part.0+0x112>
 801191c:	2901      	cmp	r1, #1
 801191e:	d1ed      	bne.n	80118fc <rclc_executor_spin_some.part.0+0x128>
 8011920:	f7ff fca8 	bl	8011274 <_rclc_execute.part.0>
 8011924:	2800      	cmp	r0, #0
 8011926:	f040 80b6 	bne.w	8011a96 <rclc_executor_spin_some.part.0+0x2c2>
 801192a:	68ab      	ldr	r3, [r5, #8]
 801192c:	e7e6      	b.n	80118fc <rclc_executor_spin_some.part.0+0x128>
 801192e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011932:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011936:	4630      	mov	r0, r6
 8011938:	f009 fc4e 	bl	801b1d8 <rcl_wait_set_add_client>
 801193c:	2800      	cmp	r0, #0
 801193e:	f43f af7a 	beq.w	8011836 <rclc_executor_spin_some.part.0+0x62>
 8011942:	9001      	str	r0, [sp, #4]
 8011944:	f000 fb88 	bl	8012058 <rcutils_reset_error>
 8011948:	9801      	ldr	r0, [sp, #4]
 801194a:	4607      	mov	r7, r0
 801194c:	e03c      	b.n	80119c8 <rclc_executor_spin_some.part.0+0x1f4>
 801194e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011952:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011956:	4630      	mov	r0, r6
 8011958:	f009 f8f6 	bl	801ab48 <rcl_wait_set_add_subscription>
 801195c:	2800      	cmp	r0, #0
 801195e:	f43f af6a 	beq.w	8011836 <rclc_executor_spin_some.part.0+0x62>
 8011962:	e7ee      	b.n	8011942 <rclc_executor_spin_some.part.0+0x16e>
 8011964:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011968:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801196c:	4630      	mov	r0, r6
 801196e:	f009 fc03 	bl	801b178 <rcl_wait_set_add_timer>
 8011972:	2800      	cmp	r0, #0
 8011974:	f43f af5f 	beq.w	8011836 <rclc_executor_spin_some.part.0+0x62>
 8011978:	e7e3      	b.n	8011942 <rclc_executor_spin_some.part.0+0x16e>
 801197a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801197e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011982:	4630      	mov	r0, r6
 8011984:	f009 fbcc 	bl	801b120 <rcl_wait_set_add_guard_condition>
 8011988:	2800      	cmp	r0, #0
 801198a:	f43f af54 	beq.w	8011836 <rclc_executor_spin_some.part.0+0x62>
 801198e:	e7d8      	b.n	8011942 <rclc_executor_spin_some.part.0+0x16e>
 8011990:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011994:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011998:	3110      	adds	r1, #16
 801199a:	4630      	mov	r0, r6
 801199c:	f00a f94c 	bl	801bc38 <rcl_action_wait_set_add_action_server>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	f43f af48 	beq.w	8011836 <rclc_executor_spin_some.part.0+0x62>
 80119a6:	e7cc      	b.n	8011942 <rclc_executor_spin_some.part.0+0x16e>
 80119a8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80119ac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80119b0:	3110      	adds	r1, #16
 80119b2:	2300      	movs	r3, #0
 80119b4:	4630      	mov	r0, r6
 80119b6:	f009 ff17 	bl	801b7e8 <rcl_action_wait_set_add_action_client>
 80119ba:	2800      	cmp	r0, #0
 80119bc:	f43f af3b 	beq.w	8011836 <rclc_executor_spin_some.part.0+0x62>
 80119c0:	e7bf      	b.n	8011942 <rclc_executor_spin_some.part.0+0x16e>
 80119c2:	f000 fb49 	bl	8012058 <rcutils_reset_error>
 80119c6:	2701      	movs	r7, #1
 80119c8:	4638      	mov	r0, r7
 80119ca:	b003      	add	sp, #12
 80119cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d0:	f000 fb42 	bl	8012058 <rcutils_reset_error>
 80119d4:	4638      	mov	r0, r7
 80119d6:	b003      	add	sp, #12
 80119d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119dc:	4627      	mov	r7, r4
 80119de:	e7f3      	b.n	80119c8 <rclc_executor_spin_some.part.0+0x1f4>
 80119e0:	68ab      	ldr	r3, [r5, #8]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f000 8092 	beq.w	8011b0c <rclc_executor_spin_some.part.0+0x338>
 80119e8:	2400      	movs	r4, #0
 80119ea:	46a0      	mov	r8, r4
 80119ec:	f240 1991 	movw	r9, #401	@ 0x191
 80119f0:	e008      	b.n	8011a04 <rclc_executor_spin_some.part.0+0x230>
 80119f2:	f7ff fa7d 	bl	8010ef0 <_rclc_check_for_new_data>
 80119f6:	4604      	mov	r4, r0
 80119f8:	b108      	cbz	r0, 80119fe <rclc_executor_spin_some.part.0+0x22a>
 80119fa:	4548      	cmp	r0, r9
 80119fc:	d1ee      	bne.n	80119dc <rclc_executor_spin_some.part.0+0x208>
 80119fe:	68ab      	ldr	r3, [r5, #8]
 8011a00:	4598      	cmp	r8, r3
 8011a02:	d265      	bcs.n	8011ad0 <rclc_executor_spin_some.part.0+0x2fc>
 8011a04:	686a      	ldr	r2, [r5, #4]
 8011a06:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8011a0a:	4631      	mov	r1, r6
 8011a0c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8011a10:	f108 0801 	add.w	r8, r8, #1
 8011a14:	f1bc 0f00 	cmp.w	ip, #0
 8011a18:	d1eb      	bne.n	80119f2 <rclc_executor_spin_some.part.0+0x21e>
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	4610      	mov	r0, r2
 8011a1e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8011a22:	4798      	blx	r3
 8011a24:	2800      	cmp	r0, #0
 8011a26:	d0d9      	beq.n	80119dc <rclc_executor_spin_some.part.0+0x208>
 8011a28:	68ab      	ldr	r3, [r5, #8]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d0d6      	beq.n	80119dc <rclc_executor_spin_some.part.0+0x208>
 8011a2e:	f04f 0800 	mov.w	r8, #0
 8011a32:	f240 1991 	movw	r9, #401	@ 0x191
 8011a36:	f240 2a59 	movw	sl, #601	@ 0x259
 8011a3a:	e00e      	b.n	8011a5a <rclc_executor_spin_some.part.0+0x286>
 8011a3c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8011a40:	2b08      	cmp	r3, #8
 8011a42:	d033      	beq.n	8011aac <rclc_executor_spin_some.part.0+0x2d8>
 8011a44:	2b09      	cmp	r3, #9
 8011a46:	d028      	beq.n	8011a9a <rclc_executor_spin_some.part.0+0x2c6>
 8011a48:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8011a4c:	b9fb      	cbnz	r3, 8011a8e <rclc_executor_spin_some.part.0+0x2ba>
 8011a4e:	68ab      	ldr	r3, [r5, #8]
 8011a50:	f108 0801 	add.w	r8, r8, #1
 8011a54:	4598      	cmp	r8, r3
 8011a56:	d2b7      	bcs.n	80119c8 <rclc_executor_spin_some.part.0+0x1f4>
 8011a58:	2400      	movs	r4, #0
 8011a5a:	6868      	ldr	r0, [r5, #4]
 8011a5c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8011a60:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8011a64:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d0b7      	beq.n	80119dc <rclc_executor_spin_some.part.0+0x208>
 8011a6c:	4631      	mov	r1, r6
 8011a6e:	f7ff fa8d 	bl	8010f8c <_rclc_take_new_data>
 8011a72:	b118      	cbz	r0, 8011a7c <rclc_executor_spin_some.part.0+0x2a8>
 8011a74:	4548      	cmp	r0, r9
 8011a76:	d001      	beq.n	8011a7c <rclc_executor_spin_some.part.0+0x2a8>
 8011a78:	4550      	cmp	r0, sl
 8011a7a:	d10c      	bne.n	8011a96 <rclc_executor_spin_some.part.0+0x2c2>
 8011a7c:	686b      	ldr	r3, [r5, #4]
 8011a7e:	eb13 000b 	adds.w	r0, r3, fp
 8011a82:	d021      	beq.n	8011ac8 <rclc_executor_spin_some.part.0+0x2f4>
 8011a84:	7842      	ldrb	r2, [r0, #1]
 8011a86:	2a00      	cmp	r2, #0
 8011a88:	d0d8      	beq.n	8011a3c <rclc_executor_spin_some.part.0+0x268>
 8011a8a:	2a01      	cmp	r2, #1
 8011a8c:	d1df      	bne.n	8011a4e <rclc_executor_spin_some.part.0+0x27a>
 8011a8e:	f7ff fbf1 	bl	8011274 <_rclc_execute.part.0>
 8011a92:	2800      	cmp	r0, #0
 8011a94:	d0db      	beq.n	8011a4e <rclc_executor_spin_some.part.0+0x27a>
 8011a96:	4607      	mov	r7, r0
 8011a98:	e796      	b.n	80119c8 <rclc_executor_spin_some.part.0+0x1f4>
 8011a9a:	6843      	ldr	r3, [r0, #4]
 8011a9c:	6a1a      	ldr	r2, [r3, #32]
 8011a9e:	2a00      	cmp	r2, #0
 8011aa0:	d1f5      	bne.n	8011a8e <rclc_executor_spin_some.part.0+0x2ba>
 8011aa2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d0d1      	beq.n	8011a4e <rclc_executor_spin_some.part.0+0x27a>
 8011aaa:	e7f0      	b.n	8011a8e <rclc_executor_spin_some.part.0+0x2ba>
 8011aac:	6843      	ldr	r3, [r0, #4]
 8011aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011ab0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8011ab4:	d1eb      	bne.n	8011a8e <rclc_executor_spin_some.part.0+0x2ba>
 8011ab6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8011aba:	2a00      	cmp	r2, #0
 8011abc:	d1e7      	bne.n	8011a8e <rclc_executor_spin_some.part.0+0x2ba>
 8011abe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d0c3      	beq.n	8011a4e <rclc_executor_spin_some.part.0+0x27a>
 8011ac6:	e7e2      	b.n	8011a8e <rclc_executor_spin_some.part.0+0x2ba>
 8011ac8:	270b      	movs	r7, #11
 8011aca:	e77d      	b.n	80119c8 <rclc_executor_spin_some.part.0+0x1f4>
 8011acc:	686a      	ldr	r2, [r5, #4]
 8011ace:	e6e2      	b.n	8011896 <rclc_executor_spin_some.part.0+0xc2>
 8011ad0:	686a      	ldr	r2, [r5, #4]
 8011ad2:	e7a2      	b.n	8011a1a <rclc_executor_spin_some.part.0+0x246>
 8011ad4:	6842      	ldr	r2, [r0, #4]
 8011ad6:	6a11      	ldr	r1, [r2, #32]
 8011ad8:	2900      	cmp	r1, #0
 8011ada:	f47f af21 	bne.w	8011920 <rclc_executor_spin_some.part.0+0x14c>
 8011ade:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8011ae2:	2a00      	cmp	r2, #0
 8011ae4:	f43f af0a 	beq.w	80118fc <rclc_executor_spin_some.part.0+0x128>
 8011ae8:	e71a      	b.n	8011920 <rclc_executor_spin_some.part.0+0x14c>
 8011aea:	6842      	ldr	r2, [r0, #4]
 8011aec:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8011aee:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8011af2:	f47f af15 	bne.w	8011920 <rclc_executor_spin_some.part.0+0x14c>
 8011af6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8011afa:	2900      	cmp	r1, #0
 8011afc:	f47f af10 	bne.w	8011920 <rclc_executor_spin_some.part.0+0x14c>
 8011b00:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8011b04:	2a00      	cmp	r2, #0
 8011b06:	f43f aef9 	beq.w	80118fc <rclc_executor_spin_some.part.0+0x128>
 8011b0a:	e709      	b.n	8011920 <rclc_executor_spin_some.part.0+0x14c>
 8011b0c:	686a      	ldr	r2, [r5, #4]
 8011b0e:	461c      	mov	r4, r3
 8011b10:	e783      	b.n	8011a1a <rclc_executor_spin_some.part.0+0x246>
 8011b12:	686a      	ldr	r2, [r5, #4]
 8011b14:	461c      	mov	r4, r3
 8011b16:	e6be      	b.n	8011896 <rclc_executor_spin_some.part.0+0xc2>

08011b18 <rclc_executor_spin>:
 8011b18:	b1d0      	cbz	r0, 8011b50 <rclc_executor_spin+0x38>
 8011b1a:	b510      	push	{r4, lr}
 8011b1c:	4604      	mov	r4, r0
 8011b1e:	b082      	sub	sp, #8
 8011b20:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 8011b24:	6820      	ldr	r0, [r4, #0]
 8011b26:	e9cd 2300 	strd	r2, r3, [sp]
 8011b2a:	f007 fbeb 	bl	8019304 <rcl_context_is_valid>
 8011b2e:	4601      	mov	r1, r0
 8011b30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b34:	4620      	mov	r0, r4
 8011b36:	b131      	cbz	r1, 8011b46 <rclc_executor_spin+0x2e>
 8011b38:	f7ff fe4c 	bl	80117d4 <rclc_executor_spin_some.part.0>
 8011b3c:	f030 0302 	bics.w	r3, r0, #2
 8011b40:	d0ee      	beq.n	8011b20 <rclc_executor_spin+0x8>
 8011b42:	b002      	add	sp, #8
 8011b44:	bd10      	pop	{r4, pc}
 8011b46:	f000 fa87 	bl	8012058 <rcutils_reset_error>
 8011b4a:	2001      	movs	r0, #1
 8011b4c:	b002      	add	sp, #8
 8011b4e:	bd10      	pop	{r4, pc}
 8011b50:	200b      	movs	r0, #11
 8011b52:	4770      	bx	lr

08011b54 <rclc_executor_handle_counters_zero_init>:
 8011b54:	b130      	cbz	r0, 8011b64 <rclc_executor_handle_counters_zero_init+0x10>
 8011b56:	b508      	push	{r3, lr}
 8011b58:	2220      	movs	r2, #32
 8011b5a:	2100      	movs	r1, #0
 8011b5c:	f00c fb10 	bl	801e180 <memset>
 8011b60:	2000      	movs	r0, #0
 8011b62:	bd08      	pop	{r3, pc}
 8011b64:	200b      	movs	r0, #11
 8011b66:	4770      	bx	lr

08011b68 <rclc_executor_handle_init>:
 8011b68:	b168      	cbz	r0, 8011b86 <rclc_executor_handle_init+0x1e>
 8011b6a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8011b90 <rclc_executor_handle_init+0x28>
 8011b6e:	2300      	movs	r3, #0
 8011b70:	220b      	movs	r2, #11
 8011b72:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8011b76:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8011b7a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8011b7e:	8002      	strh	r2, [r0, #0]
 8011b80:	8703      	strh	r3, [r0, #56]	@ 0x38
 8011b82:	4618      	mov	r0, r3
 8011b84:	4770      	bx	lr
 8011b86:	200b      	movs	r0, #11
 8011b88:	4770      	bx	lr
 8011b8a:	bf00      	nop
 8011b8c:	f3af 8000 	nop.w
	...

08011b98 <rclc_support_init_with_options>:
 8011b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b9c:	b083      	sub	sp, #12
 8011b9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011ba0:	b340      	cbz	r0, 8011bf4 <rclc_support_init_with_options+0x5c>
 8011ba2:	461d      	mov	r5, r3
 8011ba4:	b333      	cbz	r3, 8011bf4 <rclc_support_init_with_options+0x5c>
 8011ba6:	b32e      	cbz	r6, 8011bf4 <rclc_support_init_with_options+0x5c>
 8011ba8:	46e9      	mov	r9, sp
 8011baa:	4604      	mov	r4, r0
 8011bac:	4648      	mov	r0, r9
 8011bae:	460f      	mov	r7, r1
 8011bb0:	4690      	mov	r8, r2
 8011bb2:	f007 fb9d 	bl	80192f0 <rcl_get_zero_initialized_context>
 8011bb6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011bba:	462a      	mov	r2, r5
 8011bbc:	e884 0003 	stmia.w	r4, {r0, r1}
 8011bc0:	4623      	mov	r3, r4
 8011bc2:	4641      	mov	r1, r8
 8011bc4:	4638      	mov	r0, r7
 8011bc6:	f007 fe75 	bl	80198b4 <rcl_init>
 8011bca:	4605      	mov	r5, r0
 8011bcc:	b960      	cbnz	r0, 8011be8 <rclc_support_init_with_options+0x50>
 8011bce:	60a6      	str	r6, [r4, #8]
 8011bd0:	4632      	mov	r2, r6
 8011bd2:	f104 010c 	add.w	r1, r4, #12
 8011bd6:	2003      	movs	r0, #3
 8011bd8:	f008 fa28 	bl	801a02c <rcl_clock_init>
 8011bdc:	4605      	mov	r5, r0
 8011bde:	b918      	cbnz	r0, 8011be8 <rclc_support_init_with_options+0x50>
 8011be0:	4628      	mov	r0, r5
 8011be2:	b003      	add	sp, #12
 8011be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011be8:	f000 fa36 	bl	8012058 <rcutils_reset_error>
 8011bec:	4628      	mov	r0, r5
 8011bee:	b003      	add	sp, #12
 8011bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bf4:	250b      	movs	r5, #11
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	b003      	add	sp, #12
 8011bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bfe:	bf00      	nop

08011c00 <rclc_node_init_default>:
 8011c00:	b3b8      	cbz	r0, 8011c72 <rclc_node_init_default+0x72>
 8011c02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c06:	460d      	mov	r5, r1
 8011c08:	b0a1      	sub	sp, #132	@ 0x84
 8011c0a:	b329      	cbz	r1, 8011c58 <rclc_node_init_default+0x58>
 8011c0c:	4616      	mov	r6, r2
 8011c0e:	b31a      	cbz	r2, 8011c58 <rclc_node_init_default+0x58>
 8011c10:	461f      	mov	r7, r3
 8011c12:	b30b      	cbz	r3, 8011c58 <rclc_node_init_default+0x58>
 8011c14:	f10d 0810 	add.w	r8, sp, #16
 8011c18:	4604      	mov	r4, r0
 8011c1a:	4640      	mov	r0, r8
 8011c1c:	f7fe fdd8 	bl	80107d0 <rcl_get_zero_initialized_node>
 8011c20:	e898 0003 	ldmia.w	r8, {r0, r1}
 8011c24:	f10d 0918 	add.w	r9, sp, #24
 8011c28:	e884 0003 	stmia.w	r4, {r0, r1}
 8011c2c:	4648      	mov	r0, r9
 8011c2e:	f7fe ff47 	bl	8010ac0 <rcl_node_get_default_options>
 8011c32:	4640      	mov	r0, r8
 8011c34:	f7fe fdcc 	bl	80107d0 <rcl_get_zero_initialized_node>
 8011c38:	f8cd 9000 	str.w	r9, [sp]
 8011c3c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8011c40:	463b      	mov	r3, r7
 8011c42:	e884 0003 	stmia.w	r4, {r0, r1}
 8011c46:	4632      	mov	r2, r6
 8011c48:	4629      	mov	r1, r5
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f7fe fdca 	bl	80107e4 <rcl_node_init>
 8011c50:	b930      	cbnz	r0, 8011c60 <rclc_node_init_default+0x60>
 8011c52:	b021      	add	sp, #132	@ 0x84
 8011c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c58:	200b      	movs	r0, #11
 8011c5a:	b021      	add	sp, #132	@ 0x84
 8011c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c60:	9003      	str	r0, [sp, #12]
 8011c62:	f000 f9f9 	bl	8012058 <rcutils_reset_error>
 8011c66:	f000 f9f7 	bl	8012058 <rcutils_reset_error>
 8011c6a:	9803      	ldr	r0, [sp, #12]
 8011c6c:	b021      	add	sp, #132	@ 0x84
 8011c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c72:	200b      	movs	r0, #11
 8011c74:	4770      	bx	lr
 8011c76:	bf00      	nop

08011c78 <rclc_publisher_init_default>:
 8011c78:	b368      	cbz	r0, 8011cd6 <rclc_publisher_init_default+0x5e>
 8011c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c7e:	460d      	mov	r5, r1
 8011c80:	b0a0      	sub	sp, #128	@ 0x80
 8011c82:	b321      	cbz	r1, 8011cce <rclc_publisher_init_default+0x56>
 8011c84:	4616      	mov	r6, r2
 8011c86:	b312      	cbz	r2, 8011cce <rclc_publisher_init_default+0x56>
 8011c88:	461f      	mov	r7, r3
 8011c8a:	b303      	cbz	r3, 8011cce <rclc_publisher_init_default+0x56>
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	f7fe ffeb 	bl	8010c68 <rcl_get_zero_initialized_publisher>
 8011c92:	f10d 0810 	add.w	r8, sp, #16
 8011c96:	6020      	str	r0, [r4, #0]
 8011c98:	4640      	mov	r0, r8
 8011c9a:	f7ff f881 	bl	8010da0 <rcl_publisher_get_default_options>
 8011c9e:	490f      	ldr	r1, [pc, #60]	@ (8011cdc <rclc_publisher_init_default+0x64>)
 8011ca0:	2250      	movs	r2, #80	@ 0x50
 8011ca2:	4640      	mov	r0, r8
 8011ca4:	f00c fb35 	bl	801e312 <memcpy>
 8011ca8:	f8cd 8000 	str.w	r8, [sp]
 8011cac:	463b      	mov	r3, r7
 8011cae:	4632      	mov	r2, r6
 8011cb0:	4629      	mov	r1, r5
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f7fe ffde 	bl	8010c74 <rcl_publisher_init>
 8011cb8:	b910      	cbnz	r0, 8011cc0 <rclc_publisher_init_default+0x48>
 8011cba:	b020      	add	sp, #128	@ 0x80
 8011cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cc0:	9003      	str	r0, [sp, #12]
 8011cc2:	f000 f9c9 	bl	8012058 <rcutils_reset_error>
 8011cc6:	9803      	ldr	r0, [sp, #12]
 8011cc8:	b020      	add	sp, #128	@ 0x80
 8011cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cce:	200b      	movs	r0, #11
 8011cd0:	b020      	add	sp, #128	@ 0x80
 8011cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cd6:	200b      	movs	r0, #11
 8011cd8:	4770      	bx	lr
 8011cda:	bf00      	nop
 8011cdc:	0801ff88 	.word	0x0801ff88

08011ce0 <rclc_publisher_init_best_effort>:
 8011ce0:	b368      	cbz	r0, 8011d3e <rclc_publisher_init_best_effort+0x5e>
 8011ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce6:	460d      	mov	r5, r1
 8011ce8:	b0a0      	sub	sp, #128	@ 0x80
 8011cea:	b321      	cbz	r1, 8011d36 <rclc_publisher_init_best_effort+0x56>
 8011cec:	4616      	mov	r6, r2
 8011cee:	b312      	cbz	r2, 8011d36 <rclc_publisher_init_best_effort+0x56>
 8011cf0:	461f      	mov	r7, r3
 8011cf2:	b303      	cbz	r3, 8011d36 <rclc_publisher_init_best_effort+0x56>
 8011cf4:	4604      	mov	r4, r0
 8011cf6:	f7fe ffb7 	bl	8010c68 <rcl_get_zero_initialized_publisher>
 8011cfa:	f10d 0810 	add.w	r8, sp, #16
 8011cfe:	6020      	str	r0, [r4, #0]
 8011d00:	4640      	mov	r0, r8
 8011d02:	f7ff f84d 	bl	8010da0 <rcl_publisher_get_default_options>
 8011d06:	490f      	ldr	r1, [pc, #60]	@ (8011d44 <rclc_publisher_init_best_effort+0x64>)
 8011d08:	2250      	movs	r2, #80	@ 0x50
 8011d0a:	4640      	mov	r0, r8
 8011d0c:	f00c fb01 	bl	801e312 <memcpy>
 8011d10:	f8cd 8000 	str.w	r8, [sp]
 8011d14:	463b      	mov	r3, r7
 8011d16:	4632      	mov	r2, r6
 8011d18:	4629      	mov	r1, r5
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	f7fe ffaa 	bl	8010c74 <rcl_publisher_init>
 8011d20:	b910      	cbnz	r0, 8011d28 <rclc_publisher_init_best_effort+0x48>
 8011d22:	b020      	add	sp, #128	@ 0x80
 8011d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d28:	9003      	str	r0, [sp, #12]
 8011d2a:	f000 f995 	bl	8012058 <rcutils_reset_error>
 8011d2e:	9803      	ldr	r0, [sp, #12]
 8011d30:	b020      	add	sp, #128	@ 0x80
 8011d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d36:	200b      	movs	r0, #11
 8011d38:	b020      	add	sp, #128	@ 0x80
 8011d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d3e:	200b      	movs	r0, #11
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop
 8011d44:	0801ffd8 	.word	0x0801ffd8

08011d48 <rclc_service_init_default>:
 8011d48:	b368      	cbz	r0, 8011da6 <rclc_service_init_default+0x5e>
 8011d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d4e:	460d      	mov	r5, r1
 8011d50:	b09e      	sub	sp, #120	@ 0x78
 8011d52:	b321      	cbz	r1, 8011d9e <rclc_service_init_default+0x56>
 8011d54:	4616      	mov	r6, r2
 8011d56:	b312      	cbz	r2, 8011d9e <rclc_service_init_default+0x56>
 8011d58:	461f      	mov	r7, r3
 8011d5a:	b303      	cbz	r3, 8011d9e <rclc_service_init_default+0x56>
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	f007 ffcb 	bl	8019cf8 <rcl_get_zero_initialized_service>
 8011d62:	f10d 0810 	add.w	r8, sp, #16
 8011d66:	6020      	str	r0, [r4, #0]
 8011d68:	4640      	mov	r0, r8
 8011d6a:	f008 f853 	bl	8019e14 <rcl_service_get_default_options>
 8011d6e:	490f      	ldr	r1, [pc, #60]	@ (8011dac <rclc_service_init_default+0x64>)
 8011d70:	2250      	movs	r2, #80	@ 0x50
 8011d72:	4640      	mov	r0, r8
 8011d74:	f00c facd 	bl	801e312 <memcpy>
 8011d78:	f8cd 8000 	str.w	r8, [sp]
 8011d7c:	463b      	mov	r3, r7
 8011d7e:	4632      	mov	r2, r6
 8011d80:	4629      	mov	r1, r5
 8011d82:	4620      	mov	r0, r4
 8011d84:	f007 ffbe 	bl	8019d04 <rcl_service_init>
 8011d88:	b910      	cbnz	r0, 8011d90 <rclc_service_init_default+0x48>
 8011d8a:	b01e      	add	sp, #120	@ 0x78
 8011d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d90:	9003      	str	r0, [sp, #12]
 8011d92:	f000 f961 	bl	8012058 <rcutils_reset_error>
 8011d96:	9803      	ldr	r0, [sp, #12]
 8011d98:	b01e      	add	sp, #120	@ 0x78
 8011d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d9e:	200b      	movs	r0, #11
 8011da0:	b01e      	add	sp, #120	@ 0x78
 8011da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da6:	200b      	movs	r0, #11
 8011da8:	4770      	bx	lr
 8011daa:	bf00      	nop
 8011dac:	08020028 	.word	0x08020028

08011db0 <rclc_timer_init_default>:
 8011db0:	b360      	cbz	r0, 8011e0c <rclc_timer_init_default+0x5c>
 8011db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db6:	460e      	mov	r6, r1
 8011db8:	b08a      	sub	sp, #40	@ 0x28
 8011dba:	b319      	cbz	r1, 8011e04 <rclc_timer_init_default+0x54>
 8011dbc:	4690      	mov	r8, r2
 8011dbe:	461f      	mov	r7, r3
 8011dc0:	4605      	mov	r5, r0
 8011dc2:	f008 fb11 	bl	801a3e8 <rcl_get_zero_initialized_timer>
 8011dc6:	68b4      	ldr	r4, [r6, #8]
 8011dc8:	6028      	str	r0, [r5, #0]
 8011dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011dcc:	f10d 0c0c 	add.w	ip, sp, #12
 8011dd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011dd4:	6823      	ldr	r3, [r4, #0]
 8011dd6:	f8cc 3000 	str.w	r3, [ip]
 8011dda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ddc:	9302      	str	r3, [sp, #8]
 8011dde:	e9cd 8700 	strd	r8, r7, [sp]
 8011de2:	4628      	mov	r0, r5
 8011de4:	4632      	mov	r2, r6
 8011de6:	f106 010c 	add.w	r1, r6, #12
 8011dea:	f008 fb05 	bl	801a3f8 <rcl_timer_init>
 8011dee:	b910      	cbnz	r0, 8011df6 <rclc_timer_init_default+0x46>
 8011df0:	b00a      	add	sp, #40	@ 0x28
 8011df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011df6:	9009      	str	r0, [sp, #36]	@ 0x24
 8011df8:	f000 f92e 	bl	8012058 <rcutils_reset_error>
 8011dfc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011dfe:	b00a      	add	sp, #40	@ 0x28
 8011e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e04:	200b      	movs	r0, #11
 8011e06:	b00a      	add	sp, #40	@ 0x28
 8011e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e0c:	200b      	movs	r0, #11
 8011e0e:	4770      	bx	lr

08011e10 <__default_zero_allocate>:
 8011e10:	f00b bccc 	b.w	801d7ac <calloc>

08011e14 <__default_reallocate>:
 8011e14:	f00b be6a 	b.w	801daec <realloc>

08011e18 <__default_deallocate>:
 8011e18:	f00b bd46 	b.w	801d8a8 <free>

08011e1c <__default_allocate>:
 8011e1c:	f00b bd3c 	b.w	801d898 <malloc>

08011e20 <rcutils_get_zero_initialized_allocator>:
 8011e20:	b510      	push	{r4, lr}
 8011e22:	4c05      	ldr	r4, [pc, #20]	@ (8011e38 <rcutils_get_zero_initialized_allocator+0x18>)
 8011e24:	4686      	mov	lr, r0
 8011e26:	4684      	mov	ip, r0
 8011e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e2e:	6823      	ldr	r3, [r4, #0]
 8011e30:	f8cc 3000 	str.w	r3, [ip]
 8011e34:	4670      	mov	r0, lr
 8011e36:	bd10      	pop	{r4, pc}
 8011e38:	08020078 	.word	0x08020078

08011e3c <rcutils_set_default_allocator>:
 8011e3c:	b1a8      	cbz	r0, 8011e6a <rcutils_set_default_allocator+0x2e>
 8011e3e:	6802      	ldr	r2, [r0, #0]
 8011e40:	b1a2      	cbz	r2, 8011e6c <rcutils_set_default_allocator+0x30>
 8011e42:	6841      	ldr	r1, [r0, #4]
 8011e44:	b1a1      	cbz	r1, 8011e70 <rcutils_set_default_allocator+0x34>
 8011e46:	b410      	push	{r4}
 8011e48:	68c4      	ldr	r4, [r0, #12]
 8011e4a:	b164      	cbz	r4, 8011e66 <rcutils_set_default_allocator+0x2a>
 8011e4c:	6880      	ldr	r0, [r0, #8]
 8011e4e:	b138      	cbz	r0, 8011e60 <rcutils_set_default_allocator+0x24>
 8011e50:	4b08      	ldr	r3, [pc, #32]	@ (8011e74 <rcutils_set_default_allocator+0x38>)
 8011e52:	601a      	str	r2, [r3, #0]
 8011e54:	2200      	movs	r2, #0
 8011e56:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8011e5a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8011e5e:	2001      	movs	r0, #1
 8011e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e64:	4770      	bx	lr
 8011e66:	4620      	mov	r0, r4
 8011e68:	e7fa      	b.n	8011e60 <rcutils_set_default_allocator+0x24>
 8011e6a:	4770      	bx	lr
 8011e6c:	4610      	mov	r0, r2
 8011e6e:	4770      	bx	lr
 8011e70:	4608      	mov	r0, r1
 8011e72:	4770      	bx	lr
 8011e74:	200003a0 	.word	0x200003a0

08011e78 <rcutils_get_default_allocator>:
 8011e78:	b510      	push	{r4, lr}
 8011e7a:	4c05      	ldr	r4, [pc, #20]	@ (8011e90 <rcutils_get_default_allocator+0x18>)
 8011e7c:	4686      	mov	lr, r0
 8011e7e:	4684      	mov	ip, r0
 8011e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e86:	6823      	ldr	r3, [r4, #0]
 8011e88:	f8cc 3000 	str.w	r3, [ip]
 8011e8c:	4670      	mov	r0, lr
 8011e8e:	bd10      	pop	{r4, pc}
 8011e90:	200003a0 	.word	0x200003a0

08011e94 <rcutils_allocator_is_valid>:
 8011e94:	b158      	cbz	r0, 8011eae <rcutils_allocator_is_valid+0x1a>
 8011e96:	6803      	ldr	r3, [r0, #0]
 8011e98:	b143      	cbz	r3, 8011eac <rcutils_allocator_is_valid+0x18>
 8011e9a:	6843      	ldr	r3, [r0, #4]
 8011e9c:	b133      	cbz	r3, 8011eac <rcutils_allocator_is_valid+0x18>
 8011e9e:	68c3      	ldr	r3, [r0, #12]
 8011ea0:	b123      	cbz	r3, 8011eac <rcutils_allocator_is_valid+0x18>
 8011ea2:	6880      	ldr	r0, [r0, #8]
 8011ea4:	3800      	subs	r0, #0
 8011ea6:	bf18      	it	ne
 8011ea8:	2001      	movne	r0, #1
 8011eaa:	4770      	bx	lr
 8011eac:	4618      	mov	r0, r3
 8011eae:	4770      	bx	lr

08011eb0 <__atomic_load_8>:
 8011eb0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011eb4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011eb8:	4a15      	ldr	r2, [pc, #84]	@ (8011f10 <__atomic_load_8+0x60>)
 8011eba:	4b16      	ldr	r3, [pc, #88]	@ (8011f14 <__atomic_load_8+0x64>)
 8011ebc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011ec0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011ec4:	fb02 f101 	mul.w	r1, r2, r1
 8011ec8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011ecc:	fba3 2301 	umull	r2, r3, r3, r1
 8011ed0:	091b      	lsrs	r3, r3, #4
 8011ed2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011ed6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011eda:	b4d0      	push	{r4, r6, r7}
 8011edc:	4c0e      	ldr	r4, [pc, #56]	@ (8011f18 <__atomic_load_8+0x68>)
 8011ede:	1ac9      	subs	r1, r1, r3
 8011ee0:	1862      	adds	r2, r4, r1
 8011ee2:	f04f 0c01 	mov.w	ip, #1
 8011ee6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011eea:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011eee:	2e00      	cmp	r6, #0
 8011ef0:	d1f9      	bne.n	8011ee6 <__atomic_load_8+0x36>
 8011ef2:	f3bf 8f5b 	dmb	ish
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d1f4      	bne.n	8011ee6 <__atomic_load_8+0x36>
 8011efc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011f00:	f3bf 8f5b 	dmb	ish
 8011f04:	5463      	strb	r3, [r4, r1]
 8011f06:	4630      	mov	r0, r6
 8011f08:	4639      	mov	r1, r7
 8011f0a:	bcd0      	pop	{r4, r6, r7}
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	27d4eb2d 	.word	0x27d4eb2d
 8011f14:	b21642c9 	.word	0xb21642c9
 8011f18:	200074b0 	.word	0x200074b0

08011f1c <__atomic_store_8>:
 8011f1c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011f20:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011f24:	b570      	push	{r4, r5, r6, lr}
 8011f26:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011f2a:	4c14      	ldr	r4, [pc, #80]	@ (8011f7c <__atomic_store_8+0x60>)
 8011f2c:	4d14      	ldr	r5, [pc, #80]	@ (8011f80 <__atomic_store_8+0x64>)
 8011f2e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011f32:	fb04 f101 	mul.w	r1, r4, r1
 8011f36:	4c13      	ldr	r4, [pc, #76]	@ (8011f84 <__atomic_store_8+0x68>)
 8011f38:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011f3c:	fba4 4e01 	umull	r4, lr, r4, r1
 8011f40:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8011f44:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8011f48:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8011f4c:	eba1 0e0e 	sub.w	lr, r1, lr
 8011f50:	eb05 0c0e 	add.w	ip, r5, lr
 8011f54:	f04f 0401 	mov.w	r4, #1
 8011f58:	e8dc 1f4f 	ldrexb	r1, [ip]
 8011f5c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8011f60:	2e00      	cmp	r6, #0
 8011f62:	d1f9      	bne.n	8011f58 <__atomic_store_8+0x3c>
 8011f64:	f3bf 8f5b 	dmb	ish
 8011f68:	b2c9      	uxtb	r1, r1
 8011f6a:	2900      	cmp	r1, #0
 8011f6c:	d1f4      	bne.n	8011f58 <__atomic_store_8+0x3c>
 8011f6e:	e9c0 2300 	strd	r2, r3, [r0]
 8011f72:	f3bf 8f5b 	dmb	ish
 8011f76:	f805 100e 	strb.w	r1, [r5, lr]
 8011f7a:	bd70      	pop	{r4, r5, r6, pc}
 8011f7c:	27d4eb2d 	.word	0x27d4eb2d
 8011f80:	200074b0 	.word	0x200074b0
 8011f84:	b21642c9 	.word	0xb21642c9

08011f88 <__atomic_exchange_8>:
 8011f88:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8011f8c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8011f90:	4916      	ldr	r1, [pc, #88]	@ (8011fec <__atomic_exchange_8+0x64>)
 8011f92:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011f96:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8011f9a:	fb01 fc0c 	mul.w	ip, r1, ip
 8011f9e:	4914      	ldr	r1, [pc, #80]	@ (8011ff0 <__atomic_exchange_8+0x68>)
 8011fa0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011fa4:	b570      	push	{r4, r5, r6, lr}
 8011fa6:	4605      	mov	r5, r0
 8011fa8:	fba1 010c 	umull	r0, r1, r1, ip
 8011fac:	0909      	lsrs	r1, r1, #4
 8011fae:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011fb2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8011fb6:	4e0f      	ldr	r6, [pc, #60]	@ (8011ff4 <__atomic_exchange_8+0x6c>)
 8011fb8:	ebac 0c01 	sub.w	ip, ip, r1
 8011fbc:	eb06 010c 	add.w	r1, r6, ip
 8011fc0:	f04f 0e01 	mov.w	lr, #1
 8011fc4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011fc8:	e8c1 ef40 	strexb	r0, lr, [r1]
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d1f9      	bne.n	8011fc4 <__atomic_exchange_8+0x3c>
 8011fd0:	f3bf 8f5b 	dmb	ish
 8011fd4:	b2e4      	uxtb	r4, r4
 8011fd6:	2c00      	cmp	r4, #0
 8011fd8:	d1f4      	bne.n	8011fc4 <__atomic_exchange_8+0x3c>
 8011fda:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011fde:	e9c5 2300 	strd	r2, r3, [r5]
 8011fe2:	f3bf 8f5b 	dmb	ish
 8011fe6:	f806 400c 	strb.w	r4, [r6, ip]
 8011fea:	bd70      	pop	{r4, r5, r6, pc}
 8011fec:	27d4eb2d 	.word	0x27d4eb2d
 8011ff0:	b21642c9 	.word	0xb21642c9
 8011ff4:	200074b0 	.word	0x200074b0

08011ff8 <rcutils_get_env>:
 8011ff8:	b168      	cbz	r0, 8012016 <rcutils_get_env+0x1e>
 8011ffa:	b510      	push	{r4, lr}
 8011ffc:	460c      	mov	r4, r1
 8011ffe:	b129      	cbz	r1, 801200c <rcutils_get_env+0x14>
 8012000:	f00b fc02 	bl	801d808 <getenv>
 8012004:	b120      	cbz	r0, 8012010 <rcutils_get_env+0x18>
 8012006:	6020      	str	r0, [r4, #0]
 8012008:	2000      	movs	r0, #0
 801200a:	bd10      	pop	{r4, pc}
 801200c:	4803      	ldr	r0, [pc, #12]	@ (801201c <rcutils_get_env+0x24>)
 801200e:	bd10      	pop	{r4, pc}
 8012010:	4b03      	ldr	r3, [pc, #12]	@ (8012020 <rcutils_get_env+0x28>)
 8012012:	6023      	str	r3, [r4, #0]
 8012014:	bd10      	pop	{r4, pc}
 8012016:	4803      	ldr	r0, [pc, #12]	@ (8012024 <rcutils_get_env+0x2c>)
 8012018:	4770      	bx	lr
 801201a:	bf00      	nop
 801201c:	080200a8 	.word	0x080200a8
 8012020:	08021598 	.word	0x08021598
 8012024:	0802008c 	.word	0x0802008c

08012028 <rcutils_get_error_string>:
 8012028:	4b06      	ldr	r3, [pc, #24]	@ (8012044 <rcutils_get_error_string+0x1c>)
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	b13b      	cbz	r3, 801203e <rcutils_get_error_string+0x16>
 801202e:	4b06      	ldr	r3, [pc, #24]	@ (8012048 <rcutils_get_error_string+0x20>)
 8012030:	781a      	ldrb	r2, [r3, #0]
 8012032:	b90a      	cbnz	r2, 8012038 <rcutils_get_error_string+0x10>
 8012034:	2201      	movs	r2, #1
 8012036:	701a      	strb	r2, [r3, #0]
 8012038:	4b04      	ldr	r3, [pc, #16]	@ (801204c <rcutils_get_error_string+0x24>)
 801203a:	7818      	ldrb	r0, [r3, #0]
 801203c:	4770      	bx	lr
 801203e:	4b04      	ldr	r3, [pc, #16]	@ (8012050 <rcutils_get_error_string+0x28>)
 8012040:	7818      	ldrb	r0, [r3, #0]
 8012042:	4770      	bx	lr
 8012044:	200074c7 	.word	0x200074c7
 8012048:	200074d9 	.word	0x200074d9
 801204c:	200074d8 	.word	0x200074d8
 8012050:	0802076c 	.word	0x0802076c
 8012054:	00000000 	.word	0x00000000

08012058 <rcutils_reset_error>:
 8012058:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8012078 <rcutils_reset_error+0x20>
 801205c:	4a08      	ldr	r2, [pc, #32]	@ (8012080 <rcutils_reset_error+0x28>)
 801205e:	4809      	ldr	r0, [pc, #36]	@ (8012084 <rcutils_reset_error+0x2c>)
 8012060:	4909      	ldr	r1, [pc, #36]	@ (8012088 <rcutils_reset_error+0x30>)
 8012062:	2300      	movs	r3, #0
 8012064:	8013      	strh	r3, [r2, #0]
 8012066:	ed82 7b02 	vstr	d7, [r2, #8]
 801206a:	4a08      	ldr	r2, [pc, #32]	@ (801208c <rcutils_reset_error+0x34>)
 801206c:	7003      	strb	r3, [r0, #0]
 801206e:	700b      	strb	r3, [r1, #0]
 8012070:	7013      	strb	r3, [r2, #0]
 8012072:	4770      	bx	lr
 8012074:	f3af 8000 	nop.w
	...
 8012080:	200074c8 	.word	0x200074c8
 8012084:	200074d9 	.word	0x200074d9
 8012088:	200074d8 	.word	0x200074d8
 801208c:	200074c7 	.word	0x200074c7

08012090 <rcutils_format_string_limit>:
 8012090:	b40f      	push	{r0, r1, r2, r3}
 8012092:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012094:	b083      	sub	sp, #12
 8012096:	ac08      	add	r4, sp, #32
 8012098:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801209a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801209e:	b34e      	cbz	r6, 80120f4 <rcutils_format_string_limit+0x64>
 80120a0:	a808      	add	r0, sp, #32
 80120a2:	f7ff fef7 	bl	8011e94 <rcutils_allocator_is_valid>
 80120a6:	b328      	cbz	r0, 80120f4 <rcutils_format_string_limit+0x64>
 80120a8:	2100      	movs	r1, #0
 80120aa:	ab0f      	add	r3, sp, #60	@ 0x3c
 80120ac:	4632      	mov	r2, r6
 80120ae:	4608      	mov	r0, r1
 80120b0:	e9cd 3300 	strd	r3, r3, [sp]
 80120b4:	f000 f8f4 	bl	80122a0 <rcutils_vsnprintf>
 80120b8:	1c43      	adds	r3, r0, #1
 80120ba:	4605      	mov	r5, r0
 80120bc:	d01a      	beq.n	80120f4 <rcutils_format_string_limit+0x64>
 80120be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80120c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80120c2:	1c47      	adds	r7, r0, #1
 80120c4:	429f      	cmp	r7, r3
 80120c6:	bf84      	itt	hi
 80120c8:	461f      	movhi	r7, r3
 80120ca:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 80120ce:	4638      	mov	r0, r7
 80120d0:	9b08      	ldr	r3, [sp, #32]
 80120d2:	4798      	blx	r3
 80120d4:	4604      	mov	r4, r0
 80120d6:	b168      	cbz	r0, 80120f4 <rcutils_format_string_limit+0x64>
 80120d8:	9b01      	ldr	r3, [sp, #4]
 80120da:	4632      	mov	r2, r6
 80120dc:	4639      	mov	r1, r7
 80120de:	f000 f8df 	bl	80122a0 <rcutils_vsnprintf>
 80120e2:	2800      	cmp	r0, #0
 80120e4:	db02      	blt.n	80120ec <rcutils_format_string_limit+0x5c>
 80120e6:	2300      	movs	r3, #0
 80120e8:	5563      	strb	r3, [r4, r5]
 80120ea:	e004      	b.n	80120f6 <rcutils_format_string_limit+0x66>
 80120ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120ee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80120f0:	4620      	mov	r0, r4
 80120f2:	4798      	blx	r3
 80120f4:	2400      	movs	r4, #0
 80120f6:	4620      	mov	r0, r4
 80120f8:	b003      	add	sp, #12
 80120fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80120fe:	b004      	add	sp, #16
 8012100:	4770      	bx	lr
 8012102:	bf00      	nop

08012104 <rcutils_repl_str>:
 8012104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012108:	ed2d 8b02 	vpush	{d8}
 801210c:	b087      	sub	sp, #28
 801210e:	4680      	mov	r8, r0
 8012110:	4608      	mov	r0, r1
 8012112:	f8cd 8004 	str.w	r8, [sp, #4]
 8012116:	ee08 2a10 	vmov	s16, r2
 801211a:	468a      	mov	sl, r1
 801211c:	4699      	mov	r9, r3
 801211e:	f7ee f889 	bl	8000234 <strlen>
 8012122:	2600      	movs	r6, #0
 8012124:	4647      	mov	r7, r8
 8012126:	9002      	str	r0, [sp, #8]
 8012128:	46b3      	mov	fp, r6
 801212a:	2510      	movs	r5, #16
 801212c:	46b0      	mov	r8, r6
 801212e:	e01d      	b.n	801216c <rcutils_repl_str+0x68>
 8012130:	f10b 0b01 	add.w	fp, fp, #1
 8012134:	455e      	cmp	r6, fp
 8012136:	d211      	bcs.n	801215c <rcutils_repl_str+0x58>
 8012138:	442e      	add	r6, r5
 801213a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801213e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012142:	00b1      	lsls	r1, r6, #2
 8012144:	4798      	blx	r3
 8012146:	2800      	cmp	r0, #0
 8012148:	f000 8088 	beq.w	801225c <rcutils_repl_str+0x158>
 801214c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012150:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8012154:	4680      	mov	r8, r0
 8012156:	bf28      	it	cs
 8012158:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801215c:	9a01      	ldr	r2, [sp, #4]
 801215e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8012162:	1aa2      	subs	r2, r4, r2
 8012164:	f843 2c04 	str.w	r2, [r3, #-4]
 8012168:	9b02      	ldr	r3, [sp, #8]
 801216a:	18e7      	adds	r7, r4, r3
 801216c:	4651      	mov	r1, sl
 801216e:	4638      	mov	r0, r7
 8012170:	f00c f82d 	bl	801e1ce <strstr>
 8012174:	4604      	mov	r4, r0
 8012176:	4640      	mov	r0, r8
 8012178:	2c00      	cmp	r4, #0
 801217a:	d1d9      	bne.n	8012130 <rcutils_repl_str+0x2c>
 801217c:	46b8      	mov	r8, r7
 801217e:	4607      	mov	r7, r0
 8012180:	4640      	mov	r0, r8
 8012182:	f7ee f857 	bl	8000234 <strlen>
 8012186:	9b01      	ldr	r3, [sp, #4]
 8012188:	eba8 0303 	sub.w	r3, r8, r3
 801218c:	181c      	adds	r4, r3, r0
 801218e:	9404      	str	r4, [sp, #16]
 8012190:	f1bb 0f00 	cmp.w	fp, #0
 8012194:	d04a      	beq.n	801222c <rcutils_repl_str+0x128>
 8012196:	ee18 0a10 	vmov	r0, s16
 801219a:	f7ee f84b 	bl	8000234 <strlen>
 801219e:	9b02      	ldr	r3, [sp, #8]
 80121a0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80121a4:	1ac3      	subs	r3, r0, r3
 80121a6:	fb0b 4303 	mla	r3, fp, r3, r4
 80121aa:	461a      	mov	r2, r3
 80121ac:	9305      	str	r3, [sp, #20]
 80121ae:	4606      	mov	r6, r0
 80121b0:	f8d9 3000 	ldr.w	r3, [r9]
 80121b4:	1c50      	adds	r0, r2, #1
 80121b6:	4798      	blx	r3
 80121b8:	9003      	str	r0, [sp, #12]
 80121ba:	2800      	cmp	r0, #0
 80121bc:	d04f      	beq.n	801225e <rcutils_repl_str+0x15a>
 80121be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80121c2:	683a      	ldr	r2, [r7, #0]
 80121c4:	4641      	mov	r1, r8
 80121c6:	f00c f8a4 	bl	801e312 <memcpy>
 80121ca:	683d      	ldr	r5, [r7, #0]
 80121cc:	9b03      	ldr	r3, [sp, #12]
 80121ce:	9701      	str	r7, [sp, #4]
 80121d0:	46ba      	mov	sl, r7
 80121d2:	441d      	add	r5, r3
 80121d4:	9f02      	ldr	r7, [sp, #8]
 80121d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80121da:	2401      	movs	r4, #1
 80121dc:	46d1      	mov	r9, sl
 80121de:	ee18 aa10 	vmov	sl, s16
 80121e2:	e00a      	b.n	80121fa <rcutils_repl_str+0xf6>
 80121e4:	f8d9 5000 	ldr.w	r5, [r9]
 80121e8:	1aaa      	subs	r2, r5, r2
 80121ea:	1885      	adds	r5, r0, r2
 80121ec:	f00c f891 	bl	801e312 <memcpy>
 80121f0:	45a3      	cmp	fp, r4
 80121f2:	f104 0201 	add.w	r2, r4, #1
 80121f6:	d935      	bls.n	8012264 <rcutils_repl_str+0x160>
 80121f8:	4614      	mov	r4, r2
 80121fa:	4632      	mov	r2, r6
 80121fc:	4651      	mov	r1, sl
 80121fe:	4628      	mov	r0, r5
 8012200:	f00c f887 	bl	801e312 <memcpy>
 8012204:	f859 2b04 	ldr.w	r2, [r9], #4
 8012208:	45a3      	cmp	fp, r4
 801220a:	443a      	add	r2, r7
 801220c:	eb05 0006 	add.w	r0, r5, r6
 8012210:	eb08 0102 	add.w	r1, r8, r2
 8012214:	d1e6      	bne.n	80121e4 <rcutils_repl_str+0xe0>
 8012216:	9b04      	ldr	r3, [sp, #16]
 8012218:	1a9a      	subs	r2, r3, r2
 801221a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801221e:	f00c f878 	bl	801e312 <memcpy>
 8012222:	9a03      	ldr	r2, [sp, #12]
 8012224:	9905      	ldr	r1, [sp, #20]
 8012226:	2300      	movs	r3, #0
 8012228:	5453      	strb	r3, [r2, r1]
 801222a:	e00b      	b.n	8012244 <rcutils_repl_str+0x140>
 801222c:	4620      	mov	r0, r4
 801222e:	f8d9 3000 	ldr.w	r3, [r9]
 8012232:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012236:	3001      	adds	r0, #1
 8012238:	4798      	blx	r3
 801223a:	9003      	str	r0, [sp, #12]
 801223c:	b110      	cbz	r0, 8012244 <rcutils_repl_str+0x140>
 801223e:	9901      	ldr	r1, [sp, #4]
 8012240:	f00c f85f 	bl	801e302 <strcpy>
 8012244:	4638      	mov	r0, r7
 8012246:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801224a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801224e:	4798      	blx	r3
 8012250:	9803      	ldr	r0, [sp, #12]
 8012252:	b007      	add	sp, #28
 8012254:	ecbd 8b02 	vpop	{d8}
 8012258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801225c:	4647      	mov	r7, r8
 801225e:	2300      	movs	r3, #0
 8012260:	9303      	str	r3, [sp, #12]
 8012262:	e7ef      	b.n	8012244 <rcutils_repl_str+0x140>
 8012264:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012268:	e7db      	b.n	8012222 <rcutils_repl_str+0x11e>
 801226a:	bf00      	nop

0801226c <rcutils_snprintf>:
 801226c:	b40c      	push	{r2, r3}
 801226e:	b530      	push	{r4, r5, lr}
 8012270:	b083      	sub	sp, #12
 8012272:	ab06      	add	r3, sp, #24
 8012274:	f853 2b04 	ldr.w	r2, [r3], #4
 8012278:	9301      	str	r3, [sp, #4]
 801227a:	b152      	cbz	r2, 8012292 <rcutils_snprintf+0x26>
 801227c:	b138      	cbz	r0, 801228e <rcutils_snprintf+0x22>
 801227e:	b141      	cbz	r1, 8012292 <rcutils_snprintf+0x26>
 8012280:	f00b feb2 	bl	801dfe8 <vsniprintf>
 8012284:	b003      	add	sp, #12
 8012286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801228a:	b002      	add	sp, #8
 801228c:	4770      	bx	lr
 801228e:	2900      	cmp	r1, #0
 8012290:	d0f6      	beq.n	8012280 <rcutils_snprintf+0x14>
 8012292:	f00c f809 	bl	801e2a8 <__errno>
 8012296:	2316      	movs	r3, #22
 8012298:	6003      	str	r3, [r0, #0]
 801229a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801229e:	e7f1      	b.n	8012284 <rcutils_snprintf+0x18>

080122a0 <rcutils_vsnprintf>:
 80122a0:	b570      	push	{r4, r5, r6, lr}
 80122a2:	b13a      	cbz	r2, 80122b4 <rcutils_vsnprintf+0x14>
 80122a4:	b120      	cbz	r0, 80122b0 <rcutils_vsnprintf+0x10>
 80122a6:	b129      	cbz	r1, 80122b4 <rcutils_vsnprintf+0x14>
 80122a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122ac:	f00b be9c 	b.w	801dfe8 <vsniprintf>
 80122b0:	2900      	cmp	r1, #0
 80122b2:	d0f9      	beq.n	80122a8 <rcutils_vsnprintf+0x8>
 80122b4:	f00b fff8 	bl	801e2a8 <__errno>
 80122b8:	2316      	movs	r3, #22
 80122ba:	6003      	str	r3, [r0, #0]
 80122bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80122c0:	bd70      	pop	{r4, r5, r6, pc}
 80122c2:	bf00      	nop

080122c4 <rcutils_strdup>:
 80122c4:	b084      	sub	sp, #16
 80122c6:	b570      	push	{r4, r5, r6, lr}
 80122c8:	b082      	sub	sp, #8
 80122ca:	ac07      	add	r4, sp, #28
 80122cc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80122d0:	4605      	mov	r5, r0
 80122d2:	b1b0      	cbz	r0, 8012302 <rcutils_strdup+0x3e>
 80122d4:	f7ed ffae 	bl	8000234 <strlen>
 80122d8:	1c42      	adds	r2, r0, #1
 80122da:	9b07      	ldr	r3, [sp, #28]
 80122dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80122de:	9201      	str	r2, [sp, #4]
 80122e0:	4606      	mov	r6, r0
 80122e2:	4610      	mov	r0, r2
 80122e4:	4798      	blx	r3
 80122e6:	4604      	mov	r4, r0
 80122e8:	b128      	cbz	r0, 80122f6 <rcutils_strdup+0x32>
 80122ea:	9a01      	ldr	r2, [sp, #4]
 80122ec:	4629      	mov	r1, r5
 80122ee:	f00c f810 	bl	801e312 <memcpy>
 80122f2:	2300      	movs	r3, #0
 80122f4:	55a3      	strb	r3, [r4, r6]
 80122f6:	4620      	mov	r0, r4
 80122f8:	b002      	add	sp, #8
 80122fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122fe:	b004      	add	sp, #16
 8012300:	4770      	bx	lr
 8012302:	4604      	mov	r4, r0
 8012304:	e7f7      	b.n	80122f6 <rcutils_strdup+0x32>
 8012306:	bf00      	nop

08012308 <rcutils_strndup>:
 8012308:	b082      	sub	sp, #8
 801230a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801230c:	ac06      	add	r4, sp, #24
 801230e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012312:	4605      	mov	r5, r0
 8012314:	b188      	cbz	r0, 801233a <rcutils_strndup+0x32>
 8012316:	1c4f      	adds	r7, r1, #1
 8012318:	460e      	mov	r6, r1
 801231a:	4638      	mov	r0, r7
 801231c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801231e:	4790      	blx	r2
 8012320:	4604      	mov	r4, r0
 8012322:	b128      	cbz	r0, 8012330 <rcutils_strndup+0x28>
 8012324:	463a      	mov	r2, r7
 8012326:	4629      	mov	r1, r5
 8012328:	f00b fff3 	bl	801e312 <memcpy>
 801232c:	2300      	movs	r3, #0
 801232e:	55a3      	strb	r3, [r4, r6]
 8012330:	4620      	mov	r0, r4
 8012332:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012336:	b002      	add	sp, #8
 8012338:	4770      	bx	lr
 801233a:	4604      	mov	r4, r0
 801233c:	e7f8      	b.n	8012330 <rcutils_strndup+0x28>
 801233e:	bf00      	nop

08012340 <rcutils_get_zero_initialized_string_map>:
 8012340:	4b01      	ldr	r3, [pc, #4]	@ (8012348 <rcutils_get_zero_initialized_string_map+0x8>)
 8012342:	2000      	movs	r0, #0
 8012344:	6018      	str	r0, [r3, #0]
 8012346:	4770      	bx	lr
 8012348:	200074dc 	.word	0x200074dc

0801234c <rcutils_string_map_reserve>:
 801234c:	2800      	cmp	r0, #0
 801234e:	d05f      	beq.n	8012410 <rcutils_string_map_reserve+0xc4>
 8012350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012354:	460c      	mov	r4, r1
 8012356:	6801      	ldr	r1, [r0, #0]
 8012358:	b082      	sub	sp, #8
 801235a:	4605      	mov	r5, r0
 801235c:	b129      	cbz	r1, 801236a <rcutils_string_map_reserve+0x1e>
 801235e:	68cb      	ldr	r3, [r1, #12]
 8012360:	42a3      	cmp	r3, r4
 8012362:	d906      	bls.n	8012372 <rcutils_string_map_reserve+0x26>
 8012364:	461c      	mov	r4, r3
 8012366:	2900      	cmp	r1, #0
 8012368:	d1f9      	bne.n	801235e <rcutils_string_map_reserve+0x12>
 801236a:	201f      	movs	r0, #31
 801236c:	b002      	add	sp, #8
 801236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012372:	688b      	ldr	r3, [r1, #8]
 8012374:	42a3      	cmp	r3, r4
 8012376:	d047      	beq.n	8012408 <rcutils_string_map_reserve+0xbc>
 8012378:	6a0e      	ldr	r6, [r1, #32]
 801237a:	2c00      	cmp	r4, #0
 801237c:	d034      	beq.n	80123e8 <rcutils_string_map_reserve+0x9c>
 801237e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012382:	d243      	bcs.n	801240c <rcutils_string_map_reserve+0xc0>
 8012384:	00a7      	lsls	r7, r4, #2
 8012386:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801238a:	6808      	ldr	r0, [r1, #0]
 801238c:	4632      	mov	r2, r6
 801238e:	4639      	mov	r1, r7
 8012390:	47c0      	blx	r8
 8012392:	2800      	cmp	r0, #0
 8012394:	d03a      	beq.n	801240c <rcutils_string_map_reserve+0xc0>
 8012396:	682b      	ldr	r3, [r5, #0]
 8012398:	4632      	mov	r2, r6
 801239a:	6018      	str	r0, [r3, #0]
 801239c:	4639      	mov	r1, r7
 801239e:	6858      	ldr	r0, [r3, #4]
 80123a0:	47c0      	blx	r8
 80123a2:	2800      	cmp	r0, #0
 80123a4:	d032      	beq.n	801240c <rcutils_string_map_reserve+0xc0>
 80123a6:	682d      	ldr	r5, [r5, #0]
 80123a8:	68ab      	ldr	r3, [r5, #8]
 80123aa:	6068      	str	r0, [r5, #4]
 80123ac:	42a3      	cmp	r3, r4
 80123ae:	d226      	bcs.n	80123fe <rcutils_string_map_reserve+0xb2>
 80123b0:	682a      	ldr	r2, [r5, #0]
 80123b2:	eb00 0c07 	add.w	ip, r0, r7
 80123b6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80123ba:	45e6      	cmp	lr, ip
 80123bc:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80123c0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80123c4:	d203      	bcs.n	80123ce <rcutils_string_map_reserve+0x82>
 80123c6:	eb02 0c07 	add.w	ip, r2, r7
 80123ca:	4566      	cmp	r6, ip
 80123cc:	d322      	bcc.n	8012414 <rcutils_string_map_reserve+0xc8>
 80123ce:	1ae3      	subs	r3, r4, r3
 80123d0:	009a      	lsls	r2, r3, #2
 80123d2:	4670      	mov	r0, lr
 80123d4:	2100      	movs	r1, #0
 80123d6:	9201      	str	r2, [sp, #4]
 80123d8:	f00b fed2 	bl	801e180 <memset>
 80123dc:	9a01      	ldr	r2, [sp, #4]
 80123de:	2100      	movs	r1, #0
 80123e0:	4630      	mov	r0, r6
 80123e2:	f00b fecd 	bl	801e180 <memset>
 80123e6:	e00a      	b.n	80123fe <rcutils_string_map_reserve+0xb2>
 80123e8:	694f      	ldr	r7, [r1, #20]
 80123ea:	6808      	ldr	r0, [r1, #0]
 80123ec:	4631      	mov	r1, r6
 80123ee:	47b8      	blx	r7
 80123f0:	682b      	ldr	r3, [r5, #0]
 80123f2:	4631      	mov	r1, r6
 80123f4:	6858      	ldr	r0, [r3, #4]
 80123f6:	601c      	str	r4, [r3, #0]
 80123f8:	47b8      	blx	r7
 80123fa:	682d      	ldr	r5, [r5, #0]
 80123fc:	606c      	str	r4, [r5, #4]
 80123fe:	2000      	movs	r0, #0
 8012400:	60ac      	str	r4, [r5, #8]
 8012402:	b002      	add	sp, #8
 8012404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012408:	2000      	movs	r0, #0
 801240a:	e7af      	b.n	801236c <rcutils_string_map_reserve+0x20>
 801240c:	200a      	movs	r0, #10
 801240e:	e7ad      	b.n	801236c <rcutils_string_map_reserve+0x20>
 8012410:	200b      	movs	r0, #11
 8012412:	4770      	bx	lr
 8012414:	1f0b      	subs	r3, r1, #4
 8012416:	4418      	add	r0, r3
 8012418:	4413      	add	r3, r2
 801241a:	3a04      	subs	r2, #4
 801241c:	4417      	add	r7, r2
 801241e:	2200      	movs	r2, #0
 8012420:	f843 2f04 	str.w	r2, [r3, #4]!
 8012424:	42bb      	cmp	r3, r7
 8012426:	f840 2f04 	str.w	r2, [r0, #4]!
 801242a:	d1f9      	bne.n	8012420 <rcutils_string_map_reserve+0xd4>
 801242c:	e7e7      	b.n	80123fe <rcutils_string_map_reserve+0xb2>
 801242e:	bf00      	nop

08012430 <rcutils_string_map_init>:
 8012430:	b082      	sub	sp, #8
 8012432:	b570      	push	{r4, r5, r6, lr}
 8012434:	ac04      	add	r4, sp, #16
 8012436:	e884 000c 	stmia.w	r4, {r2, r3}
 801243a:	b380      	cbz	r0, 801249e <rcutils_string_map_init+0x6e>
 801243c:	6806      	ldr	r6, [r0, #0]
 801243e:	4604      	mov	r4, r0
 8012440:	b12e      	cbz	r6, 801244e <rcutils_string_map_init+0x1e>
 8012442:	251e      	movs	r5, #30
 8012444:	4628      	mov	r0, r5
 8012446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801244a:	b002      	add	sp, #8
 801244c:	4770      	bx	lr
 801244e:	a804      	add	r0, sp, #16
 8012450:	460d      	mov	r5, r1
 8012452:	f7ff fd1f 	bl	8011e94 <rcutils_allocator_is_valid>
 8012456:	b310      	cbz	r0, 801249e <rcutils_string_map_init+0x6e>
 8012458:	9b04      	ldr	r3, [sp, #16]
 801245a:	9908      	ldr	r1, [sp, #32]
 801245c:	2024      	movs	r0, #36	@ 0x24
 801245e:	4798      	blx	r3
 8012460:	6020      	str	r0, [r4, #0]
 8012462:	b310      	cbz	r0, 80124aa <rcutils_string_map_init+0x7a>
 8012464:	f10d 0e10 	add.w	lr, sp, #16
 8012468:	e9c0 6600 	strd	r6, r6, [r0]
 801246c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012470:	f100 0c10 	add.w	ip, r0, #16
 8012474:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012478:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801247c:	f8de 3000 	ldr.w	r3, [lr]
 8012480:	f8cc 3000 	str.w	r3, [ip]
 8012484:	4629      	mov	r1, r5
 8012486:	4620      	mov	r0, r4
 8012488:	f7ff ff60 	bl	801234c <rcutils_string_map_reserve>
 801248c:	4605      	mov	r5, r0
 801248e:	2800      	cmp	r0, #0
 8012490:	d0d8      	beq.n	8012444 <rcutils_string_map_init+0x14>
 8012492:	9b05      	ldr	r3, [sp, #20]
 8012494:	9908      	ldr	r1, [sp, #32]
 8012496:	6820      	ldr	r0, [r4, #0]
 8012498:	4798      	blx	r3
 801249a:	6026      	str	r6, [r4, #0]
 801249c:	e7d2      	b.n	8012444 <rcutils_string_map_init+0x14>
 801249e:	250b      	movs	r5, #11
 80124a0:	4628      	mov	r0, r5
 80124a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124a6:	b002      	add	sp, #8
 80124a8:	4770      	bx	lr
 80124aa:	250a      	movs	r5, #10
 80124ac:	e7ca      	b.n	8012444 <rcutils_string_map_init+0x14>
 80124ae:	bf00      	nop

080124b0 <rcutils_string_map_fini>:
 80124b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124b4:	b082      	sub	sp, #8
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d03a      	beq.n	8012530 <rcutils_string_map_fini+0x80>
 80124ba:	6804      	ldr	r4, [r0, #0]
 80124bc:	4606      	mov	r6, r0
 80124be:	2c00      	cmp	r4, #0
 80124c0:	d032      	beq.n	8012528 <rcutils_string_map_fini+0x78>
 80124c2:	68a3      	ldr	r3, [r4, #8]
 80124c4:	b32b      	cbz	r3, 8012512 <rcutils_string_map_fini+0x62>
 80124c6:	2500      	movs	r5, #0
 80124c8:	6822      	ldr	r2, [r4, #0]
 80124ca:	462f      	mov	r7, r5
 80124cc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80124d0:	b1e0      	cbz	r0, 801250c <rcutils_string_map_fini+0x5c>
 80124d2:	6a21      	ldr	r1, [r4, #32]
 80124d4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80124d8:	9101      	str	r1, [sp, #4]
 80124da:	47c0      	blx	r8
 80124dc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80124e0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80124e4:	9901      	ldr	r1, [sp, #4]
 80124e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80124ea:	47c0      	blx	r8
 80124ec:	68e3      	ldr	r3, [r4, #12]
 80124ee:	6862      	ldr	r2, [r4, #4]
 80124f0:	3b01      	subs	r3, #1
 80124f2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80124f6:	60e3      	str	r3, [r4, #12]
 80124f8:	6834      	ldr	r4, [r6, #0]
 80124fa:	68a3      	ldr	r3, [r4, #8]
 80124fc:	3501      	adds	r5, #1
 80124fe:	429d      	cmp	r5, r3
 8012500:	d207      	bcs.n	8012512 <rcutils_string_map_fini+0x62>
 8012502:	6822      	ldr	r2, [r4, #0]
 8012504:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012508:	2800      	cmp	r0, #0
 801250a:	d1e2      	bne.n	80124d2 <rcutils_string_map_fini+0x22>
 801250c:	3501      	adds	r5, #1
 801250e:	429d      	cmp	r5, r3
 8012510:	d3dc      	bcc.n	80124cc <rcutils_string_map_fini+0x1c>
 8012512:	2100      	movs	r1, #0
 8012514:	4630      	mov	r0, r6
 8012516:	f7ff ff19 	bl	801234c <rcutils_string_map_reserve>
 801251a:	4604      	mov	r4, r0
 801251c:	b920      	cbnz	r0, 8012528 <rcutils_string_map_fini+0x78>
 801251e:	6830      	ldr	r0, [r6, #0]
 8012520:	6943      	ldr	r3, [r0, #20]
 8012522:	6a01      	ldr	r1, [r0, #32]
 8012524:	4798      	blx	r3
 8012526:	6034      	str	r4, [r6, #0]
 8012528:	4620      	mov	r0, r4
 801252a:	b002      	add	sp, #8
 801252c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012530:	240b      	movs	r4, #11
 8012532:	4620      	mov	r0, r4
 8012534:	b002      	add	sp, #8
 8012536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801253a:	bf00      	nop

0801253c <rcutils_string_map_getn>:
 801253c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012540:	b300      	cbz	r0, 8012584 <rcutils_string_map_getn+0x48>
 8012542:	6807      	ldr	r7, [r0, #0]
 8012544:	b1ff      	cbz	r7, 8012586 <rcutils_string_map_getn+0x4a>
 8012546:	4688      	mov	r8, r1
 8012548:	b1e1      	cbz	r1, 8012584 <rcutils_string_map_getn+0x48>
 801254a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801254e:	683e      	ldr	r6, [r7, #0]
 8012550:	f1ba 0f00 	cmp.w	sl, #0
 8012554:	d016      	beq.n	8012584 <rcutils_string_map_getn+0x48>
 8012556:	4691      	mov	r9, r2
 8012558:	3e04      	subs	r6, #4
 801255a:	2400      	movs	r4, #0
 801255c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012560:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012564:	4628      	mov	r0, r5
 8012566:	3401      	adds	r4, #1
 8012568:	b155      	cbz	r5, 8012580 <rcutils_string_map_getn+0x44>
 801256a:	f7ed fe63 	bl	8000234 <strlen>
 801256e:	4548      	cmp	r0, r9
 8012570:	4602      	mov	r2, r0
 8012572:	4629      	mov	r1, r5
 8012574:	bf38      	it	cc
 8012576:	464a      	movcc	r2, r9
 8012578:	4640      	mov	r0, r8
 801257a:	f00b fe16 	bl	801e1aa <strncmp>
 801257e:	b128      	cbz	r0, 801258c <rcutils_string_map_getn+0x50>
 8012580:	45a2      	cmp	sl, r4
 8012582:	d1eb      	bne.n	801255c <rcutils_string_map_getn+0x20>
 8012584:	2700      	movs	r7, #0
 8012586:	4638      	mov	r0, r7
 8012588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f853 700b 	ldr.w	r7, [r3, fp]
 8012592:	4638      	mov	r0, r7
 8012594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012598 <rcutils_system_time_now>:
 8012598:	b308      	cbz	r0, 80125de <rcutils_system_time_now+0x46>
 801259a:	b570      	push	{r4, r5, r6, lr}
 801259c:	b084      	sub	sp, #16
 801259e:	4604      	mov	r4, r0
 80125a0:	4669      	mov	r1, sp
 80125a2:	2001      	movs	r0, #1
 80125a4:	f7f1 fca8 	bl	8003ef8 <clock_gettime>
 80125a8:	e9dd 3500 	ldrd	r3, r5, [sp]
 80125ac:	2d00      	cmp	r5, #0
 80125ae:	db13      	blt.n	80125d8 <rcutils_system_time_now+0x40>
 80125b0:	9902      	ldr	r1, [sp, #8]
 80125b2:	2900      	cmp	r1, #0
 80125b4:	db0d      	blt.n	80125d2 <rcutils_system_time_now+0x3a>
 80125b6:	4e0b      	ldr	r6, [pc, #44]	@ (80125e4 <rcutils_system_time_now+0x4c>)
 80125b8:	fba3 3206 	umull	r3, r2, r3, r6
 80125bc:	185b      	adds	r3, r3, r1
 80125be:	fb06 2205 	mla	r2, r6, r5, r2
 80125c2:	f04f 0000 	mov.w	r0, #0
 80125c6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80125ca:	e9c4 3200 	strd	r3, r2, [r4]
 80125ce:	b004      	add	sp, #16
 80125d0:	bd70      	pop	{r4, r5, r6, pc}
 80125d2:	ea53 0205 	orrs.w	r2, r3, r5
 80125d6:	d1ee      	bne.n	80125b6 <rcutils_system_time_now+0x1e>
 80125d8:	2002      	movs	r0, #2
 80125da:	b004      	add	sp, #16
 80125dc:	bd70      	pop	{r4, r5, r6, pc}
 80125de:	200b      	movs	r0, #11
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop
 80125e4:	3b9aca00 	.word	0x3b9aca00

080125e8 <rcutils_steady_time_now>:
 80125e8:	b308      	cbz	r0, 801262e <rcutils_steady_time_now+0x46>
 80125ea:	b570      	push	{r4, r5, r6, lr}
 80125ec:	b084      	sub	sp, #16
 80125ee:	4604      	mov	r4, r0
 80125f0:	4669      	mov	r1, sp
 80125f2:	2000      	movs	r0, #0
 80125f4:	f7f1 fc80 	bl	8003ef8 <clock_gettime>
 80125f8:	e9dd 3500 	ldrd	r3, r5, [sp]
 80125fc:	2d00      	cmp	r5, #0
 80125fe:	db13      	blt.n	8012628 <rcutils_steady_time_now+0x40>
 8012600:	9902      	ldr	r1, [sp, #8]
 8012602:	2900      	cmp	r1, #0
 8012604:	db0d      	blt.n	8012622 <rcutils_steady_time_now+0x3a>
 8012606:	4e0b      	ldr	r6, [pc, #44]	@ (8012634 <rcutils_steady_time_now+0x4c>)
 8012608:	fba3 3206 	umull	r3, r2, r3, r6
 801260c:	185b      	adds	r3, r3, r1
 801260e:	fb06 2205 	mla	r2, r6, r5, r2
 8012612:	f04f 0000 	mov.w	r0, #0
 8012616:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 801261a:	e9c4 3200 	strd	r3, r2, [r4]
 801261e:	b004      	add	sp, #16
 8012620:	bd70      	pop	{r4, r5, r6, pc}
 8012622:	ea53 0205 	orrs.w	r2, r3, r5
 8012626:	d1ee      	bne.n	8012606 <rcutils_steady_time_now+0x1e>
 8012628:	2002      	movs	r0, #2
 801262a:	b004      	add	sp, #16
 801262c:	bd70      	pop	{r4, r5, r6, pc}
 801262e:	200b      	movs	r0, #11
 8012630:	4770      	bx	lr
 8012632:	bf00      	nop
 8012634:	3b9aca00 	.word	0x3b9aca00

08012638 <rmw_get_zero_initialized_init_options>:
 8012638:	b510      	push	{r4, lr}
 801263a:	2238      	movs	r2, #56	@ 0x38
 801263c:	4604      	mov	r4, r0
 801263e:	2100      	movs	r1, #0
 8012640:	f00b fd9e 	bl	801e180 <memset>
 8012644:	f104 0010 	add.w	r0, r4, #16
 8012648:	f000 f80a 	bl	8012660 <rmw_get_default_security_options>
 801264c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012650:	60e3      	str	r3, [r4, #12]
 8012652:	4620      	mov	r0, r4
 8012654:	bd10      	pop	{r4, pc}
 8012656:	bf00      	nop

08012658 <rmw_get_default_publisher_options>:
 8012658:	2200      	movs	r2, #0
 801265a:	6002      	str	r2, [r0, #0]
 801265c:	7102      	strb	r2, [r0, #4]
 801265e:	4770      	bx	lr

08012660 <rmw_get_default_security_options>:
 8012660:	2200      	movs	r2, #0
 8012662:	7002      	strb	r2, [r0, #0]
 8012664:	6042      	str	r2, [r0, #4]
 8012666:	4770      	bx	lr

08012668 <rmw_validate_full_topic_name>:
 8012668:	2800      	cmp	r0, #0
 801266a:	d057      	beq.n	801271c <rmw_validate_full_topic_name+0xb4>
 801266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012670:	460d      	mov	r5, r1
 8012672:	2900      	cmp	r1, #0
 8012674:	d054      	beq.n	8012720 <rmw_validate_full_topic_name+0xb8>
 8012676:	4616      	mov	r6, r2
 8012678:	4604      	mov	r4, r0
 801267a:	f7ed fddb 	bl	8000234 <strlen>
 801267e:	b148      	cbz	r0, 8012694 <rmw_validate_full_topic_name+0x2c>
 8012680:	7823      	ldrb	r3, [r4, #0]
 8012682:	2b2f      	cmp	r3, #47	@ 0x2f
 8012684:	d00d      	beq.n	80126a2 <rmw_validate_full_topic_name+0x3a>
 8012686:	2302      	movs	r3, #2
 8012688:	602b      	str	r3, [r5, #0]
 801268a:	b13e      	cbz	r6, 801269c <rmw_validate_full_topic_name+0x34>
 801268c:	2000      	movs	r0, #0
 801268e:	6030      	str	r0, [r6, #0]
 8012690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012694:	2301      	movs	r3, #1
 8012696:	602b      	str	r3, [r5, #0]
 8012698:	2e00      	cmp	r6, #0
 801269a:	d1f7      	bne.n	801268c <rmw_validate_full_topic_name+0x24>
 801269c:	2000      	movs	r0, #0
 801269e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126a2:	1e43      	subs	r3, r0, #1
 80126a4:	5ce2      	ldrb	r2, [r4, r3]
 80126a6:	2a2f      	cmp	r2, #47	@ 0x2f
 80126a8:	d03c      	beq.n	8012724 <rmw_validate_full_topic_name+0xbc>
 80126aa:	1e63      	subs	r3, r4, #1
 80126ac:	eb03 0800 	add.w	r8, r3, r0
 80126b0:	f1c4 0e01 	rsb	lr, r4, #1
 80126b4:	eb0e 0703 	add.w	r7, lr, r3
 80126b8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80126bc:	f021 0220 	bic.w	r2, r1, #32
 80126c0:	3a41      	subs	r2, #65	@ 0x41
 80126c2:	2a19      	cmp	r2, #25
 80126c4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80126c8:	d90b      	bls.n	80126e2 <rmw_validate_full_topic_name+0x7a>
 80126ca:	295f      	cmp	r1, #95	@ 0x5f
 80126cc:	d009      	beq.n	80126e2 <rmw_validate_full_topic_name+0x7a>
 80126ce:	f1bc 0f0a 	cmp.w	ip, #10
 80126d2:	d906      	bls.n	80126e2 <rmw_validate_full_topic_name+0x7a>
 80126d4:	2304      	movs	r3, #4
 80126d6:	602b      	str	r3, [r5, #0]
 80126d8:	2e00      	cmp	r6, #0
 80126da:	d0df      	beq.n	801269c <rmw_validate_full_topic_name+0x34>
 80126dc:	6037      	str	r7, [r6, #0]
 80126de:	2000      	movs	r0, #0
 80126e0:	e7d6      	b.n	8012690 <rmw_validate_full_topic_name+0x28>
 80126e2:	4543      	cmp	r3, r8
 80126e4:	d1e6      	bne.n	80126b4 <rmw_validate_full_topic_name+0x4c>
 80126e6:	4f1a      	ldr	r7, [pc, #104]	@ (8012750 <rmw_validate_full_topic_name+0xe8>)
 80126e8:	2301      	movs	r3, #1
 80126ea:	e004      	b.n	80126f6 <rmw_validate_full_topic_name+0x8e>
 80126ec:	4298      	cmp	r0, r3
 80126ee:	f104 0401 	add.w	r4, r4, #1
 80126f2:	d91c      	bls.n	801272e <rmw_validate_full_topic_name+0xc6>
 80126f4:	4613      	mov	r3, r2
 80126f6:	4298      	cmp	r0, r3
 80126f8:	f103 0201 	add.w	r2, r3, #1
 80126fc:	d0f6      	beq.n	80126ec <rmw_validate_full_topic_name+0x84>
 80126fe:	7821      	ldrb	r1, [r4, #0]
 8012700:	292f      	cmp	r1, #47	@ 0x2f
 8012702:	d1f3      	bne.n	80126ec <rmw_validate_full_topic_name+0x84>
 8012704:	7861      	ldrb	r1, [r4, #1]
 8012706:	292f      	cmp	r1, #47	@ 0x2f
 8012708:	d01c      	beq.n	8012744 <rmw_validate_full_topic_name+0xdc>
 801270a:	5dc9      	ldrb	r1, [r1, r7]
 801270c:	0749      	lsls	r1, r1, #29
 801270e:	d5ed      	bpl.n	80126ec <rmw_validate_full_topic_name+0x84>
 8012710:	2206      	movs	r2, #6
 8012712:	602a      	str	r2, [r5, #0]
 8012714:	2e00      	cmp	r6, #0
 8012716:	d0c1      	beq.n	801269c <rmw_validate_full_topic_name+0x34>
 8012718:	6033      	str	r3, [r6, #0]
 801271a:	e7bf      	b.n	801269c <rmw_validate_full_topic_name+0x34>
 801271c:	200b      	movs	r0, #11
 801271e:	4770      	bx	lr
 8012720:	200b      	movs	r0, #11
 8012722:	e7b5      	b.n	8012690 <rmw_validate_full_topic_name+0x28>
 8012724:	2203      	movs	r2, #3
 8012726:	602a      	str	r2, [r5, #0]
 8012728:	2e00      	cmp	r6, #0
 801272a:	d1f5      	bne.n	8012718 <rmw_validate_full_topic_name+0xb0>
 801272c:	e7b6      	b.n	801269c <rmw_validate_full_topic_name+0x34>
 801272e:	28f7      	cmp	r0, #247	@ 0xf7
 8012730:	d802      	bhi.n	8012738 <rmw_validate_full_topic_name+0xd0>
 8012732:	2000      	movs	r0, #0
 8012734:	6028      	str	r0, [r5, #0]
 8012736:	e7ab      	b.n	8012690 <rmw_validate_full_topic_name+0x28>
 8012738:	2307      	movs	r3, #7
 801273a:	602b      	str	r3, [r5, #0]
 801273c:	2e00      	cmp	r6, #0
 801273e:	d0ad      	beq.n	801269c <rmw_validate_full_topic_name+0x34>
 8012740:	23f6      	movs	r3, #246	@ 0xf6
 8012742:	e7e9      	b.n	8012718 <rmw_validate_full_topic_name+0xb0>
 8012744:	2205      	movs	r2, #5
 8012746:	602a      	str	r2, [r5, #0]
 8012748:	2e00      	cmp	r6, #0
 801274a:	d1e5      	bne.n	8012718 <rmw_validate_full_topic_name+0xb0>
 801274c:	e7a6      	b.n	801269c <rmw_validate_full_topic_name+0x34>
 801274e:	bf00      	nop
 8012750:	080216be 	.word	0x080216be

08012754 <rmw_validate_namespace_with_size>:
 8012754:	b340      	cbz	r0, 80127a8 <rmw_validate_namespace_with_size+0x54>
 8012756:	b570      	push	{r4, r5, r6, lr}
 8012758:	4614      	mov	r4, r2
 801275a:	b0c2      	sub	sp, #264	@ 0x108
 801275c:	b332      	cbz	r2, 80127ac <rmw_validate_namespace_with_size+0x58>
 801275e:	2901      	cmp	r1, #1
 8012760:	460d      	mov	r5, r1
 8012762:	461e      	mov	r6, r3
 8012764:	d102      	bne.n	801276c <rmw_validate_namespace_with_size+0x18>
 8012766:	7803      	ldrb	r3, [r0, #0]
 8012768:	2b2f      	cmp	r3, #47	@ 0x2f
 801276a:	d012      	beq.n	8012792 <rmw_validate_namespace_with_size+0x3e>
 801276c:	aa01      	add	r2, sp, #4
 801276e:	4669      	mov	r1, sp
 8012770:	f7ff ff7a 	bl	8012668 <rmw_validate_full_topic_name>
 8012774:	b978      	cbnz	r0, 8012796 <rmw_validate_namespace_with_size+0x42>
 8012776:	9b00      	ldr	r3, [sp, #0]
 8012778:	b14b      	cbz	r3, 801278e <rmw_validate_namespace_with_size+0x3a>
 801277a:	2b07      	cmp	r3, #7
 801277c:	d007      	beq.n	801278e <rmw_validate_namespace_with_size+0x3a>
 801277e:	1e5a      	subs	r2, r3, #1
 8012780:	2a05      	cmp	r2, #5
 8012782:	d82b      	bhi.n	80127dc <rmw_validate_namespace_with_size+0x88>
 8012784:	e8df f002 	tbb	[pc, r2]
 8012788:	1e212427 	.word	0x1e212427
 801278c:	141b      	.short	0x141b
 801278e:	2df5      	cmp	r5, #245	@ 0xf5
 8012790:	d803      	bhi.n	801279a <rmw_validate_namespace_with_size+0x46>
 8012792:	2000      	movs	r0, #0
 8012794:	6020      	str	r0, [r4, #0]
 8012796:	b042      	add	sp, #264	@ 0x108
 8012798:	bd70      	pop	{r4, r5, r6, pc}
 801279a:	2307      	movs	r3, #7
 801279c:	6023      	str	r3, [r4, #0]
 801279e:	2e00      	cmp	r6, #0
 80127a0:	d0f9      	beq.n	8012796 <rmw_validate_namespace_with_size+0x42>
 80127a2:	23f4      	movs	r3, #244	@ 0xf4
 80127a4:	6033      	str	r3, [r6, #0]
 80127a6:	e7f6      	b.n	8012796 <rmw_validate_namespace_with_size+0x42>
 80127a8:	200b      	movs	r0, #11
 80127aa:	4770      	bx	lr
 80127ac:	200b      	movs	r0, #11
 80127ae:	e7f2      	b.n	8012796 <rmw_validate_namespace_with_size+0x42>
 80127b0:	2306      	movs	r3, #6
 80127b2:	6023      	str	r3, [r4, #0]
 80127b4:	2e00      	cmp	r6, #0
 80127b6:	d0ee      	beq.n	8012796 <rmw_validate_namespace_with_size+0x42>
 80127b8:	9b01      	ldr	r3, [sp, #4]
 80127ba:	6033      	str	r3, [r6, #0]
 80127bc:	e7eb      	b.n	8012796 <rmw_validate_namespace_with_size+0x42>
 80127be:	2305      	movs	r3, #5
 80127c0:	6023      	str	r3, [r4, #0]
 80127c2:	e7f7      	b.n	80127b4 <rmw_validate_namespace_with_size+0x60>
 80127c4:	2304      	movs	r3, #4
 80127c6:	6023      	str	r3, [r4, #0]
 80127c8:	e7f4      	b.n	80127b4 <rmw_validate_namespace_with_size+0x60>
 80127ca:	2303      	movs	r3, #3
 80127cc:	6023      	str	r3, [r4, #0]
 80127ce:	e7f1      	b.n	80127b4 <rmw_validate_namespace_with_size+0x60>
 80127d0:	2302      	movs	r3, #2
 80127d2:	6023      	str	r3, [r4, #0]
 80127d4:	e7ee      	b.n	80127b4 <rmw_validate_namespace_with_size+0x60>
 80127d6:	2301      	movs	r3, #1
 80127d8:	6023      	str	r3, [r4, #0]
 80127da:	e7eb      	b.n	80127b4 <rmw_validate_namespace_with_size+0x60>
 80127dc:	4a03      	ldr	r2, [pc, #12]	@ (80127ec <rmw_validate_namespace_with_size+0x98>)
 80127de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80127e2:	a802      	add	r0, sp, #8
 80127e4:	f7ff fd42 	bl	801226c <rcutils_snprintf>
 80127e8:	2001      	movs	r0, #1
 80127ea:	e7d4      	b.n	8012796 <rmw_validate_namespace_with_size+0x42>
 80127ec:	080200c4 	.word	0x080200c4

080127f0 <rmw_validate_namespace>:
 80127f0:	b168      	cbz	r0, 801280e <rmw_validate_namespace+0x1e>
 80127f2:	b570      	push	{r4, r5, r6, lr}
 80127f4:	460d      	mov	r5, r1
 80127f6:	4616      	mov	r6, r2
 80127f8:	4604      	mov	r4, r0
 80127fa:	f7ed fd1b 	bl	8000234 <strlen>
 80127fe:	4633      	mov	r3, r6
 8012800:	4601      	mov	r1, r0
 8012802:	462a      	mov	r2, r5
 8012804:	4620      	mov	r0, r4
 8012806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801280a:	f7ff bfa3 	b.w	8012754 <rmw_validate_namespace_with_size>
 801280e:	200b      	movs	r0, #11
 8012810:	4770      	bx	lr
 8012812:	bf00      	nop

08012814 <rmw_namespace_validation_result_string>:
 8012814:	2807      	cmp	r0, #7
 8012816:	bf9a      	itte	ls
 8012818:	4b02      	ldrls	r3, [pc, #8]	@ (8012824 <rmw_namespace_validation_result_string+0x10>)
 801281a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801281e:	4802      	ldrhi	r0, [pc, #8]	@ (8012828 <rmw_namespace_validation_result_string+0x14>)
 8012820:	4770      	bx	lr
 8012822:	bf00      	nop
 8012824:	080202bc 	.word	0x080202bc
 8012828:	08020114 	.word	0x08020114

0801282c <rmw_validate_node_name>:
 801282c:	2800      	cmp	r0, #0
 801282e:	d03b      	beq.n	80128a8 <rmw_validate_node_name+0x7c>
 8012830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012834:	460d      	mov	r5, r1
 8012836:	2900      	cmp	r1, #0
 8012838:	d038      	beq.n	80128ac <rmw_validate_node_name+0x80>
 801283a:	4616      	mov	r6, r2
 801283c:	4604      	mov	r4, r0
 801283e:	f7ed fcf9 	bl	8000234 <strlen>
 8012842:	b1e0      	cbz	r0, 801287e <rmw_validate_node_name+0x52>
 8012844:	1e63      	subs	r3, r4, #1
 8012846:	eb03 0800 	add.w	r8, r3, r0
 801284a:	f1c4 0101 	rsb	r1, r4, #1
 801284e:	18cf      	adds	r7, r1, r3
 8012850:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012854:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8012858:	f02e 0c20 	bic.w	ip, lr, #32
 801285c:	2a09      	cmp	r2, #9
 801285e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8012862:	d914      	bls.n	801288e <rmw_validate_node_name+0x62>
 8012864:	f1bc 0f19 	cmp.w	ip, #25
 8012868:	d911      	bls.n	801288e <rmw_validate_node_name+0x62>
 801286a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801286e:	d00e      	beq.n	801288e <rmw_validate_node_name+0x62>
 8012870:	2302      	movs	r3, #2
 8012872:	602b      	str	r3, [r5, #0]
 8012874:	b106      	cbz	r6, 8012878 <rmw_validate_node_name+0x4c>
 8012876:	6037      	str	r7, [r6, #0]
 8012878:	2000      	movs	r0, #0
 801287a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801287e:	2301      	movs	r3, #1
 8012880:	602b      	str	r3, [r5, #0]
 8012882:	2e00      	cmp	r6, #0
 8012884:	d0f8      	beq.n	8012878 <rmw_validate_node_name+0x4c>
 8012886:	2000      	movs	r0, #0
 8012888:	6030      	str	r0, [r6, #0]
 801288a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801288e:	4543      	cmp	r3, r8
 8012890:	d1dd      	bne.n	801284e <rmw_validate_node_name+0x22>
 8012892:	7822      	ldrb	r2, [r4, #0]
 8012894:	4b0d      	ldr	r3, [pc, #52]	@ (80128cc <rmw_validate_node_name+0xa0>)
 8012896:	5cd3      	ldrb	r3, [r2, r3]
 8012898:	f013 0304 	ands.w	r3, r3, #4
 801289c:	d110      	bne.n	80128c0 <rmw_validate_node_name+0x94>
 801289e:	28ff      	cmp	r0, #255	@ 0xff
 80128a0:	d806      	bhi.n	80128b0 <rmw_validate_node_name+0x84>
 80128a2:	602b      	str	r3, [r5, #0]
 80128a4:	4618      	mov	r0, r3
 80128a6:	e7e8      	b.n	801287a <rmw_validate_node_name+0x4e>
 80128a8:	200b      	movs	r0, #11
 80128aa:	4770      	bx	lr
 80128ac:	200b      	movs	r0, #11
 80128ae:	e7e4      	b.n	801287a <rmw_validate_node_name+0x4e>
 80128b0:	2204      	movs	r2, #4
 80128b2:	602a      	str	r2, [r5, #0]
 80128b4:	2e00      	cmp	r6, #0
 80128b6:	d0df      	beq.n	8012878 <rmw_validate_node_name+0x4c>
 80128b8:	22fe      	movs	r2, #254	@ 0xfe
 80128ba:	6032      	str	r2, [r6, #0]
 80128bc:	4618      	mov	r0, r3
 80128be:	e7dc      	b.n	801287a <rmw_validate_node_name+0x4e>
 80128c0:	2303      	movs	r3, #3
 80128c2:	602b      	str	r3, [r5, #0]
 80128c4:	2e00      	cmp	r6, #0
 80128c6:	d1de      	bne.n	8012886 <rmw_validate_node_name+0x5a>
 80128c8:	e7d6      	b.n	8012878 <rmw_validate_node_name+0x4c>
 80128ca:	bf00      	nop
 80128cc:	080216be 	.word	0x080216be

080128d0 <rmw_node_name_validation_result_string>:
 80128d0:	2804      	cmp	r0, #4
 80128d2:	bf9a      	itte	ls
 80128d4:	4b02      	ldrls	r3, [pc, #8]	@ (80128e0 <rmw_node_name_validation_result_string+0x10>)
 80128d6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80128da:	4802      	ldrhi	r0, [pc, #8]	@ (80128e4 <rmw_node_name_validation_result_string+0x14>)
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	080203c8 	.word	0x080203c8
 80128e4:	080202dc 	.word	0x080202dc

080128e8 <rmw_uros_set_custom_transport>:
 80128e8:	b470      	push	{r4, r5, r6}
 80128ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80128ee:	b162      	cbz	r2, 801290a <rmw_uros_set_custom_transport+0x22>
 80128f0:	b15b      	cbz	r3, 801290a <rmw_uros_set_custom_transport+0x22>
 80128f2:	b155      	cbz	r5, 801290a <rmw_uros_set_custom_transport+0x22>
 80128f4:	b14e      	cbz	r6, 801290a <rmw_uros_set_custom_transport+0x22>
 80128f6:	4c06      	ldr	r4, [pc, #24]	@ (8012910 <rmw_uros_set_custom_transport+0x28>)
 80128f8:	7020      	strb	r0, [r4, #0]
 80128fa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80128fe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012902:	6166      	str	r6, [r4, #20]
 8012904:	2000      	movs	r0, #0
 8012906:	bc70      	pop	{r4, r5, r6}
 8012908:	4770      	bx	lr
 801290a:	200b      	movs	r0, #11
 801290c:	bc70      	pop	{r4, r5, r6}
 801290e:	4770      	bx	lr
 8012910:	200074e0 	.word	0x200074e0

08012914 <rmw_create_client>:
 8012914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012918:	b091      	sub	sp, #68	@ 0x44
 801291a:	2800      	cmp	r0, #0
 801291c:	f000 80ba 	beq.w	8012a94 <rmw_create_client+0x180>
 8012920:	4689      	mov	r9, r1
 8012922:	2900      	cmp	r1, #0
 8012924:	f000 80b6 	beq.w	8012a94 <rmw_create_client+0x180>
 8012928:	4606      	mov	r6, r0
 801292a:	6800      	ldr	r0, [r0, #0]
 801292c:	4614      	mov	r4, r2
 801292e:	461d      	mov	r5, r3
 8012930:	f001 fd62 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 8012934:	2800      	cmp	r0, #0
 8012936:	f000 80ad 	beq.w	8012a94 <rmw_create_client+0x180>
 801293a:	2c00      	cmp	r4, #0
 801293c:	f000 80aa 	beq.w	8012a94 <rmw_create_client+0x180>
 8012940:	7823      	ldrb	r3, [r4, #0]
 8012942:	2b00      	cmp	r3, #0
 8012944:	f000 80a6 	beq.w	8012a94 <rmw_create_client+0x180>
 8012948:	2d00      	cmp	r5, #0
 801294a:	f000 80a3 	beq.w	8012a94 <rmw_create_client+0x180>
 801294e:	4854      	ldr	r0, [pc, #336]	@ (8012aa0 <rmw_create_client+0x18c>)
 8012950:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8012954:	f009 fd24 	bl	801c3a0 <get_memory>
 8012958:	4606      	mov	r6, r0
 801295a:	2800      	cmp	r0, #0
 801295c:	f000 809b 	beq.w	8012a96 <rmw_create_client+0x182>
 8012960:	6887      	ldr	r7, [r0, #8]
 8012962:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8012966:	f000 f90b 	bl	8012b80 <rmw_get_implementation_identifier>
 801296a:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 801296e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8012970:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8012974:	4620      	mov	r0, r4
 8012976:	f7ed fc5d 	bl	8000234 <strlen>
 801297a:	1c42      	adds	r2, r0, #1
 801297c:	2a3c      	cmp	r2, #60	@ 0x3c
 801297e:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 8012982:	f200 8084 	bhi.w	8012a8e <rmw_create_client+0x17a>
 8012986:	4621      	mov	r1, r4
 8012988:	4650      	mov	r0, sl
 801298a:	f00b fcc2 	bl	801e312 <memcpy>
 801298e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012992:	4629      	mov	r1, r5
 8012994:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8012998:	677b      	str	r3, [r7, #116]	@ 0x74
 801299a:	2250      	movs	r2, #80	@ 0x50
 801299c:	f107 0020 	add.w	r0, r7, #32
 80129a0:	f00b fcb7 	bl	801e312 <memcpy>
 80129a4:	493f      	ldr	r1, [pc, #252]	@ (8012aa4 <rmw_create_client+0x190>)
 80129a6:	4648      	mov	r0, r9
 80129a8:	f001 ff24 	bl	80147f4 <get_service_typesupport_handle>
 80129ac:	2800      	cmp	r0, #0
 80129ae:	d06e      	beq.n	8012a8e <rmw_create_client+0x17a>
 80129b0:	6843      	ldr	r3, [r0, #4]
 80129b2:	617b      	str	r3, [r7, #20]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d06a      	beq.n	8012a8e <rmw_create_client+0x17a>
 80129b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80129bc:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 8012aac <rmw_create_client+0x198>
 80129c0:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8012ab0 <rmw_create_client+0x19c>
 80129c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80129c8:	2107      	movs	r1, #7
 80129ca:	f8b3 05a0 	ldrh.w	r0, [r3, #1440]	@ 0x5a0
 80129ce:	1c42      	adds	r2, r0, #1
 80129d0:	f8a3 25a0 	strh.w	r2, [r3, #1440]	@ 0x5a0
 80129d4:	f003 fa40 	bl	8015e58 <uxr_object_id>
 80129d8:	2364      	movs	r3, #100	@ 0x64
 80129da:	6138      	str	r0, [r7, #16]
 80129dc:	4652      	mov	r2, sl
 80129de:	6978      	ldr	r0, [r7, #20]
 80129e0:	4649      	mov	r1, r9
 80129e2:	f001 fc57 	bl	8014294 <generate_service_types>
 80129e6:	2800      	cmp	r0, #0
 80129e8:	d051      	beq.n	8012a8e <rmw_create_client+0x17a>
 80129ea:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 8012ab4 <rmw_create_client+0x1a0>
 80129ee:	4a2e      	ldr	r2, [pc, #184]	@ (8012aa8 <rmw_create_client+0x194>)
 80129f0:	233c      	movs	r3, #60	@ 0x3c
 80129f2:	4659      	mov	r1, fp
 80129f4:	4620      	mov	r0, r4
 80129f6:	f001 fc1b 	bl	8014230 <generate_service_topics>
 80129fa:	2800      	cmp	r0, #0
 80129fc:	d047      	beq.n	8012a8e <rmw_create_client+0x17a>
 80129fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012a02:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8012a06:	a80c      	add	r0, sp, #48	@ 0x30
 8012a08:	4629      	mov	r1, r5
 8012a0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012a0e:	f001 fbf5 	bl	80141fc <convert_qos_profile>
 8012a12:	4a25      	ldr	r2, [pc, #148]	@ (8012aa8 <rmw_create_client+0x194>)
 8012a14:	9400      	str	r4, [sp, #0]
 8012a16:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012a1a:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8012a1e:	a80c      	add	r0, sp, #48	@ 0x30
 8012a20:	c803      	ldmia	r0, {r0, r1}
 8012a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a24:	9005      	str	r0, [sp, #20]
 8012a26:	9a08      	ldr	r2, [sp, #32]
 8012a28:	f8ad 1018 	strh.w	r1, [sp, #24]
 8012a2c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8012a30:	2306      	movs	r3, #6
 8012a32:	9307      	str	r3, [sp, #28]
 8012a34:	6811      	ldr	r1, [r2, #0]
 8012a36:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012a3a:	693a      	ldr	r2, [r7, #16]
 8012a3c:	f003 f8d6 	bl	8015bec <uxr_buffer_create_requester_bin>
 8012a40:	4602      	mov	r2, r0
 8012a42:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012a46:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012a4a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012a4e:	f001 fbb9 	bl	80141c4 <run_xrce_session>
 8012a52:	b1e0      	cbz	r0, 8012a8e <rmw_create_client+0x17a>
 8012a54:	7a2b      	ldrb	r3, [r5, #8]
 8012a56:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	2b02      	cmp	r3, #2
 8012a5e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012a62:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 8012a66:	bf0c      	ite	eq
 8012a68:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 8012a6c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 8012a70:	673a      	str	r2, [r7, #112]	@ 0x70
 8012a72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a74:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012a78:	ab0e      	add	r3, sp, #56	@ 0x38
 8012a7a:	9300      	str	r3, [sp, #0]
 8012a7c:	6811      	ldr	r1, [r2, #0]
 8012a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a80:	693a      	ldr	r2, [r7, #16]
 8012a82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012a86:	f003 fa17 	bl	8015eb8 <uxr_buffer_request_data>
 8012a8a:	8338      	strh	r0, [r7, #24]
 8012a8c:	e003      	b.n	8012a96 <rmw_create_client+0x182>
 8012a8e:	4630      	mov	r0, r6
 8012a90:	f001 fa82 	bl	8013f98 <rmw_uxrce_fini_client_memory>
 8012a94:	2600      	movs	r6, #0
 8012a96:	4630      	mov	r0, r6
 8012a98:	b011      	add	sp, #68	@ 0x44
 8012a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a9e:	bf00      	nop
 8012aa0:	200077b8 	.word	0x200077b8
 8012aa4:	0801f948 	.word	0x0801f948
 8012aa8:	2000759c 	.word	0x2000759c
 8012aac:	200075d8 	.word	0x200075d8
 8012ab0:	20007538 	.word	0x20007538
 8012ab4:	200074fc 	.word	0x200074fc

08012ab8 <rmw_destroy_client>:
 8012ab8:	b570      	push	{r4, r5, r6, lr}
 8012aba:	b128      	cbz	r0, 8012ac8 <rmw_destroy_client+0x10>
 8012abc:	4604      	mov	r4, r0
 8012abe:	6800      	ldr	r0, [r0, #0]
 8012ac0:	460d      	mov	r5, r1
 8012ac2:	f001 fc99 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 8012ac6:	b910      	cbnz	r0, 8012ace <rmw_destroy_client+0x16>
 8012ac8:	2401      	movs	r4, #1
 8012aca:	4620      	mov	r0, r4
 8012acc:	bd70      	pop	{r4, r5, r6, pc}
 8012ace:	6863      	ldr	r3, [r4, #4]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d0f9      	beq.n	8012ac8 <rmw_destroy_client+0x10>
 8012ad4:	2d00      	cmp	r5, #0
 8012ad6:	d0f7      	beq.n	8012ac8 <rmw_destroy_client+0x10>
 8012ad8:	6828      	ldr	r0, [r5, #0]
 8012ada:	f001 fc8d 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 8012ade:	2800      	cmp	r0, #0
 8012ae0:	d0f2      	beq.n	8012ac8 <rmw_destroy_client+0x10>
 8012ae2:	686e      	ldr	r6, [r5, #4]
 8012ae4:	2e00      	cmp	r6, #0
 8012ae6:	d0ef      	beq.n	8012ac8 <rmw_destroy_client+0x10>
 8012ae8:	6864      	ldr	r4, [r4, #4]
 8012aea:	6932      	ldr	r2, [r6, #16]
 8012aec:	6920      	ldr	r0, [r4, #16]
 8012aee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012af2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012af6:	6819      	ldr	r1, [r3, #0]
 8012af8:	f003 fa18 	bl	8015f2c <uxr_buffer_cancel_data>
 8012afc:	4602      	mov	r2, r0
 8012afe:	6920      	ldr	r0, [r4, #16]
 8012b00:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012b04:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012b08:	f001 fb5c 	bl	80141c4 <run_xrce_session>
 8012b0c:	6920      	ldr	r0, [r4, #16]
 8012b0e:	6932      	ldr	r2, [r6, #16]
 8012b10:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012b14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012b18:	6819      	ldr	r1, [r3, #0]
 8012b1a:	f002 ff0d 	bl	8015938 <uxr_buffer_delete_entity>
 8012b1e:	4602      	mov	r2, r0
 8012b20:	6920      	ldr	r0, [r4, #16]
 8012b22:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012b26:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012b2a:	f001 fb4b 	bl	80141c4 <run_xrce_session>
 8012b2e:	2800      	cmp	r0, #0
 8012b30:	4628      	mov	r0, r5
 8012b32:	bf14      	ite	ne
 8012b34:	2400      	movne	r4, #0
 8012b36:	2402      	moveq	r4, #2
 8012b38:	f001 fa2e 	bl	8013f98 <rmw_uxrce_fini_client_memory>
 8012b3c:	e7c5      	b.n	8012aca <rmw_destroy_client+0x12>
 8012b3e:	bf00      	nop

08012b40 <rmw_client_request_publisher_get_actual_qos>:
 8012b40:	b150      	cbz	r0, 8012b58 <rmw_client_request_publisher_get_actual_qos+0x18>
 8012b42:	b508      	push	{r3, lr}
 8012b44:	460b      	mov	r3, r1
 8012b46:	b149      	cbz	r1, 8012b5c <rmw_client_request_publisher_get_actual_qos+0x1c>
 8012b48:	6841      	ldr	r1, [r0, #4]
 8012b4a:	2250      	movs	r2, #80	@ 0x50
 8012b4c:	3120      	adds	r1, #32
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f00b fbdf 	bl	801e312 <memcpy>
 8012b54:	2000      	movs	r0, #0
 8012b56:	bd08      	pop	{r3, pc}
 8012b58:	200b      	movs	r0, #11
 8012b5a:	4770      	bx	lr
 8012b5c:	200b      	movs	r0, #11
 8012b5e:	bd08      	pop	{r3, pc}

08012b60 <rmw_client_response_subscription_get_actual_qos>:
 8012b60:	b150      	cbz	r0, 8012b78 <rmw_client_response_subscription_get_actual_qos+0x18>
 8012b62:	b508      	push	{r3, lr}
 8012b64:	460b      	mov	r3, r1
 8012b66:	b149      	cbz	r1, 8012b7c <rmw_client_response_subscription_get_actual_qos+0x1c>
 8012b68:	6841      	ldr	r1, [r0, #4]
 8012b6a:	2250      	movs	r2, #80	@ 0x50
 8012b6c:	3120      	adds	r1, #32
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f00b fbcf 	bl	801e312 <memcpy>
 8012b74:	2000      	movs	r0, #0
 8012b76:	bd08      	pop	{r3, pc}
 8012b78:	200b      	movs	r0, #11
 8012b7a:	4770      	bx	lr
 8012b7c:	200b      	movs	r0, #11
 8012b7e:	bd08      	pop	{r3, pc}

08012b80 <rmw_get_implementation_identifier>:
 8012b80:	4b01      	ldr	r3, [pc, #4]	@ (8012b88 <rmw_get_implementation_identifier+0x8>)
 8012b82:	6818      	ldr	r0, [r3, #0]
 8012b84:	4770      	bx	lr
 8012b86:	bf00      	nop
 8012b88:	08021548 	.word	0x08021548

08012b8c <rmw_init_options_init>:
 8012b8c:	b084      	sub	sp, #16
 8012b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b90:	b083      	sub	sp, #12
 8012b92:	ad09      	add	r5, sp, #36	@ 0x24
 8012b94:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012b98:	b130      	cbz	r0, 8012ba8 <rmw_init_options_init+0x1c>
 8012b9a:	4604      	mov	r4, r0
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	f7ff f979 	bl	8011e94 <rcutils_allocator_is_valid>
 8012ba2:	b108      	cbz	r0, 8012ba8 <rmw_init_options_init+0x1c>
 8012ba4:	68a6      	ldr	r6, [r4, #8]
 8012ba6:	b12e      	cbz	r6, 8012bb4 <rmw_init_options_init+0x28>
 8012ba8:	200b      	movs	r0, #11
 8012baa:	b003      	add	sp, #12
 8012bac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012bb0:	b004      	add	sp, #16
 8012bb2:	4770      	bx	lr
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	e9c4 2300 	strd	r2, r3, [r4]
 8012bbc:	4b22      	ldr	r3, [pc, #136]	@ (8012c48 <rmw_init_options_init+0xbc>)
 8012bbe:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8012c58 <rmw_init_options_init+0xcc>
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	60a3      	str	r3, [r4, #8]
 8012bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012bc8:	f104 0c20 	add.w	ip, r4, #32
 8012bcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bd0:	466f      	mov	r7, sp
 8012bd2:	682b      	ldr	r3, [r5, #0]
 8012bd4:	f8cc 3000 	str.w	r3, [ip]
 8012bd8:	4638      	mov	r0, r7
 8012bda:	f8c4 e01c 	str.w	lr, [r4, #28]
 8012bde:	60e6      	str	r6, [r4, #12]
 8012be0:	f7ff fd3e 	bl	8012660 <rmw_get_default_security_options>
 8012be4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012be8:	f104 0310 	add.w	r3, r4, #16
 8012bec:	e883 0003 	stmia.w	r3, {r0, r1}
 8012bf0:	2203      	movs	r2, #3
 8012bf2:	4816      	ldr	r0, [pc, #88]	@ (8012c4c <rmw_init_options_init+0xc0>)
 8012bf4:	4916      	ldr	r1, [pc, #88]	@ (8012c50 <rmw_init_options_init+0xc4>)
 8012bf6:	7626      	strb	r6, [r4, #24]
 8012bf8:	f001 f90e 	bl	8013e18 <rmw_uxrce_init_init_options_impl_memory>
 8012bfc:	4813      	ldr	r0, [pc, #76]	@ (8012c4c <rmw_init_options_init+0xc0>)
 8012bfe:	f009 fbcf 	bl	801c3a0 <get_memory>
 8012c02:	b1f0      	cbz	r0, 8012c42 <rmw_init_options_init+0xb6>
 8012c04:	4a13      	ldr	r2, [pc, #76]	@ (8012c54 <rmw_init_options_init+0xc8>)
 8012c06:	6883      	ldr	r3, [r0, #8]
 8012c08:	6851      	ldr	r1, [r2, #4]
 8012c0a:	7810      	ldrb	r0, [r2, #0]
 8012c0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c0e:	7418      	strb	r0, [r3, #16]
 8012c10:	6159      	str	r1, [r3, #20]
 8012c12:	68d1      	ldr	r1, [r2, #12]
 8012c14:	61d9      	str	r1, [r3, #28]
 8012c16:	6911      	ldr	r1, [r2, #16]
 8012c18:	6219      	str	r1, [r3, #32]
 8012c1a:	6951      	ldr	r1, [r2, #20]
 8012c1c:	6892      	ldr	r2, [r2, #8]
 8012c1e:	619a      	str	r2, [r3, #24]
 8012c20:	6259      	str	r1, [r3, #36]	@ 0x24
 8012c22:	f005 f99f 	bl	8017f64 <uxr_nanos>
 8012c26:	f00a fef5 	bl	801da14 <srand>
 8012c2a:	f00a ff21 	bl	801da70 <rand>
 8012c2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012c30:	6298      	str	r0, [r3, #40]	@ 0x28
 8012c32:	2800      	cmp	r0, #0
 8012c34:	d0f9      	beq.n	8012c2a <rmw_init_options_init+0x9e>
 8012c36:	2000      	movs	r0, #0
 8012c38:	b003      	add	sp, #12
 8012c3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012c3e:	b004      	add	sp, #16
 8012c40:	4770      	bx	lr
 8012c42:	2001      	movs	r0, #1
 8012c44:	e7b1      	b.n	8012baa <rmw_init_options_init+0x1e>
 8012c46:	bf00      	nop
 8012c48:	08021548 	.word	0x08021548
 8012c4c:	2000c394 	.word	0x2000c394
 8012c50:	20007b68 	.word	0x20007b68
 8012c54:	200074e0 	.word	0x200074e0
 8012c58:	0801fe3c 	.word	0x0801fe3c

08012c5c <rmw_init_options_copy>:
 8012c5c:	b570      	push	{r4, r5, r6, lr}
 8012c5e:	b158      	cbz	r0, 8012c78 <rmw_init_options_copy+0x1c>
 8012c60:	460d      	mov	r5, r1
 8012c62:	b149      	cbz	r1, 8012c78 <rmw_init_options_copy+0x1c>
 8012c64:	4604      	mov	r4, r0
 8012c66:	6880      	ldr	r0, [r0, #8]
 8012c68:	b120      	cbz	r0, 8012c74 <rmw_init_options_copy+0x18>
 8012c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8012ce4 <rmw_init_options_copy+0x88>)
 8012c6c:	6819      	ldr	r1, [r3, #0]
 8012c6e:	f7ed fad7 	bl	8000220 <strcmp>
 8012c72:	bb90      	cbnz	r0, 8012cda <rmw_init_options_copy+0x7e>
 8012c74:	68ab      	ldr	r3, [r5, #8]
 8012c76:	b113      	cbz	r3, 8012c7e <rmw_init_options_copy+0x22>
 8012c78:	250b      	movs	r5, #11
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	bd70      	pop	{r4, r5, r6, pc}
 8012c7e:	4623      	mov	r3, r4
 8012c80:	462a      	mov	r2, r5
 8012c82:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8012c86:	f8d3 c000 	ldr.w	ip, [r3]
 8012c8a:	6858      	ldr	r0, [r3, #4]
 8012c8c:	6899      	ldr	r1, [r3, #8]
 8012c8e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8012c92:	f8c2 e00c 	str.w	lr, [r2, #12]
 8012c96:	3310      	adds	r3, #16
 8012c98:	42b3      	cmp	r3, r6
 8012c9a:	f8c2 c000 	str.w	ip, [r2]
 8012c9e:	6050      	str	r0, [r2, #4]
 8012ca0:	6091      	str	r1, [r2, #8]
 8012ca2:	f102 0210 	add.w	r2, r2, #16
 8012ca6:	d1ee      	bne.n	8012c86 <rmw_init_options_copy+0x2a>
 8012ca8:	6819      	ldr	r1, [r3, #0]
 8012caa:	685b      	ldr	r3, [r3, #4]
 8012cac:	480e      	ldr	r0, [pc, #56]	@ (8012ce8 <rmw_init_options_copy+0x8c>)
 8012cae:	6053      	str	r3, [r2, #4]
 8012cb0:	6011      	str	r1, [r2, #0]
 8012cb2:	f009 fb75 	bl	801c3a0 <get_memory>
 8012cb6:	b198      	cbz	r0, 8012ce0 <rmw_init_options_copy+0x84>
 8012cb8:	6883      	ldr	r3, [r0, #8]
 8012cba:	636b      	str	r3, [r5, #52]	@ 0x34
 8012cbc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8012cbe:	f102 0c10 	add.w	ip, r2, #16
 8012cc2:	f103 0410 	add.w	r4, r3, #16
 8012cc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ccc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8012cd0:	2500      	movs	r5, #0
 8012cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012cd6:	4628      	mov	r0, r5
 8012cd8:	bd70      	pop	{r4, r5, r6, pc}
 8012cda:	250c      	movs	r5, #12
 8012cdc:	4628      	mov	r0, r5
 8012cde:	bd70      	pop	{r4, r5, r6, pc}
 8012ce0:	2501      	movs	r5, #1
 8012ce2:	e7ca      	b.n	8012c7a <rmw_init_options_copy+0x1e>
 8012ce4:	08021548 	.word	0x08021548
 8012ce8:	2000c394 	.word	0x2000c394

08012cec <rmw_init_options_fini>:
 8012cec:	2800      	cmp	r0, #0
 8012cee:	d03d      	beq.n	8012d6c <rmw_init_options_fini+0x80>
 8012cf0:	b510      	push	{r4, lr}
 8012cf2:	4604      	mov	r4, r0
 8012cf4:	b08e      	sub	sp, #56	@ 0x38
 8012cf6:	3020      	adds	r0, #32
 8012cf8:	f7ff f8cc 	bl	8011e94 <rcutils_allocator_is_valid>
 8012cfc:	b360      	cbz	r0, 8012d58 <rmw_init_options_fini+0x6c>
 8012cfe:	68a0      	ldr	r0, [r4, #8]
 8012d00:	b120      	cbz	r0, 8012d0c <rmw_init_options_fini+0x20>
 8012d02:	4b1c      	ldr	r3, [pc, #112]	@ (8012d74 <rmw_init_options_fini+0x88>)
 8012d04:	6819      	ldr	r1, [r3, #0]
 8012d06:	f7ed fa8b 	bl	8000220 <strcmp>
 8012d0a:	bb68      	cbnz	r0, 8012d68 <rmw_init_options_fini+0x7c>
 8012d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8012d78 <rmw_init_options_fini+0x8c>)
 8012d0e:	6819      	ldr	r1, [r3, #0]
 8012d10:	b331      	cbz	r1, 8012d60 <rmw_init_options_fini+0x74>
 8012d12:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8012d14:	e001      	b.n	8012d1a <rmw_init_options_fini+0x2e>
 8012d16:	6849      	ldr	r1, [r1, #4]
 8012d18:	b311      	cbz	r1, 8012d60 <rmw_init_options_fini+0x74>
 8012d1a:	688b      	ldr	r3, [r1, #8]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d1fa      	bne.n	8012d16 <rmw_init_options_fini+0x2a>
 8012d20:	4815      	ldr	r0, [pc, #84]	@ (8012d78 <rmw_init_options_fini+0x8c>)
 8012d22:	f009 fb4d 	bl	801c3c0 <put_memory>
 8012d26:	4668      	mov	r0, sp
 8012d28:	f7ff fc86 	bl	8012638 <rmw_get_zero_initialized_init_options>
 8012d2c:	46ee      	mov	lr, sp
 8012d2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d32:	46a4      	mov	ip, r4
 8012d34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d48:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012d4c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012d50:	2300      	movs	r3, #0
 8012d52:	4618      	mov	r0, r3
 8012d54:	b00e      	add	sp, #56	@ 0x38
 8012d56:	bd10      	pop	{r4, pc}
 8012d58:	230b      	movs	r3, #11
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	b00e      	add	sp, #56	@ 0x38
 8012d5e:	bd10      	pop	{r4, pc}
 8012d60:	2301      	movs	r3, #1
 8012d62:	4618      	mov	r0, r3
 8012d64:	b00e      	add	sp, #56	@ 0x38
 8012d66:	bd10      	pop	{r4, pc}
 8012d68:	230c      	movs	r3, #12
 8012d6a:	e7f2      	b.n	8012d52 <rmw_init_options_fini+0x66>
 8012d6c:	230b      	movs	r3, #11
 8012d6e:	4618      	mov	r0, r3
 8012d70:	4770      	bx	lr
 8012d72:	bf00      	nop
 8012d74:	08021548 	.word	0x08021548
 8012d78:	2000c394 	.word	0x2000c394

08012d7c <rmw_init>:
 8012d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d80:	b083      	sub	sp, #12
 8012d82:	2800      	cmp	r0, #0
 8012d84:	f000 80d3 	beq.w	8012f2e <rmw_init+0x1b2>
 8012d88:	460e      	mov	r6, r1
 8012d8a:	2900      	cmp	r1, #0
 8012d8c:	f000 80cf 	beq.w	8012f2e <rmw_init+0x1b2>
 8012d90:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012d92:	4605      	mov	r5, r0
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	f000 80ca 	beq.w	8012f2e <rmw_init+0x1b2>
 8012d9a:	4b78      	ldr	r3, [pc, #480]	@ (8012f7c <rmw_init+0x200>)
 8012d9c:	6880      	ldr	r0, [r0, #8]
 8012d9e:	681f      	ldr	r7, [r3, #0]
 8012da0:	b128      	cbz	r0, 8012dae <rmw_init+0x32>
 8012da2:	4639      	mov	r1, r7
 8012da4:	f7ed fa3c 	bl	8000220 <strcmp>
 8012da8:	2800      	cmp	r0, #0
 8012daa:	f040 80ca 	bne.w	8012f42 <rmw_init+0x1c6>
 8012dae:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012db2:	4c73      	ldr	r4, [pc, #460]	@ (8012f80 <rmw_init+0x204>)
 8012db4:	4973      	ldr	r1, [pc, #460]	@ (8012f84 <rmw_init+0x208>)
 8012db6:	4874      	ldr	r0, [pc, #464]	@ (8012f88 <rmw_init+0x20c>)
 8012db8:	60b7      	str	r7, [r6, #8]
 8012dba:	e9c6 2300 	strd	r2, r3, [r6]
 8012dbe:	68eb      	ldr	r3, [r5, #12]
 8012dc0:	64b3      	str	r3, [r6, #72]	@ 0x48
 8012dc2:	2201      	movs	r2, #1
 8012dc4:	f000 ffc8 	bl	8013d58 <rmw_uxrce_init_session_memory>
 8012dc8:	4620      	mov	r0, r4
 8012dca:	4970      	ldr	r1, [pc, #448]	@ (8012f8c <rmw_init+0x210>)
 8012dcc:	2204      	movs	r2, #4
 8012dce:	f001 f803 	bl	8013dd8 <rmw_uxrce_init_static_input_buffer_memory>
 8012dd2:	f04f 0800 	mov.w	r8, #0
 8012dd6:	486c      	ldr	r0, [pc, #432]	@ (8012f88 <rmw_init+0x20c>)
 8012dd8:	f884 800d 	strb.w	r8, [r4, #13]
 8012ddc:	f009 fae0 	bl	801c3a0 <get_memory>
 8012de0:	2800      	cmp	r0, #0
 8012de2:	f000 80a9 	beq.w	8012f38 <rmw_init+0x1bc>
 8012de6:	6884      	ldr	r4, [r0, #8]
 8012de8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8012dea:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8012dec:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012df0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012df4:	9101      	str	r1, [sp, #4]
 8012df6:	6a00      	ldr	r0, [r0, #32]
 8012df8:	9000      	str	r0, [sp, #0]
 8012dfa:	f104 0910 	add.w	r9, r4, #16
 8012dfe:	4661      	mov	r1, ip
 8012e00:	4648      	mov	r0, r9
 8012e02:	f002 ffe3 	bl	8015dcc <uxr_set_custom_transport_callbacks>
 8012e06:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8012e0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012e0e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8012e12:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8012e16:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8012e1a:	495d      	ldr	r1, [pc, #372]	@ (8012f90 <rmw_init+0x214>)
 8012e1c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8012e20:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8012e24:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8012e28:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8012e2c:	4859      	ldr	r0, [pc, #356]	@ (8012f94 <rmw_init+0x218>)
 8012e2e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8012e32:	2201      	movs	r2, #1
 8012e34:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8012e36:	f000 ff6f 	bl	8013d18 <rmw_uxrce_init_node_memory>
 8012e3a:	4957      	ldr	r1, [pc, #348]	@ (8012f98 <rmw_init+0x21c>)
 8012e3c:	4857      	ldr	r0, [pc, #348]	@ (8012f9c <rmw_init+0x220>)
 8012e3e:	2205      	movs	r2, #5
 8012e40:	f000 ff4a 	bl	8013cd8 <rmw_uxrce_init_subscription_memory>
 8012e44:	4956      	ldr	r1, [pc, #344]	@ (8012fa0 <rmw_init+0x224>)
 8012e46:	4857      	ldr	r0, [pc, #348]	@ (8012fa4 <rmw_init+0x228>)
 8012e48:	220a      	movs	r2, #10
 8012e4a:	f000 ff25 	bl	8013c98 <rmw_uxrce_init_publisher_memory>
 8012e4e:	4956      	ldr	r1, [pc, #344]	@ (8012fa8 <rmw_init+0x22c>)
 8012e50:	4856      	ldr	r0, [pc, #344]	@ (8012fac <rmw_init+0x230>)
 8012e52:	2202      	movs	r2, #2
 8012e54:	f000 fee0 	bl	8013c18 <rmw_uxrce_init_service_memory>
 8012e58:	4955      	ldr	r1, [pc, #340]	@ (8012fb0 <rmw_init+0x234>)
 8012e5a:	4856      	ldr	r0, [pc, #344]	@ (8012fb4 <rmw_init+0x238>)
 8012e5c:	2204      	movs	r2, #4
 8012e5e:	f000 fefb 	bl	8013c58 <rmw_uxrce_init_client_memory>
 8012e62:	4955      	ldr	r1, [pc, #340]	@ (8012fb8 <rmw_init+0x23c>)
 8012e64:	4855      	ldr	r0, [pc, #340]	@ (8012fbc <rmw_init+0x240>)
 8012e66:	220f      	movs	r2, #15
 8012e68:	f000 ff96 	bl	8013d98 <rmw_uxrce_init_topic_memory>
 8012e6c:	4954      	ldr	r1, [pc, #336]	@ (8012fc0 <rmw_init+0x244>)
 8012e6e:	4855      	ldr	r0, [pc, #340]	@ (8012fc4 <rmw_init+0x248>)
 8012e70:	2203      	movs	r2, #3
 8012e72:	f000 ffd1 	bl	8013e18 <rmw_uxrce_init_init_options_impl_memory>
 8012e76:	4954      	ldr	r1, [pc, #336]	@ (8012fc8 <rmw_init+0x24c>)
 8012e78:	4854      	ldr	r0, [pc, #336]	@ (8012fcc <rmw_init+0x250>)
 8012e7a:	2204      	movs	r2, #4
 8012e7c:	f000 ffec 	bl	8013e58 <rmw_uxrce_init_wait_set_memory>
 8012e80:	4953      	ldr	r1, [pc, #332]	@ (8012fd0 <rmw_init+0x254>)
 8012e82:	4854      	ldr	r0, [pc, #336]	@ (8012fd4 <rmw_init+0x258>)
 8012e84:	2204      	movs	r2, #4
 8012e86:	f001 f807 	bl	8013e98 <rmw_uxrce_init_guard_condition_memory>
 8012e8a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8012e8c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8012e8e:	4642      	mov	r2, r8
 8012e90:	f000 fe7c 	bl	8013b8c <rmw_uxrce_transport_init>
 8012e94:	4607      	mov	r7, r0
 8012e96:	2800      	cmp	r0, #0
 8012e98:	d158      	bne.n	8012f4c <rmw_init+0x1d0>
 8012e9a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8012e9c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8012ea0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012ea2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	f003 f9c6 	bl	8016238 <uxr_init_session>
 8012eac:	494a      	ldr	r1, [pc, #296]	@ (8012fd8 <rmw_init+0x25c>)
 8012eae:	4622      	mov	r2, r4
 8012eb0:	4628      	mov	r0, r5
 8012eb2:	f003 f9e5 	bl	8016280 <uxr_set_topic_callback>
 8012eb6:	4949      	ldr	r1, [pc, #292]	@ (8012fdc <rmw_init+0x260>)
 8012eb8:	463a      	mov	r2, r7
 8012eba:	4628      	mov	r0, r5
 8012ebc:	f003 f9dc 	bl	8016278 <uxr_set_status_callback>
 8012ec0:	4947      	ldr	r1, [pc, #284]	@ (8012fe0 <rmw_init+0x264>)
 8012ec2:	463a      	mov	r2, r7
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	f003 f9df 	bl	8016288 <uxr_set_request_callback>
 8012eca:	4946      	ldr	r1, [pc, #280]	@ (8012fe4 <rmw_init+0x268>)
 8012ecc:	463a      	mov	r2, r7
 8012ece:	4628      	mov	r0, r5
 8012ed0:	f003 f9de 	bl	8016290 <uxr_set_reply_callback>
 8012ed4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012ed8:	2304      	movs	r3, #4
 8012eda:	0092      	lsls	r2, r2, #2
 8012edc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	f003 fa13 	bl	801630c <uxr_create_input_reliable_stream>
 8012ee6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012eea:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8012eee:	0092      	lsls	r2, r2, #2
 8012ef0:	2304      	movs	r3, #4
 8012ef2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	f003 f9e0 	bl	80162bc <uxr_create_output_reliable_stream>
 8012efc:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8012f00:	4628      	mov	r0, r5
 8012f02:	f003 f9fd 	bl	8016300 <uxr_create_input_best_effort_stream>
 8012f06:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8012f0a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8012f0e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012f12:	3114      	adds	r1, #20
 8012f14:	4628      	mov	r0, r5
 8012f16:	f003 f9bf 	bl	8016298 <uxr_create_output_best_effort_stream>
 8012f1a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8012f1e:	4628      	mov	r0, r5
 8012f20:	f003 ffb2 	bl	8016e88 <uxr_create_session>
 8012f24:	b1f8      	cbz	r0, 8012f66 <rmw_init+0x1ea>
 8012f26:	4638      	mov	r0, r7
 8012f28:	b003      	add	sp, #12
 8012f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f2e:	270b      	movs	r7, #11
 8012f30:	4638      	mov	r0, r7
 8012f32:	b003      	add	sp, #12
 8012f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f38:	2701      	movs	r7, #1
 8012f3a:	4638      	mov	r0, r7
 8012f3c:	b003      	add	sp, #12
 8012f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f42:	270c      	movs	r7, #12
 8012f44:	4638      	mov	r0, r7
 8012f46:	b003      	add	sp, #12
 8012f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f4c:	4648      	mov	r0, r9
 8012f4e:	f002 ff7f 	bl	8015e50 <uxr_close_custom_transport>
 8012f52:	480d      	ldr	r0, [pc, #52]	@ (8012f88 <rmw_init+0x20c>)
 8012f54:	4621      	mov	r1, r4
 8012f56:	f009 fa33 	bl	801c3c0 <put_memory>
 8012f5a:	4638      	mov	r0, r7
 8012f5c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8012f60:	b003      	add	sp, #12
 8012f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f66:	4648      	mov	r0, r9
 8012f68:	f002 ff72 	bl	8015e50 <uxr_close_custom_transport>
 8012f6c:	4806      	ldr	r0, [pc, #24]	@ (8012f88 <rmw_init+0x20c>)
 8012f6e:	4621      	mov	r1, r4
 8012f70:	f009 fa26 	bl	801c3c0 <put_memory>
 8012f74:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8012f76:	2701      	movs	r7, #1
 8012f78:	e7d5      	b.n	8012f26 <rmw_init+0x1aa>
 8012f7a:	bf00      	nop
 8012f7c:	08021548 	.word	0x08021548
 8012f80:	2000c3e4 	.word	0x2000c3e4
 8012f84:	20008690 	.word	0x20008690
 8012f88:	2000c3d4 	.word	0x2000c3d4
 8012f8c:	20009c38 	.word	0x20009c38
 8012f90:	20007bec 	.word	0x20007bec
 8012f94:	2000c3a4 	.word	0x2000c3a4
 8012f98:	2000bd38 	.word	0x2000bd38
 8012f9c:	2000c3f4 	.word	0x2000c3f4
 8012fa0:	20007c90 	.word	0x20007c90
 8012fa4:	2000c3b4 	.word	0x2000c3b4
 8012fa8:	20008500 	.word	0x20008500
 8012fac:	2000c3c4 	.word	0x2000c3c4
 8012fb0:	200077c8 	.word	0x200077c8
 8012fb4:	200077b8 	.word	0x200077b8
 8012fb8:	2000c170 	.word	0x2000c170
 8012fbc:	2000c404 	.word	0x2000c404
 8012fc0:	20007b68 	.word	0x20007b68
 8012fc4:	2000c394 	.word	0x2000c394
 8012fc8:	2000c314 	.word	0x2000c314
 8012fcc:	2000c414 	.word	0x2000c414
 8012fd0:	20007ae8 	.word	0x20007ae8
 8012fd4:	2000c384 	.word	0x2000c384
 8012fd8:	0801c1d9 	.word	0x0801c1d9
 8012fdc:	0801c1d1 	.word	0x0801c1d1
 8012fe0:	0801c271 	.word	0x0801c271
 8012fe4:	0801c30d 	.word	0x0801c30d

08012fe8 <rmw_context_fini>:
 8012fe8:	4b17      	ldr	r3, [pc, #92]	@ (8013048 <rmw_context_fini+0x60>)
 8012fea:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8012fec:	b570      	push	{r4, r5, r6, lr}
 8012fee:	681c      	ldr	r4, [r3, #0]
 8012ff0:	4605      	mov	r5, r0
 8012ff2:	b334      	cbz	r4, 8013042 <rmw_context_fini+0x5a>
 8012ff4:	2600      	movs	r6, #0
 8012ff6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012ffa:	6902      	ldr	r2, [r0, #16]
 8012ffc:	428a      	cmp	r2, r1
 8012ffe:	d018      	beq.n	8013032 <rmw_context_fini+0x4a>
 8013000:	2c00      	cmp	r4, #0
 8013002:	d1f8      	bne.n	8012ff6 <rmw_context_fini+0xe>
 8013004:	b189      	cbz	r1, 801302a <rmw_context_fini+0x42>
 8013006:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801300a:	789b      	ldrb	r3, [r3, #2]
 801300c:	2b01      	cmp	r3, #1
 801300e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8013012:	bf14      	ite	ne
 8013014:	210a      	movne	r1, #10
 8013016:	2100      	moveq	r1, #0
 8013018:	f003 ff0e 	bl	8016e38 <uxr_delete_session_retries>
 801301c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801301e:	f000 ff5b 	bl	8013ed8 <rmw_uxrce_fini_session_memory>
 8013022:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013024:	3010      	adds	r0, #16
 8013026:	f002 ff13 	bl	8015e50 <uxr_close_custom_transport>
 801302a:	2300      	movs	r3, #0
 801302c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801302e:	4630      	mov	r0, r6
 8013030:	bd70      	pop	{r4, r5, r6, pc}
 8013032:	3018      	adds	r0, #24
 8013034:	f000 f89c 	bl	8013170 <rmw_destroy_node>
 8013038:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801303a:	4606      	mov	r6, r0
 801303c:	2c00      	cmp	r4, #0
 801303e:	d1da      	bne.n	8012ff6 <rmw_context_fini+0xe>
 8013040:	e7e0      	b.n	8013004 <rmw_context_fini+0x1c>
 8013042:	4626      	mov	r6, r4
 8013044:	e7de      	b.n	8013004 <rmw_context_fini+0x1c>
 8013046:	bf00      	nop
 8013048:	2000c3a4 	.word	0x2000c3a4

0801304c <create_node>:
 801304c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013050:	b083      	sub	sp, #12
 8013052:	2b00      	cmp	r3, #0
 8013054:	d05f      	beq.n	8013116 <create_node+0xca>
 8013056:	4606      	mov	r6, r0
 8013058:	4835      	ldr	r0, [pc, #212]	@ (8013130 <create_node+0xe4>)
 801305a:	460f      	mov	r7, r1
 801305c:	4690      	mov	r8, r2
 801305e:	461d      	mov	r5, r3
 8013060:	f009 f99e 	bl	801c3a0 <get_memory>
 8013064:	2800      	cmp	r0, #0
 8013066:	d056      	beq.n	8013116 <create_node+0xca>
 8013068:	6884      	ldr	r4, [r0, #8]
 801306a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801306c:	6123      	str	r3, [r4, #16]
 801306e:	f7ff fd87 	bl	8012b80 <rmw_get_implementation_identifier>
 8013072:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8013076:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801307a:	f8c4 9020 	str.w	r9, [r4, #32]
 801307e:	4630      	mov	r0, r6
 8013080:	f7ed f8d8 	bl	8000234 <strlen>
 8013084:	1c42      	adds	r2, r0, #1
 8013086:	2a3c      	cmp	r2, #60	@ 0x3c
 8013088:	f104 0518 	add.w	r5, r4, #24
 801308c:	d840      	bhi.n	8013110 <create_node+0xc4>
 801308e:	4648      	mov	r0, r9
 8013090:	4631      	mov	r1, r6
 8013092:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8013096:	f00b f93c 	bl	801e312 <memcpy>
 801309a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801309e:	4638      	mov	r0, r7
 80130a0:	f7ed f8c8 	bl	8000234 <strlen>
 80130a4:	1c42      	adds	r2, r0, #1
 80130a6:	2a3c      	cmp	r2, #60	@ 0x3c
 80130a8:	d832      	bhi.n	8013110 <create_node+0xc4>
 80130aa:	4639      	mov	r1, r7
 80130ac:	4648      	mov	r0, r9
 80130ae:	f00b f930 	bl	801e312 <memcpy>
 80130b2:	6923      	ldr	r3, [r4, #16]
 80130b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80130b8:	2101      	movs	r1, #1
 80130ba:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80130be:	1842      	adds	r2, r0, r1
 80130c0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80130c4:	f002 fec8 	bl	8015e58 <uxr_object_id>
 80130c8:	6160      	str	r0, [r4, #20]
 80130ca:	783b      	ldrb	r3, [r7, #0]
 80130cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80130ce:	d127      	bne.n	8013120 <create_node+0xd4>
 80130d0:	787b      	ldrb	r3, [r7, #1]
 80130d2:	bb2b      	cbnz	r3, 8013120 <create_node+0xd4>
 80130d4:	4a17      	ldr	r2, [pc, #92]	@ (8013134 <create_node+0xe8>)
 80130d6:	4818      	ldr	r0, [pc, #96]	@ (8013138 <create_node+0xec>)
 80130d8:	4633      	mov	r3, r6
 80130da:	213c      	movs	r1, #60	@ 0x3c
 80130dc:	f00a fee2 	bl	801dea4 <sniprintf>
 80130e0:	6920      	ldr	r0, [r4, #16]
 80130e2:	4915      	ldr	r1, [pc, #84]	@ (8013138 <create_node+0xec>)
 80130e4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80130e8:	9100      	str	r1, [sp, #0]
 80130ea:	2106      	movs	r1, #6
 80130ec:	9101      	str	r1, [sp, #4]
 80130ee:	6811      	ldr	r1, [r2, #0]
 80130f0:	6962      	ldr	r2, [r4, #20]
 80130f2:	fa1f f388 	uxth.w	r3, r8
 80130f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130fa:	f002 fc69 	bl	80159d0 <uxr_buffer_create_participant_bin>
 80130fe:	4602      	mov	r2, r0
 8013100:	6920      	ldr	r0, [r4, #16]
 8013102:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013106:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801310a:	f001 f85b 	bl	80141c4 <run_xrce_session>
 801310e:	b918      	cbnz	r0, 8013118 <create_node+0xcc>
 8013110:	4628      	mov	r0, r5
 8013112:	f000 fee7 	bl	8013ee4 <rmw_uxrce_fini_node_memory>
 8013116:	2500      	movs	r5, #0
 8013118:	4628      	mov	r0, r5
 801311a:	b003      	add	sp, #12
 801311c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013120:	4a06      	ldr	r2, [pc, #24]	@ (801313c <create_node+0xf0>)
 8013122:	9600      	str	r6, [sp, #0]
 8013124:	463b      	mov	r3, r7
 8013126:	213c      	movs	r1, #60	@ 0x3c
 8013128:	4803      	ldr	r0, [pc, #12]	@ (8013138 <create_node+0xec>)
 801312a:	f00a febb 	bl	801dea4 <sniprintf>
 801312e:	e7d7      	b.n	80130e0 <create_node+0x94>
 8013130:	2000c3a4 	.word	0x2000c3a4
 8013134:	080203ec 	.word	0x080203ec
 8013138:	2000763c 	.word	0x2000763c
 801313c:	0801fe4c 	.word	0x0801fe4c

08013140 <rmw_create_node>:
 8013140:	b199      	cbz	r1, 801316a <rmw_create_node+0x2a>
 8013142:	780b      	ldrb	r3, [r1, #0]
 8013144:	468c      	mov	ip, r1
 8013146:	b183      	cbz	r3, 801316a <rmw_create_node+0x2a>
 8013148:	b410      	push	{r4}
 801314a:	4614      	mov	r4, r2
 801314c:	b14a      	cbz	r2, 8013162 <rmw_create_node+0x22>
 801314e:	7813      	ldrb	r3, [r2, #0]
 8013150:	b13b      	cbz	r3, 8013162 <rmw_create_node+0x22>
 8013152:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8013154:	4603      	mov	r3, r0
 8013156:	4621      	mov	r1, r4
 8013158:	4660      	mov	r0, ip
 801315a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801315e:	f7ff bf75 	b.w	801304c <create_node>
 8013162:	2000      	movs	r0, #0
 8013164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013168:	4770      	bx	lr
 801316a:	2000      	movs	r0, #0
 801316c:	4770      	bx	lr
 801316e:	bf00      	nop

08013170 <rmw_destroy_node>:
 8013170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013172:	b328      	cbz	r0, 80131c0 <rmw_destroy_node+0x50>
 8013174:	4607      	mov	r7, r0
 8013176:	6800      	ldr	r0, [r0, #0]
 8013178:	b120      	cbz	r0, 8013184 <rmw_destroy_node+0x14>
 801317a:	4b36      	ldr	r3, [pc, #216]	@ (8013254 <rmw_destroy_node+0xe4>)
 801317c:	6819      	ldr	r1, [r3, #0]
 801317e:	f7ed f84f 	bl	8000220 <strcmp>
 8013182:	b9e8      	cbnz	r0, 80131c0 <rmw_destroy_node+0x50>
 8013184:	687d      	ldr	r5, [r7, #4]
 8013186:	b1dd      	cbz	r5, 80131c0 <rmw_destroy_node+0x50>
 8013188:	4b33      	ldr	r3, [pc, #204]	@ (8013258 <rmw_destroy_node+0xe8>)
 801318a:	681c      	ldr	r4, [r3, #0]
 801318c:	2c00      	cmp	r4, #0
 801318e:	d05f      	beq.n	8013250 <rmw_destroy_node+0xe0>
 8013190:	2600      	movs	r6, #0
 8013192:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013196:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801319a:	429d      	cmp	r5, r3
 801319c:	d013      	beq.n	80131c6 <rmw_destroy_node+0x56>
 801319e:	2c00      	cmp	r4, #0
 80131a0:	d1f7      	bne.n	8013192 <rmw_destroy_node+0x22>
 80131a2:	4b2e      	ldr	r3, [pc, #184]	@ (801325c <rmw_destroy_node+0xec>)
 80131a4:	681c      	ldr	r4, [r3, #0]
 80131a6:	b1c4      	cbz	r4, 80131da <rmw_destroy_node+0x6a>
 80131a8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80131ac:	6a0b      	ldr	r3, [r1, #32]
 80131ae:	429d      	cmp	r5, r3
 80131b0:	d1f9      	bne.n	80131a6 <rmw_destroy_node+0x36>
 80131b2:	317c      	adds	r1, #124	@ 0x7c
 80131b4:	4638      	mov	r0, r7
 80131b6:	f000 fc89 	bl	8013acc <rmw_destroy_subscription>
 80131ba:	2801      	cmp	r0, #1
 80131bc:	4606      	mov	r6, r0
 80131be:	d1f2      	bne.n	80131a6 <rmw_destroy_node+0x36>
 80131c0:	2601      	movs	r6, #1
 80131c2:	4630      	mov	r0, r6
 80131c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c6:	3184      	adds	r1, #132	@ 0x84
 80131c8:	4638      	mov	r0, r7
 80131ca:	f000 f9a5 	bl	8013518 <rmw_destroy_publisher>
 80131ce:	2801      	cmp	r0, #1
 80131d0:	4606      	mov	r6, r0
 80131d2:	d0f5      	beq.n	80131c0 <rmw_destroy_node+0x50>
 80131d4:	2c00      	cmp	r4, #0
 80131d6:	d1dc      	bne.n	8013192 <rmw_destroy_node+0x22>
 80131d8:	e7e3      	b.n	80131a2 <rmw_destroy_node+0x32>
 80131da:	4b21      	ldr	r3, [pc, #132]	@ (8013260 <rmw_destroy_node+0xf0>)
 80131dc:	681c      	ldr	r4, [r3, #0]
 80131de:	b16c      	cbz	r4, 80131fc <rmw_destroy_node+0x8c>
 80131e0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80131e4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80131e6:	429d      	cmp	r5, r3
 80131e8:	d1f9      	bne.n	80131de <rmw_destroy_node+0x6e>
 80131ea:	317c      	adds	r1, #124	@ 0x7c
 80131ec:	4638      	mov	r0, r7
 80131ee:	f000 fc09 	bl	8013a04 <rmw_destroy_service>
 80131f2:	2801      	cmp	r0, #1
 80131f4:	4606      	mov	r6, r0
 80131f6:	d0e3      	beq.n	80131c0 <rmw_destroy_node+0x50>
 80131f8:	2c00      	cmp	r4, #0
 80131fa:	d1f1      	bne.n	80131e0 <rmw_destroy_node+0x70>
 80131fc:	4b19      	ldr	r3, [pc, #100]	@ (8013264 <rmw_destroy_node+0xf4>)
 80131fe:	681c      	ldr	r4, [r3, #0]
 8013200:	b16c      	cbz	r4, 801321e <rmw_destroy_node+0xae>
 8013202:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013206:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8013208:	429d      	cmp	r5, r3
 801320a:	d1f9      	bne.n	8013200 <rmw_destroy_node+0x90>
 801320c:	317c      	adds	r1, #124	@ 0x7c
 801320e:	4638      	mov	r0, r7
 8013210:	f7ff fc52 	bl	8012ab8 <rmw_destroy_client>
 8013214:	2801      	cmp	r0, #1
 8013216:	4606      	mov	r6, r0
 8013218:	d0d2      	beq.n	80131c0 <rmw_destroy_node+0x50>
 801321a:	2c00      	cmp	r4, #0
 801321c:	d1f1      	bne.n	8013202 <rmw_destroy_node+0x92>
 801321e:	6928      	ldr	r0, [r5, #16]
 8013220:	696a      	ldr	r2, [r5, #20]
 8013222:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013226:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801322a:	6819      	ldr	r1, [r3, #0]
 801322c:	f002 fb84 	bl	8015938 <uxr_buffer_delete_entity>
 8013230:	4602      	mov	r2, r0
 8013232:	6928      	ldr	r0, [r5, #16]
 8013234:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013238:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801323c:	f000 ffc2 	bl	80141c4 <run_xrce_session>
 8013240:	2800      	cmp	r0, #0
 8013242:	bf08      	it	eq
 8013244:	2602      	moveq	r6, #2
 8013246:	4638      	mov	r0, r7
 8013248:	f000 fe4c 	bl	8013ee4 <rmw_uxrce_fini_node_memory>
 801324c:	4630      	mov	r0, r6
 801324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013250:	4626      	mov	r6, r4
 8013252:	e7a6      	b.n	80131a2 <rmw_destroy_node+0x32>
 8013254:	08021548 	.word	0x08021548
 8013258:	2000c3b4 	.word	0x2000c3b4
 801325c:	2000c3f4 	.word	0x2000c3f4
 8013260:	2000c3c4 	.word	0x2000c3c4
 8013264:	200077b8 	.word	0x200077b8

08013268 <rmw_node_get_graph_guard_condition>:
 8013268:	6843      	ldr	r3, [r0, #4]
 801326a:	6918      	ldr	r0, [r3, #16]
 801326c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8013270:	4770      	bx	lr
 8013272:	bf00      	nop

08013274 <flush_session>:
 8013274:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8013276:	f003 bc41 	b.w	8016afc <uxr_run_session_until_confirm_delivery>
 801327a:	bf00      	nop

0801327c <rmw_publish>:
 801327c:	2800      	cmp	r0, #0
 801327e:	d053      	beq.n	8013328 <rmw_publish+0xac>
 8013280:	b570      	push	{r4, r5, r6, lr}
 8013282:	460d      	mov	r5, r1
 8013284:	b08e      	sub	sp, #56	@ 0x38
 8013286:	2900      	cmp	r1, #0
 8013288:	d04b      	beq.n	8013322 <rmw_publish+0xa6>
 801328a:	4604      	mov	r4, r0
 801328c:	6800      	ldr	r0, [r0, #0]
 801328e:	f001 f8b3 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 8013292:	2800      	cmp	r0, #0
 8013294:	d045      	beq.n	8013322 <rmw_publish+0xa6>
 8013296:	6866      	ldr	r6, [r4, #4]
 8013298:	2e00      	cmp	r6, #0
 801329a:	d042      	beq.n	8013322 <rmw_publish+0xa6>
 801329c:	69b4      	ldr	r4, [r6, #24]
 801329e:	4628      	mov	r0, r5
 80132a0:	6923      	ldr	r3, [r4, #16]
 80132a2:	4798      	blx	r3
 80132a4:	69f3      	ldr	r3, [r6, #28]
 80132a6:	9005      	str	r0, [sp, #20]
 80132a8:	b113      	cbz	r3, 80132b0 <rmw_publish+0x34>
 80132aa:	a805      	add	r0, sp, #20
 80132ac:	4798      	blx	r3
 80132ae:	9805      	ldr	r0, [sp, #20]
 80132b0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80132b4:	691b      	ldr	r3, [r3, #16]
 80132b6:	9000      	str	r0, [sp, #0]
 80132b8:	6972      	ldr	r2, [r6, #20]
 80132ba:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80132bc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80132c0:	ab06      	add	r3, sp, #24
 80132c2:	f004 feef 	bl	80180a4 <uxr_prepare_output_stream>
 80132c6:	b1d8      	cbz	r0, 8013300 <rmw_publish+0x84>
 80132c8:	68a3      	ldr	r3, [r4, #8]
 80132ca:	a906      	add	r1, sp, #24
 80132cc:	4628      	mov	r0, r5
 80132ce:	4798      	blx	r3
 80132d0:	6a33      	ldr	r3, [r6, #32]
 80132d2:	4604      	mov	r4, r0
 80132d4:	b10b      	cbz	r3, 80132da <rmw_publish+0x5e>
 80132d6:	a806      	add	r0, sp, #24
 80132d8:	4798      	blx	r3
 80132da:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80132de:	2b01      	cmp	r3, #1
 80132e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80132e4:	d022      	beq.n	801332c <rmw_publish+0xb0>
 80132e6:	6918      	ldr	r0, [r3, #16]
 80132e8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80132ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80132ee:	f003 fc05 	bl	8016afc <uxr_run_session_until_confirm_delivery>
 80132f2:	4020      	ands	r0, r4
 80132f4:	b2c4      	uxtb	r4, r0
 80132f6:	f084 0001 	eor.w	r0, r4, #1
 80132fa:	b2c0      	uxtb	r0, r0
 80132fc:	b00e      	add	sp, #56	@ 0x38
 80132fe:	bd70      	pop	{r4, r5, r6, pc}
 8013300:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8013304:	6918      	ldr	r0, [r3, #16]
 8013306:	9b05      	ldr	r3, [sp, #20]
 8013308:	9300      	str	r3, [sp, #0]
 801330a:	4b0b      	ldr	r3, [pc, #44]	@ (8013338 <rmw_publish+0xbc>)
 801330c:	9301      	str	r3, [sp, #4]
 801330e:	9602      	str	r6, [sp, #8]
 8013310:	6972      	ldr	r2, [r6, #20]
 8013312:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8013314:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013318:	ab06      	add	r3, sp, #24
 801331a:	f004 fef3 	bl	8018104 <uxr_prepare_output_stream_fragmented>
 801331e:	2800      	cmp	r0, #0
 8013320:	d1d2      	bne.n	80132c8 <rmw_publish+0x4c>
 8013322:	2001      	movs	r0, #1
 8013324:	b00e      	add	sp, #56	@ 0x38
 8013326:	bd70      	pop	{r4, r5, r6, pc}
 8013328:	2001      	movs	r0, #1
 801332a:	4770      	bx	lr
 801332c:	6918      	ldr	r0, [r3, #16]
 801332e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013332:	f003 f823 	bl	801637c <uxr_flash_output_streams>
 8013336:	e7de      	b.n	80132f6 <rmw_publish+0x7a>
 8013338:	08013275 	.word	0x08013275

0801333c <rmw_create_publisher>:
 801333c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013340:	b087      	sub	sp, #28
 8013342:	2800      	cmp	r0, #0
 8013344:	f000 80cc 	beq.w	80134e0 <rmw_create_publisher+0x1a4>
 8013348:	460e      	mov	r6, r1
 801334a:	2900      	cmp	r1, #0
 801334c:	f000 80c8 	beq.w	80134e0 <rmw_create_publisher+0x1a4>
 8013350:	4604      	mov	r4, r0
 8013352:	6800      	ldr	r0, [r0, #0]
 8013354:	4615      	mov	r5, r2
 8013356:	4698      	mov	r8, r3
 8013358:	f001 f84e 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 801335c:	2800      	cmp	r0, #0
 801335e:	f000 80bf 	beq.w	80134e0 <rmw_create_publisher+0x1a4>
 8013362:	2d00      	cmp	r5, #0
 8013364:	f000 80bc 	beq.w	80134e0 <rmw_create_publisher+0x1a4>
 8013368:	782b      	ldrb	r3, [r5, #0]
 801336a:	2b00      	cmp	r3, #0
 801336c:	f000 80b8 	beq.w	80134e0 <rmw_create_publisher+0x1a4>
 8013370:	f1b8 0f00 	cmp.w	r8, #0
 8013374:	f000 80b4 	beq.w	80134e0 <rmw_create_publisher+0x1a4>
 8013378:	485c      	ldr	r0, [pc, #368]	@ (80134ec <rmw_create_publisher+0x1b0>)
 801337a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801337e:	f009 f80f 	bl	801c3a0 <get_memory>
 8013382:	2800      	cmp	r0, #0
 8013384:	f000 80ac 	beq.w	80134e0 <rmw_create_publisher+0x1a4>
 8013388:	6884      	ldr	r4, [r0, #8]
 801338a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 801338e:	f7ff fbf7 	bl	8012b80 <rmw_get_implementation_identifier>
 8013392:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8013396:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801339a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 801339e:	4628      	mov	r0, r5
 80133a0:	f7ec ff48 	bl	8000234 <strlen>
 80133a4:	3001      	adds	r0, #1
 80133a6:	283c      	cmp	r0, #60	@ 0x3c
 80133a8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 80133ac:	f200 8091 	bhi.w	80134d2 <rmw_create_publisher+0x196>
 80133b0:	4a4f      	ldr	r2, [pc, #316]	@ (80134f0 <rmw_create_publisher+0x1b4>)
 80133b2:	462b      	mov	r3, r5
 80133b4:	213c      	movs	r1, #60	@ 0x3c
 80133b6:	4650      	mov	r0, sl
 80133b8:	f00a fd74 	bl	801dea4 <sniprintf>
 80133bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80133c0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80133c2:	4641      	mov	r1, r8
 80133c4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80133c8:	2250      	movs	r2, #80	@ 0x50
 80133ca:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80133ce:	f00a ffa0 	bl	801e312 <memcpy>
 80133d2:	f898 3008 	ldrb.w	r3, [r8, #8]
 80133d6:	4947      	ldr	r1, [pc, #284]	@ (80134f4 <rmw_create_publisher+0x1b8>)
 80133d8:	2b02      	cmp	r3, #2
 80133da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80133de:	bf0c      	ite	eq
 80133e0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80133e4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80133e8:	67a3      	str	r3, [r4, #120]	@ 0x78
 80133ea:	2300      	movs	r3, #0
 80133ec:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80133f0:	4630      	mov	r0, r6
 80133f2:	f001 f9f3 	bl	80147dc <get_message_typesupport_handle>
 80133f6:	2800      	cmp	r0, #0
 80133f8:	d06b      	beq.n	80134d2 <rmw_create_publisher+0x196>
 80133fa:	6842      	ldr	r2, [r0, #4]
 80133fc:	61a2      	str	r2, [r4, #24]
 80133fe:	2a00      	cmp	r2, #0
 8013400:	d067      	beq.n	80134d2 <rmw_create_publisher+0x196>
 8013402:	4629      	mov	r1, r5
 8013404:	4643      	mov	r3, r8
 8013406:	4648      	mov	r0, r9
 8013408:	f009 f816 	bl	801c438 <create_topic>
 801340c:	6260      	str	r0, [r4, #36]	@ 0x24
 801340e:	2800      	cmp	r0, #0
 8013410:	d063      	beq.n	80134da <rmw_create_publisher+0x19e>
 8013412:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801341a:	2103      	movs	r1, #3
 801341c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8013420:	1c42      	adds	r2, r0, #1
 8013422:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8013426:	f002 fd17 	bl	8015e58 <uxr_object_id>
 801342a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 801342e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013432:	6120      	str	r0, [r4, #16]
 8013434:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8013438:	6910      	ldr	r0, [r2, #16]
 801343a:	2506      	movs	r5, #6
 801343c:	9500      	str	r5, [sp, #0]
 801343e:	6819      	ldr	r1, [r3, #0]
 8013440:	6922      	ldr	r2, [r4, #16]
 8013442:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013446:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801344a:	f002 fb29 	bl	8015aa0 <uxr_buffer_create_publisher_bin>
 801344e:	4602      	mov	r2, r0
 8013450:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8013454:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013458:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801345c:	f000 feb2 	bl	80141c4 <run_xrce_session>
 8013460:	b3b8      	cbz	r0, 80134d2 <rmw_create_publisher+0x196>
 8013462:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801346a:	2105      	movs	r1, #5
 801346c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8013470:	1c42      	adds	r2, r0, #1
 8013472:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8013476:	f002 fcef 	bl	8015e58 <uxr_object_id>
 801347a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801347e:	6160      	str	r0, [r4, #20]
 8013480:	691e      	ldr	r6, [r3, #16]
 8013482:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013486:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801348a:	f10d 0a10 	add.w	sl, sp, #16
 801348e:	4641      	mov	r1, r8
 8013490:	4650      	mov	r0, sl
 8013492:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8013496:	f000 feb1 	bl	80141fc <convert_qos_profile>
 801349a:	9503      	str	r5, [sp, #12]
 801349c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80134a0:	9001      	str	r0, [sp, #4]
 80134a2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80134a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 80134b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80134b4:	f8d8 1000 	ldr.w	r1, [r8]
 80134b8:	4630      	mov	r0, r6
 80134ba:	f002 fb21 	bl	8015b00 <uxr_buffer_create_datawriter_bin>
 80134be:	4602      	mov	r2, r0
 80134c0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80134c4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80134c8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80134cc:	f000 fe7a 	bl	80141c4 <run_xrce_session>
 80134d0:	b938      	cbnz	r0, 80134e2 <rmw_create_publisher+0x1a6>
 80134d2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80134d4:	b108      	cbz	r0, 80134da <rmw_create_publisher+0x19e>
 80134d6:	f000 fd75 	bl	8013fc4 <rmw_uxrce_fini_topic_memory>
 80134da:	4638      	mov	r0, r7
 80134dc:	f000 fd1a 	bl	8013f14 <rmw_uxrce_fini_publisher_memory>
 80134e0:	2700      	movs	r7, #0
 80134e2:	4638      	mov	r0, r7
 80134e4:	b007      	add	sp, #28
 80134e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ea:	bf00      	nop
 80134ec:	2000c3b4 	.word	0x2000c3b4
 80134f0:	080203ec 	.word	0x080203ec
 80134f4:	0801f948 	.word	0x0801f948

080134f8 <rmw_publisher_get_actual_qos>:
 80134f8:	b150      	cbz	r0, 8013510 <rmw_publisher_get_actual_qos+0x18>
 80134fa:	b508      	push	{r3, lr}
 80134fc:	460b      	mov	r3, r1
 80134fe:	b149      	cbz	r1, 8013514 <rmw_publisher_get_actual_qos+0x1c>
 8013500:	6841      	ldr	r1, [r0, #4]
 8013502:	2250      	movs	r2, #80	@ 0x50
 8013504:	3128      	adds	r1, #40	@ 0x28
 8013506:	4618      	mov	r0, r3
 8013508:	f00a ff03 	bl	801e312 <memcpy>
 801350c:	2000      	movs	r0, #0
 801350e:	bd08      	pop	{r3, pc}
 8013510:	200b      	movs	r0, #11
 8013512:	4770      	bx	lr
 8013514:	200b      	movs	r0, #11
 8013516:	bd08      	pop	{r3, pc}

08013518 <rmw_destroy_publisher>:
 8013518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801351a:	b128      	cbz	r0, 8013528 <rmw_destroy_publisher+0x10>
 801351c:	4604      	mov	r4, r0
 801351e:	6800      	ldr	r0, [r0, #0]
 8013520:	460d      	mov	r5, r1
 8013522:	f000 ff69 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 8013526:	b910      	cbnz	r0, 801352e <rmw_destroy_publisher+0x16>
 8013528:	2401      	movs	r4, #1
 801352a:	4620      	mov	r0, r4
 801352c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801352e:	6863      	ldr	r3, [r4, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d0f9      	beq.n	8013528 <rmw_destroy_publisher+0x10>
 8013534:	2d00      	cmp	r5, #0
 8013536:	d0f7      	beq.n	8013528 <rmw_destroy_publisher+0x10>
 8013538:	6828      	ldr	r0, [r5, #0]
 801353a:	f000 ff5d 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 801353e:	2800      	cmp	r0, #0
 8013540:	d0f2      	beq.n	8013528 <rmw_destroy_publisher+0x10>
 8013542:	686c      	ldr	r4, [r5, #4]
 8013544:	2c00      	cmp	r4, #0
 8013546:	d0ef      	beq.n	8013528 <rmw_destroy_publisher+0x10>
 8013548:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801354a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 801354e:	f008 ffc3 	bl	801c4d8 <destroy_topic>
 8013552:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8013556:	6962      	ldr	r2, [r4, #20]
 8013558:	6918      	ldr	r0, [r3, #16]
 801355a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801355e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013562:	6819      	ldr	r1, [r3, #0]
 8013564:	f002 f9e8 	bl	8015938 <uxr_buffer_delete_entity>
 8013568:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801356c:	6922      	ldr	r2, [r4, #16]
 801356e:	691b      	ldr	r3, [r3, #16]
 8013570:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8013574:	4604      	mov	r4, r0
 8013576:	6809      	ldr	r1, [r1, #0]
 8013578:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801357c:	f002 f9dc 	bl	8015938 <uxr_buffer_delete_entity>
 8013580:	693e      	ldr	r6, [r7, #16]
 8013582:	4622      	mov	r2, r4
 8013584:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8013588:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801358c:	4604      	mov	r4, r0
 801358e:	4630      	mov	r0, r6
 8013590:	f000 fe18 	bl	80141c4 <run_xrce_session>
 8013594:	693e      	ldr	r6, [r7, #16]
 8013596:	4622      	mov	r2, r4
 8013598:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801359c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80135a0:	4604      	mov	r4, r0
 80135a2:	4630      	mov	r0, r6
 80135a4:	f000 fe0e 	bl	80141c4 <run_xrce_session>
 80135a8:	b12c      	cbz	r4, 80135b6 <rmw_destroy_publisher+0x9e>
 80135aa:	b120      	cbz	r0, 80135b6 <rmw_destroy_publisher+0x9e>
 80135ac:	2400      	movs	r4, #0
 80135ae:	4628      	mov	r0, r5
 80135b0:	f000 fcb0 	bl	8013f14 <rmw_uxrce_fini_publisher_memory>
 80135b4:	e7b9      	b.n	801352a <rmw_destroy_publisher+0x12>
 80135b6:	2402      	movs	r4, #2
 80135b8:	e7f9      	b.n	80135ae <rmw_destroy_publisher+0x96>
 80135ba:	bf00      	nop

080135bc <rmw_send_request>:
 80135bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135c0:	4604      	mov	r4, r0
 80135c2:	6800      	ldr	r0, [r0, #0]
 80135c4:	b08b      	sub	sp, #44	@ 0x2c
 80135c6:	460e      	mov	r6, r1
 80135c8:	4615      	mov	r5, r2
 80135ca:	b128      	cbz	r0, 80135d8 <rmw_send_request+0x1c>
 80135cc:	4b21      	ldr	r3, [pc, #132]	@ (8013654 <rmw_send_request+0x98>)
 80135ce:	6819      	ldr	r1, [r3, #0]
 80135d0:	f7ec fe26 	bl	8000220 <strcmp>
 80135d4:	2800      	cmp	r0, #0
 80135d6:	d139      	bne.n	801364c <rmw_send_request+0x90>
 80135d8:	6864      	ldr	r4, [r4, #4]
 80135da:	6963      	ldr	r3, [r4, #20]
 80135dc:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80135e0:	689b      	ldr	r3, [r3, #8]
 80135e2:	4798      	blx	r3
 80135e4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80135e8:	4630      	mov	r0, r6
 80135ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80135ee:	4798      	blx	r3
 80135f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80135f4:	9000      	str	r0, [sp, #0]
 80135f6:	6922      	ldr	r2, [r4, #16]
 80135f8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80135fa:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80135fe:	ab02      	add	r3, sp, #8
 8013600:	f004 fd50 	bl	80180a4 <uxr_prepare_output_stream>
 8013604:	2700      	movs	r7, #0
 8013606:	6028      	str	r0, [r5, #0]
 8013608:	606f      	str	r7, [r5, #4]
 801360a:	b198      	cbz	r0, 8013634 <rmw_send_request+0x78>
 801360c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013610:	a902      	add	r1, sp, #8
 8013612:	4630      	mov	r0, r6
 8013614:	4798      	blx	r3
 8013616:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801361a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801361e:	2b01      	cmp	r3, #1
 8013620:	d00c      	beq.n	801363c <rmw_send_request+0x80>
 8013622:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8013624:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013628:	f003 fa68 	bl	8016afc <uxr_run_session_until_confirm_delivery>
 801362c:	4638      	mov	r0, r7
 801362e:	b00b      	add	sp, #44	@ 0x2c
 8013630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013634:	2001      	movs	r0, #1
 8013636:	b00b      	add	sp, #44	@ 0x2c
 8013638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801363c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013640:	f002 fe9c 	bl	801637c <uxr_flash_output_streams>
 8013644:	4638      	mov	r0, r7
 8013646:	b00b      	add	sp, #44	@ 0x2c
 8013648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801364c:	200c      	movs	r0, #12
 801364e:	b00b      	add	sp, #44	@ 0x2c
 8013650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013654:	08021548 	.word	0x08021548

08013658 <rmw_take_request>:
 8013658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801365c:	4605      	mov	r5, r0
 801365e:	6800      	ldr	r0, [r0, #0]
 8013660:	b089      	sub	sp, #36	@ 0x24
 8013662:	460c      	mov	r4, r1
 8013664:	4690      	mov	r8, r2
 8013666:	461e      	mov	r6, r3
 8013668:	b128      	cbz	r0, 8013676 <rmw_take_request+0x1e>
 801366a:	4b28      	ldr	r3, [pc, #160]	@ (801370c <rmw_take_request+0xb4>)
 801366c:	6819      	ldr	r1, [r3, #0]
 801366e:	f7ec fdd7 	bl	8000220 <strcmp>
 8013672:	2800      	cmp	r0, #0
 8013674:	d146      	bne.n	8013704 <rmw_take_request+0xac>
 8013676:	b10e      	cbz	r6, 801367c <rmw_take_request+0x24>
 8013678:	2300      	movs	r3, #0
 801367a:	7033      	strb	r3, [r6, #0]
 801367c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013680:	f000 fd22 	bl	80140c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013684:	4648      	mov	r0, r9
 8013686:	f000 fcf9 	bl	801407c <rmw_uxrce_find_static_input_buffer_by_owner>
 801368a:	4607      	mov	r7, r0
 801368c:	b3b0      	cbz	r0, 80136fc <rmw_take_request+0xa4>
 801368e:	6885      	ldr	r5, [r0, #8]
 8013690:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8013694:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8013698:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801369c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80136a0:	7423      	strb	r3, [r4, #16]
 80136a2:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80136a6:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80136aa:	74e2      	strb	r2, [r4, #19]
 80136ac:	f8a4 3011 	strh.w	r3, [r4, #17]
 80136b0:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80136b4:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80136b8:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80136bc:	61e1      	str	r1, [r4, #28]
 80136be:	6162      	str	r2, [r4, #20]
 80136c0:	61a3      	str	r3, [r4, #24]
 80136c2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80136c6:	689b      	ldr	r3, [r3, #8]
 80136c8:	4798      	blx	r3
 80136ca:	6844      	ldr	r4, [r0, #4]
 80136cc:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80136d0:	f105 0110 	add.w	r1, r5, #16
 80136d4:	4668      	mov	r0, sp
 80136d6:	f7fc fdbf 	bl	8010258 <ucdr_init_buffer>
 80136da:	68e3      	ldr	r3, [r4, #12]
 80136dc:	4641      	mov	r1, r8
 80136de:	4668      	mov	r0, sp
 80136e0:	4798      	blx	r3
 80136e2:	4639      	mov	r1, r7
 80136e4:	4604      	mov	r4, r0
 80136e6:	480a      	ldr	r0, [pc, #40]	@ (8013710 <rmw_take_request+0xb8>)
 80136e8:	f008 fe6a 	bl	801c3c0 <put_memory>
 80136ec:	b106      	cbz	r6, 80136f0 <rmw_take_request+0x98>
 80136ee:	7034      	strb	r4, [r6, #0]
 80136f0:	f084 0001 	eor.w	r0, r4, #1
 80136f4:	b2c0      	uxtb	r0, r0
 80136f6:	b009      	add	sp, #36	@ 0x24
 80136f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136fc:	2001      	movs	r0, #1
 80136fe:	b009      	add	sp, #36	@ 0x24
 8013700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013704:	200c      	movs	r0, #12
 8013706:	b009      	add	sp, #36	@ 0x24
 8013708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801370c:	08021548 	.word	0x08021548
 8013710:	2000c3e4 	.word	0x2000c3e4

08013714 <rmw_send_response>:
 8013714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013716:	4605      	mov	r5, r0
 8013718:	6800      	ldr	r0, [r0, #0]
 801371a:	b091      	sub	sp, #68	@ 0x44
 801371c:	460c      	mov	r4, r1
 801371e:	4616      	mov	r6, r2
 8013720:	b128      	cbz	r0, 801372e <rmw_send_response+0x1a>
 8013722:	4b29      	ldr	r3, [pc, #164]	@ (80137c8 <rmw_send_response+0xb4>)
 8013724:	6819      	ldr	r1, [r3, #0]
 8013726:	f7ec fd7b 	bl	8000220 <strcmp>
 801372a:	2800      	cmp	r0, #0
 801372c:	d141      	bne.n	80137b2 <rmw_send_response+0x9e>
 801372e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8013732:	9306      	str	r3, [sp, #24]
 8013734:	4623      	mov	r3, r4
 8013736:	9207      	str	r2, [sp, #28]
 8013738:	f813 2b01 	ldrb.w	r2, [r3], #1
 801373c:	686d      	ldr	r5, [r5, #4]
 801373e:	789b      	ldrb	r3, [r3, #2]
 8013740:	68a1      	ldr	r1, [r4, #8]
 8013742:	f88d 2017 	strb.w	r2, [sp, #23]
 8013746:	f88d 3016 	strb.w	r3, [sp, #22]
 801374a:	68e2      	ldr	r2, [r4, #12]
 801374c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013750:	6860      	ldr	r0, [r4, #4]
 8013752:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013756:	ab02      	add	r3, sp, #8
 8013758:	c307      	stmia	r3!, {r0, r1, r2}
 801375a:	696b      	ldr	r3, [r5, #20]
 801375c:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801375e:	68db      	ldr	r3, [r3, #12]
 8013760:	4798      	blx	r3
 8013762:	6844      	ldr	r4, [r0, #4]
 8013764:	4630      	mov	r0, r6
 8013766:	6923      	ldr	r3, [r4, #16]
 8013768:	4798      	blx	r3
 801376a:	f100 0318 	add.w	r3, r0, #24
 801376e:	6938      	ldr	r0, [r7, #16]
 8013770:	9300      	str	r3, [sp, #0]
 8013772:	692a      	ldr	r2, [r5, #16]
 8013774:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8013776:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801377a:	ab08      	add	r3, sp, #32
 801377c:	f004 fc92 	bl	80180a4 <uxr_prepare_output_stream>
 8013780:	b910      	cbnz	r0, 8013788 <rmw_send_response+0x74>
 8013782:	2001      	movs	r0, #1
 8013784:	b011      	add	sp, #68	@ 0x44
 8013786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013788:	a902      	add	r1, sp, #8
 801378a:	a808      	add	r0, sp, #32
 801378c:	f005 fd4c 	bl	8019228 <uxr_serialize_SampleIdentity>
 8013790:	68a3      	ldr	r3, [r4, #8]
 8013792:	a908      	add	r1, sp, #32
 8013794:	4630      	mov	r0, r6
 8013796:	4798      	blx	r3
 8013798:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801379c:	6938      	ldr	r0, [r7, #16]
 801379e:	2b01      	cmp	r3, #1
 80137a0:	d00a      	beq.n	80137b8 <rmw_send_response+0xa4>
 80137a2:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80137a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80137a8:	f003 f9a8 	bl	8016afc <uxr_run_session_until_confirm_delivery>
 80137ac:	2000      	movs	r0, #0
 80137ae:	b011      	add	sp, #68	@ 0x44
 80137b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137b2:	200c      	movs	r0, #12
 80137b4:	b011      	add	sp, #68	@ 0x44
 80137b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80137bc:	f002 fdde 	bl	801637c <uxr_flash_output_streams>
 80137c0:	2000      	movs	r0, #0
 80137c2:	b011      	add	sp, #68	@ 0x44
 80137c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137c6:	bf00      	nop
 80137c8:	08021548 	.word	0x08021548

080137cc <rmw_take_response>:
 80137cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137d0:	4604      	mov	r4, r0
 80137d2:	6800      	ldr	r0, [r0, #0]
 80137d4:	b088      	sub	sp, #32
 80137d6:	4688      	mov	r8, r1
 80137d8:	4617      	mov	r7, r2
 80137da:	461d      	mov	r5, r3
 80137dc:	b120      	cbz	r0, 80137e8 <rmw_take_response+0x1c>
 80137de:	4b1e      	ldr	r3, [pc, #120]	@ (8013858 <rmw_take_response+0x8c>)
 80137e0:	6819      	ldr	r1, [r3, #0]
 80137e2:	f7ec fd1d 	bl	8000220 <strcmp>
 80137e6:	bb78      	cbnz	r0, 8013848 <rmw_take_response+0x7c>
 80137e8:	b10d      	cbz	r5, 80137ee <rmw_take_response+0x22>
 80137ea:	2300      	movs	r3, #0
 80137ec:	702b      	strb	r3, [r5, #0]
 80137ee:	6864      	ldr	r4, [r4, #4]
 80137f0:	f000 fc6a 	bl	80140c8 <rmw_uxrce_clean_expired_static_input_buffer>
 80137f4:	4620      	mov	r0, r4
 80137f6:	f000 fc41 	bl	801407c <rmw_uxrce_find_static_input_buffer_by_owner>
 80137fa:	4606      	mov	r6, r0
 80137fc:	b340      	cbz	r0, 8013850 <rmw_take_response+0x84>
 80137fe:	6963      	ldr	r3, [r4, #20]
 8013800:	6884      	ldr	r4, [r0, #8]
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8013808:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801380c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8013810:	4798      	blx	r3
 8013812:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013816:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801381a:	f104 0110 	add.w	r1, r4, #16
 801381e:	4668      	mov	r0, sp
 8013820:	f7fc fd1a 	bl	8010258 <ucdr_init_buffer>
 8013824:	4639      	mov	r1, r7
 8013826:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801382a:	4668      	mov	r0, sp
 801382c:	4798      	blx	r3
 801382e:	4631      	mov	r1, r6
 8013830:	4604      	mov	r4, r0
 8013832:	480a      	ldr	r0, [pc, #40]	@ (801385c <rmw_take_response+0x90>)
 8013834:	f008 fdc4 	bl	801c3c0 <put_memory>
 8013838:	b105      	cbz	r5, 801383c <rmw_take_response+0x70>
 801383a:	702c      	strb	r4, [r5, #0]
 801383c:	f084 0001 	eor.w	r0, r4, #1
 8013840:	b2c0      	uxtb	r0, r0
 8013842:	b008      	add	sp, #32
 8013844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013848:	200c      	movs	r0, #12
 801384a:	b008      	add	sp, #32
 801384c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013850:	2001      	movs	r0, #1
 8013852:	b008      	add	sp, #32
 8013854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013858:	08021548 	.word	0x08021548
 801385c:	2000c3e4 	.word	0x2000c3e4

08013860 <rmw_create_service>:
 8013860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013864:	b091      	sub	sp, #68	@ 0x44
 8013866:	2800      	cmp	r0, #0
 8013868:	f000 80ba 	beq.w	80139e0 <rmw_create_service+0x180>
 801386c:	4689      	mov	r9, r1
 801386e:	2900      	cmp	r1, #0
 8013870:	f000 80b6 	beq.w	80139e0 <rmw_create_service+0x180>
 8013874:	4606      	mov	r6, r0
 8013876:	6800      	ldr	r0, [r0, #0]
 8013878:	4614      	mov	r4, r2
 801387a:	461d      	mov	r5, r3
 801387c:	f000 fdbc 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 8013880:	2800      	cmp	r0, #0
 8013882:	f000 80ad 	beq.w	80139e0 <rmw_create_service+0x180>
 8013886:	2c00      	cmp	r4, #0
 8013888:	f000 80aa 	beq.w	80139e0 <rmw_create_service+0x180>
 801388c:	7823      	ldrb	r3, [r4, #0]
 801388e:	2b00      	cmp	r3, #0
 8013890:	f000 80a6 	beq.w	80139e0 <rmw_create_service+0x180>
 8013894:	2d00      	cmp	r5, #0
 8013896:	f000 80a3 	beq.w	80139e0 <rmw_create_service+0x180>
 801389a:	4854      	ldr	r0, [pc, #336]	@ (80139ec <rmw_create_service+0x18c>)
 801389c:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80138a0:	f008 fd7e 	bl	801c3a0 <get_memory>
 80138a4:	4606      	mov	r6, r0
 80138a6:	2800      	cmp	r0, #0
 80138a8:	f000 809b 	beq.w	80139e2 <rmw_create_service+0x182>
 80138ac:	6887      	ldr	r7, [r0, #8]
 80138ae:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80138b2:	f7ff f965 	bl	8012b80 <rmw_get_implementation_identifier>
 80138b6:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 80138ba:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80138bc:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80138c0:	4620      	mov	r0, r4
 80138c2:	f7ec fcb7 	bl	8000234 <strlen>
 80138c6:	1c42      	adds	r2, r0, #1
 80138c8:	2a3c      	cmp	r2, #60	@ 0x3c
 80138ca:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 80138ce:	f200 8084 	bhi.w	80139da <rmw_create_service+0x17a>
 80138d2:	4621      	mov	r1, r4
 80138d4:	4650      	mov	r0, sl
 80138d6:	f00a fd1c 	bl	801e312 <memcpy>
 80138da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80138de:	4629      	mov	r1, r5
 80138e0:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 80138e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80138e6:	2250      	movs	r2, #80	@ 0x50
 80138e8:	f107 0020 	add.w	r0, r7, #32
 80138ec:	f00a fd11 	bl	801e312 <memcpy>
 80138f0:	493f      	ldr	r1, [pc, #252]	@ (80139f0 <rmw_create_service+0x190>)
 80138f2:	4648      	mov	r0, r9
 80138f4:	f000 ff7e 	bl	80147f4 <get_service_typesupport_handle>
 80138f8:	2800      	cmp	r0, #0
 80138fa:	d06e      	beq.n	80139da <rmw_create_service+0x17a>
 80138fc:	6843      	ldr	r3, [r0, #4]
 80138fe:	617b      	str	r3, [r7, #20]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d06a      	beq.n	80139da <rmw_create_service+0x17a>
 8013904:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013908:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 80139f8 <rmw_create_service+0x198>
 801390c:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 80139fc <rmw_create_service+0x19c>
 8013910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013914:	2108      	movs	r1, #8
 8013916:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 801391a:	1c42      	adds	r2, r0, #1
 801391c:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 8013920:	f002 fa9a 	bl	8015e58 <uxr_object_id>
 8013924:	2364      	movs	r3, #100	@ 0x64
 8013926:	6138      	str	r0, [r7, #16]
 8013928:	4652      	mov	r2, sl
 801392a:	6978      	ldr	r0, [r7, #20]
 801392c:	4649      	mov	r1, r9
 801392e:	f000 fcb1 	bl	8014294 <generate_service_types>
 8013932:	2800      	cmp	r0, #0
 8013934:	d051      	beq.n	80139da <rmw_create_service+0x17a>
 8013936:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 8013a00 <rmw_create_service+0x1a0>
 801393a:	4a2e      	ldr	r2, [pc, #184]	@ (80139f4 <rmw_create_service+0x194>)
 801393c:	233c      	movs	r3, #60	@ 0x3c
 801393e:	4659      	mov	r1, fp
 8013940:	4620      	mov	r0, r4
 8013942:	f000 fc75 	bl	8014230 <generate_service_topics>
 8013946:	2800      	cmp	r0, #0
 8013948:	d047      	beq.n	80139da <rmw_create_service+0x17a>
 801394a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801394e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8013952:	a80c      	add	r0, sp, #48	@ 0x30
 8013954:	4629      	mov	r1, r5
 8013956:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801395a:	f000 fc4f 	bl	80141fc <convert_qos_profile>
 801395e:	4a25      	ldr	r2, [pc, #148]	@ (80139f4 <rmw_create_service+0x194>)
 8013960:	9400      	str	r4, [sp, #0]
 8013962:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013966:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801396a:	a80c      	add	r0, sp, #48	@ 0x30
 801396c:	c803      	ldmia	r0, {r0, r1}
 801396e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013970:	9005      	str	r0, [sp, #20]
 8013972:	9a08      	ldr	r2, [sp, #32]
 8013974:	f8ad 1018 	strh.w	r1, [sp, #24]
 8013978:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801397c:	2306      	movs	r3, #6
 801397e:	9307      	str	r3, [sp, #28]
 8013980:	6811      	ldr	r1, [r2, #0]
 8013982:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8013986:	693a      	ldr	r2, [r7, #16]
 8013988:	f002 f96a 	bl	8015c60 <uxr_buffer_create_replier_bin>
 801398c:	4602      	mov	r2, r0
 801398e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013992:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013996:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801399a:	f000 fc13 	bl	80141c4 <run_xrce_session>
 801399e:	b1e0      	cbz	r0, 80139da <rmw_create_service+0x17a>
 80139a0:	7a2b      	ldrb	r3, [r5, #8]
 80139a2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80139a6:	2200      	movs	r2, #0
 80139a8:	2b02      	cmp	r3, #2
 80139aa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80139ae:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 80139b2:	bf0c      	ite	eq
 80139b4:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 80139b8:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 80139bc:	673a      	str	r2, [r7, #112]	@ 0x70
 80139be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80139c0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80139c4:	ab0e      	add	r3, sp, #56	@ 0x38
 80139c6:	9300      	str	r3, [sp, #0]
 80139c8:	6811      	ldr	r1, [r2, #0]
 80139ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80139cc:	693a      	ldr	r2, [r7, #16]
 80139ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80139d2:	f002 fa71 	bl	8015eb8 <uxr_buffer_request_data>
 80139d6:	8338      	strh	r0, [r7, #24]
 80139d8:	e003      	b.n	80139e2 <rmw_create_service+0x182>
 80139da:	4630      	mov	r0, r6
 80139dc:	f000 fac6 	bl	8013f6c <rmw_uxrce_fini_service_memory>
 80139e0:	2600      	movs	r6, #0
 80139e2:	4630      	mov	r0, r6
 80139e4:	b011      	add	sp, #68	@ 0x44
 80139e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ea:	bf00      	nop
 80139ec:	2000c3c4 	.word	0x2000c3c4
 80139f0:	0801f948 	.word	0x0801f948
 80139f4:	20007718 	.word	0x20007718
 80139f8:	20007754 	.word	0x20007754
 80139fc:	200076b4 	.word	0x200076b4
 8013a00:	20007678 	.word	0x20007678

08013a04 <rmw_destroy_service>:
 8013a04:	b570      	push	{r4, r5, r6, lr}
 8013a06:	b128      	cbz	r0, 8013a14 <rmw_destroy_service+0x10>
 8013a08:	4604      	mov	r4, r0
 8013a0a:	6800      	ldr	r0, [r0, #0]
 8013a0c:	460d      	mov	r5, r1
 8013a0e:	f000 fcf3 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 8013a12:	b910      	cbnz	r0, 8013a1a <rmw_destroy_service+0x16>
 8013a14:	2401      	movs	r4, #1
 8013a16:	4620      	mov	r0, r4
 8013a18:	bd70      	pop	{r4, r5, r6, pc}
 8013a1a:	6863      	ldr	r3, [r4, #4]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d0f9      	beq.n	8013a14 <rmw_destroy_service+0x10>
 8013a20:	2d00      	cmp	r5, #0
 8013a22:	d0f7      	beq.n	8013a14 <rmw_destroy_service+0x10>
 8013a24:	6828      	ldr	r0, [r5, #0]
 8013a26:	f000 fce7 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 8013a2a:	2800      	cmp	r0, #0
 8013a2c:	d0f2      	beq.n	8013a14 <rmw_destroy_service+0x10>
 8013a2e:	686e      	ldr	r6, [r5, #4]
 8013a30:	2e00      	cmp	r6, #0
 8013a32:	d0ef      	beq.n	8013a14 <rmw_destroy_service+0x10>
 8013a34:	6864      	ldr	r4, [r4, #4]
 8013a36:	6932      	ldr	r2, [r6, #16]
 8013a38:	6920      	ldr	r0, [r4, #16]
 8013a3a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013a3e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a42:	6819      	ldr	r1, [r3, #0]
 8013a44:	f002 fa72 	bl	8015f2c <uxr_buffer_cancel_data>
 8013a48:	4602      	mov	r2, r0
 8013a4a:	6920      	ldr	r0, [r4, #16]
 8013a4c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013a50:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013a54:	f000 fbb6 	bl	80141c4 <run_xrce_session>
 8013a58:	6920      	ldr	r0, [r4, #16]
 8013a5a:	6932      	ldr	r2, [r6, #16]
 8013a5c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013a60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a64:	6819      	ldr	r1, [r3, #0]
 8013a66:	f001 ff67 	bl	8015938 <uxr_buffer_delete_entity>
 8013a6a:	4602      	mov	r2, r0
 8013a6c:	6920      	ldr	r0, [r4, #16]
 8013a6e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013a72:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013a76:	f000 fba5 	bl	80141c4 <run_xrce_session>
 8013a7a:	2800      	cmp	r0, #0
 8013a7c:	4628      	mov	r0, r5
 8013a7e:	bf14      	ite	ne
 8013a80:	2400      	movne	r4, #0
 8013a82:	2402      	moveq	r4, #2
 8013a84:	f000 fa72 	bl	8013f6c <rmw_uxrce_fini_service_memory>
 8013a88:	e7c5      	b.n	8013a16 <rmw_destroy_service+0x12>
 8013a8a:	bf00      	nop

08013a8c <rmw_service_response_publisher_get_actual_qos>:
 8013a8c:	b150      	cbz	r0, 8013aa4 <rmw_service_response_publisher_get_actual_qos+0x18>
 8013a8e:	b508      	push	{r3, lr}
 8013a90:	460b      	mov	r3, r1
 8013a92:	b149      	cbz	r1, 8013aa8 <rmw_service_response_publisher_get_actual_qos+0x1c>
 8013a94:	6841      	ldr	r1, [r0, #4]
 8013a96:	2250      	movs	r2, #80	@ 0x50
 8013a98:	3120      	adds	r1, #32
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f00a fc39 	bl	801e312 <memcpy>
 8013aa0:	2000      	movs	r0, #0
 8013aa2:	bd08      	pop	{r3, pc}
 8013aa4:	200b      	movs	r0, #11
 8013aa6:	4770      	bx	lr
 8013aa8:	200b      	movs	r0, #11
 8013aaa:	bd08      	pop	{r3, pc}

08013aac <rmw_service_request_subscription_get_actual_qos>:
 8013aac:	b150      	cbz	r0, 8013ac4 <rmw_service_request_subscription_get_actual_qos+0x18>
 8013aae:	b508      	push	{r3, lr}
 8013ab0:	460b      	mov	r3, r1
 8013ab2:	b149      	cbz	r1, 8013ac8 <rmw_service_request_subscription_get_actual_qos+0x1c>
 8013ab4:	6841      	ldr	r1, [r0, #4]
 8013ab6:	2250      	movs	r2, #80	@ 0x50
 8013ab8:	3120      	adds	r1, #32
 8013aba:	4618      	mov	r0, r3
 8013abc:	f00a fc29 	bl	801e312 <memcpy>
 8013ac0:	2000      	movs	r0, #0
 8013ac2:	bd08      	pop	{r3, pc}
 8013ac4:	200b      	movs	r0, #11
 8013ac6:	4770      	bx	lr
 8013ac8:	200b      	movs	r0, #11
 8013aca:	bd08      	pop	{r3, pc}

08013acc <rmw_destroy_subscription>:
 8013acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ace:	b128      	cbz	r0, 8013adc <rmw_destroy_subscription+0x10>
 8013ad0:	4604      	mov	r4, r0
 8013ad2:	6800      	ldr	r0, [r0, #0]
 8013ad4:	460d      	mov	r5, r1
 8013ad6:	f000 fc8f 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 8013ada:	b910      	cbnz	r0, 8013ae2 <rmw_destroy_subscription+0x16>
 8013adc:	2401      	movs	r4, #1
 8013ade:	4620      	mov	r0, r4
 8013ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ae2:	6863      	ldr	r3, [r4, #4]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d0f9      	beq.n	8013adc <rmw_destroy_subscription+0x10>
 8013ae8:	2d00      	cmp	r5, #0
 8013aea:	d0f7      	beq.n	8013adc <rmw_destroy_subscription+0x10>
 8013aec:	6828      	ldr	r0, [r5, #0]
 8013aee:	f000 fc83 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 8013af2:	2800      	cmp	r0, #0
 8013af4:	d0f2      	beq.n	8013adc <rmw_destroy_subscription+0x10>
 8013af6:	686c      	ldr	r4, [r5, #4]
 8013af8:	2c00      	cmp	r4, #0
 8013afa:	d0ef      	beq.n	8013adc <rmw_destroy_subscription+0x10>
 8013afc:	6a26      	ldr	r6, [r4, #32]
 8013afe:	6962      	ldr	r2, [r4, #20]
 8013b00:	6930      	ldr	r0, [r6, #16]
 8013b02:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013b06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b0a:	6819      	ldr	r1, [r3, #0]
 8013b0c:	f002 fa0e 	bl	8015f2c <uxr_buffer_cancel_data>
 8013b10:	4602      	mov	r2, r0
 8013b12:	6930      	ldr	r0, [r6, #16]
 8013b14:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013b18:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013b1c:	f000 fb52 	bl	80141c4 <run_xrce_session>
 8013b20:	69e0      	ldr	r0, [r4, #28]
 8013b22:	f008 fcd9 	bl	801c4d8 <destroy_topic>
 8013b26:	6a23      	ldr	r3, [r4, #32]
 8013b28:	6962      	ldr	r2, [r4, #20]
 8013b2a:	6918      	ldr	r0, [r3, #16]
 8013b2c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013b30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b34:	6819      	ldr	r1, [r3, #0]
 8013b36:	f001 feff 	bl	8015938 <uxr_buffer_delete_entity>
 8013b3a:	6a23      	ldr	r3, [r4, #32]
 8013b3c:	6922      	ldr	r2, [r4, #16]
 8013b3e:	691b      	ldr	r3, [r3, #16]
 8013b40:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8013b44:	4604      	mov	r4, r0
 8013b46:	6809      	ldr	r1, [r1, #0]
 8013b48:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8013b4c:	f001 fef4 	bl	8015938 <uxr_buffer_delete_entity>
 8013b50:	6937      	ldr	r7, [r6, #16]
 8013b52:	4622      	mov	r2, r4
 8013b54:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8013b58:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8013b5c:	4604      	mov	r4, r0
 8013b5e:	4638      	mov	r0, r7
 8013b60:	f000 fb30 	bl	80141c4 <run_xrce_session>
 8013b64:	6936      	ldr	r6, [r6, #16]
 8013b66:	4622      	mov	r2, r4
 8013b68:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8013b6c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8013b70:	4604      	mov	r4, r0
 8013b72:	4630      	mov	r0, r6
 8013b74:	f000 fb26 	bl	80141c4 <run_xrce_session>
 8013b78:	b12c      	cbz	r4, 8013b86 <rmw_destroy_subscription+0xba>
 8013b7a:	b120      	cbz	r0, 8013b86 <rmw_destroy_subscription+0xba>
 8013b7c:	2400      	movs	r4, #0
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f000 f9de 	bl	8013f40 <rmw_uxrce_fini_subscription_memory>
 8013b84:	e7ab      	b.n	8013ade <rmw_destroy_subscription+0x12>
 8013b86:	2402      	movs	r4, #2
 8013b88:	e7f9      	b.n	8013b7e <rmw_destroy_subscription+0xb2>
 8013b8a:	bf00      	nop

08013b8c <rmw_uxrce_transport_init>:
 8013b8c:	b508      	push	{r3, lr}
 8013b8e:	b108      	cbz	r0, 8013b94 <rmw_uxrce_transport_init+0x8>
 8013b90:	f100 0210 	add.w	r2, r0, #16
 8013b94:	b139      	cbz	r1, 8013ba6 <rmw_uxrce_transport_init+0x1a>
 8013b96:	6949      	ldr	r1, [r1, #20]
 8013b98:	4610      	mov	r0, r2
 8013b9a:	f002 f925 	bl	8015de8 <uxr_init_custom_transport>
 8013b9e:	f080 0001 	eor.w	r0, r0, #1
 8013ba2:	b2c0      	uxtb	r0, r0
 8013ba4:	bd08      	pop	{r3, pc}
 8013ba6:	4b04      	ldr	r3, [pc, #16]	@ (8013bb8 <rmw_uxrce_transport_init+0x2c>)
 8013ba8:	4610      	mov	r0, r2
 8013baa:	6859      	ldr	r1, [r3, #4]
 8013bac:	f002 f91c 	bl	8015de8 <uxr_init_custom_transport>
 8013bb0:	f080 0001 	eor.w	r0, r0, #1
 8013bb4:	b2c0      	uxtb	r0, r0
 8013bb6:	bd08      	pop	{r3, pc}
 8013bb8:	200074e0 	.word	0x200074e0

08013bbc <rmw_uros_epoch_millis>:
 8013bbc:	4b05      	ldr	r3, [pc, #20]	@ (8013bd4 <rmw_uros_epoch_millis+0x18>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	b123      	cbz	r3, 8013bcc <rmw_uros_epoch_millis+0x10>
 8013bc2:	6898      	ldr	r0, [r3, #8]
 8013bc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013bc8:	f002 bbbc 	b.w	8016344 <uxr_epoch_millis>
 8013bcc:	2000      	movs	r0, #0
 8013bce:	2100      	movs	r1, #0
 8013bd0:	4770      	bx	lr
 8013bd2:	bf00      	nop
 8013bd4:	2000c3d4 	.word	0x2000c3d4

08013bd8 <rmw_uros_epoch_nanos>:
 8013bd8:	4b05      	ldr	r3, [pc, #20]	@ (8013bf0 <rmw_uros_epoch_nanos+0x18>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	b123      	cbz	r3, 8013be8 <rmw_uros_epoch_nanos+0x10>
 8013bde:	6898      	ldr	r0, [r3, #8]
 8013be0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013be4:	f002 bbc0 	b.w	8016368 <uxr_epoch_nanos>
 8013be8:	2000      	movs	r0, #0
 8013bea:	2100      	movs	r1, #0
 8013bec:	4770      	bx	lr
 8013bee:	bf00      	nop
 8013bf0:	2000c3d4 	.word	0x2000c3d4

08013bf4 <rmw_uros_sync_session>:
 8013bf4:	b508      	push	{r3, lr}
 8013bf6:	4b07      	ldr	r3, [pc, #28]	@ (8013c14 <rmw_uros_sync_session+0x20>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	b14b      	cbz	r3, 8013c10 <rmw_uros_sync_session+0x1c>
 8013bfc:	4601      	mov	r1, r0
 8013bfe:	6898      	ldr	r0, [r3, #8]
 8013c00:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c04:	f002 fff4 	bl	8016bf0 <uxr_sync_session>
 8013c08:	f080 0001 	eor.w	r0, r0, #1
 8013c0c:	b2c0      	uxtb	r0, r0
 8013c0e:	bd08      	pop	{r3, pc}
 8013c10:	2001      	movs	r0, #1
 8013c12:	bd08      	pop	{r3, pc}
 8013c14:	2000c3d4 	.word	0x2000c3d4

08013c18 <rmw_uxrce_init_service_memory>:
 8013c18:	b1e2      	cbz	r2, 8013c54 <rmw_uxrce_init_service_memory+0x3c>
 8013c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c1e:	7b05      	ldrb	r5, [r0, #12]
 8013c20:	4606      	mov	r6, r0
 8013c22:	b9ad      	cbnz	r5, 8013c50 <rmw_uxrce_init_service_memory+0x38>
 8013c24:	23c8      	movs	r3, #200	@ 0xc8
 8013c26:	e9c0 5500 	strd	r5, r5, [r0]
 8013c2a:	6083      	str	r3, [r0, #8]
 8013c2c:	f240 1301 	movw	r3, #257	@ 0x101
 8013c30:	4617      	mov	r7, r2
 8013c32:	8183      	strh	r3, [r0, #12]
 8013c34:	460c      	mov	r4, r1
 8013c36:	46a8      	mov	r8, r5
 8013c38:	4621      	mov	r1, r4
 8013c3a:	4630      	mov	r0, r6
 8013c3c:	3501      	adds	r5, #1
 8013c3e:	f008 fbbf 	bl	801c3c0 <put_memory>
 8013c42:	42af      	cmp	r7, r5
 8013c44:	60a4      	str	r4, [r4, #8]
 8013c46:	f884 800c 	strb.w	r8, [r4, #12]
 8013c4a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8013c4e:	d1f3      	bne.n	8013c38 <rmw_uxrce_init_service_memory+0x20>
 8013c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c54:	4770      	bx	lr
 8013c56:	bf00      	nop

08013c58 <rmw_uxrce_init_client_memory>:
 8013c58:	b1e2      	cbz	r2, 8013c94 <rmw_uxrce_init_client_memory+0x3c>
 8013c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c5e:	7b05      	ldrb	r5, [r0, #12]
 8013c60:	4606      	mov	r6, r0
 8013c62:	b9ad      	cbnz	r5, 8013c90 <rmw_uxrce_init_client_memory+0x38>
 8013c64:	23c8      	movs	r3, #200	@ 0xc8
 8013c66:	e9c0 5500 	strd	r5, r5, [r0]
 8013c6a:	6083      	str	r3, [r0, #8]
 8013c6c:	f240 1301 	movw	r3, #257	@ 0x101
 8013c70:	4617      	mov	r7, r2
 8013c72:	8183      	strh	r3, [r0, #12]
 8013c74:	460c      	mov	r4, r1
 8013c76:	46a8      	mov	r8, r5
 8013c78:	4621      	mov	r1, r4
 8013c7a:	4630      	mov	r0, r6
 8013c7c:	3501      	adds	r5, #1
 8013c7e:	f008 fb9f 	bl	801c3c0 <put_memory>
 8013c82:	42af      	cmp	r7, r5
 8013c84:	60a4      	str	r4, [r4, #8]
 8013c86:	f884 800c 	strb.w	r8, [r4, #12]
 8013c8a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8013c8e:	d1f3      	bne.n	8013c78 <rmw_uxrce_init_client_memory+0x20>
 8013c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop

08013c98 <rmw_uxrce_init_publisher_memory>:
 8013c98:	b1e2      	cbz	r2, 8013cd4 <rmw_uxrce_init_publisher_memory+0x3c>
 8013c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c9e:	7b05      	ldrb	r5, [r0, #12]
 8013ca0:	4606      	mov	r6, r0
 8013ca2:	b9ad      	cbnz	r5, 8013cd0 <rmw_uxrce_init_publisher_memory+0x38>
 8013ca4:	23d8      	movs	r3, #216	@ 0xd8
 8013ca6:	e9c0 5500 	strd	r5, r5, [r0]
 8013caa:	6083      	str	r3, [r0, #8]
 8013cac:	f240 1301 	movw	r3, #257	@ 0x101
 8013cb0:	4617      	mov	r7, r2
 8013cb2:	8183      	strh	r3, [r0, #12]
 8013cb4:	460c      	mov	r4, r1
 8013cb6:	46a8      	mov	r8, r5
 8013cb8:	4621      	mov	r1, r4
 8013cba:	4630      	mov	r0, r6
 8013cbc:	3501      	adds	r5, #1
 8013cbe:	f008 fb7f 	bl	801c3c0 <put_memory>
 8013cc2:	42af      	cmp	r7, r5
 8013cc4:	60a4      	str	r4, [r4, #8]
 8013cc6:	f884 800c 	strb.w	r8, [r4, #12]
 8013cca:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8013cce:	d1f3      	bne.n	8013cb8 <rmw_uxrce_init_publisher_memory+0x20>
 8013cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd4:	4770      	bx	lr
 8013cd6:	bf00      	nop

08013cd8 <rmw_uxrce_init_subscription_memory>:
 8013cd8:	b1e2      	cbz	r2, 8013d14 <rmw_uxrce_init_subscription_memory+0x3c>
 8013cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cde:	7b05      	ldrb	r5, [r0, #12]
 8013ce0:	4606      	mov	r6, r0
 8013ce2:	b9ad      	cbnz	r5, 8013d10 <rmw_uxrce_init_subscription_memory+0x38>
 8013ce4:	23d8      	movs	r3, #216	@ 0xd8
 8013ce6:	e9c0 5500 	strd	r5, r5, [r0]
 8013cea:	6083      	str	r3, [r0, #8]
 8013cec:	f240 1301 	movw	r3, #257	@ 0x101
 8013cf0:	4617      	mov	r7, r2
 8013cf2:	8183      	strh	r3, [r0, #12]
 8013cf4:	460c      	mov	r4, r1
 8013cf6:	46a8      	mov	r8, r5
 8013cf8:	4621      	mov	r1, r4
 8013cfa:	4630      	mov	r0, r6
 8013cfc:	3501      	adds	r5, #1
 8013cfe:	f008 fb5f 	bl	801c3c0 <put_memory>
 8013d02:	42af      	cmp	r7, r5
 8013d04:	60a4      	str	r4, [r4, #8]
 8013d06:	f884 800c 	strb.w	r8, [r4, #12]
 8013d0a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8013d0e:	d1f3      	bne.n	8013cf8 <rmw_uxrce_init_subscription_memory+0x20>
 8013d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d14:	4770      	bx	lr
 8013d16:	bf00      	nop

08013d18 <rmw_uxrce_init_node_memory>:
 8013d18:	b1e2      	cbz	r2, 8013d54 <rmw_uxrce_init_node_memory+0x3c>
 8013d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d1e:	7b05      	ldrb	r5, [r0, #12]
 8013d20:	4606      	mov	r6, r0
 8013d22:	b9ad      	cbnz	r5, 8013d50 <rmw_uxrce_init_node_memory+0x38>
 8013d24:	23a4      	movs	r3, #164	@ 0xa4
 8013d26:	e9c0 5500 	strd	r5, r5, [r0]
 8013d2a:	6083      	str	r3, [r0, #8]
 8013d2c:	f240 1301 	movw	r3, #257	@ 0x101
 8013d30:	4617      	mov	r7, r2
 8013d32:	8183      	strh	r3, [r0, #12]
 8013d34:	460c      	mov	r4, r1
 8013d36:	46a8      	mov	r8, r5
 8013d38:	4621      	mov	r1, r4
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	3501      	adds	r5, #1
 8013d3e:	f008 fb3f 	bl	801c3c0 <put_memory>
 8013d42:	42af      	cmp	r7, r5
 8013d44:	60a4      	str	r4, [r4, #8]
 8013d46:	f884 800c 	strb.w	r8, [r4, #12]
 8013d4a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8013d4e:	d1f3      	bne.n	8013d38 <rmw_uxrce_init_node_memory+0x20>
 8013d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop

08013d58 <rmw_uxrce_init_session_memory>:
 8013d58:	b1ea      	cbz	r2, 8013d96 <rmw_uxrce_init_session_memory+0x3e>
 8013d5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d5e:	7b05      	ldrb	r5, [r0, #12]
 8013d60:	4606      	mov	r6, r0
 8013d62:	b9b5      	cbnz	r5, 8013d92 <rmw_uxrce_init_session_memory+0x3a>
 8013d64:	e9c0 5500 	strd	r5, r5, [r0]
 8013d68:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8013d6c:	f240 1301 	movw	r3, #257	@ 0x101
 8013d70:	4617      	mov	r7, r2
 8013d72:	f8c0 8008 	str.w	r8, [r0, #8]
 8013d76:	460c      	mov	r4, r1
 8013d78:	8183      	strh	r3, [r0, #12]
 8013d7a:	46a9      	mov	r9, r5
 8013d7c:	4621      	mov	r1, r4
 8013d7e:	4630      	mov	r0, r6
 8013d80:	3501      	adds	r5, #1
 8013d82:	f008 fb1d 	bl	801c3c0 <put_memory>
 8013d86:	42af      	cmp	r7, r5
 8013d88:	60a4      	str	r4, [r4, #8]
 8013d8a:	f884 900c 	strb.w	r9, [r4, #12]
 8013d8e:	4444      	add	r4, r8
 8013d90:	d1f4      	bne.n	8013d7c <rmw_uxrce_init_session_memory+0x24>
 8013d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d96:	4770      	bx	lr

08013d98 <rmw_uxrce_init_topic_memory>:
 8013d98:	b1e2      	cbz	r2, 8013dd4 <rmw_uxrce_init_topic_memory+0x3c>
 8013d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d9e:	7b05      	ldrb	r5, [r0, #12]
 8013da0:	4606      	mov	r6, r0
 8013da2:	b9ad      	cbnz	r5, 8013dd0 <rmw_uxrce_init_topic_memory+0x38>
 8013da4:	231c      	movs	r3, #28
 8013da6:	e9c0 5500 	strd	r5, r5, [r0]
 8013daa:	6083      	str	r3, [r0, #8]
 8013dac:	f240 1301 	movw	r3, #257	@ 0x101
 8013db0:	4617      	mov	r7, r2
 8013db2:	8183      	strh	r3, [r0, #12]
 8013db4:	460c      	mov	r4, r1
 8013db6:	46a8      	mov	r8, r5
 8013db8:	4621      	mov	r1, r4
 8013dba:	4630      	mov	r0, r6
 8013dbc:	3501      	adds	r5, #1
 8013dbe:	f008 faff 	bl	801c3c0 <put_memory>
 8013dc2:	42af      	cmp	r7, r5
 8013dc4:	60a4      	str	r4, [r4, #8]
 8013dc6:	f884 800c 	strb.w	r8, [r4, #12]
 8013dca:	f104 041c 	add.w	r4, r4, #28
 8013dce:	d1f3      	bne.n	8013db8 <rmw_uxrce_init_topic_memory+0x20>
 8013dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dd4:	4770      	bx	lr
 8013dd6:	bf00      	nop

08013dd8 <rmw_uxrce_init_static_input_buffer_memory>:
 8013dd8:	b1ea      	cbz	r2, 8013e16 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8013dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dde:	7b05      	ldrb	r5, [r0, #12]
 8013de0:	4606      	mov	r6, r0
 8013de2:	b9b5      	cbnz	r5, 8013e12 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8013de4:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8013de8:	e9c0 5500 	strd	r5, r5, [r0]
 8013dec:	6083      	str	r3, [r0, #8]
 8013dee:	f240 1301 	movw	r3, #257	@ 0x101
 8013df2:	4617      	mov	r7, r2
 8013df4:	8183      	strh	r3, [r0, #12]
 8013df6:	460c      	mov	r4, r1
 8013df8:	46a8      	mov	r8, r5
 8013dfa:	4621      	mov	r1, r4
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	3501      	adds	r5, #1
 8013e00:	f008 fade 	bl	801c3c0 <put_memory>
 8013e04:	42af      	cmp	r7, r5
 8013e06:	60a4      	str	r4, [r4, #8]
 8013e08:	f884 800c 	strb.w	r8, [r4, #12]
 8013e0c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8013e10:	d1f3      	bne.n	8013dfa <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8013e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e16:	4770      	bx	lr

08013e18 <rmw_uxrce_init_init_options_impl_memory>:
 8013e18:	b1e2      	cbz	r2, 8013e54 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8013e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e1e:	7b05      	ldrb	r5, [r0, #12]
 8013e20:	4606      	mov	r6, r0
 8013e22:	b9ad      	cbnz	r5, 8013e50 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8013e24:	232c      	movs	r3, #44	@ 0x2c
 8013e26:	e9c0 5500 	strd	r5, r5, [r0]
 8013e2a:	6083      	str	r3, [r0, #8]
 8013e2c:	f240 1301 	movw	r3, #257	@ 0x101
 8013e30:	4617      	mov	r7, r2
 8013e32:	8183      	strh	r3, [r0, #12]
 8013e34:	460c      	mov	r4, r1
 8013e36:	46a8      	mov	r8, r5
 8013e38:	4621      	mov	r1, r4
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	3501      	adds	r5, #1
 8013e3e:	f008 fabf 	bl	801c3c0 <put_memory>
 8013e42:	42af      	cmp	r7, r5
 8013e44:	60a4      	str	r4, [r4, #8]
 8013e46:	f884 800c 	strb.w	r8, [r4, #12]
 8013e4a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8013e4e:	d1f3      	bne.n	8013e38 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8013e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e54:	4770      	bx	lr
 8013e56:	bf00      	nop

08013e58 <rmw_uxrce_init_wait_set_memory>:
 8013e58:	b1e2      	cbz	r2, 8013e94 <rmw_uxrce_init_wait_set_memory+0x3c>
 8013e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5e:	7b05      	ldrb	r5, [r0, #12]
 8013e60:	4606      	mov	r6, r0
 8013e62:	b9ad      	cbnz	r5, 8013e90 <rmw_uxrce_init_wait_set_memory+0x38>
 8013e64:	231c      	movs	r3, #28
 8013e66:	e9c0 5500 	strd	r5, r5, [r0]
 8013e6a:	6083      	str	r3, [r0, #8]
 8013e6c:	f240 1301 	movw	r3, #257	@ 0x101
 8013e70:	4617      	mov	r7, r2
 8013e72:	8183      	strh	r3, [r0, #12]
 8013e74:	460c      	mov	r4, r1
 8013e76:	46a8      	mov	r8, r5
 8013e78:	4621      	mov	r1, r4
 8013e7a:	4630      	mov	r0, r6
 8013e7c:	3501      	adds	r5, #1
 8013e7e:	f008 fa9f 	bl	801c3c0 <put_memory>
 8013e82:	42af      	cmp	r7, r5
 8013e84:	60a4      	str	r4, [r4, #8]
 8013e86:	f884 800c 	strb.w	r8, [r4, #12]
 8013e8a:	f104 041c 	add.w	r4, r4, #28
 8013e8e:	d1f3      	bne.n	8013e78 <rmw_uxrce_init_wait_set_memory+0x20>
 8013e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e94:	4770      	bx	lr
 8013e96:	bf00      	nop

08013e98 <rmw_uxrce_init_guard_condition_memory>:
 8013e98:	b1e2      	cbz	r2, 8013ed4 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8013e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e9e:	7b05      	ldrb	r5, [r0, #12]
 8013ea0:	4606      	mov	r6, r0
 8013ea2:	b9ad      	cbnz	r5, 8013ed0 <rmw_uxrce_init_guard_condition_memory+0x38>
 8013ea4:	2320      	movs	r3, #32
 8013ea6:	e9c0 5500 	strd	r5, r5, [r0]
 8013eaa:	6083      	str	r3, [r0, #8]
 8013eac:	f240 1301 	movw	r3, #257	@ 0x101
 8013eb0:	4617      	mov	r7, r2
 8013eb2:	8183      	strh	r3, [r0, #12]
 8013eb4:	460c      	mov	r4, r1
 8013eb6:	46a8      	mov	r8, r5
 8013eb8:	4621      	mov	r1, r4
 8013eba:	4630      	mov	r0, r6
 8013ebc:	3501      	adds	r5, #1
 8013ebe:	f008 fa7f 	bl	801c3c0 <put_memory>
 8013ec2:	42af      	cmp	r7, r5
 8013ec4:	60a4      	str	r4, [r4, #8]
 8013ec6:	f884 800c 	strb.w	r8, [r4, #12]
 8013eca:	f104 0420 	add.w	r4, r4, #32
 8013ece:	d1f3      	bne.n	8013eb8 <rmw_uxrce_init_guard_condition_memory+0x20>
 8013ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ed4:	4770      	bx	lr
 8013ed6:	bf00      	nop

08013ed8 <rmw_uxrce_fini_session_memory>:
 8013ed8:	4601      	mov	r1, r0
 8013eda:	4801      	ldr	r0, [pc, #4]	@ (8013ee0 <rmw_uxrce_fini_session_memory+0x8>)
 8013edc:	f008 ba70 	b.w	801c3c0 <put_memory>
 8013ee0:	2000c3d4 	.word	0x2000c3d4

08013ee4 <rmw_uxrce_fini_node_memory>:
 8013ee4:	b538      	push	{r3, r4, r5, lr}
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	6800      	ldr	r0, [r0, #0]
 8013eea:	b128      	cbz	r0, 8013ef8 <rmw_uxrce_fini_node_memory+0x14>
 8013eec:	4b07      	ldr	r3, [pc, #28]	@ (8013f0c <rmw_uxrce_fini_node_memory+0x28>)
 8013eee:	6819      	ldr	r1, [r3, #0]
 8013ef0:	f7ec f996 	bl	8000220 <strcmp>
 8013ef4:	b940      	cbnz	r0, 8013f08 <rmw_uxrce_fini_node_memory+0x24>
 8013ef6:	6020      	str	r0, [r4, #0]
 8013ef8:	6861      	ldr	r1, [r4, #4]
 8013efa:	b129      	cbz	r1, 8013f08 <rmw_uxrce_fini_node_memory+0x24>
 8013efc:	2500      	movs	r5, #0
 8013efe:	4804      	ldr	r0, [pc, #16]	@ (8013f10 <rmw_uxrce_fini_node_memory+0x2c>)
 8013f00:	610d      	str	r5, [r1, #16]
 8013f02:	f008 fa5d 	bl	801c3c0 <put_memory>
 8013f06:	6065      	str	r5, [r4, #4]
 8013f08:	bd38      	pop	{r3, r4, r5, pc}
 8013f0a:	bf00      	nop
 8013f0c:	08021548 	.word	0x08021548
 8013f10:	2000c3a4 	.word	0x2000c3a4

08013f14 <rmw_uxrce_fini_publisher_memory>:
 8013f14:	b510      	push	{r4, lr}
 8013f16:	4604      	mov	r4, r0
 8013f18:	6800      	ldr	r0, [r0, #0]
 8013f1a:	b128      	cbz	r0, 8013f28 <rmw_uxrce_fini_publisher_memory+0x14>
 8013f1c:	4b06      	ldr	r3, [pc, #24]	@ (8013f38 <rmw_uxrce_fini_publisher_memory+0x24>)
 8013f1e:	6819      	ldr	r1, [r3, #0]
 8013f20:	f7ec f97e 	bl	8000220 <strcmp>
 8013f24:	b938      	cbnz	r0, 8013f36 <rmw_uxrce_fini_publisher_memory+0x22>
 8013f26:	6020      	str	r0, [r4, #0]
 8013f28:	6861      	ldr	r1, [r4, #4]
 8013f2a:	b121      	cbz	r1, 8013f36 <rmw_uxrce_fini_publisher_memory+0x22>
 8013f2c:	4803      	ldr	r0, [pc, #12]	@ (8013f3c <rmw_uxrce_fini_publisher_memory+0x28>)
 8013f2e:	f008 fa47 	bl	801c3c0 <put_memory>
 8013f32:	2300      	movs	r3, #0
 8013f34:	6063      	str	r3, [r4, #4]
 8013f36:	bd10      	pop	{r4, pc}
 8013f38:	08021548 	.word	0x08021548
 8013f3c:	2000c3b4 	.word	0x2000c3b4

08013f40 <rmw_uxrce_fini_subscription_memory>:
 8013f40:	b510      	push	{r4, lr}
 8013f42:	4604      	mov	r4, r0
 8013f44:	6800      	ldr	r0, [r0, #0]
 8013f46:	b128      	cbz	r0, 8013f54 <rmw_uxrce_fini_subscription_memory+0x14>
 8013f48:	4b06      	ldr	r3, [pc, #24]	@ (8013f64 <rmw_uxrce_fini_subscription_memory+0x24>)
 8013f4a:	6819      	ldr	r1, [r3, #0]
 8013f4c:	f7ec f968 	bl	8000220 <strcmp>
 8013f50:	b938      	cbnz	r0, 8013f62 <rmw_uxrce_fini_subscription_memory+0x22>
 8013f52:	6020      	str	r0, [r4, #0]
 8013f54:	6861      	ldr	r1, [r4, #4]
 8013f56:	b121      	cbz	r1, 8013f62 <rmw_uxrce_fini_subscription_memory+0x22>
 8013f58:	4803      	ldr	r0, [pc, #12]	@ (8013f68 <rmw_uxrce_fini_subscription_memory+0x28>)
 8013f5a:	f008 fa31 	bl	801c3c0 <put_memory>
 8013f5e:	2300      	movs	r3, #0
 8013f60:	6063      	str	r3, [r4, #4]
 8013f62:	bd10      	pop	{r4, pc}
 8013f64:	08021548 	.word	0x08021548
 8013f68:	2000c3f4 	.word	0x2000c3f4

08013f6c <rmw_uxrce_fini_service_memory>:
 8013f6c:	b510      	push	{r4, lr}
 8013f6e:	4604      	mov	r4, r0
 8013f70:	6800      	ldr	r0, [r0, #0]
 8013f72:	b128      	cbz	r0, 8013f80 <rmw_uxrce_fini_service_memory+0x14>
 8013f74:	4b06      	ldr	r3, [pc, #24]	@ (8013f90 <rmw_uxrce_fini_service_memory+0x24>)
 8013f76:	6819      	ldr	r1, [r3, #0]
 8013f78:	f7ec f952 	bl	8000220 <strcmp>
 8013f7c:	b938      	cbnz	r0, 8013f8e <rmw_uxrce_fini_service_memory+0x22>
 8013f7e:	6020      	str	r0, [r4, #0]
 8013f80:	6861      	ldr	r1, [r4, #4]
 8013f82:	b121      	cbz	r1, 8013f8e <rmw_uxrce_fini_service_memory+0x22>
 8013f84:	4803      	ldr	r0, [pc, #12]	@ (8013f94 <rmw_uxrce_fini_service_memory+0x28>)
 8013f86:	f008 fa1b 	bl	801c3c0 <put_memory>
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	6063      	str	r3, [r4, #4]
 8013f8e:	bd10      	pop	{r4, pc}
 8013f90:	08021548 	.word	0x08021548
 8013f94:	2000c3c4 	.word	0x2000c3c4

08013f98 <rmw_uxrce_fini_client_memory>:
 8013f98:	b510      	push	{r4, lr}
 8013f9a:	4604      	mov	r4, r0
 8013f9c:	6800      	ldr	r0, [r0, #0]
 8013f9e:	b128      	cbz	r0, 8013fac <rmw_uxrce_fini_client_memory+0x14>
 8013fa0:	4b06      	ldr	r3, [pc, #24]	@ (8013fbc <rmw_uxrce_fini_client_memory+0x24>)
 8013fa2:	6819      	ldr	r1, [r3, #0]
 8013fa4:	f7ec f93c 	bl	8000220 <strcmp>
 8013fa8:	b938      	cbnz	r0, 8013fba <rmw_uxrce_fini_client_memory+0x22>
 8013faa:	6020      	str	r0, [r4, #0]
 8013fac:	6861      	ldr	r1, [r4, #4]
 8013fae:	b121      	cbz	r1, 8013fba <rmw_uxrce_fini_client_memory+0x22>
 8013fb0:	4803      	ldr	r0, [pc, #12]	@ (8013fc0 <rmw_uxrce_fini_client_memory+0x28>)
 8013fb2:	f008 fa05 	bl	801c3c0 <put_memory>
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	6063      	str	r3, [r4, #4]
 8013fba:	bd10      	pop	{r4, pc}
 8013fbc:	08021548 	.word	0x08021548
 8013fc0:	200077b8 	.word	0x200077b8

08013fc4 <rmw_uxrce_fini_topic_memory>:
 8013fc4:	b510      	push	{r4, lr}
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	4621      	mov	r1, r4
 8013fca:	4803      	ldr	r0, [pc, #12]	@ (8013fd8 <rmw_uxrce_fini_topic_memory+0x14>)
 8013fcc:	f008 f9f8 	bl	801c3c0 <put_memory>
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	61a3      	str	r3, [r4, #24]
 8013fd4:	bd10      	pop	{r4, pc}
 8013fd6:	bf00      	nop
 8013fd8:	2000c404 	.word	0x2000c404

08013fdc <rmw_uxrce_get_static_input_buffer_for_entity>:
 8013fdc:	b082      	sub	sp, #8
 8013fde:	b530      	push	{r4, r5, lr}
 8013fe0:	4925      	ldr	r1, [pc, #148]	@ (8014078 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8013fe2:	680d      	ldr	r5, [r1, #0]
 8013fe4:	ac03      	add	r4, sp, #12
 8013fe6:	e884 000c 	stmia.w	r4, {r2, r3}
 8013fea:	461c      	mov	r4, r3
 8013fec:	2d00      	cmp	r5, #0
 8013fee:	d041      	beq.n	8014074 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8013ff0:	462b      	mov	r3, r5
 8013ff2:	2100      	movs	r1, #0
 8013ff4:	689a      	ldr	r2, [r3, #8]
 8013ff6:	685b      	ldr	r3, [r3, #4]
 8013ff8:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8013ffc:	4290      	cmp	r0, r2
 8013ffe:	bf08      	it	eq
 8014000:	3101      	addeq	r1, #1
 8014002:	2b00      	cmp	r3, #0
 8014004:	d1f6      	bne.n	8013ff4 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8014006:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801400a:	2b02      	cmp	r3, #2
 801400c:	d029      	beq.n	8014062 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801400e:	d907      	bls.n	8014020 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8014010:	2b03      	cmp	r3, #3
 8014012:	d005      	beq.n	8014020 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8014014:	2100      	movs	r1, #0
 8014016:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801401a:	4608      	mov	r0, r1
 801401c:	b002      	add	sp, #8
 801401e:	4770      	bx	lr
 8014020:	b314      	cbz	r4, 8014068 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8014022:	428c      	cmp	r4, r1
 8014024:	d820      	bhi.n	8014068 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8014026:	2d00      	cmp	r5, #0
 8014028:	d0f4      	beq.n	8014014 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801402a:	2100      	movs	r1, #0
 801402c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014030:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8014034:	e002      	b.n	801403c <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8014036:	686d      	ldr	r5, [r5, #4]
 8014038:	2d00      	cmp	r5, #0
 801403a:	d0ec      	beq.n	8014016 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 801403c:	68ab      	ldr	r3, [r5, #8]
 801403e:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8014042:	4290      	cmp	r0, r2
 8014044:	d1f7      	bne.n	8014036 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8014046:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 801404a:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801404e:	4562      	cmp	r2, ip
 8014050:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014054:	eb73 0e04 	sbcs.w	lr, r3, r4
 8014058:	daed      	bge.n	8014036 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801405a:	4694      	mov	ip, r2
 801405c:	461c      	mov	r4, r3
 801405e:	4629      	mov	r1, r5
 8014060:	e7e9      	b.n	8014036 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8014062:	b10c      	cbz	r4, 8014068 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8014064:	428c      	cmp	r4, r1
 8014066:	d9d5      	bls.n	8014014 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8014068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801406c:	4802      	ldr	r0, [pc, #8]	@ (8014078 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 801406e:	b002      	add	sp, #8
 8014070:	f008 b996 	b.w	801c3a0 <get_memory>
 8014074:	4629      	mov	r1, r5
 8014076:	e7c6      	b.n	8014006 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8014078:	2000c3e4 	.word	0x2000c3e4

0801407c <rmw_uxrce_find_static_input_buffer_by_owner>:
 801407c:	4b11      	ldr	r3, [pc, #68]	@ (80140c4 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	b530      	push	{r4, r5, lr}
 8014082:	b1e3      	cbz	r3, 80140be <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8014084:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8014088:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801408c:	2400      	movs	r4, #0
 801408e:	e001      	b.n	8014094 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8014090:	685b      	ldr	r3, [r3, #4]
 8014092:	b193      	cbz	r3, 80140ba <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8014094:	689a      	ldr	r2, [r3, #8]
 8014096:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801409a:	4288      	cmp	r0, r1
 801409c:	d1f8      	bne.n	8014090 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801409e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 80140a2:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 80140a6:	4571      	cmp	r1, lr
 80140a8:	eb72 050c 	sbcs.w	r5, r2, ip
 80140ac:	daf0      	bge.n	8014090 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80140ae:	461c      	mov	r4, r3
 80140b0:	685b      	ldr	r3, [r3, #4]
 80140b2:	468e      	mov	lr, r1
 80140b4:	4694      	mov	ip, r2
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d1ec      	bne.n	8014094 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80140ba:	4620      	mov	r0, r4
 80140bc:	bd30      	pop	{r4, r5, pc}
 80140be:	461c      	mov	r4, r3
 80140c0:	4620      	mov	r0, r4
 80140c2:	bd30      	pop	{r4, r5, pc}
 80140c4:	2000c3e4 	.word	0x2000c3e4

080140c8 <rmw_uxrce_clean_expired_static_input_buffer>:
 80140c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140cc:	4b3c      	ldr	r3, [pc, #240]	@ (80141c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80140ce:	ed2d 8b06 	vpush	{d8-d10}
 80140d2:	681f      	ldr	r7, [r3, #0]
 80140d4:	b08d      	sub	sp, #52	@ 0x34
 80140d6:	f7ff fd7f 	bl	8013bd8 <rmw_uros_epoch_nanos>
 80140da:	2f00      	cmp	r7, #0
 80140dc:	d05d      	beq.n	801419a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80140de:	46b8      	mov	r8, r7
 80140e0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 80141a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 80140e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80140e8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80140ec:	2b04      	cmp	r3, #4
 80140ee:	ed9f ab30 	vldr	d10, [pc, #192]	@ 80141b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80140f2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 80141b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80140f6:	4681      	mov	r9, r0
 80140f8:	468a      	mov	sl, r1
 80140fa:	ac04      	add	r4, sp, #16
 80140fc:	d03f      	beq.n	801417e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80140fe:	2b05      	cmp	r3, #5
 8014100:	d044      	beq.n	801418c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8014102:	2b03      	cmp	r3, #3
 8014104:	d03b      	beq.n	801417e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8014106:	ed8d 8b04 	vstr	d8, [sp, #16]
 801410a:	ed8d ab06 	vstr	d10, [sp, #24]
 801410e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014112:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8014116:	ab08      	add	r3, sp, #32
 8014118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801411a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801411e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014122:	f007 ffc9 	bl	801c0b8 <rmw_time_equal>
 8014126:	b118      	cbz	r0, 8014130 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8014128:	ed8d 9b04 	vstr	d9, [sp, #16]
 801412c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8014130:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014134:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8014138:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 801413c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8014140:	f008 f80e 	bl	801c160 <rmw_time_total_nsec>
 8014144:	1830      	adds	r0, r6, r0
 8014146:	eb47 0101 	adc.w	r1, r7, r1
 801414a:	4548      	cmp	r0, r9
 801414c:	eb71 030a 	sbcs.w	r3, r1, sl
 8014150:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8014154:	db05      	blt.n	8014162 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8014156:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801415a:	4591      	cmp	r9, r2
 801415c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8014160:	da03      	bge.n	801416a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8014162:	4817      	ldr	r0, [pc, #92]	@ (80141c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8014164:	4641      	mov	r1, r8
 8014166:	f008 f92b 	bl	801c3c0 <put_memory>
 801416a:	f1bb 0f00 	cmp.w	fp, #0
 801416e:	d014      	beq.n	801419a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8014170:	46d8      	mov	r8, fp
 8014172:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014176:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801417a:	2b04      	cmp	r3, #4
 801417c:	d1bf      	bne.n	80140fe <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801417e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8014182:	3340      	adds	r3, #64	@ 0x40
 8014184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801418a:	e7c0      	b.n	801410e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801418c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8014190:	3348      	adds	r3, #72	@ 0x48
 8014192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014198:	e7b9      	b.n	801410e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801419a:	b00d      	add	sp, #52	@ 0x34
 801419c:	ecbd 8b06 	vpop	{d8-d10}
 80141a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a4:	f3af 8000 	nop.w
	...
 80141b0:	00000001 	.word	0x00000001
 80141b4:	00000000 	.word	0x00000000
 80141b8:	0000001e 	.word	0x0000001e
 80141bc:	00000000 	.word	0x00000000
 80141c0:	2000c3e4 	.word	0x2000c3e4

080141c4 <run_xrce_session>:
 80141c4:	b510      	push	{r4, lr}
 80141c6:	788c      	ldrb	r4, [r1, #2]
 80141c8:	b086      	sub	sp, #24
 80141ca:	2c01      	cmp	r4, #1
 80141cc:	f8ad 200e 	strh.w	r2, [sp, #14]
 80141d0:	d00c      	beq.n	80141ec <run_xrce_session+0x28>
 80141d2:	4619      	mov	r1, r3
 80141d4:	2301      	movs	r3, #1
 80141d6:	9300      	str	r3, [sp, #0]
 80141d8:	f10d 020e 	add.w	r2, sp, #14
 80141dc:	f10d 0317 	add.w	r3, sp, #23
 80141e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80141e4:	f002 fcb0 	bl	8016b48 <uxr_run_session_until_all_status>
 80141e8:	b006      	add	sp, #24
 80141ea:	bd10      	pop	{r4, pc}
 80141ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80141f0:	f002 f8c4 	bl	801637c <uxr_flash_output_streams>
 80141f4:	4620      	mov	r0, r4
 80141f6:	b006      	add	sp, #24
 80141f8:	bd10      	pop	{r4, pc}
 80141fa:	bf00      	nop

080141fc <convert_qos_profile>:
 80141fc:	7a4a      	ldrb	r2, [r1, #9]
 80141fe:	f891 c008 	ldrb.w	ip, [r1, #8]
 8014202:	2a02      	cmp	r2, #2
 8014204:	bf18      	it	ne
 8014206:	2200      	movne	r2, #0
 8014208:	7002      	strb	r2, [r0, #0]
 801420a:	780a      	ldrb	r2, [r1, #0]
 801420c:	8889      	ldrh	r1, [r1, #4]
 801420e:	8081      	strh	r1, [r0, #4]
 8014210:	f1ac 0c02 	sub.w	ip, ip, #2
 8014214:	f1a2 0202 	sub.w	r2, r2, #2
 8014218:	fabc fc8c 	clz	ip, ip
 801421c:	fab2 f282 	clz	r2, r2
 8014220:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014224:	0952      	lsrs	r2, r2, #5
 8014226:	f880 c001 	strb.w	ip, [r0, #1]
 801422a:	7082      	strb	r2, [r0, #2]
 801422c:	4770      	bx	lr
 801422e:	bf00      	nop

08014230 <generate_service_topics>:
 8014230:	b570      	push	{r4, r5, r6, lr}
 8014232:	b082      	sub	sp, #8
 8014234:	461c      	mov	r4, r3
 8014236:	4b12      	ldr	r3, [pc, #72]	@ (8014280 <generate_service_topics+0x50>)
 8014238:	9301      	str	r3, [sp, #4]
 801423a:	4605      	mov	r5, r0
 801423c:	4b11      	ldr	r3, [pc, #68]	@ (8014284 <generate_service_topics+0x54>)
 801423e:	9000      	str	r0, [sp, #0]
 8014240:	4616      	mov	r6, r2
 8014242:	4608      	mov	r0, r1
 8014244:	4a10      	ldr	r2, [pc, #64]	@ (8014288 <generate_service_topics+0x58>)
 8014246:	4621      	mov	r1, r4
 8014248:	f009 fe2c 	bl	801dea4 <sniprintf>
 801424c:	4b0f      	ldr	r3, [pc, #60]	@ (801428c <generate_service_topics+0x5c>)
 801424e:	9301      	str	r3, [sp, #4]
 8014250:	4601      	mov	r1, r0
 8014252:	9500      	str	r5, [sp, #0]
 8014254:	4b0e      	ldr	r3, [pc, #56]	@ (8014290 <generate_service_topics+0x60>)
 8014256:	4a0c      	ldr	r2, [pc, #48]	@ (8014288 <generate_service_topics+0x58>)
 8014258:	460d      	mov	r5, r1
 801425a:	4630      	mov	r0, r6
 801425c:	4621      	mov	r1, r4
 801425e:	f009 fe21 	bl	801dea4 <sniprintf>
 8014262:	2d00      	cmp	r5, #0
 8014264:	db01      	blt.n	801426a <generate_service_topics+0x3a>
 8014266:	42ac      	cmp	r4, r5
 8014268:	dc02      	bgt.n	8014270 <generate_service_topics+0x40>
 801426a:	2000      	movs	r0, #0
 801426c:	b002      	add	sp, #8
 801426e:	bd70      	pop	{r4, r5, r6, pc}
 8014270:	2800      	cmp	r0, #0
 8014272:	dbfa      	blt.n	801426a <generate_service_topics+0x3a>
 8014274:	4284      	cmp	r4, r0
 8014276:	bfd4      	ite	le
 8014278:	2000      	movle	r0, #0
 801427a:	2001      	movgt	r0, #1
 801427c:	b002      	add	sp, #8
 801427e:	bd70      	pop	{r4, r5, r6, pc}
 8014280:	08020408 	.word	0x08020408
 8014284:	08020404 	.word	0x08020404
 8014288:	080203e8 	.word	0x080203e8
 801428c:	080203fc 	.word	0x080203fc
 8014290:	080203f8 	.word	0x080203f8

08014294 <generate_service_types>:
 8014294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014298:	4605      	mov	r5, r0
 801429a:	b086      	sub	sp, #24
 801429c:	6880      	ldr	r0, [r0, #8]
 801429e:	460c      	mov	r4, r1
 80142a0:	4617      	mov	r7, r2
 80142a2:	461e      	mov	r6, r3
 80142a4:	4780      	blx	r0
 80142a6:	68eb      	ldr	r3, [r5, #12]
 80142a8:	4680      	mov	r8, r0
 80142aa:	4798      	blx	r3
 80142ac:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80142b0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80142b4:	2300      	movs	r3, #0
 80142b6:	7023      	strb	r3, [r4, #0]
 80142b8:	6813      	ldr	r3, [r2, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d042      	beq.n	8014344 <generate_service_types+0xb0>
 80142be:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8014358 <generate_service_types+0xc4>
 80142c2:	4641      	mov	r1, r8
 80142c4:	4620      	mov	r0, r4
 80142c6:	4c22      	ldr	r4, [pc, #136]	@ (8014350 <generate_service_types+0xbc>)
 80142c8:	9405      	str	r4, [sp, #20]
 80142ca:	6852      	ldr	r2, [r2, #4]
 80142cc:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8014360 <generate_service_types+0xcc>
 80142d0:	9204      	str	r2, [sp, #16]
 80142d2:	9100      	str	r1, [sp, #0]
 80142d4:	e9cd 4802 	strd	r4, r8, [sp, #8]
 80142d8:	4a1e      	ldr	r2, [pc, #120]	@ (8014354 <generate_service_types+0xc0>)
 80142da:	f8cd a004 	str.w	sl, [sp, #4]
 80142de:	4631      	mov	r1, r6
 80142e0:	f009 fde0 	bl	801dea4 <sniprintf>
 80142e4:	2800      	cmp	r0, #0
 80142e6:	db1f      	blt.n	8014328 <generate_service_types+0x94>
 80142e8:	2300      	movs	r3, #0
 80142ea:	703b      	strb	r3, [r7, #0]
 80142ec:	f8d9 3000 	ldr.w	r3, [r9]
 80142f0:	42b0      	cmp	r0, r6
 80142f2:	bfac      	ite	ge
 80142f4:	2500      	movge	r5, #0
 80142f6:	2501      	movlt	r5, #1
 80142f8:	b1eb      	cbz	r3, 8014336 <generate_service_types+0xa2>
 80142fa:	4a17      	ldr	r2, [pc, #92]	@ (8014358 <generate_service_types+0xc4>)
 80142fc:	9405      	str	r4, [sp, #20]
 80142fe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014302:	9200      	str	r2, [sp, #0]
 8014304:	e9cd 8103 	strd	r8, r1, [sp, #12]
 8014308:	e9cd a401 	strd	sl, r4, [sp, #4]
 801430c:	4a11      	ldr	r2, [pc, #68]	@ (8014354 <generate_service_types+0xc0>)
 801430e:	4638      	mov	r0, r7
 8014310:	4631      	mov	r1, r6
 8014312:	f009 fdc7 	bl	801dea4 <sniprintf>
 8014316:	2800      	cmp	r0, #0
 8014318:	db10      	blt.n	801433c <generate_service_types+0xa8>
 801431a:	42b0      	cmp	r0, r6
 801431c:	bfb4      	ite	lt
 801431e:	4628      	movlt	r0, r5
 8014320:	2000      	movge	r0, #0
 8014322:	b006      	add	sp, #24
 8014324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014328:	2300      	movs	r3, #0
 801432a:	703b      	strb	r3, [r7, #0]
 801432c:	f8d9 3000 	ldr.w	r3, [r9]
 8014330:	2500      	movs	r5, #0
 8014332:	2b00      	cmp	r3, #0
 8014334:	d1e1      	bne.n	80142fa <generate_service_types+0x66>
 8014336:	4b09      	ldr	r3, [pc, #36]	@ (801435c <generate_service_types+0xc8>)
 8014338:	461a      	mov	r2, r3
 801433a:	e7df      	b.n	80142fc <generate_service_types+0x68>
 801433c:	2000      	movs	r0, #0
 801433e:	b006      	add	sp, #24
 8014340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014344:	4b05      	ldr	r3, [pc, #20]	@ (801435c <generate_service_types+0xc8>)
 8014346:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 8014358 <generate_service_types+0xc4>
 801434a:	4619      	mov	r1, r3
 801434c:	e7ba      	b.n	80142c4 <generate_service_types+0x30>
 801434e:	bf00      	nop
 8014350:	080203f0 	.word	0x080203f0
 8014354:	080203e0 	.word	0x080203e0
 8014358:	080203dc 	.word	0x080203dc
 801435c:	08021598 	.word	0x08021598
 8014360:	080203f4 	.word	0x080203f4

08014364 <generate_type_name>:
 8014364:	b530      	push	{r4, r5, lr}
 8014366:	2300      	movs	r3, #0
 8014368:	700b      	strb	r3, [r1, #0]
 801436a:	6803      	ldr	r3, [r0, #0]
 801436c:	b087      	sub	sp, #28
 801436e:	4614      	mov	r4, r2
 8014370:	b1d3      	cbz	r3, 80143a8 <generate_type_name+0x44>
 8014372:	4a0f      	ldr	r2, [pc, #60]	@ (80143b0 <generate_type_name+0x4c>)
 8014374:	4615      	mov	r5, r2
 8014376:	9203      	str	r2, [sp, #12]
 8014378:	9500      	str	r5, [sp, #0]
 801437a:	6842      	ldr	r2, [r0, #4]
 801437c:	480d      	ldr	r0, [pc, #52]	@ (80143b4 <generate_type_name+0x50>)
 801437e:	9001      	str	r0, [sp, #4]
 8014380:	4608      	mov	r0, r1
 8014382:	490d      	ldr	r1, [pc, #52]	@ (80143b8 <generate_type_name+0x54>)
 8014384:	9204      	str	r2, [sp, #16]
 8014386:	9105      	str	r1, [sp, #20]
 8014388:	9102      	str	r1, [sp, #8]
 801438a:	4a0c      	ldr	r2, [pc, #48]	@ (80143bc <generate_type_name+0x58>)
 801438c:	4621      	mov	r1, r4
 801438e:	f009 fd89 	bl	801dea4 <sniprintf>
 8014392:	2800      	cmp	r0, #0
 8014394:	db05      	blt.n	80143a2 <generate_type_name+0x3e>
 8014396:	4284      	cmp	r4, r0
 8014398:	bfd4      	ite	le
 801439a:	2000      	movle	r0, #0
 801439c:	2001      	movgt	r0, #1
 801439e:	b007      	add	sp, #28
 80143a0:	bd30      	pop	{r4, r5, pc}
 80143a2:	2000      	movs	r0, #0
 80143a4:	b007      	add	sp, #28
 80143a6:	bd30      	pop	{r4, r5, pc}
 80143a8:	4b05      	ldr	r3, [pc, #20]	@ (80143c0 <generate_type_name+0x5c>)
 80143aa:	4a01      	ldr	r2, [pc, #4]	@ (80143b0 <generate_type_name+0x4c>)
 80143ac:	461d      	mov	r5, r3
 80143ae:	e7e2      	b.n	8014376 <generate_type_name+0x12>
 80143b0:	080203dc 	.word	0x080203dc
 80143b4:	080203f4 	.word	0x080203f4
 80143b8:	080203f0 	.word	0x080203f0
 80143bc:	080203e0 	.word	0x080203e0
 80143c0:	08021598 	.word	0x08021598

080143c4 <generate_topic_name>:
 80143c4:	b510      	push	{r4, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	4614      	mov	r4, r2
 80143ca:	9000      	str	r0, [sp, #0]
 80143cc:	4b08      	ldr	r3, [pc, #32]	@ (80143f0 <generate_topic_name+0x2c>)
 80143ce:	4a09      	ldr	r2, [pc, #36]	@ (80143f4 <generate_topic_name+0x30>)
 80143d0:	4608      	mov	r0, r1
 80143d2:	4621      	mov	r1, r4
 80143d4:	f009 fd66 	bl	801dea4 <sniprintf>
 80143d8:	2800      	cmp	r0, #0
 80143da:	db05      	blt.n	80143e8 <generate_topic_name+0x24>
 80143dc:	4284      	cmp	r4, r0
 80143de:	bfd4      	ite	le
 80143e0:	2000      	movle	r0, #0
 80143e2:	2001      	movgt	r0, #1
 80143e4:	b002      	add	sp, #8
 80143e6:	bd10      	pop	{r4, pc}
 80143e8:	2000      	movs	r0, #0
 80143ea:	b002      	add	sp, #8
 80143ec:	bd10      	pop	{r4, pc}
 80143ee:	bf00      	nop
 80143f0:	08020410 	.word	0x08020410
 80143f4:	0801fe44 	.word	0x0801fe44

080143f8 <is_uxrce_rmw_identifier_valid>:
 80143f8:	b510      	push	{r4, lr}
 80143fa:	4604      	mov	r4, r0
 80143fc:	b140      	cbz	r0, 8014410 <is_uxrce_rmw_identifier_valid+0x18>
 80143fe:	f7fe fbbf 	bl	8012b80 <rmw_get_implementation_identifier>
 8014402:	4601      	mov	r1, r0
 8014404:	4620      	mov	r0, r4
 8014406:	f7eb ff0b 	bl	8000220 <strcmp>
 801440a:	fab0 f080 	clz	r0, r0
 801440e:	0940      	lsrs	r0, r0, #5
 8014410:	bd10      	pop	{r4, pc}
 8014412:	bf00      	nop

08014414 <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard>:
 8014414:	4b04      	ldr	r3, [pc, #16]	@ (8014428 <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x14>)
 8014416:	681a      	ldr	r2, [r3, #0]
 8014418:	b10a      	cbz	r2, 801441e <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0xa>
 801441a:	4803      	ldr	r0, [pc, #12]	@ (8014428 <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x14>)
 801441c:	4770      	bx	lr
 801441e:	4a03      	ldr	r2, [pc, #12]	@ (801442c <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x18>)
 8014420:	4801      	ldr	r0, [pc, #4]	@ (8014428 <rosidl_typesupport_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x14>)
 8014422:	6812      	ldr	r2, [r2, #0]
 8014424:	601a      	str	r2, [r3, #0]
 8014426:	4770      	bx	lr
 8014428:	200003bc 	.word	0x200003bc
 801442c:	20000634 	.word	0x20000634

08014430 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request>:
 8014430:	4b04      	ldr	r3, [pc, #16]	@ (8014444 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x14>)
 8014432:	4805      	ldr	r0, [pc, #20]	@ (8014448 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x18>)
 8014434:	4905      	ldr	r1, [pc, #20]	@ (801444c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x1c>)
 8014436:	4a06      	ldr	r2, [pc, #24]	@ (8014450 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x20>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	6003      	str	r3, [r0, #0]
 801443c:	600b      	str	r3, [r1, #0]
 801443e:	6013      	str	r3, [r2, #0]
 8014440:	4770      	bx	lr
 8014442:	bf00      	nop
 8014444:	20000634 	.word	0x20000634
 8014448:	200003d8 	.word	0x200003d8
 801444c:	200003e4 	.word	0x200003e4
 8014450:	200003bc 	.word	0x200003bc

08014454 <robotic_interfaces__srv__Keyboard_Request__rosidl_typesupport_introspection_c__Keyboard_Request_init_function>:
 8014454:	f008 ba5c 	b.w	801c910 <robotic_interfaces__srv__Keyboard_Request__init>

08014458 <robotic_interfaces__srv__Keyboard_Request__rosidl_typesupport_introspection_c__Keyboard_Request_fini_function>:
 8014458:	f008 ba6c 	b.w	801c934 <robotic_interfaces__srv__Keyboard_Request__fini>

0801445c <robotic_interfaces__srv__Keyboard_Response__rosidl_typesupport_introspection_c__Keyboard_Response_init_function>:
 801445c:	f008 ba6e 	b.w	801c93c <robotic_interfaces__srv__Keyboard_Response__init>

08014460 <robotic_interfaces__srv__Keyboard_Response__rosidl_typesupport_introspection_c__Keyboard_Response_fini_function>:
 8014460:	f008 ba90 	b.w	801c984 <robotic_interfaces__srv__Keyboard_Response__fini>

08014464 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request>:
 8014464:	4b04      	ldr	r3, [pc, #16]	@ (8014478 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x14>)
 8014466:	681a      	ldr	r2, [r3, #0]
 8014468:	b10a      	cbz	r2, 801446e <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0xa>
 801446a:	4803      	ldr	r0, [pc, #12]	@ (8014478 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x14>)
 801446c:	4770      	bx	lr
 801446e:	4a03      	ldr	r2, [pc, #12]	@ (801447c <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x18>)
 8014470:	4801      	ldr	r0, [pc, #4]	@ (8014478 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x14>)
 8014472:	6812      	ldr	r2, [r2, #0]
 8014474:	601a      	str	r2, [r3, #0]
 8014476:	4770      	bx	lr
 8014478:	200004e0 	.word	0x200004e0
 801447c:	20000638 	.word	0x20000638

08014480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response>:
 8014480:	4b04      	ldr	r3, [pc, #16]	@ (8014494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0x14>)
 8014482:	681a      	ldr	r2, [r3, #0]
 8014484:	b10a      	cbz	r2, 801448a <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0xa>
 8014486:	4803      	ldr	r0, [pc, #12]	@ (8014494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0x14>)
 8014488:	4770      	bx	lr
 801448a:	4a03      	ldr	r2, [pc, #12]	@ (8014498 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0x18>)
 801448c:	4801      	ldr	r0, [pc, #4]	@ (8014494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0x14>)
 801448e:	6812      	ldr	r2, [r2, #0]
 8014490:	601a      	str	r2, [r3, #0]
 8014492:	4770      	bx	lr
 8014494:	200005a0 	.word	0x200005a0
 8014498:	20000638 	.word	0x20000638

0801449c <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard>:
 801449c:	4b13      	ldr	r3, [pc, #76]	@ (80144ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x50>)
 801449e:	681a      	ldr	r2, [r3, #0]
 80144a0:	b132      	cbz	r2, 80144b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x14>
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	689a      	ldr	r2, [r3, #8]
 80144a6:	b152      	cbz	r2, 80144be <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x22>
 80144a8:	68da      	ldr	r2, [r3, #12]
 80144aa:	b182      	cbz	r2, 80144ce <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x32>
 80144ac:	480f      	ldr	r0, [pc, #60]	@ (80144ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x50>)
 80144ae:	4770      	bx	lr
 80144b0:	4a0f      	ldr	r2, [pc, #60]	@ (80144f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x54>)
 80144b2:	6812      	ldr	r2, [r2, #0]
 80144b4:	601a      	str	r2, [r3, #0]
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	689a      	ldr	r2, [r3, #8]
 80144ba:	2a00      	cmp	r2, #0
 80144bc:	d1f4      	bne.n	80144a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0xc>
 80144be:	4a0d      	ldr	r2, [pc, #52]	@ (80144f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x58>)
 80144c0:	6811      	ldr	r1, [r2, #0]
 80144c2:	b179      	cbz	r1, 80144e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x48>
 80144c4:	6852      	ldr	r2, [r2, #4]
 80144c6:	609a      	str	r2, [r3, #8]
 80144c8:	68da      	ldr	r2, [r3, #12]
 80144ca:	2a00      	cmp	r2, #0
 80144cc:	d1ee      	bne.n	80144ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x10>
 80144ce:	4a0a      	ldr	r2, [pc, #40]	@ (80144f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x5c>)
 80144d0:	6811      	ldr	r1, [r2, #0]
 80144d2:	b119      	cbz	r1, 80144dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x40>
 80144d4:	6852      	ldr	r2, [r2, #4]
 80144d6:	4805      	ldr	r0, [pc, #20]	@ (80144ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x50>)
 80144d8:	60da      	str	r2, [r3, #12]
 80144da:	4770      	bx	lr
 80144dc:	4904      	ldr	r1, [pc, #16]	@ (80144f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x54>)
 80144de:	6809      	ldr	r1, [r1, #0]
 80144e0:	6011      	str	r1, [r2, #0]
 80144e2:	e7f7      	b.n	80144d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x38>
 80144e4:	4902      	ldr	r1, [pc, #8]	@ (80144f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x54>)
 80144e6:	6809      	ldr	r1, [r1, #0]
 80144e8:	6011      	str	r1, [r2, #0]
 80144ea:	e7eb      	b.n	80144c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x28>
 80144ec:	200005bc 	.word	0x200005bc
 80144f0:	20000638 	.word	0x20000638
 80144f4:	200004e0 	.word	0x200004e0
 80144f8:	200005a0 	.word	0x200005a0

080144fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request>:
 80144fc:	4800      	ldr	r0, [pc, #0]	@ (8014500 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Request+0x4>)
 80144fe:	4770      	bx	lr
 8014500:	200005e4 	.word	0x200005e4

08014504 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response>:
 8014504:	4800      	ldr	r0, [pc, #0]	@ (8014508 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__robotic_interfaces__srv__Keyboard_Response+0x4>)
 8014506:	4770      	bx	lr
 8014508:	200005f0 	.word	0x200005f0

0801450c <_Keyboard_Response__max_serialized_size>:
 801450c:	b508      	push	{r3, lr}
 801450e:	2101      	movs	r1, #1
 8014510:	2000      	movs	r0, #0
 8014512:	f7fb fea5 	bl	8010260 <ucdr_alignment>
 8014516:	3001      	adds	r0, #1
 8014518:	bd08      	pop	{r3, pc}
 801451a:	bf00      	nop

0801451c <_Keyboard_Request__cdr_serialize>:
 801451c:	b308      	cbz	r0, 8014562 <_Keyboard_Request__cdr_serialize+0x46>
 801451e:	b570      	push	{r4, r5, r6, lr}
 8014520:	6806      	ldr	r6, [r0, #0]
 8014522:	460d      	mov	r5, r1
 8014524:	4604      	mov	r4, r0
 8014526:	b1ce      	cbz	r6, 801455c <_Keyboard_Request__cdr_serialize+0x40>
 8014528:	4630      	mov	r0, r6
 801452a:	f7eb fe83 	bl	8000234 <strlen>
 801452e:	1c42      	adds	r2, r0, #1
 8014530:	4631      	mov	r1, r6
 8014532:	6060      	str	r0, [r4, #4]
 8014534:	4628      	mov	r0, r5
 8014536:	f001 f9a7 	bl	8015888 <ucdr_serialize_sequence_char>
 801453a:	ed94 0b04 	vldr	d0, [r4, #16]
 801453e:	4628      	mov	r0, r5
 8014540:	f7fb fb00 	bl	800fb44 <ucdr_serialize_double>
 8014544:	ed94 0b06 	vldr	d0, [r4, #24]
 8014548:	4628      	mov	r0, r5
 801454a:	f7fb fafb 	bl	800fb44 <ucdr_serialize_double>
 801454e:	ed94 0b08 	vldr	d0, [r4, #32]
 8014552:	4628      	mov	r0, r5
 8014554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014558:	f7fb baf4 	b.w	800fb44 <ucdr_serialize_double>
 801455c:	4632      	mov	r2, r6
 801455e:	4630      	mov	r0, r6
 8014560:	e7e6      	b.n	8014530 <_Keyboard_Request__cdr_serialize+0x14>
 8014562:	4770      	bx	lr

08014564 <get_serialized_size_robotic_interfaces__srv__Keyboard_Request>:
 8014564:	b570      	push	{r4, r5, r6, lr}
 8014566:	4604      	mov	r4, r0
 8014568:	b1e8      	cbz	r0, 80145a6 <get_serialized_size_robotic_interfaces__srv__Keyboard_Request+0x42>
 801456a:	460d      	mov	r5, r1
 801456c:	4628      	mov	r0, r5
 801456e:	2104      	movs	r1, #4
 8014570:	f7fb fe76 	bl	8010260 <ucdr_alignment>
 8014574:	6866      	ldr	r6, [r4, #4]
 8014576:	1d6b      	adds	r3, r5, #5
 8014578:	4433      	add	r3, r6
 801457a:	181e      	adds	r6, r3, r0
 801457c:	2108      	movs	r1, #8
 801457e:	4630      	mov	r0, r6
 8014580:	f7fb fe6e 	bl	8010260 <ucdr_alignment>
 8014584:	f100 0408 	add.w	r4, r0, #8
 8014588:	4434      	add	r4, r6
 801458a:	2108      	movs	r1, #8
 801458c:	4620      	mov	r0, r4
 801458e:	f7fb fe67 	bl	8010260 <ucdr_alignment>
 8014592:	3008      	adds	r0, #8
 8014594:	4404      	add	r4, r0
 8014596:	2108      	movs	r1, #8
 8014598:	4620      	mov	r0, r4
 801459a:	f7fb fe61 	bl	8010260 <ucdr_alignment>
 801459e:	f1c5 0508 	rsb	r5, r5, #8
 80145a2:	4428      	add	r0, r5
 80145a4:	4420      	add	r0, r4
 80145a6:	bd70      	pop	{r4, r5, r6, pc}

080145a8 <_Keyboard_Response__get_serialized_size>:
 80145a8:	b558      	push	{r3, r4, r6, lr}
 80145aa:	4604      	mov	r4, r0
 80145ac:	b1a0      	cbz	r0, 80145d8 <_Keyboard_Response__get_serialized_size+0x30>
 80145ae:	2101      	movs	r1, #1
 80145b0:	2000      	movs	r0, #0
 80145b2:	f7fb fe55 	bl	8010260 <ucdr_alignment>
 80145b6:	1c46      	adds	r6, r0, #1
 80145b8:	2104      	movs	r1, #4
 80145ba:	4630      	mov	r0, r6
 80145bc:	f7fb fe50 	bl	8010260 <ucdr_alignment>
 80145c0:	68a3      	ldr	r3, [r4, #8]
 80145c2:	3305      	adds	r3, #5
 80145c4:	4403      	add	r3, r0
 80145c6:	441e      	add	r6, r3
 80145c8:	2104      	movs	r1, #4
 80145ca:	4630      	mov	r0, r6
 80145cc:	f7fb fe48 	bl	8010260 <ucdr_alignment>
 80145d0:	6963      	ldr	r3, [r4, #20]
 80145d2:	3305      	adds	r3, #5
 80145d4:	4418      	add	r0, r3
 80145d6:	4430      	add	r0, r6
 80145d8:	bd58      	pop	{r3, r4, r6, pc}
 80145da:	bf00      	nop

080145dc <_Keyboard_Request__cdr_deserialize>:
 80145dc:	b570      	push	{r4, r5, r6, lr}
 80145de:	460c      	mov	r4, r1
 80145e0:	b082      	sub	sp, #8
 80145e2:	b301      	cbz	r1, 8014626 <_Keyboard_Request__cdr_deserialize+0x4a>
 80145e4:	688e      	ldr	r6, [r1, #8]
 80145e6:	6809      	ldr	r1, [r1, #0]
 80145e8:	ab01      	add	r3, sp, #4
 80145ea:	4632      	mov	r2, r6
 80145ec:	4605      	mov	r5, r0
 80145ee:	f001 f95d 	bl	80158ac <ucdr_deserialize_sequence_char>
 80145f2:	9b01      	ldr	r3, [sp, #4]
 80145f4:	b998      	cbnz	r0, 801461e <_Keyboard_Request__cdr_deserialize+0x42>
 80145f6:	429e      	cmp	r6, r3
 80145f8:	d318      	bcc.n	801462c <_Keyboard_Request__cdr_deserialize+0x50>
 80145fa:	f104 0110 	add.w	r1, r4, #16
 80145fe:	4628      	mov	r0, r5
 8014600:	f7fb fc42 	bl	800fe88 <ucdr_deserialize_double>
 8014604:	f104 0118 	add.w	r1, r4, #24
 8014608:	4628      	mov	r0, r5
 801460a:	f7fb fc3d 	bl	800fe88 <ucdr_deserialize_double>
 801460e:	f104 0120 	add.w	r1, r4, #32
 8014612:	4628      	mov	r0, r5
 8014614:	b002      	add	sp, #8
 8014616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801461a:	f7fb bc35 	b.w	800fe88 <ucdr_deserialize_double>
 801461e:	b103      	cbz	r3, 8014622 <_Keyboard_Request__cdr_deserialize+0x46>
 8014620:	3b01      	subs	r3, #1
 8014622:	6063      	str	r3, [r4, #4]
 8014624:	e7e9      	b.n	80145fa <_Keyboard_Request__cdr_deserialize+0x1e>
 8014626:	4608      	mov	r0, r1
 8014628:	b002      	add	sp, #8
 801462a:	bd70      	pop	{r4, r5, r6, pc}
 801462c:	2101      	movs	r1, #1
 801462e:	75a8      	strb	r0, [r5, #22]
 8014630:	7569      	strb	r1, [r5, #21]
 8014632:	6060      	str	r0, [r4, #4]
 8014634:	4628      	mov	r0, r5
 8014636:	f7fb fe29 	bl	801028c <ucdr_align_to>
 801463a:	9901      	ldr	r1, [sp, #4]
 801463c:	4628      	mov	r0, r5
 801463e:	f7fb fe5b 	bl	80102f8 <ucdr_advance_buffer>
 8014642:	e7da      	b.n	80145fa <_Keyboard_Request__cdr_deserialize+0x1e>

08014644 <_Keyboard_Response__cdr_deserialize>:
 8014644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014646:	460c      	mov	r4, r1
 8014648:	b083      	sub	sp, #12
 801464a:	b381      	cbz	r1, 80146ae <_Keyboard_Response__cdr_deserialize+0x6a>
 801464c:	4606      	mov	r6, r0
 801464e:	f7fa fb09 	bl	800ec64 <ucdr_deserialize_bool>
 8014652:	68e5      	ldr	r5, [r4, #12]
 8014654:	6861      	ldr	r1, [r4, #4]
 8014656:	ab01      	add	r3, sp, #4
 8014658:	462a      	mov	r2, r5
 801465a:	4630      	mov	r0, r6
 801465c:	f001 f926 	bl	80158ac <ucdr_deserialize_sequence_char>
 8014660:	9b01      	ldr	r3, [sp, #4]
 8014662:	b980      	cbnz	r0, 8014686 <_Keyboard_Response__cdr_deserialize+0x42>
 8014664:	429d      	cmp	r5, r3
 8014666:	d328      	bcc.n	80146ba <_Keyboard_Response__cdr_deserialize+0x76>
 8014668:	69a7      	ldr	r7, [r4, #24]
 801466a:	6921      	ldr	r1, [r4, #16]
 801466c:	ab01      	add	r3, sp, #4
 801466e:	463a      	mov	r2, r7
 8014670:	4630      	mov	r0, r6
 8014672:	f001 f91b 	bl	80158ac <ucdr_deserialize_sequence_char>
 8014676:	9b01      	ldr	r3, [sp, #4]
 8014678:	4605      	mov	r5, r0
 801467a:	b140      	cbz	r0, 801468e <_Keyboard_Response__cdr_deserialize+0x4a>
 801467c:	b9db      	cbnz	r3, 80146b6 <_Keyboard_Response__cdr_deserialize+0x72>
 801467e:	6163      	str	r3, [r4, #20]
 8014680:	4628      	mov	r0, r5
 8014682:	b003      	add	sp, #12
 8014684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014686:	b103      	cbz	r3, 801468a <_Keyboard_Response__cdr_deserialize+0x46>
 8014688:	3b01      	subs	r3, #1
 801468a:	60a3      	str	r3, [r4, #8]
 801468c:	e7ec      	b.n	8014668 <_Keyboard_Response__cdr_deserialize+0x24>
 801468e:	429f      	cmp	r7, r3
 8014690:	d2f6      	bcs.n	8014680 <_Keyboard_Response__cdr_deserialize+0x3c>
 8014692:	2101      	movs	r1, #1
 8014694:	75b0      	strb	r0, [r6, #22]
 8014696:	7571      	strb	r1, [r6, #21]
 8014698:	4630      	mov	r0, r6
 801469a:	6165      	str	r5, [r4, #20]
 801469c:	f7fb fdf6 	bl	801028c <ucdr_align_to>
 80146a0:	4630      	mov	r0, r6
 80146a2:	9901      	ldr	r1, [sp, #4]
 80146a4:	f7fb fe28 	bl	80102f8 <ucdr_advance_buffer>
 80146a8:	4628      	mov	r0, r5
 80146aa:	b003      	add	sp, #12
 80146ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146ae:	460d      	mov	r5, r1
 80146b0:	4628      	mov	r0, r5
 80146b2:	b003      	add	sp, #12
 80146b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146b6:	3b01      	subs	r3, #1
 80146b8:	e7e1      	b.n	801467e <_Keyboard_Response__cdr_deserialize+0x3a>
 80146ba:	2101      	movs	r1, #1
 80146bc:	75b0      	strb	r0, [r6, #22]
 80146be:	7571      	strb	r1, [r6, #21]
 80146c0:	60a0      	str	r0, [r4, #8]
 80146c2:	4630      	mov	r0, r6
 80146c4:	f7fb fde2 	bl	801028c <ucdr_align_to>
 80146c8:	9901      	ldr	r1, [sp, #4]
 80146ca:	4630      	mov	r0, r6
 80146cc:	f7fb fe14 	bl	80102f8 <ucdr_advance_buffer>
 80146d0:	e7ca      	b.n	8014668 <_Keyboard_Response__cdr_deserialize+0x24>
 80146d2:	bf00      	nop

080146d4 <_Keyboard_Response__cdr_serialize>:
 80146d4:	b308      	cbz	r0, 801471a <_Keyboard_Response__cdr_serialize+0x46>
 80146d6:	b570      	push	{r4, r5, r6, lr}
 80146d8:	460e      	mov	r6, r1
 80146da:	4604      	mov	r4, r0
 80146dc:	7801      	ldrb	r1, [r0, #0]
 80146de:	4630      	mov	r0, r6
 80146e0:	f7fa faaa 	bl	800ec38 <ucdr_serialize_bool>
 80146e4:	6865      	ldr	r5, [r4, #4]
 80146e6:	b1ad      	cbz	r5, 8014714 <_Keyboard_Response__cdr_serialize+0x40>
 80146e8:	4628      	mov	r0, r5
 80146ea:	f7eb fda3 	bl	8000234 <strlen>
 80146ee:	1c42      	adds	r2, r0, #1
 80146f0:	60a0      	str	r0, [r4, #8]
 80146f2:	4629      	mov	r1, r5
 80146f4:	4630      	mov	r0, r6
 80146f6:	f001 f8c7 	bl	8015888 <ucdr_serialize_sequence_char>
 80146fa:	6925      	ldr	r5, [r4, #16]
 80146fc:	b175      	cbz	r5, 801471c <_Keyboard_Response__cdr_serialize+0x48>
 80146fe:	4628      	mov	r0, r5
 8014700:	f7eb fd98 	bl	8000234 <strlen>
 8014704:	4629      	mov	r1, r5
 8014706:	6160      	str	r0, [r4, #20]
 8014708:	1c42      	adds	r2, r0, #1
 801470a:	4630      	mov	r0, r6
 801470c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014710:	f001 b8ba 	b.w	8015888 <ucdr_serialize_sequence_char>
 8014714:	462a      	mov	r2, r5
 8014716:	4628      	mov	r0, r5
 8014718:	e7ea      	b.n	80146f0 <_Keyboard_Response__cdr_serialize+0x1c>
 801471a:	4770      	bx	lr
 801471c:	4628      	mov	r0, r5
 801471e:	6160      	str	r0, [r4, #20]
 8014720:	462a      	mov	r2, r5
 8014722:	4629      	mov	r1, r5
 8014724:	4630      	mov	r0, r6
 8014726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801472a:	f001 b8ad 	b.w	8015888 <ucdr_serialize_sequence_char>
 801472e:	bf00      	nop

08014730 <_Keyboard_Request__max_serialized_size>:
 8014730:	b538      	push	{r3, r4, r5, lr}
 8014732:	2108      	movs	r1, #8
 8014734:	2000      	movs	r0, #0
 8014736:	f7fb fd93 	bl	8010260 <ucdr_alignment>
 801473a:	f100 0508 	add.w	r5, r0, #8
 801473e:	2108      	movs	r1, #8
 8014740:	4628      	mov	r0, r5
 8014742:	f7fb fd8d 	bl	8010260 <ucdr_alignment>
 8014746:	f100 0408 	add.w	r4, r0, #8
 801474a:	442c      	add	r4, r5
 801474c:	2108      	movs	r1, #8
 801474e:	4620      	mov	r0, r4
 8014750:	f7fb fd86 	bl	8010260 <ucdr_alignment>
 8014754:	3008      	adds	r0, #8
 8014756:	4420      	add	r0, r4
 8014758:	bd38      	pop	{r3, r4, r5, pc}
 801475a:	bf00      	nop

0801475c <get_serialized_size_robotic_interfaces__srv__Keyboard_Response>:
 801475c:	b5b0      	push	{r4, r5, r7, lr}
 801475e:	4605      	mov	r5, r0
 8014760:	b1c0      	cbz	r0, 8014794 <get_serialized_size_robotic_interfaces__srv__Keyboard_Response+0x38>
 8014762:	460c      	mov	r4, r1
 8014764:	4620      	mov	r0, r4
 8014766:	2101      	movs	r1, #1
 8014768:	f7fb fd7a 	bl	8010260 <ucdr_alignment>
 801476c:	1c63      	adds	r3, r4, #1
 801476e:	181f      	adds	r7, r3, r0
 8014770:	2104      	movs	r1, #4
 8014772:	4638      	mov	r0, r7
 8014774:	f7fb fd74 	bl	8010260 <ucdr_alignment>
 8014778:	68ab      	ldr	r3, [r5, #8]
 801477a:	3305      	adds	r3, #5
 801477c:	4403      	add	r3, r0
 801477e:	441f      	add	r7, r3
 8014780:	2104      	movs	r1, #4
 8014782:	4638      	mov	r0, r7
 8014784:	f7fb fd6c 	bl	8010260 <ucdr_alignment>
 8014788:	696d      	ldr	r5, [r5, #20]
 801478a:	f1c4 0405 	rsb	r4, r4, #5
 801478e:	442c      	add	r4, r5
 8014790:	4420      	add	r0, r4
 8014792:	4438      	add	r0, r7
 8014794:	bdb0      	pop	{r4, r5, r7, pc}
 8014796:	bf00      	nop

08014798 <_Keyboard_Request__get_serialized_size>:
 8014798:	b538      	push	{r3, r4, r5, lr}
 801479a:	4604      	mov	r4, r0
 801479c:	b1c8      	cbz	r0, 80147d2 <_Keyboard_Request__get_serialized_size+0x3a>
 801479e:	2104      	movs	r1, #4
 80147a0:	2000      	movs	r0, #0
 80147a2:	f7fb fd5d 	bl	8010260 <ucdr_alignment>
 80147a6:	6863      	ldr	r3, [r4, #4]
 80147a8:	3305      	adds	r3, #5
 80147aa:	181d      	adds	r5, r3, r0
 80147ac:	2108      	movs	r1, #8
 80147ae:	4628      	mov	r0, r5
 80147b0:	f7fb fd56 	bl	8010260 <ucdr_alignment>
 80147b4:	f100 0408 	add.w	r4, r0, #8
 80147b8:	442c      	add	r4, r5
 80147ba:	2108      	movs	r1, #8
 80147bc:	4620      	mov	r0, r4
 80147be:	f7fb fd4f 	bl	8010260 <ucdr_alignment>
 80147c2:	3008      	adds	r0, #8
 80147c4:	4404      	add	r4, r0
 80147c6:	2108      	movs	r1, #8
 80147c8:	4620      	mov	r0, r4
 80147ca:	f7fb fd49 	bl	8010260 <ucdr_alignment>
 80147ce:	3008      	adds	r0, #8
 80147d0:	4420      	add	r0, r4
 80147d2:	bd38      	pop	{r3, r4, r5, pc}

080147d4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard>:
 80147d4:	4800      	ldr	r0, [pc, #0]	@ (80147d8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__robotic_interfaces__srv__Keyboard+0x4>)
 80147d6:	4770      	bx	lr
 80147d8:	200005d8 	.word	0x200005d8

080147dc <get_message_typesupport_handle>:
 80147dc:	6883      	ldr	r3, [r0, #8]
 80147de:	4718      	bx	r3

080147e0 <get_message_typesupport_handle_function>:
 80147e0:	b510      	push	{r4, lr}
 80147e2:	4604      	mov	r4, r0
 80147e4:	6800      	ldr	r0, [r0, #0]
 80147e6:	f7eb fd1b 	bl	8000220 <strcmp>
 80147ea:	2800      	cmp	r0, #0
 80147ec:	bf0c      	ite	eq
 80147ee:	4620      	moveq	r0, r4
 80147f0:	2000      	movne	r0, #0
 80147f2:	bd10      	pop	{r4, pc}

080147f4 <get_service_typesupport_handle>:
 80147f4:	6883      	ldr	r3, [r0, #8]
 80147f6:	4718      	bx	r3

080147f8 <get_service_typesupport_handle_function>:
 80147f8:	b510      	push	{r4, lr}
 80147fa:	4604      	mov	r4, r0
 80147fc:	6800      	ldr	r0, [r0, #0]
 80147fe:	f7eb fd0f 	bl	8000220 <strcmp>
 8014802:	2800      	cmp	r0, #0
 8014804:	bf0c      	ite	eq
 8014806:	4620      	moveq	r0, r4
 8014808:	2000      	movne	r0, #0
 801480a:	bd10      	pop	{r4, pc}

0801480c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014810:	6805      	ldr	r5, [r0, #0]
 8014812:	4604      	mov	r4, r0
 8014814:	4628      	mov	r0, r5
 8014816:	460e      	mov	r6, r1
 8014818:	f7eb fd02 	bl	8000220 <strcmp>
 801481c:	b1c8      	cbz	r0, 8014852 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801481e:	4b11      	ldr	r3, [pc, #68]	@ (8014864 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	429d      	cmp	r5, r3
 8014824:	d112      	bne.n	801484c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014826:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801482a:	f8d8 4000 	ldr.w	r4, [r8]
 801482e:	b16c      	cbz	r4, 801484c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8014830:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014834:	2700      	movs	r7, #0
 8014836:	3d04      	subs	r5, #4
 8014838:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801483c:	4631      	mov	r1, r6
 801483e:	f7eb fcef 	bl	8000220 <strcmp>
 8014842:	00bb      	lsls	r3, r7, #2
 8014844:	b140      	cbz	r0, 8014858 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8014846:	3701      	adds	r7, #1
 8014848:	42bc      	cmp	r4, r7
 801484a:	d1f5      	bne.n	8014838 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801484c:	2000      	movs	r0, #0
 801484e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014852:	4620      	mov	r0, r4
 8014854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014858:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801485c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014860:	58d3      	ldr	r3, [r2, r3]
 8014862:	4718      	bx	r3
 8014864:	20000634 	.word	0x20000634

08014868 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8014868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801486c:	6805      	ldr	r5, [r0, #0]
 801486e:	4604      	mov	r4, r0
 8014870:	4628      	mov	r0, r5
 8014872:	460e      	mov	r6, r1
 8014874:	f7eb fcd4 	bl	8000220 <strcmp>
 8014878:	b1c8      	cbz	r0, 80148ae <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 801487a:	4b11      	ldr	r3, [pc, #68]	@ (80148c0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	429d      	cmp	r5, r3
 8014880:	d112      	bne.n	80148a8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8014882:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014886:	f8d8 4000 	ldr.w	r4, [r8]
 801488a:	b16c      	cbz	r4, 80148a8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801488c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014890:	2700      	movs	r7, #0
 8014892:	3d04      	subs	r5, #4
 8014894:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8014898:	4631      	mov	r1, r6
 801489a:	f7eb fcc1 	bl	8000220 <strcmp>
 801489e:	00bb      	lsls	r3, r7, #2
 80148a0:	b140      	cbz	r0, 80148b4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80148a2:	3701      	adds	r7, #1
 80148a4:	42bc      	cmp	r4, r7
 80148a6:	d1f5      	bne.n	8014894 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80148a8:	2000      	movs	r0, #0
 80148aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148ae:	4620      	mov	r0, r4
 80148b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80148b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148bc:	58d3      	ldr	r3, [r2, r3]
 80148be:	4718      	bx	r3
 80148c0:	20000634 	.word	0x20000634

080148c4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80148c4:	4b04      	ldr	r3, [pc, #16]	@ (80148d8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	b10a      	cbz	r2, 80148ce <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 80148ca:	4803      	ldr	r0, [pc, #12]	@ (80148d8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 80148cc:	4770      	bx	lr
 80148ce:	4a03      	ldr	r2, [pc, #12]	@ (80148dc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 80148d0:	4801      	ldr	r0, [pc, #4]	@ (80148d8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 80148d2:	6812      	ldr	r2, [r2, #0]
 80148d4:	601a      	str	r2, [r3, #0]
 80148d6:	4770      	bx	lr
 80148d8:	20000644 	.word	0x20000644
 80148dc:	20000634 	.word	0x20000634

080148e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80148e0:	4a02      	ldr	r2, [pc, #8]	@ (80148ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 80148e2:	4b03      	ldr	r3, [pc, #12]	@ (80148f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 80148e4:	6812      	ldr	r2, [r2, #0]
 80148e6:	601a      	str	r2, [r3, #0]
 80148e8:	4770      	bx	lr
 80148ea:	bf00      	nop
 80148ec:	20000634 	.word	0x20000634
 80148f0:	20000644 	.word	0x20000644

080148f4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 80148f4:	2009      	movs	r0, #9
 80148f6:	4770      	bx	lr

080148f8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 80148f8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80148fc:	4770      	bx	lr
 80148fe:	bf00      	nop

08014900 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8014900:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8014904:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014908:	e9c2 0100 	strd	r0, r1, [r2]
 801490c:	4770      	bx	lr
 801490e:	bf00      	nop

08014910 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 8014910:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014914:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8014918:	e9c1 2300 	strd	r2, r3, [r1]
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop

08014920 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 8014920:	f008 b89c 	b.w	801ca5c <sensor_msgs__msg__Imu__init>

08014924 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 8014924:	f008 b8f0 	b.w	801cb08 <sensor_msgs__msg__Imu__fini>

08014928 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 8014928:	2009      	movs	r0, #9
 801492a:	4770      	bx	lr

0801492c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 801492c:	2009      	movs	r0, #9
 801492e:	4770      	bx	lr

08014930 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 8014930:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8014934:	4770      	bx	lr
 8014936:	bf00      	nop

08014938 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 8014938:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801493c:	4770      	bx	lr
 801493e:	bf00      	nop

08014940 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 8014940:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8014944:	4770      	bx	lr
 8014946:	bf00      	nop

08014948 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 8014948:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801494c:	4770      	bx	lr
 801494e:	bf00      	nop

08014950 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 8014950:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8014954:	4770      	bx	lr
 8014956:	bf00      	nop

08014958 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 8014958:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801495c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014960:	e9c2 0100 	strd	r0, r1, [r2]
 8014964:	4770      	bx	lr
 8014966:	bf00      	nop

08014968 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 8014968:	e9d2 2300 	ldrd	r2, r3, [r2]
 801496c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8014970:	e9c1 2300 	strd	r2, r3, [r1]
 8014974:	4770      	bx	lr
 8014976:	bf00      	nop

08014978 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 8014978:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801497c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014980:	e9c2 0100 	strd	r0, r1, [r2]
 8014984:	4770      	bx	lr
 8014986:	bf00      	nop

08014988 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 8014988:	e9d2 2300 	ldrd	r2, r3, [r2]
 801498c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8014990:	e9c1 2300 	strd	r2, r3, [r1]
 8014994:	4770      	bx	lr
 8014996:	bf00      	nop

08014998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8014998:	b510      	push	{r4, lr}
 801499a:	f000 f90f 	bl	8014bbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 801499e:	4c0b      	ldr	r4, [pc, #44]	@ (80149cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 80149a0:	60e0      	str	r0, [r4, #12]
 80149a2:	f000 fcb9 	bl	8015318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80149a6:	64a0      	str	r0, [r4, #72]	@ 0x48
 80149a8:	f7f9 ff2e 	bl	800e808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80149ac:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 80149b0:	f7f9 ff2a 	bl	800e808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80149b4:	4b06      	ldr	r3, [pc, #24]	@ (80149d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 80149b6:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 80149ba:	681a      	ldr	r2, [r3, #0]
 80149bc:	b10a      	cbz	r2, 80149c2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 80149be:	4804      	ldr	r0, [pc, #16]	@ (80149d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 80149c0:	bd10      	pop	{r4, pc}
 80149c2:	4a04      	ldr	r2, [pc, #16]	@ (80149d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 80149c4:	4802      	ldr	r0, [pc, #8]	@ (80149d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 80149c6:	6812      	ldr	r2, [r2, #0]
 80149c8:	601a      	str	r2, [r3, #0]
 80149ca:	bd10      	pop	{r4, pc}
 80149cc:	20000650 	.word	0x20000650
 80149d0:	200007f4 	.word	0x200007f4
 80149d4:	20000638 	.word	0x20000638

080149d8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 80149d8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80149dc:	4680      	mov	r8, r0
 80149de:	460f      	mov	r7, r1
 80149e0:	f000 f910 	bl	8014c04 <get_serialized_size_std_msgs__msg__Header>
 80149e4:	183c      	adds	r4, r7, r0
 80149e6:	4621      	mov	r1, r4
 80149e8:	f108 0018 	add.w	r0, r8, #24
 80149ec:	f000 fca2 	bl	8015334 <get_serialized_size_geometry_msgs__msg__Quaternion>
 80149f0:	4404      	add	r4, r0
 80149f2:	2108      	movs	r1, #8
 80149f4:	4620      	mov	r0, r4
 80149f6:	f7fb fc33 	bl	8010260 <ucdr_alignment>
 80149fa:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 80149fe:	4425      	add	r5, r4
 8014a00:	4629      	mov	r1, r5
 8014a02:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 8014a06:	f7f9 ff73 	bl	800e8f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 8014a0a:	4405      	add	r5, r0
 8014a0c:	2108      	movs	r1, #8
 8014a0e:	4628      	mov	r0, r5
 8014a10:	f7fb fc26 	bl	8010260 <ucdr_alignment>
 8014a14:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8014a18:	4425      	add	r5, r4
 8014a1a:	4629      	mov	r1, r5
 8014a1c:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 8014a20:	f7f9 ff66 	bl	800e8f0 <get_serialized_size_geometry_msgs__msg__Vector3>
 8014a24:	4405      	add	r5, r0
 8014a26:	2108      	movs	r1, #8
 8014a28:	4628      	mov	r0, r5
 8014a2a:	f7fb fc19 	bl	8010260 <ucdr_alignment>
 8014a2e:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8014a32:	4438      	add	r0, r7
 8014a34:	4428      	add	r0, r5
 8014a36:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8014a3a:	bf00      	nop

08014a3c <get_serialized_size_sensor_msgs__msg__Imu>:
 8014a3c:	b108      	cbz	r0, 8014a42 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 8014a3e:	f7ff bfcb 	b.w	80149d8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8014a42:	4770      	bx	lr

08014a44 <_Imu__get_serialized_size>:
 8014a44:	b110      	cbz	r0, 8014a4c <_Imu__get_serialized_size+0x8>
 8014a46:	2100      	movs	r1, #0
 8014a48:	f7ff bfc6 	b.w	80149d8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8014a4c:	4770      	bx	lr
 8014a4e:	bf00      	nop

08014a50 <_Imu__cdr_deserialize>:
 8014a50:	b538      	push	{r3, r4, r5, lr}
 8014a52:	460c      	mov	r4, r1
 8014a54:	b399      	cbz	r1, 8014abe <_Imu__cdr_deserialize+0x6e>
 8014a56:	4605      	mov	r5, r0
 8014a58:	f000 f956 	bl	8014d08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8014a5c:	6843      	ldr	r3, [r0, #4]
 8014a5e:	4621      	mov	r1, r4
 8014a60:	68db      	ldr	r3, [r3, #12]
 8014a62:	4628      	mov	r0, r5
 8014a64:	4798      	blx	r3
 8014a66:	f000 fd19 	bl	801549c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8014a6a:	6843      	ldr	r3, [r0, #4]
 8014a6c:	f104 0118 	add.w	r1, r4, #24
 8014a70:	68db      	ldr	r3, [r3, #12]
 8014a72:	4628      	mov	r0, r5
 8014a74:	4798      	blx	r3
 8014a76:	2209      	movs	r2, #9
 8014a78:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8014a7c:	4628      	mov	r0, r5
 8014a7e:	f000 fead 	bl	80157dc <ucdr_deserialize_array_double>
 8014a82:	f7f9 ffc1 	bl	800ea08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8014a86:	6843      	ldr	r3, [r0, #4]
 8014a88:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 8014a8c:	68db      	ldr	r3, [r3, #12]
 8014a8e:	4628      	mov	r0, r5
 8014a90:	4798      	blx	r3
 8014a92:	2209      	movs	r2, #9
 8014a94:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8014a98:	4628      	mov	r0, r5
 8014a9a:	f000 fe9f 	bl	80157dc <ucdr_deserialize_array_double>
 8014a9e:	f7f9 ffb3 	bl	800ea08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8014aa2:	6843      	ldr	r3, [r0, #4]
 8014aa4:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 8014aa8:	68db      	ldr	r3, [r3, #12]
 8014aaa:	4628      	mov	r0, r5
 8014aac:	4798      	blx	r3
 8014aae:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8014ab2:	4628      	mov	r0, r5
 8014ab4:	2209      	movs	r2, #9
 8014ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014aba:	f000 be8f 	b.w	80157dc <ucdr_deserialize_array_double>
 8014abe:	4608      	mov	r0, r1
 8014ac0:	bd38      	pop	{r3, r4, r5, pc}
 8014ac2:	bf00      	nop

08014ac4 <_Imu__cdr_serialize>:
 8014ac4:	2800      	cmp	r0, #0
 8014ac6:	d035      	beq.n	8014b34 <_Imu__cdr_serialize+0x70>
 8014ac8:	b538      	push	{r3, r4, r5, lr}
 8014aca:	460d      	mov	r5, r1
 8014acc:	4604      	mov	r4, r0
 8014ace:	f000 f91b 	bl	8014d08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8014ad2:	6843      	ldr	r3, [r0, #4]
 8014ad4:	4629      	mov	r1, r5
 8014ad6:	689b      	ldr	r3, [r3, #8]
 8014ad8:	4620      	mov	r0, r4
 8014ada:	4798      	blx	r3
 8014adc:	f000 fcde 	bl	801549c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8014ae0:	6843      	ldr	r3, [r0, #4]
 8014ae2:	4629      	mov	r1, r5
 8014ae4:	689b      	ldr	r3, [r3, #8]
 8014ae6:	f104 0018 	add.w	r0, r4, #24
 8014aea:	4798      	blx	r3
 8014aec:	2209      	movs	r2, #9
 8014aee:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8014af2:	4628      	mov	r0, r5
 8014af4:	f000 fe1e 	bl	8015734 <ucdr_serialize_array_double>
 8014af8:	f7f9 ff86 	bl	800ea08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8014afc:	6843      	ldr	r3, [r0, #4]
 8014afe:	4629      	mov	r1, r5
 8014b00:	689b      	ldr	r3, [r3, #8]
 8014b02:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8014b06:	4798      	blx	r3
 8014b08:	2209      	movs	r2, #9
 8014b0a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8014b0e:	4628      	mov	r0, r5
 8014b10:	f000 fe10 	bl	8015734 <ucdr_serialize_array_double>
 8014b14:	f7f9 ff78 	bl	800ea08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8014b18:	6843      	ldr	r3, [r0, #4]
 8014b1a:	4629      	mov	r1, r5
 8014b1c:	689b      	ldr	r3, [r3, #8]
 8014b1e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8014b22:	4798      	blx	r3
 8014b24:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8014b28:	4628      	mov	r0, r5
 8014b2a:	2209      	movs	r2, #9
 8014b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b30:	f000 be00 	b.w	8015734 <ucdr_serialize_array_double>
 8014b34:	4770      	bx	lr
 8014b36:	bf00      	nop

08014b38 <max_serialized_size_sensor_msgs__msg__Imu>:
 8014b38:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	7003      	strb	r3, [r0, #0]
 8014b40:	4680      	mov	r8, r0
 8014b42:	460f      	mov	r7, r1
 8014b44:	f000 f8d6 	bl	8014cf4 <max_serialized_size_std_msgs__msg__Header>
 8014b48:	183c      	adds	r4, r7, r0
 8014b4a:	4621      	mov	r1, r4
 8014b4c:	4640      	mov	r0, r8
 8014b4e:	f000 fc83 	bl	8015458 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8014b52:	4404      	add	r4, r0
 8014b54:	2108      	movs	r1, #8
 8014b56:	4620      	mov	r0, r4
 8014b58:	f7fb fb82 	bl	8010260 <ucdr_alignment>
 8014b5c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8014b60:	4425      	add	r5, r4
 8014b62:	4629      	mov	r1, r5
 8014b64:	4640      	mov	r0, r8
 8014b66:	f7f9 ff33 	bl	800e9d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 8014b6a:	4405      	add	r5, r0
 8014b6c:	2108      	movs	r1, #8
 8014b6e:	4628      	mov	r0, r5
 8014b70:	f7fb fb76 	bl	8010260 <ucdr_alignment>
 8014b74:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 8014b78:	4425      	add	r5, r4
 8014b7a:	4629      	mov	r1, r5
 8014b7c:	4640      	mov	r0, r8
 8014b7e:	f7f9 ff27 	bl	800e9d0 <max_serialized_size_geometry_msgs__msg__Vector3>
 8014b82:	4405      	add	r5, r0
 8014b84:	2108      	movs	r1, #8
 8014b86:	4628      	mov	r0, r5
 8014b88:	f7fb fb6a 	bl	8010260 <ucdr_alignment>
 8014b8c:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8014b90:	4438      	add	r0, r7
 8014b92:	4428      	add	r0, r5
 8014b94:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

08014b98 <_Imu__max_serialized_size>:
 8014b98:	b500      	push	{lr}
 8014b9a:	b083      	sub	sp, #12
 8014b9c:	2100      	movs	r1, #0
 8014b9e:	f10d 0007 	add.w	r0, sp, #7
 8014ba2:	f7ff ffc9 	bl	8014b38 <max_serialized_size_sensor_msgs__msg__Imu>
 8014ba6:	b003      	add	sp, #12
 8014ba8:	f85d fb04 	ldr.w	pc, [sp], #4

08014bac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8014bac:	4800      	ldr	r0, [pc, #0]	@ (8014bb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 8014bae:	4770      	bx	lr
 8014bb0:	20000800 	.word	0x20000800

08014bb4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8014bb4:	f007 bfbc 	b.w	801cb30 <std_msgs__msg__Header__init>

08014bb8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8014bb8:	f007 bfde 	b.w	801cb78 <std_msgs__msg__Header__fini>

08014bbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8014bbc:	b508      	push	{r3, lr}
 8014bbe:	f000 fafb 	bl	80151b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014bc2:	4b06      	ldr	r3, [pc, #24]	@ (8014bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8014bc4:	4906      	ldr	r1, [pc, #24]	@ (8014be0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8014bc6:	681a      	ldr	r2, [r3, #0]
 8014bc8:	60c8      	str	r0, [r1, #12]
 8014bca:	b10a      	cbz	r2, 8014bd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8014bcc:	4803      	ldr	r0, [pc, #12]	@ (8014bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8014bce:	bd08      	pop	{r3, pc}
 8014bd0:	4a04      	ldr	r2, [pc, #16]	@ (8014be4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8014bd2:	4802      	ldr	r0, [pc, #8]	@ (8014bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8014bd4:	6812      	ldr	r2, [r2, #0]
 8014bd6:	601a      	str	r2, [r3, #0]
 8014bd8:	bd08      	pop	{r3, pc}
 8014bda:	bf00      	nop
 8014bdc:	200008a0 	.word	0x200008a0
 8014be0:	20000828 	.word	0x20000828
 8014be4:	20000638 	.word	0x20000638

08014be8 <_Header__max_serialized_size>:
 8014be8:	b500      	push	{lr}
 8014bea:	b083      	sub	sp, #12
 8014bec:	2301      	movs	r3, #1
 8014bee:	2100      	movs	r1, #0
 8014bf0:	f10d 0007 	add.w	r0, sp, #7
 8014bf4:	f88d 3007 	strb.w	r3, [sp, #7]
 8014bf8:	f000 fb3c 	bl	8015274 <max_serialized_size_builtin_interfaces__msg__Time>
 8014bfc:	b003      	add	sp, #12
 8014bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c02:	bf00      	nop

08014c04 <get_serialized_size_std_msgs__msg__Header>:
 8014c04:	b570      	push	{r4, r5, r6, lr}
 8014c06:	4605      	mov	r5, r0
 8014c08:	b168      	cbz	r0, 8014c26 <get_serialized_size_std_msgs__msg__Header+0x22>
 8014c0a:	460c      	mov	r4, r1
 8014c0c:	f000 fae2 	bl	80151d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8014c10:	1826      	adds	r6, r4, r0
 8014c12:	2104      	movs	r1, #4
 8014c14:	4630      	mov	r0, r6
 8014c16:	f7fb fb23 	bl	8010260 <ucdr_alignment>
 8014c1a:	68e9      	ldr	r1, [r5, #12]
 8014c1c:	f1c4 0405 	rsb	r4, r4, #5
 8014c20:	440c      	add	r4, r1
 8014c22:	4404      	add	r4, r0
 8014c24:	19a0      	adds	r0, r4, r6
 8014c26:	bd70      	pop	{r4, r5, r6, pc}

08014c28 <_Header__cdr_deserialize>:
 8014c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c2a:	460c      	mov	r4, r1
 8014c2c:	b083      	sub	sp, #12
 8014c2e:	b1e1      	cbz	r1, 8014c6a <_Header__cdr_deserialize+0x42>
 8014c30:	4606      	mov	r6, r0
 8014c32:	f000 fb33 	bl	801529c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014c36:	6843      	ldr	r3, [r0, #4]
 8014c38:	4621      	mov	r1, r4
 8014c3a:	68db      	ldr	r3, [r3, #12]
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	4798      	blx	r3
 8014c40:	6927      	ldr	r7, [r4, #16]
 8014c42:	68a1      	ldr	r1, [r4, #8]
 8014c44:	ab01      	add	r3, sp, #4
 8014c46:	463a      	mov	r2, r7
 8014c48:	4630      	mov	r0, r6
 8014c4a:	f000 fe2f 	bl	80158ac <ucdr_deserialize_sequence_char>
 8014c4e:	9b01      	ldr	r3, [sp, #4]
 8014c50:	4605      	mov	r5, r0
 8014c52:	b920      	cbnz	r0, 8014c5e <_Header__cdr_deserialize+0x36>
 8014c54:	429f      	cmp	r7, r3
 8014c56:	d30c      	bcc.n	8014c72 <_Header__cdr_deserialize+0x4a>
 8014c58:	4628      	mov	r0, r5
 8014c5a:	b003      	add	sp, #12
 8014c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c5e:	b103      	cbz	r3, 8014c62 <_Header__cdr_deserialize+0x3a>
 8014c60:	3b01      	subs	r3, #1
 8014c62:	4628      	mov	r0, r5
 8014c64:	60e3      	str	r3, [r4, #12]
 8014c66:	b003      	add	sp, #12
 8014c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c6a:	460d      	mov	r5, r1
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	b003      	add	sp, #12
 8014c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c72:	2101      	movs	r1, #1
 8014c74:	75b0      	strb	r0, [r6, #22]
 8014c76:	7571      	strb	r1, [r6, #21]
 8014c78:	4630      	mov	r0, r6
 8014c7a:	60e5      	str	r5, [r4, #12]
 8014c7c:	f7fb fb06 	bl	801028c <ucdr_align_to>
 8014c80:	4630      	mov	r0, r6
 8014c82:	9901      	ldr	r1, [sp, #4]
 8014c84:	f7fb fb38 	bl	80102f8 <ucdr_advance_buffer>
 8014c88:	4628      	mov	r0, r5
 8014c8a:	b003      	add	sp, #12
 8014c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c8e:	bf00      	nop

08014c90 <_Header__cdr_serialize>:
 8014c90:	b1f8      	cbz	r0, 8014cd2 <_Header__cdr_serialize+0x42>
 8014c92:	b570      	push	{r4, r5, r6, lr}
 8014c94:	4604      	mov	r4, r0
 8014c96:	460d      	mov	r5, r1
 8014c98:	f000 fb00 	bl	801529c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8014c9c:	6843      	ldr	r3, [r0, #4]
 8014c9e:	4629      	mov	r1, r5
 8014ca0:	689b      	ldr	r3, [r3, #8]
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	4798      	blx	r3
 8014ca6:	68a6      	ldr	r6, [r4, #8]
 8014ca8:	b156      	cbz	r6, 8014cc0 <_Header__cdr_serialize+0x30>
 8014caa:	4630      	mov	r0, r6
 8014cac:	f7eb fac2 	bl	8000234 <strlen>
 8014cb0:	4631      	mov	r1, r6
 8014cb2:	60e0      	str	r0, [r4, #12]
 8014cb4:	1c42      	adds	r2, r0, #1
 8014cb6:	4628      	mov	r0, r5
 8014cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cbc:	f000 bde4 	b.w	8015888 <ucdr_serialize_sequence_char>
 8014cc0:	4630      	mov	r0, r6
 8014cc2:	60e0      	str	r0, [r4, #12]
 8014cc4:	4632      	mov	r2, r6
 8014cc6:	4631      	mov	r1, r6
 8014cc8:	4628      	mov	r0, r5
 8014cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cce:	f000 bddb 	b.w	8015888 <ucdr_serialize_sequence_char>
 8014cd2:	4770      	bx	lr

08014cd4 <_Header__get_serialized_size>:
 8014cd4:	b538      	push	{r3, r4, r5, lr}
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	b150      	cbz	r0, 8014cf0 <_Header__get_serialized_size+0x1c>
 8014cda:	2100      	movs	r1, #0
 8014cdc:	f000 fa7a 	bl	80151d4 <get_serialized_size_builtin_interfaces__msg__Time>
 8014ce0:	2104      	movs	r1, #4
 8014ce2:	4605      	mov	r5, r0
 8014ce4:	f7fb fabc 	bl	8010260 <ucdr_alignment>
 8014ce8:	68e2      	ldr	r2, [r4, #12]
 8014cea:	3205      	adds	r2, #5
 8014cec:	1953      	adds	r3, r2, r5
 8014cee:	4418      	add	r0, r3
 8014cf0:	bd38      	pop	{r3, r4, r5, pc}
 8014cf2:	bf00      	nop

08014cf4 <max_serialized_size_std_msgs__msg__Header>:
 8014cf4:	b510      	push	{r4, lr}
 8014cf6:	2301      	movs	r3, #1
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	7003      	strb	r3, [r0, #0]
 8014cfc:	f000 faba 	bl	8015274 <max_serialized_size_builtin_interfaces__msg__Time>
 8014d00:	2300      	movs	r3, #0
 8014d02:	7023      	strb	r3, [r4, #0]
 8014d04:	bd10      	pop	{r4, pc}
 8014d06:	bf00      	nop

08014d08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8014d08:	4800      	ldr	r0, [pc, #0]	@ (8014d0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8014d0a:	4770      	bx	lr
 8014d0c:	200008ac 	.word	0x200008ac

08014d10 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8014d10:	4b04      	ldr	r3, [pc, #16]	@ (8014d24 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8014d12:	681a      	ldr	r2, [r3, #0]
 8014d14:	b10a      	cbz	r2, 8014d1a <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 8014d16:	4803      	ldr	r0, [pc, #12]	@ (8014d24 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8014d18:	4770      	bx	lr
 8014d1a:	4a03      	ldr	r2, [pc, #12]	@ (8014d28 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 8014d1c:	4801      	ldr	r0, [pc, #4]	@ (8014d24 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 8014d1e:	6812      	ldr	r2, [r2, #0]
 8014d20:	601a      	str	r2, [r3, #0]
 8014d22:	4770      	bx	lr
 8014d24:	200008dc 	.word	0x200008dc
 8014d28:	20000634 	.word	0x20000634

08014d2c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8014d2c:	4b04      	ldr	r3, [pc, #16]	@ (8014d40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8014d2e:	4805      	ldr	r0, [pc, #20]	@ (8014d44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 8014d30:	4905      	ldr	r1, [pc, #20]	@ (8014d48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 8014d32:	4a06      	ldr	r2, [pc, #24]	@ (8014d4c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	6003      	str	r3, [r0, #0]
 8014d38:	600b      	str	r3, [r1, #0]
 8014d3a:	6013      	str	r3, [r2, #0]
 8014d3c:	4770      	bx	lr
 8014d3e:	bf00      	nop
 8014d40:	20000634 	.word	0x20000634
 8014d44:	200008f8 	.word	0x200008f8
 8014d48:	20000904 	.word	0x20000904
 8014d4c:	200008dc 	.word	0x200008dc

08014d50 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 8014d50:	4b04      	ldr	r3, [pc, #16]	@ (8014d64 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 8014d52:	681a      	ldr	r2, [r3, #0]
 8014d54:	b10a      	cbz	r2, 8014d5a <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xa>
 8014d56:	4803      	ldr	r0, [pc, #12]	@ (8014d64 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 8014d58:	4770      	bx	lr
 8014d5a:	4a03      	ldr	r2, [pc, #12]	@ (8014d68 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x18>)
 8014d5c:	4801      	ldr	r0, [pc, #4]	@ (8014d64 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>)
 8014d5e:	6812      	ldr	r2, [r2, #0]
 8014d60:	601a      	str	r2, [r3, #0]
 8014d62:	4770      	bx	lr
 8014d64:	20000918 	.word	0x20000918
 8014d68:	20000634 	.word	0x20000634

08014d6c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 8014d6c:	4b04      	ldr	r3, [pc, #16]	@ (8014d80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 8014d6e:	4805      	ldr	r0, [pc, #20]	@ (8014d84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x18>)
 8014d70:	4905      	ldr	r1, [pc, #20]	@ (8014d88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x1c>)
 8014d72:	4a06      	ldr	r2, [pc, #24]	@ (8014d8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x20>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	6003      	str	r3, [r0, #0]
 8014d78:	600b      	str	r3, [r1, #0]
 8014d7a:	6013      	str	r3, [r2, #0]
 8014d7c:	4770      	bx	lr
 8014d7e:	bf00      	nop
 8014d80:	20000634 	.word	0x20000634
 8014d84:	20000934 	.word	0x20000934
 8014d88:	20000940 	.word	0x20000940
 8014d8c:	20000918 	.word	0x20000918

08014d90 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 8014d90:	f007 befe 	b.w	801cb90 <std_srvs__srv__SetBool_Request__init>

08014d94 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 8014d94:	f007 bf00 	b.w	801cb98 <std_srvs__srv__SetBool_Request__fini>

08014d98 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 8014d98:	f007 bf00 	b.w	801cb9c <std_srvs__srv__SetBool_Response__init>

08014d9c <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 8014d9c:	f007 bf10 	b.w	801cbc0 <std_srvs__srv__SetBool_Response__fini>

08014da0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8014da0:	4b04      	ldr	r3, [pc, #16]	@ (8014db4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8014da2:	681a      	ldr	r2, [r3, #0]
 8014da4:	b10a      	cbz	r2, 8014daa <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 8014da6:	4803      	ldr	r0, [pc, #12]	@ (8014db4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8014da8:	4770      	bx	lr
 8014daa:	4a03      	ldr	r2, [pc, #12]	@ (8014db8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 8014dac:	4801      	ldr	r0, [pc, #4]	@ (8014db4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 8014dae:	6812      	ldr	r2, [r2, #0]
 8014db0:	601a      	str	r2, [r3, #0]
 8014db2:	4770      	bx	lr
 8014db4:	20000988 	.word	0x20000988
 8014db8:	20000638 	.word	0x20000638

08014dbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 8014dbc:	4b04      	ldr	r3, [pc, #16]	@ (8014dd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	b10a      	cbz	r2, 8014dc6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 8014dc2:	4803      	ldr	r0, [pc, #12]	@ (8014dd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 8014dc4:	4770      	bx	lr
 8014dc6:	4a03      	ldr	r2, [pc, #12]	@ (8014dd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 8014dc8:	4801      	ldr	r0, [pc, #4]	@ (8014dd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 8014dca:	6812      	ldr	r2, [r2, #0]
 8014dcc:	601a      	str	r2, [r3, #0]
 8014dce:	4770      	bx	lr
 8014dd0:	20000a0c 	.word	0x20000a0c
 8014dd4:	20000638 	.word	0x20000638

08014dd8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8014dd8:	4b13      	ldr	r3, [pc, #76]	@ (8014e28 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	b132      	cbz	r2, 8014dec <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 8014dde:	685b      	ldr	r3, [r3, #4]
 8014de0:	689a      	ldr	r2, [r3, #8]
 8014de2:	b152      	cbz	r2, 8014dfa <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 8014de4:	68da      	ldr	r2, [r3, #12]
 8014de6:	b182      	cbz	r2, 8014e0a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 8014de8:	480f      	ldr	r0, [pc, #60]	@ (8014e28 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 8014dea:	4770      	bx	lr
 8014dec:	4a0f      	ldr	r2, [pc, #60]	@ (8014e2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 8014dee:	6812      	ldr	r2, [r2, #0]
 8014df0:	601a      	str	r2, [r3, #0]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	689a      	ldr	r2, [r3, #8]
 8014df6:	2a00      	cmp	r2, #0
 8014df8:	d1f4      	bne.n	8014de4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 8014dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8014e30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 8014dfc:	6811      	ldr	r1, [r2, #0]
 8014dfe:	b179      	cbz	r1, 8014e20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 8014e00:	6852      	ldr	r2, [r2, #4]
 8014e02:	609a      	str	r2, [r3, #8]
 8014e04:	68da      	ldr	r2, [r3, #12]
 8014e06:	2a00      	cmp	r2, #0
 8014e08:	d1ee      	bne.n	8014de8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 8014e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8014e34 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 8014e0c:	6811      	ldr	r1, [r2, #0]
 8014e0e:	b119      	cbz	r1, 8014e18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 8014e10:	6852      	ldr	r2, [r2, #4]
 8014e12:	4805      	ldr	r0, [pc, #20]	@ (8014e28 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 8014e14:	60da      	str	r2, [r3, #12]
 8014e16:	4770      	bx	lr
 8014e18:	4904      	ldr	r1, [pc, #16]	@ (8014e2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 8014e1a:	6809      	ldr	r1, [r1, #0]
 8014e1c:	6011      	str	r1, [r2, #0]
 8014e1e:	e7f7      	b.n	8014e10 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 8014e20:	4902      	ldr	r1, [pc, #8]	@ (8014e2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 8014e22:	6809      	ldr	r1, [r1, #0]
 8014e24:	6011      	str	r1, [r2, #0]
 8014e26:	e7eb      	b.n	8014e00 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 8014e28:	20000a28 	.word	0x20000a28
 8014e2c:	20000638 	.word	0x20000638
 8014e30:	20000988 	.word	0x20000988
 8014e34:	20000a0c 	.word	0x20000a0c

08014e38 <std_srvs__srv__Trigger_Request__rosidl_typesupport_introspection_c__Trigger_Request_init_function>:
 8014e38:	f007 bec8 	b.w	801cbcc <std_srvs__srv__Trigger_Request__init>

08014e3c <std_srvs__srv__Trigger_Request__rosidl_typesupport_introspection_c__Trigger_Request_fini_function>:
 8014e3c:	f007 beca 	b.w	801cbd4 <std_srvs__srv__Trigger_Request__fini>

08014e40 <std_srvs__srv__Trigger_Response__rosidl_typesupport_introspection_c__Trigger_Response_init_function>:
 8014e40:	f007 beca 	b.w	801cbd8 <std_srvs__srv__Trigger_Response__init>

08014e44 <std_srvs__srv__Trigger_Response__rosidl_typesupport_introspection_c__Trigger_Response_fini_function>:
 8014e44:	f007 beda 	b.w	801cbfc <std_srvs__srv__Trigger_Response__fini>

08014e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 8014e48:	4b04      	ldr	r3, [pc, #16]	@ (8014e5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 8014e4a:	681a      	ldr	r2, [r3, #0]
 8014e4c:	b10a      	cbz	r2, 8014e52 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0xa>
 8014e4e:	4803      	ldr	r0, [pc, #12]	@ (8014e5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 8014e50:	4770      	bx	lr
 8014e52:	4a03      	ldr	r2, [pc, #12]	@ (8014e60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x18>)
 8014e54:	4801      	ldr	r0, [pc, #4]	@ (8014e5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x14>)
 8014e56:	6812      	ldr	r2, [r2, #0]
 8014e58:	601a      	str	r2, [r3, #0]
 8014e5a:	4770      	bx	lr
 8014e5c:	20000a70 	.word	0x20000a70
 8014e60:	20000638 	.word	0x20000638

08014e64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response>:
 8014e64:	4b04      	ldr	r3, [pc, #16]	@ (8014e78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 8014e66:	681a      	ldr	r2, [r3, #0]
 8014e68:	b10a      	cbz	r2, 8014e6e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0xa>
 8014e6a:	4803      	ldr	r0, [pc, #12]	@ (8014e78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 8014e6c:	4770      	bx	lr
 8014e6e:	4a03      	ldr	r2, [pc, #12]	@ (8014e7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x18>)
 8014e70:	4801      	ldr	r0, [pc, #4]	@ (8014e78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x14>)
 8014e72:	6812      	ldr	r2, [r2, #0]
 8014e74:	601a      	str	r2, [r3, #0]
 8014e76:	4770      	bx	lr
 8014e78:	20000af4 	.word	0x20000af4
 8014e7c:	20000638 	.word	0x20000638

08014e80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 8014e80:	4b13      	ldr	r3, [pc, #76]	@ (8014ed0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x50>)
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	b132      	cbz	r2, 8014e94 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x14>
 8014e86:	685b      	ldr	r3, [r3, #4]
 8014e88:	689a      	ldr	r2, [r3, #8]
 8014e8a:	b152      	cbz	r2, 8014ea2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x22>
 8014e8c:	68da      	ldr	r2, [r3, #12]
 8014e8e:	b182      	cbz	r2, 8014eb2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x32>
 8014e90:	480f      	ldr	r0, [pc, #60]	@ (8014ed0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x50>)
 8014e92:	4770      	bx	lr
 8014e94:	4a0f      	ldr	r2, [pc, #60]	@ (8014ed4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x54>)
 8014e96:	6812      	ldr	r2, [r2, #0]
 8014e98:	601a      	str	r2, [r3, #0]
 8014e9a:	685b      	ldr	r3, [r3, #4]
 8014e9c:	689a      	ldr	r2, [r3, #8]
 8014e9e:	2a00      	cmp	r2, #0
 8014ea0:	d1f4      	bne.n	8014e8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0xc>
 8014ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8014ed8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x58>)
 8014ea4:	6811      	ldr	r1, [r2, #0]
 8014ea6:	b179      	cbz	r1, 8014ec8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x48>
 8014ea8:	6852      	ldr	r2, [r2, #4]
 8014eaa:	609a      	str	r2, [r3, #8]
 8014eac:	68da      	ldr	r2, [r3, #12]
 8014eae:	2a00      	cmp	r2, #0
 8014eb0:	d1ee      	bne.n	8014e90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x10>
 8014eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8014edc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x5c>)
 8014eb4:	6811      	ldr	r1, [r2, #0]
 8014eb6:	b119      	cbz	r1, 8014ec0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x40>
 8014eb8:	6852      	ldr	r2, [r2, #4]
 8014eba:	4805      	ldr	r0, [pc, #20]	@ (8014ed0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x50>)
 8014ebc:	60da      	str	r2, [r3, #12]
 8014ebe:	4770      	bx	lr
 8014ec0:	4904      	ldr	r1, [pc, #16]	@ (8014ed4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x54>)
 8014ec2:	6809      	ldr	r1, [r1, #0]
 8014ec4:	6011      	str	r1, [r2, #0]
 8014ec6:	e7f7      	b.n	8014eb8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x38>
 8014ec8:	4902      	ldr	r1, [pc, #8]	@ (8014ed4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x54>)
 8014eca:	6809      	ldr	r1, [r1, #0]
 8014ecc:	6011      	str	r1, [r2, #0]
 8014ece:	e7eb      	b.n	8014ea8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x28>
 8014ed0:	20000b10 	.word	0x20000b10
 8014ed4:	20000638 	.word	0x20000638
 8014ed8:	20000a70 	.word	0x20000a70
 8014edc:	20000af4 	.word	0x20000af4

08014ee0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 8014ee0:	4800      	ldr	r0, [pc, #0]	@ (8014ee4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 8014ee2:	4770      	bx	lr
 8014ee4:	20000b38 	.word	0x20000b38

08014ee8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 8014ee8:	4800      	ldr	r0, [pc, #0]	@ (8014eec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 8014eea:	4770      	bx	lr
 8014eec:	20000b44 	.word	0x20000b44

08014ef0 <_SetBool_Request__max_serialized_size>:
 8014ef0:	b508      	push	{r3, lr}
 8014ef2:	2101      	movs	r1, #1
 8014ef4:	2000      	movs	r0, #0
 8014ef6:	f7fb f9b3 	bl	8010260 <ucdr_alignment>
 8014efa:	3001      	adds	r0, #1
 8014efc:	bd08      	pop	{r3, pc}
 8014efe:	bf00      	nop

08014f00 <_SetBool_Request__cdr_deserialize>:
 8014f00:	b109      	cbz	r1, 8014f06 <_SetBool_Request__cdr_deserialize+0x6>
 8014f02:	f7f9 beaf 	b.w	800ec64 <ucdr_deserialize_bool>
 8014f06:	4608      	mov	r0, r1
 8014f08:	4770      	bx	lr
 8014f0a:	bf00      	nop

08014f0c <get_serialized_size_std_srvs__srv__SetBool_Request>:
 8014f0c:	b138      	cbz	r0, 8014f1e <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 8014f0e:	b508      	push	{r3, lr}
 8014f10:	460b      	mov	r3, r1
 8014f12:	4618      	mov	r0, r3
 8014f14:	2101      	movs	r1, #1
 8014f16:	f7fb f9a3 	bl	8010260 <ucdr_alignment>
 8014f1a:	3001      	adds	r0, #1
 8014f1c:	bd08      	pop	{r3, pc}
 8014f1e:	4770      	bx	lr

08014f20 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 8014f20:	b570      	push	{r4, r5, r6, lr}
 8014f22:	4605      	mov	r5, r0
 8014f24:	b180      	cbz	r0, 8014f48 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 8014f26:	460c      	mov	r4, r1
 8014f28:	4620      	mov	r0, r4
 8014f2a:	2101      	movs	r1, #1
 8014f2c:	f7fb f998 	bl	8010260 <ucdr_alignment>
 8014f30:	1c63      	adds	r3, r4, #1
 8014f32:	181e      	adds	r6, r3, r0
 8014f34:	2104      	movs	r1, #4
 8014f36:	4630      	mov	r0, r6
 8014f38:	f7fb f992 	bl	8010260 <ucdr_alignment>
 8014f3c:	68a9      	ldr	r1, [r5, #8]
 8014f3e:	f1c4 0405 	rsb	r4, r4, #5
 8014f42:	440c      	add	r4, r1
 8014f44:	4404      	add	r4, r0
 8014f46:	19a0      	adds	r0, r4, r6
 8014f48:	bd70      	pop	{r4, r5, r6, pc}
 8014f4a:	bf00      	nop

08014f4c <_SetBool_Request__cdr_serialize>:
 8014f4c:	460a      	mov	r2, r1
 8014f4e:	b118      	cbz	r0, 8014f58 <_SetBool_Request__cdr_serialize+0xc>
 8014f50:	7801      	ldrb	r1, [r0, #0]
 8014f52:	4610      	mov	r0, r2
 8014f54:	f7f9 be70 	b.w	800ec38 <ucdr_serialize_bool>
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop

08014f5c <_SetBool_Response__cdr_deserialize>:
 8014f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f5e:	460c      	mov	r4, r1
 8014f60:	b083      	sub	sp, #12
 8014f62:	b1b9      	cbz	r1, 8014f94 <_SetBool_Response__cdr_deserialize+0x38>
 8014f64:	4606      	mov	r6, r0
 8014f66:	f7f9 fe7d 	bl	800ec64 <ucdr_deserialize_bool>
 8014f6a:	68e7      	ldr	r7, [r4, #12]
 8014f6c:	6861      	ldr	r1, [r4, #4]
 8014f6e:	ab01      	add	r3, sp, #4
 8014f70:	463a      	mov	r2, r7
 8014f72:	4630      	mov	r0, r6
 8014f74:	f000 fc9a 	bl	80158ac <ucdr_deserialize_sequence_char>
 8014f78:	9b01      	ldr	r3, [sp, #4]
 8014f7a:	4605      	mov	r5, r0
 8014f7c:	b920      	cbnz	r0, 8014f88 <_SetBool_Response__cdr_deserialize+0x2c>
 8014f7e:	429f      	cmp	r7, r3
 8014f80:	d30c      	bcc.n	8014f9c <_SetBool_Response__cdr_deserialize+0x40>
 8014f82:	4628      	mov	r0, r5
 8014f84:	b003      	add	sp, #12
 8014f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f88:	b103      	cbz	r3, 8014f8c <_SetBool_Response__cdr_deserialize+0x30>
 8014f8a:	3b01      	subs	r3, #1
 8014f8c:	4628      	mov	r0, r5
 8014f8e:	60a3      	str	r3, [r4, #8]
 8014f90:	b003      	add	sp, #12
 8014f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f94:	460d      	mov	r5, r1
 8014f96:	4628      	mov	r0, r5
 8014f98:	b003      	add	sp, #12
 8014f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f9c:	2101      	movs	r1, #1
 8014f9e:	75b0      	strb	r0, [r6, #22]
 8014fa0:	7571      	strb	r1, [r6, #21]
 8014fa2:	4630      	mov	r0, r6
 8014fa4:	60a5      	str	r5, [r4, #8]
 8014fa6:	f7fb f971 	bl	801028c <ucdr_align_to>
 8014faa:	4630      	mov	r0, r6
 8014fac:	9901      	ldr	r1, [sp, #4]
 8014fae:	f7fb f9a3 	bl	80102f8 <ucdr_advance_buffer>
 8014fb2:	4628      	mov	r0, r5
 8014fb4:	b003      	add	sp, #12
 8014fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014fb8 <_SetBool_Response__cdr_serialize>:
 8014fb8:	b1e0      	cbz	r0, 8014ff4 <_SetBool_Response__cdr_serialize+0x3c>
 8014fba:	b570      	push	{r4, r5, r6, lr}
 8014fbc:	460d      	mov	r5, r1
 8014fbe:	4604      	mov	r4, r0
 8014fc0:	7801      	ldrb	r1, [r0, #0]
 8014fc2:	4628      	mov	r0, r5
 8014fc4:	f7f9 fe38 	bl	800ec38 <ucdr_serialize_bool>
 8014fc8:	6866      	ldr	r6, [r4, #4]
 8014fca:	b156      	cbz	r6, 8014fe2 <_SetBool_Response__cdr_serialize+0x2a>
 8014fcc:	4630      	mov	r0, r6
 8014fce:	f7eb f931 	bl	8000234 <strlen>
 8014fd2:	4631      	mov	r1, r6
 8014fd4:	60a0      	str	r0, [r4, #8]
 8014fd6:	1c42      	adds	r2, r0, #1
 8014fd8:	4628      	mov	r0, r5
 8014fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fde:	f000 bc53 	b.w	8015888 <ucdr_serialize_sequence_char>
 8014fe2:	4630      	mov	r0, r6
 8014fe4:	60a0      	str	r0, [r4, #8]
 8014fe6:	4632      	mov	r2, r6
 8014fe8:	4631      	mov	r1, r6
 8014fea:	4628      	mov	r0, r5
 8014fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ff0:	f000 bc4a 	b.w	8015888 <ucdr_serialize_sequence_char>
 8014ff4:	4770      	bx	lr
 8014ff6:	bf00      	nop

08014ff8 <_SetBool_Request__get_serialized_size>:
 8014ff8:	b130      	cbz	r0, 8015008 <_SetBool_Request__get_serialized_size+0x10>
 8014ffa:	b508      	push	{r3, lr}
 8014ffc:	2101      	movs	r1, #1
 8014ffe:	2000      	movs	r0, #0
 8015000:	f7fb f92e 	bl	8010260 <ucdr_alignment>
 8015004:	3001      	adds	r0, #1
 8015006:	bd08      	pop	{r3, pc}
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop

0801500c <_SetBool_Response__max_serialized_size>:
 801500c:	b508      	push	{r3, lr}
 801500e:	2101      	movs	r1, #1
 8015010:	2000      	movs	r0, #0
 8015012:	f7fb f925 	bl	8010260 <ucdr_alignment>
 8015016:	3001      	adds	r0, #1
 8015018:	bd08      	pop	{r3, pc}
 801501a:	bf00      	nop

0801501c <_SetBool_Response__get_serialized_size>:
 801501c:	b538      	push	{r3, r4, r5, lr}
 801501e:	4604      	mov	r4, r0
 8015020:	b160      	cbz	r0, 801503c <_SetBool_Response__get_serialized_size+0x20>
 8015022:	2101      	movs	r1, #1
 8015024:	2000      	movs	r0, #0
 8015026:	f7fb f91b 	bl	8010260 <ucdr_alignment>
 801502a:	1c45      	adds	r5, r0, #1
 801502c:	2104      	movs	r1, #4
 801502e:	4628      	mov	r0, r5
 8015030:	f7fb f916 	bl	8010260 <ucdr_alignment>
 8015034:	68a3      	ldr	r3, [r4, #8]
 8015036:	3305      	adds	r3, #5
 8015038:	4418      	add	r0, r3
 801503a:	4428      	add	r0, r5
 801503c:	bd38      	pop	{r3, r4, r5, pc}
 801503e:	bf00      	nop

08015040 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 8015040:	4800      	ldr	r0, [pc, #0]	@ (8015044 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 8015042:	4770      	bx	lr
 8015044:	20000b2c 	.word	0x20000b2c

08015048 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request>:
 8015048:	4800      	ldr	r0, [pc, #0]	@ (801504c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request+0x4>)
 801504a:	4770      	bx	lr
 801504c:	20000ba4 	.word	0x20000ba4

08015050 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response>:
 8015050:	4800      	ldr	r0, [pc, #0]	@ (8015054 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__Trigger_Response+0x4>)
 8015052:	4770      	bx	lr
 8015054:	20000bb0 	.word	0x20000bb0

08015058 <_Trigger_Request__max_serialized_size>:
 8015058:	b508      	push	{r3, lr}
 801505a:	2101      	movs	r1, #1
 801505c:	2000      	movs	r0, #0
 801505e:	f7fb f8ff 	bl	8010260 <ucdr_alignment>
 8015062:	3001      	adds	r0, #1
 8015064:	bd08      	pop	{r3, pc}
 8015066:	bf00      	nop

08015068 <_Trigger_Request__cdr_deserialize>:
 8015068:	b109      	cbz	r1, 801506e <_Trigger_Request__cdr_deserialize+0x6>
 801506a:	f7f9 be29 	b.w	800ecc0 <ucdr_deserialize_uint8_t>
 801506e:	4608      	mov	r0, r1
 8015070:	4770      	bx	lr
 8015072:	bf00      	nop

08015074 <get_serialized_size_std_srvs__srv__Trigger_Request>:
 8015074:	b138      	cbz	r0, 8015086 <get_serialized_size_std_srvs__srv__Trigger_Request+0x12>
 8015076:	b508      	push	{r3, lr}
 8015078:	460b      	mov	r3, r1
 801507a:	4618      	mov	r0, r3
 801507c:	2101      	movs	r1, #1
 801507e:	f7fb f8ef 	bl	8010260 <ucdr_alignment>
 8015082:	3001      	adds	r0, #1
 8015084:	bd08      	pop	{r3, pc}
 8015086:	4770      	bx	lr

08015088 <get_serialized_size_std_srvs__srv__Trigger_Response>:
 8015088:	b570      	push	{r4, r5, r6, lr}
 801508a:	4605      	mov	r5, r0
 801508c:	b180      	cbz	r0, 80150b0 <get_serialized_size_std_srvs__srv__Trigger_Response+0x28>
 801508e:	460c      	mov	r4, r1
 8015090:	4620      	mov	r0, r4
 8015092:	2101      	movs	r1, #1
 8015094:	f7fb f8e4 	bl	8010260 <ucdr_alignment>
 8015098:	1c63      	adds	r3, r4, #1
 801509a:	181e      	adds	r6, r3, r0
 801509c:	2104      	movs	r1, #4
 801509e:	4630      	mov	r0, r6
 80150a0:	f7fb f8de 	bl	8010260 <ucdr_alignment>
 80150a4:	68a9      	ldr	r1, [r5, #8]
 80150a6:	f1c4 0405 	rsb	r4, r4, #5
 80150aa:	440c      	add	r4, r1
 80150ac:	4404      	add	r4, r0
 80150ae:	19a0      	adds	r0, r4, r6
 80150b0:	bd70      	pop	{r4, r5, r6, pc}
 80150b2:	bf00      	nop

080150b4 <_Trigger_Request__cdr_serialize>:
 80150b4:	460a      	mov	r2, r1
 80150b6:	b118      	cbz	r0, 80150c0 <_Trigger_Request__cdr_serialize+0xc>
 80150b8:	7801      	ldrb	r1, [r0, #0]
 80150ba:	4610      	mov	r0, r2
 80150bc:	f7f9 bdea 	b.w	800ec94 <ucdr_serialize_uint8_t>
 80150c0:	4770      	bx	lr
 80150c2:	bf00      	nop

080150c4 <_Trigger_Response__cdr_deserialize>:
 80150c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150c6:	460c      	mov	r4, r1
 80150c8:	b083      	sub	sp, #12
 80150ca:	b1b9      	cbz	r1, 80150fc <_Trigger_Response__cdr_deserialize+0x38>
 80150cc:	4606      	mov	r6, r0
 80150ce:	f7f9 fdc9 	bl	800ec64 <ucdr_deserialize_bool>
 80150d2:	68e7      	ldr	r7, [r4, #12]
 80150d4:	6861      	ldr	r1, [r4, #4]
 80150d6:	ab01      	add	r3, sp, #4
 80150d8:	463a      	mov	r2, r7
 80150da:	4630      	mov	r0, r6
 80150dc:	f000 fbe6 	bl	80158ac <ucdr_deserialize_sequence_char>
 80150e0:	9b01      	ldr	r3, [sp, #4]
 80150e2:	4605      	mov	r5, r0
 80150e4:	b920      	cbnz	r0, 80150f0 <_Trigger_Response__cdr_deserialize+0x2c>
 80150e6:	429f      	cmp	r7, r3
 80150e8:	d30c      	bcc.n	8015104 <_Trigger_Response__cdr_deserialize+0x40>
 80150ea:	4628      	mov	r0, r5
 80150ec:	b003      	add	sp, #12
 80150ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150f0:	b103      	cbz	r3, 80150f4 <_Trigger_Response__cdr_deserialize+0x30>
 80150f2:	3b01      	subs	r3, #1
 80150f4:	4628      	mov	r0, r5
 80150f6:	60a3      	str	r3, [r4, #8]
 80150f8:	b003      	add	sp, #12
 80150fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150fc:	460d      	mov	r5, r1
 80150fe:	4628      	mov	r0, r5
 8015100:	b003      	add	sp, #12
 8015102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015104:	2101      	movs	r1, #1
 8015106:	75b0      	strb	r0, [r6, #22]
 8015108:	7571      	strb	r1, [r6, #21]
 801510a:	4630      	mov	r0, r6
 801510c:	60a5      	str	r5, [r4, #8]
 801510e:	f7fb f8bd 	bl	801028c <ucdr_align_to>
 8015112:	4630      	mov	r0, r6
 8015114:	9901      	ldr	r1, [sp, #4]
 8015116:	f7fb f8ef 	bl	80102f8 <ucdr_advance_buffer>
 801511a:	4628      	mov	r0, r5
 801511c:	b003      	add	sp, #12
 801511e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015120 <_Trigger_Response__cdr_serialize>:
 8015120:	b1e0      	cbz	r0, 801515c <_Trigger_Response__cdr_serialize+0x3c>
 8015122:	b570      	push	{r4, r5, r6, lr}
 8015124:	460d      	mov	r5, r1
 8015126:	4604      	mov	r4, r0
 8015128:	7801      	ldrb	r1, [r0, #0]
 801512a:	4628      	mov	r0, r5
 801512c:	f7f9 fd84 	bl	800ec38 <ucdr_serialize_bool>
 8015130:	6866      	ldr	r6, [r4, #4]
 8015132:	b156      	cbz	r6, 801514a <_Trigger_Response__cdr_serialize+0x2a>
 8015134:	4630      	mov	r0, r6
 8015136:	f7eb f87d 	bl	8000234 <strlen>
 801513a:	4631      	mov	r1, r6
 801513c:	60a0      	str	r0, [r4, #8]
 801513e:	1c42      	adds	r2, r0, #1
 8015140:	4628      	mov	r0, r5
 8015142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015146:	f000 bb9f 	b.w	8015888 <ucdr_serialize_sequence_char>
 801514a:	4630      	mov	r0, r6
 801514c:	60a0      	str	r0, [r4, #8]
 801514e:	4632      	mov	r2, r6
 8015150:	4631      	mov	r1, r6
 8015152:	4628      	mov	r0, r5
 8015154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015158:	f000 bb96 	b.w	8015888 <ucdr_serialize_sequence_char>
 801515c:	4770      	bx	lr
 801515e:	bf00      	nop

08015160 <_Trigger_Request__get_serialized_size>:
 8015160:	b130      	cbz	r0, 8015170 <_Trigger_Request__get_serialized_size+0x10>
 8015162:	b508      	push	{r3, lr}
 8015164:	2101      	movs	r1, #1
 8015166:	2000      	movs	r0, #0
 8015168:	f7fb f87a 	bl	8010260 <ucdr_alignment>
 801516c:	3001      	adds	r0, #1
 801516e:	bd08      	pop	{r3, pc}
 8015170:	4770      	bx	lr
 8015172:	bf00      	nop

08015174 <_Trigger_Response__max_serialized_size>:
 8015174:	b508      	push	{r3, lr}
 8015176:	2101      	movs	r1, #1
 8015178:	2000      	movs	r0, #0
 801517a:	f7fb f871 	bl	8010260 <ucdr_alignment>
 801517e:	3001      	adds	r0, #1
 8015180:	bd08      	pop	{r3, pc}
 8015182:	bf00      	nop

08015184 <_Trigger_Response__get_serialized_size>:
 8015184:	b538      	push	{r3, r4, r5, lr}
 8015186:	4604      	mov	r4, r0
 8015188:	b160      	cbz	r0, 80151a4 <_Trigger_Response__get_serialized_size+0x20>
 801518a:	2101      	movs	r1, #1
 801518c:	2000      	movs	r0, #0
 801518e:	f7fb f867 	bl	8010260 <ucdr_alignment>
 8015192:	1c45      	adds	r5, r0, #1
 8015194:	2104      	movs	r1, #4
 8015196:	4628      	mov	r0, r5
 8015198:	f7fb f862 	bl	8010260 <ucdr_alignment>
 801519c:	68a3      	ldr	r3, [r4, #8]
 801519e:	3305      	adds	r3, #5
 80151a0:	4418      	add	r0, r3
 80151a2:	4428      	add	r0, r5
 80151a4:	bd38      	pop	{r3, r4, r5, pc}
 80151a6:	bf00      	nop

080151a8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__Trigger>:
 80151a8:	4800      	ldr	r0, [pc, #0]	@ (80151ac <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__Trigger+0x4>)
 80151aa:	4770      	bx	lr
 80151ac:	20000b98 	.word	0x20000b98

080151b0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 80151b0:	f007 bd2a 	b.w	801cc08 <builtin_interfaces__msg__Time__init>

080151b4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 80151b4:	f007 bd2c 	b.w	801cc10 <builtin_interfaces__msg__Time__fini>

080151b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80151b8:	4b04      	ldr	r3, [pc, #16]	@ (80151cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	b10a      	cbz	r2, 80151c2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80151be:	4803      	ldr	r0, [pc, #12]	@ (80151cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80151c0:	4770      	bx	lr
 80151c2:	4a03      	ldr	r2, [pc, #12]	@ (80151d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 80151c4:	4801      	ldr	r0, [pc, #4]	@ (80151cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80151c6:	6812      	ldr	r2, [r2, #0]
 80151c8:	601a      	str	r2, [r3, #0]
 80151ca:	4770      	bx	lr
 80151cc:	20000c6c 	.word	0x20000c6c
 80151d0:	20000638 	.word	0x20000638

080151d4 <get_serialized_size_builtin_interfaces__msg__Time>:
 80151d4:	b180      	cbz	r0, 80151f8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80151d6:	b538      	push	{r3, r4, r5, lr}
 80151d8:	460d      	mov	r5, r1
 80151da:	4628      	mov	r0, r5
 80151dc:	2104      	movs	r1, #4
 80151de:	f7fb f83f 	bl	8010260 <ucdr_alignment>
 80151e2:	1d2b      	adds	r3, r5, #4
 80151e4:	181c      	adds	r4, r3, r0
 80151e6:	2104      	movs	r1, #4
 80151e8:	4620      	mov	r0, r4
 80151ea:	f7fb f839 	bl	8010260 <ucdr_alignment>
 80151ee:	f1c5 0504 	rsb	r5, r5, #4
 80151f2:	4428      	add	r0, r5
 80151f4:	4420      	add	r0, r4
 80151f6:	bd38      	pop	{r3, r4, r5, pc}
 80151f8:	4770      	bx	lr
 80151fa:	bf00      	nop

080151fc <_Time__cdr_deserialize>:
 80151fc:	b538      	push	{r3, r4, r5, lr}
 80151fe:	460c      	mov	r4, r1
 8015200:	b141      	cbz	r1, 8015214 <_Time__cdr_deserialize+0x18>
 8015202:	4605      	mov	r5, r0
 8015204:	f7fa fc0e 	bl	800fa24 <ucdr_deserialize_int32_t>
 8015208:	1d21      	adds	r1, r4, #4
 801520a:	4628      	mov	r0, r5
 801520c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015210:	f7fa b886 	b.w	800f320 <ucdr_deserialize_uint32_t>
 8015214:	4608      	mov	r0, r1
 8015216:	bd38      	pop	{r3, r4, r5, pc}

08015218 <_Time__cdr_serialize>:
 8015218:	b160      	cbz	r0, 8015234 <_Time__cdr_serialize+0x1c>
 801521a:	b538      	push	{r3, r4, r5, lr}
 801521c:	460d      	mov	r5, r1
 801521e:	4604      	mov	r4, r0
 8015220:	6801      	ldr	r1, [r0, #0]
 8015222:	4628      	mov	r0, r5
 8015224:	f7fa fb66 	bl	800f8f4 <ucdr_serialize_int32_t>
 8015228:	6861      	ldr	r1, [r4, #4]
 801522a:	4628      	mov	r0, r5
 801522c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015230:	f7f9 bf46 	b.w	800f0c0 <ucdr_serialize_uint32_t>
 8015234:	4770      	bx	lr
 8015236:	bf00      	nop

08015238 <_Time__get_serialized_size>:
 8015238:	b160      	cbz	r0, 8015254 <_Time__get_serialized_size+0x1c>
 801523a:	b510      	push	{r4, lr}
 801523c:	2104      	movs	r1, #4
 801523e:	2000      	movs	r0, #0
 8015240:	f7fb f80e 	bl	8010260 <ucdr_alignment>
 8015244:	1d04      	adds	r4, r0, #4
 8015246:	2104      	movs	r1, #4
 8015248:	4620      	mov	r0, r4
 801524a:	f7fb f809 	bl	8010260 <ucdr_alignment>
 801524e:	3004      	adds	r0, #4
 8015250:	4420      	add	r0, r4
 8015252:	bd10      	pop	{r4, pc}
 8015254:	4770      	bx	lr
 8015256:	bf00      	nop

08015258 <_Time__max_serialized_size>:
 8015258:	b510      	push	{r4, lr}
 801525a:	2104      	movs	r1, #4
 801525c:	2000      	movs	r0, #0
 801525e:	f7fa ffff 	bl	8010260 <ucdr_alignment>
 8015262:	1d04      	adds	r4, r0, #4
 8015264:	2104      	movs	r1, #4
 8015266:	4620      	mov	r0, r4
 8015268:	f7fa fffa 	bl	8010260 <ucdr_alignment>
 801526c:	3004      	adds	r0, #4
 801526e:	4420      	add	r0, r4
 8015270:	bd10      	pop	{r4, pc}
 8015272:	bf00      	nop

08015274 <max_serialized_size_builtin_interfaces__msg__Time>:
 8015274:	b538      	push	{r3, r4, r5, lr}
 8015276:	460c      	mov	r4, r1
 8015278:	2301      	movs	r3, #1
 801527a:	7003      	strb	r3, [r0, #0]
 801527c:	2104      	movs	r1, #4
 801527e:	4620      	mov	r0, r4
 8015280:	f7fa ffee 	bl	8010260 <ucdr_alignment>
 8015284:	1d25      	adds	r5, r4, #4
 8015286:	4405      	add	r5, r0
 8015288:	2104      	movs	r1, #4
 801528a:	4628      	mov	r0, r5
 801528c:	f7fa ffe8 	bl	8010260 <ucdr_alignment>
 8015290:	f1c4 0404 	rsb	r4, r4, #4
 8015294:	4420      	add	r0, r4
 8015296:	4428      	add	r0, r5
 8015298:	bd38      	pop	{r3, r4, r5, pc}
 801529a:	bf00      	nop

0801529c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801529c:	4800      	ldr	r0, [pc, #0]	@ (80152a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801529e:	4770      	bx	lr
 80152a0:	20000c78 	.word	0x20000c78

080152a4 <geometry_msgs__msg__Twist__init>:
 80152a4:	b570      	push	{r4, r5, r6, lr}
 80152a6:	4605      	mov	r5, r0
 80152a8:	b1a8      	cbz	r0, 80152d6 <geometry_msgs__msg__Twist__init+0x32>
 80152aa:	f000 f82b 	bl	8015304 <geometry_msgs__msg__Vector3__init>
 80152ae:	4604      	mov	r4, r0
 80152b0:	b140      	cbz	r0, 80152c4 <geometry_msgs__msg__Twist__init+0x20>
 80152b2:	f105 0618 	add.w	r6, r5, #24
 80152b6:	4630      	mov	r0, r6
 80152b8:	f000 f824 	bl	8015304 <geometry_msgs__msg__Vector3__init>
 80152bc:	4604      	mov	r4, r0
 80152be:	b168      	cbz	r0, 80152dc <geometry_msgs__msg__Twist__init+0x38>
 80152c0:	4620      	mov	r0, r4
 80152c2:	bd70      	pop	{r4, r5, r6, pc}
 80152c4:	4628      	mov	r0, r5
 80152c6:	f000 f821 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 80152ca:	f105 0018 	add.w	r0, r5, #24
 80152ce:	f000 f81d 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 80152d2:	4620      	mov	r0, r4
 80152d4:	bd70      	pop	{r4, r5, r6, pc}
 80152d6:	4604      	mov	r4, r0
 80152d8:	4620      	mov	r0, r4
 80152da:	bd70      	pop	{r4, r5, r6, pc}
 80152dc:	4628      	mov	r0, r5
 80152de:	f000 f815 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 80152e2:	4630      	mov	r0, r6
 80152e4:	f000 f812 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 80152e8:	e7ea      	b.n	80152c0 <geometry_msgs__msg__Twist__init+0x1c>
 80152ea:	bf00      	nop

080152ec <geometry_msgs__msg__Twist__fini>:
 80152ec:	b148      	cbz	r0, 8015302 <geometry_msgs__msg__Twist__fini+0x16>
 80152ee:	b510      	push	{r4, lr}
 80152f0:	4604      	mov	r4, r0
 80152f2:	f000 f80b 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 80152f6:	f104 0018 	add.w	r0, r4, #24
 80152fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152fe:	f000 b805 	b.w	801530c <geometry_msgs__msg__Vector3__fini>
 8015302:	4770      	bx	lr

08015304 <geometry_msgs__msg__Vector3__init>:
 8015304:	3800      	subs	r0, #0
 8015306:	bf18      	it	ne
 8015308:	2001      	movne	r0, #1
 801530a:	4770      	bx	lr

0801530c <geometry_msgs__msg__Vector3__fini>:
 801530c:	4770      	bx	lr
 801530e:	bf00      	nop

08015310 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8015310:	f007 bc82 	b.w	801cc18 <geometry_msgs__msg__Quaternion__init>

08015314 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8015314:	f007 bc94 	b.w	801cc40 <geometry_msgs__msg__Quaternion__fini>

08015318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8015318:	4b04      	ldr	r3, [pc, #16]	@ (801532c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801531a:	681a      	ldr	r2, [r3, #0]
 801531c:	b10a      	cbz	r2, 8015322 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 801531e:	4803      	ldr	r0, [pc, #12]	@ (801532c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8015320:	4770      	bx	lr
 8015322:	4a03      	ldr	r2, [pc, #12]	@ (8015330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8015324:	4801      	ldr	r0, [pc, #4]	@ (801532c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8015326:	6812      	ldr	r2, [r2, #0]
 8015328:	601a      	str	r2, [r3, #0]
 801532a:	4770      	bx	lr
 801532c:	20000d90 	.word	0x20000d90
 8015330:	20000638 	.word	0x20000638

08015334 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8015334:	b1f0      	cbz	r0, 8015374 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8015336:	b570      	push	{r4, r5, r6, lr}
 8015338:	460d      	mov	r5, r1
 801533a:	4628      	mov	r0, r5
 801533c:	2108      	movs	r1, #8
 801533e:	f7fa ff8f 	bl	8010260 <ucdr_alignment>
 8015342:	f105 0308 	add.w	r3, r5, #8
 8015346:	181e      	adds	r6, r3, r0
 8015348:	2108      	movs	r1, #8
 801534a:	4630      	mov	r0, r6
 801534c:	f7fa ff88 	bl	8010260 <ucdr_alignment>
 8015350:	f100 0408 	add.w	r4, r0, #8
 8015354:	4434      	add	r4, r6
 8015356:	2108      	movs	r1, #8
 8015358:	4620      	mov	r0, r4
 801535a:	f7fa ff81 	bl	8010260 <ucdr_alignment>
 801535e:	3008      	adds	r0, #8
 8015360:	4404      	add	r4, r0
 8015362:	2108      	movs	r1, #8
 8015364:	4620      	mov	r0, r4
 8015366:	f7fa ff7b 	bl	8010260 <ucdr_alignment>
 801536a:	f1c5 0508 	rsb	r5, r5, #8
 801536e:	4428      	add	r0, r5
 8015370:	4420      	add	r0, r4
 8015372:	bd70      	pop	{r4, r5, r6, pc}
 8015374:	4770      	bx	lr
 8015376:	bf00      	nop

08015378 <_Quaternion__cdr_deserialize>:
 8015378:	b538      	push	{r3, r4, r5, lr}
 801537a:	460c      	mov	r4, r1
 801537c:	b199      	cbz	r1, 80153a6 <_Quaternion__cdr_deserialize+0x2e>
 801537e:	4605      	mov	r5, r0
 8015380:	f7fa fd82 	bl	800fe88 <ucdr_deserialize_double>
 8015384:	f104 0108 	add.w	r1, r4, #8
 8015388:	4628      	mov	r0, r5
 801538a:	f7fa fd7d 	bl	800fe88 <ucdr_deserialize_double>
 801538e:	f104 0110 	add.w	r1, r4, #16
 8015392:	4628      	mov	r0, r5
 8015394:	f7fa fd78 	bl	800fe88 <ucdr_deserialize_double>
 8015398:	f104 0118 	add.w	r1, r4, #24
 801539c:	4628      	mov	r0, r5
 801539e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153a2:	f7fa bd71 	b.w	800fe88 <ucdr_deserialize_double>
 80153a6:	4608      	mov	r0, r1
 80153a8:	bd38      	pop	{r3, r4, r5, pc}
 80153aa:	bf00      	nop

080153ac <_Quaternion__cdr_serialize>:
 80153ac:	b1c0      	cbz	r0, 80153e0 <_Quaternion__cdr_serialize+0x34>
 80153ae:	b538      	push	{r3, r4, r5, lr}
 80153b0:	ed90 0b00 	vldr	d0, [r0]
 80153b4:	460d      	mov	r5, r1
 80153b6:	4604      	mov	r4, r0
 80153b8:	4608      	mov	r0, r1
 80153ba:	f7fa fbc3 	bl	800fb44 <ucdr_serialize_double>
 80153be:	ed94 0b02 	vldr	d0, [r4, #8]
 80153c2:	4628      	mov	r0, r5
 80153c4:	f7fa fbbe 	bl	800fb44 <ucdr_serialize_double>
 80153c8:	ed94 0b04 	vldr	d0, [r4, #16]
 80153cc:	4628      	mov	r0, r5
 80153ce:	f7fa fbb9 	bl	800fb44 <ucdr_serialize_double>
 80153d2:	ed94 0b06 	vldr	d0, [r4, #24]
 80153d6:	4628      	mov	r0, r5
 80153d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153dc:	f7fa bbb2 	b.w	800fb44 <ucdr_serialize_double>
 80153e0:	4770      	bx	lr
 80153e2:	bf00      	nop

080153e4 <_Quaternion__get_serialized_size>:
 80153e4:	b1d0      	cbz	r0, 801541c <_Quaternion__get_serialized_size+0x38>
 80153e6:	b538      	push	{r3, r4, r5, lr}
 80153e8:	2108      	movs	r1, #8
 80153ea:	2000      	movs	r0, #0
 80153ec:	f7fa ff38 	bl	8010260 <ucdr_alignment>
 80153f0:	f100 0508 	add.w	r5, r0, #8
 80153f4:	2108      	movs	r1, #8
 80153f6:	4628      	mov	r0, r5
 80153f8:	f7fa ff32 	bl	8010260 <ucdr_alignment>
 80153fc:	f100 0408 	add.w	r4, r0, #8
 8015400:	442c      	add	r4, r5
 8015402:	2108      	movs	r1, #8
 8015404:	4620      	mov	r0, r4
 8015406:	f7fa ff2b 	bl	8010260 <ucdr_alignment>
 801540a:	3008      	adds	r0, #8
 801540c:	4404      	add	r4, r0
 801540e:	2108      	movs	r1, #8
 8015410:	4620      	mov	r0, r4
 8015412:	f7fa ff25 	bl	8010260 <ucdr_alignment>
 8015416:	3008      	adds	r0, #8
 8015418:	4420      	add	r0, r4
 801541a:	bd38      	pop	{r3, r4, r5, pc}
 801541c:	4770      	bx	lr
 801541e:	bf00      	nop

08015420 <_Quaternion__max_serialized_size>:
 8015420:	b538      	push	{r3, r4, r5, lr}
 8015422:	2108      	movs	r1, #8
 8015424:	2000      	movs	r0, #0
 8015426:	f7fa ff1b 	bl	8010260 <ucdr_alignment>
 801542a:	f100 0508 	add.w	r5, r0, #8
 801542e:	2108      	movs	r1, #8
 8015430:	4628      	mov	r0, r5
 8015432:	f7fa ff15 	bl	8010260 <ucdr_alignment>
 8015436:	f100 0408 	add.w	r4, r0, #8
 801543a:	442c      	add	r4, r5
 801543c:	2108      	movs	r1, #8
 801543e:	4620      	mov	r0, r4
 8015440:	f7fa ff0e 	bl	8010260 <ucdr_alignment>
 8015444:	3008      	adds	r0, #8
 8015446:	4404      	add	r4, r0
 8015448:	2108      	movs	r1, #8
 801544a:	4620      	mov	r0, r4
 801544c:	f7fa ff08 	bl	8010260 <ucdr_alignment>
 8015450:	3008      	adds	r0, #8
 8015452:	4420      	add	r0, r4
 8015454:	bd38      	pop	{r3, r4, r5, pc}
 8015456:	bf00      	nop

08015458 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8015458:	b570      	push	{r4, r5, r6, lr}
 801545a:	2301      	movs	r3, #1
 801545c:	460c      	mov	r4, r1
 801545e:	7003      	strb	r3, [r0, #0]
 8015460:	2108      	movs	r1, #8
 8015462:	4620      	mov	r0, r4
 8015464:	f7fa fefc 	bl	8010260 <ucdr_alignment>
 8015468:	f104 0508 	add.w	r5, r4, #8
 801546c:	1946      	adds	r6, r0, r5
 801546e:	2108      	movs	r1, #8
 8015470:	4630      	mov	r0, r6
 8015472:	f7fa fef5 	bl	8010260 <ucdr_alignment>
 8015476:	f100 0508 	add.w	r5, r0, #8
 801547a:	4435      	add	r5, r6
 801547c:	2108      	movs	r1, #8
 801547e:	4628      	mov	r0, r5
 8015480:	f7fa feee 	bl	8010260 <ucdr_alignment>
 8015484:	3008      	adds	r0, #8
 8015486:	4405      	add	r5, r0
 8015488:	2108      	movs	r1, #8
 801548a:	4628      	mov	r0, r5
 801548c:	f7fa fee8 	bl	8010260 <ucdr_alignment>
 8015490:	f1c4 0408 	rsb	r4, r4, #8
 8015494:	4420      	add	r0, r4
 8015496:	4428      	add	r0, r5
 8015498:	bd70      	pop	{r4, r5, r6, pc}
 801549a:	bf00      	nop

0801549c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 801549c:	4800      	ldr	r0, [pc, #0]	@ (80154a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 801549e:	4770      	bx	lr
 80154a0:	20000d9c 	.word	0x20000d9c

080154a4 <imu_interfaces__srv__ImuCalibration_Request__init>:
 80154a4:	b538      	push	{r3, r4, r5, lr}
 80154a6:	4604      	mov	r4, r0
 80154a8:	b128      	cbz	r0, 80154b6 <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 80154aa:	f007 fad7 	bl	801ca5c <sensor_msgs__msg__Imu__init>
 80154ae:	4605      	mov	r5, r0
 80154b0:	b120      	cbz	r0, 80154bc <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 80154b2:	4628      	mov	r0, r5
 80154b4:	bd38      	pop	{r3, r4, r5, pc}
 80154b6:	4605      	mov	r5, r0
 80154b8:	4628      	mov	r0, r5
 80154ba:	bd38      	pop	{r3, r4, r5, pc}
 80154bc:	4620      	mov	r0, r4
 80154be:	f007 fb23 	bl	801cb08 <sensor_msgs__msg__Imu__fini>
 80154c2:	4628      	mov	r0, r5
 80154c4:	bd38      	pop	{r3, r4, r5, pc}
 80154c6:	bf00      	nop

080154c8 <imu_interfaces__srv__ImuCalibration_Request__fini>:
 80154c8:	b108      	cbz	r0, 80154ce <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 80154ca:	f007 bb1d 	b.w	801cb08 <sensor_msgs__msg__Imu__fini>
 80154ce:	4770      	bx	lr

080154d0 <imu_interfaces__srv__ImuCalibration_Response__init>:
 80154d0:	3800      	subs	r0, #0
 80154d2:	bf18      	it	ne
 80154d4:	2001      	movne	r0, #1
 80154d6:	4770      	bx	lr

080154d8 <imu_interfaces__srv__ImuCalibration_Response__fini>:
 80154d8:	4770      	bx	lr
 80154da:	bf00      	nop

080154dc <ucdr_serialize_endian_array_char>:
 80154dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154e0:	4619      	mov	r1, r3
 80154e2:	461f      	mov	r7, r3
 80154e4:	4605      	mov	r5, r0
 80154e6:	4690      	mov	r8, r2
 80154e8:	f7fa fe62 	bl	80101b0 <ucdr_check_buffer_available_for>
 80154ec:	b9e0      	cbnz	r0, 8015528 <ucdr_serialize_endian_array_char+0x4c>
 80154ee:	463e      	mov	r6, r7
 80154f0:	e009      	b.n	8015506 <ucdr_serialize_endian_array_char+0x2a>
 80154f2:	68a8      	ldr	r0, [r5, #8]
 80154f4:	f008 ff0d 	bl	801e312 <memcpy>
 80154f8:	68ab      	ldr	r3, [r5, #8]
 80154fa:	6928      	ldr	r0, [r5, #16]
 80154fc:	4423      	add	r3, r4
 80154fe:	4420      	add	r0, r4
 8015500:	1b36      	subs	r6, r6, r4
 8015502:	60ab      	str	r3, [r5, #8]
 8015504:	6128      	str	r0, [r5, #16]
 8015506:	4631      	mov	r1, r6
 8015508:	2201      	movs	r2, #1
 801550a:	4628      	mov	r0, r5
 801550c:	f7fa fed8 	bl	80102c0 <ucdr_check_final_buffer_behavior_array>
 8015510:	1bb9      	subs	r1, r7, r6
 8015512:	4441      	add	r1, r8
 8015514:	4604      	mov	r4, r0
 8015516:	4602      	mov	r2, r0
 8015518:	2800      	cmp	r0, #0
 801551a:	d1ea      	bne.n	80154f2 <ucdr_serialize_endian_array_char+0x16>
 801551c:	2301      	movs	r3, #1
 801551e:	7da8      	ldrb	r0, [r5, #22]
 8015520:	756b      	strb	r3, [r5, #21]
 8015522:	4058      	eors	r0, r3
 8015524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015528:	463a      	mov	r2, r7
 801552a:	68a8      	ldr	r0, [r5, #8]
 801552c:	4641      	mov	r1, r8
 801552e:	f008 fef0 	bl	801e312 <memcpy>
 8015532:	68aa      	ldr	r2, [r5, #8]
 8015534:	692b      	ldr	r3, [r5, #16]
 8015536:	443a      	add	r2, r7
 8015538:	443b      	add	r3, r7
 801553a:	60aa      	str	r2, [r5, #8]
 801553c:	612b      	str	r3, [r5, #16]
 801553e:	e7ed      	b.n	801551c <ucdr_serialize_endian_array_char+0x40>

08015540 <ucdr_deserialize_endian_array_char>:
 8015540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015544:	4619      	mov	r1, r3
 8015546:	461f      	mov	r7, r3
 8015548:	4605      	mov	r5, r0
 801554a:	4690      	mov	r8, r2
 801554c:	f7fa fe30 	bl	80101b0 <ucdr_check_buffer_available_for>
 8015550:	b9e0      	cbnz	r0, 801558c <ucdr_deserialize_endian_array_char+0x4c>
 8015552:	463e      	mov	r6, r7
 8015554:	e009      	b.n	801556a <ucdr_deserialize_endian_array_char+0x2a>
 8015556:	68a9      	ldr	r1, [r5, #8]
 8015558:	f008 fedb 	bl	801e312 <memcpy>
 801555c:	68ab      	ldr	r3, [r5, #8]
 801555e:	6928      	ldr	r0, [r5, #16]
 8015560:	4423      	add	r3, r4
 8015562:	4420      	add	r0, r4
 8015564:	1b36      	subs	r6, r6, r4
 8015566:	60ab      	str	r3, [r5, #8]
 8015568:	6128      	str	r0, [r5, #16]
 801556a:	2201      	movs	r2, #1
 801556c:	4631      	mov	r1, r6
 801556e:	4628      	mov	r0, r5
 8015570:	f7fa fea6 	bl	80102c0 <ucdr_check_final_buffer_behavior_array>
 8015574:	4604      	mov	r4, r0
 8015576:	1bb8      	subs	r0, r7, r6
 8015578:	4440      	add	r0, r8
 801557a:	4622      	mov	r2, r4
 801557c:	2c00      	cmp	r4, #0
 801557e:	d1ea      	bne.n	8015556 <ucdr_deserialize_endian_array_char+0x16>
 8015580:	2301      	movs	r3, #1
 8015582:	7da8      	ldrb	r0, [r5, #22]
 8015584:	756b      	strb	r3, [r5, #21]
 8015586:	4058      	eors	r0, r3
 8015588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801558c:	463a      	mov	r2, r7
 801558e:	68a9      	ldr	r1, [r5, #8]
 8015590:	4640      	mov	r0, r8
 8015592:	f008 febe 	bl	801e312 <memcpy>
 8015596:	68aa      	ldr	r2, [r5, #8]
 8015598:	692b      	ldr	r3, [r5, #16]
 801559a:	443a      	add	r2, r7
 801559c:	443b      	add	r3, r7
 801559e:	60aa      	str	r2, [r5, #8]
 80155a0:	612b      	str	r3, [r5, #16]
 80155a2:	e7ed      	b.n	8015580 <ucdr_deserialize_endian_array_char+0x40>

080155a4 <ucdr_serialize_array_uint8_t>:
 80155a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155a8:	4688      	mov	r8, r1
 80155aa:	4611      	mov	r1, r2
 80155ac:	4617      	mov	r7, r2
 80155ae:	4605      	mov	r5, r0
 80155b0:	f7fa fdfe 	bl	80101b0 <ucdr_check_buffer_available_for>
 80155b4:	b9e0      	cbnz	r0, 80155f0 <ucdr_serialize_array_uint8_t+0x4c>
 80155b6:	463e      	mov	r6, r7
 80155b8:	e009      	b.n	80155ce <ucdr_serialize_array_uint8_t+0x2a>
 80155ba:	68a8      	ldr	r0, [r5, #8]
 80155bc:	f008 fea9 	bl	801e312 <memcpy>
 80155c0:	68aa      	ldr	r2, [r5, #8]
 80155c2:	692b      	ldr	r3, [r5, #16]
 80155c4:	4422      	add	r2, r4
 80155c6:	4423      	add	r3, r4
 80155c8:	1b36      	subs	r6, r6, r4
 80155ca:	60aa      	str	r2, [r5, #8]
 80155cc:	612b      	str	r3, [r5, #16]
 80155ce:	4631      	mov	r1, r6
 80155d0:	2201      	movs	r2, #1
 80155d2:	4628      	mov	r0, r5
 80155d4:	f7fa fe74 	bl	80102c0 <ucdr_check_final_buffer_behavior_array>
 80155d8:	1bb9      	subs	r1, r7, r6
 80155da:	4441      	add	r1, r8
 80155dc:	4604      	mov	r4, r0
 80155de:	4602      	mov	r2, r0
 80155e0:	2800      	cmp	r0, #0
 80155e2:	d1ea      	bne.n	80155ba <ucdr_serialize_array_uint8_t+0x16>
 80155e4:	2301      	movs	r3, #1
 80155e6:	7da8      	ldrb	r0, [r5, #22]
 80155e8:	756b      	strb	r3, [r5, #21]
 80155ea:	4058      	eors	r0, r3
 80155ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155f0:	463a      	mov	r2, r7
 80155f2:	68a8      	ldr	r0, [r5, #8]
 80155f4:	4641      	mov	r1, r8
 80155f6:	f008 fe8c 	bl	801e312 <memcpy>
 80155fa:	68aa      	ldr	r2, [r5, #8]
 80155fc:	692b      	ldr	r3, [r5, #16]
 80155fe:	443a      	add	r2, r7
 8015600:	443b      	add	r3, r7
 8015602:	60aa      	str	r2, [r5, #8]
 8015604:	612b      	str	r3, [r5, #16]
 8015606:	e7ed      	b.n	80155e4 <ucdr_serialize_array_uint8_t+0x40>

08015608 <ucdr_serialize_endian_array_uint8_t>:
 8015608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801560c:	4619      	mov	r1, r3
 801560e:	461f      	mov	r7, r3
 8015610:	4605      	mov	r5, r0
 8015612:	4690      	mov	r8, r2
 8015614:	f7fa fdcc 	bl	80101b0 <ucdr_check_buffer_available_for>
 8015618:	b9e0      	cbnz	r0, 8015654 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801561a:	463e      	mov	r6, r7
 801561c:	e009      	b.n	8015632 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801561e:	68a8      	ldr	r0, [r5, #8]
 8015620:	f008 fe77 	bl	801e312 <memcpy>
 8015624:	68ab      	ldr	r3, [r5, #8]
 8015626:	6928      	ldr	r0, [r5, #16]
 8015628:	4423      	add	r3, r4
 801562a:	4420      	add	r0, r4
 801562c:	1b36      	subs	r6, r6, r4
 801562e:	60ab      	str	r3, [r5, #8]
 8015630:	6128      	str	r0, [r5, #16]
 8015632:	4631      	mov	r1, r6
 8015634:	2201      	movs	r2, #1
 8015636:	4628      	mov	r0, r5
 8015638:	f7fa fe42 	bl	80102c0 <ucdr_check_final_buffer_behavior_array>
 801563c:	1bb9      	subs	r1, r7, r6
 801563e:	4441      	add	r1, r8
 8015640:	4604      	mov	r4, r0
 8015642:	4602      	mov	r2, r0
 8015644:	2800      	cmp	r0, #0
 8015646:	d1ea      	bne.n	801561e <ucdr_serialize_endian_array_uint8_t+0x16>
 8015648:	2301      	movs	r3, #1
 801564a:	7da8      	ldrb	r0, [r5, #22]
 801564c:	756b      	strb	r3, [r5, #21]
 801564e:	4058      	eors	r0, r3
 8015650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015654:	463a      	mov	r2, r7
 8015656:	68a8      	ldr	r0, [r5, #8]
 8015658:	4641      	mov	r1, r8
 801565a:	f008 fe5a 	bl	801e312 <memcpy>
 801565e:	68aa      	ldr	r2, [r5, #8]
 8015660:	692b      	ldr	r3, [r5, #16]
 8015662:	443a      	add	r2, r7
 8015664:	443b      	add	r3, r7
 8015666:	60aa      	str	r2, [r5, #8]
 8015668:	612b      	str	r3, [r5, #16]
 801566a:	e7ed      	b.n	8015648 <ucdr_serialize_endian_array_uint8_t+0x40>

0801566c <ucdr_deserialize_array_uint8_t>:
 801566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015670:	4688      	mov	r8, r1
 8015672:	4611      	mov	r1, r2
 8015674:	4617      	mov	r7, r2
 8015676:	4605      	mov	r5, r0
 8015678:	f7fa fd9a 	bl	80101b0 <ucdr_check_buffer_available_for>
 801567c:	b9e0      	cbnz	r0, 80156b8 <ucdr_deserialize_array_uint8_t+0x4c>
 801567e:	463e      	mov	r6, r7
 8015680:	e009      	b.n	8015696 <ucdr_deserialize_array_uint8_t+0x2a>
 8015682:	68a9      	ldr	r1, [r5, #8]
 8015684:	f008 fe45 	bl	801e312 <memcpy>
 8015688:	68aa      	ldr	r2, [r5, #8]
 801568a:	692b      	ldr	r3, [r5, #16]
 801568c:	4422      	add	r2, r4
 801568e:	4423      	add	r3, r4
 8015690:	1b36      	subs	r6, r6, r4
 8015692:	60aa      	str	r2, [r5, #8]
 8015694:	612b      	str	r3, [r5, #16]
 8015696:	2201      	movs	r2, #1
 8015698:	4631      	mov	r1, r6
 801569a:	4628      	mov	r0, r5
 801569c:	f7fa fe10 	bl	80102c0 <ucdr_check_final_buffer_behavior_array>
 80156a0:	4604      	mov	r4, r0
 80156a2:	1bb8      	subs	r0, r7, r6
 80156a4:	4440      	add	r0, r8
 80156a6:	4622      	mov	r2, r4
 80156a8:	2c00      	cmp	r4, #0
 80156aa:	d1ea      	bne.n	8015682 <ucdr_deserialize_array_uint8_t+0x16>
 80156ac:	2301      	movs	r3, #1
 80156ae:	7da8      	ldrb	r0, [r5, #22]
 80156b0:	756b      	strb	r3, [r5, #21]
 80156b2:	4058      	eors	r0, r3
 80156b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156b8:	463a      	mov	r2, r7
 80156ba:	68a9      	ldr	r1, [r5, #8]
 80156bc:	4640      	mov	r0, r8
 80156be:	f008 fe28 	bl	801e312 <memcpy>
 80156c2:	68aa      	ldr	r2, [r5, #8]
 80156c4:	692b      	ldr	r3, [r5, #16]
 80156c6:	443a      	add	r2, r7
 80156c8:	443b      	add	r3, r7
 80156ca:	60aa      	str	r2, [r5, #8]
 80156cc:	612b      	str	r3, [r5, #16]
 80156ce:	e7ed      	b.n	80156ac <ucdr_deserialize_array_uint8_t+0x40>

080156d0 <ucdr_deserialize_endian_array_uint8_t>:
 80156d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156d4:	4619      	mov	r1, r3
 80156d6:	461f      	mov	r7, r3
 80156d8:	4605      	mov	r5, r0
 80156da:	4690      	mov	r8, r2
 80156dc:	f7fa fd68 	bl	80101b0 <ucdr_check_buffer_available_for>
 80156e0:	b9e0      	cbnz	r0, 801571c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80156e2:	463e      	mov	r6, r7
 80156e4:	e009      	b.n	80156fa <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80156e6:	68a9      	ldr	r1, [r5, #8]
 80156e8:	f008 fe13 	bl	801e312 <memcpy>
 80156ec:	68ab      	ldr	r3, [r5, #8]
 80156ee:	6928      	ldr	r0, [r5, #16]
 80156f0:	4423      	add	r3, r4
 80156f2:	4420      	add	r0, r4
 80156f4:	1b36      	subs	r6, r6, r4
 80156f6:	60ab      	str	r3, [r5, #8]
 80156f8:	6128      	str	r0, [r5, #16]
 80156fa:	2201      	movs	r2, #1
 80156fc:	4631      	mov	r1, r6
 80156fe:	4628      	mov	r0, r5
 8015700:	f7fa fdde 	bl	80102c0 <ucdr_check_final_buffer_behavior_array>
 8015704:	4604      	mov	r4, r0
 8015706:	1bb8      	subs	r0, r7, r6
 8015708:	4440      	add	r0, r8
 801570a:	4622      	mov	r2, r4
 801570c:	2c00      	cmp	r4, #0
 801570e:	d1ea      	bne.n	80156e6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015710:	2301      	movs	r3, #1
 8015712:	7da8      	ldrb	r0, [r5, #22]
 8015714:	756b      	strb	r3, [r5, #21]
 8015716:	4058      	eors	r0, r3
 8015718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801571c:	463a      	mov	r2, r7
 801571e:	68a9      	ldr	r1, [r5, #8]
 8015720:	4640      	mov	r0, r8
 8015722:	f008 fdf6 	bl	801e312 <memcpy>
 8015726:	68aa      	ldr	r2, [r5, #8]
 8015728:	692b      	ldr	r3, [r5, #16]
 801572a:	443a      	add	r2, r7
 801572c:	443b      	add	r3, r7
 801572e:	60aa      	str	r2, [r5, #8]
 8015730:	612b      	str	r3, [r5, #16]
 8015732:	e7ed      	b.n	8015710 <ucdr_deserialize_endian_array_uint8_t+0x40>

08015734 <ucdr_serialize_array_double>:
 8015734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015738:	460e      	mov	r6, r1
 801573a:	2108      	movs	r1, #8
 801573c:	4604      	mov	r4, r0
 801573e:	4617      	mov	r7, r2
 8015740:	f7fa fd96 	bl	8010270 <ucdr_buffer_alignment>
 8015744:	4601      	mov	r1, r0
 8015746:	4620      	mov	r0, r4
 8015748:	7d65      	ldrb	r5, [r4, #21]
 801574a:	f7fa fdd5 	bl	80102f8 <ucdr_advance_buffer>
 801574e:	7d21      	ldrb	r1, [r4, #20]
 8015750:	7565      	strb	r5, [r4, #21]
 8015752:	2901      	cmp	r1, #1
 8015754:	d010      	beq.n	8015778 <ucdr_serialize_array_double+0x44>
 8015756:	b157      	cbz	r7, 801576e <ucdr_serialize_array_double+0x3a>
 8015758:	2500      	movs	r5, #0
 801575a:	e000      	b.n	801575e <ucdr_serialize_array_double+0x2a>
 801575c:	7d21      	ldrb	r1, [r4, #20]
 801575e:	ecb6 0b02 	vldmia	r6!, {d0}
 8015762:	4620      	mov	r0, r4
 8015764:	3501      	adds	r5, #1
 8015766:	f7fa fabd 	bl	800fce4 <ucdr_serialize_endian_double>
 801576a:	42af      	cmp	r7, r5
 801576c:	d1f6      	bne.n	801575c <ucdr_serialize_array_double+0x28>
 801576e:	7da0      	ldrb	r0, [r4, #22]
 8015770:	f080 0001 	eor.w	r0, r0, #1
 8015774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015778:	00ff      	lsls	r7, r7, #3
 801577a:	4639      	mov	r1, r7
 801577c:	4620      	mov	r0, r4
 801577e:	f7fa fd17 	bl	80101b0 <ucdr_check_buffer_available_for>
 8015782:	b9f8      	cbnz	r0, 80157c4 <ucdr_serialize_array_double+0x90>
 8015784:	46b8      	mov	r8, r7
 8015786:	e00a      	b.n	801579e <ucdr_serialize_array_double+0x6a>
 8015788:	68a0      	ldr	r0, [r4, #8]
 801578a:	f008 fdc2 	bl	801e312 <memcpy>
 801578e:	68a2      	ldr	r2, [r4, #8]
 8015790:	6923      	ldr	r3, [r4, #16]
 8015792:	442a      	add	r2, r5
 8015794:	442b      	add	r3, r5
 8015796:	eba8 0805 	sub.w	r8, r8, r5
 801579a:	60a2      	str	r2, [r4, #8]
 801579c:	6123      	str	r3, [r4, #16]
 801579e:	4641      	mov	r1, r8
 80157a0:	2208      	movs	r2, #8
 80157a2:	4620      	mov	r0, r4
 80157a4:	f7fa fd8c 	bl	80102c0 <ucdr_check_final_buffer_behavior_array>
 80157a8:	eba7 0108 	sub.w	r1, r7, r8
 80157ac:	4431      	add	r1, r6
 80157ae:	4605      	mov	r5, r0
 80157b0:	4602      	mov	r2, r0
 80157b2:	2800      	cmp	r0, #0
 80157b4:	d1e8      	bne.n	8015788 <ucdr_serialize_array_double+0x54>
 80157b6:	7da0      	ldrb	r0, [r4, #22]
 80157b8:	2308      	movs	r3, #8
 80157ba:	7563      	strb	r3, [r4, #21]
 80157bc:	f080 0001 	eor.w	r0, r0, #1
 80157c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157c4:	463a      	mov	r2, r7
 80157c6:	68a0      	ldr	r0, [r4, #8]
 80157c8:	4631      	mov	r1, r6
 80157ca:	f008 fda2 	bl	801e312 <memcpy>
 80157ce:	68a2      	ldr	r2, [r4, #8]
 80157d0:	6923      	ldr	r3, [r4, #16]
 80157d2:	443a      	add	r2, r7
 80157d4:	441f      	add	r7, r3
 80157d6:	60a2      	str	r2, [r4, #8]
 80157d8:	6127      	str	r7, [r4, #16]
 80157da:	e7ec      	b.n	80157b6 <ucdr_serialize_array_double+0x82>

080157dc <ucdr_deserialize_array_double>:
 80157dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157e0:	460e      	mov	r6, r1
 80157e2:	2108      	movs	r1, #8
 80157e4:	4604      	mov	r4, r0
 80157e6:	4617      	mov	r7, r2
 80157e8:	f7fa fd42 	bl	8010270 <ucdr_buffer_alignment>
 80157ec:	4601      	mov	r1, r0
 80157ee:	4620      	mov	r0, r4
 80157f0:	7d65      	ldrb	r5, [r4, #21]
 80157f2:	f7fa fd81 	bl	80102f8 <ucdr_advance_buffer>
 80157f6:	7d21      	ldrb	r1, [r4, #20]
 80157f8:	7565      	strb	r5, [r4, #21]
 80157fa:	2901      	cmp	r1, #1
 80157fc:	d011      	beq.n	8015822 <ucdr_deserialize_array_double+0x46>
 80157fe:	b15f      	cbz	r7, 8015818 <ucdr_deserialize_array_double+0x3c>
 8015800:	2500      	movs	r5, #0
 8015802:	e000      	b.n	8015806 <ucdr_deserialize_array_double+0x2a>
 8015804:	7d21      	ldrb	r1, [r4, #20]
 8015806:	4632      	mov	r2, r6
 8015808:	4620      	mov	r0, r4
 801580a:	3501      	adds	r5, #1
 801580c:	f7fa fc02 	bl	8010014 <ucdr_deserialize_endian_double>
 8015810:	42af      	cmp	r7, r5
 8015812:	f106 0608 	add.w	r6, r6, #8
 8015816:	d1f5      	bne.n	8015804 <ucdr_deserialize_array_double+0x28>
 8015818:	7da0      	ldrb	r0, [r4, #22]
 801581a:	f080 0001 	eor.w	r0, r0, #1
 801581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015822:	00ff      	lsls	r7, r7, #3
 8015824:	4639      	mov	r1, r7
 8015826:	4620      	mov	r0, r4
 8015828:	f7fa fcc2 	bl	80101b0 <ucdr_check_buffer_available_for>
 801582c:	b9f8      	cbnz	r0, 801586e <ucdr_deserialize_array_double+0x92>
 801582e:	46b8      	mov	r8, r7
 8015830:	e00a      	b.n	8015848 <ucdr_deserialize_array_double+0x6c>
 8015832:	68a1      	ldr	r1, [r4, #8]
 8015834:	f008 fd6d 	bl	801e312 <memcpy>
 8015838:	68a2      	ldr	r2, [r4, #8]
 801583a:	6923      	ldr	r3, [r4, #16]
 801583c:	442a      	add	r2, r5
 801583e:	442b      	add	r3, r5
 8015840:	eba8 0805 	sub.w	r8, r8, r5
 8015844:	60a2      	str	r2, [r4, #8]
 8015846:	6123      	str	r3, [r4, #16]
 8015848:	2208      	movs	r2, #8
 801584a:	4641      	mov	r1, r8
 801584c:	4620      	mov	r0, r4
 801584e:	f7fa fd37 	bl	80102c0 <ucdr_check_final_buffer_behavior_array>
 8015852:	4605      	mov	r5, r0
 8015854:	eba7 0008 	sub.w	r0, r7, r8
 8015858:	4430      	add	r0, r6
 801585a:	462a      	mov	r2, r5
 801585c:	2d00      	cmp	r5, #0
 801585e:	d1e8      	bne.n	8015832 <ucdr_deserialize_array_double+0x56>
 8015860:	7da0      	ldrb	r0, [r4, #22]
 8015862:	2308      	movs	r3, #8
 8015864:	7563      	strb	r3, [r4, #21]
 8015866:	f080 0001 	eor.w	r0, r0, #1
 801586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801586e:	463a      	mov	r2, r7
 8015870:	68a1      	ldr	r1, [r4, #8]
 8015872:	4630      	mov	r0, r6
 8015874:	f008 fd4d 	bl	801e312 <memcpy>
 8015878:	68a2      	ldr	r2, [r4, #8]
 801587a:	6923      	ldr	r3, [r4, #16]
 801587c:	443a      	add	r2, r7
 801587e:	441f      	add	r7, r3
 8015880:	60a2      	str	r2, [r4, #8]
 8015882:	6127      	str	r7, [r4, #16]
 8015884:	e7ec      	b.n	8015860 <ucdr_deserialize_array_double+0x84>
 8015886:	bf00      	nop

08015888 <ucdr_serialize_sequence_char>:
 8015888:	b570      	push	{r4, r5, r6, lr}
 801588a:	4615      	mov	r5, r2
 801588c:	460e      	mov	r6, r1
 801588e:	7d01      	ldrb	r1, [r0, #20]
 8015890:	4604      	mov	r4, r0
 8015892:	f7f9 fcad 	bl	800f1f0 <ucdr_serialize_endian_uint32_t>
 8015896:	b90d      	cbnz	r5, 801589c <ucdr_serialize_sequence_char+0x14>
 8015898:	2001      	movs	r0, #1
 801589a:	bd70      	pop	{r4, r5, r6, pc}
 801589c:	7d21      	ldrb	r1, [r4, #20]
 801589e:	462b      	mov	r3, r5
 80158a0:	4632      	mov	r2, r6
 80158a2:	4620      	mov	r0, r4
 80158a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158a8:	f7ff be18 	b.w	80154dc <ucdr_serialize_endian_array_char>

080158ac <ucdr_deserialize_sequence_char>:
 80158ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158b0:	461d      	mov	r5, r3
 80158b2:	4616      	mov	r6, r2
 80158b4:	460f      	mov	r7, r1
 80158b6:	461a      	mov	r2, r3
 80158b8:	7d01      	ldrb	r1, [r0, #20]
 80158ba:	4604      	mov	r4, r0
 80158bc:	f7f9 fdc0 	bl	800f440 <ucdr_deserialize_endian_uint32_t>
 80158c0:	682b      	ldr	r3, [r5, #0]
 80158c2:	429e      	cmp	r6, r3
 80158c4:	bf3c      	itt	cc
 80158c6:	2201      	movcc	r2, #1
 80158c8:	75a2      	strbcc	r2, [r4, #22]
 80158ca:	b913      	cbnz	r3, 80158d2 <ucdr_deserialize_sequence_char+0x26>
 80158cc:	2001      	movs	r0, #1
 80158ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158d2:	7d21      	ldrb	r1, [r4, #20]
 80158d4:	463a      	mov	r2, r7
 80158d6:	4620      	mov	r0, r4
 80158d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158dc:	f7ff be30 	b.w	8015540 <ucdr_deserialize_endian_array_char>

080158e0 <ucdr_serialize_sequence_uint8_t>:
 80158e0:	b570      	push	{r4, r5, r6, lr}
 80158e2:	4615      	mov	r5, r2
 80158e4:	460e      	mov	r6, r1
 80158e6:	7d01      	ldrb	r1, [r0, #20]
 80158e8:	4604      	mov	r4, r0
 80158ea:	f7f9 fc81 	bl	800f1f0 <ucdr_serialize_endian_uint32_t>
 80158ee:	b90d      	cbnz	r5, 80158f4 <ucdr_serialize_sequence_uint8_t+0x14>
 80158f0:	2001      	movs	r0, #1
 80158f2:	bd70      	pop	{r4, r5, r6, pc}
 80158f4:	7d21      	ldrb	r1, [r4, #20]
 80158f6:	462b      	mov	r3, r5
 80158f8:	4632      	mov	r2, r6
 80158fa:	4620      	mov	r0, r4
 80158fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015900:	f7ff be82 	b.w	8015608 <ucdr_serialize_endian_array_uint8_t>

08015904 <ucdr_deserialize_sequence_uint8_t>:
 8015904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015908:	461d      	mov	r5, r3
 801590a:	4616      	mov	r6, r2
 801590c:	460f      	mov	r7, r1
 801590e:	461a      	mov	r2, r3
 8015910:	7d01      	ldrb	r1, [r0, #20]
 8015912:	4604      	mov	r4, r0
 8015914:	f7f9 fd94 	bl	800f440 <ucdr_deserialize_endian_uint32_t>
 8015918:	682b      	ldr	r3, [r5, #0]
 801591a:	429e      	cmp	r6, r3
 801591c:	bf3c      	itt	cc
 801591e:	2201      	movcc	r2, #1
 8015920:	75a2      	strbcc	r2, [r4, #22]
 8015922:	b913      	cbnz	r3, 801592a <ucdr_deserialize_sequence_uint8_t+0x26>
 8015924:	2001      	movs	r0, #1
 8015926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801592a:	7d21      	ldrb	r1, [r4, #20]
 801592c:	463a      	mov	r2, r7
 801592e:	4620      	mov	r0, r4
 8015930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015934:	f7ff becc 	b.w	80156d0 <ucdr_deserialize_endian_array_uint8_t>

08015938 <uxr_buffer_delete_entity>:
 8015938:	b510      	push	{r4, lr}
 801593a:	2300      	movs	r3, #0
 801593c:	b08e      	sub	sp, #56	@ 0x38
 801593e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015942:	2303      	movs	r3, #3
 8015944:	9300      	str	r3, [sp, #0]
 8015946:	2204      	movs	r2, #4
 8015948:	ab06      	add	r3, sp, #24
 801594a:	4604      	mov	r4, r0
 801594c:	9103      	str	r1, [sp, #12]
 801594e:	f001 fb79 	bl	8017044 <uxr_prepare_stream_to_write_submessage>
 8015952:	b918      	cbnz	r0, 801595c <uxr_buffer_delete_entity+0x24>
 8015954:	4604      	mov	r4, r0
 8015956:	4620      	mov	r0, r4
 8015958:	b00e      	add	sp, #56	@ 0x38
 801595a:	bd10      	pop	{r4, pc}
 801595c:	9902      	ldr	r1, [sp, #8]
 801595e:	aa05      	add	r2, sp, #20
 8015960:	4620      	mov	r0, r4
 8015962:	f001 fca5 	bl	80172b0 <uxr_init_base_object_request>
 8015966:	a905      	add	r1, sp, #20
 8015968:	4604      	mov	r4, r0
 801596a:	a806      	add	r0, sp, #24
 801596c:	f003 fb04 	bl	8018f78 <uxr_serialize_DELETE_Payload>
 8015970:	4620      	mov	r0, r4
 8015972:	b00e      	add	sp, #56	@ 0x38
 8015974:	bd10      	pop	{r4, pc}
 8015976:	bf00      	nop

08015978 <uxr_common_create_entity>:
 8015978:	b510      	push	{r4, lr}
 801597a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801597e:	b08c      	sub	sp, #48	@ 0x30
 8015980:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015984:	f1bc 0f01 	cmp.w	ip, #1
 8015988:	bf0c      	ite	eq
 801598a:	f003 0201 	andeq.w	r2, r3, #1
 801598e:	2200      	movne	r2, #0
 8015990:	330e      	adds	r3, #14
 8015992:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8015996:	9101      	str	r1, [sp, #4]
 8015998:	441a      	add	r2, r3
 801599a:	2301      	movs	r3, #1
 801599c:	9300      	str	r3, [sp, #0]
 801599e:	9903      	ldr	r1, [sp, #12]
 80159a0:	ab04      	add	r3, sp, #16
 80159a2:	b292      	uxth	r2, r2
 80159a4:	4604      	mov	r4, r0
 80159a6:	f001 fb4d 	bl	8017044 <uxr_prepare_stream_to_write_submessage>
 80159aa:	b918      	cbnz	r0, 80159b4 <uxr_common_create_entity+0x3c>
 80159ac:	4604      	mov	r4, r0
 80159ae:	4620      	mov	r0, r4
 80159b0:	b00c      	add	sp, #48	@ 0x30
 80159b2:	bd10      	pop	{r4, pc}
 80159b4:	9902      	ldr	r1, [sp, #8]
 80159b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80159b8:	4620      	mov	r0, r4
 80159ba:	f001 fc79 	bl	80172b0 <uxr_init_base_object_request>
 80159be:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80159c0:	4604      	mov	r4, r0
 80159c2:	a804      	add	r0, sp, #16
 80159c4:	f003 fa34 	bl	8018e30 <uxr_serialize_CREATE_Payload>
 80159c8:	4620      	mov	r0, r4
 80159ca:	b00c      	add	sp, #48	@ 0x30
 80159cc:	bd10      	pop	{r4, pc}
 80159ce:	bf00      	nop

080159d0 <uxr_buffer_create_participant_bin>:
 80159d0:	b570      	push	{r4, r5, r6, lr}
 80159d2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80159d6:	ac11      	add	r4, sp, #68	@ 0x44
 80159d8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80159dc:	2303      	movs	r3, #3
 80159de:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80159e2:	7223      	strb	r3, [r4, #8]
 80159e4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80159e6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80159ea:	2201      	movs	r2, #1
 80159ec:	2100      	movs	r1, #0
 80159ee:	4605      	mov	r5, r0
 80159f0:	7122      	strb	r2, [r4, #4]
 80159f2:	f88d 1014 	strb.w	r1, [sp, #20]
 80159f6:	b1cb      	cbz	r3, 8015a2c <uxr_buffer_create_participant_bin+0x5c>
 80159f8:	f88d 201c 	strb.w	r2, [sp, #28]
 80159fc:	9308      	str	r3, [sp, #32]
 80159fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015a02:	a915      	add	r1, sp, #84	@ 0x54
 8015a04:	a809      	add	r0, sp, #36	@ 0x24
 8015a06:	f7fa fc27 	bl	8010258 <ucdr_init_buffer>
 8015a0a:	a905      	add	r1, sp, #20
 8015a0c:	a809      	add	r0, sp, #36	@ 0x24
 8015a0e:	f002 fe75 	bl	80186fc <uxr_serialize_OBJK_DomainParticipant_Binary>
 8015a12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a14:	9600      	str	r6, [sp, #0]
 8015a16:	9401      	str	r4, [sp, #4]
 8015a18:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015a1c:	60e3      	str	r3, [r4, #12]
 8015a1e:	4628      	mov	r0, r5
 8015a20:	b29b      	uxth	r3, r3
 8015a22:	f7ff ffa9 	bl	8015978 <uxr_common_create_entity>
 8015a26:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8015a2a:	bd70      	pop	{r4, r5, r6, pc}
 8015a2c:	f88d 301c 	strb.w	r3, [sp, #28]
 8015a30:	e7e5      	b.n	80159fe <uxr_buffer_create_participant_bin+0x2e>
 8015a32:	bf00      	nop

08015a34 <uxr_buffer_create_topic_bin>:
 8015a34:	b570      	push	{r4, r5, r6, lr}
 8015a36:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8015a3a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015a3e:	9105      	str	r1, [sp, #20]
 8015a40:	4605      	mov	r5, r0
 8015a42:	a997      	add	r1, sp, #604	@ 0x25c
 8015a44:	4618      	mov	r0, r3
 8015a46:	2302      	movs	r3, #2
 8015a48:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8015a4c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8015a50:	f000 fa24 	bl	8015e9c <uxr_object_id_to_raw>
 8015a54:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8015a56:	9306      	str	r3, [sp, #24]
 8015a58:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8015a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a5c:	2303      	movs	r3, #3
 8015a5e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8015a62:	2301      	movs	r3, #1
 8015a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015a68:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015a6c:	a917      	add	r1, sp, #92	@ 0x5c
 8015a6e:	2300      	movs	r3, #0
 8015a70:	a80b      	add	r0, sp, #44	@ 0x2c
 8015a72:	f88d 301c 	strb.w	r3, [sp, #28]
 8015a76:	f7fa fbef 	bl	8010258 <ucdr_init_buffer>
 8015a7a:	a906      	add	r1, sp, #24
 8015a7c:	a80b      	add	r0, sp, #44	@ 0x2c
 8015a7e:	f002 fe5f 	bl	8018740 <uxr_serialize_OBJK_Topic_Binary>
 8015a82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a84:	9316      	str	r3, [sp, #88]	@ 0x58
 8015a86:	ac13      	add	r4, sp, #76	@ 0x4c
 8015a88:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015a8c:	9600      	str	r6, [sp, #0]
 8015a8e:	9401      	str	r4, [sp, #4]
 8015a90:	b29b      	uxth	r3, r3
 8015a92:	4628      	mov	r0, r5
 8015a94:	f7ff ff70 	bl	8015978 <uxr_common_create_entity>
 8015a98:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8015a9c:	bd70      	pop	{r4, r5, r6, pc}
 8015a9e:	bf00      	nop

08015aa0 <uxr_buffer_create_publisher_bin>:
 8015aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015aa2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8015aa6:	4605      	mov	r5, r0
 8015aa8:	9105      	str	r1, [sp, #20]
 8015aaa:	4618      	mov	r0, r3
 8015aac:	2603      	movs	r6, #3
 8015aae:	a992      	add	r1, sp, #584	@ 0x248
 8015ab0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015ab4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8015ab8:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8015abc:	f000 f9ee 	bl	8015e9c <uxr_object_id_to_raw>
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015ac6:	a912      	add	r1, sp, #72	@ 0x48
 8015ac8:	a806      	add	r0, sp, #24
 8015aca:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8015ace:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8015ad2:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8015ad6:	f7fa fbbf 	bl	8010258 <ucdr_init_buffer>
 8015ada:	a993      	add	r1, sp, #588	@ 0x24c
 8015adc:	a806      	add	r0, sp, #24
 8015ade:	f002 fee3 	bl	80188a8 <uxr_serialize_OBJK_Publisher_Binary>
 8015ae2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015ae4:	9311      	str	r3, [sp, #68]	@ 0x44
 8015ae6:	ac0e      	add	r4, sp, #56	@ 0x38
 8015ae8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015aec:	9700      	str	r7, [sp, #0]
 8015aee:	9401      	str	r4, [sp, #4]
 8015af0:	b29b      	uxth	r3, r3
 8015af2:	4628      	mov	r0, r5
 8015af4:	f7ff ff40 	bl	8015978 <uxr_common_create_entity>
 8015af8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8015afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015afe:	bf00      	nop

08015b00 <uxr_buffer_create_datawriter_bin>:
 8015b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b04:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8015b08:	ac1d      	add	r4, sp, #116	@ 0x74
 8015b0a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015b0e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8015b12:	9105      	str	r1, [sp, #20]
 8015b14:	4606      	mov	r6, r0
 8015b16:	a9a1      	add	r1, sp, #644	@ 0x284
 8015b18:	4618      	mov	r0, r3
 8015b1a:	2305      	movs	r3, #5
 8015b1c:	7123      	strb	r3, [r4, #4]
 8015b1e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8015b22:	2703      	movs	r7, #3
 8015b24:	f000 f9ba 	bl	8015e9c <uxr_object_id_to_raw>
 8015b28:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8015b2a:	7227      	strb	r7, [r4, #8]
 8015b2c:	a90e      	add	r1, sp, #56	@ 0x38
 8015b2e:	f000 f9b5 	bl	8015e9c <uxr_object_id_to_raw>
 8015b32:	2300      	movs	r3, #0
 8015b34:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8015b38:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8015b3c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8015b40:	3d00      	subs	r5, #0
 8015b42:	bf18      	it	ne
 8015b44:	2501      	movne	r5, #1
 8015b46:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8015b4a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8015b4e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8015b52:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015b56:	2301      	movs	r3, #1
 8015b58:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8015b5c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8015b60:	bb8a      	cbnz	r2, 8015bc6 <uxr_buffer_create_datawriter_bin+0xc6>
 8015b62:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8015b66:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8015b6a:	f04f 0c13 	mov.w	ip, #19
 8015b6e:	250b      	movs	r5, #11
 8015b70:	2221      	movs	r2, #33	@ 0x21
 8015b72:	2111      	movs	r1, #17
 8015b74:	2009      	movs	r0, #9
 8015b76:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8015b7a:	b923      	cbnz	r3, 8015b86 <uxr_buffer_create_datawriter_bin+0x86>
 8015b7c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8015b80:	4672      	mov	r2, lr
 8015b82:	4661      	mov	r1, ip
 8015b84:	4628      	mov	r0, r5
 8015b86:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8015b8a:	2b01      	cmp	r3, #1
 8015b8c:	d025      	beq.n	8015bda <uxr_buffer_create_datawriter_bin+0xda>
 8015b8e:	2b03      	cmp	r3, #3
 8015b90:	d029      	beq.n	8015be6 <uxr_buffer_create_datawriter_bin+0xe6>
 8015b92:	b32b      	cbz	r3, 8015be0 <uxr_buffer_create_datawriter_bin+0xe0>
 8015b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015b98:	a921      	add	r1, sp, #132	@ 0x84
 8015b9a:	a806      	add	r0, sp, #24
 8015b9c:	f7fa fb5c 	bl	8010258 <ucdr_init_buffer>
 8015ba0:	a90e      	add	r1, sp, #56	@ 0x38
 8015ba2:	a806      	add	r0, sp, #24
 8015ba4:	f002 fef6 	bl	8018994 <uxr_serialize_OBJK_DataWriter_Binary>
 8015ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015baa:	f8cd 8000 	str.w	r8, [sp]
 8015bae:	9401      	str	r4, [sp, #4]
 8015bb0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015bb4:	60e3      	str	r3, [r4, #12]
 8015bb6:	4630      	mov	r0, r6
 8015bb8:	b29b      	uxth	r3, r3
 8015bba:	f7ff fedd 	bl	8015978 <uxr_common_create_entity>
 8015bbe:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8015bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bc6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8015bca:	f04f 0c12 	mov.w	ip, #18
 8015bce:	250a      	movs	r5, #10
 8015bd0:	2220      	movs	r2, #32
 8015bd2:	2110      	movs	r1, #16
 8015bd4:	2008      	movs	r0, #8
 8015bd6:	2702      	movs	r7, #2
 8015bd8:	e7cd      	b.n	8015b76 <uxr_buffer_create_datawriter_bin+0x76>
 8015bda:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8015bde:	e7d9      	b.n	8015b94 <uxr_buffer_create_datawriter_bin+0x94>
 8015be0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8015be4:	e7d6      	b.n	8015b94 <uxr_buffer_create_datawriter_bin+0x94>
 8015be6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8015bea:	e7d3      	b.n	8015b94 <uxr_buffer_create_datawriter_bin+0x94>

08015bec <uxr_buffer_create_requester_bin>:
 8015bec:	b570      	push	{r4, r5, r6, lr}
 8015bee:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8015bf2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015bf6:	9105      	str	r1, [sp, #20]
 8015bf8:	4605      	mov	r5, r0
 8015bfa:	a999      	add	r1, sp, #612	@ 0x264
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	2307      	movs	r3, #7
 8015c00:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8015c04:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8015c08:	f000 f948 	bl	8015e9c <uxr_object_id_to_raw>
 8015c0c:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8015c0e:	9306      	str	r3, [sp, #24]
 8015c10:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8015c12:	9307      	str	r3, [sp, #28]
 8015c14:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8015c16:	9308      	str	r3, [sp, #32]
 8015c18:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8015c1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8015c1c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015c20:	2301      	movs	r3, #1
 8015c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015c26:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8015c2a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015c2e:	a919      	add	r1, sp, #100	@ 0x64
 8015c30:	2303      	movs	r3, #3
 8015c32:	a80d      	add	r0, sp, #52	@ 0x34
 8015c34:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8015c38:	f7fa fb0e 	bl	8010258 <ucdr_init_buffer>
 8015c3c:	a906      	add	r1, sp, #24
 8015c3e:	a80d      	add	r0, sp, #52	@ 0x34
 8015c40:	f002 fed4 	bl	80189ec <uxr_serialize_OBJK_Requester_Binary>
 8015c44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c46:	9318      	str	r3, [sp, #96]	@ 0x60
 8015c48:	ac15      	add	r4, sp, #84	@ 0x54
 8015c4a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015c4e:	9600      	str	r6, [sp, #0]
 8015c50:	9401      	str	r4, [sp, #4]
 8015c52:	b29b      	uxth	r3, r3
 8015c54:	4628      	mov	r0, r5
 8015c56:	f7ff fe8f 	bl	8015978 <uxr_common_create_entity>
 8015c5a:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8015c5e:	bd70      	pop	{r4, r5, r6, pc}

08015c60 <uxr_buffer_create_replier_bin>:
 8015c60:	b570      	push	{r4, r5, r6, lr}
 8015c62:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8015c66:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015c6a:	9105      	str	r1, [sp, #20]
 8015c6c:	4605      	mov	r5, r0
 8015c6e:	a999      	add	r1, sp, #612	@ 0x264
 8015c70:	4618      	mov	r0, r3
 8015c72:	2308      	movs	r3, #8
 8015c74:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8015c78:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8015c7c:	f000 f90e 	bl	8015e9c <uxr_object_id_to_raw>
 8015c80:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8015c82:	9306      	str	r3, [sp, #24]
 8015c84:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8015c86:	9307      	str	r3, [sp, #28]
 8015c88:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8015c8a:	9308      	str	r3, [sp, #32]
 8015c8c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8015c8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8015c90:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015c92:	930a      	str	r3, [sp, #40]	@ 0x28
 8015c94:	2301      	movs	r3, #1
 8015c96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015c9a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8015c9e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015ca2:	a919      	add	r1, sp, #100	@ 0x64
 8015ca4:	2303      	movs	r3, #3
 8015ca6:	a80d      	add	r0, sp, #52	@ 0x34
 8015ca8:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8015cac:	f7fa fad4 	bl	8010258 <ucdr_init_buffer>
 8015cb0:	a906      	add	r1, sp, #24
 8015cb2:	a80d      	add	r0, sp, #52	@ 0x34
 8015cb4:	f002 fece 	bl	8018a54 <uxr_serialize_OBJK_Replier_Binary>
 8015cb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015cba:	9318      	str	r3, [sp, #96]	@ 0x60
 8015cbc:	ac15      	add	r4, sp, #84	@ 0x54
 8015cbe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015cc2:	9600      	str	r6, [sp, #0]
 8015cc4:	9401      	str	r4, [sp, #4]
 8015cc6:	b29b      	uxth	r3, r3
 8015cc8:	4628      	mov	r0, r5
 8015cca:	f7ff fe55 	bl	8015978 <uxr_common_create_entity>
 8015cce:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8015cd2:	bd70      	pop	{r4, r5, r6, pc}

08015cd4 <get_custom_error>:
 8015cd4:	4b01      	ldr	r3, [pc, #4]	@ (8015cdc <get_custom_error+0x8>)
 8015cd6:	7818      	ldrb	r0, [r3, #0]
 8015cd8:	4770      	bx	lr
 8015cda:	bf00      	nop
 8015cdc:	2000c424 	.word	0x2000c424

08015ce0 <recv_custom_msg>:
 8015ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce4:	4693      	mov	fp, r2
 8015ce6:	b089      	sub	sp, #36	@ 0x24
 8015ce8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8015cec:	9305      	str	r3, [sp, #20]
 8015cee:	468a      	mov	sl, r1
 8015cf0:	2100      	movs	r1, #0
 8015cf2:	4604      	mov	r4, r0
 8015cf4:	f88d 101e 	strb.w	r1, [sp, #30]
 8015cf8:	b322      	cbz	r2, 8015d44 <recv_custom_msg+0x64>
 8015cfa:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8015cfe:	f10d 081f 	add.w	r8, sp, #31
 8015d02:	af05      	add	r7, sp, #20
 8015d04:	f10d 061e 	add.w	r6, sp, #30
 8015d08:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8015d0c:	e002      	b.n	8015d14 <recv_custom_msg+0x34>
 8015d0e:	9b05      	ldr	r3, [sp, #20]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	dd0f      	ble.n	8015d34 <recv_custom_msg+0x54>
 8015d14:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8015d18:	4623      	mov	r3, r4
 8015d1a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8015d1e:	e9cd 5600 	strd	r5, r6, [sp]
 8015d22:	4622      	mov	r2, r4
 8015d24:	4648      	mov	r0, r9
 8015d26:	f001 fcf1 	bl	801770c <uxr_read_framed_msg>
 8015d2a:	2800      	cmp	r0, #0
 8015d2c:	d0ef      	beq.n	8015d0e <recv_custom_msg+0x2e>
 8015d2e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015d32:	b1b3      	cbz	r3, 8015d62 <recv_custom_msg+0x82>
 8015d34:	4b0f      	ldr	r3, [pc, #60]	@ (8015d74 <recv_custom_msg+0x94>)
 8015d36:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8015d3a:	701a      	strb	r2, [r3, #0]
 8015d3c:	2000      	movs	r0, #0
 8015d3e:	b009      	add	sp, #36	@ 0x24
 8015d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d44:	f10d 021f 	add.w	r2, sp, #31
 8015d48:	9200      	str	r2, [sp, #0]
 8015d4a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8015d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015d52:	4601      	mov	r1, r0
 8015d54:	47a8      	blx	r5
 8015d56:	2800      	cmp	r0, #0
 8015d58:	d0ec      	beq.n	8015d34 <recv_custom_msg+0x54>
 8015d5a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d1e8      	bne.n	8015d34 <recv_custom_msg+0x54>
 8015d62:	f8cb 0000 	str.w	r0, [fp]
 8015d66:	2001      	movs	r0, #1
 8015d68:	f8ca 4000 	str.w	r4, [sl]
 8015d6c:	b009      	add	sp, #36	@ 0x24
 8015d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d72:	bf00      	nop
 8015d74:	2000c424 	.word	0x2000c424

08015d78 <send_custom_msg>:
 8015d78:	b530      	push	{r4, r5, lr}
 8015d7a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8015d7e:	b087      	sub	sp, #28
 8015d80:	4615      	mov	r5, r2
 8015d82:	b974      	cbnz	r4, 8015da2 <send_custom_msg+0x2a>
 8015d84:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8015d88:	f10d 0317 	add.w	r3, sp, #23
 8015d8c:	47a0      	blx	r4
 8015d8e:	b108      	cbz	r0, 8015d94 <send_custom_msg+0x1c>
 8015d90:	42a8      	cmp	r0, r5
 8015d92:	d015      	beq.n	8015dc0 <send_custom_msg+0x48>
 8015d94:	4b0c      	ldr	r3, [pc, #48]	@ (8015dc8 <send_custom_msg+0x50>)
 8015d96:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8015d9a:	701a      	strb	r2, [r3, #0]
 8015d9c:	2000      	movs	r0, #0
 8015d9e:	b007      	add	sp, #28
 8015da0:	bd30      	pop	{r4, r5, pc}
 8015da2:	460b      	mov	r3, r1
 8015da4:	2200      	movs	r2, #0
 8015da6:	f10d 0117 	add.w	r1, sp, #23
 8015daa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015dae:	4602      	mov	r2, r0
 8015db0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8015db4:	9500      	str	r5, [sp, #0]
 8015db6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8015dba:	f001 faaf 	bl	801731c <uxr_write_framed_msg>
 8015dbe:	e7e6      	b.n	8015d8e <send_custom_msg+0x16>
 8015dc0:	2001      	movs	r0, #1
 8015dc2:	b007      	add	sp, #28
 8015dc4:	bd30      	pop	{r4, r5, pc}
 8015dc6:	bf00      	nop
 8015dc8:	2000c424 	.word	0x2000c424

08015dcc <uxr_set_custom_transport_callbacks>:
 8015dcc:	b410      	push	{r4}
 8015dce:	9c01      	ldr	r4, [sp, #4]
 8015dd0:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8015dd4:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8015dd8:	9b02      	ldr	r3, [sp, #8]
 8015dda:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8015dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015de2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8015de6:	4770      	bx	lr

08015de8 <uxr_init_custom_transport>:
 8015de8:	b538      	push	{r3, r4, r5, lr}
 8015dea:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8015dee:	b303      	cbz	r3, 8015e32 <uxr_init_custom_transport+0x4a>
 8015df0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8015df4:	4604      	mov	r4, r0
 8015df6:	b1e2      	cbz	r2, 8015e32 <uxr_init_custom_transport+0x4a>
 8015df8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8015dfc:	b1ca      	cbz	r2, 8015e32 <uxr_init_custom_transport+0x4a>
 8015dfe:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8015e02:	b1b2      	cbz	r2, 8015e32 <uxr_init_custom_transport+0x4a>
 8015e04:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8015e08:	4798      	blx	r3
 8015e0a:	4605      	mov	r5, r0
 8015e0c:	b188      	cbz	r0, 8015e32 <uxr_init_custom_transport+0x4a>
 8015e0e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8015e12:	b98b      	cbnz	r3, 8015e38 <uxr_init_custom_transport+0x50>
 8015e14:	490b      	ldr	r1, [pc, #44]	@ (8015e44 <uxr_init_custom_transport+0x5c>)
 8015e16:	4b0c      	ldr	r3, [pc, #48]	@ (8015e48 <uxr_init_custom_transport+0x60>)
 8015e18:	4a0c      	ldr	r2, [pc, #48]	@ (8015e4c <uxr_init_custom_transport+0x64>)
 8015e1a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8015e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015e22:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8015e26:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8015e2a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8015e2e:	4628      	mov	r0, r5
 8015e30:	bd38      	pop	{r3, r4, r5, pc}
 8015e32:	2500      	movs	r5, #0
 8015e34:	4628      	mov	r0, r5
 8015e36:	bd38      	pop	{r3, r4, r5, pc}
 8015e38:	2100      	movs	r1, #0
 8015e3a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8015e3e:	f001 fa67 	bl	8017310 <uxr_init_framing_io>
 8015e42:	e7e7      	b.n	8015e14 <uxr_init_custom_transport+0x2c>
 8015e44:	08015d79 	.word	0x08015d79
 8015e48:	08015ce1 	.word	0x08015ce1
 8015e4c:	08015cd5 	.word	0x08015cd5

08015e50 <uxr_close_custom_transport>:
 8015e50:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8015e54:	4718      	bx	r3
 8015e56:	bf00      	nop

08015e58 <uxr_object_id>:
 8015e58:	b082      	sub	sp, #8
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	f88d 1006 	strb.w	r1, [sp, #6]
 8015e60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015e64:	f360 030f 	bfi	r3, r0, #0, #16
 8015e68:	f362 431f 	bfi	r3, r2, #16, #16
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	b002      	add	sp, #8
 8015e70:	4770      	bx	lr
 8015e72:	bf00      	nop

08015e74 <uxr_object_id_from_raw>:
 8015e74:	7843      	ldrb	r3, [r0, #1]
 8015e76:	7801      	ldrb	r1, [r0, #0]
 8015e78:	b082      	sub	sp, #8
 8015e7a:	f003 020f 	and.w	r2, r3, #15
 8015e7e:	f88d 2006 	strb.w	r2, [sp, #6]
 8015e82:	091b      	lsrs	r3, r3, #4
 8015e84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015e88:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8015e8c:	2000      	movs	r0, #0
 8015e8e:	f363 000f 	bfi	r0, r3, #0, #16
 8015e92:	f362 401f 	bfi	r0, r2, #16, #16
 8015e96:	b002      	add	sp, #8
 8015e98:	4770      	bx	lr
 8015e9a:	bf00      	nop

08015e9c <uxr_object_id_to_raw>:
 8015e9c:	4602      	mov	r2, r0
 8015e9e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8015ea2:	b082      	sub	sp, #8
 8015ea4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8015ea8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8015eac:	f881 c000 	strb.w	ip, [r1]
 8015eb0:	7048      	strb	r0, [r1, #1]
 8015eb2:	b002      	add	sp, #8
 8015eb4:	4770      	bx	lr
 8015eb6:	bf00      	nop

08015eb8 <uxr_buffer_request_data>:
 8015eb8:	b530      	push	{r4, r5, lr}
 8015eba:	b095      	sub	sp, #84	@ 0x54
 8015ebc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015ec0:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015ec2:	9303      	str	r3, [sp, #12]
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	2d00      	cmp	r5, #0
 8015ec8:	bf14      	ite	ne
 8015eca:	2101      	movne	r1, #1
 8015ecc:	4611      	moveq	r1, r2
 8015ece:	4604      	mov	r4, r0
 8015ed0:	f88d 301c 	strb.w	r3, [sp, #28]
 8015ed4:	f88d 201d 	strb.w	r2, [sp, #29]
 8015ed8:	f88d 201e 	strb.w	r2, [sp, #30]
 8015edc:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8015ee0:	d021      	beq.n	8015f26 <uxr_buffer_request_data+0x6e>
 8015ee2:	682a      	ldr	r2, [r5, #0]
 8015ee4:	686b      	ldr	r3, [r5, #4]
 8015ee6:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8015eea:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015eee:	2210      	movs	r2, #16
 8015ef0:	2308      	movs	r3, #8
 8015ef2:	2100      	movs	r1, #0
 8015ef4:	e9cd 3100 	strd	r3, r1, [sp]
 8015ef8:	4620      	mov	r0, r4
 8015efa:	9905      	ldr	r1, [sp, #20]
 8015efc:	ab0c      	add	r3, sp, #48	@ 0x30
 8015efe:	f001 f8a1 	bl	8017044 <uxr_prepare_stream_to_write_submessage>
 8015f02:	b918      	cbnz	r0, 8015f0c <uxr_buffer_request_data+0x54>
 8015f04:	4604      	mov	r4, r0
 8015f06:	4620      	mov	r0, r4
 8015f08:	b015      	add	sp, #84	@ 0x54
 8015f0a:	bd30      	pop	{r4, r5, pc}
 8015f0c:	9904      	ldr	r1, [sp, #16]
 8015f0e:	aa06      	add	r2, sp, #24
 8015f10:	4620      	mov	r0, r4
 8015f12:	f001 f9cd 	bl	80172b0 <uxr_init_base_object_request>
 8015f16:	a906      	add	r1, sp, #24
 8015f18:	4604      	mov	r4, r0
 8015f1a:	a80c      	add	r0, sp, #48	@ 0x30
 8015f1c:	f003 f8d6 	bl	80190cc <uxr_serialize_READ_DATA_Payload>
 8015f20:	4620      	mov	r0, r4
 8015f22:	b015      	add	sp, #84	@ 0x54
 8015f24:	bd30      	pop	{r4, r5, pc}
 8015f26:	2208      	movs	r2, #8
 8015f28:	e7e2      	b.n	8015ef0 <uxr_buffer_request_data+0x38>
 8015f2a:	bf00      	nop

08015f2c <uxr_buffer_cancel_data>:
 8015f2c:	b510      	push	{r4, lr}
 8015f2e:	b094      	sub	sp, #80	@ 0x50
 8015f30:	2300      	movs	r3, #0
 8015f32:	9202      	str	r2, [sp, #8]
 8015f34:	9205      	str	r2, [sp, #20]
 8015f36:	9301      	str	r3, [sp, #4]
 8015f38:	2201      	movs	r2, #1
 8015f3a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015f3e:	f88d 301e 	strb.w	r3, [sp, #30]
 8015f42:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8015f46:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015f4a:	2308      	movs	r3, #8
 8015f4c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8015f50:	9300      	str	r3, [sp, #0]
 8015f52:	2210      	movs	r2, #16
 8015f54:	ab0c      	add	r3, sp, #48	@ 0x30
 8015f56:	4604      	mov	r4, r0
 8015f58:	9103      	str	r1, [sp, #12]
 8015f5a:	f001 f873 	bl	8017044 <uxr_prepare_stream_to_write_submessage>
 8015f5e:	b918      	cbnz	r0, 8015f68 <uxr_buffer_cancel_data+0x3c>
 8015f60:	4604      	mov	r4, r0
 8015f62:	4620      	mov	r0, r4
 8015f64:	b014      	add	sp, #80	@ 0x50
 8015f66:	bd10      	pop	{r4, pc}
 8015f68:	9905      	ldr	r1, [sp, #20]
 8015f6a:	aa06      	add	r2, sp, #24
 8015f6c:	4620      	mov	r0, r4
 8015f6e:	f001 f99f 	bl	80172b0 <uxr_init_base_object_request>
 8015f72:	a906      	add	r1, sp, #24
 8015f74:	4604      	mov	r4, r0
 8015f76:	a80c      	add	r0, sp, #48	@ 0x30
 8015f78:	f003 f8a8 	bl	80190cc <uxr_serialize_READ_DATA_Payload>
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	b014      	add	sp, #80	@ 0x50
 8015f80:	bd10      	pop	{r4, pc}
 8015f82:	bf00      	nop

08015f84 <read_submessage_format>:
 8015f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f88:	b095      	sub	sp, #84	@ 0x54
 8015f8a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8015f8e:	b113      	cbz	r3, 8015f96 <read_submessage_format+0x12>
 8015f90:	b015      	add	sp, #84	@ 0x54
 8015f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f96:	460c      	mov	r4, r1
 8015f98:	4615      	mov	r5, r2
 8015f9a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8015f9e:	4607      	mov	r7, r0
 8015fa0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8015fa2:	9004      	str	r0, [sp, #16]
 8015fa4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8015fa6:	9005      	str	r0, [sp, #20]
 8015fa8:	1a52      	subs	r2, r2, r1
 8015faa:	a80c      	add	r0, sp, #48	@ 0x30
 8015fac:	4699      	mov	r9, r3
 8015fae:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8015fb2:	f7fa f951 	bl	8010258 <ucdr_init_buffer>
 8015fb6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015fba:	a80c      	add	r0, sp, #48	@ 0x30
 8015fbc:	f7fa f920 	bl	8010200 <ucdr_set_on_full_buffer_callback>
 8015fc0:	69e2      	ldr	r2, [r4, #28]
 8015fc2:	b19a      	cbz	r2, 8015fec <read_submessage_format+0x68>
 8015fc4:	f1b8 0f07 	cmp.w	r8, #7
 8015fc8:	f882 9014 	strb.w	r9, [r2, #20]
 8015fcc:	d040      	beq.n	8016050 <read_submessage_format+0xcc>
 8015fce:	f1b8 0f08 	cmp.w	r8, #8
 8015fd2:	d02e      	beq.n	8016032 <read_submessage_format+0xae>
 8015fd4:	f1b8 0f06 	cmp.w	r8, #6
 8015fd8:	d011      	beq.n	8015ffe <read_submessage_format+0x7a>
 8015fda:	2301      	movs	r3, #1
 8015fdc:	7513      	strb	r3, [r2, #20]
 8015fde:	4629      	mov	r1, r5
 8015fe0:	4620      	mov	r0, r4
 8015fe2:	f7fa f989 	bl	80102f8 <ucdr_advance_buffer>
 8015fe6:	b015      	add	sp, #84	@ 0x54
 8015fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fec:	f1b8 0f07 	cmp.w	r8, #7
 8015ff0:	d02e      	beq.n	8016050 <read_submessage_format+0xcc>
 8015ff2:	f1b8 0f08 	cmp.w	r8, #8
 8015ff6:	d01c      	beq.n	8016032 <read_submessage_format+0xae>
 8015ff8:	f1b8 0f06 	cmp.w	r8, #6
 8015ffc:	d1ef      	bne.n	8015fde <read_submessage_format+0x5a>
 8015ffe:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8016002:	f1b8 0f00 	cmp.w	r8, #0
 8016006:	d011      	beq.n	801602c <read_submessage_format+0xa8>
 8016008:	ab0c      	add	r3, sp, #48	@ 0x30
 801600a:	e9cd 3500 	strd	r3, r5, [sp]
 801600e:	2306      	movs	r3, #6
 8016010:	f88d 3016 	strb.w	r3, [sp, #22]
 8016014:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016018:	9302      	str	r3, [sp, #8]
 801601a:	4632      	mov	r2, r6
 801601c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016020:	4638      	mov	r0, r7
 8016022:	47c0      	blx	r8
 8016024:	2301      	movs	r3, #1
 8016026:	69e2      	ldr	r2, [r4, #28]
 8016028:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801602c:	2a00      	cmp	r2, #0
 801602e:	d1d4      	bne.n	8015fda <read_submessage_format+0x56>
 8016030:	e7d5      	b.n	8015fde <read_submessage_format+0x5a>
 8016032:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016036:	2b00      	cmp	r3, #0
 8016038:	d0f8      	beq.n	801602c <read_submessage_format+0xa8>
 801603a:	a906      	add	r1, sp, #24
 801603c:	a80c      	add	r0, sp, #48	@ 0x30
 801603e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8016042:	f003 f917 	bl	8019274 <uxr_deserialize_SampleIdentity>
 8016046:	b9a0      	cbnz	r0, 8016072 <read_submessage_format+0xee>
 8016048:	69e2      	ldr	r2, [r4, #28]
 801604a:	2a00      	cmp	r2, #0
 801604c:	d1c5      	bne.n	8015fda <read_submessage_format+0x56>
 801604e:	e7c6      	b.n	8015fde <read_submessage_format+0x5a>
 8016050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016054:	b13b      	cbz	r3, 8016066 <read_submessage_format+0xe2>
 8016056:	a906      	add	r1, sp, #24
 8016058:	a80c      	add	r0, sp, #48	@ 0x30
 801605a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801605e:	f002 fdcf 	bl	8018c00 <uxr_deserialize_BaseObjectRequest>
 8016062:	bb60      	cbnz	r0, 80160be <read_submessage_format+0x13a>
 8016064:	69e2      	ldr	r2, [r4, #28]
 8016066:	68a3      	ldr	r3, [r4, #8]
 8016068:	442b      	add	r3, r5
 801606a:	60a3      	str	r3, [r4, #8]
 801606c:	2a00      	cmp	r2, #0
 801606e:	d1b4      	bne.n	8015fda <read_submessage_format+0x56>
 8016070:	e7b5      	b.n	8015fde <read_submessage_format+0x5a>
 8016072:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016076:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016078:	1a52      	subs	r2, r2, r1
 801607a:	eba8 0803 	sub.w	r8, r8, r3
 801607e:	a80c      	add	r0, sp, #48	@ 0x30
 8016080:	f7fa f8ea 	bl	8010258 <ucdr_init_buffer>
 8016084:	44a8      	add	r8, r5
 8016086:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801608a:	a80c      	add	r0, sp, #48	@ 0x30
 801608c:	f7fa f8b8 	bl	8010200 <ucdr_set_on_full_buffer_callback>
 8016090:	fa1f f888 	uxth.w	r8, r8
 8016094:	ab0c      	add	r3, sp, #48	@ 0x30
 8016096:	9300      	str	r3, [sp, #0]
 8016098:	f8cd 8004 	str.w	r8, [sp, #4]
 801609c:	2108      	movs	r1, #8
 801609e:	f88d 1016 	strb.w	r1, [sp, #22]
 80160a2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80160a6:	9102      	str	r1, [sp, #8]
 80160a8:	ab06      	add	r3, sp, #24
 80160aa:	4632      	mov	r2, r6
 80160ac:	9905      	ldr	r1, [sp, #20]
 80160ae:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 80160b2:	4638      	mov	r0, r7
 80160b4:	47b0      	blx	r6
 80160b6:	2301      	movs	r3, #1
 80160b8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80160bc:	e7c4      	b.n	8016048 <read_submessage_format+0xc4>
 80160be:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80160c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80160c4:	1a52      	subs	r2, r2, r1
 80160c6:	a80c      	add	r0, sp, #48	@ 0x30
 80160c8:	eba8 0803 	sub.w	r8, r8, r3
 80160cc:	f7fa f8c4 	bl	8010258 <ucdr_init_buffer>
 80160d0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80160d4:	a80c      	add	r0, sp, #48	@ 0x30
 80160d6:	f7fa f893 	bl	8010200 <ucdr_set_on_full_buffer_callback>
 80160da:	ab0c      	add	r3, sp, #48	@ 0x30
 80160dc:	9300      	str	r3, [sp, #0]
 80160de:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80160e2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80160e6:	44a8      	add	r8, r5
 80160e8:	fa1f f888 	uxth.w	r8, r8
 80160ec:	f8cd 8004 	str.w	r8, [sp, #4]
 80160f0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80160f4:	2107      	movs	r1, #7
 80160f6:	f88d 1016 	strb.w	r1, [sp, #22]
 80160fa:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80160fe:	9102      	str	r1, [sp, #8]
 8016100:	4632      	mov	r2, r6
 8016102:	b29b      	uxth	r3, r3
 8016104:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8016108:	9905      	ldr	r1, [sp, #20]
 801610a:	4638      	mov	r0, r7
 801610c:	47b0      	blx	r6
 801610e:	2301      	movs	r3, #1
 8016110:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8016114:	e7a6      	b.n	8016064 <read_submessage_format+0xe0>
 8016116:	bf00      	nop

08016118 <on_get_fragmentation_info>:
 8016118:	b500      	push	{lr}
 801611a:	b08b      	sub	sp, #44	@ 0x2c
 801611c:	4601      	mov	r1, r0
 801611e:	2204      	movs	r2, #4
 8016120:	a802      	add	r0, sp, #8
 8016122:	f7fa f899 	bl	8010258 <ucdr_init_buffer>
 8016126:	f10d 0305 	add.w	r3, sp, #5
 801612a:	f10d 0206 	add.w	r2, sp, #6
 801612e:	a901      	add	r1, sp, #4
 8016130:	a802      	add	r0, sp, #8
 8016132:	f001 fed1 	bl	8017ed8 <uxr_read_submessage_header>
 8016136:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801613a:	2b0d      	cmp	r3, #13
 801613c:	d003      	beq.n	8016146 <on_get_fragmentation_info+0x2e>
 801613e:	2000      	movs	r0, #0
 8016140:	b00b      	add	sp, #44	@ 0x2c
 8016142:	f85d fb04 	ldr.w	pc, [sp], #4
 8016146:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801614a:	f013 0f02 	tst.w	r3, #2
 801614e:	bf14      	ite	ne
 8016150:	2002      	movne	r0, #2
 8016152:	2001      	moveq	r0, #1
 8016154:	b00b      	add	sp, #44	@ 0x2c
 8016156:	f85d fb04 	ldr.w	pc, [sp], #4
 801615a:	bf00      	nop

0801615c <read_submessage_get_info>:
 801615c:	b570      	push	{r4, r5, r6, lr}
 801615e:	2500      	movs	r5, #0
 8016160:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8016164:	4604      	mov	r4, r0
 8016166:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801616a:	460e      	mov	r6, r1
 801616c:	a810      	add	r0, sp, #64	@ 0x40
 801616e:	4629      	mov	r1, r5
 8016170:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8016174:	f008 f804 	bl	801e180 <memset>
 8016178:	a903      	add	r1, sp, #12
 801617a:	4630      	mov	r0, r6
 801617c:	f002 fee8 	bl	8018f50 <uxr_deserialize_GET_INFO_Payload>
 8016180:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016184:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8016188:	4620      	mov	r0, r4
 801618a:	f001 f889 	bl	80172a0 <uxr_session_header_offset>
 801618e:	462b      	mov	r3, r5
 8016190:	9000      	str	r0, [sp, #0]
 8016192:	220c      	movs	r2, #12
 8016194:	a905      	add	r1, sp, #20
 8016196:	a808      	add	r0, sp, #32
 8016198:	f7fa f84c 	bl	8010234 <ucdr_init_buffer_origin_offset>
 801619c:	a910      	add	r1, sp, #64	@ 0x40
 801619e:	a808      	add	r0, sp, #32
 80161a0:	f002 ff48 	bl	8019034 <uxr_serialize_INFO_Payload>
 80161a4:	9b08      	ldr	r3, [sp, #32]
 80161a6:	462a      	mov	r2, r5
 80161a8:	4629      	mov	r1, r5
 80161aa:	4620      	mov	r0, r4
 80161ac:	f001 f822 	bl	80171f4 <uxr_stamp_session_header>
 80161b0:	a808      	add	r0, sp, #32
 80161b2:	f7fa f87d 	bl	80102b0 <ucdr_buffer_length>
 80161b6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80161b8:	4602      	mov	r2, r0
 80161ba:	a905      	add	r1, sp, #20
 80161bc:	e9d3 0400 	ldrd	r0, r4, [r3]
 80161c0:	47a0      	blx	r4
 80161c2:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80161c6:	bd70      	pop	{r4, r5, r6, pc}

080161c8 <write_submessage_acknack.isra.0>:
 80161c8:	b570      	push	{r4, r5, r6, lr}
 80161ca:	b092      	sub	sp, #72	@ 0x48
 80161cc:	4605      	mov	r5, r0
 80161ce:	460e      	mov	r6, r1
 80161d0:	4614      	mov	r4, r2
 80161d2:	f001 f865 	bl	80172a0 <uxr_session_header_offset>
 80161d6:	a905      	add	r1, sp, #20
 80161d8:	9000      	str	r0, [sp, #0]
 80161da:	2300      	movs	r3, #0
 80161dc:	a80a      	add	r0, sp, #40	@ 0x28
 80161de:	2211      	movs	r2, #17
 80161e0:	f7fa f828 	bl	8010234 <ucdr_init_buffer_origin_offset>
 80161e4:	2218      	movs	r2, #24
 80161e6:	fb02 5404 	mla	r4, r2, r4, r5
 80161ea:	2300      	movs	r3, #0
 80161ec:	2205      	movs	r2, #5
 80161ee:	3450      	adds	r4, #80	@ 0x50
 80161f0:	210a      	movs	r1, #10
 80161f2:	a80a      	add	r0, sp, #40	@ 0x28
 80161f4:	f001 fe56 	bl	8017ea4 <uxr_buffer_submessage_header>
 80161f8:	a903      	add	r1, sp, #12
 80161fa:	4620      	mov	r0, r4
 80161fc:	f006 fedc 	bl	801cfb8 <uxr_compute_acknack>
 8016200:	ba40      	rev16	r0, r0
 8016202:	f8ad 000e 	strh.w	r0, [sp, #14]
 8016206:	a903      	add	r1, sp, #12
 8016208:	a80a      	add	r0, sp, #40	@ 0x28
 801620a:	f88d 6010 	strb.w	r6, [sp, #16]
 801620e:	f002 ff81 	bl	8019114 <uxr_serialize_ACKNACK_Payload>
 8016212:	2200      	movs	r2, #0
 8016214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016216:	4611      	mov	r1, r2
 8016218:	4628      	mov	r0, r5
 801621a:	f000 ffeb 	bl	80171f4 <uxr_stamp_session_header>
 801621e:	a80a      	add	r0, sp, #40	@ 0x28
 8016220:	f7fa f846 	bl	80102b0 <ucdr_buffer_length>
 8016224:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8016226:	4602      	mov	r2, r0
 8016228:	a905      	add	r1, sp, #20
 801622a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801622e:	47a0      	blx	r4
 8016230:	b012      	add	sp, #72	@ 0x48
 8016232:	bd70      	pop	{r4, r5, r6, pc}
 8016234:	0000      	movs	r0, r0
	...

08016238 <uxr_init_session>:
 8016238:	b510      	push	{r4, lr}
 801623a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8016270 <uxr_init_session+0x38>
 801623e:	2300      	movs	r3, #0
 8016240:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8016244:	4604      	mov	r4, r0
 8016246:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801624a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801624e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8016252:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8016256:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801625a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801625e:	2181      	movs	r1, #129	@ 0x81
 8016260:	f000 ff34 	bl	80170cc <uxr_init_session_info>
 8016264:	f104 0008 	add.w	r0, r4, #8
 8016268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801626c:	f001 bd36 	b.w	8017cdc <uxr_init_stream_storage>
	...

08016278 <uxr_set_status_callback>:
 8016278:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801627c:	4770      	bx	lr
 801627e:	bf00      	nop

08016280 <uxr_set_topic_callback>:
 8016280:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8016284:	4770      	bx	lr
 8016286:	bf00      	nop

08016288 <uxr_set_request_callback>:
 8016288:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801628c:	4770      	bx	lr
 801628e:	bf00      	nop

08016290 <uxr_set_reply_callback>:
 8016290:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8016294:	4770      	bx	lr
 8016296:	bf00      	nop

08016298 <uxr_create_output_best_effort_stream>:
 8016298:	b510      	push	{r4, lr}
 801629a:	b084      	sub	sp, #16
 801629c:	e9cd 2100 	strd	r2, r1, [sp]
 80162a0:	4604      	mov	r4, r0
 80162a2:	f000 fffd 	bl	80172a0 <uxr_session_header_offset>
 80162a6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80162aa:	4603      	mov	r3, r0
 80162ac:	f104 0008 	add.w	r0, r4, #8
 80162b0:	b004      	add	sp, #16
 80162b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162b6:	f001 bd5b 	b.w	8017d70 <uxr_add_output_best_effort_buffer>
 80162ba:	bf00      	nop

080162bc <uxr_create_output_reliable_stream>:
 80162bc:	b510      	push	{r4, lr}
 80162be:	b088      	sub	sp, #32
 80162c0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80162c4:	4604      	mov	r4, r0
 80162c6:	9303      	str	r3, [sp, #12]
 80162c8:	f000 ffea 	bl	80172a0 <uxr_session_header_offset>
 80162cc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80162d0:	9000      	str	r0, [sp, #0]
 80162d2:	9905      	ldr	r1, [sp, #20]
 80162d4:	f104 0008 	add.w	r0, r4, #8
 80162d8:	f001 fd5e 	bl	8017d98 <uxr_add_output_reliable_buffer>
 80162dc:	2200      	movs	r2, #0
 80162de:	b2c3      	uxtb	r3, r0
 80162e0:	f363 0207 	bfi	r2, r3, #0, #8
 80162e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80162e8:	f363 220f 	bfi	r2, r3, #8, #8
 80162ec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80162f0:	f363 4217 	bfi	r2, r3, #16, #8
 80162f4:	0e03      	lsrs	r3, r0, #24
 80162f6:	f363 621f 	bfi	r2, r3, #24, #8
 80162fa:	4610      	mov	r0, r2
 80162fc:	b008      	add	sp, #32
 80162fe:	bd10      	pop	{r4, pc}

08016300 <uxr_create_input_best_effort_stream>:
 8016300:	b082      	sub	sp, #8
 8016302:	3008      	adds	r0, #8
 8016304:	b002      	add	sp, #8
 8016306:	f001 bd61 	b.w	8017dcc <uxr_add_input_best_effort_buffer>
 801630a:	bf00      	nop

0801630c <uxr_create_input_reliable_stream>:
 801630c:	b510      	push	{r4, lr}
 801630e:	b084      	sub	sp, #16
 8016310:	4c0b      	ldr	r4, [pc, #44]	@ (8016340 <uxr_create_input_reliable_stream+0x34>)
 8016312:	9400      	str	r4, [sp, #0]
 8016314:	3008      	adds	r0, #8
 8016316:	f001 fd6f 	bl	8017df8 <uxr_add_input_reliable_buffer>
 801631a:	2200      	movs	r2, #0
 801631c:	b2c3      	uxtb	r3, r0
 801631e:	f363 0207 	bfi	r2, r3, #0, #8
 8016322:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8016326:	f363 220f 	bfi	r2, r3, #8, #8
 801632a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801632e:	f363 4217 	bfi	r2, r3, #16, #8
 8016332:	0e03      	lsrs	r3, r0, #24
 8016334:	f363 621f 	bfi	r2, r3, #24, #8
 8016338:	4610      	mov	r0, r2
 801633a:	b004      	add	sp, #16
 801633c:	bd10      	pop	{r4, pc}
 801633e:	bf00      	nop
 8016340:	08016119 	.word	0x08016119

08016344 <uxr_epoch_millis>:
 8016344:	b510      	push	{r4, lr}
 8016346:	4604      	mov	r4, r0
 8016348:	f001 fe0c 	bl	8017f64 <uxr_nanos>
 801634c:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 8016350:	1ac0      	subs	r0, r0, r3
 8016352:	4a04      	ldr	r2, [pc, #16]	@ (8016364 <uxr_epoch_millis+0x20>)
 8016354:	f04f 0300 	mov.w	r3, #0
 8016358:	eb61 0104 	sbc.w	r1, r1, r4
 801635c:	f7ea fc84 	bl	8000c68 <__aeabi_ldivmod>
 8016360:	bd10      	pop	{r4, pc}
 8016362:	bf00      	nop
 8016364:	000f4240 	.word	0x000f4240

08016368 <uxr_epoch_nanos>:
 8016368:	b510      	push	{r4, lr}
 801636a:	4604      	mov	r4, r0
 801636c:	f001 fdfa 	bl	8017f64 <uxr_nanos>
 8016370:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8016374:	1ac0      	subs	r0, r0, r3
 8016376:	eb61 0102 	sbc.w	r1, r1, r2
 801637a:	bd10      	pop	{r4, pc}

0801637c <uxr_flash_output_streams>:
 801637c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016380:	7e03      	ldrb	r3, [r0, #24]
 8016382:	b084      	sub	sp, #16
 8016384:	4604      	mov	r4, r0
 8016386:	2b00      	cmp	r3, #0
 8016388:	d035      	beq.n	80163f6 <uxr_flash_output_streams+0x7a>
 801638a:	f04f 0900 	mov.w	r9, #0
 801638e:	4648      	mov	r0, r9
 8016390:	f10d 0802 	add.w	r8, sp, #2
 8016394:	af03      	add	r7, sp, #12
 8016396:	ae02      	add	r6, sp, #8
 8016398:	e006      	b.n	80163a8 <uxr_flash_output_streams+0x2c>
 801639a:	7e23      	ldrb	r3, [r4, #24]
 801639c:	f109 0901 	add.w	r9, r9, #1
 80163a0:	fa5f f089 	uxtb.w	r0, r9
 80163a4:	4283      	cmp	r3, r0
 80163a6:	d926      	bls.n	80163f6 <uxr_flash_output_streams+0x7a>
 80163a8:	2201      	movs	r2, #1
 80163aa:	4611      	mov	r1, r2
 80163ac:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80163b0:	f001 fc40 	bl	8017c34 <uxr_stream_id>
 80163b4:	3508      	adds	r5, #8
 80163b6:	4684      	mov	ip, r0
 80163b8:	4643      	mov	r3, r8
 80163ba:	463a      	mov	r2, r7
 80163bc:	4631      	mov	r1, r6
 80163be:	4628      	mov	r0, r5
 80163c0:	f8cd c004 	str.w	ip, [sp, #4]
 80163c4:	f006 fe7e 	bl	801d0c4 <uxr_prepare_best_effort_buffer_to_send>
 80163c8:	2800      	cmp	r0, #0
 80163ca:	d0e6      	beq.n	801639a <uxr_flash_output_streams+0x1e>
 80163cc:	9b02      	ldr	r3, [sp, #8]
 80163ce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80163d2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80163d6:	4620      	mov	r0, r4
 80163d8:	f000 ff0c 	bl	80171f4 <uxr_stamp_session_header>
 80163dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80163de:	9a03      	ldr	r2, [sp, #12]
 80163e0:	685d      	ldr	r5, [r3, #4]
 80163e2:	6818      	ldr	r0, [r3, #0]
 80163e4:	9902      	ldr	r1, [sp, #8]
 80163e6:	47a8      	blx	r5
 80163e8:	f109 0901 	add.w	r9, r9, #1
 80163ec:	7e23      	ldrb	r3, [r4, #24]
 80163ee:	fa5f f089 	uxtb.w	r0, r9
 80163f2:	4283      	cmp	r3, r0
 80163f4:	d8d8      	bhi.n	80163a8 <uxr_flash_output_streams+0x2c>
 80163f6:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80163fa:	b38b      	cbz	r3, 8016460 <uxr_flash_output_streams+0xe4>
 80163fc:	f04f 0900 	mov.w	r9, #0
 8016400:	f10d 0802 	add.w	r8, sp, #2
 8016404:	af03      	add	r7, sp, #12
 8016406:	ae02      	add	r6, sp, #8
 8016408:	4648      	mov	r0, r9
 801640a:	2201      	movs	r2, #1
 801640c:	2102      	movs	r1, #2
 801640e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8016412:	f001 fc0f 	bl	8017c34 <uxr_stream_id>
 8016416:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801641a:	3520      	adds	r5, #32
 801641c:	9001      	str	r0, [sp, #4]
 801641e:	e00d      	b.n	801643c <uxr_flash_output_streams+0xc0>
 8016420:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016424:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8016428:	9b02      	ldr	r3, [sp, #8]
 801642a:	f000 fee3 	bl	80171f4 <uxr_stamp_session_header>
 801642e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016430:	9a03      	ldr	r2, [sp, #12]
 8016432:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8016436:	9902      	ldr	r1, [sp, #8]
 8016438:	6818      	ldr	r0, [r3, #0]
 801643a:	47d0      	blx	sl
 801643c:	4643      	mov	r3, r8
 801643e:	463a      	mov	r2, r7
 8016440:	4631      	mov	r1, r6
 8016442:	4628      	mov	r0, r5
 8016444:	f007 f85c 	bl	801d500 <uxr_prepare_next_reliable_buffer_to_send>
 8016448:	4603      	mov	r3, r0
 801644a:	4620      	mov	r0, r4
 801644c:	2b00      	cmp	r3, #0
 801644e:	d1e7      	bne.n	8016420 <uxr_flash_output_streams+0xa4>
 8016450:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8016454:	f109 0901 	add.w	r9, r9, #1
 8016458:	fa5f f089 	uxtb.w	r0, r9
 801645c:	4283      	cmp	r3, r0
 801645e:	d8d4      	bhi.n	801640a <uxr_flash_output_streams+0x8e>
 8016460:	b004      	add	sp, #16
 8016462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016466:	bf00      	nop

08016468 <read_submessage_info>:
 8016468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801646c:	460d      	mov	r5, r1
 801646e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8016472:	4669      	mov	r1, sp
 8016474:	4607      	mov	r7, r0
 8016476:	4628      	mov	r0, r5
 8016478:	f002 fc78 	bl	8018d6c <uxr_deserialize_BaseObjectReply>
 801647c:	a902      	add	r1, sp, #8
 801647e:	4604      	mov	r4, r0
 8016480:	4628      	mov	r0, r5
 8016482:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8016486:	f7f8 fbed 	bl	800ec64 <ucdr_deserialize_bool>
 801648a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801648e:	4004      	ands	r4, r0
 8016490:	b2e4      	uxtb	r4, r4
 8016492:	b95b      	cbnz	r3, 80164ac <read_submessage_info+0x44>
 8016494:	a987      	add	r1, sp, #540	@ 0x21c
 8016496:	4628      	mov	r0, r5
 8016498:	f7f8 fbe4 	bl	800ec64 <ucdr_deserialize_bool>
 801649c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80164a0:	4606      	mov	r6, r0
 80164a2:	b94b      	cbnz	r3, 80164b8 <read_submessage_info+0x50>
 80164a4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80164a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164ac:	a903      	add	r1, sp, #12
 80164ae:	4628      	mov	r0, r5
 80164b0:	f002 fb04 	bl	8018abc <uxr_deserialize_ObjectVariant>
 80164b4:	4004      	ands	r4, r0
 80164b6:	e7ed      	b.n	8016494 <read_submessage_info+0x2c>
 80164b8:	a988      	add	r1, sp, #544	@ 0x220
 80164ba:	4628      	mov	r0, r5
 80164bc:	f7f8 fc00 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 80164c0:	4234      	tst	r4, r6
 80164c2:	d0ef      	beq.n	80164a4 <read_submessage_info+0x3c>
 80164c4:	2800      	cmp	r0, #0
 80164c6:	d0ed      	beq.n	80164a4 <read_submessage_info+0x3c>
 80164c8:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80164cc:	2b0d      	cmp	r3, #13
 80164ce:	d1e9      	bne.n	80164a4 <read_submessage_info+0x3c>
 80164d0:	a98a      	add	r1, sp, #552	@ 0x228
 80164d2:	4628      	mov	r0, r5
 80164d4:	f7f9 f99a 	bl	800f80c <ucdr_deserialize_int16_t>
 80164d8:	b140      	cbz	r0, 80164ec <read_submessage_info+0x84>
 80164da:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80164de:	2b00      	cmp	r3, #0
 80164e0:	dd07      	ble.n	80164f2 <read_submessage_info+0x8a>
 80164e2:	f1b8 0f00 	cmp.w	r8, #0
 80164e6:	bf14      	ite	ne
 80164e8:	2001      	movne	r0, #1
 80164ea:	2002      	moveq	r0, #2
 80164ec:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80164f0:	e7d8      	b.n	80164a4 <read_submessage_info+0x3c>
 80164f2:	2000      	movs	r0, #0
 80164f4:	e7fa      	b.n	80164ec <read_submessage_info+0x84>
 80164f6:	bf00      	nop

080164f8 <read_submessage_list>:
 80164f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164fc:	b097      	sub	sp, #92	@ 0x5c
 80164fe:	4ec1      	ldr	r6, [pc, #772]	@ (8016804 <read_submessage_list+0x30c>)
 8016500:	9209      	str	r2, [sp, #36]	@ 0x24
 8016502:	4604      	mov	r4, r0
 8016504:	460d      	mov	r5, r1
 8016506:	f04f 0801 	mov.w	r8, #1
 801650a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801650e:	aa0c      	add	r2, sp, #48	@ 0x30
 8016510:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8016514:	4628      	mov	r0, r5
 8016516:	f001 fcdf 	bl	8017ed8 <uxr_read_submessage_header>
 801651a:	2800      	cmp	r0, #0
 801651c:	f000 813e 	beq.w	801679c <read_submessage_list+0x2a4>
 8016520:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8016524:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8016528:	3b02      	subs	r3, #2
 801652a:	2b0d      	cmp	r3, #13
 801652c:	d8ed      	bhi.n	801650a <read_submessage_list+0x12>
 801652e:	a101      	add	r1, pc, #4	@ (adr r1, 8016534 <read_submessage_list+0x3c>)
 8016530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016534:	08016793 	.word	0x08016793
 8016538:	0801650b 	.word	0x0801650b
 801653c:	08016783 	.word	0x08016783
 8016540:	08016721 	.word	0x08016721
 8016544:	08016717 	.word	0x08016717
 8016548:	0801650b 	.word	0x0801650b
 801654c:	0801650b 	.word	0x0801650b
 8016550:	08016677 	.word	0x08016677
 8016554:	08016607 	.word	0x08016607
 8016558:	080165c7 	.word	0x080165c7
 801655c:	0801650b 	.word	0x0801650b
 8016560:	0801650b 	.word	0x0801650b
 8016564:	0801650b 	.word	0x0801650b
 8016568:	0801656d 	.word	0x0801656d
 801656c:	a910      	add	r1, sp, #64	@ 0x40
 801656e:	4628      	mov	r0, r5
 8016570:	f002 fe2e 	bl	80191d0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8016574:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8016578:	f1b9 0f00 	cmp.w	r9, #0
 801657c:	f000 8116 	beq.w	80167ac <read_submessage_list+0x2b4>
 8016580:	f001 fcf0 	bl	8017f64 <uxr_nanos>
 8016584:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8016586:	4602      	mov	r2, r0
 8016588:	460b      	mov	r3, r1
 801658a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801658c:	2100      	movs	r1, #0
 801658e:	468c      	mov	ip, r1
 8016590:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8016594:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8016598:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801659a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801659c:	468c      	mov	ip, r1
 801659e:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80165a2:	46e2      	mov	sl, ip
 80165a4:	46bc      	mov	ip, r7
 80165a6:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80165aa:	fbc0 7106 	smlal	r7, r1, r0, r6
 80165ae:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80165b2:	e9cd 7100 	strd	r7, r1, [sp]
 80165b6:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80165ba:	9106      	str	r1, [sp, #24]
 80165bc:	4620      	mov	r0, r4
 80165be:	47c8      	blx	r9
 80165c0:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 80165c4:	e7a1      	b.n	801650a <read_submessage_list+0x12>
 80165c6:	a910      	add	r1, sp, #64	@ 0x40
 80165c8:	4628      	mov	r0, r5
 80165ca:	f002 fde1 	bl	8019190 <uxr_deserialize_HEARTBEAT_Payload>
 80165ce:	2100      	movs	r1, #0
 80165d0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80165d4:	f001 fb58 	bl	8017c88 <uxr_stream_id_from_raw>
 80165d8:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80165dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80165de:	4639      	mov	r1, r7
 80165e0:	f104 0008 	add.w	r0, r4, #8
 80165e4:	f001 fc3e 	bl	8017e64 <uxr_get_input_reliable_stream>
 80165e8:	2800      	cmp	r0, #0
 80165ea:	d08e      	beq.n	801650a <read_submessage_list+0x12>
 80165ec:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80165f0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80165f4:	f006 fcd4 	bl	801cfa0 <uxr_process_heartbeat>
 80165f8:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80165fc:	463a      	mov	r2, r7
 80165fe:	4620      	mov	r0, r4
 8016600:	f7ff fde2 	bl	80161c8 <write_submessage_acknack.isra.0>
 8016604:	e781      	b.n	801650a <read_submessage_list+0x12>
 8016606:	a910      	add	r1, sp, #64	@ 0x40
 8016608:	4628      	mov	r0, r5
 801660a:	f002 fd99 	bl	8019140 <uxr_deserialize_ACKNACK_Payload>
 801660e:	2100      	movs	r1, #0
 8016610:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8016614:	f001 fb38 	bl	8017c88 <uxr_stream_id_from_raw>
 8016618:	900d      	str	r0, [sp, #52]	@ 0x34
 801661a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801661e:	f104 0008 	add.w	r0, r4, #8
 8016622:	f001 fc0b 	bl	8017e3c <uxr_get_output_reliable_stream>
 8016626:	4607      	mov	r7, r0
 8016628:	2800      	cmp	r0, #0
 801662a:	f43f af6e 	beq.w	801650a <read_submessage_list+0x12>
 801662e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8016632:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8016636:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801663a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801663e:	b289      	uxth	r1, r1
 8016640:	f007 f808 	bl	801d654 <uxr_process_acknack>
 8016644:	4638      	mov	r0, r7
 8016646:	f006 ffc5 	bl	801d5d4 <uxr_begin_output_nack_buffer_it>
 801664a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801664e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8016652:	e006      	b.n	8016662 <read_submessage_list+0x16a>
 8016654:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016656:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016658:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801665c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801665e:	6818      	ldr	r0, [r3, #0]
 8016660:	47c8      	blx	r9
 8016662:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8016666:	aa0f      	add	r2, sp, #60	@ 0x3c
 8016668:	4651      	mov	r1, sl
 801666a:	4638      	mov	r0, r7
 801666c:	f006 ffb4 	bl	801d5d8 <uxr_next_reliable_nack_buffer_to_send>
 8016670:	2800      	cmp	r0, #0
 8016672:	d1ef      	bne.n	8016654 <read_submessage_list+0x15c>
 8016674:	e749      	b.n	801650a <read_submessage_list+0x12>
 8016676:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801667a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801667e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8016682:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8016686:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801668a:	4651      	mov	r1, sl
 801668c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8016690:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8016694:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8016698:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 801669c:	4628      	mov	r0, r5
 801669e:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80166a2:	f002 faad 	bl	8018c00 <uxr_deserialize_BaseObjectRequest>
 80166a6:	4650      	mov	r0, sl
 80166a8:	a90f      	add	r1, sp, #60	@ 0x3c
 80166aa:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80166ae:	f000 fe1d 	bl	80172ec <uxr_parse_base_object_request>
 80166b2:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80166b6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80166b8:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80166bc:	9110      	str	r1, [sp, #64]	@ 0x40
 80166be:	3f04      	subs	r7, #4
 80166c0:	f009 090e 	and.w	r9, r9, #14
 80166c4:	b2bf      	uxth	r7, r7
 80166c6:	f1bb 0f00 	cmp.w	fp, #0
 80166ca:	d006      	beq.n	80166da <read_submessage_list+0x1e2>
 80166cc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80166d0:	9300      	str	r3, [sp, #0]
 80166d2:	4652      	mov	r2, sl
 80166d4:	2300      	movs	r3, #0
 80166d6:	4620      	mov	r0, r4
 80166d8:	47d8      	blx	fp
 80166da:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80166dc:	b16a      	cbz	r2, 80166fa <read_submessage_list+0x202>
 80166de:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80166e0:	2100      	movs	r1, #0
 80166e2:	3802      	subs	r0, #2
 80166e4:	e002      	b.n	80166ec <read_submessage_list+0x1f4>
 80166e6:	3101      	adds	r1, #1
 80166e8:	4291      	cmp	r1, r2
 80166ea:	d006      	beq.n	80166fa <read_submessage_list+0x202>
 80166ec:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80166f0:	4553      	cmp	r3, sl
 80166f2:	d1f8      	bne.n	80166e6 <read_submessage_list+0x1ee>
 80166f4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80166f6:	2200      	movs	r2, #0
 80166f8:	545a      	strb	r2, [r3, r1]
 80166fa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80166fe:	9102      	str	r1, [sp, #8]
 8016700:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016702:	9101      	str	r1, [sp, #4]
 8016704:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8016706:	9100      	str	r1, [sp, #0]
 8016708:	464b      	mov	r3, r9
 801670a:	463a      	mov	r2, r7
 801670c:	4629      	mov	r1, r5
 801670e:	4620      	mov	r0, r4
 8016710:	f7ff fc38 	bl	8015f84 <read_submessage_format>
 8016714:	e6f9      	b.n	801650a <read_submessage_list+0x12>
 8016716:	4629      	mov	r1, r5
 8016718:	4620      	mov	r0, r4
 801671a:	f7ff fea5 	bl	8016468 <read_submessage_info>
 801671e:	e6f4      	b.n	801650a <read_submessage_list+0x12>
 8016720:	2a00      	cmp	r2, #0
 8016722:	d03e      	beq.n	80167a2 <read_submessage_list+0x2aa>
 8016724:	a910      	add	r1, sp, #64	@ 0x40
 8016726:	4628      	mov	r0, r5
 8016728:	f002 fc66 	bl	8018ff8 <uxr_deserialize_STATUS_Payload>
 801672c:	a90e      	add	r1, sp, #56	@ 0x38
 801672e:	aa0d      	add	r2, sp, #52	@ 0x34
 8016730:	a810      	add	r0, sp, #64	@ 0x40
 8016732:	f000 fddb 	bl	80172ec <uxr_parse_base_object_request>
 8016736:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 801673a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801673c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8016740:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8016744:	910f      	str	r1, [sp, #60]	@ 0x3c
 8016746:	f1ba 0f00 	cmp.w	sl, #0
 801674a:	d006      	beq.n	801675a <read_submessage_list+0x262>
 801674c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8016750:	9300      	str	r3, [sp, #0]
 8016752:	463a      	mov	r2, r7
 8016754:	464b      	mov	r3, r9
 8016756:	4620      	mov	r0, r4
 8016758:	47d0      	blx	sl
 801675a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801675c:	2a00      	cmp	r2, #0
 801675e:	f43f aed4 	beq.w	801650a <read_submessage_list+0x12>
 8016762:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8016764:	2100      	movs	r1, #0
 8016766:	3802      	subs	r0, #2
 8016768:	e003      	b.n	8016772 <read_submessage_list+0x27a>
 801676a:	3101      	adds	r1, #1
 801676c:	4291      	cmp	r1, r2
 801676e:	f43f aecc 	beq.w	801650a <read_submessage_list+0x12>
 8016772:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8016776:	42bb      	cmp	r3, r7
 8016778:	d1f7      	bne.n	801676a <read_submessage_list+0x272>
 801677a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801677c:	f803 9001 	strb.w	r9, [r3, r1]
 8016780:	e6c3      	b.n	801650a <read_submessage_list+0x12>
 8016782:	2a00      	cmp	r2, #0
 8016784:	f47f aec1 	bne.w	801650a <read_submessage_list+0x12>
 8016788:	4629      	mov	r1, r5
 801678a:	4620      	mov	r0, r4
 801678c:	f000 fcf4 	bl	8017178 <uxr_read_create_session_status>
 8016790:	e6bb      	b.n	801650a <read_submessage_list+0x12>
 8016792:	4629      	mov	r1, r5
 8016794:	4620      	mov	r0, r4
 8016796:	f7ff fce1 	bl	801615c <read_submessage_get_info>
 801679a:	e6b6      	b.n	801650a <read_submessage_list+0x12>
 801679c:	b017      	add	sp, #92	@ 0x5c
 801679e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167a2:	4629      	mov	r1, r5
 80167a4:	4620      	mov	r0, r4
 80167a6:	f000 fcf3 	bl	8017190 <uxr_read_delete_session_status>
 80167aa:	e6ae      	b.n	801650a <read_submessage_list+0x12>
 80167ac:	f001 fbda 	bl	8017f64 <uxr_nanos>
 80167b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80167b2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80167b4:	464f      	mov	r7, r9
 80167b6:	fbc3 2706 	smlal	r2, r7, r3, r6
 80167ba:	1812      	adds	r2, r2, r0
 80167bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80167be:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80167c0:	eb47 0101 	adc.w	r1, r7, r1
 80167c4:	464f      	mov	r7, r9
 80167c6:	fbc3 0706 	smlal	r0, r7, r3, r6
 80167ca:	463b      	mov	r3, r7
 80167cc:	4684      	mov	ip, r0
 80167ce:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80167d2:	fbc7 0906 	smlal	r0, r9, r7, r6
 80167d6:	eb1c 0c00 	adds.w	ip, ip, r0
 80167da:	464f      	mov	r7, r9
 80167dc:	eb43 0307 	adc.w	r3, r3, r7
 80167e0:	ebb2 0c0c 	subs.w	ip, r2, ip
 80167e4:	eb61 0303 	sbc.w	r3, r1, r3
 80167e8:	0fda      	lsrs	r2, r3, #31
 80167ea:	eb12 020c 	adds.w	r2, r2, ip
 80167ee:	f143 0300 	adc.w	r3, r3, #0
 80167f2:	0852      	lsrs	r2, r2, #1
 80167f4:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80167f8:	105b      	asrs	r3, r3, #1
 80167fa:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80167fe:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8016802:	e6dd      	b.n	80165c0 <read_submessage_list+0xc8>
 8016804:	3b9aca00 	.word	0x3b9aca00

08016808 <listen_message_reliably>:
 8016808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801680c:	1e0b      	subs	r3, r1, #0
 801680e:	b09d      	sub	sp, #116	@ 0x74
 8016810:	bfb8      	it	lt
 8016812:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8016816:	4680      	mov	r8, r0
 8016818:	9305      	str	r3, [sp, #20]
 801681a:	f001 fb89 	bl	8017f30 <uxr_millis>
 801681e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8016822:	4681      	mov	r9, r0
 8016824:	2a00      	cmp	r2, #0
 8016826:	f000 80a1 	beq.w	801696c <listen_message_reliably+0x164>
 801682a:	2600      	movs	r6, #0
 801682c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016830:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8016834:	9303      	str	r3, [sp, #12]
 8016836:	4630      	mov	r0, r6
 8016838:	460f      	mov	r7, r1
 801683a:	e00f      	b.n	801685c <listen_message_reliably+0x54>
 801683c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8016840:	9903      	ldr	r1, [sp, #12]
 8016842:	455a      	cmp	r2, fp
 8016844:	f106 0601 	add.w	r6, r6, #1
 8016848:	eb73 0101 	sbcs.w	r1, r3, r1
 801684c:	b2f0      	uxtb	r0, r6
 801684e:	da01      	bge.n	8016854 <listen_message_reliably+0x4c>
 8016850:	4693      	mov	fp, r2
 8016852:	9303      	str	r3, [sp, #12]
 8016854:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8016858:	4283      	cmp	r3, r0
 801685a:	d960      	bls.n	801691e <listen_message_reliably+0x116>
 801685c:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8016860:	2102      	movs	r1, #2
 8016862:	2201      	movs	r2, #1
 8016864:	f001 f9e6 	bl	8017c34 <uxr_stream_id>
 8016868:	00e4      	lsls	r4, r4, #3
 801686a:	f104 0520 	add.w	r5, r4, #32
 801686e:	4445      	add	r5, r8
 8016870:	4601      	mov	r1, r0
 8016872:	463b      	mov	r3, r7
 8016874:	464a      	mov	r2, r9
 8016876:	4628      	mov	r0, r5
 8016878:	9109      	str	r1, [sp, #36]	@ 0x24
 801687a:	f006 fe81 	bl	801d580 <uxr_update_output_stream_heartbeat_timestamp>
 801687e:	eb08 0304 	add.w	r3, r8, r4
 8016882:	2800      	cmp	r0, #0
 8016884:	d0da      	beq.n	801683c <listen_message_reliably+0x34>
 8016886:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801688a:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801688e:	9304      	str	r3, [sp, #16]
 8016890:	4640      	mov	r0, r8
 8016892:	f000 fd05 	bl	80172a0 <uxr_session_header_offset>
 8016896:	3501      	adds	r5, #1
 8016898:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 801689c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80168a0:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80168a4:	2300      	movs	r3, #0
 80168a6:	2211      	movs	r2, #17
 80168a8:	9000      	str	r0, [sp, #0]
 80168aa:	a90c      	add	r1, sp, #48	@ 0x30
 80168ac:	4650      	mov	r0, sl
 80168ae:	f7f9 fcc1 	bl	8010234 <ucdr_init_buffer_origin_offset>
 80168b2:	2300      	movs	r3, #0
 80168b4:	2205      	movs	r2, #5
 80168b6:	210b      	movs	r1, #11
 80168b8:	4650      	mov	r0, sl
 80168ba:	f001 faf3 	bl	8017ea4 <uxr_buffer_submessage_header>
 80168be:	8968      	ldrh	r0, [r5, #10]
 80168c0:	2101      	movs	r1, #1
 80168c2:	f006 ff1f 	bl	801d704 <uxr_seq_num_add>
 80168c6:	892b      	ldrh	r3, [r5, #8]
 80168c8:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80168cc:	4602      	mov	r2, r0
 80168ce:	9b04      	ldr	r3, [sp, #16]
 80168d0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80168d4:	a90a      	add	r1, sp, #40	@ 0x28
 80168d6:	4650      	mov	r0, sl
 80168d8:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80168dc:	f002 fc44 	bl	8019168 <uxr_serialize_HEARTBEAT_Payload>
 80168e0:	2200      	movs	r2, #0
 80168e2:	4611      	mov	r1, r2
 80168e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80168e6:	4640      	mov	r0, r8
 80168e8:	f000 fc84 	bl	80171f4 <uxr_stamp_session_header>
 80168ec:	4650      	mov	r0, sl
 80168ee:	f7f9 fcdf 	bl	80102b0 <ucdr_buffer_length>
 80168f2:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80168f6:	4602      	mov	r2, r0
 80168f8:	a90c      	add	r1, sp, #48	@ 0x30
 80168fa:	e9d3 0500 	ldrd	r0, r5, [r3]
 80168fe:	4444      	add	r4, r8
 8016900:	47a8      	blx	r5
 8016902:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8016906:	9903      	ldr	r1, [sp, #12]
 8016908:	455a      	cmp	r2, fp
 801690a:	f106 0601 	add.w	r6, r6, #1
 801690e:	eb73 0101 	sbcs.w	r1, r3, r1
 8016912:	b2f0      	uxtb	r0, r6
 8016914:	db9c      	blt.n	8016850 <listen_message_reliably+0x48>
 8016916:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801691a:	4283      	cmp	r3, r0
 801691c:	d89e      	bhi.n	801685c <listen_message_reliably+0x54>
 801691e:	9a03      	ldr	r2, [sp, #12]
 8016920:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016924:	429a      	cmp	r2, r3
 8016926:	bf08      	it	eq
 8016928:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 801692c:	d01e      	beq.n	801696c <listen_message_reliably+0x164>
 801692e:	ebab 0309 	sub.w	r3, fp, r9
 8016932:	9905      	ldr	r1, [sp, #20]
 8016934:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8016938:	2b00      	cmp	r3, #0
 801693a:	bf08      	it	eq
 801693c:	2301      	moveq	r3, #1
 801693e:	4299      	cmp	r1, r3
 8016940:	bfa8      	it	ge
 8016942:	4619      	movge	r1, r3
 8016944:	6894      	ldr	r4, [r2, #8]
 8016946:	6810      	ldr	r0, [r2, #0]
 8016948:	4689      	mov	r9, r1
 801694a:	460b      	mov	r3, r1
 801694c:	aa08      	add	r2, sp, #32
 801694e:	a907      	add	r1, sp, #28
 8016950:	47a0      	blx	r4
 8016952:	b968      	cbnz	r0, 8016970 <listen_message_reliably+0x168>
 8016954:	9b05      	ldr	r3, [sp, #20]
 8016956:	eba3 0309 	sub.w	r3, r3, r9
 801695a:	2b00      	cmp	r3, #0
 801695c:	9305      	str	r3, [sp, #20]
 801695e:	f73f af5c 	bgt.w	801681a <listen_message_reliably+0x12>
 8016962:	4604      	mov	r4, r0
 8016964:	4620      	mov	r0, r4
 8016966:	b01d      	add	sp, #116	@ 0x74
 8016968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801696c:	9b05      	ldr	r3, [sp, #20]
 801696e:	e7e0      	b.n	8016932 <listen_message_reliably+0x12a>
 8016970:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8016974:	4604      	mov	r4, r0
 8016976:	a80c      	add	r0, sp, #48	@ 0x30
 8016978:	f7f9 fc6e 	bl	8010258 <ucdr_init_buffer>
 801697c:	2500      	movs	r5, #0
 801697e:	f10d 031a 	add.w	r3, sp, #26
 8016982:	aa06      	add	r2, sp, #24
 8016984:	a90c      	add	r1, sp, #48	@ 0x30
 8016986:	4640      	mov	r0, r8
 8016988:	f88d 5018 	strb.w	r5, [sp, #24]
 801698c:	f000 fc46 	bl	801721c <uxr_read_session_header>
 8016990:	b918      	cbnz	r0, 801699a <listen_message_reliably+0x192>
 8016992:	4620      	mov	r0, r4
 8016994:	b01d      	add	sp, #116	@ 0x74
 8016996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801699a:	4629      	mov	r1, r5
 801699c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80169a0:	f001 f972 	bl	8017c88 <uxr_stream_id_from_raw>
 80169a4:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80169a8:	2d01      	cmp	r5, #1
 80169aa:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80169ae:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80169b2:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80169b6:	d04b      	beq.n	8016a50 <listen_message_reliably+0x248>
 80169b8:	2d02      	cmp	r5, #2
 80169ba:	d00f      	beq.n	80169dc <listen_message_reliably+0x1d4>
 80169bc:	2d00      	cmp	r5, #0
 80169be:	d1e8      	bne.n	8016992 <listen_message_reliably+0x18a>
 80169c0:	4629      	mov	r1, r5
 80169c2:	4628      	mov	r0, r5
 80169c4:	f001 f960 	bl	8017c88 <uxr_stream_id_from_raw>
 80169c8:	a90c      	add	r1, sp, #48	@ 0x30
 80169ca:	4602      	mov	r2, r0
 80169cc:	4640      	mov	r0, r8
 80169ce:	920a      	str	r2, [sp, #40]	@ 0x28
 80169d0:	f7ff fd92 	bl	80164f8 <read_submessage_list>
 80169d4:	4620      	mov	r0, r4
 80169d6:	b01d      	add	sp, #116	@ 0x74
 80169d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169dc:	4631      	mov	r1, r6
 80169de:	f108 0008 	add.w	r0, r8, #8
 80169e2:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80169e6:	f001 fa3d 	bl	8017e64 <uxr_get_input_reliable_stream>
 80169ea:	4607      	mov	r7, r0
 80169ec:	b338      	cbz	r0, 8016a3e <listen_message_reliably+0x236>
 80169ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80169f0:	9203      	str	r2, [sp, #12]
 80169f2:	a80c      	add	r0, sp, #48	@ 0x30
 80169f4:	f7f9 fc60 	bl	80102b8 <ucdr_buffer_remaining>
 80169f8:	4603      	mov	r3, r0
 80169fa:	f10d 0019 	add.w	r0, sp, #25
 80169fe:	9000      	str	r0, [sp, #0]
 8016a00:	9a03      	ldr	r2, [sp, #12]
 8016a02:	4651      	mov	r1, sl
 8016a04:	4638      	mov	r0, r7
 8016a06:	f006 f9d1 	bl	801cdac <uxr_receive_reliable_message>
 8016a0a:	b1c0      	cbz	r0, 8016a3e <listen_message_reliably+0x236>
 8016a0c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016a10:	b393      	cbz	r3, 8016a78 <listen_message_reliably+0x270>
 8016a12:	ad14      	add	r5, sp, #80	@ 0x50
 8016a14:	f04f 0a02 	mov.w	sl, #2
 8016a18:	e00a      	b.n	8016a30 <listen_message_reliably+0x228>
 8016a1a:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8016a1e:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8016a22:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8016a26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016a28:	4629      	mov	r1, r5
 8016a2a:	4640      	mov	r0, r8
 8016a2c:	f7ff fd64 	bl	80164f8 <read_submessage_list>
 8016a30:	2204      	movs	r2, #4
 8016a32:	4629      	mov	r1, r5
 8016a34:	4638      	mov	r0, r7
 8016a36:	f006 fa39 	bl	801ceac <uxr_next_input_reliable_buffer_available>
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	d1ed      	bne.n	8016a1a <listen_message_reliably+0x212>
 8016a3e:	4640      	mov	r0, r8
 8016a40:	4632      	mov	r2, r6
 8016a42:	4649      	mov	r1, r9
 8016a44:	f7ff fbc0 	bl	80161c8 <write_submessage_acknack.isra.0>
 8016a48:	4620      	mov	r0, r4
 8016a4a:	b01d      	add	sp, #116	@ 0x74
 8016a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a50:	4631      	mov	r1, r6
 8016a52:	f108 0008 	add.w	r0, r8, #8
 8016a56:	f001 f9fb 	bl	8017e50 <uxr_get_input_best_effort_stream>
 8016a5a:	2800      	cmp	r0, #0
 8016a5c:	d099      	beq.n	8016992 <listen_message_reliably+0x18a>
 8016a5e:	4651      	mov	r1, sl
 8016a60:	f006 f910 	bl	801cc84 <uxr_receive_best_effort_message>
 8016a64:	2800      	cmp	r0, #0
 8016a66:	d094      	beq.n	8016992 <listen_message_reliably+0x18a>
 8016a68:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8016a6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016a6e:	a90c      	add	r1, sp, #48	@ 0x30
 8016a70:	4640      	mov	r0, r8
 8016a72:	f7ff fd41 	bl	80164f8 <read_submessage_list>
 8016a76:	e78c      	b.n	8016992 <listen_message_reliably+0x18a>
 8016a78:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8016a7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016a7e:	a90c      	add	r1, sp, #48	@ 0x30
 8016a80:	4640      	mov	r0, r8
 8016a82:	f7ff fd39 	bl	80164f8 <read_submessage_list>
 8016a86:	e7c4      	b.n	8016a12 <listen_message_reliably+0x20a>

08016a88 <uxr_run_session_timeout>:
 8016a88:	b570      	push	{r4, r5, r6, lr}
 8016a8a:	4604      	mov	r4, r0
 8016a8c:	460d      	mov	r5, r1
 8016a8e:	f001 fa4f 	bl	8017f30 <uxr_millis>
 8016a92:	4606      	mov	r6, r0
 8016a94:	4620      	mov	r0, r4
 8016a96:	f7ff fc71 	bl	801637c <uxr_flash_output_streams>
 8016a9a:	4629      	mov	r1, r5
 8016a9c:	4620      	mov	r0, r4
 8016a9e:	f7ff feb3 	bl	8016808 <listen_message_reliably>
 8016aa2:	f001 fa45 	bl	8017f30 <uxr_millis>
 8016aa6:	1b83      	subs	r3, r0, r6
 8016aa8:	1ae9      	subs	r1, r5, r3
 8016aaa:	2900      	cmp	r1, #0
 8016aac:	dcf6      	bgt.n	8016a9c <uxr_run_session_timeout+0x14>
 8016aae:	f104 0008 	add.w	r0, r4, #8
 8016ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ab6:	f001 b9df 	b.w	8017e78 <uxr_output_streams_confirmed>
 8016aba:	bf00      	nop

08016abc <uxr_run_session_until_data>:
 8016abc:	b570      	push	{r4, r5, r6, lr}
 8016abe:	4604      	mov	r4, r0
 8016ac0:	460d      	mov	r5, r1
 8016ac2:	f001 fa35 	bl	8017f30 <uxr_millis>
 8016ac6:	4606      	mov	r6, r0
 8016ac8:	4620      	mov	r0, r4
 8016aca:	f7ff fc57 	bl	801637c <uxr_flash_output_streams>
 8016ace:	2300      	movs	r3, #0
 8016ad0:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8016ad4:	4629      	mov	r1, r5
 8016ad6:	e005      	b.n	8016ae4 <uxr_run_session_until_data+0x28>
 8016ad8:	f001 fa2a 	bl	8017f30 <uxr_millis>
 8016adc:	1b83      	subs	r3, r0, r6
 8016ade:	1ae9      	subs	r1, r5, r3
 8016ae0:	2900      	cmp	r1, #0
 8016ae2:	dd07      	ble.n	8016af4 <uxr_run_session_until_data+0x38>
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	f7ff fe8f 	bl	8016808 <listen_message_reliably>
 8016aea:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8016aee:	2800      	cmp	r0, #0
 8016af0:	d0f2      	beq.n	8016ad8 <uxr_run_session_until_data+0x1c>
 8016af2:	bd70      	pop	{r4, r5, r6, pc}
 8016af4:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8016af8:	bd70      	pop	{r4, r5, r6, pc}
 8016afa:	bf00      	nop

08016afc <uxr_run_session_until_confirm_delivery>:
 8016afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b00:	4606      	mov	r6, r0
 8016b02:	460d      	mov	r5, r1
 8016b04:	f001 fa14 	bl	8017f30 <uxr_millis>
 8016b08:	4607      	mov	r7, r0
 8016b0a:	4630      	mov	r0, r6
 8016b0c:	f7ff fc36 	bl	801637c <uxr_flash_output_streams>
 8016b10:	2d00      	cmp	r5, #0
 8016b12:	f106 0808 	add.w	r8, r6, #8
 8016b16:	bfa8      	it	ge
 8016b18:	462c      	movge	r4, r5
 8016b1a:	da07      	bge.n	8016b2c <uxr_run_session_until_confirm_delivery+0x30>
 8016b1c:	e00e      	b.n	8016b3c <uxr_run_session_until_confirm_delivery+0x40>
 8016b1e:	f7ff fe73 	bl	8016808 <listen_message_reliably>
 8016b22:	f001 fa05 	bl	8017f30 <uxr_millis>
 8016b26:	1bc3      	subs	r3, r0, r7
 8016b28:	1aec      	subs	r4, r5, r3
 8016b2a:	d407      	bmi.n	8016b3c <uxr_run_session_until_confirm_delivery+0x40>
 8016b2c:	4640      	mov	r0, r8
 8016b2e:	f001 f9a3 	bl	8017e78 <uxr_output_streams_confirmed>
 8016b32:	4603      	mov	r3, r0
 8016b34:	4621      	mov	r1, r4
 8016b36:	4630      	mov	r0, r6
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d0f0      	beq.n	8016b1e <uxr_run_session_until_confirm_delivery+0x22>
 8016b3c:	4640      	mov	r0, r8
 8016b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b42:	f001 b999 	b.w	8017e78 <uxr_output_streams_confirmed>
 8016b46:	bf00      	nop

08016b48 <uxr_run_session_until_all_status>:
 8016b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b4c:	9c08      	ldr	r4, [sp, #32]
 8016b4e:	4606      	mov	r6, r0
 8016b50:	460f      	mov	r7, r1
 8016b52:	4691      	mov	r9, r2
 8016b54:	461d      	mov	r5, r3
 8016b56:	f7ff fc11 	bl	801637c <uxr_flash_output_streams>
 8016b5a:	b124      	cbz	r4, 8016b66 <uxr_run_session_until_all_status+0x1e>
 8016b5c:	4622      	mov	r2, r4
 8016b5e:	21ff      	movs	r1, #255	@ 0xff
 8016b60:	4628      	mov	r0, r5
 8016b62:	f007 fb0d 	bl	801e180 <memset>
 8016b66:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8016b6a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8016b6c:	f001 f9e0 	bl	8017f30 <uxr_millis>
 8016b70:	3d01      	subs	r5, #1
 8016b72:	f1a9 0902 	sub.w	r9, r9, #2
 8016b76:	4680      	mov	r8, r0
 8016b78:	4639      	mov	r1, r7
 8016b7a:	4630      	mov	r0, r6
 8016b7c:	f7ff fe44 	bl	8016808 <listen_message_reliably>
 8016b80:	f001 f9d6 	bl	8017f30 <uxr_millis>
 8016b84:	eba0 0008 	sub.w	r0, r0, r8
 8016b88:	1a39      	subs	r1, r7, r0
 8016b8a:	b344      	cbz	r4, 8016bde <uxr_run_session_until_all_status+0x96>
 8016b8c:	4628      	mov	r0, r5
 8016b8e:	46ac      	mov	ip, r5
 8016b90:	2301      	movs	r3, #1
 8016b92:	e002      	b.n	8016b9a <uxr_run_session_until_all_status+0x52>
 8016b94:	42a3      	cmp	r3, r4
 8016b96:	d20d      	bcs.n	8016bb4 <uxr_run_session_until_all_status+0x6c>
 8016b98:	3301      	adds	r3, #1
 8016b9a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8016b9e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8016ba2:	d1f7      	bne.n	8016b94 <uxr_run_session_until_all_status+0x4c>
 8016ba4:	42a3      	cmp	r3, r4
 8016ba6:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8016baa:	d213      	bcs.n	8016bd4 <uxr_run_session_until_all_status+0x8c>
 8016bac:	2a00      	cmp	r2, #0
 8016bae:	d0f3      	beq.n	8016b98 <uxr_run_session_until_all_status+0x50>
 8016bb0:	2900      	cmp	r1, #0
 8016bb2:	dce2      	bgt.n	8016b7a <uxr_run_session_until_all_status+0x32>
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8016bb8:	442c      	add	r4, r5
 8016bba:	e001      	b.n	8016bc0 <uxr_run_session_until_all_status+0x78>
 8016bbc:	2b01      	cmp	r3, #1
 8016bbe:	d812      	bhi.n	8016be6 <uxr_run_session_until_all_status+0x9e>
 8016bc0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8016bc4:	4284      	cmp	r4, r0
 8016bc6:	d1f9      	bne.n	8016bbc <uxr_run_session_until_all_status+0x74>
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	bf8c      	ite	hi
 8016bcc:	2000      	movhi	r0, #0
 8016bce:	2001      	movls	r0, #1
 8016bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bd4:	2900      	cmp	r1, #0
 8016bd6:	dded      	ble.n	8016bb4 <uxr_run_session_until_all_status+0x6c>
 8016bd8:	2a00      	cmp	r2, #0
 8016bda:	d1ce      	bne.n	8016b7a <uxr_run_session_until_all_status+0x32>
 8016bdc:	e7ea      	b.n	8016bb4 <uxr_run_session_until_all_status+0x6c>
 8016bde:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8016be0:	2001      	movs	r0, #1
 8016be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016be6:	2000      	movs	r0, #0
 8016be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bec:	0000      	movs	r0, r0
	...

08016bf0 <uxr_sync_session>:
 8016bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bf2:	b093      	sub	sp, #76	@ 0x4c
 8016bf4:	4604      	mov	r4, r0
 8016bf6:	460d      	mov	r5, r1
 8016bf8:	f000 fb52 	bl	80172a0 <uxr_session_header_offset>
 8016bfc:	2214      	movs	r2, #20
 8016bfe:	eb0d 0102 	add.w	r1, sp, r2
 8016c02:	9000      	str	r0, [sp, #0]
 8016c04:	2300      	movs	r3, #0
 8016c06:	a80a      	add	r0, sp, #40	@ 0x28
 8016c08:	f7f9 fb14 	bl	8010234 <ucdr_init_buffer_origin_offset>
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	2208      	movs	r2, #8
 8016c10:	210e      	movs	r1, #14
 8016c12:	a80a      	add	r0, sp, #40	@ 0x28
 8016c14:	f001 f946 	bl	8017ea4 <uxr_buffer_submessage_header>
 8016c18:	f001 f9a4 	bl	8017f64 <uxr_nanos>
 8016c1c:	a31c      	add	r3, pc, #112	@ (adr r3, 8016c90 <uxr_sync_session+0xa0>)
 8016c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c22:	460e      	mov	r6, r1
 8016c24:	4607      	mov	r7, r0
 8016c26:	f7ea f81f 	bl	8000c68 <__aeabi_ldivmod>
 8016c2a:	4631      	mov	r1, r6
 8016c2c:	9003      	str	r0, [sp, #12]
 8016c2e:	a318      	add	r3, pc, #96	@ (adr r3, 8016c90 <uxr_sync_session+0xa0>)
 8016c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c34:	4638      	mov	r0, r7
 8016c36:	f7ea f817 	bl	8000c68 <__aeabi_ldivmod>
 8016c3a:	a903      	add	r1, sp, #12
 8016c3c:	a80a      	add	r0, sp, #40	@ 0x28
 8016c3e:	9204      	str	r2, [sp, #16]
 8016c40:	f002 fab8 	bl	80191b4 <uxr_serialize_TIMESTAMP_Payload>
 8016c44:	2200      	movs	r2, #0
 8016c46:	4611      	mov	r1, r2
 8016c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c4a:	4620      	mov	r0, r4
 8016c4c:	f000 fad2 	bl	80171f4 <uxr_stamp_session_header>
 8016c50:	a80a      	add	r0, sp, #40	@ 0x28
 8016c52:	f7f9 fb2d 	bl	80102b0 <ucdr_buffer_length>
 8016c56:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016c58:	4602      	mov	r2, r0
 8016c5a:	a905      	add	r1, sp, #20
 8016c5c:	e9d3 0600 	ldrd	r0, r6, [r3]
 8016c60:	47b0      	blx	r6
 8016c62:	f001 f965 	bl	8017f30 <uxr_millis>
 8016c66:	2300      	movs	r3, #0
 8016c68:	4606      	mov	r6, r0
 8016c6a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8016c6e:	4629      	mov	r1, r5
 8016c70:	e000      	b.n	8016c74 <uxr_sync_session+0x84>
 8016c72:	b950      	cbnz	r0, 8016c8a <uxr_sync_session+0x9a>
 8016c74:	4620      	mov	r0, r4
 8016c76:	f7ff fdc7 	bl	8016808 <listen_message_reliably>
 8016c7a:	f001 f959 	bl	8017f30 <uxr_millis>
 8016c7e:	1b83      	subs	r3, r0, r6
 8016c80:	1ae9      	subs	r1, r5, r3
 8016c82:	2900      	cmp	r1, #0
 8016c84:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8016c88:	dcf3      	bgt.n	8016c72 <uxr_sync_session+0x82>
 8016c8a:	b013      	add	sp, #76	@ 0x4c
 8016c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c8e:	bf00      	nop
 8016c90:	3b9aca00 	.word	0x3b9aca00
 8016c94:	00000000 	.word	0x00000000

08016c98 <wait_session_status>:
 8016c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c9c:	4604      	mov	r4, r0
 8016c9e:	b09d      	sub	sp, #116	@ 0x74
 8016ca0:	20ff      	movs	r0, #255	@ 0xff
 8016ca2:	7160      	strb	r0, [r4, #5]
 8016ca4:	9303      	str	r3, [sp, #12]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	f000 80b6 	beq.w	8016e18 <wait_session_status+0x180>
 8016cac:	468a      	mov	sl, r1
 8016cae:	4691      	mov	r9, r2
 8016cb0:	f04f 0b00 	mov.w	fp, #0
 8016cb4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016cb6:	464a      	mov	r2, r9
 8016cb8:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016cbc:	4651      	mov	r1, sl
 8016cbe:	47a8      	blx	r5
 8016cc0:	f001 f936 	bl	8017f30 <uxr_millis>
 8016cc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016cc8:	4605      	mov	r5, r0
 8016cca:	e009      	b.n	8016ce0 <wait_session_status+0x48>
 8016ccc:	f001 f930 	bl	8017f30 <uxr_millis>
 8016cd0:	1b40      	subs	r0, r0, r5
 8016cd2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	dd40      	ble.n	8016d5c <wait_session_status+0xc4>
 8016cda:	7960      	ldrb	r0, [r4, #5]
 8016cdc:	28ff      	cmp	r0, #255	@ 0xff
 8016cde:	d145      	bne.n	8016d6c <wait_session_status+0xd4>
 8016ce0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8016ce2:	a908      	add	r1, sp, #32
 8016ce4:	6896      	ldr	r6, [r2, #8]
 8016ce6:	6810      	ldr	r0, [r2, #0]
 8016ce8:	aa09      	add	r2, sp, #36	@ 0x24
 8016cea:	47b0      	blx	r6
 8016cec:	2800      	cmp	r0, #0
 8016cee:	d0ed      	beq.n	8016ccc <wait_session_status+0x34>
 8016cf0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8016cf4:	a80c      	add	r0, sp, #48	@ 0x30
 8016cf6:	f7f9 faaf 	bl	8010258 <ucdr_init_buffer>
 8016cfa:	2600      	movs	r6, #0
 8016cfc:	f10d 031e 	add.w	r3, sp, #30
 8016d00:	aa07      	add	r2, sp, #28
 8016d02:	a90c      	add	r1, sp, #48	@ 0x30
 8016d04:	4620      	mov	r0, r4
 8016d06:	f88d 601c 	strb.w	r6, [sp, #28]
 8016d0a:	f000 fa87 	bl	801721c <uxr_read_session_header>
 8016d0e:	2800      	cmp	r0, #0
 8016d10:	d0dc      	beq.n	8016ccc <wait_session_status+0x34>
 8016d12:	4631      	mov	r1, r6
 8016d14:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8016d18:	f000 ffb6 	bl	8017c88 <uxr_stream_id_from_raw>
 8016d1c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8016d20:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016d24:	9302      	str	r3, [sp, #8]
 8016d26:	2f01      	cmp	r7, #1
 8016d28:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8016d2c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8016d30:	d05c      	beq.n	8016dec <wait_session_status+0x154>
 8016d32:	2f02      	cmp	r7, #2
 8016d34:	d020      	beq.n	8016d78 <wait_session_status+0xe0>
 8016d36:	2f00      	cmp	r7, #0
 8016d38:	d1c8      	bne.n	8016ccc <wait_session_status+0x34>
 8016d3a:	4639      	mov	r1, r7
 8016d3c:	4638      	mov	r0, r7
 8016d3e:	f000 ffa3 	bl	8017c88 <uxr_stream_id_from_raw>
 8016d42:	a90c      	add	r1, sp, #48	@ 0x30
 8016d44:	4602      	mov	r2, r0
 8016d46:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016d48:	4620      	mov	r0, r4
 8016d4a:	f7ff fbd5 	bl	80164f8 <read_submessage_list>
 8016d4e:	f001 f8ef 	bl	8017f30 <uxr_millis>
 8016d52:	1b40      	subs	r0, r0, r5
 8016d54:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	dcbe      	bgt.n	8016cda <wait_session_status+0x42>
 8016d5c:	9b03      	ldr	r3, [sp, #12]
 8016d5e:	7960      	ldrb	r0, [r4, #5]
 8016d60:	f10b 0b01 	add.w	fp, fp, #1
 8016d64:	455b      	cmp	r3, fp
 8016d66:	d001      	beq.n	8016d6c <wait_session_status+0xd4>
 8016d68:	28ff      	cmp	r0, #255	@ 0xff
 8016d6a:	d0a3      	beq.n	8016cb4 <wait_session_status+0x1c>
 8016d6c:	38ff      	subs	r0, #255	@ 0xff
 8016d6e:	bf18      	it	ne
 8016d70:	2001      	movne	r0, #1
 8016d72:	b01d      	add	sp, #116	@ 0x74
 8016d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d78:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8016d7c:	9304      	str	r3, [sp, #16]
 8016d7e:	4631      	mov	r1, r6
 8016d80:	f104 0008 	add.w	r0, r4, #8
 8016d84:	f001 f86e 	bl	8017e64 <uxr_get_input_reliable_stream>
 8016d88:	4680      	mov	r8, r0
 8016d8a:	b348      	cbz	r0, 8016de0 <wait_session_status+0x148>
 8016d8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016d8e:	9205      	str	r2, [sp, #20]
 8016d90:	a80c      	add	r0, sp, #48	@ 0x30
 8016d92:	f7f9 fa91 	bl	80102b8 <ucdr_buffer_remaining>
 8016d96:	4603      	mov	r3, r0
 8016d98:	f10d 001d 	add.w	r0, sp, #29
 8016d9c:	9000      	str	r0, [sp, #0]
 8016d9e:	9a05      	ldr	r2, [sp, #20]
 8016da0:	9902      	ldr	r1, [sp, #8]
 8016da2:	4640      	mov	r0, r8
 8016da4:	f006 f802 	bl	801cdac <uxr_receive_reliable_message>
 8016da8:	b1d0      	cbz	r0, 8016de0 <wait_session_status+0x148>
 8016daa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d03a      	beq.n	8016e28 <wait_session_status+0x190>
 8016db2:	9f04      	ldr	r7, [sp, #16]
 8016db4:	e00a      	b.n	8016dcc <wait_session_status+0x134>
 8016db6:	f04f 0302 	mov.w	r3, #2
 8016dba:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8016dbe:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8016dc2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8016dc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016dc8:	f7ff fb96 	bl	80164f8 <read_submessage_list>
 8016dcc:	a914      	add	r1, sp, #80	@ 0x50
 8016dce:	2204      	movs	r2, #4
 8016dd0:	4640      	mov	r0, r8
 8016dd2:	f006 f86b 	bl	801ceac <uxr_next_input_reliable_buffer_available>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	a914      	add	r1, sp, #80	@ 0x50
 8016dda:	4620      	mov	r0, r4
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d1ea      	bne.n	8016db6 <wait_session_status+0x11e>
 8016de0:	9904      	ldr	r1, [sp, #16]
 8016de2:	4632      	mov	r2, r6
 8016de4:	4620      	mov	r0, r4
 8016de6:	f7ff f9ef 	bl	80161c8 <write_submessage_acknack.isra.0>
 8016dea:	e76f      	b.n	8016ccc <wait_session_status+0x34>
 8016dec:	4631      	mov	r1, r6
 8016dee:	f104 0008 	add.w	r0, r4, #8
 8016df2:	f001 f82d 	bl	8017e50 <uxr_get_input_best_effort_stream>
 8016df6:	2800      	cmp	r0, #0
 8016df8:	f43f af68 	beq.w	8016ccc <wait_session_status+0x34>
 8016dfc:	9902      	ldr	r1, [sp, #8]
 8016dfe:	f005 ff41 	bl	801cc84 <uxr_receive_best_effort_message>
 8016e02:	2800      	cmp	r0, #0
 8016e04:	f43f af62 	beq.w	8016ccc <wait_session_status+0x34>
 8016e08:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8016e0c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016e0e:	a90c      	add	r1, sp, #48	@ 0x30
 8016e10:	4620      	mov	r0, r4
 8016e12:	f7ff fb71 	bl	80164f8 <read_submessage_list>
 8016e16:	e759      	b.n	8016ccc <wait_session_status+0x34>
 8016e18:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016e1a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8016e1e:	47a0      	blx	r4
 8016e20:	2001      	movs	r0, #1
 8016e22:	b01d      	add	sp, #116	@ 0x74
 8016e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e28:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8016e2c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016e2e:	a90c      	add	r1, sp, #48	@ 0x30
 8016e30:	4620      	mov	r0, r4
 8016e32:	f7ff fb61 	bl	80164f8 <read_submessage_list>
 8016e36:	e7bc      	b.n	8016db2 <wait_session_status+0x11a>

08016e38 <uxr_delete_session_retries>:
 8016e38:	b530      	push	{r4, r5, lr}
 8016e3a:	b08f      	sub	sp, #60	@ 0x3c
 8016e3c:	4604      	mov	r4, r0
 8016e3e:	460d      	mov	r5, r1
 8016e40:	f000 fa2e 	bl	80172a0 <uxr_session_header_offset>
 8016e44:	2300      	movs	r3, #0
 8016e46:	2210      	movs	r2, #16
 8016e48:	9000      	str	r0, [sp, #0]
 8016e4a:	a902      	add	r1, sp, #8
 8016e4c:	a806      	add	r0, sp, #24
 8016e4e:	f7f9 f9f1 	bl	8010234 <ucdr_init_buffer_origin_offset>
 8016e52:	a906      	add	r1, sp, #24
 8016e54:	4620      	mov	r0, r4
 8016e56:	f000 f973 	bl	8017140 <uxr_buffer_delete_session>
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	4611      	mov	r1, r2
 8016e5e:	9b06      	ldr	r3, [sp, #24]
 8016e60:	4620      	mov	r0, r4
 8016e62:	f000 f9c7 	bl	80171f4 <uxr_stamp_session_header>
 8016e66:	a806      	add	r0, sp, #24
 8016e68:	f7f9 fa22 	bl	80102b0 <ucdr_buffer_length>
 8016e6c:	462b      	mov	r3, r5
 8016e6e:	4602      	mov	r2, r0
 8016e70:	a902      	add	r1, sp, #8
 8016e72:	4620      	mov	r0, r4
 8016e74:	f7ff ff10 	bl	8016c98 <wait_session_status>
 8016e78:	b118      	cbz	r0, 8016e82 <uxr_delete_session_retries+0x4a>
 8016e7a:	7960      	ldrb	r0, [r4, #5]
 8016e7c:	fab0 f080 	clz	r0, r0
 8016e80:	0940      	lsrs	r0, r0, #5
 8016e82:	b00f      	add	sp, #60	@ 0x3c
 8016e84:	bd30      	pop	{r4, r5, pc}
 8016e86:	bf00      	nop

08016e88 <uxr_create_session>:
 8016e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e8c:	f100 0b08 	add.w	fp, r0, #8
 8016e90:	b0ab      	sub	sp, #172	@ 0xac
 8016e92:	4604      	mov	r4, r0
 8016e94:	4658      	mov	r0, fp
 8016e96:	f000 ff2b 	bl	8017cf0 <uxr_reset_stream_storage>
 8016e9a:	4620      	mov	r0, r4
 8016e9c:	f000 fa00 	bl	80172a0 <uxr_session_header_offset>
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	9000      	str	r0, [sp, #0]
 8016ea4:	221c      	movs	r2, #28
 8016ea6:	a90b      	add	r1, sp, #44	@ 0x2c
 8016ea8:	a812      	add	r0, sp, #72	@ 0x48
 8016eaa:	f7f9 f9c3 	bl	8010234 <ucdr_init_buffer_origin_offset>
 8016eae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016eb0:	8a1a      	ldrh	r2, [r3, #16]
 8016eb2:	3a04      	subs	r2, #4
 8016eb4:	b292      	uxth	r2, r2
 8016eb6:	a912      	add	r1, sp, #72	@ 0x48
 8016eb8:	4620      	mov	r0, r4
 8016eba:	f000 f917 	bl	80170ec <uxr_buffer_create_session>
 8016ebe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016ec0:	4620      	mov	r0, r4
 8016ec2:	f000 f983 	bl	80171cc <uxr_stamp_create_session_header>
 8016ec6:	a812      	add	r0, sp, #72	@ 0x48
 8016ec8:	f7f9 f9f2 	bl	80102b0 <ucdr_buffer_length>
 8016ecc:	23ff      	movs	r3, #255	@ 0xff
 8016ece:	7163      	strb	r3, [r4, #5]
 8016ed0:	230a      	movs	r3, #10
 8016ed2:	46da      	mov	sl, fp
 8016ed4:	9303      	str	r3, [sp, #12]
 8016ed6:	4683      	mov	fp, r0
 8016ed8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016eda:	465a      	mov	r2, fp
 8016edc:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016ee0:	a90b      	add	r1, sp, #44	@ 0x2c
 8016ee2:	47a8      	blx	r5
 8016ee4:	f001 f824 	bl	8017f30 <uxr_millis>
 8016ee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016eec:	4605      	mov	r5, r0
 8016eee:	e009      	b.n	8016f04 <uxr_create_session+0x7c>
 8016ef0:	f001 f81e 	bl	8017f30 <uxr_millis>
 8016ef4:	1b40      	subs	r0, r0, r5
 8016ef6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	7962      	ldrb	r2, [r4, #5]
 8016efe:	dd38      	ble.n	8016f72 <uxr_create_session+0xea>
 8016f00:	2aff      	cmp	r2, #255	@ 0xff
 8016f02:	d13c      	bne.n	8016f7e <uxr_create_session+0xf6>
 8016f04:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8016f06:	a907      	add	r1, sp, #28
 8016f08:	6896      	ldr	r6, [r2, #8]
 8016f0a:	6810      	ldr	r0, [r2, #0]
 8016f0c:	aa08      	add	r2, sp, #32
 8016f0e:	47b0      	blx	r6
 8016f10:	2800      	cmp	r0, #0
 8016f12:	d0ed      	beq.n	8016ef0 <uxr_create_session+0x68>
 8016f14:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8016f18:	a81a      	add	r0, sp, #104	@ 0x68
 8016f1a:	f7f9 f99d 	bl	8010258 <ucdr_init_buffer>
 8016f1e:	2600      	movs	r6, #0
 8016f20:	f10d 031a 	add.w	r3, sp, #26
 8016f24:	aa06      	add	r2, sp, #24
 8016f26:	a91a      	add	r1, sp, #104	@ 0x68
 8016f28:	4620      	mov	r0, r4
 8016f2a:	f88d 6018 	strb.w	r6, [sp, #24]
 8016f2e:	f000 f975 	bl	801721c <uxr_read_session_header>
 8016f32:	2800      	cmp	r0, #0
 8016f34:	d0dc      	beq.n	8016ef0 <uxr_create_session+0x68>
 8016f36:	4631      	mov	r1, r6
 8016f38:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8016f3c:	f000 fea4 	bl	8017c88 <uxr_stream_id_from_raw>
 8016f40:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8016f44:	2e01      	cmp	r6, #1
 8016f46:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8016f4a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8016f4e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8016f52:	d053      	beq.n	8016ffc <uxr_create_session+0x174>
 8016f54:	2e02      	cmp	r6, #2
 8016f56:	d018      	beq.n	8016f8a <uxr_create_session+0x102>
 8016f58:	2e00      	cmp	r6, #0
 8016f5a:	d1c9      	bne.n	8016ef0 <uxr_create_session+0x68>
 8016f5c:	4631      	mov	r1, r6
 8016f5e:	4630      	mov	r0, r6
 8016f60:	f000 fe92 	bl	8017c88 <uxr_stream_id_from_raw>
 8016f64:	a91a      	add	r1, sp, #104	@ 0x68
 8016f66:	4602      	mov	r2, r0
 8016f68:	900a      	str	r0, [sp, #40]	@ 0x28
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	f7ff fac4 	bl	80164f8 <read_submessage_list>
 8016f70:	e7be      	b.n	8016ef0 <uxr_create_session+0x68>
 8016f72:	9b03      	ldr	r3, [sp, #12]
 8016f74:	3b01      	subs	r3, #1
 8016f76:	9303      	str	r3, [sp, #12]
 8016f78:	d001      	beq.n	8016f7e <uxr_create_session+0xf6>
 8016f7a:	2aff      	cmp	r2, #255	@ 0xff
 8016f7c:	d0ac      	beq.n	8016ed8 <uxr_create_session+0x50>
 8016f7e:	2a00      	cmp	r2, #0
 8016f80:	d051      	beq.n	8017026 <uxr_create_session+0x19e>
 8016f82:	2000      	movs	r0, #0
 8016f84:	b02b      	add	sp, #172	@ 0xac
 8016f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f8a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8016f8e:	9304      	str	r3, [sp, #16]
 8016f90:	4639      	mov	r1, r7
 8016f92:	4650      	mov	r0, sl
 8016f94:	f000 ff66 	bl	8017e64 <uxr_get_input_reliable_stream>
 8016f98:	4680      	mov	r8, r0
 8016f9a:	b348      	cbz	r0, 8016ff0 <uxr_create_session+0x168>
 8016f9c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016f9e:	9205      	str	r2, [sp, #20]
 8016fa0:	a81a      	add	r0, sp, #104	@ 0x68
 8016fa2:	f7f9 f989 	bl	80102b8 <ucdr_buffer_remaining>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	f10d 0019 	add.w	r0, sp, #25
 8016fac:	9000      	str	r0, [sp, #0]
 8016fae:	9a05      	ldr	r2, [sp, #20]
 8016fb0:	4649      	mov	r1, r9
 8016fb2:	4640      	mov	r0, r8
 8016fb4:	f005 fefa 	bl	801cdac <uxr_receive_reliable_message>
 8016fb8:	b1d0      	cbz	r0, 8016ff0 <uxr_create_session+0x168>
 8016fba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d038      	beq.n	8017034 <uxr_create_session+0x1ac>
 8016fc2:	9e04      	ldr	r6, [sp, #16]
 8016fc4:	e00a      	b.n	8016fdc <uxr_create_session+0x154>
 8016fc6:	f04f 0302 	mov.w	r3, #2
 8016fca:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8016fce:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8016fd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016fd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016fd8:	f7ff fa8e 	bl	80164f8 <read_submessage_list>
 8016fdc:	a922      	add	r1, sp, #136	@ 0x88
 8016fde:	2204      	movs	r2, #4
 8016fe0:	4640      	mov	r0, r8
 8016fe2:	f005 ff63 	bl	801ceac <uxr_next_input_reliable_buffer_available>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	a922      	add	r1, sp, #136	@ 0x88
 8016fea:	4620      	mov	r0, r4
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d1ea      	bne.n	8016fc6 <uxr_create_session+0x13e>
 8016ff0:	9904      	ldr	r1, [sp, #16]
 8016ff2:	463a      	mov	r2, r7
 8016ff4:	4620      	mov	r0, r4
 8016ff6:	f7ff f8e7 	bl	80161c8 <write_submessage_acknack.isra.0>
 8016ffa:	e779      	b.n	8016ef0 <uxr_create_session+0x68>
 8016ffc:	4639      	mov	r1, r7
 8016ffe:	4650      	mov	r0, sl
 8017000:	f000 ff26 	bl	8017e50 <uxr_get_input_best_effort_stream>
 8017004:	2800      	cmp	r0, #0
 8017006:	f43f af73 	beq.w	8016ef0 <uxr_create_session+0x68>
 801700a:	4649      	mov	r1, r9
 801700c:	f005 fe3a 	bl	801cc84 <uxr_receive_best_effort_message>
 8017010:	2800      	cmp	r0, #0
 8017012:	f43f af6d 	beq.w	8016ef0 <uxr_create_session+0x68>
 8017016:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801701a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801701c:	a91a      	add	r1, sp, #104	@ 0x68
 801701e:	4620      	mov	r0, r4
 8017020:	f7ff fa6a 	bl	80164f8 <read_submessage_list>
 8017024:	e764      	b.n	8016ef0 <uxr_create_session+0x68>
 8017026:	4650      	mov	r0, sl
 8017028:	f000 fe62 	bl	8017cf0 <uxr_reset_stream_storage>
 801702c:	2001      	movs	r0, #1
 801702e:	b02b      	add	sp, #172	@ 0xac
 8017030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017034:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017038:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801703a:	a91a      	add	r1, sp, #104	@ 0x68
 801703c:	4620      	mov	r0, r4
 801703e:	f7ff fa5b 	bl	80164f8 <read_submessage_list>
 8017042:	e7be      	b.n	8016fc2 <uxr_create_session+0x13a>

08017044 <uxr_prepare_stream_to_write_submessage>:
 8017044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017048:	b082      	sub	sp, #8
 801704a:	4682      	mov	sl, r0
 801704c:	4610      	mov	r0, r2
 801704e:	4615      	mov	r5, r2
 8017050:	461e      	mov	r6, r3
 8017052:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8017056:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801705a:	9101      	str	r1, [sp, #4]
 801705c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8017060:	f000 ff60 	bl	8017f24 <uxr_submessage_padding>
 8017064:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017068:	f105 0904 	add.w	r9, r5, #4
 801706c:	2b01      	cmp	r3, #1
 801706e:	4481      	add	r9, r0
 8017070:	d01d      	beq.n	80170ae <uxr_prepare_stream_to_write_submessage+0x6a>
 8017072:	2b02      	cmp	r3, #2
 8017074:	d116      	bne.n	80170a4 <uxr_prepare_stream_to_write_submessage+0x60>
 8017076:	4621      	mov	r1, r4
 8017078:	f10a 0008 	add.w	r0, sl, #8
 801707c:	f000 fede 	bl	8017e3c <uxr_get_output_reliable_stream>
 8017080:	4604      	mov	r4, r0
 8017082:	b158      	cbz	r0, 801709c <uxr_prepare_stream_to_write_submessage+0x58>
 8017084:	4649      	mov	r1, r9
 8017086:	4632      	mov	r2, r6
 8017088:	f006 f8cc 	bl	801d224 <uxr_prepare_reliable_buffer_to_write>
 801708c:	4604      	mov	r4, r0
 801708e:	b12c      	cbz	r4, 801709c <uxr_prepare_stream_to_write_submessage+0x58>
 8017090:	4643      	mov	r3, r8
 8017092:	b2aa      	uxth	r2, r5
 8017094:	4639      	mov	r1, r7
 8017096:	4630      	mov	r0, r6
 8017098:	f000 ff04 	bl	8017ea4 <uxr_buffer_submessage_header>
 801709c:	4620      	mov	r0, r4
 801709e:	b002      	add	sp, #8
 80170a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170a4:	2400      	movs	r4, #0
 80170a6:	4620      	mov	r0, r4
 80170a8:	b002      	add	sp, #8
 80170aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170ae:	4621      	mov	r1, r4
 80170b0:	f10a 0008 	add.w	r0, sl, #8
 80170b4:	f000 feba 	bl	8017e2c <uxr_get_output_best_effort_stream>
 80170b8:	4604      	mov	r4, r0
 80170ba:	2800      	cmp	r0, #0
 80170bc:	d0ee      	beq.n	801709c <uxr_prepare_stream_to_write_submessage+0x58>
 80170be:	4649      	mov	r1, r9
 80170c0:	4632      	mov	r2, r6
 80170c2:	f005 ffdf 	bl	801d084 <uxr_prepare_best_effort_buffer_to_write>
 80170c6:	4604      	mov	r4, r0
 80170c8:	e7e1      	b.n	801708e <uxr_prepare_stream_to_write_submessage+0x4a>
 80170ca:	bf00      	nop

080170cc <uxr_init_session_info>:
 80170cc:	0e13      	lsrs	r3, r2, #24
 80170ce:	7043      	strb	r3, [r0, #1]
 80170d0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80170d4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80170d8:	7001      	strb	r1, [r0, #0]
 80170da:	70c3      	strb	r3, [r0, #3]
 80170dc:	2109      	movs	r1, #9
 80170de:	23ff      	movs	r3, #255	@ 0xff
 80170e0:	f880 c002 	strb.w	ip, [r0, #2]
 80170e4:	7102      	strb	r2, [r0, #4]
 80170e6:	80c1      	strh	r1, [r0, #6]
 80170e8:	7143      	strb	r3, [r0, #5]
 80170ea:	4770      	bx	lr

080170ec <uxr_buffer_create_session>:
 80170ec:	b530      	push	{r4, r5, lr}
 80170ee:	b089      	sub	sp, #36	@ 0x24
 80170f0:	2300      	movs	r3, #0
 80170f2:	4d12      	ldr	r5, [pc, #72]	@ (801713c <uxr_buffer_create_session+0x50>)
 80170f4:	9307      	str	r3, [sp, #28]
 80170f6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80170fa:	2201      	movs	r2, #1
 80170fc:	9301      	str	r3, [sp, #4]
 80170fe:	80c2      	strh	r2, [r0, #6]
 8017100:	f88d 2004 	strb.w	r2, [sp, #4]
 8017104:	682a      	ldr	r2, [r5, #0]
 8017106:	9200      	str	r2, [sp, #0]
 8017108:	88aa      	ldrh	r2, [r5, #4]
 801710a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801710e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8017112:	9202      	str	r2, [sp, #8]
 8017114:	460c      	mov	r4, r1
 8017116:	7802      	ldrb	r2, [r0, #0]
 8017118:	9303      	str	r3, [sp, #12]
 801711a:	4619      	mov	r1, r3
 801711c:	f88d 200c 	strb.w	r2, [sp, #12]
 8017120:	4620      	mov	r0, r4
 8017122:	2210      	movs	r2, #16
 8017124:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8017128:	9306      	str	r3, [sp, #24]
 801712a:	f000 febb 	bl	8017ea4 <uxr_buffer_submessage_header>
 801712e:	4669      	mov	r1, sp
 8017130:	4620      	mov	r0, r4
 8017132:	f001 fe7b 	bl	8018e2c <uxr_serialize_CREATE_CLIENT_Payload>
 8017136:	b009      	add	sp, #36	@ 0x24
 8017138:	bd30      	pop	{r4, r5, pc}
 801713a:	bf00      	nop
 801713c:	0801f7d4 	.word	0x0801f7d4

08017140 <uxr_buffer_delete_session>:
 8017140:	b510      	push	{r4, lr}
 8017142:	4b0c      	ldr	r3, [pc, #48]	@ (8017174 <uxr_buffer_delete_session+0x34>)
 8017144:	b082      	sub	sp, #8
 8017146:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801714a:	f8ad c006 	strh.w	ip, [sp, #6]
 801714e:	460c      	mov	r4, r1
 8017150:	2202      	movs	r2, #2
 8017152:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017156:	80c2      	strh	r2, [r0, #6]
 8017158:	f8ad 3004 	strh.w	r3, [sp, #4]
 801715c:	2204      	movs	r2, #4
 801715e:	2300      	movs	r3, #0
 8017160:	2103      	movs	r1, #3
 8017162:	4620      	mov	r0, r4
 8017164:	f000 fe9e 	bl	8017ea4 <uxr_buffer_submessage_header>
 8017168:	a901      	add	r1, sp, #4
 801716a:	4620      	mov	r0, r4
 801716c:	f001 ff04 	bl	8018f78 <uxr_serialize_DELETE_Payload>
 8017170:	b002      	add	sp, #8
 8017172:	bd10      	pop	{r4, pc}
 8017174:	0801f7d4 	.word	0x0801f7d4

08017178 <uxr_read_create_session_status>:
 8017178:	b510      	push	{r4, lr}
 801717a:	b088      	sub	sp, #32
 801717c:	4604      	mov	r4, r0
 801717e:	4608      	mov	r0, r1
 8017180:	a901      	add	r1, sp, #4
 8017182:	f001 ff09 	bl	8018f98 <uxr_deserialize_STATUS_AGENT_Payload>
 8017186:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801718a:	7163      	strb	r3, [r4, #5]
 801718c:	b008      	add	sp, #32
 801718e:	bd10      	pop	{r4, pc}

08017190 <uxr_read_delete_session_status>:
 8017190:	b510      	push	{r4, lr}
 8017192:	4604      	mov	r4, r0
 8017194:	b084      	sub	sp, #16
 8017196:	4608      	mov	r0, r1
 8017198:	a902      	add	r1, sp, #8
 801719a:	f001 ff2d 	bl	8018ff8 <uxr_deserialize_STATUS_Payload>
 801719e:	88e3      	ldrh	r3, [r4, #6]
 80171a0:	2b02      	cmp	r3, #2
 80171a2:	d001      	beq.n	80171a8 <uxr_read_delete_session_status+0x18>
 80171a4:	b004      	add	sp, #16
 80171a6:	bd10      	pop	{r4, pc}
 80171a8:	f10d 000a 	add.w	r0, sp, #10
 80171ac:	f7fe fe62 	bl	8015e74 <uxr_object_id_from_raw>
 80171b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80171b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80171b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80171bc:	b29b      	uxth	r3, r3
 80171be:	2b02      	cmp	r3, #2
 80171c0:	bf04      	itt	eq
 80171c2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80171c6:	7163      	strbeq	r3, [r4, #5]
 80171c8:	b004      	add	sp, #16
 80171ca:	bd10      	pop	{r4, pc}

080171cc <uxr_stamp_create_session_header>:
 80171cc:	b510      	push	{r4, lr}
 80171ce:	2208      	movs	r2, #8
 80171d0:	b08a      	sub	sp, #40	@ 0x28
 80171d2:	4604      	mov	r4, r0
 80171d4:	eb0d 0002 	add.w	r0, sp, r2
 80171d8:	f7f9 f83e 	bl	8010258 <ucdr_init_buffer>
 80171dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171e0:	9400      	str	r4, [sp, #0]
 80171e2:	2300      	movs	r3, #0
 80171e4:	461a      	mov	r2, r3
 80171e6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80171ea:	a802      	add	r0, sp, #8
 80171ec:	f001 f854 	bl	8018298 <uxr_serialize_message_header>
 80171f0:	b00a      	add	sp, #40	@ 0x28
 80171f2:	bd10      	pop	{r4, pc}

080171f4 <uxr_stamp_session_header>:
 80171f4:	b530      	push	{r4, r5, lr}
 80171f6:	b08d      	sub	sp, #52	@ 0x34
 80171f8:	4604      	mov	r4, r0
 80171fa:	460d      	mov	r5, r1
 80171fc:	9203      	str	r2, [sp, #12]
 80171fe:	4619      	mov	r1, r3
 8017200:	a804      	add	r0, sp, #16
 8017202:	2208      	movs	r2, #8
 8017204:	f7f9 f828 	bl	8010258 <ucdr_init_buffer>
 8017208:	f814 1b01 	ldrb.w	r1, [r4], #1
 801720c:	9b03      	ldr	r3, [sp, #12]
 801720e:	9400      	str	r4, [sp, #0]
 8017210:	462a      	mov	r2, r5
 8017212:	a804      	add	r0, sp, #16
 8017214:	f001 f840 	bl	8018298 <uxr_serialize_message_header>
 8017218:	b00d      	add	sp, #52	@ 0x34
 801721a:	bd30      	pop	{r4, r5, pc}

0801721c <uxr_read_session_header>:
 801721c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017220:	4607      	mov	r7, r0
 8017222:	b084      	sub	sp, #16
 8017224:	4608      	mov	r0, r1
 8017226:	460c      	mov	r4, r1
 8017228:	4615      	mov	r5, r2
 801722a:	461e      	mov	r6, r3
 801722c:	f7f9 f844 	bl	80102b8 <ucdr_buffer_remaining>
 8017230:	2808      	cmp	r0, #8
 8017232:	d803      	bhi.n	801723c <uxr_read_session_header+0x20>
 8017234:	2000      	movs	r0, #0
 8017236:	b004      	add	sp, #16
 8017238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801723c:	f10d 080c 	add.w	r8, sp, #12
 8017240:	4633      	mov	r3, r6
 8017242:	462a      	mov	r2, r5
 8017244:	f8cd 8000 	str.w	r8, [sp]
 8017248:	4620      	mov	r0, r4
 801724a:	f10d 010b 	add.w	r1, sp, #11
 801724e:	f001 f841 	bl	80182d4 <uxr_deserialize_message_header>
 8017252:	783a      	ldrb	r2, [r7, #0]
 8017254:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8017258:	4293      	cmp	r3, r2
 801725a:	d1eb      	bne.n	8017234 <uxr_read_session_header+0x18>
 801725c:	061b      	lsls	r3, r3, #24
 801725e:	d41c      	bmi.n	801729a <uxr_read_session_header+0x7e>
 8017260:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8017264:	787b      	ldrb	r3, [r7, #1]
 8017266:	429a      	cmp	r2, r3
 8017268:	d003      	beq.n	8017272 <uxr_read_session_header+0x56>
 801726a:	2001      	movs	r0, #1
 801726c:	f080 0001 	eor.w	r0, r0, #1
 8017270:	e7e1      	b.n	8017236 <uxr_read_session_header+0x1a>
 8017272:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8017276:	78bb      	ldrb	r3, [r7, #2]
 8017278:	429a      	cmp	r2, r3
 801727a:	f107 0102 	add.w	r1, r7, #2
 801727e:	d1f4      	bne.n	801726a <uxr_read_session_header+0x4e>
 8017280:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8017284:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017288:	429a      	cmp	r2, r3
 801728a:	d1ee      	bne.n	801726a <uxr_read_session_header+0x4e>
 801728c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8017290:	784b      	ldrb	r3, [r1, #1]
 8017292:	429a      	cmp	r2, r3
 8017294:	d1e9      	bne.n	801726a <uxr_read_session_header+0x4e>
 8017296:	2000      	movs	r0, #0
 8017298:	e7e8      	b.n	801726c <uxr_read_session_header+0x50>
 801729a:	2001      	movs	r0, #1
 801729c:	e7cb      	b.n	8017236 <uxr_read_session_header+0x1a>
 801729e:	bf00      	nop

080172a0 <uxr_session_header_offset>:
 80172a0:	f990 3000 	ldrsb.w	r3, [r0]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	bfac      	ite	ge
 80172a8:	2008      	movge	r0, #8
 80172aa:	2004      	movlt	r0, #4
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop

080172b0 <uxr_init_base_object_request>:
 80172b0:	b510      	push	{r4, lr}
 80172b2:	88c3      	ldrh	r3, [r0, #6]
 80172b4:	b082      	sub	sp, #8
 80172b6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80172ba:	9101      	str	r1, [sp, #4]
 80172bc:	f1a3 010a 	sub.w	r1, r3, #10
 80172c0:	b289      	uxth	r1, r1
 80172c2:	42a1      	cmp	r1, r4
 80172c4:	d80e      	bhi.n	80172e4 <uxr_init_base_object_request+0x34>
 80172c6:	3301      	adds	r3, #1
 80172c8:	b29c      	uxth	r4, r3
 80172ca:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80172ce:	b2db      	uxtb	r3, r3
 80172d0:	80c4      	strh	r4, [r0, #6]
 80172d2:	9801      	ldr	r0, [sp, #4]
 80172d4:	7011      	strb	r1, [r2, #0]
 80172d6:	7053      	strb	r3, [r2, #1]
 80172d8:	1c91      	adds	r1, r2, #2
 80172da:	f7fe fddf 	bl	8015e9c <uxr_object_id_to_raw>
 80172de:	4620      	mov	r0, r4
 80172e0:	b002      	add	sp, #8
 80172e2:	bd10      	pop	{r4, pc}
 80172e4:	230a      	movs	r3, #10
 80172e6:	2100      	movs	r1, #0
 80172e8:	461c      	mov	r4, r3
 80172ea:	e7f1      	b.n	80172d0 <uxr_init_base_object_request+0x20>

080172ec <uxr_parse_base_object_request>:
 80172ec:	b570      	push	{r4, r5, r6, lr}
 80172ee:	4604      	mov	r4, r0
 80172f0:	3002      	adds	r0, #2
 80172f2:	460d      	mov	r5, r1
 80172f4:	4616      	mov	r6, r2
 80172f6:	f7fe fdbd 	bl	8015e74 <uxr_object_id_from_raw>
 80172fa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80172fe:	8028      	strh	r0, [r5, #0]
 8017300:	806b      	strh	r3, [r5, #2]
 8017302:	7822      	ldrb	r2, [r4, #0]
 8017304:	7863      	ldrb	r3, [r4, #1]
 8017306:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801730a:	8033      	strh	r3, [r6, #0]
 801730c:	bd70      	pop	{r4, r5, r6, pc}
 801730e:	bf00      	nop

08017310 <uxr_init_framing_io>:
 8017310:	2300      	movs	r3, #0
 8017312:	7041      	strb	r1, [r0, #1]
 8017314:	7003      	strb	r3, [r0, #0]
 8017316:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8017318:	4770      	bx	lr
 801731a:	bf00      	nop

0801731c <uxr_write_framed_msg>:
 801731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017320:	4617      	mov	r7, r2
 8017322:	7842      	ldrb	r2, [r0, #1]
 8017324:	b083      	sub	sp, #12
 8017326:	460e      	mov	r6, r1
 8017328:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801732c:	469a      	mov	sl, r3
 801732e:	2901      	cmp	r1, #1
 8017330:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8017334:	4604      	mov	r4, r0
 8017336:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801733a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801733e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8017342:	f240 8137 	bls.w	80175b4 <uxr_write_framed_msg+0x298>
 8017346:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801734a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801734e:	2901      	cmp	r1, #1
 8017350:	f04f 0202 	mov.w	r2, #2
 8017354:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017358:	f240 808f 	bls.w	801747a <uxr_write_framed_msg+0x15e>
 801735c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801735e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8017362:	b2dd      	uxtb	r5, r3
 8017364:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017368:	2203      	movs	r2, #3
 801736a:	2901      	cmp	r1, #1
 801736c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017370:	f240 809a 	bls.w	80174a8 <uxr_write_framed_msg+0x18c>
 8017374:	18a1      	adds	r1, r4, r2
 8017376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017378:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801737c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017380:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8017384:	3201      	adds	r2, #1
 8017386:	2801      	cmp	r0, #1
 8017388:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801738c:	f240 80a0 	bls.w	80174d0 <uxr_write_framed_msg+0x1b4>
 8017390:	18a0      	adds	r0, r4, r2
 8017392:	3201      	adds	r2, #1
 8017394:	b2d2      	uxtb	r2, r2
 8017396:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801739a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801739e:	2b00      	cmp	r3, #0
 80173a0:	f000 80a9 	beq.w	80174f6 <uxr_write_framed_msg+0x1da>
 80173a4:	f04f 0900 	mov.w	r9, #0
 80173a8:	46c8      	mov	r8, r9
 80173aa:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80173ae:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80173b2:	2901      	cmp	r1, #1
 80173b4:	f240 80c3 	bls.w	801753e <uxr_write_framed_msg+0x222>
 80173b8:	2a29      	cmp	r2, #41	@ 0x29
 80173ba:	f200 809f 	bhi.w	80174fc <uxr_write_framed_msg+0x1e0>
 80173be:	18a1      	adds	r1, r4, r2
 80173c0:	3201      	adds	r2, #1
 80173c2:	b2d2      	uxtb	r2, r2
 80173c4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80173c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80173cc:	ea89 0303 	eor.w	r3, r9, r3
 80173d0:	498c      	ldr	r1, [pc, #560]	@ (8017604 <uxr_write_framed_msg+0x2e8>)
 80173d2:	b2db      	uxtb	r3, r3
 80173d4:	f108 0801 	add.w	r8, r8, #1
 80173d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80173dc:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80173e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173e2:	4543      	cmp	r3, r8
 80173e4:	d8e1      	bhi.n	80173aa <uxr_write_framed_msg+0x8e>
 80173e6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80173ea:	fa5f f889 	uxtb.w	r8, r9
 80173ee:	9301      	str	r3, [sp, #4]
 80173f0:	f04f 0900 	mov.w	r9, #0
 80173f4:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80173f8:	fa5f f18a 	uxtb.w	r1, sl
 80173fc:	2901      	cmp	r1, #1
 80173fe:	d921      	bls.n	8017444 <uxr_write_framed_msg+0x128>
 8017400:	2a29      	cmp	r2, #41	@ 0x29
 8017402:	f240 80af 	bls.w	8017564 <uxr_write_framed_msg+0x248>
 8017406:	2500      	movs	r5, #0
 8017408:	e000      	b.n	801740c <uxr_write_framed_msg+0xf0>
 801740a:	b160      	cbz	r0, 8017426 <uxr_write_framed_msg+0x10a>
 801740c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017410:	1b52      	subs	r2, r2, r5
 8017412:	465b      	mov	r3, fp
 8017414:	4421      	add	r1, r4
 8017416:	4638      	mov	r0, r7
 8017418:	47b0      	blx	r6
 801741a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801741e:	4405      	add	r5, r0
 8017420:	4295      	cmp	r5, r2
 8017422:	d3f2      	bcc.n	801740a <uxr_write_framed_msg+0xee>
 8017424:	d003      	beq.n	801742e <uxr_write_framed_msg+0x112>
 8017426:	2000      	movs	r0, #0
 8017428:	b003      	add	sp, #12
 801742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801742e:	fa5f f18a 	uxtb.w	r1, sl
 8017432:	f04f 0300 	mov.w	r3, #0
 8017436:	2901      	cmp	r1, #1
 8017438:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801743c:	f04f 0200 	mov.w	r2, #0
 8017440:	f200 8090 	bhi.w	8017564 <uxr_write_framed_msg+0x248>
 8017444:	1c51      	adds	r1, r2, #1
 8017446:	b2c9      	uxtb	r1, r1
 8017448:	2929      	cmp	r1, #41	@ 0x29
 801744a:	d8dc      	bhi.n	8017406 <uxr_write_framed_msg+0xea>
 801744c:	18a5      	adds	r5, r4, r2
 801744e:	4421      	add	r1, r4
 8017450:	3202      	adds	r2, #2
 8017452:	f088 0820 	eor.w	r8, r8, #32
 8017456:	4648      	mov	r0, r9
 8017458:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801745c:	b2d2      	uxtb	r2, r2
 801745e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8017462:	f04f 0901 	mov.w	r9, #1
 8017466:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801746a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801746e:	2800      	cmp	r0, #0
 8017470:	f040 8085 	bne.w	801757e <uxr_write_framed_msg+0x262>
 8017474:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017478:	e7bc      	b.n	80173f4 <uxr_write_framed_msg+0xd8>
 801747a:	4611      	mov	r1, r2
 801747c:	f04f 0c03 	mov.w	ip, #3
 8017480:	2204      	movs	r2, #4
 8017482:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017484:	4421      	add	r1, r4
 8017486:	b2dd      	uxtb	r5, r3
 8017488:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801748c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8017490:	44a4      	add	ip, r4
 8017492:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017496:	f080 0020 	eor.w	r0, r0, #32
 801749a:	2901      	cmp	r1, #1
 801749c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80174a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80174a4:	f63f af66 	bhi.w	8017374 <uxr_write_framed_msg+0x58>
 80174a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174aa:	18a0      	adds	r0, r4, r2
 80174ac:	f085 0520 	eor.w	r5, r5, #32
 80174b0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80174b4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80174b8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80174bc:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80174c0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80174c4:	3202      	adds	r2, #2
 80174c6:	2801      	cmp	r0, #1
 80174c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80174cc:	f63f af60 	bhi.w	8017390 <uxr_write_framed_msg+0x74>
 80174d0:	1c50      	adds	r0, r2, #1
 80174d2:	18a5      	adds	r5, r4, r2
 80174d4:	fa54 f080 	uxtab	r0, r4, r0
 80174d8:	3202      	adds	r2, #2
 80174da:	f081 0120 	eor.w	r1, r1, #32
 80174de:	b2d2      	uxtb	r2, r2
 80174e0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80174e4:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 80174e8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80174ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	f47f af57 	bne.w	80173a4 <uxr_write_framed_msg+0x88>
 80174f6:	9301      	str	r3, [sp, #4]
 80174f8:	4698      	mov	r8, r3
 80174fa:	e779      	b.n	80173f0 <uxr_write_framed_msg+0xd4>
 80174fc:	2500      	movs	r5, #0
 80174fe:	e001      	b.n	8017504 <uxr_write_framed_msg+0x1e8>
 8017500:	2800      	cmp	r0, #0
 8017502:	d090      	beq.n	8017426 <uxr_write_framed_msg+0x10a>
 8017504:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017508:	1b52      	subs	r2, r2, r5
 801750a:	465b      	mov	r3, fp
 801750c:	4421      	add	r1, r4
 801750e:	4638      	mov	r0, r7
 8017510:	47b0      	blx	r6
 8017512:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017516:	4405      	add	r5, r0
 8017518:	4295      	cmp	r5, r2
 801751a:	d3f1      	bcc.n	8017500 <uxr_write_framed_msg+0x1e4>
 801751c:	d183      	bne.n	8017426 <uxr_write_framed_msg+0x10a>
 801751e:	f04f 0300 	mov.w	r3, #0
 8017522:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017526:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017528:	4543      	cmp	r3, r8
 801752a:	d964      	bls.n	80175f6 <uxr_write_framed_msg+0x2da>
 801752c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8017530:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8017534:	2901      	cmp	r1, #1
 8017536:	f04f 0200 	mov.w	r2, #0
 801753a:	f63f af3d 	bhi.w	80173b8 <uxr_write_framed_msg+0x9c>
 801753e:	1c51      	adds	r1, r2, #1
 8017540:	b2c9      	uxtb	r1, r1
 8017542:	2929      	cmp	r1, #41	@ 0x29
 8017544:	d8da      	bhi.n	80174fc <uxr_write_framed_msg+0x1e0>
 8017546:	18a0      	adds	r0, r4, r2
 8017548:	4421      	add	r1, r4
 801754a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801754e:	3202      	adds	r2, #2
 8017550:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8017554:	b2d2      	uxtb	r2, r2
 8017556:	f083 0020 	eor.w	r0, r3, #32
 801755a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801755e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017562:	e733      	b.n	80173cc <uxr_write_framed_msg+0xb0>
 8017564:	18a1      	adds	r1, r4, r2
 8017566:	3201      	adds	r2, #1
 8017568:	4648      	mov	r0, r9
 801756a:	b2d2      	uxtb	r2, r2
 801756c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8017570:	f04f 0901 	mov.w	r9, #1
 8017574:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017578:	2800      	cmp	r0, #0
 801757a:	f43f af7b 	beq.w	8017474 <uxr_write_framed_msg+0x158>
 801757e:	2500      	movs	r5, #0
 8017580:	e002      	b.n	8017588 <uxr_write_framed_msg+0x26c>
 8017582:	2800      	cmp	r0, #0
 8017584:	f43f af4f 	beq.w	8017426 <uxr_write_framed_msg+0x10a>
 8017588:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801758c:	1b52      	subs	r2, r2, r5
 801758e:	465b      	mov	r3, fp
 8017590:	4421      	add	r1, r4
 8017592:	4638      	mov	r0, r7
 8017594:	47b0      	blx	r6
 8017596:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801759a:	4405      	add	r5, r0
 801759c:	4295      	cmp	r5, r2
 801759e:	d3f0      	bcc.n	8017582 <uxr_write_framed_msg+0x266>
 80175a0:	f47f af41 	bne.w	8017426 <uxr_write_framed_msg+0x10a>
 80175a4:	2300      	movs	r3, #0
 80175a6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80175aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175ac:	b298      	uxth	r0, r3
 80175ae:	b003      	add	sp, #12
 80175b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b4:	217d      	movs	r1, #125	@ 0x7d
 80175b6:	f082 0220 	eor.w	r2, r2, #32
 80175ba:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80175be:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80175c2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80175c6:	2901      	cmp	r1, #1
 80175c8:	f04f 0203 	mov.w	r2, #3
 80175cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80175d0:	d804      	bhi.n	80175dc <uxr_write_framed_msg+0x2c0>
 80175d2:	4611      	mov	r1, r2
 80175d4:	f04f 0c04 	mov.w	ip, #4
 80175d8:	2205      	movs	r2, #5
 80175da:	e752      	b.n	8017482 <uxr_write_framed_msg+0x166>
 80175dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175de:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80175e2:	b2dd      	uxtb	r5, r3
 80175e4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80175e8:	2204      	movs	r2, #4
 80175ea:	2901      	cmp	r1, #1
 80175ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80175f0:	f63f aec0 	bhi.w	8017374 <uxr_write_framed_msg+0x58>
 80175f4:	e758      	b.n	80174a8 <uxr_write_framed_msg+0x18c>
 80175f6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80175fa:	fa5f f889 	uxtb.w	r8, r9
 80175fe:	9301      	str	r3, [sp, #4]
 8017600:	2200      	movs	r2, #0
 8017602:	e6f5      	b.n	80173f0 <uxr_write_framed_msg+0xd4>
 8017604:	080210cc 	.word	0x080210cc

08017608 <uxr_framing_read_transport>:
 8017608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801760c:	4604      	mov	r4, r0
 801760e:	b083      	sub	sp, #12
 8017610:	461f      	mov	r7, r3
 8017612:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8017616:	4689      	mov	r9, r1
 8017618:	4692      	mov	sl, r2
 801761a:	f000 fc89 	bl	8017f30 <uxr_millis>
 801761e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017622:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8017626:	42b3      	cmp	r3, r6
 8017628:	4680      	mov	r8, r0
 801762a:	d061      	beq.n	80176f0 <uxr_framing_read_transport+0xe8>
 801762c:	d81c      	bhi.n	8017668 <uxr_framing_read_transport+0x60>
 801762e:	1e75      	subs	r5, r6, #1
 8017630:	1aed      	subs	r5, r5, r3
 8017632:	b2ed      	uxtb	r5, r5
 8017634:	2600      	movs	r6, #0
 8017636:	455d      	cmp	r5, fp
 8017638:	d81f      	bhi.n	801767a <uxr_framing_read_transport+0x72>
 801763a:	19ab      	adds	r3, r5, r6
 801763c:	455b      	cmp	r3, fp
 801763e:	bf84      	itt	hi
 8017640:	ebab 0605 	subhi.w	r6, fp, r5
 8017644:	b2f6      	uxtbhi	r6, r6
 8017646:	b9ed      	cbnz	r5, 8017684 <uxr_framing_read_transport+0x7c>
 8017648:	f04f 0b00 	mov.w	fp, #0
 801764c:	f000 fc70 	bl	8017f30 <uxr_millis>
 8017650:	683b      	ldr	r3, [r7, #0]
 8017652:	eba0 0808 	sub.w	r8, r0, r8
 8017656:	eba3 0308 	sub.w	r3, r3, r8
 801765a:	4658      	mov	r0, fp
 801765c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017660:	603b      	str	r3, [r7, #0]
 8017662:	b003      	add	sp, #12
 8017664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017668:	2e00      	cmp	r6, #0
 801766a:	d049      	beq.n	8017700 <uxr_framing_read_transport+0xf8>
 801766c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8017670:	b2ed      	uxtb	r5, r5
 8017672:	3e01      	subs	r6, #1
 8017674:	455d      	cmp	r5, fp
 8017676:	b2f6      	uxtb	r6, r6
 8017678:	d9df      	bls.n	801763a <uxr_framing_read_transport+0x32>
 801767a:	fa5f f58b 	uxtb.w	r5, fp
 801767e:	2600      	movs	r6, #0
 8017680:	2d00      	cmp	r5, #0
 8017682:	d0e1      	beq.n	8017648 <uxr_framing_read_transport+0x40>
 8017684:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017688:	3102      	adds	r1, #2
 801768a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801768c:	9300      	str	r3, [sp, #0]
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	4421      	add	r1, r4
 8017692:	462a      	mov	r2, r5
 8017694:	4650      	mov	r0, sl
 8017696:	47c8      	blx	r9
 8017698:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801769c:	4a1a      	ldr	r2, [pc, #104]	@ (8017708 <uxr_framing_read_transport+0x100>)
 801769e:	4403      	add	r3, r0
 80176a0:	0859      	lsrs	r1, r3, #1
 80176a2:	fba2 2101 	umull	r2, r1, r2, r1
 80176a6:	0889      	lsrs	r1, r1, #2
 80176a8:	222a      	movs	r2, #42	@ 0x2a
 80176aa:	fb02 3111 	mls	r1, r2, r1, r3
 80176ae:	4683      	mov	fp, r0
 80176b0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80176b4:	2800      	cmp	r0, #0
 80176b6:	d0c7      	beq.n	8017648 <uxr_framing_read_transport+0x40>
 80176b8:	42a8      	cmp	r0, r5
 80176ba:	d1c7      	bne.n	801764c <uxr_framing_read_transport+0x44>
 80176bc:	2e00      	cmp	r6, #0
 80176be:	d0c5      	beq.n	801764c <uxr_framing_read_transport+0x44>
 80176c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176c2:	9300      	str	r3, [sp, #0]
 80176c4:	3102      	adds	r1, #2
 80176c6:	4632      	mov	r2, r6
 80176c8:	4421      	add	r1, r4
 80176ca:	2300      	movs	r3, #0
 80176cc:	4650      	mov	r0, sl
 80176ce:	47c8      	blx	r9
 80176d0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80176d4:	4a0c      	ldr	r2, [pc, #48]	@ (8017708 <uxr_framing_read_transport+0x100>)
 80176d6:	180b      	adds	r3, r1, r0
 80176d8:	0859      	lsrs	r1, r3, #1
 80176da:	fba2 1201 	umull	r1, r2, r2, r1
 80176de:	0892      	lsrs	r2, r2, #2
 80176e0:	212a      	movs	r1, #42	@ 0x2a
 80176e2:	fb01 3312 	mls	r3, r1, r2, r3
 80176e6:	eb00 0b05 	add.w	fp, r0, r5
 80176ea:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80176ee:	e7ad      	b.n	801764c <uxr_framing_read_transport+0x44>
 80176f0:	2600      	movs	r6, #0
 80176f2:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80176f6:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80176f8:	d9bf      	bls.n	801767a <uxr_framing_read_transport+0x72>
 80176fa:	2102      	movs	r1, #2
 80176fc:	2529      	movs	r5, #41	@ 0x29
 80176fe:	e7c4      	b.n	801768a <uxr_framing_read_transport+0x82>
 8017700:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8017704:	b2ed      	uxtb	r5, r5
 8017706:	e796      	b.n	8017636 <uxr_framing_read_transport+0x2e>
 8017708:	30c30c31 	.word	0x30c30c31

0801770c <uxr_read_framed_msg>:
 801770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017710:	461e      	mov	r6, r3
 8017712:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8017716:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801771a:	429d      	cmp	r5, r3
 801771c:	b083      	sub	sp, #12
 801771e:	4604      	mov	r4, r0
 8017720:	4688      	mov	r8, r1
 8017722:	4691      	mov	r9, r2
 8017724:	f000 8188 	beq.w	8017a38 <uxr_read_framed_msg+0x32c>
 8017728:	7823      	ldrb	r3, [r4, #0]
 801772a:	4dc1      	ldr	r5, [pc, #772]	@ (8017a30 <uxr_read_framed_msg+0x324>)
 801772c:	4fc1      	ldr	r7, [pc, #772]	@ (8017a34 <uxr_read_framed_msg+0x328>)
 801772e:	2b07      	cmp	r3, #7
 8017730:	d8fd      	bhi.n	801772e <uxr_read_framed_msg+0x22>
 8017732:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017736:	0115      	.short	0x0115
 8017738:	00d600f6 	.word	0x00d600f6
 801773c:	009000b9 	.word	0x009000b9
 8017740:	0030004d 	.word	0x0030004d
 8017744:	0008      	.short	0x0008
 8017746:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801774a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801774e:	4299      	cmp	r1, r3
 8017750:	f000 814a 	beq.w	80179e8 <uxr_read_framed_msg+0x2dc>
 8017754:	18e2      	adds	r2, r4, r3
 8017756:	7892      	ldrb	r2, [r2, #2]
 8017758:	2a7d      	cmp	r2, #125	@ 0x7d
 801775a:	f000 8199 	beq.w	8017a90 <uxr_read_framed_msg+0x384>
 801775e:	3301      	adds	r3, #1
 8017760:	0858      	lsrs	r0, r3, #1
 8017762:	fba5 1000 	umull	r1, r0, r5, r0
 8017766:	0880      	lsrs	r0, r0, #2
 8017768:	212a      	movs	r1, #42	@ 0x2a
 801776a:	fb01 3310 	mls	r3, r1, r0, r3
 801776e:	2a7e      	cmp	r2, #126	@ 0x7e
 8017770:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017774:	f000 8252 	beq.w	8017c1c <uxr_read_framed_msg+0x510>
 8017778:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801777a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801777c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017780:	b29b      	uxth	r3, r3
 8017782:	2200      	movs	r2, #0
 8017784:	4299      	cmp	r1, r3
 8017786:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8017788:	7022      	strb	r2, [r4, #0]
 801778a:	f000 8179 	beq.w	8017a80 <uxr_read_framed_msg+0x374>
 801778e:	2000      	movs	r0, #0
 8017790:	b003      	add	sp, #12
 8017792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017796:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801779a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801779e:	4299      	cmp	r1, r3
 80177a0:	f000 8131 	beq.w	8017a06 <uxr_read_framed_msg+0x2fa>
 80177a4:	18e2      	adds	r2, r4, r3
 80177a6:	7890      	ldrb	r0, [r2, #2]
 80177a8:	287d      	cmp	r0, #125	@ 0x7d
 80177aa:	f000 8190 	beq.w	8017ace <uxr_read_framed_msg+0x3c2>
 80177ae:	3301      	adds	r3, #1
 80177b0:	085a      	lsrs	r2, r3, #1
 80177b2:	fba5 1202 	umull	r1, r2, r5, r2
 80177b6:	0892      	lsrs	r2, r2, #2
 80177b8:	212a      	movs	r1, #42	@ 0x2a
 80177ba:	fb01 3312 	mls	r3, r1, r2, r3
 80177be:	287e      	cmp	r0, #126	@ 0x7e
 80177c0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80177c4:	f000 821a 	beq.w	8017bfc <uxr_read_framed_msg+0x4f0>
 80177c8:	2307      	movs	r3, #7
 80177ca:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80177cc:	7023      	strb	r3, [r4, #0]
 80177ce:	e7ae      	b.n	801772e <uxr_read_framed_msg+0x22>
 80177d0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80177d2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80177d6:	459e      	cmp	lr, r3
 80177d8:	d938      	bls.n	801784c <uxr_read_framed_msg+0x140>
 80177da:	ee07 8a90 	vmov	s15, r8
 80177de:	212a      	movs	r1, #42	@ 0x2a
 80177e0:	e020      	b.n	8017824 <uxr_read_framed_msg+0x118>
 80177e2:	f89b c002 	ldrb.w	ip, [fp, #2]
 80177e6:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80177ea:	f000 80d4 	beq.w	8017996 <uxr_read_framed_msg+0x28a>
 80177ee:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80177f2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80177f6:	f000 8219 	beq.w	8017c2c <uxr_read_framed_msg+0x520>
 80177fa:	f806 c003 	strb.w	ip, [r6, r3]
 80177fe:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8017802:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017804:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8017808:	ea8a 000c 	eor.w	r0, sl, ip
 801780c:	b2c0      	uxtb	r0, r0
 801780e:	3301      	adds	r3, #1
 8017810:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8017814:	b29b      	uxth	r3, r3
 8017816:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801781a:	4573      	cmp	r3, lr
 801781c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801781e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8017820:	f080 8120 	bcs.w	8017a64 <uxr_read_framed_msg+0x358>
 8017824:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8017828:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801782c:	f100 0c01 	add.w	ip, r0, #1
 8017830:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017834:	fba5 8202 	umull	r8, r2, r5, r2
 8017838:	0892      	lsrs	r2, r2, #2
 801783a:	4582      	cmp	sl, r0
 801783c:	eb04 0b00 	add.w	fp, r4, r0
 8017840:	fb01 c212 	mls	r2, r1, r2, ip
 8017844:	d1cd      	bne.n	80177e2 <uxr_read_framed_msg+0xd6>
 8017846:	ee17 8a90 	vmov	r8, s15
 801784a:	459e      	cmp	lr, r3
 801784c:	f040 8111 	bne.w	8017a72 <uxr_read_framed_msg+0x366>
 8017850:	2306      	movs	r3, #6
 8017852:	7023      	strb	r3, [r4, #0]
 8017854:	e76b      	b.n	801772e <uxr_read_framed_msg+0x22>
 8017856:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801785a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801785e:	4298      	cmp	r0, r3
 8017860:	f000 80c2 	beq.w	80179e8 <uxr_read_framed_msg+0x2dc>
 8017864:	18e2      	adds	r2, r4, r3
 8017866:	7891      	ldrb	r1, [r2, #2]
 8017868:	297d      	cmp	r1, #125	@ 0x7d
 801786a:	f000 814c 	beq.w	8017b06 <uxr_read_framed_msg+0x3fa>
 801786e:	3301      	adds	r3, #1
 8017870:	085a      	lsrs	r2, r3, #1
 8017872:	fba5 0202 	umull	r0, r2, r5, r2
 8017876:	0892      	lsrs	r2, r2, #2
 8017878:	202a      	movs	r0, #42	@ 0x2a
 801787a:	fb00 3312 	mls	r3, r0, r2, r3
 801787e:	297e      	cmp	r1, #126	@ 0x7e
 8017880:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017884:	f000 81ca 	beq.w	8017c1c <uxr_read_framed_msg+0x510>
 8017888:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801788a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801788e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017890:	b29b      	uxth	r3, r3
 8017892:	2000      	movs	r0, #0
 8017894:	428b      	cmp	r3, r1
 8017896:	8623      	strh	r3, [r4, #48]	@ 0x30
 8017898:	8660      	strh	r0, [r4, #50]	@ 0x32
 801789a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801789c:	f240 80df 	bls.w	8017a5e <uxr_read_framed_msg+0x352>
 80178a0:	7020      	strb	r0, [r4, #0]
 80178a2:	b003      	add	sp, #12
 80178a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178a8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80178ac:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80178b0:	4299      	cmp	r1, r3
 80178b2:	f000 80a8 	beq.w	8017a06 <uxr_read_framed_msg+0x2fa>
 80178b6:	18e2      	adds	r2, r4, r3
 80178b8:	7890      	ldrb	r0, [r2, #2]
 80178ba:	287d      	cmp	r0, #125	@ 0x7d
 80178bc:	f000 8164 	beq.w	8017b88 <uxr_read_framed_msg+0x47c>
 80178c0:	3301      	adds	r3, #1
 80178c2:	085a      	lsrs	r2, r3, #1
 80178c4:	fba5 1202 	umull	r1, r2, r5, r2
 80178c8:	0892      	lsrs	r2, r2, #2
 80178ca:	212a      	movs	r1, #42	@ 0x2a
 80178cc:	fb01 3312 	mls	r3, r1, r2, r3
 80178d0:	287e      	cmp	r0, #126	@ 0x7e
 80178d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80178d6:	f000 8191 	beq.w	8017bfc <uxr_read_framed_msg+0x4f0>
 80178da:	2304      	movs	r3, #4
 80178dc:	8620      	strh	r0, [r4, #48]	@ 0x30
 80178de:	7023      	strb	r3, [r4, #0]
 80178e0:	e725      	b.n	801772e <uxr_read_framed_msg+0x22>
 80178e2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80178e6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80178ea:	4290      	cmp	r0, r2
 80178ec:	f000 80b3 	beq.w	8017a56 <uxr_read_framed_msg+0x34a>
 80178f0:	18a3      	adds	r3, r4, r2
 80178f2:	7899      	ldrb	r1, [r3, #2]
 80178f4:	297d      	cmp	r1, #125	@ 0x7d
 80178f6:	f000 8164 	beq.w	8017bc2 <uxr_read_framed_msg+0x4b6>
 80178fa:	3201      	adds	r2, #1
 80178fc:	0850      	lsrs	r0, r2, #1
 80178fe:	fba5 3000 	umull	r3, r0, r5, r0
 8017902:	0880      	lsrs	r0, r0, #2
 8017904:	232a      	movs	r3, #42	@ 0x2a
 8017906:	fb03 2210 	mls	r2, r3, r0, r2
 801790a:	297e      	cmp	r1, #126	@ 0x7e
 801790c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017910:	f000 8188 	beq.w	8017c24 <uxr_read_framed_msg+0x518>
 8017914:	7863      	ldrb	r3, [r4, #1]
 8017916:	428b      	cmp	r3, r1
 8017918:	bf0c      	ite	eq
 801791a:	2303      	moveq	r3, #3
 801791c:	2300      	movne	r3, #0
 801791e:	7023      	strb	r3, [r4, #0]
 8017920:	e705      	b.n	801772e <uxr_read_framed_msg+0x22>
 8017922:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017926:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801792a:	2200      	movs	r2, #0
 801792c:	4299      	cmp	r1, r3
 801792e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8017932:	d06c      	beq.n	8017a0e <uxr_read_framed_msg+0x302>
 8017934:	18e2      	adds	r2, r4, r3
 8017936:	7890      	ldrb	r0, [r2, #2]
 8017938:	287d      	cmp	r0, #125	@ 0x7d
 801793a:	f000 8101 	beq.w	8017b40 <uxr_read_framed_msg+0x434>
 801793e:	3301      	adds	r3, #1
 8017940:	085a      	lsrs	r2, r3, #1
 8017942:	fba5 1202 	umull	r1, r2, r5, r2
 8017946:	0892      	lsrs	r2, r2, #2
 8017948:	212a      	movs	r1, #42	@ 0x2a
 801794a:	fb01 3312 	mls	r3, r1, r2, r3
 801794e:	287e      	cmp	r0, #126	@ 0x7e
 8017950:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8017954:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017958:	d059      	beq.n	8017a0e <uxr_read_framed_msg+0x302>
 801795a:	2302      	movs	r3, #2
 801795c:	7023      	strb	r3, [r4, #0]
 801795e:	e6e6      	b.n	801772e <uxr_read_framed_msg+0x22>
 8017960:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017964:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017968:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801796c:	1c51      	adds	r1, r2, #1
 801796e:	084b      	lsrs	r3, r1, #1
 8017970:	fba5 c303 	umull	ip, r3, r5, r3
 8017974:	089b      	lsrs	r3, r3, #2
 8017976:	fb0e 1313 	mls	r3, lr, r3, r1
 801797a:	4592      	cmp	sl, r2
 801797c:	eb04 0002 	add.w	r0, r4, r2
 8017980:	b2da      	uxtb	r2, r3
 8017982:	f43f af04 	beq.w	801778e <uxr_read_framed_msg+0x82>
 8017986:	7883      	ldrb	r3, [r0, #2]
 8017988:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801798c:	2b7e      	cmp	r3, #126	@ 0x7e
 801798e:	d1ed      	bne.n	801796c <uxr_read_framed_msg+0x260>
 8017990:	2301      	movs	r3, #1
 8017992:	7023      	strb	r3, [r4, #0]
 8017994:	e6cb      	b.n	801772e <uxr_read_framed_msg+0x22>
 8017996:	f100 0c01 	add.w	ip, r0, #1
 801799a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801799e:	fba5 8202 	umull	r8, r2, r5, r2
 80179a2:	0892      	lsrs	r2, r2, #2
 80179a4:	fb01 c212 	mls	r2, r1, r2, ip
 80179a8:	eb04 0c02 	add.w	ip, r4, r2
 80179ac:	b2d2      	uxtb	r2, r2
 80179ae:	4592      	cmp	sl, r2
 80179b0:	f100 0002 	add.w	r0, r0, #2
 80179b4:	f43f af47 	beq.w	8017846 <uxr_read_framed_msg+0x13a>
 80179b8:	0842      	lsrs	r2, r0, #1
 80179ba:	f89c a002 	ldrb.w	sl, [ip, #2]
 80179be:	fba5 8202 	umull	r8, r2, r5, r2
 80179c2:	0892      	lsrs	r2, r2, #2
 80179c4:	fb01 0012 	mls	r0, r1, r2, r0
 80179c8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80179cc:	f08a 0c20 	eor.w	ip, sl, #32
 80179d0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80179d4:	f47f af11 	bne.w	80177fa <uxr_read_framed_msg+0xee>
 80179d8:	459e      	cmp	lr, r3
 80179da:	ee17 8a90 	vmov	r8, s15
 80179de:	f43f af37 	beq.w	8017850 <uxr_read_framed_msg+0x144>
 80179e2:	2301      	movs	r3, #1
 80179e4:	7023      	strb	r3, [r4, #0]
 80179e6:	e6a2      	b.n	801772e <uxr_read_framed_msg+0x22>
 80179e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80179ea:	9300      	str	r3, [sp, #0]
 80179ec:	2301      	movs	r3, #1
 80179ee:	9301      	str	r3, [sp, #4]
 80179f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80179f2:	464a      	mov	r2, r9
 80179f4:	4641      	mov	r1, r8
 80179f6:	4620      	mov	r0, r4
 80179f8:	f7ff fe06 	bl	8017608 <uxr_framing_read_transport>
 80179fc:	2800      	cmp	r0, #0
 80179fe:	f43f aec6 	beq.w	801778e <uxr_read_framed_msg+0x82>
 8017a02:	7823      	ldrb	r3, [r4, #0]
 8017a04:	e693      	b.n	801772e <uxr_read_framed_msg+0x22>
 8017a06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a08:	9300      	str	r3, [sp, #0]
 8017a0a:	2302      	movs	r3, #2
 8017a0c:	e7ef      	b.n	80179ee <uxr_read_framed_msg+0x2e2>
 8017a0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a10:	9300      	str	r3, [sp, #0]
 8017a12:	2304      	movs	r3, #4
 8017a14:	9301      	str	r3, [sp, #4]
 8017a16:	464a      	mov	r2, r9
 8017a18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a1a:	4641      	mov	r1, r8
 8017a1c:	4620      	mov	r0, r4
 8017a1e:	f7ff fdf3 	bl	8017608 <uxr_framing_read_transport>
 8017a22:	2800      	cmp	r0, #0
 8017a24:	d1ed      	bne.n	8017a02 <uxr_read_framed_msg+0x2f6>
 8017a26:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017a2a:	2b7e      	cmp	r3, #126	@ 0x7e
 8017a2c:	d0e9      	beq.n	8017a02 <uxr_read_framed_msg+0x2f6>
 8017a2e:	e6ae      	b.n	801778e <uxr_read_framed_msg+0x82>
 8017a30:	30c30c31 	.word	0x30c30c31
 8017a34:	080210cc 	.word	0x080210cc
 8017a38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a3a:	9300      	str	r3, [sp, #0]
 8017a3c:	2305      	movs	r3, #5
 8017a3e:	9301      	str	r3, [sp, #4]
 8017a40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a42:	f7ff fde1 	bl	8017608 <uxr_framing_read_transport>
 8017a46:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017a4a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017a4e:	429a      	cmp	r2, r3
 8017a50:	f43f ae9d 	beq.w	801778e <uxr_read_framed_msg+0x82>
 8017a54:	e668      	b.n	8017728 <uxr_read_framed_msg+0x1c>
 8017a56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a58:	9300      	str	r3, [sp, #0]
 8017a5a:	2303      	movs	r3, #3
 8017a5c:	e7c7      	b.n	80179ee <uxr_read_framed_msg+0x2e2>
 8017a5e:	2305      	movs	r3, #5
 8017a60:	7023      	strb	r3, [r4, #0]
 8017a62:	e664      	b.n	801772e <uxr_read_framed_msg+0x22>
 8017a64:	ee17 8a90 	vmov	r8, s15
 8017a68:	f43f aef2 	beq.w	8017850 <uxr_read_framed_msg+0x144>
 8017a6c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017a70:	d08e      	beq.n	8017990 <uxr_read_framed_msg+0x284>
 8017a72:	ebae 0303 	sub.w	r3, lr, r3
 8017a76:	3302      	adds	r3, #2
 8017a78:	9301      	str	r3, [sp, #4]
 8017a7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a7c:	9300      	str	r3, [sp, #0]
 8017a7e:	e7b7      	b.n	80179f0 <uxr_read_framed_msg+0x2e4>
 8017a80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017a82:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017a86:	7013      	strb	r3, [r2, #0]
 8017a88:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8017a8a:	b003      	add	sp, #12
 8017a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a90:	f103 0c01 	add.w	ip, r3, #1
 8017a94:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017a98:	fba5 0202 	umull	r0, r2, r5, r2
 8017a9c:	0892      	lsrs	r2, r2, #2
 8017a9e:	202a      	movs	r0, #42	@ 0x2a
 8017aa0:	fb00 c212 	mls	r2, r0, r2, ip
 8017aa4:	fa5f fc82 	uxtb.w	ip, r2
 8017aa8:	4561      	cmp	r1, ip
 8017aaa:	d09d      	beq.n	80179e8 <uxr_read_framed_msg+0x2dc>
 8017aac:	3302      	adds	r3, #2
 8017aae:	4422      	add	r2, r4
 8017ab0:	0859      	lsrs	r1, r3, #1
 8017ab2:	7892      	ldrb	r2, [r2, #2]
 8017ab4:	fba5 c101 	umull	ip, r1, r5, r1
 8017ab8:	0889      	lsrs	r1, r1, #2
 8017aba:	fb00 3311 	mls	r3, r0, r1, r3
 8017abe:	2a7e      	cmp	r2, #126	@ 0x7e
 8017ac0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017ac4:	f000 80aa 	beq.w	8017c1c <uxr_read_framed_msg+0x510>
 8017ac8:	f082 0220 	eor.w	r2, r2, #32
 8017acc:	e654      	b.n	8017778 <uxr_read_framed_msg+0x6c>
 8017ace:	1c58      	adds	r0, r3, #1
 8017ad0:	0842      	lsrs	r2, r0, #1
 8017ad2:	fba5 c202 	umull	ip, r2, r5, r2
 8017ad6:	0892      	lsrs	r2, r2, #2
 8017ad8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017adc:	fb0c 0212 	mls	r2, ip, r2, r0
 8017ae0:	b2d0      	uxtb	r0, r2
 8017ae2:	4281      	cmp	r1, r0
 8017ae4:	d08f      	beq.n	8017a06 <uxr_read_framed_msg+0x2fa>
 8017ae6:	4422      	add	r2, r4
 8017ae8:	3302      	adds	r3, #2
 8017aea:	7890      	ldrb	r0, [r2, #2]
 8017aec:	085a      	lsrs	r2, r3, #1
 8017aee:	fba5 1202 	umull	r1, r2, r5, r2
 8017af2:	0892      	lsrs	r2, r2, #2
 8017af4:	fb0c 3312 	mls	r3, ip, r2, r3
 8017af8:	287e      	cmp	r0, #126	@ 0x7e
 8017afa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017afe:	d07d      	beq.n	8017bfc <uxr_read_framed_msg+0x4f0>
 8017b00:	f080 0020 	eor.w	r0, r0, #32
 8017b04:	e660      	b.n	80177c8 <uxr_read_framed_msg+0xbc>
 8017b06:	1c59      	adds	r1, r3, #1
 8017b08:	084a      	lsrs	r2, r1, #1
 8017b0a:	fba5 c202 	umull	ip, r2, r5, r2
 8017b0e:	0892      	lsrs	r2, r2, #2
 8017b10:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017b14:	fb0c 1212 	mls	r2, ip, r2, r1
 8017b18:	b2d1      	uxtb	r1, r2
 8017b1a:	4288      	cmp	r0, r1
 8017b1c:	f43f af64 	beq.w	80179e8 <uxr_read_framed_msg+0x2dc>
 8017b20:	4422      	add	r2, r4
 8017b22:	3302      	adds	r3, #2
 8017b24:	7891      	ldrb	r1, [r2, #2]
 8017b26:	085a      	lsrs	r2, r3, #1
 8017b28:	fba5 0202 	umull	r0, r2, r5, r2
 8017b2c:	0892      	lsrs	r2, r2, #2
 8017b2e:	fb0c 3312 	mls	r3, ip, r2, r3
 8017b32:	297e      	cmp	r1, #126	@ 0x7e
 8017b34:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017b38:	d070      	beq.n	8017c1c <uxr_read_framed_msg+0x510>
 8017b3a:	f081 0120 	eor.w	r1, r1, #32
 8017b3e:	e6a3      	b.n	8017888 <uxr_read_framed_msg+0x17c>
 8017b40:	f103 0c01 	add.w	ip, r3, #1
 8017b44:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017b48:	fba5 0202 	umull	r0, r2, r5, r2
 8017b4c:	0892      	lsrs	r2, r2, #2
 8017b4e:	202a      	movs	r0, #42	@ 0x2a
 8017b50:	fb00 c212 	mls	r2, r0, r2, ip
 8017b54:	fa5f fc82 	uxtb.w	ip, r2
 8017b58:	4561      	cmp	r1, ip
 8017b5a:	f43f af58 	beq.w	8017a0e <uxr_read_framed_msg+0x302>
 8017b5e:	4422      	add	r2, r4
 8017b60:	3302      	adds	r3, #2
 8017b62:	7891      	ldrb	r1, [r2, #2]
 8017b64:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017b68:	085a      	lsrs	r2, r3, #1
 8017b6a:	fba5 c202 	umull	ip, r2, r5, r2
 8017b6e:	0892      	lsrs	r2, r2, #2
 8017b70:	fb00 3312 	mls	r3, r0, r2, r3
 8017b74:	297e      	cmp	r1, #126	@ 0x7e
 8017b76:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017b7a:	f43f af48 	beq.w	8017a0e <uxr_read_framed_msg+0x302>
 8017b7e:	f081 0120 	eor.w	r1, r1, #32
 8017b82:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8017b86:	e6e8      	b.n	801795a <uxr_read_framed_msg+0x24e>
 8017b88:	1c58      	adds	r0, r3, #1
 8017b8a:	0842      	lsrs	r2, r0, #1
 8017b8c:	fba5 c202 	umull	ip, r2, r5, r2
 8017b90:	0892      	lsrs	r2, r2, #2
 8017b92:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017b96:	fb0c 0212 	mls	r2, ip, r2, r0
 8017b9a:	b2d0      	uxtb	r0, r2
 8017b9c:	4281      	cmp	r1, r0
 8017b9e:	f43f af32 	beq.w	8017a06 <uxr_read_framed_msg+0x2fa>
 8017ba2:	4422      	add	r2, r4
 8017ba4:	3302      	adds	r3, #2
 8017ba6:	7890      	ldrb	r0, [r2, #2]
 8017ba8:	085a      	lsrs	r2, r3, #1
 8017baa:	fba5 1202 	umull	r1, r2, r5, r2
 8017bae:	0892      	lsrs	r2, r2, #2
 8017bb0:	fb0c 3312 	mls	r3, ip, r2, r3
 8017bb4:	287e      	cmp	r0, #126	@ 0x7e
 8017bb6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017bba:	d01f      	beq.n	8017bfc <uxr_read_framed_msg+0x4f0>
 8017bbc:	f080 0020 	eor.w	r0, r0, #32
 8017bc0:	e68b      	b.n	80178da <uxr_read_framed_msg+0x1ce>
 8017bc2:	1c51      	adds	r1, r2, #1
 8017bc4:	084b      	lsrs	r3, r1, #1
 8017bc6:	fba5 c303 	umull	ip, r3, r5, r3
 8017bca:	089b      	lsrs	r3, r3, #2
 8017bcc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017bd0:	fb0c 1313 	mls	r3, ip, r3, r1
 8017bd4:	b2d9      	uxtb	r1, r3
 8017bd6:	4288      	cmp	r0, r1
 8017bd8:	f43f af3d 	beq.w	8017a56 <uxr_read_framed_msg+0x34a>
 8017bdc:	3202      	adds	r2, #2
 8017bde:	4423      	add	r3, r4
 8017be0:	0850      	lsrs	r0, r2, #1
 8017be2:	789b      	ldrb	r3, [r3, #2]
 8017be4:	fba5 1000 	umull	r1, r0, r5, r0
 8017be8:	0880      	lsrs	r0, r0, #2
 8017bea:	fb0c 2210 	mls	r2, ip, r0, r2
 8017bee:	2b7e      	cmp	r3, #126	@ 0x7e
 8017bf0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017bf4:	d016      	beq.n	8017c24 <uxr_read_framed_msg+0x518>
 8017bf6:	f083 0120 	eor.w	r1, r3, #32
 8017bfa:	e68b      	b.n	8017914 <uxr_read_framed_msg+0x208>
 8017bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017bfe:	9300      	str	r3, [sp, #0]
 8017c00:	2302      	movs	r3, #2
 8017c02:	9301      	str	r3, [sp, #4]
 8017c04:	464a      	mov	r2, r9
 8017c06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c08:	4641      	mov	r1, r8
 8017c0a:	4620      	mov	r0, r4
 8017c0c:	f7ff fcfc 	bl	8017608 <uxr_framing_read_transport>
 8017c10:	2800      	cmp	r0, #0
 8017c12:	f47f aef6 	bne.w	8017a02 <uxr_read_framed_msg+0x2f6>
 8017c16:	2301      	movs	r3, #1
 8017c18:	7023      	strb	r3, [r4, #0]
 8017c1a:	e588      	b.n	801772e <uxr_read_framed_msg+0x22>
 8017c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c1e:	9300      	str	r3, [sp, #0]
 8017c20:	2301      	movs	r3, #1
 8017c22:	e7ee      	b.n	8017c02 <uxr_read_framed_msg+0x4f6>
 8017c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c26:	9300      	str	r3, [sp, #0]
 8017c28:	2303      	movs	r3, #3
 8017c2a:	e7ea      	b.n	8017c02 <uxr_read_framed_msg+0x4f6>
 8017c2c:	ee17 8a90 	vmov	r8, s15
 8017c30:	e6ae      	b.n	8017990 <uxr_read_framed_msg+0x284>
 8017c32:	bf00      	nop

08017c34 <uxr_stream_id>:
 8017c34:	2901      	cmp	r1, #1
 8017c36:	b082      	sub	sp, #8
 8017c38:	d01d      	beq.n	8017c76 <uxr_stream_id+0x42>
 8017c3a:	2902      	cmp	r1, #2
 8017c3c:	f04f 0c00 	mov.w	ip, #0
 8017c40:	d01e      	beq.n	8017c80 <uxr_stream_id+0x4c>
 8017c42:	2300      	movs	r3, #0
 8017c44:	f36c 0307 	bfi	r3, ip, #0, #8
 8017c48:	f360 230f 	bfi	r3, r0, #8, #8
 8017c4c:	f361 4317 	bfi	r3, r1, #16, #8
 8017c50:	f362 631f 	bfi	r3, r2, #24, #8
 8017c54:	b2da      	uxtb	r2, r3
 8017c56:	2000      	movs	r0, #0
 8017c58:	f362 0007 	bfi	r0, r2, #0, #8
 8017c5c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8017c60:	f362 200f 	bfi	r0, r2, #8, #8
 8017c64:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8017c68:	f362 4017 	bfi	r0, r2, #16, #8
 8017c6c:	0e1b      	lsrs	r3, r3, #24
 8017c6e:	f363 601f 	bfi	r0, r3, #24, #8
 8017c72:	b002      	add	sp, #8
 8017c74:	4770      	bx	lr
 8017c76:	f100 0c01 	add.w	ip, r0, #1
 8017c7a:	fa5f fc8c 	uxtb.w	ip, ip
 8017c7e:	e7e0      	b.n	8017c42 <uxr_stream_id+0xe>
 8017c80:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8017c84:	e7dd      	b.n	8017c42 <uxr_stream_id+0xe>
 8017c86:	bf00      	nop

08017c88 <uxr_stream_id_from_raw>:
 8017c88:	b082      	sub	sp, #8
 8017c8a:	b130      	cbz	r0, 8017c9a <uxr_stream_id_from_raw+0x12>
 8017c8c:	0603      	lsls	r3, r0, #24
 8017c8e:	d420      	bmi.n	8017cd2 <uxr_stream_id_from_raw+0x4a>
 8017c90:	1e42      	subs	r2, r0, #1
 8017c92:	b2d2      	uxtb	r2, r2
 8017c94:	f04f 0c01 	mov.w	ip, #1
 8017c98:	e001      	b.n	8017c9e <uxr_stream_id_from_raw+0x16>
 8017c9a:	4684      	mov	ip, r0
 8017c9c:	4602      	mov	r2, r0
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	f360 0307 	bfi	r3, r0, #0, #8
 8017ca4:	f362 230f 	bfi	r3, r2, #8, #8
 8017ca8:	f36c 4317 	bfi	r3, ip, #16, #8
 8017cac:	f361 631f 	bfi	r3, r1, #24, #8
 8017cb0:	b2da      	uxtb	r2, r3
 8017cb2:	2000      	movs	r0, #0
 8017cb4:	f362 0007 	bfi	r0, r2, #0, #8
 8017cb8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8017cbc:	f362 200f 	bfi	r0, r2, #8, #8
 8017cc0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8017cc4:	f362 4017 	bfi	r0, r2, #16, #8
 8017cc8:	0e1b      	lsrs	r3, r3, #24
 8017cca:	f363 601f 	bfi	r0, r3, #24, #8
 8017cce:	b002      	add	sp, #8
 8017cd0:	4770      	bx	lr
 8017cd2:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8017cd6:	f04f 0c02 	mov.w	ip, #2
 8017cda:	e7e0      	b.n	8017c9e <uxr_stream_id_from_raw+0x16>

08017cdc <uxr_init_stream_storage>:
 8017cdc:	2300      	movs	r3, #0
 8017cde:	7403      	strb	r3, [r0, #16]
 8017ce0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8017ce4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8017ce8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8017cec:	4770      	bx	lr
 8017cee:	bf00      	nop

08017cf0 <uxr_reset_stream_storage>:
 8017cf0:	b570      	push	{r4, r5, r6, lr}
 8017cf2:	7c03      	ldrb	r3, [r0, #16]
 8017cf4:	4604      	mov	r4, r0
 8017cf6:	b153      	cbz	r3, 8017d0e <uxr_reset_stream_storage+0x1e>
 8017cf8:	4606      	mov	r6, r0
 8017cfa:	2500      	movs	r5, #0
 8017cfc:	4630      	mov	r0, r6
 8017cfe:	f005 f9bb 	bl	801d078 <uxr_reset_output_best_effort_stream>
 8017d02:	7c23      	ldrb	r3, [r4, #16]
 8017d04:	3501      	adds	r5, #1
 8017d06:	42ab      	cmp	r3, r5
 8017d08:	f106 0610 	add.w	r6, r6, #16
 8017d0c:	d8f6      	bhi.n	8017cfc <uxr_reset_stream_storage+0xc>
 8017d0e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017d12:	b163      	cbz	r3, 8017d2e <uxr_reset_stream_storage+0x3e>
 8017d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017d18:	2500      	movs	r5, #0
 8017d1a:	4630      	mov	r0, r6
 8017d1c:	f004 ffae 	bl	801cc7c <uxr_reset_input_best_effort_stream>
 8017d20:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017d24:	3501      	adds	r5, #1
 8017d26:	42ab      	cmp	r3, r5
 8017d28:	f106 0602 	add.w	r6, r6, #2
 8017d2c:	d8f5      	bhi.n	8017d1a <uxr_reset_stream_storage+0x2a>
 8017d2e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017d32:	b163      	cbz	r3, 8017d4e <uxr_reset_stream_storage+0x5e>
 8017d34:	f104 0618 	add.w	r6, r4, #24
 8017d38:	2500      	movs	r5, #0
 8017d3a:	4630      	mov	r0, r6
 8017d3c:	f005 fa48 	bl	801d1d0 <uxr_reset_output_reliable_stream>
 8017d40:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017d44:	3501      	adds	r5, #1
 8017d46:	42ab      	cmp	r3, r5
 8017d48:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8017d4c:	d8f5      	bhi.n	8017d3a <uxr_reset_stream_storage+0x4a>
 8017d4e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017d52:	b163      	cbz	r3, 8017d6e <uxr_reset_stream_storage+0x7e>
 8017d54:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8017d58:	2500      	movs	r5, #0
 8017d5a:	4630      	mov	r0, r6
 8017d5c:	f005 f802 	bl	801cd64 <uxr_reset_input_reliable_stream>
 8017d60:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017d64:	3501      	adds	r5, #1
 8017d66:	42ab      	cmp	r3, r5
 8017d68:	f106 0618 	add.w	r6, r6, #24
 8017d6c:	d8f5      	bhi.n	8017d5a <uxr_reset_stream_storage+0x6a>
 8017d6e:	bd70      	pop	{r4, r5, r6, pc}

08017d70 <uxr_add_output_best_effort_buffer>:
 8017d70:	b510      	push	{r4, lr}
 8017d72:	7c04      	ldrb	r4, [r0, #16]
 8017d74:	f104 0c01 	add.w	ip, r4, #1
 8017d78:	b082      	sub	sp, #8
 8017d7a:	f880 c010 	strb.w	ip, [r0, #16]
 8017d7e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8017d82:	f005 f96f 	bl	801d064 <uxr_init_output_best_effort_stream>
 8017d86:	2201      	movs	r2, #1
 8017d88:	4611      	mov	r1, r2
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	b002      	add	sp, #8
 8017d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d92:	f7ff bf4f 	b.w	8017c34 <uxr_stream_id>
 8017d96:	bf00      	nop

08017d98 <uxr_add_output_reliable_buffer>:
 8017d98:	b510      	push	{r4, lr}
 8017d9a:	b084      	sub	sp, #16
 8017d9c:	4684      	mov	ip, r0
 8017d9e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017da2:	9000      	str	r0, [sp, #0]
 8017da4:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8017da8:	2028      	movs	r0, #40	@ 0x28
 8017daa:	fb00 c004 	mla	r0, r0, r4, ip
 8017dae:	f104 0e01 	add.w	lr, r4, #1
 8017db2:	3018      	adds	r0, #24
 8017db4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8017db8:	f005 f9d2 	bl	801d160 <uxr_init_output_reliable_stream>
 8017dbc:	2201      	movs	r2, #1
 8017dbe:	2102      	movs	r1, #2
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	b004      	add	sp, #16
 8017dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017dc8:	f7ff bf34 	b.w	8017c34 <uxr_stream_id>

08017dcc <uxr_add_input_best_effort_buffer>:
 8017dcc:	b510      	push	{r4, lr}
 8017dce:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	1c62      	adds	r2, r4, #1
 8017dd6:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8017dda:	b082      	sub	sp, #8
 8017ddc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8017de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017de4:	f004 ff46 	bl	801cc74 <uxr_init_input_best_effort_stream>
 8017de8:	2200      	movs	r2, #0
 8017dea:	2101      	movs	r1, #1
 8017dec:	4620      	mov	r0, r4
 8017dee:	b002      	add	sp, #8
 8017df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017df4:	f7ff bf1e 	b.w	8017c34 <uxr_stream_id>

08017df8 <uxr_add_input_reliable_buffer>:
 8017df8:	b510      	push	{r4, lr}
 8017dfa:	b084      	sub	sp, #16
 8017dfc:	4684      	mov	ip, r0
 8017dfe:	9806      	ldr	r0, [sp, #24]
 8017e00:	9000      	str	r0, [sp, #0]
 8017e02:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8017e06:	2018      	movs	r0, #24
 8017e08:	fb00 c004 	mla	r0, r0, r4, ip
 8017e0c:	f104 0e01 	add.w	lr, r4, #1
 8017e10:	3048      	adds	r0, #72	@ 0x48
 8017e12:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8017e16:	f004 ff79 	bl	801cd0c <uxr_init_input_reliable_stream>
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	2102      	movs	r1, #2
 8017e1e:	4620      	mov	r0, r4
 8017e20:	b004      	add	sp, #16
 8017e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e26:	f7ff bf05 	b.w	8017c34 <uxr_stream_id>
 8017e2a:	bf00      	nop

08017e2c <uxr_get_output_best_effort_stream>:
 8017e2c:	7c03      	ldrb	r3, [r0, #16]
 8017e2e:	428b      	cmp	r3, r1
 8017e30:	bf8c      	ite	hi
 8017e32:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8017e36:	2000      	movls	r0, #0
 8017e38:	4770      	bx	lr
 8017e3a:	bf00      	nop

08017e3c <uxr_get_output_reliable_stream>:
 8017e3c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8017e40:	428b      	cmp	r3, r1
 8017e42:	bf83      	ittte	hi
 8017e44:	2328      	movhi	r3, #40	@ 0x28
 8017e46:	fb03 0001 	mlahi	r0, r3, r1, r0
 8017e4a:	3018      	addhi	r0, #24
 8017e4c:	2000      	movls	r0, #0
 8017e4e:	4770      	bx	lr

08017e50 <uxr_get_input_best_effort_stream>:
 8017e50:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8017e54:	428b      	cmp	r3, r1
 8017e56:	bf86      	itte	hi
 8017e58:	3121      	addhi	r1, #33	@ 0x21
 8017e5a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8017e5e:	2000      	movls	r0, #0
 8017e60:	4770      	bx	lr
 8017e62:	bf00      	nop

08017e64 <uxr_get_input_reliable_stream>:
 8017e64:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8017e68:	428b      	cmp	r3, r1
 8017e6a:	bf83      	ittte	hi
 8017e6c:	2318      	movhi	r3, #24
 8017e6e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8017e72:	3048      	addhi	r0, #72	@ 0x48
 8017e74:	2000      	movls	r0, #0
 8017e76:	4770      	bx	lr

08017e78 <uxr_output_streams_confirmed>:
 8017e78:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8017e7c:	b183      	cbz	r3, 8017ea0 <uxr_output_streams_confirmed+0x28>
 8017e7e:	b570      	push	{r4, r5, r6, lr}
 8017e80:	4606      	mov	r6, r0
 8017e82:	f100 0518 	add.w	r5, r0, #24
 8017e86:	2400      	movs	r4, #0
 8017e88:	e001      	b.n	8017e8e <uxr_output_streams_confirmed+0x16>
 8017e8a:	3528      	adds	r5, #40	@ 0x28
 8017e8c:	b138      	cbz	r0, 8017e9e <uxr_output_streams_confirmed+0x26>
 8017e8e:	4628      	mov	r0, r5
 8017e90:	f005 fc0e 	bl	801d6b0 <uxr_is_output_up_to_date>
 8017e94:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8017e98:	3401      	adds	r4, #1
 8017e9a:	42a3      	cmp	r3, r4
 8017e9c:	d8f5      	bhi.n	8017e8a <uxr_output_streams_confirmed+0x12>
 8017e9e:	bd70      	pop	{r4, r5, r6, pc}
 8017ea0:	2001      	movs	r0, #1
 8017ea2:	4770      	bx	lr

08017ea4 <uxr_buffer_submessage_header>:
 8017ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ea6:	4604      	mov	r4, r0
 8017ea8:	460e      	mov	r6, r1
 8017eaa:	2104      	movs	r1, #4
 8017eac:	4615      	mov	r5, r2
 8017eae:	461f      	mov	r7, r3
 8017eb0:	f7f8 f9ec 	bl	801028c <ucdr_align_to>
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	ea47 0203 	orr.w	r2, r7, r3
 8017eba:	4631      	mov	r1, r6
 8017ebc:	7523      	strb	r3, [r4, #20]
 8017ebe:	4620      	mov	r0, r4
 8017ec0:	462b      	mov	r3, r5
 8017ec2:	f000 fa27 	bl	8018314 <uxr_serialize_submessage_header>
 8017ec6:	4620      	mov	r0, r4
 8017ec8:	f7f8 f9f6 	bl	80102b8 <ucdr_buffer_remaining>
 8017ecc:	42a8      	cmp	r0, r5
 8017ece:	bf34      	ite	cc
 8017ed0:	2000      	movcc	r0, #0
 8017ed2:	2001      	movcs	r0, #1
 8017ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ed6:	bf00      	nop

08017ed8 <uxr_read_submessage_header>:
 8017ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017edc:	4604      	mov	r4, r0
 8017ede:	460d      	mov	r5, r1
 8017ee0:	2104      	movs	r1, #4
 8017ee2:	4616      	mov	r6, r2
 8017ee4:	4698      	mov	r8, r3
 8017ee6:	f7f8 f9d1 	bl	801028c <ucdr_align_to>
 8017eea:	4620      	mov	r0, r4
 8017eec:	f7f8 f9e4 	bl	80102b8 <ucdr_buffer_remaining>
 8017ef0:	2803      	cmp	r0, #3
 8017ef2:	bf8c      	ite	hi
 8017ef4:	2701      	movhi	r7, #1
 8017ef6:	2700      	movls	r7, #0
 8017ef8:	d802      	bhi.n	8017f00 <uxr_read_submessage_header+0x28>
 8017efa:	4638      	mov	r0, r7
 8017efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f00:	4633      	mov	r3, r6
 8017f02:	4642      	mov	r2, r8
 8017f04:	4620      	mov	r0, r4
 8017f06:	4629      	mov	r1, r5
 8017f08:	f000 fa18 	bl	801833c <uxr_deserialize_submessage_header>
 8017f0c:	f898 3000 	ldrb.w	r3, [r8]
 8017f10:	f003 0201 	and.w	r2, r3, #1
 8017f14:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8017f18:	f888 3000 	strb.w	r3, [r8]
 8017f1c:	7522      	strb	r2, [r4, #20]
 8017f1e:	4638      	mov	r0, r7
 8017f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f24 <uxr_submessage_padding>:
 8017f24:	f010 0003 	ands.w	r0, r0, #3
 8017f28:	bf18      	it	ne
 8017f2a:	f1c0 0004 	rsbne	r0, r0, #4
 8017f2e:	4770      	bx	lr

08017f30 <uxr_millis>:
 8017f30:	b510      	push	{r4, lr}
 8017f32:	b084      	sub	sp, #16
 8017f34:	4669      	mov	r1, sp
 8017f36:	2001      	movs	r0, #1
 8017f38:	f7eb ffde 	bl	8003ef8 <clock_gettime>
 8017f3c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8017f40:	4906      	ldr	r1, [pc, #24]	@ (8017f5c <uxr_millis+0x2c>)
 8017f42:	fba0 0301 	umull	r0, r3, r0, r1
 8017f46:	1900      	adds	r0, r0, r4
 8017f48:	fb01 3102 	mla	r1, r1, r2, r3
 8017f4c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8017f50:	4a03      	ldr	r2, [pc, #12]	@ (8017f60 <uxr_millis+0x30>)
 8017f52:	2300      	movs	r3, #0
 8017f54:	f7e8 fe88 	bl	8000c68 <__aeabi_ldivmod>
 8017f58:	b004      	add	sp, #16
 8017f5a:	bd10      	pop	{r4, pc}
 8017f5c:	3b9aca00 	.word	0x3b9aca00
 8017f60:	000f4240 	.word	0x000f4240

08017f64 <uxr_nanos>:
 8017f64:	b510      	push	{r4, lr}
 8017f66:	b084      	sub	sp, #16
 8017f68:	4669      	mov	r1, sp
 8017f6a:	2001      	movs	r0, #1
 8017f6c:	f7eb ffc4 	bl	8003ef8 <clock_gettime>
 8017f70:	4a06      	ldr	r2, [pc, #24]	@ (8017f8c <uxr_nanos+0x28>)
 8017f72:	9800      	ldr	r0, [sp, #0]
 8017f74:	9902      	ldr	r1, [sp, #8]
 8017f76:	9c01      	ldr	r4, [sp, #4]
 8017f78:	fba0 0302 	umull	r0, r3, r0, r2
 8017f7c:	1840      	adds	r0, r0, r1
 8017f7e:	fb02 3304 	mla	r3, r2, r4, r3
 8017f82:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8017f86:	b004      	add	sp, #16
 8017f88:	bd10      	pop	{r4, pc}
 8017f8a:	bf00      	nop
 8017f8c:	3b9aca00 	.word	0x3b9aca00

08017f90 <on_full_output_buffer_fragmented>:
 8017f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f94:	460c      	mov	r4, r1
 8017f96:	b08a      	sub	sp, #40	@ 0x28
 8017f98:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8017f9c:	4606      	mov	r6, r0
 8017f9e:	f104 0008 	add.w	r0, r4, #8
 8017fa2:	f7ff ff4b 	bl	8017e3c <uxr_get_output_reliable_stream>
 8017fa6:	4605      	mov	r5, r0
 8017fa8:	f005 fb8c 	bl	801d6c4 <get_available_free_slots>
 8017fac:	b968      	cbnz	r0, 8017fca <on_full_output_buffer_fragmented+0x3a>
 8017fae:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8017fb2:	4620      	mov	r0, r4
 8017fb4:	4798      	blx	r3
 8017fb6:	b918      	cbnz	r0, 8017fc0 <on_full_output_buffer_fragmented+0x30>
 8017fb8:	2001      	movs	r0, #1
 8017fba:	b00a      	add	sp, #40	@ 0x28
 8017fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fc0:	4628      	mov	r0, r5
 8017fc2:	f005 fb7f 	bl	801d6c4 <get_available_free_slots>
 8017fc6:	2800      	cmp	r0, #0
 8017fc8:	d0f6      	beq.n	8017fb8 <on_full_output_buffer_fragmented+0x28>
 8017fca:	8929      	ldrh	r1, [r5, #8]
 8017fcc:	89eb      	ldrh	r3, [r5, #14]
 8017fce:	7b28      	ldrb	r0, [r5, #12]
 8017fd0:	686a      	ldr	r2, [r5, #4]
 8017fd2:	fbb2 f8f1 	udiv	r8, r2, r1
 8017fd6:	fbb3 f2f1 	udiv	r2, r3, r1
 8017fda:	fb01 3112 	mls	r1, r1, r2, r3
 8017fde:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8017fe2:	b289      	uxth	r1, r1
 8017fe4:	fb08 f101 	mul.w	r1, r8, r1
 8017fe8:	30fc      	adds	r0, #252	@ 0xfc
 8017fea:	f1a8 0804 	sub.w	r8, r8, #4
 8017fee:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8017ff2:	4440      	add	r0, r8
 8017ff4:	b287      	uxth	r7, r0
 8017ff6:	1bdb      	subs	r3, r3, r7
 8017ff8:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8017ffc:	682b      	ldr	r3, [r5, #0]
 8017ffe:	3104      	adds	r1, #4
 8018000:	4419      	add	r1, r3
 8018002:	4642      	mov	r2, r8
 8018004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018008:	9300      	str	r3, [sp, #0]
 801800a:	a802      	add	r0, sp, #8
 801800c:	2300      	movs	r3, #0
 801800e:	f7f8 f911 	bl	8010234 <ucdr_init_buffer_origin_offset>
 8018012:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8018016:	f102 0308 	add.w	r3, r2, #8
 801801a:	4543      	cmp	r3, r8
 801801c:	d928      	bls.n	8018070 <on_full_output_buffer_fragmented+0xe0>
 801801e:	463a      	mov	r2, r7
 8018020:	2300      	movs	r3, #0
 8018022:	210d      	movs	r1, #13
 8018024:	a802      	add	r0, sp, #8
 8018026:	f7ff ff3d 	bl	8017ea4 <uxr_buffer_submessage_header>
 801802a:	8929      	ldrh	r1, [r5, #8]
 801802c:	89eb      	ldrh	r3, [r5, #14]
 801802e:	fbb3 f2f1 	udiv	r2, r3, r1
 8018032:	fb01 3312 	mls	r3, r1, r2, r3
 8018036:	b29b      	uxth	r3, r3
 8018038:	686a      	ldr	r2, [r5, #4]
 801803a:	fbb2 f2f1 	udiv	r2, r2, r1
 801803e:	fb02 f303 	mul.w	r3, r2, r3
 8018042:	682a      	ldr	r2, [r5, #0]
 8018044:	f842 8003 	str.w	r8, [r2, r3]
 8018048:	89e8      	ldrh	r0, [r5, #14]
 801804a:	2101      	movs	r1, #1
 801804c:	f005 fb5a 	bl	801d704 <uxr_seq_num_add>
 8018050:	9904      	ldr	r1, [sp, #16]
 8018052:	9a03      	ldr	r2, [sp, #12]
 8018054:	81e8      	strh	r0, [r5, #14]
 8018056:	1a52      	subs	r2, r2, r1
 8018058:	4630      	mov	r0, r6
 801805a:	f7f8 f8fd 	bl	8010258 <ucdr_init_buffer>
 801805e:	4630      	mov	r0, r6
 8018060:	490f      	ldr	r1, [pc, #60]	@ (80180a0 <on_full_output_buffer_fragmented+0x110>)
 8018062:	4622      	mov	r2, r4
 8018064:	f7f8 f8cc 	bl	8010200 <ucdr_set_on_full_buffer_callback>
 8018068:	2000      	movs	r0, #0
 801806a:	b00a      	add	sp, #40	@ 0x28
 801806c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018070:	b292      	uxth	r2, r2
 8018072:	2302      	movs	r3, #2
 8018074:	210d      	movs	r1, #13
 8018076:	a802      	add	r0, sp, #8
 8018078:	f7ff ff14 	bl	8017ea4 <uxr_buffer_submessage_header>
 801807c:	8928      	ldrh	r0, [r5, #8]
 801807e:	89eb      	ldrh	r3, [r5, #14]
 8018080:	fbb3 f1f0 	udiv	r1, r3, r0
 8018084:	fb00 3311 	mls	r3, r0, r1, r3
 8018088:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801808c:	6869      	ldr	r1, [r5, #4]
 801808e:	fbb1 f1f0 	udiv	r1, r1, r0
 8018092:	b29b      	uxth	r3, r3
 8018094:	fb01 f303 	mul.w	r3, r1, r3
 8018098:	6829      	ldr	r1, [r5, #0]
 801809a:	3208      	adds	r2, #8
 801809c:	50ca      	str	r2, [r1, r3]
 801809e:	e7d3      	b.n	8018048 <on_full_output_buffer_fragmented+0xb8>
 80180a0:	08017f91 	.word	0x08017f91

080180a4 <uxr_prepare_output_stream>:
 80180a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180a6:	b087      	sub	sp, #28
 80180a8:	2707      	movs	r7, #7
 80180aa:	9202      	str	r2, [sp, #8]
 80180ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80180ae:	9103      	str	r1, [sp, #12]
 80180b0:	2500      	movs	r5, #0
 80180b2:	3204      	adds	r2, #4
 80180b4:	e9cd 7500 	strd	r7, r5, [sp]
 80180b8:	461c      	mov	r4, r3
 80180ba:	4606      	mov	r6, r0
 80180bc:	f7fe ffc2 	bl	8017044 <uxr_prepare_stream_to_write_submessage>
 80180c0:	f080 0201 	eor.w	r2, r0, #1
 80180c4:	b2d2      	uxtb	r2, r2
 80180c6:	75a2      	strb	r2, [r4, #22]
 80180c8:	b112      	cbz	r2, 80180d0 <uxr_prepare_output_stream+0x2c>
 80180ca:	4628      	mov	r0, r5
 80180cc:	b007      	add	sp, #28
 80180ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180d0:	aa05      	add	r2, sp, #20
 80180d2:	9902      	ldr	r1, [sp, #8]
 80180d4:	4630      	mov	r0, r6
 80180d6:	f7ff f8eb 	bl	80172b0 <uxr_init_base_object_request>
 80180da:	a905      	add	r1, sp, #20
 80180dc:	4605      	mov	r5, r0
 80180de:	4620      	mov	r0, r4
 80180e0:	f001 f808 	bl	80190f4 <uxr_serialize_WRITE_DATA_Payload_Data>
 80180e4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80180e8:	69a6      	ldr	r6, [r4, #24]
 80180ea:	69e7      	ldr	r7, [r4, #28]
 80180ec:	1a52      	subs	r2, r2, r1
 80180ee:	4620      	mov	r0, r4
 80180f0:	f7f8 f8b2 	bl	8010258 <ucdr_init_buffer>
 80180f4:	4620      	mov	r0, r4
 80180f6:	463a      	mov	r2, r7
 80180f8:	4631      	mov	r1, r6
 80180fa:	f7f8 f881 	bl	8010200 <ucdr_set_on_full_buffer_callback>
 80180fe:	4628      	mov	r0, r5
 8018100:	b007      	add	sp, #28
 8018102:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018104 <uxr_prepare_output_stream_fragmented>:
 8018104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018108:	b091      	sub	sp, #68	@ 0x44
 801810a:	4605      	mov	r5, r0
 801810c:	9105      	str	r1, [sp, #20]
 801810e:	3008      	adds	r0, #8
 8018110:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018114:	461e      	mov	r6, r3
 8018116:	9204      	str	r2, [sp, #16]
 8018118:	f7ff fe90 	bl	8017e3c <uxr_get_output_reliable_stream>
 801811c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8018120:	2b01      	cmp	r3, #1
 8018122:	f000 8091 	beq.w	8018248 <uxr_prepare_output_stream_fragmented+0x144>
 8018126:	4604      	mov	r4, r0
 8018128:	2800      	cmp	r0, #0
 801812a:	f000 808d 	beq.w	8018248 <uxr_prepare_output_stream_fragmented+0x144>
 801812e:	f005 fac9 	bl	801d6c4 <get_available_free_slots>
 8018132:	2800      	cmp	r0, #0
 8018134:	f000 8083 	beq.w	801823e <uxr_prepare_output_stream_fragmented+0x13a>
 8018138:	8922      	ldrh	r2, [r4, #8]
 801813a:	89e7      	ldrh	r7, [r4, #14]
 801813c:	fbb7 f9f2 	udiv	r9, r7, r2
 8018140:	fb02 7919 	mls	r9, r2, r9, r7
 8018144:	fa1f f989 	uxth.w	r9, r9
 8018148:	6863      	ldr	r3, [r4, #4]
 801814a:	fbb3 f2f2 	udiv	r2, r3, r2
 801814e:	6823      	ldr	r3, [r4, #0]
 8018150:	9203      	str	r2, [sp, #12]
 8018152:	fb02 f909 	mul.w	r9, r2, r9
 8018156:	f109 0904 	add.w	r9, r9, #4
 801815a:	4499      	add	r9, r3
 801815c:	7b23      	ldrb	r3, [r4, #12]
 801815e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8018162:	4543      	cmp	r3, r8
 8018164:	f1a2 0b04 	sub.w	fp, r2, #4
 8018168:	d37a      	bcc.n	8018260 <uxr_prepare_output_stream_fragmented+0x15c>
 801816a:	f1ab 0a04 	sub.w	sl, fp, #4
 801816e:	ebaa 0a03 	sub.w	sl, sl, r3
 8018172:	465a      	mov	r2, fp
 8018174:	2300      	movs	r3, #0
 8018176:	4649      	mov	r1, r9
 8018178:	a808      	add	r0, sp, #32
 801817a:	f8cd 8000 	str.w	r8, [sp]
 801817e:	f7f8 f859 	bl	8010234 <ucdr_init_buffer_origin_offset>
 8018182:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8018184:	fa1f fa8a 	uxth.w	sl, sl
 8018188:	4652      	mov	r2, sl
 801818a:	f103 0a08 	add.w	sl, r3, #8
 801818e:	45da      	cmp	sl, fp
 8018190:	bf34      	ite	cc
 8018192:	2302      	movcc	r3, #2
 8018194:	2300      	movcs	r3, #0
 8018196:	210d      	movs	r1, #13
 8018198:	a808      	add	r0, sp, #32
 801819a:	f7ff fe83 	bl	8017ea4 <uxr_buffer_submessage_header>
 801819e:	8921      	ldrh	r1, [r4, #8]
 80181a0:	fbb7 f2f1 	udiv	r2, r7, r1
 80181a4:	fb01 7212 	mls	r2, r1, r2, r7
 80181a8:	b292      	uxth	r2, r2
 80181aa:	6863      	ldr	r3, [r4, #4]
 80181ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80181b0:	fb02 f303 	mul.w	r3, r2, r3
 80181b4:	6822      	ldr	r2, [r4, #0]
 80181b6:	4638      	mov	r0, r7
 80181b8:	f842 b003 	str.w	fp, [r2, r3]
 80181bc:	2101      	movs	r1, #1
 80181be:	f005 faa1 	bl	801d704 <uxr_seq_num_add>
 80181c2:	9b03      	ldr	r3, [sp, #12]
 80181c4:	f108 0104 	add.w	r1, r8, #4
 80181c8:	f1a3 0208 	sub.w	r2, r3, #8
 80181cc:	eba2 0208 	sub.w	r2, r2, r8
 80181d0:	4449      	add	r1, r9
 80181d2:	4607      	mov	r7, r0
 80181d4:	4630      	mov	r0, r6
 80181d6:	f7f8 f83f 	bl	8010258 <ucdr_init_buffer>
 80181da:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80181dc:	81e7      	strh	r7, [r4, #14]
 80181de:	1d1a      	adds	r2, r3, #4
 80181e0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80181e4:	bf28      	it	cs
 80181e6:	2200      	movcs	r2, #0
 80181e8:	2300      	movs	r3, #0
 80181ea:	b292      	uxth	r2, r2
 80181ec:	2107      	movs	r1, #7
 80181ee:	4630      	mov	r0, r6
 80181f0:	f7ff fe58 	bl	8017ea4 <uxr_buffer_submessage_header>
 80181f4:	9904      	ldr	r1, [sp, #16]
 80181f6:	aa07      	add	r2, sp, #28
 80181f8:	4628      	mov	r0, r5
 80181fa:	f7ff f859 	bl	80172b0 <uxr_init_base_object_request>
 80181fe:	4604      	mov	r4, r0
 8018200:	b318      	cbz	r0, 801824a <uxr_prepare_output_stream_fragmented+0x146>
 8018202:	a907      	add	r1, sp, #28
 8018204:	4630      	mov	r0, r6
 8018206:	f000 ff75 	bl	80190f4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801820a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801820e:	4630      	mov	r0, r6
 8018210:	1a52      	subs	r2, r2, r1
 8018212:	f7f8 f821 	bl	8010258 <ucdr_init_buffer>
 8018216:	9b05      	ldr	r3, [sp, #20]
 8018218:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801821c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801821e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8018222:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8018224:	491b      	ldr	r1, [pc, #108]	@ (8018294 <uxr_prepare_output_stream_fragmented+0x190>)
 8018226:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801822a:	4630      	mov	r0, r6
 801822c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8018230:	462a      	mov	r2, r5
 8018232:	f7f7 ffe5 	bl	8010200 <ucdr_set_on_full_buffer_callback>
 8018236:	4620      	mov	r0, r4
 8018238:	b011      	add	sp, #68	@ 0x44
 801823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801823e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8018240:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018242:	4628      	mov	r0, r5
 8018244:	4798      	blx	r3
 8018246:	b920      	cbnz	r0, 8018252 <uxr_prepare_output_stream_fragmented+0x14e>
 8018248:	2400      	movs	r4, #0
 801824a:	4620      	mov	r0, r4
 801824c:	b011      	add	sp, #68	@ 0x44
 801824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018252:	4620      	mov	r0, r4
 8018254:	f005 fa36 	bl	801d6c4 <get_available_free_slots>
 8018258:	2800      	cmp	r0, #0
 801825a:	f47f af6d 	bne.w	8018138 <uxr_prepare_output_stream_fragmented+0x34>
 801825e:	e7f3      	b.n	8018248 <uxr_prepare_output_stream_fragmented+0x144>
 8018260:	4638      	mov	r0, r7
 8018262:	2101      	movs	r1, #1
 8018264:	f005 fa4e 	bl	801d704 <uxr_seq_num_add>
 8018268:	8921      	ldrh	r1, [r4, #8]
 801826a:	fbb0 f2f1 	udiv	r2, r0, r1
 801826e:	fb01 0912 	mls	r9, r1, r2, r0
 8018272:	fa1f f289 	uxth.w	r2, r9
 8018276:	6863      	ldr	r3, [r4, #4]
 8018278:	fbb3 f9f1 	udiv	r9, r3, r1
 801827c:	6823      	ldr	r3, [r4, #0]
 801827e:	fb02 f909 	mul.w	r9, r2, r9
 8018282:	f109 0904 	add.w	r9, r9, #4
 8018286:	4499      	add	r9, r3
 8018288:	4607      	mov	r7, r0
 801828a:	7b23      	ldrb	r3, [r4, #12]
 801828c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8018290:	e76b      	b.n	801816a <uxr_prepare_output_stream_fragmented+0x66>
 8018292:	bf00      	nop
 8018294:	08017f91 	.word	0x08017f91

08018298 <uxr_serialize_message_header>:
 8018298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801829a:	b083      	sub	sp, #12
 801829c:	4616      	mov	r6, r2
 801829e:	4604      	mov	r4, r0
 80182a0:	9301      	str	r3, [sp, #4]
 80182a2:	460d      	mov	r5, r1
 80182a4:	9f08      	ldr	r7, [sp, #32]
 80182a6:	f7f6 fcf5 	bl	800ec94 <ucdr_serialize_uint8_t>
 80182aa:	4631      	mov	r1, r6
 80182ac:	4620      	mov	r0, r4
 80182ae:	f7f6 fcf1 	bl	800ec94 <ucdr_serialize_uint8_t>
 80182b2:	9a01      	ldr	r2, [sp, #4]
 80182b4:	2101      	movs	r1, #1
 80182b6:	4620      	mov	r0, r4
 80182b8:	f7f6 fd98 	bl	800edec <ucdr_serialize_endian_uint16_t>
 80182bc:	062b      	lsls	r3, r5, #24
 80182be:	d501      	bpl.n	80182c4 <uxr_serialize_message_header+0x2c>
 80182c0:	b003      	add	sp, #12
 80182c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182c4:	2204      	movs	r2, #4
 80182c6:	4639      	mov	r1, r7
 80182c8:	4620      	mov	r0, r4
 80182ca:	b003      	add	sp, #12
 80182cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80182d0:	f7fd b968 	b.w	80155a4 <ucdr_serialize_array_uint8_t>

080182d4 <uxr_deserialize_message_header>:
 80182d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182d6:	b083      	sub	sp, #12
 80182d8:	4616      	mov	r6, r2
 80182da:	4604      	mov	r4, r0
 80182dc:	9301      	str	r3, [sp, #4]
 80182de:	460d      	mov	r5, r1
 80182e0:	9f08      	ldr	r7, [sp, #32]
 80182e2:	f7f6 fced 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 80182e6:	4631      	mov	r1, r6
 80182e8:	4620      	mov	r0, r4
 80182ea:	f7f6 fce9 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 80182ee:	9a01      	ldr	r2, [sp, #4]
 80182f0:	2101      	movs	r1, #1
 80182f2:	4620      	mov	r0, r4
 80182f4:	f7f6 fe6e 	bl	800efd4 <ucdr_deserialize_endian_uint16_t>
 80182f8:	f995 3000 	ldrsb.w	r3, [r5]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	da01      	bge.n	8018304 <uxr_deserialize_message_header+0x30>
 8018300:	b003      	add	sp, #12
 8018302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018304:	2204      	movs	r2, #4
 8018306:	4639      	mov	r1, r7
 8018308:	4620      	mov	r0, r4
 801830a:	b003      	add	sp, #12
 801830c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018310:	f7fd b9ac 	b.w	801566c <ucdr_deserialize_array_uint8_t>

08018314 <uxr_serialize_submessage_header>:
 8018314:	b530      	push	{r4, r5, lr}
 8018316:	b083      	sub	sp, #12
 8018318:	4615      	mov	r5, r2
 801831a:	4604      	mov	r4, r0
 801831c:	9301      	str	r3, [sp, #4]
 801831e:	f7f6 fcb9 	bl	800ec94 <ucdr_serialize_uint8_t>
 8018322:	4629      	mov	r1, r5
 8018324:	4620      	mov	r0, r4
 8018326:	f7f6 fcb5 	bl	800ec94 <ucdr_serialize_uint8_t>
 801832a:	9a01      	ldr	r2, [sp, #4]
 801832c:	2101      	movs	r1, #1
 801832e:	4620      	mov	r0, r4
 8018330:	b003      	add	sp, #12
 8018332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018336:	f7f6 bd59 	b.w	800edec <ucdr_serialize_endian_uint16_t>
 801833a:	bf00      	nop

0801833c <uxr_deserialize_submessage_header>:
 801833c:	b530      	push	{r4, r5, lr}
 801833e:	b083      	sub	sp, #12
 8018340:	4615      	mov	r5, r2
 8018342:	4604      	mov	r4, r0
 8018344:	9301      	str	r3, [sp, #4]
 8018346:	f7f6 fcbb 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 801834a:	4629      	mov	r1, r5
 801834c:	4620      	mov	r0, r4
 801834e:	f7f6 fcb7 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8018352:	9a01      	ldr	r2, [sp, #4]
 8018354:	2101      	movs	r1, #1
 8018356:	4620      	mov	r0, r4
 8018358:	b003      	add	sp, #12
 801835a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801835e:	f7f6 be39 	b.w	800efd4 <ucdr_deserialize_endian_uint16_t>
 8018362:	bf00      	nop

08018364 <uxr_serialize_CLIENT_Representation>:
 8018364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018368:	2204      	movs	r2, #4
 801836a:	460e      	mov	r6, r1
 801836c:	4605      	mov	r5, r0
 801836e:	f7fd f919 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8018372:	2202      	movs	r2, #2
 8018374:	4607      	mov	r7, r0
 8018376:	1d31      	adds	r1, r6, #4
 8018378:	4628      	mov	r0, r5
 801837a:	f7fd f913 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 801837e:	4038      	ands	r0, r7
 8018380:	2202      	movs	r2, #2
 8018382:	1db1      	adds	r1, r6, #6
 8018384:	b2c7      	uxtb	r7, r0
 8018386:	4628      	mov	r0, r5
 8018388:	f7fd f90c 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 801838c:	2204      	movs	r2, #4
 801838e:	4007      	ands	r7, r0
 8018390:	f106 0108 	add.w	r1, r6, #8
 8018394:	4628      	mov	r0, r5
 8018396:	f7fd f905 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 801839a:	7b31      	ldrb	r1, [r6, #12]
 801839c:	4007      	ands	r7, r0
 801839e:	4628      	mov	r0, r5
 80183a0:	f7f6 fc78 	bl	800ec94 <ucdr_serialize_uint8_t>
 80183a4:	7b71      	ldrb	r1, [r6, #13]
 80183a6:	4007      	ands	r7, r0
 80183a8:	4628      	mov	r0, r5
 80183aa:	f7f6 fc45 	bl	800ec38 <ucdr_serialize_bool>
 80183ae:	7b73      	ldrb	r3, [r6, #13]
 80183b0:	ea07 0800 	and.w	r8, r7, r0
 80183b4:	b93b      	cbnz	r3, 80183c6 <uxr_serialize_CLIENT_Representation+0x62>
 80183b6:	8bb1      	ldrh	r1, [r6, #28]
 80183b8:	4628      	mov	r0, r5
 80183ba:	f7f6 fc97 	bl	800ecec <ucdr_serialize_uint16_t>
 80183be:	ea08 0000 	and.w	r0, r8, r0
 80183c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183c6:	6931      	ldr	r1, [r6, #16]
 80183c8:	4628      	mov	r0, r5
 80183ca:	f7f6 fe79 	bl	800f0c0 <ucdr_serialize_uint32_t>
 80183ce:	6933      	ldr	r3, [r6, #16]
 80183d0:	b1e3      	cbz	r3, 801840c <uxr_serialize_CLIENT_Representation+0xa8>
 80183d2:	b1c0      	cbz	r0, 8018406 <uxr_serialize_CLIENT_Representation+0xa2>
 80183d4:	4637      	mov	r7, r6
 80183d6:	f04f 0900 	mov.w	r9, #0
 80183da:	e001      	b.n	80183e0 <uxr_serialize_CLIENT_Representation+0x7c>
 80183dc:	3708      	adds	r7, #8
 80183de:	b194      	cbz	r4, 8018406 <uxr_serialize_CLIENT_Representation+0xa2>
 80183e0:	6979      	ldr	r1, [r7, #20]
 80183e2:	4628      	mov	r0, r5
 80183e4:	f004 fc2e 	bl	801cc44 <ucdr_serialize_string>
 80183e8:	69b9      	ldr	r1, [r7, #24]
 80183ea:	4604      	mov	r4, r0
 80183ec:	4628      	mov	r0, r5
 80183ee:	f004 fc29 	bl	801cc44 <ucdr_serialize_string>
 80183f2:	6933      	ldr	r3, [r6, #16]
 80183f4:	f109 0901 	add.w	r9, r9, #1
 80183f8:	4004      	ands	r4, r0
 80183fa:	4599      	cmp	r9, r3
 80183fc:	b2e4      	uxtb	r4, r4
 80183fe:	d3ed      	bcc.n	80183dc <uxr_serialize_CLIENT_Representation+0x78>
 8018400:	ea08 0804 	and.w	r8, r8, r4
 8018404:	e7d7      	b.n	80183b6 <uxr_serialize_CLIENT_Representation+0x52>
 8018406:	f04f 0800 	mov.w	r8, #0
 801840a:	e7d4      	b.n	80183b6 <uxr_serialize_CLIENT_Representation+0x52>
 801840c:	ea08 0800 	and.w	r8, r8, r0
 8018410:	e7d1      	b.n	80183b6 <uxr_serialize_CLIENT_Representation+0x52>
 8018412:	bf00      	nop

08018414 <uxr_deserialize_CLIENT_Representation>:
 8018414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018418:	2204      	movs	r2, #4
 801841a:	460c      	mov	r4, r1
 801841c:	4605      	mov	r5, r0
 801841e:	f7fd f925 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018422:	2202      	movs	r2, #2
 8018424:	4607      	mov	r7, r0
 8018426:	1d21      	adds	r1, r4, #4
 8018428:	4628      	mov	r0, r5
 801842a:	f7fd f91f 	bl	801566c <ucdr_deserialize_array_uint8_t>
 801842e:	4038      	ands	r0, r7
 8018430:	2202      	movs	r2, #2
 8018432:	1da1      	adds	r1, r4, #6
 8018434:	b2c6      	uxtb	r6, r0
 8018436:	4628      	mov	r0, r5
 8018438:	f7fd f918 	bl	801566c <ucdr_deserialize_array_uint8_t>
 801843c:	2204      	movs	r2, #4
 801843e:	4006      	ands	r6, r0
 8018440:	f104 0108 	add.w	r1, r4, #8
 8018444:	4628      	mov	r0, r5
 8018446:	f7fd f911 	bl	801566c <ucdr_deserialize_array_uint8_t>
 801844a:	f104 010c 	add.w	r1, r4, #12
 801844e:	4006      	ands	r6, r0
 8018450:	4628      	mov	r0, r5
 8018452:	f7f6 fc35 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8018456:	f104 010d 	add.w	r1, r4, #13
 801845a:	ea06 0700 	and.w	r7, r6, r0
 801845e:	4628      	mov	r0, r5
 8018460:	f7f6 fc00 	bl	800ec64 <ucdr_deserialize_bool>
 8018464:	7b63      	ldrb	r3, [r4, #13]
 8018466:	4007      	ands	r7, r0
 8018468:	b93b      	cbnz	r3, 801847a <uxr_deserialize_CLIENT_Representation+0x66>
 801846a:	f104 011c 	add.w	r1, r4, #28
 801846e:	4628      	mov	r0, r5
 8018470:	f7f6 fd3c 	bl	800eeec <ucdr_deserialize_uint16_t>
 8018474:	4038      	ands	r0, r7
 8018476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801847a:	f104 0110 	add.w	r1, r4, #16
 801847e:	4628      	mov	r0, r5
 8018480:	f7f6 ff4e 	bl	800f320 <ucdr_deserialize_uint32_t>
 8018484:	6923      	ldr	r3, [r4, #16]
 8018486:	2b01      	cmp	r3, #1
 8018488:	d903      	bls.n	8018492 <uxr_deserialize_CLIENT_Representation+0x7e>
 801848a:	2301      	movs	r3, #1
 801848c:	75ab      	strb	r3, [r5, #22]
 801848e:	2700      	movs	r7, #0
 8018490:	e7eb      	b.n	801846a <uxr_deserialize_CLIENT_Representation+0x56>
 8018492:	b30b      	cbz	r3, 80184d8 <uxr_deserialize_CLIENT_Representation+0xc4>
 8018494:	2800      	cmp	r0, #0
 8018496:	d0fa      	beq.n	801848e <uxr_deserialize_CLIENT_Representation+0x7a>
 8018498:	46a0      	mov	r8, r4
 801849a:	f04f 0900 	mov.w	r9, #0
 801849e:	e001      	b.n	80184a4 <uxr_deserialize_CLIENT_Representation+0x90>
 80184a0:	2e00      	cmp	r6, #0
 80184a2:	d0f4      	beq.n	801848e <uxr_deserialize_CLIENT_Representation+0x7a>
 80184a4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80184a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80184ac:	4628      	mov	r0, r5
 80184ae:	f004 fbd9 	bl	801cc64 <ucdr_deserialize_string>
 80184b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80184b6:	4606      	mov	r6, r0
 80184b8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80184bc:	4628      	mov	r0, r5
 80184be:	f004 fbd1 	bl	801cc64 <ucdr_deserialize_string>
 80184c2:	6923      	ldr	r3, [r4, #16]
 80184c4:	f109 0901 	add.w	r9, r9, #1
 80184c8:	4006      	ands	r6, r0
 80184ca:	4599      	cmp	r9, r3
 80184cc:	f108 0808 	add.w	r8, r8, #8
 80184d0:	b2f6      	uxtb	r6, r6
 80184d2:	d3e5      	bcc.n	80184a0 <uxr_deserialize_CLIENT_Representation+0x8c>
 80184d4:	4037      	ands	r7, r6
 80184d6:	e7c8      	b.n	801846a <uxr_deserialize_CLIENT_Representation+0x56>
 80184d8:	4007      	ands	r7, r0
 80184da:	e7c6      	b.n	801846a <uxr_deserialize_CLIENT_Representation+0x56>

080184dc <uxr_serialize_AGENT_Representation>:
 80184dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184e0:	2204      	movs	r2, #4
 80184e2:	460f      	mov	r7, r1
 80184e4:	4605      	mov	r5, r0
 80184e6:	f7fd f85d 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 80184ea:	2202      	movs	r2, #2
 80184ec:	4604      	mov	r4, r0
 80184ee:	1d39      	adds	r1, r7, #4
 80184f0:	4628      	mov	r0, r5
 80184f2:	f7fd f857 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 80184f6:	4020      	ands	r0, r4
 80184f8:	2202      	movs	r2, #2
 80184fa:	1db9      	adds	r1, r7, #6
 80184fc:	b2c4      	uxtb	r4, r0
 80184fe:	4628      	mov	r0, r5
 8018500:	f7fd f850 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8018504:	7a39      	ldrb	r1, [r7, #8]
 8018506:	4004      	ands	r4, r0
 8018508:	4628      	mov	r0, r5
 801850a:	f7f6 fb95 	bl	800ec38 <ucdr_serialize_bool>
 801850e:	7a3b      	ldrb	r3, [r7, #8]
 8018510:	ea00 0804 	and.w	r8, r0, r4
 8018514:	b913      	cbnz	r3, 801851c <uxr_serialize_AGENT_Representation+0x40>
 8018516:	4640      	mov	r0, r8
 8018518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801851c:	68f9      	ldr	r1, [r7, #12]
 801851e:	4628      	mov	r0, r5
 8018520:	f7f6 fdce 	bl	800f0c0 <ucdr_serialize_uint32_t>
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	b303      	cbz	r3, 801856a <uxr_serialize_AGENT_Representation+0x8e>
 8018528:	b1d0      	cbz	r0, 8018560 <uxr_serialize_AGENT_Representation+0x84>
 801852a:	463e      	mov	r6, r7
 801852c:	f04f 0900 	mov.w	r9, #0
 8018530:	e001      	b.n	8018536 <uxr_serialize_AGENT_Representation+0x5a>
 8018532:	3608      	adds	r6, #8
 8018534:	b1a4      	cbz	r4, 8018560 <uxr_serialize_AGENT_Representation+0x84>
 8018536:	6931      	ldr	r1, [r6, #16]
 8018538:	4628      	mov	r0, r5
 801853a:	f004 fb83 	bl	801cc44 <ucdr_serialize_string>
 801853e:	6971      	ldr	r1, [r6, #20]
 8018540:	4604      	mov	r4, r0
 8018542:	4628      	mov	r0, r5
 8018544:	f004 fb7e 	bl	801cc44 <ucdr_serialize_string>
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	f109 0901 	add.w	r9, r9, #1
 801854e:	4004      	ands	r4, r0
 8018550:	4599      	cmp	r9, r3
 8018552:	b2e4      	uxtb	r4, r4
 8018554:	d3ed      	bcc.n	8018532 <uxr_serialize_AGENT_Representation+0x56>
 8018556:	ea08 0804 	and.w	r8, r8, r4
 801855a:	4640      	mov	r0, r8
 801855c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018560:	f04f 0800 	mov.w	r8, #0
 8018564:	4640      	mov	r0, r8
 8018566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801856a:	ea08 0800 	and.w	r8, r8, r0
 801856e:	e7d2      	b.n	8018516 <uxr_serialize_AGENT_Representation+0x3a>

08018570 <uxr_serialize_DATAWRITER_Representation>:
 8018570:	b570      	push	{r4, r5, r6, lr}
 8018572:	460d      	mov	r5, r1
 8018574:	7809      	ldrb	r1, [r1, #0]
 8018576:	4606      	mov	r6, r0
 8018578:	f7f6 fb8c 	bl	800ec94 <ucdr_serialize_uint8_t>
 801857c:	4604      	mov	r4, r0
 801857e:	b130      	cbz	r0, 801858e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8018580:	782b      	ldrb	r3, [r5, #0]
 8018582:	2b02      	cmp	r3, #2
 8018584:	d00c      	beq.n	80185a0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8018586:	2b03      	cmp	r3, #3
 8018588:	d010      	beq.n	80185ac <uxr_serialize_DATAWRITER_Representation+0x3c>
 801858a:	2b01      	cmp	r3, #1
 801858c:	d008      	beq.n	80185a0 <uxr_serialize_DATAWRITER_Representation+0x30>
 801858e:	2202      	movs	r2, #2
 8018590:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8018594:	4630      	mov	r0, r6
 8018596:	f7fd f805 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 801859a:	4020      	ands	r0, r4
 801859c:	b2c0      	uxtb	r0, r0
 801859e:	bd70      	pop	{r4, r5, r6, pc}
 80185a0:	6869      	ldr	r1, [r5, #4]
 80185a2:	4630      	mov	r0, r6
 80185a4:	f004 fb4e 	bl	801cc44 <ucdr_serialize_string>
 80185a8:	4604      	mov	r4, r0
 80185aa:	e7f0      	b.n	801858e <uxr_serialize_DATAWRITER_Representation+0x1e>
 80185ac:	4629      	mov	r1, r5
 80185ae:	4630      	mov	r0, r6
 80185b0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80185b4:	3104      	adds	r1, #4
 80185b6:	f7fd f993 	bl	80158e0 <ucdr_serialize_sequence_uint8_t>
 80185ba:	4604      	mov	r4, r0
 80185bc:	e7e7      	b.n	801858e <uxr_serialize_DATAWRITER_Representation+0x1e>
 80185be:	bf00      	nop

080185c0 <uxr_serialize_ObjectVariant.part.0>:
 80185c0:	b570      	push	{r4, r5, r6, lr}
 80185c2:	780b      	ldrb	r3, [r1, #0]
 80185c4:	3b01      	subs	r3, #1
 80185c6:	460c      	mov	r4, r1
 80185c8:	4605      	mov	r5, r0
 80185ca:	2b0d      	cmp	r3, #13
 80185cc:	d854      	bhi.n	8018678 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80185ce:	e8df f003 	tbb	[pc, r3]
 80185d2:	0730      	.short	0x0730
 80185d4:	07071b1b 	.word	0x07071b1b
 80185d8:	0c530707 	.word	0x0c530707
 80185dc:	494e0c0c 	.word	0x494e0c0c
 80185e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185e4:	3104      	adds	r1, #4
 80185e6:	f7ff bfc3 	b.w	8018570 <uxr_serialize_DATAWRITER_Representation>
 80185ea:	7909      	ldrb	r1, [r1, #4]
 80185ec:	f7f6 fb52 	bl	800ec94 <ucdr_serialize_uint8_t>
 80185f0:	b1e8      	cbz	r0, 801862e <uxr_serialize_ObjectVariant.part.0+0x6e>
 80185f2:	7923      	ldrb	r3, [r4, #4]
 80185f4:	2b01      	cmp	r3, #1
 80185f6:	d001      	beq.n	80185fc <uxr_serialize_ObjectVariant.part.0+0x3c>
 80185f8:	2b02      	cmp	r3, #2
 80185fa:	d13d      	bne.n	8018678 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80185fc:	68a1      	ldr	r1, [r4, #8]
 80185fe:	4628      	mov	r0, r5
 8018600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018604:	f004 bb1e 	b.w	801cc44 <ucdr_serialize_string>
 8018608:	7909      	ldrb	r1, [r1, #4]
 801860a:	f7f6 fb43 	bl	800ec94 <ucdr_serialize_uint8_t>
 801860e:	4606      	mov	r6, r0
 8018610:	b120      	cbz	r0, 801861c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8018612:	7923      	ldrb	r3, [r4, #4]
 8018614:	2b02      	cmp	r3, #2
 8018616:	d039      	beq.n	801868c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8018618:	2b03      	cmp	r3, #3
 801861a:	d02f      	beq.n	801867c <uxr_serialize_ObjectVariant.part.0+0xbc>
 801861c:	2202      	movs	r2, #2
 801861e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8018622:	4628      	mov	r0, r5
 8018624:	f7fc ffbe 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8018628:	4030      	ands	r0, r6
 801862a:	b2c0      	uxtb	r0, r0
 801862c:	bd70      	pop	{r4, r5, r6, pc}
 801862e:	2000      	movs	r0, #0
 8018630:	bd70      	pop	{r4, r5, r6, pc}
 8018632:	7909      	ldrb	r1, [r1, #4]
 8018634:	f7f6 fb2e 	bl	800ec94 <ucdr_serialize_uint8_t>
 8018638:	4606      	mov	r6, r0
 801863a:	b158      	cbz	r0, 8018654 <uxr_serialize_ObjectVariant.part.0+0x94>
 801863c:	7923      	ldrb	r3, [r4, #4]
 801863e:	2b02      	cmp	r3, #2
 8018640:	d003      	beq.n	801864a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8018642:	2b03      	cmp	r3, #3
 8018644:	d028      	beq.n	8018698 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8018646:	2b01      	cmp	r3, #1
 8018648:	d104      	bne.n	8018654 <uxr_serialize_ObjectVariant.part.0+0x94>
 801864a:	68a1      	ldr	r1, [r4, #8]
 801864c:	4628      	mov	r0, r5
 801864e:	f004 faf9 	bl	801cc44 <ucdr_serialize_string>
 8018652:	4606      	mov	r6, r0
 8018654:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8018658:	4628      	mov	r0, r5
 801865a:	f7f7 f857 	bl	800f70c <ucdr_serialize_int16_t>
 801865e:	4030      	ands	r0, r6
 8018660:	b2c0      	uxtb	r0, r0
 8018662:	bd70      	pop	{r4, r5, r6, pc}
 8018664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018668:	3104      	adds	r1, #4
 801866a:	f7ff be7b 	b.w	8018364 <uxr_serialize_CLIENT_Representation>
 801866e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018672:	3104      	adds	r1, #4
 8018674:	f7ff bf32 	b.w	80184dc <uxr_serialize_AGENT_Representation>
 8018678:	2001      	movs	r0, #1
 801867a:	bd70      	pop	{r4, r5, r6, pc}
 801867c:	68a2      	ldr	r2, [r4, #8]
 801867e:	f104 010c 	add.w	r1, r4, #12
 8018682:	4628      	mov	r0, r5
 8018684:	f7fd f92c 	bl	80158e0 <ucdr_serialize_sequence_uint8_t>
 8018688:	4606      	mov	r6, r0
 801868a:	e7c7      	b.n	801861c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801868c:	68a1      	ldr	r1, [r4, #8]
 801868e:	4628      	mov	r0, r5
 8018690:	f004 fad8 	bl	801cc44 <ucdr_serialize_string>
 8018694:	4606      	mov	r6, r0
 8018696:	e7c1      	b.n	801861c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8018698:	68a2      	ldr	r2, [r4, #8]
 801869a:	f104 010c 	add.w	r1, r4, #12
 801869e:	4628      	mov	r0, r5
 80186a0:	f7fd f91e 	bl	80158e0 <ucdr_serialize_sequence_uint8_t>
 80186a4:	4606      	mov	r6, r0
 80186a6:	e7d5      	b.n	8018654 <uxr_serialize_ObjectVariant.part.0+0x94>

080186a8 <uxr_deserialize_DATAWRITER_Representation>:
 80186a8:	b570      	push	{r4, r5, r6, lr}
 80186aa:	4606      	mov	r6, r0
 80186ac:	460d      	mov	r5, r1
 80186ae:	f7f6 fb07 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 80186b2:	4604      	mov	r4, r0
 80186b4:	b130      	cbz	r0, 80186c4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80186b6:	782b      	ldrb	r3, [r5, #0]
 80186b8:	2b02      	cmp	r3, #2
 80186ba:	d00c      	beq.n	80186d6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80186bc:	2b03      	cmp	r3, #3
 80186be:	d012      	beq.n	80186e6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80186c0:	2b01      	cmp	r3, #1
 80186c2:	d008      	beq.n	80186d6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80186c4:	2202      	movs	r2, #2
 80186c6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80186ca:	4630      	mov	r0, r6
 80186cc:	f7fc ffce 	bl	801566c <ucdr_deserialize_array_uint8_t>
 80186d0:	4020      	ands	r0, r4
 80186d2:	b2c0      	uxtb	r0, r0
 80186d4:	bd70      	pop	{r4, r5, r6, pc}
 80186d6:	6869      	ldr	r1, [r5, #4]
 80186d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80186dc:	4630      	mov	r0, r6
 80186de:	f004 fac1 	bl	801cc64 <ucdr_deserialize_string>
 80186e2:	4604      	mov	r4, r0
 80186e4:	e7ee      	b.n	80186c4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80186e6:	1d2b      	adds	r3, r5, #4
 80186e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80186ec:	f105 0108 	add.w	r1, r5, #8
 80186f0:	4630      	mov	r0, r6
 80186f2:	f7fd f907 	bl	8015904 <ucdr_deserialize_sequence_uint8_t>
 80186f6:	4604      	mov	r4, r0
 80186f8:	e7e4      	b.n	80186c4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80186fa:	bf00      	nop

080186fc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80186fc:	b570      	push	{r4, r5, r6, lr}
 80186fe:	460d      	mov	r5, r1
 8018700:	7809      	ldrb	r1, [r1, #0]
 8018702:	4606      	mov	r6, r0
 8018704:	f7f6 fa98 	bl	800ec38 <ucdr_serialize_bool>
 8018708:	782b      	ldrb	r3, [r5, #0]
 801870a:	4604      	mov	r4, r0
 801870c:	b94b      	cbnz	r3, 8018722 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801870e:	7a29      	ldrb	r1, [r5, #8]
 8018710:	4630      	mov	r0, r6
 8018712:	f7f6 fa91 	bl	800ec38 <ucdr_serialize_bool>
 8018716:	7a2b      	ldrb	r3, [r5, #8]
 8018718:	4004      	ands	r4, r0
 801871a:	b2e4      	uxtb	r4, r4
 801871c:	b943      	cbnz	r3, 8018730 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801871e:	4620      	mov	r0, r4
 8018720:	bd70      	pop	{r4, r5, r6, pc}
 8018722:	6869      	ldr	r1, [r5, #4]
 8018724:	4630      	mov	r0, r6
 8018726:	f004 fa8d 	bl	801cc44 <ucdr_serialize_string>
 801872a:	4004      	ands	r4, r0
 801872c:	b2e4      	uxtb	r4, r4
 801872e:	e7ee      	b.n	801870e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8018730:	68e9      	ldr	r1, [r5, #12]
 8018732:	4630      	mov	r0, r6
 8018734:	f004 fa86 	bl	801cc44 <ucdr_serialize_string>
 8018738:	4004      	ands	r4, r0
 801873a:	4620      	mov	r0, r4
 801873c:	bd70      	pop	{r4, r5, r6, pc}
 801873e:	bf00      	nop

08018740 <uxr_serialize_OBJK_Topic_Binary>:
 8018740:	b570      	push	{r4, r5, r6, lr}
 8018742:	460d      	mov	r5, r1
 8018744:	6809      	ldr	r1, [r1, #0]
 8018746:	4606      	mov	r6, r0
 8018748:	f004 fa7c 	bl	801cc44 <ucdr_serialize_string>
 801874c:	7929      	ldrb	r1, [r5, #4]
 801874e:	4604      	mov	r4, r0
 8018750:	4630      	mov	r0, r6
 8018752:	f7f6 fa71 	bl	800ec38 <ucdr_serialize_bool>
 8018756:	792b      	ldrb	r3, [r5, #4]
 8018758:	4004      	ands	r4, r0
 801875a:	b2e4      	uxtb	r4, r4
 801875c:	b943      	cbnz	r3, 8018770 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801875e:	7b29      	ldrb	r1, [r5, #12]
 8018760:	4630      	mov	r0, r6
 8018762:	f7f6 fa69 	bl	800ec38 <ucdr_serialize_bool>
 8018766:	7b2b      	ldrb	r3, [r5, #12]
 8018768:	4004      	ands	r4, r0
 801876a:	b93b      	cbnz	r3, 801877c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801876c:	4620      	mov	r0, r4
 801876e:	bd70      	pop	{r4, r5, r6, pc}
 8018770:	68a9      	ldr	r1, [r5, #8]
 8018772:	4630      	mov	r0, r6
 8018774:	f004 fa66 	bl	801cc44 <ucdr_serialize_string>
 8018778:	4004      	ands	r4, r0
 801877a:	e7f0      	b.n	801875e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801877c:	6929      	ldr	r1, [r5, #16]
 801877e:	4630      	mov	r0, r6
 8018780:	f004 fa60 	bl	801cc44 <ucdr_serialize_string>
 8018784:	4004      	ands	r4, r0
 8018786:	b2e4      	uxtb	r4, r4
 8018788:	4620      	mov	r0, r4
 801878a:	bd70      	pop	{r4, r5, r6, pc}

0801878c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018790:	460c      	mov	r4, r1
 8018792:	7809      	ldrb	r1, [r1, #0]
 8018794:	4606      	mov	r6, r0
 8018796:	f7f6 fa4f 	bl	800ec38 <ucdr_serialize_bool>
 801879a:	7823      	ldrb	r3, [r4, #0]
 801879c:	4605      	mov	r5, r0
 801879e:	b96b      	cbnz	r3, 80187bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80187a0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80187a4:	4630      	mov	r0, r6
 80187a6:	f7f6 fa47 	bl	800ec38 <ucdr_serialize_bool>
 80187aa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80187ae:	4005      	ands	r5, r0
 80187b0:	b2ed      	uxtb	r5, r5
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d169      	bne.n	801888a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80187b6:	4628      	mov	r0, r5
 80187b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187bc:	6861      	ldr	r1, [r4, #4]
 80187be:	4630      	mov	r0, r6
 80187c0:	f7f6 fc7e 	bl	800f0c0 <ucdr_serialize_uint32_t>
 80187c4:	6863      	ldr	r3, [r4, #4]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d06b      	beq.n	80188a2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80187ca:	2800      	cmp	r0, #0
 80187cc:	d067      	beq.n	801889e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80187ce:	68a1      	ldr	r1, [r4, #8]
 80187d0:	4630      	mov	r0, r6
 80187d2:	f004 fa37 	bl	801cc44 <ucdr_serialize_string>
 80187d6:	6863      	ldr	r3, [r4, #4]
 80187d8:	2b01      	cmp	r3, #1
 80187da:	d953      	bls.n	8018884 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80187dc:	2800      	cmp	r0, #0
 80187de:	d05e      	beq.n	801889e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80187e0:	68e1      	ldr	r1, [r4, #12]
 80187e2:	4630      	mov	r0, r6
 80187e4:	f004 fa2e 	bl	801cc44 <ucdr_serialize_string>
 80187e8:	6863      	ldr	r3, [r4, #4]
 80187ea:	2b02      	cmp	r3, #2
 80187ec:	d94a      	bls.n	8018884 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80187ee:	2800      	cmp	r0, #0
 80187f0:	d055      	beq.n	801889e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80187f2:	6921      	ldr	r1, [r4, #16]
 80187f4:	4630      	mov	r0, r6
 80187f6:	f004 fa25 	bl	801cc44 <ucdr_serialize_string>
 80187fa:	6863      	ldr	r3, [r4, #4]
 80187fc:	2b03      	cmp	r3, #3
 80187fe:	d941      	bls.n	8018884 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018800:	2800      	cmp	r0, #0
 8018802:	d04c      	beq.n	801889e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018804:	6961      	ldr	r1, [r4, #20]
 8018806:	4630      	mov	r0, r6
 8018808:	f004 fa1c 	bl	801cc44 <ucdr_serialize_string>
 801880c:	6863      	ldr	r3, [r4, #4]
 801880e:	2b04      	cmp	r3, #4
 8018810:	d938      	bls.n	8018884 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018812:	2800      	cmp	r0, #0
 8018814:	d043      	beq.n	801889e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018816:	69a1      	ldr	r1, [r4, #24]
 8018818:	4630      	mov	r0, r6
 801881a:	f004 fa13 	bl	801cc44 <ucdr_serialize_string>
 801881e:	6863      	ldr	r3, [r4, #4]
 8018820:	2b05      	cmp	r3, #5
 8018822:	d92f      	bls.n	8018884 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018824:	2800      	cmp	r0, #0
 8018826:	d03a      	beq.n	801889e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018828:	69e1      	ldr	r1, [r4, #28]
 801882a:	4630      	mov	r0, r6
 801882c:	f004 fa0a 	bl	801cc44 <ucdr_serialize_string>
 8018830:	6863      	ldr	r3, [r4, #4]
 8018832:	2b06      	cmp	r3, #6
 8018834:	d926      	bls.n	8018884 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018836:	b390      	cbz	r0, 801889e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018838:	6a21      	ldr	r1, [r4, #32]
 801883a:	4630      	mov	r0, r6
 801883c:	f004 fa02 	bl	801cc44 <ucdr_serialize_string>
 8018840:	6863      	ldr	r3, [r4, #4]
 8018842:	2b07      	cmp	r3, #7
 8018844:	d91e      	bls.n	8018884 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018846:	b350      	cbz	r0, 801889e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018848:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801884a:	4630      	mov	r0, r6
 801884c:	f004 f9fa 	bl	801cc44 <ucdr_serialize_string>
 8018850:	6863      	ldr	r3, [r4, #4]
 8018852:	2b08      	cmp	r3, #8
 8018854:	d916      	bls.n	8018884 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018856:	b310      	cbz	r0, 801889e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018858:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801885a:	4630      	mov	r0, r6
 801885c:	f004 f9f2 	bl	801cc44 <ucdr_serialize_string>
 8018860:	6863      	ldr	r3, [r4, #4]
 8018862:	2b09      	cmp	r3, #9
 8018864:	d90e      	bls.n	8018884 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018866:	b1d0      	cbz	r0, 801889e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018868:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801886c:	2709      	movs	r7, #9
 801886e:	e000      	b.n	8018872 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8018870:	b1a8      	cbz	r0, 801889e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018872:	f858 1b04 	ldr.w	r1, [r8], #4
 8018876:	4630      	mov	r0, r6
 8018878:	f004 f9e4 	bl	801cc44 <ucdr_serialize_string>
 801887c:	6862      	ldr	r2, [r4, #4]
 801887e:	3701      	adds	r7, #1
 8018880:	4297      	cmp	r7, r2
 8018882:	d3f5      	bcc.n	8018870 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8018884:	4005      	ands	r5, r0
 8018886:	b2ed      	uxtb	r5, r5
 8018888:	e78a      	b.n	80187a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801888a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801888c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018890:	4630      	mov	r0, r6
 8018892:	f7fd f825 	bl	80158e0 <ucdr_serialize_sequence_uint8_t>
 8018896:	4005      	ands	r5, r0
 8018898:	4628      	mov	r0, r5
 801889a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801889e:	2500      	movs	r5, #0
 80188a0:	e77e      	b.n	80187a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80188a2:	4028      	ands	r0, r5
 80188a4:	b2c5      	uxtb	r5, r0
 80188a6:	e77b      	b.n	80187a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080188a8 <uxr_serialize_OBJK_Publisher_Binary>:
 80188a8:	b570      	push	{r4, r5, r6, lr}
 80188aa:	460d      	mov	r5, r1
 80188ac:	7809      	ldrb	r1, [r1, #0]
 80188ae:	4606      	mov	r6, r0
 80188b0:	f7f6 f9c2 	bl	800ec38 <ucdr_serialize_bool>
 80188b4:	782b      	ldrb	r3, [r5, #0]
 80188b6:	4604      	mov	r4, r0
 80188b8:	b94b      	cbnz	r3, 80188ce <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80188ba:	7a29      	ldrb	r1, [r5, #8]
 80188bc:	4630      	mov	r0, r6
 80188be:	f7f6 f9bb 	bl	800ec38 <ucdr_serialize_bool>
 80188c2:	7a2b      	ldrb	r3, [r5, #8]
 80188c4:	4004      	ands	r4, r0
 80188c6:	b2e4      	uxtb	r4, r4
 80188c8:	b943      	cbnz	r3, 80188dc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80188ca:	4620      	mov	r0, r4
 80188cc:	bd70      	pop	{r4, r5, r6, pc}
 80188ce:	6869      	ldr	r1, [r5, #4]
 80188d0:	4630      	mov	r0, r6
 80188d2:	f004 f9b7 	bl	801cc44 <ucdr_serialize_string>
 80188d6:	4004      	ands	r4, r0
 80188d8:	b2e4      	uxtb	r4, r4
 80188da:	e7ee      	b.n	80188ba <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80188dc:	f105 010c 	add.w	r1, r5, #12
 80188e0:	4630      	mov	r0, r6
 80188e2:	f7ff ff53 	bl	801878c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80188e6:	4004      	ands	r4, r0
 80188e8:	4620      	mov	r0, r4
 80188ea:	bd70      	pop	{r4, r5, r6, pc}

080188ec <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80188ec:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80188f0:	4688      	mov	r8, r1
 80188f2:	8809      	ldrh	r1, [r1, #0]
 80188f4:	4681      	mov	r9, r0
 80188f6:	f7f6 f9f9 	bl	800ecec <ucdr_serialize_uint16_t>
 80188fa:	f898 1002 	ldrb.w	r1, [r8, #2]
 80188fe:	4606      	mov	r6, r0
 8018900:	4648      	mov	r0, r9
 8018902:	f7f6 f999 	bl	800ec38 <ucdr_serialize_bool>
 8018906:	f898 3002 	ldrb.w	r3, [r8, #2]
 801890a:	4006      	ands	r6, r0
 801890c:	b2f5      	uxtb	r5, r6
 801890e:	b9eb      	cbnz	r3, 801894c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8018910:	f898 1006 	ldrb.w	r1, [r8, #6]
 8018914:	4648      	mov	r0, r9
 8018916:	f7f6 f98f 	bl	800ec38 <ucdr_serialize_bool>
 801891a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801891e:	4005      	ands	r5, r0
 8018920:	bb7b      	cbnz	r3, 8018982 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8018922:	f898 100c 	ldrb.w	r1, [r8, #12]
 8018926:	4648      	mov	r0, r9
 8018928:	f7f6 f986 	bl	800ec38 <ucdr_serialize_bool>
 801892c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8018930:	4005      	ands	r5, r0
 8018932:	b9f3      	cbnz	r3, 8018972 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8018934:	f898 1014 	ldrb.w	r1, [r8, #20]
 8018938:	4648      	mov	r0, r9
 801893a:	f7f6 f97d 	bl	800ec38 <ucdr_serialize_bool>
 801893e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8018942:	4005      	ands	r5, r0
 8018944:	b94b      	cbnz	r3, 801895a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8018946:	4628      	mov	r0, r5
 8018948:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801894c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8018950:	4648      	mov	r0, r9
 8018952:	f7f6 f9cb 	bl	800ecec <ucdr_serialize_uint16_t>
 8018956:	4005      	ands	r5, r0
 8018958:	e7da      	b.n	8018910 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801895a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801895e:	f108 011c 	add.w	r1, r8, #28
 8018962:	4648      	mov	r0, r9
 8018964:	f7fc ffbc 	bl	80158e0 <ucdr_serialize_sequence_uint8_t>
 8018968:	4028      	ands	r0, r5
 801896a:	b2c5      	uxtb	r5, r0
 801896c:	4628      	mov	r0, r5
 801896e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8018972:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8018976:	4648      	mov	r0, r9
 8018978:	f7f6 fba2 	bl	800f0c0 <ucdr_serialize_uint32_t>
 801897c:	4028      	ands	r0, r5
 801897e:	b2c5      	uxtb	r5, r0
 8018980:	e7d8      	b.n	8018934 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8018982:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8018986:	4648      	mov	r0, r9
 8018988:	f7f6 fb9a 	bl	800f0c0 <ucdr_serialize_uint32_t>
 801898c:	4028      	ands	r0, r5
 801898e:	b2c5      	uxtb	r5, r0
 8018990:	e7c7      	b.n	8018922 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8018992:	bf00      	nop

08018994 <uxr_serialize_OBJK_DataWriter_Binary>:
 8018994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018996:	2202      	movs	r2, #2
 8018998:	460d      	mov	r5, r1
 801899a:	4606      	mov	r6, r0
 801899c:	f7fc fe02 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 80189a0:	78a9      	ldrb	r1, [r5, #2]
 80189a2:	4604      	mov	r4, r0
 80189a4:	4630      	mov	r0, r6
 80189a6:	f7f6 f947 	bl	800ec38 <ucdr_serialize_bool>
 80189aa:	78ab      	ldrb	r3, [r5, #2]
 80189ac:	4004      	ands	r4, r0
 80189ae:	b2e4      	uxtb	r4, r4
 80189b0:	b90b      	cbnz	r3, 80189b6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80189b2:	4620      	mov	r0, r4
 80189b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189b6:	f105 0108 	add.w	r1, r5, #8
 80189ba:	4630      	mov	r0, r6
 80189bc:	f7ff ff96 	bl	80188ec <uxr_serialize_OBJK_Endpoint_QosBinary>
 80189c0:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80189c4:	4607      	mov	r7, r0
 80189c6:	4630      	mov	r0, r6
 80189c8:	f7f6 f936 	bl	800ec38 <ucdr_serialize_bool>
 80189cc:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80189d0:	4038      	ands	r0, r7
 80189d2:	b2c7      	uxtb	r7, r0
 80189d4:	b913      	cbnz	r3, 80189dc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80189d6:	403c      	ands	r4, r7
 80189d8:	4620      	mov	r0, r4
 80189da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189dc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80189e0:	4630      	mov	r0, r6
 80189e2:	f7f6 fdc3 	bl	800f56c <ucdr_serialize_uint64_t>
 80189e6:	4007      	ands	r7, r0
 80189e8:	e7f5      	b.n	80189d6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80189ea:	bf00      	nop

080189ec <uxr_serialize_OBJK_Requester_Binary>:
 80189ec:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80189f0:	460f      	mov	r7, r1
 80189f2:	6809      	ldr	r1, [r1, #0]
 80189f4:	4680      	mov	r8, r0
 80189f6:	f004 f925 	bl	801cc44 <ucdr_serialize_string>
 80189fa:	6879      	ldr	r1, [r7, #4]
 80189fc:	4605      	mov	r5, r0
 80189fe:	4640      	mov	r0, r8
 8018a00:	f004 f920 	bl	801cc44 <ucdr_serialize_string>
 8018a04:	68b9      	ldr	r1, [r7, #8]
 8018a06:	4005      	ands	r5, r0
 8018a08:	4640      	mov	r0, r8
 8018a0a:	f004 f91b 	bl	801cc44 <ucdr_serialize_string>
 8018a0e:	b2ec      	uxtb	r4, r5
 8018a10:	4004      	ands	r4, r0
 8018a12:	7b39      	ldrb	r1, [r7, #12]
 8018a14:	4640      	mov	r0, r8
 8018a16:	f7f6 f90f 	bl	800ec38 <ucdr_serialize_bool>
 8018a1a:	7b3b      	ldrb	r3, [r7, #12]
 8018a1c:	4004      	ands	r4, r0
 8018a1e:	b94b      	cbnz	r3, 8018a34 <uxr_serialize_OBJK_Requester_Binary+0x48>
 8018a20:	7d39      	ldrb	r1, [r7, #20]
 8018a22:	4640      	mov	r0, r8
 8018a24:	f7f6 f908 	bl	800ec38 <ucdr_serialize_bool>
 8018a28:	7d3b      	ldrb	r3, [r7, #20]
 8018a2a:	4004      	ands	r4, r0
 8018a2c:	b943      	cbnz	r3, 8018a40 <uxr_serialize_OBJK_Requester_Binary+0x54>
 8018a2e:	4620      	mov	r0, r4
 8018a30:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8018a34:	6939      	ldr	r1, [r7, #16]
 8018a36:	4640      	mov	r0, r8
 8018a38:	f004 f904 	bl	801cc44 <ucdr_serialize_string>
 8018a3c:	4004      	ands	r4, r0
 8018a3e:	e7ef      	b.n	8018a20 <uxr_serialize_OBJK_Requester_Binary+0x34>
 8018a40:	69b9      	ldr	r1, [r7, #24]
 8018a42:	4640      	mov	r0, r8
 8018a44:	f004 f8fe 	bl	801cc44 <ucdr_serialize_string>
 8018a48:	4004      	ands	r4, r0
 8018a4a:	b2e4      	uxtb	r4, r4
 8018a4c:	4620      	mov	r0, r4
 8018a4e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8018a52:	bf00      	nop

08018a54 <uxr_serialize_OBJK_Replier_Binary>:
 8018a54:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8018a58:	460f      	mov	r7, r1
 8018a5a:	6809      	ldr	r1, [r1, #0]
 8018a5c:	4680      	mov	r8, r0
 8018a5e:	f004 f8f1 	bl	801cc44 <ucdr_serialize_string>
 8018a62:	6879      	ldr	r1, [r7, #4]
 8018a64:	4605      	mov	r5, r0
 8018a66:	4640      	mov	r0, r8
 8018a68:	f004 f8ec 	bl	801cc44 <ucdr_serialize_string>
 8018a6c:	68b9      	ldr	r1, [r7, #8]
 8018a6e:	4005      	ands	r5, r0
 8018a70:	4640      	mov	r0, r8
 8018a72:	f004 f8e7 	bl	801cc44 <ucdr_serialize_string>
 8018a76:	b2ec      	uxtb	r4, r5
 8018a78:	4004      	ands	r4, r0
 8018a7a:	7b39      	ldrb	r1, [r7, #12]
 8018a7c:	4640      	mov	r0, r8
 8018a7e:	f7f6 f8db 	bl	800ec38 <ucdr_serialize_bool>
 8018a82:	7b3b      	ldrb	r3, [r7, #12]
 8018a84:	4004      	ands	r4, r0
 8018a86:	b94b      	cbnz	r3, 8018a9c <uxr_serialize_OBJK_Replier_Binary+0x48>
 8018a88:	7d39      	ldrb	r1, [r7, #20]
 8018a8a:	4640      	mov	r0, r8
 8018a8c:	f7f6 f8d4 	bl	800ec38 <ucdr_serialize_bool>
 8018a90:	7d3b      	ldrb	r3, [r7, #20]
 8018a92:	4004      	ands	r4, r0
 8018a94:	b943      	cbnz	r3, 8018aa8 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8018a96:	4620      	mov	r0, r4
 8018a98:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8018a9c:	6939      	ldr	r1, [r7, #16]
 8018a9e:	4640      	mov	r0, r8
 8018aa0:	f004 f8d0 	bl	801cc44 <ucdr_serialize_string>
 8018aa4:	4004      	ands	r4, r0
 8018aa6:	e7ef      	b.n	8018a88 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8018aa8:	69b9      	ldr	r1, [r7, #24]
 8018aaa:	4640      	mov	r0, r8
 8018aac:	f004 f8ca 	bl	801cc44 <ucdr_serialize_string>
 8018ab0:	4004      	ands	r4, r0
 8018ab2:	b2e4      	uxtb	r4, r4
 8018ab4:	4620      	mov	r0, r4
 8018ab6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8018aba:	bf00      	nop

08018abc <uxr_deserialize_ObjectVariant>:
 8018abc:	b570      	push	{r4, r5, r6, lr}
 8018abe:	4605      	mov	r5, r0
 8018ac0:	460e      	mov	r6, r1
 8018ac2:	f7f6 f8fd 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8018ac6:	b168      	cbz	r0, 8018ae4 <uxr_deserialize_ObjectVariant+0x28>
 8018ac8:	7833      	ldrb	r3, [r6, #0]
 8018aca:	3b01      	subs	r3, #1
 8018acc:	4604      	mov	r4, r0
 8018ace:	2b0d      	cmp	r3, #13
 8018ad0:	d809      	bhi.n	8018ae6 <uxr_deserialize_ObjectVariant+0x2a>
 8018ad2:	e8df f003 	tbb	[pc, r3]
 8018ad6:	0a41      	.short	0x0a41
 8018ad8:	0a0a2323 	.word	0x0a0a2323
 8018adc:	10080a0a 	.word	0x10080a0a
 8018ae0:	565c1010 	.word	0x565c1010
 8018ae4:	2400      	movs	r4, #0
 8018ae6:	4620      	mov	r0, r4
 8018ae8:	bd70      	pop	{r4, r5, r6, pc}
 8018aea:	1d31      	adds	r1, r6, #4
 8018aec:	4628      	mov	r0, r5
 8018aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018af2:	f7ff bdd9 	b.w	80186a8 <uxr_deserialize_DATAWRITER_Representation>
 8018af6:	1d31      	adds	r1, r6, #4
 8018af8:	4628      	mov	r0, r5
 8018afa:	f7f6 f8e1 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8018afe:	2800      	cmp	r0, #0
 8018b00:	d0f0      	beq.n	8018ae4 <uxr_deserialize_ObjectVariant+0x28>
 8018b02:	7933      	ldrb	r3, [r6, #4]
 8018b04:	2b01      	cmp	r3, #1
 8018b06:	d001      	beq.n	8018b0c <uxr_deserialize_ObjectVariant+0x50>
 8018b08:	2b02      	cmp	r3, #2
 8018b0a:	d1ec      	bne.n	8018ae6 <uxr_deserialize_ObjectVariant+0x2a>
 8018b0c:	68b1      	ldr	r1, [r6, #8]
 8018b0e:	4628      	mov	r0, r5
 8018b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b18:	f004 b8a4 	b.w	801cc64 <ucdr_deserialize_string>
 8018b1c:	1d31      	adds	r1, r6, #4
 8018b1e:	4628      	mov	r0, r5
 8018b20:	f7f6 f8ce 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8018b24:	4604      	mov	r4, r0
 8018b26:	b170      	cbz	r0, 8018b46 <uxr_deserialize_ObjectVariant+0x8a>
 8018b28:	7933      	ldrb	r3, [r6, #4]
 8018b2a:	2b02      	cmp	r3, #2
 8018b2c:	d04c      	beq.n	8018bc8 <uxr_deserialize_ObjectVariant+0x10c>
 8018b2e:	2b03      	cmp	r3, #3
 8018b30:	d109      	bne.n	8018b46 <uxr_deserialize_ObjectVariant+0x8a>
 8018b32:	f106 0308 	add.w	r3, r6, #8
 8018b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018b3a:	f106 010c 	add.w	r1, r6, #12
 8018b3e:	4628      	mov	r0, r5
 8018b40:	f7fc fee0 	bl	8015904 <ucdr_deserialize_sequence_uint8_t>
 8018b44:	4604      	mov	r4, r0
 8018b46:	2202      	movs	r2, #2
 8018b48:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8018b4c:	4628      	mov	r0, r5
 8018b4e:	f7fc fd8d 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018b52:	4020      	ands	r0, r4
 8018b54:	b2c4      	uxtb	r4, r0
 8018b56:	e7c6      	b.n	8018ae6 <uxr_deserialize_ObjectVariant+0x2a>
 8018b58:	1d31      	adds	r1, r6, #4
 8018b5a:	4628      	mov	r0, r5
 8018b5c:	f7f6 f8b0 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8018b60:	4604      	mov	r4, r0
 8018b62:	b130      	cbz	r0, 8018b72 <uxr_deserialize_ObjectVariant+0xb6>
 8018b64:	7933      	ldrb	r3, [r6, #4]
 8018b66:	2b02      	cmp	r3, #2
 8018b68:	d036      	beq.n	8018bd8 <uxr_deserialize_ObjectVariant+0x11c>
 8018b6a:	2b03      	cmp	r3, #3
 8018b6c:	d03c      	beq.n	8018be8 <uxr_deserialize_ObjectVariant+0x12c>
 8018b6e:	2b01      	cmp	r3, #1
 8018b70:	d032      	beq.n	8018bd8 <uxr_deserialize_ObjectVariant+0x11c>
 8018b72:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8018b76:	4628      	mov	r0, r5
 8018b78:	f7f6 fe48 	bl	800f80c <ucdr_deserialize_int16_t>
 8018b7c:	4020      	ands	r0, r4
 8018b7e:	b2c4      	uxtb	r4, r0
 8018b80:	e7b1      	b.n	8018ae6 <uxr_deserialize_ObjectVariant+0x2a>
 8018b82:	1d31      	adds	r1, r6, #4
 8018b84:	4628      	mov	r0, r5
 8018b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b8a:	f7ff bc43 	b.w	8018414 <uxr_deserialize_CLIENT_Representation>
 8018b8e:	2204      	movs	r2, #4
 8018b90:	18b1      	adds	r1, r6, r2
 8018b92:	4628      	mov	r0, r5
 8018b94:	f7fc fd6a 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018b98:	2202      	movs	r2, #2
 8018b9a:	f106 0108 	add.w	r1, r6, #8
 8018b9e:	4604      	mov	r4, r0
 8018ba0:	4628      	mov	r0, r5
 8018ba2:	f7fc fd63 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018ba6:	2202      	movs	r2, #2
 8018ba8:	4004      	ands	r4, r0
 8018baa:	f106 010a 	add.w	r1, r6, #10
 8018bae:	4628      	mov	r0, r5
 8018bb0:	f7fc fd5c 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018bb4:	b2e4      	uxtb	r4, r4
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	f106 010c 	add.w	r1, r6, #12
 8018bbc:	4628      	mov	r0, r5
 8018bbe:	401c      	ands	r4, r3
 8018bc0:	f7f6 f850 	bl	800ec64 <ucdr_deserialize_bool>
 8018bc4:	4004      	ands	r4, r0
 8018bc6:	e78e      	b.n	8018ae6 <uxr_deserialize_ObjectVariant+0x2a>
 8018bc8:	68b1      	ldr	r1, [r6, #8]
 8018bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018bce:	4628      	mov	r0, r5
 8018bd0:	f004 f848 	bl	801cc64 <ucdr_deserialize_string>
 8018bd4:	4604      	mov	r4, r0
 8018bd6:	e7b6      	b.n	8018b46 <uxr_deserialize_ObjectVariant+0x8a>
 8018bd8:	68b1      	ldr	r1, [r6, #8]
 8018bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018bde:	4628      	mov	r0, r5
 8018be0:	f004 f840 	bl	801cc64 <ucdr_deserialize_string>
 8018be4:	4604      	mov	r4, r0
 8018be6:	e7c4      	b.n	8018b72 <uxr_deserialize_ObjectVariant+0xb6>
 8018be8:	f106 0308 	add.w	r3, r6, #8
 8018bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018bf0:	f106 010c 	add.w	r1, r6, #12
 8018bf4:	4628      	mov	r0, r5
 8018bf6:	f7fc fe85 	bl	8015904 <ucdr_deserialize_sequence_uint8_t>
 8018bfa:	4604      	mov	r4, r0
 8018bfc:	e7b9      	b.n	8018b72 <uxr_deserialize_ObjectVariant+0xb6>
 8018bfe:	bf00      	nop

08018c00 <uxr_deserialize_BaseObjectRequest>:
 8018c00:	b570      	push	{r4, r5, r6, lr}
 8018c02:	2202      	movs	r2, #2
 8018c04:	4605      	mov	r5, r0
 8018c06:	460e      	mov	r6, r1
 8018c08:	f7fc fd30 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018c0c:	2202      	movs	r2, #2
 8018c0e:	4604      	mov	r4, r0
 8018c10:	18b1      	adds	r1, r6, r2
 8018c12:	4628      	mov	r0, r5
 8018c14:	f7fc fd2a 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018c18:	4020      	ands	r0, r4
 8018c1a:	b2c0      	uxtb	r0, r0
 8018c1c:	bd70      	pop	{r4, r5, r6, pc}
 8018c1e:	bf00      	nop

08018c20 <uxr_serialize_ActivityInfoVariant>:
 8018c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c24:	460d      	mov	r5, r1
 8018c26:	7809      	ldrb	r1, [r1, #0]
 8018c28:	4607      	mov	r7, r0
 8018c2a:	f7f6 f833 	bl	800ec94 <ucdr_serialize_uint8_t>
 8018c2e:	4681      	mov	r9, r0
 8018c30:	b138      	cbz	r0, 8018c42 <uxr_serialize_ActivityInfoVariant+0x22>
 8018c32:	782b      	ldrb	r3, [r5, #0]
 8018c34:	2b06      	cmp	r3, #6
 8018c36:	f000 8082 	beq.w	8018d3e <uxr_serialize_ActivityInfoVariant+0x11e>
 8018c3a:	2b0d      	cmp	r3, #13
 8018c3c:	d016      	beq.n	8018c6c <uxr_serialize_ActivityInfoVariant+0x4c>
 8018c3e:	2b05      	cmp	r3, #5
 8018c40:	d002      	beq.n	8018c48 <uxr_serialize_ActivityInfoVariant+0x28>
 8018c42:	4648      	mov	r0, r9
 8018c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c48:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8018c4c:	4638      	mov	r0, r7
 8018c4e:	f7f6 fd5d 	bl	800f70c <ucdr_serialize_int16_t>
 8018c52:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8018c56:	4681      	mov	r9, r0
 8018c58:	4638      	mov	r0, r7
 8018c5a:	f7f6 fc87 	bl	800f56c <ucdr_serialize_uint64_t>
 8018c5e:	ea09 0000 	and.w	r0, r9, r0
 8018c62:	fa5f f980 	uxtb.w	r9, r0
 8018c66:	4648      	mov	r0, r9
 8018c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c6c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8018c70:	4638      	mov	r0, r7
 8018c72:	f7f6 fd4b 	bl	800f70c <ucdr_serialize_int16_t>
 8018c76:	68e9      	ldr	r1, [r5, #12]
 8018c78:	4681      	mov	r9, r0
 8018c7a:	4638      	mov	r0, r7
 8018c7c:	f7f6 fa20 	bl	800f0c0 <ucdr_serialize_uint32_t>
 8018c80:	68eb      	ldr	r3, [r5, #12]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d0eb      	beq.n	8018c5e <uxr_serialize_ActivityInfoVariant+0x3e>
 8018c86:	b320      	cbz	r0, 8018cd2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8018c88:	f105 080c 	add.w	r8, r5, #12
 8018c8c:	2600      	movs	r6, #0
 8018c8e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8018c92:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8018c96:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8018c9a:	4638      	mov	r0, r7
 8018c9c:	f7f5 fffa 	bl	800ec94 <ucdr_serialize_uint8_t>
 8018ca0:	2800      	cmp	r0, #0
 8018ca2:	d053      	beq.n	8018d4c <uxr_serialize_ActivityInfoVariant+0x12c>
 8018ca4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8018ca8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8018cac:	0074      	lsls	r4, r6, #1
 8018cae:	00c9      	lsls	r1, r1, #3
 8018cb0:	2b03      	cmp	r3, #3
 8018cb2:	d854      	bhi.n	8018d5e <uxr_serialize_ActivityInfoVariant+0x13e>
 8018cb4:	e8df f003 	tbb	[pc, r3]
 8018cb8:	02102132 	.word	0x02102132
 8018cbc:	4441      	add	r1, r8
 8018cbe:	4638      	mov	r0, r7
 8018cc0:	6889      	ldr	r1, [r1, #8]
 8018cc2:	f003 ffbf 	bl	801cc44 <ucdr_serialize_string>
 8018cc6:	68ea      	ldr	r2, [r5, #12]
 8018cc8:	3601      	adds	r6, #1
 8018cca:	4296      	cmp	r6, r2
 8018ccc:	d242      	bcs.n	8018d54 <uxr_serialize_ActivityInfoVariant+0x134>
 8018cce:	2800      	cmp	r0, #0
 8018cd0:	d1dd      	bne.n	8018c8e <uxr_serialize_ActivityInfoVariant+0x6e>
 8018cd2:	f04f 0900 	mov.w	r9, #0
 8018cd6:	e7b4      	b.n	8018c42 <uxr_serialize_ActivityInfoVariant+0x22>
 8018cd8:	3108      	adds	r1, #8
 8018cda:	4441      	add	r1, r8
 8018cdc:	2210      	movs	r2, #16
 8018cde:	4638      	mov	r0, r7
 8018ce0:	f7fc fc60 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8018ce4:	4434      	add	r4, r6
 8018ce6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8018cea:	4604      	mov	r4, r0
 8018cec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8018cee:	4638      	mov	r0, r7
 8018cf0:	f7f6 f9e6 	bl	800f0c0 <ucdr_serialize_uint32_t>
 8018cf4:	4020      	ands	r0, r4
 8018cf6:	b2c0      	uxtb	r0, r0
 8018cf8:	e7e5      	b.n	8018cc6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8018cfa:	3108      	adds	r1, #8
 8018cfc:	4441      	add	r1, r8
 8018cfe:	2204      	movs	r2, #4
 8018d00:	4638      	mov	r0, r7
 8018d02:	f7fc fc4f 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8018d06:	4434      	add	r4, r6
 8018d08:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8018d0c:	4604      	mov	r4, r0
 8018d0e:	8b19      	ldrh	r1, [r3, #24]
 8018d10:	4638      	mov	r0, r7
 8018d12:	f7f5 ffeb 	bl	800ecec <ucdr_serialize_uint16_t>
 8018d16:	4020      	ands	r0, r4
 8018d18:	b2c0      	uxtb	r0, r0
 8018d1a:	e7d4      	b.n	8018cc6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8018d1c:	3108      	adds	r1, #8
 8018d1e:	4441      	add	r1, r8
 8018d20:	2202      	movs	r2, #2
 8018d22:	4638      	mov	r0, r7
 8018d24:	f7fc fc3e 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8018d28:	4434      	add	r4, r6
 8018d2a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8018d2e:	4604      	mov	r4, r0
 8018d30:	7d99      	ldrb	r1, [r3, #22]
 8018d32:	4638      	mov	r0, r7
 8018d34:	f7f5 ffae 	bl	800ec94 <ucdr_serialize_uint8_t>
 8018d38:	4020      	ands	r0, r4
 8018d3a:	b2c0      	uxtb	r0, r0
 8018d3c:	e7c3      	b.n	8018cc6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8018d3e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8018d42:	4638      	mov	r0, r7
 8018d44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d48:	f7f6 bce0 	b.w	800f70c <ucdr_serialize_int16_t>
 8018d4c:	68ea      	ldr	r2, [r5, #12]
 8018d4e:	3601      	adds	r6, #1
 8018d50:	42b2      	cmp	r2, r6
 8018d52:	d8be      	bhi.n	8018cd2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8018d54:	ea09 0900 	and.w	r9, r9, r0
 8018d58:	fa5f f989 	uxtb.w	r9, r9
 8018d5c:	e771      	b.n	8018c42 <uxr_serialize_ActivityInfoVariant+0x22>
 8018d5e:	68eb      	ldr	r3, [r5, #12]
 8018d60:	3601      	adds	r6, #1
 8018d62:	429e      	cmp	r6, r3
 8018d64:	f10a 0a18 	add.w	sl, sl, #24
 8018d68:	d395      	bcc.n	8018c96 <uxr_serialize_ActivityInfoVariant+0x76>
 8018d6a:	e76a      	b.n	8018c42 <uxr_serialize_ActivityInfoVariant+0x22>

08018d6c <uxr_deserialize_BaseObjectReply>:
 8018d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d70:	2202      	movs	r2, #2
 8018d72:	4606      	mov	r6, r0
 8018d74:	460f      	mov	r7, r1
 8018d76:	f7fc fc79 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018d7a:	2202      	movs	r2, #2
 8018d7c:	18b9      	adds	r1, r7, r2
 8018d7e:	4605      	mov	r5, r0
 8018d80:	4630      	mov	r0, r6
 8018d82:	f7fc fc73 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018d86:	1d39      	adds	r1, r7, #4
 8018d88:	4680      	mov	r8, r0
 8018d8a:	4630      	mov	r0, r6
 8018d8c:	f7f5 ff98 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8018d90:	1d79      	adds	r1, r7, #5
 8018d92:	4604      	mov	r4, r0
 8018d94:	4630      	mov	r0, r6
 8018d96:	f7f5 ff93 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8018d9a:	ea05 0508 	and.w	r5, r5, r8
 8018d9e:	402c      	ands	r4, r5
 8018da0:	4020      	ands	r0, r4
 8018da2:	b2c0      	uxtb	r0, r0
 8018da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018da8 <uxr_serialize_ReadSpecification>:
 8018da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dac:	460e      	mov	r6, r1
 8018dae:	7809      	ldrb	r1, [r1, #0]
 8018db0:	4607      	mov	r7, r0
 8018db2:	f7f5 ff6f 	bl	800ec94 <ucdr_serialize_uint8_t>
 8018db6:	7871      	ldrb	r1, [r6, #1]
 8018db8:	4604      	mov	r4, r0
 8018dba:	4638      	mov	r0, r7
 8018dbc:	f7f5 ff6a 	bl	800ec94 <ucdr_serialize_uint8_t>
 8018dc0:	78b1      	ldrb	r1, [r6, #2]
 8018dc2:	4004      	ands	r4, r0
 8018dc4:	4638      	mov	r0, r7
 8018dc6:	f7f5 ff37 	bl	800ec38 <ucdr_serialize_bool>
 8018dca:	78b3      	ldrb	r3, [r6, #2]
 8018dcc:	b2e4      	uxtb	r4, r4
 8018dce:	4004      	ands	r4, r0
 8018dd0:	b94b      	cbnz	r3, 8018de6 <uxr_serialize_ReadSpecification+0x3e>
 8018dd2:	7a31      	ldrb	r1, [r6, #8]
 8018dd4:	4638      	mov	r0, r7
 8018dd6:	f7f5 ff2f 	bl	800ec38 <ucdr_serialize_bool>
 8018dda:	7a33      	ldrb	r3, [r6, #8]
 8018ddc:	4004      	ands	r4, r0
 8018dde:	b943      	cbnz	r3, 8018df2 <uxr_serialize_ReadSpecification+0x4a>
 8018de0:	4620      	mov	r0, r4
 8018de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018de6:	6871      	ldr	r1, [r6, #4]
 8018de8:	4638      	mov	r0, r7
 8018dea:	f003 ff2b 	bl	801cc44 <ucdr_serialize_string>
 8018dee:	4004      	ands	r4, r0
 8018df0:	e7ef      	b.n	8018dd2 <uxr_serialize_ReadSpecification+0x2a>
 8018df2:	8971      	ldrh	r1, [r6, #10]
 8018df4:	4638      	mov	r0, r7
 8018df6:	f7f5 ff79 	bl	800ecec <ucdr_serialize_uint16_t>
 8018dfa:	89b1      	ldrh	r1, [r6, #12]
 8018dfc:	4605      	mov	r5, r0
 8018dfe:	4638      	mov	r0, r7
 8018e00:	f7f5 ff74 	bl	800ecec <ucdr_serialize_uint16_t>
 8018e04:	89f1      	ldrh	r1, [r6, #14]
 8018e06:	4005      	ands	r5, r0
 8018e08:	4638      	mov	r0, r7
 8018e0a:	f7f5 ff6f 	bl	800ecec <ucdr_serialize_uint16_t>
 8018e0e:	8a31      	ldrh	r1, [r6, #16]
 8018e10:	4680      	mov	r8, r0
 8018e12:	4638      	mov	r0, r7
 8018e14:	f7f5 ff6a 	bl	800ecec <ucdr_serialize_uint16_t>
 8018e18:	b2ed      	uxtb	r5, r5
 8018e1a:	4025      	ands	r5, r4
 8018e1c:	ea08 0505 	and.w	r5, r8, r5
 8018e20:	ea00 0405 	and.w	r4, r0, r5
 8018e24:	4620      	mov	r0, r4
 8018e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e2a:	bf00      	nop

08018e2c <uxr_serialize_CREATE_CLIENT_Payload>:
 8018e2c:	f7ff ba9a 	b.w	8018364 <uxr_serialize_CLIENT_Representation>

08018e30 <uxr_serialize_CREATE_Payload>:
 8018e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e32:	2202      	movs	r2, #2
 8018e34:	4607      	mov	r7, r0
 8018e36:	460e      	mov	r6, r1
 8018e38:	f7fc fbb4 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8018e3c:	2202      	movs	r2, #2
 8018e3e:	18b1      	adds	r1, r6, r2
 8018e40:	4605      	mov	r5, r0
 8018e42:	4638      	mov	r0, r7
 8018e44:	f7fc fbae 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8018e48:	7931      	ldrb	r1, [r6, #4]
 8018e4a:	4604      	mov	r4, r0
 8018e4c:	4638      	mov	r0, r7
 8018e4e:	f7f5 ff21 	bl	800ec94 <ucdr_serialize_uint8_t>
 8018e52:	b170      	cbz	r0, 8018e72 <uxr_serialize_CREATE_Payload+0x42>
 8018e54:	7933      	ldrb	r3, [r6, #4]
 8018e56:	402c      	ands	r4, r5
 8018e58:	3b01      	subs	r3, #1
 8018e5a:	b2e4      	uxtb	r4, r4
 8018e5c:	2b0d      	cmp	r3, #13
 8018e5e:	d809      	bhi.n	8018e74 <uxr_serialize_CREATE_Payload+0x44>
 8018e60:	e8df f003 	tbb	[pc, r3]
 8018e64:	23230a4c 	.word	0x23230a4c
 8018e68:	0a0a0a0a 	.word	0x0a0a0a0a
 8018e6c:	12121208 	.word	0x12121208
 8018e70:	3e45      	.short	0x3e45
 8018e72:	2400      	movs	r4, #0
 8018e74:	4620      	mov	r0, r4
 8018e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e78:	f106 0108 	add.w	r1, r6, #8
 8018e7c:	4638      	mov	r0, r7
 8018e7e:	f7ff fb77 	bl	8018570 <uxr_serialize_DATAWRITER_Representation>
 8018e82:	4004      	ands	r4, r0
 8018e84:	4620      	mov	r0, r4
 8018e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e88:	7a31      	ldrb	r1, [r6, #8]
 8018e8a:	4638      	mov	r0, r7
 8018e8c:	f7f5 ff02 	bl	800ec94 <ucdr_serialize_uint8_t>
 8018e90:	2800      	cmp	r0, #0
 8018e92:	d0ee      	beq.n	8018e72 <uxr_serialize_CREATE_Payload+0x42>
 8018e94:	7a33      	ldrb	r3, [r6, #8]
 8018e96:	2b01      	cmp	r3, #1
 8018e98:	d001      	beq.n	8018e9e <uxr_serialize_CREATE_Payload+0x6e>
 8018e9a:	2b02      	cmp	r3, #2
 8018e9c:	d1ea      	bne.n	8018e74 <uxr_serialize_CREATE_Payload+0x44>
 8018e9e:	68f1      	ldr	r1, [r6, #12]
 8018ea0:	4638      	mov	r0, r7
 8018ea2:	f003 fecf 	bl	801cc44 <ucdr_serialize_string>
 8018ea6:	4004      	ands	r4, r0
 8018ea8:	e7e4      	b.n	8018e74 <uxr_serialize_CREATE_Payload+0x44>
 8018eaa:	7a31      	ldrb	r1, [r6, #8]
 8018eac:	4638      	mov	r0, r7
 8018eae:	f7f5 fef1 	bl	800ec94 <ucdr_serialize_uint8_t>
 8018eb2:	4605      	mov	r5, r0
 8018eb4:	b158      	cbz	r0, 8018ece <uxr_serialize_CREATE_Payload+0x9e>
 8018eb6:	7a33      	ldrb	r3, [r6, #8]
 8018eb8:	2b02      	cmp	r3, #2
 8018eba:	d034      	beq.n	8018f26 <uxr_serialize_CREATE_Payload+0xf6>
 8018ebc:	2b03      	cmp	r3, #3
 8018ebe:	d106      	bne.n	8018ece <uxr_serialize_CREATE_Payload+0x9e>
 8018ec0:	68f2      	ldr	r2, [r6, #12]
 8018ec2:	f106 0110 	add.w	r1, r6, #16
 8018ec6:	4638      	mov	r0, r7
 8018ec8:	f7fc fd0a 	bl	80158e0 <ucdr_serialize_sequence_uint8_t>
 8018ecc:	4605      	mov	r5, r0
 8018ece:	2202      	movs	r2, #2
 8018ed0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8018ed4:	4638      	mov	r0, r7
 8018ed6:	f7fc fb65 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8018eda:	4028      	ands	r0, r5
 8018edc:	4004      	ands	r4, r0
 8018ede:	e7c9      	b.n	8018e74 <uxr_serialize_CREATE_Payload+0x44>
 8018ee0:	f106 0108 	add.w	r1, r6, #8
 8018ee4:	4638      	mov	r0, r7
 8018ee6:	f7ff fa3d 	bl	8018364 <uxr_serialize_CLIENT_Representation>
 8018eea:	4004      	ands	r4, r0
 8018eec:	e7c2      	b.n	8018e74 <uxr_serialize_CREATE_Payload+0x44>
 8018eee:	f106 0108 	add.w	r1, r6, #8
 8018ef2:	4638      	mov	r0, r7
 8018ef4:	f7ff faf2 	bl	80184dc <uxr_serialize_AGENT_Representation>
 8018ef8:	4004      	ands	r4, r0
 8018efa:	e7bb      	b.n	8018e74 <uxr_serialize_CREATE_Payload+0x44>
 8018efc:	7a31      	ldrb	r1, [r6, #8]
 8018efe:	4638      	mov	r0, r7
 8018f00:	f7f5 fec8 	bl	800ec94 <ucdr_serialize_uint8_t>
 8018f04:	4605      	mov	r5, r0
 8018f06:	b130      	cbz	r0, 8018f16 <uxr_serialize_CREATE_Payload+0xe6>
 8018f08:	7a33      	ldrb	r3, [r6, #8]
 8018f0a:	2b02      	cmp	r3, #2
 8018f0c:	d011      	beq.n	8018f32 <uxr_serialize_CREATE_Payload+0x102>
 8018f0e:	2b03      	cmp	r3, #3
 8018f10:	d015      	beq.n	8018f3e <uxr_serialize_CREATE_Payload+0x10e>
 8018f12:	2b01      	cmp	r3, #1
 8018f14:	d00d      	beq.n	8018f32 <uxr_serialize_CREATE_Payload+0x102>
 8018f16:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8018f1a:	4638      	mov	r0, r7
 8018f1c:	f7f6 fbf6 	bl	800f70c <ucdr_serialize_int16_t>
 8018f20:	4028      	ands	r0, r5
 8018f22:	4004      	ands	r4, r0
 8018f24:	e7a6      	b.n	8018e74 <uxr_serialize_CREATE_Payload+0x44>
 8018f26:	68f1      	ldr	r1, [r6, #12]
 8018f28:	4638      	mov	r0, r7
 8018f2a:	f003 fe8b 	bl	801cc44 <ucdr_serialize_string>
 8018f2e:	4605      	mov	r5, r0
 8018f30:	e7cd      	b.n	8018ece <uxr_serialize_CREATE_Payload+0x9e>
 8018f32:	68f1      	ldr	r1, [r6, #12]
 8018f34:	4638      	mov	r0, r7
 8018f36:	f003 fe85 	bl	801cc44 <ucdr_serialize_string>
 8018f3a:	4605      	mov	r5, r0
 8018f3c:	e7eb      	b.n	8018f16 <uxr_serialize_CREATE_Payload+0xe6>
 8018f3e:	68f2      	ldr	r2, [r6, #12]
 8018f40:	f106 0110 	add.w	r1, r6, #16
 8018f44:	4638      	mov	r0, r7
 8018f46:	f7fc fccb 	bl	80158e0 <ucdr_serialize_sequence_uint8_t>
 8018f4a:	4605      	mov	r5, r0
 8018f4c:	e7e3      	b.n	8018f16 <uxr_serialize_CREATE_Payload+0xe6>
 8018f4e:	bf00      	nop

08018f50 <uxr_deserialize_GET_INFO_Payload>:
 8018f50:	b570      	push	{r4, r5, r6, lr}
 8018f52:	2202      	movs	r2, #2
 8018f54:	4605      	mov	r5, r0
 8018f56:	460e      	mov	r6, r1
 8018f58:	f7fc fb88 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018f5c:	2202      	movs	r2, #2
 8018f5e:	18b1      	adds	r1, r6, r2
 8018f60:	4604      	mov	r4, r0
 8018f62:	4628      	mov	r0, r5
 8018f64:	f7fc fb82 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018f68:	1d31      	adds	r1, r6, #4
 8018f6a:	4004      	ands	r4, r0
 8018f6c:	4628      	mov	r0, r5
 8018f6e:	f7f6 f9d7 	bl	800f320 <ucdr_deserialize_uint32_t>
 8018f72:	b2e4      	uxtb	r4, r4
 8018f74:	4020      	ands	r0, r4
 8018f76:	bd70      	pop	{r4, r5, r6, pc}

08018f78 <uxr_serialize_DELETE_Payload>:
 8018f78:	b570      	push	{r4, r5, r6, lr}
 8018f7a:	2202      	movs	r2, #2
 8018f7c:	4605      	mov	r5, r0
 8018f7e:	460e      	mov	r6, r1
 8018f80:	f7fc fb10 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8018f84:	2202      	movs	r2, #2
 8018f86:	4604      	mov	r4, r0
 8018f88:	18b1      	adds	r1, r6, r2
 8018f8a:	4628      	mov	r0, r5
 8018f8c:	f7fc fb0a 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8018f90:	4020      	ands	r0, r4
 8018f92:	b2c0      	uxtb	r0, r0
 8018f94:	bd70      	pop	{r4, r5, r6, pc}
 8018f96:	bf00      	nop

08018f98 <uxr_deserialize_STATUS_AGENT_Payload>:
 8018f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f9c:	4605      	mov	r5, r0
 8018f9e:	460e      	mov	r6, r1
 8018fa0:	f7f5 fe8e 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8018fa4:	1c71      	adds	r1, r6, #1
 8018fa6:	4604      	mov	r4, r0
 8018fa8:	4628      	mov	r0, r5
 8018faa:	f7f5 fe89 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8018fae:	2204      	movs	r2, #4
 8018fb0:	18b1      	adds	r1, r6, r2
 8018fb2:	4680      	mov	r8, r0
 8018fb4:	4628      	mov	r0, r5
 8018fb6:	f7fc fb59 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018fba:	f106 0108 	add.w	r1, r6, #8
 8018fbe:	4607      	mov	r7, r0
 8018fc0:	2202      	movs	r2, #2
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	f7fc fb52 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018fc8:	ea04 0308 	and.w	r3, r4, r8
 8018fcc:	b2db      	uxtb	r3, r3
 8018fce:	ea03 0407 	and.w	r4, r3, r7
 8018fd2:	2202      	movs	r2, #2
 8018fd4:	4607      	mov	r7, r0
 8018fd6:	f106 010a 	add.w	r1, r6, #10
 8018fda:	4628      	mov	r0, r5
 8018fdc:	f7fc fb46 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8018fe0:	f106 010c 	add.w	r1, r6, #12
 8018fe4:	4603      	mov	r3, r0
 8018fe6:	4628      	mov	r0, r5
 8018fe8:	461d      	mov	r5, r3
 8018fea:	f7f5 fe3b 	bl	800ec64 <ucdr_deserialize_bool>
 8018fee:	403c      	ands	r4, r7
 8018ff0:	4025      	ands	r5, r4
 8018ff2:	4028      	ands	r0, r5
 8018ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ff8 <uxr_deserialize_STATUS_Payload>:
 8018ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ffc:	2202      	movs	r2, #2
 8018ffe:	4606      	mov	r6, r0
 8019000:	460f      	mov	r7, r1
 8019002:	f7fc fb33 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8019006:	2202      	movs	r2, #2
 8019008:	18b9      	adds	r1, r7, r2
 801900a:	4605      	mov	r5, r0
 801900c:	4630      	mov	r0, r6
 801900e:	f7fc fb2d 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8019012:	1d39      	adds	r1, r7, #4
 8019014:	4680      	mov	r8, r0
 8019016:	4630      	mov	r0, r6
 8019018:	f7f5 fe52 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 801901c:	1d79      	adds	r1, r7, #5
 801901e:	4604      	mov	r4, r0
 8019020:	4630      	mov	r0, r6
 8019022:	f7f5 fe4d 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8019026:	ea05 0508 	and.w	r5, r5, r8
 801902a:	402c      	ands	r4, r5
 801902c:	4020      	ands	r0, r4
 801902e:	b2c0      	uxtb	r0, r0
 8019030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019034 <uxr_serialize_INFO_Payload>:
 8019034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019038:	2202      	movs	r2, #2
 801903a:	460c      	mov	r4, r1
 801903c:	4605      	mov	r5, r0
 801903e:	f7fc fab1 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8019042:	2202      	movs	r2, #2
 8019044:	18a1      	adds	r1, r4, r2
 8019046:	4680      	mov	r8, r0
 8019048:	4628      	mov	r0, r5
 801904a:	f7fc faab 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 801904e:	7921      	ldrb	r1, [r4, #4]
 8019050:	4607      	mov	r7, r0
 8019052:	4628      	mov	r0, r5
 8019054:	f7f5 fe1e 	bl	800ec94 <ucdr_serialize_uint8_t>
 8019058:	7961      	ldrb	r1, [r4, #5]
 801905a:	4606      	mov	r6, r0
 801905c:	4628      	mov	r0, r5
 801905e:	f7f5 fe19 	bl	800ec94 <ucdr_serialize_uint8_t>
 8019062:	ea08 0807 	and.w	r8, r8, r7
 8019066:	ea06 0608 	and.w	r6, r6, r8
 801906a:	4006      	ands	r6, r0
 801906c:	7a21      	ldrb	r1, [r4, #8]
 801906e:	4628      	mov	r0, r5
 8019070:	f7f5 fde2 	bl	800ec38 <ucdr_serialize_bool>
 8019074:	7a23      	ldrb	r3, [r4, #8]
 8019076:	b2f7      	uxtb	r7, r6
 8019078:	4606      	mov	r6, r0
 801907a:	b96b      	cbnz	r3, 8019098 <uxr_serialize_INFO_Payload+0x64>
 801907c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8019080:	4628      	mov	r0, r5
 8019082:	f7f5 fdd9 	bl	800ec38 <ucdr_serialize_bool>
 8019086:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801908a:	4030      	ands	r0, r6
 801908c:	b2c6      	uxtb	r6, r0
 801908e:	b983      	cbnz	r3, 80190b2 <uxr_serialize_INFO_Payload+0x7e>
 8019090:	ea06 0007 	and.w	r0, r6, r7
 8019094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019098:	7b21      	ldrb	r1, [r4, #12]
 801909a:	4628      	mov	r0, r5
 801909c:	f7f5 fdfa 	bl	800ec94 <ucdr_serialize_uint8_t>
 80190a0:	b188      	cbz	r0, 80190c6 <uxr_serialize_INFO_Payload+0x92>
 80190a2:	f104 010c 	add.w	r1, r4, #12
 80190a6:	4628      	mov	r0, r5
 80190a8:	f7ff fa8a 	bl	80185c0 <uxr_serialize_ObjectVariant.part.0>
 80190ac:	4030      	ands	r0, r6
 80190ae:	b2c6      	uxtb	r6, r0
 80190b0:	e7e4      	b.n	801907c <uxr_serialize_INFO_Payload+0x48>
 80190b2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80190b6:	4628      	mov	r0, r5
 80190b8:	f7ff fdb2 	bl	8018c20 <uxr_serialize_ActivityInfoVariant>
 80190bc:	4006      	ands	r6, r0
 80190be:	ea06 0007 	and.w	r0, r6, r7
 80190c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190c6:	4606      	mov	r6, r0
 80190c8:	e7d8      	b.n	801907c <uxr_serialize_INFO_Payload+0x48>
 80190ca:	bf00      	nop

080190cc <uxr_serialize_READ_DATA_Payload>:
 80190cc:	b570      	push	{r4, r5, r6, lr}
 80190ce:	2202      	movs	r2, #2
 80190d0:	4605      	mov	r5, r0
 80190d2:	460e      	mov	r6, r1
 80190d4:	f7fc fa66 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 80190d8:	2202      	movs	r2, #2
 80190da:	18b1      	adds	r1, r6, r2
 80190dc:	4604      	mov	r4, r0
 80190de:	4628      	mov	r0, r5
 80190e0:	f7fc fa60 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 80190e4:	1d31      	adds	r1, r6, #4
 80190e6:	4004      	ands	r4, r0
 80190e8:	4628      	mov	r0, r5
 80190ea:	f7ff fe5d 	bl	8018da8 <uxr_serialize_ReadSpecification>
 80190ee:	b2e4      	uxtb	r4, r4
 80190f0:	4020      	ands	r0, r4
 80190f2:	bd70      	pop	{r4, r5, r6, pc}

080190f4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80190f4:	b570      	push	{r4, r5, r6, lr}
 80190f6:	2202      	movs	r2, #2
 80190f8:	4605      	mov	r5, r0
 80190fa:	460e      	mov	r6, r1
 80190fc:	f7fc fa52 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8019100:	2202      	movs	r2, #2
 8019102:	4604      	mov	r4, r0
 8019104:	18b1      	adds	r1, r6, r2
 8019106:	4628      	mov	r0, r5
 8019108:	f7fc fa4c 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 801910c:	4020      	ands	r0, r4
 801910e:	b2c0      	uxtb	r0, r0
 8019110:	bd70      	pop	{r4, r5, r6, pc}
 8019112:	bf00      	nop

08019114 <uxr_serialize_ACKNACK_Payload>:
 8019114:	b570      	push	{r4, r5, r6, lr}
 8019116:	460c      	mov	r4, r1
 8019118:	460e      	mov	r6, r1
 801911a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801911e:	4605      	mov	r5, r0
 8019120:	f7f5 fde4 	bl	800ecec <ucdr_serialize_uint16_t>
 8019124:	2202      	movs	r2, #2
 8019126:	4621      	mov	r1, r4
 8019128:	4604      	mov	r4, r0
 801912a:	4628      	mov	r0, r5
 801912c:	f7fc fa3a 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8019130:	7931      	ldrb	r1, [r6, #4]
 8019132:	4004      	ands	r4, r0
 8019134:	4628      	mov	r0, r5
 8019136:	f7f5 fdad 	bl	800ec94 <ucdr_serialize_uint8_t>
 801913a:	b2e4      	uxtb	r4, r4
 801913c:	4020      	ands	r0, r4
 801913e:	bd70      	pop	{r4, r5, r6, pc}

08019140 <uxr_deserialize_ACKNACK_Payload>:
 8019140:	b570      	push	{r4, r5, r6, lr}
 8019142:	4605      	mov	r5, r0
 8019144:	460e      	mov	r6, r1
 8019146:	f7f5 fed1 	bl	800eeec <ucdr_deserialize_uint16_t>
 801914a:	2202      	movs	r2, #2
 801914c:	18b1      	adds	r1, r6, r2
 801914e:	4604      	mov	r4, r0
 8019150:	4628      	mov	r0, r5
 8019152:	f7fc fa8b 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8019156:	1d31      	adds	r1, r6, #4
 8019158:	4004      	ands	r4, r0
 801915a:	4628      	mov	r0, r5
 801915c:	f7f5 fdb0 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 8019160:	b2e4      	uxtb	r4, r4
 8019162:	4020      	ands	r0, r4
 8019164:	bd70      	pop	{r4, r5, r6, pc}
 8019166:	bf00      	nop

08019168 <uxr_serialize_HEARTBEAT_Payload>:
 8019168:	b570      	push	{r4, r5, r6, lr}
 801916a:	460d      	mov	r5, r1
 801916c:	8809      	ldrh	r1, [r1, #0]
 801916e:	4606      	mov	r6, r0
 8019170:	f7f5 fdbc 	bl	800ecec <ucdr_serialize_uint16_t>
 8019174:	8869      	ldrh	r1, [r5, #2]
 8019176:	4604      	mov	r4, r0
 8019178:	4630      	mov	r0, r6
 801917a:	f7f5 fdb7 	bl	800ecec <ucdr_serialize_uint16_t>
 801917e:	7929      	ldrb	r1, [r5, #4]
 8019180:	4004      	ands	r4, r0
 8019182:	4630      	mov	r0, r6
 8019184:	f7f5 fd86 	bl	800ec94 <ucdr_serialize_uint8_t>
 8019188:	b2e4      	uxtb	r4, r4
 801918a:	4020      	ands	r0, r4
 801918c:	bd70      	pop	{r4, r5, r6, pc}
 801918e:	bf00      	nop

08019190 <uxr_deserialize_HEARTBEAT_Payload>:
 8019190:	b570      	push	{r4, r5, r6, lr}
 8019192:	4605      	mov	r5, r0
 8019194:	460e      	mov	r6, r1
 8019196:	f7f5 fea9 	bl	800eeec <ucdr_deserialize_uint16_t>
 801919a:	1cb1      	adds	r1, r6, #2
 801919c:	4604      	mov	r4, r0
 801919e:	4628      	mov	r0, r5
 80191a0:	f7f5 fea4 	bl	800eeec <ucdr_deserialize_uint16_t>
 80191a4:	1d31      	adds	r1, r6, #4
 80191a6:	4004      	ands	r4, r0
 80191a8:	4628      	mov	r0, r5
 80191aa:	f7f5 fd89 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 80191ae:	b2e4      	uxtb	r4, r4
 80191b0:	4020      	ands	r0, r4
 80191b2:	bd70      	pop	{r4, r5, r6, pc}

080191b4 <uxr_serialize_TIMESTAMP_Payload>:
 80191b4:	b570      	push	{r4, r5, r6, lr}
 80191b6:	460d      	mov	r5, r1
 80191b8:	6809      	ldr	r1, [r1, #0]
 80191ba:	4606      	mov	r6, r0
 80191bc:	f7f6 fb9a 	bl	800f8f4 <ucdr_serialize_int32_t>
 80191c0:	6869      	ldr	r1, [r5, #4]
 80191c2:	4604      	mov	r4, r0
 80191c4:	4630      	mov	r0, r6
 80191c6:	f7f5 ff7b 	bl	800f0c0 <ucdr_serialize_uint32_t>
 80191ca:	4020      	ands	r0, r4
 80191cc:	b2c0      	uxtb	r0, r0
 80191ce:	bd70      	pop	{r4, r5, r6, pc}

080191d0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80191d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191d4:	4605      	mov	r5, r0
 80191d6:	460e      	mov	r6, r1
 80191d8:	f7f6 fc24 	bl	800fa24 <ucdr_deserialize_int32_t>
 80191dc:	1d31      	adds	r1, r6, #4
 80191de:	4607      	mov	r7, r0
 80191e0:	4628      	mov	r0, r5
 80191e2:	f7f6 f89d 	bl	800f320 <ucdr_deserialize_uint32_t>
 80191e6:	f106 0108 	add.w	r1, r6, #8
 80191ea:	4680      	mov	r8, r0
 80191ec:	4628      	mov	r0, r5
 80191ee:	f7f6 fc19 	bl	800fa24 <ucdr_deserialize_int32_t>
 80191f2:	f106 010c 	add.w	r1, r6, #12
 80191f6:	4604      	mov	r4, r0
 80191f8:	4628      	mov	r0, r5
 80191fa:	f7f6 f891 	bl	800f320 <ucdr_deserialize_uint32_t>
 80191fe:	ea07 0708 	and.w	r7, r7, r8
 8019202:	403c      	ands	r4, r7
 8019204:	f106 0110 	add.w	r1, r6, #16
 8019208:	4004      	ands	r4, r0
 801920a:	4628      	mov	r0, r5
 801920c:	f7f6 fc0a 	bl	800fa24 <ucdr_deserialize_int32_t>
 8019210:	f106 0114 	add.w	r1, r6, #20
 8019214:	4607      	mov	r7, r0
 8019216:	4628      	mov	r0, r5
 8019218:	f7f6 f882 	bl	800f320 <ucdr_deserialize_uint32_t>
 801921c:	b2e4      	uxtb	r4, r4
 801921e:	403c      	ands	r4, r7
 8019220:	4020      	ands	r0, r4
 8019222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019226:	bf00      	nop

08019228 <uxr_serialize_SampleIdentity>:
 8019228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801922c:	220c      	movs	r2, #12
 801922e:	4604      	mov	r4, r0
 8019230:	460d      	mov	r5, r1
 8019232:	f7fc f9b7 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8019236:	2203      	movs	r2, #3
 8019238:	f105 010c 	add.w	r1, r5, #12
 801923c:	4607      	mov	r7, r0
 801923e:	4620      	mov	r0, r4
 8019240:	f7fc f9b0 	bl	80155a4 <ucdr_serialize_array_uint8_t>
 8019244:	7be9      	ldrb	r1, [r5, #15]
 8019246:	4680      	mov	r8, r0
 8019248:	4620      	mov	r0, r4
 801924a:	f7f5 fd23 	bl	800ec94 <ucdr_serialize_uint8_t>
 801924e:	6929      	ldr	r1, [r5, #16]
 8019250:	4606      	mov	r6, r0
 8019252:	4620      	mov	r0, r4
 8019254:	f7f6 fb4e 	bl	800f8f4 <ucdr_serialize_int32_t>
 8019258:	6969      	ldr	r1, [r5, #20]
 801925a:	4603      	mov	r3, r0
 801925c:	4620      	mov	r0, r4
 801925e:	ea07 0708 	and.w	r7, r7, r8
 8019262:	461c      	mov	r4, r3
 8019264:	f7f5 ff2c 	bl	800f0c0 <ucdr_serialize_uint32_t>
 8019268:	403e      	ands	r6, r7
 801926a:	4034      	ands	r4, r6
 801926c:	4020      	ands	r0, r4
 801926e:	b2c0      	uxtb	r0, r0
 8019270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019274 <uxr_deserialize_SampleIdentity>:
 8019274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019278:	220c      	movs	r2, #12
 801927a:	4604      	mov	r4, r0
 801927c:	460d      	mov	r5, r1
 801927e:	f7fc f9f5 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8019282:	2203      	movs	r2, #3
 8019284:	f105 010c 	add.w	r1, r5, #12
 8019288:	4607      	mov	r7, r0
 801928a:	4620      	mov	r0, r4
 801928c:	f7fc f9ee 	bl	801566c <ucdr_deserialize_array_uint8_t>
 8019290:	f105 010f 	add.w	r1, r5, #15
 8019294:	4680      	mov	r8, r0
 8019296:	4620      	mov	r0, r4
 8019298:	f7f5 fd12 	bl	800ecc0 <ucdr_deserialize_uint8_t>
 801929c:	f105 0110 	add.w	r1, r5, #16
 80192a0:	4606      	mov	r6, r0
 80192a2:	4620      	mov	r0, r4
 80192a4:	f7f6 fbbe 	bl	800fa24 <ucdr_deserialize_int32_t>
 80192a8:	f105 0114 	add.w	r1, r5, #20
 80192ac:	4603      	mov	r3, r0
 80192ae:	4620      	mov	r0, r4
 80192b0:	ea07 0708 	and.w	r7, r7, r8
 80192b4:	461c      	mov	r4, r3
 80192b6:	f7f6 f833 	bl	800f320 <ucdr_deserialize_uint32_t>
 80192ba:	403e      	ands	r6, r7
 80192bc:	4034      	ands	r4, r6
 80192be:	4020      	ands	r0, r4
 80192c0:	b2c0      	uxtb	r0, r0
 80192c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192c6:	bf00      	nop

080192c8 <rcl_convert_rmw_ret_to_rcl_ret>:
 80192c8:	280b      	cmp	r0, #11
 80192ca:	dc0d      	bgt.n	80192e8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80192cc:	2800      	cmp	r0, #0
 80192ce:	db09      	blt.n	80192e4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80192d0:	280b      	cmp	r0, #11
 80192d2:	d807      	bhi.n	80192e4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80192d4:	e8df f000 	tbb	[pc, r0]
 80192d8:	07060607 	.word	0x07060607
 80192dc:	06060606 	.word	0x06060606
 80192e0:	07070606 	.word	0x07070606
 80192e4:	2001      	movs	r0, #1
 80192e6:	4770      	bx	lr
 80192e8:	28cb      	cmp	r0, #203	@ 0xcb
 80192ea:	bf18      	it	ne
 80192ec:	2001      	movne	r0, #1
 80192ee:	4770      	bx	lr

080192f0 <rcl_get_zero_initialized_context>:
 80192f0:	4a03      	ldr	r2, [pc, #12]	@ (8019300 <rcl_get_zero_initialized_context+0x10>)
 80192f2:	4603      	mov	r3, r0
 80192f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80192f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80192fc:	4618      	mov	r0, r3
 80192fe:	4770      	bx	lr
 8019300:	080212cc 	.word	0x080212cc

08019304 <rcl_context_is_valid>:
 8019304:	b118      	cbz	r0, 801930e <rcl_context_is_valid+0xa>
 8019306:	6840      	ldr	r0, [r0, #4]
 8019308:	3800      	subs	r0, #0
 801930a:	bf18      	it	ne
 801930c:	2001      	movne	r0, #1
 801930e:	4770      	bx	lr

08019310 <__cleanup_context>:
 8019310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019314:	4606      	mov	r6, r0
 8019316:	6800      	ldr	r0, [r0, #0]
 8019318:	2300      	movs	r3, #0
 801931a:	6073      	str	r3, [r6, #4]
 801931c:	2800      	cmp	r0, #0
 801931e:	d049      	beq.n	80193b4 <__cleanup_context+0xa4>
 8019320:	6947      	ldr	r7, [r0, #20]
 8019322:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019326:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801932a:	b137      	cbz	r7, 801933a <__cleanup_context+0x2a>
 801932c:	3014      	adds	r0, #20
 801932e:	f7f7 f9b1 	bl	8010694 <rcl_init_options_fini>
 8019332:	4607      	mov	r7, r0
 8019334:	2800      	cmp	r0, #0
 8019336:	d144      	bne.n	80193c2 <__cleanup_context+0xb2>
 8019338:	6830      	ldr	r0, [r6, #0]
 801933a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801933c:	b143      	cbz	r3, 8019350 <__cleanup_context+0x40>
 801933e:	3028      	adds	r0, #40	@ 0x28
 8019340:	f7f9 fe52 	bl	8012fe8 <rmw_context_fini>
 8019344:	b118      	cbz	r0, 801934e <__cleanup_context+0x3e>
 8019346:	2f00      	cmp	r7, #0
 8019348:	d03e      	beq.n	80193c8 <__cleanup_context+0xb8>
 801934a:	f7f8 fe85 	bl	8012058 <rcutils_reset_error>
 801934e:	6830      	ldr	r0, [r6, #0]
 8019350:	6a03      	ldr	r3, [r0, #32]
 8019352:	b1db      	cbz	r3, 801938c <__cleanup_context+0x7c>
 8019354:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8019358:	2a01      	cmp	r2, #1
 801935a:	f17c 0100 	sbcs.w	r1, ip, #0
 801935e:	db11      	blt.n	8019384 <__cleanup_context+0x74>
 8019360:	2400      	movs	r4, #0
 8019362:	4625      	mov	r5, r4
 8019364:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019368:	4649      	mov	r1, r9
 801936a:	b1b8      	cbz	r0, 801939c <__cleanup_context+0x8c>
 801936c:	47c0      	blx	r8
 801936e:	6833      	ldr	r3, [r6, #0]
 8019370:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8019374:	3401      	adds	r4, #1
 8019376:	f145 0500 	adc.w	r5, r5, #0
 801937a:	4294      	cmp	r4, r2
 801937c:	eb75 010c 	sbcs.w	r1, r5, ip
 8019380:	6a1b      	ldr	r3, [r3, #32]
 8019382:	dbef      	blt.n	8019364 <__cleanup_context+0x54>
 8019384:	4618      	mov	r0, r3
 8019386:	4649      	mov	r1, r9
 8019388:	47c0      	blx	r8
 801938a:	6830      	ldr	r0, [r6, #0]
 801938c:	4649      	mov	r1, r9
 801938e:	47c0      	blx	r8
 8019390:	2300      	movs	r3, #0
 8019392:	e9c6 3300 	strd	r3, r3, [r6]
 8019396:	4638      	mov	r0, r7
 8019398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801939c:	3401      	adds	r4, #1
 801939e:	f145 0500 	adc.w	r5, r5, #0
 80193a2:	4294      	cmp	r4, r2
 80193a4:	eb75 010c 	sbcs.w	r1, r5, ip
 80193a8:	dbdc      	blt.n	8019364 <__cleanup_context+0x54>
 80193aa:	4618      	mov	r0, r3
 80193ac:	4649      	mov	r1, r9
 80193ae:	47c0      	blx	r8
 80193b0:	6830      	ldr	r0, [r6, #0]
 80193b2:	e7eb      	b.n	801938c <__cleanup_context+0x7c>
 80193b4:	4607      	mov	r7, r0
 80193b6:	2300      	movs	r3, #0
 80193b8:	e9c6 3300 	strd	r3, r3, [r6]
 80193bc:	4638      	mov	r0, r7
 80193be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193c2:	f7f8 fe49 	bl	8012058 <rcutils_reset_error>
 80193c6:	e7b7      	b.n	8019338 <__cleanup_context+0x28>
 80193c8:	f7ff ff7e 	bl	80192c8 <rcl_convert_rmw_ret_to_rcl_ret>
 80193cc:	4607      	mov	r7, r0
 80193ce:	e7bc      	b.n	801934a <__cleanup_context+0x3a>

080193d0 <rcl_expand_topic_name>:
 80193d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193d4:	b08b      	sub	sp, #44	@ 0x2c
 80193d6:	9306      	str	r3, [sp, #24]
 80193d8:	2800      	cmp	r0, #0
 80193da:	f000 80ad 	beq.w	8019538 <rcl_expand_topic_name+0x168>
 80193de:	460e      	mov	r6, r1
 80193e0:	2900      	cmp	r1, #0
 80193e2:	f000 80a9 	beq.w	8019538 <rcl_expand_topic_name+0x168>
 80193e6:	4617      	mov	r7, r2
 80193e8:	2a00      	cmp	r2, #0
 80193ea:	f000 80a5 	beq.w	8019538 <rcl_expand_topic_name+0x168>
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	f000 80a2 	beq.w	8019538 <rcl_expand_topic_name+0x168>
 80193f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	f000 809e 	beq.w	8019538 <rcl_expand_topic_name+0x168>
 80193fc:	2200      	movs	r2, #0
 80193fe:	a909      	add	r1, sp, #36	@ 0x24
 8019400:	4680      	mov	r8, r0
 8019402:	f001 fa15 	bl	801a830 <rcl_validate_topic_name>
 8019406:	4604      	mov	r4, r0
 8019408:	2800      	cmp	r0, #0
 801940a:	f040 8096 	bne.w	801953a <rcl_expand_topic_name+0x16a>
 801940e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019410:	2b00      	cmp	r3, #0
 8019412:	f040 809a 	bne.w	801954a <rcl_expand_topic_name+0x17a>
 8019416:	4602      	mov	r2, r0
 8019418:	a909      	add	r1, sp, #36	@ 0x24
 801941a:	4630      	mov	r0, r6
 801941c:	f7f9 fa06 	bl	801282c <rmw_validate_node_name>
 8019420:	2800      	cmp	r0, #0
 8019422:	f040 808e 	bne.w	8019542 <rcl_expand_topic_name+0x172>
 8019426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019428:	2a00      	cmp	r2, #0
 801942a:	f040 8093 	bne.w	8019554 <rcl_expand_topic_name+0x184>
 801942e:	a909      	add	r1, sp, #36	@ 0x24
 8019430:	4638      	mov	r0, r7
 8019432:	f7f9 f9dd 	bl	80127f0 <rmw_validate_namespace>
 8019436:	2800      	cmp	r0, #0
 8019438:	f040 8083 	bne.w	8019542 <rcl_expand_topic_name+0x172>
 801943c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801943e:	2c00      	cmp	r4, #0
 8019440:	f040 80ed 	bne.w	801961e <rcl_expand_topic_name+0x24e>
 8019444:	217b      	movs	r1, #123	@ 0x7b
 8019446:	4640      	mov	r0, r8
 8019448:	f004 fea2 	bl	801e190 <strchr>
 801944c:	f898 3000 	ldrb.w	r3, [r8]
 8019450:	2b2f      	cmp	r3, #47	@ 0x2f
 8019452:	4605      	mov	r5, r0
 8019454:	f000 809e 	beq.w	8019594 <rcl_expand_topic_name+0x1c4>
 8019458:	2b7e      	cmp	r3, #126	@ 0x7e
 801945a:	f040 80a2 	bne.w	80195a2 <rcl_expand_topic_name+0x1d2>
 801945e:	4638      	mov	r0, r7
 8019460:	f7e6 fee8 	bl	8000234 <strlen>
 8019464:	4a82      	ldr	r2, [pc, #520]	@ (8019670 <rcl_expand_topic_name+0x2a0>)
 8019466:	4b83      	ldr	r3, [pc, #524]	@ (8019674 <rcl_expand_topic_name+0x2a4>)
 8019468:	2801      	cmp	r0, #1
 801946a:	bf18      	it	ne
 801946c:	4613      	movne	r3, r2
 801946e:	9302      	str	r3, [sp, #8]
 8019470:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019472:	9300      	str	r3, [sp, #0]
 8019474:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8019478:	f108 0301 	add.w	r3, r8, #1
 801947c:	9305      	str	r3, [sp, #20]
 801947e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019482:	9301      	str	r3, [sp, #4]
 8019484:	ab14      	add	r3, sp, #80	@ 0x50
 8019486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019488:	f7f8 fe02 	bl	8012090 <rcutils_format_string_limit>
 801948c:	4682      	mov	sl, r0
 801948e:	2800      	cmp	r0, #0
 8019490:	f000 80c7 	beq.w	8019622 <rcl_expand_topic_name+0x252>
 8019494:	2d00      	cmp	r5, #0
 8019496:	f000 80a2 	beq.w	80195de <rcl_expand_topic_name+0x20e>
 801949a:	217b      	movs	r1, #123	@ 0x7b
 801949c:	f004 fe78 	bl	801e190 <strchr>
 80194a0:	46d1      	mov	r9, sl
 80194a2:	4605      	mov	r5, r0
 80194a4:	9407      	str	r4, [sp, #28]
 80194a6:	46d3      	mov	fp, sl
 80194a8:	464c      	mov	r4, r9
 80194aa:	2d00      	cmp	r5, #0
 80194ac:	f000 80be 	beq.w	801962c <rcl_expand_topic_name+0x25c>
 80194b0:	217d      	movs	r1, #125	@ 0x7d
 80194b2:	4620      	mov	r0, r4
 80194b4:	f004 fe6c 	bl	801e190 <strchr>
 80194b8:	eba0 0905 	sub.w	r9, r0, r5
 80194bc:	f109 0a01 	add.w	sl, r9, #1
 80194c0:	486d      	ldr	r0, [pc, #436]	@ (8019678 <rcl_expand_topic_name+0x2a8>)
 80194c2:	4652      	mov	r2, sl
 80194c4:	4629      	mov	r1, r5
 80194c6:	f004 fe70 	bl	801e1aa <strncmp>
 80194ca:	2800      	cmp	r0, #0
 80194cc:	d067      	beq.n	801959e <rcl_expand_topic_name+0x1ce>
 80194ce:	486b      	ldr	r0, [pc, #428]	@ (801967c <rcl_expand_topic_name+0x2ac>)
 80194d0:	4652      	mov	r2, sl
 80194d2:	4629      	mov	r1, r5
 80194d4:	f004 fe69 	bl	801e1aa <strncmp>
 80194d8:	b130      	cbz	r0, 80194e8 <rcl_expand_topic_name+0x118>
 80194da:	4869      	ldr	r0, [pc, #420]	@ (8019680 <rcl_expand_topic_name+0x2b0>)
 80194dc:	4652      	mov	r2, sl
 80194de:	4629      	mov	r1, r5
 80194e0:	f004 fe63 	bl	801e1aa <strncmp>
 80194e4:	2800      	cmp	r0, #0
 80194e6:	d137      	bne.n	8019558 <rcl_expand_topic_name+0x188>
 80194e8:	46b9      	mov	r9, r7
 80194ea:	ab16      	add	r3, sp, #88	@ 0x58
 80194ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80194f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80194f4:	ab14      	add	r3, sp, #80	@ 0x50
 80194f6:	4628      	mov	r0, r5
 80194f8:	cb0c      	ldmia	r3, {r2, r3}
 80194fa:	4651      	mov	r1, sl
 80194fc:	f7f8 ff04 	bl	8012308 <rcutils_strndup>
 8019500:	4605      	mov	r5, r0
 8019502:	2800      	cmp	r0, #0
 8019504:	f000 809c 	beq.w	8019640 <rcl_expand_topic_name+0x270>
 8019508:	464a      	mov	r2, r9
 801950a:	4620      	mov	r0, r4
 801950c:	ab14      	add	r3, sp, #80	@ 0x50
 801950e:	4629      	mov	r1, r5
 8019510:	f7f8 fdf8 	bl	8012104 <rcutils_repl_str>
 8019514:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019516:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019518:	4604      	mov	r4, r0
 801951a:	4628      	mov	r0, r5
 801951c:	4798      	blx	r3
 801951e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019520:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019522:	4658      	mov	r0, fp
 8019524:	4798      	blx	r3
 8019526:	2c00      	cmp	r4, #0
 8019528:	d07b      	beq.n	8019622 <rcl_expand_topic_name+0x252>
 801952a:	217b      	movs	r1, #123	@ 0x7b
 801952c:	4620      	mov	r0, r4
 801952e:	f004 fe2f 	bl	801e190 <strchr>
 8019532:	46a3      	mov	fp, r4
 8019534:	4605      	mov	r5, r0
 8019536:	e7b8      	b.n	80194aa <rcl_expand_topic_name+0xda>
 8019538:	240b      	movs	r4, #11
 801953a:	4620      	mov	r0, r4
 801953c:	b00b      	add	sp, #44	@ 0x2c
 801953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019542:	f7ff fec1 	bl	80192c8 <rcl_convert_rmw_ret_to_rcl_ret>
 8019546:	4604      	mov	r4, r0
 8019548:	e7f7      	b.n	801953a <rcl_expand_topic_name+0x16a>
 801954a:	2467      	movs	r4, #103	@ 0x67
 801954c:	4620      	mov	r0, r4
 801954e:	b00b      	add	sp, #44	@ 0x2c
 8019550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019554:	24c9      	movs	r4, #201	@ 0xc9
 8019556:	e7f0      	b.n	801953a <rcl_expand_topic_name+0x16a>
 8019558:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801955c:	9806      	ldr	r0, [sp, #24]
 801955e:	1c69      	adds	r1, r5, #1
 8019560:	f7f8 ffec 	bl	801253c <rcutils_string_map_getn>
 8019564:	4681      	mov	r9, r0
 8019566:	2800      	cmp	r0, #0
 8019568:	d1bf      	bne.n	80194ea <rcl_expand_topic_name+0x11a>
 801956a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801956c:	aa16      	add	r2, sp, #88	@ 0x58
 801956e:	6018      	str	r0, [r3, #0]
 8019570:	ca07      	ldmia	r2, {r0, r1, r2}
 8019572:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019576:	ab14      	add	r3, sp, #80	@ 0x50
 8019578:	cb0c      	ldmia	r3, {r2, r3}
 801957a:	4651      	mov	r1, sl
 801957c:	4628      	mov	r0, r5
 801957e:	f7f8 fec3 	bl	8012308 <rcutils_strndup>
 8019582:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019584:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019586:	4798      	blx	r3
 8019588:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801958a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801958c:	4658      	mov	r0, fp
 801958e:	2469      	movs	r4, #105	@ 0x69
 8019590:	4798      	blx	r3
 8019592:	e7d2      	b.n	801953a <rcl_expand_topic_name+0x16a>
 8019594:	2800      	cmp	r0, #0
 8019596:	d05b      	beq.n	8019650 <rcl_expand_topic_name+0x280>
 8019598:	46c1      	mov	r9, r8
 801959a:	46a2      	mov	sl, r4
 801959c:	e782      	b.n	80194a4 <rcl_expand_topic_name+0xd4>
 801959e:	46b1      	mov	r9, r6
 80195a0:	e7a3      	b.n	80194ea <rcl_expand_topic_name+0x11a>
 80195a2:	2800      	cmp	r0, #0
 80195a4:	d1f8      	bne.n	8019598 <rcl_expand_topic_name+0x1c8>
 80195a6:	4638      	mov	r0, r7
 80195a8:	f7e6 fe44 	bl	8000234 <strlen>
 80195ac:	4a35      	ldr	r2, [pc, #212]	@ (8019684 <rcl_expand_topic_name+0x2b4>)
 80195ae:	4b36      	ldr	r3, [pc, #216]	@ (8019688 <rcl_expand_topic_name+0x2b8>)
 80195b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80195b4:	2801      	cmp	r0, #1
 80195b6:	bf18      	it	ne
 80195b8:	4613      	movne	r3, r2
 80195ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80195be:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80195c2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80195c4:	9703      	str	r7, [sp, #12]
 80195c6:	9200      	str	r2, [sp, #0]
 80195c8:	ab14      	add	r3, sp, #80	@ 0x50
 80195ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80195cc:	f7f8 fd60 	bl	8012090 <rcutils_format_string_limit>
 80195d0:	4682      	mov	sl, r0
 80195d2:	4653      	mov	r3, sl
 80195d4:	b32b      	cbz	r3, 8019622 <rcl_expand_topic_name+0x252>
 80195d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80195d8:	f8c3 a000 	str.w	sl, [r3]
 80195dc:	e7ad      	b.n	801953a <rcl_expand_topic_name+0x16a>
 80195de:	f89a 3000 	ldrb.w	r3, [sl]
 80195e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80195e4:	d0f7      	beq.n	80195d6 <rcl_expand_topic_name+0x206>
 80195e6:	4638      	mov	r0, r7
 80195e8:	f7e6 fe24 	bl	8000234 <strlen>
 80195ec:	4a25      	ldr	r2, [pc, #148]	@ (8019684 <rcl_expand_topic_name+0x2b4>)
 80195ee:	4b26      	ldr	r3, [pc, #152]	@ (8019688 <rcl_expand_topic_name+0x2b8>)
 80195f0:	f8cd a010 	str.w	sl, [sp, #16]
 80195f4:	2801      	cmp	r0, #1
 80195f6:	bf18      	it	ne
 80195f8:	4613      	movne	r3, r2
 80195fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80195fe:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019602:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019604:	9703      	str	r7, [sp, #12]
 8019606:	9200      	str	r2, [sp, #0]
 8019608:	ab14      	add	r3, sp, #80	@ 0x50
 801960a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801960c:	f7f8 fd40 	bl	8012090 <rcutils_format_string_limit>
 8019610:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019612:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019614:	4605      	mov	r5, r0
 8019616:	4650      	mov	r0, sl
 8019618:	4798      	blx	r3
 801961a:	46aa      	mov	sl, r5
 801961c:	e7d9      	b.n	80195d2 <rcl_expand_topic_name+0x202>
 801961e:	24ca      	movs	r4, #202	@ 0xca
 8019620:	e78b      	b.n	801953a <rcl_expand_topic_name+0x16a>
 8019622:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019624:	2300      	movs	r3, #0
 8019626:	6013      	str	r3, [r2, #0]
 8019628:	240a      	movs	r4, #10
 801962a:	e786      	b.n	801953a <rcl_expand_topic_name+0x16a>
 801962c:	465b      	mov	r3, fp
 801962e:	9c07      	ldr	r4, [sp, #28]
 8019630:	46da      	mov	sl, fp
 8019632:	2b00      	cmp	r3, #0
 8019634:	d1d3      	bne.n	80195de <rcl_expand_topic_name+0x20e>
 8019636:	f898 3000 	ldrb.w	r3, [r8]
 801963a:	2b2f      	cmp	r3, #47	@ 0x2f
 801963c:	d0cb      	beq.n	80195d6 <rcl_expand_topic_name+0x206>
 801963e:	e7b2      	b.n	80195a6 <rcl_expand_topic_name+0x1d6>
 8019640:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8019644:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019646:	6015      	str	r5, [r2, #0]
 8019648:	4658      	mov	r0, fp
 801964a:	4798      	blx	r3
 801964c:	240a      	movs	r4, #10
 801964e:	e774      	b.n	801953a <rcl_expand_topic_name+0x16a>
 8019650:	ab17      	add	r3, sp, #92	@ 0x5c
 8019652:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019656:	e88d 0003 	stmia.w	sp, {r0, r1}
 801965a:	ab14      	add	r3, sp, #80	@ 0x50
 801965c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801965e:	4640      	mov	r0, r8
 8019660:	f7f8 fe30 	bl	80122c4 <rcutils_strdup>
 8019664:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019666:	2800      	cmp	r0, #0
 8019668:	6018      	str	r0, [r3, #0]
 801966a:	bf08      	it	eq
 801966c:	240a      	moveq	r4, #10
 801966e:	e764      	b.n	801953a <rcl_expand_topic_name+0x16a>
 8019670:	080212d4 	.word	0x080212d4
 8019674:	080203e8 	.word	0x080203e8
 8019678:	080212dc 	.word	0x080212dc
 801967c:	080212e4 	.word	0x080212e4
 8019680:	080212ec 	.word	0x080212ec
 8019684:	0801fe4c 	.word	0x0801fe4c
 8019688:	0801fe44 	.word	0x0801fe44

0801968c <rcl_get_default_topic_name_substitutions>:
 801968c:	2800      	cmp	r0, #0
 801968e:	bf0c      	ite	eq
 8019690:	200b      	moveq	r0, #11
 8019692:	2000      	movne	r0, #0
 8019694:	4770      	bx	lr
 8019696:	bf00      	nop

08019698 <rcl_get_zero_initialized_guard_condition>:
 8019698:	4a03      	ldr	r2, [pc, #12]	@ (80196a8 <rcl_get_zero_initialized_guard_condition+0x10>)
 801969a:	4603      	mov	r3, r0
 801969c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80196a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80196a4:	4618      	mov	r0, r3
 80196a6:	4770      	bx	lr
 80196a8:	080212f8 	.word	0x080212f8

080196ac <rcl_guard_condition_init>:
 80196ac:	b082      	sub	sp, #8
 80196ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196b0:	b087      	sub	sp, #28
 80196b2:	ac0c      	add	r4, sp, #48	@ 0x30
 80196b4:	e884 000c 	stmia.w	r4, {r2, r3}
 80196b8:	46a6      	mov	lr, r4
 80196ba:	460d      	mov	r5, r1
 80196bc:	4604      	mov	r4, r0
 80196be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80196c2:	f10d 0c04 	add.w	ip, sp, #4
 80196c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80196ca:	f8de 3000 	ldr.w	r3, [lr]
 80196ce:	f8cc 3000 	str.w	r3, [ip]
 80196d2:	a801      	add	r0, sp, #4
 80196d4:	f7f8 fbde 	bl	8011e94 <rcutils_allocator_is_valid>
 80196d8:	b338      	cbz	r0, 801972a <rcl_guard_condition_init+0x7e>
 80196da:	b334      	cbz	r4, 801972a <rcl_guard_condition_init+0x7e>
 80196dc:	6866      	ldr	r6, [r4, #4]
 80196de:	b9ee      	cbnz	r6, 801971c <rcl_guard_condition_init+0x70>
 80196e0:	b31d      	cbz	r5, 801972a <rcl_guard_condition_init+0x7e>
 80196e2:	4628      	mov	r0, r5
 80196e4:	f7ff fe0e 	bl	8019304 <rcl_context_is_valid>
 80196e8:	b308      	cbz	r0, 801972e <rcl_guard_condition_init+0x82>
 80196ea:	9b01      	ldr	r3, [sp, #4]
 80196ec:	9905      	ldr	r1, [sp, #20]
 80196ee:	201c      	movs	r0, #28
 80196f0:	4798      	blx	r3
 80196f2:	4607      	mov	r7, r0
 80196f4:	6060      	str	r0, [r4, #4]
 80196f6:	b310      	cbz	r0, 801973e <rcl_guard_condition_init+0x92>
 80196f8:	6828      	ldr	r0, [r5, #0]
 80196fa:	3028      	adds	r0, #40	@ 0x28
 80196fc:	f002 fe74 	bl	801c3e8 <rmw_create_guard_condition>
 8019700:	6038      	str	r0, [r7, #0]
 8019702:	6860      	ldr	r0, [r4, #4]
 8019704:	6805      	ldr	r5, [r0, #0]
 8019706:	b1a5      	cbz	r5, 8019732 <rcl_guard_condition_init+0x86>
 8019708:	2301      	movs	r3, #1
 801970a:	ac01      	add	r4, sp, #4
 801970c:	7103      	strb	r3, [r0, #4]
 801970e:	f100 0708 	add.w	r7, r0, #8
 8019712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019714:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019716:	6823      	ldr	r3, [r4, #0]
 8019718:	603b      	str	r3, [r7, #0]
 801971a:	e000      	b.n	801971e <rcl_guard_condition_init+0x72>
 801971c:	2664      	movs	r6, #100	@ 0x64
 801971e:	4630      	mov	r0, r6
 8019720:	b007      	add	sp, #28
 8019722:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019726:	b002      	add	sp, #8
 8019728:	4770      	bx	lr
 801972a:	260b      	movs	r6, #11
 801972c:	e7f7      	b.n	801971e <rcl_guard_condition_init+0x72>
 801972e:	2665      	movs	r6, #101	@ 0x65
 8019730:	e7f5      	b.n	801971e <rcl_guard_condition_init+0x72>
 8019732:	9b02      	ldr	r3, [sp, #8]
 8019734:	9905      	ldr	r1, [sp, #20]
 8019736:	4798      	blx	r3
 8019738:	2601      	movs	r6, #1
 801973a:	6065      	str	r5, [r4, #4]
 801973c:	e7ef      	b.n	801971e <rcl_guard_condition_init+0x72>
 801973e:	260a      	movs	r6, #10
 8019740:	e7ed      	b.n	801971e <rcl_guard_condition_init+0x72>
 8019742:	bf00      	nop

08019744 <rcl_guard_condition_init_from_rmw>:
 8019744:	b082      	sub	sp, #8
 8019746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801974a:	b086      	sub	sp, #24
 801974c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019750:	4604      	mov	r4, r0
 8019752:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019756:	460e      	mov	r6, r1
 8019758:	4617      	mov	r7, r2
 801975a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801975e:	f10d 0e04 	add.w	lr, sp, #4
 8019762:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019766:	f8dc 3000 	ldr.w	r3, [ip]
 801976a:	f8ce 3000 	str.w	r3, [lr]
 801976e:	a801      	add	r0, sp, #4
 8019770:	f7f8 fb90 	bl	8011e94 <rcutils_allocator_is_valid>
 8019774:	b350      	cbz	r0, 80197cc <rcl_guard_condition_init_from_rmw+0x88>
 8019776:	b34c      	cbz	r4, 80197cc <rcl_guard_condition_init_from_rmw+0x88>
 8019778:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801977c:	f1b8 0f00 	cmp.w	r8, #0
 8019780:	d11e      	bne.n	80197c0 <rcl_guard_condition_init_from_rmw+0x7c>
 8019782:	b31f      	cbz	r7, 80197cc <rcl_guard_condition_init_from_rmw+0x88>
 8019784:	4638      	mov	r0, r7
 8019786:	f7ff fdbd 	bl	8019304 <rcl_context_is_valid>
 801978a:	b328      	cbz	r0, 80197d8 <rcl_guard_condition_init_from_rmw+0x94>
 801978c:	9b01      	ldr	r3, [sp, #4]
 801978e:	9905      	ldr	r1, [sp, #20]
 8019790:	201c      	movs	r0, #28
 8019792:	4798      	blx	r3
 8019794:	4605      	mov	r5, r0
 8019796:	6060      	str	r0, [r4, #4]
 8019798:	b358      	cbz	r0, 80197f2 <rcl_guard_condition_init_from_rmw+0xae>
 801979a:	b1fe      	cbz	r6, 80197dc <rcl_guard_condition_init_from_rmw+0x98>
 801979c:	6006      	str	r6, [r0, #0]
 801979e:	f880 8004 	strb.w	r8, [r0, #4]
 80197a2:	ac01      	add	r4, sp, #4
 80197a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80197a6:	f105 0c08 	add.w	ip, r5, #8
 80197aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197ae:	6823      	ldr	r3, [r4, #0]
 80197b0:	f8cc 3000 	str.w	r3, [ip]
 80197b4:	2000      	movs	r0, #0
 80197b6:	b006      	add	sp, #24
 80197b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197bc:	b002      	add	sp, #8
 80197be:	4770      	bx	lr
 80197c0:	2064      	movs	r0, #100	@ 0x64
 80197c2:	b006      	add	sp, #24
 80197c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197c8:	b002      	add	sp, #8
 80197ca:	4770      	bx	lr
 80197cc:	200b      	movs	r0, #11
 80197ce:	b006      	add	sp, #24
 80197d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197d4:	b002      	add	sp, #8
 80197d6:	4770      	bx	lr
 80197d8:	2065      	movs	r0, #101	@ 0x65
 80197da:	e7f2      	b.n	80197c2 <rcl_guard_condition_init_from_rmw+0x7e>
 80197dc:	6838      	ldr	r0, [r7, #0]
 80197de:	3028      	adds	r0, #40	@ 0x28
 80197e0:	f002 fe02 	bl	801c3e8 <rmw_create_guard_condition>
 80197e4:	6028      	str	r0, [r5, #0]
 80197e6:	6865      	ldr	r5, [r4, #4]
 80197e8:	682e      	ldr	r6, [r5, #0]
 80197ea:	b126      	cbz	r6, 80197f6 <rcl_guard_condition_init_from_rmw+0xb2>
 80197ec:	2301      	movs	r3, #1
 80197ee:	712b      	strb	r3, [r5, #4]
 80197f0:	e7d7      	b.n	80197a2 <rcl_guard_condition_init_from_rmw+0x5e>
 80197f2:	200a      	movs	r0, #10
 80197f4:	e7e5      	b.n	80197c2 <rcl_guard_condition_init_from_rmw+0x7e>
 80197f6:	4628      	mov	r0, r5
 80197f8:	9b02      	ldr	r3, [sp, #8]
 80197fa:	9905      	ldr	r1, [sp, #20]
 80197fc:	4798      	blx	r3
 80197fe:	6066      	str	r6, [r4, #4]
 8019800:	2001      	movs	r0, #1
 8019802:	e7de      	b.n	80197c2 <rcl_guard_condition_init_from_rmw+0x7e>

08019804 <rcl_guard_condition_fini>:
 8019804:	b570      	push	{r4, r5, r6, lr}
 8019806:	b082      	sub	sp, #8
 8019808:	b1f0      	cbz	r0, 8019848 <rcl_guard_condition_fini+0x44>
 801980a:	6843      	ldr	r3, [r0, #4]
 801980c:	4604      	mov	r4, r0
 801980e:	b163      	cbz	r3, 801982a <rcl_guard_condition_fini+0x26>
 8019810:	6818      	ldr	r0, [r3, #0]
 8019812:	68de      	ldr	r6, [r3, #12]
 8019814:	6999      	ldr	r1, [r3, #24]
 8019816:	b160      	cbz	r0, 8019832 <rcl_guard_condition_fini+0x2e>
 8019818:	791d      	ldrb	r5, [r3, #4]
 801981a:	b965      	cbnz	r5, 8019836 <rcl_guard_condition_fini+0x32>
 801981c:	4618      	mov	r0, r3
 801981e:	47b0      	blx	r6
 8019820:	2300      	movs	r3, #0
 8019822:	4628      	mov	r0, r5
 8019824:	6063      	str	r3, [r4, #4]
 8019826:	b002      	add	sp, #8
 8019828:	bd70      	pop	{r4, r5, r6, pc}
 801982a:	461d      	mov	r5, r3
 801982c:	4628      	mov	r0, r5
 801982e:	b002      	add	sp, #8
 8019830:	bd70      	pop	{r4, r5, r6, pc}
 8019832:	4605      	mov	r5, r0
 8019834:	e7f2      	b.n	801981c <rcl_guard_condition_fini+0x18>
 8019836:	9101      	str	r1, [sp, #4]
 8019838:	f002 fdea 	bl	801c410 <rmw_destroy_guard_condition>
 801983c:	1e05      	subs	r5, r0, #0
 801983e:	6863      	ldr	r3, [r4, #4]
 8019840:	9901      	ldr	r1, [sp, #4]
 8019842:	bf18      	it	ne
 8019844:	2501      	movne	r5, #1
 8019846:	e7e9      	b.n	801981c <rcl_guard_condition_fini+0x18>
 8019848:	250b      	movs	r5, #11
 801984a:	4628      	mov	r0, r5
 801984c:	b002      	add	sp, #8
 801984e:	bd70      	pop	{r4, r5, r6, pc}

08019850 <rcl_guard_condition_get_default_options>:
 8019850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019852:	b087      	sub	sp, #28
 8019854:	4606      	mov	r6, r0
 8019856:	4668      	mov	r0, sp
 8019858:	f7f8 fb0e 	bl	8011e78 <rcutils_get_default_allocator>
 801985c:	4b09      	ldr	r3, [pc, #36]	@ (8019884 <rcl_guard_condition_get_default_options+0x34>)
 801985e:	46ee      	mov	lr, sp
 8019860:	469c      	mov	ip, r3
 8019862:	461d      	mov	r5, r3
 8019864:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019868:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801986c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801986e:	4634      	mov	r4, r6
 8019870:	f8de 7000 	ldr.w	r7, [lr]
 8019874:	f8cc 7000 	str.w	r7, [ip]
 8019878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801987a:	4630      	mov	r0, r6
 801987c:	6027      	str	r7, [r4, #0]
 801987e:	b007      	add	sp, #28
 8019880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019882:	bf00      	nop
 8019884:	2000c428 	.word	0x2000c428

08019888 <rcl_trigger_guard_condition>:
 8019888:	b148      	cbz	r0, 801989e <rcl_trigger_guard_condition+0x16>
 801988a:	b508      	push	{r3, lr}
 801988c:	6843      	ldr	r3, [r0, #4]
 801988e:	b143      	cbz	r3, 80198a2 <rcl_trigger_guard_condition+0x1a>
 8019890:	6818      	ldr	r0, [r3, #0]
 8019892:	f002 fe97 	bl	801c5c4 <rmw_trigger_guard_condition>
 8019896:	3800      	subs	r0, #0
 8019898:	bf18      	it	ne
 801989a:	2001      	movne	r0, #1
 801989c:	bd08      	pop	{r3, pc}
 801989e:	200b      	movs	r0, #11
 80198a0:	4770      	bx	lr
 80198a2:	200b      	movs	r0, #11
 80198a4:	bd08      	pop	{r3, pc}
 80198a6:	bf00      	nop

080198a8 <rcl_guard_condition_get_rmw_handle>:
 80198a8:	b110      	cbz	r0, 80198b0 <rcl_guard_condition_get_rmw_handle+0x8>
 80198aa:	6840      	ldr	r0, [r0, #4]
 80198ac:	b100      	cbz	r0, 80198b0 <rcl_guard_condition_get_rmw_handle+0x8>
 80198ae:	6800      	ldr	r0, [r0, #0]
 80198b0:	4770      	bx	lr
 80198b2:	bf00      	nop

080198b4 <rcl_init>:
 80198b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198b8:	1e05      	subs	r5, r0, #0
 80198ba:	b09e      	sub	sp, #120	@ 0x78
 80198bc:	460e      	mov	r6, r1
 80198be:	4690      	mov	r8, r2
 80198c0:	461f      	mov	r7, r3
 80198c2:	f340 809c 	ble.w	80199fe <rcl_init+0x14a>
 80198c6:	2900      	cmp	r1, #0
 80198c8:	f000 809c 	beq.w	8019a04 <rcl_init+0x150>
 80198cc:	f1a1 0e04 	sub.w	lr, r1, #4
 80198d0:	f04f 0c00 	mov.w	ip, #0
 80198d4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80198d8:	f10c 0c01 	add.w	ip, ip, #1
 80198dc:	2c00      	cmp	r4, #0
 80198de:	f000 8091 	beq.w	8019a04 <rcl_init+0x150>
 80198e2:	4565      	cmp	r5, ip
 80198e4:	d1f6      	bne.n	80198d4 <rcl_init+0x20>
 80198e6:	f1b8 0f00 	cmp.w	r8, #0
 80198ea:	f000 808b 	beq.w	8019a04 <rcl_init+0x150>
 80198ee:	f8d8 4000 	ldr.w	r4, [r8]
 80198f2:	2c00      	cmp	r4, #0
 80198f4:	f000 8086 	beq.w	8019a04 <rcl_init+0x150>
 80198f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80198fa:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80198fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019902:	6823      	ldr	r3, [r4, #0]
 8019904:	f8cc 3000 	str.w	r3, [ip]
 8019908:	a819      	add	r0, sp, #100	@ 0x64
 801990a:	f7f8 fac3 	bl	8011e94 <rcutils_allocator_is_valid>
 801990e:	2800      	cmp	r0, #0
 8019910:	d078      	beq.n	8019a04 <rcl_init+0x150>
 8019912:	2f00      	cmp	r7, #0
 8019914:	d076      	beq.n	8019a04 <rcl_init+0x150>
 8019916:	683b      	ldr	r3, [r7, #0]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d178      	bne.n	8019a0e <rcl_init+0x15a>
 801991c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8019920:	2178      	movs	r1, #120	@ 0x78
 8019922:	2001      	movs	r0, #1
 8019924:	4798      	blx	r3
 8019926:	4604      	mov	r4, r0
 8019928:	6038      	str	r0, [r7, #0]
 801992a:	2800      	cmp	r0, #0
 801992c:	f000 80b6 	beq.w	8019a9c <rcl_init+0x1e8>
 8019930:	a802      	add	r0, sp, #8
 8019932:	f002 fbb1 	bl	801c098 <rmw_get_zero_initialized_context>
 8019936:	a902      	add	r1, sp, #8
 8019938:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801993c:	2250      	movs	r2, #80	@ 0x50
 801993e:	ac19      	add	r4, sp, #100	@ 0x64
 8019940:	f004 fce7 	bl	801e312 <memcpy>
 8019944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019946:	f8d7 e000 	ldr.w	lr, [r7]
 801994a:	46f4      	mov	ip, lr
 801994c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019950:	6823      	ldr	r3, [r4, #0]
 8019952:	f8cc 3000 	str.w	r3, [ip]
 8019956:	f10e 0114 	add.w	r1, lr, #20
 801995a:	4640      	mov	r0, r8
 801995c:	f7f6 fec4 	bl	80106e8 <rcl_init_options_copy>
 8019960:	4604      	mov	r4, r0
 8019962:	2800      	cmp	r0, #0
 8019964:	d144      	bne.n	80199f0 <rcl_init+0x13c>
 8019966:	f8d7 9000 	ldr.w	r9, [r7]
 801996a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801996e:	f8c9 0020 	str.w	r0, [r9, #32]
 8019972:	f8c9 5018 	str.w	r5, [r9, #24]
 8019976:	f8c9 801c 	str.w	r8, [r9, #28]
 801997a:	2d00      	cmp	r5, #0
 801997c:	d04e      	beq.n	8019a1c <rcl_init+0x168>
 801997e:	2e00      	cmp	r6, #0
 8019980:	d04c      	beq.n	8019a1c <rcl_init+0x168>
 8019982:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8019986:	2104      	movs	r1, #4
 8019988:	4628      	mov	r0, r5
 801998a:	4798      	blx	r3
 801998c:	f8c9 0020 	str.w	r0, [r9, #32]
 8019990:	f8d7 9000 	ldr.w	r9, [r7]
 8019994:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8019998:	46ca      	mov	sl, r9
 801999a:	b343      	cbz	r3, 80199ee <rcl_init+0x13a>
 801999c:	2d01      	cmp	r5, #1
 801999e:	f178 0300 	sbcs.w	r3, r8, #0
 80199a2:	db3b      	blt.n	8019a1c <rcl_init+0x168>
 80199a4:	2400      	movs	r4, #0
 80199a6:	3e04      	subs	r6, #4
 80199a8:	46a1      	mov	r9, r4
 80199aa:	e00b      	b.n	80199c4 <rcl_init+0x110>
 80199ac:	6831      	ldr	r1, [r6, #0]
 80199ae:	f004 fcb0 	bl	801e312 <memcpy>
 80199b2:	3401      	adds	r4, #1
 80199b4:	f149 0900 	adc.w	r9, r9, #0
 80199b8:	45c8      	cmp	r8, r9
 80199ba:	bf08      	it	eq
 80199bc:	42a5      	cmpeq	r5, r4
 80199be:	d02b      	beq.n	8019a18 <rcl_init+0x164>
 80199c0:	f8d7 a000 	ldr.w	sl, [r7]
 80199c4:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80199c8:	f7e6 fc34 	bl	8000234 <strlen>
 80199cc:	1c42      	adds	r2, r0, #1
 80199ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80199d0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80199d2:	f8da a020 	ldr.w	sl, [sl, #32]
 80199d6:	9201      	str	r2, [sp, #4]
 80199d8:	4610      	mov	r0, r2
 80199da:	4798      	blx	r3
 80199dc:	683b      	ldr	r3, [r7, #0]
 80199de:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80199e2:	6a1b      	ldr	r3, [r3, #32]
 80199e4:	9a01      	ldr	r2, [sp, #4]
 80199e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80199ea:	2800      	cmp	r0, #0
 80199ec:	d1de      	bne.n	80199ac <rcl_init+0xf8>
 80199ee:	240a      	movs	r4, #10
 80199f0:	4638      	mov	r0, r7
 80199f2:	f7ff fc8d 	bl	8019310 <__cleanup_context>
 80199f6:	4620      	mov	r0, r4
 80199f8:	b01e      	add	sp, #120	@ 0x78
 80199fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199fe:	2900      	cmp	r1, #0
 8019a00:	f43f af71 	beq.w	80198e6 <rcl_init+0x32>
 8019a04:	240b      	movs	r4, #11
 8019a06:	4620      	mov	r0, r4
 8019a08:	b01e      	add	sp, #120	@ 0x78
 8019a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a0e:	2464      	movs	r4, #100	@ 0x64
 8019a10:	4620      	mov	r0, r4
 8019a12:	b01e      	add	sp, #120	@ 0x78
 8019a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a18:	f8d7 9000 	ldr.w	r9, [r7]
 8019a1c:	4926      	ldr	r1, [pc, #152]	@ (8019ab8 <rcl_init+0x204>)
 8019a1e:	680b      	ldr	r3, [r1, #0]
 8019a20:	3301      	adds	r3, #1
 8019a22:	d036      	beq.n	8019a92 <rcl_init+0x1de>
 8019a24:	600b      	str	r3, [r1, #0]
 8019a26:	461a      	mov	r2, r3
 8019a28:	2400      	movs	r4, #0
 8019a2a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8019a2e:	607b      	str	r3, [r7, #4]
 8019a30:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019a32:	3301      	adds	r3, #1
 8019a34:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8019a38:	d034      	beq.n	8019aa4 <rcl_init+0x1f0>
 8019a3a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8019a3e:	b93b      	cbnz	r3, 8019a50 <rcl_init+0x19c>
 8019a40:	3030      	adds	r0, #48	@ 0x30
 8019a42:	f000 f83b 	bl	8019abc <rcl_get_localhost_only>
 8019a46:	4604      	mov	r4, r0
 8019a48:	2800      	cmp	r0, #0
 8019a4a:	d1d1      	bne.n	80199f0 <rcl_init+0x13c>
 8019a4c:	683b      	ldr	r3, [r7, #0]
 8019a4e:	6958      	ldr	r0, [r3, #20]
 8019a50:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8019a52:	aa18      	add	r2, sp, #96	@ 0x60
 8019a54:	a917      	add	r1, sp, #92	@ 0x5c
 8019a56:	f000 fed9 	bl	801a80c <rcl_validate_enclave_name>
 8019a5a:	4604      	mov	r4, r0
 8019a5c:	2800      	cmp	r0, #0
 8019a5e:	d1c7      	bne.n	80199f0 <rcl_init+0x13c>
 8019a60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019a62:	b9eb      	cbnz	r3, 8019aa0 <rcl_init+0x1ec>
 8019a64:	6839      	ldr	r1, [r7, #0]
 8019a66:	694b      	ldr	r3, [r1, #20]
 8019a68:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8019a6a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8019a6e:	f000 f8f3 	bl	8019c58 <rcl_get_security_options_from_environment>
 8019a72:	4604      	mov	r4, r0
 8019a74:	2800      	cmp	r0, #0
 8019a76:	d1bb      	bne.n	80199f0 <rcl_init+0x13c>
 8019a78:	6839      	ldr	r1, [r7, #0]
 8019a7a:	6948      	ldr	r0, [r1, #20]
 8019a7c:	3128      	adds	r1, #40	@ 0x28
 8019a7e:	3018      	adds	r0, #24
 8019a80:	f7f9 f97c 	bl	8012d7c <rmw_init>
 8019a84:	4604      	mov	r4, r0
 8019a86:	2800      	cmp	r0, #0
 8019a88:	d0bd      	beq.n	8019a06 <rcl_init+0x152>
 8019a8a:	f7ff fc1d 	bl	80192c8 <rcl_convert_rmw_ret_to_rcl_ret>
 8019a8e:	4604      	mov	r4, r0
 8019a90:	e7ae      	b.n	80199f0 <rcl_init+0x13c>
 8019a92:	2201      	movs	r2, #1
 8019a94:	461c      	mov	r4, r3
 8019a96:	600a      	str	r2, [r1, #0]
 8019a98:	4613      	mov	r3, r2
 8019a9a:	e7c6      	b.n	8019a2a <rcl_init+0x176>
 8019a9c:	240a      	movs	r4, #10
 8019a9e:	e7b2      	b.n	8019a06 <rcl_init+0x152>
 8019aa0:	2401      	movs	r4, #1
 8019aa2:	e7a5      	b.n	80199f0 <rcl_init+0x13c>
 8019aa4:	3024      	adds	r0, #36	@ 0x24
 8019aa6:	f003 fe4d 	bl	801d744 <rcl_get_default_domain_id>
 8019aaa:	4604      	mov	r4, r0
 8019aac:	2800      	cmp	r0, #0
 8019aae:	d19f      	bne.n	80199f0 <rcl_init+0x13c>
 8019ab0:	683b      	ldr	r3, [r7, #0]
 8019ab2:	6958      	ldr	r0, [r3, #20]
 8019ab4:	e7c1      	b.n	8019a3a <rcl_init+0x186>
 8019ab6:	bf00      	nop
 8019ab8:	2000c43c 	.word	0x2000c43c

08019abc <rcl_get_localhost_only>:
 8019abc:	b510      	push	{r4, lr}
 8019abe:	b082      	sub	sp, #8
 8019ac0:	2300      	movs	r3, #0
 8019ac2:	9301      	str	r3, [sp, #4]
 8019ac4:	b1b8      	cbz	r0, 8019af6 <rcl_get_localhost_only+0x3a>
 8019ac6:	4604      	mov	r4, r0
 8019ac8:	a901      	add	r1, sp, #4
 8019aca:	480c      	ldr	r0, [pc, #48]	@ (8019afc <rcl_get_localhost_only+0x40>)
 8019acc:	f7f8 fa94 	bl	8011ff8 <rcutils_get_env>
 8019ad0:	b110      	cbz	r0, 8019ad8 <rcl_get_localhost_only+0x1c>
 8019ad2:	2001      	movs	r0, #1
 8019ad4:	b002      	add	sp, #8
 8019ad6:	bd10      	pop	{r4, pc}
 8019ad8:	9b01      	ldr	r3, [sp, #4]
 8019ada:	b113      	cbz	r3, 8019ae2 <rcl_get_localhost_only+0x26>
 8019adc:	781a      	ldrb	r2, [r3, #0]
 8019ade:	2a31      	cmp	r2, #49	@ 0x31
 8019ae0:	d004      	beq.n	8019aec <rcl_get_localhost_only+0x30>
 8019ae2:	2302      	movs	r3, #2
 8019ae4:	2000      	movs	r0, #0
 8019ae6:	7023      	strb	r3, [r4, #0]
 8019ae8:	b002      	add	sp, #8
 8019aea:	bd10      	pop	{r4, pc}
 8019aec:	785b      	ldrb	r3, [r3, #1]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d1f7      	bne.n	8019ae2 <rcl_get_localhost_only+0x26>
 8019af2:	2301      	movs	r3, #1
 8019af4:	e7f6      	b.n	8019ae4 <rcl_get_localhost_only+0x28>
 8019af6:	200b      	movs	r0, #11
 8019af8:	b002      	add	sp, #8
 8019afa:	bd10      	pop	{r4, pc}
 8019afc:	08021300 	.word	0x08021300

08019b00 <exact_match_lookup>:
 8019b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b02:	f102 0708 	add.w	r7, r2, #8
 8019b06:	460b      	mov	r3, r1
 8019b08:	4614      	mov	r4, r2
 8019b0a:	4606      	mov	r6, r0
 8019b0c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8019b10:	b085      	sub	sp, #20
 8019b12:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019b16:	4618      	mov	r0, r3
 8019b18:	4919      	ldr	r1, [pc, #100]	@ (8019b80 <exact_match_lookup+0x80>)
 8019b1a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8019b1e:	f002 faad 	bl	801c07c <rcutils_join_path>
 8019b22:	7833      	ldrb	r3, [r6, #0]
 8019b24:	2b2f      	cmp	r3, #47	@ 0x2f
 8019b26:	4605      	mov	r5, r0
 8019b28:	d023      	beq.n	8019b72 <exact_match_lookup+0x72>
 8019b2a:	f104 030c 	add.w	r3, r4, #12
 8019b2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019b32:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019b36:	1c70      	adds	r0, r6, #1
 8019b38:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8019b3c:	f002 faa4 	bl	801c088 <rcutils_to_native_path>
 8019b40:	4606      	mov	r6, r0
 8019b42:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8019b46:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019b4a:	4631      	mov	r1, r6
 8019b4c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8019b50:	4628      	mov	r0, r5
 8019b52:	f002 fa93 	bl	801c07c <rcutils_join_path>
 8019b56:	6862      	ldr	r2, [r4, #4]
 8019b58:	6921      	ldr	r1, [r4, #16]
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	4630      	mov	r0, r6
 8019b5e:	461e      	mov	r6, r3
 8019b60:	4790      	blx	r2
 8019b62:	4628      	mov	r0, r5
 8019b64:	6863      	ldr	r3, [r4, #4]
 8019b66:	6921      	ldr	r1, [r4, #16]
 8019b68:	4798      	blx	r3
 8019b6a:	4635      	mov	r5, r6
 8019b6c:	4628      	mov	r0, r5
 8019b6e:	b005      	add	sp, #20
 8019b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b72:	7873      	ldrb	r3, [r6, #1]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d1d8      	bne.n	8019b2a <exact_match_lookup+0x2a>
 8019b78:	4628      	mov	r0, r5
 8019b7a:	b005      	add	sp, #20
 8019b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b7e:	bf00      	nop
 8019b80:	08021350 	.word	0x08021350

08019b84 <rcl_get_secure_root>:
 8019b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b88:	b085      	sub	sp, #20
 8019b8a:	b168      	cbz	r0, 8019ba8 <rcl_get_secure_root+0x24>
 8019b8c:	4607      	mov	r7, r0
 8019b8e:	4608      	mov	r0, r1
 8019b90:	460c      	mov	r4, r1
 8019b92:	f7f8 f97f 	bl	8011e94 <rcutils_allocator_is_valid>
 8019b96:	b138      	cbz	r0, 8019ba8 <rcl_get_secure_root+0x24>
 8019b98:	2300      	movs	r3, #0
 8019b9a:	482d      	ldr	r0, [pc, #180]	@ (8019c50 <rcl_get_secure_root+0xcc>)
 8019b9c:	9303      	str	r3, [sp, #12]
 8019b9e:	a903      	add	r1, sp, #12
 8019ba0:	f7f8 fa2a 	bl	8011ff8 <rcutils_get_env>
 8019ba4:	4605      	mov	r5, r0
 8019ba6:	b120      	cbz	r0, 8019bb2 <rcl_get_secure_root+0x2e>
 8019ba8:	2500      	movs	r5, #0
 8019baa:	4628      	mov	r0, r5
 8019bac:	b005      	add	sp, #20
 8019bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bb2:	9b03      	ldr	r3, [sp, #12]
 8019bb4:	781a      	ldrb	r2, [r3, #0]
 8019bb6:	2a00      	cmp	r2, #0
 8019bb8:	d0f6      	beq.n	8019ba8 <rcl_get_secure_root+0x24>
 8019bba:	f104 090c 	add.w	r9, r4, #12
 8019bbe:	e899 0003 	ldmia.w	r9, {r0, r1}
 8019bc2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8019bcc:	f7f8 fb7a 	bl	80122c4 <rcutils_strdup>
 8019bd0:	4680      	mov	r8, r0
 8019bd2:	2800      	cmp	r0, #0
 8019bd4:	d0e8      	beq.n	8019ba8 <rcl_get_secure_root+0x24>
 8019bd6:	481f      	ldr	r0, [pc, #124]	@ (8019c54 <rcl_get_secure_root+0xd0>)
 8019bd8:	9503      	str	r5, [sp, #12]
 8019bda:	a903      	add	r1, sp, #12
 8019bdc:	f7f8 fa0c 	bl	8011ff8 <rcutils_get_env>
 8019be0:	b160      	cbz	r0, 8019bfc <rcl_get_secure_root+0x78>
 8019be2:	2600      	movs	r6, #0
 8019be4:	6863      	ldr	r3, [r4, #4]
 8019be6:	6921      	ldr	r1, [r4, #16]
 8019be8:	4630      	mov	r0, r6
 8019bea:	4798      	blx	r3
 8019bec:	4640      	mov	r0, r8
 8019bee:	6863      	ldr	r3, [r4, #4]
 8019bf0:	6921      	ldr	r1, [r4, #16]
 8019bf2:	4798      	blx	r3
 8019bf4:	4628      	mov	r0, r5
 8019bf6:	b005      	add	sp, #20
 8019bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bfc:	9b03      	ldr	r3, [sp, #12]
 8019bfe:	781e      	ldrb	r6, [r3, #0]
 8019c00:	b1f6      	cbz	r6, 8019c40 <rcl_get_secure_root+0xbc>
 8019c02:	e899 0003 	ldmia.w	r9, {r0, r1}
 8019c06:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8019c10:	f7f8 fb58 	bl	80122c4 <rcutils_strdup>
 8019c14:	4606      	mov	r6, r0
 8019c16:	2800      	cmp	r0, #0
 8019c18:	d0e3      	beq.n	8019be2 <rcl_get_secure_root+0x5e>
 8019c1a:	4622      	mov	r2, r4
 8019c1c:	4641      	mov	r1, r8
 8019c1e:	f7ff ff6f 	bl	8019b00 <exact_match_lookup>
 8019c22:	4605      	mov	r5, r0
 8019c24:	2d00      	cmp	r5, #0
 8019c26:	d0dd      	beq.n	8019be4 <rcl_get_secure_root+0x60>
 8019c28:	4628      	mov	r0, r5
 8019c2a:	f002 fa25 	bl	801c078 <rcutils_is_directory>
 8019c2e:	4603      	mov	r3, r0
 8019c30:	2800      	cmp	r0, #0
 8019c32:	d1d7      	bne.n	8019be4 <rcl_get_secure_root+0x60>
 8019c34:	4628      	mov	r0, r5
 8019c36:	6921      	ldr	r1, [r4, #16]
 8019c38:	461d      	mov	r5, r3
 8019c3a:	6863      	ldr	r3, [r4, #4]
 8019c3c:	4798      	blx	r3
 8019c3e:	e7d1      	b.n	8019be4 <rcl_get_secure_root+0x60>
 8019c40:	4622      	mov	r2, r4
 8019c42:	4638      	mov	r0, r7
 8019c44:	4641      	mov	r1, r8
 8019c46:	f7ff ff5b 	bl	8019b00 <exact_match_lookup>
 8019c4a:	4605      	mov	r5, r0
 8019c4c:	e7ea      	b.n	8019c24 <rcl_get_secure_root+0xa0>
 8019c4e:	bf00      	nop
 8019c50:	0802135c 	.word	0x0802135c
 8019c54:	08021374 	.word	0x08021374

08019c58 <rcl_get_security_options_from_environment>:
 8019c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c5c:	b082      	sub	sp, #8
 8019c5e:	2300      	movs	r3, #0
 8019c60:	4606      	mov	r6, r0
 8019c62:	460f      	mov	r7, r1
 8019c64:	4820      	ldr	r0, [pc, #128]	@ (8019ce8 <rcl_get_security_options_from_environment+0x90>)
 8019c66:	9301      	str	r3, [sp, #4]
 8019c68:	a901      	add	r1, sp, #4
 8019c6a:	4690      	mov	r8, r2
 8019c6c:	f7f8 f9c4 	bl	8011ff8 <rcutils_get_env>
 8019c70:	b120      	cbz	r0, 8019c7c <rcl_get_security_options_from_environment+0x24>
 8019c72:	2501      	movs	r5, #1
 8019c74:	4628      	mov	r0, r5
 8019c76:	b002      	add	sp, #8
 8019c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c7c:	491b      	ldr	r1, [pc, #108]	@ (8019cec <rcl_get_security_options_from_environment+0x94>)
 8019c7e:	4604      	mov	r4, r0
 8019c80:	9801      	ldr	r0, [sp, #4]
 8019c82:	f7e6 facd 	bl	8000220 <strcmp>
 8019c86:	4605      	mov	r5, r0
 8019c88:	b9e8      	cbnz	r0, 8019cc6 <rcl_get_security_options_from_environment+0x6e>
 8019c8a:	9001      	str	r0, [sp, #4]
 8019c8c:	f1b8 0f00 	cmp.w	r8, #0
 8019c90:	d020      	beq.n	8019cd4 <rcl_get_security_options_from_environment+0x7c>
 8019c92:	4817      	ldr	r0, [pc, #92]	@ (8019cf0 <rcl_get_security_options_from_environment+0x98>)
 8019c94:	a901      	add	r1, sp, #4
 8019c96:	f7f8 f9af 	bl	8011ff8 <rcutils_get_env>
 8019c9a:	2800      	cmp	r0, #0
 8019c9c:	d1e9      	bne.n	8019c72 <rcl_get_security_options_from_environment+0x1a>
 8019c9e:	4915      	ldr	r1, [pc, #84]	@ (8019cf4 <rcl_get_security_options_from_environment+0x9c>)
 8019ca0:	9801      	ldr	r0, [sp, #4]
 8019ca2:	f7e6 fabd 	bl	8000220 <strcmp>
 8019ca6:	fab0 f080 	clz	r0, r0
 8019caa:	0940      	lsrs	r0, r0, #5
 8019cac:	f888 0000 	strb.w	r0, [r8]
 8019cb0:	4639      	mov	r1, r7
 8019cb2:	4630      	mov	r0, r6
 8019cb4:	f7ff ff66 	bl	8019b84 <rcl_get_secure_root>
 8019cb8:	b170      	cbz	r0, 8019cd8 <rcl_get_security_options_from_environment+0x80>
 8019cba:	f8c8 0004 	str.w	r0, [r8, #4]
 8019cbe:	4628      	mov	r0, r5
 8019cc0:	b002      	add	sp, #8
 8019cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cc6:	4625      	mov	r5, r4
 8019cc8:	4628      	mov	r0, r5
 8019cca:	f888 4000 	strb.w	r4, [r8]
 8019cce:	b002      	add	sp, #8
 8019cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cd4:	250b      	movs	r5, #11
 8019cd6:	e7cd      	b.n	8019c74 <rcl_get_security_options_from_environment+0x1c>
 8019cd8:	f898 5000 	ldrb.w	r5, [r8]
 8019cdc:	f1a5 0501 	sub.w	r5, r5, #1
 8019ce0:	fab5 f585 	clz	r5, r5
 8019ce4:	096d      	lsrs	r5, r5, #5
 8019ce6:	e7c5      	b.n	8019c74 <rcl_get_security_options_from_environment+0x1c>
 8019ce8:	08021314 	.word	0x08021314
 8019cec:	08021328 	.word	0x08021328
 8019cf0:	08021330 	.word	0x08021330
 8019cf4:	08021348 	.word	0x08021348

08019cf8 <rcl_get_zero_initialized_service>:
 8019cf8:	4b01      	ldr	r3, [pc, #4]	@ (8019d00 <rcl_get_zero_initialized_service+0x8>)
 8019cfa:	6818      	ldr	r0, [r3, #0]
 8019cfc:	4770      	bx	lr
 8019cfe:	bf00      	nop
 8019d00:	08021394 	.word	0x08021394

08019d04 <rcl_service_init>:
 8019d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d08:	b089      	sub	sp, #36	@ 0x24
 8019d0a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8019d0c:	b1c5      	cbz	r5, 8019d40 <rcl_service_init+0x3c>
 8019d0e:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8019d12:	4604      	mov	r4, r0
 8019d14:	4648      	mov	r0, r9
 8019d16:	4688      	mov	r8, r1
 8019d18:	4617      	mov	r7, r2
 8019d1a:	461e      	mov	r6, r3
 8019d1c:	f7f8 f8ba 	bl	8011e94 <rcutils_allocator_is_valid>
 8019d20:	b170      	cbz	r0, 8019d40 <rcl_service_init+0x3c>
 8019d22:	b16c      	cbz	r4, 8019d40 <rcl_service_init+0x3c>
 8019d24:	4640      	mov	r0, r8
 8019d26:	f7f6 fea3 	bl	8010a70 <rcl_node_is_valid>
 8019d2a:	2800      	cmp	r0, #0
 8019d2c:	d058      	beq.n	8019de0 <rcl_service_init+0xdc>
 8019d2e:	b13f      	cbz	r7, 8019d40 <rcl_service_init+0x3c>
 8019d30:	b136      	cbz	r6, 8019d40 <rcl_service_init+0x3c>
 8019d32:	6823      	ldr	r3, [r4, #0]
 8019d34:	b14b      	cbz	r3, 8019d4a <rcl_service_init+0x46>
 8019d36:	2664      	movs	r6, #100	@ 0x64
 8019d38:	4630      	mov	r0, r6
 8019d3a:	b009      	add	sp, #36	@ 0x24
 8019d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d40:	260b      	movs	r6, #11
 8019d42:	4630      	mov	r0, r6
 8019d44:	b009      	add	sp, #36	@ 0x24
 8019d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d4a:	aa07      	add	r2, sp, #28
 8019d4c:	9205      	str	r2, [sp, #20]
 8019d4e:	2201      	movs	r2, #1
 8019d50:	9304      	str	r3, [sp, #16]
 8019d52:	9203      	str	r2, [sp, #12]
 8019d54:	9307      	str	r3, [sp, #28]
 8019d56:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8019d5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019d5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019d62:	4631      	mov	r1, r6
 8019d64:	e899 000c 	ldmia.w	r9, {r2, r3}
 8019d68:	4640      	mov	r0, r8
 8019d6a:	f7f6 fed5 	bl	8010b18 <rcl_node_resolve_name>
 8019d6e:	2800      	cmp	r0, #0
 8019d70:	d145      	bne.n	8019dfe <rcl_service_init+0xfa>
 8019d72:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8019d74:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8019d76:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8019d7a:	4798      	blx	r3
 8019d7c:	6020      	str	r0, [r4, #0]
 8019d7e:	2800      	cmp	r0, #0
 8019d80:	d043      	beq.n	8019e0a <rcl_service_init+0x106>
 8019d82:	4640      	mov	r0, r8
 8019d84:	f7f6 fe96 	bl	8010ab4 <rcl_node_get_rmw_handle>
 8019d88:	462b      	mov	r3, r5
 8019d8a:	9a07      	ldr	r2, [sp, #28]
 8019d8c:	6826      	ldr	r6, [r4, #0]
 8019d8e:	4639      	mov	r1, r7
 8019d90:	f7f9 fd66 	bl	8013860 <rmw_create_service>
 8019d94:	6823      	ldr	r3, [r4, #0]
 8019d96:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8019d9a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8019d9e:	b330      	cbz	r0, 8019dee <rcl_service_init+0xea>
 8019da0:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8019da4:	f7f9 fe82 	bl	8013aac <rmw_service_request_subscription_get_actual_qos>
 8019da8:	b9f8      	cbnz	r0, 8019dea <rcl_service_init+0xe6>
 8019daa:	6821      	ldr	r1, [r4, #0]
 8019dac:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8019db0:	31b8      	adds	r1, #184	@ 0xb8
 8019db2:	f7f9 fe6b 	bl	8013a8c <rmw_service_response_publisher_get_actual_qos>
 8019db6:	4606      	mov	r6, r0
 8019db8:	b9b8      	cbnz	r0, 8019dea <rcl_service_init+0xe6>
 8019dba:	6820      	ldr	r0, [r4, #0]
 8019dbc:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8019dc0:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8019dc4:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8019dc8:	2268      	movs	r2, #104	@ 0x68
 8019dca:	4629      	mov	r1, r5
 8019dcc:	f004 faa1 	bl	801e312 <memcpy>
 8019dd0:	9807      	ldr	r0, [sp, #28]
 8019dd2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8019dd4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8019dd6:	4798      	blx	r3
 8019dd8:	4630      	mov	r0, r6
 8019dda:	b009      	add	sp, #36	@ 0x24
 8019ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019de0:	26c8      	movs	r6, #200	@ 0xc8
 8019de2:	4630      	mov	r0, r6
 8019de4:	b009      	add	sp, #36	@ 0x24
 8019de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019dea:	6823      	ldr	r3, [r4, #0]
 8019dec:	b12b      	cbz	r3, 8019dfa <rcl_service_init+0xf6>
 8019dee:	4618      	mov	r0, r3
 8019df0:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8019df2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8019df4:	4790      	blx	r2
 8019df6:	2300      	movs	r3, #0
 8019df8:	6023      	str	r3, [r4, #0]
 8019dfa:	2601      	movs	r6, #1
 8019dfc:	e7e8      	b.n	8019dd0 <rcl_service_init+0xcc>
 8019dfe:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8019e02:	2b01      	cmp	r3, #1
 8019e04:	d903      	bls.n	8019e0e <rcl_service_init+0x10a>
 8019e06:	280a      	cmp	r0, #10
 8019e08:	d1f7      	bne.n	8019dfa <rcl_service_init+0xf6>
 8019e0a:	260a      	movs	r6, #10
 8019e0c:	e7e0      	b.n	8019dd0 <rcl_service_init+0xcc>
 8019e0e:	2668      	movs	r6, #104	@ 0x68
 8019e10:	e7de      	b.n	8019dd0 <rcl_service_init+0xcc>
 8019e12:	bf00      	nop

08019e14 <rcl_service_get_default_options>:
 8019e14:	b530      	push	{r4, r5, lr}
 8019e16:	4d0f      	ldr	r5, [pc, #60]	@ (8019e54 <rcl_service_get_default_options+0x40>)
 8019e18:	490f      	ldr	r1, [pc, #60]	@ (8019e58 <rcl_service_get_default_options+0x44>)
 8019e1a:	b087      	sub	sp, #28
 8019e1c:	4604      	mov	r4, r0
 8019e1e:	2250      	movs	r2, #80	@ 0x50
 8019e20:	4628      	mov	r0, r5
 8019e22:	f004 fa76 	bl	801e312 <memcpy>
 8019e26:	4668      	mov	r0, sp
 8019e28:	f7f8 f826 	bl	8011e78 <rcutils_get_default_allocator>
 8019e2c:	46ec      	mov	ip, sp
 8019e2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019e32:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8019e36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019e3a:	2268      	movs	r2, #104	@ 0x68
 8019e3c:	f8dc 3000 	ldr.w	r3, [ip]
 8019e40:	f8ce 3000 	str.w	r3, [lr]
 8019e44:	4629      	mov	r1, r5
 8019e46:	4620      	mov	r0, r4
 8019e48:	f004 fa63 	bl	801e312 <memcpy>
 8019e4c:	4620      	mov	r0, r4
 8019e4e:	b007      	add	sp, #28
 8019e50:	bd30      	pop	{r4, r5, pc}
 8019e52:	bf00      	nop
 8019e54:	2000c440 	.word	0x2000c440
 8019e58:	08021398 	.word	0x08021398

08019e5c <rcl_service_get_rmw_handle>:
 8019e5c:	b118      	cbz	r0, 8019e66 <rcl_service_get_rmw_handle+0xa>
 8019e5e:	6800      	ldr	r0, [r0, #0]
 8019e60:	b108      	cbz	r0, 8019e66 <rcl_service_get_rmw_handle+0xa>
 8019e62:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8019e66:	4770      	bx	lr

08019e68 <rcl_take_request>:
 8019e68:	b570      	push	{r4, r5, r6, lr}
 8019e6a:	468e      	mov	lr, r1
 8019e6c:	460c      	mov	r4, r1
 8019e6e:	4616      	mov	r6, r2
 8019e70:	4605      	mov	r5, r0
 8019e72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019e76:	b08c      	sub	sp, #48	@ 0x30
 8019e78:	f10d 0c18 	add.w	ip, sp, #24
 8019e7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019e80:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019e84:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019e88:	b30d      	cbz	r5, 8019ece <rcl_take_request+0x66>
 8019e8a:	682b      	ldr	r3, [r5, #0]
 8019e8c:	b1fb      	cbz	r3, 8019ece <rcl_take_request+0x66>
 8019e8e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8019e92:	b1e0      	cbz	r0, 8019ece <rcl_take_request+0x66>
 8019e94:	b336      	cbz	r6, 8019ee4 <rcl_take_request+0x7c>
 8019e96:	2300      	movs	r3, #0
 8019e98:	f88d 3007 	strb.w	r3, [sp, #7]
 8019e9c:	4632      	mov	r2, r6
 8019e9e:	f10d 0307 	add.w	r3, sp, #7
 8019ea2:	a902      	add	r1, sp, #8
 8019ea4:	f7f9 fbd8 	bl	8013658 <rmw_take_request>
 8019ea8:	4605      	mov	r5, r0
 8019eaa:	b198      	cbz	r0, 8019ed4 <rcl_take_request+0x6c>
 8019eac:	280a      	cmp	r0, #10
 8019eae:	bf18      	it	ne
 8019eb0:	2501      	movne	r5, #1
 8019eb2:	f10d 0e18 	add.w	lr, sp, #24
 8019eb6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019eba:	46a4      	mov	ip, r4
 8019ebc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019ec0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019ec4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019ec8:	4628      	mov	r0, r5
 8019eca:	b00c      	add	sp, #48	@ 0x30
 8019ecc:	bd70      	pop	{r4, r5, r6, pc}
 8019ece:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8019ed2:	e7ee      	b.n	8019eb2 <rcl_take_request+0x4a>
 8019ed4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8019ed8:	f240 2359 	movw	r3, #601	@ 0x259
 8019edc:	2a00      	cmp	r2, #0
 8019ede:	bf08      	it	eq
 8019ee0:	461d      	moveq	r5, r3
 8019ee2:	e7e6      	b.n	8019eb2 <rcl_take_request+0x4a>
 8019ee4:	250b      	movs	r5, #11
 8019ee6:	e7e4      	b.n	8019eb2 <rcl_take_request+0x4a>

08019ee8 <rcl_send_response>:
 8019ee8:	b170      	cbz	r0, 8019f08 <rcl_send_response+0x20>
 8019eea:	6800      	ldr	r0, [r0, #0]
 8019eec:	b160      	cbz	r0, 8019f08 <rcl_send_response+0x20>
 8019eee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8019ef2:	b148      	cbz	r0, 8019f08 <rcl_send_response+0x20>
 8019ef4:	b159      	cbz	r1, 8019f0e <rcl_send_response+0x26>
 8019ef6:	b510      	push	{r4, lr}
 8019ef8:	b15a      	cbz	r2, 8019f12 <rcl_send_response+0x2a>
 8019efa:	f7f9 fc0b 	bl	8013714 <rmw_send_response>
 8019efe:	b110      	cbz	r0, 8019f06 <rcl_send_response+0x1e>
 8019f00:	2802      	cmp	r0, #2
 8019f02:	bf18      	it	ne
 8019f04:	2001      	movne	r0, #1
 8019f06:	bd10      	pop	{r4, pc}
 8019f08:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8019f0c:	4770      	bx	lr
 8019f0e:	200b      	movs	r0, #11
 8019f10:	4770      	bx	lr
 8019f12:	200b      	movs	r0, #11
 8019f14:	bd10      	pop	{r4, pc}
 8019f16:	bf00      	nop

08019f18 <rcl_service_is_valid>:
 8019f18:	b130      	cbz	r0, 8019f28 <rcl_service_is_valid+0x10>
 8019f1a:	6800      	ldr	r0, [r0, #0]
 8019f1c:	b120      	cbz	r0, 8019f28 <rcl_service_is_valid+0x10>
 8019f1e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8019f22:	3800      	subs	r0, #0
 8019f24:	bf18      	it	ne
 8019f26:	2001      	movne	r0, #1
 8019f28:	4770      	bx	lr
 8019f2a:	bf00      	nop

08019f2c <rcl_take>:
 8019f2c:	2800      	cmp	r0, #0
 8019f2e:	d04a      	beq.n	8019fc6 <rcl_take+0x9a>
 8019f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f34:	4604      	mov	r4, r0
 8019f36:	6800      	ldr	r0, [r0, #0]
 8019f38:	b0a4      	sub	sp, #144	@ 0x90
 8019f3a:	2800      	cmp	r0, #0
 8019f3c:	d03b      	beq.n	8019fb6 <rcl_take+0x8a>
 8019f3e:	461f      	mov	r7, r3
 8019f40:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d036      	beq.n	8019fb6 <rcl_take+0x8a>
 8019f48:	460e      	mov	r6, r1
 8019f4a:	2900      	cmp	r1, #0
 8019f4c:	d039      	beq.n	8019fc2 <rcl_take+0x96>
 8019f4e:	4615      	mov	r5, r2
 8019f50:	2a00      	cmp	r2, #0
 8019f52:	d03c      	beq.n	8019fce <rcl_take+0xa2>
 8019f54:	a802      	add	r0, sp, #8
 8019f56:	f002 f933 	bl	801c1c0 <rmw_get_zero_initialized_message_info>
 8019f5a:	f10d 0c08 	add.w	ip, sp, #8
 8019f5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019f62:	46ae      	mov	lr, r5
 8019f64:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019f68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019f6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019f70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019f74:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019f78:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8019f7c:	f04f 0800 	mov.w	r8, #0
 8019f80:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8019f84:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8019f88:	6822      	ldr	r2, [r4, #0]
 8019f8a:	462b      	mov	r3, r5
 8019f8c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8019f90:	9700      	str	r7, [sp, #0]
 8019f92:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8019f96:	4631      	mov	r1, r6
 8019f98:	f002 fac0 	bl	801c51c <rmw_take_with_info>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	b9c0      	cbnz	r0, 8019fd2 <rcl_take+0xa6>
 8019fa0:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8019fa4:	f240 1291 	movw	r2, #401	@ 0x191
 8019fa8:	2900      	cmp	r1, #0
 8019faa:	bf08      	it	eq
 8019fac:	4613      	moveq	r3, r2
 8019fae:	4618      	mov	r0, r3
 8019fb0:	b024      	add	sp, #144	@ 0x90
 8019fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fb6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8019fba:	4618      	mov	r0, r3
 8019fbc:	b024      	add	sp, #144	@ 0x90
 8019fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fc2:	230b      	movs	r3, #11
 8019fc4:	e7f3      	b.n	8019fae <rcl_take+0x82>
 8019fc6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8019fca:	4618      	mov	r0, r3
 8019fcc:	4770      	bx	lr
 8019fce:	ad14      	add	r5, sp, #80	@ 0x50
 8019fd0:	e7c0      	b.n	8019f54 <rcl_take+0x28>
 8019fd2:	f7ff f979 	bl	80192c8 <rcl_convert_rmw_ret_to_rcl_ret>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	e7e9      	b.n	8019fae <rcl_take+0x82>
 8019fda:	bf00      	nop

08019fdc <rcl_subscription_get_rmw_handle>:
 8019fdc:	b118      	cbz	r0, 8019fe6 <rcl_subscription_get_rmw_handle+0xa>
 8019fde:	6800      	ldr	r0, [r0, #0]
 8019fe0:	b108      	cbz	r0, 8019fe6 <rcl_subscription_get_rmw_handle+0xa>
 8019fe2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8019fe6:	4770      	bx	lr

08019fe8 <rcl_subscription_is_valid>:
 8019fe8:	b130      	cbz	r0, 8019ff8 <rcl_subscription_is_valid+0x10>
 8019fea:	6800      	ldr	r0, [r0, #0]
 8019fec:	b120      	cbz	r0, 8019ff8 <rcl_subscription_is_valid+0x10>
 8019fee:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8019ff2:	3800      	subs	r0, #0
 8019ff4:	bf18      	it	ne
 8019ff6:	2001      	movne	r0, #1
 8019ff8:	4770      	bx	lr
 8019ffa:	bf00      	nop

08019ffc <rcl_get_system_time>:
 8019ffc:	4608      	mov	r0, r1
 8019ffe:	f7f8 bacb 	b.w	8012598 <rcutils_system_time_now>
 801a002:	bf00      	nop

0801a004 <rcl_get_steady_time>:
 801a004:	4608      	mov	r0, r1
 801a006:	f7f8 baef 	b.w	80125e8 <rcutils_steady_time_now>
 801a00a:	bf00      	nop

0801a00c <rcl_get_ros_time>:
 801a00c:	7a03      	ldrb	r3, [r0, #8]
 801a00e:	b510      	push	{r4, lr}
 801a010:	460c      	mov	r4, r1
 801a012:	b133      	cbz	r3, 801a022 <rcl_get_ros_time+0x16>
 801a014:	2105      	movs	r1, #5
 801a016:	f7f7 ff4b 	bl	8011eb0 <__atomic_load_8>
 801a01a:	e9c4 0100 	strd	r0, r1, [r4]
 801a01e:	2000      	movs	r0, #0
 801a020:	bd10      	pop	{r4, pc}
 801a022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a026:	4608      	mov	r0, r1
 801a028:	f7f8 bab6 	b.w	8012598 <rcutils_system_time_now>

0801a02c <rcl_clock_init>:
 801a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a02e:	4605      	mov	r5, r0
 801a030:	4610      	mov	r0, r2
 801a032:	4614      	mov	r4, r2
 801a034:	460e      	mov	r6, r1
 801a036:	f7f7 ff2d 	bl	8011e94 <rcutils_allocator_is_valid>
 801a03a:	b128      	cbz	r0, 801a048 <rcl_clock_init+0x1c>
 801a03c:	2d03      	cmp	r5, #3
 801a03e:	d803      	bhi.n	801a048 <rcl_clock_init+0x1c>
 801a040:	e8df f005 	tbb	[pc, r5]
 801a044:	06532e1d 	.word	0x06532e1d
 801a048:	f04f 0c0b 	mov.w	ip, #11
 801a04c:	4660      	mov	r0, ip
 801a04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a050:	2e00      	cmp	r6, #0
 801a052:	d0f9      	beq.n	801a048 <rcl_clock_init+0x1c>
 801a054:	2c00      	cmp	r4, #0
 801a056:	d0f7      	beq.n	801a048 <rcl_clock_init+0x1c>
 801a058:	2300      	movs	r3, #0
 801a05a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801a05e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 801a114 <rcl_clock_init+0xe8>
 801a062:	6133      	str	r3, [r6, #16]
 801a064:	f106 0514 	add.w	r5, r6, #20
 801a068:	469c      	mov	ip, r3
 801a06a:	2703      	movs	r7, #3
 801a06c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a06e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a070:	6823      	ldr	r3, [r4, #0]
 801a072:	602b      	str	r3, [r5, #0]
 801a074:	7037      	strb	r7, [r6, #0]
 801a076:	f8c6 e00c 	str.w	lr, [r6, #12]
 801a07a:	4660      	mov	r0, ip
 801a07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a07e:	2e00      	cmp	r6, #0
 801a080:	d0e2      	beq.n	801a048 <rcl_clock_init+0x1c>
 801a082:	2300      	movs	r3, #0
 801a084:	7033      	strb	r3, [r6, #0]
 801a086:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801a08a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801a08e:	469c      	mov	ip, r3
 801a090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a092:	f106 0514 	add.w	r5, r6, #20
 801a096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a098:	6823      	ldr	r3, [r4, #0]
 801a09a:	602b      	str	r3, [r5, #0]
 801a09c:	4660      	mov	r0, ip
 801a09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0a0:	2e00      	cmp	r6, #0
 801a0a2:	d0d1      	beq.n	801a048 <rcl_clock_init+0x1c>
 801a0a4:	2c00      	cmp	r4, #0
 801a0a6:	d0cf      	beq.n	801a048 <rcl_clock_init+0x1c>
 801a0a8:	2700      	movs	r7, #0
 801a0aa:	7037      	strb	r7, [r6, #0]
 801a0ac:	46a4      	mov	ip, r4
 801a0ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a0b2:	f106 0514 	add.w	r5, r6, #20
 801a0b6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801a0ba:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801a0be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a0c0:	f8dc 3000 	ldr.w	r3, [ip]
 801a0c4:	602b      	str	r3, [r5, #0]
 801a0c6:	6921      	ldr	r1, [r4, #16]
 801a0c8:	6823      	ldr	r3, [r4, #0]
 801a0ca:	2010      	movs	r0, #16
 801a0cc:	4798      	blx	r3
 801a0ce:	6130      	str	r0, [r6, #16]
 801a0d0:	b1d0      	cbz	r0, 801a108 <rcl_clock_init+0xdc>
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	e9c0 2300 	strd	r2, r3, [r0]
 801a0da:	2301      	movs	r3, #1
 801a0dc:	7207      	strb	r7, [r0, #8]
 801a0de:	4a0c      	ldr	r2, [pc, #48]	@ (801a110 <rcl_clock_init+0xe4>)
 801a0e0:	7033      	strb	r3, [r6, #0]
 801a0e2:	46bc      	mov	ip, r7
 801a0e4:	60f2      	str	r2, [r6, #12]
 801a0e6:	4660      	mov	r0, ip
 801a0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0ea:	2e00      	cmp	r6, #0
 801a0ec:	d0ac      	beq.n	801a048 <rcl_clock_init+0x1c>
 801a0ee:	2c00      	cmp	r4, #0
 801a0f0:	d0aa      	beq.n	801a048 <rcl_clock_init+0x1c>
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801a0f8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 801a118 <rcl_clock_init+0xec>
 801a0fc:	6133      	str	r3, [r6, #16]
 801a0fe:	f106 0514 	add.w	r5, r6, #20
 801a102:	469c      	mov	ip, r3
 801a104:	2702      	movs	r7, #2
 801a106:	e7b1      	b.n	801a06c <rcl_clock_init+0x40>
 801a108:	f04f 0c0a 	mov.w	ip, #10
 801a10c:	e79e      	b.n	801a04c <rcl_clock_init+0x20>
 801a10e:	bf00      	nop
 801a110:	0801a00d 	.word	0x0801a00d
 801a114:	0801a005 	.word	0x0801a005
 801a118:	08019ffd 	.word	0x08019ffd

0801a11c <rcl_clock_get_now>:
 801a11c:	b140      	cbz	r0, 801a130 <rcl_clock_get_now+0x14>
 801a11e:	b139      	cbz	r1, 801a130 <rcl_clock_get_now+0x14>
 801a120:	7803      	ldrb	r3, [r0, #0]
 801a122:	b11b      	cbz	r3, 801a12c <rcl_clock_get_now+0x10>
 801a124:	68c3      	ldr	r3, [r0, #12]
 801a126:	b10b      	cbz	r3, 801a12c <rcl_clock_get_now+0x10>
 801a128:	6900      	ldr	r0, [r0, #16]
 801a12a:	4718      	bx	r3
 801a12c:	2001      	movs	r0, #1
 801a12e:	4770      	bx	lr
 801a130:	200b      	movs	r0, #11
 801a132:	4770      	bx	lr

0801a134 <rcl_clock_add_jump_callback>:
 801a134:	b082      	sub	sp, #8
 801a136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a13a:	a906      	add	r1, sp, #24
 801a13c:	e881 000c 	stmia.w	r1, {r2, r3}
 801a140:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 801a144:	b320      	cbz	r0, 801a190 <rcl_clock_add_jump_callback+0x5c>
 801a146:	4604      	mov	r4, r0
 801a148:	3014      	adds	r0, #20
 801a14a:	f7f7 fea3 	bl	8011e94 <rcutils_allocator_is_valid>
 801a14e:	b1f8      	cbz	r0, 801a190 <rcl_clock_add_jump_callback+0x5c>
 801a150:	b1f6      	cbz	r6, 801a190 <rcl_clock_add_jump_callback+0x5c>
 801a152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a154:	2b00      	cmp	r3, #0
 801a156:	db1b      	blt.n	801a190 <rcl_clock_add_jump_callback+0x5c>
 801a158:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801a15c:	2a01      	cmp	r2, #1
 801a15e:	f173 0300 	sbcs.w	r3, r3, #0
 801a162:	da15      	bge.n	801a190 <rcl_clock_add_jump_callback+0x5c>
 801a164:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801a168:	2f00      	cmp	r7, #0
 801a16a:	d042      	beq.n	801a1f2 <rcl_clock_add_jump_callback+0xbe>
 801a16c:	2300      	movs	r3, #0
 801a16e:	4602      	mov	r2, r0
 801a170:	e003      	b.n	801a17a <rcl_clock_add_jump_callback+0x46>
 801a172:	42bb      	cmp	r3, r7
 801a174:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 801a178:	d011      	beq.n	801a19e <rcl_clock_add_jump_callback+0x6a>
 801a17a:	6811      	ldr	r1, [r2, #0]
 801a17c:	42b1      	cmp	r1, r6
 801a17e:	f103 0301 	add.w	r3, r3, #1
 801a182:	d1f6      	bne.n	801a172 <rcl_clock_add_jump_callback+0x3e>
 801a184:	6a11      	ldr	r1, [r2, #32]
 801a186:	42a9      	cmp	r1, r5
 801a188:	d1f3      	bne.n	801a172 <rcl_clock_add_jump_callback+0x3e>
 801a18a:	f04f 0e01 	mov.w	lr, #1
 801a18e:	e001      	b.n	801a194 <rcl_clock_add_jump_callback+0x60>
 801a190:	f04f 0e0b 	mov.w	lr, #11
 801a194:	4670      	mov	r0, lr
 801a196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a19a:	b002      	add	sp, #8
 801a19c:	4770      	bx	lr
 801a19e:	3301      	adds	r3, #1
 801a1a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a1a4:	00d9      	lsls	r1, r3, #3
 801a1a6:	69e3      	ldr	r3, [r4, #28]
 801a1a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801a1aa:	4798      	blx	r3
 801a1ac:	b1f0      	cbz	r0, 801a1ec <rcl_clock_add_jump_callback+0xb8>
 801a1ae:	68a3      	ldr	r3, [r4, #8]
 801a1b0:	6060      	str	r0, [r4, #4]
 801a1b2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801a1b6:	f10d 0c18 	add.w	ip, sp, #24
 801a1ba:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801a1be:	f103 0801 	add.w	r8, r3, #1
 801a1c2:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801a1c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a1ca:	f106 0708 	add.w	r7, r6, #8
 801a1ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a1d0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801a1d4:	f04f 0e00 	mov.w	lr, #0
 801a1d8:	e887 0003 	stmia.w	r7, {r0, r1}
 801a1dc:	6235      	str	r5, [r6, #32]
 801a1de:	4670      	mov	r0, lr
 801a1e0:	f8c4 8008 	str.w	r8, [r4, #8]
 801a1e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e8:	b002      	add	sp, #8
 801a1ea:	4770      	bx	lr
 801a1ec:	f04f 0e0a 	mov.w	lr, #10
 801a1f0:	e7d0      	b.n	801a194 <rcl_clock_add_jump_callback+0x60>
 801a1f2:	2128      	movs	r1, #40	@ 0x28
 801a1f4:	e7d7      	b.n	801a1a6 <rcl_clock_add_jump_callback+0x72>
 801a1f6:	bf00      	nop

0801a1f8 <rcl_clock_remove_jump_callback>:
 801a1f8:	2800      	cmp	r0, #0
 801a1fa:	d057      	beq.n	801a2ac <rcl_clock_remove_jump_callback+0xb4>
 801a1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a200:	4605      	mov	r5, r0
 801a202:	3014      	adds	r0, #20
 801a204:	4688      	mov	r8, r1
 801a206:	4692      	mov	sl, r2
 801a208:	f7f7 fe44 	bl	8011e94 <rcutils_allocator_is_valid>
 801a20c:	2800      	cmp	r0, #0
 801a20e:	d03b      	beq.n	801a288 <rcl_clock_remove_jump_callback+0x90>
 801a210:	f1b8 0f00 	cmp.w	r8, #0
 801a214:	d038      	beq.n	801a288 <rcl_clock_remove_jump_callback+0x90>
 801a216:	68ae      	ldr	r6, [r5, #8]
 801a218:	b166      	cbz	r6, 801a234 <rcl_clock_remove_jump_callback+0x3c>
 801a21a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801a21e:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801a222:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801a226:	464c      	mov	r4, r9
 801a228:	6823      	ldr	r3, [r4, #0]
 801a22a:	4543      	cmp	r3, r8
 801a22c:	d005      	beq.n	801a23a <rcl_clock_remove_jump_callback+0x42>
 801a22e:	3428      	adds	r4, #40	@ 0x28
 801a230:	42a7      	cmp	r7, r4
 801a232:	d1f9      	bne.n	801a228 <rcl_clock_remove_jump_callback+0x30>
 801a234:	2001      	movs	r0, #1
 801a236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a23a:	6a23      	ldr	r3, [r4, #32]
 801a23c:	3428      	adds	r4, #40	@ 0x28
 801a23e:	42bc      	cmp	r4, r7
 801a240:	d02d      	beq.n	801a29e <rcl_clock_remove_jump_callback+0xa6>
 801a242:	4553      	cmp	r3, sl
 801a244:	d1f0      	bne.n	801a228 <rcl_clock_remove_jump_callback+0x30>
 801a246:	46a6      	mov	lr, r4
 801a248:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a24c:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801a250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a254:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a258:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a25c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801a260:	3428      	adds	r4, #40	@ 0x28
 801a262:	42a7      	cmp	r7, r4
 801a264:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a268:	d1ed      	bne.n	801a246 <rcl_clock_remove_jump_callback+0x4e>
 801a26a:	3e01      	subs	r6, #1
 801a26c:	60ae      	str	r6, [r5, #8]
 801a26e:	b176      	cbz	r6, 801a28e <rcl_clock_remove_jump_callback+0x96>
 801a270:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801a274:	69eb      	ldr	r3, [r5, #28]
 801a276:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801a278:	00f1      	lsls	r1, r6, #3
 801a27a:	4648      	mov	r0, r9
 801a27c:	4798      	blx	r3
 801a27e:	b1b8      	cbz	r0, 801a2b0 <rcl_clock_remove_jump_callback+0xb8>
 801a280:	6068      	str	r0, [r5, #4]
 801a282:	2000      	movs	r0, #0
 801a284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a288:	200b      	movs	r0, #11
 801a28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a28e:	4648      	mov	r0, r9
 801a290:	69ab      	ldr	r3, [r5, #24]
 801a292:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801a294:	4798      	blx	r3
 801a296:	606e      	str	r6, [r5, #4]
 801a298:	4630      	mov	r0, r6
 801a29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a29e:	4553      	cmp	r3, sl
 801a2a0:	d1c8      	bne.n	801a234 <rcl_clock_remove_jump_callback+0x3c>
 801a2a2:	3e01      	subs	r6, #1
 801a2a4:	60ae      	str	r6, [r5, #8]
 801a2a6:	2e00      	cmp	r6, #0
 801a2a8:	d1e2      	bne.n	801a270 <rcl_clock_remove_jump_callback+0x78>
 801a2aa:	e7f0      	b.n	801a28e <rcl_clock_remove_jump_callback+0x96>
 801a2ac:	200b      	movs	r0, #11
 801a2ae:	4770      	bx	lr
 801a2b0:	200a      	movs	r0, #10
 801a2b2:	e7ea      	b.n	801a28a <rcl_clock_remove_jump_callback+0x92>

0801a2b4 <_rcl_timer_time_jump>:
 801a2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2b8:	4605      	mov	r5, r0
 801a2ba:	b084      	sub	sp, #16
 801a2bc:	4614      	mov	r4, r2
 801a2be:	b131      	cbz	r1, 801a2ce <_rcl_timer_time_jump+0x1a>
 801a2c0:	7803      	ldrb	r3, [r0, #0]
 801a2c2:	3b02      	subs	r3, #2
 801a2c4:	2b01      	cmp	r3, #1
 801a2c6:	d93f      	bls.n	801a348 <_rcl_timer_time_jump+0x94>
 801a2c8:	b004      	add	sp, #16
 801a2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2ce:	6813      	ldr	r3, [r2, #0]
 801a2d0:	a902      	add	r1, sp, #8
 801a2d2:	6818      	ldr	r0, [r3, #0]
 801a2d4:	f7ff ff22 	bl	801a11c <rcl_clock_get_now>
 801a2d8:	2800      	cmp	r0, #0
 801a2da:	d1f5      	bne.n	801a2c8 <_rcl_timer_time_jump+0x14>
 801a2dc:	6820      	ldr	r0, [r4, #0]
 801a2de:	2105      	movs	r1, #5
 801a2e0:	3020      	adds	r0, #32
 801a2e2:	f7f7 fde5 	bl	8011eb0 <__atomic_load_8>
 801a2e6:	6823      	ldr	r3, [r4, #0]
 801a2e8:	4681      	mov	r9, r0
 801a2ea:	4688      	mov	r8, r1
 801a2ec:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801a2f0:	2105      	movs	r1, #5
 801a2f2:	f7f7 fddd 	bl	8011eb0 <__atomic_load_8>
 801a2f6:	4607      	mov	r7, r0
 801a2f8:	6820      	ldr	r0, [r4, #0]
 801a2fa:	460e      	mov	r6, r1
 801a2fc:	3018      	adds	r0, #24
 801a2fe:	2105      	movs	r1, #5
 801a300:	f7f7 fdd6 	bl	8011eb0 <__atomic_load_8>
 801a304:	782b      	ldrb	r3, [r5, #0]
 801a306:	9a02      	ldr	r2, [sp, #8]
 801a308:	3b02      	subs	r3, #2
 801a30a:	2b01      	cmp	r3, #1
 801a30c:	460d      	mov	r5, r1
 801a30e:	9b03      	ldr	r3, [sp, #12]
 801a310:	4682      	mov	sl, r0
 801a312:	d937      	bls.n	801a384 <_rcl_timer_time_jump+0xd0>
 801a314:	42ba      	cmp	r2, r7
 801a316:	eb73 0106 	sbcs.w	r1, r3, r6
 801a31a:	da5f      	bge.n	801a3dc <_rcl_timer_time_jump+0x128>
 801a31c:	454a      	cmp	r2, r9
 801a31e:	eb73 0108 	sbcs.w	r1, r3, r8
 801a322:	dad1      	bge.n	801a2c8 <_rcl_timer_time_jump+0x14>
 801a324:	6820      	ldr	r0, [r4, #0]
 801a326:	eb1a 0202 	adds.w	r2, sl, r2
 801a32a:	eb43 0305 	adc.w	r3, r3, r5
 801a32e:	2505      	movs	r5, #5
 801a330:	3028      	adds	r0, #40	@ 0x28
 801a332:	9500      	str	r5, [sp, #0]
 801a334:	f7f7 fdf2 	bl	8011f1c <__atomic_store_8>
 801a338:	6820      	ldr	r0, [r4, #0]
 801a33a:	9500      	str	r5, [sp, #0]
 801a33c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a340:	3020      	adds	r0, #32
 801a342:	f7f7 fdeb 	bl	8011f1c <__atomic_store_8>
 801a346:	e7bf      	b.n	801a2c8 <_rcl_timer_time_jump+0x14>
 801a348:	6813      	ldr	r3, [r2, #0]
 801a34a:	a902      	add	r1, sp, #8
 801a34c:	6818      	ldr	r0, [r3, #0]
 801a34e:	f7ff fee5 	bl	801a11c <rcl_clock_get_now>
 801a352:	2800      	cmp	r0, #0
 801a354:	d1b8      	bne.n	801a2c8 <_rcl_timer_time_jump+0x14>
 801a356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a35a:	4313      	orrs	r3, r2
 801a35c:	d0b4      	beq.n	801a2c8 <_rcl_timer_time_jump+0x14>
 801a35e:	6820      	ldr	r0, [r4, #0]
 801a360:	2105      	movs	r1, #5
 801a362:	3028      	adds	r0, #40	@ 0x28
 801a364:	f7f7 fda4 	bl	8011eb0 <__atomic_load_8>
 801a368:	9d02      	ldr	r5, [sp, #8]
 801a36a:	9b03      	ldr	r3, [sp, #12]
 801a36c:	4602      	mov	r2, r0
 801a36e:	6820      	ldr	r0, [r4, #0]
 801a370:	1b52      	subs	r2, r2, r5
 801a372:	f04f 0405 	mov.w	r4, #5
 801a376:	9400      	str	r4, [sp, #0]
 801a378:	eb61 0303 	sbc.w	r3, r1, r3
 801a37c:	3030      	adds	r0, #48	@ 0x30
 801a37e:	f7f7 fdcd 	bl	8011f1c <__atomic_store_8>
 801a382:	e7a1      	b.n	801a2c8 <_rcl_timer_time_jump+0x14>
 801a384:	4313      	orrs	r3, r2
 801a386:	d09f      	beq.n	801a2c8 <_rcl_timer_time_jump+0x14>
 801a388:	6820      	ldr	r0, [r4, #0]
 801a38a:	f04f 0805 	mov.w	r8, #5
 801a38e:	2300      	movs	r3, #0
 801a390:	f8cd 8000 	str.w	r8, [sp]
 801a394:	3030      	adds	r0, #48	@ 0x30
 801a396:	2200      	movs	r2, #0
 801a398:	f7f7 fdf6 	bl	8011f88 <__atomic_exchange_8>
 801a39c:	ea51 0300 	orrs.w	r3, r1, r0
 801a3a0:	4606      	mov	r6, r0
 801a3a2:	460f      	mov	r7, r1
 801a3a4:	d090      	beq.n	801a2c8 <_rcl_timer_time_jump+0x14>
 801a3a6:	9a02      	ldr	r2, [sp, #8]
 801a3a8:	9b03      	ldr	r3, [sp, #12]
 801a3aa:	f8cd 8000 	str.w	r8, [sp]
 801a3ae:	1a12      	subs	r2, r2, r0
 801a3b0:	6820      	ldr	r0, [r4, #0]
 801a3b2:	eb63 0301 	sbc.w	r3, r3, r1
 801a3b6:	eb12 020a 	adds.w	r2, r2, sl
 801a3ba:	eb43 0305 	adc.w	r3, r3, r5
 801a3be:	3028      	adds	r0, #40	@ 0x28
 801a3c0:	f7f7 fdac 	bl	8011f1c <__atomic_store_8>
 801a3c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a3c8:	f8cd 8000 	str.w	r8, [sp]
 801a3cc:	6820      	ldr	r0, [r4, #0]
 801a3ce:	1b92      	subs	r2, r2, r6
 801a3d0:	eb63 0307 	sbc.w	r3, r3, r7
 801a3d4:	3020      	adds	r0, #32
 801a3d6:	f7f7 fda1 	bl	8011f1c <__atomic_store_8>
 801a3da:	e775      	b.n	801a2c8 <_rcl_timer_time_jump+0x14>
 801a3dc:	6820      	ldr	r0, [r4, #0]
 801a3de:	3008      	adds	r0, #8
 801a3e0:	f7ff fa52 	bl	8019888 <rcl_trigger_guard_condition>
 801a3e4:	e770      	b.n	801a2c8 <_rcl_timer_time_jump+0x14>
 801a3e6:	bf00      	nop

0801a3e8 <rcl_get_zero_initialized_timer>:
 801a3e8:	4b01      	ldr	r3, [pc, #4]	@ (801a3f0 <rcl_get_zero_initialized_timer+0x8>)
 801a3ea:	6818      	ldr	r0, [r3, #0]
 801a3ec:	4770      	bx	lr
 801a3ee:	bf00      	nop
 801a3f0:	080213e8 	.word	0x080213e8
 801a3f4:	00000000 	.word	0x00000000

0801a3f8 <rcl_timer_init>:
 801a3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3fc:	b0aa      	sub	sp, #168	@ 0xa8
 801a3fe:	4604      	mov	r4, r0
 801a400:	a835      	add	r0, sp, #212	@ 0xd4
 801a402:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 801a406:	460d      	mov	r5, r1
 801a408:	4692      	mov	sl, r2
 801a40a:	f7f7 fd43 	bl	8011e94 <rcutils_allocator_is_valid>
 801a40e:	2800      	cmp	r0, #0
 801a410:	d064      	beq.n	801a4dc <rcl_timer_init+0xe4>
 801a412:	2c00      	cmp	r4, #0
 801a414:	d062      	beq.n	801a4dc <rcl_timer_init+0xe4>
 801a416:	2d00      	cmp	r5, #0
 801a418:	d060      	beq.n	801a4dc <rcl_timer_init+0xe4>
 801a41a:	2f00      	cmp	r7, #0
 801a41c:	db5e      	blt.n	801a4dc <rcl_timer_init+0xe4>
 801a41e:	6823      	ldr	r3, [r4, #0]
 801a420:	b123      	cbz	r3, 801a42c <rcl_timer_init+0x34>
 801a422:	2664      	movs	r6, #100	@ 0x64
 801a424:	4630      	mov	r0, r6
 801a426:	b02a      	add	sp, #168	@ 0xa8
 801a428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a42c:	a908      	add	r1, sp, #32
 801a42e:	4628      	mov	r0, r5
 801a430:	f7ff fe74 	bl	801a11c <rcl_clock_get_now>
 801a434:	4606      	mov	r6, r0
 801a436:	2800      	cmp	r0, #0
 801a438:	d1f4      	bne.n	801a424 <rcl_timer_init+0x2c>
 801a43a:	ae06      	add	r6, sp, #24
 801a43c:	4630      	mov	r0, r6
 801a43e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801a442:	f7ff f929 	bl	8019698 <rcl_get_zero_initialized_guard_condition>
 801a446:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a44a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801a44e:	ae0b      	add	r6, sp, #44	@ 0x2c
 801a450:	e889 0003 	stmia.w	r9, {r0, r1}
 801a454:	4630      	mov	r0, r6
 801a456:	f7ff f9fb 	bl	8019850 <rcl_guard_condition_get_default_options>
 801a45a:	ab0d      	add	r3, sp, #52	@ 0x34
 801a45c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a460:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a464:	4651      	mov	r1, sl
 801a466:	e896 000c 	ldmia.w	r6, {r2, r3}
 801a46a:	4648      	mov	r0, r9
 801a46c:	f7ff f91e 	bl	80196ac <rcl_guard_condition_init>
 801a470:	4606      	mov	r6, r0
 801a472:	2800      	cmp	r0, #0
 801a474:	d1d6      	bne.n	801a424 <rcl_timer_init+0x2c>
 801a476:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a478:	781b      	ldrb	r3, [r3, #0]
 801a47a:	2b01      	cmp	r3, #1
 801a47c:	d033      	beq.n	801a4e6 <rcl_timer_init+0xee>
 801a47e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 801a480:	911a      	str	r1, [sp, #104]	@ 0x68
 801a482:	4642      	mov	r2, r8
 801a484:	463b      	mov	r3, r7
 801a486:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801a48a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a48e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801a540 <rcl_timer_init+0x148>
 801a492:	eb12 0008 	adds.w	r0, r2, r8
 801a496:	eb47 0103 	adc.w	r1, r7, r3
 801a49a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 801a49e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801a4a2:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801a4a6:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801a4aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a4ae:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801a4b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a4b6:	f8de 3000 	ldr.w	r3, [lr]
 801a4ba:	f8cc 3000 	str.w	r3, [ip]
 801a4be:	f04f 0a00 	mov.w	sl, #0
 801a4c2:	4619      	mov	r1, r3
 801a4c4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 801a4c8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801a4ca:	2050      	movs	r0, #80	@ 0x50
 801a4cc:	4798      	blx	r3
 801a4ce:	6020      	str	r0, [r4, #0]
 801a4d0:	b358      	cbz	r0, 801a52a <rcl_timer_init+0x132>
 801a4d2:	2250      	movs	r2, #80	@ 0x50
 801a4d4:	a916      	add	r1, sp, #88	@ 0x58
 801a4d6:	f003 ff1c 	bl	801e312 <memcpy>
 801a4da:	e7a3      	b.n	801a424 <rcl_timer_init+0x2c>
 801a4dc:	260b      	movs	r6, #11
 801a4de:	4630      	mov	r0, r6
 801a4e0:	b02a      	add	sp, #168	@ 0xa8
 801a4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4e6:	2001      	movs	r0, #1
 801a4e8:	2100      	movs	r1, #0
 801a4ea:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801a4ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a4f2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801a4f6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801a4fa:	4a13      	ldr	r2, [pc, #76]	@ (801a548 <rcl_timer_init+0x150>)
 801a4fc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801a500:	9405      	str	r4, [sp, #20]
 801a502:	9204      	str	r2, [sp, #16]
 801a504:	ab12      	add	r3, sp, #72	@ 0x48
 801a506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a508:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801a50c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801a510:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801a514:	4628      	mov	r0, r5
 801a516:	f7ff fe0d 	bl	801a134 <rcl_clock_add_jump_callback>
 801a51a:	4682      	mov	sl, r0
 801a51c:	2800      	cmp	r0, #0
 801a51e:	d0ae      	beq.n	801a47e <rcl_timer_init+0x86>
 801a520:	4648      	mov	r0, r9
 801a522:	f7ff f96f 	bl	8019804 <rcl_guard_condition_fini>
 801a526:	4656      	mov	r6, sl
 801a528:	e77c      	b.n	801a424 <rcl_timer_init+0x2c>
 801a52a:	4648      	mov	r0, r9
 801a52c:	f7ff f96a 	bl	8019804 <rcl_guard_condition_fini>
 801a530:	4905      	ldr	r1, [pc, #20]	@ (801a548 <rcl_timer_init+0x150>)
 801a532:	4622      	mov	r2, r4
 801a534:	4628      	mov	r0, r5
 801a536:	f7ff fe5f 	bl	801a1f8 <rcl_clock_remove_jump_callback>
 801a53a:	260a      	movs	r6, #10
 801a53c:	e772      	b.n	801a424 <rcl_timer_init+0x2c>
 801a53e:	bf00      	nop
	...
 801a548:	0801a2b5 	.word	0x0801a2b5

0801a54c <rcl_timer_call>:
 801a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a550:	b087      	sub	sp, #28
 801a552:	2800      	cmp	r0, #0
 801a554:	d06d      	beq.n	801a632 <rcl_timer_call+0xe6>
 801a556:	6803      	ldr	r3, [r0, #0]
 801a558:	4604      	mov	r4, r0
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d063      	beq.n	801a626 <rcl_timer_call+0xda>
 801a55e:	f3bf 8f5b 	dmb	ish
 801a562:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801a566:	f3bf 8f5b 	dmb	ish
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d150      	bne.n	801a610 <rcl_timer_call+0xc4>
 801a56e:	6803      	ldr	r3, [r0, #0]
 801a570:	a904      	add	r1, sp, #16
 801a572:	6818      	ldr	r0, [r3, #0]
 801a574:	f7ff fdd2 	bl	801a11c <rcl_clock_get_now>
 801a578:	4605      	mov	r5, r0
 801a57a:	2800      	cmp	r0, #0
 801a57c:	d14a      	bne.n	801a614 <rcl_timer_call+0xc8>
 801a57e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a582:	2b00      	cmp	r3, #0
 801a584:	db4a      	blt.n	801a61c <rcl_timer_call+0xd0>
 801a586:	6820      	ldr	r0, [r4, #0]
 801a588:	f04f 0a05 	mov.w	sl, #5
 801a58c:	f8cd a000 	str.w	sl, [sp]
 801a590:	3020      	adds	r0, #32
 801a592:	f7f7 fcf9 	bl	8011f88 <__atomic_exchange_8>
 801a596:	6823      	ldr	r3, [r4, #0]
 801a598:	f3bf 8f5b 	dmb	ish
 801a59c:	4680      	mov	r8, r0
 801a59e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801a5a2:	f3bf 8f5b 	dmb	ish
 801a5a6:	6820      	ldr	r0, [r4, #0]
 801a5a8:	4689      	mov	r9, r1
 801a5aa:	3028      	adds	r0, #40	@ 0x28
 801a5ac:	4651      	mov	r1, sl
 801a5ae:	f7f7 fc7f 	bl	8011eb0 <__atomic_load_8>
 801a5b2:	4606      	mov	r6, r0
 801a5b4:	6820      	ldr	r0, [r4, #0]
 801a5b6:	460f      	mov	r7, r1
 801a5b8:	3018      	adds	r0, #24
 801a5ba:	4651      	mov	r1, sl
 801a5bc:	f7f7 fc78 	bl	8011eb0 <__atomic_load_8>
 801a5c0:	1836      	adds	r6, r6, r0
 801a5c2:	4602      	mov	r2, r0
 801a5c4:	4682      	mov	sl, r0
 801a5c6:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801a5ca:	eb47 0701 	adc.w	r7, r7, r1
 801a5ce:	4286      	cmp	r6, r0
 801a5d0:	460b      	mov	r3, r1
 801a5d2:	eb77 010c 	sbcs.w	r1, r7, ip
 801a5d6:	da04      	bge.n	801a5e2 <rcl_timer_call+0x96>
 801a5d8:	ea53 0102 	orrs.w	r1, r3, r2
 801a5dc:	d12e      	bne.n	801a63c <rcl_timer_call+0xf0>
 801a5de:	4606      	mov	r6, r0
 801a5e0:	4667      	mov	r7, ip
 801a5e2:	6820      	ldr	r0, [r4, #0]
 801a5e4:	2105      	movs	r1, #5
 801a5e6:	4632      	mov	r2, r6
 801a5e8:	463b      	mov	r3, r7
 801a5ea:	3028      	adds	r0, #40	@ 0x28
 801a5ec:	9100      	str	r1, [sp, #0]
 801a5ee:	f7f7 fc95 	bl	8011f1c <__atomic_store_8>
 801a5f2:	f1bb 0f00 	cmp.w	fp, #0
 801a5f6:	d00d      	beq.n	801a614 <rcl_timer_call+0xc8>
 801a5f8:	9a04      	ldr	r2, [sp, #16]
 801a5fa:	9b05      	ldr	r3, [sp, #20]
 801a5fc:	ebb2 0208 	subs.w	r2, r2, r8
 801a600:	4620      	mov	r0, r4
 801a602:	eb63 0309 	sbc.w	r3, r3, r9
 801a606:	47d8      	blx	fp
 801a608:	4628      	mov	r0, r5
 801a60a:	b007      	add	sp, #28
 801a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a610:	f240 3521 	movw	r5, #801	@ 0x321
 801a614:	4628      	mov	r0, r5
 801a616:	b007      	add	sp, #28
 801a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a61c:	2501      	movs	r5, #1
 801a61e:	4628      	mov	r0, r5
 801a620:	b007      	add	sp, #28
 801a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a626:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801a62a:	4628      	mov	r0, r5
 801a62c:	b007      	add	sp, #28
 801a62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a632:	250b      	movs	r5, #11
 801a634:	4628      	mov	r0, r5
 801a636:	b007      	add	sp, #28
 801a638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a63c:	1b80      	subs	r0, r0, r6
 801a63e:	eb6c 0107 	sbc.w	r1, ip, r7
 801a642:	3801      	subs	r0, #1
 801a644:	f161 0100 	sbc.w	r1, r1, #0
 801a648:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801a64c:	f7e6 fb0c 	bl	8000c68 <__aeabi_ldivmod>
 801a650:	9b02      	ldr	r3, [sp, #8]
 801a652:	3001      	adds	r0, #1
 801a654:	f141 0100 	adc.w	r1, r1, #0
 801a658:	fb00 f303 	mul.w	r3, r0, r3
 801a65c:	fb01 330a 	mla	r3, r1, sl, r3
 801a660:	fba0 0a0a 	umull	r0, sl, r0, sl
 801a664:	1986      	adds	r6, r0, r6
 801a666:	4453      	add	r3, sl
 801a668:	eb43 0707 	adc.w	r7, r3, r7
 801a66c:	e7b9      	b.n	801a5e2 <rcl_timer_call+0x96>
 801a66e:	bf00      	nop

0801a670 <rcl_timer_is_ready>:
 801a670:	b570      	push	{r4, r5, r6, lr}
 801a672:	b082      	sub	sp, #8
 801a674:	b378      	cbz	r0, 801a6d6 <rcl_timer_is_ready+0x66>
 801a676:	6803      	ldr	r3, [r0, #0]
 801a678:	4604      	mov	r4, r0
 801a67a:	b383      	cbz	r3, 801a6de <rcl_timer_is_ready+0x6e>
 801a67c:	460d      	mov	r5, r1
 801a67e:	b351      	cbz	r1, 801a6d6 <rcl_timer_is_ready+0x66>
 801a680:	f3bf 8f5b 	dmb	ish
 801a684:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801a688:	f3bf 8f5b 	dmb	ish
 801a68c:	b953      	cbnz	r3, 801a6a4 <rcl_timer_is_ready+0x34>
 801a68e:	6803      	ldr	r3, [r0, #0]
 801a690:	4669      	mov	r1, sp
 801a692:	6818      	ldr	r0, [r3, #0]
 801a694:	f7ff fd42 	bl	801a11c <rcl_clock_get_now>
 801a698:	4606      	mov	r6, r0
 801a69a:	b140      	cbz	r0, 801a6ae <rcl_timer_is_ready+0x3e>
 801a69c:	f240 3321 	movw	r3, #801	@ 0x321
 801a6a0:	4298      	cmp	r0, r3
 801a6a2:	d101      	bne.n	801a6a8 <rcl_timer_is_ready+0x38>
 801a6a4:	2600      	movs	r6, #0
 801a6a6:	702e      	strb	r6, [r5, #0]
 801a6a8:	4630      	mov	r0, r6
 801a6aa:	b002      	add	sp, #8
 801a6ac:	bd70      	pop	{r4, r5, r6, pc}
 801a6ae:	6820      	ldr	r0, [r4, #0]
 801a6b0:	2105      	movs	r1, #5
 801a6b2:	3028      	adds	r0, #40	@ 0x28
 801a6b4:	f7f7 fbfc 	bl	8011eb0 <__atomic_load_8>
 801a6b8:	9b00      	ldr	r3, [sp, #0]
 801a6ba:	1ac0      	subs	r0, r0, r3
 801a6bc:	9b01      	ldr	r3, [sp, #4]
 801a6be:	eb61 0103 	sbc.w	r1, r1, r3
 801a6c2:	2801      	cmp	r0, #1
 801a6c4:	f171 0300 	sbcs.w	r3, r1, #0
 801a6c8:	bfb4      	ite	lt
 801a6ca:	2301      	movlt	r3, #1
 801a6cc:	2300      	movge	r3, #0
 801a6ce:	4630      	mov	r0, r6
 801a6d0:	702b      	strb	r3, [r5, #0]
 801a6d2:	b002      	add	sp, #8
 801a6d4:	bd70      	pop	{r4, r5, r6, pc}
 801a6d6:	260b      	movs	r6, #11
 801a6d8:	4630      	mov	r0, r6
 801a6da:	b002      	add	sp, #8
 801a6dc:	bd70      	pop	{r4, r5, r6, pc}
 801a6de:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801a6e2:	e7e1      	b.n	801a6a8 <rcl_timer_is_ready+0x38>

0801a6e4 <rcl_timer_get_time_until_next_call>:
 801a6e4:	b570      	push	{r4, r5, r6, lr}
 801a6e6:	b082      	sub	sp, #8
 801a6e8:	b330      	cbz	r0, 801a738 <rcl_timer_get_time_until_next_call+0x54>
 801a6ea:	6803      	ldr	r3, [r0, #0]
 801a6ec:	4604      	mov	r4, r0
 801a6ee:	b33b      	cbz	r3, 801a740 <rcl_timer_get_time_until_next_call+0x5c>
 801a6f0:	460d      	mov	r5, r1
 801a6f2:	b309      	cbz	r1, 801a738 <rcl_timer_get_time_until_next_call+0x54>
 801a6f4:	f3bf 8f5b 	dmb	ish
 801a6f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801a6fc:	f3bf 8f5b 	dmb	ish
 801a700:	b9ab      	cbnz	r3, 801a72e <rcl_timer_get_time_until_next_call+0x4a>
 801a702:	6803      	ldr	r3, [r0, #0]
 801a704:	4669      	mov	r1, sp
 801a706:	6818      	ldr	r0, [r3, #0]
 801a708:	f7ff fd08 	bl	801a11c <rcl_clock_get_now>
 801a70c:	4606      	mov	r6, r0
 801a70e:	b958      	cbnz	r0, 801a728 <rcl_timer_get_time_until_next_call+0x44>
 801a710:	6820      	ldr	r0, [r4, #0]
 801a712:	2105      	movs	r1, #5
 801a714:	3028      	adds	r0, #40	@ 0x28
 801a716:	f7f7 fbcb 	bl	8011eb0 <__atomic_load_8>
 801a71a:	9b00      	ldr	r3, [sp, #0]
 801a71c:	1ac0      	subs	r0, r0, r3
 801a71e:	9b01      	ldr	r3, [sp, #4]
 801a720:	6028      	str	r0, [r5, #0]
 801a722:	eb61 0103 	sbc.w	r1, r1, r3
 801a726:	6069      	str	r1, [r5, #4]
 801a728:	4630      	mov	r0, r6
 801a72a:	b002      	add	sp, #8
 801a72c:	bd70      	pop	{r4, r5, r6, pc}
 801a72e:	f240 3621 	movw	r6, #801	@ 0x321
 801a732:	4630      	mov	r0, r6
 801a734:	b002      	add	sp, #8
 801a736:	bd70      	pop	{r4, r5, r6, pc}
 801a738:	260b      	movs	r6, #11
 801a73a:	4630      	mov	r0, r6
 801a73c:	b002      	add	sp, #8
 801a73e:	bd70      	pop	{r4, r5, r6, pc}
 801a740:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801a744:	e7f0      	b.n	801a728 <rcl_timer_get_time_until_next_call+0x44>
 801a746:	bf00      	nop

0801a748 <rcl_timer_get_guard_condition>:
 801a748:	b130      	cbz	r0, 801a758 <rcl_timer_get_guard_condition+0x10>
 801a74a:	6800      	ldr	r0, [r0, #0]
 801a74c:	b120      	cbz	r0, 801a758 <rcl_timer_get_guard_condition+0x10>
 801a74e:	68c3      	ldr	r3, [r0, #12]
 801a750:	b10b      	cbz	r3, 801a756 <rcl_timer_get_guard_condition+0xe>
 801a752:	3008      	adds	r0, #8
 801a754:	4770      	bx	lr
 801a756:	4618      	mov	r0, r3
 801a758:	4770      	bx	lr
 801a75a:	bf00      	nop

0801a75c <rcl_validate_enclave_name_with_size>:
 801a75c:	b378      	cbz	r0, 801a7be <rcl_validate_enclave_name_with_size+0x62>
 801a75e:	b570      	push	{r4, r5, r6, lr}
 801a760:	4615      	mov	r5, r2
 801a762:	b0c2      	sub	sp, #264	@ 0x108
 801a764:	b302      	cbz	r2, 801a7a8 <rcl_validate_enclave_name_with_size+0x4c>
 801a766:	461e      	mov	r6, r3
 801a768:	466a      	mov	r2, sp
 801a76a:	ab01      	add	r3, sp, #4
 801a76c:	460c      	mov	r4, r1
 801a76e:	f7f7 fff1 	bl	8012754 <rmw_validate_namespace_with_size>
 801a772:	4684      	mov	ip, r0
 801a774:	b9e8      	cbnz	r0, 801a7b2 <rcl_validate_enclave_name_with_size+0x56>
 801a776:	9b00      	ldr	r3, [sp, #0]
 801a778:	b923      	cbnz	r3, 801a784 <rcl_validate_enclave_name_with_size+0x28>
 801a77a:	2300      	movs	r3, #0
 801a77c:	602b      	str	r3, [r5, #0]
 801a77e:	4660      	mov	r0, ip
 801a780:	b042      	add	sp, #264	@ 0x108
 801a782:	bd70      	pop	{r4, r5, r6, pc}
 801a784:	2b07      	cmp	r3, #7
 801a786:	d007      	beq.n	801a798 <rcl_validate_enclave_name_with_size+0x3c>
 801a788:	1e5a      	subs	r2, r3, #1
 801a78a:	2a05      	cmp	r2, #5
 801a78c:	d833      	bhi.n	801a7f6 <rcl_validate_enclave_name_with_size+0x9a>
 801a78e:	e8df f002 	tbb	[pc, r2]
 801a792:	2c2f      	.short	0x2c2f
 801a794:	1a232629 	.word	0x1a232629
 801a798:	2cff      	cmp	r4, #255	@ 0xff
 801a79a:	d9ee      	bls.n	801a77a <rcl_validate_enclave_name_with_size+0x1e>
 801a79c:	602b      	str	r3, [r5, #0]
 801a79e:	2e00      	cmp	r6, #0
 801a7a0:	d0ed      	beq.n	801a77e <rcl_validate_enclave_name_with_size+0x22>
 801a7a2:	23fe      	movs	r3, #254	@ 0xfe
 801a7a4:	6033      	str	r3, [r6, #0]
 801a7a6:	e7ea      	b.n	801a77e <rcl_validate_enclave_name_with_size+0x22>
 801a7a8:	f04f 0c0b 	mov.w	ip, #11
 801a7ac:	4660      	mov	r0, ip
 801a7ae:	b042      	add	sp, #264	@ 0x108
 801a7b0:	bd70      	pop	{r4, r5, r6, pc}
 801a7b2:	f7fe fd89 	bl	80192c8 <rcl_convert_rmw_ret_to_rcl_ret>
 801a7b6:	4684      	mov	ip, r0
 801a7b8:	4660      	mov	r0, ip
 801a7ba:	b042      	add	sp, #264	@ 0x108
 801a7bc:	bd70      	pop	{r4, r5, r6, pc}
 801a7be:	f04f 0c0b 	mov.w	ip, #11
 801a7c2:	4660      	mov	r0, ip
 801a7c4:	4770      	bx	lr
 801a7c6:	2306      	movs	r3, #6
 801a7c8:	602b      	str	r3, [r5, #0]
 801a7ca:	2e00      	cmp	r6, #0
 801a7cc:	d0d7      	beq.n	801a77e <rcl_validate_enclave_name_with_size+0x22>
 801a7ce:	9b01      	ldr	r3, [sp, #4]
 801a7d0:	6033      	str	r3, [r6, #0]
 801a7d2:	4660      	mov	r0, ip
 801a7d4:	b042      	add	sp, #264	@ 0x108
 801a7d6:	bd70      	pop	{r4, r5, r6, pc}
 801a7d8:	2305      	movs	r3, #5
 801a7da:	602b      	str	r3, [r5, #0]
 801a7dc:	e7f5      	b.n	801a7ca <rcl_validate_enclave_name_with_size+0x6e>
 801a7de:	2304      	movs	r3, #4
 801a7e0:	602b      	str	r3, [r5, #0]
 801a7e2:	e7f2      	b.n	801a7ca <rcl_validate_enclave_name_with_size+0x6e>
 801a7e4:	2303      	movs	r3, #3
 801a7e6:	602b      	str	r3, [r5, #0]
 801a7e8:	e7ef      	b.n	801a7ca <rcl_validate_enclave_name_with_size+0x6e>
 801a7ea:	2302      	movs	r3, #2
 801a7ec:	602b      	str	r3, [r5, #0]
 801a7ee:	e7ec      	b.n	801a7ca <rcl_validate_enclave_name_with_size+0x6e>
 801a7f0:	2301      	movs	r3, #1
 801a7f2:	602b      	str	r3, [r5, #0]
 801a7f4:	e7e9      	b.n	801a7ca <rcl_validate_enclave_name_with_size+0x6e>
 801a7f6:	4a04      	ldr	r2, [pc, #16]	@ (801a808 <rcl_validate_enclave_name_with_size+0xac>)
 801a7f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801a7fc:	a802      	add	r0, sp, #8
 801a7fe:	f7f7 fd35 	bl	801226c <rcutils_snprintf>
 801a802:	f04f 0c01 	mov.w	ip, #1
 801a806:	e7ba      	b.n	801a77e <rcl_validate_enclave_name_with_size+0x22>
 801a808:	080213ec 	.word	0x080213ec

0801a80c <rcl_validate_enclave_name>:
 801a80c:	b168      	cbz	r0, 801a82a <rcl_validate_enclave_name+0x1e>
 801a80e:	b570      	push	{r4, r5, r6, lr}
 801a810:	460d      	mov	r5, r1
 801a812:	4616      	mov	r6, r2
 801a814:	4604      	mov	r4, r0
 801a816:	f7e5 fd0d 	bl	8000234 <strlen>
 801a81a:	4633      	mov	r3, r6
 801a81c:	4601      	mov	r1, r0
 801a81e:	462a      	mov	r2, r5
 801a820:	4620      	mov	r0, r4
 801a822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a826:	f7ff bf99 	b.w	801a75c <rcl_validate_enclave_name_with_size>
 801a82a:	200b      	movs	r0, #11
 801a82c:	4770      	bx	lr
 801a82e:	bf00      	nop

0801a830 <rcl_validate_topic_name>:
 801a830:	2800      	cmp	r0, #0
 801a832:	d07a      	beq.n	801a92a <rcl_validate_topic_name+0xfa>
 801a834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a838:	460e      	mov	r6, r1
 801a83a:	2900      	cmp	r1, #0
 801a83c:	d07c      	beq.n	801a938 <rcl_validate_topic_name+0x108>
 801a83e:	4617      	mov	r7, r2
 801a840:	4605      	mov	r5, r0
 801a842:	f7e5 fcf7 	bl	8000234 <strlen>
 801a846:	b1b0      	cbz	r0, 801a876 <rcl_validate_topic_name+0x46>
 801a848:	f895 9000 	ldrb.w	r9, [r5]
 801a84c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801a9d0 <rcl_validate_topic_name+0x1a0>
 801a850:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801a854:	f013 0304 	ands.w	r3, r3, #4
 801a858:	d169      	bne.n	801a92e <rcl_validate_topic_name+0xfe>
 801a85a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801a85e:	f815 2008 	ldrb.w	r2, [r5, r8]
 801a862:	2a2f      	cmp	r2, #47	@ 0x2f
 801a864:	d10e      	bne.n	801a884 <rcl_validate_topic_name+0x54>
 801a866:	2202      	movs	r2, #2
 801a868:	6032      	str	r2, [r6, #0]
 801a86a:	b36f      	cbz	r7, 801a8c8 <rcl_validate_topic_name+0x98>
 801a86c:	f8c7 8000 	str.w	r8, [r7]
 801a870:	4618      	mov	r0, r3
 801a872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a876:	2301      	movs	r3, #1
 801a878:	6033      	str	r3, [r6, #0]
 801a87a:	b32f      	cbz	r7, 801a8c8 <rcl_validate_topic_name+0x98>
 801a87c:	2000      	movs	r0, #0
 801a87e:	6038      	str	r0, [r7, #0]
 801a880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a884:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801a888:	461c      	mov	r4, r3
 801a88a:	4619      	mov	r1, r3
 801a88c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801a890:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801a894:	f1be 0f09 	cmp.w	lr, #9
 801a898:	d919      	bls.n	801a8ce <rcl_validate_topic_name+0x9e>
 801a89a:	f022 0e20 	bic.w	lr, r2, #32
 801a89e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801a8a2:	f1be 0f19 	cmp.w	lr, #25
 801a8a6:	d912      	bls.n	801a8ce <rcl_validate_topic_name+0x9e>
 801a8a8:	2a5f      	cmp	r2, #95	@ 0x5f
 801a8aa:	d019      	beq.n	801a8e0 <rcl_validate_topic_name+0xb0>
 801a8ac:	2a2f      	cmp	r2, #47	@ 0x2f
 801a8ae:	d051      	beq.n	801a954 <rcl_validate_topic_name+0x124>
 801a8b0:	2a7e      	cmp	r2, #126	@ 0x7e
 801a8b2:	d048      	beq.n	801a946 <rcl_validate_topic_name+0x116>
 801a8b4:	2a7b      	cmp	r2, #123	@ 0x7b
 801a8b6:	d054      	beq.n	801a962 <rcl_validate_topic_name+0x132>
 801a8b8:	2a7d      	cmp	r2, #125	@ 0x7d
 801a8ba:	d161      	bne.n	801a980 <rcl_validate_topic_name+0x150>
 801a8bc:	2c00      	cmp	r4, #0
 801a8be:	d155      	bne.n	801a96c <rcl_validate_topic_name+0x13c>
 801a8c0:	2305      	movs	r3, #5
 801a8c2:	6033      	str	r3, [r6, #0]
 801a8c4:	b107      	cbz	r7, 801a8c8 <rcl_validate_topic_name+0x98>
 801a8c6:	6039      	str	r1, [r7, #0]
 801a8c8:	2000      	movs	r0, #0
 801a8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8ce:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a8d2:	0752      	lsls	r2, r2, #29
 801a8d4:	d504      	bpl.n	801a8e0 <rcl_validate_topic_name+0xb0>
 801a8d6:	b11c      	cbz	r4, 801a8e0 <rcl_validate_topic_name+0xb0>
 801a8d8:	b111      	cbz	r1, 801a8e0 <rcl_validate_topic_name+0xb0>
 801a8da:	1e4a      	subs	r2, r1, #1
 801a8dc:	429a      	cmp	r2, r3
 801a8de:	d02d      	beq.n	801a93c <rcl_validate_topic_name+0x10c>
 801a8e0:	3101      	adds	r1, #1
 801a8e2:	4288      	cmp	r0, r1
 801a8e4:	d1d2      	bne.n	801a88c <rcl_validate_topic_name+0x5c>
 801a8e6:	2c00      	cmp	r4, #0
 801a8e8:	d145      	bne.n	801a976 <rcl_validate_topic_name+0x146>
 801a8ea:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801a8ee:	d04f      	beq.n	801a990 <rcl_validate_topic_name+0x160>
 801a8f0:	4620      	mov	r0, r4
 801a8f2:	2301      	movs	r3, #1
 801a8f4:	e006      	b.n	801a904 <rcl_validate_topic_name+0xd4>
 801a8f6:	428b      	cmp	r3, r1
 801a8f8:	f105 0501 	add.w	r5, r5, #1
 801a8fc:	f103 0201 	add.w	r2, r3, #1
 801a900:	d236      	bcs.n	801a970 <rcl_validate_topic_name+0x140>
 801a902:	4613      	mov	r3, r2
 801a904:	4580      	cmp	r8, r0
 801a906:	f100 0001 	add.w	r0, r0, #1
 801a90a:	d0f4      	beq.n	801a8f6 <rcl_validate_topic_name+0xc6>
 801a90c:	782a      	ldrb	r2, [r5, #0]
 801a90e:	2a2f      	cmp	r2, #47	@ 0x2f
 801a910:	d1f1      	bne.n	801a8f6 <rcl_validate_topic_name+0xc6>
 801a912:	786a      	ldrb	r2, [r5, #1]
 801a914:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a918:	0754      	lsls	r4, r2, #29
 801a91a:	d5ec      	bpl.n	801a8f6 <rcl_validate_topic_name+0xc6>
 801a91c:	2204      	movs	r2, #4
 801a91e:	6032      	str	r2, [r6, #0]
 801a920:	2f00      	cmp	r7, #0
 801a922:	d0d1      	beq.n	801a8c8 <rcl_validate_topic_name+0x98>
 801a924:	603b      	str	r3, [r7, #0]
 801a926:	2000      	movs	r0, #0
 801a928:	e7aa      	b.n	801a880 <rcl_validate_topic_name+0x50>
 801a92a:	200b      	movs	r0, #11
 801a92c:	4770      	bx	lr
 801a92e:	2304      	movs	r3, #4
 801a930:	6033      	str	r3, [r6, #0]
 801a932:	2f00      	cmp	r7, #0
 801a934:	d1a2      	bne.n	801a87c <rcl_validate_topic_name+0x4c>
 801a936:	e7c7      	b.n	801a8c8 <rcl_validate_topic_name+0x98>
 801a938:	200b      	movs	r0, #11
 801a93a:	e7a1      	b.n	801a880 <rcl_validate_topic_name+0x50>
 801a93c:	2309      	movs	r3, #9
 801a93e:	6033      	str	r3, [r6, #0]
 801a940:	2f00      	cmp	r7, #0
 801a942:	d1c0      	bne.n	801a8c6 <rcl_validate_topic_name+0x96>
 801a944:	e7c0      	b.n	801a8c8 <rcl_validate_topic_name+0x98>
 801a946:	2900      	cmp	r1, #0
 801a948:	d0ca      	beq.n	801a8e0 <rcl_validate_topic_name+0xb0>
 801a94a:	2306      	movs	r3, #6
 801a94c:	6033      	str	r3, [r6, #0]
 801a94e:	2f00      	cmp	r7, #0
 801a950:	d1b9      	bne.n	801a8c6 <rcl_validate_topic_name+0x96>
 801a952:	e7b9      	b.n	801a8c8 <rcl_validate_topic_name+0x98>
 801a954:	2c00      	cmp	r4, #0
 801a956:	d0c3      	beq.n	801a8e0 <rcl_validate_topic_name+0xb0>
 801a958:	2308      	movs	r3, #8
 801a95a:	6033      	str	r3, [r6, #0]
 801a95c:	2f00      	cmp	r7, #0
 801a95e:	d1b2      	bne.n	801a8c6 <rcl_validate_topic_name+0x96>
 801a960:	e7b2      	b.n	801a8c8 <rcl_validate_topic_name+0x98>
 801a962:	2c00      	cmp	r4, #0
 801a964:	d1f8      	bne.n	801a958 <rcl_validate_topic_name+0x128>
 801a966:	460b      	mov	r3, r1
 801a968:	2401      	movs	r4, #1
 801a96a:	e7b9      	b.n	801a8e0 <rcl_validate_topic_name+0xb0>
 801a96c:	2400      	movs	r4, #0
 801a96e:	e7b7      	b.n	801a8e0 <rcl_validate_topic_name+0xb0>
 801a970:	2000      	movs	r0, #0
 801a972:	6030      	str	r0, [r6, #0]
 801a974:	e784      	b.n	801a880 <rcl_validate_topic_name+0x50>
 801a976:	2205      	movs	r2, #5
 801a978:	6032      	str	r2, [r6, #0]
 801a97a:	2f00      	cmp	r7, #0
 801a97c:	d1d2      	bne.n	801a924 <rcl_validate_topic_name+0xf4>
 801a97e:	e7a3      	b.n	801a8c8 <rcl_validate_topic_name+0x98>
 801a980:	2c00      	cmp	r4, #0
 801a982:	bf14      	ite	ne
 801a984:	2308      	movne	r3, #8
 801a986:	2303      	moveq	r3, #3
 801a988:	6033      	str	r3, [r6, #0]
 801a98a:	2f00      	cmp	r7, #0
 801a98c:	d19b      	bne.n	801a8c6 <rcl_validate_topic_name+0x96>
 801a98e:	e79b      	b.n	801a8c8 <rcl_validate_topic_name+0x98>
 801a990:	2301      	movs	r3, #1
 801a992:	e00a      	b.n	801a9aa <rcl_validate_topic_name+0x17a>
 801a994:	2c01      	cmp	r4, #1
 801a996:	d013      	beq.n	801a9c0 <rcl_validate_topic_name+0x190>
 801a998:	4299      	cmp	r1, r3
 801a99a:	f104 0401 	add.w	r4, r4, #1
 801a99e:	f105 0501 	add.w	r5, r5, #1
 801a9a2:	f103 0201 	add.w	r2, r3, #1
 801a9a6:	d9e3      	bls.n	801a970 <rcl_validate_topic_name+0x140>
 801a9a8:	4613      	mov	r3, r2
 801a9aa:	45a0      	cmp	r8, r4
 801a9ac:	d0f4      	beq.n	801a998 <rcl_validate_topic_name+0x168>
 801a9ae:	782a      	ldrb	r2, [r5, #0]
 801a9b0:	2a2f      	cmp	r2, #47	@ 0x2f
 801a9b2:	d1ef      	bne.n	801a994 <rcl_validate_topic_name+0x164>
 801a9b4:	786a      	ldrb	r2, [r5, #1]
 801a9b6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a9ba:	0752      	lsls	r2, r2, #29
 801a9bc:	d5ec      	bpl.n	801a998 <rcl_validate_topic_name+0x168>
 801a9be:	e7ad      	b.n	801a91c <rcl_validate_topic_name+0xec>
 801a9c0:	2307      	movs	r3, #7
 801a9c2:	6033      	str	r3, [r6, #0]
 801a9c4:	2f00      	cmp	r7, #0
 801a9c6:	f43f af7f 	beq.w	801a8c8 <rcl_validate_topic_name+0x98>
 801a9ca:	603c      	str	r4, [r7, #0]
 801a9cc:	2000      	movs	r0, #0
 801a9ce:	e757      	b.n	801a880 <rcl_validate_topic_name+0x50>
 801a9d0:	080216be 	.word	0x080216be

0801a9d4 <rcl_get_zero_initialized_wait_set>:
 801a9d4:	b510      	push	{r4, lr}
 801a9d6:	4c08      	ldr	r4, [pc, #32]	@ (801a9f8 <rcl_get_zero_initialized_wait_set+0x24>)
 801a9d8:	4686      	mov	lr, r0
 801a9da:	4684      	mov	ip, r0
 801a9dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a9de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a9e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a9e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a9e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a9ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a9ee:	6823      	ldr	r3, [r4, #0]
 801a9f0:	f8cc 3000 	str.w	r3, [ip]
 801a9f4:	4670      	mov	r0, lr
 801a9f6:	bd10      	pop	{r4, pc}
 801a9f8:	0802144c 	.word	0x0802144c

0801a9fc <rcl_wait_set_is_valid>:
 801a9fc:	b118      	cbz	r0, 801aa06 <rcl_wait_set_is_valid+0xa>
 801a9fe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801aa00:	3800      	subs	r0, #0
 801aa02:	bf18      	it	ne
 801aa04:	2001      	movne	r0, #1
 801aa06:	4770      	bx	lr

0801aa08 <rcl_wait_set_fini>:
 801aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa0c:	b082      	sub	sp, #8
 801aa0e:	2800      	cmp	r0, #0
 801aa10:	f000 8095 	beq.w	801ab3e <rcl_wait_set_fini+0x136>
 801aa14:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801aa16:	4604      	mov	r4, r0
 801aa18:	2e00      	cmp	r6, #0
 801aa1a:	f000 808c 	beq.w	801ab36 <rcl_wait_set_fini+0x12e>
 801aa1e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801aa20:	f001 ff62 	bl	801c8e8 <rmw_destroy_wait_set>
 801aa24:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801aa26:	1e06      	subs	r6, r0, #0
 801aa28:	bf18      	it	ne
 801aa2a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801aa2e:	2d00      	cmp	r5, #0
 801aa30:	f000 8081 	beq.w	801ab36 <rcl_wait_set_fini+0x12e>
 801aa34:	6820      	ldr	r0, [r4, #0]
 801aa36:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801aa3a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801aa3c:	2700      	movs	r7, #0
 801aa3e:	6067      	str	r7, [r4, #4]
 801aa40:	602f      	str	r7, [r5, #0]
 801aa42:	b120      	cbz	r0, 801aa4e <rcl_wait_set_fini+0x46>
 801aa44:	9101      	str	r1, [sp, #4]
 801aa46:	47c0      	blx	r8
 801aa48:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801aa4a:	9901      	ldr	r1, [sp, #4]
 801aa4c:	6027      	str	r7, [r4, #0]
 801aa4e:	68a8      	ldr	r0, [r5, #8]
 801aa50:	b120      	cbz	r0, 801aa5c <rcl_wait_set_fini+0x54>
 801aa52:	47c0      	blx	r8
 801aa54:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801aa56:	2300      	movs	r3, #0
 801aa58:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801aa5c:	68a0      	ldr	r0, [r4, #8]
 801aa5e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801aa60:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801aa62:	f04f 0800 	mov.w	r8, #0
 801aa66:	f8c4 800c 	str.w	r8, [r4, #12]
 801aa6a:	f8c5 800c 	str.w	r8, [r5, #12]
 801aa6e:	b128      	cbz	r0, 801aa7c <rcl_wait_set_fini+0x74>
 801aa70:	47b8      	blx	r7
 801aa72:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801aa74:	f8c4 8008 	str.w	r8, [r4, #8]
 801aa78:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801aa7a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801aa7c:	6968      	ldr	r0, [r5, #20]
 801aa7e:	f04f 0800 	mov.w	r8, #0
 801aa82:	f8c5 8010 	str.w	r8, [r5, #16]
 801aa86:	b128      	cbz	r0, 801aa94 <rcl_wait_set_fini+0x8c>
 801aa88:	47b8      	blx	r7
 801aa8a:	f8c5 8014 	str.w	r8, [r5, #20]
 801aa8e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801aa90:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801aa92:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801aa94:	6920      	ldr	r0, [r4, #16]
 801aa96:	f04f 0800 	mov.w	r8, #0
 801aa9a:	f8c4 8014 	str.w	r8, [r4, #20]
 801aa9e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801aaa2:	b128      	cbz	r0, 801aab0 <rcl_wait_set_fini+0xa8>
 801aaa4:	47b8      	blx	r7
 801aaa6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801aaa8:	f8c4 8010 	str.w	r8, [r4, #16]
 801aaac:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801aaae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801aab0:	69a0      	ldr	r0, [r4, #24]
 801aab2:	f04f 0800 	mov.w	r8, #0
 801aab6:	f8c4 801c 	str.w	r8, [r4, #28]
 801aaba:	f8c5 8018 	str.w	r8, [r5, #24]
 801aabe:	b128      	cbz	r0, 801aacc <rcl_wait_set_fini+0xc4>
 801aac0:	9101      	str	r1, [sp, #4]
 801aac2:	47b8      	blx	r7
 801aac4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801aac6:	9901      	ldr	r1, [sp, #4]
 801aac8:	f8c4 8018 	str.w	r8, [r4, #24]
 801aacc:	6a28      	ldr	r0, [r5, #32]
 801aace:	b120      	cbz	r0, 801aada <rcl_wait_set_fini+0xd2>
 801aad0:	47b8      	blx	r7
 801aad2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801aad4:	2300      	movs	r3, #0
 801aad6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801aada:	6a20      	ldr	r0, [r4, #32]
 801aadc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801aae0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801aae2:	2700      	movs	r7, #0
 801aae4:	6267      	str	r7, [r4, #36]	@ 0x24
 801aae6:	626f      	str	r7, [r5, #36]	@ 0x24
 801aae8:	b120      	cbz	r0, 801aaf4 <rcl_wait_set_fini+0xec>
 801aaea:	9101      	str	r1, [sp, #4]
 801aaec:	47c0      	blx	r8
 801aaee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801aaf0:	9901      	ldr	r1, [sp, #4]
 801aaf2:	6227      	str	r7, [r4, #32]
 801aaf4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801aaf6:	b120      	cbz	r0, 801ab02 <rcl_wait_set_fini+0xfa>
 801aaf8:	47c0      	blx	r8
 801aafa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801aafc:	2300      	movs	r3, #0
 801aafe:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801ab02:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ab04:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801ab08:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801ab0a:	2700      	movs	r7, #0
 801ab0c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801ab0e:	632f      	str	r7, [r5, #48]	@ 0x30
 801ab10:	b120      	cbz	r0, 801ab1c <rcl_wait_set_fini+0x114>
 801ab12:	9101      	str	r1, [sp, #4]
 801ab14:	47c0      	blx	r8
 801ab16:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801ab18:	9901      	ldr	r1, [sp, #4]
 801ab1a:	62a7      	str	r7, [r4, #40]	@ 0x28
 801ab1c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801ab1e:	b120      	cbz	r0, 801ab2a <rcl_wait_set_fini+0x122>
 801ab20:	47c0      	blx	r8
 801ab22:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801ab24:	2300      	movs	r3, #0
 801ab26:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801ab2a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801ab2c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801ab2e:	4628      	mov	r0, r5
 801ab30:	4798      	blx	r3
 801ab32:	2300      	movs	r3, #0
 801ab34:	6323      	str	r3, [r4, #48]	@ 0x30
 801ab36:	4630      	mov	r0, r6
 801ab38:	b002      	add	sp, #8
 801ab3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab3e:	260b      	movs	r6, #11
 801ab40:	4630      	mov	r0, r6
 801ab42:	b002      	add	sp, #8
 801ab44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ab48 <rcl_wait_set_add_subscription>:
 801ab48:	b318      	cbz	r0, 801ab92 <rcl_wait_set_add_subscription+0x4a>
 801ab4a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ab4c:	b570      	push	{r4, r5, r6, lr}
 801ab4e:	4604      	mov	r4, r0
 801ab50:	b30b      	cbz	r3, 801ab96 <rcl_wait_set_add_subscription+0x4e>
 801ab52:	b319      	cbz	r1, 801ab9c <rcl_wait_set_add_subscription+0x54>
 801ab54:	681d      	ldr	r5, [r3, #0]
 801ab56:	6840      	ldr	r0, [r0, #4]
 801ab58:	4285      	cmp	r5, r0
 801ab5a:	d217      	bcs.n	801ab8c <rcl_wait_set_add_subscription+0x44>
 801ab5c:	6820      	ldr	r0, [r4, #0]
 801ab5e:	1c6e      	adds	r6, r5, #1
 801ab60:	601e      	str	r6, [r3, #0]
 801ab62:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801ab66:	b102      	cbz	r2, 801ab6a <rcl_wait_set_add_subscription+0x22>
 801ab68:	6015      	str	r5, [r2, #0]
 801ab6a:	4608      	mov	r0, r1
 801ab6c:	f7ff fa36 	bl	8019fdc <rcl_subscription_get_rmw_handle>
 801ab70:	b150      	cbz	r0, 801ab88 <rcl_wait_set_add_subscription+0x40>
 801ab72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ab74:	6842      	ldr	r2, [r0, #4]
 801ab76:	689b      	ldr	r3, [r3, #8]
 801ab78:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ab7c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801ab7e:	6853      	ldr	r3, [r2, #4]
 801ab80:	3301      	adds	r3, #1
 801ab82:	2000      	movs	r0, #0
 801ab84:	6053      	str	r3, [r2, #4]
 801ab86:	bd70      	pop	{r4, r5, r6, pc}
 801ab88:	2001      	movs	r0, #1
 801ab8a:	bd70      	pop	{r4, r5, r6, pc}
 801ab8c:	f240 3086 	movw	r0, #902	@ 0x386
 801ab90:	bd70      	pop	{r4, r5, r6, pc}
 801ab92:	200b      	movs	r0, #11
 801ab94:	4770      	bx	lr
 801ab96:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ab9a:	bd70      	pop	{r4, r5, r6, pc}
 801ab9c:	200b      	movs	r0, #11
 801ab9e:	bd70      	pop	{r4, r5, r6, pc}

0801aba0 <rcl_wait_set_clear>:
 801aba0:	2800      	cmp	r0, #0
 801aba2:	d073      	beq.n	801ac8c <rcl_wait_set_clear+0xec>
 801aba4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801aba6:	b510      	push	{r4, lr}
 801aba8:	4604      	mov	r4, r0
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d070      	beq.n	801ac90 <rcl_wait_set_clear+0xf0>
 801abae:	6800      	ldr	r0, [r0, #0]
 801abb0:	b138      	cbz	r0, 801abc2 <rcl_wait_set_clear+0x22>
 801abb2:	6862      	ldr	r2, [r4, #4]
 801abb4:	2100      	movs	r1, #0
 801abb6:	0092      	lsls	r2, r2, #2
 801abb8:	f003 fae2 	bl	801e180 <memset>
 801abbc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801abbe:	2200      	movs	r2, #0
 801abc0:	601a      	str	r2, [r3, #0]
 801abc2:	68a0      	ldr	r0, [r4, #8]
 801abc4:	b138      	cbz	r0, 801abd6 <rcl_wait_set_clear+0x36>
 801abc6:	68e2      	ldr	r2, [r4, #12]
 801abc8:	2100      	movs	r1, #0
 801abca:	0092      	lsls	r2, r2, #2
 801abcc:	f003 fad8 	bl	801e180 <memset>
 801abd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801abd2:	2200      	movs	r2, #0
 801abd4:	60da      	str	r2, [r3, #12]
 801abd6:	69a0      	ldr	r0, [r4, #24]
 801abd8:	b138      	cbz	r0, 801abea <rcl_wait_set_clear+0x4a>
 801abda:	69e2      	ldr	r2, [r4, #28]
 801abdc:	2100      	movs	r1, #0
 801abde:	0092      	lsls	r2, r2, #2
 801abe0:	f003 face 	bl	801e180 <memset>
 801abe4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801abe6:	2200      	movs	r2, #0
 801abe8:	619a      	str	r2, [r3, #24]
 801abea:	6a20      	ldr	r0, [r4, #32]
 801abec:	b138      	cbz	r0, 801abfe <rcl_wait_set_clear+0x5e>
 801abee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801abf0:	2100      	movs	r1, #0
 801abf2:	0092      	lsls	r2, r2, #2
 801abf4:	f003 fac4 	bl	801e180 <memset>
 801abf8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801abfa:	2200      	movs	r2, #0
 801abfc:	625a      	str	r2, [r3, #36]	@ 0x24
 801abfe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ac00:	b138      	cbz	r0, 801ac12 <rcl_wait_set_clear+0x72>
 801ac02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801ac04:	2100      	movs	r1, #0
 801ac06:	0092      	lsls	r2, r2, #2
 801ac08:	f003 faba 	bl	801e180 <memset>
 801ac0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ac0e:	2200      	movs	r2, #0
 801ac10:	631a      	str	r2, [r3, #48]	@ 0x30
 801ac12:	6920      	ldr	r0, [r4, #16]
 801ac14:	b138      	cbz	r0, 801ac26 <rcl_wait_set_clear+0x86>
 801ac16:	6962      	ldr	r2, [r4, #20]
 801ac18:	2100      	movs	r1, #0
 801ac1a:	0092      	lsls	r2, r2, #2
 801ac1c:	f003 fab0 	bl	801e180 <memset>
 801ac20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ac22:	2200      	movs	r2, #0
 801ac24:	641a      	str	r2, [r3, #64]	@ 0x40
 801ac26:	6898      	ldr	r0, [r3, #8]
 801ac28:	b138      	cbz	r0, 801ac3a <rcl_wait_set_clear+0x9a>
 801ac2a:	685a      	ldr	r2, [r3, #4]
 801ac2c:	2100      	movs	r1, #0
 801ac2e:	0092      	lsls	r2, r2, #2
 801ac30:	f003 faa6 	bl	801e180 <memset>
 801ac34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ac36:	2200      	movs	r2, #0
 801ac38:	605a      	str	r2, [r3, #4]
 801ac3a:	6958      	ldr	r0, [r3, #20]
 801ac3c:	b138      	cbz	r0, 801ac4e <rcl_wait_set_clear+0xae>
 801ac3e:	691a      	ldr	r2, [r3, #16]
 801ac40:	2100      	movs	r1, #0
 801ac42:	0092      	lsls	r2, r2, #2
 801ac44:	f003 fa9c 	bl	801e180 <memset>
 801ac48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	611a      	str	r2, [r3, #16]
 801ac4e:	6a18      	ldr	r0, [r3, #32]
 801ac50:	b138      	cbz	r0, 801ac62 <rcl_wait_set_clear+0xc2>
 801ac52:	69da      	ldr	r2, [r3, #28]
 801ac54:	2100      	movs	r1, #0
 801ac56:	0092      	lsls	r2, r2, #2
 801ac58:	f003 fa92 	bl	801e180 <memset>
 801ac5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ac5e:	2200      	movs	r2, #0
 801ac60:	61da      	str	r2, [r3, #28]
 801ac62:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801ac64:	b138      	cbz	r0, 801ac76 <rcl_wait_set_clear+0xd6>
 801ac66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ac68:	2100      	movs	r1, #0
 801ac6a:	0092      	lsls	r2, r2, #2
 801ac6c:	f003 fa88 	bl	801e180 <memset>
 801ac70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ac72:	2200      	movs	r2, #0
 801ac74:	629a      	str	r2, [r3, #40]	@ 0x28
 801ac76:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801ac78:	b138      	cbz	r0, 801ac8a <rcl_wait_set_clear+0xea>
 801ac7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ac7c:	2100      	movs	r1, #0
 801ac7e:	0092      	lsls	r2, r2, #2
 801ac80:	f003 fa7e 	bl	801e180 <memset>
 801ac84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ac86:	2000      	movs	r0, #0
 801ac88:	6358      	str	r0, [r3, #52]	@ 0x34
 801ac8a:	bd10      	pop	{r4, pc}
 801ac8c:	200b      	movs	r0, #11
 801ac8e:	4770      	bx	lr
 801ac90:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ac94:	bd10      	pop	{r4, pc}
 801ac96:	bf00      	nop

0801ac98 <rcl_wait_set_resize>:
 801ac98:	2800      	cmp	r0, #0
 801ac9a:	f000 8185 	beq.w	801afa8 <rcl_wait_set_resize+0x310>
 801ac9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aca2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801aca4:	b083      	sub	sp, #12
 801aca6:	4605      	mov	r5, r0
 801aca8:	2c00      	cmp	r4, #0
 801acaa:	f000 817f 	beq.w	801afac <rcl_wait_set_resize+0x314>
 801acae:	f04f 0900 	mov.w	r9, #0
 801acb2:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801acb6:	461f      	mov	r7, r3
 801acb8:	4688      	mov	r8, r1
 801acba:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801acbe:	4616      	mov	r6, r2
 801acc0:	f8c0 9004 	str.w	r9, [r0, #4]
 801acc4:	f8c4 9000 	str.w	r9, [r4]
 801acc8:	2900      	cmp	r1, #0
 801acca:	f000 80bd 	beq.w	801ae48 <rcl_wait_set_resize+0x1b0>
 801acce:	008c      	lsls	r4, r1, #2
 801acd0:	6800      	ldr	r0, [r0, #0]
 801acd2:	9301      	str	r3, [sp, #4]
 801acd4:	4652      	mov	r2, sl
 801acd6:	4621      	mov	r1, r4
 801acd8:	4798      	blx	r3
 801acda:	9b01      	ldr	r3, [sp, #4]
 801acdc:	6028      	str	r0, [r5, #0]
 801acde:	2800      	cmp	r0, #0
 801ace0:	f000 80cb 	beq.w	801ae7a <rcl_wait_set_resize+0x1e2>
 801ace4:	4622      	mov	r2, r4
 801ace6:	4649      	mov	r1, r9
 801ace8:	9301      	str	r3, [sp, #4]
 801acea:	f003 fa49 	bl	801e180 <memset>
 801acee:	f8c5 8004 	str.w	r8, [r5, #4]
 801acf2:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801acf6:	9b01      	ldr	r3, [sp, #4]
 801acf8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801acfc:	f8c8 9004 	str.w	r9, [r8, #4]
 801ad00:	4652      	mov	r2, sl
 801ad02:	4621      	mov	r1, r4
 801ad04:	4798      	blx	r3
 801ad06:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ad08:	f8c8 0008 	str.w	r0, [r8, #8]
 801ad0c:	689b      	ldr	r3, [r3, #8]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	f000 80ac 	beq.w	801ae6c <rcl_wait_set_resize+0x1d4>
 801ad14:	4622      	mov	r2, r4
 801ad16:	4649      	mov	r1, r9
 801ad18:	4618      	mov	r0, r3
 801ad1a:	f003 fa31 	bl	801e180 <memset>
 801ad1e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ad20:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801ad24:	f04f 0800 	mov.w	r8, #0
 801ad28:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801ad2c:	f8c5 800c 	str.w	r8, [r5, #12]
 801ad30:	f8c4 800c 	str.w	r8, [r4, #12]
 801ad34:	2e00      	cmp	r6, #0
 801ad36:	f040 80a4 	bne.w	801ae82 <rcl_wait_set_resize+0x1ea>
 801ad3a:	68a8      	ldr	r0, [r5, #8]
 801ad3c:	b128      	cbz	r0, 801ad4a <rcl_wait_set_resize+0xb2>
 801ad3e:	4649      	mov	r1, r9
 801ad40:	4790      	blx	r2
 801ad42:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ad44:	60ae      	str	r6, [r5, #8]
 801ad46:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801ad4a:	f04f 0800 	mov.w	r8, #0
 801ad4e:	19f6      	adds	r6, r6, r7
 801ad50:	f8c4 8010 	str.w	r8, [r4, #16]
 801ad54:	f040 80ac 	bne.w	801aeb0 <rcl_wait_set_resize+0x218>
 801ad58:	6960      	ldr	r0, [r4, #20]
 801ad5a:	b130      	cbz	r0, 801ad6a <rcl_wait_set_resize+0xd2>
 801ad5c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801ad5e:	4649      	mov	r1, r9
 801ad60:	4798      	blx	r3
 801ad62:	6166      	str	r6, [r4, #20]
 801ad64:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ad66:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801ad6a:	2600      	movs	r6, #0
 801ad6c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801ad70:	616e      	str	r6, [r5, #20]
 801ad72:	6426      	str	r6, [r4, #64]	@ 0x40
 801ad74:	2f00      	cmp	r7, #0
 801ad76:	f040 80ad 	bne.w	801aed4 <rcl_wait_set_resize+0x23c>
 801ad7a:	6928      	ldr	r0, [r5, #16]
 801ad7c:	b138      	cbz	r0, 801ad8e <rcl_wait_set_resize+0xf6>
 801ad7e:	4649      	mov	r1, r9
 801ad80:	47d0      	blx	sl
 801ad82:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ad84:	612f      	str	r7, [r5, #16]
 801ad86:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801ad8a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801ad8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ad90:	2600      	movs	r6, #0
 801ad92:	61ee      	str	r6, [r5, #28]
 801ad94:	61a6      	str	r6, [r4, #24]
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	f040 80af 	bne.w	801aefa <rcl_wait_set_resize+0x262>
 801ad9c:	69a8      	ldr	r0, [r5, #24]
 801ad9e:	b120      	cbz	r0, 801adaa <rcl_wait_set_resize+0x112>
 801ada0:	4649      	mov	r1, r9
 801ada2:	47d0      	blx	sl
 801ada4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ada6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ada8:	61ab      	str	r3, [r5, #24]
 801adaa:	6a20      	ldr	r0, [r4, #32]
 801adac:	b128      	cbz	r0, 801adba <rcl_wait_set_resize+0x122>
 801adae:	4649      	mov	r1, r9
 801adb0:	47d0      	blx	sl
 801adb2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801adb4:	2300      	movs	r3, #0
 801adb6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801adba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801adbc:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801adbe:	2600      	movs	r6, #0
 801adc0:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801adc4:	626e      	str	r6, [r5, #36]	@ 0x24
 801adc6:	6266      	str	r6, [r4, #36]	@ 0x24
 801adc8:	2b00      	cmp	r3, #0
 801adca:	f000 80b6 	beq.w	801af3a <rcl_wait_set_resize+0x2a2>
 801adce:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801add2:	6a28      	ldr	r0, [r5, #32]
 801add4:	463a      	mov	r2, r7
 801add6:	4651      	mov	r1, sl
 801add8:	47c8      	blx	r9
 801adda:	6228      	str	r0, [r5, #32]
 801addc:	2800      	cmp	r0, #0
 801adde:	d04c      	beq.n	801ae7a <rcl_wait_set_resize+0x1e2>
 801ade0:	4652      	mov	r2, sl
 801ade2:	4631      	mov	r1, r6
 801ade4:	f003 f9cc 	bl	801e180 <memset>
 801ade8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801adea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801adec:	626b      	str	r3, [r5, #36]	@ 0x24
 801adee:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801adf0:	62a6      	str	r6, [r4, #40]	@ 0x28
 801adf2:	463a      	mov	r2, r7
 801adf4:	4651      	mov	r1, sl
 801adf6:	47c8      	blx	r9
 801adf8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801adfa:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801adfc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801adfe:	2c00      	cmp	r4, #0
 801ae00:	f000 80f0 	beq.w	801afe4 <rcl_wait_set_resize+0x34c>
 801ae04:	4620      	mov	r0, r4
 801ae06:	4652      	mov	r2, sl
 801ae08:	4631      	mov	r1, r6
 801ae0a:	f003 f9b9 	bl	801e180 <memset>
 801ae0e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ae10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae12:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801ae14:	2600      	movs	r6, #0
 801ae16:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801ae1a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801ae1c:	6326      	str	r6, [r4, #48]	@ 0x30
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	f040 809d 	bne.w	801af5e <rcl_wait_set_resize+0x2c6>
 801ae24:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801ae26:	b120      	cbz	r0, 801ae32 <rcl_wait_set_resize+0x19a>
 801ae28:	4639      	mov	r1, r7
 801ae2a:	47c0      	blx	r8
 801ae2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae2e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ae30:	62ab      	str	r3, [r5, #40]	@ 0x28
 801ae32:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801ae34:	b310      	cbz	r0, 801ae7c <rcl_wait_set_resize+0x1e4>
 801ae36:	4639      	mov	r1, r7
 801ae38:	47c0      	blx	r8
 801ae3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ae3c:	2000      	movs	r0, #0
 801ae3e:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801ae42:	b003      	add	sp, #12
 801ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae48:	6800      	ldr	r0, [r0, #0]
 801ae4a:	b120      	cbz	r0, 801ae56 <rcl_wait_set_resize+0x1be>
 801ae4c:	4651      	mov	r1, sl
 801ae4e:	47d8      	blx	fp
 801ae50:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ae52:	f8c5 8000 	str.w	r8, [r5]
 801ae56:	68a0      	ldr	r0, [r4, #8]
 801ae58:	2800      	cmp	r0, #0
 801ae5a:	f43f af61 	beq.w	801ad20 <rcl_wait_set_resize+0x88>
 801ae5e:	4651      	mov	r1, sl
 801ae60:	47d8      	blx	fp
 801ae62:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ae64:	2300      	movs	r3, #0
 801ae66:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801ae6a:	e759      	b.n	801ad20 <rcl_wait_set_resize+0x88>
 801ae6c:	6828      	ldr	r0, [r5, #0]
 801ae6e:	9301      	str	r3, [sp, #4]
 801ae70:	4651      	mov	r1, sl
 801ae72:	47d8      	blx	fp
 801ae74:	9b01      	ldr	r3, [sp, #4]
 801ae76:	e9c5 3300 	strd	r3, r3, [r5]
 801ae7a:	200a      	movs	r0, #10
 801ae7c:	b003      	add	sp, #12
 801ae7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae82:	00b4      	lsls	r4, r6, #2
 801ae84:	68a8      	ldr	r0, [r5, #8]
 801ae86:	464a      	mov	r2, r9
 801ae88:	4621      	mov	r1, r4
 801ae8a:	4798      	blx	r3
 801ae8c:	60a8      	str	r0, [r5, #8]
 801ae8e:	2800      	cmp	r0, #0
 801ae90:	d0f3      	beq.n	801ae7a <rcl_wait_set_resize+0x1e2>
 801ae92:	4622      	mov	r2, r4
 801ae94:	4641      	mov	r1, r8
 801ae96:	f003 f973 	bl	801e180 <memset>
 801ae9a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ae9c:	60ee      	str	r6, [r5, #12]
 801ae9e:	f04f 0800 	mov.w	r8, #0
 801aea2:	19f6      	adds	r6, r6, r7
 801aea4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801aea8:	f8c4 8010 	str.w	r8, [r4, #16]
 801aeac:	f43f af54 	beq.w	801ad58 <rcl_wait_set_resize+0xc0>
 801aeb0:	00b6      	lsls	r6, r6, #2
 801aeb2:	464a      	mov	r2, r9
 801aeb4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801aeb6:	6960      	ldr	r0, [r4, #20]
 801aeb8:	4631      	mov	r1, r6
 801aeba:	4798      	blx	r3
 801aebc:	4681      	mov	r9, r0
 801aebe:	6160      	str	r0, [r4, #20]
 801aec0:	2800      	cmp	r0, #0
 801aec2:	d076      	beq.n	801afb2 <rcl_wait_set_resize+0x31a>
 801aec4:	4632      	mov	r2, r6
 801aec6:	4641      	mov	r1, r8
 801aec8:	f003 f95a 	bl	801e180 <memset>
 801aecc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801aece:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801aed2:	e74a      	b.n	801ad6a <rcl_wait_set_resize+0xd2>
 801aed4:	00bc      	lsls	r4, r7, #2
 801aed6:	6928      	ldr	r0, [r5, #16]
 801aed8:	464a      	mov	r2, r9
 801aeda:	4621      	mov	r1, r4
 801aedc:	47c0      	blx	r8
 801aede:	6128      	str	r0, [r5, #16]
 801aee0:	2800      	cmp	r0, #0
 801aee2:	d0ca      	beq.n	801ae7a <rcl_wait_set_resize+0x1e2>
 801aee4:	4622      	mov	r2, r4
 801aee6:	4631      	mov	r1, r6
 801aee8:	f003 f94a 	bl	801e180 <memset>
 801aeec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801aeee:	616f      	str	r7, [r5, #20]
 801aef0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801aef4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801aef8:	e749      	b.n	801ad8e <rcl_wait_set_resize+0xf6>
 801aefa:	009c      	lsls	r4, r3, #2
 801aefc:	69a8      	ldr	r0, [r5, #24]
 801aefe:	464a      	mov	r2, r9
 801af00:	4621      	mov	r1, r4
 801af02:	47c0      	blx	r8
 801af04:	61a8      	str	r0, [r5, #24]
 801af06:	2800      	cmp	r0, #0
 801af08:	d0b7      	beq.n	801ae7a <rcl_wait_set_resize+0x1e2>
 801af0a:	4622      	mov	r2, r4
 801af0c:	4631      	mov	r1, r6
 801af0e:	f003 f937 	bl	801e180 <memset>
 801af12:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801af14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801af16:	61eb      	str	r3, [r5, #28]
 801af18:	6a38      	ldr	r0, [r7, #32]
 801af1a:	61fe      	str	r6, [r7, #28]
 801af1c:	464a      	mov	r2, r9
 801af1e:	4621      	mov	r1, r4
 801af20:	47c0      	blx	r8
 801af22:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801af24:	6238      	str	r0, [r7, #32]
 801af26:	6a1f      	ldr	r7, [r3, #32]
 801af28:	2f00      	cmp	r7, #0
 801af2a:	d054      	beq.n	801afd6 <rcl_wait_set_resize+0x33e>
 801af2c:	4622      	mov	r2, r4
 801af2e:	4631      	mov	r1, r6
 801af30:	4638      	mov	r0, r7
 801af32:	f003 f925 	bl	801e180 <memset>
 801af36:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801af38:	e73f      	b.n	801adba <rcl_wait_set_resize+0x122>
 801af3a:	6a28      	ldr	r0, [r5, #32]
 801af3c:	b120      	cbz	r0, 801af48 <rcl_wait_set_resize+0x2b0>
 801af3e:	4639      	mov	r1, r7
 801af40:	47c0      	blx	r8
 801af42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801af44:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801af46:	622b      	str	r3, [r5, #32]
 801af48:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801af4a:	2800      	cmp	r0, #0
 801af4c:	f43f af60 	beq.w	801ae10 <rcl_wait_set_resize+0x178>
 801af50:	4639      	mov	r1, r7
 801af52:	47c0      	blx	r8
 801af54:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801af56:	2300      	movs	r3, #0
 801af58:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801af5c:	e758      	b.n	801ae10 <rcl_wait_set_resize+0x178>
 801af5e:	009c      	lsls	r4, r3, #2
 801af60:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801af62:	463a      	mov	r2, r7
 801af64:	4621      	mov	r1, r4
 801af66:	47c8      	blx	r9
 801af68:	62a8      	str	r0, [r5, #40]	@ 0x28
 801af6a:	2800      	cmp	r0, #0
 801af6c:	d085      	beq.n	801ae7a <rcl_wait_set_resize+0x1e2>
 801af6e:	4622      	mov	r2, r4
 801af70:	4631      	mov	r1, r6
 801af72:	f003 f905 	bl	801e180 <memset>
 801af76:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801af7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801af7c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801af7e:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801af82:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801af86:	463a      	mov	r2, r7
 801af88:	4621      	mov	r1, r4
 801af8a:	47c8      	blx	r9
 801af8c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801af8e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801af92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801af94:	b36b      	cbz	r3, 801aff2 <rcl_wait_set_resize+0x35a>
 801af96:	4622      	mov	r2, r4
 801af98:	4631      	mov	r1, r6
 801af9a:	4618      	mov	r0, r3
 801af9c:	f003 f8f0 	bl	801e180 <memset>
 801afa0:	4630      	mov	r0, r6
 801afa2:	b003      	add	sp, #12
 801afa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afa8:	200b      	movs	r0, #11
 801afaa:	4770      	bx	lr
 801afac:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801afb0:	e764      	b.n	801ae7c <rcl_wait_set_resize+0x1e4>
 801afb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801afb4:	68a8      	ldr	r0, [r5, #8]
 801afb6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801afb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801afba:	4798      	blx	r3
 801afbc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801afbe:	6928      	ldr	r0, [r5, #16]
 801afc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801afc2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801afc4:	f8c5 900c 	str.w	r9, [r5, #12]
 801afc8:	f8c5 9008 	str.w	r9, [r5, #8]
 801afcc:	4790      	blx	r2
 801afce:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801afd2:	200a      	movs	r0, #10
 801afd4:	e752      	b.n	801ae7c <rcl_wait_set_resize+0x1e4>
 801afd6:	69a8      	ldr	r0, [r5, #24]
 801afd8:	4649      	mov	r1, r9
 801afda:	47d0      	blx	sl
 801afdc:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801afe0:	200a      	movs	r0, #10
 801afe2:	e74b      	b.n	801ae7c <rcl_wait_set_resize+0x1e4>
 801afe4:	6a28      	ldr	r0, [r5, #32]
 801afe6:	4639      	mov	r1, r7
 801afe8:	47c0      	blx	r8
 801afea:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801afee:	200a      	movs	r0, #10
 801aff0:	e744      	b.n	801ae7c <rcl_wait_set_resize+0x1e4>
 801aff2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801aff4:	9301      	str	r3, [sp, #4]
 801aff6:	4639      	mov	r1, r7
 801aff8:	47c0      	blx	r8
 801affa:	9b01      	ldr	r3, [sp, #4]
 801affc:	200a      	movs	r0, #10
 801affe:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801b002:	e73b      	b.n	801ae7c <rcl_wait_set_resize+0x1e4>

0801b004 <rcl_wait_set_init>:
 801b004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b008:	b084      	sub	sp, #16
 801b00a:	4604      	mov	r4, r0
 801b00c:	a810      	add	r0, sp, #64	@ 0x40
 801b00e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801b012:	460f      	mov	r7, r1
 801b014:	4690      	mov	r8, r2
 801b016:	4699      	mov	r9, r3
 801b018:	f7f6 ff3c 	bl	8011e94 <rcutils_allocator_is_valid>
 801b01c:	2800      	cmp	r0, #0
 801b01e:	d06b      	beq.n	801b0f8 <rcl_wait_set_init+0xf4>
 801b020:	2c00      	cmp	r4, #0
 801b022:	d069      	beq.n	801b0f8 <rcl_wait_set_init+0xf4>
 801b024:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801b026:	b125      	cbz	r5, 801b032 <rcl_wait_set_init+0x2e>
 801b028:	2564      	movs	r5, #100	@ 0x64
 801b02a:	4628      	mov	r0, r5
 801b02c:	b004      	add	sp, #16
 801b02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b032:	f1ba 0f00 	cmp.w	sl, #0
 801b036:	d05f      	beq.n	801b0f8 <rcl_wait_set_init+0xf4>
 801b038:	4650      	mov	r0, sl
 801b03a:	f7fe f963 	bl	8019304 <rcl_context_is_valid>
 801b03e:	2800      	cmp	r0, #0
 801b040:	d067      	beq.n	801b112 <rcl_wait_set_init+0x10e>
 801b042:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b044:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801b046:	205c      	movs	r0, #92	@ 0x5c
 801b048:	4798      	blx	r3
 801b04a:	6320      	str	r0, [r4, #48]	@ 0x30
 801b04c:	2800      	cmp	r0, #0
 801b04e:	d062      	beq.n	801b116 <rcl_wait_set_init+0x112>
 801b050:	4629      	mov	r1, r5
 801b052:	225c      	movs	r2, #92	@ 0x5c
 801b054:	f003 f894 	bl	801e180 <memset>
 801b058:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801b05c:	eb03 0e02 	add.w	lr, r3, r2
 801b060:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b062:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801b064:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801b068:	449e      	add	lr, r3
 801b06a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b06e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801b072:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801b076:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801b07a:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801b07e:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801b082:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801b086:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801b08a:	f8da a000 	ldr.w	sl, [sl]
 801b08e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b090:	44c6      	add	lr, r8
 801b092:	f8dc 3000 	ldr.w	r3, [ip]
 801b096:	602b      	str	r3, [r5, #0]
 801b098:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 801b09c:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801b0a0:	f001 fc18 	bl	801c8d4 <rmw_create_wait_set>
 801b0a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b0a6:	63f0      	str	r0, [r6, #60]	@ 0x3c
 801b0a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801b0aa:	b350      	cbz	r0, 801b102 <rcl_wait_set_init+0xfe>
 801b0ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b0ae:	9302      	str	r3, [sp, #8]
 801b0b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b0b2:	9301      	str	r3, [sp, #4]
 801b0b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0b6:	9300      	str	r3, [sp, #0]
 801b0b8:	4642      	mov	r2, r8
 801b0ba:	464b      	mov	r3, r9
 801b0bc:	4639      	mov	r1, r7
 801b0be:	4620      	mov	r0, r4
 801b0c0:	f7ff fdea 	bl	801ac98 <rcl_wait_set_resize>
 801b0c4:	4605      	mov	r5, r0
 801b0c6:	2800      	cmp	r0, #0
 801b0c8:	d0af      	beq.n	801b02a <rcl_wait_set_init+0x26>
 801b0ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b0cc:	bb2b      	cbnz	r3, 801b11a <rcl_wait_set_init+0x116>
 801b0ce:	2600      	movs	r6, #0
 801b0d0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801b0d4:	9600      	str	r6, [sp, #0]
 801b0d6:	4633      	mov	r3, r6
 801b0d8:	4632      	mov	r2, r6
 801b0da:	4631      	mov	r1, r6
 801b0dc:	4620      	mov	r0, r4
 801b0de:	f7ff fddb 	bl	801ac98 <rcl_wait_set_resize>
 801b0e2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801b0e4:	2800      	cmp	r0, #0
 801b0e6:	d0a0      	beq.n	801b02a <rcl_wait_set_init+0x26>
 801b0e8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801b0ea:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801b0ec:	4798      	blx	r3
 801b0ee:	4628      	mov	r0, r5
 801b0f0:	6326      	str	r6, [r4, #48]	@ 0x30
 801b0f2:	b004      	add	sp, #16
 801b0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0f8:	250b      	movs	r5, #11
 801b0fa:	4628      	mov	r0, r5
 801b0fc:	b004      	add	sp, #16
 801b0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b102:	2501      	movs	r5, #1
 801b104:	f001 fbf0 	bl	801c8e8 <rmw_destroy_wait_set>
 801b108:	2800      	cmp	r0, #0
 801b10a:	bf18      	it	ne
 801b10c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801b110:	e7dd      	b.n	801b0ce <rcl_wait_set_init+0xca>
 801b112:	2565      	movs	r5, #101	@ 0x65
 801b114:	e789      	b.n	801b02a <rcl_wait_set_init+0x26>
 801b116:	250a      	movs	r5, #10
 801b118:	e787      	b.n	801b02a <rcl_wait_set_init+0x26>
 801b11a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801b11c:	e7f2      	b.n	801b104 <rcl_wait_set_init+0x100>
 801b11e:	bf00      	nop

0801b120 <rcl_wait_set_add_guard_condition>:
 801b120:	b318      	cbz	r0, 801b16a <rcl_wait_set_add_guard_condition+0x4a>
 801b122:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b124:	b570      	push	{r4, r5, r6, lr}
 801b126:	4604      	mov	r4, r0
 801b128:	b30b      	cbz	r3, 801b16e <rcl_wait_set_add_guard_condition+0x4e>
 801b12a:	b319      	cbz	r1, 801b174 <rcl_wait_set_add_guard_condition+0x54>
 801b12c:	68dd      	ldr	r5, [r3, #12]
 801b12e:	68c0      	ldr	r0, [r0, #12]
 801b130:	4285      	cmp	r5, r0
 801b132:	d217      	bcs.n	801b164 <rcl_wait_set_add_guard_condition+0x44>
 801b134:	68a0      	ldr	r0, [r4, #8]
 801b136:	1c6e      	adds	r6, r5, #1
 801b138:	60de      	str	r6, [r3, #12]
 801b13a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801b13e:	b102      	cbz	r2, 801b142 <rcl_wait_set_add_guard_condition+0x22>
 801b140:	6015      	str	r5, [r2, #0]
 801b142:	4608      	mov	r0, r1
 801b144:	f7fe fbb0 	bl	80198a8 <rcl_guard_condition_get_rmw_handle>
 801b148:	b150      	cbz	r0, 801b160 <rcl_wait_set_add_guard_condition+0x40>
 801b14a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b14c:	6842      	ldr	r2, [r0, #4]
 801b14e:	695b      	ldr	r3, [r3, #20]
 801b150:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b154:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801b156:	6913      	ldr	r3, [r2, #16]
 801b158:	3301      	adds	r3, #1
 801b15a:	2000      	movs	r0, #0
 801b15c:	6113      	str	r3, [r2, #16]
 801b15e:	bd70      	pop	{r4, r5, r6, pc}
 801b160:	2001      	movs	r0, #1
 801b162:	bd70      	pop	{r4, r5, r6, pc}
 801b164:	f240 3086 	movw	r0, #902	@ 0x386
 801b168:	bd70      	pop	{r4, r5, r6, pc}
 801b16a:	200b      	movs	r0, #11
 801b16c:	4770      	bx	lr
 801b16e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b172:	bd70      	pop	{r4, r5, r6, pc}
 801b174:	200b      	movs	r0, #11
 801b176:	bd70      	pop	{r4, r5, r6, pc}

0801b178 <rcl_wait_set_add_timer>:
 801b178:	b328      	cbz	r0, 801b1c6 <rcl_wait_set_add_timer+0x4e>
 801b17a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b17c:	b570      	push	{r4, r5, r6, lr}
 801b17e:	4604      	mov	r4, r0
 801b180:	b31b      	cbz	r3, 801b1ca <rcl_wait_set_add_timer+0x52>
 801b182:	b329      	cbz	r1, 801b1d0 <rcl_wait_set_add_timer+0x58>
 801b184:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801b186:	6965      	ldr	r5, [r4, #20]
 801b188:	42a8      	cmp	r0, r5
 801b18a:	d219      	bcs.n	801b1c0 <rcl_wait_set_add_timer+0x48>
 801b18c:	6925      	ldr	r5, [r4, #16]
 801b18e:	1c46      	adds	r6, r0, #1
 801b190:	641e      	str	r6, [r3, #64]	@ 0x40
 801b192:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801b196:	b102      	cbz	r2, 801b19a <rcl_wait_set_add_timer+0x22>
 801b198:	6010      	str	r0, [r2, #0]
 801b19a:	4608      	mov	r0, r1
 801b19c:	f7ff fad4 	bl	801a748 <rcl_timer_get_guard_condition>
 801b1a0:	b168      	cbz	r0, 801b1be <rcl_wait_set_add_timer+0x46>
 801b1a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801b1a4:	68e3      	ldr	r3, [r4, #12]
 801b1a6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801b1a8:	3b01      	subs	r3, #1
 801b1aa:	441d      	add	r5, r3
 801b1ac:	f7fe fb7c 	bl	80198a8 <rcl_guard_condition_get_rmw_handle>
 801b1b0:	b180      	cbz	r0, 801b1d4 <rcl_wait_set_add_timer+0x5c>
 801b1b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b1b4:	6842      	ldr	r2, [r0, #4]
 801b1b6:	695b      	ldr	r3, [r3, #20]
 801b1b8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b1bc:	2000      	movs	r0, #0
 801b1be:	bd70      	pop	{r4, r5, r6, pc}
 801b1c0:	f240 3086 	movw	r0, #902	@ 0x386
 801b1c4:	bd70      	pop	{r4, r5, r6, pc}
 801b1c6:	200b      	movs	r0, #11
 801b1c8:	4770      	bx	lr
 801b1ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b1ce:	bd70      	pop	{r4, r5, r6, pc}
 801b1d0:	200b      	movs	r0, #11
 801b1d2:	bd70      	pop	{r4, r5, r6, pc}
 801b1d4:	2001      	movs	r0, #1
 801b1d6:	bd70      	pop	{r4, r5, r6, pc}

0801b1d8 <rcl_wait_set_add_client>:
 801b1d8:	b318      	cbz	r0, 801b222 <rcl_wait_set_add_client+0x4a>
 801b1da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b1dc:	b570      	push	{r4, r5, r6, lr}
 801b1de:	4604      	mov	r4, r0
 801b1e0:	b30b      	cbz	r3, 801b226 <rcl_wait_set_add_client+0x4e>
 801b1e2:	b319      	cbz	r1, 801b22c <rcl_wait_set_add_client+0x54>
 801b1e4:	699d      	ldr	r5, [r3, #24]
 801b1e6:	69c0      	ldr	r0, [r0, #28]
 801b1e8:	4285      	cmp	r5, r0
 801b1ea:	d217      	bcs.n	801b21c <rcl_wait_set_add_client+0x44>
 801b1ec:	69a0      	ldr	r0, [r4, #24]
 801b1ee:	1c6e      	adds	r6, r5, #1
 801b1f0:	619e      	str	r6, [r3, #24]
 801b1f2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801b1f6:	b102      	cbz	r2, 801b1fa <rcl_wait_set_add_client+0x22>
 801b1f8:	6015      	str	r5, [r2, #0]
 801b1fa:	4608      	mov	r0, r1
 801b1fc:	f7f5 f954 	bl	80104a8 <rcl_client_get_rmw_handle>
 801b200:	b150      	cbz	r0, 801b218 <rcl_wait_set_add_client+0x40>
 801b202:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b204:	6842      	ldr	r2, [r0, #4]
 801b206:	6a1b      	ldr	r3, [r3, #32]
 801b208:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b20c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801b20e:	69d3      	ldr	r3, [r2, #28]
 801b210:	3301      	adds	r3, #1
 801b212:	2000      	movs	r0, #0
 801b214:	61d3      	str	r3, [r2, #28]
 801b216:	bd70      	pop	{r4, r5, r6, pc}
 801b218:	2001      	movs	r0, #1
 801b21a:	bd70      	pop	{r4, r5, r6, pc}
 801b21c:	f240 3086 	movw	r0, #902	@ 0x386
 801b220:	bd70      	pop	{r4, r5, r6, pc}
 801b222:	200b      	movs	r0, #11
 801b224:	4770      	bx	lr
 801b226:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b22a:	bd70      	pop	{r4, r5, r6, pc}
 801b22c:	200b      	movs	r0, #11
 801b22e:	bd70      	pop	{r4, r5, r6, pc}

0801b230 <rcl_wait_set_add_service>:
 801b230:	b318      	cbz	r0, 801b27a <rcl_wait_set_add_service+0x4a>
 801b232:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801b234:	b570      	push	{r4, r5, r6, lr}
 801b236:	4604      	mov	r4, r0
 801b238:	b30b      	cbz	r3, 801b27e <rcl_wait_set_add_service+0x4e>
 801b23a:	b319      	cbz	r1, 801b284 <rcl_wait_set_add_service+0x54>
 801b23c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801b23e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801b240:	4285      	cmp	r5, r0
 801b242:	d217      	bcs.n	801b274 <rcl_wait_set_add_service+0x44>
 801b244:	6a20      	ldr	r0, [r4, #32]
 801b246:	1c6e      	adds	r6, r5, #1
 801b248:	625e      	str	r6, [r3, #36]	@ 0x24
 801b24a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801b24e:	b102      	cbz	r2, 801b252 <rcl_wait_set_add_service+0x22>
 801b250:	6015      	str	r5, [r2, #0]
 801b252:	4608      	mov	r0, r1
 801b254:	f7fe fe02 	bl	8019e5c <rcl_service_get_rmw_handle>
 801b258:	b150      	cbz	r0, 801b270 <rcl_wait_set_add_service+0x40>
 801b25a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b25c:	6842      	ldr	r2, [r0, #4]
 801b25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b260:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b264:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801b266:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801b268:	3301      	adds	r3, #1
 801b26a:	2000      	movs	r0, #0
 801b26c:	6293      	str	r3, [r2, #40]	@ 0x28
 801b26e:	bd70      	pop	{r4, r5, r6, pc}
 801b270:	2001      	movs	r0, #1
 801b272:	bd70      	pop	{r4, r5, r6, pc}
 801b274:	f240 3086 	movw	r0, #902	@ 0x386
 801b278:	bd70      	pop	{r4, r5, r6, pc}
 801b27a:	200b      	movs	r0, #11
 801b27c:	4770      	bx	lr
 801b27e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b282:	bd70      	pop	{r4, r5, r6, pc}
 801b284:	200b      	movs	r0, #11
 801b286:	bd70      	pop	{r4, r5, r6, pc}

0801b288 <rcl_wait>:
 801b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b28c:	ed2d 8b02 	vpush	{d8}
 801b290:	b08d      	sub	sp, #52	@ 0x34
 801b292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b296:	2800      	cmp	r0, #0
 801b298:	f000 8143 	beq.w	801b522 <rcl_wait+0x29a>
 801b29c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801b29e:	4605      	mov	r5, r0
 801b2a0:	2e00      	cmp	r6, #0
 801b2a2:	f000 8112 	beq.w	801b4ca <rcl_wait+0x242>
 801b2a6:	6843      	ldr	r3, [r0, #4]
 801b2a8:	b983      	cbnz	r3, 801b2cc <rcl_wait+0x44>
 801b2aa:	68eb      	ldr	r3, [r5, #12]
 801b2ac:	b973      	cbnz	r3, 801b2cc <rcl_wait+0x44>
 801b2ae:	696b      	ldr	r3, [r5, #20]
 801b2b0:	b963      	cbnz	r3, 801b2cc <rcl_wait+0x44>
 801b2b2:	69eb      	ldr	r3, [r5, #28]
 801b2b4:	b953      	cbnz	r3, 801b2cc <rcl_wait+0x44>
 801b2b6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801b2b8:	b943      	cbnz	r3, 801b2cc <rcl_wait+0x44>
 801b2ba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801b2bc:	b933      	cbnz	r3, 801b2cc <rcl_wait+0x44>
 801b2be:	f240 3085 	movw	r0, #901	@ 0x385
 801b2c2:	b00d      	add	sp, #52	@ 0x34
 801b2c4:	ecbd 8b02 	vpop	{d8}
 801b2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2cc:	9b04      	ldr	r3, [sp, #16]
 801b2ce:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801b2d0:	2b01      	cmp	r3, #1
 801b2d2:	9b05      	ldr	r3, [sp, #20]
 801b2d4:	f173 0300 	sbcs.w	r3, r3, #0
 801b2d8:	f2c0 80f0 	blt.w	801b4bc <rcl_wait+0x234>
 801b2dc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801b2e0:	4643      	mov	r3, r8
 801b2e2:	2a00      	cmp	r2, #0
 801b2e4:	f000 8133 	beq.w	801b54e <rcl_wait+0x2c6>
 801b2e8:	2400      	movs	r4, #0
 801b2ea:	4613      	mov	r3, r2
 801b2ec:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 801b560 <rcl_wait+0x2d8>
 801b2f0:	46a2      	mov	sl, r4
 801b2f2:	46a3      	mov	fp, r4
 801b2f4:	f240 3921 	movw	r9, #801	@ 0x321
 801b2f8:	4632      	mov	r2, r6
 801b2fa:	e014      	b.n	801b326 <rcl_wait+0x9e>
 801b2fc:	2800      	cmp	r0, #0
 801b2fe:	d1e0      	bne.n	801b2c2 <rcl_wait+0x3a>
 801b300:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b304:	4542      	cmp	r2, r8
 801b306:	eb73 0107 	sbcs.w	r1, r3, r7
 801b30a:	da03      	bge.n	801b314 <rcl_wait+0x8c>
 801b30c:	4690      	mov	r8, r2
 801b30e:	461f      	mov	r7, r3
 801b310:	f04f 0b01 	mov.w	fp, #1
 801b314:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801b316:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801b318:	3401      	adds	r4, #1
 801b31a:	f14a 0a00 	adc.w	sl, sl, #0
 801b31e:	429c      	cmp	r4, r3
 801b320:	f17a 0100 	sbcs.w	r1, sl, #0
 801b324:	d228      	bcs.n	801b378 <rcl_wait+0xf0>
 801b326:	6928      	ldr	r0, [r5, #16]
 801b328:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801b32c:	a908      	add	r1, sp, #32
 801b32e:	00a6      	lsls	r6, r4, #2
 801b330:	2800      	cmp	r0, #0
 801b332:	d0f1      	beq.n	801b318 <rcl_wait+0x90>
 801b334:	68eb      	ldr	r3, [r5, #12]
 801b336:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801b33a:	4423      	add	r3, r4
 801b33c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801b340:	f1be 0f00 	cmp.w	lr, #0
 801b344:	d006      	beq.n	801b354 <rcl_wait+0xcc>
 801b346:	6913      	ldr	r3, [r2, #16]
 801b348:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801b34c:	3301      	adds	r3, #1
 801b34e:	6113      	str	r3, [r2, #16]
 801b350:	692b      	ldr	r3, [r5, #16]
 801b352:	5998      	ldr	r0, [r3, r6]
 801b354:	ed8d 8b08 	vstr	d8, [sp, #32]
 801b358:	f7ff f9c4 	bl	801a6e4 <rcl_timer_get_time_until_next_call>
 801b35c:	4548      	cmp	r0, r9
 801b35e:	d1cd      	bne.n	801b2fc <rcl_wait+0x74>
 801b360:	692b      	ldr	r3, [r5, #16]
 801b362:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801b364:	2100      	movs	r1, #0
 801b366:	5199      	str	r1, [r3, r6]
 801b368:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801b36a:	3401      	adds	r4, #1
 801b36c:	f14a 0a00 	adc.w	sl, sl, #0
 801b370:	429c      	cmp	r4, r3
 801b372:	f17a 0100 	sbcs.w	r1, sl, #0
 801b376:	d3d6      	bcc.n	801b326 <rcl_wait+0x9e>
 801b378:	4616      	mov	r6, r2
 801b37a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801b37e:	4313      	orrs	r3, r2
 801b380:	46d9      	mov	r9, fp
 801b382:	f040 80a9 	bne.w	801b4d8 <rcl_wait+0x250>
 801b386:	2300      	movs	r3, #0
 801b388:	2200      	movs	r2, #0
 801b38a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b38e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801b392:	ab08      	add	r3, sp, #32
 801b394:	9302      	str	r3, [sp, #8]
 801b396:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801b398:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801b39c:	e9cd 3200 	strd	r3, r2, [sp]
 801b3a0:	f106 0110 	add.w	r1, r6, #16
 801b3a4:	f106 031c 	add.w	r3, r6, #28
 801b3a8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801b3ac:	1d30      	adds	r0, r6, #4
 801b3ae:	f001 f919 	bl	801c5e4 <rmw_wait>
 801b3b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b3b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801b3b6:	4680      	mov	r8, r0
 801b3b8:	b1ca      	cbz	r2, 801b3ee <rcl_wait+0x166>
 801b3ba:	2400      	movs	r4, #0
 801b3bc:	4627      	mov	r7, r4
 801b3be:	692a      	ldr	r2, [r5, #16]
 801b3c0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801b3c4:	f10d 011f 	add.w	r1, sp, #31
 801b3c8:	00a6      	lsls	r6, r4, #2
 801b3ca:	b160      	cbz	r0, 801b3e6 <rcl_wait+0x15e>
 801b3cc:	f88d 701f 	strb.w	r7, [sp, #31]
 801b3d0:	f7ff f94e 	bl	801a670 <rcl_timer_is_ready>
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	f47f af74 	bne.w	801b2c2 <rcl_wait+0x3a>
 801b3da:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801b3de:	b90b      	cbnz	r3, 801b3e4 <rcl_wait+0x15c>
 801b3e0:	692a      	ldr	r2, [r5, #16]
 801b3e2:	5193      	str	r3, [r2, r6]
 801b3e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b3e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801b3e8:	3401      	adds	r4, #1
 801b3ea:	42a2      	cmp	r2, r4
 801b3ec:	d8e7      	bhi.n	801b3be <rcl_wait+0x136>
 801b3ee:	f038 0002 	bics.w	r0, r8, #2
 801b3f2:	f040 8090 	bne.w	801b516 <rcl_wait+0x28e>
 801b3f6:	686e      	ldr	r6, [r5, #4]
 801b3f8:	4602      	mov	r2, r0
 801b3fa:	b91e      	cbnz	r6, 801b404 <rcl_wait+0x17c>
 801b3fc:	e00d      	b.n	801b41a <rcl_wait+0x192>
 801b3fe:	3201      	adds	r2, #1
 801b400:	42b2      	cmp	r2, r6
 801b402:	d00a      	beq.n	801b41a <rcl_wait+0x192>
 801b404:	6899      	ldr	r1, [r3, #8]
 801b406:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b40a:	2900      	cmp	r1, #0
 801b40c:	d1f7      	bne.n	801b3fe <rcl_wait+0x176>
 801b40e:	682c      	ldr	r4, [r5, #0]
 801b410:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801b414:	3201      	adds	r2, #1
 801b416:	42b2      	cmp	r2, r6
 801b418:	d1f4      	bne.n	801b404 <rcl_wait+0x17c>
 801b41a:	68ee      	ldr	r6, [r5, #12]
 801b41c:	2200      	movs	r2, #0
 801b41e:	b91e      	cbnz	r6, 801b428 <rcl_wait+0x1a0>
 801b420:	e00d      	b.n	801b43e <rcl_wait+0x1b6>
 801b422:	3201      	adds	r2, #1
 801b424:	42b2      	cmp	r2, r6
 801b426:	d00a      	beq.n	801b43e <rcl_wait+0x1b6>
 801b428:	6959      	ldr	r1, [r3, #20]
 801b42a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b42e:	2900      	cmp	r1, #0
 801b430:	d1f7      	bne.n	801b422 <rcl_wait+0x19a>
 801b432:	68ac      	ldr	r4, [r5, #8]
 801b434:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801b438:	3201      	adds	r2, #1
 801b43a:	42b2      	cmp	r2, r6
 801b43c:	d1f4      	bne.n	801b428 <rcl_wait+0x1a0>
 801b43e:	69ee      	ldr	r6, [r5, #28]
 801b440:	2200      	movs	r2, #0
 801b442:	b91e      	cbnz	r6, 801b44c <rcl_wait+0x1c4>
 801b444:	e00d      	b.n	801b462 <rcl_wait+0x1da>
 801b446:	3201      	adds	r2, #1
 801b448:	42b2      	cmp	r2, r6
 801b44a:	d00a      	beq.n	801b462 <rcl_wait+0x1da>
 801b44c:	6a19      	ldr	r1, [r3, #32]
 801b44e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b452:	2900      	cmp	r1, #0
 801b454:	d1f7      	bne.n	801b446 <rcl_wait+0x1be>
 801b456:	69ac      	ldr	r4, [r5, #24]
 801b458:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801b45c:	3201      	adds	r2, #1
 801b45e:	42b2      	cmp	r2, r6
 801b460:	d1f4      	bne.n	801b44c <rcl_wait+0x1c4>
 801b462:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801b464:	2200      	movs	r2, #0
 801b466:	b91e      	cbnz	r6, 801b470 <rcl_wait+0x1e8>
 801b468:	e00d      	b.n	801b486 <rcl_wait+0x1fe>
 801b46a:	3201      	adds	r2, #1
 801b46c:	4296      	cmp	r6, r2
 801b46e:	d00a      	beq.n	801b486 <rcl_wait+0x1fe>
 801b470:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801b472:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b476:	2900      	cmp	r1, #0
 801b478:	d1f7      	bne.n	801b46a <rcl_wait+0x1e2>
 801b47a:	6a2c      	ldr	r4, [r5, #32]
 801b47c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801b480:	3201      	adds	r2, #1
 801b482:	4296      	cmp	r6, r2
 801b484:	d1f4      	bne.n	801b470 <rcl_wait+0x1e8>
 801b486:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 801b488:	2200      	movs	r2, #0
 801b48a:	b91e      	cbnz	r6, 801b494 <rcl_wait+0x20c>
 801b48c:	e00d      	b.n	801b4aa <rcl_wait+0x222>
 801b48e:	3201      	adds	r2, #1
 801b490:	42b2      	cmp	r2, r6
 801b492:	d00a      	beq.n	801b4aa <rcl_wait+0x222>
 801b494:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801b496:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b49a:	2900      	cmp	r1, #0
 801b49c:	d1f7      	bne.n	801b48e <rcl_wait+0x206>
 801b49e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 801b4a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801b4a4:	3201      	adds	r2, #1
 801b4a6:	42b2      	cmp	r2, r6
 801b4a8:	d1f4      	bne.n	801b494 <rcl_wait+0x20c>
 801b4aa:	f1b8 0f02 	cmp.w	r8, #2
 801b4ae:	f47f af08 	bne.w	801b2c2 <rcl_wait+0x3a>
 801b4b2:	464b      	mov	r3, r9
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	bf08      	it	eq
 801b4b8:	2002      	moveq	r0, #2
 801b4ba:	e702      	b.n	801b2c2 <rcl_wait+0x3a>
 801b4bc:	2a00      	cmp	r2, #0
 801b4be:	d03a      	beq.n	801b536 <rcl_wait+0x2ae>
 801b4c0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801b4c4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801b4c8:	e70e      	b.n	801b2e8 <rcl_wait+0x60>
 801b4ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b4ce:	b00d      	add	sp, #52	@ 0x34
 801b4d0:	ecbd 8b02 	vpop	{d8}
 801b4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4d8:	9b04      	ldr	r3, [sp, #16]
 801b4da:	2b01      	cmp	r3, #1
 801b4dc:	9b05      	ldr	r3, [sp, #20]
 801b4de:	f173 0300 	sbcs.w	r3, r3, #0
 801b4e2:	db24      	blt.n	801b52e <rcl_wait+0x2a6>
 801b4e4:	2f00      	cmp	r7, #0
 801b4e6:	bfbc      	itt	lt
 801b4e8:	f04f 0800 	movlt.w	r8, #0
 801b4ec:	4647      	movlt	r7, r8
 801b4ee:	a31e      	add	r3, pc, #120	@ (adr r3, 801b568 <rcl_wait+0x2e0>)
 801b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4f4:	4640      	mov	r0, r8
 801b4f6:	4639      	mov	r1, r7
 801b4f8:	f7e5 fbb6 	bl	8000c68 <__aeabi_ldivmod>
 801b4fc:	a31a      	add	r3, pc, #104	@ (adr r3, 801b568 <rcl_wait+0x2e0>)
 801b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b502:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b506:	4640      	mov	r0, r8
 801b508:	4639      	mov	r1, r7
 801b50a:	f7e5 fbad 	bl	8000c68 <__aeabi_ldivmod>
 801b50e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801b512:	ab08      	add	r3, sp, #32
 801b514:	e73e      	b.n	801b394 <rcl_wait+0x10c>
 801b516:	2001      	movs	r0, #1
 801b518:	b00d      	add	sp, #52	@ 0x34
 801b51a:	ecbd 8b02 	vpop	{d8}
 801b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b522:	200b      	movs	r0, #11
 801b524:	b00d      	add	sp, #52	@ 0x34
 801b526:	ecbd 8b02 	vpop	{d8}
 801b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b52e:	465b      	mov	r3, fp
 801b530:	2b00      	cmp	r3, #0
 801b532:	d1d7      	bne.n	801b4e4 <rcl_wait+0x25c>
 801b534:	e72e      	b.n	801b394 <rcl_wait+0x10c>
 801b536:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801b53a:	430b      	orrs	r3, r1
 801b53c:	bf08      	it	eq
 801b53e:	4691      	moveq	r9, r2
 801b540:	f43f af21 	beq.w	801b386 <rcl_wait+0xfe>
 801b544:	9b04      	ldr	r3, [sp, #16]
 801b546:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801b54a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801b54e:	2b01      	cmp	r3, #1
 801b550:	9b05      	ldr	r3, [sp, #20]
 801b552:	f173 0300 	sbcs.w	r3, r3, #0
 801b556:	f04f 0300 	mov.w	r3, #0
 801b55a:	4699      	mov	r9, r3
 801b55c:	dac2      	bge.n	801b4e4 <rcl_wait+0x25c>
 801b55e:	e719      	b.n	801b394 <rcl_wait+0x10c>
 801b560:	ffffffff 	.word	0xffffffff
 801b564:	7fffffff 	.word	0x7fffffff
 801b568:	3b9aca00 	.word	0x3b9aca00
 801b56c:	00000000 	.word	0x00000000

0801b570 <rcl_action_take_goal_response>:
 801b570:	2800      	cmp	r0, #0
 801b572:	d039      	beq.n	801b5e8 <rcl_action_take_goal_response+0x78>
 801b574:	b570      	push	{r4, r5, r6, lr}
 801b576:	4604      	mov	r4, r0
 801b578:	6800      	ldr	r0, [r0, #0]
 801b57a:	b380      	cbz	r0, 801b5de <rcl_action_take_goal_response+0x6e>
 801b57c:	460d      	mov	r5, r1
 801b57e:	4616      	mov	r6, r2
 801b580:	f7f5 f816 	bl	80105b0 <rcl_client_is_valid>
 801b584:	b330      	cbz	r0, 801b5d4 <rcl_action_take_goal_response+0x64>
 801b586:	6820      	ldr	r0, [r4, #0]
 801b588:	3004      	adds	r0, #4
 801b58a:	f7f5 f811 	bl	80105b0 <rcl_client_is_valid>
 801b58e:	b308      	cbz	r0, 801b5d4 <rcl_action_take_goal_response+0x64>
 801b590:	6820      	ldr	r0, [r4, #0]
 801b592:	3008      	adds	r0, #8
 801b594:	f7f5 f80c 	bl	80105b0 <rcl_client_is_valid>
 801b598:	b1e0      	cbz	r0, 801b5d4 <rcl_action_take_goal_response+0x64>
 801b59a:	6820      	ldr	r0, [r4, #0]
 801b59c:	300c      	adds	r0, #12
 801b59e:	f7fe fd23 	bl	8019fe8 <rcl_subscription_is_valid>
 801b5a2:	b1b8      	cbz	r0, 801b5d4 <rcl_action_take_goal_response+0x64>
 801b5a4:	6820      	ldr	r0, [r4, #0]
 801b5a6:	3010      	adds	r0, #16
 801b5a8:	f7fe fd1e 	bl	8019fe8 <rcl_subscription_is_valid>
 801b5ac:	b190      	cbz	r0, 801b5d4 <rcl_action_take_goal_response+0x64>
 801b5ae:	b1cd      	cbz	r5, 801b5e4 <rcl_action_take_goal_response+0x74>
 801b5b0:	b1c6      	cbz	r6, 801b5e4 <rcl_action_take_goal_response+0x74>
 801b5b2:	6820      	ldr	r0, [r4, #0]
 801b5b4:	4632      	mov	r2, r6
 801b5b6:	4629      	mov	r1, r5
 801b5b8:	f7f4 ffb2 	bl	8010520 <rcl_take_response>
 801b5bc:	b148      	cbz	r0, 801b5d2 <rcl_action_take_goal_response+0x62>
 801b5be:	280a      	cmp	r0, #10
 801b5c0:	d007      	beq.n	801b5d2 <rcl_action_take_goal_response+0x62>
 801b5c2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801b5c6:	f640 0337 	movw	r3, #2103	@ 0x837
 801b5ca:	4290      	cmp	r0, r2
 801b5cc:	bf0c      	ite	eq
 801b5ce:	4618      	moveq	r0, r3
 801b5d0:	2001      	movne	r0, #1
 801b5d2:	bd70      	pop	{r4, r5, r6, pc}
 801b5d4:	f7f6 fd40 	bl	8012058 <rcutils_reset_error>
 801b5d8:	f640 0036 	movw	r0, #2102	@ 0x836
 801b5dc:	bd70      	pop	{r4, r5, r6, pc}
 801b5de:	f640 0036 	movw	r0, #2102	@ 0x836
 801b5e2:	bd70      	pop	{r4, r5, r6, pc}
 801b5e4:	200b      	movs	r0, #11
 801b5e6:	bd70      	pop	{r4, r5, r6, pc}
 801b5e8:	f640 0036 	movw	r0, #2102	@ 0x836
 801b5ec:	4770      	bx	lr
 801b5ee:	bf00      	nop

0801b5f0 <rcl_action_send_result_request>:
 801b5f0:	b390      	cbz	r0, 801b658 <rcl_action_send_result_request+0x68>
 801b5f2:	b570      	push	{r4, r5, r6, lr}
 801b5f4:	4604      	mov	r4, r0
 801b5f6:	6800      	ldr	r0, [r0, #0]
 801b5f8:	b348      	cbz	r0, 801b64e <rcl_action_send_result_request+0x5e>
 801b5fa:	460d      	mov	r5, r1
 801b5fc:	4616      	mov	r6, r2
 801b5fe:	f7f4 ffd7 	bl	80105b0 <rcl_client_is_valid>
 801b602:	b1f8      	cbz	r0, 801b644 <rcl_action_send_result_request+0x54>
 801b604:	6820      	ldr	r0, [r4, #0]
 801b606:	3004      	adds	r0, #4
 801b608:	f7f4 ffd2 	bl	80105b0 <rcl_client_is_valid>
 801b60c:	b1d0      	cbz	r0, 801b644 <rcl_action_send_result_request+0x54>
 801b60e:	6820      	ldr	r0, [r4, #0]
 801b610:	3008      	adds	r0, #8
 801b612:	f7f4 ffcd 	bl	80105b0 <rcl_client_is_valid>
 801b616:	b1a8      	cbz	r0, 801b644 <rcl_action_send_result_request+0x54>
 801b618:	6820      	ldr	r0, [r4, #0]
 801b61a:	300c      	adds	r0, #12
 801b61c:	f7fe fce4 	bl	8019fe8 <rcl_subscription_is_valid>
 801b620:	b180      	cbz	r0, 801b644 <rcl_action_send_result_request+0x54>
 801b622:	6820      	ldr	r0, [r4, #0]
 801b624:	3010      	adds	r0, #16
 801b626:	f7fe fcdf 	bl	8019fe8 <rcl_subscription_is_valid>
 801b62a:	b158      	cbz	r0, 801b644 <rcl_action_send_result_request+0x54>
 801b62c:	b195      	cbz	r5, 801b654 <rcl_action_send_result_request+0x64>
 801b62e:	b18e      	cbz	r6, 801b654 <rcl_action_send_result_request+0x64>
 801b630:	6820      	ldr	r0, [r4, #0]
 801b632:	4632      	mov	r2, r6
 801b634:	4629      	mov	r1, r5
 801b636:	3008      	adds	r0, #8
 801b638:	f7f4 ff3c 	bl	80104b4 <rcl_send_request>
 801b63c:	3800      	subs	r0, #0
 801b63e:	bf18      	it	ne
 801b640:	2001      	movne	r0, #1
 801b642:	bd70      	pop	{r4, r5, r6, pc}
 801b644:	f7f6 fd08 	bl	8012058 <rcutils_reset_error>
 801b648:	f640 0036 	movw	r0, #2102	@ 0x836
 801b64c:	bd70      	pop	{r4, r5, r6, pc}
 801b64e:	f640 0036 	movw	r0, #2102	@ 0x836
 801b652:	bd70      	pop	{r4, r5, r6, pc}
 801b654:	200b      	movs	r0, #11
 801b656:	bd70      	pop	{r4, r5, r6, pc}
 801b658:	f640 0036 	movw	r0, #2102	@ 0x836
 801b65c:	4770      	bx	lr
 801b65e:	bf00      	nop

0801b660 <rcl_action_take_result_response>:
 801b660:	2800      	cmp	r0, #0
 801b662:	d03a      	beq.n	801b6da <rcl_action_take_result_response+0x7a>
 801b664:	b570      	push	{r4, r5, r6, lr}
 801b666:	4604      	mov	r4, r0
 801b668:	6800      	ldr	r0, [r0, #0]
 801b66a:	b388      	cbz	r0, 801b6d0 <rcl_action_take_result_response+0x70>
 801b66c:	460d      	mov	r5, r1
 801b66e:	4616      	mov	r6, r2
 801b670:	f7f4 ff9e 	bl	80105b0 <rcl_client_is_valid>
 801b674:	b338      	cbz	r0, 801b6c6 <rcl_action_take_result_response+0x66>
 801b676:	6820      	ldr	r0, [r4, #0]
 801b678:	3004      	adds	r0, #4
 801b67a:	f7f4 ff99 	bl	80105b0 <rcl_client_is_valid>
 801b67e:	b310      	cbz	r0, 801b6c6 <rcl_action_take_result_response+0x66>
 801b680:	6820      	ldr	r0, [r4, #0]
 801b682:	3008      	adds	r0, #8
 801b684:	f7f4 ff94 	bl	80105b0 <rcl_client_is_valid>
 801b688:	b1e8      	cbz	r0, 801b6c6 <rcl_action_take_result_response+0x66>
 801b68a:	6820      	ldr	r0, [r4, #0]
 801b68c:	300c      	adds	r0, #12
 801b68e:	f7fe fcab 	bl	8019fe8 <rcl_subscription_is_valid>
 801b692:	b1c0      	cbz	r0, 801b6c6 <rcl_action_take_result_response+0x66>
 801b694:	6820      	ldr	r0, [r4, #0]
 801b696:	3010      	adds	r0, #16
 801b698:	f7fe fca6 	bl	8019fe8 <rcl_subscription_is_valid>
 801b69c:	b198      	cbz	r0, 801b6c6 <rcl_action_take_result_response+0x66>
 801b69e:	b1d5      	cbz	r5, 801b6d6 <rcl_action_take_result_response+0x76>
 801b6a0:	b1ce      	cbz	r6, 801b6d6 <rcl_action_take_result_response+0x76>
 801b6a2:	6820      	ldr	r0, [r4, #0]
 801b6a4:	4632      	mov	r2, r6
 801b6a6:	4629      	mov	r1, r5
 801b6a8:	3008      	adds	r0, #8
 801b6aa:	f7f4 ff39 	bl	8010520 <rcl_take_response>
 801b6ae:	b148      	cbz	r0, 801b6c4 <rcl_action_take_result_response+0x64>
 801b6b0:	280a      	cmp	r0, #10
 801b6b2:	d007      	beq.n	801b6c4 <rcl_action_take_result_response+0x64>
 801b6b4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801b6b8:	f640 0337 	movw	r3, #2103	@ 0x837
 801b6bc:	4290      	cmp	r0, r2
 801b6be:	bf0c      	ite	eq
 801b6c0:	4618      	moveq	r0, r3
 801b6c2:	2001      	movne	r0, #1
 801b6c4:	bd70      	pop	{r4, r5, r6, pc}
 801b6c6:	f7f6 fcc7 	bl	8012058 <rcutils_reset_error>
 801b6ca:	f640 0036 	movw	r0, #2102	@ 0x836
 801b6ce:	bd70      	pop	{r4, r5, r6, pc}
 801b6d0:	f640 0036 	movw	r0, #2102	@ 0x836
 801b6d4:	bd70      	pop	{r4, r5, r6, pc}
 801b6d6:	200b      	movs	r0, #11
 801b6d8:	bd70      	pop	{r4, r5, r6, pc}
 801b6da:	f640 0036 	movw	r0, #2102	@ 0x836
 801b6de:	4770      	bx	lr

0801b6e0 <rcl_action_take_cancel_response>:
 801b6e0:	2800      	cmp	r0, #0
 801b6e2:	d03a      	beq.n	801b75a <rcl_action_take_cancel_response+0x7a>
 801b6e4:	b570      	push	{r4, r5, r6, lr}
 801b6e6:	4604      	mov	r4, r0
 801b6e8:	6800      	ldr	r0, [r0, #0]
 801b6ea:	b388      	cbz	r0, 801b750 <rcl_action_take_cancel_response+0x70>
 801b6ec:	460d      	mov	r5, r1
 801b6ee:	4616      	mov	r6, r2
 801b6f0:	f7f4 ff5e 	bl	80105b0 <rcl_client_is_valid>
 801b6f4:	b338      	cbz	r0, 801b746 <rcl_action_take_cancel_response+0x66>
 801b6f6:	6820      	ldr	r0, [r4, #0]
 801b6f8:	3004      	adds	r0, #4
 801b6fa:	f7f4 ff59 	bl	80105b0 <rcl_client_is_valid>
 801b6fe:	b310      	cbz	r0, 801b746 <rcl_action_take_cancel_response+0x66>
 801b700:	6820      	ldr	r0, [r4, #0]
 801b702:	3008      	adds	r0, #8
 801b704:	f7f4 ff54 	bl	80105b0 <rcl_client_is_valid>
 801b708:	b1e8      	cbz	r0, 801b746 <rcl_action_take_cancel_response+0x66>
 801b70a:	6820      	ldr	r0, [r4, #0]
 801b70c:	300c      	adds	r0, #12
 801b70e:	f7fe fc6b 	bl	8019fe8 <rcl_subscription_is_valid>
 801b712:	b1c0      	cbz	r0, 801b746 <rcl_action_take_cancel_response+0x66>
 801b714:	6820      	ldr	r0, [r4, #0]
 801b716:	3010      	adds	r0, #16
 801b718:	f7fe fc66 	bl	8019fe8 <rcl_subscription_is_valid>
 801b71c:	b198      	cbz	r0, 801b746 <rcl_action_take_cancel_response+0x66>
 801b71e:	b1d5      	cbz	r5, 801b756 <rcl_action_take_cancel_response+0x76>
 801b720:	b1ce      	cbz	r6, 801b756 <rcl_action_take_cancel_response+0x76>
 801b722:	6820      	ldr	r0, [r4, #0]
 801b724:	4632      	mov	r2, r6
 801b726:	4629      	mov	r1, r5
 801b728:	3004      	adds	r0, #4
 801b72a:	f7f4 fef9 	bl	8010520 <rcl_take_response>
 801b72e:	b148      	cbz	r0, 801b744 <rcl_action_take_cancel_response+0x64>
 801b730:	280a      	cmp	r0, #10
 801b732:	d007      	beq.n	801b744 <rcl_action_take_cancel_response+0x64>
 801b734:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801b738:	f640 0337 	movw	r3, #2103	@ 0x837
 801b73c:	4290      	cmp	r0, r2
 801b73e:	bf0c      	ite	eq
 801b740:	4618      	moveq	r0, r3
 801b742:	2001      	movne	r0, #1
 801b744:	bd70      	pop	{r4, r5, r6, pc}
 801b746:	f7f6 fc87 	bl	8012058 <rcutils_reset_error>
 801b74a:	f640 0036 	movw	r0, #2102	@ 0x836
 801b74e:	bd70      	pop	{r4, r5, r6, pc}
 801b750:	f640 0036 	movw	r0, #2102	@ 0x836
 801b754:	bd70      	pop	{r4, r5, r6, pc}
 801b756:	200b      	movs	r0, #11
 801b758:	bd70      	pop	{r4, r5, r6, pc}
 801b75a:	f640 0036 	movw	r0, #2102	@ 0x836
 801b75e:	4770      	bx	lr

0801b760 <rcl_action_take_feedback>:
 801b760:	2800      	cmp	r0, #0
 801b762:	d038      	beq.n	801b7d6 <rcl_action_take_feedback+0x76>
 801b764:	b530      	push	{r4, r5, lr}
 801b766:	4604      	mov	r4, r0
 801b768:	6800      	ldr	r0, [r0, #0]
 801b76a:	b091      	sub	sp, #68	@ 0x44
 801b76c:	b378      	cbz	r0, 801b7ce <rcl_action_take_feedback+0x6e>
 801b76e:	460d      	mov	r5, r1
 801b770:	f7f4 ff1e 	bl	80105b0 <rcl_client_is_valid>
 801b774:	b328      	cbz	r0, 801b7c2 <rcl_action_take_feedback+0x62>
 801b776:	6820      	ldr	r0, [r4, #0]
 801b778:	3004      	adds	r0, #4
 801b77a:	f7f4 ff19 	bl	80105b0 <rcl_client_is_valid>
 801b77e:	b300      	cbz	r0, 801b7c2 <rcl_action_take_feedback+0x62>
 801b780:	6820      	ldr	r0, [r4, #0]
 801b782:	3008      	adds	r0, #8
 801b784:	f7f4 ff14 	bl	80105b0 <rcl_client_is_valid>
 801b788:	b1d8      	cbz	r0, 801b7c2 <rcl_action_take_feedback+0x62>
 801b78a:	6820      	ldr	r0, [r4, #0]
 801b78c:	300c      	adds	r0, #12
 801b78e:	f7fe fc2b 	bl	8019fe8 <rcl_subscription_is_valid>
 801b792:	b1b0      	cbz	r0, 801b7c2 <rcl_action_take_feedback+0x62>
 801b794:	6820      	ldr	r0, [r4, #0]
 801b796:	3010      	adds	r0, #16
 801b798:	f7fe fc26 	bl	8019fe8 <rcl_subscription_is_valid>
 801b79c:	b188      	cbz	r0, 801b7c2 <rcl_action_take_feedback+0x62>
 801b79e:	b1ed      	cbz	r5, 801b7dc <rcl_action_take_feedback+0x7c>
 801b7a0:	6820      	ldr	r0, [r4, #0]
 801b7a2:	2300      	movs	r3, #0
 801b7a4:	466a      	mov	r2, sp
 801b7a6:	4629      	mov	r1, r5
 801b7a8:	300c      	adds	r0, #12
 801b7aa:	f7fe fbbf 	bl	8019f2c <rcl_take>
 801b7ae:	b160      	cbz	r0, 801b7ca <rcl_action_take_feedback+0x6a>
 801b7b0:	f240 1391 	movw	r3, #401	@ 0x191
 801b7b4:	4298      	cmp	r0, r3
 801b7b6:	d014      	beq.n	801b7e2 <rcl_action_take_feedback+0x82>
 801b7b8:	280a      	cmp	r0, #10
 801b7ba:	bf18      	it	ne
 801b7bc:	2001      	movne	r0, #1
 801b7be:	b011      	add	sp, #68	@ 0x44
 801b7c0:	bd30      	pop	{r4, r5, pc}
 801b7c2:	f7f6 fc49 	bl	8012058 <rcutils_reset_error>
 801b7c6:	f640 0036 	movw	r0, #2102	@ 0x836
 801b7ca:	b011      	add	sp, #68	@ 0x44
 801b7cc:	bd30      	pop	{r4, r5, pc}
 801b7ce:	f640 0036 	movw	r0, #2102	@ 0x836
 801b7d2:	b011      	add	sp, #68	@ 0x44
 801b7d4:	bd30      	pop	{r4, r5, pc}
 801b7d6:	f640 0036 	movw	r0, #2102	@ 0x836
 801b7da:	4770      	bx	lr
 801b7dc:	200b      	movs	r0, #11
 801b7de:	b011      	add	sp, #68	@ 0x44
 801b7e0:	bd30      	pop	{r4, r5, pc}
 801b7e2:	f640 0037 	movw	r0, #2103	@ 0x837
 801b7e6:	e7f0      	b.n	801b7ca <rcl_action_take_feedback+0x6a>

0801b7e8 <rcl_action_wait_set_add_action_client>:
 801b7e8:	2800      	cmp	r0, #0
 801b7ea:	d048      	beq.n	801b87e <rcl_action_wait_set_add_action_client+0x96>
 801b7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7ee:	460c      	mov	r4, r1
 801b7f0:	2900      	cmp	r1, #0
 801b7f2:	d03c      	beq.n	801b86e <rcl_action_wait_set_add_action_client+0x86>
 801b7f4:	4605      	mov	r5, r0
 801b7f6:	6808      	ldr	r0, [r1, #0]
 801b7f8:	2800      	cmp	r0, #0
 801b7fa:	d038      	beq.n	801b86e <rcl_action_wait_set_add_action_client+0x86>
 801b7fc:	4617      	mov	r7, r2
 801b7fe:	461e      	mov	r6, r3
 801b800:	f7f4 fed6 	bl	80105b0 <rcl_client_is_valid>
 801b804:	b3b0      	cbz	r0, 801b874 <rcl_action_wait_set_add_action_client+0x8c>
 801b806:	6820      	ldr	r0, [r4, #0]
 801b808:	3004      	adds	r0, #4
 801b80a:	f7f4 fed1 	bl	80105b0 <rcl_client_is_valid>
 801b80e:	b388      	cbz	r0, 801b874 <rcl_action_wait_set_add_action_client+0x8c>
 801b810:	6820      	ldr	r0, [r4, #0]
 801b812:	3008      	adds	r0, #8
 801b814:	f7f4 fecc 	bl	80105b0 <rcl_client_is_valid>
 801b818:	b360      	cbz	r0, 801b874 <rcl_action_wait_set_add_action_client+0x8c>
 801b81a:	6820      	ldr	r0, [r4, #0]
 801b81c:	300c      	adds	r0, #12
 801b81e:	f7fe fbe3 	bl	8019fe8 <rcl_subscription_is_valid>
 801b822:	b338      	cbz	r0, 801b874 <rcl_action_wait_set_add_action_client+0x8c>
 801b824:	6820      	ldr	r0, [r4, #0]
 801b826:	3010      	adds	r0, #16
 801b828:	f7fe fbde 	bl	8019fe8 <rcl_subscription_is_valid>
 801b82c:	b310      	cbz	r0, 801b874 <rcl_action_wait_set_add_action_client+0x8c>
 801b82e:	6821      	ldr	r1, [r4, #0]
 801b830:	4628      	mov	r0, r5
 801b832:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801b836:	f7ff fccf 	bl	801b1d8 <rcl_wait_set_add_client>
 801b83a:	b9b8      	cbnz	r0, 801b86c <rcl_action_wait_set_add_action_client+0x84>
 801b83c:	6821      	ldr	r1, [r4, #0]
 801b83e:	4628      	mov	r0, r5
 801b840:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801b844:	3104      	adds	r1, #4
 801b846:	f7ff fcc7 	bl	801b1d8 <rcl_wait_set_add_client>
 801b84a:	b978      	cbnz	r0, 801b86c <rcl_action_wait_set_add_action_client+0x84>
 801b84c:	6821      	ldr	r1, [r4, #0]
 801b84e:	4628      	mov	r0, r5
 801b850:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801b854:	3108      	adds	r1, #8
 801b856:	f7ff fcbf 	bl	801b1d8 <rcl_wait_set_add_client>
 801b85a:	b938      	cbnz	r0, 801b86c <rcl_action_wait_set_add_action_client+0x84>
 801b85c:	6821      	ldr	r1, [r4, #0]
 801b85e:	4628      	mov	r0, r5
 801b860:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801b864:	310c      	adds	r1, #12
 801b866:	f7ff f96f 	bl	801ab48 <rcl_wait_set_add_subscription>
 801b86a:	b158      	cbz	r0, 801b884 <rcl_action_wait_set_add_action_client+0x9c>
 801b86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b86e:	f640 0036 	movw	r0, #2102	@ 0x836
 801b872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b874:	f7f6 fbf0 	bl	8012058 <rcutils_reset_error>
 801b878:	f640 0036 	movw	r0, #2102	@ 0x836
 801b87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b87e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b882:	4770      	bx	lr
 801b884:	6821      	ldr	r1, [r4, #0]
 801b886:	4628      	mov	r0, r5
 801b888:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801b88c:	3110      	adds	r1, #16
 801b88e:	f7ff f95b 	bl	801ab48 <rcl_wait_set_add_subscription>
 801b892:	2800      	cmp	r0, #0
 801b894:	d1ea      	bne.n	801b86c <rcl_action_wait_set_add_action_client+0x84>
 801b896:	b11f      	cbz	r7, 801b8a0 <rcl_action_wait_set_add_action_client+0xb8>
 801b898:	6823      	ldr	r3, [r4, #0]
 801b89a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801b89e:	603b      	str	r3, [r7, #0]
 801b8a0:	2e00      	cmp	r6, #0
 801b8a2:	d0e3      	beq.n	801b86c <rcl_action_wait_set_add_action_client+0x84>
 801b8a4:	6823      	ldr	r3, [r4, #0]
 801b8a6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801b8aa:	6033      	str	r3, [r6, #0]
 801b8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b8ae:	bf00      	nop

0801b8b0 <rcl_action_client_wait_set_get_entities_ready>:
 801b8b0:	2800      	cmp	r0, #0
 801b8b2:	f000 808d 	beq.w	801b9d0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801b8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8ba:	460c      	mov	r4, r1
 801b8bc:	2900      	cmp	r1, #0
 801b8be:	d077      	beq.n	801b9b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801b8c0:	4605      	mov	r5, r0
 801b8c2:	6808      	ldr	r0, [r1, #0]
 801b8c4:	2800      	cmp	r0, #0
 801b8c6:	d073      	beq.n	801b9b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801b8c8:	4616      	mov	r6, r2
 801b8ca:	461f      	mov	r7, r3
 801b8cc:	f7f4 fe70 	bl	80105b0 <rcl_client_is_valid>
 801b8d0:	2800      	cmp	r0, #0
 801b8d2:	d071      	beq.n	801b9b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801b8d4:	6820      	ldr	r0, [r4, #0]
 801b8d6:	3004      	adds	r0, #4
 801b8d8:	f7f4 fe6a 	bl	80105b0 <rcl_client_is_valid>
 801b8dc:	2800      	cmp	r0, #0
 801b8de:	d06b      	beq.n	801b9b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801b8e0:	6820      	ldr	r0, [r4, #0]
 801b8e2:	3008      	adds	r0, #8
 801b8e4:	f7f4 fe64 	bl	80105b0 <rcl_client_is_valid>
 801b8e8:	2800      	cmp	r0, #0
 801b8ea:	d065      	beq.n	801b9b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801b8ec:	6820      	ldr	r0, [r4, #0]
 801b8ee:	300c      	adds	r0, #12
 801b8f0:	f7fe fb7a 	bl	8019fe8 <rcl_subscription_is_valid>
 801b8f4:	2800      	cmp	r0, #0
 801b8f6:	d05f      	beq.n	801b9b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801b8f8:	6820      	ldr	r0, [r4, #0]
 801b8fa:	3010      	adds	r0, #16
 801b8fc:	f7fe fb74 	bl	8019fe8 <rcl_subscription_is_valid>
 801b900:	2800      	cmp	r0, #0
 801b902:	d059      	beq.n	801b9b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801b904:	2e00      	cmp	r6, #0
 801b906:	d060      	beq.n	801b9ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801b908:	2f00      	cmp	r7, #0
 801b90a:	d05e      	beq.n	801b9ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801b90c:	9b06      	ldr	r3, [sp, #24]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d05b      	beq.n	801b9ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801b912:	9b07      	ldr	r3, [sp, #28]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d058      	beq.n	801b9ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801b918:	9b08      	ldr	r3, [sp, #32]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d055      	beq.n	801b9ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801b91e:	6823      	ldr	r3, [r4, #0]
 801b920:	686a      	ldr	r2, [r5, #4]
 801b922:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801b926:	428a      	cmp	r2, r1
 801b928:	d94c      	bls.n	801b9c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801b92a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801b92e:	4282      	cmp	r2, r0
 801b930:	d948      	bls.n	801b9c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801b932:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801b936:	69ea      	ldr	r2, [r5, #28]
 801b938:	42a2      	cmp	r2, r4
 801b93a:	d943      	bls.n	801b9c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801b93c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 801b940:	4562      	cmp	r2, ip
 801b942:	d93f      	bls.n	801b9c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801b944:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 801b948:	4572      	cmp	r2, lr
 801b94a:	d93b      	bls.n	801b9c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801b94c:	69aa      	ldr	r2, [r5, #24]
 801b94e:	682d      	ldr	r5, [r5, #0]
 801b950:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801b954:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 801b958:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801b95c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 801b960:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801b964:	f103 0c0c 	add.w	ip, r3, #12
 801b968:	eba5 050c 	sub.w	r5, r5, ip
 801b96c:	fab5 f585 	clz	r5, r5
 801b970:	096d      	lsrs	r5, r5, #5
 801b972:	7035      	strb	r5, [r6, #0]
 801b974:	f103 0510 	add.w	r5, r3, #16
 801b978:	1b64      	subs	r4, r4, r5
 801b97a:	fab4 f484 	clz	r4, r4
 801b97e:	0964      	lsrs	r4, r4, #5
 801b980:	703c      	strb	r4, [r7, #0]
 801b982:	eba3 0008 	sub.w	r0, r3, r8
 801b986:	1d1c      	adds	r4, r3, #4
 801b988:	3308      	adds	r3, #8
 801b98a:	1ad3      	subs	r3, r2, r3
 801b98c:	fab0 f080 	clz	r0, r0
 801b990:	9a06      	ldr	r2, [sp, #24]
 801b992:	0940      	lsrs	r0, r0, #5
 801b994:	1b09      	subs	r1, r1, r4
 801b996:	7010      	strb	r0, [r2, #0]
 801b998:	fab1 f181 	clz	r1, r1
 801b99c:	9a07      	ldr	r2, [sp, #28]
 801b99e:	0949      	lsrs	r1, r1, #5
 801b9a0:	7011      	strb	r1, [r2, #0]
 801b9a2:	fab3 f383 	clz	r3, r3
 801b9a6:	9a08      	ldr	r2, [sp, #32]
 801b9a8:	095b      	lsrs	r3, r3, #5
 801b9aa:	2000      	movs	r0, #0
 801b9ac:	7013      	strb	r3, [r2, #0]
 801b9ae:	e001      	b.n	801b9b4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 801b9b0:	f640 0036 	movw	r0, #2102	@ 0x836
 801b9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9b8:	f7f6 fb4e 	bl	8012058 <rcutils_reset_error>
 801b9bc:	f640 0036 	movw	r0, #2102	@ 0x836
 801b9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9c4:	2001      	movs	r0, #1
 801b9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9ca:	200b      	movs	r0, #11
 801b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b9d4:	4770      	bx	lr
 801b9d6:	bf00      	nop

0801b9d8 <rcl_action_take_goal_request>:
 801b9d8:	2800      	cmp	r0, #0
 801b9da:	d039      	beq.n	801ba50 <rcl_action_take_goal_request+0x78>
 801b9dc:	b570      	push	{r4, r5, r6, lr}
 801b9de:	4604      	mov	r4, r0
 801b9e0:	6800      	ldr	r0, [r0, #0]
 801b9e2:	b380      	cbz	r0, 801ba46 <rcl_action_take_goal_request+0x6e>
 801b9e4:	460d      	mov	r5, r1
 801b9e6:	4616      	mov	r6, r2
 801b9e8:	f7fe fa96 	bl	8019f18 <rcl_service_is_valid>
 801b9ec:	b330      	cbz	r0, 801ba3c <rcl_action_take_goal_request+0x64>
 801b9ee:	6820      	ldr	r0, [r4, #0]
 801b9f0:	3004      	adds	r0, #4
 801b9f2:	f7fe fa91 	bl	8019f18 <rcl_service_is_valid>
 801b9f6:	b308      	cbz	r0, 801ba3c <rcl_action_take_goal_request+0x64>
 801b9f8:	6820      	ldr	r0, [r4, #0]
 801b9fa:	3008      	adds	r0, #8
 801b9fc:	f7fe fa8c 	bl	8019f18 <rcl_service_is_valid>
 801ba00:	b1e0      	cbz	r0, 801ba3c <rcl_action_take_goal_request+0x64>
 801ba02:	6820      	ldr	r0, [r4, #0]
 801ba04:	300c      	adds	r0, #12
 801ba06:	f7f5 fa1d 	bl	8010e44 <rcl_publisher_is_valid>
 801ba0a:	b1b8      	cbz	r0, 801ba3c <rcl_action_take_goal_request+0x64>
 801ba0c:	6820      	ldr	r0, [r4, #0]
 801ba0e:	3010      	adds	r0, #16
 801ba10:	f7f5 fa18 	bl	8010e44 <rcl_publisher_is_valid>
 801ba14:	b190      	cbz	r0, 801ba3c <rcl_action_take_goal_request+0x64>
 801ba16:	b1cd      	cbz	r5, 801ba4c <rcl_action_take_goal_request+0x74>
 801ba18:	b1c6      	cbz	r6, 801ba4c <rcl_action_take_goal_request+0x74>
 801ba1a:	6820      	ldr	r0, [r4, #0]
 801ba1c:	4632      	mov	r2, r6
 801ba1e:	4629      	mov	r1, r5
 801ba20:	f7fe fa22 	bl	8019e68 <rcl_take_request>
 801ba24:	b148      	cbz	r0, 801ba3a <rcl_action_take_goal_request+0x62>
 801ba26:	280a      	cmp	r0, #10
 801ba28:	d007      	beq.n	801ba3a <rcl_action_take_goal_request+0x62>
 801ba2a:	f240 2259 	movw	r2, #601	@ 0x259
 801ba2e:	f640 0399 	movw	r3, #2201	@ 0x899
 801ba32:	4290      	cmp	r0, r2
 801ba34:	bf0c      	ite	eq
 801ba36:	4618      	moveq	r0, r3
 801ba38:	2001      	movne	r0, #1
 801ba3a:	bd70      	pop	{r4, r5, r6, pc}
 801ba3c:	f7f6 fb0c 	bl	8012058 <rcutils_reset_error>
 801ba40:	f640 0098 	movw	r0, #2200	@ 0x898
 801ba44:	bd70      	pop	{r4, r5, r6, pc}
 801ba46:	f640 0098 	movw	r0, #2200	@ 0x898
 801ba4a:	bd70      	pop	{r4, r5, r6, pc}
 801ba4c:	200b      	movs	r0, #11
 801ba4e:	bd70      	pop	{r4, r5, r6, pc}
 801ba50:	f640 0098 	movw	r0, #2200	@ 0x898
 801ba54:	4770      	bx	lr
 801ba56:	bf00      	nop

0801ba58 <rcl_action_send_goal_response>:
 801ba58:	b390      	cbz	r0, 801bac0 <rcl_action_send_goal_response+0x68>
 801ba5a:	b570      	push	{r4, r5, r6, lr}
 801ba5c:	4604      	mov	r4, r0
 801ba5e:	6800      	ldr	r0, [r0, #0]
 801ba60:	b348      	cbz	r0, 801bab6 <rcl_action_send_goal_response+0x5e>
 801ba62:	460d      	mov	r5, r1
 801ba64:	4616      	mov	r6, r2
 801ba66:	f7fe fa57 	bl	8019f18 <rcl_service_is_valid>
 801ba6a:	b1f8      	cbz	r0, 801baac <rcl_action_send_goal_response+0x54>
 801ba6c:	6820      	ldr	r0, [r4, #0]
 801ba6e:	3004      	adds	r0, #4
 801ba70:	f7fe fa52 	bl	8019f18 <rcl_service_is_valid>
 801ba74:	b1d0      	cbz	r0, 801baac <rcl_action_send_goal_response+0x54>
 801ba76:	6820      	ldr	r0, [r4, #0]
 801ba78:	3008      	adds	r0, #8
 801ba7a:	f7fe fa4d 	bl	8019f18 <rcl_service_is_valid>
 801ba7e:	b1a8      	cbz	r0, 801baac <rcl_action_send_goal_response+0x54>
 801ba80:	6820      	ldr	r0, [r4, #0]
 801ba82:	300c      	adds	r0, #12
 801ba84:	f7f5 f9de 	bl	8010e44 <rcl_publisher_is_valid>
 801ba88:	b180      	cbz	r0, 801baac <rcl_action_send_goal_response+0x54>
 801ba8a:	6820      	ldr	r0, [r4, #0]
 801ba8c:	3010      	adds	r0, #16
 801ba8e:	f7f5 f9d9 	bl	8010e44 <rcl_publisher_is_valid>
 801ba92:	b158      	cbz	r0, 801baac <rcl_action_send_goal_response+0x54>
 801ba94:	b195      	cbz	r5, 801babc <rcl_action_send_goal_response+0x64>
 801ba96:	b18e      	cbz	r6, 801babc <rcl_action_send_goal_response+0x64>
 801ba98:	6820      	ldr	r0, [r4, #0]
 801ba9a:	4632      	mov	r2, r6
 801ba9c:	4629      	mov	r1, r5
 801ba9e:	f7fe fa23 	bl	8019ee8 <rcl_send_response>
 801baa2:	b110      	cbz	r0, 801baaa <rcl_action_send_goal_response+0x52>
 801baa4:	2802      	cmp	r0, #2
 801baa6:	bf18      	it	ne
 801baa8:	2001      	movne	r0, #1
 801baaa:	bd70      	pop	{r4, r5, r6, pc}
 801baac:	f7f6 fad4 	bl	8012058 <rcutils_reset_error>
 801bab0:	f640 0098 	movw	r0, #2200	@ 0x898
 801bab4:	bd70      	pop	{r4, r5, r6, pc}
 801bab6:	f640 0098 	movw	r0, #2200	@ 0x898
 801baba:	bd70      	pop	{r4, r5, r6, pc}
 801babc:	200b      	movs	r0, #11
 801babe:	bd70      	pop	{r4, r5, r6, pc}
 801bac0:	f640 0098 	movw	r0, #2200	@ 0x898
 801bac4:	4770      	bx	lr
 801bac6:	bf00      	nop

0801bac8 <rcl_action_take_result_request>:
 801bac8:	2800      	cmp	r0, #0
 801baca:	d03a      	beq.n	801bb42 <rcl_action_take_result_request+0x7a>
 801bacc:	b570      	push	{r4, r5, r6, lr}
 801bace:	4604      	mov	r4, r0
 801bad0:	6800      	ldr	r0, [r0, #0]
 801bad2:	b388      	cbz	r0, 801bb38 <rcl_action_take_result_request+0x70>
 801bad4:	460d      	mov	r5, r1
 801bad6:	4616      	mov	r6, r2
 801bad8:	f7fe fa1e 	bl	8019f18 <rcl_service_is_valid>
 801badc:	b338      	cbz	r0, 801bb2e <rcl_action_take_result_request+0x66>
 801bade:	6820      	ldr	r0, [r4, #0]
 801bae0:	3004      	adds	r0, #4
 801bae2:	f7fe fa19 	bl	8019f18 <rcl_service_is_valid>
 801bae6:	b310      	cbz	r0, 801bb2e <rcl_action_take_result_request+0x66>
 801bae8:	6820      	ldr	r0, [r4, #0]
 801baea:	3008      	adds	r0, #8
 801baec:	f7fe fa14 	bl	8019f18 <rcl_service_is_valid>
 801baf0:	b1e8      	cbz	r0, 801bb2e <rcl_action_take_result_request+0x66>
 801baf2:	6820      	ldr	r0, [r4, #0]
 801baf4:	300c      	adds	r0, #12
 801baf6:	f7f5 f9a5 	bl	8010e44 <rcl_publisher_is_valid>
 801bafa:	b1c0      	cbz	r0, 801bb2e <rcl_action_take_result_request+0x66>
 801bafc:	6820      	ldr	r0, [r4, #0]
 801bafe:	3010      	adds	r0, #16
 801bb00:	f7f5 f9a0 	bl	8010e44 <rcl_publisher_is_valid>
 801bb04:	b198      	cbz	r0, 801bb2e <rcl_action_take_result_request+0x66>
 801bb06:	b1d5      	cbz	r5, 801bb3e <rcl_action_take_result_request+0x76>
 801bb08:	b1ce      	cbz	r6, 801bb3e <rcl_action_take_result_request+0x76>
 801bb0a:	6820      	ldr	r0, [r4, #0]
 801bb0c:	4632      	mov	r2, r6
 801bb0e:	4629      	mov	r1, r5
 801bb10:	3008      	adds	r0, #8
 801bb12:	f7fe f9a9 	bl	8019e68 <rcl_take_request>
 801bb16:	b148      	cbz	r0, 801bb2c <rcl_action_take_result_request+0x64>
 801bb18:	280a      	cmp	r0, #10
 801bb1a:	d007      	beq.n	801bb2c <rcl_action_take_result_request+0x64>
 801bb1c:	f240 2259 	movw	r2, #601	@ 0x259
 801bb20:	f640 0399 	movw	r3, #2201	@ 0x899
 801bb24:	4290      	cmp	r0, r2
 801bb26:	bf0c      	ite	eq
 801bb28:	4618      	moveq	r0, r3
 801bb2a:	2001      	movne	r0, #1
 801bb2c:	bd70      	pop	{r4, r5, r6, pc}
 801bb2e:	f7f6 fa93 	bl	8012058 <rcutils_reset_error>
 801bb32:	f640 0098 	movw	r0, #2200	@ 0x898
 801bb36:	bd70      	pop	{r4, r5, r6, pc}
 801bb38:	f640 0098 	movw	r0, #2200	@ 0x898
 801bb3c:	bd70      	pop	{r4, r5, r6, pc}
 801bb3e:	200b      	movs	r0, #11
 801bb40:	bd70      	pop	{r4, r5, r6, pc}
 801bb42:	f640 0098 	movw	r0, #2200	@ 0x898
 801bb46:	4770      	bx	lr

0801bb48 <rcl_action_take_cancel_request>:
 801bb48:	2800      	cmp	r0, #0
 801bb4a:	d03a      	beq.n	801bbc2 <rcl_action_take_cancel_request+0x7a>
 801bb4c:	b570      	push	{r4, r5, r6, lr}
 801bb4e:	4604      	mov	r4, r0
 801bb50:	6800      	ldr	r0, [r0, #0]
 801bb52:	b388      	cbz	r0, 801bbb8 <rcl_action_take_cancel_request+0x70>
 801bb54:	460d      	mov	r5, r1
 801bb56:	4616      	mov	r6, r2
 801bb58:	f7fe f9de 	bl	8019f18 <rcl_service_is_valid>
 801bb5c:	b338      	cbz	r0, 801bbae <rcl_action_take_cancel_request+0x66>
 801bb5e:	6820      	ldr	r0, [r4, #0]
 801bb60:	3004      	adds	r0, #4
 801bb62:	f7fe f9d9 	bl	8019f18 <rcl_service_is_valid>
 801bb66:	b310      	cbz	r0, 801bbae <rcl_action_take_cancel_request+0x66>
 801bb68:	6820      	ldr	r0, [r4, #0]
 801bb6a:	3008      	adds	r0, #8
 801bb6c:	f7fe f9d4 	bl	8019f18 <rcl_service_is_valid>
 801bb70:	b1e8      	cbz	r0, 801bbae <rcl_action_take_cancel_request+0x66>
 801bb72:	6820      	ldr	r0, [r4, #0]
 801bb74:	300c      	adds	r0, #12
 801bb76:	f7f5 f965 	bl	8010e44 <rcl_publisher_is_valid>
 801bb7a:	b1c0      	cbz	r0, 801bbae <rcl_action_take_cancel_request+0x66>
 801bb7c:	6820      	ldr	r0, [r4, #0]
 801bb7e:	3010      	adds	r0, #16
 801bb80:	f7f5 f960 	bl	8010e44 <rcl_publisher_is_valid>
 801bb84:	b198      	cbz	r0, 801bbae <rcl_action_take_cancel_request+0x66>
 801bb86:	b1d5      	cbz	r5, 801bbbe <rcl_action_take_cancel_request+0x76>
 801bb88:	b1ce      	cbz	r6, 801bbbe <rcl_action_take_cancel_request+0x76>
 801bb8a:	6820      	ldr	r0, [r4, #0]
 801bb8c:	4632      	mov	r2, r6
 801bb8e:	4629      	mov	r1, r5
 801bb90:	3004      	adds	r0, #4
 801bb92:	f7fe f969 	bl	8019e68 <rcl_take_request>
 801bb96:	b148      	cbz	r0, 801bbac <rcl_action_take_cancel_request+0x64>
 801bb98:	280a      	cmp	r0, #10
 801bb9a:	d007      	beq.n	801bbac <rcl_action_take_cancel_request+0x64>
 801bb9c:	f240 2259 	movw	r2, #601	@ 0x259
 801bba0:	f640 0399 	movw	r3, #2201	@ 0x899
 801bba4:	4290      	cmp	r0, r2
 801bba6:	bf0c      	ite	eq
 801bba8:	4618      	moveq	r0, r3
 801bbaa:	2001      	movne	r0, #1
 801bbac:	bd70      	pop	{r4, r5, r6, pc}
 801bbae:	f7f6 fa53 	bl	8012058 <rcutils_reset_error>
 801bbb2:	f640 0098 	movw	r0, #2200	@ 0x898
 801bbb6:	bd70      	pop	{r4, r5, r6, pc}
 801bbb8:	f640 0098 	movw	r0, #2200	@ 0x898
 801bbbc:	bd70      	pop	{r4, r5, r6, pc}
 801bbbe:	200b      	movs	r0, #11
 801bbc0:	bd70      	pop	{r4, r5, r6, pc}
 801bbc2:	f640 0098 	movw	r0, #2200	@ 0x898
 801bbc6:	4770      	bx	lr

0801bbc8 <rcl_action_send_cancel_response>:
 801bbc8:	b398      	cbz	r0, 801bc32 <rcl_action_send_cancel_response+0x6a>
 801bbca:	b570      	push	{r4, r5, r6, lr}
 801bbcc:	4604      	mov	r4, r0
 801bbce:	6800      	ldr	r0, [r0, #0]
 801bbd0:	b350      	cbz	r0, 801bc28 <rcl_action_send_cancel_response+0x60>
 801bbd2:	460d      	mov	r5, r1
 801bbd4:	4616      	mov	r6, r2
 801bbd6:	f7fe f99f 	bl	8019f18 <rcl_service_is_valid>
 801bbda:	b300      	cbz	r0, 801bc1e <rcl_action_send_cancel_response+0x56>
 801bbdc:	6820      	ldr	r0, [r4, #0]
 801bbde:	3004      	adds	r0, #4
 801bbe0:	f7fe f99a 	bl	8019f18 <rcl_service_is_valid>
 801bbe4:	b1d8      	cbz	r0, 801bc1e <rcl_action_send_cancel_response+0x56>
 801bbe6:	6820      	ldr	r0, [r4, #0]
 801bbe8:	3008      	adds	r0, #8
 801bbea:	f7fe f995 	bl	8019f18 <rcl_service_is_valid>
 801bbee:	b1b0      	cbz	r0, 801bc1e <rcl_action_send_cancel_response+0x56>
 801bbf0:	6820      	ldr	r0, [r4, #0]
 801bbf2:	300c      	adds	r0, #12
 801bbf4:	f7f5 f926 	bl	8010e44 <rcl_publisher_is_valid>
 801bbf8:	b188      	cbz	r0, 801bc1e <rcl_action_send_cancel_response+0x56>
 801bbfa:	6820      	ldr	r0, [r4, #0]
 801bbfc:	3010      	adds	r0, #16
 801bbfe:	f7f5 f921 	bl	8010e44 <rcl_publisher_is_valid>
 801bc02:	b160      	cbz	r0, 801bc1e <rcl_action_send_cancel_response+0x56>
 801bc04:	b19d      	cbz	r5, 801bc2e <rcl_action_send_cancel_response+0x66>
 801bc06:	b196      	cbz	r6, 801bc2e <rcl_action_send_cancel_response+0x66>
 801bc08:	6820      	ldr	r0, [r4, #0]
 801bc0a:	4632      	mov	r2, r6
 801bc0c:	4629      	mov	r1, r5
 801bc0e:	3004      	adds	r0, #4
 801bc10:	f7fe f96a 	bl	8019ee8 <rcl_send_response>
 801bc14:	b110      	cbz	r0, 801bc1c <rcl_action_send_cancel_response+0x54>
 801bc16:	2802      	cmp	r0, #2
 801bc18:	bf18      	it	ne
 801bc1a:	2001      	movne	r0, #1
 801bc1c:	bd70      	pop	{r4, r5, r6, pc}
 801bc1e:	f7f6 fa1b 	bl	8012058 <rcutils_reset_error>
 801bc22:	f640 0098 	movw	r0, #2200	@ 0x898
 801bc26:	bd70      	pop	{r4, r5, r6, pc}
 801bc28:	f640 0098 	movw	r0, #2200	@ 0x898
 801bc2c:	bd70      	pop	{r4, r5, r6, pc}
 801bc2e:	200b      	movs	r0, #11
 801bc30:	bd70      	pop	{r4, r5, r6, pc}
 801bc32:	f640 0098 	movw	r0, #2200	@ 0x898
 801bc36:	4770      	bx	lr

0801bc38 <rcl_action_wait_set_add_action_server>:
 801bc38:	2800      	cmp	r0, #0
 801bc3a:	d04d      	beq.n	801bcd8 <rcl_action_wait_set_add_action_server+0xa0>
 801bc3c:	b570      	push	{r4, r5, r6, lr}
 801bc3e:	460c      	mov	r4, r1
 801bc40:	b159      	cbz	r1, 801bc5a <rcl_action_wait_set_add_action_server+0x22>
 801bc42:	4605      	mov	r5, r0
 801bc44:	6808      	ldr	r0, [r1, #0]
 801bc46:	b140      	cbz	r0, 801bc5a <rcl_action_wait_set_add_action_server+0x22>
 801bc48:	4616      	mov	r6, r2
 801bc4a:	f7fe f965 	bl	8019f18 <rcl_service_is_valid>
 801bc4e:	b120      	cbz	r0, 801bc5a <rcl_action_wait_set_add_action_server+0x22>
 801bc50:	6820      	ldr	r0, [r4, #0]
 801bc52:	3004      	adds	r0, #4
 801bc54:	f7fe f960 	bl	8019f18 <rcl_service_is_valid>
 801bc58:	b910      	cbnz	r0, 801bc60 <rcl_action_wait_set_add_action_server+0x28>
 801bc5a:	f640 0098 	movw	r0, #2200	@ 0x898
 801bc5e:	bd70      	pop	{r4, r5, r6, pc}
 801bc60:	6820      	ldr	r0, [r4, #0]
 801bc62:	3008      	adds	r0, #8
 801bc64:	f7fe f958 	bl	8019f18 <rcl_service_is_valid>
 801bc68:	2800      	cmp	r0, #0
 801bc6a:	d0f6      	beq.n	801bc5a <rcl_action_wait_set_add_action_server+0x22>
 801bc6c:	6820      	ldr	r0, [r4, #0]
 801bc6e:	300c      	adds	r0, #12
 801bc70:	f7f5 f900 	bl	8010e74 <rcl_publisher_is_valid_except_context>
 801bc74:	2800      	cmp	r0, #0
 801bc76:	d0f0      	beq.n	801bc5a <rcl_action_wait_set_add_action_server+0x22>
 801bc78:	6820      	ldr	r0, [r4, #0]
 801bc7a:	3010      	adds	r0, #16
 801bc7c:	f7f5 f8fa 	bl	8010e74 <rcl_publisher_is_valid_except_context>
 801bc80:	2800      	cmp	r0, #0
 801bc82:	d0ea      	beq.n	801bc5a <rcl_action_wait_set_add_action_server+0x22>
 801bc84:	6821      	ldr	r1, [r4, #0]
 801bc86:	4628      	mov	r0, r5
 801bc88:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801bc8c:	f7ff fad0 	bl	801b230 <rcl_wait_set_add_service>
 801bc90:	2800      	cmp	r0, #0
 801bc92:	d1e4      	bne.n	801bc5e <rcl_action_wait_set_add_action_server+0x26>
 801bc94:	6821      	ldr	r1, [r4, #0]
 801bc96:	4628      	mov	r0, r5
 801bc98:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801bc9c:	3104      	adds	r1, #4
 801bc9e:	f7ff fac7 	bl	801b230 <rcl_wait_set_add_service>
 801bca2:	2800      	cmp	r0, #0
 801bca4:	d1db      	bne.n	801bc5e <rcl_action_wait_set_add_action_server+0x26>
 801bca6:	6821      	ldr	r1, [r4, #0]
 801bca8:	4628      	mov	r0, r5
 801bcaa:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801bcae:	3108      	adds	r1, #8
 801bcb0:	f7ff fabe 	bl	801b230 <rcl_wait_set_add_service>
 801bcb4:	2800      	cmp	r0, #0
 801bcb6:	d1d2      	bne.n	801bc5e <rcl_action_wait_set_add_action_server+0x26>
 801bcb8:	6821      	ldr	r1, [r4, #0]
 801bcba:	4628      	mov	r0, r5
 801bcbc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801bcc0:	3114      	adds	r1, #20
 801bcc2:	f7ff fa59 	bl	801b178 <rcl_wait_set_add_timer>
 801bcc6:	2800      	cmp	r0, #0
 801bcc8:	d1c9      	bne.n	801bc5e <rcl_action_wait_set_add_action_server+0x26>
 801bcca:	2e00      	cmp	r6, #0
 801bccc:	d0c7      	beq.n	801bc5e <rcl_action_wait_set_add_action_server+0x26>
 801bcce:	6823      	ldr	r3, [r4, #0]
 801bcd0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801bcd4:	6033      	str	r3, [r6, #0]
 801bcd6:	bd70      	pop	{r4, r5, r6, pc}
 801bcd8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801bcdc:	4770      	bx	lr
 801bcde:	bf00      	nop

0801bce0 <rcl_action_server_wait_set_get_entities_ready>:
 801bce0:	2800      	cmp	r0, #0
 801bce2:	d05a      	beq.n	801bd9a <rcl_action_server_wait_set_get_entities_ready+0xba>
 801bce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bce6:	460c      	mov	r4, r1
 801bce8:	b161      	cbz	r1, 801bd04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801bcea:	4605      	mov	r5, r0
 801bcec:	6808      	ldr	r0, [r1, #0]
 801bcee:	b148      	cbz	r0, 801bd04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801bcf0:	4616      	mov	r6, r2
 801bcf2:	461f      	mov	r7, r3
 801bcf4:	f7fe f910 	bl	8019f18 <rcl_service_is_valid>
 801bcf8:	b120      	cbz	r0, 801bd04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801bcfa:	6820      	ldr	r0, [r4, #0]
 801bcfc:	3004      	adds	r0, #4
 801bcfe:	f7fe f90b 	bl	8019f18 <rcl_service_is_valid>
 801bd02:	b910      	cbnz	r0, 801bd0a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801bd04:	f640 0098 	movw	r0, #2200	@ 0x898
 801bd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd0a:	6820      	ldr	r0, [r4, #0]
 801bd0c:	3008      	adds	r0, #8
 801bd0e:	f7fe f903 	bl	8019f18 <rcl_service_is_valid>
 801bd12:	2800      	cmp	r0, #0
 801bd14:	d0f6      	beq.n	801bd04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801bd16:	6820      	ldr	r0, [r4, #0]
 801bd18:	300c      	adds	r0, #12
 801bd1a:	f7f5 f8ab 	bl	8010e74 <rcl_publisher_is_valid_except_context>
 801bd1e:	2800      	cmp	r0, #0
 801bd20:	d0f0      	beq.n	801bd04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801bd22:	6820      	ldr	r0, [r4, #0]
 801bd24:	3010      	adds	r0, #16
 801bd26:	f7f5 f8a5 	bl	8010e74 <rcl_publisher_is_valid_except_context>
 801bd2a:	2800      	cmp	r0, #0
 801bd2c:	d0ea      	beq.n	801bd04 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801bd2e:	b3be      	cbz	r6, 801bda0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801bd30:	b3b7      	cbz	r7, 801bda0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801bd32:	9b06      	ldr	r3, [sp, #24]
 801bd34:	b3a3      	cbz	r3, 801bda0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801bd36:	9b07      	ldr	r3, [sp, #28]
 801bd38:	b393      	cbz	r3, 801bda0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801bd3a:	6821      	ldr	r1, [r4, #0]
 801bd3c:	692a      	ldr	r2, [r5, #16]
 801bd3e:	6a2c      	ldr	r4, [r5, #32]
 801bd40:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801bd44:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801bd48:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801bd4c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 801bd50:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801bd54:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801bd58:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801bd5c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801bd60:	1a64      	subs	r4, r4, r1
 801bd62:	fab4 f484 	clz	r4, r4
 801bd66:	0964      	lsrs	r4, r4, #5
 801bd68:	7034      	strb	r4, [r6, #0]
 801bd6a:	1d0c      	adds	r4, r1, #4
 801bd6c:	1b1b      	subs	r3, r3, r4
 801bd6e:	fab3 f383 	clz	r3, r3
 801bd72:	095b      	lsrs	r3, r3, #5
 801bd74:	f101 0408 	add.w	r4, r1, #8
 801bd78:	703b      	strb	r3, [r7, #0]
 801bd7a:	f101 0314 	add.w	r3, r1, #20
 801bd7e:	1b01      	subs	r1, r0, r4
 801bd80:	1ad3      	subs	r3, r2, r3
 801bd82:	fab1 f181 	clz	r1, r1
 801bd86:	9a06      	ldr	r2, [sp, #24]
 801bd88:	0949      	lsrs	r1, r1, #5
 801bd8a:	7011      	strb	r1, [r2, #0]
 801bd8c:	fab3 f383 	clz	r3, r3
 801bd90:	9a07      	ldr	r2, [sp, #28]
 801bd92:	095b      	lsrs	r3, r3, #5
 801bd94:	2000      	movs	r0, #0
 801bd96:	7013      	strb	r3, [r2, #0]
 801bd98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801bd9e:	4770      	bx	lr
 801bda0:	200b      	movs	r0, #11
 801bda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bda4 <_execute_event_handler>:
 801bda4:	2002      	movs	r0, #2
 801bda6:	4770      	bx	lr

0801bda8 <_cancel_goal_event_handler>:
 801bda8:	2003      	movs	r0, #3
 801bdaa:	4770      	bx	lr

0801bdac <_succeed_event_handler>:
 801bdac:	2004      	movs	r0, #4
 801bdae:	4770      	bx	lr

0801bdb0 <_abort_event_handler>:
 801bdb0:	2006      	movs	r0, #6
 801bdb2:	4770      	bx	lr

0801bdb4 <_canceled_event_handler>:
 801bdb4:	2005      	movs	r0, #5
 801bdb6:	4770      	bx	lr

0801bdb8 <rcl_action_transition_goal_state>:
 801bdb8:	b2c2      	uxtb	r2, r0
 801bdba:	2a06      	cmp	r2, #6
 801bdbc:	d80c      	bhi.n	801bdd8 <rcl_action_transition_goal_state+0x20>
 801bdbe:	2904      	cmp	r1, #4
 801bdc0:	d80a      	bhi.n	801bdd8 <rcl_action_transition_goal_state+0x20>
 801bdc2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801bdc6:	b410      	push	{r4}
 801bdc8:	1853      	adds	r3, r2, r1
 801bdca:	4c06      	ldr	r4, [pc, #24]	@ (801bde4 <rcl_action_transition_goal_state+0x2c>)
 801bdcc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801bdd0:	b123      	cbz	r3, 801bddc <rcl_action_transition_goal_state+0x24>
 801bdd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdd6:	4718      	bx	r3
 801bdd8:	2000      	movs	r0, #0
 801bdda:	4770      	bx	lr
 801bddc:	2000      	movs	r0, #0
 801bdde:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bde2:	4770      	bx	lr
 801bde4:	08021480 	.word	0x08021480

0801bde8 <rcl_action_get_zero_initialized_cancel_response>:
 801bde8:	b510      	push	{r4, lr}
 801bdea:	4c07      	ldr	r4, [pc, #28]	@ (801be08 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801bdec:	4686      	mov	lr, r0
 801bdee:	4684      	mov	ip, r0
 801bdf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bdf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bdf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bdf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bdfc:	6823      	ldr	r3, [r4, #0]
 801bdfe:	f8cc 3000 	str.w	r3, [ip]
 801be02:	4670      	mov	r0, lr
 801be04:	bd10      	pop	{r4, pc}
 801be06:	bf00      	nop
 801be08:	0802150c 	.word	0x0802150c

0801be0c <rclc_action_send_result_request>:
 801be0c:	b1d0      	cbz	r0, 801be44 <rclc_action_send_result_request+0x38>
 801be0e:	b500      	push	{lr}
 801be10:	4684      	mov	ip, r0
 801be12:	b087      	sub	sp, #28
 801be14:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801be18:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801be1c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801be20:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801be24:	f10d 0e08 	add.w	lr, sp, #8
 801be28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801be2c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801be30:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801be34:	a902      	add	r1, sp, #8
 801be36:	3010      	adds	r0, #16
 801be38:	f7ff fbda 	bl	801b5f0 <rcl_action_send_result_request>
 801be3c:	b920      	cbnz	r0, 801be48 <rclc_action_send_result_request+0x3c>
 801be3e:	b007      	add	sp, #28
 801be40:	f85d fb04 	ldr.w	pc, [sp], #4
 801be44:	200b      	movs	r0, #11
 801be46:	4770      	bx	lr
 801be48:	9001      	str	r0, [sp, #4]
 801be4a:	f7f6 f905 	bl	8012058 <rcutils_reset_error>
 801be4e:	9801      	ldr	r0, [sp, #4]
 801be50:	b007      	add	sp, #28
 801be52:	f85d fb04 	ldr.w	pc, [sp], #4
 801be56:	bf00      	nop

0801be58 <rclc_action_take_goal_handle>:
 801be58:	b160      	cbz	r0, 801be74 <rclc_action_take_goal_handle+0x1c>
 801be5a:	6883      	ldr	r3, [r0, #8]
 801be5c:	b143      	cbz	r3, 801be70 <rclc_action_take_goal_handle+0x18>
 801be5e:	6819      	ldr	r1, [r3, #0]
 801be60:	6081      	str	r1, [r0, #8]
 801be62:	2200      	movs	r2, #0
 801be64:	721a      	strb	r2, [r3, #8]
 801be66:	68c1      	ldr	r1, [r0, #12]
 801be68:	6019      	str	r1, [r3, #0]
 801be6a:	621a      	str	r2, [r3, #32]
 801be6c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801be6e:	60c3      	str	r3, [r0, #12]
 801be70:	4618      	mov	r0, r3
 801be72:	4770      	bx	lr
 801be74:	4603      	mov	r3, r0
 801be76:	e7fb      	b.n	801be70 <rclc_action_take_goal_handle+0x18>

0801be78 <rclc_action_remove_used_goal_handle>:
 801be78:	b180      	cbz	r0, 801be9c <rclc_action_remove_used_goal_handle+0x24>
 801be7a:	b179      	cbz	r1, 801be9c <rclc_action_remove_used_goal_handle+0x24>
 801be7c:	68c3      	ldr	r3, [r0, #12]
 801be7e:	4299      	cmp	r1, r3
 801be80:	d00d      	beq.n	801be9e <rclc_action_remove_used_goal_handle+0x26>
 801be82:	b12b      	cbz	r3, 801be90 <rclc_action_remove_used_goal_handle+0x18>
 801be84:	681a      	ldr	r2, [r3, #0]
 801be86:	4291      	cmp	r1, r2
 801be88:	d003      	beq.n	801be92 <rclc_action_remove_used_goal_handle+0x1a>
 801be8a:	4613      	mov	r3, r2
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d1f9      	bne.n	801be84 <rclc_action_remove_used_goal_handle+0xc>
 801be90:	4770      	bx	lr
 801be92:	680a      	ldr	r2, [r1, #0]
 801be94:	601a      	str	r2, [r3, #0]
 801be96:	6883      	ldr	r3, [r0, #8]
 801be98:	600b      	str	r3, [r1, #0]
 801be9a:	6081      	str	r1, [r0, #8]
 801be9c:	4770      	bx	lr
 801be9e:	680b      	ldr	r3, [r1, #0]
 801bea0:	60c3      	str	r3, [r0, #12]
 801bea2:	e7f8      	b.n	801be96 <rclc_action_remove_used_goal_handle+0x1e>

0801bea4 <rclc_action_find_goal_handle_by_uuid>:
 801bea4:	b538      	push	{r3, r4, r5, lr}
 801bea6:	b180      	cbz	r0, 801beca <rclc_action_find_goal_handle_by_uuid+0x26>
 801bea8:	460d      	mov	r5, r1
 801beaa:	b181      	cbz	r1, 801bece <rclc_action_find_goal_handle_by_uuid+0x2a>
 801beac:	68c4      	ldr	r4, [r0, #12]
 801beae:	b914      	cbnz	r4, 801beb6 <rclc_action_find_goal_handle_by_uuid+0x12>
 801beb0:	e009      	b.n	801bec6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801beb2:	6824      	ldr	r4, [r4, #0]
 801beb4:	b13c      	cbz	r4, 801bec6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801beb6:	f104 0009 	add.w	r0, r4, #9
 801beba:	2210      	movs	r2, #16
 801bebc:	4629      	mov	r1, r5
 801bebe:	f002 f935 	bl	801e12c <memcmp>
 801bec2:	2800      	cmp	r0, #0
 801bec4:	d1f5      	bne.n	801beb2 <rclc_action_find_goal_handle_by_uuid+0xe>
 801bec6:	4620      	mov	r0, r4
 801bec8:	bd38      	pop	{r3, r4, r5, pc}
 801beca:	4604      	mov	r4, r0
 801becc:	e7fb      	b.n	801bec6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801bece:	460c      	mov	r4, r1
 801bed0:	e7f9      	b.n	801bec6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801bed2:	bf00      	nop

0801bed4 <rclc_action_find_first_handle_by_status>:
 801bed4:	b140      	cbz	r0, 801bee8 <rclc_action_find_first_handle_by_status+0x14>
 801bed6:	68c0      	ldr	r0, [r0, #12]
 801bed8:	b910      	cbnz	r0, 801bee0 <rclc_action_find_first_handle_by_status+0xc>
 801beda:	e005      	b.n	801bee8 <rclc_action_find_first_handle_by_status+0x14>
 801bedc:	6800      	ldr	r0, [r0, #0]
 801bede:	b118      	cbz	r0, 801bee8 <rclc_action_find_first_handle_by_status+0x14>
 801bee0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801bee4:	428b      	cmp	r3, r1
 801bee6:	d1f9      	bne.n	801bedc <rclc_action_find_first_handle_by_status+0x8>
 801bee8:	4770      	bx	lr
 801beea:	bf00      	nop

0801beec <rclc_action_find_first_terminated_handle>:
 801beec:	b140      	cbz	r0, 801bf00 <rclc_action_find_first_terminated_handle+0x14>
 801beee:	68c0      	ldr	r0, [r0, #12]
 801bef0:	b910      	cbnz	r0, 801bef8 <rclc_action_find_first_terminated_handle+0xc>
 801bef2:	e005      	b.n	801bf00 <rclc_action_find_first_terminated_handle+0x14>
 801bef4:	6800      	ldr	r0, [r0, #0]
 801bef6:	b118      	cbz	r0, 801bf00 <rclc_action_find_first_terminated_handle+0x14>
 801bef8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801befc:	2b03      	cmp	r3, #3
 801befe:	ddf9      	ble.n	801bef4 <rclc_action_find_first_terminated_handle+0x8>
 801bf00:	4770      	bx	lr
 801bf02:	bf00      	nop

0801bf04 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801bf04:	b170      	cbz	r0, 801bf24 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801bf06:	68c0      	ldr	r0, [r0, #12]
 801bf08:	b160      	cbz	r0, 801bf24 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801bf0a:	b410      	push	{r4}
 801bf0c:	e001      	b.n	801bf12 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801bf0e:	6800      	ldr	r0, [r0, #0]
 801bf10:	b128      	cbz	r0, 801bf1e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801bf12:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801bf16:	4299      	cmp	r1, r3
 801bf18:	bf08      	it	eq
 801bf1a:	4294      	cmpeq	r4, r2
 801bf1c:	d1f7      	bne.n	801bf0e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801bf1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf22:	4770      	bx	lr
 801bf24:	4770      	bx	lr
 801bf26:	bf00      	nop

0801bf28 <rclc_action_find_handle_by_result_request_sequence_number>:
 801bf28:	b170      	cbz	r0, 801bf48 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801bf2a:	68c0      	ldr	r0, [r0, #12]
 801bf2c:	b160      	cbz	r0, 801bf48 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801bf2e:	b410      	push	{r4}
 801bf30:	e001      	b.n	801bf36 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801bf32:	6800      	ldr	r0, [r0, #0]
 801bf34:	b128      	cbz	r0, 801bf42 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801bf36:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801bf3a:	4299      	cmp	r1, r3
 801bf3c:	bf08      	it	eq
 801bf3e:	4294      	cmpeq	r4, r2
 801bf40:	d1f7      	bne.n	801bf32 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801bf42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf46:	4770      	bx	lr
 801bf48:	4770      	bx	lr
 801bf4a:	bf00      	nop

0801bf4c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801bf4c:	b170      	cbz	r0, 801bf6c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801bf4e:	68c0      	ldr	r0, [r0, #12]
 801bf50:	b160      	cbz	r0, 801bf6c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801bf52:	b410      	push	{r4}
 801bf54:	e001      	b.n	801bf5a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801bf56:	6800      	ldr	r0, [r0, #0]
 801bf58:	b128      	cbz	r0, 801bf66 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801bf5a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801bf5e:	4299      	cmp	r1, r3
 801bf60:	bf08      	it	eq
 801bf62:	4294      	cmpeq	r4, r2
 801bf64:	d1f7      	bne.n	801bf56 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801bf66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf6a:	4770      	bx	lr
 801bf6c:	4770      	bx	lr
 801bf6e:	bf00      	nop

0801bf70 <rclc_action_find_first_handle_with_goal_response>:
 801bf70:	b140      	cbz	r0, 801bf84 <rclc_action_find_first_handle_with_goal_response+0x14>
 801bf72:	68c0      	ldr	r0, [r0, #12]
 801bf74:	b910      	cbnz	r0, 801bf7c <rclc_action_find_first_handle_with_goal_response+0xc>
 801bf76:	e005      	b.n	801bf84 <rclc_action_find_first_handle_with_goal_response+0x14>
 801bf78:	6800      	ldr	r0, [r0, #0]
 801bf7a:	b118      	cbz	r0, 801bf84 <rclc_action_find_first_handle_with_goal_response+0x14>
 801bf7c:	f890 3020 	ldrb.w	r3, [r0, #32]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d0f9      	beq.n	801bf78 <rclc_action_find_first_handle_with_goal_response+0x8>
 801bf84:	4770      	bx	lr
 801bf86:	bf00      	nop

0801bf88 <rclc_action_find_first_handle_with_result_response>:
 801bf88:	b140      	cbz	r0, 801bf9c <rclc_action_find_first_handle_with_result_response+0x14>
 801bf8a:	68c0      	ldr	r0, [r0, #12]
 801bf8c:	b910      	cbnz	r0, 801bf94 <rclc_action_find_first_handle_with_result_response+0xc>
 801bf8e:	e005      	b.n	801bf9c <rclc_action_find_first_handle_with_result_response+0x14>
 801bf90:	6800      	ldr	r0, [r0, #0]
 801bf92:	b118      	cbz	r0, 801bf9c <rclc_action_find_first_handle_with_result_response+0x14>
 801bf94:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d0f9      	beq.n	801bf90 <rclc_action_find_first_handle_with_result_response+0x8>
 801bf9c:	4770      	bx	lr
 801bf9e:	bf00      	nop

0801bfa0 <rclc_action_server_response_goal_request>:
 801bfa0:	b198      	cbz	r0, 801bfca <rclc_action_server_response_goal_request+0x2a>
 801bfa2:	b510      	push	{r4, lr}
 801bfa4:	6844      	ldr	r4, [r0, #4]
 801bfa6:	b086      	sub	sp, #24
 801bfa8:	2200      	movs	r2, #0
 801bfaa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801bfae:	460b      	mov	r3, r1
 801bfb0:	9205      	str	r2, [sp, #20]
 801bfb2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801bfb6:	aa03      	add	r2, sp, #12
 801bfb8:	f104 0010 	add.w	r0, r4, #16
 801bfbc:	f88d 300c 	strb.w	r3, [sp, #12]
 801bfc0:	f7ff fd4a 	bl	801ba58 <rcl_action_send_goal_response>
 801bfc4:	b918      	cbnz	r0, 801bfce <rclc_action_server_response_goal_request+0x2e>
 801bfc6:	b006      	add	sp, #24
 801bfc8:	bd10      	pop	{r4, pc}
 801bfca:	200b      	movs	r0, #11
 801bfcc:	4770      	bx	lr
 801bfce:	9001      	str	r0, [sp, #4]
 801bfd0:	f7f6 f842 	bl	8012058 <rcutils_reset_error>
 801bfd4:	9801      	ldr	r0, [sp, #4]
 801bfd6:	b006      	add	sp, #24
 801bfd8:	bd10      	pop	{r4, pc}
 801bfda:	bf00      	nop
 801bfdc:	0000      	movs	r0, r0
	...

0801bfe0 <rclc_action_server_goal_cancel_accept>:
 801bfe0:	b310      	cbz	r0, 801c028 <rclc_action_server_goal_cancel_accept+0x48>
 801bfe2:	b510      	push	{r4, lr}
 801bfe4:	b090      	sub	sp, #64	@ 0x40
 801bfe6:	4604      	mov	r4, r0
 801bfe8:	a806      	add	r0, sp, #24
 801bfea:	f7ff fefd 	bl	801bde8 <rcl_action_get_zero_initialized_cancel_response>
 801bfee:	2300      	movs	r3, #0
 801bff0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801bff4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801bff8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801bffc:	f88d 3018 	strb.w	r3, [sp, #24]
 801c000:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801c004:	f8cd d01c 	str.w	sp, [sp, #28]
 801c008:	46ec      	mov	ip, sp
 801c00a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c00e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801c030 <rclc_action_server_goal_cancel_accept+0x50>
 801c012:	6860      	ldr	r0, [r4, #4]
 801c014:	aa06      	add	r2, sp, #24
 801c016:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801c01a:	3010      	adds	r0, #16
 801c01c:	ed8d 7b08 	vstr	d7, [sp, #32]
 801c020:	f7ff fdd2 	bl	801bbc8 <rcl_action_send_cancel_response>
 801c024:	b010      	add	sp, #64	@ 0x40
 801c026:	bd10      	pop	{r4, pc}
 801c028:	200b      	movs	r0, #11
 801c02a:	4770      	bx	lr
 801c02c:	f3af 8000 	nop.w
 801c030:	00000001 	.word	0x00000001
 801c034:	00000001 	.word	0x00000001

0801c038 <rclc_action_server_goal_cancel_reject>:
 801c038:	b082      	sub	sp, #8
 801c03a:	b530      	push	{r4, r5, lr}
 801c03c:	b08b      	sub	sp, #44	@ 0x2c
 801c03e:	ac0e      	add	r4, sp, #56	@ 0x38
 801c040:	e884 000c 	stmia.w	r4, {r2, r3}
 801c044:	b188      	cbz	r0, 801c06a <rclc_action_server_goal_cancel_reject+0x32>
 801c046:	4604      	mov	r4, r0
 801c048:	a801      	add	r0, sp, #4
 801c04a:	460d      	mov	r5, r1
 801c04c:	f7ff fecc 	bl	801bde8 <rcl_action_get_zero_initialized_cancel_response>
 801c050:	aa01      	add	r2, sp, #4
 801c052:	a90e      	add	r1, sp, #56	@ 0x38
 801c054:	f104 0010 	add.w	r0, r4, #16
 801c058:	f88d 5004 	strb.w	r5, [sp, #4]
 801c05c:	f7ff fdb4 	bl	801bbc8 <rcl_action_send_cancel_response>
 801c060:	b00b      	add	sp, #44	@ 0x2c
 801c062:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c066:	b002      	add	sp, #8
 801c068:	4770      	bx	lr
 801c06a:	200b      	movs	r0, #11
 801c06c:	b00b      	add	sp, #44	@ 0x2c
 801c06e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c072:	b002      	add	sp, #8
 801c074:	4770      	bx	lr
 801c076:	bf00      	nop

0801c078 <rcutils_is_directory>:
 801c078:	2000      	movs	r0, #0
 801c07a:	4770      	bx	lr

0801c07c <rcutils_join_path>:
 801c07c:	b082      	sub	sp, #8
 801c07e:	e88d 000c 	stmia.w	sp, {r2, r3}
 801c082:	2000      	movs	r0, #0
 801c084:	b002      	add	sp, #8
 801c086:	4770      	bx	lr

0801c088 <rcutils_to_native_path>:
 801c088:	b084      	sub	sp, #16
 801c08a:	a801      	add	r0, sp, #4
 801c08c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801c090:	b004      	add	sp, #16
 801c092:	2000      	movs	r0, #0
 801c094:	4770      	bx	lr
 801c096:	bf00      	nop

0801c098 <rmw_get_zero_initialized_context>:
 801c098:	b510      	push	{r4, lr}
 801c09a:	4604      	mov	r4, r0
 801c09c:	3010      	adds	r0, #16
 801c09e:	f7f6 facb 	bl	8012638 <rmw_get_zero_initialized_init_options>
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	2000      	movs	r0, #0
 801c0a6:	2100      	movs	r1, #0
 801c0a8:	e9c4 0100 	strd	r0, r1, [r4]
 801c0ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 801c0b0:	60a3      	str	r3, [r4, #8]
 801c0b2:	4620      	mov	r0, r4
 801c0b4:	bd10      	pop	{r4, pc}
 801c0b6:	bf00      	nop

0801c0b8 <rmw_time_equal>:
 801c0b8:	b4f0      	push	{r4, r5, r6, r7}
 801c0ba:	b084      	sub	sp, #16
 801c0bc:	ac04      	add	r4, sp, #16
 801c0be:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801c0c2:	4603      	mov	r3, r0
 801c0c4:	4924      	ldr	r1, [pc, #144]	@ (801c158 <rmw_time_equal+0xa0>)
 801c0c6:	9e03      	ldr	r6, [sp, #12]
 801c0c8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801c0cc:	2202      	movs	r2, #2
 801c0ce:	4299      	cmp	r1, r3
 801c0d0:	41aa      	sbcs	r2, r5
 801c0d2:	d330      	bcc.n	801c136 <rmw_time_equal+0x7e>
 801c0d4:	4c21      	ldr	r4, [pc, #132]	@ (801c15c <rmw_time_equal+0xa4>)
 801c0d6:	fba3 3204 	umull	r3, r2, r3, r4
 801c0da:	fb04 2205 	mla	r2, r4, r5, r2
 801c0de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c0e2:	43dd      	mvns	r5, r3
 801c0e4:	1a8c      	subs	r4, r1, r2
 801c0e6:	4285      	cmp	r5, r0
 801c0e8:	41b4      	sbcs	r4, r6
 801c0ea:	d332      	bcc.n	801c152 <rmw_time_equal+0x9a>
 801c0ec:	eb10 0c03 	adds.w	ip, r0, r3
 801c0f0:	eb42 0106 	adc.w	r1, r2, r6
 801c0f4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801c0f8:	4817      	ldr	r0, [pc, #92]	@ (801c158 <rmw_time_equal+0xa0>)
 801c0fa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c0fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c0fe:	2202      	movs	r2, #2
 801c100:	4298      	cmp	r0, r3
 801c102:	41b2      	sbcs	r2, r6
 801c104:	d31c      	bcc.n	801c140 <rmw_time_equal+0x88>
 801c106:	4c15      	ldr	r4, [pc, #84]	@ (801c15c <rmw_time_equal+0xa4>)
 801c108:	fba3 3204 	umull	r3, r2, r3, r4
 801c10c:	fb04 2206 	mla	r2, r4, r6, r2
 801c110:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801c114:	43de      	mvns	r6, r3
 801c116:	1a84      	subs	r4, r0, r2
 801c118:	42ae      	cmp	r6, r5
 801c11a:	41bc      	sbcs	r4, r7
 801c11c:	d315      	bcc.n	801c14a <rmw_time_equal+0x92>
 801c11e:	195b      	adds	r3, r3, r5
 801c120:	eb42 0207 	adc.w	r2, r2, r7
 801c124:	428a      	cmp	r2, r1
 801c126:	bf08      	it	eq
 801c128:	4563      	cmpeq	r3, ip
 801c12a:	bf0c      	ite	eq
 801c12c:	2001      	moveq	r0, #1
 801c12e:	2000      	movne	r0, #0
 801c130:	b004      	add	sp, #16
 801c132:	bcf0      	pop	{r4, r5, r6, r7}
 801c134:	4770      	bx	lr
 801c136:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801c13a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c13e:	e7d9      	b.n	801c0f4 <rmw_time_equal+0x3c>
 801c140:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c144:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801c148:	e7ec      	b.n	801c124 <rmw_time_equal+0x6c>
 801c14a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c14e:	4602      	mov	r2, r0
 801c150:	e7e8      	b.n	801c124 <rmw_time_equal+0x6c>
 801c152:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801c156:	e7cd      	b.n	801c0f4 <rmw_time_equal+0x3c>
 801c158:	25c17d04 	.word	0x25c17d04
 801c15c:	3b9aca00 	.word	0x3b9aca00

0801c160 <rmw_time_total_nsec>:
 801c160:	b470      	push	{r4, r5, r6}
 801c162:	b085      	sub	sp, #20
 801c164:	ac04      	add	r4, sp, #16
 801c166:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801c16a:	4603      	mov	r3, r0
 801c16c:	4912      	ldr	r1, [pc, #72]	@ (801c1b8 <rmw_time_total_nsec+0x58>)
 801c16e:	9e03      	ldr	r6, [sp, #12]
 801c170:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801c174:	2202      	movs	r2, #2
 801c176:	4299      	cmp	r1, r3
 801c178:	41aa      	sbcs	r2, r5
 801c17a:	d311      	bcc.n	801c1a0 <rmw_time_total_nsec+0x40>
 801c17c:	4c0f      	ldr	r4, [pc, #60]	@ (801c1bc <rmw_time_total_nsec+0x5c>)
 801c17e:	fba3 3204 	umull	r3, r2, r3, r4
 801c182:	fb04 2205 	mla	r2, r4, r5, r2
 801c186:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c18a:	43dd      	mvns	r5, r3
 801c18c:	1a8c      	subs	r4, r1, r2
 801c18e:	4285      	cmp	r5, r0
 801c190:	41b4      	sbcs	r4, r6
 801c192:	d30c      	bcc.n	801c1ae <rmw_time_total_nsec+0x4e>
 801c194:	1818      	adds	r0, r3, r0
 801c196:	eb42 0106 	adc.w	r1, r2, r6
 801c19a:	b005      	add	sp, #20
 801c19c:	bc70      	pop	{r4, r5, r6}
 801c19e:	4770      	bx	lr
 801c1a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c1a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c1a8:	b005      	add	sp, #20
 801c1aa:	bc70      	pop	{r4, r5, r6}
 801c1ac:	4770      	bx	lr
 801c1ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c1b2:	b005      	add	sp, #20
 801c1b4:	bc70      	pop	{r4, r5, r6}
 801c1b6:	4770      	bx	lr
 801c1b8:	25c17d04 	.word	0x25c17d04
 801c1bc:	3b9aca00 	.word	0x3b9aca00

0801c1c0 <rmw_get_zero_initialized_message_info>:
 801c1c0:	b510      	push	{r4, lr}
 801c1c2:	2240      	movs	r2, #64	@ 0x40
 801c1c4:	4604      	mov	r4, r0
 801c1c6:	2100      	movs	r1, #0
 801c1c8:	f001 ffda 	bl	801e180 <memset>
 801c1cc:	4620      	mov	r0, r4
 801c1ce:	bd10      	pop	{r4, pc}

0801c1d0 <on_status>:
 801c1d0:	b082      	sub	sp, #8
 801c1d2:	b002      	add	sp, #8
 801c1d4:	4770      	bx	lr
 801c1d6:	bf00      	nop

0801c1d8 <on_topic>:
 801c1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1dc:	4a22      	ldr	r2, [pc, #136]	@ (801c268 <on_topic+0x90>)
 801c1de:	b094      	sub	sp, #80	@ 0x50
 801c1e0:	6812      	ldr	r2, [r2, #0]
 801c1e2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801c1e4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c1e8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801c1ec:	b3c2      	cbz	r2, 801c260 <on_topic+0x88>
 801c1ee:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801c1f2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801c1f6:	e001      	b.n	801c1fc <on_topic+0x24>
 801c1f8:	6852      	ldr	r2, [r2, #4]
 801c1fa:	b38a      	cbz	r2, 801c260 <on_topic+0x88>
 801c1fc:	6894      	ldr	r4, [r2, #8]
 801c1fe:	8aa3      	ldrh	r3, [r4, #20]
 801c200:	428b      	cmp	r3, r1
 801c202:	d1f9      	bne.n	801c1f8 <on_topic+0x20>
 801c204:	7da3      	ldrb	r3, [r4, #22]
 801c206:	4283      	cmp	r3, r0
 801c208:	d1f6      	bne.n	801c1f8 <on_topic+0x20>
 801c20a:	2248      	movs	r2, #72	@ 0x48
 801c20c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801c210:	4668      	mov	r0, sp
 801c212:	f002 f87e 	bl	801e312 <memcpy>
 801c216:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801c21a:	cb0c      	ldmia	r3, {r2, r3}
 801c21c:	4620      	mov	r0, r4
 801c21e:	f7f7 fedd 	bl	8013fdc <rmw_uxrce_get_static_input_buffer_for_entity>
 801c222:	4607      	mov	r7, r0
 801c224:	b1e0      	cbz	r0, 801c260 <on_topic+0x88>
 801c226:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801c22a:	4632      	mov	r2, r6
 801c22c:	4628      	mov	r0, r5
 801c22e:	f108 0110 	add.w	r1, r8, #16
 801c232:	f7f9 fa1b 	bl	801566c <ucdr_deserialize_array_uint8_t>
 801c236:	b930      	cbnz	r0, 801c246 <on_topic+0x6e>
 801c238:	480c      	ldr	r0, [pc, #48]	@ (801c26c <on_topic+0x94>)
 801c23a:	4639      	mov	r1, r7
 801c23c:	b014      	add	sp, #80	@ 0x50
 801c23e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c242:	f000 b8bd 	b.w	801c3c0 <put_memory>
 801c246:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801c24a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801c24e:	f7f7 fcc3 	bl	8013bd8 <rmw_uros_epoch_nanos>
 801c252:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801c256:	2305      	movs	r3, #5
 801c258:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c25c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801c260:	b014      	add	sp, #80	@ 0x50
 801c262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c266:	bf00      	nop
 801c268:	2000c3f4 	.word	0x2000c3f4
 801c26c:	2000c3e4 	.word	0x2000c3e4

0801c270 <on_request>:
 801c270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c274:	4823      	ldr	r0, [pc, #140]	@ (801c304 <on_request+0x94>)
 801c276:	b094      	sub	sp, #80	@ 0x50
 801c278:	6800      	ldr	r0, [r0, #0]
 801c27a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c27c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c280:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c282:	2800      	cmp	r0, #0
 801c284:	d03b      	beq.n	801c2fe <on_request+0x8e>
 801c286:	461d      	mov	r5, r3
 801c288:	e001      	b.n	801c28e <on_request+0x1e>
 801c28a:	6840      	ldr	r0, [r0, #4]
 801c28c:	b3b8      	cbz	r0, 801c2fe <on_request+0x8e>
 801c28e:	6884      	ldr	r4, [r0, #8]
 801c290:	8b21      	ldrh	r1, [r4, #24]
 801c292:	4291      	cmp	r1, r2
 801c294:	d1f9      	bne.n	801c28a <on_request+0x1a>
 801c296:	2248      	movs	r2, #72	@ 0x48
 801c298:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801c29c:	4668      	mov	r0, sp
 801c29e:	f002 f838 	bl	801e312 <memcpy>
 801c2a2:	f104 0320 	add.w	r3, r4, #32
 801c2a6:	cb0c      	ldmia	r3, {r2, r3}
 801c2a8:	4620      	mov	r0, r4
 801c2aa:	f7f7 fe97 	bl	8013fdc <rmw_uxrce_get_static_input_buffer_for_entity>
 801c2ae:	4680      	mov	r8, r0
 801c2b0:	b328      	cbz	r0, 801c2fe <on_request+0x8e>
 801c2b2:	4638      	mov	r0, r7
 801c2b4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801c2b8:	4632      	mov	r2, r6
 801c2ba:	f107 0110 	add.w	r1, r7, #16
 801c2be:	f7f9 f9d5 	bl	801566c <ucdr_deserialize_array_uint8_t>
 801c2c2:	b930      	cbnz	r0, 801c2d2 <on_request+0x62>
 801c2c4:	4810      	ldr	r0, [pc, #64]	@ (801c308 <on_request+0x98>)
 801c2c6:	4641      	mov	r1, r8
 801c2c8:	b014      	add	sp, #80	@ 0x50
 801c2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2ce:	f000 b877 	b.w	801c3c0 <put_memory>
 801c2d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c2d4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801c2d8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801c2dc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801c2e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c2e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c2e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c2ec:	f7f7 fc74 	bl	8013bd8 <rmw_uros_epoch_nanos>
 801c2f0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801c2f4:	2303      	movs	r3, #3
 801c2f6:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c2fa:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801c2fe:	b014      	add	sp, #80	@ 0x50
 801c300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c304:	2000c3c4 	.word	0x2000c3c4
 801c308:	2000c3e4 	.word	0x2000c3e4

0801c30c <on_reply>:
 801c30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c310:	4821      	ldr	r0, [pc, #132]	@ (801c398 <on_reply+0x8c>)
 801c312:	b094      	sub	sp, #80	@ 0x50
 801c314:	6800      	ldr	r0, [r0, #0]
 801c316:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c318:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801c31c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c31e:	b3b8      	cbz	r0, 801c390 <on_reply+0x84>
 801c320:	461d      	mov	r5, r3
 801c322:	e001      	b.n	801c328 <on_reply+0x1c>
 801c324:	6840      	ldr	r0, [r0, #4]
 801c326:	b398      	cbz	r0, 801c390 <on_reply+0x84>
 801c328:	6884      	ldr	r4, [r0, #8]
 801c32a:	8b21      	ldrh	r1, [r4, #24]
 801c32c:	4291      	cmp	r1, r2
 801c32e:	d1f9      	bne.n	801c324 <on_reply+0x18>
 801c330:	2248      	movs	r2, #72	@ 0x48
 801c332:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801c336:	4668      	mov	r0, sp
 801c338:	f001 ffeb 	bl	801e312 <memcpy>
 801c33c:	f104 0320 	add.w	r3, r4, #32
 801c340:	cb0c      	ldmia	r3, {r2, r3}
 801c342:	4620      	mov	r0, r4
 801c344:	f7f7 fe4a 	bl	8013fdc <rmw_uxrce_get_static_input_buffer_for_entity>
 801c348:	4680      	mov	r8, r0
 801c34a:	b308      	cbz	r0, 801c390 <on_reply+0x84>
 801c34c:	4638      	mov	r0, r7
 801c34e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801c352:	4632      	mov	r2, r6
 801c354:	f107 0110 	add.w	r1, r7, #16
 801c358:	f7f9 f988 	bl	801566c <ucdr_deserialize_array_uint8_t>
 801c35c:	b930      	cbnz	r0, 801c36c <on_reply+0x60>
 801c35e:	480f      	ldr	r0, [pc, #60]	@ (801c39c <on_reply+0x90>)
 801c360:	4641      	mov	r1, r8
 801c362:	b014      	add	sp, #80	@ 0x50
 801c364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c368:	f000 b82a 	b.w	801c3c0 <put_memory>
 801c36c:	2200      	movs	r2, #0
 801c36e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801c372:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801c376:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801c37a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801c37e:	f7f7 fc2b 	bl	8013bd8 <rmw_uros_epoch_nanos>
 801c382:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801c386:	2304      	movs	r3, #4
 801c388:	e942 0102 	strd	r0, r1, [r2, #-8]
 801c38c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801c390:	b014      	add	sp, #80	@ 0x50
 801c392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c396:	bf00      	nop
 801c398:	200077b8 	.word	0x200077b8
 801c39c:	2000c3e4 	.word	0x2000c3e4

0801c3a0 <get_memory>:
 801c3a0:	4603      	mov	r3, r0
 801c3a2:	6840      	ldr	r0, [r0, #4]
 801c3a4:	b158      	cbz	r0, 801c3be <get_memory+0x1e>
 801c3a6:	6842      	ldr	r2, [r0, #4]
 801c3a8:	605a      	str	r2, [r3, #4]
 801c3aa:	b10a      	cbz	r2, 801c3b0 <get_memory+0x10>
 801c3ac:	2100      	movs	r1, #0
 801c3ae:	6011      	str	r1, [r2, #0]
 801c3b0:	681a      	ldr	r2, [r3, #0]
 801c3b2:	6042      	str	r2, [r0, #4]
 801c3b4:	b102      	cbz	r2, 801c3b8 <get_memory+0x18>
 801c3b6:	6010      	str	r0, [r2, #0]
 801c3b8:	2200      	movs	r2, #0
 801c3ba:	6002      	str	r2, [r0, #0]
 801c3bc:	6018      	str	r0, [r3, #0]
 801c3be:	4770      	bx	lr

0801c3c0 <put_memory>:
 801c3c0:	680b      	ldr	r3, [r1, #0]
 801c3c2:	b10b      	cbz	r3, 801c3c8 <put_memory+0x8>
 801c3c4:	684a      	ldr	r2, [r1, #4]
 801c3c6:	605a      	str	r2, [r3, #4]
 801c3c8:	684a      	ldr	r2, [r1, #4]
 801c3ca:	b102      	cbz	r2, 801c3ce <put_memory+0xe>
 801c3cc:	6013      	str	r3, [r2, #0]
 801c3ce:	6803      	ldr	r3, [r0, #0]
 801c3d0:	428b      	cmp	r3, r1
 801c3d2:	6843      	ldr	r3, [r0, #4]
 801c3d4:	bf08      	it	eq
 801c3d6:	6002      	streq	r2, [r0, #0]
 801c3d8:	604b      	str	r3, [r1, #4]
 801c3da:	b103      	cbz	r3, 801c3de <put_memory+0x1e>
 801c3dc:	6019      	str	r1, [r3, #0]
 801c3de:	2300      	movs	r3, #0
 801c3e0:	600b      	str	r3, [r1, #0]
 801c3e2:	6041      	str	r1, [r0, #4]
 801c3e4:	4770      	bx	lr
 801c3e6:	bf00      	nop

0801c3e8 <rmw_create_guard_condition>:
 801c3e8:	b538      	push	{r3, r4, r5, lr}
 801c3ea:	4605      	mov	r5, r0
 801c3ec:	4807      	ldr	r0, [pc, #28]	@ (801c40c <rmw_create_guard_condition+0x24>)
 801c3ee:	f7ff ffd7 	bl	801c3a0 <get_memory>
 801c3f2:	b148      	cbz	r0, 801c408 <rmw_create_guard_condition+0x20>
 801c3f4:	6884      	ldr	r4, [r0, #8]
 801c3f6:	2300      	movs	r3, #0
 801c3f8:	7423      	strb	r3, [r4, #16]
 801c3fa:	61e5      	str	r5, [r4, #28]
 801c3fc:	f7f6 fbc0 	bl	8012b80 <rmw_get_implementation_identifier>
 801c400:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801c404:	f104 0014 	add.w	r0, r4, #20
 801c408:	bd38      	pop	{r3, r4, r5, pc}
 801c40a:	bf00      	nop
 801c40c:	2000c384 	.word	0x2000c384

0801c410 <rmw_destroy_guard_condition>:
 801c410:	b508      	push	{r3, lr}
 801c412:	4b08      	ldr	r3, [pc, #32]	@ (801c434 <rmw_destroy_guard_condition+0x24>)
 801c414:	6819      	ldr	r1, [r3, #0]
 801c416:	b911      	cbnz	r1, 801c41e <rmw_destroy_guard_condition+0xe>
 801c418:	e00a      	b.n	801c430 <rmw_destroy_guard_condition+0x20>
 801c41a:	6849      	ldr	r1, [r1, #4]
 801c41c:	b141      	cbz	r1, 801c430 <rmw_destroy_guard_condition+0x20>
 801c41e:	688b      	ldr	r3, [r1, #8]
 801c420:	3314      	adds	r3, #20
 801c422:	4298      	cmp	r0, r3
 801c424:	d1f9      	bne.n	801c41a <rmw_destroy_guard_condition+0xa>
 801c426:	4803      	ldr	r0, [pc, #12]	@ (801c434 <rmw_destroy_guard_condition+0x24>)
 801c428:	f7ff ffca 	bl	801c3c0 <put_memory>
 801c42c:	2000      	movs	r0, #0
 801c42e:	bd08      	pop	{r3, pc}
 801c430:	2001      	movs	r0, #1
 801c432:	bd08      	pop	{r3, pc}
 801c434:	2000c384 	.word	0x2000c384

0801c438 <create_topic>:
 801c438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c43c:	4605      	mov	r5, r0
 801c43e:	b084      	sub	sp, #16
 801c440:	4822      	ldr	r0, [pc, #136]	@ (801c4cc <create_topic+0x94>)
 801c442:	460f      	mov	r7, r1
 801c444:	4616      	mov	r6, r2
 801c446:	f7ff ffab 	bl	801c3a0 <get_memory>
 801c44a:	4604      	mov	r4, r0
 801c44c:	2800      	cmp	r0, #0
 801c44e:	d039      	beq.n	801c4c4 <create_topic+0x8c>
 801c450:	692b      	ldr	r3, [r5, #16]
 801c452:	6884      	ldr	r4, [r0, #8]
 801c454:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 801c4d4 <create_topic+0x9c>
 801c458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c45c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801c460:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801c464:	1c42      	adds	r2, r0, #1
 801c466:	2102      	movs	r1, #2
 801c468:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801c46c:	f7f9 fcf4 	bl	8015e58 <uxr_object_id>
 801c470:	223c      	movs	r2, #60	@ 0x3c
 801c472:	6120      	str	r0, [r4, #16]
 801c474:	4641      	mov	r1, r8
 801c476:	4638      	mov	r0, r7
 801c478:	f7f7 ffa4 	bl	80143c4 <generate_topic_name>
 801c47c:	b1f0      	cbz	r0, 801c4bc <create_topic+0x84>
 801c47e:	4f14      	ldr	r7, [pc, #80]	@ (801c4d0 <create_topic+0x98>)
 801c480:	4630      	mov	r0, r6
 801c482:	2264      	movs	r2, #100	@ 0x64
 801c484:	4639      	mov	r1, r7
 801c486:	f7f7 ff6d 	bl	8014364 <generate_type_name>
 801c48a:	b1b8      	cbz	r0, 801c4bc <create_topic+0x84>
 801c48c:	6928      	ldr	r0, [r5, #16]
 801c48e:	2306      	movs	r3, #6
 801c490:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801c494:	f8cd 8000 	str.w	r8, [sp]
 801c498:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801c49c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c4a0:	6811      	ldr	r1, [r2, #0]
 801c4a2:	696b      	ldr	r3, [r5, #20]
 801c4a4:	6922      	ldr	r2, [r4, #16]
 801c4a6:	f7f9 fac5 	bl	8015a34 <uxr_buffer_create_topic_bin>
 801c4aa:	4602      	mov	r2, r0
 801c4ac:	6928      	ldr	r0, [r5, #16]
 801c4ae:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801c4b2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801c4b6:	f7f7 fe85 	bl	80141c4 <run_xrce_session>
 801c4ba:	b918      	cbnz	r0, 801c4c4 <create_topic+0x8c>
 801c4bc:	4620      	mov	r0, r4
 801c4be:	f7f7 fd81 	bl	8013fc4 <rmw_uxrce_fini_topic_memory>
 801c4c2:	2400      	movs	r4, #0
 801c4c4:	4620      	mov	r0, r4
 801c4c6:	b004      	add	sp, #16
 801c4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4cc:	2000c404 	.word	0x2000c404
 801c4d0:	2000c4e4 	.word	0x2000c4e4
 801c4d4:	2000c4a8 	.word	0x2000c4a8

0801c4d8 <destroy_topic>:
 801c4d8:	b538      	push	{r3, r4, r5, lr}
 801c4da:	6985      	ldr	r5, [r0, #24]
 801c4dc:	b1d5      	cbz	r5, 801c514 <destroy_topic+0x3c>
 801c4de:	4604      	mov	r4, r0
 801c4e0:	6928      	ldr	r0, [r5, #16]
 801c4e2:	6922      	ldr	r2, [r4, #16]
 801c4e4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801c4e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c4ec:	6819      	ldr	r1, [r3, #0]
 801c4ee:	f7f9 fa23 	bl	8015938 <uxr_buffer_delete_entity>
 801c4f2:	4602      	mov	r2, r0
 801c4f4:	6928      	ldr	r0, [r5, #16]
 801c4f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801c4fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801c4fe:	f7f7 fe61 	bl	80141c4 <run_xrce_session>
 801c502:	2800      	cmp	r0, #0
 801c504:	4620      	mov	r0, r4
 801c506:	bf14      	ite	ne
 801c508:	2400      	movne	r4, #0
 801c50a:	2402      	moveq	r4, #2
 801c50c:	f7f7 fd5a 	bl	8013fc4 <rmw_uxrce_fini_topic_memory>
 801c510:	4620      	mov	r0, r4
 801c512:	bd38      	pop	{r3, r4, r5, pc}
 801c514:	2401      	movs	r4, #1
 801c516:	4620      	mov	r0, r4
 801c518:	bd38      	pop	{r3, r4, r5, pc}
 801c51a:	bf00      	nop

0801c51c <rmw_take_with_info>:
 801c51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c51e:	4604      	mov	r4, r0
 801c520:	6800      	ldr	r0, [r0, #0]
 801c522:	b089      	sub	sp, #36	@ 0x24
 801c524:	460f      	mov	r7, r1
 801c526:	4615      	mov	r5, r2
 801c528:	b128      	cbz	r0, 801c536 <rmw_take_with_info+0x1a>
 801c52a:	4b24      	ldr	r3, [pc, #144]	@ (801c5bc <rmw_take_with_info+0xa0>)
 801c52c:	6819      	ldr	r1, [r3, #0]
 801c52e:	f7e3 fe77 	bl	8000220 <strcmp>
 801c532:	2800      	cmp	r0, #0
 801c534:	d13e      	bne.n	801c5b4 <rmw_take_with_info+0x98>
 801c536:	b305      	cbz	r5, 801c57a <rmw_take_with_info+0x5e>
 801c538:	6864      	ldr	r4, [r4, #4]
 801c53a:	2300      	movs	r3, #0
 801c53c:	702b      	strb	r3, [r5, #0]
 801c53e:	f7f7 fdc3 	bl	80140c8 <rmw_uxrce_clean_expired_static_input_buffer>
 801c542:	4620      	mov	r0, r4
 801c544:	f7f7 fd9a 	bl	801407c <rmw_uxrce_find_static_input_buffer_by_owner>
 801c548:	4606      	mov	r6, r0
 801c54a:	b1f0      	cbz	r0, 801c58a <rmw_take_with_info+0x6e>
 801c54c:	6881      	ldr	r1, [r0, #8]
 801c54e:	4668      	mov	r0, sp
 801c550:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801c554:	3110      	adds	r1, #16
 801c556:	f7f3 fe7f 	bl	8010258 <ucdr_init_buffer>
 801c55a:	69a3      	ldr	r3, [r4, #24]
 801c55c:	4639      	mov	r1, r7
 801c55e:	68db      	ldr	r3, [r3, #12]
 801c560:	4668      	mov	r0, sp
 801c562:	4798      	blx	r3
 801c564:	4631      	mov	r1, r6
 801c566:	4604      	mov	r4, r0
 801c568:	4815      	ldr	r0, [pc, #84]	@ (801c5c0 <rmw_take_with_info+0xa4>)
 801c56a:	f7ff ff29 	bl	801c3c0 <put_memory>
 801c56e:	702c      	strb	r4, [r5, #0]
 801c570:	f084 0001 	eor.w	r0, r4, #1
 801c574:	b2c0      	uxtb	r0, r0
 801c576:	b009      	add	sp, #36	@ 0x24
 801c578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c57a:	6864      	ldr	r4, [r4, #4]
 801c57c:	f7f7 fda4 	bl	80140c8 <rmw_uxrce_clean_expired_static_input_buffer>
 801c580:	4620      	mov	r0, r4
 801c582:	f7f7 fd7b 	bl	801407c <rmw_uxrce_find_static_input_buffer_by_owner>
 801c586:	4605      	mov	r5, r0
 801c588:	b910      	cbnz	r0, 801c590 <rmw_take_with_info+0x74>
 801c58a:	2001      	movs	r0, #1
 801c58c:	b009      	add	sp, #36	@ 0x24
 801c58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c590:	68a9      	ldr	r1, [r5, #8]
 801c592:	4668      	mov	r0, sp
 801c594:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801c598:	3110      	adds	r1, #16
 801c59a:	f7f3 fe5d 	bl	8010258 <ucdr_init_buffer>
 801c59e:	69a3      	ldr	r3, [r4, #24]
 801c5a0:	4639      	mov	r1, r7
 801c5a2:	68db      	ldr	r3, [r3, #12]
 801c5a4:	4668      	mov	r0, sp
 801c5a6:	4798      	blx	r3
 801c5a8:	4629      	mov	r1, r5
 801c5aa:	4604      	mov	r4, r0
 801c5ac:	4804      	ldr	r0, [pc, #16]	@ (801c5c0 <rmw_take_with_info+0xa4>)
 801c5ae:	f7ff ff07 	bl	801c3c0 <put_memory>
 801c5b2:	e7dd      	b.n	801c570 <rmw_take_with_info+0x54>
 801c5b4:	200c      	movs	r0, #12
 801c5b6:	b009      	add	sp, #36	@ 0x24
 801c5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c5ba:	bf00      	nop
 801c5bc:	08021548 	.word	0x08021548
 801c5c0:	2000c3e4 	.word	0x2000c3e4

0801c5c4 <rmw_trigger_guard_condition>:
 801c5c4:	b160      	cbz	r0, 801c5e0 <rmw_trigger_guard_condition+0x1c>
 801c5c6:	b510      	push	{r4, lr}
 801c5c8:	4604      	mov	r4, r0
 801c5ca:	6800      	ldr	r0, [r0, #0]
 801c5cc:	f7f7 ff14 	bl	80143f8 <is_uxrce_rmw_identifier_valid>
 801c5d0:	b908      	cbnz	r0, 801c5d6 <rmw_trigger_guard_condition+0x12>
 801c5d2:	2001      	movs	r0, #1
 801c5d4:	bd10      	pop	{r4, pc}
 801c5d6:	6863      	ldr	r3, [r4, #4]
 801c5d8:	2201      	movs	r2, #1
 801c5da:	741a      	strb	r2, [r3, #16]
 801c5dc:	2000      	movs	r0, #0
 801c5de:	bd10      	pop	{r4, pc}
 801c5e0:	2001      	movs	r0, #1
 801c5e2:	4770      	bx	lr

0801c5e4 <rmw_wait>:
 801c5e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c5e8:	b089      	sub	sp, #36	@ 0x24
 801c5ea:	4605      	mov	r5, r0
 801c5ec:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c5ee:	460e      	mov	r6, r1
 801c5f0:	4698      	mov	r8, r3
 801c5f2:	4691      	mov	r9, r2
 801c5f4:	2a00      	cmp	r2, #0
 801c5f6:	f000 810a 	beq.w	801c80e <rmw_wait+0x22a>
 801c5fa:	b16c      	cbz	r4, 801c618 <rmw_wait+0x34>
 801c5fc:	4bae      	ldr	r3, [pc, #696]	@ (801c8b8 <rmw_wait+0x2d4>)
 801c5fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c600:	af04      	add	r7, sp, #16
 801c602:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801c606:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801c60a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801c60e:	f7ff fd53 	bl	801c0b8 <rmw_time_equal>
 801c612:	2800      	cmp	r0, #0
 801c614:	f000 8127 	beq.w	801c866 <rmw_wait+0x282>
 801c618:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801c61c:	f7f7 fd54 	bl	80140c8 <rmw_uxrce_clean_expired_static_input_buffer>
 801c620:	4ba6      	ldr	r3, [pc, #664]	@ (801c8bc <rmw_wait+0x2d8>)
 801c622:	681c      	ldr	r4, [r3, #0]
 801c624:	b14c      	cbz	r4, 801c63a <rmw_wait+0x56>
 801c626:	4623      	mov	r3, r4
 801c628:	2100      	movs	r1, #0
 801c62a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801c62e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801c632:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801c636:	2b00      	cmp	r3, #0
 801c638:	d1f7      	bne.n	801c62a <rmw_wait+0x46>
 801c63a:	f1b9 0f00 	cmp.w	r9, #0
 801c63e:	d011      	beq.n	801c664 <rmw_wait+0x80>
 801c640:	f8d9 1000 	ldr.w	r1, [r9]
 801c644:	b171      	cbz	r1, 801c664 <rmw_wait+0x80>
 801c646:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801c64a:	2300      	movs	r3, #0
 801c64c:	2001      	movs	r0, #1
 801c64e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801c652:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801c654:	6912      	ldr	r2, [r2, #16]
 801c656:	3301      	adds	r3, #1
 801c658:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801c65c:	4299      	cmp	r1, r3
 801c65e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801c662:	d1f4      	bne.n	801c64e <rmw_wait+0x6a>
 801c664:	f1b8 0f00 	cmp.w	r8, #0
 801c668:	d011      	beq.n	801c68e <rmw_wait+0xaa>
 801c66a:	f8d8 1000 	ldr.w	r1, [r8]
 801c66e:	b171      	cbz	r1, 801c68e <rmw_wait+0xaa>
 801c670:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801c674:	2300      	movs	r3, #0
 801c676:	2001      	movs	r0, #1
 801c678:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801c67c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801c67e:	6912      	ldr	r2, [r2, #16]
 801c680:	3301      	adds	r3, #1
 801c682:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801c686:	4299      	cmp	r1, r3
 801c688:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801c68c:	d1f4      	bne.n	801c678 <rmw_wait+0x94>
 801c68e:	b185      	cbz	r5, 801c6b2 <rmw_wait+0xce>
 801c690:	6829      	ldr	r1, [r5, #0]
 801c692:	b171      	cbz	r1, 801c6b2 <rmw_wait+0xce>
 801c694:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801c698:	2300      	movs	r3, #0
 801c69a:	2001      	movs	r0, #1
 801c69c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801c6a0:	6a12      	ldr	r2, [r2, #32]
 801c6a2:	6912      	ldr	r2, [r2, #16]
 801c6a4:	3301      	adds	r3, #1
 801c6a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801c6aa:	4299      	cmp	r1, r3
 801c6ac:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801c6b0:	d1f4      	bne.n	801c69c <rmw_wait+0xb8>
 801c6b2:	b34c      	cbz	r4, 801c708 <rmw_wait+0x124>
 801c6b4:	4622      	mov	r2, r4
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801c6bc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801c6c0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801c6c4:	440b      	add	r3, r1
 801c6c6:	b2db      	uxtb	r3, r3
 801c6c8:	2a00      	cmp	r2, #0
 801c6ca:	d1f5      	bne.n	801c6b8 <rmw_wait+0xd4>
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	f000 8084 	beq.w	801c7da <rmw_wait+0x1f6>
 801c6d2:	1c7a      	adds	r2, r7, #1
 801c6d4:	d00d      	beq.n	801c6f2 <rmw_wait+0x10e>
 801c6d6:	ee07 7a90 	vmov	s15, r7
 801c6da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801c6de:	ee07 3a90 	vmov	s15, r3
 801c6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c6ea:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801c6ee:	ee17 7a90 	vmov	r7, s15
 801c6f2:	68a0      	ldr	r0, [r4, #8]
 801c6f4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801c6f8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	f040 8090 	bne.w	801c822 <rmw_wait+0x23e>
 801c702:	6864      	ldr	r4, [r4, #4]
 801c704:	2c00      	cmp	r4, #0
 801c706:	d1f4      	bne.n	801c6f2 <rmw_wait+0x10e>
 801c708:	f1b9 0f00 	cmp.w	r9, #0
 801c70c:	f000 80bc 	beq.w	801c888 <rmw_wait+0x2a4>
 801c710:	f8d9 7000 	ldr.w	r7, [r9]
 801c714:	2f00      	cmp	r7, #0
 801c716:	f000 808e 	beq.w	801c836 <rmw_wait+0x252>
 801c71a:	2400      	movs	r4, #0
 801c71c:	4627      	mov	r7, r4
 801c71e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c722:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801c726:	f7f7 fca9 	bl	801407c <rmw_uxrce_find_static_input_buffer_by_owner>
 801c72a:	2800      	cmp	r0, #0
 801c72c:	d05f      	beq.n	801c7ee <rmw_wait+0x20a>
 801c72e:	f8d9 3000 	ldr.w	r3, [r9]
 801c732:	3401      	adds	r4, #1
 801c734:	42a3      	cmp	r3, r4
 801c736:	f04f 0701 	mov.w	r7, #1
 801c73a:	d8f0      	bhi.n	801c71e <rmw_wait+0x13a>
 801c73c:	f1b8 0f00 	cmp.w	r8, #0
 801c740:	d012      	beq.n	801c768 <rmw_wait+0x184>
 801c742:	f8d8 3000 	ldr.w	r3, [r8]
 801c746:	b17b      	cbz	r3, 801c768 <rmw_wait+0x184>
 801c748:	2400      	movs	r4, #0
 801c74a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c74e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801c752:	f7f7 fc93 	bl	801407c <rmw_uxrce_find_static_input_buffer_by_owner>
 801c756:	2800      	cmp	r0, #0
 801c758:	d051      	beq.n	801c7fe <rmw_wait+0x21a>
 801c75a:	f8d8 3000 	ldr.w	r3, [r8]
 801c75e:	3401      	adds	r4, #1
 801c760:	42a3      	cmp	r3, r4
 801c762:	f04f 0701 	mov.w	r7, #1
 801c766:	d8f0      	bhi.n	801c74a <rmw_wait+0x166>
 801c768:	b1dd      	cbz	r5, 801c7a2 <rmw_wait+0x1be>
 801c76a:	682b      	ldr	r3, [r5, #0]
 801c76c:	b1cb      	cbz	r3, 801c7a2 <rmw_wait+0x1be>
 801c76e:	2400      	movs	r4, #0
 801c770:	686b      	ldr	r3, [r5, #4]
 801c772:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801c776:	f7f7 fc81 	bl	801407c <rmw_uxrce_find_static_input_buffer_by_owner>
 801c77a:	b158      	cbz	r0, 801c794 <rmw_wait+0x1b0>
 801c77c:	682b      	ldr	r3, [r5, #0]
 801c77e:	3401      	adds	r4, #1
 801c780:	42a3      	cmp	r3, r4
 801c782:	d969      	bls.n	801c858 <rmw_wait+0x274>
 801c784:	686b      	ldr	r3, [r5, #4]
 801c786:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801c78a:	2701      	movs	r7, #1
 801c78c:	f7f7 fc76 	bl	801407c <rmw_uxrce_find_static_input_buffer_by_owner>
 801c790:	2800      	cmp	r0, #0
 801c792:	d1f3      	bne.n	801c77c <rmw_wait+0x198>
 801c794:	e9d5 3200 	ldrd	r3, r2, [r5]
 801c798:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801c79c:	3401      	adds	r4, #1
 801c79e:	42a3      	cmp	r3, r4
 801c7a0:	d8e6      	bhi.n	801c770 <rmw_wait+0x18c>
 801c7a2:	b1a6      	cbz	r6, 801c7ce <rmw_wait+0x1ea>
 801c7a4:	6834      	ldr	r4, [r6, #0]
 801c7a6:	b194      	cbz	r4, 801c7ce <rmw_wait+0x1ea>
 801c7a8:	2300      	movs	r3, #0
 801c7aa:	461d      	mov	r5, r3
 801c7ac:	e004      	b.n	801c7b8 <rmw_wait+0x1d4>
 801c7ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801c7b2:	3301      	adds	r3, #1
 801c7b4:	42a3      	cmp	r3, r4
 801c7b6:	d00a      	beq.n	801c7ce <rmw_wait+0x1ea>
 801c7b8:	6870      	ldr	r0, [r6, #4]
 801c7ba:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801c7be:	7c0a      	ldrb	r2, [r1, #16]
 801c7c0:	2a00      	cmp	r2, #0
 801c7c2:	d0f4      	beq.n	801c7ae <rmw_wait+0x1ca>
 801c7c4:	3301      	adds	r3, #1
 801c7c6:	42a3      	cmp	r3, r4
 801c7c8:	740d      	strb	r5, [r1, #16]
 801c7ca:	4617      	mov	r7, r2
 801c7cc:	d1f4      	bne.n	801c7b8 <rmw_wait+0x1d4>
 801c7ce:	2f00      	cmp	r7, #0
 801c7d0:	d03e      	beq.n	801c850 <rmw_wait+0x26c>
 801c7d2:	2000      	movs	r0, #0
 801c7d4:	b009      	add	sp, #36	@ 0x24
 801c7d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7da:	68a0      	ldr	r0, [r4, #8]
 801c7dc:	2100      	movs	r1, #0
 801c7de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c7e2:	f7fa f951 	bl	8016a88 <uxr_run_session_timeout>
 801c7e6:	6864      	ldr	r4, [r4, #4]
 801c7e8:	2c00      	cmp	r4, #0
 801c7ea:	d1f6      	bne.n	801c7da <rmw_wait+0x1f6>
 801c7ec:	e78c      	b.n	801c708 <rmw_wait+0x124>
 801c7ee:	e9d9 3200 	ldrd	r3, r2, [r9]
 801c7f2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801c7f6:	3401      	adds	r4, #1
 801c7f8:	42a3      	cmp	r3, r4
 801c7fa:	d890      	bhi.n	801c71e <rmw_wait+0x13a>
 801c7fc:	e79e      	b.n	801c73c <rmw_wait+0x158>
 801c7fe:	e9d8 3200 	ldrd	r3, r2, [r8]
 801c802:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801c806:	3401      	adds	r4, #1
 801c808:	429c      	cmp	r4, r3
 801c80a:	d39e      	bcc.n	801c74a <rmw_wait+0x166>
 801c80c:	e7ac      	b.n	801c768 <rmw_wait+0x184>
 801c80e:	2b00      	cmp	r3, #0
 801c810:	f47f aef3 	bne.w	801c5fa <rmw_wait+0x16>
 801c814:	2800      	cmp	r0, #0
 801c816:	f47f aef0 	bne.w	801c5fa <rmw_wait+0x16>
 801c81a:	2900      	cmp	r1, #0
 801c81c:	f47f aeed 	bne.w	801c5fa <rmw_wait+0x16>
 801c820:	e7d7      	b.n	801c7d2 <rmw_wait+0x1ee>
 801c822:	4639      	mov	r1, r7
 801c824:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c828:	f7fa f948 	bl	8016abc <uxr_run_session_until_data>
 801c82c:	6864      	ldr	r4, [r4, #4]
 801c82e:	2c00      	cmp	r4, #0
 801c830:	f47f af5f 	bne.w	801c6f2 <rmw_wait+0x10e>
 801c834:	e768      	b.n	801c708 <rmw_wait+0x124>
 801c836:	f1b8 0f00 	cmp.w	r8, #0
 801c83a:	d032      	beq.n	801c8a2 <rmw_wait+0x2be>
 801c83c:	f8d8 3000 	ldr.w	r3, [r8]
 801c840:	2b00      	cmp	r3, #0
 801c842:	d181      	bne.n	801c748 <rmw_wait+0x164>
 801c844:	461f      	mov	r7, r3
 801c846:	2d00      	cmp	r5, #0
 801c848:	d18f      	bne.n	801c76a <rmw_wait+0x186>
 801c84a:	462f      	mov	r7, r5
 801c84c:	2e00      	cmp	r6, #0
 801c84e:	d1a9      	bne.n	801c7a4 <rmw_wait+0x1c0>
 801c850:	2002      	movs	r0, #2
 801c852:	b009      	add	sp, #36	@ 0x24
 801c854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c858:	2e00      	cmp	r6, #0
 801c85a:	d0ba      	beq.n	801c7d2 <rmw_wait+0x1ee>
 801c85c:	6834      	ldr	r4, [r6, #0]
 801c85e:	2701      	movs	r7, #1
 801c860:	2c00      	cmp	r4, #0
 801c862:	d1a1      	bne.n	801c7a8 <rmw_wait+0x1c4>
 801c864:	e7b5      	b.n	801c7d2 <rmw_wait+0x1ee>
 801c866:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801c86a:	f7ff fc79 	bl	801c160 <rmw_time_total_nsec>
 801c86e:	2300      	movs	r3, #0
 801c870:	4a13      	ldr	r2, [pc, #76]	@ (801c8c0 <rmw_wait+0x2dc>)
 801c872:	f7e4 fa49 	bl	8000d08 <__aeabi_uldivmod>
 801c876:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801c87a:	f171 0300 	sbcs.w	r3, r1, #0
 801c87e:	4607      	mov	r7, r0
 801c880:	bfa8      	it	ge
 801c882:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801c886:	e6c9      	b.n	801c61c <rmw_wait+0x38>
 801c888:	f1b8 0f00 	cmp.w	r8, #0
 801c88c:	d009      	beq.n	801c8a2 <rmw_wait+0x2be>
 801c88e:	f8d8 3000 	ldr.w	r3, [r8]
 801c892:	464f      	mov	r7, r9
 801c894:	2b00      	cmp	r3, #0
 801c896:	f47f af57 	bne.w	801c748 <rmw_wait+0x164>
 801c89a:	2d00      	cmp	r5, #0
 801c89c:	f47f af65 	bne.w	801c76a <rmw_wait+0x186>
 801c8a0:	e7d3      	b.n	801c84a <rmw_wait+0x266>
 801c8a2:	b17d      	cbz	r5, 801c8c4 <rmw_wait+0x2e0>
 801c8a4:	682b      	ldr	r3, [r5, #0]
 801c8a6:	4647      	mov	r7, r8
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	f47f af60 	bne.w	801c76e <rmw_wait+0x18a>
 801c8ae:	2e00      	cmp	r6, #0
 801c8b0:	f47f af78 	bne.w	801c7a4 <rmw_wait+0x1c0>
 801c8b4:	e7cc      	b.n	801c850 <rmw_wait+0x26c>
 801c8b6:	bf00      	nop
 801c8b8:	0801f7e0 	.word	0x0801f7e0
 801c8bc:	2000c3d4 	.word	0x2000c3d4
 801c8c0:	000f4240 	.word	0x000f4240
 801c8c4:	2e00      	cmp	r6, #0
 801c8c6:	d0c3      	beq.n	801c850 <rmw_wait+0x26c>
 801c8c8:	6834      	ldr	r4, [r6, #0]
 801c8ca:	462f      	mov	r7, r5
 801c8cc:	2c00      	cmp	r4, #0
 801c8ce:	f47f af6b 	bne.w	801c7a8 <rmw_wait+0x1c4>
 801c8d2:	e7bd      	b.n	801c850 <rmw_wait+0x26c>

0801c8d4 <rmw_create_wait_set>:
 801c8d4:	b508      	push	{r3, lr}
 801c8d6:	4803      	ldr	r0, [pc, #12]	@ (801c8e4 <rmw_create_wait_set+0x10>)
 801c8d8:	f7ff fd62 	bl	801c3a0 <get_memory>
 801c8dc:	b108      	cbz	r0, 801c8e2 <rmw_create_wait_set+0xe>
 801c8de:	6880      	ldr	r0, [r0, #8]
 801c8e0:	3010      	adds	r0, #16
 801c8e2:	bd08      	pop	{r3, pc}
 801c8e4:	2000c414 	.word	0x2000c414

0801c8e8 <rmw_destroy_wait_set>:
 801c8e8:	b508      	push	{r3, lr}
 801c8ea:	4b08      	ldr	r3, [pc, #32]	@ (801c90c <rmw_destroy_wait_set+0x24>)
 801c8ec:	6819      	ldr	r1, [r3, #0]
 801c8ee:	b911      	cbnz	r1, 801c8f6 <rmw_destroy_wait_set+0xe>
 801c8f0:	e00a      	b.n	801c908 <rmw_destroy_wait_set+0x20>
 801c8f2:	6849      	ldr	r1, [r1, #4]
 801c8f4:	b141      	cbz	r1, 801c908 <rmw_destroy_wait_set+0x20>
 801c8f6:	688b      	ldr	r3, [r1, #8]
 801c8f8:	3310      	adds	r3, #16
 801c8fa:	4298      	cmp	r0, r3
 801c8fc:	d1f9      	bne.n	801c8f2 <rmw_destroy_wait_set+0xa>
 801c8fe:	4803      	ldr	r0, [pc, #12]	@ (801c90c <rmw_destroy_wait_set+0x24>)
 801c900:	f7ff fd5e 	bl	801c3c0 <put_memory>
 801c904:	2000      	movs	r0, #0
 801c906:	bd08      	pop	{r3, pc}
 801c908:	2001      	movs	r0, #1
 801c90a:	bd08      	pop	{r3, pc}
 801c90c:	2000c414 	.word	0x2000c414

0801c910 <robotic_interfaces__srv__Keyboard_Request__init>:
 801c910:	b538      	push	{r3, r4, r5, lr}
 801c912:	4604      	mov	r4, r0
 801c914:	b128      	cbz	r0, 801c922 <robotic_interfaces__srv__Keyboard_Request__init+0x12>
 801c916:	f000 f843 	bl	801c9a0 <rosidl_runtime_c__String__init>
 801c91a:	4605      	mov	r5, r0
 801c91c:	b120      	cbz	r0, 801c928 <robotic_interfaces__srv__Keyboard_Request__init+0x18>
 801c91e:	4628      	mov	r0, r5
 801c920:	bd38      	pop	{r3, r4, r5, pc}
 801c922:	4605      	mov	r5, r0
 801c924:	4628      	mov	r0, r5
 801c926:	bd38      	pop	{r3, r4, r5, pc}
 801c928:	4620      	mov	r0, r4
 801c92a:	f000 f84f 	bl	801c9cc <rosidl_runtime_c__String__fini>
 801c92e:	4628      	mov	r0, r5
 801c930:	bd38      	pop	{r3, r4, r5, pc}
 801c932:	bf00      	nop

0801c934 <robotic_interfaces__srv__Keyboard_Request__fini>:
 801c934:	b108      	cbz	r0, 801c93a <robotic_interfaces__srv__Keyboard_Request__fini+0x6>
 801c936:	f000 b849 	b.w	801c9cc <rosidl_runtime_c__String__fini>
 801c93a:	4770      	bx	lr

0801c93c <robotic_interfaces__srv__Keyboard_Response__init>:
 801c93c:	b570      	push	{r4, r5, r6, lr}
 801c93e:	4604      	mov	r4, r0
 801c940:	b1b0      	cbz	r0, 801c970 <robotic_interfaces__srv__Keyboard_Response__init+0x34>
 801c942:	1d06      	adds	r6, r0, #4
 801c944:	4630      	mov	r0, r6
 801c946:	f000 f82b 	bl	801c9a0 <rosidl_runtime_c__String__init>
 801c94a:	4605      	mov	r5, r0
 801c94c:	b138      	cbz	r0, 801c95e <robotic_interfaces__srv__Keyboard_Response__init+0x22>
 801c94e:	3410      	adds	r4, #16
 801c950:	4620      	mov	r0, r4
 801c952:	f000 f825 	bl	801c9a0 <rosidl_runtime_c__String__init>
 801c956:	4605      	mov	r5, r0
 801c958:	b168      	cbz	r0, 801c976 <robotic_interfaces__srv__Keyboard_Response__init+0x3a>
 801c95a:	4628      	mov	r0, r5
 801c95c:	bd70      	pop	{r4, r5, r6, pc}
 801c95e:	4630      	mov	r0, r6
 801c960:	f000 f834 	bl	801c9cc <rosidl_runtime_c__String__fini>
 801c964:	f104 0010 	add.w	r0, r4, #16
 801c968:	f000 f830 	bl	801c9cc <rosidl_runtime_c__String__fini>
 801c96c:	4628      	mov	r0, r5
 801c96e:	bd70      	pop	{r4, r5, r6, pc}
 801c970:	4605      	mov	r5, r0
 801c972:	4628      	mov	r0, r5
 801c974:	bd70      	pop	{r4, r5, r6, pc}
 801c976:	4630      	mov	r0, r6
 801c978:	f000 f828 	bl	801c9cc <rosidl_runtime_c__String__fini>
 801c97c:	4620      	mov	r0, r4
 801c97e:	f000 f825 	bl	801c9cc <rosidl_runtime_c__String__fini>
 801c982:	e7ea      	b.n	801c95a <robotic_interfaces__srv__Keyboard_Response__init+0x1e>

0801c984 <robotic_interfaces__srv__Keyboard_Response__fini>:
 801c984:	b150      	cbz	r0, 801c99c <robotic_interfaces__srv__Keyboard_Response__fini+0x18>
 801c986:	b510      	push	{r4, lr}
 801c988:	4604      	mov	r4, r0
 801c98a:	3004      	adds	r0, #4
 801c98c:	f000 f81e 	bl	801c9cc <rosidl_runtime_c__String__fini>
 801c990:	f104 0010 	add.w	r0, r4, #16
 801c994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c998:	f000 b818 	b.w	801c9cc <rosidl_runtime_c__String__fini>
 801c99c:	4770      	bx	lr
 801c99e:	bf00      	nop

0801c9a0 <rosidl_runtime_c__String__init>:
 801c9a0:	b510      	push	{r4, lr}
 801c9a2:	4604      	mov	r4, r0
 801c9a4:	b086      	sub	sp, #24
 801c9a6:	b170      	cbz	r0, 801c9c6 <rosidl_runtime_c__String__init+0x26>
 801c9a8:	a801      	add	r0, sp, #4
 801c9aa:	f7f5 fa65 	bl	8011e78 <rcutils_get_default_allocator>
 801c9ae:	9b01      	ldr	r3, [sp, #4]
 801c9b0:	9905      	ldr	r1, [sp, #20]
 801c9b2:	2001      	movs	r0, #1
 801c9b4:	4798      	blx	r3
 801c9b6:	6020      	str	r0, [r4, #0]
 801c9b8:	b128      	cbz	r0, 801c9c6 <rosidl_runtime_c__String__init+0x26>
 801c9ba:	2100      	movs	r1, #0
 801c9bc:	2201      	movs	r2, #1
 801c9be:	7001      	strb	r1, [r0, #0]
 801c9c0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801c9c4:	4610      	mov	r0, r2
 801c9c6:	b006      	add	sp, #24
 801c9c8:	bd10      	pop	{r4, pc}
 801c9ca:	bf00      	nop

0801c9cc <rosidl_runtime_c__String__fini>:
 801c9cc:	b320      	cbz	r0, 801ca18 <rosidl_runtime_c__String__fini+0x4c>
 801c9ce:	b510      	push	{r4, lr}
 801c9d0:	6803      	ldr	r3, [r0, #0]
 801c9d2:	b086      	sub	sp, #24
 801c9d4:	4604      	mov	r4, r0
 801c9d6:	b173      	cbz	r3, 801c9f6 <rosidl_runtime_c__String__fini+0x2a>
 801c9d8:	6883      	ldr	r3, [r0, #8]
 801c9da:	b1f3      	cbz	r3, 801ca1a <rosidl_runtime_c__String__fini+0x4e>
 801c9dc:	a801      	add	r0, sp, #4
 801c9de:	f7f5 fa4b 	bl	8011e78 <rcutils_get_default_allocator>
 801c9e2:	9b02      	ldr	r3, [sp, #8]
 801c9e4:	9905      	ldr	r1, [sp, #20]
 801c9e6:	6820      	ldr	r0, [r4, #0]
 801c9e8:	4798      	blx	r3
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	e9c4 3300 	strd	r3, r3, [r4]
 801c9f0:	60a3      	str	r3, [r4, #8]
 801c9f2:	b006      	add	sp, #24
 801c9f4:	bd10      	pop	{r4, pc}
 801c9f6:	6843      	ldr	r3, [r0, #4]
 801c9f8:	b9db      	cbnz	r3, 801ca32 <rosidl_runtime_c__String__fini+0x66>
 801c9fa:	6883      	ldr	r3, [r0, #8]
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	d0f8      	beq.n	801c9f2 <rosidl_runtime_c__String__fini+0x26>
 801ca00:	4b12      	ldr	r3, [pc, #72]	@ (801ca4c <rosidl_runtime_c__String__fini+0x80>)
 801ca02:	4813      	ldr	r0, [pc, #76]	@ (801ca50 <rosidl_runtime_c__String__fini+0x84>)
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	2251      	movs	r2, #81	@ 0x51
 801ca08:	68db      	ldr	r3, [r3, #12]
 801ca0a:	2101      	movs	r1, #1
 801ca0c:	f001 fa2a 	bl	801de64 <fwrite>
 801ca10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ca14:	f000 fee6 	bl	801d7e4 <exit>
 801ca18:	4770      	bx	lr
 801ca1a:	4b0c      	ldr	r3, [pc, #48]	@ (801ca4c <rosidl_runtime_c__String__fini+0x80>)
 801ca1c:	480d      	ldr	r0, [pc, #52]	@ (801ca54 <rosidl_runtime_c__String__fini+0x88>)
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	224c      	movs	r2, #76	@ 0x4c
 801ca22:	68db      	ldr	r3, [r3, #12]
 801ca24:	2101      	movs	r1, #1
 801ca26:	f001 fa1d 	bl	801de64 <fwrite>
 801ca2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ca2e:	f000 fed9 	bl	801d7e4 <exit>
 801ca32:	4b06      	ldr	r3, [pc, #24]	@ (801ca4c <rosidl_runtime_c__String__fini+0x80>)
 801ca34:	4808      	ldr	r0, [pc, #32]	@ (801ca58 <rosidl_runtime_c__String__fini+0x8c>)
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	224e      	movs	r2, #78	@ 0x4e
 801ca3a:	68db      	ldr	r3, [r3, #12]
 801ca3c:	2101      	movs	r1, #1
 801ca3e:	f001 fa11 	bl	801de64 <fwrite>
 801ca42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ca46:	f000 fecd 	bl	801d7e4 <exit>
 801ca4a:	bf00      	nop
 801ca4c:	20000dd0 	.word	0x20000dd0
 801ca50:	080215ec 	.word	0x080215ec
 801ca54:	0802154c 	.word	0x0802154c
 801ca58:	0802159c 	.word	0x0802159c

0801ca5c <sensor_msgs__msg__Imu__init>:
 801ca5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca60:	4605      	mov	r5, r0
 801ca62:	b3c0      	cbz	r0, 801cad6 <sensor_msgs__msg__Imu__init+0x7a>
 801ca64:	f000 f864 	bl	801cb30 <std_msgs__msg__Header__init>
 801ca68:	4604      	mov	r4, r0
 801ca6a:	b310      	cbz	r0, 801cab2 <sensor_msgs__msg__Imu__init+0x56>
 801ca6c:	f105 0618 	add.w	r6, r5, #24
 801ca70:	4630      	mov	r0, r6
 801ca72:	f000 f8d1 	bl	801cc18 <geometry_msgs__msg__Quaternion__init>
 801ca76:	4604      	mov	r4, r0
 801ca78:	2800      	cmp	r0, #0
 801ca7a:	d040      	beq.n	801cafe <sensor_msgs__msg__Imu__init+0xa2>
 801ca7c:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 801ca80:	4638      	mov	r0, r7
 801ca82:	f7f8 fc3f 	bl	8015304 <geometry_msgs__msg__Vector3__init>
 801ca86:	4604      	mov	r4, r0
 801ca88:	b348      	cbz	r0, 801cade <sensor_msgs__msg__Imu__init+0x82>
 801ca8a:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 801ca8e:	4640      	mov	r0, r8
 801ca90:	f7f8 fc38 	bl	8015304 <geometry_msgs__msg__Vector3__init>
 801ca94:	4604      	mov	r4, r0
 801ca96:	b9d8      	cbnz	r0, 801cad0 <sensor_msgs__msg__Imu__init+0x74>
 801ca98:	4628      	mov	r0, r5
 801ca9a:	f000 f86d 	bl	801cb78 <std_msgs__msg__Header__fini>
 801ca9e:	4630      	mov	r0, r6
 801caa0:	f000 f8ce 	bl	801cc40 <geometry_msgs__msg__Quaternion__fini>
 801caa4:	4638      	mov	r0, r7
 801caa6:	f7f8 fc31 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 801caaa:	4640      	mov	r0, r8
 801caac:	f7f8 fc2e 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 801cab0:	e00e      	b.n	801cad0 <sensor_msgs__msg__Imu__init+0x74>
 801cab2:	4628      	mov	r0, r5
 801cab4:	f000 f860 	bl	801cb78 <std_msgs__msg__Header__fini>
 801cab8:	f105 0018 	add.w	r0, r5, #24
 801cabc:	f000 f8c0 	bl	801cc40 <geometry_msgs__msg__Quaternion__fini>
 801cac0:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 801cac4:	f7f8 fc22 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 801cac8:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801cacc:	f7f8 fc1e 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 801cad0:	4620      	mov	r0, r4
 801cad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cad6:	4604      	mov	r4, r0
 801cad8:	4620      	mov	r0, r4
 801cada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cade:	4628      	mov	r0, r5
 801cae0:	f000 f84a 	bl	801cb78 <std_msgs__msg__Header__fini>
 801cae4:	4630      	mov	r0, r6
 801cae6:	f000 f8ab 	bl	801cc40 <geometry_msgs__msg__Quaternion__fini>
 801caea:	4638      	mov	r0, r7
 801caec:	f7f8 fc0e 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 801caf0:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801caf4:	f7f8 fc0a 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 801caf8:	4620      	mov	r0, r4
 801cafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cafe:	4628      	mov	r0, r5
 801cb00:	f000 f83a 	bl	801cb78 <std_msgs__msg__Header__fini>
 801cb04:	4630      	mov	r0, r6
 801cb06:	e7d9      	b.n	801cabc <sensor_msgs__msg__Imu__init+0x60>

0801cb08 <sensor_msgs__msg__Imu__fini>:
 801cb08:	b188      	cbz	r0, 801cb2e <sensor_msgs__msg__Imu__fini+0x26>
 801cb0a:	b510      	push	{r4, lr}
 801cb0c:	4604      	mov	r4, r0
 801cb0e:	f000 f833 	bl	801cb78 <std_msgs__msg__Header__fini>
 801cb12:	f104 0018 	add.w	r0, r4, #24
 801cb16:	f000 f893 	bl	801cc40 <geometry_msgs__msg__Quaternion__fini>
 801cb1a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801cb1e:	f7f8 fbf5 	bl	801530c <geometry_msgs__msg__Vector3__fini>
 801cb22:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801cb26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb2a:	f7f8 bbef 	b.w	801530c <geometry_msgs__msg__Vector3__fini>
 801cb2e:	4770      	bx	lr

0801cb30 <std_msgs__msg__Header__init>:
 801cb30:	b570      	push	{r4, r5, r6, lr}
 801cb32:	4605      	mov	r5, r0
 801cb34:	b1a8      	cbz	r0, 801cb62 <std_msgs__msg__Header__init+0x32>
 801cb36:	f000 f867 	bl	801cc08 <builtin_interfaces__msg__Time__init>
 801cb3a:	4604      	mov	r4, r0
 801cb3c:	b140      	cbz	r0, 801cb50 <std_msgs__msg__Header__init+0x20>
 801cb3e:	f105 0608 	add.w	r6, r5, #8
 801cb42:	4630      	mov	r0, r6
 801cb44:	f7ff ff2c 	bl	801c9a0 <rosidl_runtime_c__String__init>
 801cb48:	4604      	mov	r4, r0
 801cb4a:	b168      	cbz	r0, 801cb68 <std_msgs__msg__Header__init+0x38>
 801cb4c:	4620      	mov	r0, r4
 801cb4e:	bd70      	pop	{r4, r5, r6, pc}
 801cb50:	4628      	mov	r0, r5
 801cb52:	f000 f85d 	bl	801cc10 <builtin_interfaces__msg__Time__fini>
 801cb56:	f105 0008 	add.w	r0, r5, #8
 801cb5a:	f7ff ff37 	bl	801c9cc <rosidl_runtime_c__String__fini>
 801cb5e:	4620      	mov	r0, r4
 801cb60:	bd70      	pop	{r4, r5, r6, pc}
 801cb62:	4604      	mov	r4, r0
 801cb64:	4620      	mov	r0, r4
 801cb66:	bd70      	pop	{r4, r5, r6, pc}
 801cb68:	4628      	mov	r0, r5
 801cb6a:	f000 f851 	bl	801cc10 <builtin_interfaces__msg__Time__fini>
 801cb6e:	4630      	mov	r0, r6
 801cb70:	f7ff ff2c 	bl	801c9cc <rosidl_runtime_c__String__fini>
 801cb74:	e7ea      	b.n	801cb4c <std_msgs__msg__Header__init+0x1c>
 801cb76:	bf00      	nop

0801cb78 <std_msgs__msg__Header__fini>:
 801cb78:	b148      	cbz	r0, 801cb8e <std_msgs__msg__Header__fini+0x16>
 801cb7a:	b510      	push	{r4, lr}
 801cb7c:	4604      	mov	r4, r0
 801cb7e:	f000 f847 	bl	801cc10 <builtin_interfaces__msg__Time__fini>
 801cb82:	f104 0008 	add.w	r0, r4, #8
 801cb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb8a:	f7ff bf1f 	b.w	801c9cc <rosidl_runtime_c__String__fini>
 801cb8e:	4770      	bx	lr

0801cb90 <std_srvs__srv__SetBool_Request__init>:
 801cb90:	3800      	subs	r0, #0
 801cb92:	bf18      	it	ne
 801cb94:	2001      	movne	r0, #1
 801cb96:	4770      	bx	lr

0801cb98 <std_srvs__srv__SetBool_Request__fini>:
 801cb98:	4770      	bx	lr
 801cb9a:	bf00      	nop

0801cb9c <std_srvs__srv__SetBool_Response__init>:
 801cb9c:	b538      	push	{r3, r4, r5, lr}
 801cb9e:	b138      	cbz	r0, 801cbb0 <std_srvs__srv__SetBool_Response__init+0x14>
 801cba0:	1d05      	adds	r5, r0, #4
 801cba2:	4628      	mov	r0, r5
 801cba4:	f7ff fefc 	bl	801c9a0 <rosidl_runtime_c__String__init>
 801cba8:	4604      	mov	r4, r0
 801cbaa:	b120      	cbz	r0, 801cbb6 <std_srvs__srv__SetBool_Response__init+0x1a>
 801cbac:	4620      	mov	r0, r4
 801cbae:	bd38      	pop	{r3, r4, r5, pc}
 801cbb0:	4604      	mov	r4, r0
 801cbb2:	4620      	mov	r0, r4
 801cbb4:	bd38      	pop	{r3, r4, r5, pc}
 801cbb6:	4628      	mov	r0, r5
 801cbb8:	f7ff ff08 	bl	801c9cc <rosidl_runtime_c__String__fini>
 801cbbc:	4620      	mov	r0, r4
 801cbbe:	bd38      	pop	{r3, r4, r5, pc}

0801cbc0 <std_srvs__srv__SetBool_Response__fini>:
 801cbc0:	b110      	cbz	r0, 801cbc8 <std_srvs__srv__SetBool_Response__fini+0x8>
 801cbc2:	3004      	adds	r0, #4
 801cbc4:	f7ff bf02 	b.w	801c9cc <rosidl_runtime_c__String__fini>
 801cbc8:	4770      	bx	lr
 801cbca:	bf00      	nop

0801cbcc <std_srvs__srv__Trigger_Request__init>:
 801cbcc:	3800      	subs	r0, #0
 801cbce:	bf18      	it	ne
 801cbd0:	2001      	movne	r0, #1
 801cbd2:	4770      	bx	lr

0801cbd4 <std_srvs__srv__Trigger_Request__fini>:
 801cbd4:	4770      	bx	lr
 801cbd6:	bf00      	nop

0801cbd8 <std_srvs__srv__Trigger_Response__init>:
 801cbd8:	b538      	push	{r3, r4, r5, lr}
 801cbda:	b138      	cbz	r0, 801cbec <std_srvs__srv__Trigger_Response__init+0x14>
 801cbdc:	1d05      	adds	r5, r0, #4
 801cbde:	4628      	mov	r0, r5
 801cbe0:	f7ff fede 	bl	801c9a0 <rosidl_runtime_c__String__init>
 801cbe4:	4604      	mov	r4, r0
 801cbe6:	b120      	cbz	r0, 801cbf2 <std_srvs__srv__Trigger_Response__init+0x1a>
 801cbe8:	4620      	mov	r0, r4
 801cbea:	bd38      	pop	{r3, r4, r5, pc}
 801cbec:	4604      	mov	r4, r0
 801cbee:	4620      	mov	r0, r4
 801cbf0:	bd38      	pop	{r3, r4, r5, pc}
 801cbf2:	4628      	mov	r0, r5
 801cbf4:	f7ff feea 	bl	801c9cc <rosidl_runtime_c__String__fini>
 801cbf8:	4620      	mov	r0, r4
 801cbfa:	bd38      	pop	{r3, r4, r5, pc}

0801cbfc <std_srvs__srv__Trigger_Response__fini>:
 801cbfc:	b110      	cbz	r0, 801cc04 <std_srvs__srv__Trigger_Response__fini+0x8>
 801cbfe:	3004      	adds	r0, #4
 801cc00:	f7ff bee4 	b.w	801c9cc <rosidl_runtime_c__String__fini>
 801cc04:	4770      	bx	lr
 801cc06:	bf00      	nop

0801cc08 <builtin_interfaces__msg__Time__init>:
 801cc08:	3800      	subs	r0, #0
 801cc0a:	bf18      	it	ne
 801cc0c:	2001      	movne	r0, #1
 801cc0e:	4770      	bx	lr

0801cc10 <builtin_interfaces__msg__Time__fini>:
 801cc10:	4770      	bx	lr
 801cc12:	bf00      	nop
 801cc14:	0000      	movs	r0, r0
	...

0801cc18 <geometry_msgs__msg__Quaternion__init>:
 801cc18:	b160      	cbz	r0, 801cc34 <geometry_msgs__msg__Quaternion__init+0x1c>
 801cc1a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801cc38 <geometry_msgs__msg__Quaternion__init+0x20>
 801cc1e:	2200      	movs	r2, #0
 801cc20:	2300      	movs	r3, #0
 801cc22:	e9c0 2300 	strd	r2, r3, [r0]
 801cc26:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801cc2a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801cc2e:	ed80 7b06 	vstr	d7, [r0, #24]
 801cc32:	2001      	movs	r0, #1
 801cc34:	4770      	bx	lr
 801cc36:	bf00      	nop
 801cc38:	00000000 	.word	0x00000000
 801cc3c:	3ff00000 	.word	0x3ff00000

0801cc40 <geometry_msgs__msg__Quaternion__fini>:
 801cc40:	4770      	bx	lr
 801cc42:	bf00      	nop

0801cc44 <ucdr_serialize_string>:
 801cc44:	b510      	push	{r4, lr}
 801cc46:	b082      	sub	sp, #8
 801cc48:	4604      	mov	r4, r0
 801cc4a:	4608      	mov	r0, r1
 801cc4c:	9101      	str	r1, [sp, #4]
 801cc4e:	f7e3 faf1 	bl	8000234 <strlen>
 801cc52:	9901      	ldr	r1, [sp, #4]
 801cc54:	1c42      	adds	r2, r0, #1
 801cc56:	4620      	mov	r0, r4
 801cc58:	b002      	add	sp, #8
 801cc5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc5e:	f7f8 be13 	b.w	8015888 <ucdr_serialize_sequence_char>
 801cc62:	bf00      	nop

0801cc64 <ucdr_deserialize_string>:
 801cc64:	b500      	push	{lr}
 801cc66:	b083      	sub	sp, #12
 801cc68:	ab01      	add	r3, sp, #4
 801cc6a:	f7f8 fe1f 	bl	80158ac <ucdr_deserialize_sequence_char>
 801cc6e:	b003      	add	sp, #12
 801cc70:	f85d fb04 	ldr.w	pc, [sp], #4

0801cc74 <uxr_init_input_best_effort_stream>:
 801cc74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cc78:	8003      	strh	r3, [r0, #0]
 801cc7a:	4770      	bx	lr

0801cc7c <uxr_reset_input_best_effort_stream>:
 801cc7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cc80:	8003      	strh	r3, [r0, #0]
 801cc82:	4770      	bx	lr

0801cc84 <uxr_receive_best_effort_message>:
 801cc84:	b538      	push	{r3, r4, r5, lr}
 801cc86:	4604      	mov	r4, r0
 801cc88:	8800      	ldrh	r0, [r0, #0]
 801cc8a:	460d      	mov	r5, r1
 801cc8c:	f000 fd42 	bl	801d714 <uxr_seq_num_cmp>
 801cc90:	4603      	mov	r3, r0
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801cc98:	bfb8      	it	lt
 801cc9a:	8025      	strhlt	r5, [r4, #0]
 801cc9c:	bd38      	pop	{r3, r4, r5, pc}
 801cc9e:	bf00      	nop

0801cca0 <on_full_input_buffer>:
 801cca0:	b570      	push	{r4, r5, r6, lr}
 801cca2:	4605      	mov	r5, r0
 801cca4:	460c      	mov	r4, r1
 801cca6:	682b      	ldr	r3, [r5, #0]
 801cca8:	6809      	ldr	r1, [r1, #0]
 801ccaa:	8920      	ldrh	r0, [r4, #8]
 801ccac:	6862      	ldr	r2, [r4, #4]
 801ccae:	fbb2 f2f0 	udiv	r2, r2, r0
 801ccb2:	eba3 0c01 	sub.w	ip, r3, r1
 801ccb6:	fbbc fcf2 	udiv	ip, ip, r2
 801ccba:	f10c 0c01 	add.w	ip, ip, #1
 801ccbe:	fa1f f38c 	uxth.w	r3, ip
 801ccc2:	fbb3 f6f0 	udiv	r6, r3, r0
 801ccc6:	fb00 3316 	mls	r3, r0, r6, r3
 801ccca:	b29b      	uxth	r3, r3
 801cccc:	fb02 f303 	mul.w	r3, r2, r3
 801ccd0:	1d18      	adds	r0, r3, #4
 801ccd2:	4408      	add	r0, r1
 801ccd4:	7d26      	ldrb	r6, [r4, #20]
 801ccd6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801ccda:	b116      	cbz	r6, 801cce2 <on_full_input_buffer+0x42>
 801ccdc:	2600      	movs	r6, #0
 801ccde:	f840 6c04 	str.w	r6, [r0, #-4]
 801cce2:	2a03      	cmp	r2, #3
 801cce4:	d801      	bhi.n	801ccea <on_full_input_buffer+0x4a>
 801cce6:	2001      	movs	r0, #1
 801cce8:	bd70      	pop	{r4, r5, r6, pc}
 801ccea:	3308      	adds	r3, #8
 801ccec:	4419      	add	r1, r3
 801ccee:	4628      	mov	r0, r5
 801ccf0:	692b      	ldr	r3, [r5, #16]
 801ccf2:	3a04      	subs	r2, #4
 801ccf4:	f7f3 faa8 	bl	8010248 <ucdr_init_buffer_origin>
 801ccf8:	4628      	mov	r0, r5
 801ccfa:	4903      	ldr	r1, [pc, #12]	@ (801cd08 <on_full_input_buffer+0x68>)
 801ccfc:	4622      	mov	r2, r4
 801ccfe:	f7f3 fa7f 	bl	8010200 <ucdr_set_on_full_buffer_callback>
 801cd02:	2000      	movs	r0, #0
 801cd04:	bd70      	pop	{r4, r5, r6, pc}
 801cd06:	bf00      	nop
 801cd08:	0801cca1 	.word	0x0801cca1

0801cd0c <uxr_init_input_reliable_stream>:
 801cd0c:	b500      	push	{lr}
 801cd0e:	e9c0 1200 	strd	r1, r2, [r0]
 801cd12:	f04f 0e00 	mov.w	lr, #0
 801cd16:	9a01      	ldr	r2, [sp, #4]
 801cd18:	8103      	strh	r3, [r0, #8]
 801cd1a:	6102      	str	r2, [r0, #16]
 801cd1c:	f880 e014 	strb.w	lr, [r0, #20]
 801cd20:	b1d3      	cbz	r3, 801cd58 <uxr_init_input_reliable_stream+0x4c>
 801cd22:	f8c1 e000 	str.w	lr, [r1]
 801cd26:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801cd2a:	f1bc 0f01 	cmp.w	ip, #1
 801cd2e:	d913      	bls.n	801cd58 <uxr_init_input_reliable_stream+0x4c>
 801cd30:	2301      	movs	r3, #1
 801cd32:	fbb3 f1fc 	udiv	r1, r3, ip
 801cd36:	fb0c 3111 	mls	r1, ip, r1, r3
 801cd3a:	b289      	uxth	r1, r1
 801cd3c:	6842      	ldr	r2, [r0, #4]
 801cd3e:	fbb2 f2fc 	udiv	r2, r2, ip
 801cd42:	fb01 f202 	mul.w	r2, r1, r2
 801cd46:	6801      	ldr	r1, [r0, #0]
 801cd48:	f841 e002 	str.w	lr, [r1, r2]
 801cd4c:	3301      	adds	r3, #1
 801cd4e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801cd52:	b29b      	uxth	r3, r3
 801cd54:	459c      	cmp	ip, r3
 801cd56:	d8ec      	bhi.n	801cd32 <uxr_init_input_reliable_stream+0x26>
 801cd58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cd5c:	60c3      	str	r3, [r0, #12]
 801cd5e:	f85d fb04 	ldr.w	pc, [sp], #4
 801cd62:	bf00      	nop

0801cd64 <uxr_reset_input_reliable_stream>:
 801cd64:	8901      	ldrh	r1, [r0, #8]
 801cd66:	b1e9      	cbz	r1, 801cda4 <uxr_reset_input_reliable_stream+0x40>
 801cd68:	f04f 0c00 	mov.w	ip, #0
 801cd6c:	b500      	push	{lr}
 801cd6e:	4663      	mov	r3, ip
 801cd70:	46e6      	mov	lr, ip
 801cd72:	fbb3 f2f1 	udiv	r2, r3, r1
 801cd76:	fb01 3312 	mls	r3, r1, r2, r3
 801cd7a:	b29b      	uxth	r3, r3
 801cd7c:	6842      	ldr	r2, [r0, #4]
 801cd7e:	fbb2 f2f1 	udiv	r2, r2, r1
 801cd82:	fb02 f303 	mul.w	r3, r2, r3
 801cd86:	6802      	ldr	r2, [r0, #0]
 801cd88:	f842 e003 	str.w	lr, [r2, r3]
 801cd8c:	f10c 0c01 	add.w	ip, ip, #1
 801cd90:	8901      	ldrh	r1, [r0, #8]
 801cd92:	fa1f f38c 	uxth.w	r3, ip
 801cd96:	4299      	cmp	r1, r3
 801cd98:	d8eb      	bhi.n	801cd72 <uxr_reset_input_reliable_stream+0xe>
 801cd9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cd9e:	60c3      	str	r3, [r0, #12]
 801cda0:	f85d fb04 	ldr.w	pc, [sp], #4
 801cda4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cda8:	60c3      	str	r3, [r0, #12]
 801cdaa:	4770      	bx	lr

0801cdac <uxr_receive_reliable_message>:
 801cdac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cdb0:	4604      	mov	r4, r0
 801cdb2:	460d      	mov	r5, r1
 801cdb4:	8901      	ldrh	r1, [r0, #8]
 801cdb6:	8980      	ldrh	r0, [r0, #12]
 801cdb8:	4690      	mov	r8, r2
 801cdba:	461f      	mov	r7, r3
 801cdbc:	f000 fca2 	bl	801d704 <uxr_seq_num_add>
 801cdc0:	4629      	mov	r1, r5
 801cdc2:	4606      	mov	r6, r0
 801cdc4:	89a0      	ldrh	r0, [r4, #12]
 801cdc6:	f000 fca5 	bl	801d714 <uxr_seq_num_cmp>
 801cdca:	2800      	cmp	r0, #0
 801cdcc:	db0a      	blt.n	801cde4 <uxr_receive_reliable_message+0x38>
 801cdce:	2600      	movs	r6, #0
 801cdd0:	89e0      	ldrh	r0, [r4, #14]
 801cdd2:	4629      	mov	r1, r5
 801cdd4:	f000 fc9e 	bl	801d714 <uxr_seq_num_cmp>
 801cdd8:	2800      	cmp	r0, #0
 801cdda:	da00      	bge.n	801cdde <uxr_receive_reliable_message+0x32>
 801cddc:	81e5      	strh	r5, [r4, #14]
 801cdde:	4630      	mov	r0, r6
 801cde0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cde4:	4630      	mov	r0, r6
 801cde6:	4629      	mov	r1, r5
 801cde8:	f000 fc94 	bl	801d714 <uxr_seq_num_cmp>
 801cdec:	2800      	cmp	r0, #0
 801cdee:	dbee      	blt.n	801cdce <uxr_receive_reliable_message+0x22>
 801cdf0:	6923      	ldr	r3, [r4, #16]
 801cdf2:	4640      	mov	r0, r8
 801cdf4:	4798      	blx	r3
 801cdf6:	2101      	movs	r1, #1
 801cdf8:	4681      	mov	r9, r0
 801cdfa:	89a0      	ldrh	r0, [r4, #12]
 801cdfc:	f000 fc82 	bl	801d704 <uxr_seq_num_add>
 801ce00:	f1b9 0f00 	cmp.w	r9, #0
 801ce04:	d101      	bne.n	801ce0a <uxr_receive_reliable_message+0x5e>
 801ce06:	4285      	cmp	r5, r0
 801ce08:	d047      	beq.n	801ce9a <uxr_receive_reliable_message+0xee>
 801ce0a:	8922      	ldrh	r2, [r4, #8]
 801ce0c:	fbb5 f0f2 	udiv	r0, r5, r2
 801ce10:	fb02 5010 	mls	r0, r2, r0, r5
 801ce14:	b280      	uxth	r0, r0
 801ce16:	6863      	ldr	r3, [r4, #4]
 801ce18:	fbb3 f3f2 	udiv	r3, r3, r2
 801ce1c:	fb00 f303 	mul.w	r3, r0, r3
 801ce20:	6820      	ldr	r0, [r4, #0]
 801ce22:	3304      	adds	r3, #4
 801ce24:	4418      	add	r0, r3
 801ce26:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d1cf      	bne.n	801cdce <uxr_receive_reliable_message+0x22>
 801ce2e:	4641      	mov	r1, r8
 801ce30:	463a      	mov	r2, r7
 801ce32:	f001 fa6e 	bl	801e312 <memcpy>
 801ce36:	8921      	ldrh	r1, [r4, #8]
 801ce38:	fbb5 f2f1 	udiv	r2, r5, r1
 801ce3c:	fb01 5212 	mls	r2, r1, r2, r5
 801ce40:	b292      	uxth	r2, r2
 801ce42:	6863      	ldr	r3, [r4, #4]
 801ce44:	fbb3 f3f1 	udiv	r3, r3, r1
 801ce48:	fb02 f303 	mul.w	r3, r2, r3
 801ce4c:	6822      	ldr	r2, [r4, #0]
 801ce4e:	50d7      	str	r7, [r2, r3]
 801ce50:	9a08      	ldr	r2, [sp, #32]
 801ce52:	2301      	movs	r3, #1
 801ce54:	7013      	strb	r3, [r2, #0]
 801ce56:	f1b9 0f00 	cmp.w	r9, #0
 801ce5a:	d0b8      	beq.n	801cdce <uxr_receive_reliable_message+0x22>
 801ce5c:	89a6      	ldrh	r6, [r4, #12]
 801ce5e:	4630      	mov	r0, r6
 801ce60:	2101      	movs	r1, #1
 801ce62:	f000 fc4f 	bl	801d704 <uxr_seq_num_add>
 801ce66:	8922      	ldrh	r2, [r4, #8]
 801ce68:	6863      	ldr	r3, [r4, #4]
 801ce6a:	fbb3 f3f2 	udiv	r3, r3, r2
 801ce6e:	4606      	mov	r6, r0
 801ce70:	fbb0 f0f2 	udiv	r0, r0, r2
 801ce74:	fb02 6010 	mls	r0, r2, r0, r6
 801ce78:	b280      	uxth	r0, r0
 801ce7a:	fb00 f303 	mul.w	r3, r0, r3
 801ce7e:	6820      	ldr	r0, [r4, #0]
 801ce80:	3304      	adds	r3, #4
 801ce82:	4418      	add	r0, r3
 801ce84:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d0a0      	beq.n	801cdce <uxr_receive_reliable_message+0x22>
 801ce8c:	6923      	ldr	r3, [r4, #16]
 801ce8e:	4798      	blx	r3
 801ce90:	2802      	cmp	r0, #2
 801ce92:	d008      	beq.n	801cea6 <uxr_receive_reliable_message+0xfa>
 801ce94:	2801      	cmp	r0, #1
 801ce96:	d0e2      	beq.n	801ce5e <uxr_receive_reliable_message+0xb2>
 801ce98:	e799      	b.n	801cdce <uxr_receive_reliable_message+0x22>
 801ce9a:	9b08      	ldr	r3, [sp, #32]
 801ce9c:	81a5      	strh	r5, [r4, #12]
 801ce9e:	2601      	movs	r6, #1
 801cea0:	f883 9000 	strb.w	r9, [r3]
 801cea4:	e794      	b.n	801cdd0 <uxr_receive_reliable_message+0x24>
 801cea6:	2601      	movs	r6, #1
 801cea8:	e792      	b.n	801cdd0 <uxr_receive_reliable_message+0x24>
 801ceaa:	bf00      	nop

0801ceac <uxr_next_input_reliable_buffer_available>:
 801ceac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ceb0:	4604      	mov	r4, r0
 801ceb2:	460f      	mov	r7, r1
 801ceb4:	8980      	ldrh	r0, [r0, #12]
 801ceb6:	2101      	movs	r1, #1
 801ceb8:	4690      	mov	r8, r2
 801ceba:	f000 fc23 	bl	801d704 <uxr_seq_num_add>
 801cebe:	8922      	ldrh	r2, [r4, #8]
 801cec0:	fbb0 f6f2 	udiv	r6, r0, r2
 801cec4:	fb02 0616 	mls	r6, r2, r6, r0
 801cec8:	b2b6      	uxth	r6, r6
 801ceca:	6863      	ldr	r3, [r4, #4]
 801cecc:	fbb3 f3f2 	udiv	r3, r3, r2
 801ced0:	fb06 f303 	mul.w	r3, r6, r3
 801ced4:	6826      	ldr	r6, [r4, #0]
 801ced6:	3304      	adds	r3, #4
 801ced8:	441e      	add	r6, r3
 801ceda:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801cede:	f1b9 0f00 	cmp.w	r9, #0
 801cee2:	d023      	beq.n	801cf2c <uxr_next_input_reliable_buffer_available+0x80>
 801cee4:	6923      	ldr	r3, [r4, #16]
 801cee6:	4605      	mov	r5, r0
 801cee8:	4630      	mov	r0, r6
 801ceea:	4798      	blx	r3
 801ceec:	4682      	mov	sl, r0
 801ceee:	b300      	cbz	r0, 801cf32 <uxr_next_input_reliable_buffer_available+0x86>
 801cef0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801cef4:	2101      	movs	r1, #1
 801cef6:	4650      	mov	r0, sl
 801cef8:	f000 fc04 	bl	801d704 <uxr_seq_num_add>
 801cefc:	8921      	ldrh	r1, [r4, #8]
 801cefe:	fbb0 f2f1 	udiv	r2, r0, r1
 801cf02:	4682      	mov	sl, r0
 801cf04:	fb01 0212 	mls	r2, r1, r2, r0
 801cf08:	e9d4 0300 	ldrd	r0, r3, [r4]
 801cf0c:	b292      	uxth	r2, r2
 801cf0e:	fbb3 f3f1 	udiv	r3, r3, r1
 801cf12:	fb02 f303 	mul.w	r3, r2, r3
 801cf16:	3304      	adds	r3, #4
 801cf18:	4418      	add	r0, r3
 801cf1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801cf1e:	b12b      	cbz	r3, 801cf2c <uxr_next_input_reliable_buffer_available+0x80>
 801cf20:	6923      	ldr	r3, [r4, #16]
 801cf22:	4798      	blx	r3
 801cf24:	2802      	cmp	r0, #2
 801cf26:	d01b      	beq.n	801cf60 <uxr_next_input_reliable_buffer_available+0xb4>
 801cf28:	2801      	cmp	r0, #1
 801cf2a:	d0e3      	beq.n	801cef4 <uxr_next_input_reliable_buffer_available+0x48>
 801cf2c:	2000      	movs	r0, #0
 801cf2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf32:	464a      	mov	r2, r9
 801cf34:	4631      	mov	r1, r6
 801cf36:	4638      	mov	r0, r7
 801cf38:	f7f3 f98e 	bl	8010258 <ucdr_init_buffer>
 801cf3c:	8921      	ldrh	r1, [r4, #8]
 801cf3e:	fbb5 f2f1 	udiv	r2, r5, r1
 801cf42:	fb01 5212 	mls	r2, r1, r2, r5
 801cf46:	b292      	uxth	r2, r2
 801cf48:	6863      	ldr	r3, [r4, #4]
 801cf4a:	fbb3 f3f1 	udiv	r3, r3, r1
 801cf4e:	fb02 f303 	mul.w	r3, r2, r3
 801cf52:	6822      	ldr	r2, [r4, #0]
 801cf54:	f842 a003 	str.w	sl, [r2, r3]
 801cf58:	2001      	movs	r0, #1
 801cf5a:	81a5      	strh	r5, [r4, #12]
 801cf5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf60:	8920      	ldrh	r0, [r4, #8]
 801cf62:	fbb5 f3f0 	udiv	r3, r5, r0
 801cf66:	fb00 5513 	mls	r5, r0, r3, r5
 801cf6a:	b2ad      	uxth	r5, r5
 801cf6c:	6863      	ldr	r3, [r4, #4]
 801cf6e:	fbb3 f3f0 	udiv	r3, r3, r0
 801cf72:	fb03 f505 	mul.w	r5, r3, r5
 801cf76:	6823      	ldr	r3, [r4, #0]
 801cf78:	2000      	movs	r0, #0
 801cf7a:	5158      	str	r0, [r3, r5]
 801cf7c:	eb06 0108 	add.w	r1, r6, r8
 801cf80:	eba9 0208 	sub.w	r2, r9, r8
 801cf84:	4638      	mov	r0, r7
 801cf86:	f7f3 f967 	bl	8010258 <ucdr_init_buffer>
 801cf8a:	4638      	mov	r0, r7
 801cf8c:	4903      	ldr	r1, [pc, #12]	@ (801cf9c <uxr_next_input_reliable_buffer_available+0xf0>)
 801cf8e:	4622      	mov	r2, r4
 801cf90:	f7f3 f936 	bl	8010200 <ucdr_set_on_full_buffer_callback>
 801cf94:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801cf98:	2001      	movs	r0, #1
 801cf9a:	e7c8      	b.n	801cf2e <uxr_next_input_reliable_buffer_available+0x82>
 801cf9c:	0801cca1 	.word	0x0801cca1

0801cfa0 <uxr_process_heartbeat>:
 801cfa0:	b538      	push	{r3, r4, r5, lr}
 801cfa2:	4611      	mov	r1, r2
 801cfa4:	4604      	mov	r4, r0
 801cfa6:	89c0      	ldrh	r0, [r0, #14]
 801cfa8:	4615      	mov	r5, r2
 801cfaa:	f000 fbb3 	bl	801d714 <uxr_seq_num_cmp>
 801cfae:	2800      	cmp	r0, #0
 801cfb0:	bfb8      	it	lt
 801cfb2:	81e5      	strhlt	r5, [r4, #14]
 801cfb4:	bd38      	pop	{r3, r4, r5, pc}
 801cfb6:	bf00      	nop

0801cfb8 <uxr_compute_acknack>:
 801cfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cfbc:	8903      	ldrh	r3, [r0, #8]
 801cfbe:	8985      	ldrh	r5, [r0, #12]
 801cfc0:	4604      	mov	r4, r0
 801cfc2:	460e      	mov	r6, r1
 801cfc4:	b1d3      	cbz	r3, 801cffc <uxr_compute_acknack+0x44>
 801cfc6:	4628      	mov	r0, r5
 801cfc8:	2701      	movs	r7, #1
 801cfca:	e003      	b.n	801cfd4 <uxr_compute_acknack+0x1c>
 801cfcc:	4567      	cmp	r7, ip
 801cfce:	d215      	bcs.n	801cffc <uxr_compute_acknack+0x44>
 801cfd0:	89a0      	ldrh	r0, [r4, #12]
 801cfd2:	3701      	adds	r7, #1
 801cfd4:	b2b9      	uxth	r1, r7
 801cfd6:	f000 fb95 	bl	801d704 <uxr_seq_num_add>
 801cfda:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801cfde:	fbb0 f3fc 	udiv	r3, r0, ip
 801cfe2:	fb0c 0313 	mls	r3, ip, r3, r0
 801cfe6:	b29a      	uxth	r2, r3
 801cfe8:	e9d4 1300 	ldrd	r1, r3, [r4]
 801cfec:	fbb3 f3fc 	udiv	r3, r3, ip
 801cff0:	fb02 f303 	mul.w	r3, r2, r3
 801cff4:	58cb      	ldr	r3, [r1, r3]
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d1e8      	bne.n	801cfcc <uxr_compute_acknack+0x14>
 801cffa:	4605      	mov	r5, r0
 801cffc:	8035      	strh	r5, [r6, #0]
 801cffe:	2101      	movs	r1, #1
 801d000:	4628      	mov	r0, r5
 801d002:	89e7      	ldrh	r7, [r4, #14]
 801d004:	f000 fb82 	bl	801d70c <uxr_seq_num_sub>
 801d008:	4601      	mov	r1, r0
 801d00a:	4638      	mov	r0, r7
 801d00c:	f000 fb7e 	bl	801d70c <uxr_seq_num_sub>
 801d010:	4605      	mov	r5, r0
 801d012:	b318      	cbz	r0, 801d05c <uxr_compute_acknack+0xa4>
 801d014:	f04f 0900 	mov.w	r9, #0
 801d018:	464f      	mov	r7, r9
 801d01a:	f04f 0801 	mov.w	r8, #1
 801d01e:	fa1f f189 	uxth.w	r1, r9
 801d022:	8830      	ldrh	r0, [r6, #0]
 801d024:	f000 fb6e 	bl	801d704 <uxr_seq_num_add>
 801d028:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801d02c:	fbb0 f3fc 	udiv	r3, r0, ip
 801d030:	e9d4 1200 	ldrd	r1, r2, [r4]
 801d034:	fb03 001c 	mls	r0, r3, ip, r0
 801d038:	b283      	uxth	r3, r0
 801d03a:	fbb2 f2fc 	udiv	r2, r2, ip
 801d03e:	fb02 f303 	mul.w	r3, r2, r3
 801d042:	fa08 f209 	lsl.w	r2, r8, r9
 801d046:	58cb      	ldr	r3, [r1, r3]
 801d048:	f109 0901 	add.w	r9, r9, #1
 801d04c:	b90b      	cbnz	r3, 801d052 <uxr_compute_acknack+0x9a>
 801d04e:	4317      	orrs	r7, r2
 801d050:	b2bf      	uxth	r7, r7
 801d052:	454d      	cmp	r5, r9
 801d054:	d1e3      	bne.n	801d01e <uxr_compute_acknack+0x66>
 801d056:	4638      	mov	r0, r7
 801d058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d05c:	4607      	mov	r7, r0
 801d05e:	4638      	mov	r0, r7
 801d060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801d064 <uxr_init_output_best_effort_stream>:
 801d064:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801d068:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801d06c:	6001      	str	r1, [r0, #0]
 801d06e:	7303      	strb	r3, [r0, #12]
 801d070:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801d074:	4770      	bx	lr
 801d076:	bf00      	nop

0801d078 <uxr_reset_output_best_effort_stream>:
 801d078:	7b02      	ldrb	r2, [r0, #12]
 801d07a:	6042      	str	r2, [r0, #4]
 801d07c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d080:	81c3      	strh	r3, [r0, #14]
 801d082:	4770      	bx	lr

0801d084 <uxr_prepare_best_effort_buffer_to_write>:
 801d084:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d086:	4604      	mov	r4, r0
 801d088:	b083      	sub	sp, #12
 801d08a:	6840      	ldr	r0, [r0, #4]
 801d08c:	460d      	mov	r5, r1
 801d08e:	4616      	mov	r6, r2
 801d090:	f7fa ff48 	bl	8017f24 <uxr_submessage_padding>
 801d094:	6863      	ldr	r3, [r4, #4]
 801d096:	4418      	add	r0, r3
 801d098:	68a3      	ldr	r3, [r4, #8]
 801d09a:	1942      	adds	r2, r0, r5
 801d09c:	4293      	cmp	r3, r2
 801d09e:	bf2c      	ite	cs
 801d0a0:	2701      	movcs	r7, #1
 801d0a2:	2700      	movcc	r7, #0
 801d0a4:	d202      	bcs.n	801d0ac <uxr_prepare_best_effort_buffer_to_write+0x28>
 801d0a6:	4638      	mov	r0, r7
 801d0a8:	b003      	add	sp, #12
 801d0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0ac:	9000      	str	r0, [sp, #0]
 801d0ae:	6821      	ldr	r1, [r4, #0]
 801d0b0:	4630      	mov	r0, r6
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	f7f3 f8be 	bl	8010234 <ucdr_init_buffer_origin_offset>
 801d0b8:	6861      	ldr	r1, [r4, #4]
 801d0ba:	4638      	mov	r0, r7
 801d0bc:	4429      	add	r1, r5
 801d0be:	6061      	str	r1, [r4, #4]
 801d0c0:	b003      	add	sp, #12
 801d0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d0c4 <uxr_prepare_best_effort_buffer_to_send>:
 801d0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0c8:	4604      	mov	r4, r0
 801d0ca:	461d      	mov	r5, r3
 801d0cc:	6840      	ldr	r0, [r0, #4]
 801d0ce:	7b23      	ldrb	r3, [r4, #12]
 801d0d0:	4298      	cmp	r0, r3
 801d0d2:	bf8c      	ite	hi
 801d0d4:	2601      	movhi	r6, #1
 801d0d6:	2600      	movls	r6, #0
 801d0d8:	d802      	bhi.n	801d0e0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801d0da:	4630      	mov	r0, r6
 801d0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0e0:	4688      	mov	r8, r1
 801d0e2:	89e0      	ldrh	r0, [r4, #14]
 801d0e4:	2101      	movs	r1, #1
 801d0e6:	4617      	mov	r7, r2
 801d0e8:	f000 fb0c 	bl	801d704 <uxr_seq_num_add>
 801d0ec:	6823      	ldr	r3, [r4, #0]
 801d0ee:	81e0      	strh	r0, [r4, #14]
 801d0f0:	8028      	strh	r0, [r5, #0]
 801d0f2:	f8c8 3000 	str.w	r3, [r8]
 801d0f6:	6863      	ldr	r3, [r4, #4]
 801d0f8:	603b      	str	r3, [r7, #0]
 801d0fa:	7b23      	ldrb	r3, [r4, #12]
 801d0fc:	6063      	str	r3, [r4, #4]
 801d0fe:	4630      	mov	r0, r6
 801d100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d104 <on_full_output_buffer>:
 801d104:	b538      	push	{r3, r4, r5, lr}
 801d106:	6802      	ldr	r2, [r0, #0]
 801d108:	460c      	mov	r4, r1
 801d10a:	6809      	ldr	r1, [r1, #0]
 801d10c:	8923      	ldrh	r3, [r4, #8]
 801d10e:	eba2 0c01 	sub.w	ip, r2, r1
 801d112:	6862      	ldr	r2, [r4, #4]
 801d114:	fbb2 f2f3 	udiv	r2, r2, r3
 801d118:	fbbc fcf2 	udiv	ip, ip, r2
 801d11c:	f10c 0c01 	add.w	ip, ip, #1
 801d120:	fa1f fc8c 	uxth.w	ip, ip
 801d124:	fbbc fef3 	udiv	lr, ip, r3
 801d128:	fb03 c31e 	mls	r3, r3, lr, ip
 801d12c:	b29b      	uxth	r3, r3
 801d12e:	fb02 f303 	mul.w	r3, r2, r3
 801d132:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801d136:	58ca      	ldr	r2, [r1, r3]
 801d138:	4463      	add	r3, ip
 801d13a:	eba2 020c 	sub.w	r2, r2, ip
 801d13e:	3308      	adds	r3, #8
 801d140:	4605      	mov	r5, r0
 801d142:	4419      	add	r1, r3
 801d144:	3a04      	subs	r2, #4
 801d146:	6903      	ldr	r3, [r0, #16]
 801d148:	f7f3 f87e 	bl	8010248 <ucdr_init_buffer_origin>
 801d14c:	4628      	mov	r0, r5
 801d14e:	4903      	ldr	r1, [pc, #12]	@ (801d15c <on_full_output_buffer+0x58>)
 801d150:	4622      	mov	r2, r4
 801d152:	f7f3 f855 	bl	8010200 <ucdr_set_on_full_buffer_callback>
 801d156:	2000      	movs	r0, #0
 801d158:	bd38      	pop	{r3, r4, r5, pc}
 801d15a:	bf00      	nop
 801d15c:	0801d105 	.word	0x0801d105

0801d160 <uxr_init_output_reliable_stream>:
 801d160:	b410      	push	{r4}
 801d162:	f89d c004 	ldrb.w	ip, [sp, #4]
 801d166:	8103      	strh	r3, [r0, #8]
 801d168:	e9c0 1200 	strd	r1, r2, [r0]
 801d16c:	f880 c00c 	strb.w	ip, [r0, #12]
 801d170:	b1d3      	cbz	r3, 801d1a8 <uxr_init_output_reliable_stream+0x48>
 801d172:	f8c1 c000 	str.w	ip, [r1]
 801d176:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801d17a:	f1bc 0f01 	cmp.w	ip, #1
 801d17e:	d913      	bls.n	801d1a8 <uxr_init_output_reliable_stream+0x48>
 801d180:	2301      	movs	r3, #1
 801d182:	fbb3 f1fc 	udiv	r1, r3, ip
 801d186:	fb0c 3111 	mls	r1, ip, r1, r3
 801d18a:	b289      	uxth	r1, r1
 801d18c:	6842      	ldr	r2, [r0, #4]
 801d18e:	6804      	ldr	r4, [r0, #0]
 801d190:	fbb2 f2fc 	udiv	r2, r2, ip
 801d194:	fb01 f202 	mul.w	r2, r1, r2
 801d198:	7b01      	ldrb	r1, [r0, #12]
 801d19a:	50a1      	str	r1, [r4, r2]
 801d19c:	3301      	adds	r3, #1
 801d19e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801d1a2:	b29b      	uxth	r3, r3
 801d1a4:	459c      	cmp	ip, r3
 801d1a6:	d8ec      	bhi.n	801d182 <uxr_init_output_reliable_stream+0x22>
 801d1a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d1ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d1b0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801d1b4:	4905      	ldr	r1, [pc, #20]	@ (801d1cc <uxr_init_output_reliable_stream+0x6c>)
 801d1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d1ba:	f8c0 100e 	str.w	r1, [r0, #14]
 801d1be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d1c2:	2300      	movs	r3, #0
 801d1c4:	8242      	strh	r2, [r0, #18]
 801d1c6:	8403      	strh	r3, [r0, #32]
 801d1c8:	4770      	bx	lr
 801d1ca:	bf00      	nop
 801d1cc:	ffff0000 	.word	0xffff0000

0801d1d0 <uxr_reset_output_reliable_stream>:
 801d1d0:	8901      	ldrh	r1, [r0, #8]
 801d1d2:	b1b1      	cbz	r1, 801d202 <uxr_reset_output_reliable_stream+0x32>
 801d1d4:	f04f 0c00 	mov.w	ip, #0
 801d1d8:	4663      	mov	r3, ip
 801d1da:	fbb3 f2f1 	udiv	r2, r3, r1
 801d1de:	fb01 3312 	mls	r3, r1, r2, r3
 801d1e2:	b29b      	uxth	r3, r3
 801d1e4:	6842      	ldr	r2, [r0, #4]
 801d1e6:	fbb2 f2f1 	udiv	r2, r2, r1
 801d1ea:	6801      	ldr	r1, [r0, #0]
 801d1ec:	fb02 f303 	mul.w	r3, r2, r3
 801d1f0:	7b02      	ldrb	r2, [r0, #12]
 801d1f2:	50ca      	str	r2, [r1, r3]
 801d1f4:	f10c 0c01 	add.w	ip, ip, #1
 801d1f8:	8901      	ldrh	r1, [r0, #8]
 801d1fa:	fa1f f38c 	uxth.w	r3, ip
 801d1fe:	4299      	cmp	r1, r3
 801d200:	d8eb      	bhi.n	801d1da <uxr_reset_output_reliable_stream+0xa>
 801d202:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d206:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d20a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801d20e:	4904      	ldr	r1, [pc, #16]	@ (801d220 <uxr_reset_output_reliable_stream+0x50>)
 801d210:	f8c0 100e 	str.w	r1, [r0, #14]
 801d214:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d218:	2300      	movs	r3, #0
 801d21a:	8242      	strh	r2, [r0, #18]
 801d21c:	8403      	strh	r3, [r0, #32]
 801d21e:	4770      	bx	lr
 801d220:	ffff0000 	.word	0xffff0000

0801d224 <uxr_prepare_reliable_buffer_to_write>:
 801d224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d228:	4604      	mov	r4, r0
 801d22a:	b091      	sub	sp, #68	@ 0x44
 801d22c:	8900      	ldrh	r0, [r0, #8]
 801d22e:	89e6      	ldrh	r6, [r4, #14]
 801d230:	6823      	ldr	r3, [r4, #0]
 801d232:	9204      	str	r2, [sp, #16]
 801d234:	fbb6 f2f0 	udiv	r2, r6, r0
 801d238:	fb00 6212 	mls	r2, r0, r2, r6
 801d23c:	b292      	uxth	r2, r2
 801d23e:	6865      	ldr	r5, [r4, #4]
 801d240:	fbb5 f5f0 	udiv	r5, r5, r0
 801d244:	fb05 3202 	mla	r2, r5, r2, r3
 801d248:	3204      	adds	r2, #4
 801d24a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801d24e:	f894 900c 	ldrb.w	r9, [r4, #12]
 801d252:	9203      	str	r2, [sp, #12]
 801d254:	468b      	mov	fp, r1
 801d256:	1f2f      	subs	r7, r5, #4
 801d258:	2800      	cmp	r0, #0
 801d25a:	f000 814c 	beq.w	801d4f6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801d25e:	f04f 0c00 	mov.w	ip, #0
 801d262:	46e2      	mov	sl, ip
 801d264:	4661      	mov	r1, ip
 801d266:	fbb1 f2f0 	udiv	r2, r1, r0
 801d26a:	fb00 1212 	mls	r2, r0, r2, r1
 801d26e:	b292      	uxth	r2, r2
 801d270:	fb05 f202 	mul.w	r2, r5, r2
 801d274:	f10c 0c01 	add.w	ip, ip, #1
 801d278:	589a      	ldr	r2, [r3, r2]
 801d27a:	454a      	cmp	r2, r9
 801d27c:	bf08      	it	eq
 801d27e:	f10a 0a01 	addeq.w	sl, sl, #1
 801d282:	fa1f f18c 	uxth.w	r1, ip
 801d286:	bf08      	it	eq
 801d288:	fa1f fa8a 	uxtheq.w	sl, sl
 801d28c:	4281      	cmp	r1, r0
 801d28e:	d3ea      	bcc.n	801d266 <uxr_prepare_reliable_buffer_to_write+0x42>
 801d290:	4640      	mov	r0, r8
 801d292:	2104      	movs	r1, #4
 801d294:	f8cd a014 	str.w	sl, [sp, #20]
 801d298:	f7f2 ffe2 	bl	8010260 <ucdr_alignment>
 801d29c:	4480      	add	r8, r0
 801d29e:	eb08 020b 	add.w	r2, r8, fp
 801d2a2:	42ba      	cmp	r2, r7
 801d2a4:	f240 80cd 	bls.w	801d442 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801d2a8:	7b22      	ldrb	r2, [r4, #12]
 801d2aa:	445a      	add	r2, fp
 801d2ac:	42ba      	cmp	r2, r7
 801d2ae:	f240 80b5 	bls.w	801d41c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801d2b2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801d2b6:	33fc      	adds	r3, #252	@ 0xfc
 801d2b8:	b2ba      	uxth	r2, r7
 801d2ba:	4413      	add	r3, r2
 801d2bc:	b29b      	uxth	r3, r3
 801d2be:	fb0a f903 	mul.w	r9, sl, r3
 801d2c2:	45d9      	cmp	r9, fp
 801d2c4:	9305      	str	r3, [sp, #20]
 801d2c6:	9306      	str	r3, [sp, #24]
 801d2c8:	f0c0 80b7 	bcc.w	801d43a <uxr_prepare_reliable_buffer_to_write+0x216>
 801d2cc:	f108 0304 	add.w	r3, r8, #4
 801d2d0:	42bb      	cmp	r3, r7
 801d2d2:	f080 80db 	bcs.w	801d48c <uxr_prepare_reliable_buffer_to_write+0x268>
 801d2d6:	f1a2 0904 	sub.w	r9, r2, #4
 801d2da:	eba9 0908 	sub.w	r9, r9, r8
 801d2de:	9b05      	ldr	r3, [sp, #20]
 801d2e0:	fa1f f989 	uxth.w	r9, r9
 801d2e4:	ebab 0b09 	sub.w	fp, fp, r9
 801d2e8:	fbbb f2f3 	udiv	r2, fp, r3
 801d2ec:	fb03 b312 	mls	r3, r3, r2, fp
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	f000 80c8 	beq.w	801d486 <uxr_prepare_reliable_buffer_to_write+0x262>
 801d2f6:	3201      	adds	r2, #1
 801d2f8:	b292      	uxth	r2, r2
 801d2fa:	9306      	str	r3, [sp, #24]
 801d2fc:	4552      	cmp	r2, sl
 801d2fe:	f200 809c 	bhi.w	801d43a <uxr_prepare_reliable_buffer_to_write+0x216>
 801d302:	f10d 0b20 	add.w	fp, sp, #32
 801d306:	2a00      	cmp	r2, #0
 801d308:	d042      	beq.n	801d390 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801d30a:	f8cd 801c 	str.w	r8, [sp, #28]
 801d30e:	f04f 0a00 	mov.w	sl, #0
 801d312:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d316:	9505      	str	r5, [sp, #20]
 801d318:	f10d 0b20 	add.w	fp, sp, #32
 801d31c:	4615      	mov	r5, r2
 801d31e:	e000      	b.n	801d322 <uxr_prepare_reliable_buffer_to_write+0xfe>
 801d320:	46c1      	mov	r9, r8
 801d322:	8920      	ldrh	r0, [r4, #8]
 801d324:	fbb6 f2f0 	udiv	r2, r6, r0
 801d328:	fb00 6112 	mls	r1, r0, r2, r6
 801d32c:	b28a      	uxth	r2, r1
 801d32e:	6863      	ldr	r3, [r4, #4]
 801d330:	fbb3 f1f0 	udiv	r1, r3, r0
 801d334:	6823      	ldr	r3, [r4, #0]
 801d336:	fb02 f101 	mul.w	r1, r2, r1
 801d33a:	3104      	adds	r1, #4
 801d33c:	4419      	add	r1, r3
 801d33e:	4658      	mov	r0, fp
 801d340:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801d344:	9200      	str	r2, [sp, #0]
 801d346:	2300      	movs	r3, #0
 801d348:	463a      	mov	r2, r7
 801d34a:	f7f2 ff73 	bl	8010234 <ucdr_init_buffer_origin_offset>
 801d34e:	464a      	mov	r2, r9
 801d350:	2300      	movs	r3, #0
 801d352:	210d      	movs	r1, #13
 801d354:	4658      	mov	r0, fp
 801d356:	f7fa fda5 	bl	8017ea4 <uxr_buffer_submessage_header>
 801d35a:	8921      	ldrh	r1, [r4, #8]
 801d35c:	fbb6 f2f1 	udiv	r2, r6, r1
 801d360:	fb01 6212 	mls	r2, r1, r2, r6
 801d364:	b292      	uxth	r2, r2
 801d366:	6863      	ldr	r3, [r4, #4]
 801d368:	fbb3 f3f1 	udiv	r3, r3, r1
 801d36c:	fb02 f303 	mul.w	r3, r2, r3
 801d370:	6822      	ldr	r2, [r4, #0]
 801d372:	4630      	mov	r0, r6
 801d374:	50d7      	str	r7, [r2, r3]
 801d376:	2101      	movs	r1, #1
 801d378:	f000 f9c4 	bl	801d704 <uxr_seq_num_add>
 801d37c:	f10a 0a01 	add.w	sl, sl, #1
 801d380:	fa1f f38a 	uxth.w	r3, sl
 801d384:	429d      	cmp	r5, r3
 801d386:	4606      	mov	r6, r0
 801d388:	d8ca      	bhi.n	801d320 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801d38a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801d38e:	9d05      	ldr	r5, [sp, #20]
 801d390:	8920      	ldrh	r0, [r4, #8]
 801d392:	fbb6 f3f0 	udiv	r3, r6, r0
 801d396:	fb00 6313 	mls	r3, r0, r3, r6
 801d39a:	b299      	uxth	r1, r3
 801d39c:	6863      	ldr	r3, [r4, #4]
 801d39e:	fbb3 f3f0 	udiv	r3, r3, r0
 801d3a2:	fb01 f303 	mul.w	r3, r1, r3
 801d3a6:	6821      	ldr	r1, [r4, #0]
 801d3a8:	3304      	adds	r3, #4
 801d3aa:	4419      	add	r1, r3
 801d3ac:	463a      	mov	r2, r7
 801d3ae:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801d3b2:	9000      	str	r0, [sp, #0]
 801d3b4:	2300      	movs	r3, #0
 801d3b6:	4658      	mov	r0, fp
 801d3b8:	f7f2 ff3c 	bl	8010234 <ucdr_init_buffer_origin_offset>
 801d3bc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801d3c0:	4658      	mov	r0, fp
 801d3c2:	fa1f f289 	uxth.w	r2, r9
 801d3c6:	2302      	movs	r3, #2
 801d3c8:	210d      	movs	r1, #13
 801d3ca:	f7fa fd6b 	bl	8017ea4 <uxr_buffer_submessage_header>
 801d3ce:	9b03      	ldr	r3, [sp, #12]
 801d3d0:	8927      	ldrh	r7, [r4, #8]
 801d3d2:	7b20      	ldrb	r0, [r4, #12]
 801d3d4:	f108 0104 	add.w	r1, r8, #4
 801d3d8:	440b      	add	r3, r1
 801d3da:	4619      	mov	r1, r3
 801d3dc:	fbb6 f3f7 	udiv	r3, r6, r7
 801d3e0:	fb07 6313 	mls	r3, r7, r3, r6
 801d3e4:	f1a5 0208 	sub.w	r2, r5, #8
 801d3e8:	b29d      	uxth	r5, r3
 801d3ea:	3004      	adds	r0, #4
 801d3ec:	6863      	ldr	r3, [r4, #4]
 801d3ee:	fbb3 f3f7 	udiv	r3, r3, r7
 801d3f2:	fb05 f303 	mul.w	r3, r5, r3
 801d3f6:	6825      	ldr	r5, [r4, #0]
 801d3f8:	4448      	add	r0, r9
 801d3fa:	50e8      	str	r0, [r5, r3]
 801d3fc:	9d04      	ldr	r5, [sp, #16]
 801d3fe:	eba2 0208 	sub.w	r2, r2, r8
 801d402:	4628      	mov	r0, r5
 801d404:	f7f2 ff28 	bl	8010258 <ucdr_init_buffer>
 801d408:	4628      	mov	r0, r5
 801d40a:	493c      	ldr	r1, [pc, #240]	@ (801d4fc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801d40c:	4622      	mov	r2, r4
 801d40e:	f7f2 fef7 	bl	8010200 <ucdr_set_on_full_buffer_callback>
 801d412:	2001      	movs	r0, #1
 801d414:	81e6      	strh	r6, [r4, #14]
 801d416:	b011      	add	sp, #68	@ 0x44
 801d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d41c:	2101      	movs	r1, #1
 801d41e:	89e0      	ldrh	r0, [r4, #14]
 801d420:	f000 f970 	bl	801d704 <uxr_seq_num_add>
 801d424:	8921      	ldrh	r1, [r4, #8]
 801d426:	4605      	mov	r5, r0
 801d428:	8a60      	ldrh	r0, [r4, #18]
 801d42a:	f000 f96b 	bl	801d704 <uxr_seq_num_add>
 801d42e:	4601      	mov	r1, r0
 801d430:	4628      	mov	r0, r5
 801d432:	f000 f96f 	bl	801d714 <uxr_seq_num_cmp>
 801d436:	2800      	cmp	r0, #0
 801d438:	dd42      	ble.n	801d4c0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801d43a:	2000      	movs	r0, #0
 801d43c:	b011      	add	sp, #68	@ 0x44
 801d43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d442:	8921      	ldrh	r1, [r4, #8]
 801d444:	8a60      	ldrh	r0, [r4, #18]
 801d446:	9205      	str	r2, [sp, #20]
 801d448:	f000 f95c 	bl	801d704 <uxr_seq_num_add>
 801d44c:	4601      	mov	r1, r0
 801d44e:	4630      	mov	r0, r6
 801d450:	f000 f960 	bl	801d714 <uxr_seq_num_cmp>
 801d454:	2800      	cmp	r0, #0
 801d456:	9a05      	ldr	r2, [sp, #20]
 801d458:	dcef      	bgt.n	801d43a <uxr_prepare_reliable_buffer_to_write+0x216>
 801d45a:	8927      	ldrh	r7, [r4, #8]
 801d45c:	fbb6 f3f7 	udiv	r3, r6, r7
 801d460:	fb07 6313 	mls	r3, r7, r3, r6
 801d464:	b29d      	uxth	r5, r3
 801d466:	6863      	ldr	r3, [r4, #4]
 801d468:	6824      	ldr	r4, [r4, #0]
 801d46a:	fbb3 f3f7 	udiv	r3, r3, r7
 801d46e:	fb05 f303 	mul.w	r3, r5, r3
 801d472:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801d476:	50e2      	str	r2, [r4, r3]
 801d478:	2300      	movs	r3, #0
 801d47a:	f8cd 8000 	str.w	r8, [sp]
 801d47e:	f7f2 fed9 	bl	8010234 <ucdr_init_buffer_origin_offset>
 801d482:	2001      	movs	r0, #1
 801d484:	e7da      	b.n	801d43c <uxr_prepare_reliable_buffer_to_write+0x218>
 801d486:	b293      	uxth	r3, r2
 801d488:	461a      	mov	r2, r3
 801d48a:	e737      	b.n	801d2fc <uxr_prepare_reliable_buffer_to_write+0xd8>
 801d48c:	4630      	mov	r0, r6
 801d48e:	2101      	movs	r1, #1
 801d490:	9207      	str	r2, [sp, #28]
 801d492:	f000 f937 	bl	801d704 <uxr_seq_num_add>
 801d496:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801d49a:	fbb0 f1fc 	udiv	r1, r0, ip
 801d49e:	fb0c 0111 	mls	r1, ip, r1, r0
 801d4a2:	4606      	mov	r6, r0
 801d4a4:	b288      	uxth	r0, r1
 801d4a6:	6863      	ldr	r3, [r4, #4]
 801d4a8:	fbb3 f1fc 	udiv	r1, r3, ip
 801d4ac:	6823      	ldr	r3, [r4, #0]
 801d4ae:	9a07      	ldr	r2, [sp, #28]
 801d4b0:	fb00 f101 	mul.w	r1, r0, r1
 801d4b4:	3104      	adds	r1, #4
 801d4b6:	440b      	add	r3, r1
 801d4b8:	9303      	str	r3, [sp, #12]
 801d4ba:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801d4be:	e70a      	b.n	801d2d6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801d4c0:	8921      	ldrh	r1, [r4, #8]
 801d4c2:	fbb5 f3f1 	udiv	r3, r5, r1
 801d4c6:	fb01 5313 	mls	r3, r1, r3, r5
 801d4ca:	b29a      	uxth	r2, r3
 801d4cc:	6863      	ldr	r3, [r4, #4]
 801d4ce:	fbb3 f3f1 	udiv	r3, r3, r1
 801d4d2:	6821      	ldr	r1, [r4, #0]
 801d4d4:	9804      	ldr	r0, [sp, #16]
 801d4d6:	fb02 f303 	mul.w	r3, r2, r3
 801d4da:	3304      	adds	r3, #4
 801d4dc:	7b22      	ldrb	r2, [r4, #12]
 801d4de:	4419      	add	r1, r3
 801d4e0:	445a      	add	r2, fp
 801d4e2:	f841 2c04 	str.w	r2, [r1, #-4]
 801d4e6:	7b23      	ldrb	r3, [r4, #12]
 801d4e8:	9300      	str	r3, [sp, #0]
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	f7f2 fea2 	bl	8010234 <ucdr_init_buffer_origin_offset>
 801d4f0:	81e5      	strh	r5, [r4, #14]
 801d4f2:	2001      	movs	r0, #1
 801d4f4:	e7a2      	b.n	801d43c <uxr_prepare_reliable_buffer_to_write+0x218>
 801d4f6:	4682      	mov	sl, r0
 801d4f8:	e6ca      	b.n	801d290 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801d4fa:	bf00      	nop
 801d4fc:	0801d105 	.word	0x0801d105

0801d500 <uxr_prepare_next_reliable_buffer_to_send>:
 801d500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d502:	4604      	mov	r4, r0
 801d504:	460f      	mov	r7, r1
 801d506:	8a00      	ldrh	r0, [r0, #16]
 801d508:	2101      	movs	r1, #1
 801d50a:	4616      	mov	r6, r2
 801d50c:	461d      	mov	r5, r3
 801d50e:	f000 f8f9 	bl	801d704 <uxr_seq_num_add>
 801d512:	8028      	strh	r0, [r5, #0]
 801d514:	8922      	ldrh	r2, [r4, #8]
 801d516:	fbb0 f3f2 	udiv	r3, r0, r2
 801d51a:	fb02 0c13 	mls	ip, r2, r3, r0
 801d51e:	fa1f fc8c 	uxth.w	ip, ip
 801d522:	6863      	ldr	r3, [r4, #4]
 801d524:	fbb3 f3f2 	udiv	r3, r3, r2
 801d528:	fb0c fc03 	mul.w	ip, ip, r3
 801d52c:	6823      	ldr	r3, [r4, #0]
 801d52e:	89e1      	ldrh	r1, [r4, #14]
 801d530:	f10c 0c04 	add.w	ip, ip, #4
 801d534:	4463      	add	r3, ip
 801d536:	603b      	str	r3, [r7, #0]
 801d538:	6823      	ldr	r3, [r4, #0]
 801d53a:	449c      	add	ip, r3
 801d53c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801d540:	6033      	str	r3, [r6, #0]
 801d542:	f000 f8e7 	bl	801d714 <uxr_seq_num_cmp>
 801d546:	2800      	cmp	r0, #0
 801d548:	dd01      	ble.n	801d54e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801d54a:	2000      	movs	r0, #0
 801d54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d54e:	7b23      	ldrb	r3, [r4, #12]
 801d550:	6832      	ldr	r2, [r6, #0]
 801d552:	429a      	cmp	r2, r3
 801d554:	d9f9      	bls.n	801d54a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801d556:	8a61      	ldrh	r1, [r4, #18]
 801d558:	8a20      	ldrh	r0, [r4, #16]
 801d55a:	f000 f8d7 	bl	801d70c <uxr_seq_num_sub>
 801d55e:	8923      	ldrh	r3, [r4, #8]
 801d560:	4283      	cmp	r3, r0
 801d562:	d0f2      	beq.n	801d54a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801d564:	8828      	ldrh	r0, [r5, #0]
 801d566:	89e3      	ldrh	r3, [r4, #14]
 801d568:	8220      	strh	r0, [r4, #16]
 801d56a:	4298      	cmp	r0, r3
 801d56c:	d001      	beq.n	801d572 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801d56e:	2001      	movs	r0, #1
 801d570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d572:	2101      	movs	r1, #1
 801d574:	f000 f8c6 	bl	801d704 <uxr_seq_num_add>
 801d578:	81e0      	strh	r0, [r4, #14]
 801d57a:	2001      	movs	r0, #1
 801d57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d57e:	bf00      	nop

0801d580 <uxr_update_output_stream_heartbeat_timestamp>:
 801d580:	b570      	push	{r4, r5, r6, lr}
 801d582:	8a01      	ldrh	r1, [r0, #16]
 801d584:	4604      	mov	r4, r0
 801d586:	8a40      	ldrh	r0, [r0, #18]
 801d588:	4615      	mov	r5, r2
 801d58a:	461e      	mov	r6, r3
 801d58c:	f000 f8c2 	bl	801d714 <uxr_seq_num_cmp>
 801d590:	2800      	cmp	r0, #0
 801d592:	db07      	blt.n	801d5a4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801d594:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d598:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d59c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801d5a0:	2000      	movs	r0, #0
 801d5a2:	bd70      	pop	{r4, r5, r6, pc}
 801d5a4:	f894 0020 	ldrb.w	r0, [r4, #32]
 801d5a8:	b940      	cbnz	r0, 801d5bc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801d5aa:	2301      	movs	r3, #1
 801d5ac:	f884 3020 	strb.w	r3, [r4, #32]
 801d5b0:	3564      	adds	r5, #100	@ 0x64
 801d5b2:	f146 0600 	adc.w	r6, r6, #0
 801d5b6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801d5ba:	bd70      	pop	{r4, r5, r6, pc}
 801d5bc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801d5c0:	4295      	cmp	r5, r2
 801d5c2:	eb76 0303 	sbcs.w	r3, r6, r3
 801d5c6:	bfa5      	ittet	ge
 801d5c8:	3001      	addge	r0, #1
 801d5ca:	f884 0020 	strbge.w	r0, [r4, #32]
 801d5ce:	2000      	movlt	r0, #0
 801d5d0:	2001      	movge	r0, #1
 801d5d2:	e7ed      	b.n	801d5b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801d5d4 <uxr_begin_output_nack_buffer_it>:
 801d5d4:	8a40      	ldrh	r0, [r0, #18]
 801d5d6:	4770      	bx	lr

0801d5d8 <uxr_next_reliable_nack_buffer_to_send>:
 801d5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5dc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801d5e0:	b082      	sub	sp, #8
 801d5e2:	f1b8 0f00 	cmp.w	r8, #0
 801d5e6:	d011      	beq.n	801d60c <uxr_next_reliable_nack_buffer_to_send+0x34>
 801d5e8:	4604      	mov	r4, r0
 801d5ea:	8818      	ldrh	r0, [r3, #0]
 801d5ec:	460e      	mov	r6, r1
 801d5ee:	4617      	mov	r7, r2
 801d5f0:	461d      	mov	r5, r3
 801d5f2:	2101      	movs	r1, #1
 801d5f4:	f000 f886 	bl	801d704 <uxr_seq_num_add>
 801d5f8:	8028      	strh	r0, [r5, #0]
 801d5fa:	8a21      	ldrh	r1, [r4, #16]
 801d5fc:	f000 f88a 	bl	801d714 <uxr_seq_num_cmp>
 801d600:	2800      	cmp	r0, #0
 801d602:	dd07      	ble.n	801d614 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801d604:	f04f 0800 	mov.w	r8, #0
 801d608:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801d60c:	4640      	mov	r0, r8
 801d60e:	b002      	add	sp, #8
 801d610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d614:	8921      	ldrh	r1, [r4, #8]
 801d616:	8828      	ldrh	r0, [r5, #0]
 801d618:	6823      	ldr	r3, [r4, #0]
 801d61a:	fbb0 f2f1 	udiv	r2, r0, r1
 801d61e:	fb01 0c12 	mls	ip, r1, r2, r0
 801d622:	fa1f f28c 	uxth.w	r2, ip
 801d626:	9301      	str	r3, [sp, #4]
 801d628:	6863      	ldr	r3, [r4, #4]
 801d62a:	fbb3 fcf1 	udiv	ip, r3, r1
 801d62e:	9b01      	ldr	r3, [sp, #4]
 801d630:	fb02 fc0c 	mul.w	ip, r2, ip
 801d634:	f10c 0c04 	add.w	ip, ip, #4
 801d638:	4463      	add	r3, ip
 801d63a:	6033      	str	r3, [r6, #0]
 801d63c:	6823      	ldr	r3, [r4, #0]
 801d63e:	4463      	add	r3, ip
 801d640:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801d644:	603b      	str	r3, [r7, #0]
 801d646:	7b22      	ldrb	r2, [r4, #12]
 801d648:	429a      	cmp	r2, r3
 801d64a:	d0d2      	beq.n	801d5f2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801d64c:	4640      	mov	r0, r8
 801d64e:	b002      	add	sp, #8
 801d650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d654 <uxr_process_acknack>:
 801d654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d656:	4604      	mov	r4, r0
 801d658:	460e      	mov	r6, r1
 801d65a:	4610      	mov	r0, r2
 801d65c:	2101      	movs	r1, #1
 801d65e:	f000 f855 	bl	801d70c <uxr_seq_num_sub>
 801d662:	8a61      	ldrh	r1, [r4, #18]
 801d664:	f000 f852 	bl	801d70c <uxr_seq_num_sub>
 801d668:	b1c0      	cbz	r0, 801d69c <uxr_process_acknack+0x48>
 801d66a:	4605      	mov	r5, r0
 801d66c:	2700      	movs	r7, #0
 801d66e:	2101      	movs	r1, #1
 801d670:	8a60      	ldrh	r0, [r4, #18]
 801d672:	f000 f847 	bl	801d704 <uxr_seq_num_add>
 801d676:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801d67a:	fbb0 f1fc 	udiv	r1, r0, ip
 801d67e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d682:	fb0c 0111 	mls	r1, ip, r1, r0
 801d686:	b289      	uxth	r1, r1
 801d688:	3701      	adds	r7, #1
 801d68a:	fbb3 f3fc 	udiv	r3, r3, ip
 801d68e:	fb01 f303 	mul.w	r3, r1, r3
 801d692:	42bd      	cmp	r5, r7
 801d694:	7b21      	ldrb	r1, [r4, #12]
 801d696:	8260      	strh	r0, [r4, #18]
 801d698:	50d1      	str	r1, [r2, r3]
 801d69a:	d1e8      	bne.n	801d66e <uxr_process_acknack+0x1a>
 801d69c:	3e00      	subs	r6, #0
 801d69e:	f04f 0300 	mov.w	r3, #0
 801d6a2:	bf18      	it	ne
 801d6a4:	2601      	movne	r6, #1
 801d6a6:	f884 3020 	strb.w	r3, [r4, #32]
 801d6aa:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801d6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d6b0 <uxr_is_output_up_to_date>:
 801d6b0:	8a01      	ldrh	r1, [r0, #16]
 801d6b2:	8a40      	ldrh	r0, [r0, #18]
 801d6b4:	b508      	push	{r3, lr}
 801d6b6:	f000 f82d 	bl	801d714 <uxr_seq_num_cmp>
 801d6ba:	fab0 f080 	clz	r0, r0
 801d6be:	0940      	lsrs	r0, r0, #5
 801d6c0:	bd08      	pop	{r3, pc}
 801d6c2:	bf00      	nop

0801d6c4 <get_available_free_slots>:
 801d6c4:	8902      	ldrh	r2, [r0, #8]
 801d6c6:	b1da      	cbz	r2, 801d700 <get_available_free_slots+0x3c>
 801d6c8:	b530      	push	{r4, r5, lr}
 801d6ca:	2100      	movs	r1, #0
 801d6cc:	6843      	ldr	r3, [r0, #4]
 801d6ce:	6805      	ldr	r5, [r0, #0]
 801d6d0:	7b04      	ldrb	r4, [r0, #12]
 801d6d2:	fbb3 fef2 	udiv	lr, r3, r2
 801d6d6:	4608      	mov	r0, r1
 801d6d8:	460b      	mov	r3, r1
 801d6da:	fbb3 fcf2 	udiv	ip, r3, r2
 801d6de:	fb02 331c 	mls	r3, r2, ip, r3
 801d6e2:	b29b      	uxth	r3, r3
 801d6e4:	fb0e f303 	mul.w	r3, lr, r3
 801d6e8:	3101      	adds	r1, #1
 801d6ea:	f855 c003 	ldr.w	ip, [r5, r3]
 801d6ee:	4564      	cmp	r4, ip
 801d6f0:	bf08      	it	eq
 801d6f2:	3001      	addeq	r0, #1
 801d6f4:	b28b      	uxth	r3, r1
 801d6f6:	bf08      	it	eq
 801d6f8:	b280      	uxtheq	r0, r0
 801d6fa:	4293      	cmp	r3, r2
 801d6fc:	d3ed      	bcc.n	801d6da <get_available_free_slots+0x16>
 801d6fe:	bd30      	pop	{r4, r5, pc}
 801d700:	4610      	mov	r0, r2
 801d702:	4770      	bx	lr

0801d704 <uxr_seq_num_add>:
 801d704:	4408      	add	r0, r1
 801d706:	b280      	uxth	r0, r0
 801d708:	4770      	bx	lr
 801d70a:	bf00      	nop

0801d70c <uxr_seq_num_sub>:
 801d70c:	1a40      	subs	r0, r0, r1
 801d70e:	b280      	uxth	r0, r0
 801d710:	4770      	bx	lr
 801d712:	bf00      	nop

0801d714 <uxr_seq_num_cmp>:
 801d714:	4288      	cmp	r0, r1
 801d716:	d011      	beq.n	801d73c <uxr_seq_num_cmp+0x28>
 801d718:	d309      	bcc.n	801d72e <uxr_seq_num_cmp+0x1a>
 801d71a:	4288      	cmp	r0, r1
 801d71c:	d910      	bls.n	801d740 <uxr_seq_num_cmp+0x2c>
 801d71e:	1a40      	subs	r0, r0, r1
 801d720:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801d724:	bfd4      	ite	le
 801d726:	2001      	movle	r0, #1
 801d728:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801d72c:	4770      	bx	lr
 801d72e:	1a0b      	subs	r3, r1, r0
 801d730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801d734:	daf1      	bge.n	801d71a <uxr_seq_num_cmp+0x6>
 801d736:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d73a:	4770      	bx	lr
 801d73c:	2000      	movs	r0, #0
 801d73e:	4770      	bx	lr
 801d740:	2001      	movs	r0, #1
 801d742:	4770      	bx	lr

0801d744 <rcl_get_default_domain_id>:
 801d744:	b530      	push	{r4, r5, lr}
 801d746:	b083      	sub	sp, #12
 801d748:	2300      	movs	r3, #0
 801d74a:	9300      	str	r3, [sp, #0]
 801d74c:	b1d0      	cbz	r0, 801d784 <rcl_get_default_domain_id+0x40>
 801d74e:	4604      	mov	r4, r0
 801d750:	4669      	mov	r1, sp
 801d752:	4815      	ldr	r0, [pc, #84]	@ (801d7a8 <rcl_get_default_domain_id+0x64>)
 801d754:	f7f4 fc50 	bl	8011ff8 <rcutils_get_env>
 801d758:	4602      	mov	r2, r0
 801d75a:	b110      	cbz	r0, 801d762 <rcl_get_default_domain_id+0x1e>
 801d75c:	2001      	movs	r0, #1
 801d75e:	b003      	add	sp, #12
 801d760:	bd30      	pop	{r4, r5, pc}
 801d762:	9b00      	ldr	r3, [sp, #0]
 801d764:	b18b      	cbz	r3, 801d78a <rcl_get_default_domain_id+0x46>
 801d766:	7818      	ldrb	r0, [r3, #0]
 801d768:	2800      	cmp	r0, #0
 801d76a:	d0f8      	beq.n	801d75e <rcl_get_default_domain_id+0x1a>
 801d76c:	a901      	add	r1, sp, #4
 801d76e:	4618      	mov	r0, r3
 801d770:	9201      	str	r2, [sp, #4]
 801d772:	f000 fa5f 	bl	801dc34 <strtoul>
 801d776:	4605      	mov	r5, r0
 801d778:	b150      	cbz	r0, 801d790 <rcl_get_default_domain_id+0x4c>
 801d77a:	1c43      	adds	r3, r0, #1
 801d77c:	d00d      	beq.n	801d79a <rcl_get_default_domain_id+0x56>
 801d77e:	6025      	str	r5, [r4, #0]
 801d780:	2000      	movs	r0, #0
 801d782:	e7ec      	b.n	801d75e <rcl_get_default_domain_id+0x1a>
 801d784:	200b      	movs	r0, #11
 801d786:	b003      	add	sp, #12
 801d788:	bd30      	pop	{r4, r5, pc}
 801d78a:	4618      	mov	r0, r3
 801d78c:	b003      	add	sp, #12
 801d78e:	bd30      	pop	{r4, r5, pc}
 801d790:	9b01      	ldr	r3, [sp, #4]
 801d792:	781b      	ldrb	r3, [r3, #0]
 801d794:	2b00      	cmp	r3, #0
 801d796:	d0f2      	beq.n	801d77e <rcl_get_default_domain_id+0x3a>
 801d798:	e7e0      	b.n	801d75c <rcl_get_default_domain_id+0x18>
 801d79a:	f000 fd85 	bl	801e2a8 <__errno>
 801d79e:	6803      	ldr	r3, [r0, #0]
 801d7a0:	2b22      	cmp	r3, #34	@ 0x22
 801d7a2:	d1ec      	bne.n	801d77e <rcl_get_default_domain_id+0x3a>
 801d7a4:	e7da      	b.n	801d75c <rcl_get_default_domain_id+0x18>
 801d7a6:	bf00      	nop
 801d7a8:	08021640 	.word	0x08021640

0801d7ac <calloc>:
 801d7ac:	4b02      	ldr	r3, [pc, #8]	@ (801d7b8 <calloc+0xc>)
 801d7ae:	460a      	mov	r2, r1
 801d7b0:	4601      	mov	r1, r0
 801d7b2:	6818      	ldr	r0, [r3, #0]
 801d7b4:	f000 b802 	b.w	801d7bc <_calloc_r>
 801d7b8:	20000dd0 	.word	0x20000dd0

0801d7bc <_calloc_r>:
 801d7bc:	b570      	push	{r4, r5, r6, lr}
 801d7be:	fba1 5402 	umull	r5, r4, r1, r2
 801d7c2:	b93c      	cbnz	r4, 801d7d4 <_calloc_r+0x18>
 801d7c4:	4629      	mov	r1, r5
 801d7c6:	f000 f899 	bl	801d8fc <_malloc_r>
 801d7ca:	4606      	mov	r6, r0
 801d7cc:	b928      	cbnz	r0, 801d7da <_calloc_r+0x1e>
 801d7ce:	2600      	movs	r6, #0
 801d7d0:	4630      	mov	r0, r6
 801d7d2:	bd70      	pop	{r4, r5, r6, pc}
 801d7d4:	220c      	movs	r2, #12
 801d7d6:	6002      	str	r2, [r0, #0]
 801d7d8:	e7f9      	b.n	801d7ce <_calloc_r+0x12>
 801d7da:	462a      	mov	r2, r5
 801d7dc:	4621      	mov	r1, r4
 801d7de:	f000 fccf 	bl	801e180 <memset>
 801d7e2:	e7f5      	b.n	801d7d0 <_calloc_r+0x14>

0801d7e4 <exit>:
 801d7e4:	b508      	push	{r3, lr}
 801d7e6:	4b06      	ldr	r3, [pc, #24]	@ (801d800 <exit+0x1c>)
 801d7e8:	4604      	mov	r4, r0
 801d7ea:	b113      	cbz	r3, 801d7f2 <exit+0xe>
 801d7ec:	2100      	movs	r1, #0
 801d7ee:	f3af 8000 	nop.w
 801d7f2:	4b04      	ldr	r3, [pc, #16]	@ (801d804 <exit+0x20>)
 801d7f4:	681b      	ldr	r3, [r3, #0]
 801d7f6:	b103      	cbz	r3, 801d7fa <exit+0x16>
 801d7f8:	4798      	blx	r3
 801d7fa:	4620      	mov	r0, r4
 801d7fc:	f7e6 fd06 	bl	800420c <_exit>
 801d800:	00000000 	.word	0x00000000
 801d804:	2000c688 	.word	0x2000c688

0801d808 <getenv>:
 801d808:	b507      	push	{r0, r1, r2, lr}
 801d80a:	4b04      	ldr	r3, [pc, #16]	@ (801d81c <getenv+0x14>)
 801d80c:	4601      	mov	r1, r0
 801d80e:	aa01      	add	r2, sp, #4
 801d810:	6818      	ldr	r0, [r3, #0]
 801d812:	f000 f805 	bl	801d820 <_findenv_r>
 801d816:	b003      	add	sp, #12
 801d818:	f85d fb04 	ldr.w	pc, [sp], #4
 801d81c:	20000dd0 	.word	0x20000dd0

0801d820 <_findenv_r>:
 801d820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d824:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801d894 <_findenv_r+0x74>
 801d828:	4606      	mov	r6, r0
 801d82a:	4689      	mov	r9, r1
 801d82c:	4617      	mov	r7, r2
 801d82e:	f000 fd9d 	bl	801e36c <__env_lock>
 801d832:	f8da 4000 	ldr.w	r4, [sl]
 801d836:	b134      	cbz	r4, 801d846 <_findenv_r+0x26>
 801d838:	464b      	mov	r3, r9
 801d83a:	4698      	mov	r8, r3
 801d83c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d840:	b13a      	cbz	r2, 801d852 <_findenv_r+0x32>
 801d842:	2a3d      	cmp	r2, #61	@ 0x3d
 801d844:	d1f9      	bne.n	801d83a <_findenv_r+0x1a>
 801d846:	4630      	mov	r0, r6
 801d848:	f000 fd96 	bl	801e378 <__env_unlock>
 801d84c:	2000      	movs	r0, #0
 801d84e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d852:	eba8 0809 	sub.w	r8, r8, r9
 801d856:	46a3      	mov	fp, r4
 801d858:	f854 0b04 	ldr.w	r0, [r4], #4
 801d85c:	2800      	cmp	r0, #0
 801d85e:	d0f2      	beq.n	801d846 <_findenv_r+0x26>
 801d860:	4642      	mov	r2, r8
 801d862:	4649      	mov	r1, r9
 801d864:	f000 fca1 	bl	801e1aa <strncmp>
 801d868:	2800      	cmp	r0, #0
 801d86a:	d1f4      	bne.n	801d856 <_findenv_r+0x36>
 801d86c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d870:	eb03 0508 	add.w	r5, r3, r8
 801d874:	f813 3008 	ldrb.w	r3, [r3, r8]
 801d878:	2b3d      	cmp	r3, #61	@ 0x3d
 801d87a:	d1ec      	bne.n	801d856 <_findenv_r+0x36>
 801d87c:	f8da 3000 	ldr.w	r3, [sl]
 801d880:	ebab 0303 	sub.w	r3, fp, r3
 801d884:	109b      	asrs	r3, r3, #2
 801d886:	4630      	mov	r0, r6
 801d888:	603b      	str	r3, [r7, #0]
 801d88a:	f000 fd75 	bl	801e378 <__env_unlock>
 801d88e:	1c68      	adds	r0, r5, #1
 801d890:	e7dd      	b.n	801d84e <_findenv_r+0x2e>
 801d892:	bf00      	nop
 801d894:	20000000 	.word	0x20000000

0801d898 <malloc>:
 801d898:	4b02      	ldr	r3, [pc, #8]	@ (801d8a4 <malloc+0xc>)
 801d89a:	4601      	mov	r1, r0
 801d89c:	6818      	ldr	r0, [r3, #0]
 801d89e:	f000 b82d 	b.w	801d8fc <_malloc_r>
 801d8a2:	bf00      	nop
 801d8a4:	20000dd0 	.word	0x20000dd0

0801d8a8 <free>:
 801d8a8:	4b02      	ldr	r3, [pc, #8]	@ (801d8b4 <free+0xc>)
 801d8aa:	4601      	mov	r1, r0
 801d8ac:	6818      	ldr	r0, [r3, #0]
 801d8ae:	f000 bd69 	b.w	801e384 <_free_r>
 801d8b2:	bf00      	nop
 801d8b4:	20000dd0 	.word	0x20000dd0

0801d8b8 <sbrk_aligned>:
 801d8b8:	b570      	push	{r4, r5, r6, lr}
 801d8ba:	4e0f      	ldr	r6, [pc, #60]	@ (801d8f8 <sbrk_aligned+0x40>)
 801d8bc:	460c      	mov	r4, r1
 801d8be:	6831      	ldr	r1, [r6, #0]
 801d8c0:	4605      	mov	r5, r0
 801d8c2:	b911      	cbnz	r1, 801d8ca <sbrk_aligned+0x12>
 801d8c4:	f000 fcce 	bl	801e264 <_sbrk_r>
 801d8c8:	6030      	str	r0, [r6, #0]
 801d8ca:	4621      	mov	r1, r4
 801d8cc:	4628      	mov	r0, r5
 801d8ce:	f000 fcc9 	bl	801e264 <_sbrk_r>
 801d8d2:	1c43      	adds	r3, r0, #1
 801d8d4:	d103      	bne.n	801d8de <sbrk_aligned+0x26>
 801d8d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801d8da:	4620      	mov	r0, r4
 801d8dc:	bd70      	pop	{r4, r5, r6, pc}
 801d8de:	1cc4      	adds	r4, r0, #3
 801d8e0:	f024 0403 	bic.w	r4, r4, #3
 801d8e4:	42a0      	cmp	r0, r4
 801d8e6:	d0f8      	beq.n	801d8da <sbrk_aligned+0x22>
 801d8e8:	1a21      	subs	r1, r4, r0
 801d8ea:	4628      	mov	r0, r5
 801d8ec:	f000 fcba 	bl	801e264 <_sbrk_r>
 801d8f0:	3001      	adds	r0, #1
 801d8f2:	d1f2      	bne.n	801d8da <sbrk_aligned+0x22>
 801d8f4:	e7ef      	b.n	801d8d6 <sbrk_aligned+0x1e>
 801d8f6:	bf00      	nop
 801d8f8:	2000c548 	.word	0x2000c548

0801d8fc <_malloc_r>:
 801d8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d900:	1ccd      	adds	r5, r1, #3
 801d902:	f025 0503 	bic.w	r5, r5, #3
 801d906:	3508      	adds	r5, #8
 801d908:	2d0c      	cmp	r5, #12
 801d90a:	bf38      	it	cc
 801d90c:	250c      	movcc	r5, #12
 801d90e:	2d00      	cmp	r5, #0
 801d910:	4606      	mov	r6, r0
 801d912:	db01      	blt.n	801d918 <_malloc_r+0x1c>
 801d914:	42a9      	cmp	r1, r5
 801d916:	d904      	bls.n	801d922 <_malloc_r+0x26>
 801d918:	230c      	movs	r3, #12
 801d91a:	6033      	str	r3, [r6, #0]
 801d91c:	2000      	movs	r0, #0
 801d91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d922:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d9f8 <_malloc_r+0xfc>
 801d926:	f000 f869 	bl	801d9fc <__malloc_lock>
 801d92a:	f8d8 3000 	ldr.w	r3, [r8]
 801d92e:	461c      	mov	r4, r3
 801d930:	bb44      	cbnz	r4, 801d984 <_malloc_r+0x88>
 801d932:	4629      	mov	r1, r5
 801d934:	4630      	mov	r0, r6
 801d936:	f7ff ffbf 	bl	801d8b8 <sbrk_aligned>
 801d93a:	1c43      	adds	r3, r0, #1
 801d93c:	4604      	mov	r4, r0
 801d93e:	d158      	bne.n	801d9f2 <_malloc_r+0xf6>
 801d940:	f8d8 4000 	ldr.w	r4, [r8]
 801d944:	4627      	mov	r7, r4
 801d946:	2f00      	cmp	r7, #0
 801d948:	d143      	bne.n	801d9d2 <_malloc_r+0xd6>
 801d94a:	2c00      	cmp	r4, #0
 801d94c:	d04b      	beq.n	801d9e6 <_malloc_r+0xea>
 801d94e:	6823      	ldr	r3, [r4, #0]
 801d950:	4639      	mov	r1, r7
 801d952:	4630      	mov	r0, r6
 801d954:	eb04 0903 	add.w	r9, r4, r3
 801d958:	f000 fc84 	bl	801e264 <_sbrk_r>
 801d95c:	4581      	cmp	r9, r0
 801d95e:	d142      	bne.n	801d9e6 <_malloc_r+0xea>
 801d960:	6821      	ldr	r1, [r4, #0]
 801d962:	1a6d      	subs	r5, r5, r1
 801d964:	4629      	mov	r1, r5
 801d966:	4630      	mov	r0, r6
 801d968:	f7ff ffa6 	bl	801d8b8 <sbrk_aligned>
 801d96c:	3001      	adds	r0, #1
 801d96e:	d03a      	beq.n	801d9e6 <_malloc_r+0xea>
 801d970:	6823      	ldr	r3, [r4, #0]
 801d972:	442b      	add	r3, r5
 801d974:	6023      	str	r3, [r4, #0]
 801d976:	f8d8 3000 	ldr.w	r3, [r8]
 801d97a:	685a      	ldr	r2, [r3, #4]
 801d97c:	bb62      	cbnz	r2, 801d9d8 <_malloc_r+0xdc>
 801d97e:	f8c8 7000 	str.w	r7, [r8]
 801d982:	e00f      	b.n	801d9a4 <_malloc_r+0xa8>
 801d984:	6822      	ldr	r2, [r4, #0]
 801d986:	1b52      	subs	r2, r2, r5
 801d988:	d420      	bmi.n	801d9cc <_malloc_r+0xd0>
 801d98a:	2a0b      	cmp	r2, #11
 801d98c:	d917      	bls.n	801d9be <_malloc_r+0xc2>
 801d98e:	1961      	adds	r1, r4, r5
 801d990:	42a3      	cmp	r3, r4
 801d992:	6025      	str	r5, [r4, #0]
 801d994:	bf18      	it	ne
 801d996:	6059      	strne	r1, [r3, #4]
 801d998:	6863      	ldr	r3, [r4, #4]
 801d99a:	bf08      	it	eq
 801d99c:	f8c8 1000 	streq.w	r1, [r8]
 801d9a0:	5162      	str	r2, [r4, r5]
 801d9a2:	604b      	str	r3, [r1, #4]
 801d9a4:	4630      	mov	r0, r6
 801d9a6:	f000 f82f 	bl	801da08 <__malloc_unlock>
 801d9aa:	f104 000b 	add.w	r0, r4, #11
 801d9ae:	1d23      	adds	r3, r4, #4
 801d9b0:	f020 0007 	bic.w	r0, r0, #7
 801d9b4:	1ac2      	subs	r2, r0, r3
 801d9b6:	bf1c      	itt	ne
 801d9b8:	1a1b      	subne	r3, r3, r0
 801d9ba:	50a3      	strne	r3, [r4, r2]
 801d9bc:	e7af      	b.n	801d91e <_malloc_r+0x22>
 801d9be:	6862      	ldr	r2, [r4, #4]
 801d9c0:	42a3      	cmp	r3, r4
 801d9c2:	bf0c      	ite	eq
 801d9c4:	f8c8 2000 	streq.w	r2, [r8]
 801d9c8:	605a      	strne	r2, [r3, #4]
 801d9ca:	e7eb      	b.n	801d9a4 <_malloc_r+0xa8>
 801d9cc:	4623      	mov	r3, r4
 801d9ce:	6864      	ldr	r4, [r4, #4]
 801d9d0:	e7ae      	b.n	801d930 <_malloc_r+0x34>
 801d9d2:	463c      	mov	r4, r7
 801d9d4:	687f      	ldr	r7, [r7, #4]
 801d9d6:	e7b6      	b.n	801d946 <_malloc_r+0x4a>
 801d9d8:	461a      	mov	r2, r3
 801d9da:	685b      	ldr	r3, [r3, #4]
 801d9dc:	42a3      	cmp	r3, r4
 801d9de:	d1fb      	bne.n	801d9d8 <_malloc_r+0xdc>
 801d9e0:	2300      	movs	r3, #0
 801d9e2:	6053      	str	r3, [r2, #4]
 801d9e4:	e7de      	b.n	801d9a4 <_malloc_r+0xa8>
 801d9e6:	230c      	movs	r3, #12
 801d9e8:	6033      	str	r3, [r6, #0]
 801d9ea:	4630      	mov	r0, r6
 801d9ec:	f000 f80c 	bl	801da08 <__malloc_unlock>
 801d9f0:	e794      	b.n	801d91c <_malloc_r+0x20>
 801d9f2:	6005      	str	r5, [r0, #0]
 801d9f4:	e7d6      	b.n	801d9a4 <_malloc_r+0xa8>
 801d9f6:	bf00      	nop
 801d9f8:	2000c54c 	.word	0x2000c54c

0801d9fc <__malloc_lock>:
 801d9fc:	4801      	ldr	r0, [pc, #4]	@ (801da04 <__malloc_lock+0x8>)
 801d9fe:	f000 bc7e 	b.w	801e2fe <__retarget_lock_acquire_recursive>
 801da02:	bf00      	nop
 801da04:	2000c691 	.word	0x2000c691

0801da08 <__malloc_unlock>:
 801da08:	4801      	ldr	r0, [pc, #4]	@ (801da10 <__malloc_unlock+0x8>)
 801da0a:	f000 bc79 	b.w	801e300 <__retarget_lock_release_recursive>
 801da0e:	bf00      	nop
 801da10:	2000c691 	.word	0x2000c691

0801da14 <srand>:
 801da14:	b538      	push	{r3, r4, r5, lr}
 801da16:	4b10      	ldr	r3, [pc, #64]	@ (801da58 <srand+0x44>)
 801da18:	681d      	ldr	r5, [r3, #0]
 801da1a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801da1c:	4604      	mov	r4, r0
 801da1e:	b9b3      	cbnz	r3, 801da4e <srand+0x3a>
 801da20:	2018      	movs	r0, #24
 801da22:	f7ff ff39 	bl	801d898 <malloc>
 801da26:	4602      	mov	r2, r0
 801da28:	6328      	str	r0, [r5, #48]	@ 0x30
 801da2a:	b920      	cbnz	r0, 801da36 <srand+0x22>
 801da2c:	4b0b      	ldr	r3, [pc, #44]	@ (801da5c <srand+0x48>)
 801da2e:	480c      	ldr	r0, [pc, #48]	@ (801da60 <srand+0x4c>)
 801da30:	2146      	movs	r1, #70	@ 0x46
 801da32:	f000 fc7d 	bl	801e330 <__assert_func>
 801da36:	490b      	ldr	r1, [pc, #44]	@ (801da64 <srand+0x50>)
 801da38:	4b0b      	ldr	r3, [pc, #44]	@ (801da68 <srand+0x54>)
 801da3a:	e9c0 1300 	strd	r1, r3, [r0]
 801da3e:	4b0b      	ldr	r3, [pc, #44]	@ (801da6c <srand+0x58>)
 801da40:	6083      	str	r3, [r0, #8]
 801da42:	230b      	movs	r3, #11
 801da44:	8183      	strh	r3, [r0, #12]
 801da46:	2100      	movs	r1, #0
 801da48:	2001      	movs	r0, #1
 801da4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801da4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801da50:	2200      	movs	r2, #0
 801da52:	611c      	str	r4, [r3, #16]
 801da54:	615a      	str	r2, [r3, #20]
 801da56:	bd38      	pop	{r3, r4, r5, pc}
 801da58:	20000dd0 	.word	0x20000dd0
 801da5c:	0802164e 	.word	0x0802164e
 801da60:	08021665 	.word	0x08021665
 801da64:	abcd330e 	.word	0xabcd330e
 801da68:	e66d1234 	.word	0xe66d1234
 801da6c:	0005deec 	.word	0x0005deec

0801da70 <rand>:
 801da70:	4b16      	ldr	r3, [pc, #88]	@ (801dacc <rand+0x5c>)
 801da72:	b510      	push	{r4, lr}
 801da74:	681c      	ldr	r4, [r3, #0]
 801da76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801da78:	b9b3      	cbnz	r3, 801daa8 <rand+0x38>
 801da7a:	2018      	movs	r0, #24
 801da7c:	f7ff ff0c 	bl	801d898 <malloc>
 801da80:	4602      	mov	r2, r0
 801da82:	6320      	str	r0, [r4, #48]	@ 0x30
 801da84:	b920      	cbnz	r0, 801da90 <rand+0x20>
 801da86:	4b12      	ldr	r3, [pc, #72]	@ (801dad0 <rand+0x60>)
 801da88:	4812      	ldr	r0, [pc, #72]	@ (801dad4 <rand+0x64>)
 801da8a:	2152      	movs	r1, #82	@ 0x52
 801da8c:	f000 fc50 	bl	801e330 <__assert_func>
 801da90:	4911      	ldr	r1, [pc, #68]	@ (801dad8 <rand+0x68>)
 801da92:	4b12      	ldr	r3, [pc, #72]	@ (801dadc <rand+0x6c>)
 801da94:	e9c0 1300 	strd	r1, r3, [r0]
 801da98:	4b11      	ldr	r3, [pc, #68]	@ (801dae0 <rand+0x70>)
 801da9a:	6083      	str	r3, [r0, #8]
 801da9c:	230b      	movs	r3, #11
 801da9e:	8183      	strh	r3, [r0, #12]
 801daa0:	2100      	movs	r1, #0
 801daa2:	2001      	movs	r0, #1
 801daa4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801daa8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801daaa:	480e      	ldr	r0, [pc, #56]	@ (801dae4 <rand+0x74>)
 801daac:	690b      	ldr	r3, [r1, #16]
 801daae:	694c      	ldr	r4, [r1, #20]
 801dab0:	4a0d      	ldr	r2, [pc, #52]	@ (801dae8 <rand+0x78>)
 801dab2:	4358      	muls	r0, r3
 801dab4:	fb02 0004 	mla	r0, r2, r4, r0
 801dab8:	fba3 3202 	umull	r3, r2, r3, r2
 801dabc:	3301      	adds	r3, #1
 801dabe:	eb40 0002 	adc.w	r0, r0, r2
 801dac2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801dac6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801daca:	bd10      	pop	{r4, pc}
 801dacc:	20000dd0 	.word	0x20000dd0
 801dad0:	0802164e 	.word	0x0802164e
 801dad4:	08021665 	.word	0x08021665
 801dad8:	abcd330e 	.word	0xabcd330e
 801dadc:	e66d1234 	.word	0xe66d1234
 801dae0:	0005deec 	.word	0x0005deec
 801dae4:	5851f42d 	.word	0x5851f42d
 801dae8:	4c957f2d 	.word	0x4c957f2d

0801daec <realloc>:
 801daec:	4b02      	ldr	r3, [pc, #8]	@ (801daf8 <realloc+0xc>)
 801daee:	460a      	mov	r2, r1
 801daf0:	4601      	mov	r1, r0
 801daf2:	6818      	ldr	r0, [r3, #0]
 801daf4:	f000 b802 	b.w	801dafc <_realloc_r>
 801daf8:	20000dd0 	.word	0x20000dd0

0801dafc <_realloc_r>:
 801dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db00:	4680      	mov	r8, r0
 801db02:	4615      	mov	r5, r2
 801db04:	460c      	mov	r4, r1
 801db06:	b921      	cbnz	r1, 801db12 <_realloc_r+0x16>
 801db08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801db0c:	4611      	mov	r1, r2
 801db0e:	f7ff bef5 	b.w	801d8fc <_malloc_r>
 801db12:	b92a      	cbnz	r2, 801db20 <_realloc_r+0x24>
 801db14:	f000 fc36 	bl	801e384 <_free_r>
 801db18:	2400      	movs	r4, #0
 801db1a:	4620      	mov	r0, r4
 801db1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db20:	f000 fc7a 	bl	801e418 <_malloc_usable_size_r>
 801db24:	4285      	cmp	r5, r0
 801db26:	4606      	mov	r6, r0
 801db28:	d802      	bhi.n	801db30 <_realloc_r+0x34>
 801db2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801db2e:	d8f4      	bhi.n	801db1a <_realloc_r+0x1e>
 801db30:	4629      	mov	r1, r5
 801db32:	4640      	mov	r0, r8
 801db34:	f7ff fee2 	bl	801d8fc <_malloc_r>
 801db38:	4607      	mov	r7, r0
 801db3a:	2800      	cmp	r0, #0
 801db3c:	d0ec      	beq.n	801db18 <_realloc_r+0x1c>
 801db3e:	42b5      	cmp	r5, r6
 801db40:	462a      	mov	r2, r5
 801db42:	4621      	mov	r1, r4
 801db44:	bf28      	it	cs
 801db46:	4632      	movcs	r2, r6
 801db48:	f000 fbe3 	bl	801e312 <memcpy>
 801db4c:	4621      	mov	r1, r4
 801db4e:	4640      	mov	r0, r8
 801db50:	f000 fc18 	bl	801e384 <_free_r>
 801db54:	463c      	mov	r4, r7
 801db56:	e7e0      	b.n	801db1a <_realloc_r+0x1e>

0801db58 <_strtoul_l.constprop.0>:
 801db58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801db5c:	4e34      	ldr	r6, [pc, #208]	@ (801dc30 <_strtoul_l.constprop.0+0xd8>)
 801db5e:	4686      	mov	lr, r0
 801db60:	460d      	mov	r5, r1
 801db62:	4628      	mov	r0, r5
 801db64:	f815 4b01 	ldrb.w	r4, [r5], #1
 801db68:	5d37      	ldrb	r7, [r6, r4]
 801db6a:	f017 0708 	ands.w	r7, r7, #8
 801db6e:	d1f8      	bne.n	801db62 <_strtoul_l.constprop.0+0xa>
 801db70:	2c2d      	cmp	r4, #45	@ 0x2d
 801db72:	d12f      	bne.n	801dbd4 <_strtoul_l.constprop.0+0x7c>
 801db74:	782c      	ldrb	r4, [r5, #0]
 801db76:	2701      	movs	r7, #1
 801db78:	1c85      	adds	r5, r0, #2
 801db7a:	f033 0010 	bics.w	r0, r3, #16
 801db7e:	d109      	bne.n	801db94 <_strtoul_l.constprop.0+0x3c>
 801db80:	2c30      	cmp	r4, #48	@ 0x30
 801db82:	d12c      	bne.n	801dbde <_strtoul_l.constprop.0+0x86>
 801db84:	7828      	ldrb	r0, [r5, #0]
 801db86:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801db8a:	2858      	cmp	r0, #88	@ 0x58
 801db8c:	d127      	bne.n	801dbde <_strtoul_l.constprop.0+0x86>
 801db8e:	786c      	ldrb	r4, [r5, #1]
 801db90:	2310      	movs	r3, #16
 801db92:	3502      	adds	r5, #2
 801db94:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801db98:	2600      	movs	r6, #0
 801db9a:	fbb8 f8f3 	udiv	r8, r8, r3
 801db9e:	fb03 f908 	mul.w	r9, r3, r8
 801dba2:	ea6f 0909 	mvn.w	r9, r9
 801dba6:	4630      	mov	r0, r6
 801dba8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801dbac:	f1bc 0f09 	cmp.w	ip, #9
 801dbb0:	d81c      	bhi.n	801dbec <_strtoul_l.constprop.0+0x94>
 801dbb2:	4664      	mov	r4, ip
 801dbb4:	42a3      	cmp	r3, r4
 801dbb6:	dd2a      	ble.n	801dc0e <_strtoul_l.constprop.0+0xb6>
 801dbb8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801dbbc:	d007      	beq.n	801dbce <_strtoul_l.constprop.0+0x76>
 801dbbe:	4580      	cmp	r8, r0
 801dbc0:	d322      	bcc.n	801dc08 <_strtoul_l.constprop.0+0xb0>
 801dbc2:	d101      	bne.n	801dbc8 <_strtoul_l.constprop.0+0x70>
 801dbc4:	45a1      	cmp	r9, r4
 801dbc6:	db1f      	blt.n	801dc08 <_strtoul_l.constprop.0+0xb0>
 801dbc8:	fb00 4003 	mla	r0, r0, r3, r4
 801dbcc:	2601      	movs	r6, #1
 801dbce:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dbd2:	e7e9      	b.n	801dba8 <_strtoul_l.constprop.0+0x50>
 801dbd4:	2c2b      	cmp	r4, #43	@ 0x2b
 801dbd6:	bf04      	itt	eq
 801dbd8:	782c      	ldrbeq	r4, [r5, #0]
 801dbda:	1c85      	addeq	r5, r0, #2
 801dbdc:	e7cd      	b.n	801db7a <_strtoul_l.constprop.0+0x22>
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d1d8      	bne.n	801db94 <_strtoul_l.constprop.0+0x3c>
 801dbe2:	2c30      	cmp	r4, #48	@ 0x30
 801dbe4:	bf0c      	ite	eq
 801dbe6:	2308      	moveq	r3, #8
 801dbe8:	230a      	movne	r3, #10
 801dbea:	e7d3      	b.n	801db94 <_strtoul_l.constprop.0+0x3c>
 801dbec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801dbf0:	f1bc 0f19 	cmp.w	ip, #25
 801dbf4:	d801      	bhi.n	801dbfa <_strtoul_l.constprop.0+0xa2>
 801dbf6:	3c37      	subs	r4, #55	@ 0x37
 801dbf8:	e7dc      	b.n	801dbb4 <_strtoul_l.constprop.0+0x5c>
 801dbfa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801dbfe:	f1bc 0f19 	cmp.w	ip, #25
 801dc02:	d804      	bhi.n	801dc0e <_strtoul_l.constprop.0+0xb6>
 801dc04:	3c57      	subs	r4, #87	@ 0x57
 801dc06:	e7d5      	b.n	801dbb4 <_strtoul_l.constprop.0+0x5c>
 801dc08:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801dc0c:	e7df      	b.n	801dbce <_strtoul_l.constprop.0+0x76>
 801dc0e:	1c73      	adds	r3, r6, #1
 801dc10:	d106      	bne.n	801dc20 <_strtoul_l.constprop.0+0xc8>
 801dc12:	2322      	movs	r3, #34	@ 0x22
 801dc14:	f8ce 3000 	str.w	r3, [lr]
 801dc18:	4630      	mov	r0, r6
 801dc1a:	b932      	cbnz	r2, 801dc2a <_strtoul_l.constprop.0+0xd2>
 801dc1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc20:	b107      	cbz	r7, 801dc24 <_strtoul_l.constprop.0+0xcc>
 801dc22:	4240      	negs	r0, r0
 801dc24:	2a00      	cmp	r2, #0
 801dc26:	d0f9      	beq.n	801dc1c <_strtoul_l.constprop.0+0xc4>
 801dc28:	b106      	cbz	r6, 801dc2c <_strtoul_l.constprop.0+0xd4>
 801dc2a:	1e69      	subs	r1, r5, #1
 801dc2c:	6011      	str	r1, [r2, #0]
 801dc2e:	e7f5      	b.n	801dc1c <_strtoul_l.constprop.0+0xc4>
 801dc30:	080216be 	.word	0x080216be

0801dc34 <strtoul>:
 801dc34:	4613      	mov	r3, r2
 801dc36:	460a      	mov	r2, r1
 801dc38:	4601      	mov	r1, r0
 801dc3a:	4802      	ldr	r0, [pc, #8]	@ (801dc44 <strtoul+0x10>)
 801dc3c:	6800      	ldr	r0, [r0, #0]
 801dc3e:	f7ff bf8b 	b.w	801db58 <_strtoul_l.constprop.0>
 801dc42:	bf00      	nop
 801dc44:	20000dd0 	.word	0x20000dd0

0801dc48 <std>:
 801dc48:	2300      	movs	r3, #0
 801dc4a:	b510      	push	{r4, lr}
 801dc4c:	4604      	mov	r4, r0
 801dc4e:	e9c0 3300 	strd	r3, r3, [r0]
 801dc52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dc56:	6083      	str	r3, [r0, #8]
 801dc58:	8181      	strh	r1, [r0, #12]
 801dc5a:	6643      	str	r3, [r0, #100]	@ 0x64
 801dc5c:	81c2      	strh	r2, [r0, #14]
 801dc5e:	6183      	str	r3, [r0, #24]
 801dc60:	4619      	mov	r1, r3
 801dc62:	2208      	movs	r2, #8
 801dc64:	305c      	adds	r0, #92	@ 0x5c
 801dc66:	f000 fa8b 	bl	801e180 <memset>
 801dc6a:	4b0d      	ldr	r3, [pc, #52]	@ (801dca0 <std+0x58>)
 801dc6c:	6263      	str	r3, [r4, #36]	@ 0x24
 801dc6e:	4b0d      	ldr	r3, [pc, #52]	@ (801dca4 <std+0x5c>)
 801dc70:	62a3      	str	r3, [r4, #40]	@ 0x28
 801dc72:	4b0d      	ldr	r3, [pc, #52]	@ (801dca8 <std+0x60>)
 801dc74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801dc76:	4b0d      	ldr	r3, [pc, #52]	@ (801dcac <std+0x64>)
 801dc78:	6323      	str	r3, [r4, #48]	@ 0x30
 801dc7a:	4b0d      	ldr	r3, [pc, #52]	@ (801dcb0 <std+0x68>)
 801dc7c:	6224      	str	r4, [r4, #32]
 801dc7e:	429c      	cmp	r4, r3
 801dc80:	d006      	beq.n	801dc90 <std+0x48>
 801dc82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801dc86:	4294      	cmp	r4, r2
 801dc88:	d002      	beq.n	801dc90 <std+0x48>
 801dc8a:	33d0      	adds	r3, #208	@ 0xd0
 801dc8c:	429c      	cmp	r4, r3
 801dc8e:	d105      	bne.n	801dc9c <std+0x54>
 801dc90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801dc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc98:	f000 bb30 	b.w	801e2fc <__retarget_lock_init_recursive>
 801dc9c:	bd10      	pop	{r4, pc}
 801dc9e:	bf00      	nop
 801dca0:	0801df0d 	.word	0x0801df0d
 801dca4:	0801df2f 	.word	0x0801df2f
 801dca8:	0801df67 	.word	0x0801df67
 801dcac:	0801df8b 	.word	0x0801df8b
 801dcb0:	2000c550 	.word	0x2000c550

0801dcb4 <stdio_exit_handler>:
 801dcb4:	4a02      	ldr	r2, [pc, #8]	@ (801dcc0 <stdio_exit_handler+0xc>)
 801dcb6:	4903      	ldr	r1, [pc, #12]	@ (801dcc4 <stdio_exit_handler+0x10>)
 801dcb8:	4803      	ldr	r0, [pc, #12]	@ (801dcc8 <stdio_exit_handler+0x14>)
 801dcba:	f000 b869 	b.w	801dd90 <_fwalk_sglue>
 801dcbe:	bf00      	nop
 801dcc0:	20000dc4 	.word	0x20000dc4
 801dcc4:	0801ed81 	.word	0x0801ed81
 801dcc8:	20000dd4 	.word	0x20000dd4

0801dccc <cleanup_stdio>:
 801dccc:	6841      	ldr	r1, [r0, #4]
 801dcce:	4b0c      	ldr	r3, [pc, #48]	@ (801dd00 <cleanup_stdio+0x34>)
 801dcd0:	4299      	cmp	r1, r3
 801dcd2:	b510      	push	{r4, lr}
 801dcd4:	4604      	mov	r4, r0
 801dcd6:	d001      	beq.n	801dcdc <cleanup_stdio+0x10>
 801dcd8:	f001 f852 	bl	801ed80 <_fflush_r>
 801dcdc:	68a1      	ldr	r1, [r4, #8]
 801dcde:	4b09      	ldr	r3, [pc, #36]	@ (801dd04 <cleanup_stdio+0x38>)
 801dce0:	4299      	cmp	r1, r3
 801dce2:	d002      	beq.n	801dcea <cleanup_stdio+0x1e>
 801dce4:	4620      	mov	r0, r4
 801dce6:	f001 f84b 	bl	801ed80 <_fflush_r>
 801dcea:	68e1      	ldr	r1, [r4, #12]
 801dcec:	4b06      	ldr	r3, [pc, #24]	@ (801dd08 <cleanup_stdio+0x3c>)
 801dcee:	4299      	cmp	r1, r3
 801dcf0:	d004      	beq.n	801dcfc <cleanup_stdio+0x30>
 801dcf2:	4620      	mov	r0, r4
 801dcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcf8:	f001 b842 	b.w	801ed80 <_fflush_r>
 801dcfc:	bd10      	pop	{r4, pc}
 801dcfe:	bf00      	nop
 801dd00:	2000c550 	.word	0x2000c550
 801dd04:	2000c5b8 	.word	0x2000c5b8
 801dd08:	2000c620 	.word	0x2000c620

0801dd0c <global_stdio_init.part.0>:
 801dd0c:	b510      	push	{r4, lr}
 801dd0e:	4b0b      	ldr	r3, [pc, #44]	@ (801dd3c <global_stdio_init.part.0+0x30>)
 801dd10:	4c0b      	ldr	r4, [pc, #44]	@ (801dd40 <global_stdio_init.part.0+0x34>)
 801dd12:	4a0c      	ldr	r2, [pc, #48]	@ (801dd44 <global_stdio_init.part.0+0x38>)
 801dd14:	601a      	str	r2, [r3, #0]
 801dd16:	4620      	mov	r0, r4
 801dd18:	2200      	movs	r2, #0
 801dd1a:	2104      	movs	r1, #4
 801dd1c:	f7ff ff94 	bl	801dc48 <std>
 801dd20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801dd24:	2201      	movs	r2, #1
 801dd26:	2109      	movs	r1, #9
 801dd28:	f7ff ff8e 	bl	801dc48 <std>
 801dd2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801dd30:	2202      	movs	r2, #2
 801dd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd36:	2112      	movs	r1, #18
 801dd38:	f7ff bf86 	b.w	801dc48 <std>
 801dd3c:	2000c688 	.word	0x2000c688
 801dd40:	2000c550 	.word	0x2000c550
 801dd44:	0801dcb5 	.word	0x0801dcb5

0801dd48 <__sfp_lock_acquire>:
 801dd48:	4801      	ldr	r0, [pc, #4]	@ (801dd50 <__sfp_lock_acquire+0x8>)
 801dd4a:	f000 bad8 	b.w	801e2fe <__retarget_lock_acquire_recursive>
 801dd4e:	bf00      	nop
 801dd50:	2000c692 	.word	0x2000c692

0801dd54 <__sfp_lock_release>:
 801dd54:	4801      	ldr	r0, [pc, #4]	@ (801dd5c <__sfp_lock_release+0x8>)
 801dd56:	f000 bad3 	b.w	801e300 <__retarget_lock_release_recursive>
 801dd5a:	bf00      	nop
 801dd5c:	2000c692 	.word	0x2000c692

0801dd60 <__sinit>:
 801dd60:	b510      	push	{r4, lr}
 801dd62:	4604      	mov	r4, r0
 801dd64:	f7ff fff0 	bl	801dd48 <__sfp_lock_acquire>
 801dd68:	6a23      	ldr	r3, [r4, #32]
 801dd6a:	b11b      	cbz	r3, 801dd74 <__sinit+0x14>
 801dd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd70:	f7ff bff0 	b.w	801dd54 <__sfp_lock_release>
 801dd74:	4b04      	ldr	r3, [pc, #16]	@ (801dd88 <__sinit+0x28>)
 801dd76:	6223      	str	r3, [r4, #32]
 801dd78:	4b04      	ldr	r3, [pc, #16]	@ (801dd8c <__sinit+0x2c>)
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	d1f5      	bne.n	801dd6c <__sinit+0xc>
 801dd80:	f7ff ffc4 	bl	801dd0c <global_stdio_init.part.0>
 801dd84:	e7f2      	b.n	801dd6c <__sinit+0xc>
 801dd86:	bf00      	nop
 801dd88:	0801dccd 	.word	0x0801dccd
 801dd8c:	2000c688 	.word	0x2000c688

0801dd90 <_fwalk_sglue>:
 801dd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd94:	4607      	mov	r7, r0
 801dd96:	4688      	mov	r8, r1
 801dd98:	4614      	mov	r4, r2
 801dd9a:	2600      	movs	r6, #0
 801dd9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dda0:	f1b9 0901 	subs.w	r9, r9, #1
 801dda4:	d505      	bpl.n	801ddb2 <_fwalk_sglue+0x22>
 801dda6:	6824      	ldr	r4, [r4, #0]
 801dda8:	2c00      	cmp	r4, #0
 801ddaa:	d1f7      	bne.n	801dd9c <_fwalk_sglue+0xc>
 801ddac:	4630      	mov	r0, r6
 801ddae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ddb2:	89ab      	ldrh	r3, [r5, #12]
 801ddb4:	2b01      	cmp	r3, #1
 801ddb6:	d907      	bls.n	801ddc8 <_fwalk_sglue+0x38>
 801ddb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ddbc:	3301      	adds	r3, #1
 801ddbe:	d003      	beq.n	801ddc8 <_fwalk_sglue+0x38>
 801ddc0:	4629      	mov	r1, r5
 801ddc2:	4638      	mov	r0, r7
 801ddc4:	47c0      	blx	r8
 801ddc6:	4306      	orrs	r6, r0
 801ddc8:	3568      	adds	r5, #104	@ 0x68
 801ddca:	e7e9      	b.n	801dda0 <_fwalk_sglue+0x10>

0801ddcc <_fwrite_r>:
 801ddcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddd0:	9c08      	ldr	r4, [sp, #32]
 801ddd2:	468a      	mov	sl, r1
 801ddd4:	4690      	mov	r8, r2
 801ddd6:	fb02 f903 	mul.w	r9, r2, r3
 801ddda:	4606      	mov	r6, r0
 801dddc:	b118      	cbz	r0, 801dde6 <_fwrite_r+0x1a>
 801ddde:	6a03      	ldr	r3, [r0, #32]
 801dde0:	b90b      	cbnz	r3, 801dde6 <_fwrite_r+0x1a>
 801dde2:	f7ff ffbd 	bl	801dd60 <__sinit>
 801dde6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dde8:	07dd      	lsls	r5, r3, #31
 801ddea:	d405      	bmi.n	801ddf8 <_fwrite_r+0x2c>
 801ddec:	89a3      	ldrh	r3, [r4, #12]
 801ddee:	0598      	lsls	r0, r3, #22
 801ddf0:	d402      	bmi.n	801ddf8 <_fwrite_r+0x2c>
 801ddf2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ddf4:	f000 fa83 	bl	801e2fe <__retarget_lock_acquire_recursive>
 801ddf8:	89a3      	ldrh	r3, [r4, #12]
 801ddfa:	0719      	lsls	r1, r3, #28
 801ddfc:	d516      	bpl.n	801de2c <_fwrite_r+0x60>
 801ddfe:	6923      	ldr	r3, [r4, #16]
 801de00:	b1a3      	cbz	r3, 801de2c <_fwrite_r+0x60>
 801de02:	2500      	movs	r5, #0
 801de04:	454d      	cmp	r5, r9
 801de06:	d01f      	beq.n	801de48 <_fwrite_r+0x7c>
 801de08:	68a7      	ldr	r7, [r4, #8]
 801de0a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801de0e:	3f01      	subs	r7, #1
 801de10:	2f00      	cmp	r7, #0
 801de12:	60a7      	str	r7, [r4, #8]
 801de14:	da04      	bge.n	801de20 <_fwrite_r+0x54>
 801de16:	69a3      	ldr	r3, [r4, #24]
 801de18:	429f      	cmp	r7, r3
 801de1a:	db0f      	blt.n	801de3c <_fwrite_r+0x70>
 801de1c:	290a      	cmp	r1, #10
 801de1e:	d00d      	beq.n	801de3c <_fwrite_r+0x70>
 801de20:	6823      	ldr	r3, [r4, #0]
 801de22:	1c5a      	adds	r2, r3, #1
 801de24:	6022      	str	r2, [r4, #0]
 801de26:	7019      	strb	r1, [r3, #0]
 801de28:	3501      	adds	r5, #1
 801de2a:	e7eb      	b.n	801de04 <_fwrite_r+0x38>
 801de2c:	4621      	mov	r1, r4
 801de2e:	4630      	mov	r0, r6
 801de30:	f000 f926 	bl	801e080 <__swsetup_r>
 801de34:	2800      	cmp	r0, #0
 801de36:	d0e4      	beq.n	801de02 <_fwrite_r+0x36>
 801de38:	2500      	movs	r5, #0
 801de3a:	e005      	b.n	801de48 <_fwrite_r+0x7c>
 801de3c:	4622      	mov	r2, r4
 801de3e:	4630      	mov	r0, r6
 801de40:	f000 f8e0 	bl	801e004 <__swbuf_r>
 801de44:	3001      	adds	r0, #1
 801de46:	d1ef      	bne.n	801de28 <_fwrite_r+0x5c>
 801de48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801de4a:	07da      	lsls	r2, r3, #31
 801de4c:	d405      	bmi.n	801de5a <_fwrite_r+0x8e>
 801de4e:	89a3      	ldrh	r3, [r4, #12]
 801de50:	059b      	lsls	r3, r3, #22
 801de52:	d402      	bmi.n	801de5a <_fwrite_r+0x8e>
 801de54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de56:	f000 fa53 	bl	801e300 <__retarget_lock_release_recursive>
 801de5a:	fbb5 f0f8 	udiv	r0, r5, r8
 801de5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801de64 <fwrite>:
 801de64:	b507      	push	{r0, r1, r2, lr}
 801de66:	9300      	str	r3, [sp, #0]
 801de68:	4613      	mov	r3, r2
 801de6a:	460a      	mov	r2, r1
 801de6c:	4601      	mov	r1, r0
 801de6e:	4803      	ldr	r0, [pc, #12]	@ (801de7c <fwrite+0x18>)
 801de70:	6800      	ldr	r0, [r0, #0]
 801de72:	f7ff ffab 	bl	801ddcc <_fwrite_r>
 801de76:	b003      	add	sp, #12
 801de78:	f85d fb04 	ldr.w	pc, [sp], #4
 801de7c:	20000dd0 	.word	0x20000dd0

0801de80 <iprintf>:
 801de80:	b40f      	push	{r0, r1, r2, r3}
 801de82:	b507      	push	{r0, r1, r2, lr}
 801de84:	4906      	ldr	r1, [pc, #24]	@ (801dea0 <iprintf+0x20>)
 801de86:	ab04      	add	r3, sp, #16
 801de88:	6808      	ldr	r0, [r1, #0]
 801de8a:	f853 2b04 	ldr.w	r2, [r3], #4
 801de8e:	6881      	ldr	r1, [r0, #8]
 801de90:	9301      	str	r3, [sp, #4]
 801de92:	f000 fc4b 	bl	801e72c <_vfiprintf_r>
 801de96:	b003      	add	sp, #12
 801de98:	f85d eb04 	ldr.w	lr, [sp], #4
 801de9c:	b004      	add	sp, #16
 801de9e:	4770      	bx	lr
 801dea0:	20000dd0 	.word	0x20000dd0

0801dea4 <sniprintf>:
 801dea4:	b40c      	push	{r2, r3}
 801dea6:	b530      	push	{r4, r5, lr}
 801dea8:	4b17      	ldr	r3, [pc, #92]	@ (801df08 <sniprintf+0x64>)
 801deaa:	1e0c      	subs	r4, r1, #0
 801deac:	681d      	ldr	r5, [r3, #0]
 801deae:	b09d      	sub	sp, #116	@ 0x74
 801deb0:	da08      	bge.n	801dec4 <sniprintf+0x20>
 801deb2:	238b      	movs	r3, #139	@ 0x8b
 801deb4:	602b      	str	r3, [r5, #0]
 801deb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801deba:	b01d      	add	sp, #116	@ 0x74
 801debc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dec0:	b002      	add	sp, #8
 801dec2:	4770      	bx	lr
 801dec4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801dec8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801decc:	bf14      	ite	ne
 801dece:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801ded2:	4623      	moveq	r3, r4
 801ded4:	9304      	str	r3, [sp, #16]
 801ded6:	9307      	str	r3, [sp, #28]
 801ded8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801dedc:	9002      	str	r0, [sp, #8]
 801dede:	9006      	str	r0, [sp, #24]
 801dee0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801dee4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801dee6:	ab21      	add	r3, sp, #132	@ 0x84
 801dee8:	a902      	add	r1, sp, #8
 801deea:	4628      	mov	r0, r5
 801deec:	9301      	str	r3, [sp, #4]
 801deee:	f000 faf7 	bl	801e4e0 <_svfiprintf_r>
 801def2:	1c43      	adds	r3, r0, #1
 801def4:	bfbc      	itt	lt
 801def6:	238b      	movlt	r3, #139	@ 0x8b
 801def8:	602b      	strlt	r3, [r5, #0]
 801defa:	2c00      	cmp	r4, #0
 801defc:	d0dd      	beq.n	801deba <sniprintf+0x16>
 801defe:	9b02      	ldr	r3, [sp, #8]
 801df00:	2200      	movs	r2, #0
 801df02:	701a      	strb	r2, [r3, #0]
 801df04:	e7d9      	b.n	801deba <sniprintf+0x16>
 801df06:	bf00      	nop
 801df08:	20000dd0 	.word	0x20000dd0

0801df0c <__sread>:
 801df0c:	b510      	push	{r4, lr}
 801df0e:	460c      	mov	r4, r1
 801df10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df14:	f000 f994 	bl	801e240 <_read_r>
 801df18:	2800      	cmp	r0, #0
 801df1a:	bfab      	itete	ge
 801df1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801df1e:	89a3      	ldrhlt	r3, [r4, #12]
 801df20:	181b      	addge	r3, r3, r0
 801df22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801df26:	bfac      	ite	ge
 801df28:	6563      	strge	r3, [r4, #84]	@ 0x54
 801df2a:	81a3      	strhlt	r3, [r4, #12]
 801df2c:	bd10      	pop	{r4, pc}

0801df2e <__swrite>:
 801df2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df32:	461f      	mov	r7, r3
 801df34:	898b      	ldrh	r3, [r1, #12]
 801df36:	05db      	lsls	r3, r3, #23
 801df38:	4605      	mov	r5, r0
 801df3a:	460c      	mov	r4, r1
 801df3c:	4616      	mov	r6, r2
 801df3e:	d505      	bpl.n	801df4c <__swrite+0x1e>
 801df40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df44:	2302      	movs	r3, #2
 801df46:	2200      	movs	r2, #0
 801df48:	f000 f968 	bl	801e21c <_lseek_r>
 801df4c:	89a3      	ldrh	r3, [r4, #12]
 801df4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801df56:	81a3      	strh	r3, [r4, #12]
 801df58:	4632      	mov	r2, r6
 801df5a:	463b      	mov	r3, r7
 801df5c:	4628      	mov	r0, r5
 801df5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df62:	f000 b98f 	b.w	801e284 <_write_r>

0801df66 <__sseek>:
 801df66:	b510      	push	{r4, lr}
 801df68:	460c      	mov	r4, r1
 801df6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df6e:	f000 f955 	bl	801e21c <_lseek_r>
 801df72:	1c43      	adds	r3, r0, #1
 801df74:	89a3      	ldrh	r3, [r4, #12]
 801df76:	bf15      	itete	ne
 801df78:	6560      	strne	r0, [r4, #84]	@ 0x54
 801df7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801df7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801df82:	81a3      	strheq	r3, [r4, #12]
 801df84:	bf18      	it	ne
 801df86:	81a3      	strhne	r3, [r4, #12]
 801df88:	bd10      	pop	{r4, pc}

0801df8a <__sclose>:
 801df8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df8e:	f000 b935 	b.w	801e1fc <_close_r>

0801df92 <_vsniprintf_r>:
 801df92:	b530      	push	{r4, r5, lr}
 801df94:	4614      	mov	r4, r2
 801df96:	2c00      	cmp	r4, #0
 801df98:	b09b      	sub	sp, #108	@ 0x6c
 801df9a:	4605      	mov	r5, r0
 801df9c:	461a      	mov	r2, r3
 801df9e:	da05      	bge.n	801dfac <_vsniprintf_r+0x1a>
 801dfa0:	238b      	movs	r3, #139	@ 0x8b
 801dfa2:	6003      	str	r3, [r0, #0]
 801dfa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dfa8:	b01b      	add	sp, #108	@ 0x6c
 801dfaa:	bd30      	pop	{r4, r5, pc}
 801dfac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801dfb0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801dfb4:	bf14      	ite	ne
 801dfb6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801dfba:	4623      	moveq	r3, r4
 801dfbc:	9302      	str	r3, [sp, #8]
 801dfbe:	9305      	str	r3, [sp, #20]
 801dfc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801dfc4:	9100      	str	r1, [sp, #0]
 801dfc6:	9104      	str	r1, [sp, #16]
 801dfc8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dfcc:	4669      	mov	r1, sp
 801dfce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801dfd0:	f000 fa86 	bl	801e4e0 <_svfiprintf_r>
 801dfd4:	1c43      	adds	r3, r0, #1
 801dfd6:	bfbc      	itt	lt
 801dfd8:	238b      	movlt	r3, #139	@ 0x8b
 801dfda:	602b      	strlt	r3, [r5, #0]
 801dfdc:	2c00      	cmp	r4, #0
 801dfde:	d0e3      	beq.n	801dfa8 <_vsniprintf_r+0x16>
 801dfe0:	9b00      	ldr	r3, [sp, #0]
 801dfe2:	2200      	movs	r2, #0
 801dfe4:	701a      	strb	r2, [r3, #0]
 801dfe6:	e7df      	b.n	801dfa8 <_vsniprintf_r+0x16>

0801dfe8 <vsniprintf>:
 801dfe8:	b507      	push	{r0, r1, r2, lr}
 801dfea:	9300      	str	r3, [sp, #0]
 801dfec:	4613      	mov	r3, r2
 801dfee:	460a      	mov	r2, r1
 801dff0:	4601      	mov	r1, r0
 801dff2:	4803      	ldr	r0, [pc, #12]	@ (801e000 <vsniprintf+0x18>)
 801dff4:	6800      	ldr	r0, [r0, #0]
 801dff6:	f7ff ffcc 	bl	801df92 <_vsniprintf_r>
 801dffa:	b003      	add	sp, #12
 801dffc:	f85d fb04 	ldr.w	pc, [sp], #4
 801e000:	20000dd0 	.word	0x20000dd0

0801e004 <__swbuf_r>:
 801e004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e006:	460e      	mov	r6, r1
 801e008:	4614      	mov	r4, r2
 801e00a:	4605      	mov	r5, r0
 801e00c:	b118      	cbz	r0, 801e016 <__swbuf_r+0x12>
 801e00e:	6a03      	ldr	r3, [r0, #32]
 801e010:	b90b      	cbnz	r3, 801e016 <__swbuf_r+0x12>
 801e012:	f7ff fea5 	bl	801dd60 <__sinit>
 801e016:	69a3      	ldr	r3, [r4, #24]
 801e018:	60a3      	str	r3, [r4, #8]
 801e01a:	89a3      	ldrh	r3, [r4, #12]
 801e01c:	071a      	lsls	r2, r3, #28
 801e01e:	d501      	bpl.n	801e024 <__swbuf_r+0x20>
 801e020:	6923      	ldr	r3, [r4, #16]
 801e022:	b943      	cbnz	r3, 801e036 <__swbuf_r+0x32>
 801e024:	4621      	mov	r1, r4
 801e026:	4628      	mov	r0, r5
 801e028:	f000 f82a 	bl	801e080 <__swsetup_r>
 801e02c:	b118      	cbz	r0, 801e036 <__swbuf_r+0x32>
 801e02e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801e032:	4638      	mov	r0, r7
 801e034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e036:	6823      	ldr	r3, [r4, #0]
 801e038:	6922      	ldr	r2, [r4, #16]
 801e03a:	1a98      	subs	r0, r3, r2
 801e03c:	6963      	ldr	r3, [r4, #20]
 801e03e:	b2f6      	uxtb	r6, r6
 801e040:	4283      	cmp	r3, r0
 801e042:	4637      	mov	r7, r6
 801e044:	dc05      	bgt.n	801e052 <__swbuf_r+0x4e>
 801e046:	4621      	mov	r1, r4
 801e048:	4628      	mov	r0, r5
 801e04a:	f000 fe99 	bl	801ed80 <_fflush_r>
 801e04e:	2800      	cmp	r0, #0
 801e050:	d1ed      	bne.n	801e02e <__swbuf_r+0x2a>
 801e052:	68a3      	ldr	r3, [r4, #8]
 801e054:	3b01      	subs	r3, #1
 801e056:	60a3      	str	r3, [r4, #8]
 801e058:	6823      	ldr	r3, [r4, #0]
 801e05a:	1c5a      	adds	r2, r3, #1
 801e05c:	6022      	str	r2, [r4, #0]
 801e05e:	701e      	strb	r6, [r3, #0]
 801e060:	6962      	ldr	r2, [r4, #20]
 801e062:	1c43      	adds	r3, r0, #1
 801e064:	429a      	cmp	r2, r3
 801e066:	d004      	beq.n	801e072 <__swbuf_r+0x6e>
 801e068:	89a3      	ldrh	r3, [r4, #12]
 801e06a:	07db      	lsls	r3, r3, #31
 801e06c:	d5e1      	bpl.n	801e032 <__swbuf_r+0x2e>
 801e06e:	2e0a      	cmp	r6, #10
 801e070:	d1df      	bne.n	801e032 <__swbuf_r+0x2e>
 801e072:	4621      	mov	r1, r4
 801e074:	4628      	mov	r0, r5
 801e076:	f000 fe83 	bl	801ed80 <_fflush_r>
 801e07a:	2800      	cmp	r0, #0
 801e07c:	d0d9      	beq.n	801e032 <__swbuf_r+0x2e>
 801e07e:	e7d6      	b.n	801e02e <__swbuf_r+0x2a>

0801e080 <__swsetup_r>:
 801e080:	b538      	push	{r3, r4, r5, lr}
 801e082:	4b29      	ldr	r3, [pc, #164]	@ (801e128 <__swsetup_r+0xa8>)
 801e084:	4605      	mov	r5, r0
 801e086:	6818      	ldr	r0, [r3, #0]
 801e088:	460c      	mov	r4, r1
 801e08a:	b118      	cbz	r0, 801e094 <__swsetup_r+0x14>
 801e08c:	6a03      	ldr	r3, [r0, #32]
 801e08e:	b90b      	cbnz	r3, 801e094 <__swsetup_r+0x14>
 801e090:	f7ff fe66 	bl	801dd60 <__sinit>
 801e094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e098:	0719      	lsls	r1, r3, #28
 801e09a:	d422      	bmi.n	801e0e2 <__swsetup_r+0x62>
 801e09c:	06da      	lsls	r2, r3, #27
 801e09e:	d407      	bmi.n	801e0b0 <__swsetup_r+0x30>
 801e0a0:	2209      	movs	r2, #9
 801e0a2:	602a      	str	r2, [r5, #0]
 801e0a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e0a8:	81a3      	strh	r3, [r4, #12]
 801e0aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e0ae:	e033      	b.n	801e118 <__swsetup_r+0x98>
 801e0b0:	0758      	lsls	r0, r3, #29
 801e0b2:	d512      	bpl.n	801e0da <__swsetup_r+0x5a>
 801e0b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e0b6:	b141      	cbz	r1, 801e0ca <__swsetup_r+0x4a>
 801e0b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e0bc:	4299      	cmp	r1, r3
 801e0be:	d002      	beq.n	801e0c6 <__swsetup_r+0x46>
 801e0c0:	4628      	mov	r0, r5
 801e0c2:	f000 f95f 	bl	801e384 <_free_r>
 801e0c6:	2300      	movs	r3, #0
 801e0c8:	6363      	str	r3, [r4, #52]	@ 0x34
 801e0ca:	89a3      	ldrh	r3, [r4, #12]
 801e0cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e0d0:	81a3      	strh	r3, [r4, #12]
 801e0d2:	2300      	movs	r3, #0
 801e0d4:	6063      	str	r3, [r4, #4]
 801e0d6:	6923      	ldr	r3, [r4, #16]
 801e0d8:	6023      	str	r3, [r4, #0]
 801e0da:	89a3      	ldrh	r3, [r4, #12]
 801e0dc:	f043 0308 	orr.w	r3, r3, #8
 801e0e0:	81a3      	strh	r3, [r4, #12]
 801e0e2:	6923      	ldr	r3, [r4, #16]
 801e0e4:	b94b      	cbnz	r3, 801e0fa <__swsetup_r+0x7a>
 801e0e6:	89a3      	ldrh	r3, [r4, #12]
 801e0e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e0ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e0f0:	d003      	beq.n	801e0fa <__swsetup_r+0x7a>
 801e0f2:	4621      	mov	r1, r4
 801e0f4:	4628      	mov	r0, r5
 801e0f6:	f000 fea3 	bl	801ee40 <__smakebuf_r>
 801e0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0fe:	f013 0201 	ands.w	r2, r3, #1
 801e102:	d00a      	beq.n	801e11a <__swsetup_r+0x9a>
 801e104:	2200      	movs	r2, #0
 801e106:	60a2      	str	r2, [r4, #8]
 801e108:	6962      	ldr	r2, [r4, #20]
 801e10a:	4252      	negs	r2, r2
 801e10c:	61a2      	str	r2, [r4, #24]
 801e10e:	6922      	ldr	r2, [r4, #16]
 801e110:	b942      	cbnz	r2, 801e124 <__swsetup_r+0xa4>
 801e112:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e116:	d1c5      	bne.n	801e0a4 <__swsetup_r+0x24>
 801e118:	bd38      	pop	{r3, r4, r5, pc}
 801e11a:	0799      	lsls	r1, r3, #30
 801e11c:	bf58      	it	pl
 801e11e:	6962      	ldrpl	r2, [r4, #20]
 801e120:	60a2      	str	r2, [r4, #8]
 801e122:	e7f4      	b.n	801e10e <__swsetup_r+0x8e>
 801e124:	2000      	movs	r0, #0
 801e126:	e7f7      	b.n	801e118 <__swsetup_r+0x98>
 801e128:	20000dd0 	.word	0x20000dd0

0801e12c <memcmp>:
 801e12c:	b510      	push	{r4, lr}
 801e12e:	3901      	subs	r1, #1
 801e130:	4402      	add	r2, r0
 801e132:	4290      	cmp	r0, r2
 801e134:	d101      	bne.n	801e13a <memcmp+0xe>
 801e136:	2000      	movs	r0, #0
 801e138:	e005      	b.n	801e146 <memcmp+0x1a>
 801e13a:	7803      	ldrb	r3, [r0, #0]
 801e13c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e140:	42a3      	cmp	r3, r4
 801e142:	d001      	beq.n	801e148 <memcmp+0x1c>
 801e144:	1b18      	subs	r0, r3, r4
 801e146:	bd10      	pop	{r4, pc}
 801e148:	3001      	adds	r0, #1
 801e14a:	e7f2      	b.n	801e132 <memcmp+0x6>

0801e14c <memmove>:
 801e14c:	4288      	cmp	r0, r1
 801e14e:	b510      	push	{r4, lr}
 801e150:	eb01 0402 	add.w	r4, r1, r2
 801e154:	d902      	bls.n	801e15c <memmove+0x10>
 801e156:	4284      	cmp	r4, r0
 801e158:	4623      	mov	r3, r4
 801e15a:	d807      	bhi.n	801e16c <memmove+0x20>
 801e15c:	1e43      	subs	r3, r0, #1
 801e15e:	42a1      	cmp	r1, r4
 801e160:	d008      	beq.n	801e174 <memmove+0x28>
 801e162:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e166:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e16a:	e7f8      	b.n	801e15e <memmove+0x12>
 801e16c:	4402      	add	r2, r0
 801e16e:	4601      	mov	r1, r0
 801e170:	428a      	cmp	r2, r1
 801e172:	d100      	bne.n	801e176 <memmove+0x2a>
 801e174:	bd10      	pop	{r4, pc}
 801e176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e17a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e17e:	e7f7      	b.n	801e170 <memmove+0x24>

0801e180 <memset>:
 801e180:	4402      	add	r2, r0
 801e182:	4603      	mov	r3, r0
 801e184:	4293      	cmp	r3, r2
 801e186:	d100      	bne.n	801e18a <memset+0xa>
 801e188:	4770      	bx	lr
 801e18a:	f803 1b01 	strb.w	r1, [r3], #1
 801e18e:	e7f9      	b.n	801e184 <memset+0x4>

0801e190 <strchr>:
 801e190:	b2c9      	uxtb	r1, r1
 801e192:	4603      	mov	r3, r0
 801e194:	4618      	mov	r0, r3
 801e196:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e19a:	b112      	cbz	r2, 801e1a2 <strchr+0x12>
 801e19c:	428a      	cmp	r2, r1
 801e19e:	d1f9      	bne.n	801e194 <strchr+0x4>
 801e1a0:	4770      	bx	lr
 801e1a2:	2900      	cmp	r1, #0
 801e1a4:	bf18      	it	ne
 801e1a6:	2000      	movne	r0, #0
 801e1a8:	4770      	bx	lr

0801e1aa <strncmp>:
 801e1aa:	b510      	push	{r4, lr}
 801e1ac:	b16a      	cbz	r2, 801e1ca <strncmp+0x20>
 801e1ae:	3901      	subs	r1, #1
 801e1b0:	1884      	adds	r4, r0, r2
 801e1b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e1ba:	429a      	cmp	r2, r3
 801e1bc:	d103      	bne.n	801e1c6 <strncmp+0x1c>
 801e1be:	42a0      	cmp	r0, r4
 801e1c0:	d001      	beq.n	801e1c6 <strncmp+0x1c>
 801e1c2:	2a00      	cmp	r2, #0
 801e1c4:	d1f5      	bne.n	801e1b2 <strncmp+0x8>
 801e1c6:	1ad0      	subs	r0, r2, r3
 801e1c8:	bd10      	pop	{r4, pc}
 801e1ca:	4610      	mov	r0, r2
 801e1cc:	e7fc      	b.n	801e1c8 <strncmp+0x1e>

0801e1ce <strstr>:
 801e1ce:	780a      	ldrb	r2, [r1, #0]
 801e1d0:	b570      	push	{r4, r5, r6, lr}
 801e1d2:	b96a      	cbnz	r2, 801e1f0 <strstr+0x22>
 801e1d4:	bd70      	pop	{r4, r5, r6, pc}
 801e1d6:	429a      	cmp	r2, r3
 801e1d8:	d109      	bne.n	801e1ee <strstr+0x20>
 801e1da:	460c      	mov	r4, r1
 801e1dc:	4605      	mov	r5, r0
 801e1de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	d0f6      	beq.n	801e1d4 <strstr+0x6>
 801e1e6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801e1ea:	429e      	cmp	r6, r3
 801e1ec:	d0f7      	beq.n	801e1de <strstr+0x10>
 801e1ee:	3001      	adds	r0, #1
 801e1f0:	7803      	ldrb	r3, [r0, #0]
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d1ef      	bne.n	801e1d6 <strstr+0x8>
 801e1f6:	4618      	mov	r0, r3
 801e1f8:	e7ec      	b.n	801e1d4 <strstr+0x6>
	...

0801e1fc <_close_r>:
 801e1fc:	b538      	push	{r3, r4, r5, lr}
 801e1fe:	4d06      	ldr	r5, [pc, #24]	@ (801e218 <_close_r+0x1c>)
 801e200:	2300      	movs	r3, #0
 801e202:	4604      	mov	r4, r0
 801e204:	4608      	mov	r0, r1
 801e206:	602b      	str	r3, [r5, #0]
 801e208:	f7e6 f844 	bl	8004294 <_close>
 801e20c:	1c43      	adds	r3, r0, #1
 801e20e:	d102      	bne.n	801e216 <_close_r+0x1a>
 801e210:	682b      	ldr	r3, [r5, #0]
 801e212:	b103      	cbz	r3, 801e216 <_close_r+0x1a>
 801e214:	6023      	str	r3, [r4, #0]
 801e216:	bd38      	pop	{r3, r4, r5, pc}
 801e218:	2000c68c 	.word	0x2000c68c

0801e21c <_lseek_r>:
 801e21c:	b538      	push	{r3, r4, r5, lr}
 801e21e:	4d07      	ldr	r5, [pc, #28]	@ (801e23c <_lseek_r+0x20>)
 801e220:	4604      	mov	r4, r0
 801e222:	4608      	mov	r0, r1
 801e224:	4611      	mov	r1, r2
 801e226:	2200      	movs	r2, #0
 801e228:	602a      	str	r2, [r5, #0]
 801e22a:	461a      	mov	r2, r3
 801e22c:	f7e6 f859 	bl	80042e2 <_lseek>
 801e230:	1c43      	adds	r3, r0, #1
 801e232:	d102      	bne.n	801e23a <_lseek_r+0x1e>
 801e234:	682b      	ldr	r3, [r5, #0]
 801e236:	b103      	cbz	r3, 801e23a <_lseek_r+0x1e>
 801e238:	6023      	str	r3, [r4, #0]
 801e23a:	bd38      	pop	{r3, r4, r5, pc}
 801e23c:	2000c68c 	.word	0x2000c68c

0801e240 <_read_r>:
 801e240:	b538      	push	{r3, r4, r5, lr}
 801e242:	4d07      	ldr	r5, [pc, #28]	@ (801e260 <_read_r+0x20>)
 801e244:	4604      	mov	r4, r0
 801e246:	4608      	mov	r0, r1
 801e248:	4611      	mov	r1, r2
 801e24a:	2200      	movs	r2, #0
 801e24c:	602a      	str	r2, [r5, #0]
 801e24e:	461a      	mov	r2, r3
 801e250:	f7e5 ffe7 	bl	8004222 <_read>
 801e254:	1c43      	adds	r3, r0, #1
 801e256:	d102      	bne.n	801e25e <_read_r+0x1e>
 801e258:	682b      	ldr	r3, [r5, #0]
 801e25a:	b103      	cbz	r3, 801e25e <_read_r+0x1e>
 801e25c:	6023      	str	r3, [r4, #0]
 801e25e:	bd38      	pop	{r3, r4, r5, pc}
 801e260:	2000c68c 	.word	0x2000c68c

0801e264 <_sbrk_r>:
 801e264:	b538      	push	{r3, r4, r5, lr}
 801e266:	4d06      	ldr	r5, [pc, #24]	@ (801e280 <_sbrk_r+0x1c>)
 801e268:	2300      	movs	r3, #0
 801e26a:	4604      	mov	r4, r0
 801e26c:	4608      	mov	r0, r1
 801e26e:	602b      	str	r3, [r5, #0]
 801e270:	f7e6 f844 	bl	80042fc <_sbrk>
 801e274:	1c43      	adds	r3, r0, #1
 801e276:	d102      	bne.n	801e27e <_sbrk_r+0x1a>
 801e278:	682b      	ldr	r3, [r5, #0]
 801e27a:	b103      	cbz	r3, 801e27e <_sbrk_r+0x1a>
 801e27c:	6023      	str	r3, [r4, #0]
 801e27e:	bd38      	pop	{r3, r4, r5, pc}
 801e280:	2000c68c 	.word	0x2000c68c

0801e284 <_write_r>:
 801e284:	b538      	push	{r3, r4, r5, lr}
 801e286:	4d07      	ldr	r5, [pc, #28]	@ (801e2a4 <_write_r+0x20>)
 801e288:	4604      	mov	r4, r0
 801e28a:	4608      	mov	r0, r1
 801e28c:	4611      	mov	r1, r2
 801e28e:	2200      	movs	r2, #0
 801e290:	602a      	str	r2, [r5, #0]
 801e292:	461a      	mov	r2, r3
 801e294:	f7e5 ffe2 	bl	800425c <_write>
 801e298:	1c43      	adds	r3, r0, #1
 801e29a:	d102      	bne.n	801e2a2 <_write_r+0x1e>
 801e29c:	682b      	ldr	r3, [r5, #0]
 801e29e:	b103      	cbz	r3, 801e2a2 <_write_r+0x1e>
 801e2a0:	6023      	str	r3, [r4, #0]
 801e2a2:	bd38      	pop	{r3, r4, r5, pc}
 801e2a4:	2000c68c 	.word	0x2000c68c

0801e2a8 <__errno>:
 801e2a8:	4b01      	ldr	r3, [pc, #4]	@ (801e2b0 <__errno+0x8>)
 801e2aa:	6818      	ldr	r0, [r3, #0]
 801e2ac:	4770      	bx	lr
 801e2ae:	bf00      	nop
 801e2b0:	20000dd0 	.word	0x20000dd0

0801e2b4 <__libc_init_array>:
 801e2b4:	b570      	push	{r4, r5, r6, lr}
 801e2b6:	4d0d      	ldr	r5, [pc, #52]	@ (801e2ec <__libc_init_array+0x38>)
 801e2b8:	4c0d      	ldr	r4, [pc, #52]	@ (801e2f0 <__libc_init_array+0x3c>)
 801e2ba:	1b64      	subs	r4, r4, r5
 801e2bc:	10a4      	asrs	r4, r4, #2
 801e2be:	2600      	movs	r6, #0
 801e2c0:	42a6      	cmp	r6, r4
 801e2c2:	d109      	bne.n	801e2d8 <__libc_init_array+0x24>
 801e2c4:	4d0b      	ldr	r5, [pc, #44]	@ (801e2f4 <__libc_init_array+0x40>)
 801e2c6:	4c0c      	ldr	r4, [pc, #48]	@ (801e2f8 <__libc_init_array+0x44>)
 801e2c8:	f001 f9d4 	bl	801f674 <_init>
 801e2cc:	1b64      	subs	r4, r4, r5
 801e2ce:	10a4      	asrs	r4, r4, #2
 801e2d0:	2600      	movs	r6, #0
 801e2d2:	42a6      	cmp	r6, r4
 801e2d4:	d105      	bne.n	801e2e2 <__libc_init_array+0x2e>
 801e2d6:	bd70      	pop	{r4, r5, r6, pc}
 801e2d8:	f855 3b04 	ldr.w	r3, [r5], #4
 801e2dc:	4798      	blx	r3
 801e2de:	3601      	adds	r6, #1
 801e2e0:	e7ee      	b.n	801e2c0 <__libc_init_array+0xc>
 801e2e2:	f855 3b04 	ldr.w	r3, [r5], #4
 801e2e6:	4798      	blx	r3
 801e2e8:	3601      	adds	r6, #1
 801e2ea:	e7f2      	b.n	801e2d2 <__libc_init_array+0x1e>
 801e2ec:	080218a8 	.word	0x080218a8
 801e2f0:	080218a8 	.word	0x080218a8
 801e2f4:	080218a8 	.word	0x080218a8
 801e2f8:	080218c4 	.word	0x080218c4

0801e2fc <__retarget_lock_init_recursive>:
 801e2fc:	4770      	bx	lr

0801e2fe <__retarget_lock_acquire_recursive>:
 801e2fe:	4770      	bx	lr

0801e300 <__retarget_lock_release_recursive>:
 801e300:	4770      	bx	lr

0801e302 <strcpy>:
 801e302:	4603      	mov	r3, r0
 801e304:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e308:	f803 2b01 	strb.w	r2, [r3], #1
 801e30c:	2a00      	cmp	r2, #0
 801e30e:	d1f9      	bne.n	801e304 <strcpy+0x2>
 801e310:	4770      	bx	lr

0801e312 <memcpy>:
 801e312:	440a      	add	r2, r1
 801e314:	4291      	cmp	r1, r2
 801e316:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801e31a:	d100      	bne.n	801e31e <memcpy+0xc>
 801e31c:	4770      	bx	lr
 801e31e:	b510      	push	{r4, lr}
 801e320:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e324:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e328:	4291      	cmp	r1, r2
 801e32a:	d1f9      	bne.n	801e320 <memcpy+0xe>
 801e32c:	bd10      	pop	{r4, pc}
	...

0801e330 <__assert_func>:
 801e330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e332:	4614      	mov	r4, r2
 801e334:	461a      	mov	r2, r3
 801e336:	4b09      	ldr	r3, [pc, #36]	@ (801e35c <__assert_func+0x2c>)
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	4605      	mov	r5, r0
 801e33c:	68d8      	ldr	r0, [r3, #12]
 801e33e:	b954      	cbnz	r4, 801e356 <__assert_func+0x26>
 801e340:	4b07      	ldr	r3, [pc, #28]	@ (801e360 <__assert_func+0x30>)
 801e342:	461c      	mov	r4, r3
 801e344:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e348:	9100      	str	r1, [sp, #0]
 801e34a:	462b      	mov	r3, r5
 801e34c:	4905      	ldr	r1, [pc, #20]	@ (801e364 <__assert_func+0x34>)
 801e34e:	f000 fd3f 	bl	801edd0 <fiprintf>
 801e352:	f000 fdd3 	bl	801eefc <abort>
 801e356:	4b04      	ldr	r3, [pc, #16]	@ (801e368 <__assert_func+0x38>)
 801e358:	e7f4      	b.n	801e344 <__assert_func+0x14>
 801e35a:	bf00      	nop
 801e35c:	20000dd0 	.word	0x20000dd0
 801e360:	080217f9 	.word	0x080217f9
 801e364:	080217cb 	.word	0x080217cb
 801e368:	080217be 	.word	0x080217be

0801e36c <__env_lock>:
 801e36c:	4801      	ldr	r0, [pc, #4]	@ (801e374 <__env_lock+0x8>)
 801e36e:	f7ff bfc6 	b.w	801e2fe <__retarget_lock_acquire_recursive>
 801e372:	bf00      	nop
 801e374:	2000c690 	.word	0x2000c690

0801e378 <__env_unlock>:
 801e378:	4801      	ldr	r0, [pc, #4]	@ (801e380 <__env_unlock+0x8>)
 801e37a:	f7ff bfc1 	b.w	801e300 <__retarget_lock_release_recursive>
 801e37e:	bf00      	nop
 801e380:	2000c690 	.word	0x2000c690

0801e384 <_free_r>:
 801e384:	b538      	push	{r3, r4, r5, lr}
 801e386:	4605      	mov	r5, r0
 801e388:	2900      	cmp	r1, #0
 801e38a:	d041      	beq.n	801e410 <_free_r+0x8c>
 801e38c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e390:	1f0c      	subs	r4, r1, #4
 801e392:	2b00      	cmp	r3, #0
 801e394:	bfb8      	it	lt
 801e396:	18e4      	addlt	r4, r4, r3
 801e398:	f7ff fb30 	bl	801d9fc <__malloc_lock>
 801e39c:	4a1d      	ldr	r2, [pc, #116]	@ (801e414 <_free_r+0x90>)
 801e39e:	6813      	ldr	r3, [r2, #0]
 801e3a0:	b933      	cbnz	r3, 801e3b0 <_free_r+0x2c>
 801e3a2:	6063      	str	r3, [r4, #4]
 801e3a4:	6014      	str	r4, [r2, #0]
 801e3a6:	4628      	mov	r0, r5
 801e3a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e3ac:	f7ff bb2c 	b.w	801da08 <__malloc_unlock>
 801e3b0:	42a3      	cmp	r3, r4
 801e3b2:	d908      	bls.n	801e3c6 <_free_r+0x42>
 801e3b4:	6820      	ldr	r0, [r4, #0]
 801e3b6:	1821      	adds	r1, r4, r0
 801e3b8:	428b      	cmp	r3, r1
 801e3ba:	bf01      	itttt	eq
 801e3bc:	6819      	ldreq	r1, [r3, #0]
 801e3be:	685b      	ldreq	r3, [r3, #4]
 801e3c0:	1809      	addeq	r1, r1, r0
 801e3c2:	6021      	streq	r1, [r4, #0]
 801e3c4:	e7ed      	b.n	801e3a2 <_free_r+0x1e>
 801e3c6:	461a      	mov	r2, r3
 801e3c8:	685b      	ldr	r3, [r3, #4]
 801e3ca:	b10b      	cbz	r3, 801e3d0 <_free_r+0x4c>
 801e3cc:	42a3      	cmp	r3, r4
 801e3ce:	d9fa      	bls.n	801e3c6 <_free_r+0x42>
 801e3d0:	6811      	ldr	r1, [r2, #0]
 801e3d2:	1850      	adds	r0, r2, r1
 801e3d4:	42a0      	cmp	r0, r4
 801e3d6:	d10b      	bne.n	801e3f0 <_free_r+0x6c>
 801e3d8:	6820      	ldr	r0, [r4, #0]
 801e3da:	4401      	add	r1, r0
 801e3dc:	1850      	adds	r0, r2, r1
 801e3de:	4283      	cmp	r3, r0
 801e3e0:	6011      	str	r1, [r2, #0]
 801e3e2:	d1e0      	bne.n	801e3a6 <_free_r+0x22>
 801e3e4:	6818      	ldr	r0, [r3, #0]
 801e3e6:	685b      	ldr	r3, [r3, #4]
 801e3e8:	6053      	str	r3, [r2, #4]
 801e3ea:	4408      	add	r0, r1
 801e3ec:	6010      	str	r0, [r2, #0]
 801e3ee:	e7da      	b.n	801e3a6 <_free_r+0x22>
 801e3f0:	d902      	bls.n	801e3f8 <_free_r+0x74>
 801e3f2:	230c      	movs	r3, #12
 801e3f4:	602b      	str	r3, [r5, #0]
 801e3f6:	e7d6      	b.n	801e3a6 <_free_r+0x22>
 801e3f8:	6820      	ldr	r0, [r4, #0]
 801e3fa:	1821      	adds	r1, r4, r0
 801e3fc:	428b      	cmp	r3, r1
 801e3fe:	bf04      	itt	eq
 801e400:	6819      	ldreq	r1, [r3, #0]
 801e402:	685b      	ldreq	r3, [r3, #4]
 801e404:	6063      	str	r3, [r4, #4]
 801e406:	bf04      	itt	eq
 801e408:	1809      	addeq	r1, r1, r0
 801e40a:	6021      	streq	r1, [r4, #0]
 801e40c:	6054      	str	r4, [r2, #4]
 801e40e:	e7ca      	b.n	801e3a6 <_free_r+0x22>
 801e410:	bd38      	pop	{r3, r4, r5, pc}
 801e412:	bf00      	nop
 801e414:	2000c54c 	.word	0x2000c54c

0801e418 <_malloc_usable_size_r>:
 801e418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e41c:	1f18      	subs	r0, r3, #4
 801e41e:	2b00      	cmp	r3, #0
 801e420:	bfbc      	itt	lt
 801e422:	580b      	ldrlt	r3, [r1, r0]
 801e424:	18c0      	addlt	r0, r0, r3
 801e426:	4770      	bx	lr

0801e428 <__ssputs_r>:
 801e428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e42c:	688e      	ldr	r6, [r1, #8]
 801e42e:	461f      	mov	r7, r3
 801e430:	42be      	cmp	r6, r7
 801e432:	680b      	ldr	r3, [r1, #0]
 801e434:	4682      	mov	sl, r0
 801e436:	460c      	mov	r4, r1
 801e438:	4690      	mov	r8, r2
 801e43a:	d82d      	bhi.n	801e498 <__ssputs_r+0x70>
 801e43c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e440:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e444:	d026      	beq.n	801e494 <__ssputs_r+0x6c>
 801e446:	6965      	ldr	r5, [r4, #20]
 801e448:	6909      	ldr	r1, [r1, #16]
 801e44a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e44e:	eba3 0901 	sub.w	r9, r3, r1
 801e452:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e456:	1c7b      	adds	r3, r7, #1
 801e458:	444b      	add	r3, r9
 801e45a:	106d      	asrs	r5, r5, #1
 801e45c:	429d      	cmp	r5, r3
 801e45e:	bf38      	it	cc
 801e460:	461d      	movcc	r5, r3
 801e462:	0553      	lsls	r3, r2, #21
 801e464:	d527      	bpl.n	801e4b6 <__ssputs_r+0x8e>
 801e466:	4629      	mov	r1, r5
 801e468:	f7ff fa48 	bl	801d8fc <_malloc_r>
 801e46c:	4606      	mov	r6, r0
 801e46e:	b360      	cbz	r0, 801e4ca <__ssputs_r+0xa2>
 801e470:	6921      	ldr	r1, [r4, #16]
 801e472:	464a      	mov	r2, r9
 801e474:	f7ff ff4d 	bl	801e312 <memcpy>
 801e478:	89a3      	ldrh	r3, [r4, #12]
 801e47a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e47e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e482:	81a3      	strh	r3, [r4, #12]
 801e484:	6126      	str	r6, [r4, #16]
 801e486:	6165      	str	r5, [r4, #20]
 801e488:	444e      	add	r6, r9
 801e48a:	eba5 0509 	sub.w	r5, r5, r9
 801e48e:	6026      	str	r6, [r4, #0]
 801e490:	60a5      	str	r5, [r4, #8]
 801e492:	463e      	mov	r6, r7
 801e494:	42be      	cmp	r6, r7
 801e496:	d900      	bls.n	801e49a <__ssputs_r+0x72>
 801e498:	463e      	mov	r6, r7
 801e49a:	6820      	ldr	r0, [r4, #0]
 801e49c:	4632      	mov	r2, r6
 801e49e:	4641      	mov	r1, r8
 801e4a0:	f7ff fe54 	bl	801e14c <memmove>
 801e4a4:	68a3      	ldr	r3, [r4, #8]
 801e4a6:	1b9b      	subs	r3, r3, r6
 801e4a8:	60a3      	str	r3, [r4, #8]
 801e4aa:	6823      	ldr	r3, [r4, #0]
 801e4ac:	4433      	add	r3, r6
 801e4ae:	6023      	str	r3, [r4, #0]
 801e4b0:	2000      	movs	r0, #0
 801e4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e4b6:	462a      	mov	r2, r5
 801e4b8:	f7ff fb20 	bl	801dafc <_realloc_r>
 801e4bc:	4606      	mov	r6, r0
 801e4be:	2800      	cmp	r0, #0
 801e4c0:	d1e0      	bne.n	801e484 <__ssputs_r+0x5c>
 801e4c2:	6921      	ldr	r1, [r4, #16]
 801e4c4:	4650      	mov	r0, sl
 801e4c6:	f7ff ff5d 	bl	801e384 <_free_r>
 801e4ca:	230c      	movs	r3, #12
 801e4cc:	f8ca 3000 	str.w	r3, [sl]
 801e4d0:	89a3      	ldrh	r3, [r4, #12]
 801e4d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e4d6:	81a3      	strh	r3, [r4, #12]
 801e4d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e4dc:	e7e9      	b.n	801e4b2 <__ssputs_r+0x8a>
	...

0801e4e0 <_svfiprintf_r>:
 801e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4e4:	4698      	mov	r8, r3
 801e4e6:	898b      	ldrh	r3, [r1, #12]
 801e4e8:	061b      	lsls	r3, r3, #24
 801e4ea:	b09d      	sub	sp, #116	@ 0x74
 801e4ec:	4607      	mov	r7, r0
 801e4ee:	460d      	mov	r5, r1
 801e4f0:	4614      	mov	r4, r2
 801e4f2:	d510      	bpl.n	801e516 <_svfiprintf_r+0x36>
 801e4f4:	690b      	ldr	r3, [r1, #16]
 801e4f6:	b973      	cbnz	r3, 801e516 <_svfiprintf_r+0x36>
 801e4f8:	2140      	movs	r1, #64	@ 0x40
 801e4fa:	f7ff f9ff 	bl	801d8fc <_malloc_r>
 801e4fe:	6028      	str	r0, [r5, #0]
 801e500:	6128      	str	r0, [r5, #16]
 801e502:	b930      	cbnz	r0, 801e512 <_svfiprintf_r+0x32>
 801e504:	230c      	movs	r3, #12
 801e506:	603b      	str	r3, [r7, #0]
 801e508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e50c:	b01d      	add	sp, #116	@ 0x74
 801e50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e512:	2340      	movs	r3, #64	@ 0x40
 801e514:	616b      	str	r3, [r5, #20]
 801e516:	2300      	movs	r3, #0
 801e518:	9309      	str	r3, [sp, #36]	@ 0x24
 801e51a:	2320      	movs	r3, #32
 801e51c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e520:	f8cd 800c 	str.w	r8, [sp, #12]
 801e524:	2330      	movs	r3, #48	@ 0x30
 801e526:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e6c4 <_svfiprintf_r+0x1e4>
 801e52a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e52e:	f04f 0901 	mov.w	r9, #1
 801e532:	4623      	mov	r3, r4
 801e534:	469a      	mov	sl, r3
 801e536:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e53a:	b10a      	cbz	r2, 801e540 <_svfiprintf_r+0x60>
 801e53c:	2a25      	cmp	r2, #37	@ 0x25
 801e53e:	d1f9      	bne.n	801e534 <_svfiprintf_r+0x54>
 801e540:	ebba 0b04 	subs.w	fp, sl, r4
 801e544:	d00b      	beq.n	801e55e <_svfiprintf_r+0x7e>
 801e546:	465b      	mov	r3, fp
 801e548:	4622      	mov	r2, r4
 801e54a:	4629      	mov	r1, r5
 801e54c:	4638      	mov	r0, r7
 801e54e:	f7ff ff6b 	bl	801e428 <__ssputs_r>
 801e552:	3001      	adds	r0, #1
 801e554:	f000 80a7 	beq.w	801e6a6 <_svfiprintf_r+0x1c6>
 801e558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e55a:	445a      	add	r2, fp
 801e55c:	9209      	str	r2, [sp, #36]	@ 0x24
 801e55e:	f89a 3000 	ldrb.w	r3, [sl]
 801e562:	2b00      	cmp	r3, #0
 801e564:	f000 809f 	beq.w	801e6a6 <_svfiprintf_r+0x1c6>
 801e568:	2300      	movs	r3, #0
 801e56a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e56e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e572:	f10a 0a01 	add.w	sl, sl, #1
 801e576:	9304      	str	r3, [sp, #16]
 801e578:	9307      	str	r3, [sp, #28]
 801e57a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e57e:	931a      	str	r3, [sp, #104]	@ 0x68
 801e580:	4654      	mov	r4, sl
 801e582:	2205      	movs	r2, #5
 801e584:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e588:	484e      	ldr	r0, [pc, #312]	@ (801e6c4 <_svfiprintf_r+0x1e4>)
 801e58a:	f7e1 fe61 	bl	8000250 <memchr>
 801e58e:	9a04      	ldr	r2, [sp, #16]
 801e590:	b9d8      	cbnz	r0, 801e5ca <_svfiprintf_r+0xea>
 801e592:	06d0      	lsls	r0, r2, #27
 801e594:	bf44      	itt	mi
 801e596:	2320      	movmi	r3, #32
 801e598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e59c:	0711      	lsls	r1, r2, #28
 801e59e:	bf44      	itt	mi
 801e5a0:	232b      	movmi	r3, #43	@ 0x2b
 801e5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e5a6:	f89a 3000 	ldrb.w	r3, [sl]
 801e5aa:	2b2a      	cmp	r3, #42	@ 0x2a
 801e5ac:	d015      	beq.n	801e5da <_svfiprintf_r+0xfa>
 801e5ae:	9a07      	ldr	r2, [sp, #28]
 801e5b0:	4654      	mov	r4, sl
 801e5b2:	2000      	movs	r0, #0
 801e5b4:	f04f 0c0a 	mov.w	ip, #10
 801e5b8:	4621      	mov	r1, r4
 801e5ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e5be:	3b30      	subs	r3, #48	@ 0x30
 801e5c0:	2b09      	cmp	r3, #9
 801e5c2:	d94b      	bls.n	801e65c <_svfiprintf_r+0x17c>
 801e5c4:	b1b0      	cbz	r0, 801e5f4 <_svfiprintf_r+0x114>
 801e5c6:	9207      	str	r2, [sp, #28]
 801e5c8:	e014      	b.n	801e5f4 <_svfiprintf_r+0x114>
 801e5ca:	eba0 0308 	sub.w	r3, r0, r8
 801e5ce:	fa09 f303 	lsl.w	r3, r9, r3
 801e5d2:	4313      	orrs	r3, r2
 801e5d4:	9304      	str	r3, [sp, #16]
 801e5d6:	46a2      	mov	sl, r4
 801e5d8:	e7d2      	b.n	801e580 <_svfiprintf_r+0xa0>
 801e5da:	9b03      	ldr	r3, [sp, #12]
 801e5dc:	1d19      	adds	r1, r3, #4
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	9103      	str	r1, [sp, #12]
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	bfbb      	ittet	lt
 801e5e6:	425b      	neglt	r3, r3
 801e5e8:	f042 0202 	orrlt.w	r2, r2, #2
 801e5ec:	9307      	strge	r3, [sp, #28]
 801e5ee:	9307      	strlt	r3, [sp, #28]
 801e5f0:	bfb8      	it	lt
 801e5f2:	9204      	strlt	r2, [sp, #16]
 801e5f4:	7823      	ldrb	r3, [r4, #0]
 801e5f6:	2b2e      	cmp	r3, #46	@ 0x2e
 801e5f8:	d10a      	bne.n	801e610 <_svfiprintf_r+0x130>
 801e5fa:	7863      	ldrb	r3, [r4, #1]
 801e5fc:	2b2a      	cmp	r3, #42	@ 0x2a
 801e5fe:	d132      	bne.n	801e666 <_svfiprintf_r+0x186>
 801e600:	9b03      	ldr	r3, [sp, #12]
 801e602:	1d1a      	adds	r2, r3, #4
 801e604:	681b      	ldr	r3, [r3, #0]
 801e606:	9203      	str	r2, [sp, #12]
 801e608:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e60c:	3402      	adds	r4, #2
 801e60e:	9305      	str	r3, [sp, #20]
 801e610:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e6d4 <_svfiprintf_r+0x1f4>
 801e614:	7821      	ldrb	r1, [r4, #0]
 801e616:	2203      	movs	r2, #3
 801e618:	4650      	mov	r0, sl
 801e61a:	f7e1 fe19 	bl	8000250 <memchr>
 801e61e:	b138      	cbz	r0, 801e630 <_svfiprintf_r+0x150>
 801e620:	9b04      	ldr	r3, [sp, #16]
 801e622:	eba0 000a 	sub.w	r0, r0, sl
 801e626:	2240      	movs	r2, #64	@ 0x40
 801e628:	4082      	lsls	r2, r0
 801e62a:	4313      	orrs	r3, r2
 801e62c:	3401      	adds	r4, #1
 801e62e:	9304      	str	r3, [sp, #16]
 801e630:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e634:	4824      	ldr	r0, [pc, #144]	@ (801e6c8 <_svfiprintf_r+0x1e8>)
 801e636:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e63a:	2206      	movs	r2, #6
 801e63c:	f7e1 fe08 	bl	8000250 <memchr>
 801e640:	2800      	cmp	r0, #0
 801e642:	d036      	beq.n	801e6b2 <_svfiprintf_r+0x1d2>
 801e644:	4b21      	ldr	r3, [pc, #132]	@ (801e6cc <_svfiprintf_r+0x1ec>)
 801e646:	bb1b      	cbnz	r3, 801e690 <_svfiprintf_r+0x1b0>
 801e648:	9b03      	ldr	r3, [sp, #12]
 801e64a:	3307      	adds	r3, #7
 801e64c:	f023 0307 	bic.w	r3, r3, #7
 801e650:	3308      	adds	r3, #8
 801e652:	9303      	str	r3, [sp, #12]
 801e654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e656:	4433      	add	r3, r6
 801e658:	9309      	str	r3, [sp, #36]	@ 0x24
 801e65a:	e76a      	b.n	801e532 <_svfiprintf_r+0x52>
 801e65c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e660:	460c      	mov	r4, r1
 801e662:	2001      	movs	r0, #1
 801e664:	e7a8      	b.n	801e5b8 <_svfiprintf_r+0xd8>
 801e666:	2300      	movs	r3, #0
 801e668:	3401      	adds	r4, #1
 801e66a:	9305      	str	r3, [sp, #20]
 801e66c:	4619      	mov	r1, r3
 801e66e:	f04f 0c0a 	mov.w	ip, #10
 801e672:	4620      	mov	r0, r4
 801e674:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e678:	3a30      	subs	r2, #48	@ 0x30
 801e67a:	2a09      	cmp	r2, #9
 801e67c:	d903      	bls.n	801e686 <_svfiprintf_r+0x1a6>
 801e67e:	2b00      	cmp	r3, #0
 801e680:	d0c6      	beq.n	801e610 <_svfiprintf_r+0x130>
 801e682:	9105      	str	r1, [sp, #20]
 801e684:	e7c4      	b.n	801e610 <_svfiprintf_r+0x130>
 801e686:	fb0c 2101 	mla	r1, ip, r1, r2
 801e68a:	4604      	mov	r4, r0
 801e68c:	2301      	movs	r3, #1
 801e68e:	e7f0      	b.n	801e672 <_svfiprintf_r+0x192>
 801e690:	ab03      	add	r3, sp, #12
 801e692:	9300      	str	r3, [sp, #0]
 801e694:	462a      	mov	r2, r5
 801e696:	4b0e      	ldr	r3, [pc, #56]	@ (801e6d0 <_svfiprintf_r+0x1f0>)
 801e698:	a904      	add	r1, sp, #16
 801e69a:	4638      	mov	r0, r7
 801e69c:	f3af 8000 	nop.w
 801e6a0:	1c42      	adds	r2, r0, #1
 801e6a2:	4606      	mov	r6, r0
 801e6a4:	d1d6      	bne.n	801e654 <_svfiprintf_r+0x174>
 801e6a6:	89ab      	ldrh	r3, [r5, #12]
 801e6a8:	065b      	lsls	r3, r3, #25
 801e6aa:	f53f af2d 	bmi.w	801e508 <_svfiprintf_r+0x28>
 801e6ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e6b0:	e72c      	b.n	801e50c <_svfiprintf_r+0x2c>
 801e6b2:	ab03      	add	r3, sp, #12
 801e6b4:	9300      	str	r3, [sp, #0]
 801e6b6:	462a      	mov	r2, r5
 801e6b8:	4b05      	ldr	r3, [pc, #20]	@ (801e6d0 <_svfiprintf_r+0x1f0>)
 801e6ba:	a904      	add	r1, sp, #16
 801e6bc:	4638      	mov	r0, r7
 801e6be:	f000 f9bb 	bl	801ea38 <_printf_i>
 801e6c2:	e7ed      	b.n	801e6a0 <_svfiprintf_r+0x1c0>
 801e6c4:	080217fa 	.word	0x080217fa
 801e6c8:	08021804 	.word	0x08021804
 801e6cc:	00000000 	.word	0x00000000
 801e6d0:	0801e429 	.word	0x0801e429
 801e6d4:	08021800 	.word	0x08021800

0801e6d8 <__sfputc_r>:
 801e6d8:	6893      	ldr	r3, [r2, #8]
 801e6da:	3b01      	subs	r3, #1
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	b410      	push	{r4}
 801e6e0:	6093      	str	r3, [r2, #8]
 801e6e2:	da08      	bge.n	801e6f6 <__sfputc_r+0x1e>
 801e6e4:	6994      	ldr	r4, [r2, #24]
 801e6e6:	42a3      	cmp	r3, r4
 801e6e8:	db01      	blt.n	801e6ee <__sfputc_r+0x16>
 801e6ea:	290a      	cmp	r1, #10
 801e6ec:	d103      	bne.n	801e6f6 <__sfputc_r+0x1e>
 801e6ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e6f2:	f7ff bc87 	b.w	801e004 <__swbuf_r>
 801e6f6:	6813      	ldr	r3, [r2, #0]
 801e6f8:	1c58      	adds	r0, r3, #1
 801e6fa:	6010      	str	r0, [r2, #0]
 801e6fc:	7019      	strb	r1, [r3, #0]
 801e6fe:	4608      	mov	r0, r1
 801e700:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e704:	4770      	bx	lr

0801e706 <__sfputs_r>:
 801e706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e708:	4606      	mov	r6, r0
 801e70a:	460f      	mov	r7, r1
 801e70c:	4614      	mov	r4, r2
 801e70e:	18d5      	adds	r5, r2, r3
 801e710:	42ac      	cmp	r4, r5
 801e712:	d101      	bne.n	801e718 <__sfputs_r+0x12>
 801e714:	2000      	movs	r0, #0
 801e716:	e007      	b.n	801e728 <__sfputs_r+0x22>
 801e718:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e71c:	463a      	mov	r2, r7
 801e71e:	4630      	mov	r0, r6
 801e720:	f7ff ffda 	bl	801e6d8 <__sfputc_r>
 801e724:	1c43      	adds	r3, r0, #1
 801e726:	d1f3      	bne.n	801e710 <__sfputs_r+0xa>
 801e728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e72c <_vfiprintf_r>:
 801e72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e730:	460d      	mov	r5, r1
 801e732:	b09d      	sub	sp, #116	@ 0x74
 801e734:	4614      	mov	r4, r2
 801e736:	4698      	mov	r8, r3
 801e738:	4606      	mov	r6, r0
 801e73a:	b118      	cbz	r0, 801e744 <_vfiprintf_r+0x18>
 801e73c:	6a03      	ldr	r3, [r0, #32]
 801e73e:	b90b      	cbnz	r3, 801e744 <_vfiprintf_r+0x18>
 801e740:	f7ff fb0e 	bl	801dd60 <__sinit>
 801e744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e746:	07d9      	lsls	r1, r3, #31
 801e748:	d405      	bmi.n	801e756 <_vfiprintf_r+0x2a>
 801e74a:	89ab      	ldrh	r3, [r5, #12]
 801e74c:	059a      	lsls	r2, r3, #22
 801e74e:	d402      	bmi.n	801e756 <_vfiprintf_r+0x2a>
 801e750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e752:	f7ff fdd4 	bl	801e2fe <__retarget_lock_acquire_recursive>
 801e756:	89ab      	ldrh	r3, [r5, #12]
 801e758:	071b      	lsls	r3, r3, #28
 801e75a:	d501      	bpl.n	801e760 <_vfiprintf_r+0x34>
 801e75c:	692b      	ldr	r3, [r5, #16]
 801e75e:	b99b      	cbnz	r3, 801e788 <_vfiprintf_r+0x5c>
 801e760:	4629      	mov	r1, r5
 801e762:	4630      	mov	r0, r6
 801e764:	f7ff fc8c 	bl	801e080 <__swsetup_r>
 801e768:	b170      	cbz	r0, 801e788 <_vfiprintf_r+0x5c>
 801e76a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e76c:	07dc      	lsls	r4, r3, #31
 801e76e:	d504      	bpl.n	801e77a <_vfiprintf_r+0x4e>
 801e770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e774:	b01d      	add	sp, #116	@ 0x74
 801e776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e77a:	89ab      	ldrh	r3, [r5, #12]
 801e77c:	0598      	lsls	r0, r3, #22
 801e77e:	d4f7      	bmi.n	801e770 <_vfiprintf_r+0x44>
 801e780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e782:	f7ff fdbd 	bl	801e300 <__retarget_lock_release_recursive>
 801e786:	e7f3      	b.n	801e770 <_vfiprintf_r+0x44>
 801e788:	2300      	movs	r3, #0
 801e78a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e78c:	2320      	movs	r3, #32
 801e78e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e792:	f8cd 800c 	str.w	r8, [sp, #12]
 801e796:	2330      	movs	r3, #48	@ 0x30
 801e798:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e948 <_vfiprintf_r+0x21c>
 801e79c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e7a0:	f04f 0901 	mov.w	r9, #1
 801e7a4:	4623      	mov	r3, r4
 801e7a6:	469a      	mov	sl, r3
 801e7a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e7ac:	b10a      	cbz	r2, 801e7b2 <_vfiprintf_r+0x86>
 801e7ae:	2a25      	cmp	r2, #37	@ 0x25
 801e7b0:	d1f9      	bne.n	801e7a6 <_vfiprintf_r+0x7a>
 801e7b2:	ebba 0b04 	subs.w	fp, sl, r4
 801e7b6:	d00b      	beq.n	801e7d0 <_vfiprintf_r+0xa4>
 801e7b8:	465b      	mov	r3, fp
 801e7ba:	4622      	mov	r2, r4
 801e7bc:	4629      	mov	r1, r5
 801e7be:	4630      	mov	r0, r6
 801e7c0:	f7ff ffa1 	bl	801e706 <__sfputs_r>
 801e7c4:	3001      	adds	r0, #1
 801e7c6:	f000 80a7 	beq.w	801e918 <_vfiprintf_r+0x1ec>
 801e7ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e7cc:	445a      	add	r2, fp
 801e7ce:	9209      	str	r2, [sp, #36]	@ 0x24
 801e7d0:	f89a 3000 	ldrb.w	r3, [sl]
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	f000 809f 	beq.w	801e918 <_vfiprintf_r+0x1ec>
 801e7da:	2300      	movs	r3, #0
 801e7dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e7e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e7e4:	f10a 0a01 	add.w	sl, sl, #1
 801e7e8:	9304      	str	r3, [sp, #16]
 801e7ea:	9307      	str	r3, [sp, #28]
 801e7ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e7f0:	931a      	str	r3, [sp, #104]	@ 0x68
 801e7f2:	4654      	mov	r4, sl
 801e7f4:	2205      	movs	r2, #5
 801e7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7fa:	4853      	ldr	r0, [pc, #332]	@ (801e948 <_vfiprintf_r+0x21c>)
 801e7fc:	f7e1 fd28 	bl	8000250 <memchr>
 801e800:	9a04      	ldr	r2, [sp, #16]
 801e802:	b9d8      	cbnz	r0, 801e83c <_vfiprintf_r+0x110>
 801e804:	06d1      	lsls	r1, r2, #27
 801e806:	bf44      	itt	mi
 801e808:	2320      	movmi	r3, #32
 801e80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e80e:	0713      	lsls	r3, r2, #28
 801e810:	bf44      	itt	mi
 801e812:	232b      	movmi	r3, #43	@ 0x2b
 801e814:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e818:	f89a 3000 	ldrb.w	r3, [sl]
 801e81c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e81e:	d015      	beq.n	801e84c <_vfiprintf_r+0x120>
 801e820:	9a07      	ldr	r2, [sp, #28]
 801e822:	4654      	mov	r4, sl
 801e824:	2000      	movs	r0, #0
 801e826:	f04f 0c0a 	mov.w	ip, #10
 801e82a:	4621      	mov	r1, r4
 801e82c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e830:	3b30      	subs	r3, #48	@ 0x30
 801e832:	2b09      	cmp	r3, #9
 801e834:	d94b      	bls.n	801e8ce <_vfiprintf_r+0x1a2>
 801e836:	b1b0      	cbz	r0, 801e866 <_vfiprintf_r+0x13a>
 801e838:	9207      	str	r2, [sp, #28]
 801e83a:	e014      	b.n	801e866 <_vfiprintf_r+0x13a>
 801e83c:	eba0 0308 	sub.w	r3, r0, r8
 801e840:	fa09 f303 	lsl.w	r3, r9, r3
 801e844:	4313      	orrs	r3, r2
 801e846:	9304      	str	r3, [sp, #16]
 801e848:	46a2      	mov	sl, r4
 801e84a:	e7d2      	b.n	801e7f2 <_vfiprintf_r+0xc6>
 801e84c:	9b03      	ldr	r3, [sp, #12]
 801e84e:	1d19      	adds	r1, r3, #4
 801e850:	681b      	ldr	r3, [r3, #0]
 801e852:	9103      	str	r1, [sp, #12]
 801e854:	2b00      	cmp	r3, #0
 801e856:	bfbb      	ittet	lt
 801e858:	425b      	neglt	r3, r3
 801e85a:	f042 0202 	orrlt.w	r2, r2, #2
 801e85e:	9307      	strge	r3, [sp, #28]
 801e860:	9307      	strlt	r3, [sp, #28]
 801e862:	bfb8      	it	lt
 801e864:	9204      	strlt	r2, [sp, #16]
 801e866:	7823      	ldrb	r3, [r4, #0]
 801e868:	2b2e      	cmp	r3, #46	@ 0x2e
 801e86a:	d10a      	bne.n	801e882 <_vfiprintf_r+0x156>
 801e86c:	7863      	ldrb	r3, [r4, #1]
 801e86e:	2b2a      	cmp	r3, #42	@ 0x2a
 801e870:	d132      	bne.n	801e8d8 <_vfiprintf_r+0x1ac>
 801e872:	9b03      	ldr	r3, [sp, #12]
 801e874:	1d1a      	adds	r2, r3, #4
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	9203      	str	r2, [sp, #12]
 801e87a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e87e:	3402      	adds	r4, #2
 801e880:	9305      	str	r3, [sp, #20]
 801e882:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e958 <_vfiprintf_r+0x22c>
 801e886:	7821      	ldrb	r1, [r4, #0]
 801e888:	2203      	movs	r2, #3
 801e88a:	4650      	mov	r0, sl
 801e88c:	f7e1 fce0 	bl	8000250 <memchr>
 801e890:	b138      	cbz	r0, 801e8a2 <_vfiprintf_r+0x176>
 801e892:	9b04      	ldr	r3, [sp, #16]
 801e894:	eba0 000a 	sub.w	r0, r0, sl
 801e898:	2240      	movs	r2, #64	@ 0x40
 801e89a:	4082      	lsls	r2, r0
 801e89c:	4313      	orrs	r3, r2
 801e89e:	3401      	adds	r4, #1
 801e8a0:	9304      	str	r3, [sp, #16]
 801e8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8a6:	4829      	ldr	r0, [pc, #164]	@ (801e94c <_vfiprintf_r+0x220>)
 801e8a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e8ac:	2206      	movs	r2, #6
 801e8ae:	f7e1 fccf 	bl	8000250 <memchr>
 801e8b2:	2800      	cmp	r0, #0
 801e8b4:	d03f      	beq.n	801e936 <_vfiprintf_r+0x20a>
 801e8b6:	4b26      	ldr	r3, [pc, #152]	@ (801e950 <_vfiprintf_r+0x224>)
 801e8b8:	bb1b      	cbnz	r3, 801e902 <_vfiprintf_r+0x1d6>
 801e8ba:	9b03      	ldr	r3, [sp, #12]
 801e8bc:	3307      	adds	r3, #7
 801e8be:	f023 0307 	bic.w	r3, r3, #7
 801e8c2:	3308      	adds	r3, #8
 801e8c4:	9303      	str	r3, [sp, #12]
 801e8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8c8:	443b      	add	r3, r7
 801e8ca:	9309      	str	r3, [sp, #36]	@ 0x24
 801e8cc:	e76a      	b.n	801e7a4 <_vfiprintf_r+0x78>
 801e8ce:	fb0c 3202 	mla	r2, ip, r2, r3
 801e8d2:	460c      	mov	r4, r1
 801e8d4:	2001      	movs	r0, #1
 801e8d6:	e7a8      	b.n	801e82a <_vfiprintf_r+0xfe>
 801e8d8:	2300      	movs	r3, #0
 801e8da:	3401      	adds	r4, #1
 801e8dc:	9305      	str	r3, [sp, #20]
 801e8de:	4619      	mov	r1, r3
 801e8e0:	f04f 0c0a 	mov.w	ip, #10
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e8ea:	3a30      	subs	r2, #48	@ 0x30
 801e8ec:	2a09      	cmp	r2, #9
 801e8ee:	d903      	bls.n	801e8f8 <_vfiprintf_r+0x1cc>
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d0c6      	beq.n	801e882 <_vfiprintf_r+0x156>
 801e8f4:	9105      	str	r1, [sp, #20]
 801e8f6:	e7c4      	b.n	801e882 <_vfiprintf_r+0x156>
 801e8f8:	fb0c 2101 	mla	r1, ip, r1, r2
 801e8fc:	4604      	mov	r4, r0
 801e8fe:	2301      	movs	r3, #1
 801e900:	e7f0      	b.n	801e8e4 <_vfiprintf_r+0x1b8>
 801e902:	ab03      	add	r3, sp, #12
 801e904:	9300      	str	r3, [sp, #0]
 801e906:	462a      	mov	r2, r5
 801e908:	4b12      	ldr	r3, [pc, #72]	@ (801e954 <_vfiprintf_r+0x228>)
 801e90a:	a904      	add	r1, sp, #16
 801e90c:	4630      	mov	r0, r6
 801e90e:	f3af 8000 	nop.w
 801e912:	4607      	mov	r7, r0
 801e914:	1c78      	adds	r0, r7, #1
 801e916:	d1d6      	bne.n	801e8c6 <_vfiprintf_r+0x19a>
 801e918:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e91a:	07d9      	lsls	r1, r3, #31
 801e91c:	d405      	bmi.n	801e92a <_vfiprintf_r+0x1fe>
 801e91e:	89ab      	ldrh	r3, [r5, #12]
 801e920:	059a      	lsls	r2, r3, #22
 801e922:	d402      	bmi.n	801e92a <_vfiprintf_r+0x1fe>
 801e924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e926:	f7ff fceb 	bl	801e300 <__retarget_lock_release_recursive>
 801e92a:	89ab      	ldrh	r3, [r5, #12]
 801e92c:	065b      	lsls	r3, r3, #25
 801e92e:	f53f af1f 	bmi.w	801e770 <_vfiprintf_r+0x44>
 801e932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e934:	e71e      	b.n	801e774 <_vfiprintf_r+0x48>
 801e936:	ab03      	add	r3, sp, #12
 801e938:	9300      	str	r3, [sp, #0]
 801e93a:	462a      	mov	r2, r5
 801e93c:	4b05      	ldr	r3, [pc, #20]	@ (801e954 <_vfiprintf_r+0x228>)
 801e93e:	a904      	add	r1, sp, #16
 801e940:	4630      	mov	r0, r6
 801e942:	f000 f879 	bl	801ea38 <_printf_i>
 801e946:	e7e4      	b.n	801e912 <_vfiprintf_r+0x1e6>
 801e948:	080217fa 	.word	0x080217fa
 801e94c:	08021804 	.word	0x08021804
 801e950:	00000000 	.word	0x00000000
 801e954:	0801e707 	.word	0x0801e707
 801e958:	08021800 	.word	0x08021800

0801e95c <_printf_common>:
 801e95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e960:	4616      	mov	r6, r2
 801e962:	4698      	mov	r8, r3
 801e964:	688a      	ldr	r2, [r1, #8]
 801e966:	690b      	ldr	r3, [r1, #16]
 801e968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e96c:	4293      	cmp	r3, r2
 801e96e:	bfb8      	it	lt
 801e970:	4613      	movlt	r3, r2
 801e972:	6033      	str	r3, [r6, #0]
 801e974:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e978:	4607      	mov	r7, r0
 801e97a:	460c      	mov	r4, r1
 801e97c:	b10a      	cbz	r2, 801e982 <_printf_common+0x26>
 801e97e:	3301      	adds	r3, #1
 801e980:	6033      	str	r3, [r6, #0]
 801e982:	6823      	ldr	r3, [r4, #0]
 801e984:	0699      	lsls	r1, r3, #26
 801e986:	bf42      	ittt	mi
 801e988:	6833      	ldrmi	r3, [r6, #0]
 801e98a:	3302      	addmi	r3, #2
 801e98c:	6033      	strmi	r3, [r6, #0]
 801e98e:	6825      	ldr	r5, [r4, #0]
 801e990:	f015 0506 	ands.w	r5, r5, #6
 801e994:	d106      	bne.n	801e9a4 <_printf_common+0x48>
 801e996:	f104 0a19 	add.w	sl, r4, #25
 801e99a:	68e3      	ldr	r3, [r4, #12]
 801e99c:	6832      	ldr	r2, [r6, #0]
 801e99e:	1a9b      	subs	r3, r3, r2
 801e9a0:	42ab      	cmp	r3, r5
 801e9a2:	dc26      	bgt.n	801e9f2 <_printf_common+0x96>
 801e9a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e9a8:	6822      	ldr	r2, [r4, #0]
 801e9aa:	3b00      	subs	r3, #0
 801e9ac:	bf18      	it	ne
 801e9ae:	2301      	movne	r3, #1
 801e9b0:	0692      	lsls	r2, r2, #26
 801e9b2:	d42b      	bmi.n	801ea0c <_printf_common+0xb0>
 801e9b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e9b8:	4641      	mov	r1, r8
 801e9ba:	4638      	mov	r0, r7
 801e9bc:	47c8      	blx	r9
 801e9be:	3001      	adds	r0, #1
 801e9c0:	d01e      	beq.n	801ea00 <_printf_common+0xa4>
 801e9c2:	6823      	ldr	r3, [r4, #0]
 801e9c4:	6922      	ldr	r2, [r4, #16]
 801e9c6:	f003 0306 	and.w	r3, r3, #6
 801e9ca:	2b04      	cmp	r3, #4
 801e9cc:	bf02      	ittt	eq
 801e9ce:	68e5      	ldreq	r5, [r4, #12]
 801e9d0:	6833      	ldreq	r3, [r6, #0]
 801e9d2:	1aed      	subeq	r5, r5, r3
 801e9d4:	68a3      	ldr	r3, [r4, #8]
 801e9d6:	bf0c      	ite	eq
 801e9d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e9dc:	2500      	movne	r5, #0
 801e9de:	4293      	cmp	r3, r2
 801e9e0:	bfc4      	itt	gt
 801e9e2:	1a9b      	subgt	r3, r3, r2
 801e9e4:	18ed      	addgt	r5, r5, r3
 801e9e6:	2600      	movs	r6, #0
 801e9e8:	341a      	adds	r4, #26
 801e9ea:	42b5      	cmp	r5, r6
 801e9ec:	d11a      	bne.n	801ea24 <_printf_common+0xc8>
 801e9ee:	2000      	movs	r0, #0
 801e9f0:	e008      	b.n	801ea04 <_printf_common+0xa8>
 801e9f2:	2301      	movs	r3, #1
 801e9f4:	4652      	mov	r2, sl
 801e9f6:	4641      	mov	r1, r8
 801e9f8:	4638      	mov	r0, r7
 801e9fa:	47c8      	blx	r9
 801e9fc:	3001      	adds	r0, #1
 801e9fe:	d103      	bne.n	801ea08 <_printf_common+0xac>
 801ea00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ea04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea08:	3501      	adds	r5, #1
 801ea0a:	e7c6      	b.n	801e99a <_printf_common+0x3e>
 801ea0c:	18e1      	adds	r1, r4, r3
 801ea0e:	1c5a      	adds	r2, r3, #1
 801ea10:	2030      	movs	r0, #48	@ 0x30
 801ea12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ea16:	4422      	add	r2, r4
 801ea18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ea1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ea20:	3302      	adds	r3, #2
 801ea22:	e7c7      	b.n	801e9b4 <_printf_common+0x58>
 801ea24:	2301      	movs	r3, #1
 801ea26:	4622      	mov	r2, r4
 801ea28:	4641      	mov	r1, r8
 801ea2a:	4638      	mov	r0, r7
 801ea2c:	47c8      	blx	r9
 801ea2e:	3001      	adds	r0, #1
 801ea30:	d0e6      	beq.n	801ea00 <_printf_common+0xa4>
 801ea32:	3601      	adds	r6, #1
 801ea34:	e7d9      	b.n	801e9ea <_printf_common+0x8e>
	...

0801ea38 <_printf_i>:
 801ea38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ea3c:	7e0f      	ldrb	r7, [r1, #24]
 801ea3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ea40:	2f78      	cmp	r7, #120	@ 0x78
 801ea42:	4691      	mov	r9, r2
 801ea44:	4680      	mov	r8, r0
 801ea46:	460c      	mov	r4, r1
 801ea48:	469a      	mov	sl, r3
 801ea4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ea4e:	d807      	bhi.n	801ea60 <_printf_i+0x28>
 801ea50:	2f62      	cmp	r7, #98	@ 0x62
 801ea52:	d80a      	bhi.n	801ea6a <_printf_i+0x32>
 801ea54:	2f00      	cmp	r7, #0
 801ea56:	f000 80d2 	beq.w	801ebfe <_printf_i+0x1c6>
 801ea5a:	2f58      	cmp	r7, #88	@ 0x58
 801ea5c:	f000 80b9 	beq.w	801ebd2 <_printf_i+0x19a>
 801ea60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ea64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ea68:	e03a      	b.n	801eae0 <_printf_i+0xa8>
 801ea6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ea6e:	2b15      	cmp	r3, #21
 801ea70:	d8f6      	bhi.n	801ea60 <_printf_i+0x28>
 801ea72:	a101      	add	r1, pc, #4	@ (adr r1, 801ea78 <_printf_i+0x40>)
 801ea74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ea78:	0801ead1 	.word	0x0801ead1
 801ea7c:	0801eae5 	.word	0x0801eae5
 801ea80:	0801ea61 	.word	0x0801ea61
 801ea84:	0801ea61 	.word	0x0801ea61
 801ea88:	0801ea61 	.word	0x0801ea61
 801ea8c:	0801ea61 	.word	0x0801ea61
 801ea90:	0801eae5 	.word	0x0801eae5
 801ea94:	0801ea61 	.word	0x0801ea61
 801ea98:	0801ea61 	.word	0x0801ea61
 801ea9c:	0801ea61 	.word	0x0801ea61
 801eaa0:	0801ea61 	.word	0x0801ea61
 801eaa4:	0801ebe5 	.word	0x0801ebe5
 801eaa8:	0801eb0f 	.word	0x0801eb0f
 801eaac:	0801eb9f 	.word	0x0801eb9f
 801eab0:	0801ea61 	.word	0x0801ea61
 801eab4:	0801ea61 	.word	0x0801ea61
 801eab8:	0801ec07 	.word	0x0801ec07
 801eabc:	0801ea61 	.word	0x0801ea61
 801eac0:	0801eb0f 	.word	0x0801eb0f
 801eac4:	0801ea61 	.word	0x0801ea61
 801eac8:	0801ea61 	.word	0x0801ea61
 801eacc:	0801eba7 	.word	0x0801eba7
 801ead0:	6833      	ldr	r3, [r6, #0]
 801ead2:	1d1a      	adds	r2, r3, #4
 801ead4:	681b      	ldr	r3, [r3, #0]
 801ead6:	6032      	str	r2, [r6, #0]
 801ead8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801eadc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801eae0:	2301      	movs	r3, #1
 801eae2:	e09d      	b.n	801ec20 <_printf_i+0x1e8>
 801eae4:	6833      	ldr	r3, [r6, #0]
 801eae6:	6820      	ldr	r0, [r4, #0]
 801eae8:	1d19      	adds	r1, r3, #4
 801eaea:	6031      	str	r1, [r6, #0]
 801eaec:	0606      	lsls	r6, r0, #24
 801eaee:	d501      	bpl.n	801eaf4 <_printf_i+0xbc>
 801eaf0:	681d      	ldr	r5, [r3, #0]
 801eaf2:	e003      	b.n	801eafc <_printf_i+0xc4>
 801eaf4:	0645      	lsls	r5, r0, #25
 801eaf6:	d5fb      	bpl.n	801eaf0 <_printf_i+0xb8>
 801eaf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801eafc:	2d00      	cmp	r5, #0
 801eafe:	da03      	bge.n	801eb08 <_printf_i+0xd0>
 801eb00:	232d      	movs	r3, #45	@ 0x2d
 801eb02:	426d      	negs	r5, r5
 801eb04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801eb08:	4859      	ldr	r0, [pc, #356]	@ (801ec70 <_printf_i+0x238>)
 801eb0a:	230a      	movs	r3, #10
 801eb0c:	e011      	b.n	801eb32 <_printf_i+0xfa>
 801eb0e:	6821      	ldr	r1, [r4, #0]
 801eb10:	6833      	ldr	r3, [r6, #0]
 801eb12:	0608      	lsls	r0, r1, #24
 801eb14:	f853 5b04 	ldr.w	r5, [r3], #4
 801eb18:	d402      	bmi.n	801eb20 <_printf_i+0xe8>
 801eb1a:	0649      	lsls	r1, r1, #25
 801eb1c:	bf48      	it	mi
 801eb1e:	b2ad      	uxthmi	r5, r5
 801eb20:	2f6f      	cmp	r7, #111	@ 0x6f
 801eb22:	4853      	ldr	r0, [pc, #332]	@ (801ec70 <_printf_i+0x238>)
 801eb24:	6033      	str	r3, [r6, #0]
 801eb26:	bf14      	ite	ne
 801eb28:	230a      	movne	r3, #10
 801eb2a:	2308      	moveq	r3, #8
 801eb2c:	2100      	movs	r1, #0
 801eb2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801eb32:	6866      	ldr	r6, [r4, #4]
 801eb34:	60a6      	str	r6, [r4, #8]
 801eb36:	2e00      	cmp	r6, #0
 801eb38:	bfa2      	ittt	ge
 801eb3a:	6821      	ldrge	r1, [r4, #0]
 801eb3c:	f021 0104 	bicge.w	r1, r1, #4
 801eb40:	6021      	strge	r1, [r4, #0]
 801eb42:	b90d      	cbnz	r5, 801eb48 <_printf_i+0x110>
 801eb44:	2e00      	cmp	r6, #0
 801eb46:	d04b      	beq.n	801ebe0 <_printf_i+0x1a8>
 801eb48:	4616      	mov	r6, r2
 801eb4a:	fbb5 f1f3 	udiv	r1, r5, r3
 801eb4e:	fb03 5711 	mls	r7, r3, r1, r5
 801eb52:	5dc7      	ldrb	r7, [r0, r7]
 801eb54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801eb58:	462f      	mov	r7, r5
 801eb5a:	42bb      	cmp	r3, r7
 801eb5c:	460d      	mov	r5, r1
 801eb5e:	d9f4      	bls.n	801eb4a <_printf_i+0x112>
 801eb60:	2b08      	cmp	r3, #8
 801eb62:	d10b      	bne.n	801eb7c <_printf_i+0x144>
 801eb64:	6823      	ldr	r3, [r4, #0]
 801eb66:	07df      	lsls	r7, r3, #31
 801eb68:	d508      	bpl.n	801eb7c <_printf_i+0x144>
 801eb6a:	6923      	ldr	r3, [r4, #16]
 801eb6c:	6861      	ldr	r1, [r4, #4]
 801eb6e:	4299      	cmp	r1, r3
 801eb70:	bfde      	ittt	le
 801eb72:	2330      	movle	r3, #48	@ 0x30
 801eb74:	f806 3c01 	strble.w	r3, [r6, #-1]
 801eb78:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801eb7c:	1b92      	subs	r2, r2, r6
 801eb7e:	6122      	str	r2, [r4, #16]
 801eb80:	f8cd a000 	str.w	sl, [sp]
 801eb84:	464b      	mov	r3, r9
 801eb86:	aa03      	add	r2, sp, #12
 801eb88:	4621      	mov	r1, r4
 801eb8a:	4640      	mov	r0, r8
 801eb8c:	f7ff fee6 	bl	801e95c <_printf_common>
 801eb90:	3001      	adds	r0, #1
 801eb92:	d14a      	bne.n	801ec2a <_printf_i+0x1f2>
 801eb94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801eb98:	b004      	add	sp, #16
 801eb9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb9e:	6823      	ldr	r3, [r4, #0]
 801eba0:	f043 0320 	orr.w	r3, r3, #32
 801eba4:	6023      	str	r3, [r4, #0]
 801eba6:	4833      	ldr	r0, [pc, #204]	@ (801ec74 <_printf_i+0x23c>)
 801eba8:	2778      	movs	r7, #120	@ 0x78
 801ebaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ebae:	6823      	ldr	r3, [r4, #0]
 801ebb0:	6831      	ldr	r1, [r6, #0]
 801ebb2:	061f      	lsls	r7, r3, #24
 801ebb4:	f851 5b04 	ldr.w	r5, [r1], #4
 801ebb8:	d402      	bmi.n	801ebc0 <_printf_i+0x188>
 801ebba:	065f      	lsls	r7, r3, #25
 801ebbc:	bf48      	it	mi
 801ebbe:	b2ad      	uxthmi	r5, r5
 801ebc0:	6031      	str	r1, [r6, #0]
 801ebc2:	07d9      	lsls	r1, r3, #31
 801ebc4:	bf44      	itt	mi
 801ebc6:	f043 0320 	orrmi.w	r3, r3, #32
 801ebca:	6023      	strmi	r3, [r4, #0]
 801ebcc:	b11d      	cbz	r5, 801ebd6 <_printf_i+0x19e>
 801ebce:	2310      	movs	r3, #16
 801ebd0:	e7ac      	b.n	801eb2c <_printf_i+0xf4>
 801ebd2:	4827      	ldr	r0, [pc, #156]	@ (801ec70 <_printf_i+0x238>)
 801ebd4:	e7e9      	b.n	801ebaa <_printf_i+0x172>
 801ebd6:	6823      	ldr	r3, [r4, #0]
 801ebd8:	f023 0320 	bic.w	r3, r3, #32
 801ebdc:	6023      	str	r3, [r4, #0]
 801ebde:	e7f6      	b.n	801ebce <_printf_i+0x196>
 801ebe0:	4616      	mov	r6, r2
 801ebe2:	e7bd      	b.n	801eb60 <_printf_i+0x128>
 801ebe4:	6833      	ldr	r3, [r6, #0]
 801ebe6:	6825      	ldr	r5, [r4, #0]
 801ebe8:	6961      	ldr	r1, [r4, #20]
 801ebea:	1d18      	adds	r0, r3, #4
 801ebec:	6030      	str	r0, [r6, #0]
 801ebee:	062e      	lsls	r6, r5, #24
 801ebf0:	681b      	ldr	r3, [r3, #0]
 801ebf2:	d501      	bpl.n	801ebf8 <_printf_i+0x1c0>
 801ebf4:	6019      	str	r1, [r3, #0]
 801ebf6:	e002      	b.n	801ebfe <_printf_i+0x1c6>
 801ebf8:	0668      	lsls	r0, r5, #25
 801ebfa:	d5fb      	bpl.n	801ebf4 <_printf_i+0x1bc>
 801ebfc:	8019      	strh	r1, [r3, #0]
 801ebfe:	2300      	movs	r3, #0
 801ec00:	6123      	str	r3, [r4, #16]
 801ec02:	4616      	mov	r6, r2
 801ec04:	e7bc      	b.n	801eb80 <_printf_i+0x148>
 801ec06:	6833      	ldr	r3, [r6, #0]
 801ec08:	1d1a      	adds	r2, r3, #4
 801ec0a:	6032      	str	r2, [r6, #0]
 801ec0c:	681e      	ldr	r6, [r3, #0]
 801ec0e:	6862      	ldr	r2, [r4, #4]
 801ec10:	2100      	movs	r1, #0
 801ec12:	4630      	mov	r0, r6
 801ec14:	f7e1 fb1c 	bl	8000250 <memchr>
 801ec18:	b108      	cbz	r0, 801ec1e <_printf_i+0x1e6>
 801ec1a:	1b80      	subs	r0, r0, r6
 801ec1c:	6060      	str	r0, [r4, #4]
 801ec1e:	6863      	ldr	r3, [r4, #4]
 801ec20:	6123      	str	r3, [r4, #16]
 801ec22:	2300      	movs	r3, #0
 801ec24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ec28:	e7aa      	b.n	801eb80 <_printf_i+0x148>
 801ec2a:	6923      	ldr	r3, [r4, #16]
 801ec2c:	4632      	mov	r2, r6
 801ec2e:	4649      	mov	r1, r9
 801ec30:	4640      	mov	r0, r8
 801ec32:	47d0      	blx	sl
 801ec34:	3001      	adds	r0, #1
 801ec36:	d0ad      	beq.n	801eb94 <_printf_i+0x15c>
 801ec38:	6823      	ldr	r3, [r4, #0]
 801ec3a:	079b      	lsls	r3, r3, #30
 801ec3c:	d413      	bmi.n	801ec66 <_printf_i+0x22e>
 801ec3e:	68e0      	ldr	r0, [r4, #12]
 801ec40:	9b03      	ldr	r3, [sp, #12]
 801ec42:	4298      	cmp	r0, r3
 801ec44:	bfb8      	it	lt
 801ec46:	4618      	movlt	r0, r3
 801ec48:	e7a6      	b.n	801eb98 <_printf_i+0x160>
 801ec4a:	2301      	movs	r3, #1
 801ec4c:	4632      	mov	r2, r6
 801ec4e:	4649      	mov	r1, r9
 801ec50:	4640      	mov	r0, r8
 801ec52:	47d0      	blx	sl
 801ec54:	3001      	adds	r0, #1
 801ec56:	d09d      	beq.n	801eb94 <_printf_i+0x15c>
 801ec58:	3501      	adds	r5, #1
 801ec5a:	68e3      	ldr	r3, [r4, #12]
 801ec5c:	9903      	ldr	r1, [sp, #12]
 801ec5e:	1a5b      	subs	r3, r3, r1
 801ec60:	42ab      	cmp	r3, r5
 801ec62:	dcf2      	bgt.n	801ec4a <_printf_i+0x212>
 801ec64:	e7eb      	b.n	801ec3e <_printf_i+0x206>
 801ec66:	2500      	movs	r5, #0
 801ec68:	f104 0619 	add.w	r6, r4, #25
 801ec6c:	e7f5      	b.n	801ec5a <_printf_i+0x222>
 801ec6e:	bf00      	nop
 801ec70:	0802180b 	.word	0x0802180b
 801ec74:	0802181c 	.word	0x0802181c

0801ec78 <__sflush_r>:
 801ec78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ec7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec80:	0716      	lsls	r6, r2, #28
 801ec82:	4605      	mov	r5, r0
 801ec84:	460c      	mov	r4, r1
 801ec86:	d454      	bmi.n	801ed32 <__sflush_r+0xba>
 801ec88:	684b      	ldr	r3, [r1, #4]
 801ec8a:	2b00      	cmp	r3, #0
 801ec8c:	dc02      	bgt.n	801ec94 <__sflush_r+0x1c>
 801ec8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	dd48      	ble.n	801ed26 <__sflush_r+0xae>
 801ec94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ec96:	2e00      	cmp	r6, #0
 801ec98:	d045      	beq.n	801ed26 <__sflush_r+0xae>
 801ec9a:	2300      	movs	r3, #0
 801ec9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801eca0:	682f      	ldr	r7, [r5, #0]
 801eca2:	6a21      	ldr	r1, [r4, #32]
 801eca4:	602b      	str	r3, [r5, #0]
 801eca6:	d030      	beq.n	801ed0a <__sflush_r+0x92>
 801eca8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ecaa:	89a3      	ldrh	r3, [r4, #12]
 801ecac:	0759      	lsls	r1, r3, #29
 801ecae:	d505      	bpl.n	801ecbc <__sflush_r+0x44>
 801ecb0:	6863      	ldr	r3, [r4, #4]
 801ecb2:	1ad2      	subs	r2, r2, r3
 801ecb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ecb6:	b10b      	cbz	r3, 801ecbc <__sflush_r+0x44>
 801ecb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ecba:	1ad2      	subs	r2, r2, r3
 801ecbc:	2300      	movs	r3, #0
 801ecbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ecc0:	6a21      	ldr	r1, [r4, #32]
 801ecc2:	4628      	mov	r0, r5
 801ecc4:	47b0      	blx	r6
 801ecc6:	1c43      	adds	r3, r0, #1
 801ecc8:	89a3      	ldrh	r3, [r4, #12]
 801ecca:	d106      	bne.n	801ecda <__sflush_r+0x62>
 801eccc:	6829      	ldr	r1, [r5, #0]
 801ecce:	291d      	cmp	r1, #29
 801ecd0:	d82b      	bhi.n	801ed2a <__sflush_r+0xb2>
 801ecd2:	4a2a      	ldr	r2, [pc, #168]	@ (801ed7c <__sflush_r+0x104>)
 801ecd4:	410a      	asrs	r2, r1
 801ecd6:	07d6      	lsls	r6, r2, #31
 801ecd8:	d427      	bmi.n	801ed2a <__sflush_r+0xb2>
 801ecda:	2200      	movs	r2, #0
 801ecdc:	6062      	str	r2, [r4, #4]
 801ecde:	04d9      	lsls	r1, r3, #19
 801ece0:	6922      	ldr	r2, [r4, #16]
 801ece2:	6022      	str	r2, [r4, #0]
 801ece4:	d504      	bpl.n	801ecf0 <__sflush_r+0x78>
 801ece6:	1c42      	adds	r2, r0, #1
 801ece8:	d101      	bne.n	801ecee <__sflush_r+0x76>
 801ecea:	682b      	ldr	r3, [r5, #0]
 801ecec:	b903      	cbnz	r3, 801ecf0 <__sflush_r+0x78>
 801ecee:	6560      	str	r0, [r4, #84]	@ 0x54
 801ecf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ecf2:	602f      	str	r7, [r5, #0]
 801ecf4:	b1b9      	cbz	r1, 801ed26 <__sflush_r+0xae>
 801ecf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ecfa:	4299      	cmp	r1, r3
 801ecfc:	d002      	beq.n	801ed04 <__sflush_r+0x8c>
 801ecfe:	4628      	mov	r0, r5
 801ed00:	f7ff fb40 	bl	801e384 <_free_r>
 801ed04:	2300      	movs	r3, #0
 801ed06:	6363      	str	r3, [r4, #52]	@ 0x34
 801ed08:	e00d      	b.n	801ed26 <__sflush_r+0xae>
 801ed0a:	2301      	movs	r3, #1
 801ed0c:	4628      	mov	r0, r5
 801ed0e:	47b0      	blx	r6
 801ed10:	4602      	mov	r2, r0
 801ed12:	1c50      	adds	r0, r2, #1
 801ed14:	d1c9      	bne.n	801ecaa <__sflush_r+0x32>
 801ed16:	682b      	ldr	r3, [r5, #0]
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	d0c6      	beq.n	801ecaa <__sflush_r+0x32>
 801ed1c:	2b1d      	cmp	r3, #29
 801ed1e:	d001      	beq.n	801ed24 <__sflush_r+0xac>
 801ed20:	2b16      	cmp	r3, #22
 801ed22:	d11e      	bne.n	801ed62 <__sflush_r+0xea>
 801ed24:	602f      	str	r7, [r5, #0]
 801ed26:	2000      	movs	r0, #0
 801ed28:	e022      	b.n	801ed70 <__sflush_r+0xf8>
 801ed2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed2e:	b21b      	sxth	r3, r3
 801ed30:	e01b      	b.n	801ed6a <__sflush_r+0xf2>
 801ed32:	690f      	ldr	r7, [r1, #16]
 801ed34:	2f00      	cmp	r7, #0
 801ed36:	d0f6      	beq.n	801ed26 <__sflush_r+0xae>
 801ed38:	0793      	lsls	r3, r2, #30
 801ed3a:	680e      	ldr	r6, [r1, #0]
 801ed3c:	bf08      	it	eq
 801ed3e:	694b      	ldreq	r3, [r1, #20]
 801ed40:	600f      	str	r7, [r1, #0]
 801ed42:	bf18      	it	ne
 801ed44:	2300      	movne	r3, #0
 801ed46:	eba6 0807 	sub.w	r8, r6, r7
 801ed4a:	608b      	str	r3, [r1, #8]
 801ed4c:	f1b8 0f00 	cmp.w	r8, #0
 801ed50:	dde9      	ble.n	801ed26 <__sflush_r+0xae>
 801ed52:	6a21      	ldr	r1, [r4, #32]
 801ed54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ed56:	4643      	mov	r3, r8
 801ed58:	463a      	mov	r2, r7
 801ed5a:	4628      	mov	r0, r5
 801ed5c:	47b0      	blx	r6
 801ed5e:	2800      	cmp	r0, #0
 801ed60:	dc08      	bgt.n	801ed74 <__sflush_r+0xfc>
 801ed62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed6a:	81a3      	strh	r3, [r4, #12]
 801ed6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ed70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed74:	4407      	add	r7, r0
 801ed76:	eba8 0800 	sub.w	r8, r8, r0
 801ed7a:	e7e7      	b.n	801ed4c <__sflush_r+0xd4>
 801ed7c:	dfbffffe 	.word	0xdfbffffe

0801ed80 <_fflush_r>:
 801ed80:	b538      	push	{r3, r4, r5, lr}
 801ed82:	690b      	ldr	r3, [r1, #16]
 801ed84:	4605      	mov	r5, r0
 801ed86:	460c      	mov	r4, r1
 801ed88:	b913      	cbnz	r3, 801ed90 <_fflush_r+0x10>
 801ed8a:	2500      	movs	r5, #0
 801ed8c:	4628      	mov	r0, r5
 801ed8e:	bd38      	pop	{r3, r4, r5, pc}
 801ed90:	b118      	cbz	r0, 801ed9a <_fflush_r+0x1a>
 801ed92:	6a03      	ldr	r3, [r0, #32]
 801ed94:	b90b      	cbnz	r3, 801ed9a <_fflush_r+0x1a>
 801ed96:	f7fe ffe3 	bl	801dd60 <__sinit>
 801ed9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed9e:	2b00      	cmp	r3, #0
 801eda0:	d0f3      	beq.n	801ed8a <_fflush_r+0xa>
 801eda2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801eda4:	07d0      	lsls	r0, r2, #31
 801eda6:	d404      	bmi.n	801edb2 <_fflush_r+0x32>
 801eda8:	0599      	lsls	r1, r3, #22
 801edaa:	d402      	bmi.n	801edb2 <_fflush_r+0x32>
 801edac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801edae:	f7ff faa6 	bl	801e2fe <__retarget_lock_acquire_recursive>
 801edb2:	4628      	mov	r0, r5
 801edb4:	4621      	mov	r1, r4
 801edb6:	f7ff ff5f 	bl	801ec78 <__sflush_r>
 801edba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801edbc:	07da      	lsls	r2, r3, #31
 801edbe:	4605      	mov	r5, r0
 801edc0:	d4e4      	bmi.n	801ed8c <_fflush_r+0xc>
 801edc2:	89a3      	ldrh	r3, [r4, #12]
 801edc4:	059b      	lsls	r3, r3, #22
 801edc6:	d4e1      	bmi.n	801ed8c <_fflush_r+0xc>
 801edc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801edca:	f7ff fa99 	bl	801e300 <__retarget_lock_release_recursive>
 801edce:	e7dd      	b.n	801ed8c <_fflush_r+0xc>

0801edd0 <fiprintf>:
 801edd0:	b40e      	push	{r1, r2, r3}
 801edd2:	b503      	push	{r0, r1, lr}
 801edd4:	4601      	mov	r1, r0
 801edd6:	ab03      	add	r3, sp, #12
 801edd8:	4805      	ldr	r0, [pc, #20]	@ (801edf0 <fiprintf+0x20>)
 801edda:	f853 2b04 	ldr.w	r2, [r3], #4
 801edde:	6800      	ldr	r0, [r0, #0]
 801ede0:	9301      	str	r3, [sp, #4]
 801ede2:	f7ff fca3 	bl	801e72c <_vfiprintf_r>
 801ede6:	b002      	add	sp, #8
 801ede8:	f85d eb04 	ldr.w	lr, [sp], #4
 801edec:	b003      	add	sp, #12
 801edee:	4770      	bx	lr
 801edf0:	20000dd0 	.word	0x20000dd0

0801edf4 <__swhatbuf_r>:
 801edf4:	b570      	push	{r4, r5, r6, lr}
 801edf6:	460c      	mov	r4, r1
 801edf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801edfc:	2900      	cmp	r1, #0
 801edfe:	b096      	sub	sp, #88	@ 0x58
 801ee00:	4615      	mov	r5, r2
 801ee02:	461e      	mov	r6, r3
 801ee04:	da0d      	bge.n	801ee22 <__swhatbuf_r+0x2e>
 801ee06:	89a3      	ldrh	r3, [r4, #12]
 801ee08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ee0c:	f04f 0100 	mov.w	r1, #0
 801ee10:	bf14      	ite	ne
 801ee12:	2340      	movne	r3, #64	@ 0x40
 801ee14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ee18:	2000      	movs	r0, #0
 801ee1a:	6031      	str	r1, [r6, #0]
 801ee1c:	602b      	str	r3, [r5, #0]
 801ee1e:	b016      	add	sp, #88	@ 0x58
 801ee20:	bd70      	pop	{r4, r5, r6, pc}
 801ee22:	466a      	mov	r2, sp
 801ee24:	f000 f848 	bl	801eeb8 <_fstat_r>
 801ee28:	2800      	cmp	r0, #0
 801ee2a:	dbec      	blt.n	801ee06 <__swhatbuf_r+0x12>
 801ee2c:	9901      	ldr	r1, [sp, #4]
 801ee2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ee32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ee36:	4259      	negs	r1, r3
 801ee38:	4159      	adcs	r1, r3
 801ee3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ee3e:	e7eb      	b.n	801ee18 <__swhatbuf_r+0x24>

0801ee40 <__smakebuf_r>:
 801ee40:	898b      	ldrh	r3, [r1, #12]
 801ee42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ee44:	079d      	lsls	r5, r3, #30
 801ee46:	4606      	mov	r6, r0
 801ee48:	460c      	mov	r4, r1
 801ee4a:	d507      	bpl.n	801ee5c <__smakebuf_r+0x1c>
 801ee4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ee50:	6023      	str	r3, [r4, #0]
 801ee52:	6123      	str	r3, [r4, #16]
 801ee54:	2301      	movs	r3, #1
 801ee56:	6163      	str	r3, [r4, #20]
 801ee58:	b003      	add	sp, #12
 801ee5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee5c:	ab01      	add	r3, sp, #4
 801ee5e:	466a      	mov	r2, sp
 801ee60:	f7ff ffc8 	bl	801edf4 <__swhatbuf_r>
 801ee64:	9f00      	ldr	r7, [sp, #0]
 801ee66:	4605      	mov	r5, r0
 801ee68:	4639      	mov	r1, r7
 801ee6a:	4630      	mov	r0, r6
 801ee6c:	f7fe fd46 	bl	801d8fc <_malloc_r>
 801ee70:	b948      	cbnz	r0, 801ee86 <__smakebuf_r+0x46>
 801ee72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee76:	059a      	lsls	r2, r3, #22
 801ee78:	d4ee      	bmi.n	801ee58 <__smakebuf_r+0x18>
 801ee7a:	f023 0303 	bic.w	r3, r3, #3
 801ee7e:	f043 0302 	orr.w	r3, r3, #2
 801ee82:	81a3      	strh	r3, [r4, #12]
 801ee84:	e7e2      	b.n	801ee4c <__smakebuf_r+0xc>
 801ee86:	89a3      	ldrh	r3, [r4, #12]
 801ee88:	6020      	str	r0, [r4, #0]
 801ee8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ee8e:	81a3      	strh	r3, [r4, #12]
 801ee90:	9b01      	ldr	r3, [sp, #4]
 801ee92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ee96:	b15b      	cbz	r3, 801eeb0 <__smakebuf_r+0x70>
 801ee98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ee9c:	4630      	mov	r0, r6
 801ee9e:	f000 f81d 	bl	801eedc <_isatty_r>
 801eea2:	b128      	cbz	r0, 801eeb0 <__smakebuf_r+0x70>
 801eea4:	89a3      	ldrh	r3, [r4, #12]
 801eea6:	f023 0303 	bic.w	r3, r3, #3
 801eeaa:	f043 0301 	orr.w	r3, r3, #1
 801eeae:	81a3      	strh	r3, [r4, #12]
 801eeb0:	89a3      	ldrh	r3, [r4, #12]
 801eeb2:	431d      	orrs	r5, r3
 801eeb4:	81a5      	strh	r5, [r4, #12]
 801eeb6:	e7cf      	b.n	801ee58 <__smakebuf_r+0x18>

0801eeb8 <_fstat_r>:
 801eeb8:	b538      	push	{r3, r4, r5, lr}
 801eeba:	4d07      	ldr	r5, [pc, #28]	@ (801eed8 <_fstat_r+0x20>)
 801eebc:	2300      	movs	r3, #0
 801eebe:	4604      	mov	r4, r0
 801eec0:	4608      	mov	r0, r1
 801eec2:	4611      	mov	r1, r2
 801eec4:	602b      	str	r3, [r5, #0]
 801eec6:	f7e5 f9f1 	bl	80042ac <_fstat>
 801eeca:	1c43      	adds	r3, r0, #1
 801eecc:	d102      	bne.n	801eed4 <_fstat_r+0x1c>
 801eece:	682b      	ldr	r3, [r5, #0]
 801eed0:	b103      	cbz	r3, 801eed4 <_fstat_r+0x1c>
 801eed2:	6023      	str	r3, [r4, #0]
 801eed4:	bd38      	pop	{r3, r4, r5, pc}
 801eed6:	bf00      	nop
 801eed8:	2000c68c 	.word	0x2000c68c

0801eedc <_isatty_r>:
 801eedc:	b538      	push	{r3, r4, r5, lr}
 801eede:	4d06      	ldr	r5, [pc, #24]	@ (801eef8 <_isatty_r+0x1c>)
 801eee0:	2300      	movs	r3, #0
 801eee2:	4604      	mov	r4, r0
 801eee4:	4608      	mov	r0, r1
 801eee6:	602b      	str	r3, [r5, #0]
 801eee8:	f7e5 f9f0 	bl	80042cc <_isatty>
 801eeec:	1c43      	adds	r3, r0, #1
 801eeee:	d102      	bne.n	801eef6 <_isatty_r+0x1a>
 801eef0:	682b      	ldr	r3, [r5, #0]
 801eef2:	b103      	cbz	r3, 801eef6 <_isatty_r+0x1a>
 801eef4:	6023      	str	r3, [r4, #0]
 801eef6:	bd38      	pop	{r3, r4, r5, pc}
 801eef8:	2000c68c 	.word	0x2000c68c

0801eefc <abort>:
 801eefc:	b508      	push	{r3, lr}
 801eefe:	2006      	movs	r0, #6
 801ef00:	f000 f82c 	bl	801ef5c <raise>
 801ef04:	2001      	movs	r0, #1
 801ef06:	f7e5 f981 	bl	800420c <_exit>

0801ef0a <_raise_r>:
 801ef0a:	291f      	cmp	r1, #31
 801ef0c:	b538      	push	{r3, r4, r5, lr}
 801ef0e:	4605      	mov	r5, r0
 801ef10:	460c      	mov	r4, r1
 801ef12:	d904      	bls.n	801ef1e <_raise_r+0x14>
 801ef14:	2316      	movs	r3, #22
 801ef16:	6003      	str	r3, [r0, #0]
 801ef18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ef1c:	bd38      	pop	{r3, r4, r5, pc}
 801ef1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ef20:	b112      	cbz	r2, 801ef28 <_raise_r+0x1e>
 801ef22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ef26:	b94b      	cbnz	r3, 801ef3c <_raise_r+0x32>
 801ef28:	4628      	mov	r0, r5
 801ef2a:	f000 f831 	bl	801ef90 <_getpid_r>
 801ef2e:	4622      	mov	r2, r4
 801ef30:	4601      	mov	r1, r0
 801ef32:	4628      	mov	r0, r5
 801ef34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ef38:	f000 b818 	b.w	801ef6c <_kill_r>
 801ef3c:	2b01      	cmp	r3, #1
 801ef3e:	d00a      	beq.n	801ef56 <_raise_r+0x4c>
 801ef40:	1c59      	adds	r1, r3, #1
 801ef42:	d103      	bne.n	801ef4c <_raise_r+0x42>
 801ef44:	2316      	movs	r3, #22
 801ef46:	6003      	str	r3, [r0, #0]
 801ef48:	2001      	movs	r0, #1
 801ef4a:	e7e7      	b.n	801ef1c <_raise_r+0x12>
 801ef4c:	2100      	movs	r1, #0
 801ef4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ef52:	4620      	mov	r0, r4
 801ef54:	4798      	blx	r3
 801ef56:	2000      	movs	r0, #0
 801ef58:	e7e0      	b.n	801ef1c <_raise_r+0x12>
	...

0801ef5c <raise>:
 801ef5c:	4b02      	ldr	r3, [pc, #8]	@ (801ef68 <raise+0xc>)
 801ef5e:	4601      	mov	r1, r0
 801ef60:	6818      	ldr	r0, [r3, #0]
 801ef62:	f7ff bfd2 	b.w	801ef0a <_raise_r>
 801ef66:	bf00      	nop
 801ef68:	20000dd0 	.word	0x20000dd0

0801ef6c <_kill_r>:
 801ef6c:	b538      	push	{r3, r4, r5, lr}
 801ef6e:	4d07      	ldr	r5, [pc, #28]	@ (801ef8c <_kill_r+0x20>)
 801ef70:	2300      	movs	r3, #0
 801ef72:	4604      	mov	r4, r0
 801ef74:	4608      	mov	r0, r1
 801ef76:	4611      	mov	r1, r2
 801ef78:	602b      	str	r3, [r5, #0]
 801ef7a:	f7e5 f937 	bl	80041ec <_kill>
 801ef7e:	1c43      	adds	r3, r0, #1
 801ef80:	d102      	bne.n	801ef88 <_kill_r+0x1c>
 801ef82:	682b      	ldr	r3, [r5, #0]
 801ef84:	b103      	cbz	r3, 801ef88 <_kill_r+0x1c>
 801ef86:	6023      	str	r3, [r4, #0]
 801ef88:	bd38      	pop	{r3, r4, r5, pc}
 801ef8a:	bf00      	nop
 801ef8c:	2000c68c 	.word	0x2000c68c

0801ef90 <_getpid_r>:
 801ef90:	f7e5 b924 	b.w	80041dc <_getpid>

0801ef94 <atan2>:
 801ef94:	f000 baa8 	b.w	801f4e8 <__ieee754_atan2>

0801ef98 <sqrt>:
 801ef98:	b538      	push	{r3, r4, r5, lr}
 801ef9a:	ed2d 8b02 	vpush	{d8}
 801ef9e:	ec55 4b10 	vmov	r4, r5, d0
 801efa2:	f000 f9c5 	bl	801f330 <__ieee754_sqrt>
 801efa6:	4622      	mov	r2, r4
 801efa8:	462b      	mov	r3, r5
 801efaa:	4620      	mov	r0, r4
 801efac:	4629      	mov	r1, r5
 801efae:	eeb0 8a40 	vmov.f32	s16, s0
 801efb2:	eef0 8a60 	vmov.f32	s17, s1
 801efb6:	f7e1 fdf1 	bl	8000b9c <__aeabi_dcmpun>
 801efba:	b990      	cbnz	r0, 801efe2 <sqrt+0x4a>
 801efbc:	2200      	movs	r2, #0
 801efbe:	2300      	movs	r3, #0
 801efc0:	4620      	mov	r0, r4
 801efc2:	4629      	mov	r1, r5
 801efc4:	f7e1 fdc2 	bl	8000b4c <__aeabi_dcmplt>
 801efc8:	b158      	cbz	r0, 801efe2 <sqrt+0x4a>
 801efca:	f7ff f96d 	bl	801e2a8 <__errno>
 801efce:	2321      	movs	r3, #33	@ 0x21
 801efd0:	6003      	str	r3, [r0, #0]
 801efd2:	2200      	movs	r2, #0
 801efd4:	2300      	movs	r3, #0
 801efd6:	4610      	mov	r0, r2
 801efd8:	4619      	mov	r1, r3
 801efda:	f7e1 fc6f 	bl	80008bc <__aeabi_ddiv>
 801efde:	ec41 0b18 	vmov	d8, r0, r1
 801efe2:	eeb0 0a48 	vmov.f32	s0, s16
 801efe6:	eef0 0a68 	vmov.f32	s1, s17
 801efea:	ecbd 8b02 	vpop	{d8}
 801efee:	bd38      	pop	{r3, r4, r5, pc}

0801eff0 <atan>:
 801eff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eff4:	ec55 4b10 	vmov	r4, r5, d0
 801eff8:	4bbf      	ldr	r3, [pc, #764]	@ (801f2f8 <atan+0x308>)
 801effa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801effe:	429e      	cmp	r6, r3
 801f000:	46ab      	mov	fp, r5
 801f002:	d918      	bls.n	801f036 <atan+0x46>
 801f004:	4bbd      	ldr	r3, [pc, #756]	@ (801f2fc <atan+0x30c>)
 801f006:	429e      	cmp	r6, r3
 801f008:	d801      	bhi.n	801f00e <atan+0x1e>
 801f00a:	d109      	bne.n	801f020 <atan+0x30>
 801f00c:	b144      	cbz	r4, 801f020 <atan+0x30>
 801f00e:	4622      	mov	r2, r4
 801f010:	462b      	mov	r3, r5
 801f012:	4620      	mov	r0, r4
 801f014:	4629      	mov	r1, r5
 801f016:	f7e1 f971 	bl	80002fc <__adddf3>
 801f01a:	4604      	mov	r4, r0
 801f01c:	460d      	mov	r5, r1
 801f01e:	e006      	b.n	801f02e <atan+0x3e>
 801f020:	f1bb 0f00 	cmp.w	fp, #0
 801f024:	f340 812b 	ble.w	801f27e <atan+0x28e>
 801f028:	a597      	add	r5, pc, #604	@ (adr r5, 801f288 <atan+0x298>)
 801f02a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f02e:	ec45 4b10 	vmov	d0, r4, r5
 801f032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f036:	4bb2      	ldr	r3, [pc, #712]	@ (801f300 <atan+0x310>)
 801f038:	429e      	cmp	r6, r3
 801f03a:	d813      	bhi.n	801f064 <atan+0x74>
 801f03c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801f040:	429e      	cmp	r6, r3
 801f042:	d80c      	bhi.n	801f05e <atan+0x6e>
 801f044:	a392      	add	r3, pc, #584	@ (adr r3, 801f290 <atan+0x2a0>)
 801f046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f04a:	4620      	mov	r0, r4
 801f04c:	4629      	mov	r1, r5
 801f04e:	f7e1 f955 	bl	80002fc <__adddf3>
 801f052:	4bac      	ldr	r3, [pc, #688]	@ (801f304 <atan+0x314>)
 801f054:	2200      	movs	r2, #0
 801f056:	f7e1 fd97 	bl	8000b88 <__aeabi_dcmpgt>
 801f05a:	2800      	cmp	r0, #0
 801f05c:	d1e7      	bne.n	801f02e <atan+0x3e>
 801f05e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801f062:	e029      	b.n	801f0b8 <atan+0xc8>
 801f064:	f000 f95c 	bl	801f320 <fabs>
 801f068:	4ba7      	ldr	r3, [pc, #668]	@ (801f308 <atan+0x318>)
 801f06a:	429e      	cmp	r6, r3
 801f06c:	ec55 4b10 	vmov	r4, r5, d0
 801f070:	f200 80bc 	bhi.w	801f1ec <atan+0x1fc>
 801f074:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801f078:	429e      	cmp	r6, r3
 801f07a:	f200 809e 	bhi.w	801f1ba <atan+0x1ca>
 801f07e:	4622      	mov	r2, r4
 801f080:	462b      	mov	r3, r5
 801f082:	4620      	mov	r0, r4
 801f084:	4629      	mov	r1, r5
 801f086:	f7e1 f939 	bl	80002fc <__adddf3>
 801f08a:	4b9e      	ldr	r3, [pc, #632]	@ (801f304 <atan+0x314>)
 801f08c:	2200      	movs	r2, #0
 801f08e:	f7e1 f933 	bl	80002f8 <__aeabi_dsub>
 801f092:	2200      	movs	r2, #0
 801f094:	4606      	mov	r6, r0
 801f096:	460f      	mov	r7, r1
 801f098:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801f09c:	4620      	mov	r0, r4
 801f09e:	4629      	mov	r1, r5
 801f0a0:	f7e1 f92c 	bl	80002fc <__adddf3>
 801f0a4:	4602      	mov	r2, r0
 801f0a6:	460b      	mov	r3, r1
 801f0a8:	4630      	mov	r0, r6
 801f0aa:	4639      	mov	r1, r7
 801f0ac:	f7e1 fc06 	bl	80008bc <__aeabi_ddiv>
 801f0b0:	f04f 0a00 	mov.w	sl, #0
 801f0b4:	4604      	mov	r4, r0
 801f0b6:	460d      	mov	r5, r1
 801f0b8:	4622      	mov	r2, r4
 801f0ba:	462b      	mov	r3, r5
 801f0bc:	4620      	mov	r0, r4
 801f0be:	4629      	mov	r1, r5
 801f0c0:	f7e1 fad2 	bl	8000668 <__aeabi_dmul>
 801f0c4:	4602      	mov	r2, r0
 801f0c6:	460b      	mov	r3, r1
 801f0c8:	4680      	mov	r8, r0
 801f0ca:	4689      	mov	r9, r1
 801f0cc:	f7e1 facc 	bl	8000668 <__aeabi_dmul>
 801f0d0:	a371      	add	r3, pc, #452	@ (adr r3, 801f298 <atan+0x2a8>)
 801f0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0d6:	4606      	mov	r6, r0
 801f0d8:	460f      	mov	r7, r1
 801f0da:	f7e1 fac5 	bl	8000668 <__aeabi_dmul>
 801f0de:	a370      	add	r3, pc, #448	@ (adr r3, 801f2a0 <atan+0x2b0>)
 801f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0e4:	f7e1 f90a 	bl	80002fc <__adddf3>
 801f0e8:	4632      	mov	r2, r6
 801f0ea:	463b      	mov	r3, r7
 801f0ec:	f7e1 fabc 	bl	8000668 <__aeabi_dmul>
 801f0f0:	a36d      	add	r3, pc, #436	@ (adr r3, 801f2a8 <atan+0x2b8>)
 801f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0f6:	f7e1 f901 	bl	80002fc <__adddf3>
 801f0fa:	4632      	mov	r2, r6
 801f0fc:	463b      	mov	r3, r7
 801f0fe:	f7e1 fab3 	bl	8000668 <__aeabi_dmul>
 801f102:	a36b      	add	r3, pc, #428	@ (adr r3, 801f2b0 <atan+0x2c0>)
 801f104:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f108:	f7e1 f8f8 	bl	80002fc <__adddf3>
 801f10c:	4632      	mov	r2, r6
 801f10e:	463b      	mov	r3, r7
 801f110:	f7e1 faaa 	bl	8000668 <__aeabi_dmul>
 801f114:	a368      	add	r3, pc, #416	@ (adr r3, 801f2b8 <atan+0x2c8>)
 801f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f11a:	f7e1 f8ef 	bl	80002fc <__adddf3>
 801f11e:	4632      	mov	r2, r6
 801f120:	463b      	mov	r3, r7
 801f122:	f7e1 faa1 	bl	8000668 <__aeabi_dmul>
 801f126:	a366      	add	r3, pc, #408	@ (adr r3, 801f2c0 <atan+0x2d0>)
 801f128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f12c:	f7e1 f8e6 	bl	80002fc <__adddf3>
 801f130:	4642      	mov	r2, r8
 801f132:	464b      	mov	r3, r9
 801f134:	f7e1 fa98 	bl	8000668 <__aeabi_dmul>
 801f138:	a363      	add	r3, pc, #396	@ (adr r3, 801f2c8 <atan+0x2d8>)
 801f13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f13e:	4680      	mov	r8, r0
 801f140:	4689      	mov	r9, r1
 801f142:	4630      	mov	r0, r6
 801f144:	4639      	mov	r1, r7
 801f146:	f7e1 fa8f 	bl	8000668 <__aeabi_dmul>
 801f14a:	a361      	add	r3, pc, #388	@ (adr r3, 801f2d0 <atan+0x2e0>)
 801f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f150:	f7e1 f8d2 	bl	80002f8 <__aeabi_dsub>
 801f154:	4632      	mov	r2, r6
 801f156:	463b      	mov	r3, r7
 801f158:	f7e1 fa86 	bl	8000668 <__aeabi_dmul>
 801f15c:	a35e      	add	r3, pc, #376	@ (adr r3, 801f2d8 <atan+0x2e8>)
 801f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f162:	f7e1 f8c9 	bl	80002f8 <__aeabi_dsub>
 801f166:	4632      	mov	r2, r6
 801f168:	463b      	mov	r3, r7
 801f16a:	f7e1 fa7d 	bl	8000668 <__aeabi_dmul>
 801f16e:	a35c      	add	r3, pc, #368	@ (adr r3, 801f2e0 <atan+0x2f0>)
 801f170:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f174:	f7e1 f8c0 	bl	80002f8 <__aeabi_dsub>
 801f178:	4632      	mov	r2, r6
 801f17a:	463b      	mov	r3, r7
 801f17c:	f7e1 fa74 	bl	8000668 <__aeabi_dmul>
 801f180:	a359      	add	r3, pc, #356	@ (adr r3, 801f2e8 <atan+0x2f8>)
 801f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f186:	f7e1 f8b7 	bl	80002f8 <__aeabi_dsub>
 801f18a:	4632      	mov	r2, r6
 801f18c:	463b      	mov	r3, r7
 801f18e:	f7e1 fa6b 	bl	8000668 <__aeabi_dmul>
 801f192:	4602      	mov	r2, r0
 801f194:	460b      	mov	r3, r1
 801f196:	4640      	mov	r0, r8
 801f198:	4649      	mov	r1, r9
 801f19a:	f7e1 f8af 	bl	80002fc <__adddf3>
 801f19e:	4622      	mov	r2, r4
 801f1a0:	462b      	mov	r3, r5
 801f1a2:	f7e1 fa61 	bl	8000668 <__aeabi_dmul>
 801f1a6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801f1aa:	4602      	mov	r2, r0
 801f1ac:	460b      	mov	r3, r1
 801f1ae:	d148      	bne.n	801f242 <atan+0x252>
 801f1b0:	4620      	mov	r0, r4
 801f1b2:	4629      	mov	r1, r5
 801f1b4:	f7e1 f8a0 	bl	80002f8 <__aeabi_dsub>
 801f1b8:	e72f      	b.n	801f01a <atan+0x2a>
 801f1ba:	4b52      	ldr	r3, [pc, #328]	@ (801f304 <atan+0x314>)
 801f1bc:	2200      	movs	r2, #0
 801f1be:	4620      	mov	r0, r4
 801f1c0:	4629      	mov	r1, r5
 801f1c2:	f7e1 f899 	bl	80002f8 <__aeabi_dsub>
 801f1c6:	4b4f      	ldr	r3, [pc, #316]	@ (801f304 <atan+0x314>)
 801f1c8:	4606      	mov	r6, r0
 801f1ca:	460f      	mov	r7, r1
 801f1cc:	2200      	movs	r2, #0
 801f1ce:	4620      	mov	r0, r4
 801f1d0:	4629      	mov	r1, r5
 801f1d2:	f7e1 f893 	bl	80002fc <__adddf3>
 801f1d6:	4602      	mov	r2, r0
 801f1d8:	460b      	mov	r3, r1
 801f1da:	4630      	mov	r0, r6
 801f1dc:	4639      	mov	r1, r7
 801f1de:	f7e1 fb6d 	bl	80008bc <__aeabi_ddiv>
 801f1e2:	f04f 0a01 	mov.w	sl, #1
 801f1e6:	4604      	mov	r4, r0
 801f1e8:	460d      	mov	r5, r1
 801f1ea:	e765      	b.n	801f0b8 <atan+0xc8>
 801f1ec:	4b47      	ldr	r3, [pc, #284]	@ (801f30c <atan+0x31c>)
 801f1ee:	429e      	cmp	r6, r3
 801f1f0:	d21c      	bcs.n	801f22c <atan+0x23c>
 801f1f2:	4b47      	ldr	r3, [pc, #284]	@ (801f310 <atan+0x320>)
 801f1f4:	2200      	movs	r2, #0
 801f1f6:	4620      	mov	r0, r4
 801f1f8:	4629      	mov	r1, r5
 801f1fa:	f7e1 f87d 	bl	80002f8 <__aeabi_dsub>
 801f1fe:	4b44      	ldr	r3, [pc, #272]	@ (801f310 <atan+0x320>)
 801f200:	4606      	mov	r6, r0
 801f202:	460f      	mov	r7, r1
 801f204:	2200      	movs	r2, #0
 801f206:	4620      	mov	r0, r4
 801f208:	4629      	mov	r1, r5
 801f20a:	f7e1 fa2d 	bl	8000668 <__aeabi_dmul>
 801f20e:	4b3d      	ldr	r3, [pc, #244]	@ (801f304 <atan+0x314>)
 801f210:	2200      	movs	r2, #0
 801f212:	f7e1 f873 	bl	80002fc <__adddf3>
 801f216:	4602      	mov	r2, r0
 801f218:	460b      	mov	r3, r1
 801f21a:	4630      	mov	r0, r6
 801f21c:	4639      	mov	r1, r7
 801f21e:	f7e1 fb4d 	bl	80008bc <__aeabi_ddiv>
 801f222:	f04f 0a02 	mov.w	sl, #2
 801f226:	4604      	mov	r4, r0
 801f228:	460d      	mov	r5, r1
 801f22a:	e745      	b.n	801f0b8 <atan+0xc8>
 801f22c:	4622      	mov	r2, r4
 801f22e:	462b      	mov	r3, r5
 801f230:	4938      	ldr	r1, [pc, #224]	@ (801f314 <atan+0x324>)
 801f232:	2000      	movs	r0, #0
 801f234:	f7e1 fb42 	bl	80008bc <__aeabi_ddiv>
 801f238:	f04f 0a03 	mov.w	sl, #3
 801f23c:	4604      	mov	r4, r0
 801f23e:	460d      	mov	r5, r1
 801f240:	e73a      	b.n	801f0b8 <atan+0xc8>
 801f242:	4b35      	ldr	r3, [pc, #212]	@ (801f318 <atan+0x328>)
 801f244:	4e35      	ldr	r6, [pc, #212]	@ (801f31c <atan+0x32c>)
 801f246:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f24e:	f7e1 f853 	bl	80002f8 <__aeabi_dsub>
 801f252:	4622      	mov	r2, r4
 801f254:	462b      	mov	r3, r5
 801f256:	f7e1 f84f 	bl	80002f8 <__aeabi_dsub>
 801f25a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801f25e:	4602      	mov	r2, r0
 801f260:	460b      	mov	r3, r1
 801f262:	e9d6 0100 	ldrd	r0, r1, [r6]
 801f266:	f7e1 f847 	bl	80002f8 <__aeabi_dsub>
 801f26a:	f1bb 0f00 	cmp.w	fp, #0
 801f26e:	4604      	mov	r4, r0
 801f270:	460d      	mov	r5, r1
 801f272:	f6bf aedc 	bge.w	801f02e <atan+0x3e>
 801f276:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f27a:	461d      	mov	r5, r3
 801f27c:	e6d7      	b.n	801f02e <atan+0x3e>
 801f27e:	a51c      	add	r5, pc, #112	@ (adr r5, 801f2f0 <atan+0x300>)
 801f280:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f284:	e6d3      	b.n	801f02e <atan+0x3e>
 801f286:	bf00      	nop
 801f288:	54442d18 	.word	0x54442d18
 801f28c:	3ff921fb 	.word	0x3ff921fb
 801f290:	8800759c 	.word	0x8800759c
 801f294:	7e37e43c 	.word	0x7e37e43c
 801f298:	e322da11 	.word	0xe322da11
 801f29c:	3f90ad3a 	.word	0x3f90ad3a
 801f2a0:	24760deb 	.word	0x24760deb
 801f2a4:	3fa97b4b 	.word	0x3fa97b4b
 801f2a8:	a0d03d51 	.word	0xa0d03d51
 801f2ac:	3fb10d66 	.word	0x3fb10d66
 801f2b0:	c54c206e 	.word	0xc54c206e
 801f2b4:	3fb745cd 	.word	0x3fb745cd
 801f2b8:	920083ff 	.word	0x920083ff
 801f2bc:	3fc24924 	.word	0x3fc24924
 801f2c0:	5555550d 	.word	0x5555550d
 801f2c4:	3fd55555 	.word	0x3fd55555
 801f2c8:	2c6a6c2f 	.word	0x2c6a6c2f
 801f2cc:	bfa2b444 	.word	0xbfa2b444
 801f2d0:	52defd9a 	.word	0x52defd9a
 801f2d4:	3fadde2d 	.word	0x3fadde2d
 801f2d8:	af749a6d 	.word	0xaf749a6d
 801f2dc:	3fb3b0f2 	.word	0x3fb3b0f2
 801f2e0:	fe231671 	.word	0xfe231671
 801f2e4:	3fbc71c6 	.word	0x3fbc71c6
 801f2e8:	9998ebc4 	.word	0x9998ebc4
 801f2ec:	3fc99999 	.word	0x3fc99999
 801f2f0:	54442d18 	.word	0x54442d18
 801f2f4:	bff921fb 	.word	0xbff921fb
 801f2f8:	440fffff 	.word	0x440fffff
 801f2fc:	7ff00000 	.word	0x7ff00000
 801f300:	3fdbffff 	.word	0x3fdbffff
 801f304:	3ff00000 	.word	0x3ff00000
 801f308:	3ff2ffff 	.word	0x3ff2ffff
 801f30c:	40038000 	.word	0x40038000
 801f310:	3ff80000 	.word	0x3ff80000
 801f314:	bff00000 	.word	0xbff00000
 801f318:	08021830 	.word	0x08021830
 801f31c:	08021850 	.word	0x08021850

0801f320 <fabs>:
 801f320:	ec51 0b10 	vmov	r0, r1, d0
 801f324:	4602      	mov	r2, r0
 801f326:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801f32a:	ec43 2b10 	vmov	d0, r2, r3
 801f32e:	4770      	bx	lr

0801f330 <__ieee754_sqrt>:
 801f330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f334:	4a68      	ldr	r2, [pc, #416]	@ (801f4d8 <__ieee754_sqrt+0x1a8>)
 801f336:	ec55 4b10 	vmov	r4, r5, d0
 801f33a:	43aa      	bics	r2, r5
 801f33c:	462b      	mov	r3, r5
 801f33e:	4621      	mov	r1, r4
 801f340:	d110      	bne.n	801f364 <__ieee754_sqrt+0x34>
 801f342:	4622      	mov	r2, r4
 801f344:	4620      	mov	r0, r4
 801f346:	4629      	mov	r1, r5
 801f348:	f7e1 f98e 	bl	8000668 <__aeabi_dmul>
 801f34c:	4602      	mov	r2, r0
 801f34e:	460b      	mov	r3, r1
 801f350:	4620      	mov	r0, r4
 801f352:	4629      	mov	r1, r5
 801f354:	f7e0 ffd2 	bl	80002fc <__adddf3>
 801f358:	4604      	mov	r4, r0
 801f35a:	460d      	mov	r5, r1
 801f35c:	ec45 4b10 	vmov	d0, r4, r5
 801f360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f364:	2d00      	cmp	r5, #0
 801f366:	dc0e      	bgt.n	801f386 <__ieee754_sqrt+0x56>
 801f368:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f36c:	4322      	orrs	r2, r4
 801f36e:	d0f5      	beq.n	801f35c <__ieee754_sqrt+0x2c>
 801f370:	b19d      	cbz	r5, 801f39a <__ieee754_sqrt+0x6a>
 801f372:	4622      	mov	r2, r4
 801f374:	4620      	mov	r0, r4
 801f376:	4629      	mov	r1, r5
 801f378:	f7e0 ffbe 	bl	80002f8 <__aeabi_dsub>
 801f37c:	4602      	mov	r2, r0
 801f37e:	460b      	mov	r3, r1
 801f380:	f7e1 fa9c 	bl	80008bc <__aeabi_ddiv>
 801f384:	e7e8      	b.n	801f358 <__ieee754_sqrt+0x28>
 801f386:	152a      	asrs	r2, r5, #20
 801f388:	d115      	bne.n	801f3b6 <__ieee754_sqrt+0x86>
 801f38a:	2000      	movs	r0, #0
 801f38c:	e009      	b.n	801f3a2 <__ieee754_sqrt+0x72>
 801f38e:	0acb      	lsrs	r3, r1, #11
 801f390:	3a15      	subs	r2, #21
 801f392:	0549      	lsls	r1, r1, #21
 801f394:	2b00      	cmp	r3, #0
 801f396:	d0fa      	beq.n	801f38e <__ieee754_sqrt+0x5e>
 801f398:	e7f7      	b.n	801f38a <__ieee754_sqrt+0x5a>
 801f39a:	462a      	mov	r2, r5
 801f39c:	e7fa      	b.n	801f394 <__ieee754_sqrt+0x64>
 801f39e:	005b      	lsls	r3, r3, #1
 801f3a0:	3001      	adds	r0, #1
 801f3a2:	02dc      	lsls	r4, r3, #11
 801f3a4:	d5fb      	bpl.n	801f39e <__ieee754_sqrt+0x6e>
 801f3a6:	1e44      	subs	r4, r0, #1
 801f3a8:	1b12      	subs	r2, r2, r4
 801f3aa:	f1c0 0420 	rsb	r4, r0, #32
 801f3ae:	fa21 f404 	lsr.w	r4, r1, r4
 801f3b2:	4323      	orrs	r3, r4
 801f3b4:	4081      	lsls	r1, r0
 801f3b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f3ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801f3be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f3c2:	07d2      	lsls	r2, r2, #31
 801f3c4:	bf5c      	itt	pl
 801f3c6:	005b      	lslpl	r3, r3, #1
 801f3c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801f3cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f3d0:	bf58      	it	pl
 801f3d2:	0049      	lslpl	r1, r1, #1
 801f3d4:	2600      	movs	r6, #0
 801f3d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801f3da:	106d      	asrs	r5, r5, #1
 801f3dc:	0049      	lsls	r1, r1, #1
 801f3de:	2016      	movs	r0, #22
 801f3e0:	4632      	mov	r2, r6
 801f3e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801f3e6:	1917      	adds	r7, r2, r4
 801f3e8:	429f      	cmp	r7, r3
 801f3ea:	bfde      	ittt	le
 801f3ec:	193a      	addle	r2, r7, r4
 801f3ee:	1bdb      	suble	r3, r3, r7
 801f3f0:	1936      	addle	r6, r6, r4
 801f3f2:	0fcf      	lsrs	r7, r1, #31
 801f3f4:	3801      	subs	r0, #1
 801f3f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801f3fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f3fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f402:	d1f0      	bne.n	801f3e6 <__ieee754_sqrt+0xb6>
 801f404:	4604      	mov	r4, r0
 801f406:	2720      	movs	r7, #32
 801f408:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801f40c:	429a      	cmp	r2, r3
 801f40e:	eb00 0e0c 	add.w	lr, r0, ip
 801f412:	db02      	blt.n	801f41a <__ieee754_sqrt+0xea>
 801f414:	d113      	bne.n	801f43e <__ieee754_sqrt+0x10e>
 801f416:	458e      	cmp	lr, r1
 801f418:	d811      	bhi.n	801f43e <__ieee754_sqrt+0x10e>
 801f41a:	f1be 0f00 	cmp.w	lr, #0
 801f41e:	eb0e 000c 	add.w	r0, lr, ip
 801f422:	da42      	bge.n	801f4aa <__ieee754_sqrt+0x17a>
 801f424:	2800      	cmp	r0, #0
 801f426:	db40      	blt.n	801f4aa <__ieee754_sqrt+0x17a>
 801f428:	f102 0801 	add.w	r8, r2, #1
 801f42c:	1a9b      	subs	r3, r3, r2
 801f42e:	458e      	cmp	lr, r1
 801f430:	bf88      	it	hi
 801f432:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801f436:	eba1 010e 	sub.w	r1, r1, lr
 801f43a:	4464      	add	r4, ip
 801f43c:	4642      	mov	r2, r8
 801f43e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801f442:	3f01      	subs	r7, #1
 801f444:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801f448:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f44c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801f450:	d1dc      	bne.n	801f40c <__ieee754_sqrt+0xdc>
 801f452:	4319      	orrs	r1, r3
 801f454:	d01b      	beq.n	801f48e <__ieee754_sqrt+0x15e>
 801f456:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801f4dc <__ieee754_sqrt+0x1ac>
 801f45a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801f4e0 <__ieee754_sqrt+0x1b0>
 801f45e:	e9da 0100 	ldrd	r0, r1, [sl]
 801f462:	e9db 2300 	ldrd	r2, r3, [fp]
 801f466:	f7e0 ff47 	bl	80002f8 <__aeabi_dsub>
 801f46a:	e9da 8900 	ldrd	r8, r9, [sl]
 801f46e:	4602      	mov	r2, r0
 801f470:	460b      	mov	r3, r1
 801f472:	4640      	mov	r0, r8
 801f474:	4649      	mov	r1, r9
 801f476:	f7e1 fb73 	bl	8000b60 <__aeabi_dcmple>
 801f47a:	b140      	cbz	r0, 801f48e <__ieee754_sqrt+0x15e>
 801f47c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801f480:	e9da 0100 	ldrd	r0, r1, [sl]
 801f484:	e9db 2300 	ldrd	r2, r3, [fp]
 801f488:	d111      	bne.n	801f4ae <__ieee754_sqrt+0x17e>
 801f48a:	3601      	adds	r6, #1
 801f48c:	463c      	mov	r4, r7
 801f48e:	1072      	asrs	r2, r6, #1
 801f490:	0863      	lsrs	r3, r4, #1
 801f492:	07f1      	lsls	r1, r6, #31
 801f494:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801f498:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801f49c:	bf48      	it	mi
 801f49e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801f4a2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801f4a6:	4618      	mov	r0, r3
 801f4a8:	e756      	b.n	801f358 <__ieee754_sqrt+0x28>
 801f4aa:	4690      	mov	r8, r2
 801f4ac:	e7be      	b.n	801f42c <__ieee754_sqrt+0xfc>
 801f4ae:	f7e0 ff25 	bl	80002fc <__adddf3>
 801f4b2:	e9da 8900 	ldrd	r8, r9, [sl]
 801f4b6:	4602      	mov	r2, r0
 801f4b8:	460b      	mov	r3, r1
 801f4ba:	4640      	mov	r0, r8
 801f4bc:	4649      	mov	r1, r9
 801f4be:	f7e1 fb45 	bl	8000b4c <__aeabi_dcmplt>
 801f4c2:	b120      	cbz	r0, 801f4ce <__ieee754_sqrt+0x19e>
 801f4c4:	1ca0      	adds	r0, r4, #2
 801f4c6:	bf08      	it	eq
 801f4c8:	3601      	addeq	r6, #1
 801f4ca:	3402      	adds	r4, #2
 801f4cc:	e7df      	b.n	801f48e <__ieee754_sqrt+0x15e>
 801f4ce:	1c63      	adds	r3, r4, #1
 801f4d0:	f023 0401 	bic.w	r4, r3, #1
 801f4d4:	e7db      	b.n	801f48e <__ieee754_sqrt+0x15e>
 801f4d6:	bf00      	nop
 801f4d8:	7ff00000 	.word	0x7ff00000
 801f4dc:	20000e28 	.word	0x20000e28
 801f4e0:	20000e20 	.word	0x20000e20
 801f4e4:	00000000 	.word	0x00000000

0801f4e8 <__ieee754_atan2>:
 801f4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f4ec:	ec57 6b11 	vmov	r6, r7, d1
 801f4f0:	4273      	negs	r3, r6
 801f4f2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801f670 <__ieee754_atan2+0x188>
 801f4f6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801f4fa:	4333      	orrs	r3, r6
 801f4fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801f500:	4543      	cmp	r3, r8
 801f502:	ec51 0b10 	vmov	r0, r1, d0
 801f506:	4635      	mov	r5, r6
 801f508:	d809      	bhi.n	801f51e <__ieee754_atan2+0x36>
 801f50a:	4244      	negs	r4, r0
 801f50c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801f510:	4304      	orrs	r4, r0
 801f512:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801f516:	4544      	cmp	r4, r8
 801f518:	468e      	mov	lr, r1
 801f51a:	4681      	mov	r9, r0
 801f51c:	d907      	bls.n	801f52e <__ieee754_atan2+0x46>
 801f51e:	4632      	mov	r2, r6
 801f520:	463b      	mov	r3, r7
 801f522:	f7e0 feeb 	bl	80002fc <__adddf3>
 801f526:	ec41 0b10 	vmov	d0, r0, r1
 801f52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f52e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801f532:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801f536:	4334      	orrs	r4, r6
 801f538:	d103      	bne.n	801f542 <__ieee754_atan2+0x5a>
 801f53a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f53e:	f7ff bd57 	b.w	801eff0 <atan>
 801f542:	17bc      	asrs	r4, r7, #30
 801f544:	f004 0402 	and.w	r4, r4, #2
 801f548:	ea53 0909 	orrs.w	r9, r3, r9
 801f54c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801f550:	d107      	bne.n	801f562 <__ieee754_atan2+0x7a>
 801f552:	2c02      	cmp	r4, #2
 801f554:	d05f      	beq.n	801f616 <__ieee754_atan2+0x12e>
 801f556:	2c03      	cmp	r4, #3
 801f558:	d1e5      	bne.n	801f526 <__ieee754_atan2+0x3e>
 801f55a:	a141      	add	r1, pc, #260	@ (adr r1, 801f660 <__ieee754_atan2+0x178>)
 801f55c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f560:	e7e1      	b.n	801f526 <__ieee754_atan2+0x3e>
 801f562:	4315      	orrs	r5, r2
 801f564:	d106      	bne.n	801f574 <__ieee754_atan2+0x8c>
 801f566:	f1be 0f00 	cmp.w	lr, #0
 801f56a:	da5f      	bge.n	801f62c <__ieee754_atan2+0x144>
 801f56c:	a13e      	add	r1, pc, #248	@ (adr r1, 801f668 <__ieee754_atan2+0x180>)
 801f56e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f572:	e7d8      	b.n	801f526 <__ieee754_atan2+0x3e>
 801f574:	4542      	cmp	r2, r8
 801f576:	d10f      	bne.n	801f598 <__ieee754_atan2+0xb0>
 801f578:	4293      	cmp	r3, r2
 801f57a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801f57e:	d107      	bne.n	801f590 <__ieee754_atan2+0xa8>
 801f580:	2c02      	cmp	r4, #2
 801f582:	d84c      	bhi.n	801f61e <__ieee754_atan2+0x136>
 801f584:	4b34      	ldr	r3, [pc, #208]	@ (801f658 <__ieee754_atan2+0x170>)
 801f586:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f58a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f58e:	e7ca      	b.n	801f526 <__ieee754_atan2+0x3e>
 801f590:	2c02      	cmp	r4, #2
 801f592:	d848      	bhi.n	801f626 <__ieee754_atan2+0x13e>
 801f594:	4b31      	ldr	r3, [pc, #196]	@ (801f65c <__ieee754_atan2+0x174>)
 801f596:	e7f6      	b.n	801f586 <__ieee754_atan2+0x9e>
 801f598:	4543      	cmp	r3, r8
 801f59a:	d0e4      	beq.n	801f566 <__ieee754_atan2+0x7e>
 801f59c:	1a9b      	subs	r3, r3, r2
 801f59e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801f5a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f5a6:	da1e      	bge.n	801f5e6 <__ieee754_atan2+0xfe>
 801f5a8:	2f00      	cmp	r7, #0
 801f5aa:	da01      	bge.n	801f5b0 <__ieee754_atan2+0xc8>
 801f5ac:	323c      	adds	r2, #60	@ 0x3c
 801f5ae:	db1e      	blt.n	801f5ee <__ieee754_atan2+0x106>
 801f5b0:	4632      	mov	r2, r6
 801f5b2:	463b      	mov	r3, r7
 801f5b4:	f7e1 f982 	bl	80008bc <__aeabi_ddiv>
 801f5b8:	ec41 0b10 	vmov	d0, r0, r1
 801f5bc:	f7ff feb0 	bl	801f320 <fabs>
 801f5c0:	f7ff fd16 	bl	801eff0 <atan>
 801f5c4:	ec51 0b10 	vmov	r0, r1, d0
 801f5c8:	2c01      	cmp	r4, #1
 801f5ca:	d013      	beq.n	801f5f4 <__ieee754_atan2+0x10c>
 801f5cc:	2c02      	cmp	r4, #2
 801f5ce:	d015      	beq.n	801f5fc <__ieee754_atan2+0x114>
 801f5d0:	2c00      	cmp	r4, #0
 801f5d2:	d0a8      	beq.n	801f526 <__ieee754_atan2+0x3e>
 801f5d4:	a318      	add	r3, pc, #96	@ (adr r3, 801f638 <__ieee754_atan2+0x150>)
 801f5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5da:	f7e0 fe8d 	bl	80002f8 <__aeabi_dsub>
 801f5de:	a318      	add	r3, pc, #96	@ (adr r3, 801f640 <__ieee754_atan2+0x158>)
 801f5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5e4:	e014      	b.n	801f610 <__ieee754_atan2+0x128>
 801f5e6:	a118      	add	r1, pc, #96	@ (adr r1, 801f648 <__ieee754_atan2+0x160>)
 801f5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f5ec:	e7ec      	b.n	801f5c8 <__ieee754_atan2+0xe0>
 801f5ee:	2000      	movs	r0, #0
 801f5f0:	2100      	movs	r1, #0
 801f5f2:	e7e9      	b.n	801f5c8 <__ieee754_atan2+0xe0>
 801f5f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f5f8:	4619      	mov	r1, r3
 801f5fa:	e794      	b.n	801f526 <__ieee754_atan2+0x3e>
 801f5fc:	a30e      	add	r3, pc, #56	@ (adr r3, 801f638 <__ieee754_atan2+0x150>)
 801f5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f602:	f7e0 fe79 	bl	80002f8 <__aeabi_dsub>
 801f606:	4602      	mov	r2, r0
 801f608:	460b      	mov	r3, r1
 801f60a:	a10d      	add	r1, pc, #52	@ (adr r1, 801f640 <__ieee754_atan2+0x158>)
 801f60c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f610:	f7e0 fe72 	bl	80002f8 <__aeabi_dsub>
 801f614:	e787      	b.n	801f526 <__ieee754_atan2+0x3e>
 801f616:	a10a      	add	r1, pc, #40	@ (adr r1, 801f640 <__ieee754_atan2+0x158>)
 801f618:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f61c:	e783      	b.n	801f526 <__ieee754_atan2+0x3e>
 801f61e:	a10c      	add	r1, pc, #48	@ (adr r1, 801f650 <__ieee754_atan2+0x168>)
 801f620:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f624:	e77f      	b.n	801f526 <__ieee754_atan2+0x3e>
 801f626:	2000      	movs	r0, #0
 801f628:	2100      	movs	r1, #0
 801f62a:	e77c      	b.n	801f526 <__ieee754_atan2+0x3e>
 801f62c:	a106      	add	r1, pc, #24	@ (adr r1, 801f648 <__ieee754_atan2+0x160>)
 801f62e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f632:	e778      	b.n	801f526 <__ieee754_atan2+0x3e>
 801f634:	f3af 8000 	nop.w
 801f638:	33145c07 	.word	0x33145c07
 801f63c:	3ca1a626 	.word	0x3ca1a626
 801f640:	54442d18 	.word	0x54442d18
 801f644:	400921fb 	.word	0x400921fb
 801f648:	54442d18 	.word	0x54442d18
 801f64c:	3ff921fb 	.word	0x3ff921fb
 801f650:	54442d18 	.word	0x54442d18
 801f654:	3fe921fb 	.word	0x3fe921fb
 801f658:	08021888 	.word	0x08021888
 801f65c:	08021870 	.word	0x08021870
 801f660:	54442d18 	.word	0x54442d18
 801f664:	c00921fb 	.word	0xc00921fb
 801f668:	54442d18 	.word	0x54442d18
 801f66c:	bff921fb 	.word	0xbff921fb
 801f670:	7ff00000 	.word	0x7ff00000

0801f674 <_init>:
 801f674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f676:	bf00      	nop
 801f678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f67a:	bc08      	pop	{r3}
 801f67c:	469e      	mov	lr, r3
 801f67e:	4770      	bx	lr

0801f680 <_fini>:
 801f680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f682:	bf00      	nop
 801f684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f686:	bc08      	pop	{r3}
 801f688:	469e      	mov	lr, r3
 801f68a:	4770      	bx	lr
